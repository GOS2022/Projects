
GOS2022_bootloader2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001900c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  080191e0  080191e0  0001a1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af30  0801af30  0001d3c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801af30  0801af30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af38  0801af38  0001d3c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af38  0801af38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af3c  0801af3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013c0  20000000  0801af40  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008188  200013c0  0801c300  0001d3c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20009548  0801c300  0001d548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d3c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8c2  00000000  00000000  0001d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008a85  00000000  00000000  00048cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  00051738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aad  00000000  00000000  00053b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004ed66  00000000  00000000  000555dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041a92  00000000  00000000  000a4343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0cf9  00000000  00000000  000e5dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d6ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c14  00000000  00000000  001d6b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001e0728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200013c0 	.word	0x200013c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080191c4 	.word	0x080191c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200013c4 	.word	0x200013c4
 800020c:	080191c4 	.word	0x080191c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8000ede:	2355      	movs	r3, #85	@ 0x55
 8000ee0:	71fb      	strb	r3, [r7, #7]
     * Function code.
     */
    // Low-level initialization.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
    		"HAL library initialization",
			HAL_Init() == HAL_OK ? GOS_SUCCESS : GOS_ERROR
 8000ee2:	f000 fe1f 	bl	8001b24 <HAL_Init>
 8000ee6:	4603      	mov	r3, r0
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <gos_platformDriverInit+0x18>
 8000eec:	2355      	movs	r3, #85	@ 0x55
 8000eee:	e000      	b.n	8000ef2 <gos_platformDriverInit+0x1a>
 8000ef0:	23ae      	movs	r3, #174	@ 0xae
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <gos_platformDriverInit+0xb4>)
 8000ef6:	f000 fdb1 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4013      	ands	r3, r2
 8000f02:	71fb      	strb	r3, [r7, #7]
    );

    // Driver initialization.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("Driver initialization", driver_init());
 8000f04:	f000 fb2a 	bl	800155c <driver_init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4820      	ldr	r0, [pc, #128]	@ (8000f90 <gos_platformDriverInit+0xb8>)
 8000f0e:	f000 fda5 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	71fb      	strb	r3, [r7, #7]

    // Register kernel drivers.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("Kernel driver registration", gos_driverInit(&driverFunctions));
 8000f1c:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <gos_platformDriverInit+0xbc>)
 8000f1e:	f00f f887 	bl	8010030 <gos_driverInit>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4619      	mov	r1, r3
 8000f26:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <gos_platformDriverInit+0xc0>)
 8000f28:	f000 fd98 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4013      	ands	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]

    SysTick->VAL = 0;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <gos_platformDriverInit+0xc4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <gos_platformDriverInit+0xc4>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
}
 8000f44:	bf00      	nop

    __enable_irq();

    // Initialize bootloader.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("PDH board-specific initialization", app_pdhBdSpecInit());
 8000f46:	f000 f95b 	bl	8001200 <app_pdhBdSpecInit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <gos_platformDriverInit+0xc8>)
 8000f50:	f000 fd84 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	71fb      	strb	r3, [r7, #7]
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("APP bootloader initialization", app_bld_init());
 8000f5e:	f000 f83f 	bl	8000fe0 <app_bld_init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	480f      	ldr	r0, [pc, #60]	@ (8000fa4 <gos_platformDriverInit+0xcc>)
 8000f68:	f000 fd78 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4013      	ands	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b55      	cmp	r3, #85	@ 0x55
 8000f7a:	d001      	beq.n	8000f80 <gos_platformDriverInit+0xa8>
	{
    	platformDriverInitResult = GOS_ERROR;
 8000f7c:	23ae      	movs	r3, #174	@ 0xae
 8000f7e:	71fb      	strb	r3, [r7, #7]
	}

	return platformDriverInitResult;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	080191e0 	.word	0x080191e0
 8000f90:	080191fc 	.word	0x080191fc
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08019214 	.word	0x08019214
 8000f9c:	e000e010 	.word	0xe000e010
 8000fa0:	08019230 	.word	0x08019230
 8000fa4:	08019254 	.word	0x08019254

08000fa8 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t appInitResult = GOS_SUCCESS;
 8000fae:	2355      	movs	r3, #85	@ 0x55
 8000fb0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Flush trace entries.
    trace_driverFlushTraceEntries();
 8000fb2:	f000 fd87 	bl	8001ac4 <trace_driverFlushTraceEntries>

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8000fb6:	f00c fc61 	bl	800d87c <svl_dsmInit>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	71fb      	strb	r3, [r7, #7]

	// Enable WiFi module.
	(void_t) drv_gpioWritePin(IO_WEMOS_RST, GPIO_STATE_HIGH);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f009 fe56 	bl	800ac78 <drv_gpioWritePin>

	if (appInitResult != GOS_SUCCESS)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b55      	cmp	r3, #85	@ 0x55
 8000fd0:	d001      	beq.n	8000fd6 <gos_userApplicationInit+0x2e>
	{
		appInitResult = GOS_ERROR;
 8000fd2:	23ae      	movs	r3, #174	@ 0xae
 8000fd4:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <app_bld_init>:

/*
 * Function: app_bld_init
 */
gos_result_t app_bld_init (void_t)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8000fe6:	2355      	movs	r3, #85	@ 0x55
 8000fe8:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Update build date.
	gos_libGetBuildDate(&bldVerInfo.date.years, &bldVerInfo.date.months, &bldVerInfo.date.days);
 8000fea:	4a28      	ldr	r2, [pc, #160]	@ (800108c <app_bld_init+0xac>)
 8000fec:	4928      	ldr	r1, [pc, #160]	@ (8001090 <app_bld_init+0xb0>)
 8000fee:	4829      	ldr	r0, [pc, #164]	@ (8001094 <app_bld_init+0xb4>)
 8000ff0:	f008 f832 	bl	8009058 <gos_libGetBuildDate>

	if (bld_initData(&bldVerInfo) == GOS_SUCCESS)
 8000ff4:	4828      	ldr	r0, [pc, #160]	@ (8001098 <app_bld_init+0xb8>)
 8000ff6:	f008 fb83 	bl	8009700 <bld_initData>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b55      	cmp	r3, #85	@ 0x55
 8000ffe:	d13d      	bne.n	800107c <app_bld_init+0x9c>
	{
		(void_t) bld_initConfig();
 8001000:	f008 fc32 	bl	8009868 <bld_initConfig>
		(void_t) svl_pdhGetBldCfg(&bldCfg);
 8001004:	4825      	ldr	r0, [pc, #148]	@ (800109c <app_bld_init+0xbc>)
 8001006:	f00d fdbb 	bl	800eb80 <svl_pdhGetBldCfg>
		(void_t) svl_pdhGetSwInfo(&swInfo);
 800100a:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <app_bld_init+0xc0>)
 800100c:	f00d fd48 	bl	800eaa0 <svl_pdhGetSwInfo>
		(void_t) bld_printConfig();
 8001010:	f008 fc7c 	bl	800990c <bld_printConfig>

		if ((bldCfg.updateMode == GOS_TRUE) || (bldCfg.installRequested == GOS_TRUE))
 8001014:	4b21      	ldr	r3, [pc, #132]	@ (800109c <app_bld_init+0xbc>)
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	2b36      	cmp	r3, #54	@ 0x36
 800101a:	d003      	beq.n	8001024 <app_bld_init+0x44>
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <app_bld_init+0xbc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b36      	cmp	r3, #54	@ 0x36
 8001022:	d10f      	bne.n	8001044 <app_bld_init+0x64>
		{
			// Increase startup counter (so next startup will skip boot mode enter).
			bldCfg.startupCounter++;
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <app_bld_init+0xbc>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <app_bld_init+0xbc>)
 800102e:	715a      	strb	r2, [r3, #5]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001030:	481a      	ldr	r0, [pc, #104]	@ (800109c <app_bld_init+0xbc>)
 8001032:	f00d fe85 	bl	800ed40 <svl_pdhSetBldCfg>

			// IPL shall only be initialized if update is requested.
			if (bldCfg.updateMode == GOS_TRUE)
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <app_bld_init+0xbc>)
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	2b36      	cmp	r3, #54	@ 0x36
 800103c:	d120      	bne.n	8001080 <app_bld_init+0xa0>
			{
				(void_t) svl_iplInit();
 800103e:	f00c fff7 	bl	800e030 <svl_iplInit>
			if (bldCfg.updateMode == GOS_TRUE)
 8001042:	e01d      	b.n	8001080 <app_bld_init+0xa0>
		}
		else
		{
			// Reset startup counter so next startup will enter boot mode if startup connection wait
			// flag is set.
			bldCfg.startupCounter = 0u;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <app_bld_init+0xbc>)
 8001046:	2200      	movs	r2, #0
 8001048:	715a      	strb	r2, [r3, #5]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <app_bld_init+0xbc>)
 800104c:	f00d fe78 	bl	800ed40 <svl_pdhSetBldCfg>

			// Check and jump to application.
			if (bld_checkApplication(&swInfo.appBinaryInfo, GOS_FALSE) == GOS_SUCCESS)
 8001050:	2149      	movs	r1, #73	@ 0x49
 8001052:	4814      	ldr	r0, [pc, #80]	@ (80010a4 <app_bld_init+0xc4>)
 8001054:	f008 fa60 	bl	8009518 <bld_checkApplication>
 8001058:	4603      	mov	r3, r0
 800105a:	2b55      	cmp	r3, #85	@ 0x55
 800105c:	d104      	bne.n	8001068 <app_bld_init+0x88>
			{
				initResult = bld_jumpToApplication();
 800105e:	f008 fa9d 	bl	800959c <bld_jumpToApplication>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e00b      	b.n	8001080 <app_bld_init+0xa0>
			}
			else
			{
				// Application is corrupted or missing.
				// Switch to boot update mode.
				(void_t) gos_traceTraceFormattedUnsafe("Switching to update mode...\r\n\r\n");
 8001068:	480f      	ldr	r0, [pc, #60]	@ (80010a8 <app_bld_init+0xc8>)
 800106a:	f014 fee7 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
				bldCfg.updateMode = GOS_TRUE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <app_bld_init+0xbc>)
 8001070:	2236      	movs	r2, #54	@ 0x36
 8001072:	711a      	strb	r2, [r3, #4]
				(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001074:	4809      	ldr	r0, [pc, #36]	@ (800109c <app_bld_init+0xbc>)
 8001076:	f00d fe63 	bl	800ed40 <svl_pdhSetBldCfg>
 800107a:	e001      	b.n	8001080 <app_bld_init+0xa0>
		}
	}
	else
	{
		// Flash read error.
		initResult = GOS_ERROR;
 800107c:	23ae      	movs	r3, #174	@ 0xae
 800107e:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 8001080:	79fb      	ldrb	r3, [r7, #7]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000027 	.word	0x20000027
 8001090:	20000029 	.word	0x20000029
 8001094:	2000002a 	.word	0x2000002a
 8001098:	2000001c 	.word	0x2000001c
 800109c:	200013dc 	.word	0x200013dc
 80010a0:	200013ec 	.word	0x200013ec
 80010a4:	20001680 	.word	0x20001680
 80010a8:	08019274 	.word	0x08019274

080010ac <app_bldTaskInit>:

/*
 * Function: app_bldTaskInit
 */
gos_result_t app_bldTaskInit (void_t)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t bldTaskInitResult = GOS_SUCCESS;
 80010b2:	2355      	movs	r3, #85	@ 0x55
 80010b4:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	bldTaskInitResult &= gos_taskRegister(&bldTaskDesc, NULL);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <app_bldTaskInit+0x30>)
 80010ba:	f010 f9a7 	bl	801140c <gos_taskRegister>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4013      	ands	r3, r2
 80010c6:	71fb      	strb	r3, [r7, #7]

	if (bldTaskInitResult != GOS_SUCCESS)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b55      	cmp	r3, #85	@ 0x55
 80010cc:	d001      	beq.n	80010d2 <app_bldTaskInit+0x26>
	{
		bldTaskInitResult = GOS_ERROR;
 80010ce:	23ae      	movs	r3, #174	@ 0xae
 80010d0:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Initialization OK.
	}

	return bldTaskInitResult;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000bc 	.word	0x200000bc

080010e0 <app_bldTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t app_bldTask (void_t)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	bld_state_t bldState;
	bool_t      iplInited = GOS_FALSE;
 80010e6:	2349      	movs	r3, #73	@ 0x49
 80010e8:	73fb      	strb	r3, [r7, #15]
	u32_t       sysTicks = gos_kernelGetSysTicks();
 80010ea:	f00f f96b 	bl	80103c4 <gos_kernelGetSysTicks>
 80010ee:	60b8      	str	r0, [r7, #8]

	// Initial setting.
	drv_rtcTimeGet(&time, NULL);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4820      	ldr	r0, [pc, #128]	@ (8001174 <app_bldTask+0x94>)
 80010f4:	f000 fa88 	bl	8001608 <drv_rtcTimeGet>
	gos_timeSet(&time);
 80010f8:	481e      	ldr	r0, [pc, #120]	@ (8001174 <app_bldTask+0x94>)
 80010fa:	f014 f8e3 	bl	80152c4 <gos_timeSet>
    /*
     * Function code.
     */
    for (;;)
    {
    	(void_t) bld_stateMachineGetState(&bldState);
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	4618      	mov	r0, r3
 8001102:	f007 fffb 	bl	80090fc <bld_stateMachineGetState>

    	switch (bldState)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d010      	beq.n	800112e <app_bldTask+0x4e>
 800110c:	2b01      	cmp	r3, #1
 800110e:	d115      	bne.n	800113c <app_bldTask+0x5c>
    	{
    		case BLD_STATE_WAIT:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 8001110:	2000      	movs	r0, #0
 8001112:	f009 fde9 	bl	800ace8 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(500);
 8001116:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800111a:	f010 fb09 	bl	8011730 <gos_taskSleep>

    	        if (iplInited == GOS_FALSE)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b49      	cmp	r3, #73	@ 0x49
 8001122:	d112      	bne.n	800114a <app_bldTask+0x6a>
    	        {
    	        	(void_t) svl_iplInit();
 8001124:	f00c ff84 	bl	800e030 <svl_iplInit>
    	        	iplInited = GOS_TRUE;
 8001128:	2336      	movs	r3, #54	@ 0x36
 800112a:	73fb      	strb	r3, [r7, #15]
    	        }
    	        else
    	        {
    	        	// IPL already initialized.
    	        }
    			break;
 800112c:	e00d      	b.n	800114a <app_bldTask+0x6a>
    		}
    		case BLD_STATE_INSTALL:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 800112e:	2000      	movs	r0, #0
 8001130:	f009 fdda 	bl	800ace8 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(250);
 8001134:	20fa      	movs	r0, #250	@ 0xfa
 8001136:	f010 fafb 	bl	8011730 <gos_taskSleep>
    	        break;
 800113a:	e007      	b.n	800114c <app_bldTask+0x6c>
    		}
    		default:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 800113c:	2000      	movs	r0, #0
 800113e:	f009 fdd3 	bl	800ace8 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(100);
 8001142:	2064      	movs	r0, #100	@ 0x64
 8001144:	f010 faf4 	bl	8011730 <gos_taskSleep>
    	        break;
 8001148:	e000      	b.n	800114c <app_bldTask+0x6c>
    			break;
 800114a:	bf00      	nop
    		}
    	}

    	if ((gos_kernelGetSysTicks() - sysTicks) > 1000)
 800114c:	f00f f93a 	bl	80103c4 <gos_kernelGetSysTicks>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800115a:	d9d0      	bls.n	80010fe <app_bldTask+0x1e>
    	{
    		sysTicks = gos_kernelGetSysTicks();
 800115c:	f00f f932 	bl	80103c4 <gos_kernelGetSysTicks>
 8001160:	60b8      	str	r0, [r7, #8]
    		drv_rtcTimeGet(&time, NULL);
 8001162:	2100      	movs	r1, #0
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <app_bldTask+0x94>)
 8001166:	f000 fa4f 	bl	8001608 <drv_rtcTimeGet>
    		gos_timeSet(&time);
 800116a:	4802      	ldr	r0, [pc, #8]	@ (8001174 <app_bldTask+0x94>)
 800116c:	f014 f8aa 	bl	80152c4 <gos_timeSet>
    	(void_t) bld_stateMachineGetState(&bldState);
 8001170:	e7c5      	b.n	80010fe <app_bldTask+0x1e>
 8001172:	bf00      	nop
 8001174:	2000168c 	.word	0x2000168c

08001178 <app_iplBdSpecInit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout);
GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout);

gos_result_t app_iplBdSpecInit (void_t)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	return svl_iplConfigure(app_iplBdSpecTransmit, app_iplBdSpecReceive);
 800117c:	4903      	ldr	r1, [pc, #12]	@ (800118c <app_iplBdSpecInit+0x14>)
 800117e:	4804      	ldr	r0, [pc, #16]	@ (8001190 <app_iplBdSpecInit+0x18>)
 8001180:	f00c ff96 	bl	800e0b0 <svl_iplConfigure>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	080011bd 	.word	0x080011bd
 8001190:	08001195 	.word	0x08001195

08001194 <app_iplBdSpecTransmit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	return drv_uartTransmitIT(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68f9      	ldr	r1, [r7, #12]
 80011ac:	2003      	movs	r0, #3
 80011ae:	f00b fd67 	bl	800cc80 <drv_uartTransmitIT>
 80011b2:	4603      	mov	r3, r0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <app_iplBdSpecReceive>:

GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	if (timeout < 0xFFFFFFFFu)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ce:	d008      	beq.n	80011e2 <app_iplBdSpecReceive+0x26>
	{
		return drv_uartReceiveBlocking(DRV_UART_INSTANCE_4, pData, dataSize, timeout);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	2003      	movs	r0, #3
 80011da:	f00b fc25 	bl	800ca28 <drv_uartReceiveBlocking>
 80011de:	4603      	mov	r3, r0
 80011e0:	e009      	b.n	80011f6 <app_iplBdSpecReceive+0x3a>
	}
	else
	{
		return drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	2003      	movs	r0, #3
 80011f0:	f00b fcd6 	bl	800cba0 <drv_uartReceiveDMA>
 80011f4:	4603      	mov	r3, r0
	}
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <app_pdhBdSpecInit>:
	.readFunction  = app_pdhBdSpecRead,
	.writeFunction = app_pdhBdSpecWrite
};

gos_result_t app_pdhBdSpecInit (void_t)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	gos_result_t pdhBdSpecInitRes = GOS_SUCCESS;
 8001206:	2355      	movs	r3, #85	@ 0x55
 8001208:	71fb      	strb	r3, [r7, #7]

	pdhBdSpecInitRes &= drv_25lc640Init((void_t*)&mem01a1_eeprom2);
 800120a:	480d      	ldr	r0, [pc, #52]	@ (8001240 <app_pdhBdSpecInit+0x40>)
 800120c:	f008 fba0 	bl	8009950 <drv_25lc640Init>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4013      	ands	r3, r2
 8001218:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= svl_pdhConfigure(&pdhCfg);
 800121a:	480a      	ldr	r0, [pc, #40]	@ (8001244 <app_pdhBdSpecInit+0x44>)
 800121c:	f00d fb98 	bl	800e950 <svl_pdhConfigure>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4013      	ands	r3, r2
 8001228:	71fb      	strb	r3, [r7, #7]

	if (pdhBdSpecInitRes != GOS_SUCCESS)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b55      	cmp	r3, #85	@ 0x55
 800122e:	d001      	beq.n	8001234 <app_pdhBdSpecInit+0x34>
		pdhBdSpecInitRes = GOS_ERROR;
 8001230:	23ae      	movs	r3, #174	@ 0xae
 8001232:	71fb      	strb	r3, [r7, #7]

	return pdhBdSpecInitRes;
 8001234:	79fb      	ldrb	r3, [r7, #7]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000128 	.word	0x20000128
 8001244:	20000144 	.word	0x20000144

08001248 <app_pdhBdSpecRead>:

GOS_STATIC gos_result_t app_pdhBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Read((void_t*)&mem01a1_eeprom2, address, pData, size);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b299      	uxth	r1, r3
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <app_pdhBdSpecRead+0x28>)
 8001260:	f008 fba4 	bl	80099ac <drv_25lc640Read>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000128 	.word	0x20000128

08001274 <app_pdhBdSpecWrite>:

GOS_STATIC gos_result_t app_pdhBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	4613      	mov	r3, r2
 8001280:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Write((void_t*)&mem01a1_eeprom2, address, pData, size);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	b299      	uxth	r1, r3
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <app_pdhBdSpecWrite+0x28>)
 800128c:	f008 fca8 	bl	8009be0 <drv_25lc640Write>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000128 	.word	0x20000128

080012a0 <app_sdhBdSpecInit>:
	.readFunction  = app_sdhBdSpecRead,
	.writeFunction = app_sdhBdSpecWrite
};

gos_result_t app_sdhBdSpecInit (void_t)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	gos_result_t sdhBdSpecInitRes = GOS_SUCCESS;
 80012a6:	2355      	movs	r3, #85	@ 0x55
 80012a8:	71fb      	strb	r3, [r7, #7]

	sdhBdSpecInitRes &= drv_w25q64Init((void_t*)&mem01a1flash);
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <app_sdhBdSpecInit+0x40>)
 80012ac:	f00b ffea 	bl	800d284 <drv_w25q64Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4013      	ands	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
	sdhBdSpecInitRes &= svl_sdhConfigure(&sdhCfg);
 80012ba:	480a      	ldr	r0, [pc, #40]	@ (80012e4 <app_sdhBdSpecInit+0x44>)
 80012bc:	f00e f8c6 	bl	800f44c <svl_sdhConfigure>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4013      	ands	r3, r2
 80012c8:	71fb      	strb	r3, [r7, #7]

	if (sdhBdSpecInitRes != GOS_SUCCESS)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b55      	cmp	r3, #85	@ 0x55
 80012ce:	d001      	beq.n	80012d4 <app_sdhBdSpecInit+0x34>
		sdhBdSpecInitRes = GOS_ERROR;
 80012d0:	23ae      	movs	r3, #174	@ 0xae
 80012d2:	71fb      	strb	r3, [r7, #7]

	return sdhBdSpecInitRes;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000014c 	.word	0x2000014c
 80012e4:	20000168 	.word	0x20000168

080012e8 <app_sdhBdSpecRead>:

GOS_STATIC gos_result_t app_sdhBdSpecRead (u32_t address, u8_t* pData, u32_t size)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	drv_w25q64ReadData((void_t*)&mem01a1flash, address, pData, size);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	4808      	ldr	r0, [pc, #32]	@ (800131c <app_sdhBdSpecRead+0x34>)
 80012fc:	f00b fff0 	bl	800d2e0 <drv_w25q64ReadData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_READ) == 0u)
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <app_sdhBdSpecRead+0x34>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <app_sdhBdSpecRead+0x28>
	{
		return GOS_SUCCESS;
 800130c:	2355      	movs	r3, #85	@ 0x55
 800130e:	e000      	b.n	8001312 <app_sdhBdSpecRead+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001310:	23ae      	movs	r3, #174	@ 0xae
	}
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000014c 	.word	0x2000014c

08001320 <app_sdhBdSpecWrite>:

GOS_STATIC gos_result_t app_sdhBdSpecWrite (u32_t address, u8_t* pData, u32_t size)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	drv_w25q64WriteData((void_t*)&mem01a1flash, address, pData, size);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	4808      	ldr	r0, [pc, #32]	@ (8001354 <app_sdhBdSpecWrite+0x34>)
 8001334:	f00c f82a 	bl	800d38c <drv_w25q64WriteData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_WRITE) == 0u)
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <app_sdhBdSpecWrite+0x34>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <app_sdhBdSpecWrite+0x28>
	{
		return GOS_SUCCESS;
 8001344:	2355      	movs	r3, #85	@ 0x55
 8001346:	e000      	b.n	800134a <app_sdhBdSpecWrite+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001348:	23ae      	movs	r3, #174	@ 0xae
	}
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000014c 	.word	0x2000014c

08001358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	return 1;
 800135c:	2301      	movs	r3, #1
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_kill>:

int _kill(int pid, int sig)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001372:	f015 fea7 	bl	80170c4 <__errno>
 8001376:	4603      	mov	r3, r0
 8001378:	2216      	movs	r2, #22
 800137a:	601a      	str	r2, [r3, #0]
	return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_exit>:

void _exit (int status)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ffe7 	bl	8001368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800139a:	bf00      	nop
 800139c:	e7fd      	b.n	800139a <_exit+0x12>

0800139e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e00a      	b.n	80013c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b0:	f3af 8000 	nop.w
 80013b4:	4601      	mov	r1, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf0      	blt.n	80013b0 <_read+0x12>
	}

return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e009      	b.n	80013fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbf1      	blt.n	80013ea <_write+0x12>
	}
	return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_close>:

int _close(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001438:	605a      	str	r2, [r3, #4]
	return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_isatty>:

int _isatty(int file)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f015 fe0c 	bl	80170c4 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20001698 	.word	0x20001698
 80014e0:	20009548 	.word	0x20009548

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800150c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	@ (8001548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr  r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd7 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f015 fdcb 	bl	80170d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f011 fcd7 	bl	8012eec <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001544:	0801af40 	.word	0x0801af40
  ldr  r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800154c:	200013c0 	.word	0x200013c0
  ldr  r2, =_sbss
 8001550:	200013c0 	.word	0x200013c0
  ldr  r3, = _ebss
 8001554:	20009548 	.word	0x20009548

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8001562:	2355      	movs	r3, #85	@ 0x55
 8001564:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 8001566:	f000 f8cb 	bl	8001700 <rcc_driver_init>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4013      	ands	r3, r2
 8001572:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 8001574:	f00a fd44 	bl	800c000 <drv_tmrInit>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4013      	ands	r3, r2
 8001580:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 8001582:	f00a fcff 	bl	800bf84 <drv_systimerStart>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4013      	ands	r3, r2
 800158e:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 8001590:	f009 faae 	bl	800aaf0 <drv_gpioInit>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4013      	ands	r3, r2
 800159c:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_i2cInit();
 800159e:	f009 fcbb 	bl	800af18 <drv_i2cInit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	4013      	ands	r3, r2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_spiInit();
 80015b0:	f00a f864 	bl	800b67c <drv_spiInit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4013      	ands	r3, r2
 80015bc:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_dmaInit();
 80015be:	f008 fcb7 	bl	8009f30 <drv_dmaInit>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4013      	ands	r3, r2
 80015ca:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 80015cc:	f00b f890 	bl	800c6f0 <drv_uartInit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4013      	ands	r3, r2
 80015d8:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 80015da:	f009 ffb5 	bl	800b548 <drv_itInit>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4013      	ands	r3, r2
 80015e6:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <driver_init+0x9c>)
 80015ea:	f00e fe97 	bl	801031c <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	080015fd 	.word	0x080015fd

080015fc <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001600:	f000 fb1c 	bl	8001c3c <HAL_IncTick>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <drv_rtcTimeGet>:

/*
 * Function: drv_rtcTimeGet
 */
gos_result_t drv_rtcTimeGet (gos_time_t* pTime, u8_t* dow)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t getTimeResult = GOS_ERROR;
 8001612:	23ae      	movs	r3, #174	@ 0xae
 8001614:	73fb      	strb	r3, [r7, #15]
	u8_t         time [7];

	/*
	 * Function code.
	 */
	if (pTime != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d053      	beq.n	80016c4 <drv_rtcTimeGet+0xbc>
	{
		getTimeResult = drv_i2cMemRead(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 100);
 800161c:	2364      	movs	r3, #100	@ 0x64
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2307      	movs	r3, #7
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	2200      	movs	r2, #0
 8001634:	21d0      	movs	r1, #208	@ 0xd0
 8001636:	2000      	movs	r0, #0
 8001638:	f009 fda6 	bl	800b188 <drv_i2cMemRead>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]

		if (getTimeResult == GOS_SUCCESS)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b55      	cmp	r3, #85	@ 0x55
 8001644:	d13e      	bne.n	80016c4 <drv_rtcTimeGet+0xbc>
		{
			pTime->seconds = drv_rtcBcd2dec(time[0]);
 8001646:	7a3b      	ldrb	r3, [r7, #8]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f840 	bl	80016ce <drv_rtcBcd2dec>
 800164e:	4603      	mov	r3, r0
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	709a      	strb	r2, [r3, #2]
			pTime->minutes = drv_rtcBcd2dec(time[1]);
 8001656:	7a7b      	ldrb	r3, [r7, #9]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f838 	bl	80016ce <drv_rtcBcd2dec>
 800165e:	4603      	mov	r3, r0
 8001660:	b2da      	uxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	70da      	strb	r2, [r3, #3]
			pTime->hours   = drv_rtcBcd2dec(time[2]);
 8001666:	7abb      	ldrb	r3, [r7, #10]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f830 	bl	80016ce <drv_rtcBcd2dec>
 800166e:	4603      	mov	r3, r0
 8001670:	b2da      	uxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	711a      	strb	r2, [r3, #4]
			if (dow != NULL)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <drv_rtcTimeGet+0x84>
			{
				*dow = drv_rtcBcd2dec(time[3]);
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f825 	bl	80016ce <drv_rtcBcd2dec>
 8001684:	4603      	mov	r3, r0
 8001686:	b2da      	uxtb	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	701a      	strb	r2, [r3, #0]
			}
			pTime->days    = drv_rtcBcd2dec(time[4]);
 800168c:	7b3b      	ldrb	r3, [r7, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f81d 	bl	80016ce <drv_rtcBcd2dec>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8a3 2005 	strh.w	r2, [r3, #5]
			pTime->months  = drv_rtcBcd2dec(time[5]);
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f814 	bl	80016ce <drv_rtcBcd2dec>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	71da      	strb	r2, [r3, #7]
			pTime->years   = 2000 + drv_rtcBcd2dec(time[6]);
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f80c 	bl	80016ce <drv_rtcBcd2dec>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	811a      	strh	r2, [r3, #8]
	else
	{
		// NULL pointer.
	}

	return getTimeResult;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <drv_rtcBcd2dec>:
	return (u8_t)((dec / 10 * 16) + (dec % 10));
}

// TODO
GOS_STATIC u32_t drv_rtcBcd2dec (u8_t bcd)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	return (u32_t)((bcd / 16 * 10) + (bcd % 16));
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	461a      	mov	r2, r3
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4413      	add	r3, r2
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ac      	sub	sp, #176	@ 0xb0
 8001704:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8001706:	23ae      	movs	r3, #174	@ 0xae
 8001708:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001710:	2234      	movs	r2, #52	@ 0x34
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f015 fc73 	bl	8017000 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	663b      	str	r3, [r7, #96]	@ 0x60
 800172e:	4ba3      	ldr	r3, [pc, #652]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4aa2      	ldr	r2, [pc, #648]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4ba0      	ldr	r3, [pc, #640]	@ (80019bc <rcc_driver_init+0x2bc>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	663b      	str	r3, [r7, #96]	@ 0x60
 8001744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001746:	2300      	movs	r3, #0
 8001748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800174a:	4b9d      	ldr	r3, [pc, #628]	@ (80019c0 <rcc_driver_init+0x2c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001752:	4a9b      	ldr	r2, [pc, #620]	@ (80019c0 <rcc_driver_init+0x2c0>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b99      	ldr	r3, [pc, #612]	@ (80019c0 <rcc_driver_init+0x2c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001762:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001766:	2301      	movs	r3, #1
 8001768:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800176e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_OscInitStruct.PLL.PLLM = 4;
 800177e:	2304      	movs	r3, #4
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001784:	2332      	movs	r3, #50	@ 0x32
 8001786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 800179c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fe85 	bl	80054b0 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d116      	bne.n	80017da <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	667b      	str	r3, [r7, #100]	@ 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b0:	2302      	movs	r3, #2
 80017b2:	66bb      	str	r3, [r7, #104]	@ 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017bc:	673b      	str	r3, [r7, #112]	@ 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	677b      	str	r3, [r7, #116]	@ 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 80017c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017c6:	2101      	movs	r1, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fa2f 	bl	8004c2c <HAL_RCC_ClockConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 80017d4:	2355      	movs	r3, #85	@ 0x55
 80017d6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017de:	4b77      	ldr	r3, [pc, #476]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a76      	ldr	r2, [pc, #472]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80017fa:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b6d      	ldr	r3, [pc, #436]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	653b      	str	r3, [r7, #80]	@ 0x50
 8001816:	4b69      	ldr	r3, [pc, #420]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a68      	ldr	r2, [pc, #416]	@ (80019bc <rcc_driver_init+0x2bc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	653b      	str	r3, [r7, #80]	@ 0x50
 800182c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001832:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a61      	ldr	r2, [pc, #388]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b5f      	ldr	r3, [pc, #380]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800184e:	4b5b      	ldr	r3, [pc, #364]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a5a      	ldr	r2, [pc, #360]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b58      	ldr	r3, [pc, #352]	@ (80019bc <rcc_driver_init+0x2bc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
 800186a:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <rcc_driver_init+0x2bc>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a53      	ldr	r2, [pc, #332]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b51      	ldr	r3, [pc, #324]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	643b      	str	r3, [r7, #64]	@ 0x40
 8001886:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a4c      	ldr	r2, [pc, #304]	@ (80019bc <rcc_driver_init+0x2bc>)
 800188c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
 800189c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a2:	4b46      	ldr	r3, [pc, #280]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a45      	ldr	r2, [pc, #276]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018be:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a3e      	ldr	r2, [pc, #248]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b3c      	ldr	r3, [pc, #240]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a37      	ldr	r2, [pc, #220]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
 800190c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <rcc_driver_init+0x2bc>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <rcc_driver_init+0x2bc>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <rcc_driver_init+0x2bc>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001988:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <rcc_driver_init+0x2bc>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	4a06      	ldr	r2, [pc, #24]	@ (80019bc <rcc_driver_init+0x2bc>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019aa:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <rcc_driver_init+0x2bc>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e003      	b.n	80019c4 <rcc_driver_init+0x2c4>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <rcc_driver_init+0x358>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <rcc_driver_init+0x358>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <rcc_driver_init+0x358>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <rcc_driver_init+0x358>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <rcc_driver_init+0x358>)
 80019e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <rcc_driver_init+0x358>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <rcc_driver_init+0x358>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

	return initResult;
 8001a4c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	37b0      	adds	r7, #176	@ 0xb0
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800

08001a5c <trace_driverEnqueueTraceMessage>:

GOS_STATIC trace_entry_t traceEntries [TRACE_ENTRY_MAX_NUM];
GOS_STATIC u8_t          nextEntryIndex = 0u;

gos_result_t trace_driverEnqueueTraceMessage (const char_t* message, gos_result_t result)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	if (nextEntryIndex < TRACE_ENTRY_MAX_NUM)
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0b      	cmp	r3, #11
 8001a6e:	d820      	bhi.n	8001ab2 <trace_driverEnqueueTraceMessage+0x56>
	{
		(void_t) strcpy(traceEntries[nextEntryIndex].message, message);
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	00da      	lsls	r2, r3, #3
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <trace_driverEnqueueTraceMessage+0x64>)
 8001a82:	4413      	add	r3, r2
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f015 fb49 	bl	801711e <strcpy>
		traceEntries[nextEntryIndex].result = result;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	490b      	ldr	r1, [pc, #44]	@ (8001ac0 <trace_driverEnqueueTraceMessage+0x64>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	00da      	lsls	r2, r3, #3
 8001a9c:	1ad2      	subs	r2, r2, r3
 8001a9e:	188b      	adds	r3, r1, r2
 8001aa0:	3330      	adds	r3, #48	@ 0x30
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	701a      	strb	r2, [r3, #0]
		nextEntryIndex++;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	else
	{
		// Trace queue full.
	}

	return result;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200018f0 	.word	0x200018f0
 8001ac0:	200016a4 	.word	0x200016a4

08001ac4 <trace_driverFlushTraceEntries>:

void_t trace_driverFlushTraceEntries (void_t)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	u8_t traceIndex = 0u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	71fb      	strb	r3, [r7, #7]

	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	e017      	b.n	8001b04 <trace_driverFlushTraceEntries+0x40>
	{
		(void_t) gos_errorTraceInit(traceEntries[traceIndex].message, traceEntries[traceIndex].result);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	00da      	lsls	r2, r3, #3
 8001ade:	1ad2      	subs	r2, r2, r3
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <trace_driverFlushTraceEntries+0x58>)
 8001ae2:	18d0      	adds	r0, r2, r3
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	490d      	ldr	r1, [pc, #52]	@ (8001b1c <trace_driverFlushTraceEntries+0x58>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	00da      	lsls	r2, r3, #3
 8001af0:	1ad2      	subs	r2, r2, r3
 8001af2:	188b      	adds	r3, r1, r2
 8001af4:	3330      	adds	r3, #48	@ 0x30
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f011 fba3 	bl	8013244 <gos_errorTraceInit>
	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	3301      	adds	r3, #1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <trace_driverFlushTraceEntries+0x5c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	79fa      	ldrb	r2, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3e2      	bcc.n	8001ad4 <trace_driverFlushTraceEntries+0x10>
	}

	nextEntryIndex = 0u;
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <trace_driverFlushTraceEntries+0x5c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200016a4 	.word	0x200016a4
 8001b20:	200018f0 	.word	0x200018f0

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_Init+0x40>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_Init+0x40>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_Init+0x40>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f965 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f842 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f000 f832 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b72:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <HAL_DeInit+0x54>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_DeInit+0x54>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_DeInit+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001bb2:	f000 f80c 	bl	8001bce <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f943 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f90b 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000170 	.word	0x20000170
 8001c34:	20000404 	.word	0x20000404
 8001c38:	20000400 	.word	0x20000400

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000404 	.word	0x20000404
 8001c60:	200018f4 	.word	0x200018f4

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200018f4 	.word	0x200018f4

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	@ (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff feda 	bl	8001c64 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e099      	b.n	8001ff0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001edc:	e00f      	b.n	8001efe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ede:	f7ff fec1 	bl	8001c64 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d908      	bls.n	8001efe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e078      	b.n	8001ff0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e8      	bne.n	8001ede <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_DMA_Init+0x158>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d107      	bne.n	8001f68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	4313      	orrs	r3, r2
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 0307 	bic.w	r3, r3, #7
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d117      	bne.n	8001fc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb1b 	bl	80025e0 <DMA_CheckFifoParam>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e016      	b.n	8001ff0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fad2 	bl	8002574 <DMA_CalcBaseAndBitshift>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	223f      	movs	r2, #63	@ 0x3f
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	f010803f 	.word	0xf010803f

08001ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_DMA_Start_IT+0x26>
 800201e:	2302      	movs	r3, #2
 8002020:	e040      	b.n	80020a4 <HAL_DMA_Start_IT+0xa8>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d12f      	bne.n	8002096 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa64 	bl	8002518 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002054:	223f      	movs	r2, #63	@ 0x3f
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0216 	orr.w	r2, r2, #22
 800206a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e005      	b.n	80020a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020ba:	f7ff fdd3 	bl	8001c64 <HAL_GetTick>
 80020be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e052      	b.n	8002184 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0216 	bic.w	r2, r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <HAL_DMA_Abort+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0208 	bic.w	r2, r2, #8
 800211c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212e:	e013      	b.n	8002158 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002130:	f7ff fd98 	bl	8001c64 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b05      	cmp	r3, #5
 800213c:	d90c      	bls.n	8002158 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e015      	b.n	8002184 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e4      	bne.n	8002130 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	223f      	movs	r2, #63	@ 0x3f
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d004      	beq.n	80021aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00c      	b.n	80021c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002418 <HAL_DMA_IRQHandler+0x248>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a8e      	ldr	r2, [pc, #568]	@ (800241c <HAL_DMA_IRQHandler+0x24c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2208      	movs	r2, #8
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0204 	bic.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2208      	movs	r2, #8
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2204      	movs	r2, #4
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2204      	movs	r2, #4
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f043 0204 	orr.w	r2, r3, #4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	2210      	movs	r2, #16
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	2210      	movs	r2, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e01f      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	e016      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0208 	bic.w	r2, r2, #8
 800232e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	2220      	movs	r2, #32
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808f 	beq.w	8002470 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8087 	beq.w	8002470 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2220      	movs	r2, #32
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d136      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_DMA_IRQHandler+0x1da>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0208 	bic.w	r2, r2, #8
 80023b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	223f      	movs	r2, #63	@ 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d07e      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
        }
        return;
 80023e6:	e079      	b.n	80024dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	2b00      	cmp	r3, #0
 800240a:	d031      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e02c      	b.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
 8002416:	bf00      	nop
 8002418:	20000170 	.word	0x20000170
 800241c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d023      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
 8002430:	e01e      	b.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0210 	bic.w	r2, r2, #16
 800244e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	2b00      	cmp	r3, #0
 8002476:	d032      	beq.n	80024de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d022      	beq.n	80024ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2205      	movs	r2, #5
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3301      	adds	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d307      	bcc.n	80024b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f2      	bne.n	800249c <HAL_DMA_IRQHandler+0x2cc>
 80024b6:	e000      	b.n	80024ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024b8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x30e>
        return;
 80024dc:	bf00      	nop
    }
  }
}
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f2:	b2db      	uxtb	r3, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002534:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d108      	bne.n	8002558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002556:	e007      	b.n	8002568 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	60da      	str	r2, [r3, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3b10      	subs	r3, #16
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800258e:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <DMA_CalcBaseAndBitshift+0x68>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d909      	bls.n	80025b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	1d1a      	adds	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80025b4:	e007      	b.n	80025c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	aaaaaaab 	.word	0xaaaaaaab
 80025dc:	0801a9f0 	.word	0x0801a9f0

080025e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11f      	bne.n	800263a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d856      	bhi.n	80026ae <DMA_CheckFifoParam+0xce>
 8002600:	a201      	add	r2, pc, #4	@ (adr r2, 8002608 <DMA_CheckFifoParam+0x28>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	0800262b 	.word	0x0800262b
 8002610:	08002619 	.word	0x08002619
 8002614:	080026af 	.word	0x080026af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d046      	beq.n	80026b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e043      	b.n	80026b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002632:	d140      	bne.n	80026b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002638:	e03d      	b.n	80026b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002642:	d121      	bne.n	8002688 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d837      	bhi.n	80026ba <DMA_CheckFifoParam+0xda>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <DMA_CheckFifoParam+0x70>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002667 	.word	0x08002667
 8002658:	08002661 	.word	0x08002661
 800265c:	08002679 	.word	0x08002679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e030      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d025      	beq.n	80026be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002676:	e022      	b.n	80026be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002680:	d11f      	bne.n	80026c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002686:	e01c      	b.n	80026c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d903      	bls.n	8002696 <DMA_CheckFifoParam+0xb6>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d003      	beq.n	800269c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002694:	e018      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      break;
 800269a:	e015      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e00b      	b.n	80026c6 <DMA_CheckFifoParam+0xe6>
      break;
 80026ae:	bf00      	nop
 80026b0:	e00a      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e008      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e006      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e004      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026c6:	bf00      	nop
    }
  } 
  
  return status; 
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop

080026d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026ea:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_FLASH_Program+0xa0>)
 80026ec:	7e1b      	ldrb	r3, [r3, #24]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_FLASH_Program+0x1e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e03b      	b.n	800276e <HAL_FLASH_Program+0x96>
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_FLASH_Program+0xa0>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002700:	f000 f870 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d12b      	bne.n	8002766 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002714:	783b      	ldrb	r3, [r7, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	68b8      	ldr	r0, [r7, #8]
 800271a:	f000 f91b 	bl	8002954 <FLASH_Program_Byte>
 800271e:	e016      	b.n	800274e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002726:	883b      	ldrh	r3, [r7, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f000 f8ee 	bl	800290c <FLASH_Program_HalfWord>
 8002730:	e00d      	b.n	800274e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d105      	bne.n	8002744 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	68b8      	ldr	r0, [r7, #8]
 800273e:	f000 f8c3 	bl	80028c8 <FLASH_Program_Word>
 8002742:	e004      	b.n	800274e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f000 f88b 	bl	8002864 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800274e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002752:	f000 f847 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800275a:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_FLASH_Program+0xa4>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4a07      	ldr	r2, [pc, #28]	@ (800277c <HAL_FLASH_Program+0xa4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002766:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_FLASH_Program+0xa0>)
 8002768:	2200      	movs	r2, #0
 800276a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800276c:	7dfb      	ldrb	r3, [r7, #23]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200018f8 	.word	0x200018f8
 800277c:	40023c00 	.word	0x40023c00

08002780 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da0b      	bge.n	80027aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 8002794:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_FLASH_Unlock+0x3c>)
 8002796:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 800279a:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <HAL_FLASH_Unlock+0x40>)
 800279c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da01      	bge.n	80027aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40023c00 	.word	0x40023c00
 80027bc:	45670123 	.word	0x45670123
 80027c0:	cdef89ab 	.word	0xcdef89ab

080027c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_FLASH_Lock+0x1c>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_FLASH_Lock+0x1c>)
 80027ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <FLASH_WaitForLastOperation+0x78>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027f6:	f7ff fa35 	bl	8001c64 <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027fc:	e010      	b.n	8002820 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d00c      	beq.n	8002820 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <FLASH_WaitForLastOperation+0x38>
 800280c:	f7ff fa2a 	bl	8001c64 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d201      	bcs.n	8002820 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e019      	b.n	8002854 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e8      	bne.n	80027fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 800283a:	2201      	movs	r2, #1
 800283c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800284a:	f000 f8a5 	bl	8002998 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
  
}  
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200018f8 	.word	0x200018f8
 8002860:	40023c00 	.word	0x40023c00

08002864 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 8002876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 8002882:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800289a:	f3bf 8f6f 	isb	sy
}
 800289e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80028a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	000a      	movs	r2, r1
 80028ae:	2300      	movs	r3, #0
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	3104      	adds	r1, #4
 80028b4:	4613      	mov	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40023c00 	.word	0x40023c00

0800290c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 800291e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002930:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	801a      	strh	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00

08002954 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <FLASH_Program_Byte+0x40>)
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <FLASH_Program_Byte+0x40>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	701a      	strb	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800299c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80029b4:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029b6:	2210      	movs	r2, #16
 80029b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80029ba:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80029c6:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	4a24      	ldr	r2, [pc, #144]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029d4:	2220      	movs	r2, #32
 80029d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80029d8:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a02:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a0c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a0e:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a10:	2280      	movs	r2, #128	@ 0x80
 8002a12:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a32:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	60da      	str	r2, [r3, #12]
  }
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40023c00 	.word	0x40023c00
 8002a60:	200018f8 	.word	0x200018f8

08002a64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a76:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_FLASHEx_Erase+0xd8>)
 8002a78:	7e1b      	ldrb	r3, [r3, #24]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_FLASHEx_Erase+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e058      	b.n	8002b34 <HAL_FLASHEx_Erase+0xd0>
 8002a82:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_FLASHEx_Erase+0xd8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a8c:	f7ff feaa 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d148      	bne.n	8002b2c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d115      	bne.n	8002ad6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 f844 	bl	8002b44 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002abc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ac0:	f7ff fe90 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	6113      	str	r3, [r2, #16]
 8002ad4:	e028      	b.n	8002b28 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	e01c      	b.n	8002b18 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f000 f850 	bl	8002b8c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002af0:	f7ff fe78 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002afe:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002b02:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	601a      	str	r2, [r3, #0]
          break;
 8002b10:	e00a      	b.n	8002b28 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3da      	bcc.n	8002ade <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002b28:	f000 f878 	bl	8002c1c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_FLASHEx_Erase+0xd8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	761a      	strb	r2, [r3, #24]

  return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200018f8 	.word	0x200018f8
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b50:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b78:	6113      	str	r3, [r2, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00

08002b8c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e010      	b.n	8002bca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d103      	bne.n	8002bb6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e009      	b.n	8002bca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d103      	bne.n	8002bc4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e002      	b.n	8002bca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002bc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bca:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	490f      	ldr	r1, [pc, #60]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002be8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002bec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	4a07      	ldr	r2, [pc, #28]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6113      	str	r3, [r2, #16]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002c20:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c32:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c36:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c4e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c72:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a07      	ldr	r2, [pc, #28]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c8a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c96:	6013      	str	r3, [r2, #0]
  }
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e165      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8154 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d00b      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf6:	2b11      	cmp	r3, #17
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d130      	bne.n	8002d64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 0201 	and.w	r2, r3, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0xfc>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ae 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a58      	ldr	r2, [pc, #352]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_GPIO_Init+0x308>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x21a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb8 <HAL_GPIO_Init+0x310>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x212>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <HAL_GPIO_Init+0x314>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc0 <HAL_GPIO_Init+0x318>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x20a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_GPIO_Init+0x31c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x206>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	@ (8002fc8 <HAL_GPIO_Init+0x320>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x202>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f06:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f36:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae96 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fec:	e003      	b.n	8002ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	041a      	lsls	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	401a      	ands	r2, r3
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	429a      	cmp	r2, r3
 800301a:	d104      	bne.n	8003026 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	041a      	lsls	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003024:	e002      	b.n	800302c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	4618      	mov	r0, r3
 8003058:	f007 ff02 	bl	800ae60 <HAL_GPIO_EXTI_Callback>
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e12b      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f008 f9da 	bl	800b448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030cc:	f001 fea0 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a81      	ldr	r2, [pc, #516]	@ (80032dc <HAL_I2C_Init+0x274>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d807      	bhi.n	80030ec <HAL_I2C_Init+0x84>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a80      	ldr	r2, [pc, #512]	@ (80032e0 <HAL_I2C_Init+0x278>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e006      	b.n	80030fa <HAL_I2C_Init+0x92>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a7d      	ldr	r2, [pc, #500]	@ (80032e4 <HAL_I2C_Init+0x27c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e7      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a78      	ldr	r2, [pc, #480]	@ (80032e8 <HAL_I2C_Init+0x280>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a6a      	ldr	r2, [pc, #424]	@ (80032dc <HAL_I2C_Init+0x274>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d802      	bhi.n	800313c <HAL_I2C_Init+0xd4>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	e009      	b.n	8003150 <HAL_I2C_Init+0xe8>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a69      	ldr	r2, [pc, #420]	@ (80032ec <HAL_I2C_Init+0x284>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	3301      	adds	r3, #1
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	495c      	ldr	r1, [pc, #368]	@ (80032dc <HAL_I2C_Init+0x274>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d819      	bhi.n	80031a4 <HAL_I2C_Init+0x13c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fbb1 f3f3 	udiv	r3, r1, r3
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003184:	400b      	ands	r3, r1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_I2C_Init+0x138>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e59      	subs	r1, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	e051      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e04f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <HAL_I2C_Init+0x168>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e012      	b.n	80031f6 <HAL_I2C_Init+0x18e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x196>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e022      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_I2C_Init+0x1bc>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e58      	subs	r0, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003222:	e00f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	6809      	ldr	r1, [r1, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6911      	ldr	r1, [r2, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	003d08ff 	.word	0x003d08ff
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e021      	b.n	8003346 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2224      	movs	r2, #36	@ 0x24
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f817 	bl	800334e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	f040 809a 	bne.w	80034c4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003390:	4b50      	ldr	r3, [pc, #320]	@ (80034d4 <HAL_I2C_Mem_Read_IT+0x170>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_I2C_Mem_Read_IT+0x174>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	0a1a      	lsrs	r2, r3, #8
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009a      	lsls	r2, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d116      	bne.n	80033e4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e070      	b.n	80034c6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d0db      	beq.n	80033aa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_I2C_Mem_Read_IT+0x9c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e062      	b.n	80034c6 <HAL_I2C_Mem_Read_IT+0x162>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d007      	beq.n	8003426 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003434:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	@ 0x22
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2240      	movs	r2, #64	@ 0x40
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <HAL_I2C_Mem_Read_IT+0x178>)
 8003466:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003468:	897a      	ldrh	r2, [r7, #10]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800346e:	893a      	ldrh	r2, [r7, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800348e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80034be:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000170 	.word	0x20000170
 80034d8:	14f8b589 	.word	0x14f8b589
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d138      	bne.n	8003574 <HAL_I2C_Master_Abort_IT+0x94>
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b10      	cmp	r3, #16
 8003506:	d135      	bne.n	8003574 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Master_Abort_IT+0x36>
 8003512:	2302      	movs	r3, #2
 8003514:	e02f      	b.n	8003576 <HAL_I2C_Master_Abort_IT+0x96>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2260      	movs	r2, #96	@ 0x60
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003560:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f001 f936 	bl	80047dc <I2C_ITError>

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b088      	sub	sp, #32
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800359e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d003      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x38>
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	f040 80ad 	bne.w	8003710 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_I2C_EV_IRQHandler+0x6e>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035d6:	d003      	beq.n	80035e0 <HAL_I2C_EV_IRQHandler+0x62>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_EV_IRQHandler+0x66>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_I2C_EV_IRQHandler+0x68>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f000 8110 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x90>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f001 faf7 	bl	8004bf4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fc76 	bl	8003ef8 <I2C_Master_SB>
 800360c:	e07f      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0xac>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fcee 	bl	8004004 <I2C_Master_ADD10>
 8003628:	e071      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0xc8>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fd0a 	bl	8004058 <I2C_Master_ADDR>
 8003644:	e063      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d032      	beq.n	80036b6 <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800365e:	f000 80d7 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_EV_IRQHandler+0x10a>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_I2C_EV_IRQHandler+0x10a>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f90b 	bl	800389c <I2C_MasterTransmit_TXE>
 8003686:	e042      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80be 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80b8 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d103      	bne.n	80036ae <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f994 	bl	80039d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ac:	e0b0      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f9f8 	bl	8003aa4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b4:	e0ac      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036c4:	f000 80a4 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x170>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x170>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa6b 	bl	8003bc2 <I2C_MasterReceive_RXNE>
 80036ec:	e00f      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 808b 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8085 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb0c 	bl	8003d24 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370c:	e080      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
 800370e:	e07f      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e007      	b.n	8003732 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x1e2>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fecc 	bl	80044f6 <I2C_Slave_ADDR>
 800375e:	e05a      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_I2C_EV_IRQHandler+0x1fe>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 ff01 	bl	800457c <I2C_Slave_STOPF>
 800377a:	e04c      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	2b21      	cmp	r3, #33	@ 0x21
 8003780:	d002      	beq.n	8003788 <HAL_I2C_EV_IRQHandler+0x20a>
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b29      	cmp	r3, #41	@ 0x29
 8003786:	d120      	bne.n	80037ca <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x230>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x230>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fde7 	bl	800437a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ac:	e032      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02d      	beq.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fe16 	bl	80043f4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c8:	e024      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x272>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x272>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fe24 	bl	8004436 <I2C_SlaveReceive_RXNE>
 80037ee:	e012      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fe54 	bl	80044b2 <I2C_SlaveReceive_BTF>
 800380a:	e004      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      return;
 800380c:	bf00      	nop
 800380e:	e002      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003814:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
 8003850:	4613      	mov	r3, r2
 8003852:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d150      	bne.n	8003964 <I2C_MasterTransmit_TXE+0xc8>
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b21      	cmp	r3, #33	@ 0x21
 80038c6:	d14d      	bne.n	8003964 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d01d      	beq.n	800390a <I2C_MasterTransmit_TXE+0x6e>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d01a      	beq.n	800390a <I2C_MasterTransmit_TXE+0x6e>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038da:	d016      	beq.n	800390a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2211      	movs	r2, #17
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f007 fcac 	bl	800b260 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003908:	e060      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003918:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003928:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d107      	bne.n	8003954 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f007 fca9 	bl	800b2a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003952:	e03b      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f007 fc7f 	bl	800b260 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003962:	e033      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b21      	cmp	r3, #33	@ 0x21
 8003968:	d005      	beq.n	8003976 <I2C_MasterTransmit_TXE+0xda>
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d12d      	bne.n	80039cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b22      	cmp	r3, #34	@ 0x22
 8003974:	d12a      	bne.n	80039cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003990:	e01c      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d103      	bne.n	80039a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f880 	bl	8003aa4 <I2C_MemoryTransmit_TXE_BTF>
}
 80039a4:	e012      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	781a      	ldrb	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039ca:	e7ff      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b21      	cmp	r3, #33	@ 0x21
 80039ec:	d156      	bne.n	8003a9c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a1c:	e03e      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d01d      	beq.n	8003a60 <I2C_MasterTransmit_BTF+0x8c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d01a      	beq.n	8003a60 <I2C_MasterTransmit_BTF+0x8c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a30:	d016      	beq.n	8003a60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2211      	movs	r2, #17
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f007 fc01 	bl	800b260 <HAL_I2C_MasterTxCpltCallback>
}
 8003a5e:	e01d      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f007 fbe2 	bl	800b260 <HAL_I2C_MasterTxCpltCallback>
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11d      	bne.n	8003af8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10b      	bne.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ada:	e06e      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	121b      	asrs	r3, r3, #8
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003af6:	e060      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10b      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b16:	e050      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d14c      	bne.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b22      	cmp	r3, #34	@ 0x22
 8003b24:	d108      	bne.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	e040      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b21      	cmp	r3, #33	@ 0x21
 8003b46:	d112      	bne.n	8003b6e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b6c:	e025      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d120      	bne.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b21      	cmp	r3, #33	@ 0x21
 8003b7c:	d11d      	bne.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b8c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f007 fb75 	bl	800b2a4 <HAL_I2C_MemTxCpltCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b22      	cmp	r3, #34	@ 0x22
 8003bd4:	f040 80a2 	bne.w	8003d1c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d921      	bls.n	8003c2a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	f040 8082 	bne.w	8003d1c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003c28:	e078      	b.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d074      	beq.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <I2C_MasterReceive_RXNE+0x7c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d16e      	bne.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 ffa6 	bl	8004b90 <I2C_WaitOnSTOPRequestThroughIT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d142      	bne.n	8003cd0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c58:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b40      	cmp	r3, #64	@ 0x40
 8003ca2:	d10a      	bne.n	8003cba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f007 fb3a 	bl	800b32c <HAL_I2C_MemRxCpltCallback>
}
 8003cb8:	e030      	b.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2212      	movs	r2, #18
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f007 fb0d 	bl	800b2e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003cce:	e025      	b.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fdac 	bl	8003874 <HAL_I2C_ErrorCallback>
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d72:	e0bd      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d129      	bne.n	8003dd2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00a      	beq.n	8003daa <I2C_MasterReceive_BTF+0x86>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d007      	beq.n	8003daa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dd0:	e08e      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d176      	bne.n	8003eca <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d002      	beq.n	8003de8 <I2C_MasterReceive_BTF+0xc4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d108      	bne.n	8003dfa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e019      	b.n	8003e2e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d002      	beq.n	8003e06 <I2C_MasterReceive_BTF+0xe2>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d108      	bne.n	8003e18 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e00a      	b.n	8003e2e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d007      	beq.n	8003e2e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e88:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b40      	cmp	r3, #64	@ 0x40
 8003e9c:	d10a      	bne.n	8003eb4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f007 fa3d 	bl	800b32c <HAL_I2C_MemRxCpltCallback>
}
 8003eb2:	e01d      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2212      	movs	r2, #18
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f007 fa10 	bl	800b2e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003ec8:	e012      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b40      	cmp	r3, #64	@ 0x40
 8003f0a:	d117      	bne.n	8003f3c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f24:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f26:	e067      	b.n	8003ff8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]
}
 8003f3a:	e05d      	b.n	8003ff8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f44:	d133      	bne.n	8003fae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b21      	cmp	r3, #33	@ 0x21
 8003f50:	d109      	bne.n	8003f66 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	e008      	b.n	8003f78 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <I2C_Master_SB+0x92>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d032      	beq.n	8003ff8 <I2C_Master_SB+0x100>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02d      	beq.n	8003ff8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003faa:	605a      	str	r2, [r3, #4]
}
 8003fac:	e024      	b.n	8003ff8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10e      	bne.n	8003fd4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	11db      	asrs	r3, r3, #7
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 0306 	and.w	r3, r3, #6
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f063 030f 	orn	r3, r3, #15
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
}
 8003fd2:	e011      	b.n	8003ff8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10d      	bne.n	8003ff8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	11db      	asrs	r3, r3, #7
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0306 	and.w	r3, r3, #6
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f063 030e 	orn	r3, r3, #14
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	b2da      	uxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <I2C_Master_ADD10+0x24>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	d011      	beq.n	800404c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <I2C_Master_ADD10+0x38>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004058:	b480      	push	{r7}
 800405a:	b091      	sub	sp, #68	@ 0x44
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004066:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b22      	cmp	r3, #34	@ 0x22
 8004080:	f040 8169 	bne.w	8004356 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <I2C_Master_ADDR+0x54>
 800408c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d10b      	bne.n	80040ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	e160      	b.n	800436e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11d      	bne.n	80040f0 <I2C_Master_ADDR+0x98>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040bc:	d118      	bne.n	80040f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80040ee:	e13e      	b.n	800436e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e115      	b.n	800434e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	f040 808a 	bne.w	8004242 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004134:	d137      	bne.n	80041a6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004154:	d113      	bne.n	800417e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	e0e7      	b.n	800434e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e0d3      	b.n	800434e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d02e      	beq.n	800420a <I2C_Master_ADDR+0x1b2>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d02b      	beq.n	800420a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	2b12      	cmp	r3, #18
 80041b6:	d102      	bne.n	80041be <I2C_Master_ADDR+0x166>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d125      	bne.n	800420a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d00e      	beq.n	80041e2 <I2C_Master_ADDR+0x18a>
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d00b      	beq.n	80041e2 <I2C_Master_ADDR+0x18a>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d008      	beq.n	80041e2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e007      	b.n	80041f2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	e0a1      	b.n	800434e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e085      	b.n	800434e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d14d      	bne.n	80042e8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	2b04      	cmp	r3, #4
 8004250:	d016      	beq.n	8004280 <I2C_Master_ADDR+0x228>
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2b02      	cmp	r3, #2
 8004256:	d013      	beq.n	8004280 <I2C_Master_ADDR+0x228>
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	2b10      	cmp	r3, #16
 800425c:	d010      	beq.n	8004280 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e007      	b.n	8004290 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800428e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429e:	d117      	bne.n	80042d0 <I2C_Master_ADDR+0x278>
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042a6:	d00b      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d008      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d005      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d002      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d107      	bne.n	80042d0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	e032      	b.n	800434e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004306:	d117      	bne.n	8004338 <I2C_Master_ADDR+0x2e0>
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800430e:	d00b      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	2b01      	cmp	r3, #1
 8004314:	d008      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	2b08      	cmp	r3, #8
 800431a:	d005      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	2b10      	cmp	r3, #16
 8004320:	d002      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b20      	cmp	r3, #32
 8004326:	d107      	bne.n	8004338 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004336:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004354:	e00b      	b.n	800436e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	e7ff      	b.n	800436e <I2C_Master_ADDR+0x316>
 800436e:	bf00      	nop
 8004370:	3744      	adds	r7, #68	@ 0x44
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004388:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02b      	beq.n	80043ec <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d114      	bne.n	80043ec <I2C_SlaveTransmit_TXE+0x72>
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b29      	cmp	r3, #41	@ 0x29
 80043c6:	d111      	bne.n	80043ec <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2221      	movs	r2, #33	@ 0x21
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2228      	movs	r2, #40	@ 0x28
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fa18 	bl	800381c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d011      	beq.n	800442a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004444:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02c      	beq.n	80044aa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d114      	bne.n	80044aa <I2C_SlaveReceive_RXNE+0x74>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b2a      	cmp	r3, #42	@ 0x2a
 8004484:	d111      	bne.n	80044aa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2222      	movs	r2, #34	@ 0x22
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2228      	movs	r2, #40	@ 0x28
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff f9c3 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d012      	beq.n	80044ea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004510:	2b28      	cmp	r3, #40	@ 0x28
 8004512:	d125      	bne.n	8004560 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004522:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	81bb      	strh	r3, [r7, #12]
 8004542:	e002      	b.n	800454a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004552:	89ba      	ldrh	r2, [r7, #12]
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f973 	bl	8003844 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800455e:	e008      	b.n	8004572 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0202 	mvn.w	r2, #2
 8004568:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800459a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d8:	d172      	bne.n	80046c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b22      	cmp	r3, #34	@ 0x22
 80045de:	d002      	beq.n	80045e6 <I2C_Slave_STOPF+0x6a>
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e4:	d135      	bne.n	8004652 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f043 0204 	orr.w	r2, r3, #4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004618:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd ff60 	bl	80024e4 <HAL_DMA_GetState>
 8004624:	4603      	mov	r3, r0
 8004626:	2b01      	cmp	r3, #1
 8004628:	d049      	beq.n	80046be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	4a69      	ldr	r2, [pc, #420]	@ (80047d4 <I2C_Slave_STOPF+0x258>)
 8004630:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fda8 	bl	800218c <HAL_DMA_Abort_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03d      	beq.n	80046be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800464c:	4610      	mov	r0, r2
 800464e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004650:	e035      	b.n	80046be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f043 0204 	orr.w	r2, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004684:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd ff2a 	bl	80024e4 <HAL_DMA_GetState>
 8004690:	4603      	mov	r3, r0
 8004692:	2b01      	cmp	r3, #1
 8004694:	d014      	beq.n	80046c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469a:	4a4e      	ldr	r2, [pc, #312]	@ (80047d4 <I2C_Slave_STOPF+0x258>)
 800469c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fd72 	bl	800218c <HAL_DMA_Abort_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046b8:	4610      	mov	r0, r2
 80046ba:	4798      	blx	r3
 80046bc:	e000      	b.n	80046c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03e      	beq.n	8004748 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d112      	bne.n	80046fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b40      	cmp	r3, #64	@ 0x40
 800470a:	d112      	bne.n	8004732 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	f043 0204 	orr.w	r2, r3, #4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f843 	bl	80047dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004756:	e039      	b.n	80047cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b2a      	cmp	r3, #42	@ 0x2a
 800475c:	d109      	bne.n	8004772 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2228      	movs	r2, #40	@ 0x28
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff f85f 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b28      	cmp	r3, #40	@ 0x28
 800477c:	d111      	bne.n	80047a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a15      	ldr	r2, [pc, #84]	@ (80047d8 <I2C_Slave_STOPF+0x25c>)
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff f860 	bl	8003860 <HAL_I2C_ListenCpltCallback>
}
 80047a0:	e014      	b.n	80047cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	2b22      	cmp	r3, #34	@ 0x22
 80047a8:	d002      	beq.n	80047b0 <I2C_Slave_STOPF+0x234>
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b22      	cmp	r3, #34	@ 0x22
 80047ae:	d10d      	bne.n	80047cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff f832 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08004a41 	.word	0x08004a41
 80047d8:	ffff0000 	.word	0xffff0000

080047dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d002      	beq.n	8004800 <I2C_ITError+0x24>
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	2b40      	cmp	r3, #64	@ 0x40
 80047fe:	d10a      	bne.n	8004816 <I2C_ITError+0x3a>
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b22      	cmp	r3, #34	@ 0x22
 8004804:	d107      	bne.n	8004816 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004814:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800481c:	2b28      	cmp	r3, #40	@ 0x28
 800481e:	d107      	bne.n	8004830 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2228      	movs	r2, #40	@ 0x28
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800482e:	e015      	b.n	800485c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800483a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483e:	d00a      	beq.n	8004856 <I2C_ITError+0x7a>
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b60      	cmp	r3, #96	@ 0x60
 8004844:	d007      	beq.n	8004856 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800486a:	d162      	bne.n	8004932 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d020      	beq.n	80048cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a38 <I2C_ITError+0x25c>)
 8004890:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fc78 	bl	800218c <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8089 	beq.w	80049b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048c6:	4610      	mov	r0, r2
 80048c8:	4798      	blx	r3
 80048ca:	e074      	b.n	80049b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	4a59      	ldr	r2, [pc, #356]	@ (8004a38 <I2C_ITError+0x25c>)
 80048d2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd fc57 	bl	800218c <HAL_DMA_Abort_IT>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d068      	beq.n	80049b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d10b      	bne.n	800490a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800492c:	4610      	mov	r0, r2
 800492e:	4798      	blx	r3
 8004930:	e041      	b.n	80049b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b60      	cmp	r3, #96	@ 0x60
 800493c:	d125      	bne.n	800498a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d10b      	bne.n	8004972 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fe ff80 	bl	8003888 <HAL_I2C_AbortCpltCallback>
 8004988:	e015      	b.n	80049b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d10b      	bne.n	80049b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fe ff5f 	bl	8003874 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d113      	bne.n	8004a30 <I2C_ITError+0x254>
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b28      	cmp	r3, #40	@ 0x28
 8004a0c:	d110      	bne.n	8004a30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <I2C_ITError+0x260>)
 8004a12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe ff18 	bl	8003860 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08004a41 	.word	0x08004a41
 8004a3c:	ffff0000 	.word	0xffff0000

08004a40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b88 <I2C_DMAAbort+0x148>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	4a4a      	ldr	r2, [pc, #296]	@ (8004b8c <I2C_DMAAbort+0x14c>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0a1a      	lsrs	r2, r3, #8
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00da      	lsls	r2, r3, #3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004a86:	e00a      	b.n	8004a9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a9c:	d0ea      	beq.n	8004a74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aaa:	2200      	movs	r2, #0
 8004aac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	2200      	movs	r2, #0
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004acc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	2200      	movs	r2, #0
 8004af2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b60      	cmp	r3, #96	@ 0x60
 8004b0e:	d10e      	bne.n	8004b2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f7fe feae 	bl	8003888 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b2c:	e027      	b.n	8004b7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b34:	2b28      	cmp	r3, #40	@ 0x28
 8004b36:	d117      	bne.n	8004b68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2228      	movs	r2, #40	@ 0x28
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b66:	e007      	b.n	8004b78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	f7fe fe7b 	bl	8003874 <HAL_I2C_ErrorCallback>
}
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000170 	.word	0x20000170
 8004b8c:	14f8b589 	.word	0x14f8b589

08004b90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b9c:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	08db      	lsrs	r3, r3, #3
 8004ba2:	4a13      	ldr	r2, [pc, #76]	@ (8004bf0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	0a1a      	lsrs	r2, r3, #8
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e008      	b.n	8004be0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bdc:	d0e9      	beq.n	8004bb2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000170 	.word	0x20000170
 8004bf0:	14f8b589 	.word	0x14f8b589

08004bf4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c04:	d103      	bne.n	8004c0e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c0c:	e007      	b.n	8004c1e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c16:	d102      	bne.n	8004c1e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0cc      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b68      	ldr	r3, [pc, #416]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d90c      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a58      	ldr	r2, [pc, #352]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d044      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d119      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b3f      	ldr	r3, [pc, #252]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e06f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e067      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4934      	ldr	r1, [pc, #208]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7fc ffa2 	bl	8001c64 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fc ff9e 	bl	8001c64 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e04f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d20c      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f855 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	@ (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fc ff02 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023c00 	.word	0x40023c00
 8004de8:	40023800 	.word	0x40023800
 8004dec:	0801a5a4 	.word	0x0801a5a4
 8004df0:	20000170 	.word	0x20000170
 8004df4:	20000400 	.word	0x20000400

08004df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000170 	.word	0x20000170

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0801a5b4 	.word	0x0801a5b4

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e3c:	f7ff ffdc 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0b5b      	lsrs	r3, r3, #13
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4903      	ldr	r1, [pc, #12]	@ (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	0801a5b4 	.word	0x0801a5b4

08004e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e64:	b0ae      	sub	sp, #184	@ 0xb8
 8004e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e86:	4bcb      	ldr	r3, [pc, #812]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	f200 8206 	bhi.w	80052a0 <HAL_RCC_GetSysClockFreq+0x440>
 8004e94:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	080052a1 	.word	0x080052a1
 8004ea4:	080052a1 	.word	0x080052a1
 8004ea8:	080052a1 	.word	0x080052a1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	080052a1 	.word	0x080052a1
 8004eb4:	080052a1 	.word	0x080052a1
 8004eb8:	080052a1 	.word	0x080052a1
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	080052a1 	.word	0x080052a1
 8004ec4:	080052a1 	.word	0x080052a1
 8004ec8:	080052a1 	.word	0x080052a1
 8004ecc:	080050d1 	.word	0x080050d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed0:	4bb9      	ldr	r3, [pc, #740]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004ed6:	e1e7      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ed8:	4bb8      	ldr	r3, [pc, #736]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ede:	e1e3      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee0:	4bb4      	ldr	r3, [pc, #720]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eec:	4bb1      	ldr	r3, [pc, #708]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d071      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef8:	4bae      	ldr	r3, [pc, #696]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	099b      	lsrs	r3, r3, #6
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	0159      	lsls	r1, r3, #5
 8004f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f30:	0150      	lsls	r0, r2, #5
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4621      	mov	r1, r4
 8004f38:	1a51      	subs	r1, r2, r1
 8004f3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f50:	4649      	mov	r1, r9
 8004f52:	018b      	lsls	r3, r1, #6
 8004f54:	4641      	mov	r1, r8
 8004f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	018a      	lsls	r2, r1, #6
 8004f5e:	4641      	mov	r1, r8
 8004f60:	1a51      	subs	r1, r2, r1
 8004f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f64:	4649      	mov	r1, r9
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f78:	4649      	mov	r1, r9
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4641      	mov	r1, r8
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f92:	462b      	mov	r3, r5
 8004f94:	460a      	mov	r2, r1
 8004f96:	eb42 0303 	adc.w	r3, r2, r3
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fa8:	4629      	mov	r1, r5
 8004faa:	024b      	lsls	r3, r1, #9
 8004fac:	4621      	mov	r1, r4
 8004fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	024a      	lsls	r2, r1, #9
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004fcc:	f7fb fe0c 	bl	8000be8 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fda:	e067      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fdc:	4b75      	ldr	r3, [pc, #468]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fe8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ffa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	0159      	lsls	r1, r3, #5
 800500c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005010:	0150      	lsls	r0, r2, #5
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4621      	mov	r1, r4
 8005018:	1a51      	subs	r1, r2, r1
 800501a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800501c:	4629      	mov	r1, r5
 800501e:	eb63 0301 	sbc.w	r3, r3, r1
 8005022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005030:	4649      	mov	r1, r9
 8005032:	018b      	lsls	r3, r1, #6
 8005034:	4641      	mov	r1, r8
 8005036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800503a:	4641      	mov	r1, r8
 800503c:	018a      	lsls	r2, r1, #6
 800503e:	4641      	mov	r1, r8
 8005040:	ebb2 0a01 	subs.w	sl, r2, r1
 8005044:	4649      	mov	r1, r9
 8005046:	eb63 0b01 	sbc.w	fp, r3, r1
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800505a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800505e:	4692      	mov	sl, r2
 8005060:	469b      	mov	fp, r3
 8005062:	4623      	mov	r3, r4
 8005064:	eb1a 0303 	adds.w	r3, sl, r3
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	462b      	mov	r3, r5
 800506c:	eb4b 0303 	adc.w	r3, fp, r3
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800507e:	4629      	mov	r1, r5
 8005080:	028b      	lsls	r3, r1, #10
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005088:	4621      	mov	r1, r4
 800508a:	028a      	lsls	r2, r1, #10
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005094:	2200      	movs	r2, #0
 8005096:	673b      	str	r3, [r7, #112]	@ 0x70
 8005098:	677a      	str	r2, [r7, #116]	@ 0x74
 800509a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800509e:	f7fb fda3 	bl	8000be8 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4613      	mov	r3, r2
 80050a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050ac:	4b41      	ldr	r3, [pc, #260]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	3301      	adds	r3, #1
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80050be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050ce:	e0eb      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d0:	4b38      	ldr	r3, [pc, #224]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050dc:	4b35      	ldr	r3, [pc, #212]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d06b      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e8:	4b32      	ldr	r3, [pc, #200]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	2200      	movs	r2, #0
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80050fc:	2300      	movs	r3, #0
 80050fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005100:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005104:	4622      	mov	r2, r4
 8005106:	462b      	mov	r3, r5
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005116:	0150      	lsls	r0, r2, #5
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4621      	mov	r1, r4
 800511e:	1a51      	subs	r1, r2, r1
 8005120:	61b9      	str	r1, [r7, #24]
 8005122:	4629      	mov	r1, r5
 8005124:	eb63 0301 	sbc.w	r3, r3, r1
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005136:	4659      	mov	r1, fp
 8005138:	018b      	lsls	r3, r1, #6
 800513a:	4651      	mov	r1, sl
 800513c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005140:	4651      	mov	r1, sl
 8005142:	018a      	lsls	r2, r1, #6
 8005144:	4651      	mov	r1, sl
 8005146:	ebb2 0801 	subs.w	r8, r2, r1
 800514a:	4659      	mov	r1, fp
 800514c:	eb63 0901 	sbc.w	r9, r3, r1
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800515c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005160:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005164:	4690      	mov	r8, r2
 8005166:	4699      	mov	r9, r3
 8005168:	4623      	mov	r3, r4
 800516a:	eb18 0303 	adds.w	r3, r8, r3
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	462b      	mov	r3, r5
 8005172:	eb49 0303 	adc.w	r3, r9, r3
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005184:	4629      	mov	r1, r5
 8005186:	024b      	lsls	r3, r1, #9
 8005188:	4621      	mov	r1, r4
 800518a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800518e:	4621      	mov	r1, r4
 8005190:	024a      	lsls	r2, r1, #9
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800519a:	2200      	movs	r2, #0
 800519c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800519e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80051a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051a4:	f7fb fd20 	bl	8000be8 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4613      	mov	r3, r2
 80051ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051b2:	e065      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x420>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c0:	4b3d      	ldr	r3, [pc, #244]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	099b      	lsrs	r3, r3, #6
 80051c6:	2200      	movs	r2, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	4611      	mov	r1, r2
 80051cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051d2:	2300      	movs	r3, #0
 80051d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80051d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	f04f 0000 	mov.w	r0, #0
 80051e2:	f04f 0100 	mov.w	r1, #0
 80051e6:	0159      	lsls	r1, r3, #5
 80051e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ec:	0150      	lsls	r0, r2, #5
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4641      	mov	r1, r8
 80051f4:	1a51      	subs	r1, r2, r1
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	4649      	mov	r1, r9
 80051fa:	eb63 0301 	sbc.w	r3, r3, r1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800520c:	4659      	mov	r1, fp
 800520e:	018b      	lsls	r3, r1, #6
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005216:	4651      	mov	r1, sl
 8005218:	018a      	lsls	r2, r1, #6
 800521a:	4651      	mov	r1, sl
 800521c:	1a54      	subs	r4, r2, r1
 800521e:	4659      	mov	r1, fp
 8005220:	eb63 0501 	sbc.w	r5, r3, r1
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	00eb      	lsls	r3, r5, #3
 800522e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005232:	00e2      	lsls	r2, r4, #3
 8005234:	4614      	mov	r4, r2
 8005236:	461d      	mov	r5, r3
 8005238:	4643      	mov	r3, r8
 800523a:	18e3      	adds	r3, r4, r3
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	464b      	mov	r3, r9
 8005240:	eb45 0303 	adc.w	r3, r5, r3
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005252:	4629      	mov	r1, r5
 8005254:	028b      	lsls	r3, r1, #10
 8005256:	4621      	mov	r1, r4
 8005258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800525c:	4621      	mov	r1, r4
 800525e:	028a      	lsls	r2, r1, #10
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005268:	2200      	movs	r2, #0
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800526e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005272:	f7fb fcb9 	bl	8000be8 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4613      	mov	r3, r2
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005280:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	0f1b      	lsrs	r3, r3, #28
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800528e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800529e:	e003      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80052a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	37b8      	adds	r7, #184	@ 0xb8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80052c6:	f7fc fccd 	bl	8001c64 <HAL_GetTick>
 80052ca:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80052cc:	4b72      	ldr	r3, [pc, #456]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a71      	ldr	r2, [pc, #452]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052da:	f7fc fcc3 	bl	8001c64 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0d0      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80052ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80052f8:	4b67      	ldr	r3, [pc, #412]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a66      	ldr	r2, [pc, #408]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005302:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005304:	f7fc fcae 	bl	8001c64 <HAL_GetTick>
 8005308:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800530a:	4b63      	ldr	r3, [pc, #396]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005312:	f7fc fca7 	bl	8001c64 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0b2      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005328:	4b5b      	ldr	r3, [pc, #364]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005334:	f7fc fc96 	bl	8001c64 <HAL_GetTick>
 8005338:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800533a:	4b57      	ldr	r3, [pc, #348]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a56      	ldr	r2, [pc, #344]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005340:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8005344:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fc fc8c 	bl	8001c64 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e099      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800535a:	4b4f      	ldr	r3, [pc, #316]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005366:	f7fc fc7d 	bl	8001c64 <HAL_GetTick>
 800536a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800536c:	4b4a      	ldr	r3, [pc, #296]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a49      	ldr	r2, [pc, #292]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005376:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fc fc73 	bl	8001c64 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e080      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800538c:	4b42      	ldr	r3, [pc, #264]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005398:	f7fc fc64 	bl	8001c64 <HAL_GetTick>
 800539c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800539e:	4b3e      	ldr	r3, [pc, #248]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ac:	f7fc fc5a 	bl	8001c64 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e067      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80053ca:	f7fc fc4b 	bl	8001c64 <HAL_GetTick>
 80053ce:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80053d0:	4b31      	ldr	r3, [pc, #196]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a30      	ldr	r2, [pc, #192]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053da:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053de:	f7fc fc41 	bl	8001c64 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e04e      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80053f0:	4b29      	ldr	r3, [pc, #164]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80053fc:	4b26      	ldr	r3, [pc, #152]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053fe:	4a27      	ldr	r2, [pc, #156]	@ (800549c <HAL_RCC_DeInit+0x1dc>)
 8005400:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005402:	4b25      	ldr	r3, [pc, #148]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005404:	4a25      	ldr	r2, [pc, #148]	@ (800549c <HAL_RCC_DeInit+0x1dc>)
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800540a:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800540c:	4a24      	ldr	r2, [pc, #144]	@ (80054a0 <HAL_RCC_DeInit+0x1e0>)
 800540e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005412:	4b21      	ldr	r3, [pc, #132]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4a20      	ldr	r2, [pc, #128]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005418:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800541c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800541e:	4b1e      	ldr	r3, [pc, #120]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005428:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800542a:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005430:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005434:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005436:	4b18      	ldr	r3, [pc, #96]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800543c:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8005440:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8005442:	4b15      	ldr	r3, [pc, #84]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4a14      	ldr	r2, [pc, #80]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800544c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4a11      	ldr	r2, [pc, #68]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005454:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005458:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800545a:	4b0f      	ldr	r3, [pc, #60]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800545c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800545e:	4a0e      	ldr	r2, [pc, #56]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546a:	4a0b      	ldr	r2, [pc, #44]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800546c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005470:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <HAL_RCC_DeInit+0x1e4>)
 8005474:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <HAL_RCC_DeInit+0x1e8>)
 8005476:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005478:	4b0c      	ldr	r3, [pc, #48]	@ (80054ac <HAL_RCC_DeInit+0x1ec>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fc fbad 	bl	8001bdc <HAL_InitTick>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800548c:	2300      	movs	r3, #0
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
 800549c:	24003010 	.word	0x24003010
 80054a0:	04003010 	.word	0x04003010
 80054a4:	20000170 	.word	0x20000170
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	20000400 	.word	0x20000400

080054b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8083 	beq.w	80055d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054ca:	4b95      	ldr	r3, [pc, #596]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d019      	beq.n	800550a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054d6:	4b92      	ldr	r3, [pc, #584]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d106      	bne.n	80054f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ee:	d00c      	beq.n	800550a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f0:	4b8b      	ldr	r3, [pc, #556]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d112      	bne.n	8005522 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fc:	4b88      	ldr	r3, [pc, #544]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005508:	d10b      	bne.n	8005522 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550a:	4b85      	ldr	r3, [pc, #532]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05b      	beq.n	80055ce <HAL_RCC_OscConfig+0x11e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d157      	bne.n	80055ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e216      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552a:	d106      	bne.n	800553a <HAL_RCC_OscConfig+0x8a>
 800552c:	4b7c      	ldr	r3, [pc, #496]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a7b      	ldr	r2, [pc, #492]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e01d      	b.n	8005576 <HAL_RCC_OscConfig+0xc6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005542:	d10c      	bne.n	800555e <HAL_RCC_OscConfig+0xae>
 8005544:	4b76      	ldr	r3, [pc, #472]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a75      	ldr	r2, [pc, #468]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800554a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b73      	ldr	r3, [pc, #460]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a72      	ldr	r2, [pc, #456]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e00b      	b.n	8005576 <HAL_RCC_OscConfig+0xc6>
 800555e:	4b70      	ldr	r3, [pc, #448]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a6f      	ldr	r2, [pc, #444]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b6d      	ldr	r3, [pc, #436]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6c      	ldr	r2, [pc, #432]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d013      	beq.n	80055a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc fb71 	bl	8001c64 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005586:	f7fc fb6d 	bl	8001c64 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b64      	cmp	r3, #100	@ 0x64
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1db      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005598:	4b61      	ldr	r3, [pc, #388]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0xd6>
 80055a4:	e014      	b.n	80055d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc fb5d 	bl	8001c64 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ae:	f7fc fb59 	bl	8001c64 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b64      	cmp	r3, #100	@ 0x64
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e1c7      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c0:	4b57      	ldr	r3, [pc, #348]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0xfe>
 80055cc:	e000      	b.n	80055d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d06f      	beq.n	80056bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055dc:	4b50      	ldr	r3, [pc, #320]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d105      	bne.n	8005600 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005600:	4b47      	ldr	r3, [pc, #284]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d11c      	bne.n	8005646 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560c:	4b44      	ldr	r3, [pc, #272]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005618:	4b41      	ldr	r3, [pc, #260]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_OscConfig+0x180>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e18f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005630:	4b3b      	ldr	r3, [pc, #236]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4938      	ldr	r1, [pc, #224]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005640:	4313      	orrs	r3, r2
 8005642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005644:	e03a      	b.n	80056bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d020      	beq.n	8005690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800564e:	4b35      	ldr	r3, [pc, #212]	@ (8005724 <HAL_RCC_OscConfig+0x274>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc fb06 	bl	8001c64 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800565c:	f7fc fb02 	bl	8001c64 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e170      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b29      	ldr	r3, [pc, #164]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4925      	ldr	r1, [pc, #148]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	e015      	b.n	80056bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005690:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <HAL_RCC_OscConfig+0x274>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fc fae5 	bl	8001c64 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800569e:	f7fc fae1 	bl	8001c64 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e14f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d037      	beq.n	8005738 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d0:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <HAL_RCC_OscConfig+0x278>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fc fac5 	bl	8001c64 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056de:	f7fc fac1 	bl	8001c64 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e12f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80056f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x22e>
 80056fc:	e01c      	b.n	8005738 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_RCC_OscConfig+0x278>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc faae 	bl	8001c64 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570a:	e00f      	b.n	800572c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570c:	f7fc faaa 	bl	8001c64 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d908      	bls.n	800572c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e118      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800
 8005724:	42470000 	.word	0x42470000
 8005728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800572c:	4b8a      	ldr	r3, [pc, #552]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800572e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e9      	bne.n	800570c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8097 	beq.w	8005874 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574a:	4b83      	ldr	r3, [pc, #524]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b7f      	ldr	r3, [pc, #508]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	4a7e      	ldr	r2, [pc, #504]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	@ 0x40
 8005766:	4b7c      	ldr	r3, [pc, #496]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005776:	4b79      	ldr	r3, [pc, #484]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d118      	bne.n	80057b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005782:	4b76      	ldr	r3, [pc, #472]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a75      	ldr	r2, [pc, #468]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 8005788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800578c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578e:	f7fc fa69 	bl	8001c64 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005796:	f7fc fa65 	bl	8001c64 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0d3      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	4b6c      	ldr	r3, [pc, #432]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x31a>
 80057bc:	4b66      	ldr	r3, [pc, #408]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c0:	4a65      	ldr	r2, [pc, #404]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c8:	e01c      	b.n	8005804 <HAL_RCC_OscConfig+0x354>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x33c>
 80057d2:	4b61      	ldr	r3, [pc, #388]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	4a60      	ldr	r2, [pc, #384]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057d8:	f043 0304 	orr.w	r3, r3, #4
 80057dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057de:	4b5e      	ldr	r3, [pc, #376]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ea:	e00b      	b.n	8005804 <HAL_RCC_OscConfig+0x354>
 80057ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	4a59      	ldr	r2, [pc, #356]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f8:	4b57      	ldr	r3, [pc, #348]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fc:	4a56      	ldr	r2, [pc, #344]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057fe:	f023 0304 	bic.w	r3, r3, #4
 8005802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fc fa2a 	bl	8001c64 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005812:	e00a      	b.n	800582a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fc fa26 	bl	8001c64 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e092      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ee      	beq.n	8005814 <HAL_RCC_OscConfig+0x364>
 8005836:	e014      	b.n	8005862 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc fa14 	bl	8001c64 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583e:	e00a      	b.n	8005856 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005840:	f7fc fa10 	bl	8001c64 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e07c      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005856:	4b40      	ldr	r3, [pc, #256]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ee      	bne.n	8005840 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d105      	bne.n	8005874 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005868:	4b3b      	ldr	r3, [pc, #236]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	4a3a      	ldr	r2, [pc, #232]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800586e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d068      	beq.n	800594e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800587c:	4b36      	ldr	r3, [pc, #216]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d060      	beq.n	800594a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d145      	bne.n	800591c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b33      	ldr	r3, [pc, #204]	@ (8005960 <HAL_RCC_OscConfig+0x4b0>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fc f9e5 	bl	8001c64 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589e:	f7fc f9e1 	bl	8001c64 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e04f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b0:	4b29      	ldr	r3, [pc, #164]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	019b      	lsls	r3, r3, #6
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	071b      	lsls	r3, r3, #28
 80058e8:	491b      	ldr	r1, [pc, #108]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <HAL_RCC_OscConfig+0x4b0>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc f9b6 	bl	8001c64 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fc f9b2 	bl	8001c64 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e020      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590e:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x44c>
 800591a:	e018      	b.n	800594e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591c:	4b10      	ldr	r3, [pc, #64]	@ (8005960 <HAL_RCC_OscConfig+0x4b0>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fc f99f 	bl	8001c64 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592a:	f7fc f99b 	bl	8001c64 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e009      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f0      	bne.n	800592a <HAL_RCC_OscConfig+0x47a>
 8005948:	e001      	b.n	800594e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470060 	.word	0x42470060

08005964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e056      	b.n	8005a24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f006 fa29 	bl	800bde8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	ea42 0103 	orr.w	r1, r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	f003 0104 	and.w	r1, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_Transmit_IT+0x20>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e067      	b.n	8005b1c <HAL_SPI_Transmit_IT+0xf0>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Transmit_IT+0x34>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a64:	e055      	b.n	8005b12 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a76:	e04c      	b.n	8005b12 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a1b      	ldr	r2, [pc, #108]	@ (8005b28 <HAL_SPI_Transmit_IT+0xfc>)
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
 8005abe:	e002      	b.n	8005ac6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b2c <HAL_SPI_Transmit_IT+0x100>)
 8005ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ace:	d107      	bne.n	8005ae0 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ade:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8005aee:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b40      	cmp	r3, #64	@ 0x40
 8005afc:	d008      	beq.n	8005b10 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e000      	b.n	8005b12 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8005b10:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	0800659d 	.word	0x0800659d
 8005b2c:	08006557 	.word	0x08006557

08005b30 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d110      	bne.n	8005b6c <HAL_SPI_Receive_IT+0x3c>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b52:	d10b      	bne.n	8005b6c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2204      	movs	r2, #4
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f87a 	bl	8005c5c <HAL_SPI_TransmitReceive_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	e06e      	b.n	8005c4a <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_SPI_Receive_IT+0x4a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e067      	b.n	8005c4a <HAL_SPI_Receive_IT+0x11a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b92:	e055      	b.n	8005c40 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Receive_IT+0x70>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ba4:	e04c      	b.n	8005c40 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c54 <HAL_SPI_Receive_IT+0x124>)
 8005bea:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bec:	e002      	b.n	8005bf4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <HAL_SPI_Receive_IT+0x128>)
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d107      	bne.n	8005c0e <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005c1c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d008      	beq.n	8005c3e <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8005c3e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08006511 	.word	0x08006511
 8005c58:	080064c7 	.word	0x080064c7

08005c5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_SPI_TransmitReceive_IT+0x20>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e075      	b.n	8005d68 <HAL_SPI_TransmitReceive_IT+0x10c>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c8a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c92:	7dbb      	ldrb	r3, [r7, #22]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d00d      	beq.n	8005cb4 <HAL_SPI_TransmitReceive_IT+0x58>
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9e:	d106      	bne.n	8005cae <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_SPI_TransmitReceive_IT+0x52>
 8005ca8:	7dbb      	ldrb	r3, [r7, #22]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cb2:	e054      	b.n	8005d5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005cc0:	887b      	ldrh	r3, [r7, #2]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cca:	e048      	b.n	8005d5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d003      	beq.n	8005ce0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2205      	movs	r2, #5
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	887a      	ldrh	r2, [r7, #2]
 8005cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <HAL_SPI_TransmitReceive_IT+0x118>)
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d1e:	e005      	b.n	8005d2c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <HAL_SPI_TransmitReceive_IT+0x120>)
 8005d24:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a15      	ldr	r2, [pc, #84]	@ (8005d80 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d008      	beq.n	8005d5c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e000      	b.n	8005d5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005d5c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	08006409 	.word	0x08006409
 8005d78:	08006469 	.word	0x08006469
 8005d7c:	08006345 	.word	0x08006345
 8005d80:	080063a9 	.word	0x080063a9

08005d84 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8005d90:	2301      	movs	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005d94:	4b72      	ldr	r3, [pc, #456]	@ (8005f60 <HAL_SPI_Abort_IT+0x1dc>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a72      	ldr	r2, [pc, #456]	@ (8005f64 <HAL_SPI_Abort_IT+0x1e0>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	0a5b      	lsrs	r3, r3, #9
 8005da0:	2264      	movs	r2, #100	@ 0x64
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0220 	bic.w	r2, r2, #32
 8005dba:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc6:	2b80      	cmp	r3, #128	@ 0x80
 8005dc8:	d117      	bne.n	8005dfa <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a66      	ldr	r2, [pc, #408]	@ (8005f68 <HAL_SPI_Abort_IT+0x1e4>)
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005de2:	e008      	b.n	8005df6 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b07      	cmp	r3, #7
 8005df4:	d1ec      	bne.n	8005dd0 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d117      	bne.n	8005e38 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a58      	ldr	r2, [pc, #352]	@ (8005f6c <HAL_SPI_Abort_IT+0x1e8>)
 8005e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005e20:	e008      	b.n	8005e34 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d1ec      	bne.n	8005e0e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00f      	beq.n	8005e60 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d104      	bne.n	8005e58 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e52:	4a47      	ldr	r2, [pc, #284]	@ (8005f70 <HAL_SPI_Abort_IT+0x1ec>)
 8005e54:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e56:	e003      	b.n	8005e60 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00f      	beq.n	8005e88 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d104      	bne.n	8005e80 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f74 <HAL_SPI_Abort_IT+0x1f0>)
 8005e7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e7e:	e003      	b.n	8005e88 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e84:	2200      	movs	r2, #0
 8005e86:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d115      	bne.n	8005ec2 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d011      	beq.n	8005ec2 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fc f972 	bl	800218c <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2240      	movs	r2, #64	@ 0x40
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ebc:	e001      	b.n	8005ec2 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d115      	bne.n	8005efc <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc f955 	bl	800218c <HAL_DMA_Abort_IT>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eec:	2200      	movs	r2, #0
 8005eee:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2240      	movs	r2, #64	@ 0x40
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ef6:	e001      	b.n	8005efc <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d128      	bne.n	8005f54 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->TxXferCount = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	2b40      	cmp	r3, #64	@ 0x40
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e002      	b.n	8005f22 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f910 	bl	8006174 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8005f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000170 	.word	0x20000170
 8005f64:	057619f1 	.word	0x057619f1
 8005f68:	08006ab9 	.word	0x08006ab9
 8005f6c:	08006a31 	.word	0x08006a31
 8005f70:	080061b1 	.word	0x080061b1
 8005f74:	08006285 	.word	0x08006285

08005f78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10e      	bne.n	8005fb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
    return;
 8005fb6:	e0ce      	b.n	8006156 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_SPI_IRQHandler+0x5e>
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
    return;
 8005fd4:	e0bf      	b.n	8006156 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <HAL_SPI_IRQHandler+0x7e>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d105      	bne.n	8005ff6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80b0 	beq.w	8006156 <HAL_SPI_IRQHandler+0x1de>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80aa 	beq.w	8006156 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d023      	beq.n	8006054 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d011      	beq.n	800603c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601c:	f043 0204 	orr.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	e00b      	b.n	8006054 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
        return;
 8006052:	e080      	b.n	8006156 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d014      	beq.n	8006088 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	f043 0208 	orr.w	r2, r3, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d04f      	beq.n	8006154 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <HAL_SPI_IRQHandler+0x168>
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d034      	beq.n	800614a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0203 	bic.w	r2, r2, #3
 80060ee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d011      	beq.n	800611c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fc:	4a17      	ldr	r2, [pc, #92]	@ (800615c <HAL_SPI_IRQHandler+0x1e4>)
 80060fe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006104:	4618      	mov	r0, r3
 8006106:	f7fc f841 	bl	800218c <HAL_DMA_Abort_IT>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006120:	2b00      	cmp	r3, #0
 8006122:	d016      	beq.n	8006152 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006128:	4a0c      	ldr	r2, [pc, #48]	@ (800615c <HAL_SPI_IRQHandler+0x1e4>)
 800612a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006130:	4618      	mov	r0, r3
 8006132:	f7fc f82b 	bl	800218c <HAL_DMA_Abort_IT>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006140:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006148:	e003      	b.n	8006152 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f808 	bl	8006160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006150:	e000      	b.n	8006154 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006152:	bf00      	nop
    return;
 8006154:	bf00      	nop
  }
}
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08006189 	.word	0x08006189

08006160 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ffdc 	bl	8006160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c2:	2200      	movs	r2, #0
 80061c4:	651a      	str	r2, [r3, #80]	@ 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80061c6:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <SPI_DMATxAbortCallback+0xcc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <SPI_DMATxAbortCallback+0xd0>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	0a5b      	lsrs	r3, r3, #9
 80061d2:	2264      	movs	r2, #100	@ 0x64
 80061d4:	fb02 f303 	mul.w	r3, r2, r3
 80061d8:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0202 	bic.w	r2, r2, #2
 80061e8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061fc:	e009      	b.n	8006212 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3b01      	subs	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0eb      	beq.n	80061ea <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d126      	bne.n	8006272 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d002      	beq.n	800623e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7ff ff82 	bl	8006174 <HAL_SPI_AbortCpltCallback>
 8006270:	e000      	b.n	8006274 <SPI_DMATxAbortCallback+0xc4>
      return;
 8006272:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000170 	.word	0x20000170
 8006280:	057619f1 	.word	0x057619f1

08006284 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a6:	2200      	movs	r2, #0
 80062a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80062ba:	f7fb fcd3 	bl	8001c64 <HAL_GetTick>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	2164      	movs	r1, #100	@ 0x64
 80062c4:	6978      	ldr	r0, [r7, #20]
 80062c6:	f000 fa5b 	bl	8006780 <SPI_EndRxTxTransaction>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d126      	bne.n	800633c <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2200      	movs	r2, #0
 80062f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d002      	beq.n	8006308 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8006334:	6978      	ldr	r0, [r7, #20]
 8006336:	f7ff ff1d 	bl	8006174 <HAL_SPI_AbortCpltCallback>
 800633a:	e000      	b.n	800633e <SPI_DMARxAbortCallback+0xba>
      return;
 800633c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f103 020c 	add.w	r2, r3, #12
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800638e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa32 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10f      	bne.n	8006400 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa02 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	b292      	uxth	r2, r2
 800641c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10f      	bne.n	8006460 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800644e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9d2 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006474:	881a      	ldrh	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	1c9a      	adds	r2, r3, #2
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9a3 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f103 020c 	add.w	r2, r3, #12
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9f2 	bl	80068ec <SPI_CloseRx_ISR>
  }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	b292      	uxth	r2, r2
 8006524:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9cf 	bl	80068ec <SPI_CloseRx_ISR>
  }
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	330c      	adds	r3, #12
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9ec 	bl	800696c <SPI_CloseTx_ISR>
  }
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a8:	881a      	ldrh	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9ca 	bl	800696c <SPI_CloseTx_ISR>
  }
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065f0:	e04c      	b.n	800668c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d048      	beq.n	800668c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065fa:	f7fb fb33 	bl	8001c64 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d902      	bls.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x30>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d13d      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800661e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006628:	d111      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006632:	d004      	beq.n	800663e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663c:	d107      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800664c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006656:	d10f      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006676:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e00f      	b.n	80066ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d1a3      	bne.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c8:	d111      	bne.n	80066ee <SPI_EndRxTransaction+0x3a>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d2:	d004      	beq.n	80066de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066dc:	d107      	bne.n	80066ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f6:	d12a      	bne.n	800674e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006700:	d012      	beq.n	8006728 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff ff67 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d02d      	beq.n	8006774 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	f043 0220 	orr.w	r2, r3, #32
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e026      	b.n	8006776 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	2101      	movs	r1, #1
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff54 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01a      	beq.n	8006774 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e013      	b.n	8006776 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	2101      	movs	r1, #1
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7ff ff41 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e000      	b.n	8006776 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800678c:	4b1b      	ldr	r3, [pc, #108]	@ (80067fc <SPI_EndRxTxTransaction+0x7c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <SPI_EndRxTxTransaction+0x80>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	0d5b      	lsrs	r3, r3, #21
 8006798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067aa:	d112      	bne.n	80067d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7ff ff12 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	f043 0220 	orr.w	r2, r3, #32
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e00f      	b.n	80067f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3b01      	subs	r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e8:	2b80      	cmp	r3, #128	@ 0x80
 80067ea:	d0f2      	beq.n	80067d2 <SPI_EndRxTxTransaction+0x52>
 80067ec:	e000      	b.n	80067f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80067ee:	bf00      	nop
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000170 	.word	0x20000170
 8006800:	165e9f81 	.word	0x165e9f81

08006804 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800680c:	4b35      	ldr	r3, [pc, #212]	@ (80068e4 <SPI_CloseRxTx_ISR+0xe0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a35      	ldr	r2, [pc, #212]	@ (80068e8 <SPI_CloseRxTx_ISR+0xe4>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0a5b      	lsrs	r3, r3, #9
 8006818:	2264      	movs	r2, #100	@ 0x64
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006820:	f7fb fa20 	bl	8001c64 <HAL_GetTick>
 8006824:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0220 	bic.w	r2, r2, #32
 8006834:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006848:	e009      	b.n	800685e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3b01      	subs	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0eb      	beq.n	8006836 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	2164      	movs	r1, #100	@ 0x64
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff8c 	bl	8006780 <SPI_EndRxTxTransaction>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689c:	2b00      	cmp	r3, #0
 800689e:	d115      	bne.n	80068cc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d107      	bne.n	80068bc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f005 f963 	bl	800bb80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80068ba:	e00e      	b.n	80068da <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f005 f989 	bl	800bbdc <HAL_SPI_TxRxCpltCallback>
}
 80068ca:	e006      	b.n	80068da <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fc43 	bl	8006160 <HAL_SPI_ErrorCallback>
}
 80068da:	bf00      	nop
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000170 	.word	0x20000170
 80068e8:	057619f1 	.word	0x057619f1

080068ec <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006902:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006904:	f7fb f9ae 	bl	8001c64 <HAL_GetTick>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	2164      	movs	r1, #100	@ 0x64
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fed0 	bl	80066b4 <SPI_EndRxTransaction>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	2b00      	cmp	r3, #0
 8006952:	d103      	bne.n	800695c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f005 f913 	bl	800bb80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800695a:	e002      	b.n	8006962 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fbff 	bl	8006160 <HAL_SPI_ErrorCallback>
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006974:	4b2c      	ldr	r3, [pc, #176]	@ (8006a28 <SPI_CloseTx_ISR+0xbc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2c      	ldr	r2, [pc, #176]	@ (8006a2c <SPI_CloseTx_ISR+0xc0>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	0a5b      	lsrs	r3, r3, #9
 8006980:	2264      	movs	r2, #100	@ 0x64
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006988:	f7fb f96c 	bl	8001c64 <HAL_GetTick>
 800698c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80069a0:	e009      	b.n	80069b6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0eb      	beq.n	800698e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	2164      	movs	r1, #100	@ 0x64
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fed8 	bl	8006780 <SPI_EndRxTxTransaction>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fba5 	bl	8006160 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006a16:	e002      	b.n	8006a1e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f005 f883 	bl	800bb24 <HAL_SPI_TxCpltCallback>
}
 8006a1e:	bf00      	nop
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000170 	.word	0x20000170
 8006a2c:	057619f1 	.word	0x057619f1

08006a30 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006a38:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <SPI_AbortRx_ISR+0x80>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <SPI_AbortRx_ISR+0x84>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	0a5b      	lsrs	r3, r3, #9
 8006a44:	2264      	movs	r2, #100	@ 0x64
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a5e:	e009      	b.n	8006a74 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0eb      	beq.n	8006a4c <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a82:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a92:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2207      	movs	r2, #7
 8006a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000170 	.word	0x20000170
 8006ab4:	057619f1 	.word	0x057619f1

08006ab8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ace:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ade:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2207      	movs	r2, #7
 8006ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e01d      	b.n	8006b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f815 	bl	8006b4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f000 fa2c 	bl	8006f90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d007      	beq.n	8006b90 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d122      	bne.n	8006c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d11b      	bne.n	8006c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f06f 0202 	mvn.w	r2, #2
 8006bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f9b2 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006bee:	e005      	b.n	8006bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f9a4 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f9b5 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d122      	bne.n	8006c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d11b      	bne.n	8006c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f06f 0204 	mvn.w	r2, #4
 8006c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f988 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006c42:	e005      	b.n	8006c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f97a 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f98b 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d122      	bne.n	8006caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d11b      	bne.n	8006caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f06f 0208 	mvn.w	r2, #8
 8006c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f95e 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006c96:	e005      	b.n	8006ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f950 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f961 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d122      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d11b      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f06f 0210 	mvn.w	r2, #16
 8006cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f934 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006cea:	e005      	b.n	8006cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f926 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f937 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10e      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d107      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f06f 0201 	mvn.w	r2, #1
 8006d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f005 fb33 	bl	800c390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d34:	2b80      	cmp	r3, #128	@ 0x80
 8006d36:	d10e      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d42:	2b80      	cmp	r3, #128	@ 0x80
 8006d44:	d107      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fadd 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	d10e      	bne.n	8006d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6e:	2b40      	cmp	r3, #64	@ 0x40
 8006d70:	d107      	bne.n	8006d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f8fc 	bl	8006f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d10e      	bne.n	8006dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d107      	bne.n	8006dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f06f 0220 	mvn.w	r2, #32
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 faa7 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_ConfigClockSource+0x18>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0b3      	b.n	8006f36 <HAL_TIM_ConfigClockSource+0x180>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e06:	d03e      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0xd0>
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0c:	f200 8087 	bhi.w	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e14:	f000 8085 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1c:	d87f      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e1e:	2b70      	cmp	r3, #112	@ 0x70
 8006e20:	d01a      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0xa2>
 8006e22:	2b70      	cmp	r3, #112	@ 0x70
 8006e24:	d87b      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e26:	2b60      	cmp	r3, #96	@ 0x60
 8006e28:	d050      	beq.n	8006ecc <HAL_TIM_ConfigClockSource+0x116>
 8006e2a:	2b60      	cmp	r3, #96	@ 0x60
 8006e2c:	d877      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e2e:	2b50      	cmp	r3, #80	@ 0x50
 8006e30:	d03c      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0xf6>
 8006e32:	2b50      	cmp	r3, #80	@ 0x50
 8006e34:	d873      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e36:	2b40      	cmp	r3, #64	@ 0x40
 8006e38:	d058      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x136>
 8006e3a:	2b40      	cmp	r3, #64	@ 0x40
 8006e3c:	d86f      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e3e:	2b30      	cmp	r3, #48	@ 0x30
 8006e40:	d064      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
 8006e42:	2b30      	cmp	r3, #48	@ 0x30
 8006e44:	d86b      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d060      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d867      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d05c      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d05a      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e56:	e062      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f000 f9ac 	bl	80071c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
      break;
 8006e84:	e04e      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6899      	ldr	r1, [r3, #8]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f000 f995 	bl	80071c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ea8:	609a      	str	r2, [r3, #8]
      break;
 8006eaa:	e03b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f000 f909 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2150      	movs	r1, #80	@ 0x50
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 f962 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006eca:	e02b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f000 f928 	bl	800712e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2160      	movs	r1, #96	@ 0x60
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f952 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006eea:	e01b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f000 f8e9 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2140      	movs	r1, #64	@ 0x40
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 f942 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006f0a:	e00b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f000 f939 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e002      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e000      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a40      	ldr	r2, [pc, #256]	@ (80070a4 <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fae:	d00f      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80070a8 <TIM_Base_SetConfig+0x118>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <TIM_Base_SetConfig+0x11c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80070b0 <TIM_Base_SetConfig+0x120>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3a      	ldr	r2, [pc, #232]	@ (80070b4 <TIM_Base_SetConfig+0x124>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d108      	bne.n	8006fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80070a4 <TIM_Base_SetConfig+0x114>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d02b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff0:	d027      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80070a8 <TIM_Base_SetConfig+0x118>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d023      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80070ac <TIM_Base_SetConfig+0x11c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01f      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2a      	ldr	r2, [pc, #168]	@ (80070b0 <TIM_Base_SetConfig+0x120>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <TIM_Base_SetConfig+0x124>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d017      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a28      	ldr	r2, [pc, #160]	@ (80070b8 <TIM_Base_SetConfig+0x128>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a27      	ldr	r2, [pc, #156]	@ (80070bc <TIM_Base_SetConfig+0x12c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00f      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a26      	ldr	r2, [pc, #152]	@ (80070c0 <TIM_Base_SetConfig+0x130>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a25      	ldr	r2, [pc, #148]	@ (80070c4 <TIM_Base_SetConfig+0x134>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a24      	ldr	r2, [pc, #144]	@ (80070c8 <TIM_Base_SetConfig+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a23      	ldr	r2, [pc, #140]	@ (80070cc <TIM_Base_SetConfig+0x13c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d108      	bne.n	8007054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a0a      	ldr	r2, [pc, #40]	@ (80070a4 <TIM_Base_SetConfig+0x114>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <TIM_Base_SetConfig+0x124>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d103      	bne.n	8007090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	615a      	str	r2, [r3, #20]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40010400 	.word	0x40010400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800
 80070c4:	40001800 	.word	0x40001800
 80070c8:	40001c00 	.word	0x40001c00
 80070cc:	40002000 	.word	0x40002000

080070d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 030a 	bic.w	r3, r3, #10
 800710c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712e:	b480      	push	{r7}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0210 	bic.w	r2, r3, #16
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800716a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f043 0307 	orr.w	r3, r3, #7
 80071b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e05a      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007268:	d01d      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1b      	ldr	r2, [pc, #108]	@ (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1a      	ldr	r2, [pc, #104]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a18      	ldr	r2, [pc, #96]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a17      	ldr	r2, [pc, #92]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a15      	ldr	r2, [pc, #84]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e03f      	b.n	80073b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f005 ff14 	bl	800d178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2224      	movs	r2, #36	@ 0x24
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 fc01 	bl	8008b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800737c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800738c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800739c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b08a      	sub	sp, #40	@ 0x28
 80073c2:	af02      	add	r7, sp, #8
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d17c      	bne.n	80074d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Transmit+0x2c>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e075      	b.n	80074da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Transmit+0x3e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e06e      	b.n	80074da <HAL_UART_Transmit+0x11c>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2221      	movs	r2, #33	@ 0x21
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007412:	f7fa fc27 	bl	8001c64 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800742c:	d108      	bne.n	8007440 <HAL_UART_Transmit+0x82>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e003      	b.n	8007448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007450:	e02a      	b.n	80074a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	2180      	movs	r1, #128	@ 0x80
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f001 f81a 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e036      	b.n	80074da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	3302      	adds	r3, #2
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	e007      	b.n	800749a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1cf      	bne.n	8007452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	2140      	movs	r1, #64	@ 0x40
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 ffea 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e006      	b.n	80074da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08a      	sub	sp, #40	@ 0x28
 80074e6:	af02      	add	r7, sp, #8
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b20      	cmp	r3, #32
 8007500:	f040 808c 	bne.w	800761c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Receive+0x2e>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e084      	b.n	800761e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_UART_Receive+0x40>
 800751e:	2302      	movs	r3, #2
 8007520:	e07d      	b.n	800761e <HAL_UART_Receive+0x13c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2222      	movs	r2, #34	@ 0x22
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753e:	f7fa fb91 	bl	8001c64 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Receive+0x8a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800757c:	e043      	b.n	8007606 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	2120      	movs	r1, #32
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 ff84 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e042      	b.n	800761e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	3302      	adds	r3, #2
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e01f      	b.n	80075f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d007      	beq.n	80075d2 <HAL_UART_Receive+0xf0>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <HAL_UART_Receive+0xfe>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e008      	b.n	80075f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1b6      	bne.n	800757e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	4613      	mov	r3, r2
 8007632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b20      	cmp	r3, #32
 800763e:	d130      	bne.n	80076a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Transmit_IT+0x26>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e029      	b.n	80076a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_UART_Transmit_IT+0x38>
 800765a:	2302      	movs	r3, #2
 800765c:	e022      	b.n	80076a4 <HAL_UART_Transmit_IT+0x7e>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2221      	movs	r2, #33	@ 0x21
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800769c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d11d      	bne.n	8007706 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_UART_Receive_IT+0x26>
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e016      	b.n	8007708 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Receive_IT+0x38>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e00f      	b.n	8007708 <HAL_UART_Receive_IT+0x58>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 ff38 	bl	8008572 <UART_Start_Receive_IT>
 8007702:	4603      	mov	r3, r0
 8007704:	e000      	b.n	8007708 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	@ 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b20      	cmp	r3, #32
 8007728:	d165      	bne.n	80077f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_UART_Transmit_DMA+0x26>
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e05e      	b.n	80077f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_UART_Transmit_DMA+0x38>
 8007744:	2302      	movs	r3, #2
 8007746:	e057      	b.n	80077f8 <HAL_UART_Transmit_DMA+0xe8>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2221      	movs	r2, #33	@ 0x21
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007774:	4a22      	ldr	r2, [pc, #136]	@ (8007800 <HAL_UART_Transmit_DMA+0xf0>)
 8007776:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777c:	4a21      	ldr	r2, [pc, #132]	@ (8007804 <HAL_UART_Transmit_DMA+0xf4>)
 800777e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007784:	4a20      	ldr	r2, [pc, #128]	@ (8007808 <HAL_UART_Transmit_DMA+0xf8>)
 8007786:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800778c:	2200      	movs	r2, #0
 800778e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	6819      	ldr	r1, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3304      	adds	r3, #4
 80077a4:	461a      	mov	r2, r3
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	f7fa fc28 	bl	8001ffc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3314      	adds	r3, #20
 80077c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	617b      	str	r3, [r7, #20]
   return(result);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077de:	627a      	str	r2, [r7, #36]	@ 0x24
 80077e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6a39      	ldr	r1, [r7, #32]
 80077e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e000      	b.n	80077f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
  }
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3730      	adds	r7, #48	@ 0x30
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	080081f1 	.word	0x080081f1
 8007804:	0800828b 	.word	0x0800828b
 8007808:	08008403 	.word	0x08008403

0800780c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b20      	cmp	r3, #32
 8007824:	d11d      	bne.n	8007862 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_UART_Receive_DMA+0x26>
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e016      	b.n	8007864 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UART_Receive_DMA+0x38>
 8007840:	2302      	movs	r3, #2
 8007842:	e00f      	b.n	8007864 <HAL_UART_Receive_DMA+0x58>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	461a      	mov	r2, r3
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fec9 	bl	80085f0 <UART_Start_Receive_DMA>
 800785e:	4603      	mov	r3, r0
 8007860:	e000      	b.n	8007864 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007862:	2302      	movs	r3, #2
  }
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b0a0      	sub	sp, #128	@ 0x80
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007886:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800788a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007894:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007896:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800789a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80078a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3314      	adds	r3, #20
 80078c6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80078c8:	657a      	str	r2, [r7, #84]	@ 0x54
 80078ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e5      	bne.n	80078a8 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d119      	bne.n	8007918 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007904:	643a      	str	r2, [r7, #64]	@ 0x40
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800790a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007922:	2b80      	cmp	r3, #128	@ 0x80
 8007924:	d136      	bne.n	8007994 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3314      	adds	r3, #20
 800792c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	61fb      	str	r3, [r7, #28]
   return(result);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800793c:	673b      	str	r3, [r7, #112]	@ 0x70
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3314      	adds	r3, #20
 8007944:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800794c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007966:	2200      	movs	r2, #0
 8007968:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800796e:	4618      	mov	r0, r3
 8007970:	f7fa fb9c 	bl	80020ac <HAL_DMA_Abort>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797e:	4618      	mov	r0, r3
 8007980:	f7fa fdbe 	bl	8002500 <HAL_DMA_GetError>
 8007984:	4603      	mov	r3, r0
 8007986:	2b20      	cmp	r3, #32
 8007988:	d104      	bne.n	8007994 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2210      	movs	r2, #16
 800798e:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e052      	b.n	8007a3a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	d136      	bne.n	8007a10 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3314      	adds	r3, #20
 80079a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3314      	adds	r3, #20
 80079c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079c2:	61ba      	str	r2, [r7, #24]
 80079c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6979      	ldr	r1, [r7, #20]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	613b      	str	r3, [r7, #16]
   return(result);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d018      	beq.n	8007a10 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e2:	2200      	movs	r2, #0
 80079e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fa fb5e 	bl	80020ac <HAL_DMA_Abort>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fa fd80 	bl	8002500 <HAL_DMA_GetError>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d104      	bne.n	8007a10 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2210      	movs	r2, #16
 8007a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e014      	b.n	8007a3a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3780      	adds	r7, #128	@ 0x80
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b0a2      	sub	sp, #136	@ 0x88
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	330c      	adds	r3, #12
 8007a58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a64:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e3      	bne.n	8007a52 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3314      	adds	r3, #20
 8007a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3314      	adds	r3, #20
 8007aa8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007aaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007aac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d119      	bne.n	8007afa <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad8:	f023 0310 	bic.w	r3, r3, #16
 8007adc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007ae6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00f      	beq.n	8007b22 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0c:	2b80      	cmp	r3, #128	@ 0x80
 8007b0e:	d104      	bne.n	8007b1a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	4a53      	ldr	r2, [pc, #332]	@ (8007c64 <HAL_UART_Abort_IT+0x220>)
 8007b16:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b18:	e003      	b.n	8007b22 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1e:	2200      	movs	r2, #0
 8007b20:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	d104      	bne.n	8007b42 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c68 <HAL_UART_Abort_IT+0x224>)
 8007b3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b40:	e003      	b.n	8007b4a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	2200      	movs	r2, #0
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b54:	2b80      	cmp	r3, #128	@ 0x80
 8007b56:	d12d      	bne.n	8007bb4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	623b      	str	r3, [r7, #32]
   return(result);
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3314      	adds	r3, #20
 8007b76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e5      	bne.n	8007b58 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00f      	beq.n	8007bb4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fa faf7 	bl	800218c <HAL_DMA_Abort_IT>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba8:	2200      	movs	r2, #0
 8007baa:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bac:	e002      	b.n	8007bb4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d130      	bne.n	8007c24 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3314      	adds	r3, #20
 8007be0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007be2:	61fa      	str	r2, [r7, #28]
 8007be4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	69b9      	ldr	r1, [r7, #24]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e5      	bne.n	8007bc2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d012      	beq.n	8007c24 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fa fac2 	bl	800218c <HAL_DMA_Abort_IT>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c12:	2200      	movs	r2, #0
 8007c14:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c1c:	e002      	b.n	8007c24 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8007c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d116      	bne.n	8007c5a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fab5 	bl	80081c4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3788      	adds	r7, #136	@ 0x88
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	0800886b 	.word	0x0800886b
 8007c68:	080088cb 	.word	0x080088cb

08007c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b0ba      	sub	sp, #232	@ 0xe8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10f      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x66>
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fe95 	bl	80089fa <UART_Receive_IT>
      return;
 8007cd0:	e256      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80de 	beq.w	8007e98 <HAL_UART_IRQHandler+0x22c>
 8007cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80d1 	beq.w	8007e98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <HAL_UART_IRQHandler+0xae>
 8007d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	f043 0201 	orr.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_UART_IRQHandler+0xd2>
 8007d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d36:	f043 0202 	orr.w	r2, r3, #2
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <HAL_UART_IRQHandler+0xf6>
 8007d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5a:	f043 0204 	orr.w	r2, r3, #4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <HAL_UART_IRQHandler+0x126>
 8007d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	f043 0208 	orr.w	r2, r3, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 81ed 	beq.w	8008176 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_UART_IRQHandler+0x14e>
 8007da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fe20 	bl	80089fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d103      	bne.n	8007de6 <HAL_UART_IRQHandler+0x17a>
 8007dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d04f      	beq.n	8007e86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fcc8 	bl	800877c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df6:	2b40      	cmp	r3, #64	@ 0x40
 8007df8:	d141      	bne.n	8007e7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3314      	adds	r3, #20
 8007e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1d9      	bne.n	8007dfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d013      	beq.n	8007e76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	4a7d      	ldr	r2, [pc, #500]	@ (8008048 <HAL_UART_IRQHandler+0x3dc>)
 8007e54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fa f996 	bl	800218c <HAL_DMA_Abort_IT>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d016      	beq.n	8007e94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e74:	e00e      	b.n	8007e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f99a 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	e00a      	b.n	8007e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f996 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	e006      	b.n	8007e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f992 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007e92:	e170      	b.n	8008176 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	bf00      	nop
    return;
 8007e96:	e16e      	b.n	8008176 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	f040 814a 	bne.w	8008136 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8143 	beq.w	8008136 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 813c 	beq.w	8008136 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ede:	2b40      	cmp	r3, #64	@ 0x40
 8007ee0:	f040 80b4 	bne.w	800804c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8140 	beq.w	800817a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f080 8139 	bcs.w	800817a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f1a:	f000 8088 	beq.w	800802e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1d9      	bne.n	8007f1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3314      	adds	r3, #20
 8007f70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3314      	adds	r3, #20
 8007f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e1      	bne.n	8007f6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3314      	adds	r3, #20
 8007fac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e3      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ffe:	f023 0310 	bic.w	r3, r3, #16
 8008002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	330c      	adds	r3, #12
 800800c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008010:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008012:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008016:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800801e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e3      	bne.n	8007fec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008028:	4618      	mov	r0, r3
 800802a:	f7fa f83f 	bl	80020ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008036:	b29b      	uxth	r3, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	b29b      	uxth	r3, r3
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8ca 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008044:	e099      	b.n	800817a <HAL_UART_IRQHandler+0x50e>
 8008046:	bf00      	nop
 8008048:	08008843 	.word	0x08008843
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008054:	b29b      	uxth	r3, r3
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 808b 	beq.w	800817e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8086 	beq.w	800817e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	330c      	adds	r3, #12
 8008092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008096:	647a      	str	r2, [r7, #68]	@ 0x44
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800809c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e3      	bne.n	8008072 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3314      	adds	r3, #20
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e3      	bne.n	80080aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0310 	bic.w	r3, r3, #16
 8008106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008114:	61fa      	str	r2, [r7, #28]
 8008116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	617b      	str	r3, [r7, #20]
   return(result);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e3      	bne.n	80080f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f852 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008134:	e023      	b.n	800817e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_UART_IRQHandler+0x4ea>
 8008142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fbeb 	bl	800892a <UART_Transmit_IT>
    return;
 8008154:	e014      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <HAL_UART_IRQHandler+0x514>
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fc2b 	bl	80089ca <UART_EndTransmit_IT>
    return;
 8008174:	e004      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
    return;
 8008176:	bf00      	nop
 8008178:	e002      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
      return;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
      return;
 800817e:	bf00      	nop
  }
}
 8008180:	37e8      	adds	r7, #232	@ 0xe8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop

08008188 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b090      	sub	sp, #64	@ 0x40
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d137      	bne.n	800827c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800820c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820e:	2200      	movs	r2, #0
 8008210:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	623b      	str	r3, [r7, #32]
   return(result);
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008228:	63bb      	str	r3, [r7, #56]	@ 0x38
 800822a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008232:	633a      	str	r2, [r7, #48]	@ 0x30
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	330c      	adds	r3, #12
 800824c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	60fb      	str	r3, [r7, #12]
   return(result);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825c:	637b      	str	r3, [r7, #52]	@ 0x34
 800825e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	330c      	adds	r3, #12
 8008264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008266:	61fa      	str	r2, [r7, #28]
 8008268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69b9      	ldr	r1, [r7, #24]
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	617b      	str	r3, [r7, #20]
   return(result);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800827a:	e002      	b.n	8008282 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800827c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800827e:	f004 ff23 	bl	800d0c8 <HAL_UART_TxCpltCallback>
}
 8008282:	bf00      	nop
 8008284:	3740      	adds	r7, #64	@ 0x40
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff ff75 	bl	8008188 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b09c      	sub	sp, #112	@ 0x70
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d172      	bne.n	80083a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80082c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082c4:	2200      	movs	r2, #0
 80082c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	330c      	adds	r3, #12
 80082ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80082e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3314      	adds	r3, #20
 8008302:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800830c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	667b      	str	r3, [r7, #100]	@ 0x64
 8008314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800831c:	647a      	str	r2, [r7, #68]	@ 0x44
 800831e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800832a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3314      	adds	r3, #20
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	623b      	str	r3, [r7, #32]
   return(result);
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008346:	663b      	str	r3, [r7, #96]	@ 0x60
 8008348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3314      	adds	r3, #20
 800834e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008350:	633a      	str	r2, [r7, #48]	@ 0x30
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	2b01      	cmp	r3, #1
 8008372:	d119      	bne.n	80083a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	330c      	adds	r3, #12
 800837a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	60fb      	str	r3, [r7, #12]
   return(result);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0310 	bic.w	r3, r3, #16
 800838a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800838c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008394:	61fa      	str	r2, [r7, #28]
 8008396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	69b9      	ldr	r1, [r7, #24]
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	617b      	str	r3, [r7, #20]
   return(result);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e5      	bne.n	8008374 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d106      	bne.n	80083be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083b4:	4619      	mov	r1, r3
 80083b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083b8:	f7ff ff0e 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083bc:	e002      	b.n	80083c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80083be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083c0:	f004 feae 	bl	800d120 <HAL_UART_RxCpltCallback>
}
 80083c4:	bf00      	nop
 80083c6:	3770      	adds	r7, #112	@ 0x70
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d108      	bne.n	80083f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083e6:	085b      	lsrs	r3, r3, #1
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fef3 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083f2:	e002      	b.n	80083fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fed1 	bl	800819c <HAL_UART_RxHalfCpltCallback>
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800841e:	2b80      	cmp	r3, #128	@ 0x80
 8008420:	bf0c      	ite	eq
 8008422:	2301      	moveq	r3, #1
 8008424:	2300      	movne	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b21      	cmp	r3, #33	@ 0x21
 8008434:	d108      	bne.n	8008448 <UART_DMAError+0x46>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008442:	68b8      	ldr	r0, [r7, #8]
 8008444:	f000 f972 	bl	800872c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008452:	2b40      	cmp	r3, #64	@ 0x40
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b22      	cmp	r3, #34	@ 0x22
 8008468:	d108      	bne.n	800847c <UART_DMAError+0x7a>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008476:	68b8      	ldr	r0, [r7, #8]
 8008478:	f000 f980 	bl	800877c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	f043 0210 	orr.w	r2, r3, #16
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008488:	68b8      	ldr	r0, [r7, #8]
 800848a:	f7ff fe91 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b090      	sub	sp, #64	@ 0x40
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a6:	e050      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d04c      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80084b6:	f7f9 fbd5 	bl	8001c64 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d241      	bcs.n	800854a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80084dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80084e8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3314      	adds	r3, #20
 8008500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	613b      	str	r3, [r7, #16]
   return(result);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3314      	adds	r3, #20
 8008518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800851a:	623a      	str	r2, [r7, #32]
 800851c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	61bb      	str	r3, [r7, #24]
   return(result);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e00f      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4013      	ands	r3, r2
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	bf0c      	ite	eq
 800855a:	2301      	moveq	r3, #1
 800855c:	2300      	movne	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	429a      	cmp	r2, r3
 8008566:	d09f      	beq.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3740      	adds	r7, #64	@ 0x40
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	4613      	mov	r3, r2
 800857e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2222      	movs	r2, #34	@ 0x22
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695a      	ldr	r2, [r3, #20]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0220 	orr.w	r2, r2, #32
 80085de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b098      	sub	sp, #96	@ 0x60
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	88fa      	ldrh	r2, [r7, #6]
 8008608:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2222      	movs	r2, #34	@ 0x22
 8008614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	4a40      	ldr	r2, [pc, #256]	@ (8008720 <UART_Start_Receive_DMA+0x130>)
 800861e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008624:	4a3f      	ldr	r2, [pc, #252]	@ (8008724 <UART_Start_Receive_DMA+0x134>)
 8008626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862c:	4a3e      	ldr	r2, [pc, #248]	@ (8008728 <UART_Start_Receive_DMA+0x138>)
 800862e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	2200      	movs	r2, #0
 8008636:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	f7f9 fcd4 	bl	8001ffc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d019      	beq.n	80086ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800868a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008690:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800869a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800869c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80086a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e5      	bne.n	800867a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3314      	adds	r3, #20
 80086b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3314      	adds	r3, #20
 80086cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3314      	adds	r3, #20
 80086e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	617b      	str	r3, [r7, #20]
   return(result);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3314      	adds	r3, #20
 8008700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008702:	627a      	str	r2, [r7, #36]	@ 0x24
 8008704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6a39      	ldr	r1, [r7, #32]
 8008708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3760      	adds	r7, #96	@ 0x60
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	080082a7 	.word	0x080082a7
 8008724:	080083cd 	.word	0x080083cd
 8008728:	08008403 	.word	0x08008403

0800872c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b089      	sub	sp, #36	@ 0x24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	60bb      	str	r3, [r7, #8]
   return(result);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	61ba      	str	r2, [r7, #24]
 8008756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6979      	ldr	r1, [r7, #20]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	613b      	str	r3, [r7, #16]
   return(result);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008770:	bf00      	nop
 8008772:	3724      	adds	r7, #36	@ 0x24
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b095      	sub	sp, #84	@ 0x54
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800879a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e5      	bne.n	8008784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3314      	adds	r3, #20
 80087be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f023 0301 	bic.w	r3, r3, #1
 80087ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3314      	adds	r3, #20
 80087d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e5      	bne.n	80087b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d119      	bne.n	8008828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	60bb      	str	r3, [r7, #8]
   return(result);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 0310 	bic.w	r3, r3, #16
 800880a:	647b      	str	r3, [r7, #68]	@ 0x44
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008814:	61ba      	str	r2, [r7, #24]
 8008816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	613b      	str	r3, [r7, #16]
   return(result);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008836:	bf00      	nop
 8008838:	3754      	adds	r7, #84	@ 0x54
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fca7 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008876:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800887c:	2200      	movs	r2, #0
 800887e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888e:	2b00      	cmp	r3, #0
 8008890:	d117      	bne.n	80088c2 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fc82 	bl	80081c4 <HAL_UART_AbortCpltCallback>
 80088c0:	e000      	b.n	80088c4 <UART_DMATxAbortCallback+0x5a>
      return;
 80088c2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	2200      	movs	r2, #0
 80088de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d117      	bne.n	8008922 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff fc52 	bl	80081c4 <HAL_UART_AbortCpltCallback>
 8008920:	e000      	b.n	8008924 <UART_DMARxAbortCallback+0x5a>
      return;
 8008922:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b21      	cmp	r3, #33	@ 0x21
 800893c:	d13e      	bne.n	80089bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008946:	d114      	bne.n	8008972 <UART_Transmit_IT+0x48>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d110      	bne.n	8008972 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008964:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	1c9a      	adds	r2, r3, #2
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	621a      	str	r2, [r3, #32]
 8008970:	e008      	b.n	8008984 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	1c59      	adds	r1, r3, #1
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6211      	str	r1, [r2, #32]
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008988:	b29b      	uxth	r3, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	b29b      	uxth	r3, r3
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4619      	mov	r1, r3
 8008992:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10f      	bne.n	80089b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e000      	b.n	80089be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089bc:	2302      	movs	r3, #2
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f004 fb6c 	bl	800d0c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b08c      	sub	sp, #48	@ 0x30
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b22      	cmp	r3, #34	@ 0x22
 8008a0c:	f040 80ab 	bne.w	8008b66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a18:	d117      	bne.n	8008a4a <UART_Receive_IT+0x50>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d113      	bne.n	8008a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a42:	1c9a      	adds	r2, r3, #2
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a48:	e026      	b.n	8008a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5c:	d007      	beq.n	8008a6e <UART_Receive_IT+0x74>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10a      	bne.n	8008a7c <UART_Receive_IT+0x82>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e008      	b.n	8008a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d15a      	bne.n	8008b62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0220 	bic.w	r2, r2, #32
 8008aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695a      	ldr	r2, [r3, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d135      	bne.n	8008b58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	613b      	str	r3, [r7, #16]
   return(result);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b12:	623a      	str	r2, [r7, #32]
 8008b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	69f9      	ldr	r1, [r7, #28]
 8008b18:	6a3a      	ldr	r2, [r7, #32]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e5      	bne.n	8008af2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d10a      	bne.n	8008b4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff fb41 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
 8008b56:	e002      	b.n	8008b5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f004 fae1 	bl	800d120 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e002      	b.n	8008b68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	e000      	b.n	8008b68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b66:	2302      	movs	r3, #2
  }
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3730      	adds	r7, #48	@ 0x30
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b74:	b0c0      	sub	sp, #256	@ 0x100
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	ea40 0301 	orr.w	r3, r0, r1
 8008b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008bc8:	f021 010c 	bic.w	r1, r1, #12
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bea:	6999      	ldr	r1, [r3, #24]
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	ea40 0301 	orr.w	r3, r0, r1
 8008bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8008e3c <UART_SetConfig+0x2cc>)
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d005      	beq.n	8008c10 <UART_SetConfig+0xa0>
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e40 <UART_SetConfig+0x2d0>)
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d104      	bne.n	8008c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c10:	f7fc f912 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8008c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c18:	e003      	b.n	8008c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c1a:	f7fc f8f9 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8008c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c2c:	f040 810c 	bne.w	8008e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	1891      	adds	r1, r2, r2
 8008c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c4a:	415b      	adcs	r3, r3
 8008c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c52:	4621      	mov	r1, r4
 8008c54:	eb12 0801 	adds.w	r8, r2, r1
 8008c58:	4629      	mov	r1, r5
 8008c5a:	eb43 0901 	adc.w	r9, r3, r1
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c72:	4690      	mov	r8, r2
 8008c74:	4699      	mov	r9, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	eb18 0303 	adds.w	r3, r8, r3
 8008c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c80:	462b      	mov	r3, r5
 8008c82:	eb49 0303 	adc.w	r3, r9, r3
 8008c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	18db      	adds	r3, r3, r3
 8008ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	eb42 0303 	adc.w	r3, r2, r3
 8008caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008cb4:	f7f7 ff98 	bl	8000be8 <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4b61      	ldr	r3, [pc, #388]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	011c      	lsls	r4, r3, #4
 8008cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	1891      	adds	r1, r2, r2
 8008cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ce0:	415b      	adcs	r3, r3
 8008ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ce8:	4641      	mov	r1, r8
 8008cea:	eb12 0a01 	adds.w	sl, r2, r1
 8008cee:	4649      	mov	r1, r9
 8008cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d08:	4692      	mov	sl, r2
 8008d0a:	469b      	mov	fp, r3
 8008d0c:	4643      	mov	r3, r8
 8008d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d16:	464b      	mov	r3, r9
 8008d18:	eb4b 0303 	adc.w	r3, fp, r3
 8008d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d34:	460b      	mov	r3, r1
 8008d36:	18db      	adds	r3, r3, r3
 8008d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	eb42 0303 	adc.w	r3, r2, r3
 8008d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d4a:	f7f7 ff4d 	bl	8000be8 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	4b3b      	ldr	r3, [pc, #236]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008d56:	fba3 2301 	umull	r2, r3, r3, r1
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	2264      	movs	r2, #100	@ 0x64
 8008d5e:	fb02 f303 	mul.w	r3, r2, r3
 8008d62:	1acb      	subs	r3, r1, r3
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008d6a:	4b36      	ldr	r3, [pc, #216]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008d78:	441c      	add	r4, r3
 8008d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	464b      	mov	r3, r9
 8008d90:	1891      	adds	r1, r2, r2
 8008d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d94:	415b      	adcs	r3, r3
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	1851      	adds	r1, r2, r1
 8008da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008da2:	4649      	mov	r1, r9
 8008da4:	414b      	adcs	r3, r1
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008db4:	4659      	mov	r1, fp
 8008db6:	00cb      	lsls	r3, r1, #3
 8008db8:	4651      	mov	r1, sl
 8008dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	00ca      	lsls	r2, r1, #3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4642      	mov	r2, r8
 8008dca:	189b      	adds	r3, r3, r2
 8008dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	460a      	mov	r2, r1
 8008dd4:	eb42 0303 	adc.w	r3, r2, r3
 8008dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008df0:	460b      	mov	r3, r1
 8008df2:	18db      	adds	r3, r3, r3
 8008df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008df6:	4613      	mov	r3, r2
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e06:	f7f7 feef 	bl	8000be8 <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008e10:	fba3 1302 	umull	r1, r3, r3, r2
 8008e14:	095b      	lsrs	r3, r3, #5
 8008e16:	2164      	movs	r1, #100	@ 0x64
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	3332      	adds	r3, #50	@ 0x32
 8008e22:	4a08      	ldr	r2, [pc, #32]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008e24:	fba2 2303 	umull	r2, r3, r2, r3
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f003 0207 	and.w	r2, r3, #7
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4422      	add	r2, r4
 8008e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e38:	e106      	b.n	8009048 <UART_SetConfig+0x4d8>
 8008e3a:	bf00      	nop
 8008e3c:	40011000 	.word	0x40011000
 8008e40:	40011400 	.word	0x40011400
 8008e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e5a:	4642      	mov	r2, r8
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	1891      	adds	r1, r2, r2
 8008e60:	6239      	str	r1, [r7, #32]
 8008e62:	415b      	adcs	r3, r3
 8008e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	1854      	adds	r4, r2, r1
 8008e6e:	4649      	mov	r1, r9
 8008e70:	eb43 0501 	adc.w	r5, r3, r1
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	00eb      	lsls	r3, r5, #3
 8008e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e82:	00e2      	lsls	r2, r4, #3
 8008e84:	4614      	mov	r4, r2
 8008e86:	461d      	mov	r5, r3
 8008e88:	4643      	mov	r3, r8
 8008e8a:	18e3      	adds	r3, r4, r3
 8008e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e90:	464b      	mov	r3, r9
 8008e92:	eb45 0303 	adc.w	r3, r5, r3
 8008e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	008b      	lsls	r3, r1, #2
 8008eba:	4621      	mov	r1, r4
 8008ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	008a      	lsls	r2, r1, #2
 8008ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ec8:	f7f7 fe8e 	bl	8000be8 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4b60      	ldr	r3, [pc, #384]	@ (8009054 <UART_SetConfig+0x4e4>)
 8008ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	011c      	lsls	r4, r3, #4
 8008eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	1891      	adds	r1, r2, r2
 8008ef2:	61b9      	str	r1, [r7, #24]
 8008ef4:	415b      	adcs	r3, r3
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008efc:	4641      	mov	r1, r8
 8008efe:	1851      	adds	r1, r2, r1
 8008f00:	6139      	str	r1, [r7, #16]
 8008f02:	4649      	mov	r1, r9
 8008f04:	414b      	adcs	r3, r1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f14:	4659      	mov	r1, fp
 8008f16:	00cb      	lsls	r3, r1, #3
 8008f18:	4651      	mov	r1, sl
 8008f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f1e:	4651      	mov	r1, sl
 8008f20:	00ca      	lsls	r2, r1, #3
 8008f22:	4610      	mov	r0, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	4603      	mov	r3, r0
 8008f28:	4642      	mov	r2, r8
 8008f2a:	189b      	adds	r3, r3, r2
 8008f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f30:	464b      	mov	r3, r9
 8008f32:	460a      	mov	r2, r1
 8008f34:	eb42 0303 	adc.w	r3, r2, r3
 8008f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f54:	4649      	mov	r1, r9
 8008f56:	008b      	lsls	r3, r1, #2
 8008f58:	4641      	mov	r1, r8
 8008f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f5e:	4641      	mov	r1, r8
 8008f60:	008a      	lsls	r2, r1, #2
 8008f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008f66:	f7f7 fe3f 	bl	8000be8 <__aeabi_uldivmod>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4b38      	ldr	r3, [pc, #224]	@ (8009054 <UART_SetConfig+0x4e4>)
 8008f72:	fba3 2301 	umull	r2, r3, r3, r1
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	2264      	movs	r2, #100	@ 0x64
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	1acb      	subs	r3, r1, r3
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	3332      	adds	r3, #50	@ 0x32
 8008f84:	4a33      	ldr	r2, [pc, #204]	@ (8009054 <UART_SetConfig+0x4e4>)
 8008f86:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f90:	441c      	add	r4, r3
 8008f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f96:	2200      	movs	r2, #0
 8008f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	1891      	adds	r1, r2, r2
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	415b      	adcs	r3, r3
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	1851      	adds	r1, r2, r1
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	414b      	adcs	r3, r1
 8008fba:	607b      	str	r3, [r7, #4]
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fc8:	4659      	mov	r1, fp
 8008fca:	00cb      	lsls	r3, r1, #3
 8008fcc:	4651      	mov	r1, sl
 8008fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	00ca      	lsls	r2, r1, #3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4603      	mov	r3, r0
 8008fdc:	4642      	mov	r2, r8
 8008fde:	189b      	adds	r3, r3, r2
 8008fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	460a      	mov	r2, r1
 8008fe6:	eb42 0303 	adc.w	r3, r2, r3
 8008fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009004:	4649      	mov	r1, r9
 8009006:	008b      	lsls	r3, r1, #2
 8009008:	4641      	mov	r1, r8
 800900a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800900e:	4641      	mov	r1, r8
 8009010:	008a      	lsls	r2, r1, #2
 8009012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009016:	f7f7 fde7 	bl	8000be8 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <UART_SetConfig+0x4e4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	@ 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	3332      	adds	r3, #50	@ 0x32
 8009032:	4a08      	ldr	r2, [pc, #32]	@ (8009054 <UART_SetConfig+0x4e4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4422      	add	r2, r4
 8009046:	609a      	str	r2, [r3, #8]
}
 8009048:	bf00      	nop
 800904a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800904e:	46bd      	mov	sp, r7
 8009050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009054:	51eb851f 	.word	0x51eb851f

08009058 <gos_libGetBuildDate>:
/**
 * TODO
 * @return
 */
void_t gos_libGetBuildDate (gos_year_t* pYear, gos_month_t* pMonth, gos_day_t* pDay)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
	/*
	 * Function code.
	 */
	*pYear = (gos_year_t)atoi(year_str);
 8009064:	480c      	ldr	r0, [pc, #48]	@ (8009098 <gos_libGetBuildDate+0x40>)
 8009066:	f00d f9a5 	bl	80163b4 <atoi>
 800906a:	4603      	mov	r3, r0
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	801a      	strh	r2, [r3, #0]
	*pMonth = (gos_month_t)atoi(month_str);
 8009072:	480a      	ldr	r0, [pc, #40]	@ (800909c <gos_libGetBuildDate+0x44>)
 8009074:	f00d f99e 	bl	80163b4 <atoi>
 8009078:	4603      	mov	r3, r0
 800907a:	b2da      	uxtb	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	701a      	strb	r2, [r3, #0]
	*pDay = (gos_day_t)atoi(day_str);
 8009080:	4807      	ldr	r0, [pc, #28]	@ (80090a0 <gos_libGetBuildDate+0x48>)
 8009082:	f00d f997 	bl	80163b4 <atoi>
 8009086:	4603      	mov	r3, r0
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	801a      	strh	r2, [r3, #0]
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000408 	.word	0x20000408
 800909c:	20000410 	.word	0x20000410
 80090a0:	20000414 	.word	0x20000414

080090a4 <bld_init>:

/*
 * Function: bld_init
 */
gos_result_t bld_init (void_t)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 80090aa:	23ae      	movs	r3, #174	@ 0xae
 80090ac:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 80090ae:	4810      	ldr	r0, [pc, #64]	@ (80090f0 <bld_init+0x4c>)
 80090b0:	f005 fd66 	bl	800eb80 <svl_pdhGetBldCfg>

    if (bldConfig.installRequested == GOS_TRUE)
 80090b4:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <bld_init+0x4c>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b36      	cmp	r3, #54	@ 0x36
 80090ba:	d103      	bne.n	80090c4 <bld_init+0x20>
    {
        bldState = BLD_STATE_INSTALL;
 80090bc:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <bld_init+0x50>)
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e00a      	b.n	80090da <bld_init+0x36>
    }
    else if (bldConfig.updateMode == GOS_TRUE)
 80090c4:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <bld_init+0x4c>)
 80090c6:	791b      	ldrb	r3, [r3, #4]
 80090c8:	2b36      	cmp	r3, #54	@ 0x36
 80090ca:	d103      	bne.n	80090d4 <bld_init+0x30>
    {
        bldState = BLD_STATE_WAIT;
 80090cc:	4b09      	ldr	r3, [pc, #36]	@ (80090f4 <bld_init+0x50>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	e002      	b.n	80090da <bld_init+0x36>
    }
    else
    {
    	bldState = BLD_STATE_APP_CHECK;
 80090d4:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <bld_init+0x50>)
 80090d6:	2202      	movs	r2, #2
 80090d8:	701a      	strb	r2, [r3, #0]
    }

    initResult = gos_taskRegister(&bldTaskDesc, NULL);
 80090da:	2100      	movs	r1, #0
 80090dc:	4806      	ldr	r0, [pc, #24]	@ (80090f8 <bld_init+0x54>)
 80090de:	f008 f995 	bl	801140c <gos_taskRegister>
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80090e6:	79fb      	ldrb	r3, [r7, #7]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20001918 	.word	0x20001918
 80090f4:	20001bc8 	.word	0x20001bc8
 80090f8:	20000418 	.word	0x20000418

080090fc <bld_stateMachineGetState>:

/*
 * Function: bld_stateMachineGetState
 */
gos_result_t bld_stateMachineGetState (bld_state_t* pState)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t getStateResult = GOS_ERROR;
 8009104:	23ae      	movs	r3, #174	@ 0xae
 8009106:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pState != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <bld_stateMachineGetState+0x1e>
    {
        *pState = bldState;
 800910e:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <bld_stateMachineGetState+0x2c>)
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	701a      	strb	r2, [r3, #0]
        getStateResult = GOS_SUCCESS;
 8009116:	2355      	movs	r3, #85	@ 0x55
 8009118:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return getStateResult;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20001bc8 	.word	0x20001bc8

0800912c <bld_task>:

GOS_STATIC void_t bld_task (void_t)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08a      	sub	sp, #40	@ 0x28
 8009130:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t               installChunkNum  = 0u;
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
    u32_t               installChunkCntr = 0u;
 8009136:	2300      	movs	r3, #0
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
    u32_t               perc             = 0u;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
    u32_t               startTick        = 0u;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
    bool_t              connectTmo       = GOS_FALSE;
 8009142:	2349      	movs	r3, #73	@ 0x49
 8009144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    gos_messageId_t     msgIds []        = { BLD_STATE_CONT_MSG_ID, 0 };
 8009148:	f24b 43ed 	movw	r3, #46317	@ 0xb4ed
 800914c:	80bb      	strh	r3, [r7, #4]
 800914e:	2300      	movs	r3, #0
 8009150:	80fb      	strh	r3, [r7, #6]
    u32_t               byteCounter      = 0u;
 8009152:	2300      	movs	r3, #0
 8009154:	61fb      	str	r3, [r7, #28]

    /*
     * Function code.
     */
    // Startup delay (for printing).
    (void_t) gos_taskSleep(500);
 8009156:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800915a:	f008 fae9 	bl	8011730 <gos_taskSleep>

    (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 800915e:	48a4      	ldr	r0, [pc, #656]	@ (80093f0 <bld_task+0x2c4>)
 8009160:	f005 fc9e 	bl	800eaa0 <svl_pdhGetSwInfo>
    (void_t) memcpy((void_t*)&binaryDescriptor.binaryInfo, (void_t*)&currentSwInfo.appBinaryInfo, sizeof(svl_pdhBinaryInfo_t));
 8009164:	4ba3      	ldr	r3, [pc, #652]	@ (80093f4 <bld_task+0x2c8>)
 8009166:	4aa2      	ldr	r2, [pc, #648]	@ (80093f0 <bld_task+0x2c4>)
 8009168:	3324      	adds	r3, #36	@ 0x24
 800916a:	f502 7225 	add.w	r2, r2, #660	@ 0x294
 800916e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009170:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (;;)
    {
        switch (bldState)
 8009174:	4ba0      	ldr	r3, [pc, #640]	@ (80093f8 <bld_task+0x2cc>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b02      	cmp	r3, #2
 800917a:	f000 8175 	beq.w	8009468 <bld_task+0x33c>
 800917e:	2b02      	cmp	r3, #2
 8009180:	f300 81b3 	bgt.w	80094ea <bld_task+0x3be>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <bld_task+0x64>
 8009188:	2b01      	cmp	r3, #1
 800918a:	f000 8109 	beq.w	80093a0 <bld_task+0x274>
 800918e:	e1ac      	b.n	80094ea <bld_task+0x3be>
        {
            case BLD_STATE_INSTALL:
            {
                // Install file is marked in configuration.
                // Try to copy it to application FLASH area.
                byteCounter = 0u;
 8009190:	2300      	movs	r3, #0
 8009192:	61fb      	str	r3, [r7, #28]

                // Get data from external flash.
                (void_t) svl_sdhGetBinaryData(bldConfig.binaryIndex, &binaryDescriptor);
 8009194:	4b99      	ldr	r3, [pc, #612]	@ (80093fc <bld_task+0x2d0>)
 8009196:	885b      	ldrh	r3, [r3, #2]
 8009198:	4996      	ldr	r1, [pc, #600]	@ (80093f4 <bld_task+0x2c8>)
 800919a:	4618      	mov	r0, r3
 800919c:	f006 f97c 	bl	800f498 <svl_sdhGetBinaryData>

                // Check start address.
                if (binaryDescriptor.binaryInfo.startAddress < BLD_APP_ROM_START_ADDRESS)
 80091a0:	4b94      	ldr	r3, [pc, #592]	@ (80093f4 <bld_task+0x2c8>)
 80091a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a4:	4a96      	ldr	r2, [pc, #600]	@ (8009400 <bld_task+0x2d4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d803      	bhi.n	80091b2 <bld_task+0x86>
                {
                    bldState = BLD_STATE_WAIT;
 80091aa:	4b93      	ldr	r3, [pc, #588]	@ (80093f8 <bld_task+0x2cc>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	701a      	strb	r2, [r3, #0]
                    break;
 80091b0:	e19b      	b.n	80094ea <bld_task+0x3be>
                else
                {
                    // Start address OK.
                }

                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 80091b2:	4b90      	ldr	r3, [pc, #576]	@ (80093f4 <bld_task+0x2c8>)
 80091b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b6:	0a5b      	lsrs	r3, r3, #9
                                  (binaryDescriptor.binaryInfo.size % BLD_INSTALL_CHUNK_SIZE == 0 ? 0 : 1);
 80091b8:	4a8e      	ldr	r2, [pc, #568]	@ (80093f4 <bld_task+0x2c8>)
 80091ba:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80091bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	bf14      	ite	ne
 80091c4:	2201      	movne	r2, #1
 80091c6:	2200      	moveq	r2, #0
 80091c8:	b2d2      	uxtb	r2, r2
                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 80091ca:	4413      	add	r3, r2
 80091cc:	613b      	str	r3, [r7, #16]

                // Erase application area.
                (void_t) drv_flashErase(binaryDescriptor.binaryInfo.startAddress, binaryDescriptor.binaryInfo.size);
 80091ce:	4b89      	ldr	r3, [pc, #548]	@ (80093f4 <bld_task+0x2c8>)
 80091d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d2:	4a88      	ldr	r2, [pc, #544]	@ (80093f4 <bld_task+0x2c8>)
 80091d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 fb79 	bl	800a8d0 <drv_flashErase>

                // Write to internal flash by chunks.
                (void_t) drv_flashUnlock();
 80091de:	f001 fbf0 	bl	800a9c2 <drv_flashUnlock>

                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 80091e2:	2300      	movs	r3, #0
 80091e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091e6:	e0cc      	b.n	8009382 <bld_task+0x256>
                {
                    // Read chunk from external flash.
                    (void_t) svl_sdhReadBytesFromMemory(
                            binaryDescriptor.binaryLocation + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE),
 80091e8:	4b82      	ldr	r3, [pc, #520]	@ (80093f4 <bld_task+0x2c8>)
 80091ea:	6a1a      	ldr	r2, [r3, #32]
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	025b      	lsls	r3, r3, #9
                    (void_t) svl_sdhReadBytesFromMemory(
 80091f0:	4413      	add	r3, r2
 80091f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091f6:	4983      	ldr	r1, [pc, #524]	@ (8009404 <bld_task+0x2d8>)
 80091f8:	4618      	mov	r0, r3
 80091fa:	f006 f9bf 	bl	800f57c <svl_sdhReadBytesFromMemory>
                            bldInstallBuffer,
                            BLD_INSTALL_CHUNK_SIZE);

                    // Program chunk in internal flash.
                    if (((installChunkCntr + 1) * BLD_INSTALL_CHUNK_SIZE) < binaryDescriptor.binaryInfo.size)
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	3301      	adds	r3, #1
 8009202:	025a      	lsls	r2, r3, #9
 8009204:	4b7b      	ldr	r3, [pc, #492]	@ (80093f4 <bld_task+0x2c8>)
 8009206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009208:	429a      	cmp	r2, r3
 800920a:	d20f      	bcs.n	800922c <bld_task+0x100>
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800920c:	4b79      	ldr	r3, [pc, #484]	@ (80093f4 <bld_task+0x2c8>)
 800920e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 8009214:	4413      	add	r3, r2
 8009216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800921a:	497a      	ldr	r1, [pc, #488]	@ (8009404 <bld_task+0x2d8>)
 800921c:	4618      	mov	r0, r3
 800921e:	f001 fb99 	bl	800a954 <drv_flashWriteWithoutLock>
                                 (void_t*)bldInstallBuffer,
                                 BLD_INSTALL_CHUNK_SIZE);

                        byteCounter += BLD_INSTALL_CHUNK_SIZE;
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009228:	61fb      	str	r3, [r7, #28]
 800922a:	e015      	b.n	8009258 <bld_task+0x12c>
                    }
                    else
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800922c:	4b71      	ldr	r3, [pc, #452]	@ (80093f4 <bld_task+0x2c8>)
 800922e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 8009234:	18d0      	adds	r0, r2, r3
                                 (void_t*)bldInstallBuffer,
                                 binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE));
 8009236:	4b6f      	ldr	r3, [pc, #444]	@ (80093f4 <bld_task+0x2c8>)
 8009238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	461a      	mov	r2, r3
 8009242:	4970      	ldr	r1, [pc, #448]	@ (8009404 <bld_task+0x2d8>)
 8009244:	f001 fb86 	bl	800a954 <drv_flashWriteWithoutLock>

                        byteCounter += binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE);
 8009248:	4b6a      	ldr	r3, [pc, #424]	@ (80093f4 <bld_task+0x2c8>)
 800924a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	025b      	lsls	r3, r3, #9
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	61fb      	str	r3, [r7, #28]
                    }

                    // Display progress.
                    perc = 100 * 100 * byteCounter / binaryDescriptor.binaryInfo.size;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800925e:	fb03 f202 	mul.w	r2, r3, r2
 8009262:	4b64      	ldr	r3, [pc, #400]	@ (80093f4 <bld_task+0x2c8>)
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	fbb2 f3f3 	udiv	r3, r2, r3
 800926a:	60fb      	str	r3, [r7, #12]

                    (void_t) sprintf(progressBuffer, "\rProgress: [ "TRACE_FG_YELLOW_START);
 800926c:	4966      	ldr	r1, [pc, #408]	@ (8009408 <bld_task+0x2dc>)
 800926e:	4867      	ldr	r0, [pc, #412]	@ (800940c <bld_task+0x2e0>)
 8009270:	f00d fe42 	bl	8016ef8 <siprintf>

                    for (int i = 1; i <= 25; i++)
 8009274:	2301      	movs	r3, #1
 8009276:	61bb      	str	r3, [r7, #24]
 8009278:	e025      	b.n	80092c6 <bld_task+0x19a>
                    {
                        if (i * 2 <= (perc / 100))
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	4619      	mov	r1, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4a63      	ldr	r2, [pc, #396]	@ (8009410 <bld_task+0x2e4>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	4299      	cmp	r1, r3
 800928c:	d80c      	bhi.n	80092a8 <bld_task+0x17c>
                        {
                            (void_t) strcat(progressBuffer, "=");
 800928e:	485f      	ldr	r0, [pc, #380]	@ (800940c <bld_task+0x2e0>)
 8009290:	f7f7 f80e 	bl	80002b0 <strlen>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	4b5c      	ldr	r3, [pc, #368]	@ (800940c <bld_task+0x2e0>)
 800929a:	4413      	add	r3, r2
 800929c:	495d      	ldr	r1, [pc, #372]	@ (8009414 <bld_task+0x2e8>)
 800929e:	461a      	mov	r2, r3
 80092a0:	460b      	mov	r3, r1
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	8013      	strh	r3, [r2, #0]
 80092a6:	e00b      	b.n	80092c0 <bld_task+0x194>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 80092a8:	4858      	ldr	r0, [pc, #352]	@ (800940c <bld_task+0x2e0>)
 80092aa:	f7f7 f801 	bl	80002b0 <strlen>
 80092ae:	4603      	mov	r3, r0
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b56      	ldr	r3, [pc, #344]	@ (800940c <bld_task+0x2e0>)
 80092b4:	4413      	add	r3, r2
 80092b6:	4958      	ldr	r1, [pc, #352]	@ (8009418 <bld_task+0x2ec>)
 80092b8:	461a      	mov	r2, r3
 80092ba:	460b      	mov	r3, r1
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	8013      	strh	r3, [r2, #0]
                    for (int i = 1; i <= 25; i++)
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	3301      	adds	r3, #1
 80092c4:	61bb      	str	r3, [r7, #24]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b19      	cmp	r3, #25
 80092ca:	ddd6      	ble.n	800927a <bld_task+0x14e>
                        }
                    }

                    (void_t) sprintf(percentageBuffer, "%3u.%02u%% ", (u8_t)(perc / 100), (u8_t)(perc % 100));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a50      	ldr	r2, [pc, #320]	@ (8009410 <bld_task+0x2e4>)
 80092d0:	fba2 2303 	umull	r2, r3, r2, r3
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	4618      	mov	r0, r3
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	4b4c      	ldr	r3, [pc, #304]	@ (8009410 <bld_task+0x2e4>)
 80092de:	fba3 1302 	umull	r1, r3, r3, r2
 80092e2:	095b      	lsrs	r3, r3, #5
 80092e4:	2164      	movs	r1, #100	@ 0x64
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	4602      	mov	r2, r0
 80092f0:	494a      	ldr	r1, [pc, #296]	@ (800941c <bld_task+0x2f0>)
 80092f2:	484b      	ldr	r0, [pc, #300]	@ (8009420 <bld_task+0x2f4>)
 80092f4:	f00d fe00 	bl	8016ef8 <siprintf>
                    (void_t) strcat(progressBuffer, percentageBuffer);
 80092f8:	4949      	ldr	r1, [pc, #292]	@ (8009420 <bld_task+0x2f4>)
 80092fa:	4844      	ldr	r0, [pc, #272]	@ (800940c <bld_task+0x2e0>)
 80092fc:	f00d fe88 	bl	8017010 <strcat>

                    for (int i = 26; i <= 50; i++)
 8009300:	231a      	movs	r3, #26
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e025      	b.n	8009352 <bld_task+0x226>
                    {
                        if (i * 2 <= (perc / 100))
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	4619      	mov	r1, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a40      	ldr	r2, [pc, #256]	@ (8009410 <bld_task+0x2e4>)
 8009310:	fba2 2303 	umull	r2, r3, r2, r3
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	4299      	cmp	r1, r3
 8009318:	d80c      	bhi.n	8009334 <bld_task+0x208>
                        {
                            (void_t) strcat(progressBuffer, "=");
 800931a:	483c      	ldr	r0, [pc, #240]	@ (800940c <bld_task+0x2e0>)
 800931c:	f7f6 ffc8 	bl	80002b0 <strlen>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
 8009324:	4b39      	ldr	r3, [pc, #228]	@ (800940c <bld_task+0x2e0>)
 8009326:	4413      	add	r3, r2
 8009328:	493a      	ldr	r1, [pc, #232]	@ (8009414 <bld_task+0x2e8>)
 800932a:	461a      	mov	r2, r3
 800932c:	460b      	mov	r3, r1
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	8013      	strh	r3, [r2, #0]
 8009332:	e00b      	b.n	800934c <bld_task+0x220>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 8009334:	4835      	ldr	r0, [pc, #212]	@ (800940c <bld_task+0x2e0>)
 8009336:	f7f6 ffbb 	bl	80002b0 <strlen>
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	4b33      	ldr	r3, [pc, #204]	@ (800940c <bld_task+0x2e0>)
 8009340:	4413      	add	r3, r2
 8009342:	4935      	ldr	r1, [pc, #212]	@ (8009418 <bld_task+0x2ec>)
 8009344:	461a      	mov	r2, r3
 8009346:	460b      	mov	r3, r1
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	8013      	strh	r3, [r2, #0]
                    for (int i = 26; i <= 50; i++)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	3301      	adds	r3, #1
 8009350:	617b      	str	r3, [r7, #20]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b32      	cmp	r3, #50	@ 0x32
 8009356:	ddd6      	ble.n	8009306 <bld_task+0x1da>
                        }
                    }

                    (void_t) strcat(progressBuffer, TRACE_FORMAT_RESET" ]");
 8009358:	482c      	ldr	r0, [pc, #176]	@ (800940c <bld_task+0x2e0>)
 800935a:	f7f6 ffa9 	bl	80002b0 <strlen>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	4b2a      	ldr	r3, [pc, #168]	@ (800940c <bld_task+0x2e0>)
 8009364:	4413      	add	r3, r2
 8009366:	4a2f      	ldr	r2, [pc, #188]	@ (8009424 <bld_task+0x2f8>)
 8009368:	6810      	ldr	r0, [r2, #0]
 800936a:	6018      	str	r0, [r3, #0]
 800936c:	8891      	ldrh	r1, [r2, #4]
 800936e:	7992      	ldrb	r2, [r2, #6]
 8009370:	8099      	strh	r1, [r3, #4]
 8009372:	719a      	strb	r2, [r3, #6]
                    (void_t) gos_traceTrace(GOS_FALSE, progressBuffer);
 8009374:	4925      	ldr	r1, [pc, #148]	@ (800940c <bld_task+0x2e0>)
 8009376:	2049      	movs	r0, #73	@ 0x49
 8009378:	f00c fb0a 	bl	8015990 <gos_traceTrace>
                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	3301      	adds	r3, #1
 8009380:	627b      	str	r3, [r7, #36]	@ 0x24
 8009382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	429a      	cmp	r2, r3
 8009388:	f4ff af2e 	bcc.w	80091e8 <bld_task+0xbc>
                }

                (void_t) drv_flashLock();
 800938c:	f001 fb2a 	bl	800a9e4 <drv_flashLock>

                (void_t) gos_traceTrace(GOS_FALSE, "\r\nInstall finished.\r\n");
 8009390:	4925      	ldr	r1, [pc, #148]	@ (8009428 <bld_task+0x2fc>)
 8009392:	2049      	movs	r0, #73	@ 0x49
 8009394:	f00c fafc 	bl	8015990 <gos_traceTrace>

                // Check newly installed application integrity.
                bldState = BLD_STATE_APP_CHECK;
 8009398:	4b17      	ldr	r3, [pc, #92]	@ (80093f8 <bld_task+0x2cc>)
 800939a:	2202      	movs	r2, #2
 800939c:	701a      	strb	r2, [r3, #0]

                break;
 800939e:	e0a4      	b.n	80094ea <bld_task+0x3be>
            }
            case BLD_STATE_WAIT:
            {
                // In this state, bootloader is waiting for a software install
                // request or other requests.
                (void_t) gos_traceTrace(GOS_TRUE, "Boot mode entered\r\n");
 80093a0:	4922      	ldr	r1, [pc, #136]	@ (800942c <bld_task+0x300>)
 80093a2:	2036      	movs	r0, #54	@ 0x36
 80093a4:	f00c faf4 	bl	8015990 <gos_traceTrace>

                connectTmo = GOS_TRUE;
 80093a8:	2336      	movs	r3, #54	@ 0x36
 80093aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                startTick = gos_kernelGetSysTicks();
 80093ae:	f007 f809 	bl	80103c4 <gos_kernelGetSysTicks>
 80093b2:	60b8      	str	r0, [r7, #8]

                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 80093b4:	e03e      	b.n	8009434 <bld_task+0x308>
                {
                    if (gos_messageRx(msgIds, &gosMsg, 1000u) == GOS_SUCCESS)
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093bc:	491c      	ldr	r1, [pc, #112]	@ (8009430 <bld_task+0x304>)
 80093be:	4618      	mov	r0, r3
 80093c0:	f00a fb04 	bl	80139cc <gos_messageRx>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b55      	cmp	r3, #85	@ 0x55
 80093c8:	d103      	bne.n	80093d2 <bld_task+0x2a6>
                    {
                        // Update start tick to restart timeout.
                        startTick = gos_kernelGetSysTicks();
 80093ca:	f006 fffb 	bl	80103c4 <gos_kernelGetSysTicks>
 80093ce:	60b8      	str	r0, [r7, #8]
                        break;
 80093d0:	e03a      	b.n	8009448 <bld_task+0x31c>
                    }
                    else
                    {
                        // RX timeout.
                        // Check install request.
                        (void_t) svl_pdhGetBldCfg(&bldConfig);
 80093d2:	480a      	ldr	r0, [pc, #40]	@ (80093fc <bld_task+0x2d0>)
 80093d4:	f005 fbd4 	bl	800eb80 <svl_pdhGetBldCfg>

                        if (bldConfig.installRequested == GOS_TRUE)
 80093d8:	4b08      	ldr	r3, [pc, #32]	@ (80093fc <bld_task+0x2d0>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b36      	cmp	r3, #54	@ 0x36
 80093de:	d129      	bne.n	8009434 <bld_task+0x308>
                        {
                            connectTmo = GOS_FALSE;
 80093e0:	2349      	movs	r3, #73	@ 0x49
 80093e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                            bldState   = BLD_STATE_INSTALL;
 80093e6:	4b04      	ldr	r3, [pc, #16]	@ (80093f8 <bld_task+0x2cc>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	701a      	strb	r2, [r3, #0]
                            break;
 80093ec:	e02c      	b.n	8009448 <bld_task+0x31c>
 80093ee:	bf00      	nop
 80093f0:	20001928 	.word	0x20001928
 80093f4:	20001e2c 	.word	0x20001e2c
 80093f8:	20001bc8 	.word	0x20001bc8
 80093fc:	20001918 	.word	0x20001918
 8009400:	0801ffff 	.word	0x0801ffff
 8009404:	20001bcc 	.word	0x20001bcc
 8009408:	08019384 	.word	0x08019384
 800940c:	20001dcc 	.word	0x20001dcc
 8009410:	51eb851f 	.word	0x51eb851f
 8009414:	08019398 	.word	0x08019398
 8009418:	0801939c 	.word	0x0801939c
 800941c:	080193a0 	.word	0x080193a0
 8009420:	20001e1c 	.word	0x20001e1c
 8009424:	080193ac 	.word	0x080193ac
 8009428:	080193b4 	.word	0x080193b4
 800942c:	080193cc 	.word	0x080193cc
 8009430:	20001e5c 	.word	0x20001e5c
                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 8009434:	f006 ffc6 	bl	80103c4 <gos_kernelGetSysTicks>
 8009438:	4602      	mov	r2, r0
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	1ad2      	subs	r2, r2, r3
 800943e:	4b2d      	ldr	r3, [pc, #180]	@ (80094f4 <bld_task+0x3c8>)
 8009440:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009444:	429a      	cmp	r2, r3
 8009446:	d9b6      	bls.n	80093b6 <bld_task+0x28a>
                        	// Nothing to do.
                        }
                    }
                }

                (void_t) gos_traceTrace(GOS_FALSE, "\r\n");
 8009448:	492b      	ldr	r1, [pc, #172]	@ (80094f8 <bld_task+0x3cc>)
 800944a:	2049      	movs	r0, #73	@ 0x49
 800944c:	f00c faa0 	bl	8015990 <gos_traceTrace>

                if (connectTmo == GOS_TRUE)
 8009450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009454:	2b36      	cmp	r3, #54	@ 0x36
 8009456:	d147      	bne.n	80094e8 <bld_task+0x3bc>
                {
                    (void_t) gos_traceTrace(GOS_TRUE, "Request timed out.\r\n");
 8009458:	4928      	ldr	r1, [pc, #160]	@ (80094fc <bld_task+0x3d0>)
 800945a:	2036      	movs	r0, #54	@ 0x36
 800945c:	f00c fa98 	bl	8015990 <gos_traceTrace>
                    bldState = BLD_STATE_APP_CHECK;
 8009460:	4b27      	ldr	r3, [pc, #156]	@ (8009500 <bld_task+0x3d4>)
 8009462:	2202      	movs	r2, #2
 8009464:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Request served.
                }

                break;
 8009466:	e03f      	b.n	80094e8 <bld_task+0x3bc>
            }
            case BLD_STATE_APP_CHECK:
            {
                if (bld_checkApplication(&binaryDescriptor.binaryInfo, GOS_TRUE) == GOS_SUCCESS)
 8009468:	2136      	movs	r1, #54	@ 0x36
 800946a:	4826      	ldr	r0, [pc, #152]	@ (8009504 <bld_task+0x3d8>)
 800946c:	f000 f854 	bl	8009518 <bld_checkApplication>
 8009470:	4603      	mov	r3, r0
 8009472:	2b55      	cmp	r3, #85	@ 0x55
 8009474:	d124      	bne.n	80094c0 <bld_task+0x394>
                {
                    // Application OK.
                    bldConfig.installRequested = GOS_FALSE;
 8009476:	4b1f      	ldr	r3, [pc, #124]	@ (80094f4 <bld_task+0x3c8>)
 8009478:	2249      	movs	r2, #73	@ 0x49
 800947a:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 800947c:	4b1d      	ldr	r3, [pc, #116]	@ (80094f4 <bld_task+0x3c8>)
 800947e:	2200      	movs	r2, #0
 8009480:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_FALSE;
 8009482:	4b1c      	ldr	r3, [pc, #112]	@ (80094f4 <bld_task+0x3c8>)
 8009484:	2249      	movs	r2, #73	@ 0x49
 8009486:	711a      	strb	r2, [r3, #4]
                    bldConfig.startupCounter   = 1u;
 8009488:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <bld_task+0x3c8>)
 800948a:	2201      	movs	r2, #1
 800948c:	715a      	strb	r2, [r3, #5]

                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 800948e:	4819      	ldr	r0, [pc, #100]	@ (80094f4 <bld_task+0x3c8>)
 8009490:	f005 fc56 	bl	800ed40 <svl_pdhSetBldCfg>

                    (void_t) memcpy((void_t*)&currentSwInfo.appBinaryInfo, (void_t*)&binaryDescriptor.binaryInfo, sizeof(currentSwInfo.appBinaryInfo));
 8009494:	4b1c      	ldr	r3, [pc, #112]	@ (8009508 <bld_task+0x3dc>)
 8009496:	4a1d      	ldr	r2, [pc, #116]	@ (800950c <bld_task+0x3e0>)
 8009498:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800949c:	3224      	adds	r2, #36	@ 0x24
 800949e:	ca07      	ldmia	r2, {r0, r1, r2}
 80094a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                    (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 80094a4:	4818      	ldr	r0, [pc, #96]	@ (8009508 <bld_task+0x3dc>)
 80094a6:	f005 fbdb 	bl	800ec60 <svl_pdhSetSwInfo>

                    (void_t) gos_traceTrace(GOS_TRUE, "Exiting update mode...\r\n");
 80094aa:	4919      	ldr	r1, [pc, #100]	@ (8009510 <bld_task+0x3e4>)
 80094ac:	2036      	movs	r0, #54	@ 0x36
 80094ae:	f00c fa6f 	bl	8015990 <gos_traceTrace>
                    (void_t) gos_taskSleep(300);
 80094b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80094b6:	f008 f93b 	bl	8011730 <gos_taskSleep>
                    gos_kernelReset();
 80094ba:	f006 ffa1 	bl	8010400 <gos_kernelReset>

                    bldState = BLD_STATE_WAIT;

                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
                }
                break;
 80094be:	e014      	b.n	80094ea <bld_task+0x3be>
                    bldConfig.installRequested = GOS_FALSE;
 80094c0:	4b0c      	ldr	r3, [pc, #48]	@ (80094f4 <bld_task+0x3c8>)
 80094c2:	2249      	movs	r2, #73	@ 0x49
 80094c4:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 80094c6:	4b0b      	ldr	r3, [pc, #44]	@ (80094f4 <bld_task+0x3c8>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_TRUE;
 80094cc:	4b09      	ldr	r3, [pc, #36]	@ (80094f4 <bld_task+0x3c8>)
 80094ce:	2236      	movs	r2, #54	@ 0x36
 80094d0:	711a      	strb	r2, [r3, #4]
                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 80094d2:	4808      	ldr	r0, [pc, #32]	@ (80094f4 <bld_task+0x3c8>)
 80094d4:	f005 fc34 	bl	800ed40 <svl_pdhSetBldCfg>
                    bldState = BLD_STATE_WAIT;
 80094d8:	4b09      	ldr	r3, [pc, #36]	@ (8009500 <bld_task+0x3d4>)
 80094da:	2201      	movs	r2, #1
 80094dc:	701a      	strb	r2, [r3, #0]
                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
 80094de:	490d      	ldr	r1, [pc, #52]	@ (8009514 <bld_task+0x3e8>)
 80094e0:	2036      	movs	r0, #54	@ 0x36
 80094e2:	f00c fa55 	bl	8015990 <gos_traceTrace>
                break;
 80094e6:	e000      	b.n	80094ea <bld_task+0x3be>
                break;
 80094e8:	bf00      	nop
            }
        }
        (void_t) gos_taskSleep(20);
 80094ea:	2014      	movs	r0, #20
 80094ec:	f008 f920 	bl	8011730 <gos_taskSleep>
        switch (bldState)
 80094f0:	e640      	b.n	8009174 <bld_task+0x48>
 80094f2:	bf00      	nop
 80094f4:	20001918 	.word	0x20001918
 80094f8:	080193e0 	.word	0x080193e0
 80094fc:	080193e4 	.word	0x080193e4
 8009500:	20001bc8 	.word	0x20001bc8
 8009504:	20001e50 	.word	0x20001e50
 8009508:	20001928 	.word	0x20001928
 800950c:	20001e2c 	.word	0x20001e2c
 8009510:	080193fc 	.word	0x080193fc
 8009514:	08019418 	.word	0x08019418

08009518 <bld_checkApplication>:

/*
 * Function: bld_checkApplication
 */
gos_result_t bld_checkApplication (svl_pdhBinaryInfo_t* pAppData, bool_t bootMode)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
    /*
     * Local variables.
     */
    gos_result_t appCheckResult = GOS_ERROR;
 8009524:	23ae      	movs	r3, #174	@ 0xae
 8009526:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check application size.
    if (pAppData->size > 0u && pAppData->size <= BLD_APP_ROM_SIZE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d020      	beq.n	8009572 <bld_checkApplication+0x5a>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009538:	d81b      	bhi.n	8009572 <bld_checkApplication+0x5a>
    {
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6859      	ldr	r1, [r3, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	2300      	movs	r3, #0
 800954a:	f000 fcc7 	bl	8009edc <drv_crcCheckCrc32>
 800954e:	4603      	mov	r3, r0
 8009550:	2bca      	cmp	r3, #202	@ 0xca
 8009552:	d102      	bne.n	800955a <bld_checkApplication+0x42>
        {
            appCheckResult = GOS_SUCCESS;
 8009554:	2355      	movs	r3, #85	@ 0x55
 8009556:	73fb      	strb	r3, [r7, #15]
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 8009558:	e016      	b.n	8009588 <bld_checkApplication+0x70>
        }
        else
        {
            // Application check fail.
            if (bootMode == GOS_TRUE)
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	2b36      	cmp	r3, #54	@ 0x36
 800955e:	d104      	bne.n	800956a <bld_checkApplication+0x52>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "Application CRC error.\r\n");
 8009560:	490c      	ldr	r1, [pc, #48]	@ (8009594 <bld_checkApplication+0x7c>)
 8009562:	2036      	movs	r0, #54	@ 0x36
 8009564:	f00c fa14 	bl	8015990 <gos_traceTrace>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 8009568:	e00e      	b.n	8009588 <bld_checkApplication+0x70>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Application CRC error.\r\n");
 800956a:	480a      	ldr	r0, [pc, #40]	@ (8009594 <bld_checkApplication+0x7c>)
 800956c:	f00c fc66 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 8009570:	e00a      	b.n	8009588 <bld_checkApplication+0x70>
            }
        }
    }
    else
    {
        if (bootMode == GOS_TRUE)
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	2b36      	cmp	r3, #54	@ 0x36
 8009576:	d104      	bne.n	8009582 <bld_checkApplication+0x6a>
        {
            (void_t) gos_traceTrace(GOS_TRUE, "Application size error.\r\n");
 8009578:	4907      	ldr	r1, [pc, #28]	@ (8009598 <bld_checkApplication+0x80>)
 800957a:	2036      	movs	r0, #54	@ 0x36
 800957c:	f00c fa08 	bl	8015990 <gos_traceTrace>
 8009580:	e002      	b.n	8009588 <bld_checkApplication+0x70>
        }
        else
        {
            (void_t) gos_traceTraceFormattedUnsafe("Application size error.\r\n");
 8009582:	4805      	ldr	r0, [pc, #20]	@ (8009598 <bld_checkApplication+0x80>)
 8009584:	f00c fc5a 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
        }
    }

    return appCheckResult;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	08019434 	.word	0x08019434
 8009598:	08019450 	.word	0x08019450

0800959c <bld_jumpToApplication>:

/*
 * Function: bld_jumpToApplication
 */
gos_result_t bld_jumpToApplication (void_t)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t jumpResult = GOS_ERROR;
 80095a2:	23ae      	movs	r3, #174	@ 0xae
 80095a4:	717b      	strb	r3, [r7, #5]
    u16_t        irqIdx     = 0u;
 80095a6:	2300      	movs	r3, #0
 80095a8:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    if (currentSwInfo.appBinaryInfo.startAddress % 0x200 == 0u)
 80095aa:	4b21      	ldr	r3, [pc, #132]	@ (8009630 <bld_jumpToApplication+0x94>)
 80095ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d135      	bne.n	8009624 <bld_jumpToApplication+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80095b8:	b672      	cpsid	i
}
 80095ba:	bf00      	nop
    {
        /* Disable all interrupts */
        __disable_irq();

        /* Disable Systick timer */
        SysTick->CTRL = 0;
 80095bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009634 <bld_jumpToApplication+0x98>)
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]

        /* Set the clock to the default state */
        HAL_RCC_DeInit();
 80095c2:	f7fb fe7d 	bl	80052c0 <HAL_RCC_DeInit>
        HAL_DeInit();
 80095c6:	f7f8 facf 	bl	8001b68 <HAL_DeInit>

        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 80095ca:	2300      	movs	r3, #0
 80095cc:	80fb      	strh	r3, [r7, #6]
 80095ce:	e010      	b.n	80095f2 <bld_jumpToApplication+0x56>
        {
            NVIC->ICER[irqIdx] = 0xFFFFFFFF;
 80095d0:	4a19      	ldr	r2, [pc, #100]	@ (8009638 <bld_jumpToApplication+0x9c>)
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	3320      	adds	r3, #32
 80095d6:	f04f 31ff 	mov.w	r1, #4294967295
 80095da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[irqIdx] = 0xFFFFFFFF;
 80095de:	4a16      	ldr	r2, [pc, #88]	@ (8009638 <bld_jumpToApplication+0x9c>)
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	3360      	adds	r3, #96	@ 0x60
 80095e4:	f04f 31ff 	mov.w	r1, #4294967295
 80095e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 80095ec:	88fb      	ldrh	r3, [r7, #6]
 80095ee:	3301      	adds	r3, #1
 80095f0:	80fb      	strh	r3, [r7, #6]
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	2b07      	cmp	r3, #7
 80095f6:	d9eb      	bls.n	80095d0 <bld_jumpToApplication+0x34>
        }

        SYSCFG->MEMRMP = 0x01;
 80095f8:	4b10      	ldr	r3, [pc, #64]	@ (800963c <bld_jumpToApplication+0xa0>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

        SCB->VTOR = currentSwInfo.appBinaryInfo.startAddress;
 80095fe:	4a10      	ldr	r2, [pc, #64]	@ (8009640 <bld_jumpToApplication+0xa4>)
 8009600:	4b0b      	ldr	r3, [pc, #44]	@ (8009630 <bld_jumpToApplication+0x94>)
 8009602:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009606:	6093      	str	r3, [r2, #8]

        // Set the MSP
        __set_MSP(((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->initSp);
 8009608:	4b09      	ldr	r3, [pc, #36]	@ (8009630 <bld_jumpToApplication+0x94>)
 800960a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	f383 8808 	msr	MSP, r3
}
 8009618:	bf00      	nop

        // Jump to app firmware
        ((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->resetHandler();
 800961a:	4b05      	ldr	r3, [pc, #20]	@ (8009630 <bld_jumpToApplication+0x94>)
 800961c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4798      	blx	r3
    else
    {
        // Address is incorrect.
    }

    return jumpResult;
 8009624:	797b      	ldrb	r3, [r7, #5]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20001928 	.word	0x20001928
 8009634:	e000e010 	.word	0xe000e010
 8009638:	e000e100 	.word	0xe000e100
 800963c:	40013800 	.word	0x40013800
 8009640:	e000ed00 	.word	0xe000ed00

08009644 <bld_getBootloaderSize>:

/*
 * Function: bld_getBootloaderSize
 */
gos_result_t bld_getBootloaderSize (u32_t* pSize)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t sizeGetResult = GOS_SUCCESS;
 800964c:	2355      	movs	r3, #85	@ 0x55
 800964e:	73fb      	strb	r3, [r7, #15]
    u32_t        address       = BLD_ROM_END_ADDRESS;
 8009650:	4b13      	ldr	r3, [pc, #76]	@ (80096a0 <bld_getBootloaderSize+0x5c>)
 8009652:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pSize != NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d017      	beq.n	800968a <bld_getBootloaderSize+0x46>
    {
        *pSize = (BLD_ROM_END_ADDRESS - BLD_ROM_START_ADDRESS);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a11      	ldr	r2, [pc, #68]	@ (80096a4 <bld_getBootloaderSize+0x60>)
 800965e:	601a      	str	r2, [r3, #0]

        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 8009660:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <bld_getBootloaderSize+0x5c>)
 8009662:	60bb      	str	r3, [r7, #8]
 8009664:	e00c      	b.n	8009680 <bld_getBootloaderSize+0x3c>
        {
            if ((u8_t)(*((u32_t*)address)) != 0xFFu)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2bff      	cmp	r3, #255	@ 0xff
 800966e:	d10f      	bne.n	8009690 <bld_getBootloaderSize+0x4c>
            {
                break;
            }
            else
            {
                (*pSize)--;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	1e5a      	subs	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	3b01      	subs	r3, #1
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4a09      	ldr	r2, [pc, #36]	@ (80096a8 <bld_getBootloaderSize+0x64>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d2ee      	bcs.n	8009666 <bld_getBootloaderSize+0x22>
 8009688:	e003      	b.n	8009692 <bld_getBootloaderSize+0x4e>
        }
    }
    else
    {
        // NULL pointer error.
        sizeGetResult = GOS_ERROR;
 800968a:	23ae      	movs	r3, #174	@ 0xae
 800968c:	73fb      	strb	r3, [r7, #15]
 800968e:	e000      	b.n	8009692 <bld_getBootloaderSize+0x4e>
                break;
 8009690:	bf00      	nop
    }

    return sizeGetResult;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	0801ffff 	.word	0x0801ffff
 80096a4:	0001bfff 	.word	0x0001bfff
 80096a8:	08004000 	.word	0x08004000

080096ac <bld_getBootloaderCrc>:

/*
 * Function: bld_getBootloaderCrc
 */
gos_result_t bld_getBootloaderCrc (u32_t* pCrc)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 80096b4:	23ae      	movs	r3, #174	@ 0xae
 80096b6:	73fb      	strb	r3, [r7, #15]
    u32_t        bldSize      = 0u;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pCrc != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d011      	beq.n	80096e6 <bld_getBootloaderCrc+0x3a>
    {
        crcGetResult = bld_getBootloaderSize(&bldSize);
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff ffbc 	bl	8009644 <bld_getBootloaderSize>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
        crcGetResult &= drv_crcGetCrc32((u8_t*)BLD_ROM_START_ADDRESS, bldSize, pCrc);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	4619      	mov	r1, r3
 80096d6:	4809      	ldr	r0, [pc, #36]	@ (80096fc <bld_getBootloaderCrc+0x50>)
 80096d8:	f000 fbb4 	bl	8009e44 <drv_crcGetCrc32>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4013      	ands	r3, r2
 80096e4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer error.
    }

    if (crcGetResult != GOS_SUCCESS)
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b55      	cmp	r3, #85	@ 0x55
 80096ea:	d001      	beq.n	80096f0 <bld_getBootloaderCrc+0x44>
    {
        crcGetResult = GOS_ERROR;
 80096ec:	23ae      	movs	r3, #174	@ 0xae
 80096ee:	73fb      	strb	r3, [r7, #15]
    else
    {
        // OK.
    }

    return crcGetResult;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08004000 	.word	0x08004000

08009700 <bld_initData>:

/*
 * Function: bld_initData
 */
gos_result_t bld_initData (svl_pdhSwVerInfo_t* pBldSwVer)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       initDataResult     = GOS_SUCCESS;
 8009708:	2355      	movs	r3, #85	@ 0x55
 800970a:	77fb      	strb	r3, [r7, #31]
    u32_t              currentBldSwVerCrc = 0u;
 800970c:	2300      	movs	r3, #0
 800970e:	61bb      	str	r3, [r7, #24]
    u32_t              desiredBldSwVerCrc = 0u;
 8009710:	2300      	movs	r3, #0
 8009712:	617b      	str	r3, [r7, #20]
	u32_t              libVerCrc          = 0u;
 8009714:	2300      	movs	r3, #0
 8009716:	613b      	str	r3, [r7, #16]
	u32_t              testLibVerCrc      = 0u;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pBldSwVer != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 808a 	beq.w	8009838 <bld_initData+0x138>
    {
        // Get current software info.
        (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 8009724:	4848      	ldr	r0, [pc, #288]	@ (8009848 <bld_initData+0x148>)
 8009726:	f005 f9bb 	bl	800eaa0 <svl_pdhGetSwInfo>
    	(void_t) svl_pdhGetLibVersion(&libVerInfo);
 800972a:	4848      	ldr	r0, [pc, #288]	@ (800984c <bld_initData+0x14c>)
 800972c:	f005 f936 	bl	800e99c <svl_pdhGetLibVersion>

        // Calculate CRC of current and desired bootloader software info.
        initDataResult &= drv_crcGetCrc32((u8_t*)&currentSwInfo.bldSwVerInfo, sizeof(currentSwInfo.bldSwVerInfo), &currentBldSwVerCrc);
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	461a      	mov	r2, r3
 8009736:	21a0      	movs	r1, #160	@ 0xa0
 8009738:	4845      	ldr	r0, [pc, #276]	@ (8009850 <bld_initData+0x150>)
 800973a:	f000 fb83 	bl	8009e44 <drv_crcGetCrc32>
 800973e:	4603      	mov	r3, r0
 8009740:	461a      	mov	r2, r3
 8009742:	7ffb      	ldrb	r3, [r7, #31]
 8009744:	4013      	ands	r3, r2
 8009746:	77fb      	strb	r3, [r7, #31]
        initDataResult &= drv_crcGetCrc32((u8_t*)pBldSwVer, sizeof(*pBldSwVer), &desiredBldSwVerCrc);
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	461a      	mov	r2, r3
 800974e:	21a0      	movs	r1, #160	@ 0xa0
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fb77 	bl	8009e44 <drv_crcGetCrc32>
 8009756:	4603      	mov	r3, r0
 8009758:	461a      	mov	r2, r3
 800975a:	7ffb      	ldrb	r3, [r7, #31]
 800975c:	4013      	ands	r3, r2
 800975e:	77fb      	strb	r3, [r7, #31]

        initDataResult &= drv_crcGetCrc32((u8_t*)&libVerInfo, sizeof(libVerInfo), &libVerCrc);
 8009760:	f107 0310 	add.w	r3, r7, #16
 8009764:	461a      	mov	r2, r3
 8009766:	21a0      	movs	r1, #160	@ 0xa0
 8009768:	4838      	ldr	r0, [pc, #224]	@ (800984c <bld_initData+0x14c>)
 800976a:	f000 fb6b 	bl	8009e44 <drv_crcGetCrc32>
 800976e:	4603      	mov	r3, r0
 8009770:	461a      	mov	r2, r3
 8009772:	7ffb      	ldrb	r3, [r7, #31]
 8009774:	4013      	ands	r3, r2
 8009776:	77fb      	strb	r3, [r7, #31]
        initDataResult &= drv_crcGetCrc32((u8_t*)&(currentSwInfo.bldLibVerInfo), sizeof(currentSwInfo.bldLibVerInfo), &testLibVerCrc);
 8009778:	f107 030c 	add.w	r3, r7, #12
 800977c:	461a      	mov	r2, r3
 800977e:	21a0      	movs	r1, #160	@ 0xa0
 8009780:	4831      	ldr	r0, [pc, #196]	@ (8009848 <bld_initData+0x148>)
 8009782:	f000 fb5f 	bl	8009e44 <drv_crcGetCrc32>
 8009786:	4603      	mov	r3, r0
 8009788:	461a      	mov	r2, r3
 800978a:	7ffb      	ldrb	r3, [r7, #31]
 800978c:	4013      	ands	r3, r2
 800978e:	77fb      	strb	r3, [r7, #31]

        // Check if reset is needed.
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	429a      	cmp	r2, r3
 8009796:	d10d      	bne.n	80097b4 <bld_initData+0xb4>
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	429a      	cmp	r2, r3
 800979e:	d109      	bne.n	80097b4 <bld_initData+0xb4>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 80097a0:	4b29      	ldr	r3, [pc, #164]	@ (8009848 <bld_initData+0x148>)
 80097a2:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d104      	bne.n	80097b4 <bld_initData+0xb4>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 80097aa:	4b27      	ldr	r3, [pc, #156]	@ (8009848 <bld_initData+0x148>)
 80097ac:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d043      	beq.n	800983c <bld_initData+0x13c>
        {
            // Copy desired data.
            (void_t) memcpy((void_t*)&currentSwInfo.bldSwVerInfo, (void_t*)pBldSwVer, sizeof(svl_pdhSwVerInfo_t));
 80097b4:	4b24      	ldr	r3, [pc, #144]	@ (8009848 <bld_initData+0x148>)
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	33a0      	adds	r3, #160	@ 0xa0
 80097ba:	4611      	mov	r1, r2
 80097bc:	22a0      	movs	r2, #160	@ 0xa0
 80097be:	4618      	mov	r0, r3
 80097c0:	f00d fcb5 	bl	801712e <memcpy>

            // Fill out OS info.
            currentSwInfo.bldOsInfo.major = GOS_VERSION_MAJOR;
 80097c4:	4b20      	ldr	r3, [pc, #128]	@ (8009848 <bld_initData+0x148>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
            currentSwInfo.bldOsInfo.minor = GOS_VERSION_MINOR;
 80097cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009848 <bld_initData+0x148>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

            // Fill out binary data.
            currentSwInfo.bldBinaryInfo.startAddress = BLD_ROM_START_ADDRESS;
 80097d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009848 <bld_initData+0x148>)
 80097d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009854 <bld_initData+0x154>)
 80097d8:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
            initDataResult &= bld_getBootloaderSize(&currentSwInfo.bldBinaryInfo.size);
 80097dc:	481e      	ldr	r0, [pc, #120]	@ (8009858 <bld_initData+0x158>)
 80097de:	f7ff ff31 	bl	8009644 <bld_getBootloaderSize>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	7ffb      	ldrb	r3, [r7, #31]
 80097e8:	4013      	ands	r3, r2
 80097ea:	77fb      	strb	r3, [r7, #31]
            initDataResult &= bld_getBootloaderCrc(&currentSwInfo.bldBinaryInfo.crc);
 80097ec:	481b      	ldr	r0, [pc, #108]	@ (800985c <bld_initData+0x15c>)
 80097ee:	f7ff ff5d 	bl	80096ac <bld_getBootloaderCrc>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	7ffb      	ldrb	r3, [r7, #31]
 80097f8:	4013      	ands	r3, r2
 80097fa:	77fb      	strb	r3, [r7, #31]

            // Fill out library info.
            initDataResult &= svl_pdhGetLibVersion(&currentSwInfo.bldLibVerInfo);
 80097fc:	4812      	ldr	r0, [pc, #72]	@ (8009848 <bld_initData+0x148>)
 80097fe:	f005 f8cd 	bl	800e99c <svl_pdhGetLibVersion>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	7ffb      	ldrb	r3, [r7, #31]
 8009808:	4013      	ands	r3, r2
 800980a:	77fb      	strb	r3, [r7, #31]

            (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 800980c:	480e      	ldr	r0, [pc, #56]	@ (8009848 <bld_initData+0x148>)
 800980e:	f005 fa27 	bl	800ec60 <svl_pdhSetSwInfo>

            if (initDataResult == GOS_SUCCESS)
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	2b55      	cmp	r3, #85	@ 0x55
 8009816:	d109      	bne.n	800982c <bld_initData+0x12c>
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data updated. Restarting device...\r\n");
 8009818:	4811      	ldr	r0, [pc, #68]	@ (8009860 <bld_initData+0x160>)
 800981a:	f00c fb0f 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
                (void_t) gos_taskSleep(1000);
 800981e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009822:	f007 ff85 	bl	8011730 <gos_taskSleep>
                gos_kernelReset();
 8009826:	f006 fdeb 	bl	8010400 <gos_kernelReset>
 800982a:	e007      	b.n	800983c <bld_initData+0x13c>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data initialization failed.\r\n");
 800982c:	480d      	ldr	r0, [pc, #52]	@ (8009864 <bld_initData+0x164>)
 800982e:	f00c fb05 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
                initDataResult = GOS_ERROR;
 8009832:	23ae      	movs	r3, #174	@ 0xae
 8009834:	77fb      	strb	r3, [r7, #31]
 8009836:	e001      	b.n	800983c <bld_initData+0x13c>
            // Version info is up-to-date.
        }
    }
    else
    {
        initDataResult = GOS_ERROR;
 8009838:	23ae      	movs	r3, #174	@ 0xae
 800983a:	77fb      	strb	r3, [r7, #31]
    }

    return initDataResult;
 800983c:	7ffb      	ldrb	r3, [r7, #31]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20001928 	.word	0x20001928
 800984c:	20001eb0 	.word	0x20001eb0
 8009850:	200019c8 	.word	0x200019c8
 8009854:	08004000 	.word	0x08004000
 8009858:	20001a70 	.word	0x20001a70
 800985c:	20001a74 	.word	0x20001a74
 8009860:	0801946c 	.word	0x0801946c
 8009864:	0801949c 	.word	0x0801949c

08009868 <bld_initConfig>:

/*
 * Function: bld_initConfig
 */
gos_result_t bld_initConfig (void_t)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initCfgResult = GOS_SUCCESS;
 800986e:	2355      	movs	r3, #85	@ 0x55
 8009870:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 8009872:	4825      	ldr	r0, [pc, #148]	@ (8009908 <bld_initConfig+0xa0>)
 8009874:	f005 f984 	bl	800eb80 <svl_pdhGetBldCfg>

    // If boolean values are incorrect, it indicates an uninitialized
    // bootloader configuration.
    if ((bldConfig.updateMode      != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 8009878:	4b23      	ldr	r3, [pc, #140]	@ (8009908 <bld_initConfig+0xa0>)
 800987a:	791b      	ldrb	r3, [r3, #4]
 800987c:	2b36      	cmp	r3, #54	@ 0x36
 800987e:	d00b      	beq.n	8009898 <bld_initConfig+0x30>
 8009880:	4b21      	ldr	r3, [pc, #132]	@ (8009908 <bld_initConfig+0xa0>)
 8009882:	791b      	ldrb	r3, [r3, #4]
 8009884:	2b49      	cmp	r3, #73	@ 0x49
 8009886:	d007      	beq.n	8009898 <bld_initConfig+0x30>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 8009888:	4b1f      	ldr	r3, [pc, #124]	@ (8009908 <bld_initConfig+0xa0>)
 800988a:	781b      	ldrb	r3, [r3, #0]
    if ((bldConfig.updateMode      != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 800988c:	2b36      	cmp	r3, #54	@ 0x36
 800988e:	d003      	beq.n	8009898 <bld_initConfig+0x30>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 8009890:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <bld_initConfig+0xa0>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b49      	cmp	r3, #73	@ 0x49
 8009896:	d109      	bne.n	80098ac <bld_initConfig+0x44>
    	bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 8009898:	4b1b      	ldr	r3, [pc, #108]	@ (8009908 <bld_initConfig+0xa0>)
 800989a:	f8d3 3006 	ldr.w	r3, [r3, #6]
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <bld_initConfig+0x44>
    	bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 80098a2:	4b19      	ldr	r3, [pc, #100]	@ (8009908 <bld_initConfig+0xa0>)
 80098a4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d127      	bne.n	80098fc <bld_initConfig+0x94>
    {
        bldConfig.requestTimeout             = BLD_DEFAULT_REQ_TMO_MS;
 80098ac:	4a16      	ldr	r2, [pc, #88]	@ (8009908 <bld_initConfig+0xa0>)
 80098ae:	2300      	movs	r3, #0
 80098b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098b8:	f443 436a 	orr.w	r3, r3, #59904	@ 0xea00
 80098bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80098c0:	80d3      	strh	r3, [r2, #6]
 80098c2:	2300      	movs	r3, #0
 80098c4:	8113      	strh	r3, [r2, #8]
        bldConfig.installTimeout             = BLD_DEFAULT_INSTALL_TMO_MS;
 80098c6:	4a10      	ldr	r2, [pc, #64]	@ (8009908 <bld_initConfig+0xa0>)
 80098c8:	2300      	movs	r3, #0
 80098ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098d2:	f443 4354 	orr.w	r3, r3, #54272	@ 0xd400
 80098d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098da:	8153      	strh	r3, [r2, #10]
 80098dc:	2300      	movs	r3, #0
 80098de:	f043 0301 	orr.w	r3, r3, #1
 80098e2:	8193      	strh	r3, [r2, #12]
        bldConfig.startupCounter             = 0u;
 80098e4:	4b08      	ldr	r3, [pc, #32]	@ (8009908 <bld_initConfig+0xa0>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	715a      	strb	r2, [r3, #5]
        bldConfig.updateMode                 = GOS_FALSE;
 80098ea:	4b07      	ldr	r3, [pc, #28]	@ (8009908 <bld_initConfig+0xa0>)
 80098ec:	2249      	movs	r2, #73	@ 0x49
 80098ee:	711a      	strb	r2, [r3, #4]
        bldConfig.installRequested           = GOS_FALSE;
 80098f0:	4b05      	ldr	r3, [pc, #20]	@ (8009908 <bld_initConfig+0xa0>)
 80098f2:	2249      	movs	r2, #73	@ 0x49
 80098f4:	701a      	strb	r2, [r3, #0]

        (void_t) svl_pdhSetBldCfg(&bldConfig);
 80098f6:	4804      	ldr	r0, [pc, #16]	@ (8009908 <bld_initConfig+0xa0>)
 80098f8:	f005 fa22 	bl	800ed40 <svl_pdhSetBldCfg>
    else
    {
        // Configuration is initialized.
    }

    return initCfgResult;
 80098fc:	79fb      	ldrb	r3, [r7, #7]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20001918 	.word	0x20001918

0800990c <bld_printConfig>:

/*
 * Function: bld_printConfig
 */
gos_result_t bld_printConfig (void_t)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 8009910:	480b      	ldr	r0, [pc, #44]	@ (8009940 <bld_printConfig+0x34>)
 8009912:	f005 f935 	bl	800eb80 <svl_pdhGetBldCfg>

    (void_t) gos_traceTraceFormattedUnsafe(TRACE_BG_BLUE_START"BOOTLOADER CONFIGURATION"TRACE_FORMAT_RESET"\r\n");
 8009916:	480b      	ldr	r0, [pc, #44]	@ (8009944 <bld_printConfig+0x38>)
 8009918:	f00c fa90 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Request timeout:      \t%u ms\r\n", bldConfig.requestTimeout);
 800991c:	4b08      	ldr	r3, [pc, #32]	@ (8009940 <bld_printConfig+0x34>)
 800991e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009922:	4619      	mov	r1, r3
 8009924:	4808      	ldr	r0, [pc, #32]	@ (8009948 <bld_printConfig+0x3c>)
 8009926:	f00c fa89 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Install timeout:      \t%u ms\r\n\r\n", bldConfig.installTimeout);
 800992a:	4b05      	ldr	r3, [pc, #20]	@ (8009940 <bld_printConfig+0x34>)
 800992c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8009930:	4619      	mov	r1, r3
 8009932:	4806      	ldr	r0, [pc, #24]	@ (800994c <bld_printConfig+0x40>)
 8009934:	f00c fa82 	bl	8015e3c <gos_traceTraceFormattedUnsafe>

    return GOS_SUCCESS;
 8009938:	2355      	movs	r3, #85	@ 0x55
}
 800993a:	4618      	mov	r0, r3
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20001918 	.word	0x20001918
 8009944:	080194c8 	.word	0x080194c8
 8009948:	080194ec 	.word	0x080194ec
 800994c:	0801950c 	.word	0x0801950c

08009950 <drv_25lc640Init>:

/*
 * Function: drv_25lc640Init
 */
gos_result_t drv_25lc640Init (void_t* pDevice)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 8009958:	2355      	movs	r3, #85	@ 0x55
 800995a:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800995c:	2300      	movs	r3, #0
 800995e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d103      	bne.n	800996e <drv_25lc640Init+0x1e>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f043 0301 	orr.w	r3, r3, #1
 800996c:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc640Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC640_MUTEX_INIT);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10d      	bne.n	8009992 <drv_25lc640Init+0x42>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3302      	adds	r3, #2
 800997a:	4618      	mov	r0, r3
 800997c:	f00a fa18 	bl	8013db0 <gos_mutexInit>
 8009980:	4603      	mov	r3, r0
 8009982:	2b55      	cmp	r3, #85	@ 0x55
 8009984:	d005      	beq.n	8009992 <drv_25lc640Init+0x42>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f043 0208 	orr.w	r2, r3, #8
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d102      	bne.n	800999e <drv_25lc640Init+0x4e>
 8009998:	2355      	movs	r3, #85	@ 0x55
 800999a:	73fb      	strb	r3, [r7, #15]
 800999c:	e001      	b.n	80099a2 <drv_25lc640Init+0x52>
 800999e:	23ae      	movs	r3, #174	@ 0xae
 80099a0:	73fb      	strb	r3, [r7, #15]

    return initResult;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <drv_25lc640Read>:

/*
 * Function: drv_25lc640Read
 */
GOS_INLINE gos_result_t drv_25lc640Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b08f      	sub	sp, #60	@ 0x3c
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	461a      	mov	r2, r3
 80099b8:	460b      	mov	r3, r1
 80099ba:	817b      	strh	r3, [r7, #10]
 80099bc:	4613      	mov	r3, r2
 80099be:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 80099c0:	2355      	movs	r3, #85	@ 0x55
 80099c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage     = 0u;
 80099c6:	2300      	movs	r3, #0
 80099c8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage       = 0u;
 80099ca:	2300      	movs	r3, #0
 80099cc:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 80099ce:	2300      	movs	r3, #0
 80099d0:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 80099d2:	2300      	movs	r3, #0
 80099d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos           = 0u;
 80099d6:	2300      	movs	r3, #0
 80099d8:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset        = 0u;
 80099da:	2300      	movs	r3, #0
 80099dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress    = 0u;
 80099de:	2300      	movs	r3, #0
 80099e0:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 80099e2:	2300      	movs	r3, #0
 80099e4:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 80099ea:	2300      	movs	r3, #0
 80099ec:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d103      	bne.n	80099fc <drv_25lc640Read+0x50>
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC640_TARGET_NULL);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <drv_25lc640Read+0x5e>
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	f043 0302 	orr.w	r3, r3, #2
 8009a08:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f040 80ce 	bne.w	8009bae <drv_25lc640Read+0x202>
 8009a12:	897a      	ldrh	r2, [r7, #10]
 8009a14:	893b      	ldrh	r3, [r7, #8]
 8009a16:	4413      	add	r3, r2
 8009a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a1c:	f080 80c7 	bcs.w	8009bae <drv_25lc640Read+0x202>
    {
        DRV_ERROR_CHK_SET(
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10e      	bne.n	8009a44 <drv_25lc640Read+0x98>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1c9a      	adds	r2, r3, #2
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f00a f9d7 	bl	8013de4 <gos_mutexLock>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b55      	cmp	r3, #85	@ 0x55
 8009a3a:	d003      	beq.n	8009a44 <drv_25lc640Read+0x98>
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	f043 0310 	orr.w	r3, r3, #16
 8009a42:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <drv_25lc640Read+0xa6>
 8009a4a:	2355      	movs	r3, #85	@ 0x55
 8009a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009a50:	e002      	b.n	8009a58 <drv_25lc640Read+0xac>
 8009a52:	23ae      	movs	r3, #174	@ 0xae
 8009a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8009a58:	2305      	movs	r3, #5
 8009a5a:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8009a5c:	897b      	ldrh	r3, [r7, #10]
 8009a5e:	095b      	lsrs	r3, r3, #5
 8009a60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8009a62:	893a      	ldrh	r2, [r7, #8]
 8009a64:	897b      	ldrh	r3, [r7, #10]
 8009a66:	4413      	add	r3, r2
 8009a68:	095b      	lsrs	r3, r3, #5
 8009a6a:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8009a6c:	8bfa      	ldrh	r2, [r7, #30]
 8009a6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	3301      	adds	r3, #1
 8009a76:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 8009a7c:	897b      	ldrh	r3, [r7, #10]
 8009a7e:	f003 031f 	and.w	r3, r3, #31
 8009a82:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8009a84:	2300      	movs	r3, #0
 8009a86:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009a88:	e083      	b.n	8009b92 <drv_25lc640Read+0x1e6>
        {
            memAddress = startPage << paddrposition | offset;
 8009a8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	b21a      	sxth	r2, r3
 8009a94:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8009a9e:	893a      	ldrh	r2, [r7, #8]
 8009aa0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009aa2:	4413      	add	r3, r2
 8009aa4:	2b1f      	cmp	r3, #31
 8009aa6:	d904      	bls.n	8009ab2 <drv_25lc640Read+0x106>
 8009aa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009aaa:	f1c3 0320 	rsb	r3, r3, #32
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	e000      	b.n	8009ab4 <drv_25lc640Read+0x108>
 8009ab2:	893b      	ldrh	r3, [r7, #8]
 8009ab4:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 8009ab6:	4b49      	ldr	r3, [pc, #292]	@ (8009bdc <drv_25lc640Read+0x230>)
 8009ab8:	2203      	movs	r2, #3
 8009aba:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 8009abc:	8b7b      	ldrh	r3, [r7, #26]
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	4b45      	ldr	r3, [pc, #276]	@ (8009bdc <drv_25lc640Read+0x230>)
 8009ac6:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 8009ac8:	8b7b      	ldrh	r3, [r7, #26]
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	4b43      	ldr	r3, [pc, #268]	@ (8009bdc <drv_25lc640Read+0x230>)
 8009ace:	709a      	strb	r2, [r3, #2]

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 f8ce 	bl	800ac78 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d112      	bne.n	8009b08 <drv_25lc640Read+0x15c>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	7818      	ldrb	r0, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	2203      	movs	r2, #3
 8009af4:	4939      	ldr	r1, [pc, #228]	@ (8009bdc <drv_25lc640Read+0x230>)
 8009af6:	f001 ff4d 	bl	800b994 <drv_spiTransmitIT>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b55      	cmp	r3, #85	@ 0x55
 8009afe:	d003      	beq.n	8009b08 <drv_25lc640Read+0x15c>
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	f043 0320 	orr.w	r3, r3, #32
 8009b06:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <drv_25lc640Read+0x16a>
 8009b0e:	2355      	movs	r3, #85	@ 0x55
 8009b10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b14:	e002      	b.n	8009b1c <drv_25lc640Read+0x170>
 8009b16:	23ae      	movs	r3, #174	@ 0xae
 8009b18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            DRV_ERROR_CHK_SET(
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d114      	bne.n	8009b4c <drv_25lc640Read+0x1a0>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	7818      	ldrb	r0, [r3, #0]
 8009b26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	18d1      	adds	r1, r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689c      	ldr	r4, [r3, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	8b3a      	ldrh	r2, [r7, #24]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4623      	mov	r3, r4
 8009b3a:	f001 ff8f 	bl	800ba5c <drv_spiReceiveIT>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b55      	cmp	r3, #85	@ 0x55
 8009b42:	d003      	beq.n	8009b4c <drv_25lc640Read+0x1a0>
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	f043 0320 	orr.w	r3, r3, #32
 8009b4a:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d103      	bne.n	8009b5a <drv_25lc640Read+0x1ae>
 8009b52:	2355      	movs	r3, #85	@ 0x55
 8009b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b58:	e002      	b.n	8009b60 <drv_25lc640Read+0x1b4>
 8009b5a:	23ae      	movs	r3, #174	@ 0xae
 8009b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2101      	movs	r1, #1
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 f886 	bl	800ac78 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 8009b6c:	200a      	movs	r0, #10
 8009b6e:	f007 fddf 	bl	8011730 <gos_taskSleep>

            startPage += 1;
 8009b72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009b74:	3301      	adds	r3, #1
 8009b76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 8009b7c:	893a      	ldrh	r2, [r7, #8]
 8009b7e:	8b3b      	ldrh	r3, [r7, #24]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8009b84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009b86:	8b3b      	ldrh	r3, [r7, #24]
 8009b88:	4413      	add	r3, r2
 8009b8a:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8009b8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b8e:	3301      	adds	r3, #1
 8009b90:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009b92:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009b94:	8bbb      	ldrh	r3, [r7, #28]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d204      	bcs.n	8009ba4 <drv_25lc640Read+0x1f8>
 8009b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b9e:	2b55      	cmp	r3, #85	@ 0x55
 8009ba0:	f43f af73 	beq.w	8009a8a <drv_25lc640Read+0xde>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f00a fa21 	bl	8013ff0 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d103      	bne.n	8009bc8 <drv_25lc640Read+0x21c>
 8009bc0:	2355      	movs	r3, #85	@ 0x55
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009bc6:	e002      	b.n	8009bce <drv_25lc640Read+0x222>
 8009bc8:	23ae      	movs	r3, #174	@ 0xae
 8009bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return readResult;
 8009bce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3734      	adds	r7, #52	@ 0x34
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20001f50 	.word	0x20001f50

08009be0 <drv_25lc640Write>:

/*
 * Function: drv_25lc640Write
 */
GOS_INLINE gos_result_t drv_25lc640Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08e      	sub	sp, #56	@ 0x38
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	461a      	mov	r2, r3
 8009bec:	460b      	mov	r3, r1
 8009bee:	817b      	strh	r3, [r7, #10]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 8009bf4:	2355      	movs	r3, #85	@ 0x55
 8009bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage       = 0u;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage         = 0u;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages      = 0u;
 8009c02:	2300      	movs	r3, #0
 8009c04:	83bb      	strh	r3, [r7, #28]
    u16_t        idx             = 0u;
 8009c06:	2300      	movs	r3, #0
 8009c08:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos             = 0u;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset          = 0u;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress      = 0u;
 8009c12:	2300      	movs	r3, #0
 8009c14:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem        = 0u;
 8009c16:	2300      	movs	r3, #0
 8009c18:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition   = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags      = 0u;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	623b      	str	r3, [r7, #32]
    u8_t         wrenInstruction = 0x06;
 8009c22:	2306      	movs	r3, #6
 8009c24:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d103      	bne.n	8009c34 <drv_25lc640Write+0x54>
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	f043 0301 	orr.w	r3, r3, #1
 8009c32:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC640_DATA_NULL);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <drv_25lc640Write+0x62>
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f043 0304 	orr.w	r3, r3, #4
 8009c40:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f040 80e3 	bne.w	8009e10 <drv_25lc640Write+0x230>
 8009c4a:	897a      	ldrh	r2, [r7, #10]
 8009c4c:	893b      	ldrh	r3, [r7, #8]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c54:	f080 80dc 	bcs.w	8009e10 <drv_25lc640Write+0x230>
    {
        DRV_ERROR_CHK_SET(
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10e      	bne.n	8009c7c <drv_25lc640Write+0x9c>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	1c9a      	adds	r2, r3, #2
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	4619      	mov	r1, r3
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f00a f8bb 	bl	8013de4 <gos_mutexLock>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b55      	cmp	r3, #85	@ 0x55
 8009c72:	d003      	beq.n	8009c7c <drv_25lc640Write+0x9c>
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	f043 0310 	orr.w	r3, r3, #16
 8009c7a:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d103      	bne.n	8009c8a <drv_25lc640Write+0xaa>
 8009c82:	2355      	movs	r3, #85	@ 0x55
 8009c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009c88:	e002      	b.n	8009c90 <drv_25lc640Write+0xb0>
 8009c8a:	23ae      	movs	r3, #174	@ 0xae
 8009c8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8009c90:	2305      	movs	r3, #5
 8009c92:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8009c94:	897b      	ldrh	r3, [r7, #10]
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8009c9a:	893a      	ldrh	r2, [r7, #8]
 8009c9c:	897b      	ldrh	r3, [r7, #10]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	095b      	lsrs	r3, r3, #5
 8009ca2:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8009ca4:	8bfa      	ldrh	r2, [r7, #30]
 8009ca6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3301      	adds	r3, #1
 8009cae:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 8009cb4:	897b      	ldrh	r3, [r7, #10]
 8009cb6:	f003 031f 	and.w	r3, r3, #31
 8009cba:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009cc0:	e098      	b.n	8009df4 <drv_25lc640Write+0x214>
        {
            memAddress = startPage << paddrposition | offset;
 8009cc2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	b21a      	sxth	r2, r3
 8009ccc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	b21b      	sxth	r3, r3
 8009cd4:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8009cd6:	893a      	ldrh	r2, [r7, #8]
 8009cd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009cda:	4413      	add	r3, r2
 8009cdc:	2b1f      	cmp	r3, #31
 8009cde:	d904      	bls.n	8009cea <drv_25lc640Write+0x10a>
 8009ce0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ce2:	f1c3 0320 	rsb	r3, r3, #32
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	e000      	b.n	8009cec <drv_25lc640Write+0x10c>
 8009cea:	893b      	ldrh	r3, [r7, #8]
 8009cec:	833b      	strh	r3, [r7, #24]

            txBuffer[0] = 0x02;
 8009cee:	4b53      	ldr	r3, [pc, #332]	@ (8009e3c <drv_25lc640Write+0x25c>)
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (memAddress >> 8);
 8009cf4:	8b7b      	ldrh	r3, [r7, #26]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8009e3c <drv_25lc640Write+0x25c>)
 8009cfe:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = memAddress & 0xFF;
 8009d00:	8b7b      	ldrh	r3, [r7, #26]
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	4b4d      	ldr	r3, [pc, #308]	@ (8009e3c <drv_25lc640Write+0x25c>)
 8009d06:	709a      	strb	r2, [r3, #2]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 8009d08:	484d      	ldr	r0, [pc, #308]	@ (8009e40 <drv_25lc640Write+0x260>)
 8009d0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	4413      	add	r3, r2
 8009d10:	8b3a      	ldrh	r2, [r7, #24]
 8009d12:	4619      	mov	r1, r3
 8009d14:	f00d fa0b 	bl	801712e <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 ffaa 	bl	800ac78 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d113      	bne.n	8009d52 <drv_25lc640Write+0x172>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	7818      	ldrb	r0, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f107 0113 	add.w	r1, r7, #19
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f001 fe28 	bl	800b994 <drv_spiTransmitIT>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b55      	cmp	r3, #85	@ 0x55
 8009d48:	d003      	beq.n	8009d52 <drv_25lc640Write+0x172>
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d50:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d103      	bne.n	8009d60 <drv_25lc640Write+0x180>
 8009d58:	2355      	movs	r3, #85	@ 0x55
 8009d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009d5e:	e002      	b.n	8009d66 <drv_25lc640Write+0x186>
 8009d60:	23ae      	movs	r3, #174	@ 0xae
 8009d62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 ff83 	bl	800ac78 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 ff7d 	bl	800ac78 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d114      	bne.n	8009dae <drv_25lc640Write+0x1ce>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	7818      	ldrb	r0, [r3, #0]
 8009d88:	8b3b      	ldrh	r3, [r7, #24]
 8009d8a:	3303      	adds	r3, #3
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6899      	ldr	r1, [r3, #8]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4928      	ldr	r1, [pc, #160]	@ (8009e3c <drv_25lc640Write+0x25c>)
 8009d9c:	f001 fdfa 	bl	800b994 <drv_spiTransmitIT>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b55      	cmp	r3, #85	@ 0x55
 8009da4:	d003      	beq.n	8009dae <drv_25lc640Write+0x1ce>
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dac:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d103      	bne.n	8009dbc <drv_25lc640Write+0x1dc>
 8009db4:	2355      	movs	r3, #85	@ 0x55
 8009db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009dba:	e002      	b.n	8009dc2 <drv_25lc640Write+0x1e2>
 8009dbc:	23ae      	movs	r3, #174	@ 0xae
 8009dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 ff55 	bl	800ac78 <drv_gpioWritePin>

            startPage += 1;
 8009dce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 8009dd8:	893a      	ldrh	r2, [r7, #8]
 8009dda:	8b3b      	ldrh	r3, [r7, #24]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8009de0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009de2:	8b3b      	ldrh	r3, [r7, #24]
 8009de4:	4413      	add	r3, r2
 8009de6:	853b      	strh	r3, [r7, #40]	@ 0x28

            (void_t) gos_taskSleep(5);
 8009de8:	2005      	movs	r0, #5
 8009dea:	f007 fca1 	bl	8011730 <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8009dee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009df0:	3301      	adds	r3, #1
 8009df2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009df4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009df6:	8bbb      	ldrh	r3, [r7, #28]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d204      	bcs.n	8009e06 <drv_25lc640Write+0x226>
 8009dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e00:	2b55      	cmp	r3, #85	@ 0x55
 8009e02:	f43f af5e 	beq.w	8009cc2 <drv_25lc640Write+0xe2>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3302      	adds	r3, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f00a f8f0 	bl	8013ff0 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <drv_25lc640Write+0x24a>
 8009e22:	2355      	movs	r3, #85	@ 0x55
 8009e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009e28:	e002      	b.n	8009e30 <drv_25lc640Write+0x250>
 8009e2a:	23ae      	movs	r3, #174	@ 0xae
 8009e2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return writeResult;
 8009e30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3730      	adds	r7, #48	@ 0x30
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20001f50 	.word	0x20001f50
 8009e40:	20001f53 	.word	0x20001f53

08009e44 <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b089      	sub	sp, #36	@ 0x24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 8009e50:	23ae      	movs	r3, #174	@ 0xae
 8009e52:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 8009e54:	2300      	movs	r3, #0
 8009e56:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e60:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d030      	beq.n	8009eca <drv_crcGetCrc32+0x86>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d02d      	beq.n	8009eca <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e021      	b.n	8009eb8 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	4413      	add	r3, r2
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	4053      	eors	r3, r2
 8009e82:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
 8009e88:	e010      	b.n	8009eac <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	da07      	bge.n	8009ea0 <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed8 <drv_crcGetCrc32+0x94>)
 8009e9a:	4053      	eors	r3, r2
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	e002      	b.n	8009ea6 <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	75fb      	strb	r3, [r7, #23]
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	2b1f      	cmp	r3, #31
 8009eb0:	d9eb      	bls.n	8009e8a <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	61bb      	str	r3, [r7, #24]
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d3d9      	bcc.n	8009e74 <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 8009ec6:	2355      	movs	r3, #85	@ 0x55
 8009ec8:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 8009eca:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3724      	adds	r7, #36	@ 0x24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	04c11db7 	.word	0x04c11db7

08009edc <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 8009eea:	239c      	movs	r3, #156	@ 0x9c
 8009eec:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d015      	beq.n	8009f24 <drv_crcCheckCrc32+0x48>
 8009ef8:	f107 0310 	add.w	r3, r7, #16
 8009efc:	461a      	mov	r2, r3
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f7ff ff9f 	bl	8009e44 <drv_crcGetCrc32>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b55      	cmp	r3, #85	@ 0x55
 8009f0a:	d10b      	bne.n	8009f24 <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d101      	bne.n	8009f18 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 8009f14:	23ca      	movs	r3, #202	@ 0xca
 8009f16:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 8009f36:	2355      	movs	r3, #85	@ 0x55
 8009f38:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8009f3e:	2300      	movs	r3, #0
 8009f40:	71bb      	strb	r3, [r7, #6]
 8009f42:	e0c9      	b.n	800a0d8 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 8009f44:	79ba      	ldrb	r2, [r7, #6]
 8009f46:	496c      	ldr	r1, [pc, #432]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009f48:	4613      	mov	r3, r2
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	440b      	add	r3, r1
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	4619      	mov	r1, r3
 8009f56:	79ba      	ldrb	r2, [r7, #6]
 8009f58:	4b68      	ldr	r3, [pc, #416]	@ (800a0fc <drv_dmaInit+0x1cc>)
 8009f5a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009f5e:	4866      	ldr	r0, [pc, #408]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009f60:	4613      	mov	r3, r2
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	4413      	add	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	4403      	add	r3, r0
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 8009f6e:	79b9      	ldrb	r1, [r7, #6]
 8009f70:	79ba      	ldrb	r2, [r7, #6]
 8009f72:	4861      	ldr	r0, [pc, #388]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009f74:	460b      	mov	r3, r1
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	440b      	add	r3, r1
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4403      	add	r3, r0
 8009f7e:	3364      	adds	r3, #100	@ 0x64
 8009f80:	6819      	ldr	r1, [r3, #0]
 8009f82:	485d      	ldr	r0, [pc, #372]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009f84:	4613      	mov	r3, r2
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	4413      	add	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4403      	add	r3, r0
 8009f8e:	3308      	adds	r3, #8
 8009f90:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 8009f92:	79b9      	ldrb	r1, [r7, #6]
 8009f94:	79ba      	ldrb	r2, [r7, #6]
 8009f96:	4858      	ldr	r0, [pc, #352]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009f98:	460b      	mov	r3, r1
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	440b      	add	r3, r1
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	4403      	add	r3, r0
 8009fa2:	3368      	adds	r3, #104	@ 0x68
 8009fa4:	6819      	ldr	r1, [r3, #0]
 8009fa6:	4854      	ldr	r0, [pc, #336]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009fa8:	4613      	mov	r3, r2
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	4413      	add	r3, r2
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4403      	add	r3, r0
 8009fb2:	330c      	adds	r3, #12
 8009fb4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 8009fb6:	79b9      	ldrb	r1, [r7, #6]
 8009fb8:	79ba      	ldrb	r2, [r7, #6]
 8009fba:	484f      	ldr	r0, [pc, #316]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	440b      	add	r3, r1
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	4403      	add	r3, r0
 8009fc6:	336c      	adds	r3, #108	@ 0x6c
 8009fc8:	6819      	ldr	r1, [r3, #0]
 8009fca:	484b      	ldr	r0, [pc, #300]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009fcc:	4613      	mov	r3, r2
 8009fce:	011b      	lsls	r3, r3, #4
 8009fd0:	4413      	add	r3, r2
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	4403      	add	r3, r0
 8009fd6:	3310      	adds	r3, #16
 8009fd8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 8009fda:	79b9      	ldrb	r1, [r7, #6]
 8009fdc:	79ba      	ldrb	r2, [r7, #6]
 8009fde:	4846      	ldr	r0, [pc, #280]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	440b      	add	r3, r1
 8009fe6:	00db      	lsls	r3, r3, #3
 8009fe8:	4403      	add	r3, r0
 8009fea:	3370      	adds	r3, #112	@ 0x70
 8009fec:	6819      	ldr	r1, [r3, #0]
 8009fee:	4842      	ldr	r0, [pc, #264]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	4413      	add	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	4403      	add	r3, r0
 8009ffa:	3314      	adds	r3, #20
 8009ffc:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 8009ffe:	79b9      	ldrb	r1, [r7, #6]
 800a000:	79ba      	ldrb	r2, [r7, #6]
 800a002:	483d      	ldr	r0, [pc, #244]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a004:	460b      	mov	r3, r1
 800a006:	011b      	lsls	r3, r3, #4
 800a008:	440b      	add	r3, r1
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	4403      	add	r3, r0
 800a00e:	3374      	adds	r3, #116	@ 0x74
 800a010:	6819      	ldr	r1, [r3, #0]
 800a012:	4839      	ldr	r0, [pc, #228]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a014:	4613      	mov	r3, r2
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	4413      	add	r3, r2
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	4403      	add	r3, r0
 800a01e:	3318      	adds	r3, #24
 800a020:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 800a022:	79b9      	ldrb	r1, [r7, #6]
 800a024:	79ba      	ldrb	r2, [r7, #6]
 800a026:	4834      	ldr	r0, [pc, #208]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a028:	460b      	mov	r3, r1
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	440b      	add	r3, r1
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	4403      	add	r3, r0
 800a032:	3378      	adds	r3, #120	@ 0x78
 800a034:	6819      	ldr	r1, [r3, #0]
 800a036:	4830      	ldr	r0, [pc, #192]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a038:	4613      	mov	r3, r2
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	4413      	add	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	4403      	add	r3, r0
 800a042:	331c      	adds	r3, #28
 800a044:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 800a046:	79b9      	ldrb	r1, [r7, #6]
 800a048:	79ba      	ldrb	r2, [r7, #6]
 800a04a:	482b      	ldr	r0, [pc, #172]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a04c:	460b      	mov	r3, r1
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	440b      	add	r3, r1
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	4403      	add	r3, r0
 800a056:	337c      	adds	r3, #124	@ 0x7c
 800a058:	6819      	ldr	r1, [r3, #0]
 800a05a:	4827      	ldr	r0, [pc, #156]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a05c:	4613      	mov	r3, r2
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	4413      	add	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	4403      	add	r3, r0
 800a066:	3320      	adds	r3, #32
 800a068:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 800a06a:	79b9      	ldrb	r1, [r7, #6]
 800a06c:	79ba      	ldrb	r2, [r7, #6]
 800a06e:	4822      	ldr	r0, [pc, #136]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a070:	460b      	mov	r3, r1
 800a072:	011b      	lsls	r3, r3, #4
 800a074:	440b      	add	r3, r1
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4403      	add	r3, r0
 800a07a:	3380      	adds	r3, #128	@ 0x80
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	481e      	ldr	r0, [pc, #120]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a080:	4613      	mov	r3, r2
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	4413      	add	r3, r2
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	4403      	add	r3, r0
 800a08a:	3324      	adds	r3, #36	@ 0x24
 800a08c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 800a08e:	79b9      	ldrb	r1, [r7, #6]
 800a090:	79ba      	ldrb	r2, [r7, #6]
 800a092:	4819      	ldr	r0, [pc, #100]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a094:	460b      	mov	r3, r1
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	440b      	add	r3, r1
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	4403      	add	r3, r0
 800a09e:	3384      	adds	r3, #132	@ 0x84
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	4815      	ldr	r0, [pc, #84]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	4413      	add	r3, r2
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	4403      	add	r3, r0
 800a0ae:	3328      	adds	r3, #40	@ 0x28
 800a0b0:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 800a0b2:	79ba      	ldrb	r2, [r7, #6]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	4413      	add	r3, r2
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4a0e      	ldr	r2, [pc, #56]	@ (800a0f8 <drv_dmaInit+0x1c8>)
 800a0be:	4413      	add	r3, r2
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f7 feec 	bl	8001ea0 <HAL_DMA_Init>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 800a0ce:	23ae      	movs	r3, #174	@ 0xae
 800a0d0:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800a0d2:	79bb      	ldrb	r3, [r7, #6]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	71bb      	strb	r3, [r7, #6]
 800a0d8:	79ba      	ldrb	r2, [r7, #6]
 800a0da:	4b09      	ldr	r3, [pc, #36]	@ (800a100 <drv_dmaInit+0x1d0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4909      	ldr	r1, [pc, #36]	@ (800a104 <drv_dmaInit+0x1d4>)
 800a0e0:	fba1 1303 	umull	r1, r3, r1, r3
 800a0e4:	09db      	lsrs	r3, r3, #7
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	f4ff af2c 	bcc.w	8009f44 <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20000174 	.word	0x20000174
 800a0fc:	20000484 	.word	0x20000484
 800a100:	2000030c 	.word	0x2000030c
 800a104:	f0f0f0f1 	.word	0xf0f0f0f1

0800a108 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a10c:	4b19      	ldr	r3, [pc, #100]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <DMA1_Stream0_IRQHandler+0x18>
 800a114:	4b18      	ldr	r3, [pc, #96]	@ (800a178 <DMA1_Stream0_IRQHandler+0x70>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	3301      	adds	r3, #1
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	4b16      	ldr	r3, [pc, #88]	@ (800a178 <DMA1_Stream0_IRQHandler+0x70>)
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	4b14      	ldr	r3, [pc, #80]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	b2da      	uxtb	r2, r3
 800a128:	4b12      	ldr	r3, [pc, #72]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a12a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 800a12c:	4b13      	ldr	r3, [pc, #76]	@ (800a17c <DMA1_Stream0_IRQHandler+0x74>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 800a134:	4b11      	ldr	r3, [pc, #68]	@ (800a17c <DMA1_Stream0_IRQHandler+0x74>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7f8 f848 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a140:	4b0c      	ldr	r3, [pc, #48]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d005      	beq.n	800a154 <DMA1_Stream0_IRQHandler+0x4c>
 800a148:	4b0a      	ldr	r3, [pc, #40]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	4b08      	ldr	r3, [pc, #32]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	4b07      	ldr	r3, [pc, #28]	@ (800a174 <DMA1_Stream0_IRQHandler+0x6c>)
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <DMA1_Stream0_IRQHandler+0x68>
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <DMA1_Stream0_IRQHandler+0x70>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <DMA1_Stream0_IRQHandler+0x68>
 800a164:	4b04      	ldr	r3, [pc, #16]	@ (800a178 <DMA1_Stream0_IRQHandler+0x70>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	3b01      	subs	r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	4b02      	ldr	r3, [pc, #8]	@ (800a178 <DMA1_Stream0_IRQHandler+0x70>)
 800a16e:	701a      	strb	r2, [r3, #0]
}
 800a170:	bf00      	nop
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20005e46 	.word	0x20005e46
 800a178:	20005e45 	.word	0x20005e45
 800a17c:	20000310 	.word	0x20000310

0800a180 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a184:	4b19      	ldr	r3, [pc, #100]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d105      	bne.n	800a198 <DMA1_Stream1_IRQHandler+0x18>
 800a18c:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <DMA1_Stream1_IRQHandler+0x70>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	3301      	adds	r3, #1
 800a192:	b2da      	uxtb	r2, r3
 800a194:	4b16      	ldr	r3, [pc, #88]	@ (800a1f0 <DMA1_Stream1_IRQHandler+0x70>)
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	4b14      	ldr	r3, [pc, #80]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	3301      	adds	r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	4b12      	ldr	r3, [pc, #72]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a1a2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 800a1a4:	4b13      	ldr	r3, [pc, #76]	@ (800a1f4 <DMA1_Stream1_IRQHandler+0x74>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d005      	beq.n	800a1b8 <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 800a1ac:	4b11      	ldr	r3, [pc, #68]	@ (800a1f4 <DMA1_Stream1_IRQHandler+0x74>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f8 f80c 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a1b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <DMA1_Stream1_IRQHandler+0x4c>
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	4b08      	ldr	r3, [pc, #32]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <DMA1_Stream1_IRQHandler+0x6c>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <DMA1_Stream1_IRQHandler+0x68>
 800a1d4:	4b06      	ldr	r3, [pc, #24]	@ (800a1f0 <DMA1_Stream1_IRQHandler+0x70>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <DMA1_Stream1_IRQHandler+0x68>
 800a1dc:	4b04      	ldr	r3, [pc, #16]	@ (800a1f0 <DMA1_Stream1_IRQHandler+0x70>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	4b02      	ldr	r3, [pc, #8]	@ (800a1f0 <DMA1_Stream1_IRQHandler+0x70>)
 800a1e6:	701a      	strb	r2, [r3, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20005e46 	.word	0x20005e46
 800a1f0:	20005e45 	.word	0x20005e45
 800a1f4:	20000310 	.word	0x20000310

0800a1f8 <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a1fc:	4b19      	ldr	r3, [pc, #100]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d105      	bne.n	800a210 <DMA1_Stream2_IRQHandler+0x18>
 800a204:	4b18      	ldr	r3, [pc, #96]	@ (800a268 <DMA1_Stream2_IRQHandler+0x70>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	3301      	adds	r3, #1
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	4b16      	ldr	r3, [pc, #88]	@ (800a268 <DMA1_Stream2_IRQHandler+0x70>)
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	3301      	adds	r3, #1
 800a216:	b2da      	uxtb	r2, r3
 800a218:	4b12      	ldr	r3, [pc, #72]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a21a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 800a21c:	4b13      	ldr	r3, [pc, #76]	@ (800a26c <DMA1_Stream2_IRQHandler+0x74>)
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 800a224:	4b11      	ldr	r3, [pc, #68]	@ (800a26c <DMA1_Stream2_IRQHandler+0x74>)
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	3304      	adds	r3, #4
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f7 ffd0 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a230:	4b0c      	ldr	r3, [pc, #48]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <DMA1_Stream2_IRQHandler+0x4c>
 800a238:	4b0a      	ldr	r3, [pc, #40]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	4b08      	ldr	r3, [pc, #32]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	4b07      	ldr	r3, [pc, #28]	@ (800a264 <DMA1_Stream2_IRQHandler+0x6c>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d109      	bne.n	800a260 <DMA1_Stream2_IRQHandler+0x68>
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <DMA1_Stream2_IRQHandler+0x70>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <DMA1_Stream2_IRQHandler+0x68>
 800a254:	4b04      	ldr	r3, [pc, #16]	@ (800a268 <DMA1_Stream2_IRQHandler+0x70>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	3b01      	subs	r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <DMA1_Stream2_IRQHandler+0x70>)
 800a25e:	701a      	strb	r2, [r3, #0]
}
 800a260:	bf00      	nop
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20005e46 	.word	0x20005e46
 800a268:	20005e45 	.word	0x20005e45
 800a26c:	20000310 	.word	0x20000310

0800a270 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a274:	4b19      	ldr	r3, [pc, #100]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d105      	bne.n	800a288 <DMA1_Stream3_IRQHandler+0x18>
 800a27c:	4b18      	ldr	r3, [pc, #96]	@ (800a2e0 <DMA1_Stream3_IRQHandler+0x70>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	3301      	adds	r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	4b16      	ldr	r3, [pc, #88]	@ (800a2e0 <DMA1_Stream3_IRQHandler+0x70>)
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	4b14      	ldr	r3, [pc, #80]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	3301      	adds	r3, #1
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	4b12      	ldr	r3, [pc, #72]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a292:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 800a294:	4b13      	ldr	r3, [pc, #76]	@ (800a2e4 <DMA1_Stream3_IRQHandler+0x74>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 800a29c:	4b11      	ldr	r3, [pc, #68]	@ (800a2e4 <DMA1_Stream3_IRQHandler+0x74>)
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f7 ff94 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <DMA1_Stream3_IRQHandler+0x4c>
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	4b08      	ldr	r3, [pc, #32]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <DMA1_Stream3_IRQHandler+0x6c>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d109      	bne.n	800a2d8 <DMA1_Stream3_IRQHandler+0x68>
 800a2c4:	4b06      	ldr	r3, [pc, #24]	@ (800a2e0 <DMA1_Stream3_IRQHandler+0x70>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <DMA1_Stream3_IRQHandler+0x68>
 800a2cc:	4b04      	ldr	r3, [pc, #16]	@ (800a2e0 <DMA1_Stream3_IRQHandler+0x70>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	4b02      	ldr	r3, [pc, #8]	@ (800a2e0 <DMA1_Stream3_IRQHandler+0x70>)
 800a2d6:	701a      	strb	r2, [r3, #0]
}
 800a2d8:	bf00      	nop
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20005e46 	.word	0x20005e46
 800a2e0:	20005e45 	.word	0x20005e45
 800a2e4:	20000310 	.word	0x20000310

0800a2e8 <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a2ec:	4b19      	ldr	r3, [pc, #100]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d105      	bne.n	800a300 <DMA1_Stream4_IRQHandler+0x18>
 800a2f4:	4b18      	ldr	r3, [pc, #96]	@ (800a358 <DMA1_Stream4_IRQHandler+0x70>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	4b16      	ldr	r3, [pc, #88]	@ (800a358 <DMA1_Stream4_IRQHandler+0x70>)
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	4b14      	ldr	r3, [pc, #80]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a30a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 800a30c:	4b13      	ldr	r3, [pc, #76]	@ (800a35c <DMA1_Stream4_IRQHandler+0x74>)
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d005      	beq.n	800a320 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 800a314:	4b11      	ldr	r3, [pc, #68]	@ (800a35c <DMA1_Stream4_IRQHandler+0x74>)
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	3304      	adds	r3, #4
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f7 ff58 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a320:	4b0c      	ldr	r3, [pc, #48]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <DMA1_Stream4_IRQHandler+0x4c>
 800a328:	4b0a      	ldr	r3, [pc, #40]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	4b08      	ldr	r3, [pc, #32]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a332:	701a      	strb	r2, [r3, #0]
 800a334:	4b07      	ldr	r3, [pc, #28]	@ (800a354 <DMA1_Stream4_IRQHandler+0x6c>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d109      	bne.n	800a350 <DMA1_Stream4_IRQHandler+0x68>
 800a33c:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <DMA1_Stream4_IRQHandler+0x70>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <DMA1_Stream4_IRQHandler+0x68>
 800a344:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <DMA1_Stream4_IRQHandler+0x70>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	3b01      	subs	r3, #1
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	4b02      	ldr	r3, [pc, #8]	@ (800a358 <DMA1_Stream4_IRQHandler+0x70>)
 800a34e:	701a      	strb	r2, [r3, #0]
}
 800a350:	bf00      	nop
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20005e46 	.word	0x20005e46
 800a358:	20005e45 	.word	0x20005e45
 800a35c:	20000310 	.word	0x20000310

0800a360 <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 800a366:	2300      	movs	r3, #0
 800a368:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a36a:	4b28      	ldr	r3, [pc, #160]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d105      	bne.n	800a37e <DMA1_Stream5_IRQHandler+0x1e>
 800a372:	4b27      	ldr	r3, [pc, #156]	@ (800a410 <DMA1_Stream5_IRQHandler+0xb0>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	3301      	adds	r3, #1
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	4b25      	ldr	r3, [pc, #148]	@ (800a410 <DMA1_Stream5_IRQHandler+0xb0>)
 800a37c:	701a      	strb	r2, [r3, #0]
 800a37e:	4b23      	ldr	r3, [pc, #140]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	b2da      	uxtb	r2, r3
 800a386:	4b21      	ldr	r3, [pc, #132]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a388:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800a38a:	2300      	movs	r3, #0
 800a38c:	71fb      	strb	r3, [r7, #7]
 800a38e:	e017      	b.n	800a3c0 <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 800a390:	79fa      	ldrb	r2, [r7, #7]
 800a392:	4920      	ldr	r1, [pc, #128]	@ (800a414 <DMA1_Stream5_IRQHandler+0xb4>)
 800a394:	4613      	mov	r3, r2
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	4413      	add	r3, r2
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	440b      	add	r3, r1
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b05      	cmp	r3, #5
 800a3a2:	d10a      	bne.n	800a3ba <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 800a3a4:	79fa      	ldrb	r2, [r7, #7]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	4413      	add	r3, r2
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	4a19      	ldr	r2, [pc, #100]	@ (800a414 <DMA1_Stream5_IRQHandler+0xb4>)
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7f7 ff0b 	bl	80021d0 <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	71fb      	strb	r3, [r7, #7]
 800a3c0:	79fa      	ldrb	r2, [r7, #7]
 800a3c2:	4b15      	ldr	r3, [pc, #84]	@ (800a418 <DMA1_Stream5_IRQHandler+0xb8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4915      	ldr	r1, [pc, #84]	@ (800a41c <DMA1_Stream5_IRQHandler+0xbc>)
 800a3c8:	fba1 1303 	umull	r1, r3, r1, r3
 800a3cc:	09db      	lsrs	r3, r3, #7
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d3de      	bcc.n	800a390 <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 800a3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d005      	beq.n	800a3e6 <DMA1_Stream5_IRQHandler+0x86>
 800a3da:	4b0c      	ldr	r3, [pc, #48]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <DMA1_Stream5_IRQHandler+0xac>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <DMA1_Stream5_IRQHandler+0xa2>
 800a3ee:	4b08      	ldr	r3, [pc, #32]	@ (800a410 <DMA1_Stream5_IRQHandler+0xb0>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <DMA1_Stream5_IRQHandler+0xa2>
 800a3f6:	4b06      	ldr	r3, [pc, #24]	@ (800a410 <DMA1_Stream5_IRQHandler+0xb0>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	4b04      	ldr	r3, [pc, #16]	@ (800a410 <DMA1_Stream5_IRQHandler+0xb0>)
 800a400:	701a      	strb	r2, [r3, #0]
}
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20005e46 	.word	0x20005e46
 800a410:	20005e45 	.word	0x20005e45
 800a414:	20000174 	.word	0x20000174
 800a418:	2000030c 	.word	0x2000030c
 800a41c:	f0f0f0f1 	.word	0xf0f0f0f1

0800a420 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a424:	4b19      	ldr	r3, [pc, #100]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d105      	bne.n	800a438 <DMA1_Stream6_IRQHandler+0x18>
 800a42c:	4b18      	ldr	r3, [pc, #96]	@ (800a490 <DMA1_Stream6_IRQHandler+0x70>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	3301      	adds	r3, #1
 800a432:	b2da      	uxtb	r2, r3
 800a434:	4b16      	ldr	r3, [pc, #88]	@ (800a490 <DMA1_Stream6_IRQHandler+0x70>)
 800a436:	701a      	strb	r2, [r3, #0]
 800a438:	4b14      	ldr	r3, [pc, #80]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	4b12      	ldr	r3, [pc, #72]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a442:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 800a444:	4b13      	ldr	r3, [pc, #76]	@ (800a494 <DMA1_Stream6_IRQHandler+0x74>)
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 800a44c:	4b11      	ldr	r3, [pc, #68]	@ (800a494 <DMA1_Stream6_IRQHandler+0x74>)
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	3304      	adds	r3, #4
 800a452:	4618      	mov	r0, r3
 800a454:	f7f7 febc 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a458:	4b0c      	ldr	r3, [pc, #48]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d005      	beq.n	800a46c <DMA1_Stream6_IRQHandler+0x4c>
 800a460:	4b0a      	ldr	r3, [pc, #40]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	3b01      	subs	r3, #1
 800a466:	b2da      	uxtb	r2, r3
 800a468:	4b08      	ldr	r3, [pc, #32]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a46a:	701a      	strb	r2, [r3, #0]
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <DMA1_Stream6_IRQHandler+0x6c>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d109      	bne.n	800a488 <DMA1_Stream6_IRQHandler+0x68>
 800a474:	4b06      	ldr	r3, [pc, #24]	@ (800a490 <DMA1_Stream6_IRQHandler+0x70>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <DMA1_Stream6_IRQHandler+0x68>
 800a47c:	4b04      	ldr	r3, [pc, #16]	@ (800a490 <DMA1_Stream6_IRQHandler+0x70>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	3b01      	subs	r3, #1
 800a482:	b2da      	uxtb	r2, r3
 800a484:	4b02      	ldr	r3, [pc, #8]	@ (800a490 <DMA1_Stream6_IRQHandler+0x70>)
 800a486:	701a      	strb	r2, [r3, #0]
}
 800a488:	bf00      	nop
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20005e46 	.word	0x20005e46
 800a490:	20005e45 	.word	0x20005e45
 800a494:	20000310 	.word	0x20000310

0800a498 <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a49c:	4b19      	ldr	r3, [pc, #100]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d105      	bne.n	800a4b0 <DMA1_Stream7_IRQHandler+0x18>
 800a4a4:	4b18      	ldr	r3, [pc, #96]	@ (800a508 <DMA1_Stream7_IRQHandler+0x70>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	4b16      	ldr	r3, [pc, #88]	@ (800a508 <DMA1_Stream7_IRQHandler+0x70>)
 800a4ae:	701a      	strb	r2, [r3, #0]
 800a4b0:	4b14      	ldr	r3, [pc, #80]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	4b12      	ldr	r3, [pc, #72]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4ba:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 800a4bc:	4b13      	ldr	r3, [pc, #76]	@ (800a50c <DMA1_Stream7_IRQHandler+0x74>)
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 800a4c4:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <DMA1_Stream7_IRQHandler+0x74>)
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7f7 fe80 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <DMA1_Stream7_IRQHandler+0x4c>
 800a4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	4b08      	ldr	r3, [pc, #32]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <DMA1_Stream7_IRQHandler+0x68>
 800a4ec:	4b06      	ldr	r3, [pc, #24]	@ (800a508 <DMA1_Stream7_IRQHandler+0x70>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <DMA1_Stream7_IRQHandler+0x68>
 800a4f4:	4b04      	ldr	r3, [pc, #16]	@ (800a508 <DMA1_Stream7_IRQHandler+0x70>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	4b02      	ldr	r3, [pc, #8]	@ (800a508 <DMA1_Stream7_IRQHandler+0x70>)
 800a4fe:	701a      	strb	r2, [r3, #0]
}
 800a500:	bf00      	nop
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20005e46 	.word	0x20005e46
 800a508:	20005e45 	.word	0x20005e45
 800a50c:	20000310 	.word	0x20000310

0800a510 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a514:	4b19      	ldr	r3, [pc, #100]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d105      	bne.n	800a528 <DMA2_Stream0_IRQHandler+0x18>
 800a51c:	4b18      	ldr	r3, [pc, #96]	@ (800a580 <DMA2_Stream0_IRQHandler+0x70>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	4b16      	ldr	r3, [pc, #88]	@ (800a580 <DMA2_Stream0_IRQHandler+0x70>)
 800a526:	701a      	strb	r2, [r3, #0]
 800a528:	4b14      	ldr	r3, [pc, #80]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	3301      	adds	r3, #1
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	4b12      	ldr	r3, [pc, #72]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a532:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 800a534:	4b13      	ldr	r3, [pc, #76]	@ (800a584 <DMA2_Stream0_IRQHandler+0x74>)
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 800a53c:	4b11      	ldr	r3, [pc, #68]	@ (800a584 <DMA2_Stream0_IRQHandler+0x74>)
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	3304      	adds	r3, #4
 800a542:	4618      	mov	r0, r3
 800a544:	f7f7 fe44 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a548:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <DMA2_Stream0_IRQHandler+0x4c>
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	3b01      	subs	r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	4b08      	ldr	r3, [pc, #32]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a55a:	701a      	strb	r2, [r3, #0]
 800a55c:	4b07      	ldr	r3, [pc, #28]	@ (800a57c <DMA2_Stream0_IRQHandler+0x6c>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d109      	bne.n	800a578 <DMA2_Stream0_IRQHandler+0x68>
 800a564:	4b06      	ldr	r3, [pc, #24]	@ (800a580 <DMA2_Stream0_IRQHandler+0x70>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <DMA2_Stream0_IRQHandler+0x68>
 800a56c:	4b04      	ldr	r3, [pc, #16]	@ (800a580 <DMA2_Stream0_IRQHandler+0x70>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	3b01      	subs	r3, #1
 800a572:	b2da      	uxtb	r2, r3
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <DMA2_Stream0_IRQHandler+0x70>)
 800a576:	701a      	strb	r2, [r3, #0]
}
 800a578:	bf00      	nop
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20005e46 	.word	0x20005e46
 800a580:	20005e45 	.word	0x20005e45
 800a584:	20000310 	.word	0x20000310

0800a588 <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a58c:	4b19      	ldr	r3, [pc, #100]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <DMA2_Stream1_IRQHandler+0x18>
 800a594:	4b18      	ldr	r3, [pc, #96]	@ (800a5f8 <DMA2_Stream1_IRQHandler+0x70>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	3301      	adds	r3, #1
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	4b16      	ldr	r3, [pc, #88]	@ (800a5f8 <DMA2_Stream1_IRQHandler+0x70>)
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	4b14      	ldr	r3, [pc, #80]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	4b12      	ldr	r3, [pc, #72]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5aa:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 800a5ac:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <DMA2_Stream1_IRQHandler+0x74>)
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 800a5b4:	4b11      	ldr	r3, [pc, #68]	@ (800a5fc <DMA2_Stream1_IRQHandler+0x74>)
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7f7 fe08 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <DMA2_Stream1_IRQHandler+0x4c>
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	4b08      	ldr	r3, [pc, #32]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	4b07      	ldr	r3, [pc, #28]	@ (800a5f4 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d109      	bne.n	800a5f0 <DMA2_Stream1_IRQHandler+0x68>
 800a5dc:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <DMA2_Stream1_IRQHandler+0x70>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d005      	beq.n	800a5f0 <DMA2_Stream1_IRQHandler+0x68>
 800a5e4:	4b04      	ldr	r3, [pc, #16]	@ (800a5f8 <DMA2_Stream1_IRQHandler+0x70>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <DMA2_Stream1_IRQHandler+0x70>)
 800a5ee:	701a      	strb	r2, [r3, #0]
}
 800a5f0:	bf00      	nop
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20005e46 	.word	0x20005e46
 800a5f8:	20005e45 	.word	0x20005e45
 800a5fc:	20000310 	.word	0x20000310

0800a600 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a604:	4b19      	ldr	r3, [pc, #100]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d105      	bne.n	800a618 <DMA2_Stream2_IRQHandler+0x18>
 800a60c:	4b18      	ldr	r3, [pc, #96]	@ (800a670 <DMA2_Stream2_IRQHandler+0x70>)
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	4b16      	ldr	r3, [pc, #88]	@ (800a670 <DMA2_Stream2_IRQHandler+0x70>)
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	4b14      	ldr	r3, [pc, #80]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	4b12      	ldr	r3, [pc, #72]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a622:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 800a624:	4b13      	ldr	r3, [pc, #76]	@ (800a674 <DMA2_Stream2_IRQHandler+0x74>)
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d005      	beq.n	800a638 <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 800a62c:	4b11      	ldr	r3, [pc, #68]	@ (800a674 <DMA2_Stream2_IRQHandler+0x74>)
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	3304      	adds	r3, #4
 800a632:	4618      	mov	r0, r3
 800a634:	f7f7 fdcc 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a638:	4b0c      	ldr	r3, [pc, #48]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <DMA2_Stream2_IRQHandler+0x4c>
 800a640:	4b0a      	ldr	r3, [pc, #40]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	3b01      	subs	r3, #1
 800a646:	b2da      	uxtb	r2, r3
 800a648:	4b08      	ldr	r3, [pc, #32]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <DMA2_Stream2_IRQHandler+0x6c>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d109      	bne.n	800a668 <DMA2_Stream2_IRQHandler+0x68>
 800a654:	4b06      	ldr	r3, [pc, #24]	@ (800a670 <DMA2_Stream2_IRQHandler+0x70>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d005      	beq.n	800a668 <DMA2_Stream2_IRQHandler+0x68>
 800a65c:	4b04      	ldr	r3, [pc, #16]	@ (800a670 <DMA2_Stream2_IRQHandler+0x70>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	3b01      	subs	r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	4b02      	ldr	r3, [pc, #8]	@ (800a670 <DMA2_Stream2_IRQHandler+0x70>)
 800a666:	701a      	strb	r2, [r3, #0]
}
 800a668:	bf00      	nop
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20005e46 	.word	0x20005e46
 800a670:	20005e45 	.word	0x20005e45
 800a674:	20000310 	.word	0x20000310

0800a678 <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a67c:	4b19      	ldr	r3, [pc, #100]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d105      	bne.n	800a690 <DMA2_Stream3_IRQHandler+0x18>
 800a684:	4b18      	ldr	r3, [pc, #96]	@ (800a6e8 <DMA2_Stream3_IRQHandler+0x70>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	3301      	adds	r3, #1
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	4b16      	ldr	r3, [pc, #88]	@ (800a6e8 <DMA2_Stream3_IRQHandler+0x70>)
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	4b14      	ldr	r3, [pc, #80]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	b2da      	uxtb	r2, r3
 800a698:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a69a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 800a69c:	4b13      	ldr	r3, [pc, #76]	@ (800a6ec <DMA2_Stream3_IRQHandler+0x74>)
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 800a6a4:	4b11      	ldr	r3, [pc, #68]	@ (800a6ec <DMA2_Stream3_IRQHandler+0x74>)
 800a6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f7 fd90 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <DMA2_Stream3_IRQHandler+0x4c>
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	4b08      	ldr	r3, [pc, #32]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6c2:	701a      	strb	r2, [r3, #0]
 800a6c4:	4b07      	ldr	r3, [pc, #28]	@ (800a6e4 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d109      	bne.n	800a6e0 <DMA2_Stream3_IRQHandler+0x68>
 800a6cc:	4b06      	ldr	r3, [pc, #24]	@ (800a6e8 <DMA2_Stream3_IRQHandler+0x70>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <DMA2_Stream3_IRQHandler+0x68>
 800a6d4:	4b04      	ldr	r3, [pc, #16]	@ (800a6e8 <DMA2_Stream3_IRQHandler+0x70>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	4b02      	ldr	r3, [pc, #8]	@ (800a6e8 <DMA2_Stream3_IRQHandler+0x70>)
 800a6de:	701a      	strb	r2, [r3, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20005e46 	.word	0x20005e46
 800a6e8:	20005e45 	.word	0x20005e45
 800a6ec:	20000310 	.word	0x20000310

0800a6f0 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a6f4:	4b19      	ldr	r3, [pc, #100]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d105      	bne.n	800a708 <DMA2_Stream4_IRQHandler+0x18>
 800a6fc:	4b18      	ldr	r3, [pc, #96]	@ (800a760 <DMA2_Stream4_IRQHandler+0x70>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	b2da      	uxtb	r2, r3
 800a704:	4b16      	ldr	r3, [pc, #88]	@ (800a760 <DMA2_Stream4_IRQHandler+0x70>)
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	4b14      	ldr	r3, [pc, #80]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	4b12      	ldr	r3, [pc, #72]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a712:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 800a714:	4b13      	ldr	r3, [pc, #76]	@ (800a764 <DMA2_Stream4_IRQHandler+0x74>)
 800a716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 800a71c:	4b11      	ldr	r3, [pc, #68]	@ (800a764 <DMA2_Stream4_IRQHandler+0x74>)
 800a71e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a720:	3304      	adds	r3, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7f7 fd54 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <DMA2_Stream4_IRQHandler+0x4c>
 800a730:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	3b01      	subs	r3, #1
 800a736:	b2da      	uxtb	r2, r3
 800a738:	4b08      	ldr	r3, [pc, #32]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	4b07      	ldr	r3, [pc, #28]	@ (800a75c <DMA2_Stream4_IRQHandler+0x6c>)
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <DMA2_Stream4_IRQHandler+0x68>
 800a744:	4b06      	ldr	r3, [pc, #24]	@ (800a760 <DMA2_Stream4_IRQHandler+0x70>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <DMA2_Stream4_IRQHandler+0x68>
 800a74c:	4b04      	ldr	r3, [pc, #16]	@ (800a760 <DMA2_Stream4_IRQHandler+0x70>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	3b01      	subs	r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	4b02      	ldr	r3, [pc, #8]	@ (800a760 <DMA2_Stream4_IRQHandler+0x70>)
 800a756:	701a      	strb	r2, [r3, #0]
}
 800a758:	bf00      	nop
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20005e46 	.word	0x20005e46
 800a760:	20005e45 	.word	0x20005e45
 800a764:	20000310 	.word	0x20000310

0800a768 <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a76c:	4b19      	ldr	r3, [pc, #100]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d105      	bne.n	800a780 <DMA2_Stream5_IRQHandler+0x18>
 800a774:	4b18      	ldr	r3, [pc, #96]	@ (800a7d8 <DMA2_Stream5_IRQHandler+0x70>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	3301      	adds	r3, #1
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	4b16      	ldr	r3, [pc, #88]	@ (800a7d8 <DMA2_Stream5_IRQHandler+0x70>)
 800a77e:	701a      	strb	r2, [r3, #0]
 800a780:	4b14      	ldr	r3, [pc, #80]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	4b12      	ldr	r3, [pc, #72]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a78a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 800a78c:	4b13      	ldr	r3, [pc, #76]	@ (800a7dc <DMA2_Stream5_IRQHandler+0x74>)
 800a78e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 800a794:	4b11      	ldr	r3, [pc, #68]	@ (800a7dc <DMA2_Stream5_IRQHandler+0x74>)
 800a796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a798:	3304      	adds	r3, #4
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f7 fd18 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a7a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d005      	beq.n	800a7b4 <DMA2_Stream5_IRQHandler+0x4c>
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	4b08      	ldr	r3, [pc, #32]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	4b07      	ldr	r3, [pc, #28]	@ (800a7d4 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d109      	bne.n	800a7d0 <DMA2_Stream5_IRQHandler+0x68>
 800a7bc:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <DMA2_Stream5_IRQHandler+0x70>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <DMA2_Stream5_IRQHandler+0x68>
 800a7c4:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <DMA2_Stream5_IRQHandler+0x70>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	4b02      	ldr	r3, [pc, #8]	@ (800a7d8 <DMA2_Stream5_IRQHandler+0x70>)
 800a7ce:	701a      	strb	r2, [r3, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20005e46 	.word	0x20005e46
 800a7d8:	20005e45 	.word	0x20005e45
 800a7dc:	20000310 	.word	0x20000310

0800a7e0 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a7e4:	4b19      	ldr	r3, [pc, #100]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <DMA2_Stream6_IRQHandler+0x18>
 800a7ec:	4b18      	ldr	r3, [pc, #96]	@ (800a850 <DMA2_Stream6_IRQHandler+0x70>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	4b16      	ldr	r3, [pc, #88]	@ (800a850 <DMA2_Stream6_IRQHandler+0x70>)
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	4b12      	ldr	r3, [pc, #72]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a802:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 800a804:	4b13      	ldr	r3, [pc, #76]	@ (800a854 <DMA2_Stream6_IRQHandler+0x74>)
 800a806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 800a80c:	4b11      	ldr	r3, [pc, #68]	@ (800a854 <DMA2_Stream6_IRQHandler+0x74>)
 800a80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a810:	3304      	adds	r3, #4
 800a812:	4618      	mov	r0, r3
 800a814:	f7f7 fcdc 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a818:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <DMA2_Stream6_IRQHandler+0x4c>
 800a820:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	3b01      	subs	r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	4b08      	ldr	r3, [pc, #32]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <DMA2_Stream6_IRQHandler+0x6c>)
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d109      	bne.n	800a848 <DMA2_Stream6_IRQHandler+0x68>
 800a834:	4b06      	ldr	r3, [pc, #24]	@ (800a850 <DMA2_Stream6_IRQHandler+0x70>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <DMA2_Stream6_IRQHandler+0x68>
 800a83c:	4b04      	ldr	r3, [pc, #16]	@ (800a850 <DMA2_Stream6_IRQHandler+0x70>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	3b01      	subs	r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	4b02      	ldr	r3, [pc, #8]	@ (800a850 <DMA2_Stream6_IRQHandler+0x70>)
 800a846:	701a      	strb	r2, [r3, #0]
}
 800a848:	bf00      	nop
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20005e46 	.word	0x20005e46
 800a850:	20005e45 	.word	0x20005e45
 800a854:	20000310 	.word	0x20000310

0800a858 <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a85c:	4b19      	ldr	r3, [pc, #100]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <DMA2_Stream7_IRQHandler+0x18>
 800a864:	4b18      	ldr	r3, [pc, #96]	@ (800a8c8 <DMA2_Stream7_IRQHandler+0x70>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	3301      	adds	r3, #1
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	4b16      	ldr	r3, [pc, #88]	@ (800a8c8 <DMA2_Stream7_IRQHandler+0x70>)
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	4b14      	ldr	r3, [pc, #80]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	4b12      	ldr	r3, [pc, #72]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a87a:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 800a87c:	4b13      	ldr	r3, [pc, #76]	@ (800a8cc <DMA2_Stream7_IRQHandler+0x74>)
 800a87e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 800a884:	4b11      	ldr	r3, [pc, #68]	@ (800a8cc <DMA2_Stream7_IRQHandler+0x74>)
 800a886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a888:	3304      	adds	r3, #4
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7f7 fca0 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a890:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <DMA2_Stream7_IRQHandler+0x4c>
 800a898:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	4b08      	ldr	r3, [pc, #32]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a8a2:	701a      	strb	r2, [r3, #0]
 800a8a4:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <DMA2_Stream7_IRQHandler+0x6c>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <DMA2_Stream7_IRQHandler+0x68>
 800a8ac:	4b06      	ldr	r3, [pc, #24]	@ (800a8c8 <DMA2_Stream7_IRQHandler+0x70>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <DMA2_Stream7_IRQHandler+0x68>
 800a8b4:	4b04      	ldr	r3, [pc, #16]	@ (800a8c8 <DMA2_Stream7_IRQHandler+0x70>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	4b02      	ldr	r3, [pc, #8]	@ (800a8c8 <DMA2_Stream7_IRQHandler+0x70>)
 800a8be:	701a      	strb	r2, [r3, #0]
}
 800a8c0:	bf00      	nop
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20005e46 	.word	0x20005e46
 800a8c8:	20005e45 	.word	0x20005e45
 800a8cc:	20000310 	.word	0x20000310

0800a8d0 <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 800a8da:	23ae      	movs	r3, #174	@ 0xae
 800a8dc:	77fb      	strb	r3, [r7, #31]
    u32_t                  startSector      = 0u;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61bb      	str	r3, [r7, #24]
    u32_t                  endSector        = 0u;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
    u32_t                  endSectorAddress = 0u;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	613b      	str	r3, [r7, #16]
    u32_t                  sectorError      = 0u;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 800a8ee:	f7f7 ff47 	bl	8002780 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f888 	bl	800aa08 <drv_flashGetSector>
 800a8f8:	61b8      	str	r0, [r7, #24]
    endSectorAddress = address + requiredSize - 1;
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	4413      	add	r3, r2
 800a900:	3b01      	subs	r3, #1
 800a902:	613b      	str	r3, [r7, #16]
    endSector = drv_flashGetSector(endSectorAddress);
 800a904:	6938      	ldr	r0, [r7, #16]
 800a906:	f000 f87f 	bl	800aa08 <drv_flashGetSector>
 800a90a:	6178      	str	r0, [r7, #20]

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800a90c:	4b10      	ldr	r3, [pc, #64]	@ (800a950 <drv_flashErase+0x80>)
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800a912:	4b0f      	ldr	r3, [pc, #60]	@ (800a950 <drv_flashErase+0x80>)
 800a914:	2202      	movs	r2, #2
 800a916:	611a      	str	r2, [r3, #16]
    eraseInitStruct.Sector        = startSector;
 800a918:	4a0d      	ldr	r2, [pc, #52]	@ (800a950 <drv_flashErase+0x80>)
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	6093      	str	r3, [r2, #8]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	3301      	adds	r3, #1
 800a926:	4a0a      	ldr	r2, [pc, #40]	@ (800a950 <drv_flashErase+0x80>)
 800a928:	60d3      	str	r3, [r2, #12]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 800a92a:	f107 030c 	add.w	r3, r7, #12
 800a92e:	4619      	mov	r1, r3
 800a930:	4807      	ldr	r0, [pc, #28]	@ (800a950 <drv_flashErase+0x80>)
 800a932:	f7f8 f897 	bl	8002a64 <HAL_FLASHEx_Erase>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <drv_flashErase+0x70>
    {
        flashEraseResult = GOS_SUCCESS;
 800a93c:	2355      	movs	r3, #85	@ 0x55
 800a93e:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 800a940:	f7f7 ff40 	bl	80027c4 <HAL_FLASH_Lock>

    return flashEraseResult;
 800a944:	7ffb      	ldrb	r3, [r7, #31]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3720      	adds	r7, #32
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20001f74 	.word	0x20001f74

0800a954 <drv_flashWriteWithoutLock>:

/*
 * Function: drv_flashWriteWithoutLock
 */
gos_result_t drv_flashWriteWithoutLock (u32_t address, void_t* pData, u32_t size)
{
 800a954:	b5b0      	push	{r4, r5, r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 800a960:	23ae      	movs	r3, #174	@ 0xae
 800a962:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 800a964:	2300      	movs	r3, #0
 800a966:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 800a96c:	2355      	movs	r3, #85	@ 0x55
 800a96e:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800a970:	2300      	movs	r3, #0
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	e01c      	b.n	800a9b0 <drv_flashWriteWithoutLock+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	617a      	str	r2, [r7, #20]
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	4413      	add	r3, r2
 800a988:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800a98a:	2200      	movs	r2, #0
 800a98c:	461c      	mov	r4, r3
 800a98e:	4615      	mov	r5, r2
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	2002      	movs	r0, #2
 800a996:	f7f7 fe9f 	bl	80026d8 <HAL_FLASH_Program>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <drv_flashWriteWithoutLock+0x50>
        {
            // Programming OK, continue.
            GOS_NOP;
 800a9a0:	bf00      	nop
 800a9a2:	e002      	b.n	800a9aa <drv_flashWriteWithoutLock+0x56>
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 800a9a4:	23ae      	movs	r3, #174	@ 0xae
 800a9a6:	77fb      	strb	r3, [r7, #31]
            break;
 800a9a8:	e006      	b.n	800a9b8 <drv_flashWriteWithoutLock+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	61bb      	str	r3, [r7, #24]
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d3de      	bcc.n	800a976 <drv_flashWriteWithoutLock+0x22>
        }
    }

    return flashWriteResult;
 800a9b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bdb0      	pop	{r4, r5, r7, pc}

0800a9c2 <drv_flashUnlock>:

/*
 * Function: drv_flashUnlock
 */
gos_result_t drv_flashUnlock (void_t)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 800a9c8:	23ae      	movs	r3, #174	@ 0xae
 800a9ca:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800a9cc:	f7f7 fed8 	bl	8002780 <HAL_FLASH_Unlock>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <drv_flashUnlock+0x18>
    {
        unlockResult = GOS_SUCCESS;
 800a9d6:	2355      	movs	r3, #85	@ 0x55
 800a9d8:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return unlockResult;
 800a9da:	79fb      	ldrb	r3, [r7, #7]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <drv_flashLock>:

/*
 * Function: drv_flashLock
 */
gos_result_t drv_flashLock (void_t)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t lockResult = GOS_ERROR;
 800a9ea:	23ae      	movs	r3, #174	@ 0xae
 800a9ec:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Lock() == HAL_OK)
 800a9ee:	f7f7 fee9 	bl	80027c4 <HAL_FLASH_Lock>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <drv_flashLock+0x18>
    {
        lockResult = GOS_SUCCESS;
 800a9f8:	2355      	movs	r3, #85	@ 0x55
 800a9fa:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return lockResult;
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a2e      	ldr	r2, [pc, #184]	@ (800aad0 <drv_flashGetSector+0xc8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d206      	bcs.n	800aa2a <drv_flashGetSector+0x22>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa22:	d302      	bcc.n	800aa2a <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e04b      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a29      	ldr	r2, [pc, #164]	@ (800aad4 <drv_flashGetSector+0xcc>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d206      	bcs.n	800aa40 <drv_flashGetSector+0x38>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a26      	ldr	r2, [pc, #152]	@ (800aad0 <drv_flashGetSector+0xc8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d302      	bcc.n	800aa40 <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e040      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a25      	ldr	r2, [pc, #148]	@ (800aad8 <drv_flashGetSector+0xd0>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d206      	bcs.n	800aa56 <drv_flashGetSector+0x4e>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a22      	ldr	r2, [pc, #136]	@ (800aad4 <drv_flashGetSector+0xcc>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d302      	bcc.n	800aa56 <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 800aa50:	2302      	movs	r3, #2
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e035      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a20      	ldr	r2, [pc, #128]	@ (800aadc <drv_flashGetSector+0xd4>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d806      	bhi.n	800aa6c <drv_flashGetSector+0x64>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1d      	ldr	r2, [pc, #116]	@ (800aad8 <drv_flashGetSector+0xd0>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d302      	bcc.n	800aa6c <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 800aa66:	2303      	movs	r3, #3
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	e02a      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a1c      	ldr	r2, [pc, #112]	@ (800aae0 <drv_flashGetSector+0xd8>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d806      	bhi.n	800aa82 <drv_flashGetSector+0x7a>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a19      	ldr	r2, [pc, #100]	@ (800aadc <drv_flashGetSector+0xd4>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d902      	bls.n	800aa82 <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	e01f      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a17      	ldr	r2, [pc, #92]	@ (800aae4 <drv_flashGetSector+0xdc>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d806      	bhi.n	800aa98 <drv_flashGetSector+0x90>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a14      	ldr	r2, [pc, #80]	@ (800aae0 <drv_flashGetSector+0xd8>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d902      	bls.n	800aa98 <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 800aa92:	2305      	movs	r3, #5
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	e014      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a13      	ldr	r2, [pc, #76]	@ (800aae8 <drv_flashGetSector+0xe0>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d806      	bhi.n	800aaae <drv_flashGetSector+0xa6>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a10      	ldr	r2, [pc, #64]	@ (800aae4 <drv_flashGetSector+0xdc>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d902      	bls.n	800aaae <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 800aaa8:	2306      	movs	r3, #6
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	e009      	b.n	800aac2 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a0e      	ldr	r2, [pc, #56]	@ (800aaec <drv_flashGetSector+0xe4>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d805      	bhi.n	800aac2 <drv_flashGetSector+0xba>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a0b      	ldr	r2, [pc, #44]	@ (800aae8 <drv_flashGetSector+0xe0>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d901      	bls.n	800aac2 <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 800aabe:	2307      	movs	r3, #7
 800aac0:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 800aac2:	68fb      	ldr	r3, [r7, #12]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	08004000 	.word	0x08004000
 800aad4:	08008000 	.word	0x08008000
 800aad8:	0800c000 	.word	0x0800c000
 800aadc:	0800ffff 	.word	0x0800ffff
 800aae0:	0801ffff 	.word	0x0801ffff
 800aae4:	0803ffff 	.word	0x0803ffff
 800aae8:	0805ffff 	.word	0x0805ffff
 800aaec:	0807ffff 	.word	0x0807ffff

0800aaf0 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 800aaf6:	2355      	movs	r3, #85	@ 0x55
 800aaf8:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 800aafa:	2300      	movs	r3, #0
 800aafc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800aafe:	2300      	movs	r3, #0
 800ab00:	71bb      	strb	r3, [r7, #6]
 800ab02:	e00e      	b.n	800ab22 <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 800ab04:	79fb      	ldrb	r3, [r7, #7]
 800ab06:	2b55      	cmp	r3, #85	@ 0x55
 800ab08:	d106      	bne.n	800ab18 <drv_gpioInit+0x28>
 800ab0a:	79bb      	ldrb	r3, [r7, #6]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 f81b 	bl	800ab48 <drv_gpioInitPin>
 800ab12:	4603      	mov	r3, r0
 800ab14:	71fb      	strb	r3, [r7, #7]
 800ab16:	e001      	b.n	800ab1c <drv_gpioInit+0x2c>
 800ab18:	23ae      	movs	r3, #174	@ 0xae
 800ab1a:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800ab1c:	79bb      	ldrb	r3, [r7, #6]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	71bb      	strb	r3, [r7, #6]
 800ab22:	79bb      	ldrb	r3, [r7, #6]
 800ab24:	4a06      	ldr	r2, [pc, #24]	@ (800ab40 <drv_gpioInit+0x50>)
 800ab26:	6812      	ldr	r2, [r2, #0]
 800ab28:	0892      	lsrs	r2, r2, #2
 800ab2a:	4906      	ldr	r1, [pc, #24]	@ (800ab44 <drv_gpioInit+0x54>)
 800ab2c:	fba1 1202 	umull	r1, r2, r1, r2
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d3e7      	bcc.n	800ab04 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 800ab34:	79fb      	ldrb	r3, [r7, #7]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20000354 	.word	0x20000354
 800ab44:	24924925 	.word	0x24924925

0800ab48 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	b089      	sub	sp, #36	@ 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 800ab52:	23ae      	movs	r3, #174	@ 0xae
 800ab54:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	605a      	str	r2, [r3, #4]
 800ab60:	609a      	str	r2, [r3, #8]
 800ab62:	60da      	str	r2, [r3, #12]
 800ab64:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	4a40      	ldr	r2, [pc, #256]	@ (800ac6c <drv_gpioInitPin+0x124>)
 800ab6a:	6812      	ldr	r2, [r2, #0]
 800ab6c:	0892      	lsrs	r2, r2, #2
 800ab6e:	4940      	ldr	r1, [pc, #256]	@ (800ac70 <drv_gpioInitPin+0x128>)
 800ab70:	fba1 1202 	umull	r1, r2, r1, r2
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d274      	bcs.n	800ac62 <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 800ab78:	79fa      	ldrb	r2, [r7, #7]
 800ab7a:	493e      	ldr	r1, [pc, #248]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	3304      	adds	r3, #4
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 800ab8c:	79fa      	ldrb	r2, [r7, #7]
 800ab8e:	4939      	ldr	r1, [pc, #228]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800ab90:	4613      	mov	r3, r2
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	440b      	add	r3, r1
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 800aba0:	79fa      	ldrb	r2, [r7, #7]
 800aba2:	4934      	ldr	r1, [pc, #208]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800aba4:	4613      	mov	r3, r2
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	1a9b      	subs	r3, r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	440b      	add	r3, r1
 800abae:	3310      	adds	r3, #16
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 800abb4:	79fa      	ldrb	r2, [r7, #7]
 800abb6:	492f      	ldr	r1, [pc, #188]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800abb8:	4613      	mov	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	1a9b      	subs	r3, r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	440b      	add	r3, r1
 800abc2:	330c      	adds	r3, #12
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 800abc8:	79fa      	ldrb	r2, [r7, #7]
 800abca:	492a      	ldr	r1, [pc, #168]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800abcc:	4613      	mov	r3, r2
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	1a9b      	subs	r3, r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	3314      	adds	r3, #20
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 800abdc:	79fa      	ldrb	r2, [r7, #7]
 800abde:	4925      	ldr	r1, [pc, #148]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800abe0:	4613      	mov	r3, r2
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	440b      	add	r3, r1
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f107 0208 	add.w	r2, r7, #8
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f8 f858 	bl	8002ca8 <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 800abf8:	79fa      	ldrb	r2, [r7, #7]
 800abfa:	491e      	ldr	r1, [pc, #120]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800abfc:	4613      	mov	r3, r2
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	440b      	add	r3, r1
 800ac06:	3318      	adds	r3, #24
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d00a      	beq.n	800ac24 <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 800ac0e:	79fa      	ldrb	r2, [r7, #7]
 800ac10:	4918      	ldr	r1, [pc, #96]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800ac12:	4613      	mov	r3, r2
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3318      	adds	r3, #24
 800ac1e:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d11c      	bne.n	800ac5e <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 800ac24:	79fa      	ldrb	r2, [r7, #7]
 800ac26:	4913      	ldr	r1, [pc, #76]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800ac28:	4613      	mov	r3, r2
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	1a9b      	subs	r3, r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	440b      	add	r3, r1
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	79fa      	ldrb	r2, [r7, #7]
 800ac36:	490f      	ldr	r1, [pc, #60]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800ac38:	4613      	mov	r3, r2
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	1a9b      	subs	r3, r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	3304      	adds	r3, #4
 800ac44:	8819      	ldrh	r1, [r3, #0]
 800ac46:	79fa      	ldrb	r2, [r7, #7]
 800ac48:	4c0a      	ldr	r4, [pc, #40]	@ (800ac74 <drv_gpioInitPin+0x12c>)
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	1a9b      	subs	r3, r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4423      	add	r3, r4
 800ac54:	3318      	adds	r3, #24
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f7f8 f9b9 	bl	8002fd0 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 800ac5e:	2355      	movs	r3, #85	@ 0x55
 800ac60:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 800ac62:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3724      	adds	r7, #36	@ 0x24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd90      	pop	{r4, r7, pc}
 800ac6c:	20000354 	.word	0x20000354
 800ac70:	24924925 	.word	0x24924925
 800ac74:	0801a6c4 	.word	0x0801a6c4

0800ac78 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	460a      	mov	r2, r1
 800ac82:	71fb      	strb	r3, [r7, #7]
 800ac84:	4613      	mov	r3, r2
 800ac86:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 800ac88:	23ae      	movs	r3, #174	@ 0xae
 800ac8a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	4a13      	ldr	r2, [pc, #76]	@ (800acdc <drv_gpioWritePin+0x64>)
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	0892      	lsrs	r2, r2, #2
 800ac94:	4912      	ldr	r1, [pc, #72]	@ (800ace0 <drv_gpioWritePin+0x68>)
 800ac96:	fba1 1202 	umull	r1, r2, r1, r2
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d219      	bcs.n	800acd2 <drv_gpioWritePin+0x5a>
 800ac9e:	79bb      	ldrb	r3, [r7, #6]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d816      	bhi.n	800acd2 <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 800aca4:	79fa      	ldrb	r2, [r7, #7]
 800aca6:	490f      	ldr	r1, [pc, #60]	@ (800ace4 <drv_gpioWritePin+0x6c>)
 800aca8:	4613      	mov	r3, r2
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	79fa      	ldrb	r2, [r7, #7]
 800acb6:	490b      	ldr	r1, [pc, #44]	@ (800ace4 <drv_gpioWritePin+0x6c>)
 800acb8:	4613      	mov	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	3304      	adds	r3, #4
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	79ba      	ldrb	r2, [r7, #6]
 800acc8:	4619      	mov	r1, r3
 800acca:	f7f8 f981 	bl	8002fd0 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 800acce:	2355      	movs	r3, #85	@ 0x55
 800acd0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20000354 	.word	0x20000354
 800ace0:	24924925 	.word	0x24924925
 800ace4:	0801a6c4 	.word	0x0801a6c4

0800ace8 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 800acf2:	23ae      	movs	r3, #174	@ 0xae
 800acf4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	4a11      	ldr	r2, [pc, #68]	@ (800ad40 <drv_gpioTgglePin+0x58>)
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	0892      	lsrs	r2, r2, #2
 800acfe:	4911      	ldr	r1, [pc, #68]	@ (800ad44 <drv_gpioTgglePin+0x5c>)
 800ad00:	fba1 1202 	umull	r1, r2, r1, r2
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d215      	bcs.n	800ad34 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 800ad08:	79fa      	ldrb	r2, [r7, #7]
 800ad0a:	490f      	ldr	r1, [pc, #60]	@ (800ad48 <drv_gpioTgglePin+0x60>)
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	79fa      	ldrb	r2, [r7, #7]
 800ad1a:	490b      	ldr	r1, [pc, #44]	@ (800ad48 <drv_gpioTgglePin+0x60>)
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	1a9b      	subs	r3, r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3304      	adds	r3, #4
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	f7f8 f969 	bl	8003002 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 800ad30:	2355      	movs	r3, #85	@ 0x55
 800ad32:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000354 	.word	0x20000354
 800ad44:	24924925 	.word	0x24924925
 800ad48:	0801a6c4 	.word	0x0801a6c4

0800ad4c <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800ad50:	4b1d      	ldr	r3, [pc, #116]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d105      	bne.n	800ad64 <EXTI9_5_IRQHandler+0x18>
 800ad58:	4b1c      	ldr	r3, [pc, #112]	@ (800adcc <EXTI9_5_IRQHandler+0x80>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	4b1a      	ldr	r3, [pc, #104]	@ (800adcc <EXTI9_5_IRQHandler+0x80>)
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	4b18      	ldr	r3, [pc, #96]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	4b16      	ldr	r3, [pc, #88]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ad6e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800ad70:	2020      	movs	r0, #32
 800ad72:	f7f8 f961 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800ad76:	2040      	movs	r0, #64	@ 0x40
 800ad78:	f7f8 f95e 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800ad7c:	2080      	movs	r0, #128	@ 0x80
 800ad7e:	f7f8 f95b 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800ad82:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ad86:	f7f8 f957 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800ad8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad8e:	f7f8 f953 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 800ad92:	4b0d      	ldr	r3, [pc, #52]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <EXTI9_5_IRQHandler+0x5a>
 800ad9a:	4b0b      	ldr	r3, [pc, #44]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b09      	ldr	r3, [pc, #36]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	4b08      	ldr	r3, [pc, #32]	@ (800adc8 <EXTI9_5_IRQHandler+0x7c>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d109      	bne.n	800adc2 <EXTI9_5_IRQHandler+0x76>
 800adae:	4b07      	ldr	r3, [pc, #28]	@ (800adcc <EXTI9_5_IRQHandler+0x80>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d005      	beq.n	800adc2 <EXTI9_5_IRQHandler+0x76>
 800adb6:	4b05      	ldr	r3, [pc, #20]	@ (800adcc <EXTI9_5_IRQHandler+0x80>)
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	3b01      	subs	r3, #1
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	4b03      	ldr	r3, [pc, #12]	@ (800adcc <EXTI9_5_IRQHandler+0x80>)
 800adc0:	701a      	strb	r2, [r3, #0]
}
 800adc2:	bf00      	nop
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20005e46 	.word	0x20005e46
 800adcc:	20005e45 	.word	0x20005e45

0800add0 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800add4:	4b20      	ldr	r3, [pc, #128]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d105      	bne.n	800ade8 <EXTI15_10_IRQHandler+0x18>
 800addc:	4b1f      	ldr	r3, [pc, #124]	@ (800ae5c <EXTI15_10_IRQHandler+0x8c>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	3301      	adds	r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae5c <EXTI15_10_IRQHandler+0x8c>)
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	4b1b      	ldr	r3, [pc, #108]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	4b19      	ldr	r3, [pc, #100]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800adf2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800adf4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800adf8:	f7f8 f91e 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800adfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ae00:	f7f8 f91a 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800ae04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ae08:	f7f8 f916 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ae0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ae10:	f7f8 f912 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800ae14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ae18:	f7f8 f90e 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800ae1c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ae20:	f7f8 f90a 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 800ae24:	4b0c      	ldr	r3, [pc, #48]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <EXTI15_10_IRQHandler+0x68>
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	4b08      	ldr	r3, [pc, #32]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <EXTI15_10_IRQHandler+0x88>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d109      	bne.n	800ae54 <EXTI15_10_IRQHandler+0x84>
 800ae40:	4b06      	ldr	r3, [pc, #24]	@ (800ae5c <EXTI15_10_IRQHandler+0x8c>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <EXTI15_10_IRQHandler+0x84>
 800ae48:	4b04      	ldr	r3, [pc, #16]	@ (800ae5c <EXTI15_10_IRQHandler+0x8c>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	4b02      	ldr	r3, [pc, #8]	@ (800ae5c <EXTI15_10_IRQHandler+0x8c>)
 800ae52:	701a      	strb	r2, [r3, #0]
}
 800ae54:	bf00      	nop
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20005e46 	.word	0x20005e46
 800ae5c:	20005e45 	.word	0x20005e45

0800ae60 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	4603      	mov	r3, r0
 800ae68:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 800ae6a:	4b27      	ldr	r3, [pc, #156]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d105      	bne.n	800ae7e <HAL_GPIO_EXTI_Callback+0x1e>
 800ae72:	4b26      	ldr	r3, [pc, #152]	@ (800af0c <HAL_GPIO_EXTI_Callback+0xac>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	3301      	adds	r3, #1
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b24      	ldr	r3, [pc, #144]	@ (800af0c <HAL_GPIO_EXTI_Callback+0xac>)
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	4b22      	ldr	r3, [pc, #136]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	3301      	adds	r3, #1
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	4b20      	ldr	r3, [pc, #128]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800ae88:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
 800ae92:	e016      	b.n	800aec2 <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	4a1e      	ldr	r2, [pc, #120]	@ (800af10 <HAL_GPIO_EXTI_Callback+0xb0>)
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	889b      	ldrh	r3, [r3, #4]
 800ae9e:	88fa      	ldrh	r2, [r7, #6]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d10b      	bne.n	800aebc <HAL_GPIO_EXTI_Callback+0x5c>
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	4a1a      	ldr	r2, [pc, #104]	@ (800af10 <HAL_GPIO_EXTI_Callback+0xb0>)
 800aea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d005      	beq.n	800aebc <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4a17      	ldr	r2, [pc, #92]	@ (800af10 <HAL_GPIO_EXTI_Callback+0xb0>)
 800aeb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aeb8:	4798      	blx	r3
                break;
 800aeba:	e008      	b.n	800aece <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	3301      	adds	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
 800aec2:	7bfa      	ldrb	r2, [r7, #15]
 800aec4:	4b13      	ldr	r3, [pc, #76]	@ (800af14 <HAL_GPIO_EXTI_Callback+0xb4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	08db      	lsrs	r3, r3, #3
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d3e2      	bcc.n	800ae94 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 800aece:	4b0e      	ldr	r3, [pc, #56]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d005      	beq.n	800aee2 <HAL_GPIO_EXTI_Callback+0x82>
 800aed6:	4b0c      	ldr	r3, [pc, #48]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	4b0a      	ldr	r3, [pc, #40]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aee0:	701a      	strb	r2, [r3, #0]
 800aee2:	4b09      	ldr	r3, [pc, #36]	@ (800af08 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d109      	bne.n	800aefe <HAL_GPIO_EXTI_Callback+0x9e>
 800aeea:	4b08      	ldr	r3, [pc, #32]	@ (800af0c <HAL_GPIO_EXTI_Callback+0xac>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d005      	beq.n	800aefe <HAL_GPIO_EXTI_Callback+0x9e>
 800aef2:	4b06      	ldr	r3, [pc, #24]	@ (800af0c <HAL_GPIO_EXTI_Callback+0xac>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	4b04      	ldr	r3, [pc, #16]	@ (800af0c <HAL_GPIO_EXTI_Callback+0xac>)
 800aefc:	701a      	strb	r2, [r3, #0]
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20005e46 	.word	0x20005e46
 800af0c:	20005e45 	.word	0x20005e45
 800af10:	0801a8a0 	.word	0x0801a8a0
 800af14:	200016a0 	.word	0x200016a0

0800af18 <drv_i2cInit>:

/*
 * Function: drv_i2cInit
 */
gos_result_t drv_i2cInit (void_t)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t i2cDriverInitResult = GOS_SUCCESS;
 800af1e:	2355      	movs	r3, #85	@ 0x55
 800af20:	71fb      	strb	r3, [r7, #7]
    u8_t         i2cIdx              = 0u;
 800af22:	2300      	movs	r3, #0
 800af24:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (i2cConfig != NULL)
    {
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 800af26:	2300      	movs	r3, #0
 800af28:	71bb      	strb	r3, [r7, #6]
 800af2a:	e013      	b.n	800af54 <drv_i2cInit+0x3c>
        {
            GOS_CONCAT_RESULT(i2cDriverInitResult, drv_i2cInitInstance(&i2cConfig[i2cIdx]));
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b55      	cmp	r3, #85	@ 0x55
 800af30:	d10b      	bne.n	800af4a <drv_i2cInit+0x32>
 800af32:	79bb      	ldrb	r3, [r7, #6]
 800af34:	222c      	movs	r2, #44	@ 0x2c
 800af36:	fb02 f303 	mul.w	r3, r2, r3
 800af3a:	4a0d      	ldr	r2, [pc, #52]	@ (800af70 <drv_i2cInit+0x58>)
 800af3c:	4413      	add	r3, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f81c 	bl	800af7c <drv_i2cInitInstance>
 800af44:	4603      	mov	r3, r0
 800af46:	71fb      	strb	r3, [r7, #7]
 800af48:	e001      	b.n	800af4e <drv_i2cInit+0x36>
 800af4a:	23ae      	movs	r3, #174	@ 0xae
 800af4c:	71fb      	strb	r3, [r7, #7]
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 800af4e:	79bb      	ldrb	r3, [r7, #6]
 800af50:	3301      	adds	r3, #1
 800af52:	71bb      	strb	r3, [r7, #6]
 800af54:	79ba      	ldrb	r2, [r7, #6]
 800af56:	4b07      	ldr	r3, [pc, #28]	@ (800af74 <drv_i2cInit+0x5c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4907      	ldr	r1, [pc, #28]	@ (800af78 <drv_i2cInit+0x60>)
 800af5c:	fba1 1303 	umull	r1, r3, r1, r3
 800af60:	095b      	lsrs	r3, r3, #5
 800af62:	429a      	cmp	r2, r3
 800af64:	d3e2      	bcc.n	800af2c <drv_i2cInit+0x14>
    {
        // Configuration array is NULL pointer.
        i2cDriverInitResult = GOS_ERROR;
    }

    return i2cDriverInitResult;
 800af66:	79fb      	ldrb	r3, [r7, #7]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	0801a8a0 	.word	0x0801a8a0
 800af74:	20000358 	.word	0x20000358
 800af78:	ba2e8ba3 	.word	0xba2e8ba3

0800af7c <drv_i2cInitInstance>:

/*
 * Function: drv_i2cInitInstance
 */
gos_result_t drv_i2cInitInstance (GOS_CONST drv_i2cDescriptor_t* pInstance)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            i2cInitResult = GOS_ERROR;
 800af84:	23ae      	movs	r3, #174	@ 0xae
 800af86:	73fb      	strb	r3, [r7, #15]
    drv_i2cPeriphInstance_t instance      = 0u;
 800af88:	2300      	movs	r3, #0
 800af8a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pInstance != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 80e7 	beq.w	800b162 <drv_i2cInitInstance+0x1e6>
    {
        instance = pInstance->periphInstance;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	73bb      	strb	r3, [r7, #14]

        hi2cs[instance].Instance             = i2cInstanceLut[instance];
 800af9a:	7bba      	ldrb	r2, [r7, #14]
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	4973      	ldr	r1, [pc, #460]	@ (800b16c <drv_i2cInitInstance+0x1f0>)
 800afa0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800afa4:	4972      	ldr	r1, [pc, #456]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800afa6:	2054      	movs	r0, #84	@ 0x54
 800afa8:	fb00 f303 	mul.w	r3, r0, r3
 800afac:	440b      	add	r3, r1
 800afae:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.ClockSpeed      = pInstance->clockSpeed;
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	6852      	ldr	r2, [r2, #4]
 800afb6:	496e      	ldr	r1, [pc, #440]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800afb8:	2054      	movs	r0, #84	@ 0x54
 800afba:	fb00 f303 	mul.w	r3, r0, r3
 800afbe:	440b      	add	r3, r1
 800afc0:	3304      	adds	r3, #4
 800afc2:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DutyCycle       = pInstance->dutyCycle;
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6892      	ldr	r2, [r2, #8]
 800afca:	4969      	ldr	r1, [pc, #420]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800afcc:	2054      	movs	r0, #84	@ 0x54
 800afce:	fb00 f303 	mul.w	r3, r0, r3
 800afd2:	440b      	add	r3, r1
 800afd4:	3308      	adds	r3, #8
 800afd6:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.AddressingMode  = pInstance->addressingMode;
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6912      	ldr	r2, [r2, #16]
 800afde:	4964      	ldr	r1, [pc, #400]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800afe0:	2054      	movs	r0, #84	@ 0x54
 800afe2:	fb00 f303 	mul.w	r3, r0, r3
 800afe6:	440b      	add	r3, r1
 800afe8:	3310      	adds	r3, #16
 800afea:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress1     = pInstance->ownAddress1;
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	68d2      	ldr	r2, [r2, #12]
 800aff2:	495f      	ldr	r1, [pc, #380]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800aff4:	2054      	movs	r0, #84	@ 0x54
 800aff6:	fb00 f303 	mul.w	r3, r0, r3
 800affa:	440b      	add	r3, r1
 800affc:	330c      	adds	r3, #12
 800affe:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress2     = pInstance->ownAddress2;
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	6992      	ldr	r2, [r2, #24]
 800b006:	495a      	ldr	r1, [pc, #360]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800b008:	2054      	movs	r0, #84	@ 0x54
 800b00a:	fb00 f303 	mul.w	r3, r0, r3
 800b00e:	440b      	add	r3, r1
 800b010:	3318      	adds	r3, #24
 800b012:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DualAddressMode = pInstance->dualAddressMode;
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6952      	ldr	r2, [r2, #20]
 800b01a:	4955      	ldr	r1, [pc, #340]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800b01c:	2054      	movs	r0, #84	@ 0x54
 800b01e:	fb00 f303 	mul.w	r3, r0, r3
 800b022:	440b      	add	r3, r1
 800b024:	3314      	adds	r3, #20
 800b026:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.GeneralCallMode = pInstance->generalCallMode;
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	69d2      	ldr	r2, [r2, #28]
 800b02e:	4950      	ldr	r1, [pc, #320]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800b030:	2054      	movs	r0, #84	@ 0x54
 800b032:	fb00 f303 	mul.w	r3, r0, r3
 800b036:	440b      	add	r3, r1
 800b038:	331c      	adds	r3, #28
 800b03a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.NoStretchMode   = pInstance->noStretchMode;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	6a12      	ldr	r2, [r2, #32]
 800b042:	494b      	ldr	r1, [pc, #300]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800b044:	2054      	movs	r0, #84	@ 0x54
 800b046:	fb00 f303 	mul.w	r3, r0, r3
 800b04a:	440b      	add	r3, r1
 800b04c:	3320      	adds	r3, #32
 800b04e:	601a      	str	r2, [r3, #0]

        HAL_I2C_DeInit(&hi2cs[instance]);
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2254      	movs	r2, #84	@ 0x54
 800b054:	fb02 f303 	mul.w	r3, r2, r3
 800b058:	4a45      	ldr	r2, [pc, #276]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800b05a:	4413      	add	r3, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7f8 f947 	bl	80032f0 <HAL_I2C_DeInit>

        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2254      	movs	r2, #84	@ 0x54
 800b066:	fb02 f303 	mul.w	r3, r2, r3
 800b06a:	4a41      	ldr	r2, [pc, #260]	@ (800b170 <drv_i2cInitInstance+0x1f4>)
 800b06c:	4413      	add	r3, r2
 800b06e:	4618      	mov	r0, r3
 800b070:	f7f7 fffa 	bl	8003068 <HAL_I2C_Init>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d173      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4a3d      	ldr	r2, [pc, #244]	@ (800b174 <drv_i2cInitInstance+0x1f8>)
 800b080:	4413      	add	r3, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f008 fe94 	bl	8013db0 <gos_mutexInit>
 800b088:	4603      	mov	r3, r0
        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 800b08a:	2b55      	cmp	r3, #85	@ 0x55
 800b08c:	d169      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b08e:	7bba      	ldrb	r2, [r7, #14]
 800b090:	4613      	mov	r3, r2
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4a37      	ldr	r2, [pc, #220]	@ (800b178 <drv_i2cInitInstance+0x1fc>)
 800b09a:	4413      	add	r3, r2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f00a ff29 	bl	8015ef4 <gos_triggerInit>
 800b0a2:	4603      	mov	r3, r0
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 800b0a4:	2b55      	cmp	r3, #85	@ 0x55
 800b0a6:	d15c      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0a8:	7bba      	ldrb	r2, [r7, #14]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4a32      	ldr	r2, [pc, #200]	@ (800b17c <drv_i2cInitInstance+0x200>)
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f00a ff1c 	bl	8015ef4 <gos_triggerInit>
 800b0bc:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0be:	2b55      	cmp	r3, #85	@ 0x55
 800b0c0:	d14f      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b0c2:	7bba      	ldrb	r2, [r7, #14]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a2c      	ldr	r2, [pc, #176]	@ (800b180 <drv_i2cInitInstance+0x204>)
 800b0ce:	4413      	add	r3, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f00a ff0f 	bl	8015ef4 <gos_triggerInit>
 800b0d6:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0d8:	2b55      	cmp	r3, #85	@ 0x55
 800b0da:	d142      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b0dc:	7bba      	ldrb	r2, [r7, #14]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4a27      	ldr	r2, [pc, #156]	@ (800b184 <drv_i2cInitInstance+0x208>)
 800b0e8:	4413      	add	r3, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f00a ff02 	bl	8015ef4 <gos_triggerInit>
 800b0f0:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b0f2:	2b55      	cmp	r3, #85	@ 0x55
 800b0f4:	d135      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0f6:	7bba      	ldrb	r2, [r7, #14]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4a1d      	ldr	r2, [pc, #116]	@ (800b178 <drv_i2cInitInstance+0x1fc>)
 800b102:	4413      	add	r3, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f00a ff11 	bl	8015f2c <gos_triggerReset>
 800b10a:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b10c:	2b55      	cmp	r3, #85	@ 0x55
 800b10e:	d128      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b110:	7bba      	ldrb	r2, [r7, #14]
 800b112:	4613      	mov	r3, r2
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4a18      	ldr	r2, [pc, #96]	@ (800b17c <drv_i2cInitInstance+0x200>)
 800b11c:	4413      	add	r3, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f00a ff04 	bl	8015f2c <gos_triggerReset>
 800b124:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b126:	2b55      	cmp	r3, #85	@ 0x55
 800b128:	d11b      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b12a:	7bba      	ldrb	r2, [r7, #14]
 800b12c:	4613      	mov	r3, r2
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4a12      	ldr	r2, [pc, #72]	@ (800b180 <drv_i2cInitInstance+0x204>)
 800b136:	4413      	add	r3, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f00a fef7 	bl	8015f2c <gos_triggerReset>
 800b13e:	4603      	mov	r3, r0
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b140:	2b55      	cmp	r3, #85	@ 0x55
 800b142:	d10e      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS
 800b144:	7bba      	ldrb	r2, [r7, #14]
 800b146:	4613      	mov	r3, r2
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4a0d      	ldr	r2, [pc, #52]	@ (800b184 <drv_i2cInitInstance+0x208>)
 800b150:	4413      	add	r3, r2
 800b152:	4618      	mov	r0, r3
 800b154:	f00a feea 	bl	8015f2c <gos_triggerReset>
 800b158:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b15a:	2b55      	cmp	r3, #85	@ 0x55
 800b15c:	d101      	bne.n	800b162 <drv_i2cInitInstance+0x1e6>
            )
        {
            i2cInitResult = GOS_SUCCESS;
 800b15e:	2355      	movs	r3, #85	@ 0x55
 800b160:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return i2cInitResult;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	200004c4 	.word	0x200004c4
 800b170:	20001f88 	.word	0x20001f88
 800b174:	20002084 	.word	0x20002084
 800b178:	20002090 	.word	0x20002090
 800b17c:	200020b4 	.word	0x200020b4
 800b180:	200020d8 	.word	0x200020d8
 800b184:	200020fc 	.word	0x200020fc

0800b188 <drv_i2cMemRead>:
 */
gos_result_t drv_i2cMemRead (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 800b188:	b590      	push	{r4, r7, lr}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	4604      	mov	r4, r0
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	461a      	mov	r2, r3
 800b196:	4623      	mov	r3, r4
 800b198:	71fb      	strb	r3, [r7, #7]
 800b19a:	4603      	mov	r3, r0
 800b19c:	80bb      	strh	r3, [r7, #4]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	807b      	strh	r3, [r7, #2]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemReadResult = GOS_ERROR;
 800b1a6:	23ae      	movs	r3, #174	@ 0xae
 800b1a8:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4a29      	ldr	r2, [pc, #164]	@ (800b254 <drv_i2cMemRead+0xcc>)
 800b1b0:	4413      	add	r3, r2
 800b1b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f008 fe15 	bl	8013de4 <gos_mutexLock>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b55      	cmp	r3, #85	@ 0x55
 800b1be:	d13c      	bne.n	800b23a <drv_i2cMemRead+0xb2>
    {
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	2254      	movs	r2, #84	@ 0x54
 800b1c4:	fb02 f303 	mul.w	r3, r2, r3
 800b1c8:	4a23      	ldr	r2, [pc, #140]	@ (800b258 <drv_i2cMemRead+0xd0>)
 800b1ca:	1898      	adds	r0, r3, r2
 800b1cc:	883c      	ldrh	r4, [r7, #0]
 800b1ce:	887a      	ldrh	r2, [r7, #2]
 800b1d0:	88b9      	ldrh	r1, [r7, #4]
 800b1d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	4623      	mov	r3, r4
 800b1dc:	f7f8 f8c2 	bl	8003364 <HAL_I2C_Mem_Read_IT>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d11e      	bne.n	800b224 <drv_i2cMemRead+0x9c>
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 800b1e6:	79fa      	ldrb	r2, [r7, #7]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b25c <drv_i2cMemRead+0xd4>)
 800b1f2:	4413      	add	r3, r2
 800b1f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f00a feef 	bl	8015fdc <gos_triggerWait>
 800b1fe:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 800b200:	2b55      	cmp	r3, #85	@ 0x55
 800b202:	d10f      	bne.n	800b224 <drv_i2cMemRead+0x9c>
            gos_triggerReset   (&i2cRxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 800b204:	79fa      	ldrb	r2, [r7, #7]
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4a13      	ldr	r2, [pc, #76]	@ (800b25c <drv_i2cMemRead+0xd4>)
 800b210:	4413      	add	r3, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f00a fe8a 	bl	8015f2c <gos_triggerReset>
 800b218:	4603      	mov	r3, r0
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 800b21a:	2b55      	cmp	r3, #85	@ 0x55
 800b21c:	d102      	bne.n	800b224 <drv_i2cMemRead+0x9c>
        {
            i2cMemReadResult = GOS_SUCCESS;
 800b21e:	2355      	movs	r3, #85	@ 0x55
 800b220:	73fb      	strb	r3, [r7, #15]
 800b222:	e00a      	b.n	800b23a <drv_i2cMemRead+0xb2>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	2254      	movs	r2, #84	@ 0x54
 800b228:	fb02 f303 	mul.w	r3, r2, r3
 800b22c:	4a0a      	ldr	r2, [pc, #40]	@ (800b258 <drv_i2cMemRead+0xd0>)
 800b22e:	4413      	add	r3, r2
 800b230:	88ba      	ldrh	r2, [r7, #4]
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f7f8 f953 	bl	80034e0 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4a05      	ldr	r2, [pc, #20]	@ (800b254 <drv_i2cMemRead+0xcc>)
 800b240:	4413      	add	r3, r2
 800b242:	4618      	mov	r0, r3
 800b244:	f008 fed4 	bl	8013ff0 <gos_mutexUnlock>

    return i2cMemReadResult;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd90      	pop	{r4, r7, pc}
 800b252:	bf00      	nop
 800b254:	20002084 	.word	0x20002084
 800b258:	20001f88 	.word	0x20001f88
 800b25c:	200020d8 	.word	0x200020d8

0800b260 <HAL_I2C_MasterTxCpltCallback>:

/*
 * Function: HAL_I2C_MasterTxCpltCallback
 */
void_t HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	4b0a      	ldr	r3, [pc, #40]	@ (800b298 <HAL_I2C_MasterTxCpltCallback+0x38>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d103      	bne.n	800b27c <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b274:	4809      	ldr	r0, [pc, #36]	@ (800b29c <HAL_I2C_MasterTxCpltCallback+0x3c>)
 800b276:	f00a ff61 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b27a:	e008      	b.n	800b28e <HAL_I2C_MasterTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <HAL_I2C_MasterTxCpltCallback+0x38>)
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	429a      	cmp	r2, r3
 800b286:	d102      	bne.n	800b28e <HAL_I2C_MasterTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b288:	4805      	ldr	r0, [pc, #20]	@ (800b2a0 <HAL_I2C_MasterTxCpltCallback+0x40>)
 800b28a:	f00a ff57 	bl	801613c <gos_triggerIncrement>
}
 800b28e:	bf00      	nop
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	200004c4 	.word	0x200004c4
 800b29c:	200020b4 	.word	0x200020b4
 800b2a0:	200020c0 	.word	0x200020c0

0800b2a4 <HAL_I2C_MemTxCpltCallback>:

/*
 * Function: HAL_I2C_MemTxCpltCallback
 */
void_t HAL_I2C_MemTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <HAL_I2C_MemTxCpltCallback+0x38>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d103      	bne.n	800b2c0 <HAL_I2C_MemTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b2b8:	4809      	ldr	r0, [pc, #36]	@ (800b2e0 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800b2ba:	f00a ff3f 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b2be:	e008      	b.n	800b2d2 <HAL_I2C_MemTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	4b05      	ldr	r3, [pc, #20]	@ (800b2dc <HAL_I2C_MemTxCpltCallback+0x38>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d102      	bne.n	800b2d2 <HAL_I2C_MemTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b2cc:	4805      	ldr	r0, [pc, #20]	@ (800b2e4 <HAL_I2C_MemTxCpltCallback+0x40>)
 800b2ce:	f00a ff35 	bl	801613c <gos_triggerIncrement>
}
 800b2d2:	bf00      	nop
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200004c4 	.word	0x200004c4
 800b2e0:	200020fc 	.word	0x200020fc
 800b2e4:	20002108 	.word	0x20002108

0800b2e8 <HAL_I2C_MasterRxCpltCallback>:

/*
 * Function: HAL_I2C_MasterRxCpltCallback
 */
void_t HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b320 <HAL_I2C_MasterRxCpltCallback+0x38>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d103      	bne.n	800b304 <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b2fc:	4809      	ldr	r0, [pc, #36]	@ (800b324 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800b2fe:	f00a ff1d 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b302:	e008      	b.n	800b316 <HAL_I2C_MasterRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	4b05      	ldr	r3, [pc, #20]	@ (800b320 <HAL_I2C_MasterRxCpltCallback+0x38>)
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d102      	bne.n	800b316 <HAL_I2C_MasterRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b310:	4805      	ldr	r0, [pc, #20]	@ (800b328 <HAL_I2C_MasterRxCpltCallback+0x40>)
 800b312:	f00a ff13 	bl	801613c <gos_triggerIncrement>
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	200004c4 	.word	0x200004c4
 800b324:	20002090 	.word	0x20002090
 800b328:	2000209c 	.word	0x2000209c

0800b32c <HAL_I2C_MemRxCpltCallback>:

/*
 * Function: HAL_I2C_MemRxCpltCallback
 */
void_t HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	4b0a      	ldr	r3, [pc, #40]	@ (800b364 <HAL_I2C_MemRxCpltCallback+0x38>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d103      	bne.n	800b348 <HAL_I2C_MemRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b340:	4809      	ldr	r0, [pc, #36]	@ (800b368 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800b342:	f00a fefb 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b346:	e008      	b.n	800b35a <HAL_I2C_MemRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	4b05      	ldr	r3, [pc, #20]	@ (800b364 <HAL_I2C_MemRxCpltCallback+0x38>)
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d102      	bne.n	800b35a <HAL_I2C_MemRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b354:	4805      	ldr	r0, [pc, #20]	@ (800b36c <HAL_I2C_MemRxCpltCallback+0x40>)
 800b356:	f00a fef1 	bl	801613c <gos_triggerIncrement>
}
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	200004c4 	.word	0x200004c4
 800b368:	200020d8 	.word	0x200020d8
 800b36c:	200020e4 	.word	0x200020e4

0800b370 <I2C1_EV_IRQHandler>:

/*
 * Function: I2C1_EV_IRQHandler
 */
void_t I2C1_EV_IRQHandler (void_t)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b374:	4b16      	ldr	r3, [pc, #88]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d105      	bne.n	800b388 <I2C1_EV_IRQHandler+0x18>
 800b37c:	4b15      	ldr	r3, [pc, #84]	@ (800b3d4 <I2C1_EV_IRQHandler+0x64>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	4b13      	ldr	r3, [pc, #76]	@ (800b3d4 <I2C1_EV_IRQHandler+0x64>)
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	4b11      	ldr	r3, [pc, #68]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	3301      	adds	r3, #1
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b392:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_1]);
 800b394:	4810      	ldr	r0, [pc, #64]	@ (800b3d8 <I2C1_EV_IRQHandler+0x68>)
 800b396:	f7f8 f8f2 	bl	800357e <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 800b39a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d005      	beq.n	800b3ae <I2C1_EV_IRQHandler+0x3e>
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b09      	ldr	r3, [pc, #36]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	4b08      	ldr	r3, [pc, #32]	@ (800b3d0 <I2C1_EV_IRQHandler+0x60>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d109      	bne.n	800b3ca <I2C1_EV_IRQHandler+0x5a>
 800b3b6:	4b07      	ldr	r3, [pc, #28]	@ (800b3d4 <I2C1_EV_IRQHandler+0x64>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <I2C1_EV_IRQHandler+0x5a>
 800b3be:	4b05      	ldr	r3, [pc, #20]	@ (800b3d4 <I2C1_EV_IRQHandler+0x64>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	4b03      	ldr	r3, [pc, #12]	@ (800b3d4 <I2C1_EV_IRQHandler+0x64>)
 800b3c8:	701a      	strb	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20005e46 	.word	0x20005e46
 800b3d4:	20005e45 	.word	0x20005e45
 800b3d8:	20001f88 	.word	0x20001f88

0800b3dc <I2C2_EV_IRQHandler>:

/*
 * Function: I2C2_EV_IRQHandler
 */
void_t I2C2_EV_IRQHandler (void_t)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b3e0:	4b16      	ldr	r3, [pc, #88]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d105      	bne.n	800b3f4 <I2C2_EV_IRQHandler+0x18>
 800b3e8:	4b15      	ldr	r3, [pc, #84]	@ (800b440 <I2C2_EV_IRQHandler+0x64>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	4b13      	ldr	r3, [pc, #76]	@ (800b440 <I2C2_EV_IRQHandler+0x64>)
 800b3f2:	701a      	strb	r2, [r3, #0]
 800b3f4:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b3fe:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_2]);
 800b400:	4810      	ldr	r0, [pc, #64]	@ (800b444 <I2C2_EV_IRQHandler+0x68>)
 800b402:	f7f8 f8bc 	bl	800357e <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 800b406:	4b0d      	ldr	r3, [pc, #52]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <I2C2_EV_IRQHandler+0x3e>
 800b40e:	4b0b      	ldr	r3, [pc, #44]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	3b01      	subs	r3, #1
 800b414:	b2da      	uxtb	r2, r3
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b418:	701a      	strb	r2, [r3, #0]
 800b41a:	4b08      	ldr	r3, [pc, #32]	@ (800b43c <I2C2_EV_IRQHandler+0x60>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d109      	bne.n	800b436 <I2C2_EV_IRQHandler+0x5a>
 800b422:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <I2C2_EV_IRQHandler+0x64>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <I2C2_EV_IRQHandler+0x5a>
 800b42a:	4b05      	ldr	r3, [pc, #20]	@ (800b440 <I2C2_EV_IRQHandler+0x64>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	3b01      	subs	r3, #1
 800b430:	b2da      	uxtb	r2, r3
 800b432:	4b03      	ldr	r3, [pc, #12]	@ (800b440 <I2C2_EV_IRQHandler+0x64>)
 800b434:	701a      	strb	r2, [r3, #0]
}
 800b436:	bf00      	nop
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20005e46 	.word	0x20005e46
 800b440:	20005e45 	.word	0x20005e45
 800b444:	20001fdc 	.word	0x20001fdc

0800b448 <HAL_I2C_MspInit>:

/*
 * Function: HAL_I2C_MspInit
 */
void_t HAL_I2C_MspInit (I2C_HandleTypeDef* hi2c)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_i2cPeriphInstance_t instance = 0u;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800b454:	2300      	movs	r3, #0
 800b456:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 800b458:	2300      	movs	r3, #0
 800b45a:	73fb      	strb	r3, [r7, #15]
 800b45c:	e061      	b.n	800b522 <HAL_I2C_MspInit+0xda>
    {
        if (i2cInstanceLut[instance] == hi2c->Instance)
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	4a35      	ldr	r2, [pc, #212]	@ (800b538 <HAL_I2C_MspInit+0xf0>)
 800b462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d156      	bne.n	800b51c <HAL_I2C_MspInit+0xd4>
        {
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 800b46e:	2300      	movs	r3, #0
 800b470:	73bb      	strb	r3, [r7, #14]
 800b472:	e04a      	b.n	800b50a <HAL_I2C_MspInit+0xc2>
            {
                if (i2cConfig[idx].periphInstance == instance)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	4a31      	ldr	r2, [pc, #196]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b478:	212c      	movs	r1, #44	@ 0x2c
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	4413      	add	r3, r2
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	7bfa      	ldrb	r2, [r7, #15]
 800b484:	429a      	cmp	r2, r3
 800b486:	d13d      	bne.n	800b504 <HAL_I2C_MspInit+0xbc>
                {
                    if (i2cConfig[idx].dmaConfigRx != NULL)
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	4a2c      	ldr	r2, [pc, #176]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b48c:	212c      	movs	r1, #44	@ 0x2c
 800b48e:	fb01 f303 	mul.w	r3, r1, r3
 800b492:	4413      	add	r3, r2
 800b494:	3324      	adds	r3, #36	@ 0x24
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d014      	beq.n	800b4c6 <HAL_I2C_MspInit+0x7e>
                    {
                        __HAL_LINKDMA(hi2c, hdmarx, i2cConfig[idx].dmaConfigRx->hdma);
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	4a27      	ldr	r2, [pc, #156]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b4a0:	212c      	movs	r1, #44	@ 0x2c
 800b4a2:	fb01 f303 	mul.w	r3, r1, r3
 800b4a6:	4413      	add	r3, r2
 800b4a8:	3324      	adds	r3, #36	@ 0x24
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	1d1a      	adds	r2, r3, #4
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	639a      	str	r2, [r3, #56]	@ 0x38
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	4a21      	ldr	r2, [pc, #132]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b4b6:	212c      	movs	r1, #44	@ 0x2c
 800b4b8:	fb01 f303 	mul.w	r3, r1, r3
 800b4bc:	4413      	add	r3, r2
 800b4be:	3324      	adds	r3, #36	@ 0x24
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (i2cConfig[idx].dmaConfigTx != NULL)
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b4ca:	212c      	movs	r1, #44	@ 0x2c
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	3328      	adds	r3, #40	@ 0x28
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d014      	beq.n	800b504 <HAL_I2C_MspInit+0xbc>
                    {
                        __HAL_LINKDMA(hi2c, hdmatx, i2cConfig[idx].dmaConfigTx->hdma);
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	4a17      	ldr	r2, [pc, #92]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b4de:	212c      	movs	r1, #44	@ 0x2c
 800b4e0:	fb01 f303 	mul.w	r3, r1, r3
 800b4e4:	4413      	add	r3, r2
 800b4e6:	3328      	adds	r3, #40	@ 0x28
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	635a      	str	r2, [r3, #52]	@ 0x34
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	4a12      	ldr	r2, [pc, #72]	@ (800b53c <HAL_I2C_MspInit+0xf4>)
 800b4f4:	212c      	movs	r1, #44	@ 0x2c
 800b4f6:	fb01 f303 	mul.w	r3, r1, r3
 800b4fa:	4413      	add	r3, r2
 800b4fc:	3328      	adds	r3, #40	@ 0x28
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	3301      	adds	r3, #1
 800b508:	73bb      	strb	r3, [r7, #14]
 800b50a:	7bba      	ldrb	r2, [r7, #14]
 800b50c:	4b0c      	ldr	r3, [pc, #48]	@ (800b540 <HAL_I2C_MspInit+0xf8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	490c      	ldr	r1, [pc, #48]	@ (800b544 <HAL_I2C_MspInit+0xfc>)
 800b512:	fba1 1303 	umull	r1, r3, r1, r3
 800b516:	095b      	lsrs	r3, r3, #5
 800b518:	429a      	cmp	r2, r3
 800b51a:	d3ab      	bcc.n	800b474 <HAL_I2C_MspInit+0x2c>
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	3301      	adds	r3, #1
 800b520:	73fb      	strb	r3, [r7, #15]
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	2b02      	cmp	r3, #2
 800b526:	d99a      	bls.n	800b45e <HAL_I2C_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	200004c4 	.word	0x200004c4
 800b53c:	0801a8a0 	.word	0x0801a8a0
 800b540:	20000358 	.word	0x20000358
 800b544:	ba2e8ba3 	.word	0xba2e8ba3

0800b548 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 800b54e:	23ae      	movs	r3, #174	@ 0xae
 800b550:	71fb      	strb	r3, [r7, #7]
    u8_t         itIdx              = 0u;
 800b552:	2300      	movs	r3, #0
 800b554:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800b556:	2300      	movs	r3, #0
 800b558:	71bb      	strb	r3, [r7, #6]
 800b55a:	e02c      	b.n	800b5b6 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 800b55c:	79ba      	ldrb	r2, [r7, #6]
 800b55e:	491e      	ldr	r1, [pc, #120]	@ (800b5d8 <drv_itInit+0x90>)
 800b560:	4613      	mov	r3, r2
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	f993 0000 	ldrsb.w	r0, [r3]
 800b56e:	79ba      	ldrb	r2, [r7, #6]
 800b570:	4919      	ldr	r1, [pc, #100]	@ (800b5d8 <drv_itInit+0x90>)
 800b572:	4613      	mov	r3, r2
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3304      	adds	r3, #4
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	79ba      	ldrb	r2, [r7, #6]
 800b582:	4c15      	ldr	r4, [pc, #84]	@ (800b5d8 <drv_itInit+0x90>)
 800b584:	4613      	mov	r3, r2
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4423      	add	r3, r4
 800b58e:	3308      	adds	r3, #8
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f6 fc4d 	bl	8001e32 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 800b598:	79ba      	ldrb	r2, [r7, #6]
 800b59a:	490f      	ldr	r1, [pc, #60]	@ (800b5d8 <drv_itInit+0x90>)
 800b59c:	4613      	mov	r3, r2
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	440b      	add	r3, r1
 800b5a6:	f993 3000 	ldrsb.w	r3, [r3]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7f6 fc5d 	bl	8001e6a <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800b5b0:	79bb      	ldrb	r3, [r7, #6]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	71bb      	strb	r3, [r7, #6]
 800b5b6:	79ba      	ldrb	r2, [r7, #6]
 800b5b8:	4b08      	ldr	r3, [pc, #32]	@ (800b5dc <drv_itInit+0x94>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4908      	ldr	r1, [pc, #32]	@ (800b5e0 <drv_itInit+0x98>)
 800b5be:	fba1 1303 	umull	r1, r3, r1, r3
 800b5c2:	08db      	lsrs	r3, r3, #3
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d3c9      	bcc.n	800b55c <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 800b5c8:	2355      	movs	r3, #85	@ 0x55
 800b5ca:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd90      	pop	{r4, r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	0801a8cc 	.word	0x0801a8cc
 800b5dc:	2000035c 	.word	0x2000035c
 800b5e0:	aaaaaaab 	.word	0xaaaaaaab

0800b5e4 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800b5ec:	23ae      	movs	r3, #174	@ 0xae
 800b5ee:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800b5f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b62c <drv_shellTransmitString+0x48>)
 800b5f6:	785b      	ldrb	r3, [r3, #1]
 800b5f8:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	2b05      	cmp	r3, #5
 800b5fe:	d810      	bhi.n	800b622 <drv_shellTransmitString+0x3e>
        {
            uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7f4 fe55 	bl	80002b0 <strlen>
 800b606:	4603      	mov	r3, r0
 800b608:	b29a      	uxth	r2, r3
 800b60a:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <drv_shellTransmitString+0x4c>)
 800b60c:	6959      	ldr	r1, [r3, #20]
 800b60e:	4b08      	ldr	r3, [pc, #32]	@ (800b630 <drv_shellTransmitString+0x4c>)
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	7bb8      	ldrb	r0, [r7, #14]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	460b      	mov	r3, r1
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	f001 fb31 	bl	800cc80 <drv_uartTransmitIT>
 800b61e:	4603      	mov	r3, r0
 800b620:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800b622:	7bfb      	ldrb	r3, [r7, #15]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	0801a9ec 	.word	0x0801a9ec
 800b630:	200003d0 	.word	0x200003d0

0800b634 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af02      	add	r7, sp, #8
 800b63a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800b63c:	23ae      	movs	r3, #174	@ 0xae
 800b63e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800b640:	2300      	movs	r3, #0
 800b642:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800b644:	4b0b      	ldr	r3, [pc, #44]	@ (800b674 <drv_shellReceiveChar+0x40>)
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	2b05      	cmp	r3, #5
 800b64e:	d80c      	bhi.n	800b66a <drv_shellReceiveChar+0x36>
        {
            uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 800b650:	4b09      	ldr	r3, [pc, #36]	@ (800b678 <drv_shellReceiveChar+0x44>)
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	4b08      	ldr	r3, [pc, #32]	@ (800b678 <drv_shellReceiveChar+0x44>)
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	7bb8      	ldrb	r0, [r7, #14]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	2201      	movs	r2, #1
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	f001 fb7d 	bl	800cd60 <drv_uartReceiveIT>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	0801a9ec 	.word	0x0801a9ec
 800b678:	200003d0 	.word	0x200003d0

0800b67c <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 800b682:	2355      	movs	r3, #85	@ 0x55
 800b684:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 800b686:	2300      	movs	r3, #0
 800b688:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800b68a:	2300      	movs	r3, #0
 800b68c:	71bb      	strb	r3, [r7, #6]
 800b68e:	e00e      	b.n	800b6ae <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	2b55      	cmp	r3, #85	@ 0x55
 800b694:	d106      	bne.n	800b6a4 <drv_spiInit+0x28>
 800b696:	79bb      	ldrb	r3, [r7, #6]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f81b 	bl	800b6d4 <drv_spiInitInstance>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	71fb      	strb	r3, [r7, #7]
 800b6a2:	e001      	b.n	800b6a8 <drv_spiInit+0x2c>
 800b6a4:	23ae      	movs	r3, #174	@ 0xae
 800b6a6:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800b6a8:	79bb      	ldrb	r3, [r7, #6]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	71bb      	strb	r3, [r7, #6]
 800b6ae:	79bb      	ldrb	r3, [r7, #6]
 800b6b0:	4a06      	ldr	r2, [pc, #24]	@ (800b6cc <drv_spiInit+0x50>)
 800b6b2:	6812      	ldr	r2, [r2, #0]
 800b6b4:	08d2      	lsrs	r2, r2, #3
 800b6b6:	4906      	ldr	r1, [pc, #24]	@ (800b6d0 <drv_spiInit+0x54>)
 800b6b8:	fba1 1202 	umull	r1, r2, r1, r2
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d3e7      	bcc.n	800b690 <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000360 	.word	0x20000360
 800b6d0:	24924925 	.word	0x24924925

0800b6d4 <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 800b6de:	23ae      	movs	r3, #174	@ 0xae
 800b6e0:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	4aa1      	ldr	r2, [pc, #644]	@ (800b970 <drv_spiInitInstance+0x29c>)
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	08d2      	lsrs	r2, r2, #3
 800b6ee:	49a1      	ldr	r1, [pc, #644]	@ (800b974 <drv_spiInitInstance+0x2a0>)
 800b6f0:	fba1 1202 	umull	r1, r2, r1, r2
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	f080 8135 	bcs.w	800b964 <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 800b6fa:	79fa      	ldrb	r2, [r7, #7]
 800b6fc:	499e      	ldr	r1, [pc, #632]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	1a9b      	subs	r3, r3, r2
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	440b      	add	r3, r1
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 800b70c:	7bba      	ldrb	r2, [r7, #14]
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	499a      	ldr	r1, [pc, #616]	@ (800b97c <drv_spiInitInstance+0x2a8>)
 800b712:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b716:	499a      	ldr	r1, [pc, #616]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b718:	2058      	movs	r0, #88	@ 0x58
 800b71a:	fb00 f303 	mul.w	r3, r0, r3
 800b71e:	440b      	add	r3, r1
 800b720:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 800b722:	79fa      	ldrb	r2, [r7, #7]
 800b724:	7bb9      	ldrb	r1, [r7, #14]
 800b726:	4894      	ldr	r0, [pc, #592]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b728:	4613      	mov	r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	4403      	add	r3, r0
 800b732:	3304      	adds	r3, #4
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	4892      	ldr	r0, [pc, #584]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b738:	2358      	movs	r3, #88	@ 0x58
 800b73a:	fb01 f303 	mul.w	r3, r1, r3
 800b73e:	4403      	add	r3, r0
 800b740:	3304      	adds	r3, #4
 800b742:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 800b744:	79fa      	ldrb	r2, [r7, #7]
 800b746:	7bb9      	ldrb	r1, [r7, #14]
 800b748:	488b      	ldr	r0, [pc, #556]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b74a:	4613      	mov	r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	00db      	lsls	r3, r3, #3
 800b752:	4403      	add	r3, r0
 800b754:	3308      	adds	r3, #8
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	4889      	ldr	r0, [pc, #548]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b75a:	2358      	movs	r3, #88	@ 0x58
 800b75c:	fb01 f303 	mul.w	r3, r1, r3
 800b760:	4403      	add	r3, r0
 800b762:	3308      	adds	r3, #8
 800b764:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 800b766:	79fa      	ldrb	r2, [r7, #7]
 800b768:	7bb9      	ldrb	r1, [r7, #14]
 800b76a:	4883      	ldr	r0, [pc, #524]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b76c:	4613      	mov	r3, r2
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	1a9b      	subs	r3, r3, r2
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	4403      	add	r3, r0
 800b776:	330c      	adds	r3, #12
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	4881      	ldr	r0, [pc, #516]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b77c:	2358      	movs	r3, #88	@ 0x58
 800b77e:	fb01 f303 	mul.w	r3, r1, r3
 800b782:	4403      	add	r3, r0
 800b784:	330c      	adds	r3, #12
 800b786:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 800b788:	79fa      	ldrb	r2, [r7, #7]
 800b78a:	7bb9      	ldrb	r1, [r7, #14]
 800b78c:	487a      	ldr	r0, [pc, #488]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b78e:	4613      	mov	r3, r2
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	4403      	add	r3, r0
 800b798:	3310      	adds	r3, #16
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	4878      	ldr	r0, [pc, #480]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b79e:	2358      	movs	r3, #88	@ 0x58
 800b7a0:	fb01 f303 	mul.w	r3, r1, r3
 800b7a4:	4403      	add	r3, r0
 800b7a6:	3310      	adds	r3, #16
 800b7a8:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 800b7aa:	79fa      	ldrb	r2, [r7, #7]
 800b7ac:	7bb9      	ldrb	r1, [r7, #14]
 800b7ae:	4872      	ldr	r0, [pc, #456]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	1a9b      	subs	r3, r3, r2
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	4403      	add	r3, r0
 800b7ba:	3314      	adds	r3, #20
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4870      	ldr	r0, [pc, #448]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b7c0:	2358      	movs	r3, #88	@ 0x58
 800b7c2:	fb01 f303 	mul.w	r3, r1, r3
 800b7c6:	4403      	add	r3, r0
 800b7c8:	3314      	adds	r3, #20
 800b7ca:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 800b7cc:	79fa      	ldrb	r2, [r7, #7]
 800b7ce:	7bb9      	ldrb	r1, [r7, #14]
 800b7d0:	4869      	ldr	r0, [pc, #420]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4403      	add	r3, r0
 800b7dc:	3318      	adds	r3, #24
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4867      	ldr	r0, [pc, #412]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b7e2:	2358      	movs	r3, #88	@ 0x58
 800b7e4:	fb01 f303 	mul.w	r3, r1, r3
 800b7e8:	4403      	add	r3, r0
 800b7ea:	3318      	adds	r3, #24
 800b7ec:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 800b7ee:	79fa      	ldrb	r2, [r7, #7]
 800b7f0:	7bb9      	ldrb	r1, [r7, #14]
 800b7f2:	4861      	ldr	r0, [pc, #388]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	1a9b      	subs	r3, r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4403      	add	r3, r0
 800b7fe:	331c      	adds	r3, #28
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	485f      	ldr	r0, [pc, #380]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b804:	2358      	movs	r3, #88	@ 0x58
 800b806:	fb01 f303 	mul.w	r3, r1, r3
 800b80a:	4403      	add	r3, r0
 800b80c:	331c      	adds	r3, #28
 800b80e:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 800b810:	79fa      	ldrb	r2, [r7, #7]
 800b812:	7bb9      	ldrb	r1, [r7, #14]
 800b814:	4858      	ldr	r0, [pc, #352]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b816:	4613      	mov	r3, r2
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	1a9b      	subs	r3, r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	4403      	add	r3, r0
 800b820:	3320      	adds	r3, #32
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	4856      	ldr	r0, [pc, #344]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b826:	2358      	movs	r3, #88	@ 0x58
 800b828:	fb01 f303 	mul.w	r3, r1, r3
 800b82c:	4403      	add	r3, r0
 800b82e:	3320      	adds	r3, #32
 800b830:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 800b832:	79fa      	ldrb	r2, [r7, #7]
 800b834:	7bb9      	ldrb	r1, [r7, #14]
 800b836:	4850      	ldr	r0, [pc, #320]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b838:	4613      	mov	r3, r2
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	1a9b      	subs	r3, r3, r2
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	4403      	add	r3, r0
 800b842:	3324      	adds	r3, #36	@ 0x24
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	484e      	ldr	r0, [pc, #312]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b848:	2358      	movs	r3, #88	@ 0x58
 800b84a:	fb01 f303 	mul.w	r3, r1, r3
 800b84e:	4403      	add	r3, r0
 800b850:	3324      	adds	r3, #36	@ 0x24
 800b852:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 800b854:	79fa      	ldrb	r2, [r7, #7]
 800b856:	7bb9      	ldrb	r1, [r7, #14]
 800b858:	4847      	ldr	r0, [pc, #284]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b85a:	4613      	mov	r3, r2
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	4403      	add	r3, r0
 800b864:	3328      	adds	r3, #40	@ 0x28
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	4845      	ldr	r0, [pc, #276]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b86a:	2358      	movs	r3, #88	@ 0x58
 800b86c:	fb01 f303 	mul.w	r3, r1, r3
 800b870:	4403      	add	r3, r0
 800b872:	3328      	adds	r3, #40	@ 0x28
 800b874:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 800b876:	79fa      	ldrb	r2, [r7, #7]
 800b878:	7bb9      	ldrb	r1, [r7, #14]
 800b87a:	483f      	ldr	r0, [pc, #252]	@ (800b978 <drv_spiInitInstance+0x2a4>)
 800b87c:	4613      	mov	r3, r2
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	1a9b      	subs	r3, r3, r2
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	4403      	add	r3, r0
 800b886:	332c      	adds	r3, #44	@ 0x2c
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	483d      	ldr	r0, [pc, #244]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b88c:	2358      	movs	r3, #88	@ 0x58
 800b88e:	fb01 f303 	mul.w	r3, r1, r3
 800b892:	4403      	add	r3, r0
 800b894:	332c      	adds	r3, #44	@ 0x2c
 800b896:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	2258      	movs	r2, #88	@ 0x58
 800b89c:	fb02 f303 	mul.w	r3, r2, r3
 800b8a0:	4a37      	ldr	r2, [pc, #220]	@ (800b980 <drv_spiInitInstance+0x2ac>)
 800b8a2:	4413      	add	r3, r2
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fa f85d 	bl	8005964 <HAL_SPI_Init>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d159      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800b8b0:	7bbb      	ldrb	r3, [r7, #14]
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4a33      	ldr	r2, [pc, #204]	@ (800b984 <drv_spiInitInstance+0x2b0>)
 800b8b6:	4413      	add	r3, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f008 fa79 	bl	8013db0 <gos_mutexInit>
 800b8be:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800b8c0:	2b55      	cmp	r3, #85	@ 0x55
 800b8c2:	d14f      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b8c4:	7bba      	ldrb	r2, [r7, #14]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4a2e      	ldr	r2, [pc, #184]	@ (800b988 <drv_spiInitInstance+0x2b4>)
 800b8d0:	4413      	add	r3, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f00a fb0e 	bl	8015ef4 <gos_triggerInit>
 800b8d8:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800b8da:	2b55      	cmp	r3, #85	@ 0x55
 800b8dc:	d142      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b8de:	7bba      	ldrb	r2, [r7, #14]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4a28      	ldr	r2, [pc, #160]	@ (800b98c <drv_spiInitInstance+0x2b8>)
 800b8ea:	4413      	add	r3, r2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f00a fb01 	bl	8015ef4 <gos_triggerInit>
 800b8f2:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b8f4:	2b55      	cmp	r3, #85	@ 0x55
 800b8f6:	d135      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800b8f8:	7bba      	ldrb	r2, [r7, #14]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4a23      	ldr	r2, [pc, #140]	@ (800b990 <drv_spiInitInstance+0x2bc>)
 800b904:	4413      	add	r3, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f00a faf4 	bl	8015ef4 <gos_triggerInit>
 800b90c:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b90e:	2b55      	cmp	r3, #85	@ 0x55
 800b910:	d128      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b912:	7bba      	ldrb	r2, [r7, #14]
 800b914:	4613      	mov	r3, r2
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	4413      	add	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4a1a      	ldr	r2, [pc, #104]	@ (800b988 <drv_spiInitInstance+0x2b4>)
 800b91e:	4413      	add	r3, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f00a fb03 	bl	8015f2c <gos_triggerReset>
 800b926:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800b928:	2b55      	cmp	r3, #85	@ 0x55
 800b92a:	d11b      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b92c:	7bba      	ldrb	r2, [r7, #14]
 800b92e:	4613      	mov	r3, r2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4a15      	ldr	r2, [pc, #84]	@ (800b98c <drv_spiInitInstance+0x2b8>)
 800b938:	4413      	add	r3, r2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f00a faf6 	bl	8015f2c <gos_triggerReset>
 800b940:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b942:	2b55      	cmp	r3, #85	@ 0x55
 800b944:	d10e      	bne.n	800b964 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 800b946:	7bba      	ldrb	r2, [r7, #14]
 800b948:	4613      	mov	r3, r2
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a0f      	ldr	r2, [pc, #60]	@ (800b990 <drv_spiInitInstance+0x2bc>)
 800b952:	4413      	add	r3, r2
 800b954:	4618      	mov	r0, r3
 800b956:	f00a fae9 	bl	8015f2c <gos_triggerReset>
 800b95a:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b95c:	2b55      	cmp	r3, #85	@ 0x55
 800b95e:	d101      	bne.n	800b964 <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 800b960:	2355      	movs	r3, #85	@ 0x55
 800b962:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 800b964:	7bfb      	ldrb	r3, [r7, #15]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000360 	.word	0x20000360
 800b974:	24924925 	.word	0x24924925
 800b978:	0801a938 	.word	0x0801a938
 800b97c:	200004d0 	.word	0x200004d0
 800b980:	20002120 	.word	0x20002120
 800b984:	20002280 	.word	0x20002280
 800b988:	20002290 	.word	0x20002290
 800b98c:	200022c0 	.word	0x200022c0
 800b990:	200022f0 	.word	0x200022f0

0800b994 <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60b9      	str	r1, [r7, #8]
 800b99c:	607b      	str	r3, [r7, #4]
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 800b9a6:	23ae      	movs	r3, #174	@ 0xae
 800b9a8:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4a28      	ldr	r2, [pc, #160]	@ (800ba50 <drv_spiTransmitIT+0xbc>)
 800b9b0:	4413      	add	r3, r2
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f008 fa15 	bl	8013de4 <gos_mutexLock>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b55      	cmp	r3, #85	@ 0x55
 800b9be:	d13a      	bne.n	800ba36 <drv_spiTransmitIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	2258      	movs	r2, #88	@ 0x58
 800b9c4:	fb02 f303 	mul.w	r3, r2, r3
 800b9c8:	4a22      	ldr	r2, [pc, #136]	@ (800ba54 <drv_spiTransmitIT+0xc0>)
 800b9ca:	4413      	add	r3, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fa f9d9 	bl	8005d84 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	2258      	movs	r2, #88	@ 0x58
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	4a1e      	ldr	r2, [pc, #120]	@ (800ba54 <drv_spiTransmitIT+0xc0>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	89ba      	ldrh	r2, [r7, #12]
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fa f822 	bl	8005a2c <HAL_SPI_Transmit_IT>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d123      	bne.n	800ba36 <drv_spiTransmitIT+0xa2>
        {
            if (triggerTmo > 0u)
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d01e      	beq.n	800ba32 <drv_spiTransmitIT+0x9e>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800b9f4:	7bfa      	ldrb	r2, [r7, #15]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4a16      	ldr	r2, [pc, #88]	@ (800ba58 <drv_spiTransmitIT+0xc4>)
 800ba00:	4413      	add	r3, r2
 800ba02:	6a3a      	ldr	r2, [r7, #32]
 800ba04:	2101      	movs	r1, #1
 800ba06:	4618      	mov	r0, r3
 800ba08:	f00a fae8 	bl	8015fdc <gos_triggerWait>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b55      	cmp	r3, #85	@ 0x55
 800ba10:	d111      	bne.n	800ba36 <drv_spiTransmitIT+0xa2>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 800ba12:	7bfa      	ldrb	r2, [r7, #15]
 800ba14:	4613      	mov	r3, r2
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4a0e      	ldr	r2, [pc, #56]	@ (800ba58 <drv_spiTransmitIT+0xc4>)
 800ba1e:	4413      	add	r3, r2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f00a fa83 	bl	8015f2c <gos_triggerReset>
 800ba26:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ba28:	2b55      	cmp	r3, #85	@ 0x55
 800ba2a:	d104      	bne.n	800ba36 <drv_spiTransmitIT+0xa2>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 800ba2c:	2355      	movs	r3, #85	@ 0x55
 800ba2e:	75fb      	strb	r3, [r7, #23]
 800ba30:	e001      	b.n	800ba36 <drv_spiTransmitIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 800ba32:	2355      	movs	r3, #85	@ 0x55
 800ba34:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4a05      	ldr	r2, [pc, #20]	@ (800ba50 <drv_spiTransmitIT+0xbc>)
 800ba3c:	4413      	add	r3, r2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f008 fad6 	bl	8013ff0 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20002280 	.word	0x20002280
 800ba54:	20002120 	.word	0x20002120
 800ba58:	200022c0 	.word	0x200022c0

0800ba5c <drv_spiReceiveIT>:
 */
gos_result_t drv_spiReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	607b      	str	r3, [r7, #4]
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverReceiveResult = GOS_ERROR;
 800ba6e:	23ae      	movs	r3, #174	@ 0xae
 800ba70:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4a28      	ldr	r2, [pc, #160]	@ (800bb18 <drv_spiReceiveIT+0xbc>)
 800ba78:	4413      	add	r3, r2
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f008 f9b1 	bl	8013de4 <gos_mutexLock>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b55      	cmp	r3, #85	@ 0x55
 800ba86:	d13a      	bne.n	800bafe <drv_spiReceiveIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	2258      	movs	r2, #88	@ 0x58
 800ba8c:	fb02 f303 	mul.w	r3, r2, r3
 800ba90:	4a22      	ldr	r2, [pc, #136]	@ (800bb1c <drv_spiReceiveIT+0xc0>)
 800ba92:	4413      	add	r3, r2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fa f975 	bl	8005d84 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Receive_IT(&hspis[instance], pBuffer, size) == HAL_OK)
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	2258      	movs	r2, #88	@ 0x58
 800ba9e:	fb02 f303 	mul.w	r3, r2, r3
 800baa2:	4a1e      	ldr	r2, [pc, #120]	@ (800bb1c <drv_spiReceiveIT+0xc0>)
 800baa4:	4413      	add	r3, r2
 800baa6:	89ba      	ldrh	r2, [r7, #12]
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fa f840 	bl	8005b30 <HAL_SPI_Receive_IT>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d123      	bne.n	800bafe <drv_spiReceiveIT+0xa2>
        {
            if (triggerTmo > 0u)
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01e      	beq.n	800bafa <drv_spiReceiveIT+0x9e>
            {
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800babc:	7bfa      	ldrb	r2, [r7, #15]
 800babe:	4613      	mov	r3, r2
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4a16      	ldr	r2, [pc, #88]	@ (800bb20 <drv_spiReceiveIT+0xc4>)
 800bac8:	4413      	add	r3, r2
 800baca:	6a3a      	ldr	r2, [r7, #32]
 800bacc:	2101      	movs	r1, #1
 800bace:	4618      	mov	r0, r3
 800bad0:	f00a fa84 	bl	8015fdc <gos_triggerWait>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b55      	cmp	r3, #85	@ 0x55
 800bad8:	d111      	bne.n	800bafe <drv_spiReceiveIT+0xa2>
                    gos_triggerReset(&spiRxReadyTriggers[instance])                == GOS_SUCCESS)
 800bada:	7bfa      	ldrb	r2, [r7, #15]
 800badc:	4613      	mov	r3, r2
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4a0e      	ldr	r2, [pc, #56]	@ (800bb20 <drv_spiReceiveIT+0xc4>)
 800bae6:	4413      	add	r3, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f00a fa1f 	bl	8015f2c <gos_triggerReset>
 800baee:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800baf0:	2b55      	cmp	r3, #85	@ 0x55
 800baf2:	d104      	bne.n	800bafe <drv_spiReceiveIT+0xa2>
                {
                    spiDriverReceiveResult = GOS_SUCCESS;
 800baf4:	2355      	movs	r3, #85	@ 0x55
 800baf6:	75fb      	strb	r3, [r7, #23]
 800baf8:	e001      	b.n	800bafe <drv_spiReceiveIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverReceiveResult = GOS_SUCCESS;
 800bafa:	2355      	movs	r3, #85	@ 0x55
 800bafc:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4a05      	ldr	r2, [pc, #20]	@ (800bb18 <drv_spiReceiveIT+0xbc>)
 800bb04:	4413      	add	r3, r2
 800bb06:	4618      	mov	r0, r3
 800bb08:	f008 fa72 	bl	8013ff0 <gos_mutexUnlock>

    return spiDriverReceiveResult;
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	20002280 	.word	0x20002280
 800bb1c:	20002120 	.word	0x20002120
 800bb20:	20002290 	.word	0x20002290

0800bb24 <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b0f      	ldr	r3, [pc, #60]	@ (800bb70 <HAL_SPI_TxCpltCallback+0x4c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d103      	bne.n	800bb40 <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800bb38:	480e      	ldr	r0, [pc, #56]	@ (800bb74 <HAL_SPI_TxCpltCallback+0x50>)
 800bb3a:	f00a faff 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800bb3e:	e012      	b.n	800bb66 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	4b0a      	ldr	r3, [pc, #40]	@ (800bb70 <HAL_SPI_TxCpltCallback+0x4c>)
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d103      	bne.n	800bb54 <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800bb4c:	480a      	ldr	r0, [pc, #40]	@ (800bb78 <HAL_SPI_TxCpltCallback+0x54>)
 800bb4e:	f00a faf5 	bl	801613c <gos_triggerIncrement>
}
 800bb52:	e008      	b.n	800bb66 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	4b05      	ldr	r3, [pc, #20]	@ (800bb70 <HAL_SPI_TxCpltCallback+0x4c>)
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d102      	bne.n	800bb66 <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800bb60:	4806      	ldr	r0, [pc, #24]	@ (800bb7c <HAL_SPI_TxCpltCallback+0x58>)
 800bb62:	f00a faeb 	bl	801613c <gos_triggerIncrement>
}
 800bb66:	bf00      	nop
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	200004d0 	.word	0x200004d0
 800bb74:	200022c0 	.word	0x200022c0
 800bb78:	200022cc 	.word	0x200022cc
 800bb7c:	200022d8 	.word	0x200022d8

0800bb80 <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbcc <HAL_SPI_RxCpltCallback+0x4c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d103      	bne.n	800bb9c <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800bb94:	480e      	ldr	r0, [pc, #56]	@ (800bbd0 <HAL_SPI_RxCpltCallback+0x50>)
 800bb96:	f00a fad1 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800bb9a:	e012      	b.n	800bbc2 <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbcc <HAL_SPI_RxCpltCallback+0x4c>)
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d103      	bne.n	800bbb0 <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800bba8:	480a      	ldr	r0, [pc, #40]	@ (800bbd4 <HAL_SPI_RxCpltCallback+0x54>)
 800bbaa:	f00a fac7 	bl	801613c <gos_triggerIncrement>
}
 800bbae:	e008      	b.n	800bbc2 <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	4b05      	ldr	r3, [pc, #20]	@ (800bbcc <HAL_SPI_RxCpltCallback+0x4c>)
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d102      	bne.n	800bbc2 <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800bbbc:	4806      	ldr	r0, [pc, #24]	@ (800bbd8 <HAL_SPI_RxCpltCallback+0x58>)
 800bbbe:	f00a fabd 	bl	801613c <gos_triggerIncrement>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	200004d0 	.word	0x200004d0
 800bbd0:	20002290 	.word	0x20002290
 800bbd4:	2000229c 	.word	0x2000229c
 800bbd8:	200022a8 	.word	0x200022a8

0800bbdc <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc28 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d103      	bne.n	800bbf8 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800bbf0:	480e      	ldr	r0, [pc, #56]	@ (800bc2c <HAL_SPI_TxRxCpltCallback+0x50>)
 800bbf2:	f00a faa3 	bl	801613c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800bbf6:	e012      	b.n	800bc1e <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800bc28 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d103      	bne.n	800bc0c <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800bc04:	480a      	ldr	r0, [pc, #40]	@ (800bc30 <HAL_SPI_TxRxCpltCallback+0x54>)
 800bc06:	f00a fa99 	bl	801613c <gos_triggerIncrement>
}
 800bc0a:	e008      	b.n	800bc1e <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	4b05      	ldr	r3, [pc, #20]	@ (800bc28 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d102      	bne.n	800bc1e <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800bc18:	4806      	ldr	r0, [pc, #24]	@ (800bc34 <HAL_SPI_TxRxCpltCallback+0x58>)
 800bc1a:	f00a fa8f 	bl	801613c <gos_triggerIncrement>
}
 800bc1e:	bf00      	nop
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	200004d0 	.word	0x200004d0
 800bc2c:	200022f0 	.word	0x200022f0
 800bc30:	200022fc 	.word	0x200022fc
 800bc34:	20002308 	.word	0x20002308

0800bc38 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bc3c:	4b16      	ldr	r3, [pc, #88]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d105      	bne.n	800bc50 <SPI1_IRQHandler+0x18>
 800bc44:	4b15      	ldr	r3, [pc, #84]	@ (800bc9c <SPI1_IRQHandler+0x64>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	4b13      	ldr	r3, [pc, #76]	@ (800bc9c <SPI1_IRQHandler+0x64>)
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	4b11      	ldr	r3, [pc, #68]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	4b0f      	ldr	r3, [pc, #60]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc5a:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 800bc5c:	4810      	ldr	r0, [pc, #64]	@ (800bca0 <SPI1_IRQHandler+0x68>)
 800bc5e:	f7fa f98b 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bc62:	4b0d      	ldr	r3, [pc, #52]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <SPI1_IRQHandler+0x3e>
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	4b09      	ldr	r3, [pc, #36]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <SPI1_IRQHandler+0x60>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <SPI1_IRQHandler+0x5a>
 800bc7e:	4b07      	ldr	r3, [pc, #28]	@ (800bc9c <SPI1_IRQHandler+0x64>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d005      	beq.n	800bc92 <SPI1_IRQHandler+0x5a>
 800bc86:	4b05      	ldr	r3, [pc, #20]	@ (800bc9c <SPI1_IRQHandler+0x64>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	4b03      	ldr	r3, [pc, #12]	@ (800bc9c <SPI1_IRQHandler+0x64>)
 800bc90:	701a      	strb	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20005e46 	.word	0x20005e46
 800bc9c:	20005e45 	.word	0x20005e45
 800bca0:	20002120 	.word	0x20002120

0800bca4 <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bca8:	4b16      	ldr	r3, [pc, #88]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d105      	bne.n	800bcbc <SPI2_IRQHandler+0x18>
 800bcb0:	4b15      	ldr	r3, [pc, #84]	@ (800bd08 <SPI2_IRQHandler+0x64>)
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <SPI2_IRQHandler+0x64>)
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	4b11      	ldr	r3, [pc, #68]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	4b0f      	ldr	r3, [pc, #60]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bcc6:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 800bcc8:	4810      	ldr	r0, [pc, #64]	@ (800bd0c <SPI2_IRQHandler+0x68>)
 800bcca:	f7fa f955 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bcce:	4b0d      	ldr	r3, [pc, #52]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <SPI2_IRQHandler+0x3e>
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	4b09      	ldr	r3, [pc, #36]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	4b08      	ldr	r3, [pc, #32]	@ (800bd04 <SPI2_IRQHandler+0x60>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d109      	bne.n	800bcfe <SPI2_IRQHandler+0x5a>
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <SPI2_IRQHandler+0x64>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d005      	beq.n	800bcfe <SPI2_IRQHandler+0x5a>
 800bcf2:	4b05      	ldr	r3, [pc, #20]	@ (800bd08 <SPI2_IRQHandler+0x64>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b03      	ldr	r3, [pc, #12]	@ (800bd08 <SPI2_IRQHandler+0x64>)
 800bcfc:	701a      	strb	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20005e46 	.word	0x20005e46
 800bd08:	20005e45 	.word	0x20005e45
 800bd0c:	20002178 	.word	0x20002178

0800bd10 <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bd14:	4b16      	ldr	r3, [pc, #88]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d105      	bne.n	800bd28 <SPI3_IRQHandler+0x18>
 800bd1c:	4b15      	ldr	r3, [pc, #84]	@ (800bd74 <SPI3_IRQHandler+0x64>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	3301      	adds	r3, #1
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <SPI3_IRQHandler+0x64>)
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	4b11      	ldr	r3, [pc, #68]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	4b0f      	ldr	r3, [pc, #60]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd32:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 800bd34:	4810      	ldr	r0, [pc, #64]	@ (800bd78 <SPI3_IRQHandler+0x68>)
 800bd36:	f7fa f91f 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <SPI3_IRQHandler+0x3e>
 800bd42:	4b0b      	ldr	r3, [pc, #44]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b09      	ldr	r3, [pc, #36]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <SPI3_IRQHandler+0x60>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <SPI3_IRQHandler+0x5a>
 800bd56:	4b07      	ldr	r3, [pc, #28]	@ (800bd74 <SPI3_IRQHandler+0x64>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d005      	beq.n	800bd6a <SPI3_IRQHandler+0x5a>
 800bd5e:	4b05      	ldr	r3, [pc, #20]	@ (800bd74 <SPI3_IRQHandler+0x64>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	4b03      	ldr	r3, [pc, #12]	@ (800bd74 <SPI3_IRQHandler+0x64>)
 800bd68:	701a      	strb	r2, [r3, #0]
}
 800bd6a:	bf00      	nop
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20005e46 	.word	0x20005e46
 800bd74:	20005e45 	.word	0x20005e45
 800bd78:	200021d0 	.word	0x200021d0

0800bd7c <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bd80:	4b16      	ldr	r3, [pc, #88]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d105      	bne.n	800bd94 <SPI4_IRQHandler+0x18>
 800bd88:	4b15      	ldr	r3, [pc, #84]	@ (800bde0 <SPI4_IRQHandler+0x64>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	4b13      	ldr	r3, [pc, #76]	@ (800bde0 <SPI4_IRQHandler+0x64>)
 800bd92:	701a      	strb	r2, [r3, #0]
 800bd94:	4b11      	ldr	r3, [pc, #68]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bd9e:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 800bda0:	4810      	ldr	r0, [pc, #64]	@ (800bde4 <SPI4_IRQHandler+0x68>)
 800bda2:	f7fa f8e9 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bda6:	4b0d      	ldr	r3, [pc, #52]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d005      	beq.n	800bdba <SPI4_IRQHandler+0x3e>
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	4b09      	ldr	r3, [pc, #36]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	4b08      	ldr	r3, [pc, #32]	@ (800bddc <SPI4_IRQHandler+0x60>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <SPI4_IRQHandler+0x5a>
 800bdc2:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <SPI4_IRQHandler+0x64>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <SPI4_IRQHandler+0x5a>
 800bdca:	4b05      	ldr	r3, [pc, #20]	@ (800bde0 <SPI4_IRQHandler+0x64>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	4b03      	ldr	r3, [pc, #12]	@ (800bde0 <SPI4_IRQHandler+0x64>)
 800bdd4:	701a      	strb	r2, [r3, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20005e46 	.word	0x20005e46
 800bde0:	20005e45 	.word	0x20005e45
 800bde4:	20002228 	.word	0x20002228

0800bde8 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
 800bdfc:	e068      	b.n	800bed0 <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	4a38      	ldr	r2, [pc, #224]	@ (800bee4 <HAL_SPI_MspInit+0xfc>)
 800be02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d15d      	bne.n	800beca <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800be0e:	2300      	movs	r3, #0
 800be10:	73bb      	strb	r3, [r7, #14]
 800be12:	e051      	b.n	800beb8 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 800be14:	7bba      	ldrb	r2, [r7, #14]
 800be16:	4934      	ldr	r1, [pc, #208]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800be18:	4613      	mov	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	1a9b      	subs	r3, r3, r2
 800be1e:	00db      	lsls	r3, r3, #3
 800be20:	440b      	add	r3, r1
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	7bfa      	ldrb	r2, [r7, #15]
 800be26:	429a      	cmp	r2, r3
 800be28:	d143      	bne.n	800beb2 <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 800be2a:	7bba      	ldrb	r2, [r7, #14]
 800be2c:	492e      	ldr	r1, [pc, #184]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800be2e:	4613      	mov	r3, r2
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	440b      	add	r3, r1
 800be38:	3330      	adds	r3, #48	@ 0x30
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d016      	beq.n	800be6e <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 800be40:	7bba      	ldrb	r2, [r7, #14]
 800be42:	4929      	ldr	r1, [pc, #164]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800be44:	4613      	mov	r3, r2
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	1a9b      	subs	r3, r3, r2
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	3330      	adds	r3, #48	@ 0x30
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	1d1a      	adds	r2, r3, #4
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be58:	7bba      	ldrb	r2, [r7, #14]
 800be5a:	4923      	ldr	r1, [pc, #140]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800be5c:	4613      	mov	r3, r2
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	1a9b      	subs	r3, r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	440b      	add	r3, r1
 800be66:	3330      	adds	r3, #48	@ 0x30
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 800be6e:	7bba      	ldrb	r2, [r7, #14]
 800be70:	491d      	ldr	r1, [pc, #116]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800be72:	4613      	mov	r3, r2
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	1a9b      	subs	r3, r3, r2
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	440b      	add	r3, r1
 800be7c:	3334      	adds	r3, #52	@ 0x34
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d016      	beq.n	800beb2 <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 800be84:	7bba      	ldrb	r2, [r7, #14]
 800be86:	4918      	ldr	r1, [pc, #96]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800be88:	4613      	mov	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	1a9b      	subs	r3, r3, r2
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	440b      	add	r3, r1
 800be92:	3334      	adds	r3, #52	@ 0x34
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	1d1a      	adds	r2, r3, #4
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	649a      	str	r2, [r3, #72]	@ 0x48
 800be9c:	7bba      	ldrb	r2, [r7, #14]
 800be9e:	4912      	ldr	r1, [pc, #72]	@ (800bee8 <HAL_SPI_MspInit+0x100>)
 800bea0:	4613      	mov	r3, r2
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	440b      	add	r3, r1
 800beaa:	3334      	adds	r3, #52	@ 0x34
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	3301      	adds	r3, #1
 800beb6:	73bb      	strb	r3, [r7, #14]
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	4a0c      	ldr	r2, [pc, #48]	@ (800beec <HAL_SPI_MspInit+0x104>)
 800bebc:	6812      	ldr	r2, [r2, #0]
 800bebe:	08d2      	lsrs	r2, r2, #3
 800bec0:	490b      	ldr	r1, [pc, #44]	@ (800bef0 <HAL_SPI_MspInit+0x108>)
 800bec2:	fba1 1202 	umull	r1, r2, r1, r2
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d3a4      	bcc.n	800be14 <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800beca:	7bfb      	ldrb	r3, [r7, #15]
 800becc:	3301      	adds	r3, #1
 800bece:	73fb      	strb	r3, [r7, #15]
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d993      	bls.n	800bdfe <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	200004d0 	.word	0x200004d0
 800bee8:	0801a938 	.word	0x0801a938
 800beec:	20000360 	.word	0x20000360
 800bef0:	24924925 	.word	0x24924925

0800bef4 <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af02      	add	r7, sp, #8
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800bf00:	23ae      	movs	r3, #174	@ 0xae
 800bf02:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800bf08:	4b0a      	ldr	r3, [pc, #40]	@ (800bf34 <drv_sysmonTransmit+0x40>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 800bf0e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf38 <drv_sysmonTransmit+0x44>)
 800bf10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bf12:	4b09      	ldr	r3, [pc, #36]	@ (800bf38 <drv_sysmonTransmit+0x44>)
 800bf14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf16:	887a      	ldrh	r2, [r7, #2]
 800bf18:	7bb8      	ldrb	r0, [r7, #14]
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	f000 feae 	bl	800cc80 <drv_uartTransmitIT>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	0801a9ec 	.word	0x0801a9ec
 800bf38:	200003d0 	.word	0x200003d0

0800bf3c <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800bf48:	23ae      	movs	r3, #174	@ 0xae
 800bf4a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800bf50:	4b0a      	ldr	r3, [pc, #40]	@ (800bf7c <drv_sysmonReceive+0x40>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 800bf56:	4b0a      	ldr	r3, [pc, #40]	@ (800bf80 <drv_sysmonReceive+0x44>)
 800bf58:	69d9      	ldr	r1, [r3, #28]
 800bf5a:	4b09      	ldr	r3, [pc, #36]	@ (800bf80 <drv_sysmonReceive+0x44>)
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	887a      	ldrh	r2, [r7, #2]
 800bf60:	7bb8      	ldrb	r0, [r7, #14]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	460b      	mov	r3, r1
 800bf66:	6879      	ldr	r1, [r7, #4]
 800bf68:	f000 fe1a 	bl	800cba0 <drv_uartReceiveDMA>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	0801a9ec 	.word	0x0801a9ec
 800bf80:	200003d0 	.word	0x200003d0

0800bf84 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 800bf8a:	23ae      	movs	r3, #174	@ 0xae
 800bf8c:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800bf92:	4b08      	ldr	r3, [pc, #32]	@ (800bfb4 <drv_systimerStart+0x30>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 800bf98:	79bb      	ldrb	r3, [r7, #6]
 800bf9a:	f04f 31ff 	mov.w	r1, #4294967295
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 f9a2 	bl	800c2e8 <drv_tmrStart>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 800bfa8:	79fb      	ldrb	r3, [r7, #7]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0801a970 	.word	0x0801a970

0800bfb8 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 800bfc0:	23ae      	movs	r3, #174	@ 0xae
 800bfc2:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00f      	beq.n	800bff2 <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bffc <drv_systimerGetValue+0x44>)
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 800bfd8:	f107 0208 	add.w	r2, r7, #8
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
 800bfde:	4611      	mov	r1, r2
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 f9b3 	bl	800c34c <drv_tmrGetValue>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	0801a970 	.word	0x0801a970

0800c000 <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 800c006:	2355      	movs	r3, #85	@ 0x55
 800c008:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 800c00a:	2300      	movs	r3, #0
 800c00c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800c00e:	2300      	movs	r3, #0
 800c010:	71bb      	strb	r3, [r7, #6]
 800c012:	e00e      	b.n	800c032 <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 800c014:	79fb      	ldrb	r3, [r7, #7]
 800c016:	2b55      	cmp	r3, #85	@ 0x55
 800c018:	d106      	bne.n	800c028 <drv_tmrInit+0x28>
 800c01a:	79bb      	ldrb	r3, [r7, #6]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 f81b 	bl	800c058 <drv_tmrInitInstance>
 800c022:	4603      	mov	r3, r0
 800c024:	71fb      	strb	r3, [r7, #7]
 800c026:	e001      	b.n	800c02c <drv_tmrInit+0x2c>
 800c028:	23ae      	movs	r3, #174	@ 0xae
 800c02a:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800c02c:	79bb      	ldrb	r3, [r7, #6]
 800c02e:	3301      	adds	r3, #1
 800c030:	71bb      	strb	r3, [r7, #6]
 800c032:	79ba      	ldrb	r2, [r7, #6]
 800c034:	4b06      	ldr	r3, [pc, #24]	@ (800c050 <drv_tmrInit+0x50>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4906      	ldr	r1, [pc, #24]	@ (800c054 <drv_tmrInit+0x54>)
 800c03a:	fba1 1303 	umull	r1, r3, r1, r3
 800c03e:	091b      	lsrs	r3, r3, #4
 800c040:	429a      	cmp	r2, r3
 800c042:	d3e7      	bcc.n	800c014 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 800c044:	79fb      	ldrb	r3, [r7, #7]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	200003cc 	.word	0x200003cc
 800c054:	4ec4ec4f 	.word	0x4ec4ec4f

0800c058 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	@ 0x28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 800c062:	23ae      	movs	r3, #174	@ 0xae
 800c064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 800c06e:	f107 031c 	add.w	r3, r7, #28
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 800c078:	f107 030c 	add.w	r3, r7, #12
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	605a      	str	r2, [r3, #4]
 800c082:	609a      	str	r2, [r3, #8]
 800c084:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 800c086:	79fa      	ldrb	r2, [r7, #7]
 800c088:	4b90      	ldr	r3, [pc, #576]	@ (800c2cc <drv_tmrInitInstance+0x274>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4990      	ldr	r1, [pc, #576]	@ (800c2d0 <drv_tmrInitInstance+0x278>)
 800c08e:	fba1 1303 	umull	r1, r3, r1, r3
 800c092:	091b      	lsrs	r3, r3, #4
 800c094:	429a      	cmp	r2, r3
 800c096:	f080 8112 	bcs.w	800c2be <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 800c09a:	79fb      	ldrb	r3, [r7, #7]
 800c09c:	4a8d      	ldr	r2, [pc, #564]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c09e:	2134      	movs	r1, #52	@ 0x34
 800c0a0:	fb01 f303 	mul.w	r3, r1, r3
 800c0a4:	4413      	add	r3, r2
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 800c0ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0b4:	4988      	ldr	r1, [pc, #544]	@ (800c2d8 <drv_tmrInitInstance+0x280>)
 800c0b6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c0ba:	4888      	ldr	r0, [pc, #544]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c0bc:	4613      	mov	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	4403      	add	r3, r0
 800c0c6:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 800c0c8:	79fb      	ldrb	r3, [r7, #7]
 800c0ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0ce:	4981      	ldr	r1, [pc, #516]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c0d0:	2034      	movs	r0, #52	@ 0x34
 800c0d2:	fb00 f303 	mul.w	r3, r0, r3
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3318      	adds	r3, #24
 800c0da:	6819      	ldr	r1, [r3, #0]
 800c0dc:	487f      	ldr	r0, [pc, #508]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c0de:	4613      	mov	r3, r2
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	4413      	add	r3, r2
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	4403      	add	r3, r0
 800c0e8:	3318      	adds	r3, #24
 800c0ea:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0f2:	4978      	ldr	r1, [pc, #480]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c0f4:	2034      	movs	r0, #52	@ 0x34
 800c0f6:	fb00 f303 	mul.w	r3, r0, r3
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3314      	adds	r3, #20
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	4876      	ldr	r0, [pc, #472]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c102:	4613      	mov	r3, r2
 800c104:	00db      	lsls	r3, r3, #3
 800c106:	4413      	add	r3, r2
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	4403      	add	r3, r0
 800c10c:	3310      	adds	r3, #16
 800c10e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c116:	496f      	ldr	r1, [pc, #444]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c118:	2034      	movs	r0, #52	@ 0x34
 800c11a:	fb00 f303 	mul.w	r3, r0, r3
 800c11e:	440b      	add	r3, r1
 800c120:	330c      	adds	r3, #12
 800c122:	6819      	ldr	r1, [r3, #0]
 800c124:	486d      	ldr	r0, [pc, #436]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c126:	4613      	mov	r3, r2
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	4413      	add	r3, r2
 800c12c:	00db      	lsls	r3, r3, #3
 800c12e:	4403      	add	r3, r0
 800c130:	3308      	adds	r3, #8
 800c132:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c13a:	4966      	ldr	r1, [pc, #408]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c13c:	2034      	movs	r0, #52	@ 0x34
 800c13e:	fb00 f303 	mul.w	r3, r0, r3
 800c142:	440b      	add	r3, r1
 800c144:	3310      	adds	r3, #16
 800c146:	6819      	ldr	r1, [r3, #0]
 800c148:	4864      	ldr	r0, [pc, #400]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c14a:	4613      	mov	r3, r2
 800c14c:	00db      	lsls	r3, r3, #3
 800c14e:	4413      	add	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	4403      	add	r3, r0
 800c154:	330c      	adds	r3, #12
 800c156:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c15e:	495d      	ldr	r1, [pc, #372]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c160:	2034      	movs	r0, #52	@ 0x34
 800c162:	fb00 f303 	mul.w	r3, r0, r3
 800c166:	440b      	add	r3, r1
 800c168:	3304      	adds	r3, #4
 800c16a:	6819      	ldr	r1, [r3, #0]
 800c16c:	485b      	ldr	r0, [pc, #364]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c16e:	4613      	mov	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	4413      	add	r3, r2
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	4403      	add	r3, r0
 800c178:	3304      	adds	r3, #4
 800c17a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c182:	4954      	ldr	r1, [pc, #336]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c184:	2034      	movs	r0, #52	@ 0x34
 800c186:	fb00 f303 	mul.w	r3, r0, r3
 800c18a:	440b      	add	r3, r1
 800c18c:	3308      	adds	r3, #8
 800c18e:	6819      	ldr	r1, [r3, #0]
 800c190:	4852      	ldr	r0, [pc, #328]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c192:	4613      	mov	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	4413      	add	r3, r2
 800c198:	00db      	lsls	r3, r3, #3
 800c19a:	4403      	add	r3, r0
 800c19c:	3314      	adds	r3, #20
 800c19e:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	4a4c      	ldr	r2, [pc, #304]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c1a4:	2134      	movs	r1, #52	@ 0x34
 800c1a6:	fb01 f303 	mul.w	r3, r1, r3
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3328      	adds	r3, #40	@ 0x28
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	4a47      	ldr	r2, [pc, #284]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c1b6:	2134      	movs	r1, #52	@ 0x34
 800c1b8:	fb01 f303 	mul.w	r3, r1, r3
 800c1bc:	4413      	add	r3, r2
 800c1be:	332c      	adds	r3, #44	@ 0x2c
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 800c1c4:	79fb      	ldrb	r3, [r7, #7]
 800c1c6:	4a43      	ldr	r2, [pc, #268]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c1c8:	2134      	movs	r1, #52	@ 0x34
 800c1ca:	fb01 f303 	mul.w	r3, r1, r3
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3320      	adds	r3, #32
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800c1d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c1da:	4613      	mov	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4a3e      	ldr	r2, [pc, #248]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c1e4:	4413      	add	r3, r2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fa fc84 	bl	8006af4 <HAL_TIM_Base_Init>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d165      	bne.n	800c2be <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800c1f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4a39      	ldr	r2, [pc, #228]	@ (800c2e0 <drv_tmrInitInstance+0x288>)
 800c1fa:	4413      	add	r3, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f007 fdd7 	bl	8013db0 <gos_mutexInit>
 800c202:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800c204:	2b55      	cmp	r3, #85	@ 0x55
 800c206:	d15a      	bne.n	800c2be <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800c208:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c20c:	4613      	mov	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4a33      	ldr	r2, [pc, #204]	@ (800c2e4 <drv_tmrInitInstance+0x28c>)
 800c216:	4413      	add	r3, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f009 fe6b 	bl	8015ef4 <gos_triggerInit>
 800c21e:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800c220:	2b55      	cmp	r3, #85	@ 0x55
 800c222:	d14c      	bne.n	800c2be <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 800c224:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4a2c      	ldr	r2, [pc, #176]	@ (800c2e4 <drv_tmrInitInstance+0x28c>)
 800c232:	4413      	add	r3, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f009 fe79 	bl	8015f2c <gos_triggerReset>
 800c23a:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800c23c:	2b55      	cmp	r3, #85	@ 0x55
 800c23e:	d13e      	bne.n	800c2be <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 800c240:	2355      	movs	r3, #85	@ 0x55
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	4a22      	ldr	r2, [pc, #136]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c24a:	2134      	movs	r1, #52	@ 0x34
 800c24c:	fb01 f303 	mul.w	r3, r1, r3
 800c250:	4413      	add	r3, r2
 800c252:	331c      	adds	r3, #28
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b36      	cmp	r3, #54	@ 0x36
 800c258:	d113      	bne.n	800c282 <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 800c25a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c25e:	4613      	mov	r3, r2
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	4413      	add	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	4a1d      	ldr	r2, [pc, #116]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c268:	4413      	add	r3, r2
 800c26a:	f107 020c 	add.w	r2, r7, #12
 800c26e:	4611      	mov	r1, r2
 800c270:	4618      	mov	r0, r3
 800c272:	f7fa fda0 	bl	8006db6 <HAL_TIM_ConfigClockSource>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 800c27c:	23ae      	movs	r3, #174	@ 0xae
 800c27e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	4a13      	ldr	r2, [pc, #76]	@ (800c2d4 <drv_tmrInitInstance+0x27c>)
 800c286:	2134      	movs	r1, #52	@ 0x34
 800c288:	fb01 f303 	mul.w	r3, r1, r3
 800c28c:	4413      	add	r3, r2
 800c28e:	3324      	adds	r3, #36	@ 0x24
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b36      	cmp	r3, #54	@ 0x36
 800c294:	d113      	bne.n	800c2be <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 800c296:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c29a:	4613      	mov	r3, r2
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	4413      	add	r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	4a0e      	ldr	r2, [pc, #56]	@ (800c2dc <drv_tmrInitInstance+0x284>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f107 021c 	add.w	r2, r7, #28
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fa ffa9 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 800c2b8:	23ae      	movs	r3, #174	@ 0xae
 800c2ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 800c2be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3728      	adds	r7, #40	@ 0x28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200003cc 	.word	0x200003cc
 800c2d0:	4ec4ec4f 	.word	0x4ec4ec4f
 800c2d4:	20000364 	.word	0x20000364
 800c2d8:	200004e0 	.word	0x200004e0
 800c2dc:	20002320 	.word	0x20002320
 800c2e0:	20002710 	.word	0x20002710
 800c2e4:	20002748 	.word	0x20002748

0800c2e8 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	6039      	str	r1, [r7, #0]
 800c2f2:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 800c2f4:	23ae      	movs	r3, #174	@ 0xae
 800c2f6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800c2f8:	79fb      	ldrb	r3, [r7, #7]
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4a11      	ldr	r2, [pc, #68]	@ (800c344 <drv_tmrStart+0x5c>)
 800c2fe:	4413      	add	r3, r2
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	4618      	mov	r0, r3
 800c304:	f007 fd6e 	bl	8013de4 <gos_mutexLock>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b55      	cmp	r3, #85	@ 0x55
 800c30c:	d10e      	bne.n	800c32c <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 800c30e:	79fa      	ldrb	r2, [r7, #7]
 800c310:	4613      	mov	r3, r2
 800c312:	00db      	lsls	r3, r3, #3
 800c314:	4413      	add	r3, r2
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	4a0b      	ldr	r2, [pc, #44]	@ (800c348 <drv_tmrStart+0x60>)
 800c31a:	4413      	add	r3, r2
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fa fc1e 	bl	8006b5e <HAL_TIM_Base_Start>
 800c322:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 800c328:	2355      	movs	r3, #85	@ 0x55
 800c32a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4a04      	ldr	r2, [pc, #16]	@ (800c344 <drv_tmrStart+0x5c>)
 800c332:	4413      	add	r3, r2
 800c334:	4618      	mov	r0, r3
 800c336:	f007 fe5b 	bl	8013ff0 <gos_mutexUnlock>

    return tmrStartResult;
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20002710 	.word	0x20002710
 800c348:	20002320 	.word	0x20002320

0800c34c <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	4603      	mov	r3, r0
 800c354:	6039      	str	r1, [r7, #0]
 800c356:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 800c358:	23ae      	movs	r3, #174	@ 0xae
 800c35a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00c      	beq.n	800c37c <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 800c362:	79fa      	ldrb	r2, [r7, #7]
 800c364:	4909      	ldr	r1, [pc, #36]	@ (800c38c <drv_tmrGetValue+0x40>)
 800c366:	4613      	mov	r3, r2
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	4413      	add	r3, r2
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	440b      	add	r3, r1
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 800c378:	2355      	movs	r3, #85	@ 0x55
 800c37a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	20002320 	.word	0x20002320

0800c390 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d041      	beq.n	800c42a <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
 800c3aa:	e03a      	b.n	800c422 <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	4a21      	ldr	r2, [pc, #132]	@ (800c434 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c3b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d12f      	bne.n	800c41c <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800c3bc:	2300      	movs	r3, #0
 800c3be:	73bb      	strb	r3, [r7, #14]
 800c3c0:	e020      	b.n	800c404 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c438 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c3c6:	2134      	movs	r1, #52	@ 0x34
 800c3c8:	fb01 f303 	mul.w	r3, r1, r3
 800c3cc:	4413      	add	r3, r2
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	7bfa      	ldrb	r2, [r7, #15]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d113      	bne.n	800c3fe <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	4a17      	ldr	r2, [pc, #92]	@ (800c438 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c3da:	2134      	movs	r1, #52	@ 0x34
 800c3dc:	fb01 f303 	mul.w	r3, r1, r3
 800c3e0:	4413      	add	r3, r2
 800c3e2:	3330      	adds	r3, #48	@ 0x30
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d016      	beq.n	800c418 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
 800c3ec:	4a12      	ldr	r2, [pc, #72]	@ (800c438 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c3ee:	2134      	movs	r1, #52	@ 0x34
 800c3f0:	fb01 f303 	mul.w	r3, r1, r3
 800c3f4:	4413      	add	r3, r2
 800c3f6:	3330      	adds	r3, #48	@ 0x30
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 800c3fc:	e00c      	b.n	800c418 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800c3fe:	7bbb      	ldrb	r3, [r7, #14]
 800c400:	3301      	adds	r3, #1
 800c402:	73bb      	strb	r3, [r7, #14]
 800c404:	7bba      	ldrb	r2, [r7, #14]
 800c406:	4b0d      	ldr	r3, [pc, #52]	@ (800c43c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	490d      	ldr	r1, [pc, #52]	@ (800c440 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800c40c:	fba1 1303 	umull	r1, r3, r1, r3
 800c410:	091b      	lsrs	r3, r3, #4
 800c412:	429a      	cmp	r2, r3
 800c414:	d3d5      	bcc.n	800c3c2 <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 800c416:	e008      	b.n	800c42a <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 800c418:	bf00      	nop
                break;
 800c41a:	e006      	b.n	800c42a <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	3301      	adds	r3, #1
 800c420:	73fb      	strb	r3, [r7, #15]
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b0d      	cmp	r3, #13
 800c426:	d9c1      	bls.n	800c3ac <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 800c428:	e7ff      	b.n	800c42a <HAL_TIM_PeriodElapsedCallback+0x9a>
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	200004e0 	.word	0x200004e0
 800c438:	20000364 	.word	0x20000364
 800c43c:	200003cc 	.word	0x200003cc
 800c440:	4ec4ec4f 	.word	0x4ec4ec4f

0800c444 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c448:	4b16      	ldr	r3, [pc, #88]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d105      	bne.n	800c45c <TIM2_IRQHandler+0x18>
 800c450:	4b15      	ldr	r3, [pc, #84]	@ (800c4a8 <TIM2_IRQHandler+0x64>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	3301      	adds	r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	4b13      	ldr	r3, [pc, #76]	@ (800c4a8 <TIM2_IRQHandler+0x64>)
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	4b11      	ldr	r3, [pc, #68]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	b2da      	uxtb	r2, r3
 800c464:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c466:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 800c468:	4810      	ldr	r0, [pc, #64]	@ (800c4ac <TIM2_IRQHandler+0x68>)
 800c46a:	f7fa fb9c 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c46e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d005      	beq.n	800c482 <TIM2_IRQHandler+0x3e>
 800c476:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4b09      	ldr	r3, [pc, #36]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c480:	701a      	strb	r2, [r3, #0]
 800c482:	4b08      	ldr	r3, [pc, #32]	@ (800c4a4 <TIM2_IRQHandler+0x60>)
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <TIM2_IRQHandler+0x5a>
 800c48a:	4b07      	ldr	r3, [pc, #28]	@ (800c4a8 <TIM2_IRQHandler+0x64>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <TIM2_IRQHandler+0x5a>
 800c492:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <TIM2_IRQHandler+0x64>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	3b01      	subs	r3, #1
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b03      	ldr	r3, [pc, #12]	@ (800c4a8 <TIM2_IRQHandler+0x64>)
 800c49c:	701a      	strb	r2, [r3, #0]
}
 800c49e:	bf00      	nop
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20005e46 	.word	0x20005e46
 800c4a8:	20005e45 	.word	0x20005e45
 800c4ac:	20002368 	.word	0x20002368

0800c4b0 <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c4b4:	4b16      	ldr	r3, [pc, #88]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d105      	bne.n	800c4c8 <TIM3_IRQHandler+0x18>
 800c4bc:	4b15      	ldr	r3, [pc, #84]	@ (800c514 <TIM3_IRQHandler+0x64>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	4b13      	ldr	r3, [pc, #76]	@ (800c514 <TIM3_IRQHandler+0x64>)
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	4b11      	ldr	r3, [pc, #68]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4d2:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 800c4d4:	4810      	ldr	r0, [pc, #64]	@ (800c518 <TIM3_IRQHandler+0x68>)
 800c4d6:	f7fa fb66 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c4da:	4b0d      	ldr	r3, [pc, #52]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <TIM3_IRQHandler+0x3e>
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	4b09      	ldr	r3, [pc, #36]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4ec:	701a      	strb	r2, [r3, #0]
 800c4ee:	4b08      	ldr	r3, [pc, #32]	@ (800c510 <TIM3_IRQHandler+0x60>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <TIM3_IRQHandler+0x5a>
 800c4f6:	4b07      	ldr	r3, [pc, #28]	@ (800c514 <TIM3_IRQHandler+0x64>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <TIM3_IRQHandler+0x5a>
 800c4fe:	4b05      	ldr	r3, [pc, #20]	@ (800c514 <TIM3_IRQHandler+0x64>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	3b01      	subs	r3, #1
 800c504:	b2da      	uxtb	r2, r3
 800c506:	4b03      	ldr	r3, [pc, #12]	@ (800c514 <TIM3_IRQHandler+0x64>)
 800c508:	701a      	strb	r2, [r3, #0]
}
 800c50a:	bf00      	nop
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20005e46 	.word	0x20005e46
 800c514:	20005e45 	.word	0x20005e45
 800c518:	200023b0 	.word	0x200023b0

0800c51c <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c520:	4b16      	ldr	r3, [pc, #88]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d105      	bne.n	800c534 <TIM4_IRQHandler+0x18>
 800c528:	4b15      	ldr	r3, [pc, #84]	@ (800c580 <TIM4_IRQHandler+0x64>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	3301      	adds	r3, #1
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	4b13      	ldr	r3, [pc, #76]	@ (800c580 <TIM4_IRQHandler+0x64>)
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	4b11      	ldr	r3, [pc, #68]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	3301      	adds	r3, #1
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	4b0f      	ldr	r3, [pc, #60]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c53e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 800c540:	4810      	ldr	r0, [pc, #64]	@ (800c584 <TIM4_IRQHandler+0x68>)
 800c542:	f7fa fb30 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c546:	4b0d      	ldr	r3, [pc, #52]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d005      	beq.n	800c55a <TIM4_IRQHandler+0x3e>
 800c54e:	4b0b      	ldr	r3, [pc, #44]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	3b01      	subs	r3, #1
 800c554:	b2da      	uxtb	r2, r3
 800c556:	4b09      	ldr	r3, [pc, #36]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c558:	701a      	strb	r2, [r3, #0]
 800c55a:	4b08      	ldr	r3, [pc, #32]	@ (800c57c <TIM4_IRQHandler+0x60>)
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d109      	bne.n	800c576 <TIM4_IRQHandler+0x5a>
 800c562:	4b07      	ldr	r3, [pc, #28]	@ (800c580 <TIM4_IRQHandler+0x64>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <TIM4_IRQHandler+0x5a>
 800c56a:	4b05      	ldr	r3, [pc, #20]	@ (800c580 <TIM4_IRQHandler+0x64>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	3b01      	subs	r3, #1
 800c570:	b2da      	uxtb	r2, r3
 800c572:	4b03      	ldr	r3, [pc, #12]	@ (800c580 <TIM4_IRQHandler+0x64>)
 800c574:	701a      	strb	r2, [r3, #0]
}
 800c576:	bf00      	nop
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	20005e46 	.word	0x20005e46
 800c580:	20005e45 	.word	0x20005e45
 800c584:	200023f8 	.word	0x200023f8

0800c588 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c58c:	4b16      	ldr	r3, [pc, #88]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <TIM5_IRQHandler+0x18>
 800c594:	4b15      	ldr	r3, [pc, #84]	@ (800c5ec <TIM5_IRQHandler+0x64>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	3301      	adds	r3, #1
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	4b13      	ldr	r3, [pc, #76]	@ (800c5ec <TIM5_IRQHandler+0x64>)
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	4b11      	ldr	r3, [pc, #68]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c5aa:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 800c5ac:	4810      	ldr	r0, [pc, #64]	@ (800c5f0 <TIM5_IRQHandler+0x68>)
 800c5ae:	f7fa fafa 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d005      	beq.n	800c5c6 <TIM5_IRQHandler+0x3e>
 800c5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	4b09      	ldr	r3, [pc, #36]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	4b08      	ldr	r3, [pc, #32]	@ (800c5e8 <TIM5_IRQHandler+0x60>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d109      	bne.n	800c5e2 <TIM5_IRQHandler+0x5a>
 800c5ce:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <TIM5_IRQHandler+0x64>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d005      	beq.n	800c5e2 <TIM5_IRQHandler+0x5a>
 800c5d6:	4b05      	ldr	r3, [pc, #20]	@ (800c5ec <TIM5_IRQHandler+0x64>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	4b03      	ldr	r3, [pc, #12]	@ (800c5ec <TIM5_IRQHandler+0x64>)
 800c5e0:	701a      	strb	r2, [r3, #0]
}
 800c5e2:	bf00      	nop
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20005e46 	.word	0x20005e46
 800c5ec:	20005e45 	.word	0x20005e45
 800c5f0:	20002440 	.word	0x20002440

0800c5f4 <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c5f8:	4b16      	ldr	r3, [pc, #88]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d105      	bne.n	800c60c <TIM7_IRQHandler+0x18>
 800c600:	4b15      	ldr	r3, [pc, #84]	@ (800c658 <TIM7_IRQHandler+0x64>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	3301      	adds	r3, #1
 800c606:	b2da      	uxtb	r2, r3
 800c608:	4b13      	ldr	r3, [pc, #76]	@ (800c658 <TIM7_IRQHandler+0x64>)
 800c60a:	701a      	strb	r2, [r3, #0]
 800c60c:	4b11      	ldr	r3, [pc, #68]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	3301      	adds	r3, #1
 800c612:	b2da      	uxtb	r2, r3
 800c614:	4b0f      	ldr	r3, [pc, #60]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c616:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 800c618:	4810      	ldr	r0, [pc, #64]	@ (800c65c <TIM7_IRQHandler+0x68>)
 800c61a:	f7fa fac4 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c61e:	4b0d      	ldr	r3, [pc, #52]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d005      	beq.n	800c632 <TIM7_IRQHandler+0x3e>
 800c626:	4b0b      	ldr	r3, [pc, #44]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	4b09      	ldr	r3, [pc, #36]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c630:	701a      	strb	r2, [r3, #0]
 800c632:	4b08      	ldr	r3, [pc, #32]	@ (800c654 <TIM7_IRQHandler+0x60>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d109      	bne.n	800c64e <TIM7_IRQHandler+0x5a>
 800c63a:	4b07      	ldr	r3, [pc, #28]	@ (800c658 <TIM7_IRQHandler+0x64>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <TIM7_IRQHandler+0x5a>
 800c642:	4b05      	ldr	r3, [pc, #20]	@ (800c658 <TIM7_IRQHandler+0x64>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	3b01      	subs	r3, #1
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	4b03      	ldr	r3, [pc, #12]	@ (800c658 <TIM7_IRQHandler+0x64>)
 800c64c:	701a      	strb	r2, [r3, #0]
}
 800c64e:	bf00      	nop
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20005e46 	.word	0x20005e46
 800c658:	20005e45 	.word	0x20005e45
 800c65c:	200024d0 	.word	0x200024d0

0800c660 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800c668:	23ae      	movs	r3, #174	@ 0xae
 800c66a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800c670:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <drv_traceTransmitUnsafe+0x3c>)
 800c672:	789b      	ldrb	r3, [r3, #2]
 800c674:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7f3 fe1a 	bl	80002b0 <strlen>
 800c67c:	4603      	mov	r3, r0
 800c67e:	b29a      	uxth	r2, r3
 800c680:	4b07      	ldr	r3, [pc, #28]	@ (800c6a0 <drv_traceTransmitUnsafe+0x40>)
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	7bb8      	ldrb	r0, [r7, #14]
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	f000 f982 	bl	800c990 <drv_uartTransmitBlocking>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800c690:	7bfb      	ldrb	r3, [r7, #15]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	0801a9ec 	.word	0x0801a9ec
 800c6a0:	200003d0 	.word	0x200003d0

0800c6a4 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af02      	add	r7, sp, #8
 800c6aa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800c6ac:	23ae      	movs	r3, #174	@ 0xae
 800c6ae:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e8 <drv_traceTransmit+0x44>)
 800c6b6:	789b      	ldrb	r3, [r3, #2]
 800c6b8:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7f3 fdf8 	bl	80002b0 <strlen>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	4b09      	ldr	r3, [pc, #36]	@ (800c6ec <drv_traceTransmit+0x48>)
 800c6c6:	6819      	ldr	r1, [r3, #0]
 800c6c8:	4b08      	ldr	r3, [pc, #32]	@ (800c6ec <drv_traceTransmit+0x48>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	7bb8      	ldrb	r0, [r7, #14]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	6879      	ldr	r1, [r7, #4]
 800c6d4:	f000 f9f4 	bl	800cac0 <drv_uartTransmitDMA>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	0801a9ec 	.word	0x0801a9ec
 800c6ec:	200003d0 	.word	0x200003d0

0800c6f0 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 800c6f6:	2355      	movs	r3, #85	@ 0x55
 800c6f8:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800c6fe:	2300      	movs	r3, #0
 800c700:	71bb      	strb	r3, [r7, #6]
 800c702:	e00e      	b.n	800c722 <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	2b55      	cmp	r3, #85	@ 0x55
 800c708:	d106      	bne.n	800c718 <drv_uartInit+0x28>
 800c70a:	79bb      	ldrb	r3, [r7, #6]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 f81b 	bl	800c748 <drv_uartInitInstance>
 800c712:	4603      	mov	r3, r0
 800c714:	71fb      	strb	r3, [r7, #7]
 800c716:	e001      	b.n	800c71c <drv_uartInit+0x2c>
 800c718:	23ae      	movs	r3, #174	@ 0xae
 800c71a:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800c71c:	79bb      	ldrb	r3, [r7, #6]
 800c71e:	3301      	adds	r3, #1
 800c720:	71bb      	strb	r3, [r7, #6]
 800c722:	79ba      	ldrb	r2, [r7, #6]
 800c724:	4b06      	ldr	r3, [pc, #24]	@ (800c740 <drv_uartInit+0x50>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4906      	ldr	r1, [pc, #24]	@ (800c744 <drv_uartInit+0x54>)
 800c72a:	fba1 1303 	umull	r1, r3, r1, r3
 800c72e:	095b      	lsrs	r3, r3, #5
 800c730:	429a      	cmp	r2, r3
 800c732:	d3e7      	bcc.n	800c704 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 800c734:	79fb      	ldrb	r3, [r7, #7]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	200003fc 	.word	0x200003fc
 800c744:	cccccccd 	.word	0xcccccccd

0800c748 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	4603      	mov	r3, r0
 800c750:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 800c752:	23ae      	movs	r3, #174	@ 0xae
 800c754:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 800c756:	2300      	movs	r3, #0
 800c758:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 800c75a:	79fa      	ldrb	r2, [r7, #7]
 800c75c:	4b82      	ldr	r3, [pc, #520]	@ (800c968 <drv_uartInitInstance+0x220>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4982      	ldr	r1, [pc, #520]	@ (800c96c <drv_uartInitInstance+0x224>)
 800c762:	fba1 1303 	umull	r1, r3, r1, r3
 800c766:	095b      	lsrs	r3, r3, #5
 800c768:	429a      	cmp	r2, r3
 800c76a:	f080 80f2 	bcs.w	800c952 <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 800c76e:	79fa      	ldrb	r2, [r7, #7]
 800c770:	497f      	ldr	r1, [pc, #508]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	440b      	add	r3, r1
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 800c780:	7bbb      	ldrb	r3, [r7, #14]
 800c782:	7bba      	ldrb	r2, [r7, #14]
 800c784:	497b      	ldr	r1, [pc, #492]	@ (800c974 <drv_uartInitInstance+0x22c>)
 800c786:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c78a:	487b      	ldr	r0, [pc, #492]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c78c:	4613      	mov	r3, r2
 800c78e:	011b      	lsls	r3, r3, #4
 800c790:	4413      	add	r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4403      	add	r3, r0
 800c796:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 800c798:	79f9      	ldrb	r1, [r7, #7]
 800c79a:	7bba      	ldrb	r2, [r7, #14]
 800c79c:	4874      	ldr	r0, [pc, #464]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c79e:	460b      	mov	r3, r1
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	440b      	add	r3, r1
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	4403      	add	r3, r0
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	6819      	ldr	r1, [r3, #0]
 800c7ac:	4872      	ldr	r0, [pc, #456]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	011b      	lsls	r3, r3, #4
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4403      	add	r3, r0
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 800c7bc:	79f9      	ldrb	r1, [r7, #7]
 800c7be:	7bba      	ldrb	r2, [r7, #14]
 800c7c0:	486b      	ldr	r0, [pc, #428]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	440b      	add	r3, r1
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	4403      	add	r3, r0
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	6819      	ldr	r1, [r3, #0]
 800c7d0:	4869      	ldr	r0, [pc, #420]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	011b      	lsls	r3, r3, #4
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4403      	add	r3, r0
 800c7dc:	3308      	adds	r3, #8
 800c7de:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 800c7e0:	79f9      	ldrb	r1, [r7, #7]
 800c7e2:	7bba      	ldrb	r2, [r7, #14]
 800c7e4:	4862      	ldr	r0, [pc, #392]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	440b      	add	r3, r1
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	4403      	add	r3, r0
 800c7f0:	330c      	adds	r3, #12
 800c7f2:	6819      	ldr	r1, [r3, #0]
 800c7f4:	4860      	ldr	r0, [pc, #384]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	4413      	add	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4403      	add	r3, r0
 800c800:	330c      	adds	r3, #12
 800c802:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 800c804:	79f9      	ldrb	r1, [r7, #7]
 800c806:	7bba      	ldrb	r2, [r7, #14]
 800c808:	4859      	ldr	r0, [pc, #356]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c80a:	460b      	mov	r3, r1
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	440b      	add	r3, r1
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	4403      	add	r3, r0
 800c814:	3310      	adds	r3, #16
 800c816:	6819      	ldr	r1, [r3, #0]
 800c818:	4857      	ldr	r0, [pc, #348]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c81a:	4613      	mov	r3, r2
 800c81c:	011b      	lsls	r3, r3, #4
 800c81e:	4413      	add	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4403      	add	r3, r0
 800c824:	3310      	adds	r3, #16
 800c826:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 800c828:	79f9      	ldrb	r1, [r7, #7]
 800c82a:	7bba      	ldrb	r2, [r7, #14]
 800c82c:	4850      	ldr	r0, [pc, #320]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c82e:	460b      	mov	r3, r1
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	440b      	add	r3, r1
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	4403      	add	r3, r0
 800c838:	3314      	adds	r3, #20
 800c83a:	6819      	ldr	r1, [r3, #0]
 800c83c:	484e      	ldr	r0, [pc, #312]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c83e:	4613      	mov	r3, r2
 800c840:	011b      	lsls	r3, r3, #4
 800c842:	4413      	add	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4403      	add	r3, r0
 800c848:	3314      	adds	r3, #20
 800c84a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 800c84c:	79f9      	ldrb	r1, [r7, #7]
 800c84e:	7bba      	ldrb	r2, [r7, #14]
 800c850:	4847      	ldr	r0, [pc, #284]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c852:	460b      	mov	r3, r1
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	440b      	add	r3, r1
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	4403      	add	r3, r0
 800c85c:	3318      	adds	r3, #24
 800c85e:	6819      	ldr	r1, [r3, #0]
 800c860:	4845      	ldr	r0, [pc, #276]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c862:	4613      	mov	r3, r2
 800c864:	011b      	lsls	r3, r3, #4
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4403      	add	r3, r0
 800c86c:	3318      	adds	r3, #24
 800c86e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 800c870:	79f9      	ldrb	r1, [r7, #7]
 800c872:	7bba      	ldrb	r2, [r7, #14]
 800c874:	483e      	ldr	r0, [pc, #248]	@ (800c970 <drv_uartInitInstance+0x228>)
 800c876:	460b      	mov	r3, r1
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	440b      	add	r3, r1
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	4403      	add	r3, r0
 800c880:	331c      	adds	r3, #28
 800c882:	6819      	ldr	r1, [r3, #0]
 800c884:	483c      	ldr	r0, [pc, #240]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c886:	4613      	mov	r3, r2
 800c888:	011b      	lsls	r3, r3, #4
 800c88a:	4413      	add	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4403      	add	r3, r0
 800c890:	331c      	adds	r3, #28
 800c892:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800c894:	7bba      	ldrb	r2, [r7, #14]
 800c896:	4613      	mov	r3, r2
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4a36      	ldr	r2, [pc, #216]	@ (800c978 <drv_uartInitInstance+0x230>)
 800c8a0:	4413      	add	r3, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fa fd3e 	bl	8007324 <HAL_UART_Init>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d14a      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4a32      	ldr	r2, [pc, #200]	@ (800c97c <drv_uartInitInstance+0x234>)
 800c8b4:	4413      	add	r3, r2
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f007 fa7a 	bl	8013db0 <gos_mutexInit>
 800c8bc:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800c8be:	2b55      	cmp	r3, #85	@ 0x55
 800c8c0:	d140      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800c8c2:	7bbb      	ldrb	r3, [r7, #14]
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4a2e      	ldr	r2, [pc, #184]	@ (800c980 <drv_uartInitInstance+0x238>)
 800c8c8:	4413      	add	r3, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f007 fa70 	bl	8013db0 <gos_mutexInit>
 800c8d0:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800c8d2:	2b55      	cmp	r3, #85	@ 0x55
 800c8d4:	d136      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c8d6:	7bba      	ldrb	r2, [r7, #14]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	4413      	add	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4a28      	ldr	r2, [pc, #160]	@ (800c984 <drv_uartInitInstance+0x23c>)
 800c8e2:	4413      	add	r3, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f009 fb05 	bl	8015ef4 <gos_triggerInit>
 800c8ea:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800c8ec:	2b55      	cmp	r3, #85	@ 0x55
 800c8ee:	d129      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c8f0:	7bba      	ldrb	r2, [r7, #14]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4a23      	ldr	r2, [pc, #140]	@ (800c988 <drv_uartInitInstance+0x240>)
 800c8fc:	4413      	add	r3, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f009 faf8 	bl	8015ef4 <gos_triggerInit>
 800c904:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c906:	2b55      	cmp	r3, #85	@ 0x55
 800c908:	d11c      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c90a:	7bba      	ldrb	r2, [r7, #14]
 800c90c:	4613      	mov	r3, r2
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4a1b      	ldr	r2, [pc, #108]	@ (800c984 <drv_uartInitInstance+0x23c>)
 800c916:	4413      	add	r3, r2
 800c918:	4618      	mov	r0, r3
 800c91a:	f009 fb07 	bl	8015f2c <gos_triggerReset>
 800c91e:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c920:	2b55      	cmp	r3, #85	@ 0x55
 800c922:	d10f      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 800c924:	7bba      	ldrb	r2, [r7, #14]
 800c926:	4613      	mov	r3, r2
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	4413      	add	r3, r2
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	4a16      	ldr	r2, [pc, #88]	@ (800c988 <drv_uartInitInstance+0x240>)
 800c930:	4413      	add	r3, r2
 800c932:	4618      	mov	r0, r3
 800c934:	f009 fafa 	bl	8015f2c <gos_triggerReset>
 800c938:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c93a:	2b55      	cmp	r3, #85	@ 0x55
 800c93c:	d102      	bne.n	800c944 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 800c93e:	2355      	movs	r3, #85	@ 0x55
 800c940:	73fb      	strb	r3, [r7, #15]
 800c942:	e00c      	b.n	800c95e <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 800c944:	4b11      	ldr	r3, [pc, #68]	@ (800c98c <drv_uartInitInstance+0x244>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f043 0304 	orr.w	r3, r3, #4
 800c94c:	4a0f      	ldr	r2, [pc, #60]	@ (800c98c <drv_uartInitInstance+0x244>)
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	e005      	b.n	800c95e <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 800c952:	4b0e      	ldr	r3, [pc, #56]	@ (800c98c <drv_uartInitInstance+0x244>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f043 0302 	orr.w	r3, r3, #2
 800c95a:	4a0c      	ldr	r2, [pc, #48]	@ (800c98c <drv_uartInitInstance+0x244>)
 800c95c:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	200003fc 	.word	0x200003fc
 800c96c:	cccccccd 	.word	0xcccccccd
 800c970:	0801a974 	.word	0x0801a974
 800c974:	20000518 	.word	0x20000518
 800c978:	200027f4 	.word	0x200027f4
 800c97c:	2000298c 	.word	0x2000298c
 800c980:	200029a4 	.word	0x200029a4
 800c984:	200029bc 	.word	0x200029bc
 800c988:	20002a04 	.word	0x20002a04
 800c98c:	200027f0 	.word	0x200027f0

0800c990 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60b9      	str	r1, [r7, #8]
 800c998:	607b      	str	r3, [r7, #4]
 800c99a:	4603      	mov	r3, r0
 800c99c:	73fb      	strb	r3, [r7, #15]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800c9a2:	23ae      	movs	r3, #174	@ 0xae
 800c9a4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800c9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800ca1c <drv_uartTransmitBlocking+0x8c>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	4b1b      	ldr	r3, [pc, #108]	@ (800ca1c <drv_uartTransmitBlocking+0x8c>)
 800c9b0:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800c9b2:	7bfa      	ldrb	r2, [r7, #15]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	011b      	lsls	r3, r3, #4
 800c9b8:	4413      	add	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4a18      	ldr	r2, [pc, #96]	@ (800ca20 <drv_uartTransmitBlocking+0x90>)
 800c9be:	4413      	add	r3, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fa ff53 	bl	800786c <HAL_UART_Abort>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d111      	bne.n	800c9f0 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 800c9cc:	7bfa      	ldrb	r2, [r7, #15]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	4413      	add	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4a12      	ldr	r2, [pc, #72]	@ (800ca20 <drv_uartTransmitBlocking+0x90>)
 800c9d8:	1898      	adds	r0, r3, r2
 800c9da:	89ba      	ldrh	r2, [r7, #12]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	f7fa fced 	bl	80073be <HAL_UART_Transmit>
 800c9e4:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d102      	bne.n	800c9f0 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 800c9ea:	2355      	movs	r3, #85	@ 0x55
 800c9ec:	75fb      	strb	r3, [r7, #23]
 800c9ee:	e005      	b.n	800c9fc <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 800c9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800ca24 <drv_uartTransmitBlocking+0x94>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f043 0310 	orr.w	r3, r3, #16
 800c9f8:	4a0a      	ldr	r2, [pc, #40]	@ (800ca24 <drv_uartTransmitBlocking+0x94>)
 800c9fa:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800c9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ca1c <drv_uartTransmitBlocking+0x8c>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d005      	beq.n	800ca10 <drv_uartTransmitBlocking+0x80>
 800ca04:	4b05      	ldr	r3, [pc, #20]	@ (800ca1c <drv_uartTransmitBlocking+0x8c>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	4b03      	ldr	r3, [pc, #12]	@ (800ca1c <drv_uartTransmitBlocking+0x8c>)
 800ca0e:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20005e45 	.word	0x20005e45
 800ca20:	200027f4 	.word	0x200027f4
 800ca24:	200027f0 	.word	0x200027f0

0800ca28 <drv_uartReceiveBlocking>:
 */
GOS_INLINE gos_result_t drv_uartReceiveBlocking (
        drv_uartPeriphInstance_t instance, u8_t* pData,
        u16_t                    size,     u32_t timeout
        )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	4603      	mov	r3, r0
 800ca34:	73fb      	strb	r3, [r7, #15]
 800ca36:	4613      	mov	r3, r2
 800ca38:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800ca3a:	23ae      	movs	r3, #174	@ 0xae
 800ca3c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800ca3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cab4 <drv_uartReceiveBlocking+0x8c>)
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	3301      	adds	r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	4b1b      	ldr	r3, [pc, #108]	@ (800cab4 <drv_uartReceiveBlocking+0x8c>)
 800ca48:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800ca4a:	7bfa      	ldrb	r2, [r7, #15]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	4413      	add	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4a18      	ldr	r2, [pc, #96]	@ (800cab8 <drv_uartReceiveBlocking+0x90>)
 800ca56:	4413      	add	r3, r2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fa ff07 	bl	800786c <HAL_UART_Abort>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d111      	bne.n	800ca88 <drv_uartReceiveBlocking+0x60>
    	HAL_UART_Receive(&huarts[instance], pData, size, timeout) == HAL_OK)
 800ca64:	7bfa      	ldrb	r2, [r7, #15]
 800ca66:	4613      	mov	r3, r2
 800ca68:	011b      	lsls	r3, r3, #4
 800ca6a:	4413      	add	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4a12      	ldr	r2, [pc, #72]	@ (800cab8 <drv_uartReceiveBlocking+0x90>)
 800ca70:	1898      	adds	r0, r3, r2
 800ca72:	89ba      	ldrh	r2, [r7, #12]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68b9      	ldr	r1, [r7, #8]
 800ca78:	f7fa fd33 	bl	80074e2 <HAL_UART_Receive>
 800ca7c:	4603      	mov	r3, r0
    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d102      	bne.n	800ca88 <drv_uartReceiveBlocking+0x60>
    {
    	uartReceiveResult = GOS_SUCCESS;
 800ca82:	2355      	movs	r3, #85	@ 0x55
 800ca84:	75fb      	strb	r3, [r7, #23]
 800ca86:	e005      	b.n	800ca94 <drv_uartReceiveBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_BLOCKING);
 800ca88:	4b0c      	ldr	r3, [pc, #48]	@ (800cabc <drv_uartReceiveBlocking+0x94>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca90:	4a0a      	ldr	r2, [pc, #40]	@ (800cabc <drv_uartReceiveBlocking+0x94>)
 800ca92:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800ca94:	4b07      	ldr	r3, [pc, #28]	@ (800cab4 <drv_uartReceiveBlocking+0x8c>)
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <drv_uartReceiveBlocking+0x80>
 800ca9c:	4b05      	ldr	r3, [pc, #20]	@ (800cab4 <drv_uartReceiveBlocking+0x8c>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	4b03      	ldr	r3, [pc, #12]	@ (800cab4 <drv_uartReceiveBlocking+0x8c>)
 800caa6:	701a      	strb	r2, [r3, #0]

    return uartReceiveResult;
 800caa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20005e45 	.word	0x20005e45
 800cab8:	200027f4 	.word	0x200027f4
 800cabc:	200027f0 	.word	0x200027f0

0800cac0 <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607b      	str	r3, [r7, #4]
 800caca:	4603      	mov	r3, r0
 800cacc:	73fb      	strb	r3, [r7, #15]
 800cace:	4613      	mov	r3, r2
 800cad0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800cad2:	23ae      	movs	r3, #174	@ 0xae
 800cad4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4a2d      	ldr	r2, [pc, #180]	@ (800cb90 <drv_uartTransmitDMA+0xd0>)
 800cadc:	4413      	add	r3, r2
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f007 f97f 	bl	8013de4 <gos_mutexLock>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b55      	cmp	r3, #85	@ 0x55
 800caea:	d13e      	bne.n	800cb6a <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800caec:	7bfa      	ldrb	r2, [r7, #15]
 800caee:	4613      	mov	r3, r2
 800caf0:	011b      	lsls	r3, r3, #4
 800caf2:	4413      	add	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4a27      	ldr	r2, [pc, #156]	@ (800cb94 <drv_uartTransmitDMA+0xd4>)
 800caf8:	4413      	add	r3, r2
 800cafa:	89ba      	ldrh	r2, [r7, #12]
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fa fe06 	bl	8007710 <HAL_UART_Transmit_DMA>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d11e      	bne.n	800cb48 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cb0a:	7bfa      	ldrb	r2, [r7, #15]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4a20      	ldr	r2, [pc, #128]	@ (800cb98 <drv_uartTransmitDMA+0xd8>)
 800cb16:	4413      	add	r3, r2
 800cb18:	6a3a      	ldr	r2, [r7, #32]
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f009 fa5d 	bl	8015fdc <gos_triggerWait>
 800cb22:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800cb24:	2b55      	cmp	r3, #85	@ 0x55
 800cb26:	d10f      	bne.n	800cb48 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800cb28:	7bfa      	ldrb	r2, [r7, #15]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	005b      	lsls	r3, r3, #1
 800cb2e:	4413      	add	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4a19      	ldr	r2, [pc, #100]	@ (800cb98 <drv_uartTransmitDMA+0xd8>)
 800cb34:	4413      	add	r3, r2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f009 f9f8 	bl	8015f2c <gos_triggerReset>
 800cb3c:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cb3e:	2b55      	cmp	r3, #85	@ 0x55
 800cb40:	d102      	bne.n	800cb48 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800cb42:	2355      	movs	r3, #85	@ 0x55
 800cb44:	75fb      	strb	r3, [r7, #23]
 800cb46:	e016      	b.n	800cb76 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cb48:	7bfa      	ldrb	r2, [r7, #15]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	4413      	add	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4a10      	ldr	r2, [pc, #64]	@ (800cb94 <drv_uartTransmitDMA+0xd4>)
 800cb54:	4413      	add	r3, r2
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fa ff74 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb9c <drv_uartTransmitDMA+0xdc>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb64:	4a0d      	ldr	r2, [pc, #52]	@ (800cb9c <drv_uartTransmitDMA+0xdc>)
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	e005      	b.n	800cb76 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 800cb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb9c <drv_uartTransmitDMA+0xdc>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f043 0320 	orr.w	r3, r3, #32
 800cb72:	4a0a      	ldr	r2, [pc, #40]	@ (800cb9c <drv_uartTransmitDMA+0xdc>)
 800cb74:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4a05      	ldr	r2, [pc, #20]	@ (800cb90 <drv_uartTransmitDMA+0xd0>)
 800cb7c:	4413      	add	r3, r2
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f007 fa36 	bl	8013ff0 <gos_mutexUnlock>

    return uartTransmitResult;
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	200029a4 	.word	0x200029a4
 800cb94:	200027f4 	.word	0x200027f4
 800cb98:	20002a04 	.word	0x20002a04
 800cb9c:	200027f0 	.word	0x200027f0

0800cba0 <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60b9      	str	r1, [r7, #8]
 800cba8:	607b      	str	r3, [r7, #4]
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800cbb2:	23ae      	movs	r3, #174	@ 0xae
 800cbb4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4a2d      	ldr	r2, [pc, #180]	@ (800cc70 <drv_uartReceiveDMA+0xd0>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f007 f90f 	bl	8013de4 <gos_mutexLock>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b55      	cmp	r3, #85	@ 0x55
 800cbca:	d13e      	bne.n	800cc4a <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800cbcc:	7bfa      	ldrb	r2, [r7, #15]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	4413      	add	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4a27      	ldr	r2, [pc, #156]	@ (800cc74 <drv_uartReceiveDMA+0xd4>)
 800cbd8:	4413      	add	r3, r2
 800cbda:	89ba      	ldrh	r2, [r7, #12]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fa fe14 	bl	800780c <HAL_UART_Receive_DMA>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d11e      	bne.n	800cc28 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cbea:	7bfa      	ldrb	r2, [r7, #15]
 800cbec:	4613      	mov	r3, r2
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4a20      	ldr	r2, [pc, #128]	@ (800cc78 <drv_uartReceiveDMA+0xd8>)
 800cbf6:	4413      	add	r3, r2
 800cbf8:	6a3a      	ldr	r2, [r7, #32]
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f009 f9ed 	bl	8015fdc <gos_triggerWait>
 800cc02:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800cc04:	2b55      	cmp	r3, #85	@ 0x55
 800cc06:	d10f      	bne.n	800cc28 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800cc08:	7bfa      	ldrb	r2, [r7, #15]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4a19      	ldr	r2, [pc, #100]	@ (800cc78 <drv_uartReceiveDMA+0xd8>)
 800cc14:	4413      	add	r3, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f009 f988 	bl	8015f2c <gos_triggerReset>
 800cc1c:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cc1e:	2b55      	cmp	r3, #85	@ 0x55
 800cc20:	d102      	bne.n	800cc28 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 800cc22:	2355      	movs	r3, #85	@ 0x55
 800cc24:	75fb      	strb	r3, [r7, #23]
 800cc26:	e016      	b.n	800cc56 <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cc28:	7bfa      	ldrb	r2, [r7, #15]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	011b      	lsls	r3, r3, #4
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4a10      	ldr	r2, [pc, #64]	@ (800cc74 <drv_uartReceiveDMA+0xd4>)
 800cc34:	4413      	add	r3, r2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fa ff04 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc7c <drv_uartReceiveDMA+0xdc>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cc44:	4a0d      	ldr	r2, [pc, #52]	@ (800cc7c <drv_uartReceiveDMA+0xdc>)
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	e005      	b.n	800cc56 <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 800cc4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc7c <drv_uartReceiveDMA+0xdc>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc52:	4a0a      	ldr	r2, [pc, #40]	@ (800cc7c <drv_uartReceiveDMA+0xdc>)
 800cc54:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4a05      	ldr	r2, [pc, #20]	@ (800cc70 <drv_uartReceiveDMA+0xd0>)
 800cc5c:	4413      	add	r3, r2
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f007 f9c6 	bl	8013ff0 <gos_mutexUnlock>

    return uartReceiveResult;
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	2000298c 	.word	0x2000298c
 800cc74:	200027f4 	.word	0x200027f4
 800cc78:	200029bc 	.word	0x200029bc
 800cc7c:	200027f0 	.word	0x200027f0

0800cc80 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60b9      	str	r1, [r7, #8]
 800cc88:	607b      	str	r3, [r7, #4]
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	73fb      	strb	r3, [r7, #15]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800cc92:	23ae      	movs	r3, #174	@ 0xae
 800cc94:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4a2d      	ldr	r2, [pc, #180]	@ (800cd50 <drv_uartTransmitIT+0xd0>)
 800cc9c:	4413      	add	r3, r2
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f007 f89f 	bl	8013de4 <gos_mutexLock>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b55      	cmp	r3, #85	@ 0x55
 800ccaa:	d13e      	bne.n	800cd2a <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800ccac:	7bfa      	ldrb	r2, [r7, #15]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	011b      	lsls	r3, r3, #4
 800ccb2:	4413      	add	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4a27      	ldr	r2, [pc, #156]	@ (800cd54 <drv_uartTransmitIT+0xd4>)
 800ccb8:	4413      	add	r3, r2
 800ccba:	89ba      	ldrh	r2, [r7, #12]
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fa fcb1 	bl	8007626 <HAL_UART_Transmit_IT>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d11e      	bne.n	800cd08 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ccca:	7bfa      	ldrb	r2, [r7, #15]
 800cccc:	4613      	mov	r3, r2
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	4413      	add	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4a20      	ldr	r2, [pc, #128]	@ (800cd58 <drv_uartTransmitIT+0xd8>)
 800ccd6:	4413      	add	r3, r2
 800ccd8:	6a3a      	ldr	r2, [r7, #32]
 800ccda:	2101      	movs	r1, #1
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f009 f97d 	bl	8015fdc <gos_triggerWait>
 800cce2:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800cce4:	2b55      	cmp	r3, #85	@ 0x55
 800cce6:	d10f      	bne.n	800cd08 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800cce8:	7bfa      	ldrb	r2, [r7, #15]
 800ccea:	4613      	mov	r3, r2
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4a19      	ldr	r2, [pc, #100]	@ (800cd58 <drv_uartTransmitIT+0xd8>)
 800ccf4:	4413      	add	r3, r2
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f009 f918 	bl	8015f2c <gos_triggerReset>
 800ccfc:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ccfe:	2b55      	cmp	r3, #85	@ 0x55
 800cd00:	d102      	bne.n	800cd08 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800cd02:	2355      	movs	r3, #85	@ 0x55
 800cd04:	75fb      	strb	r3, [r7, #23]
 800cd06:	e016      	b.n	800cd36 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cd08:	7bfa      	ldrb	r2, [r7, #15]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	011b      	lsls	r3, r3, #4
 800cd0e:	4413      	add	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4a10      	ldr	r2, [pc, #64]	@ (800cd54 <drv_uartTransmitIT+0xd4>)
 800cd14:	4413      	add	r3, r2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fa fe94 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 800cd1c:	4b0f      	ldr	r3, [pc, #60]	@ (800cd5c <drv_uartTransmitIT+0xdc>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cd24:	4a0d      	ldr	r2, [pc, #52]	@ (800cd5c <drv_uartTransmitIT+0xdc>)
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	e005      	b.n	800cd36 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 800cd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd5c <drv_uartTransmitIT+0xdc>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cd32:	4a0a      	ldr	r2, [pc, #40]	@ (800cd5c <drv_uartTransmitIT+0xdc>)
 800cd34:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800cd36:	7bfb      	ldrb	r3, [r7, #15]
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4a05      	ldr	r2, [pc, #20]	@ (800cd50 <drv_uartTransmitIT+0xd0>)
 800cd3c:	4413      	add	r3, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f007 f956 	bl	8013ff0 <gos_mutexUnlock>

    return uartTransmitResult;
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	200029a4 	.word	0x200029a4
 800cd54:	200027f4 	.word	0x200027f4
 800cd58:	20002a04 	.word	0x20002a04
 800cd5c:	200027f0 	.word	0x200027f0

0800cd60 <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	607b      	str	r3, [r7, #4]
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 800cd72:	23ae      	movs	r3, #174	@ 0xae
 800cd74:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ce30 <drv_uartReceiveIT+0xd0>)
 800cd7c:	4413      	add	r3, r2
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f007 f82f 	bl	8013de4 <gos_mutexLock>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b55      	cmp	r3, #85	@ 0x55
 800cd8a:	d13e      	bne.n	800ce0a <drv_uartReceiveIT+0xaa>
    {
    	//__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800cd8c:	7bfa      	ldrb	r2, [r7, #15]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	011b      	lsls	r3, r3, #4
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4a27      	ldr	r2, [pc, #156]	@ (800ce34 <drv_uartReceiveIT+0xd4>)
 800cd98:	4413      	add	r3, r2
 800cd9a:	89ba      	ldrh	r2, [r7, #12]
 800cd9c:	68b9      	ldr	r1, [r7, #8]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fa fc86 	bl	80076b0 <HAL_UART_Receive_IT>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d11e      	bne.n	800cde8 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cdaa:	7bfa      	ldrb	r2, [r7, #15]
 800cdac:	4613      	mov	r3, r2
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	4413      	add	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4a20      	ldr	r2, [pc, #128]	@ (800ce38 <drv_uartReceiveIT+0xd8>)
 800cdb6:	4413      	add	r3, r2
 800cdb8:	6a3a      	ldr	r2, [r7, #32]
 800cdba:	2101      	movs	r1, #1
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f009 f90d 	bl	8015fdc <gos_triggerWait>
 800cdc2:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800cdc4:	2b55      	cmp	r3, #85	@ 0x55
 800cdc6:	d10f      	bne.n	800cde8 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800cdc8:	7bfa      	ldrb	r2, [r7, #15]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	4413      	add	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4a19      	ldr	r2, [pc, #100]	@ (800ce38 <drv_uartReceiveIT+0xd8>)
 800cdd4:	4413      	add	r3, r2
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f009 f8a8 	bl	8015f2c <gos_triggerReset>
 800cddc:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cdde:	2b55      	cmp	r3, #85	@ 0x55
 800cde0:	d102      	bne.n	800cde8 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 800cde2:	2355      	movs	r3, #85	@ 0x55
 800cde4:	75fb      	strb	r3, [r7, #23]
 800cde6:	e016      	b.n	800ce16 <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cde8:	7bfa      	ldrb	r2, [r7, #15]
 800cdea:	4613      	mov	r3, r2
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	4413      	add	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4a10      	ldr	r2, [pc, #64]	@ (800ce34 <drv_uartReceiveIT+0xd4>)
 800cdf4:	4413      	add	r3, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fa fe24 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 800cdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ce3c <drv_uartReceiveIT+0xdc>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ce04:	4a0d      	ldr	r2, [pc, #52]	@ (800ce3c <drv_uartReceiveIT+0xdc>)
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	e005      	b.n	800ce16 <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 800ce0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce3c <drv_uartReceiveIT+0xdc>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ce12:	4a0a      	ldr	r2, [pc, #40]	@ (800ce3c <drv_uartReceiveIT+0xdc>)
 800ce14:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4a05      	ldr	r2, [pc, #20]	@ (800ce30 <drv_uartReceiveIT+0xd0>)
 800ce1c:	4413      	add	r3, r2
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f007 f8e6 	bl	8013ff0 <gos_mutexUnlock>

    return uartReceiveResult;
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	2000298c 	.word	0x2000298c
 800ce34:	200027f4 	.word	0x200027f4
 800ce38:	200029bc 	.word	0x200029bc
 800ce3c:	200027f0 	.word	0x200027f0

0800ce40 <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800ce44:	4b16      	ldr	r3, [pc, #88]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d105      	bne.n	800ce58 <USART1_IRQHandler+0x18>
 800ce4c:	4b15      	ldr	r3, [pc, #84]	@ (800cea4 <USART1_IRQHandler+0x64>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	4b13      	ldr	r3, [pc, #76]	@ (800cea4 <USART1_IRQHandler+0x64>)
 800ce56:	701a      	strb	r2, [r3, #0]
 800ce58:	4b11      	ldr	r3, [pc, #68]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	4b0f      	ldr	r3, [pc, #60]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce62:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 800ce64:	4810      	ldr	r0, [pc, #64]	@ (800cea8 <USART1_IRQHandler+0x68>)
 800ce66:	f7fa ff01 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d005      	beq.n	800ce7e <USART1_IRQHandler+0x3e>
 800ce72:	4b0b      	ldr	r3, [pc, #44]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	4b09      	ldr	r3, [pc, #36]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce7c:	701a      	strb	r2, [r3, #0]
 800ce7e:	4b08      	ldr	r3, [pc, #32]	@ (800cea0 <USART1_IRQHandler+0x60>)
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d109      	bne.n	800ce9a <USART1_IRQHandler+0x5a>
 800ce86:	4b07      	ldr	r3, [pc, #28]	@ (800cea4 <USART1_IRQHandler+0x64>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <USART1_IRQHandler+0x5a>
 800ce8e:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <USART1_IRQHandler+0x64>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	4b03      	ldr	r3, [pc, #12]	@ (800cea4 <USART1_IRQHandler+0x64>)
 800ce98:	701a      	strb	r2, [r3, #0]
}
 800ce9a:	bf00      	nop
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20005e46 	.word	0x20005e46
 800cea4:	20005e45 	.word	0x20005e45
 800cea8:	200027f4 	.word	0x200027f4

0800ceac <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800ceb0:	4b16      	ldr	r3, [pc, #88]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d105      	bne.n	800cec4 <USART2_IRQHandler+0x18>
 800ceb8:	4b15      	ldr	r3, [pc, #84]	@ (800cf10 <USART2_IRQHandler+0x64>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	3301      	adds	r3, #1
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	4b13      	ldr	r3, [pc, #76]	@ (800cf10 <USART2_IRQHandler+0x64>)
 800cec2:	701a      	strb	r2, [r3, #0]
 800cec4:	4b11      	ldr	r3, [pc, #68]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	3301      	adds	r3, #1
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	4b0f      	ldr	r3, [pc, #60]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800cece:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 800ced0:	4810      	ldr	r0, [pc, #64]	@ (800cf14 <USART2_IRQHandler+0x68>)
 800ced2:	f7fa fecb 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ced6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d005      	beq.n	800ceea <USART2_IRQHandler+0x3e>
 800cede:	4b0b      	ldr	r3, [pc, #44]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	4b09      	ldr	r3, [pc, #36]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	4b08      	ldr	r3, [pc, #32]	@ (800cf0c <USART2_IRQHandler+0x60>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d109      	bne.n	800cf06 <USART2_IRQHandler+0x5a>
 800cef2:	4b07      	ldr	r3, [pc, #28]	@ (800cf10 <USART2_IRQHandler+0x64>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <USART2_IRQHandler+0x5a>
 800cefa:	4b05      	ldr	r3, [pc, #20]	@ (800cf10 <USART2_IRQHandler+0x64>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	3b01      	subs	r3, #1
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	4b03      	ldr	r3, [pc, #12]	@ (800cf10 <USART2_IRQHandler+0x64>)
 800cf04:	701a      	strb	r2, [r3, #0]
}
 800cf06:	bf00      	nop
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20005e46 	.word	0x20005e46
 800cf10:	20005e45 	.word	0x20005e45
 800cf14:	20002838 	.word	0x20002838

0800cf18 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800cf1c:	4b16      	ldr	r3, [pc, #88]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <USART3_IRQHandler+0x18>
 800cf24:	4b15      	ldr	r3, [pc, #84]	@ (800cf7c <USART3_IRQHandler+0x64>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	4b13      	ldr	r3, [pc, #76]	@ (800cf7c <USART3_IRQHandler+0x64>)
 800cf2e:	701a      	strb	r2, [r3, #0]
 800cf30:	4b11      	ldr	r3, [pc, #68]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	4b0f      	ldr	r3, [pc, #60]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf3a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 800cf3c:	4810      	ldr	r0, [pc, #64]	@ (800cf80 <USART3_IRQHandler+0x68>)
 800cf3e:	f7fa fe95 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800cf42:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <USART3_IRQHandler+0x3e>
 800cf4a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	4b09      	ldr	r3, [pc, #36]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf54:	701a      	strb	r2, [r3, #0]
 800cf56:	4b08      	ldr	r3, [pc, #32]	@ (800cf78 <USART3_IRQHandler+0x60>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d109      	bne.n	800cf72 <USART3_IRQHandler+0x5a>
 800cf5e:	4b07      	ldr	r3, [pc, #28]	@ (800cf7c <USART3_IRQHandler+0x64>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d005      	beq.n	800cf72 <USART3_IRQHandler+0x5a>
 800cf66:	4b05      	ldr	r3, [pc, #20]	@ (800cf7c <USART3_IRQHandler+0x64>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	4b03      	ldr	r3, [pc, #12]	@ (800cf7c <USART3_IRQHandler+0x64>)
 800cf70:	701a      	strb	r2, [r3, #0]
}
 800cf72:	bf00      	nop
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20005e46 	.word	0x20005e46
 800cf7c:	20005e45 	.word	0x20005e45
 800cf80:	2000287c 	.word	0x2000287c

0800cf84 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800cf88:	4b16      	ldr	r3, [pc, #88]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d105      	bne.n	800cf9c <UART4_IRQHandler+0x18>
 800cf90:	4b15      	ldr	r3, [pc, #84]	@ (800cfe8 <UART4_IRQHandler+0x64>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	3301      	adds	r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	4b13      	ldr	r3, [pc, #76]	@ (800cfe8 <UART4_IRQHandler+0x64>)
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	4b11      	ldr	r3, [pc, #68]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cfa6:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 800cfa8:	4810      	ldr	r0, [pc, #64]	@ (800cfec <UART4_IRQHandler+0x68>)
 800cfaa:	f7fa fe5f 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800cfae:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d005      	beq.n	800cfc2 <UART4_IRQHandler+0x3e>
 800cfb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	4b09      	ldr	r3, [pc, #36]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	4b08      	ldr	r3, [pc, #32]	@ (800cfe4 <UART4_IRQHandler+0x60>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d109      	bne.n	800cfde <UART4_IRQHandler+0x5a>
 800cfca:	4b07      	ldr	r3, [pc, #28]	@ (800cfe8 <UART4_IRQHandler+0x64>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d005      	beq.n	800cfde <UART4_IRQHandler+0x5a>
 800cfd2:	4b05      	ldr	r3, [pc, #20]	@ (800cfe8 <UART4_IRQHandler+0x64>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	4b03      	ldr	r3, [pc, #12]	@ (800cfe8 <UART4_IRQHandler+0x64>)
 800cfdc:	701a      	strb	r2, [r3, #0]
}
 800cfde:	bf00      	nop
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	20005e46 	.word	0x20005e46
 800cfe8:	20005e45 	.word	0x20005e45
 800cfec:	200028c0 	.word	0x200028c0

0800cff0 <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800cff4:	4b16      	ldr	r3, [pc, #88]	@ (800d050 <UART5_IRQHandler+0x60>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d105      	bne.n	800d008 <UART5_IRQHandler+0x18>
 800cffc:	4b15      	ldr	r3, [pc, #84]	@ (800d054 <UART5_IRQHandler+0x64>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	4b13      	ldr	r3, [pc, #76]	@ (800d054 <UART5_IRQHandler+0x64>)
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	4b11      	ldr	r3, [pc, #68]	@ (800d050 <UART5_IRQHandler+0x60>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	3301      	adds	r3, #1
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	4b0f      	ldr	r3, [pc, #60]	@ (800d050 <UART5_IRQHandler+0x60>)
 800d012:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 800d014:	4810      	ldr	r0, [pc, #64]	@ (800d058 <UART5_IRQHandler+0x68>)
 800d016:	f7fa fe29 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800d01a:	4b0d      	ldr	r3, [pc, #52]	@ (800d050 <UART5_IRQHandler+0x60>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d005      	beq.n	800d02e <UART5_IRQHandler+0x3e>
 800d022:	4b0b      	ldr	r3, [pc, #44]	@ (800d050 <UART5_IRQHandler+0x60>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	3b01      	subs	r3, #1
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	4b09      	ldr	r3, [pc, #36]	@ (800d050 <UART5_IRQHandler+0x60>)
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	4b08      	ldr	r3, [pc, #32]	@ (800d050 <UART5_IRQHandler+0x60>)
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d109      	bne.n	800d04a <UART5_IRQHandler+0x5a>
 800d036:	4b07      	ldr	r3, [pc, #28]	@ (800d054 <UART5_IRQHandler+0x64>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <UART5_IRQHandler+0x5a>
 800d03e:	4b05      	ldr	r3, [pc, #20]	@ (800d054 <UART5_IRQHandler+0x64>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	3b01      	subs	r3, #1
 800d044:	b2da      	uxtb	r2, r3
 800d046:	4b03      	ldr	r3, [pc, #12]	@ (800d054 <UART5_IRQHandler+0x64>)
 800d048:	701a      	strb	r2, [r3, #0]
}
 800d04a:	bf00      	nop
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20005e46 	.word	0x20005e46
 800d054:	20005e45 	.word	0x20005e45
 800d058:	20002904 	.word	0x20002904

0800d05c <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800d060:	4b16      	ldr	r3, [pc, #88]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d105      	bne.n	800d074 <USART6_IRQHandler+0x18>
 800d068:	4b15      	ldr	r3, [pc, #84]	@ (800d0c0 <USART6_IRQHandler+0x64>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	3301      	adds	r3, #1
 800d06e:	b2da      	uxtb	r2, r3
 800d070:	4b13      	ldr	r3, [pc, #76]	@ (800d0c0 <USART6_IRQHandler+0x64>)
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	4b11      	ldr	r3, [pc, #68]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	3301      	adds	r3, #1
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	4b0f      	ldr	r3, [pc, #60]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d07e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 800d080:	4810      	ldr	r0, [pc, #64]	@ (800d0c4 <USART6_IRQHandler+0x68>)
 800d082:	f7fa fdf3 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800d086:	4b0d      	ldr	r3, [pc, #52]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <USART6_IRQHandler+0x3e>
 800d08e:	4b0b      	ldr	r3, [pc, #44]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	3b01      	subs	r3, #1
 800d094:	b2da      	uxtb	r2, r3
 800d096:	4b09      	ldr	r3, [pc, #36]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	4b08      	ldr	r3, [pc, #32]	@ (800d0bc <USART6_IRQHandler+0x60>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d109      	bne.n	800d0b6 <USART6_IRQHandler+0x5a>
 800d0a2:	4b07      	ldr	r3, [pc, #28]	@ (800d0c0 <USART6_IRQHandler+0x64>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <USART6_IRQHandler+0x5a>
 800d0aa:	4b05      	ldr	r3, [pc, #20]	@ (800d0c0 <USART6_IRQHandler+0x64>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4b03      	ldr	r3, [pc, #12]	@ (800d0c0 <USART6_IRQHandler+0x64>)
 800d0b4:	701a      	strb	r2, [r3, #0]
}
 800d0b6:	bf00      	nop
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20005e46 	.word	0x20005e46
 800d0c0:	20005e45 	.word	0x20005e45
 800d0c4:	20002948 	.word	0x20002948

0800d0c8 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]
 800d0d8:	e015      	b.n	800d106 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800d0da:	7bfb      	ldrb	r3, [r7, #15]
 800d0dc:	4a0e      	ldr	r2, [pc, #56]	@ (800d118 <HAL_UART_TxCpltCallback+0x50>)
 800d0de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d10a      	bne.n	800d100 <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 800d0ea:	7bfa      	ldrb	r2, [r7, #15]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4a09      	ldr	r2, [pc, #36]	@ (800d11c <HAL_UART_TxCpltCallback+0x54>)
 800d0f6:	4413      	add	r3, r2
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f009 f81f 	bl	801613c <gos_triggerIncrement>
            break;
 800d0fe:	e006      	b.n	800d10e <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	3301      	adds	r3, #1
 800d104:	73fb      	strb	r3, [r7, #15]
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	2b05      	cmp	r3, #5
 800d10a:	d9e6      	bls.n	800d0da <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800d10c:	bf00      	nop
 800d10e:	bf00      	nop
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20000518 	.word	0x20000518
 800d11c:	20002a04 	.word	0x20002a04

0800d120 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800d128:	2300      	movs	r3, #0
 800d12a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]
 800d130:	e015      	b.n	800d15e <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	4a0e      	ldr	r2, [pc, #56]	@ (800d170 <HAL_UART_RxCpltCallback+0x50>)
 800d136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d10a      	bne.n	800d158 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 800d142:	7bfa      	ldrb	r2, [r7, #15]
 800d144:	4613      	mov	r3, r2
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4413      	add	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4a09      	ldr	r2, [pc, #36]	@ (800d174 <HAL_UART_RxCpltCallback+0x54>)
 800d14e:	4413      	add	r3, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f008 fff3 	bl	801613c <gos_triggerIncrement>
            break;
 800d156:	e006      	b.n	800d166 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	3301      	adds	r3, #1
 800d15c:	73fb      	strb	r3, [r7, #15]
 800d15e:	7bfb      	ldrb	r3, [r7, #15]
 800d160:	2b05      	cmp	r3, #5
 800d162:	d9e6      	bls.n	800d132 <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20000518 	.word	0x20000518
 800d174:	200029bc 	.word	0x200029bc

0800d178 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 800d180:	2300      	movs	r3, #0
 800d182:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 800d184:	2300      	movs	r3, #0
 800d186:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
 800d18c:	e068      	b.n	800d260 <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	4a38      	ldr	r2, [pc, #224]	@ (800d274 <HAL_UART_MspInit+0xfc>)
 800d192:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d15d      	bne.n	800d25a <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73bb      	strb	r3, [r7, #14]
 800d1a2:	e051      	b.n	800d248 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 800d1a4:	7bba      	ldrb	r2, [r7, #14]
 800d1a6:	4934      	ldr	r1, [pc, #208]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	440b      	add	r3, r1
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	7bfa      	ldrb	r2, [r7, #15]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d143      	bne.n	800d242 <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 800d1ba:	7bba      	ldrb	r2, [r7, #14]
 800d1bc:	492e      	ldr	r1, [pc, #184]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d1be:	4613      	mov	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	00db      	lsls	r3, r3, #3
 800d1c6:	440b      	add	r3, r1
 800d1c8:	3320      	adds	r3, #32
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d016      	beq.n	800d1fe <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 800d1d0:	7bba      	ldrb	r2, [r7, #14]
 800d1d2:	4929      	ldr	r1, [pc, #164]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	440b      	add	r3, r1
 800d1de:	3320      	adds	r3, #32
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	1d1a      	adds	r2, r3, #4
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	639a      	str	r2, [r3, #56]	@ 0x38
 800d1e8:	7bba      	ldrb	r2, [r7, #14]
 800d1ea:	4923      	ldr	r1, [pc, #140]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4413      	add	r3, r2
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	440b      	add	r3, r1
 800d1f6:	3320      	adds	r3, #32
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 800d1fe:	7bba      	ldrb	r2, [r7, #14]
 800d200:	491d      	ldr	r1, [pc, #116]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	00db      	lsls	r3, r3, #3
 800d20a:	440b      	add	r3, r1
 800d20c:	3324      	adds	r3, #36	@ 0x24
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d016      	beq.n	800d242 <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 800d214:	7bba      	ldrb	r2, [r7, #14]
 800d216:	4918      	ldr	r1, [pc, #96]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	440b      	add	r3, r1
 800d222:	3324      	adds	r3, #36	@ 0x24
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	1d1a      	adds	r2, r3, #4
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d22c:	7bba      	ldrb	r2, [r7, #14]
 800d22e:	4912      	ldr	r1, [pc, #72]	@ (800d278 <HAL_UART_MspInit+0x100>)
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	440b      	add	r3, r1
 800d23a:	3324      	adds	r3, #36	@ 0x24
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800d242:	7bbb      	ldrb	r3, [r7, #14]
 800d244:	3301      	adds	r3, #1
 800d246:	73bb      	strb	r3, [r7, #14]
 800d248:	7bba      	ldrb	r2, [r7, #14]
 800d24a:	4b0c      	ldr	r3, [pc, #48]	@ (800d27c <HAL_UART_MspInit+0x104>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	490c      	ldr	r1, [pc, #48]	@ (800d280 <HAL_UART_MspInit+0x108>)
 800d250:	fba1 1303 	umull	r1, r3, r1, r3
 800d254:	095b      	lsrs	r3, r3, #5
 800d256:	429a      	cmp	r2, r3
 800d258:	d3a4      	bcc.n	800d1a4 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	3301      	adds	r3, #1
 800d25e:	73fb      	strb	r3, [r7, #15]
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	2b05      	cmp	r3, #5
 800d264:	d993      	bls.n	800d18e <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	20000518 	.word	0x20000518
 800d278:	0801a974 	.word	0x0801a974
 800d27c:	200003fc 	.word	0x200003fc
 800d280:	cccccccd 	.word	0xcccccccd

0800d284 <drv_w25q64Init>:

/*
 * Function: drv_w25q64Init
 */
gos_result_t drv_w25q64Init (void_t* pDevice)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800d28c:	2355      	movs	r3, #85	@ 0x55
 800d28e:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800d290:	2300      	movs	r3, #0
 800d292:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_W25Q64_DEVICE_NULL);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d103      	bne.n	800d2a2 <drv_w25q64Init+0x1e>
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	f043 0301 	orr.w	r3, r3, #1
 800d2a0:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex), ((drv_w25q64Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_W25Q64_MUTEX_INIT);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10d      	bne.n	800d2c6 <drv_w25q64Init+0x42>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3302      	adds	r3, #2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f006 fd7e 	bl	8013db0 <gos_mutexInit>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b55      	cmp	r3, #85	@ 0x55
 800d2b8:	d005      	beq.n	800d2c6 <drv_w25q64Init+0x42>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	f043 0202 	orr.w	r2, r3, #2
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <drv_w25q64Init+0x4e>
 800d2cc:	2355      	movs	r3, #85	@ 0x55
 800d2ce:	73fb      	strb	r3, [r7, #15]
 800d2d0:	e001      	b.n	800d2d6 <drv_w25q64Init+0x52>
 800d2d2:	23ae      	movs	r3, #174	@ 0xae
 800d2d4:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <drv_w25q64ReadData>:

/*
 * Function: drv_w25q64ReadData
 */
GOS_INLINE void_t drv_w25q64ReadData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage  = address / W25Q64_PAGE_SIZE;
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	0a1b      	lsrs	r3, r3, #8
 800d2f2:	61fb      	str	r3, [r7, #28]
    u8_t  offset     = address % W25Q64_PAGE_SIZE;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	76fb      	strb	r3, [r7, #27]
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	021a      	lsls	r2, r3, #8
 800d2fc:	7efb      	ldrb	r3, [r7, #27]
 800d2fe:	4413      	add	r3, r2
 800d300:	617b      	str	r3, [r7, #20]
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800d302:	2303      	movs	r3, #3
 800d304:	743b      	strb	r3, [r7, #16]
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	0c1b      	lsrs	r3, r3, #16
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	747b      	strb	r3, [r7, #17]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	0a1b      	lsrs	r3, r3, #8
 800d312:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800d314:	74bb      	strb	r3, [r7, #18]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800d31a:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d030      	beq.n	800d384 <drv_w25q64ReadData+0xa4>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d02d      	beq.n	800d384 <drv_w25q64ReadData+0xa4>
	{
        DRV_ERROR_CHK_SET(
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d110      	bne.n	800d352 <drv_w25q64ReadData+0x72>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	1c9a      	adds	r2, r3, #2
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f006 fd52 	bl	8013de4 <gos_mutexLock>
 800d340:	4603      	mov	r3, r0
 800d342:	2b55      	cmp	r3, #85	@ 0x55
 800d344:	d005      	beq.n	800d352 <drv_w25q64ReadData+0x72>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	f043 0204 	orr.w	r2, r3, #4
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		drv_w25q64ChipSelectLow(pDevice);
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f000 f9c9 	bl	800d6ea <drv_w25q64ChipSelectLow>
		drv_w25q64Write(pDevice, command, 4);
 800d358:	f107 0310 	add.w	r3, r7, #16
 800d35c:	2204      	movs	r2, #4
 800d35e:	4619      	mov	r1, r3
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fa12 	bl	800d78a <drv_w25q64Write>
		drv_w25q64Read(pDevice, pData, size);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	461a      	mov	r2, r3
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 fa2f 	bl	800d7d2 <drv_w25q64Read>
		drv_w25q64ChipSelectHigh(pDevice);
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 f9c6 	bl	800d706 <drv_w25q64ChipSelectHigh>

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	3302      	adds	r3, #2
 800d37e:	4618      	mov	r0, r3
 800d380:	f006 fe36 	bl	8013ff0 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800d384:	bf00      	nop
 800d386:	3720      	adds	r7, #32
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <drv_w25q64WriteData>:

/*
 * Function: drv_w25q64WriteData
 */
GOS_INLINE void_t drv_w25q64WriteData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b090      	sub	sp, #64	@ 0x40
 800d390:	af02      	add	r7, sp, #8
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage    = address / W25Q64_PAGE_SIZE;
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	0a1b      	lsrs	r3, r3, #8
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
    u8_t  offset       = address % W25Q64_PAGE_SIZE;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	u16_t startSector  = startPage / 16;
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a8:	091b      	lsrs	r3, r3, #4
 800d3aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
	u16_t endSector    = (startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE)) / 16;
 800d3ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	0a1a      	lsrs	r2, r3, #8
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	4413      	add	r3, r2
 800d3bc:	091b      	lsrs	r3, r3, #4
 800d3be:	843b      	strh	r3, [r7, #32]
	u16_t numOfSectors = endSector - startSector + 1;
 800d3c0:	8c3a      	ldrh	r2, [r7, #32]
 800d3c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	83fb      	strh	r3, [r7, #30]
	u32_t sectorOffset = ((startPage % 16) * W25Q64_PAGE_SIZE) + offset;
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ce:	f003 030f 	and.w	r3, r3, #15
 800d3d2:	021a      	lsls	r2, r3, #8
 800d3d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d3d8:	4413      	add	r3, r2
 800d3da:	633b      	str	r3, [r7, #48]	@ 0x30
	u32_t dataIndx     = 0u;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d065      	beq.n	800d4b2 <drv_w25q64WriteData+0x126>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d062      	beq.n	800d4b2 <drv_w25q64WriteData+0x126>
	{
        DRV_ERROR_CHK_SET(
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d110      	bne.n	800d416 <drv_w25q64WriteData+0x8a>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	1c9a      	adds	r2, r3, #2
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4610      	mov	r0, r2
 800d400:	f006 fcf0 	bl	8013de4 <gos_mutexLock>
 800d404:	4603      	mov	r3, r0
 800d406:	2b55      	cmp	r3, #85	@ 0x55
 800d408:	d005      	beq.n	800d416 <drv_w25q64WriteData+0x8a>
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f043 0204 	orr.w	r2, r3, #4
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		for (u16_t i = 0u; i < numOfSectors; i++)
 800d416:	2300      	movs	r3, #0
 800d418:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d41a:	e041      	b.n	800d4a0 <drv_w25q64WriteData+0x114>
		{
			u32_t _startPage = startSector * 16;
 800d41c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	61bb      	str	r3, [r7, #24]

			//(void_t) memset(sectorBuffer, 0, SECTOR_SIZE);

			drv_w25q64ReadDataFast(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800d422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	4b24      	ldr	r3, [pc, #144]	@ (800d4bc <drv_w25q64WriteData+0x130>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	69b9      	ldr	r1, [r7, #24]
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f000 f846 	bl	800d4c0 <drv_w25q64ReadDataFast>

			u16_t bytesRem = drv_w25q64BytesToModify(size, sectorOffset);
 800d434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d436:	b29b      	uxth	r3, r3
 800d438:	4619      	mov	r1, r3
 800d43a:	6838      	ldr	r0, [r7, #0]
 800d43c:	f000 f939 	bl	800d6b2 <drv_w25q64BytesToModify>
 800d440:	4603      	mov	r3, r0
 800d442:	82fb      	strh	r3, [r7, #22]

			for (u16_t j = 0u; j < bytesRem; j++)
 800d444:	2300      	movs	r3, #0
 800d446:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d448:	e00d      	b.n	800d466 <drv_w25q64WriteData+0xda>
			{
				sectorBuffer[j + sectorOffset] = pData[j + dataIndx];
 800d44a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44e:	4413      	add	r3, r2
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	441a      	add	r2, r3
 800d454:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800d456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d458:	440b      	add	r3, r1
 800d45a:	7811      	ldrb	r1, [r2, #0]
 800d45c:	4a17      	ldr	r2, [pc, #92]	@ (800d4bc <drv_w25q64WriteData+0x130>)
 800d45e:	54d1      	strb	r1, [r2, r3]
			for (u16_t j = 0u; j < bytesRem; j++)
 800d460:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d462:	3301      	adds	r3, #1
 800d464:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d466:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d468:	8afb      	ldrh	r3, [r7, #22]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d3ed      	bcc.n	800d44a <drv_w25q64WriteData+0xbe>
			}

			drv_w25q64WriteDataClean(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800d46e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	4b11      	ldr	r3, [pc, #68]	@ (800d4bc <drv_w25q64WriteData+0x130>)
 800d476:	2200      	movs	r2, #0
 800d478:	69b9      	ldr	r1, [r7, #24]
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f000 f854 	bl	800d528 <drv_w25q64WriteDataClean>

			startSector++;
 800d480:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d482:	3301      	adds	r3, #1
 800d484:	86fb      	strh	r3, [r7, #54]	@ 0x36
			sectorOffset = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	633b      	str	r3, [r7, #48]	@ 0x30
			dataIndx = dataIndx + bytesRem;
 800d48a:	8afb      	ldrh	r3, [r7, #22]
 800d48c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d48e:	4413      	add	r3, r2
 800d490:	62fb      	str	r3, [r7, #44]	@ 0x2c
			size = size - bytesRem;
 800d492:	8afb      	ldrh	r3, [r7, #22]
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	603b      	str	r3, [r7, #0]
		for (u16_t i = 0u; i < numOfSectors; i++)
 800d49a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d49c:	3301      	adds	r3, #1
 800d49e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d4a0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800d4a2:	8bfb      	ldrh	r3, [r7, #30]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d3b9      	bcc.n	800d41c <drv_w25q64WriteData+0x90>
		}

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3302      	adds	r3, #2
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f006 fd9f 	bl	8013ff0 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800d4b2:	bf00      	nop
 800d4b4:	3738      	adds	r7, #56	@ 0x38
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20002a4c 	.word	0x20002a4c

0800d4c0 <drv_w25q64ReadDataFast>:
 * @param   size      : Size of data to be read.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ReadDataFast (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	021a      	lsls	r2, r3, #8
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	61fb      	str	r3, [r7, #28]
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800d4da:	230b      	movs	r3, #11
 800d4dc:	753b      	strb	r3, [r7, #20]
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	0c1b      	lsrs	r3, r3, #16
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	757b      	strb	r3, [r7, #21]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	0a1b      	lsrs	r3, r3, #8
 800d4ea:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800d4ec:	75bb      	strb	r3, [r7, #22]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800d4f2:	75fb      	strb	r3, [r7, #23]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	763b      	strb	r3, [r7, #24]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 f8f6 	bl	800d6ea <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 5);
 800d4fe:	f107 0314 	add.w	r3, r7, #20
 800d502:	2205      	movs	r2, #5
 800d504:	4619      	mov	r1, r3
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 f93f 	bl	800d78a <drv_w25q64Write>
	drv_w25q64Read(pDevice, pData, size);
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	b29b      	uxth	r3, r3
 800d510:	461a      	mov	r2, r3
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f95c 	bl	800d7d2 <drv_w25q64Read>
	drv_w25q64ChipSelectHigh(pDevice);
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f000 f8f3 	bl	800d706 <drv_w25q64ChipSelectHigh>
}
 800d520:	bf00      	nop
 800d522:	3720      	adds	r7, #32
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <drv_w25q64WriteDataClean>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64WriteDataClean (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b090      	sub	sp, #64	@ 0x40
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	603b      	str	r3, [r7, #0]
 800d534:	4613      	mov	r3, r2
 800d536:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t endPage      = startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE);
 800d538:	79fa      	ldrb	r2, [r7, #7]
 800d53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d53c:	4413      	add	r3, r2
 800d53e:	3b01      	subs	r3, #1
 800d540:	0a1b      	lsrs	r3, r3, #8
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	4413      	add	r3, r2
 800d546:	62fb      	str	r3, [r7, #44]	@ 0x2c
	u32_t numOfPages   = endPage - startPage + 1;
 800d548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	3301      	adds	r3, #1
 800d550:	62bb      	str	r3, [r7, #40]	@ 0x28
	u16_t startSector  = startPage / 16;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	091b      	lsrs	r3, r3, #4
 800d556:	84fb      	strh	r3, [r7, #38]	@ 0x26
	u16_t endSector    = endPage / 16;
 800d558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55a:	091b      	lsrs	r3, r3, #4
 800d55c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	u16_t numOfSectors = endSector - startSector + 1;
 800d55e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d560:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	b29b      	uxth	r3, r3
 800d566:	3301      	adds	r3, #1
 800d568:	847b      	strh	r3, [r7, #34]	@ 0x22
	u32_t dataPosition = 0u;
 800d56a:	2300      	movs	r3, #0
 800d56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u32_t idx;

    /*
     * Function code.
     */
	for (idx = 0u; idx < numOfSectors; idx++)
 800d56e:	2300      	movs	r3, #0
 800d570:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d572:	e00b      	b.n	800d58c <drv_w25q64WriteDataClean+0x64>
	{
		drv_w25q64EraseSector(pDevice, (startSector + idx));
 800d574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d576:	b29a      	uxth	r2, r3
 800d578:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d57a:	4413      	add	r3, r2
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	4619      	mov	r1, r3
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f000 f94a 	bl	800d81a <drv_w25q64EraseSector>
	for (idx = 0u; idx < numOfSectors; idx++)
 800d586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d588:	3301      	adds	r3, #1
 800d58a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d58c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d58e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d590:	429a      	cmp	r2, r3
 800d592:	d3ef      	bcc.n	800d574 <drv_w25q64WriteDataClean+0x4c>
	}

	(void_t) memset(pageWriteBuffer, 0, 266);
 800d594:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 800d598:	2100      	movs	r1, #0
 800d59a:	4837      	ldr	r0, [pc, #220]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d59c:	f009 fd30 	bl	8017000 <memset>

	for (idx = 0; idx < numOfPages; idx++)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5a4:	e05e      	b.n	800d664 <drv_w25q64WriteDataClean+0x13c>
	{
		u32_t memAddress = (startPage * W25Q64_PAGE_SIZE) + offset;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	021a      	lsls	r2, r3, #8
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61fb      	str	r3, [r7, #28]
		u32_t bytesRem = drv_w25q64BytesToWrite(size, offset);
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d5b8:	f000 f860 	bl	800d67c <drv_w25q64BytesToWrite>
 800d5bc:	61b8      	str	r0, [r7, #24]
		u32_t indx = 4;
 800d5be:	2304      	movs	r3, #4
 800d5c0:	637b      	str	r3, [r7, #52]	@ 0x34

		drv_w25q64WriteEnable(pDevice);
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 f8ad 	bl	800d722 <drv_w25q64WriteEnable>

		pageWriteBuffer[0] = 0x02;
 800d5c8:	4b2b      	ldr	r3, [pc, #172]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	701a      	strb	r2, [r3, #0]
		pageWriteBuffer[1] = (u8_t)((memAddress >> 16) & 0xFF);
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	0c1b      	lsrs	r3, r3, #16
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4b28      	ldr	r3, [pc, #160]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d5d6:	705a      	strb	r2, [r3, #1]
		pageWriteBuffer[2] = (u8_t)((memAddress >> 8) & 0xFF);
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	0a1b      	lsrs	r3, r3, #8
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	4b26      	ldr	r3, [pc, #152]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d5e0:	709a      	strb	r2, [r3, #2]
		pageWriteBuffer[3] = (u8_t)(memAddress & 0xFF);
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	4b24      	ldr	r3, [pc, #144]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d5e8:	70da      	strb	r2, [r3, #3]

		u16_t bytesToSend = bytesRem + indx;
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4413      	add	r3, r2
 800d5f4:	82fb      	strh	r3, [r7, #22]

		for (u16_t i = 0; i < bytesRem; i++)
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 800d5fa:	e00d      	b.n	800d618 <drv_w25q64WriteDataClean+0xf0>
		{
			pageWriteBuffer[indx++] = pData[ i + dataPosition];
 800d5fc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d600:	4413      	add	r3, r2
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	441a      	add	r2, r3
 800d606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d608:	1c59      	adds	r1, r3, #1
 800d60a:	6379      	str	r1, [r7, #52]	@ 0x34
 800d60c:	7811      	ldrb	r1, [r2, #0]
 800d60e:	4a1a      	ldr	r2, [pc, #104]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d610:	54d1      	strb	r1, [r2, r3]
		for (u16_t i = 0; i < bytesRem; i++)
 800d612:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d614:	3301      	adds	r3, #1
 800d616:	867b      	strh	r3, [r7, #50]	@ 0x32
 800d618:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d61a:	69ba      	ldr	r2, [r7, #24]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d8ed      	bhi.n	800d5fc <drv_w25q64WriteDataClean+0xd4>
		}

		drv_w25q64ChipSelectLow(pDevice);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f000 f862 	bl	800d6ea <drv_w25q64ChipSelectLow>

		drv_w25q64Write(pDevice, pageWriteBuffer, bytesToSend);
 800d626:	8afb      	ldrh	r3, [r7, #22]
 800d628:	461a      	mov	r2, r3
 800d62a:	4913      	ldr	r1, [pc, #76]	@ (800d678 <drv_w25q64WriteDataClean+0x150>)
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f000 f8ac 	bl	800d78a <drv_w25q64Write>

		drv_w25q64ChipSelectHigh(pDevice);
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f000 f867 	bl	800d706 <drv_w25q64ChipSelectHigh>

		startPage++;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	3301      	adds	r3, #1
 800d63c:	60bb      	str	r3, [r7, #8]
		offset = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	71fb      	strb	r3, [r7, #7]
		size = size - bytesRem;
 800d642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	64bb      	str	r3, [r7, #72]	@ 0x48
		dataPosition = dataPosition + bytesRem;
 800d64a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	4413      	add	r3, r2
 800d650:	63fb      	str	r3, [r7, #60]	@ 0x3c

		(void_t) gos_taskSleep(5);
 800d652:	2005      	movs	r0, #5
 800d654:	f004 f86c 	bl	8011730 <gos_taskSleep>

		drv_w25q64WriteDisable(pDevice);
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 f87c 	bl	800d756 <drv_w25q64WriteDisable>
	for (idx = 0; idx < numOfPages; idx++)
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	3301      	adds	r3, #1
 800d662:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d668:	429a      	cmp	r2, r3
 800d66a:	d39c      	bcc.n	800d5a6 <drv_w25q64WriteDataClean+0x7e>
	}
}
 800d66c:	bf00      	nop
 800d66e:	bf00      	nop
 800d670:	3740      	adds	r7, #64	@ 0x40
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20003a4c 	.word	0x20003a4c

0800d67c <drv_w25q64BytesToWrite>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to write.
 */
GOS_STATIC u32_t drv_w25q64BytesToWrite (u32_t size, u16_t offset)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800d688:	2300      	movs	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < W25Q64_PAGE_SIZE)
 800d68c:	887a      	ldrh	r2, [r7, #2]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4413      	add	r3, r2
 800d692:	2bff      	cmp	r3, #255	@ 0xff
 800d694:	d802      	bhi.n	800d69c <drv_w25q64BytesToWrite+0x20>
	{
		bytesToWrite = size;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	e003      	b.n	800d6a4 <drv_w25q64BytesToWrite+0x28>
	}
	else
	{
		bytesToWrite = W25Q64_PAGE_SIZE - offset;
 800d69c:	887b      	ldrh	r3, [r7, #2]
 800d69e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800d6a2:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <drv_w25q64BytesToModify>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to modify.
 */
GOS_STATIC u32_t drv_w25q64BytesToModify (u32_t size, u16_t offset)
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	b085      	sub	sp, #20
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < SECTOR_SIZE)
 800d6c2:	887a      	ldrh	r2, [r7, #2]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6cc:	d202      	bcs.n	800d6d4 <drv_w25q64BytesToModify+0x22>
	{
		bytesToWrite = size;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	60fb      	str	r3, [r7, #12]
 800d6d2:	e003      	b.n	800d6dc <drv_w25q64BytesToModify+0x2a>
	}
	else
	{
		bytesToWrite = SECTOR_SIZE - offset;
 800d6d4:	887b      	ldrh	r3, [r7, #2]
 800d6d6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800d6da:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <drv_w25q64ChipSelectLow>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectLow (void_t* pDevice)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	785b      	ldrb	r3, [r3, #1]
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fd fabd 	bl	800ac78 <drv_gpioWritePin>
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <drv_w25q64ChipSelectHigh>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectHigh (void_t* pDevice)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	785b      	ldrb	r3, [r3, #1]
 800d712:	2101      	movs	r1, #1
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd faaf 	bl	800ac78 <drv_gpioWritePin>
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <drv_w25q64WriteEnable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteEnable (void_t* pDevice)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x06;
 800d72a:	2306      	movs	r3, #6
 800d72c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7ff ffdb 	bl	800d6ea <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800d734:	f107 030f 	add.w	r3, r7, #15
 800d738:	2201      	movs	r2, #1
 800d73a:	4619      	mov	r1, r3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f824 	bl	800d78a <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff ffdf 	bl	800d706 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800d748:	2005      	movs	r0, #5
 800d74a:	f003 fff1 	bl	8011730 <gos_taskSleep>
}
 800d74e:	bf00      	nop
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <drv_w25q64WriteDisable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteDisable (void_t* pDevice)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x04;
 800d75e:	2304      	movs	r3, #4
 800d760:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff ffc1 	bl	800d6ea <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800d768:	f107 030f 	add.w	r3, r7, #15
 800d76c:	2201      	movs	r2, #1
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 f80a 	bl	800d78a <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff ffc5 	bl	800d706 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800d77c:	2005      	movs	r0, #5
 800d77e:	f003 ffd7 	bl	8011730 <gos_taskSleep>
}
 800d782:	bf00      	nop
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <drv_w25q64Write>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Write (void_t* pDevice, u8_t* pData, u16_t size)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b086      	sub	sp, #24
 800d78e:	af02      	add	r7, sp, #8
 800d790:	60f8      	str	r0, [r7, #12]
 800d792:	60b9      	str	r1, [r7, #8]
 800d794:	4613      	mov	r3, r2
 800d796:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d114      	bne.n	800d7ca <drv_w25q64Write+0x40>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	7818      	ldrb	r0, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6919      	ldr	r1, [r3, #16]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	88fa      	ldrh	r2, [r7, #6]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	68b9      	ldr	r1, [r7, #8]
 800d7b4:	f7fe f8ee 	bl	800b994 <drv_spiTransmitIT>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b55      	cmp	r3, #85	@ 0x55
 800d7bc:	d005      	beq.n	800d7ca <drv_w25q64Write+0x40>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	f043 0210 	orr.w	r2, r3, #16
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->writeTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_WRITE
            );
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <drv_w25q64Read>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Read (void_t* pDevice, u8_t* pData, u16_t size)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b086      	sub	sp, #24
 800d7d6:	af02      	add	r7, sp, #8
 800d7d8:	60f8      	str	r0, [r7, #12]
 800d7da:	60b9      	str	r1, [r7, #8]
 800d7dc:	4613      	mov	r3, r2
 800d7de:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d114      	bne.n	800d812 <drv_w25q64Read+0x40>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	7818      	ldrb	r0, [r3, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6899      	ldr	r1, [r3, #8]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	88fa      	ldrh	r2, [r7, #6]
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	68b9      	ldr	r1, [r7, #8]
 800d7fc:	f7fe f92e 	bl	800ba5c <drv_spiReceiveIT>
 800d800:	4603      	mov	r3, r0
 800d802:	2b55      	cmp	r3, #85	@ 0x55
 800d804:	d005      	beq.n	800d812 <drv_w25q64Read+0x40>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	f043 0208 	orr.w	r2, r3, #8
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->readTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_READ
            );
}
 800d812:	bf00      	nop
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <drv_w25q64EraseSector>:
 * @param pDevice
 * @param sector
 * @return
 */
GOS_STATIC void_t drv_w25q64EraseSector (void_t* pDevice, u16_t sector)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t memAddress = sector * 16 * W25Q64_PAGE_SIZE;
 800d826:	887b      	ldrh	r3, [r7, #2]
 800d828:	031b      	lsls	r3, r3, #12
 800d82a:	60fb      	str	r3, [r7, #12]
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800d82c:	2320      	movs	r3, #32
 800d82e:	723b      	strb	r3, [r7, #8]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	0c1b      	lsrs	r3, r3, #16
 800d834:	b2db      	uxtb	r3, r3
 800d836:	727b      	strb	r3, [r7, #9]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	0a1b      	lsrs	r3, r3, #8
 800d83c:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800d83e:	72bb      	strb	r3, [r7, #10]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800d844:	72fb      	strb	r3, [r7, #11]

    /*
     * Function code.
     */
	drv_w25q64WriteEnable(pDevice);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff ff6b 	bl	800d722 <drv_w25q64WriteEnable>
	drv_w25q64ChipSelectLow(pDevice);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f7ff ff4c 	bl	800d6ea <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 4);
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	2204      	movs	r2, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7ff ff95 	bl	800d78a <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ff50 	bl	800d706 <drv_w25q64ChipSelectHigh>

	(void_t) gos_taskSleep(450);
 800d866:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800d86a:	f003 ff61 	bl	8011730 <gos_taskSleep>

	drv_w25q64WriteDisable(pDevice);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff ff71 	bl	800d756 <drv_w25q64WriteDisable>
}
 800d874:	bf00      	nop
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 800d87c:	b590      	push	{r4, r7, lr}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 800d882:	2355      	movs	r3, #85	@ 0x55
 800d884:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 800d886:	2300      	movs	r3, #0
 800d888:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 800d88a:	2300      	movs	r3, #0
 800d88c:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 800d88e:	4b3a      	ldr	r3, [pc, #232]	@ (800d978 <svl_dsmInit+0xfc>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d06a      	beq.n	800d96c <svl_dsmInit+0xf0>
	{
		// Register DSM task.
		GOS_CONCAT_RESULT(dsmInitResult, gos_taskRegister(&svlDsmDaemonDesc, NULL));
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	2b55      	cmp	r3, #85	@ 0x55
 800d89a:	d106      	bne.n	800d8aa <svl_dsmInit+0x2e>
 800d89c:	2100      	movs	r1, #0
 800d89e:	4837      	ldr	r0, [pc, #220]	@ (800d97c <svl_dsmInit+0x100>)
 800d8a0:	f003 fdb4 	bl	801140c <gos_taskRegister>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	71fb      	strb	r3, [r7, #7]
 800d8a8:	e001      	b.n	800d8ae <svl_dsmInit+0x32>
 800d8aa:	23ae      	movs	r3, #174	@ 0xae
 800d8ac:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	71bb      	strb	r3, [r7, #6]
 800d8b2:	e052      	b.n	800d95a <svl_dsmInit+0xde>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800d8b4:	4832      	ldr	r0, [pc, #200]	@ (800d980 <svl_dsmInit+0x104>)
 800d8b6:	f002 fbeb 	bl	8010090 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 800d8ba:	79ba      	ldrb	r2, [r7, #6]
 800d8bc:	4931      	ldr	r1, [pc, #196]	@ (800d984 <svl_dsmInit+0x108>)
 800d8be:	4613      	mov	r3, r2
 800d8c0:	015b      	lsls	r3, r3, #5
 800d8c2:	4413      	add	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	440b      	add	r3, r1
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f002 fbe0 	bl	8010090 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800d8d0:	482b      	ldr	r0, [pc, #172]	@ (800d980 <svl_dsmInit+0x104>)
 800d8d2:	f002 fbdd 	bl	8010090 <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	717b      	strb	r3, [r7, #5]
 800d8da:	e036      	b.n	800d94a <svl_dsmInit+0xce>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 800d8dc:	79ba      	ldrb	r2, [r7, #6]
 800d8de:	797b      	ldrb	r3, [r7, #5]
 800d8e0:	4828      	ldr	r0, [pc, #160]	@ (800d984 <svl_dsmInit+0x108>)
 800d8e2:	00d9      	lsls	r1, r3, #3
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	015b      	lsls	r3, r3, #5
 800d8e8:	4413      	add	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	440b      	add	r3, r1
 800d8ee:	4403      	add	r3, r0
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d02c      	beq.n	800d952 <svl_dsmInit+0xd6>
				{
					GOS_CONCAT_RESULT(dsmInitResult, gos_errorTraceInit(
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	2b55      	cmp	r3, #85	@ 0x55
 800d8fc:	d120      	bne.n	800d940 <svl_dsmInit+0xc4>
 800d8fe:	79ba      	ldrb	r2, [r7, #6]
 800d900:	797b      	ldrb	r3, [r7, #5]
 800d902:	4820      	ldr	r0, [pc, #128]	@ (800d984 <svl_dsmInit+0x108>)
 800d904:	00d9      	lsls	r1, r3, #3
 800d906:	4613      	mov	r3, r2
 800d908:	015b      	lsls	r3, r3, #5
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	4403      	add	r3, r0
 800d912:	3304      	adds	r3, #4
 800d914:	681c      	ldr	r4, [r3, #0]
 800d916:	79ba      	ldrb	r2, [r7, #6]
 800d918:	797b      	ldrb	r3, [r7, #5]
 800d91a:	481a      	ldr	r0, [pc, #104]	@ (800d984 <svl_dsmInit+0x108>)
 800d91c:	00d9      	lsls	r1, r3, #3
 800d91e:	4613      	mov	r3, r2
 800d920:	015b      	lsls	r3, r3, #5
 800d922:	4413      	add	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	440b      	add	r3, r1
 800d928:	4403      	add	r3, r0
 800d92a:	3308      	adds	r3, #8
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4798      	blx	r3
 800d930:	4603      	mov	r3, r0
 800d932:	4619      	mov	r1, r3
 800d934:	4620      	mov	r0, r4
 800d936:	f005 fc85 	bl	8013244 <gos_errorTraceInit>
 800d93a:	4603      	mov	r3, r0
 800d93c:	71fb      	strb	r3, [r7, #7]
 800d93e:	e001      	b.n	800d944 <svl_dsmInit+0xc8>
 800d940:	23ae      	movs	r3, #174	@ 0xae
 800d942:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800d944:	797b      	ldrb	r3, [r7, #5]
 800d946:	3301      	adds	r3, #1
 800d948:	717b      	strb	r3, [r7, #5]
 800d94a:	797b      	ldrb	r3, [r7, #5]
 800d94c:	2b0f      	cmp	r3, #15
 800d94e:	d9c5      	bls.n	800d8dc <svl_dsmInit+0x60>
 800d950:	e000      	b.n	800d954 <svl_dsmInit+0xd8>
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer()));
				}
				else
				{
					// End of initializers.
					break;
 800d952:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800d954:	79bb      	ldrb	r3, [r7, #6]
 800d956:	3301      	adds	r3, #1
 800d958:	71bb      	strb	r3, [r7, #6]
 800d95a:	79ba      	ldrb	r2, [r7, #6]
 800d95c:	4b06      	ldr	r3, [pc, #24]	@ (800d978 <svl_dsmInit+0xfc>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4909      	ldr	r1, [pc, #36]	@ (800d988 <svl_dsmInit+0x10c>)
 800d962:	fba1 1303 	umull	r1, r3, r1, r3
 800d966:	095b      	lsrs	r3, r3, #5
 800d968:	429a      	cmp	r2, r3
 800d96a:	d3a3      	bcc.n	800d8b4 <svl_dsmInit+0x38>
	else
	{
		// Configuration is empty.
	}

	return dsmInitResult;
 800d96c:	79fb      	ldrb	r3, [r7, #7]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	bd90      	pop	{r4, r7, pc}
 800d976:	bf00      	nop
 800d978:	20000350 	.word	0x20000350
 800d97c:	20000530 	.word	0x20000530
 800d980:	08019530 	.word	0x08019530
 800d984:	0801a5bc 	.word	0x0801a5bc
 800d988:	3e0f83e1 	.word	0x3e0f83e1

0800d98c <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 800d992:	2355      	movs	r3, #85	@ 0x55
 800d994:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n"));
 800d996:	79fb      	ldrb	r3, [r7, #7]
 800d998:	2b55      	cmp	r3, #85	@ 0x55
 800d99a:	d106      	bne.n	800d9aa <svl_dsmPrintOSInfo+0x1e>
 800d99c:	490d      	ldr	r1, [pc, #52]	@ (800d9d4 <svl_dsmPrintOSInfo+0x48>)
 800d99e:	2049      	movs	r0, #73	@ 0x49
 800d9a0:	f008 f91a 	bl	8015bd8 <gos_traceTraceFormatted>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	71fb      	strb	r3, [r7, #7]
 800d9a8:	e001      	b.n	800d9ae <svl_dsmPrintOSInfo+0x22>
 800d9aa:	23ae      	movs	r3, #174	@ 0xae
 800d9ac:	71fb      	strb	r3, [r7, #7]
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR));
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	2b55      	cmp	r3, #85	@ 0x55
 800d9b2:	d108      	bne.n	800d9c6 <svl_dsmPrintOSInfo+0x3a>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	4907      	ldr	r1, [pc, #28]	@ (800d9d8 <svl_dsmPrintOSInfo+0x4c>)
 800d9ba:	2049      	movs	r0, #73	@ 0x49
 800d9bc:	f008 f90c 	bl	8015bd8 <gos_traceTraceFormatted>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	71fb      	strb	r3, [r7, #7]
 800d9c4:	e001      	b.n	800d9ca <svl_dsmPrintOSInfo+0x3e>
 800d9c6:	23ae      	movs	r3, #174	@ 0xae
 800d9c8:	71fb      	strb	r3, [r7, #7]

	return printResult;
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	08019534 	.word	0x08019534
 800d9d8:	0801954c 	.word	0x0801954c

0800d9dc <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b0ac      	sub	sp, #176	@ 0xb0
 800d9e0:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 800d9e2:	2355      	movs	r3, #85	@ 0x55
 800d9e4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 800d9e8:	1d3b      	adds	r3, r7, #4
 800d9ea:	22a0      	movs	r2, #160	@ 0xa0
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f009 fb06 	bl	8017000 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetLibVersion(&libVer));
 800d9f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d9f8:	2b55      	cmp	r3, #85	@ 0x55
 800d9fa:	d107      	bne.n	800da0c <svl_dsmPrintLibInfo+0x30>
 800d9fc:	1d3b      	adds	r3, r7, #4
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 ffcc 	bl	800e99c <svl_pdhGetLibVersion>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da0a:	e002      	b.n	800da12 <svl_dsmPrintLibInfo+0x36>
 800da0c:	23ae      	movs	r3, #174	@ 0xae
 800da0e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n"));
 800da12:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da16:	2b55      	cmp	r3, #85	@ 0x55
 800da18:	d107      	bne.n	800da2a <svl_dsmPrintLibInfo+0x4e>
 800da1a:	493a      	ldr	r1, [pc, #232]	@ (800db04 <svl_dsmPrintLibInfo+0x128>)
 800da1c:	2049      	movs	r0, #73	@ 0x49
 800da1e:	f008 f8db 	bl	8015bd8 <gos_traceTraceFormatted>
 800da22:	4603      	mov	r3, r0
 800da24:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da28:	e002      	b.n	800da30 <svl_dsmPrintLibInfo+0x54>
 800da2a:	23ae      	movs	r3, #174	@ 0xae
 800da2c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name));
 800da30:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da34:	2b55      	cmp	r3, #85	@ 0x55
 800da36:	d10a      	bne.n	800da4e <svl_dsmPrintLibInfo+0x72>
 800da38:	1d3b      	adds	r3, r7, #4
 800da3a:	3310      	adds	r3, #16
 800da3c:	461a      	mov	r2, r3
 800da3e:	4932      	ldr	r1, [pc, #200]	@ (800db08 <svl_dsmPrintLibInfo+0x12c>)
 800da40:	2049      	movs	r0, #73	@ 0x49
 800da42:	f008 f8c9 	bl	8015bd8 <gos_traceTraceFormatted>
 800da46:	4603      	mov	r3, r0
 800da48:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da4c:	e002      	b.n	800da54 <svl_dsmPrintLibInfo+0x78>
 800da4e:	23ae      	movs	r3, #174	@ 0xae
 800da50:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description));
 800da54:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da58:	2b55      	cmp	r3, #85	@ 0x55
 800da5a:	d10a      	bne.n	800da72 <svl_dsmPrintLibInfo+0x96>
 800da5c:	1d3b      	adds	r3, r7, #4
 800da5e:	3340      	adds	r3, #64	@ 0x40
 800da60:	461a      	mov	r2, r3
 800da62:	492a      	ldr	r1, [pc, #168]	@ (800db0c <svl_dsmPrintLibInfo+0x130>)
 800da64:	2049      	movs	r0, #73	@ 0x49
 800da66:	f008 f8b7 	bl	8015bd8 <gos_traceTraceFormatted>
 800da6a:	4603      	mov	r3, r0
 800da6c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da70:	e002      	b.n	800da78 <svl_dsmPrintLibInfo+0x9c>
 800da72:	23ae      	movs	r3, #174	@ 0xae
 800da74:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build));
 800da78:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da7c:	2b55      	cmp	r3, #85	@ 0x55
 800da7e:	d10e      	bne.n	800da9e <svl_dsmPrintLibInfo+0xc2>
 800da80:	88bb      	ldrh	r3, [r7, #4]
 800da82:	461a      	mov	r2, r3
 800da84:	88fb      	ldrh	r3, [r7, #6]
 800da86:	4619      	mov	r1, r3
 800da88:	893b      	ldrh	r3, [r7, #8]
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	460b      	mov	r3, r1
 800da8e:	4920      	ldr	r1, [pc, #128]	@ (800db10 <svl_dsmPrintLibInfo+0x134>)
 800da90:	2049      	movs	r0, #73	@ 0x49
 800da92:	f008 f8a1 	bl	8015bd8 <gos_traceTraceFormatted>
 800da96:	4603      	mov	r3, r0
 800da98:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da9c:	e002      	b.n	800daa4 <svl_dsmPrintLibInfo+0xc8>
 800da9e:	23ae      	movs	r3, #174	@ 0xae
 800daa0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days));
 800daa4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800daa8:	2b55      	cmp	r3, #85	@ 0x55
 800daaa:	d110      	bne.n	800dace <svl_dsmPrintLibInfo+0xf2>
 800daac:	8a7b      	ldrh	r3, [r7, #18]
 800daae:	461a      	mov	r2, r3
 800dab0:	7c7b      	ldrb	r3, [r7, #17]
 800dab2:	4619      	mov	r1, r3
 800dab4:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	460b      	mov	r3, r1
 800dabe:	4915      	ldr	r1, [pc, #84]	@ (800db14 <svl_dsmPrintLibInfo+0x138>)
 800dac0:	2049      	movs	r0, #73	@ 0x49
 800dac2:	f008 f889 	bl	8015bd8 <gos_traceTraceFormatted>
 800dac6:	4603      	mov	r3, r0
 800dac8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800dacc:	e002      	b.n	800dad4 <svl_dsmPrintLibInfo+0xf8>
 800dace:	23ae      	movs	r3, #174	@ 0xae
 800dad0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author));
 800dad4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800dad8:	2b55      	cmp	r3, #85	@ 0x55
 800dada:	d10a      	bne.n	800daf2 <svl_dsmPrintLibInfo+0x116>
 800dadc:	1d3b      	adds	r3, r7, #4
 800dade:	3370      	adds	r3, #112	@ 0x70
 800dae0:	461a      	mov	r2, r3
 800dae2:	490d      	ldr	r1, [pc, #52]	@ (800db18 <svl_dsmPrintLibInfo+0x13c>)
 800dae4:	2049      	movs	r0, #73	@ 0x49
 800dae6:	f008 f877 	bl	8015bd8 <gos_traceTraceFormatted>
 800daea:	4603      	mov	r3, r0
 800daec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800daf0:	e002      	b.n	800daf8 <svl_dsmPrintLibInfo+0x11c>
 800daf2:	23ae      	movs	r3, #174	@ 0xae
 800daf4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	return printResult;
 800daf8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	37a8      	adds	r7, #168	@ 0xa8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	08019564 	.word	0x08019564
 800db08:	08019580 	.word	0x08019580
 800db0c:	08019594 	.word	0x08019594
 800db10:	080195a8 	.word	0x080195a8
 800db14:	080195c8 	.word	0x080195c8
 800db18:	080195e8 	.word	0x080195e8

0800db1c <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b0c2      	sub	sp, #264	@ 0x108
 800db20:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800db22:	2355      	movs	r3, #85	@ 0x55
 800db24:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 800db28:	1d3b      	adds	r3, r7, #4
 800db2a:	22fa      	movs	r2, #250	@ 0xfa
 800db2c:	2100      	movs	r1, #0
 800db2e:	4618      	mov	r0, r3
 800db30:	f009 fa66 	bl	8017000 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetHwInfo(&hwInfo));
 800db34:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db38:	2b55      	cmp	r3, #85	@ 0x55
 800db3a:	d107      	bne.n	800db4c <svl_dsmPrintHwInfo+0x30>
 800db3c:	1d3b      	adds	r3, r7, #4
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 ffe6 	bl	800eb10 <svl_pdhGetHwInfo>
 800db44:	4603      	mov	r3, r0
 800db46:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800db4a:	e002      	b.n	800db52 <svl_dsmPrintHwInfo+0x36>
 800db4c:	23ae      	movs	r3, #174	@ 0xae
 800db4e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n"));
 800db52:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db56:	2b55      	cmp	r3, #85	@ 0x55
 800db58:	d107      	bne.n	800db6a <svl_dsmPrintHwInfo+0x4e>
 800db5a:	4942      	ldr	r1, [pc, #264]	@ (800dc64 <svl_dsmPrintHwInfo+0x148>)
 800db5c:	2049      	movs	r0, #73	@ 0x49
 800db5e:	f008 f83b 	bl	8015bd8 <gos_traceTraceFormatted>
 800db62:	4603      	mov	r3, r0
 800db64:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800db68:	e002      	b.n	800db70 <svl_dsmPrintHwInfo+0x54>
 800db6a:	23ae      	movs	r3, #174	@ 0xae
 800db6c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Board name:    \t%s\r\n", hwInfo.boardName));
 800db70:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db74:	2b55      	cmp	r3, #85	@ 0x55
 800db76:	d109      	bne.n	800db8c <svl_dsmPrintHwInfo+0x70>
 800db78:	1d3b      	adds	r3, r7, #4
 800db7a:	461a      	mov	r2, r3
 800db7c:	493a      	ldr	r1, [pc, #232]	@ (800dc68 <svl_dsmPrintHwInfo+0x14c>)
 800db7e:	2049      	movs	r0, #73	@ 0x49
 800db80:	f008 f82a 	bl	8015bd8 <gos_traceTraceFormatted>
 800db84:	4603      	mov	r3, r0
 800db86:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800db8a:	e002      	b.n	800db92 <svl_dsmPrintHwInfo+0x76>
 800db8c:	23ae      	movs	r3, #174	@ 0xae
 800db8e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:        \t%s\r\n", hwInfo.author));
 800db92:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db96:	2b55      	cmp	r3, #85	@ 0x55
 800db98:	d10a      	bne.n	800dbb0 <svl_dsmPrintHwInfo+0x94>
 800db9a:	1d3b      	adds	r3, r7, #4
 800db9c:	3360      	adds	r3, #96	@ 0x60
 800db9e:	461a      	mov	r2, r3
 800dba0:	4932      	ldr	r1, [pc, #200]	@ (800dc6c <svl_dsmPrintHwInfo+0x150>)
 800dba2:	2049      	movs	r0, #73	@ 0x49
 800dba4:	f008 f818 	bl	8015bd8 <gos_traceTraceFormatted>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dbae:	e002      	b.n	800dbb6 <svl_dsmPrintHwInfo+0x9a>
 800dbb0:	23ae      	movs	r3, #174	@ 0xae
 800dbb2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description:   \t%s\r\n", hwInfo.description));
 800dbb6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dbba:	2b55      	cmp	r3, #85	@ 0x55
 800dbbc:	d10a      	bne.n	800dbd4 <svl_dsmPrintHwInfo+0xb8>
 800dbbe:	1d3b      	adds	r3, r7, #4
 800dbc0:	3390      	adds	r3, #144	@ 0x90
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	492a      	ldr	r1, [pc, #168]	@ (800dc70 <svl_dsmPrintHwInfo+0x154>)
 800dbc6:	2049      	movs	r0, #73	@ 0x49
 800dbc8:	f008 f806 	bl	8015bd8 <gos_traceTraceFormatted>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dbd2:	e002      	b.n	800dbda <svl_dsmPrintHwInfo+0xbe>
 800dbd4:	23ae      	movs	r3, #174	@ 0xae
 800dbd6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Revision:      \t%s\r\n", hwInfo.revision));
 800dbda:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dbde:	2b55      	cmp	r3, #85	@ 0x55
 800dbe0:	d10a      	bne.n	800dbf8 <svl_dsmPrintHwInfo+0xdc>
 800dbe2:	1d3b      	adds	r3, r7, #4
 800dbe4:	3330      	adds	r3, #48	@ 0x30
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	4922      	ldr	r1, [pc, #136]	@ (800dc74 <svl_dsmPrintHwInfo+0x158>)
 800dbea:	2049      	movs	r0, #73	@ 0x49
 800dbec:	f007 fff4 	bl	8015bd8 <gos_traceTraceFormatted>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dbf6:	e002      	b.n	800dbfe <svl_dsmPrintHwInfo+0xe2>
 800dbf8:	23ae      	movs	r3, #174	@ 0xae
 800dbfa:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Serial number: \t%s\r\n", hwInfo.serialNumber));
 800dbfe:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dc02:	2b55      	cmp	r3, #85	@ 0x55
 800dc04:	d10a      	bne.n	800dc1c <svl_dsmPrintHwInfo+0x100>
 800dc06:	1d3b      	adds	r3, r7, #4
 800dc08:	33ca      	adds	r3, #202	@ 0xca
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	491a      	ldr	r1, [pc, #104]	@ (800dc78 <svl_dsmPrintHwInfo+0x15c>)
 800dc0e:	2049      	movs	r0, #73	@ 0x49
 800dc10:	f007 ffe2 	bl	8015bd8 <gos_traceTraceFormatted>
 800dc14:	4603      	mov	r3, r0
 800dc16:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dc1a:	e002      	b.n	800dc22 <svl_dsmPrintHwInfo+0x106>
 800dc1c:	23ae      	movs	r3, #174	@ 0xae
 800dc1e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 800dc22:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dc26:	2b55      	cmp	r3, #85	@ 0x55
 800dc28:	d112      	bne.n	800dc50 <svl_dsmPrintHwInfo+0x134>
 800dc2a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800dc2e:	461a      	mov	r2, r3
 800dc30:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800dc34:	4619      	mov	r1, r3
 800dc36:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	@ 0xc9
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	460b      	mov	r3, r1
 800dc40:	490e      	ldr	r1, [pc, #56]	@ (800dc7c <svl_dsmPrintHwInfo+0x160>)
 800dc42:	2049      	movs	r0, #73	@ 0x49
 800dc44:	f007 ffc8 	bl	8015bd8 <gos_traceTraceFormatted>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dc4e:	e002      	b.n	800dc56 <svl_dsmPrintHwInfo+0x13a>
 800dc50:	23ae      	movs	r3, #174	@ 0xae
 800dc52:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			hwInfo.date.years,
			hwInfo.date.months,
			hwInfo.date.days
			));

	return printResult;
 800dc56:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	080195fc 	.word	0x080195fc
 800dc68:	08019618 	.word	0x08019618
 800dc6c:	08019630 	.word	0x08019630
 800dc70:	08019648 	.word	0x08019648
 800dc74:	08019660 	.word	0x08019660
 800dc78:	08019678 	.word	0x08019678
 800dc7c:	08019690 	.word	0x08019690

0800dc80 <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 800dc86:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800dc88:	2355      	movs	r3, #85	@ 0x55
 800dc8a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 800dc8e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dc92:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dc96:	4618      	mov	r0, r3
 800dc98:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	2100      	movs	r1, #0
 800dca0:	f009 f9ae 	bl	8017000 <memset>

	/*
	 * Function code.
	 */
	//GOS_CONCAT_RESULT(printResult, svl_pdhGetSwInfo(&swInfo)); TODO
	(void_t) svl_pdhGetSwInfo(&swInfo);
 800dca4:	1d3b      	adds	r3, r7, #4
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 fefa 	bl	800eaa0 <svl_pdhGetSwInfo>

	if (strcmp(swInfo.bldSwVerInfo.name, "") != 0)
 800dcac:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dcb0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dcb4:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 8091 	beq.w	800dde0 <svl_dsmPrintAppInfo+0x160>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Bootloader Info"TRACE_FORMAT_RESET"\r\n"));
 800dcbe:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dcc2:	2b55      	cmp	r3, #85	@ 0x55
 800dcc4:	d107      	bne.n	800dcd6 <svl_dsmPrintAppInfo+0x56>
 800dcc6:	4998      	ldr	r1, [pc, #608]	@ (800df28 <svl_dsmPrintAppInfo+0x2a8>)
 800dcc8:	2049      	movs	r0, #73	@ 0x49
 800dcca:	f007 ff85 	bl	8015bd8 <gos_traceTraceFormatted>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dcd4:	e002      	b.n	800dcdc <svl_dsmPrintAppInfo+0x5c>
 800dcd6:	23ae      	movs	r3, #174	@ 0xae
 800dcd8:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.bldSwVerInfo.name));
 800dcdc:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dce0:	2b55      	cmp	r3, #85	@ 0x55
 800dce2:	d10a      	bne.n	800dcfa <svl_dsmPrintAppInfo+0x7a>
 800dce4:	1d3b      	adds	r3, r7, #4
 800dce6:	33b0      	adds	r3, #176	@ 0xb0
 800dce8:	461a      	mov	r2, r3
 800dcea:	4990      	ldr	r1, [pc, #576]	@ (800df2c <svl_dsmPrintAppInfo+0x2ac>)
 800dcec:	2049      	movs	r0, #73	@ 0x49
 800dcee:	f007 ff73 	bl	8015bd8 <gos_traceTraceFormatted>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dcf8:	e002      	b.n	800dd00 <svl_dsmPrintAppInfo+0x80>
 800dcfa:	23ae      	movs	r3, #174	@ 0xae
 800dcfc:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.bldSwVerInfo.description));
 800dd00:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dd04:	2b55      	cmp	r3, #85	@ 0x55
 800dd06:	d10a      	bne.n	800dd1e <svl_dsmPrintAppInfo+0x9e>
 800dd08:	1d3b      	adds	r3, r7, #4
 800dd0a:	33e0      	adds	r3, #224	@ 0xe0
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4988      	ldr	r1, [pc, #544]	@ (800df30 <svl_dsmPrintAppInfo+0x2b0>)
 800dd10:	2049      	movs	r0, #73	@ 0x49
 800dd12:	f007 ff61 	bl	8015bd8 <gos_traceTraceFormatted>
 800dd16:	4603      	mov	r3, r0
 800dd18:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dd1c:	e002      	b.n	800dd24 <svl_dsmPrintAppInfo+0xa4>
 800dd1e:	23ae      	movs	r3, #174	@ 0xae
 800dd20:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.bldSwVerInfo.major, swInfo.bldSwVerInfo.minor, swInfo.bldSwVerInfo.build));
 800dd24:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dd28:	2b55      	cmp	r3, #85	@ 0x55
 800dd2a:	d11d      	bne.n	800dd68 <svl_dsmPrintAppInfo+0xe8>
 800dd2c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd30:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd34:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800dd38:	461a      	mov	r2, r3
 800dd3a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd3e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd42:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800dd46:	4619      	mov	r1, r3
 800dd48:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd4c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd50:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	460b      	mov	r3, r1
 800dd58:	4976      	ldr	r1, [pc, #472]	@ (800df34 <svl_dsmPrintAppInfo+0x2b4>)
 800dd5a:	2049      	movs	r0, #73	@ 0x49
 800dd5c:	f007 ff3c 	bl	8015bd8 <gos_traceTraceFormatted>
 800dd60:	4603      	mov	r3, r0
 800dd62:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dd66:	e002      	b.n	800dd6e <svl_dsmPrintAppInfo+0xee>
 800dd68:	23ae      	movs	r3, #174	@ 0xae
 800dd6a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.bldSwVerInfo.date.years, swInfo.bldSwVerInfo.date.months, swInfo.bldSwVerInfo.date.days));
 800dd6e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dd72:	2b55      	cmp	r3, #85	@ 0x55
 800dd74:	d11e      	bne.n	800ddb4 <svl_dsmPrintAppInfo+0x134>
 800dd76:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd7a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd7e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800dd82:	461a      	mov	r2, r3
 800dd84:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd88:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd8c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800dd90:	4619      	mov	r1, r3
 800dd92:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd96:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd9a:	f8b3 30ab 	ldrh.w	r3, [r3, #171]	@ 0xab
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	460b      	mov	r3, r1
 800dda4:	4964      	ldr	r1, [pc, #400]	@ (800df38 <svl_dsmPrintAppInfo+0x2b8>)
 800dda6:	2049      	movs	r0, #73	@ 0x49
 800dda8:	f007 ff16 	bl	8015bd8 <gos_traceTraceFormatted>
 800ddac:	4603      	mov	r3, r0
 800ddae:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800ddb2:	e002      	b.n	800ddba <svl_dsmPrintAppInfo+0x13a>
 800ddb4:	23ae      	movs	r3, #174	@ 0xae
 800ddb6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.bldSwVerInfo.author));
 800ddba:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800ddbe:	2b55      	cmp	r3, #85	@ 0x55
 800ddc0:	d10b      	bne.n	800ddda <svl_dsmPrintAppInfo+0x15a>
 800ddc2:	1d3b      	adds	r3, r7, #4
 800ddc4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ddc8:	461a      	mov	r2, r3
 800ddca:	495c      	ldr	r1, [pc, #368]	@ (800df3c <svl_dsmPrintAppInfo+0x2bc>)
 800ddcc:	2049      	movs	r0, #73	@ 0x49
 800ddce:	f007 ff03 	bl	8015bd8 <gos_traceTraceFormatted>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800ddd8:	e002      	b.n	800dde0 <svl_dsmPrintAppInfo+0x160>
 800ddda:	23ae      	movs	r3, #174	@ 0xae
 800dddc:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Bootloader does not exist.
	}

	if (strcmp(swInfo.appSwVerInfo.name, "") != 0)
 800dde0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dde4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dde8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 8093 	beq.w	800df18 <svl_dsmPrintAppInfo+0x298>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n"));
 800ddf2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800ddf6:	2b55      	cmp	r3, #85	@ 0x55
 800ddf8:	d107      	bne.n	800de0a <svl_dsmPrintAppInfo+0x18a>
 800ddfa:	4951      	ldr	r1, [pc, #324]	@ (800df40 <svl_dsmPrintAppInfo+0x2c0>)
 800ddfc:	2049      	movs	r0, #73	@ 0x49
 800ddfe:	f007 feeb 	bl	8015bd8 <gos_traceTraceFormatted>
 800de02:	4603      	mov	r3, r0
 800de04:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de08:	e002      	b.n	800de10 <svl_dsmPrintAppInfo+0x190>
 800de0a:	23ae      	movs	r3, #174	@ 0xae
 800de0c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name));
 800de10:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de14:	2b55      	cmp	r3, #85	@ 0x55
 800de16:	d10b      	bne.n	800de30 <svl_dsmPrintAppInfo+0x1b0>
 800de18:	1d3b      	adds	r3, r7, #4
 800de1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800de1e:	461a      	mov	r2, r3
 800de20:	4942      	ldr	r1, [pc, #264]	@ (800df2c <svl_dsmPrintAppInfo+0x2ac>)
 800de22:	2049      	movs	r0, #73	@ 0x49
 800de24:	f007 fed8 	bl	8015bd8 <gos_traceTraceFormatted>
 800de28:	4603      	mov	r3, r0
 800de2a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de2e:	e002      	b.n	800de36 <svl_dsmPrintAppInfo+0x1b6>
 800de30:	23ae      	movs	r3, #174	@ 0xae
 800de32:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description));
 800de36:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de3a:	2b55      	cmp	r3, #85	@ 0x55
 800de3c:	d10b      	bne.n	800de56 <svl_dsmPrintAppInfo+0x1d6>
 800de3e:	1d3b      	adds	r3, r7, #4
 800de40:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800de44:	461a      	mov	r2, r3
 800de46:	493a      	ldr	r1, [pc, #232]	@ (800df30 <svl_dsmPrintAppInfo+0x2b0>)
 800de48:	2049      	movs	r0, #73	@ 0x49
 800de4a:	f007 fec5 	bl	8015bd8 <gos_traceTraceFormatted>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de54:	e002      	b.n	800de5c <svl_dsmPrintAppInfo+0x1dc>
 800de56:	23ae      	movs	r3, #174	@ 0xae
 800de58:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build));
 800de5c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de60:	2b55      	cmp	r3, #85	@ 0x55
 800de62:	d11d      	bne.n	800dea0 <svl_dsmPrintAppInfo+0x220>
 800de64:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800de68:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800de6c:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
 800de70:	461a      	mov	r2, r3
 800de72:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800de76:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800de7a:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
 800de7e:	4619      	mov	r1, r3
 800de80:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800de84:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800de88:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	460b      	mov	r3, r1
 800de90:	4928      	ldr	r1, [pc, #160]	@ (800df34 <svl_dsmPrintAppInfo+0x2b4>)
 800de92:	2049      	movs	r0, #73	@ 0x49
 800de94:	f007 fea0 	bl	8015bd8 <gos_traceTraceFormatted>
 800de98:	4603      	mov	r3, r0
 800de9a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de9e:	e002      	b.n	800dea6 <svl_dsmPrintAppInfo+0x226>
 800dea0:	23ae      	movs	r3, #174	@ 0xae
 800dea2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days));
 800dea6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800deaa:	2b55      	cmp	r3, #85	@ 0x55
 800deac:	d11e      	bne.n	800deec <svl_dsmPrintAppInfo+0x26c>
 800deae:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800deb2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800deb6:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 800deba:	461a      	mov	r2, r3
 800debc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dec0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dec4:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 800dec8:	4619      	mov	r1, r3
 800deca:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dece:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800ded2:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	460b      	mov	r3, r1
 800dedc:	4916      	ldr	r1, [pc, #88]	@ (800df38 <svl_dsmPrintAppInfo+0x2b8>)
 800dede:	2049      	movs	r0, #73	@ 0x49
 800dee0:	f007 fe7a 	bl	8015bd8 <gos_traceTraceFormatted>
 800dee4:	4603      	mov	r3, r0
 800dee6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800deea:	e002      	b.n	800def2 <svl_dsmPrintAppInfo+0x272>
 800deec:	23ae      	movs	r3, #174	@ 0xae
 800deee:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author));
 800def2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800def6:	2b55      	cmp	r3, #85	@ 0x55
 800def8:	d10b      	bne.n	800df12 <svl_dsmPrintAppInfo+0x292>
 800defa:	1d3b      	adds	r3, r7, #4
 800defc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df00:	461a      	mov	r2, r3
 800df02:	490e      	ldr	r1, [pc, #56]	@ (800df3c <svl_dsmPrintAppInfo+0x2bc>)
 800df04:	2049      	movs	r0, #73	@ 0x49
 800df06:	f007 fe67 	bl	8015bd8 <gos_traceTraceFormatted>
 800df0a:	4603      	mov	r3, r0
 800df0c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800df10:	e002      	b.n	800df18 <svl_dsmPrintAppInfo+0x298>
 800df12:	23ae      	movs	r3, #174	@ 0xae
 800df14:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Application does not exist.
	}

	return printResult;
 800df18:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	080196b4 	.word	0x080196b4
 800df2c:	08019580 	.word	0x08019580
 800df30:	08019594 	.word	0x08019594
 800df34:	080195a8 	.word	0x080195a8
 800df38:	080195c8 	.word	0x080195c8
 800df3c:	080195e8 	.word	0x080195e8
 800df40:	080196d4 	.word	0x080196d4

0800df44 <svl_dsmDaemonTask>:
 *          it activates the related reactions - if any.
 *
 * @return  -
 */
GOS_STATIC void_t svl_dsmDaemonTask (void_t)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 800df4a:	2300      	movs	r3, #0
 800df4c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Disable scheduling to keep printed info consistent.
	GOS_DISABLE_SCHED
 800df4e:	4b32      	ldr	r3, [pc, #200]	@ (800e018 <svl_dsmDaemonTask+0xd4>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	b2da      	uxtb	r2, r3
 800df56:	4b30      	ldr	r3, [pc, #192]	@ (800e018 <svl_dsmDaemonTask+0xd4>)
 800df58:	701a      	strb	r2, [r3, #0]

	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 800df5a:	f7ff fd17 	bl	800d98c <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 800df5e:	f7ff fd3d 	bl	800d9dc <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 800df62:	f7ff fddb 	bl	800db1c <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 800df66:	f7ff fe8b 	bl	800dc80 <svl_dsmPrintAppInfo>

	// Enable scheduling, data printed.
	GOS_ENABLE_SCHED
 800df6a:	4b2b      	ldr	r3, [pc, #172]	@ (800e018 <svl_dsmDaemonTask+0xd4>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d005      	beq.n	800df7e <svl_dsmDaemonTask+0x3a>
 800df72:	4b29      	ldr	r3, [pc, #164]	@ (800e018 <svl_dsmDaemonTask+0xd4>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	3b01      	subs	r3, #1
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	4b27      	ldr	r3, [pc, #156]	@ (800e018 <svl_dsmDaemonTask+0xd4>)
 800df7c:	701a      	strb	r2, [r3, #0]

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 800df7e:	4b27      	ldr	r3, [pc, #156]	@ (800e01c <svl_dsmDaemonTask+0xd8>)
 800df80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df82:	21c8      	movs	r1, #200	@ 0xc8
 800df84:	4618      	mov	r0, r3
 800df86:	f004 fa1b 	bl	80123c0 <gos_taskSetPriority>
 800df8a:	2301      	movs	r3, #1
 800df8c:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 800df8e:	4b24      	ldr	r3, [pc, #144]	@ (800e020 <svl_dsmDaemonTask+0xdc>)
 800df90:	781a      	ldrb	r2, [r3, #0]
 800df92:	4b24      	ldr	r3, [pc, #144]	@ (800e024 <svl_dsmDaemonTask+0xe0>)
 800df94:	701a      	strb	r2, [r3, #0]
	deviceState     = requiredState;
 800df96:	4a22      	ldr	r2, [pc, #136]	@ (800e020 <svl_dsmDaemonTask+0xdc>)
 800df98:	79bb      	ldrb	r3, [r7, #6]
 800df9a:	7013      	strb	r3, [r2, #0]
}
 800df9c:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800df9e:	4b21      	ldr	r3, [pc, #132]	@ (800e024 <svl_dsmDaemonTask+0xe0>)
 800dfa0:	781a      	ldrb	r2, [r3, #0]
 800dfa2:	4b1f      	ldr	r3, [pc, #124]	@ (800e020 <svl_dsmDaemonTask+0xdc>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d031      	beq.n	800e00e <svl_dsmDaemonTask+0xca>
 800dfaa:	4b1f      	ldr	r3, [pc, #124]	@ (800e028 <svl_dsmDaemonTask+0xe4>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d02d      	beq.n	800e00e <svl_dsmDaemonTask+0xca>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	71fb      	strb	r3, [r7, #7]
 800dfb6:	e020      	b.n	800dffa <svl_dsmDaemonTask+0xb6>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	4a1c      	ldr	r2, [pc, #112]	@ (800e02c <svl_dsmDaemonTask+0xe8>)
 800dfbc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dfc0:	4b18      	ldr	r3, [pc, #96]	@ (800e024 <svl_dsmDaemonTask+0xe0>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d115      	bne.n	800dff4 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].currState == deviceState &&
 800dfc8:	79fb      	ldrb	r3, [r7, #7]
 800dfca:	4a18      	ldr	r2, [pc, #96]	@ (800e02c <svl_dsmDaemonTask+0xe8>)
 800dfcc:	00db      	lsls	r3, r3, #3
 800dfce:	4413      	add	r3, r2
 800dfd0:	785a      	ldrb	r2, [r3, #1]
 800dfd2:	4b13      	ldr	r3, [pc, #76]	@ (800e020 <svl_dsmDaemonTask+0xdc>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d10c      	bne.n	800dff4 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].pReaction != NULL)
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	4a13      	ldr	r2, [pc, #76]	@ (800e02c <svl_dsmDaemonTask+0xe8>)
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	4413      	add	r3, r2
 800dfe2:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d005      	beq.n	800dff4 <svl_dsmDaemonTask+0xb0>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 800dfe8:	79fb      	ldrb	r3, [r7, #7]
 800dfea:	4a10      	ldr	r2, [pc, #64]	@ (800e02c <svl_dsmDaemonTask+0xe8>)
 800dfec:	00db      	lsls	r3, r3, #3
 800dfee:	4413      	add	r3, r2
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	3301      	adds	r3, #1
 800dff8:	71fb      	strb	r3, [r7, #7]
 800dffa:	79fa      	ldrb	r2, [r7, #7]
 800dffc:	4b0a      	ldr	r3, [pc, #40]	@ (800e028 <svl_dsmDaemonTask+0xe4>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	08db      	lsrs	r3, r3, #3
 800e002:	429a      	cmp	r2, r3
 800e004:	d3d8      	bcc.n	800dfb8 <svl_dsmDaemonTask+0x74>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 800e006:	4b06      	ldr	r3, [pc, #24]	@ (800e020 <svl_dsmDaemonTask+0xdc>)
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	4b06      	ldr	r3, [pc, #24]	@ (800e024 <svl_dsmDaemonTask+0xe0>)
 800e00c:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 800e00e:	2014      	movs	r0, #20
 800e010:	f003 fb8e 	bl	8011730 <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800e014:	e7c3      	b.n	800df9e <svl_dsmDaemonTask+0x5a>
 800e016:	bf00      	nop
 800e018:	20005e45 	.word	0x20005e45
 800e01c:	20000530 	.word	0x20000530
 800e020:	20003b56 	.word	0x20003b56
 800e024:	20003b57 	.word	0x20003b57
 800e028:	2000169c 	.word	0x2000169c
 800e02c:	0801a6c4 	.word	0x0801a6c4

0800e030 <svl_iplInit>:

/*
 * Function: svl_iplInit
 */
gos_result_t svl_iplInit (void_t)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 800e036:	23ae      	movs	r3, #174	@ 0xae
 800e038:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIplTaskDesc, NULL);
 800e03a:	2100      	movs	r1, #0
 800e03c:	4804      	ldr	r0, [pc, #16]	@ (800e050 <svl_iplInit+0x20>)
 800e03e:	f003 f9e5 	bl	801140c <gos_taskRegister>
 800e042:	4603      	mov	r3, r0
 800e044:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800e046:	79fb      	ldrb	r3, [r7, #7]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	2000059c 	.word	0x2000059c

0800e054 <svl_iplRegisterUserMsg>:

/*
 * Function: svl_iplRegisterUserMsg
 */
gos_result_t svl_iplRegisterUserMsg (svl_iplUserMsgDesc_t* pUserMsgDesc)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t registerResult = GOS_ERROR;
 800e05c:	23ae      	movs	r3, #174	@ 0xae
 800e05e:	73fb      	strb	r3, [r7, #15]
	u8_t         lutIndex       = 0u;
 800e060:	2300      	movs	r3, #0
 800e062:	73bb      	strb	r3, [r7, #14]

	/*
	 * Function code.
	 */
	if (pUserMsgDesc != NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d01b      	beq.n	800e0a2 <svl_iplRegisterUserMsg+0x4e>
	{
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e06a:	2300      	movs	r3, #0
 800e06c:	73bb      	strb	r3, [r7, #14]
 800e06e:	e015      	b.n	800e09c <svl_iplRegisterUserMsg+0x48>
		{
			if (userMsgLut[lutIndex].callback == NULL)
 800e070:	7bbb      	ldrb	r3, [r7, #14]
 800e072:	4a0e      	ldr	r2, [pc, #56]	@ (800e0ac <svl_iplRegisterUserMsg+0x58>)
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	4413      	add	r3, r2
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10b      	bne.n	800e096 <svl_iplRegisterUserMsg+0x42>
			{
				(void_t) memcpy((void_t*)&userMsgLut[lutIndex], (void_t*)pUserMsgDesc, sizeof(*pUserMsgDesc));
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
 800e080:	00db      	lsls	r3, r3, #3
 800e082:	4a0a      	ldr	r2, [pc, #40]	@ (800e0ac <svl_iplRegisterUserMsg+0x58>)
 800e084:	4413      	add	r3, r2
 800e086:	2208      	movs	r2, #8
 800e088:	6879      	ldr	r1, [r7, #4]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f009 f84f 	bl	801712e <memcpy>
				registerResult = GOS_SUCCESS;
 800e090:	2355      	movs	r3, #85	@ 0x55
 800e092:	73fb      	strb	r3, [r7, #15]
				break;
 800e094:	e005      	b.n	800e0a2 <svl_iplRegisterUserMsg+0x4e>
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	3301      	adds	r3, #1
 800e09a:	73bb      	strb	r3, [r7, #14]
 800e09c:	7bbb      	ldrb	r3, [r7, #14]
 800e09e:	2b0f      	cmp	r3, #15
 800e0a0:	d9e6      	bls.n	800e070 <svl_iplRegisterUserMsg+0x1c>
	else
	{
		// NULL pointer.
	}

	return registerResult;
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20005110 	.word	0x20005110

0800e0b0 <svl_iplConfigure>:

/*
 * Function: svl_iplConfigure
 */
gos_result_t svl_iplConfigure (svl_iplTransmitFunction transmitFunc, svl_iplReceiveFunction receiveFunc)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_ERROR;
 800e0ba:	23ae      	movs	r3, #174	@ 0xae
 800e0bc:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	svl_iplTransmit = transmitFunc;
 800e0be:	4a0f      	ldr	r2, [pc, #60]	@ (800e0fc <svl_iplConfigure+0x4c>)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6013      	str	r3, [r2, #0]
	svl_iplReceive  = receiveFunc;
 800e0c4:	4a0e      	ldr	r2, [pc, #56]	@ (800e100 <svl_iplConfigure+0x50>)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	6013      	str	r3, [r2, #0]

	// Set IPL state machine based on NULL pointer check.
	if (svl_iplTransmit != NULL && svl_iplReceive != NULL)
 800e0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e0fc <svl_iplConfigure+0x4c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d009      	beq.n	800e0e6 <svl_iplConfigure+0x36>
 800e0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e100 <svl_iplConfigure+0x50>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d005      	beq.n	800e0e6 <svl_iplConfigure+0x36>
	{
		iplState = SVL_IPL_STATE_DISCOVER_START;
 800e0da:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <svl_iplConfigure+0x54>)
 800e0dc:	2201      	movs	r2, #1
 800e0de:	701a      	strb	r2, [r3, #0]
		configureResult = GOS_SUCCESS;
 800e0e0:	2355      	movs	r3, #85	@ 0x55
 800e0e2:	73fb      	strb	r3, [r7, #15]
 800e0e4:	e002      	b.n	800e0ec <svl_iplConfigure+0x3c>
	}
	else
	{
		iplState = SVL_IPL_STATE_NOT_CONFIGURED;
 800e0e6:	4b07      	ldr	r3, [pc, #28]	@ (800e104 <svl_iplConfigure+0x54>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	701a      	strb	r2, [r3, #0]
	}

	return configureResult;
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	20005190 	.word	0x20005190
 800e100:	20005194 	.word	0x20005194
 800e104:	20003b58 	.word	0x20003b58

0800e108 <svl_iplSendMessage>:

/*
 * Function: svl_iplSendMessage
 */
gos_result_t svl_iplSendMessage (u32_t msgId, u8_t* pData, u32_t dataLength)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	@ 0x28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t       sendResult = GOS_ERROR;
 800e114:	23ae      	movs	r3, #174	@ 0xae
 800e116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	svl_iplMsgHeader_t header;

	/*
	 * Function code.
	 */
	header.messageId     = msgId;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	617b      	str	r3, [r7, #20]
	header.messageLength = dataLength;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	61bb      	str	r3, [r7, #24]

	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800e122:	f107 0314 	add.w	r3, r7, #20
 800e126:	330c      	adds	r3, #12
 800e128:	461a      	mov	r2, r3
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	68b8      	ldr	r0, [r7, #8]
 800e12e:	f7fb fe89 	bl	8009e44 <drv_crcGetCrc32>
 800e132:	4603      	mov	r3, r0
 800e134:	2b55      	cmp	r3, #85	@ 0x55
 800e136:	d117      	bne.n	800e168 <svl_iplSendMessage+0x60>
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800e138:	4b0e      	ldr	r3, [pc, #56]	@ (800e174 <svl_iplSendMessage+0x6c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f107 0014 	add.w	r0, r7, #20
 800e140:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e144:	2110      	movs	r1, #16
 800e146:	4798      	blx	r3
 800e148:	4603      	mov	r3, r0
	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800e14a:	2b55      	cmp	r3, #85	@ 0x55
 800e14c:	d10c      	bne.n	800e168 <svl_iplSendMessage+0x60>
		svl_iplTransmit(pData, dataLength, 1000u) == GOS_SUCCESS)
 800e14e:	4b09      	ldr	r3, [pc, #36]	@ (800e174 <svl_iplSendMessage+0x6c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e156:	6879      	ldr	r1, [r7, #4]
 800e158:	68b8      	ldr	r0, [r7, #8]
 800e15a:	4798      	blx	r3
 800e15c:	4603      	mov	r3, r0
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800e15e:	2b55      	cmp	r3, #85	@ 0x55
 800e160:	d102      	bne.n	800e168 <svl_iplSendMessage+0x60>
	{
		sendResult = GOS_SUCCESS;
 800e162:	2355      	movs	r3, #85	@ 0x55
 800e164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	else
	{
		// Error.
	}

	return sendResult;
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3728      	adds	r7, #40	@ 0x28
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	20005190 	.word	0x20005190

0800e178 <svl_iplDaemon>:
 * @details Handles IPL state machine and incoming IPL messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_iplDaemon (void_t)
{
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b087      	sub	sp, #28
 800e17c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t               lutIndex = 0u;
 800e17e:	2300      	movs	r3, #0
 800e180:	75fb      	strb	r3, [r7, #23]
	/*
	 * Function code.
	 */
	for (;;)
	{
		switch (iplState)
 800e182:	4b9b      	ldr	r3, [pc, #620]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b07      	cmp	r3, #7
 800e188:	f200 8352 	bhi.w	800e830 <svl_iplDaemon+0x6b8>
 800e18c:	a201      	add	r2, pc, #4	@ (adr r2, 800e194 <svl_iplDaemon+0x1c>)
 800e18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e192:	bf00      	nop
 800e194:	0800e831 	.word	0x0800e831
 800e198:	0800e1b5 	.word	0x0800e1b5
 800e19c:	0800e1e3 	.word	0x0800e1e3
 800e1a0:	0800e293 	.word	0x0800e293
 800e1a4:	0800e29b 	.word	0x0800e29b
 800e1a8:	0800e33f 	.word	0x0800e33f
 800e1ac:	0800e347 	.word	0x0800e347
 800e1b0:	0800e421 	.word	0x0800e421
				// Wait until transmit and receive functions are registered.
				break;
			}
			case SVL_IPL_STATE_DISCOVER_START:
			{
				attemptCount++;
 800e1b4:	4b8f      	ldr	r3, [pc, #572]	@ (800e3f4 <svl_iplDaemon+0x27c>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	4b8d      	ldr	r3, [pc, #564]	@ (800e3f4 <svl_iplDaemon+0x27c>)
 800e1be:	701a      	strb	r2, [r3, #0]

				if (attemptCount <= SVL_IPL_MAX_ATTEMPTS)
 800e1c0:	4b8c      	ldr	r3, [pc, #560]	@ (800e3f4 <svl_iplDaemon+0x27c>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b05      	cmp	r3, #5
 800e1c6:	d803      	bhi.n	800e1d0 <svl_iplDaemon+0x58>
				{
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery start...\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER;
 800e1c8:	4b89      	ldr	r3, [pc, #548]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);

					// If task gets resumed externally, restart state-machine.
					attemptCount = 0u;
				}
				break;
 800e1ce:	e32f      	b.n	800e830 <svl_iplDaemon+0x6b8>
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);
 800e1d0:	4b89      	ldr	r3, [pc, #548]	@ (800e3f8 <svl_iplDaemon+0x280>)
 800e1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f003 fc03 	bl	80119e0 <gos_taskSuspend>
					attemptCount = 0u;
 800e1da:	4b86      	ldr	r3, [pc, #536]	@ (800e3f4 <svl_iplDaemon+0x27c>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
				break;
 800e1e0:	e326      	b.n	800e830 <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_DISCOVER:
			{
				msgHeader.messageId     = IPL_MSG_ID_DISCOVERY;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(discoveryMsg);
 800e1e6:	2340      	movs	r3, #64	@ 0x40
 800e1e8:	60bb      	str	r3, [r7, #8]

				(void_t) strcpy(discoveryMsg.masterDeviceId, "STM32F446-0001");
 800e1ea:	4a84      	ldr	r2, [pc, #528]	@ (800e3fc <svl_iplDaemon+0x284>)
 800e1ec:	4b84      	ldr	r3, [pc, #528]	@ (800e400 <svl_iplDaemon+0x288>)
 800e1ee:	4614      	mov	r4, r2
 800e1f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1f2:	c407      	stmia	r4!, {r0, r1, r2}
 800e1f4:	8023      	strh	r3, [r4, #0]
 800e1f6:	3402      	adds	r4, #2
 800e1f8:	0c1b      	lsrs	r3, r3, #16
 800e1fa:	7023      	strb	r3, [r4, #0]
				(void_t) drv_crcGetCrc32((u8_t*)&discoveryMsg, sizeof(discoveryMsg), &msgHeader.messageCrc);
 800e1fc:	1d3b      	adds	r3, r7, #4
 800e1fe:	330c      	adds	r3, #12
 800e200:	461a      	mov	r2, r3
 800e202:	2140      	movs	r1, #64	@ 0x40
 800e204:	487d      	ldr	r0, [pc, #500]	@ (800e3fc <svl_iplDaemon+0x284>)
 800e206:	f7fb fe1d 	bl	8009e44 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e20a:	4b7e      	ldr	r3, [pc, #504]	@ (800e404 <svl_iplDaemon+0x28c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	1d38      	adds	r0, r7, #4
 800e210:	2264      	movs	r2, #100	@ 0x64
 800e212:	2110      	movs	r1, #16
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	2b55      	cmp	r3, #85	@ 0x55
 800e21a:	d132      	bne.n	800e282 <svl_iplDaemon+0x10a>
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 800e21c:	4b79      	ldr	r3, [pc, #484]	@ (800e404 <svl_iplDaemon+0x28c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2264      	movs	r2, #100	@ 0x64
 800e222:	2140      	movs	r1, #64	@ 0x40
 800e224:	4875      	ldr	r0, [pc, #468]	@ (800e3fc <svl_iplDaemon+0x284>)
 800e226:	4798      	blx	r3
 800e228:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e22a:	2b55      	cmp	r3, #85	@ 0x55
 800e22c:	d129      	bne.n	800e282 <svl_iplDaemon+0x10a>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e22e:	4b76      	ldr	r3, [pc, #472]	@ (800e408 <svl_iplDaemon+0x290>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	1d38      	adds	r0, r7, #4
 800e234:	22c8      	movs	r2, #200	@ 0xc8
 800e236:	2110      	movs	r1, #16
 800e238:	4798      	blx	r3
 800e23a:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 800e23c:	2b55      	cmp	r3, #85	@ 0x55
 800e23e:	d120      	bne.n	800e282 <svl_iplDaemon+0x10a>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e240:	4b71      	ldr	r3, [pc, #452]	@ (800e408 <svl_iplDaemon+0x290>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68b9      	ldr	r1, [r7, #8]
 800e246:	22c8      	movs	r2, #200	@ 0xc8
 800e248:	4870      	ldr	r0, [pc, #448]	@ (800e40c <svl_iplDaemon+0x294>)
 800e24a:	4798      	blx	r3
 800e24c:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e24e:	2b55      	cmp	r3, #85	@ 0x55
 800e250:	d117      	bne.n	800e282 <svl_iplDaemon+0x10a>
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800e252:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e254:	f640 2201 	movw	r2, #2561	@ 0xa01
 800e258:	4293      	cmp	r3, r2
 800e25a:	d112      	bne.n	800e282 <svl_iplDaemon+0x10a>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e25c:	68b9      	ldr	r1, [r7, #8]
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	2300      	movs	r3, #0
 800e262:	486a      	ldr	r0, [pc, #424]	@ (800e40c <svl_iplDaemon+0x294>)
 800e264:	f7fb fe3a 	bl	8009edc <drv_crcCheckCrc32>
 800e268:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800e26a:	2bca      	cmp	r3, #202	@ 0xca
 800e26c:	d109      	bne.n	800e282 <svl_iplDaemon+0x10a>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&discoveryMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	461a      	mov	r2, r3
 800e272:	4966      	ldr	r1, [pc, #408]	@ (800e40c <svl_iplDaemon+0x294>)
 800e274:	4861      	ldr	r0, [pc, #388]	@ (800e3fc <svl_iplDaemon+0x284>)
 800e276:	f008 ff5a 	bl	801712e <memcpy>
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL device discovered: %s\r\n", discoveryMsg.slaveDeviceId);
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
 800e27a:	4b5d      	ldr	r3, [pc, #372]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e27c:	2203      	movs	r2, #3
 800e27e:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800e280:	e2d6      	b.n	800e830 <svl_iplDaemon+0x6b8>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800e282:	4b5b      	ldr	r3, [pc, #364]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e284:	2201      	movs	r2, #1
 800e286:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 800e288:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e28c:	f003 fa50 	bl	8011730 <gos_taskSleep>
				break;
 800e290:	e2ce      	b.n	800e830 <svl_iplDaemon+0x6b8>
			case SVL_IPL_STATE_CONFIG_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Configuring device...\r\n");
#endif
				iplState = SVL_IPL_STATE_CONFIG;
 800e292:	4b57      	ldr	r3, [pc, #348]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e294:	2204      	movs	r2, #4
 800e296:	701a      	strb	r2, [r3, #0]
				break;
 800e298:	e2ca      	b.n	800e830 <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_CONFIG:
			{
				(void_t) svl_pdhGetWifiCfg(&devConfigMsg);
 800e29a:	485d      	ldr	r0, [pc, #372]	@ (800e410 <svl_iplDaemon+0x298>)
 800e29c:	f000 fca8 	bl	800ebf0 <svl_pdhGetWifiCfg>

				msgHeader.messageId     = IPL_MSG_ID_CONFIG;
 800e2a0:	2311      	movs	r3, #17
 800e2a2:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(devConfigMsg);
 800e2a4:	236e      	movs	r3, #110	@ 0x6e
 800e2a6:	60bb      	str	r3, [r7, #8]

				(void_t) drv_crcGetCrc32((u8_t*)&devConfigMsg, sizeof(devConfigMsg), &msgHeader.messageCrc);
 800e2a8:	1d3b      	adds	r3, r7, #4
 800e2aa:	330c      	adds	r3, #12
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	216e      	movs	r1, #110	@ 0x6e
 800e2b0:	4857      	ldr	r0, [pc, #348]	@ (800e410 <svl_iplDaemon+0x298>)
 800e2b2:	f7fb fdc7 	bl	8009e44 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e2b6:	4b53      	ldr	r3, [pc, #332]	@ (800e404 <svl_iplDaemon+0x28c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	1d38      	adds	r0, r7, #4
 800e2bc:	2264      	movs	r2, #100	@ 0x64
 800e2be:	2110      	movs	r1, #16
 800e2c0:	4798      	blx	r3
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b55      	cmp	r3, #85	@ 0x55
 800e2c6:	d132      	bne.n	800e32e <svl_iplDaemon+0x1b6>
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       100u) == GOS_SUCCESS &&
 800e2c8:	4b4e      	ldr	r3, [pc, #312]	@ (800e404 <svl_iplDaemon+0x28c>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2264      	movs	r2, #100	@ 0x64
 800e2ce:	216e      	movs	r1, #110	@ 0x6e
 800e2d0:	484f      	ldr	r0, [pc, #316]	@ (800e410 <svl_iplDaemon+0x298>)
 800e2d2:	4798      	blx	r3
 800e2d4:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e2d6:	2b55      	cmp	r3, #85	@ 0x55
 800e2d8:	d129      	bne.n	800e32e <svl_iplDaemon+0x1b6>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e2da:	4b4b      	ldr	r3, [pc, #300]	@ (800e408 <svl_iplDaemon+0x290>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	1d38      	adds	r0, r7, #4
 800e2e0:	22c8      	movs	r2, #200	@ 0xc8
 800e2e2:	2110      	movs	r1, #16
 800e2e4:	4798      	blx	r3
 800e2e6:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       100u) == GOS_SUCCESS &&
 800e2e8:	2b55      	cmp	r3, #85	@ 0x55
 800e2ea:	d120      	bne.n	800e32e <svl_iplDaemon+0x1b6>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e2ec:	4b46      	ldr	r3, [pc, #280]	@ (800e408 <svl_iplDaemon+0x290>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68b9      	ldr	r1, [r7, #8]
 800e2f2:	22c8      	movs	r2, #200	@ 0xc8
 800e2f4:	4845      	ldr	r0, [pc, #276]	@ (800e40c <svl_iplDaemon+0x294>)
 800e2f6:	4798      	blx	r3
 800e2f8:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e2fa:	2b55      	cmp	r3, #85	@ 0x55
 800e2fc:	d117      	bne.n	800e32e <svl_iplDaemon+0x1b6>
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800e2fe:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e300:	f640 2211 	movw	r2, #2577	@ 0xa11
 800e304:	4293      	cmp	r3, r2
 800e306:	d112      	bne.n	800e32e <svl_iplDaemon+0x1b6>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e308:	68b9      	ldr	r1, [r7, #8]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	2300      	movs	r3, #0
 800e30e:	483f      	ldr	r0, [pc, #252]	@ (800e40c <svl_iplDaemon+0x294>)
 800e310:	f7fb fde4 	bl	8009edc <drv_crcCheckCrc32>
 800e314:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800e316:	2bca      	cmp	r3, #202	@ 0xca
 800e318:	d109      	bne.n	800e32e <svl_iplDaemon+0x1b6>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&receivedDevConfigMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	461a      	mov	r2, r3
 800e31e:	493b      	ldr	r1, [pc, #236]	@ (800e40c <svl_iplDaemon+0x294>)
 800e320:	483c      	ldr	r0, [pc, #240]	@ (800e414 <svl_iplDaemon+0x29c>)
 800e322:	f008 ff04 	bl	801712e <memcpy>
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
						);
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 800e326:	4b32      	ldr	r3, [pc, #200]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e328:	2205      	movs	r2, #5
 800e32a:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800e32c:	e280      	b.n	800e830 <svl_iplDaemon+0x6b8>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800e32e:	4b30      	ldr	r3, [pc, #192]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e330:	2201      	movs	r2, #1
 800e332:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 800e334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e338:	f003 f9fa 	bl	8011730 <gos_taskSleep>
				break;
 800e33c:	e278      	b.n	800e830 <svl_iplDaemon+0x6b8>
			case SVL_IPL_STATE_CONNECT_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Connecting to network...\r\n");
#endif
				iplState = SVL_IPL_STATE_CONNECT;
 800e33e:	4b2c      	ldr	r3, [pc, #176]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e340:	2206      	movs	r2, #6
 800e342:	701a      	strb	r2, [r3, #0]
				break;
 800e344:	e274      	b.n	800e830 <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_CONNECT:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONNECT;
 800e346:	2321      	movs	r3, #33	@ 0x21
 800e348:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(connectMsg);
 800e34a:	2301      	movs	r3, #1
 800e34c:	60bb      	str	r3, [r7, #8]

				(void_t) drv_crcGetCrc32((u8_t*)&connectMsg, sizeof(connectMsg), &msgHeader.messageCrc);
 800e34e:	1d3b      	adds	r3, r7, #4
 800e350:	330c      	adds	r3, #12
 800e352:	461a      	mov	r2, r3
 800e354:	2101      	movs	r1, #1
 800e356:	4830      	ldr	r0, [pc, #192]	@ (800e418 <svl_iplDaemon+0x2a0>)
 800e358:	f7fb fd74 	bl	8009e44 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e35c:	4b29      	ldr	r3, [pc, #164]	@ (800e404 <svl_iplDaemon+0x28c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	1d38      	adds	r0, r7, #4
 800e362:	2264      	movs	r2, #100	@ 0x64
 800e364:	2110      	movs	r1, #16
 800e366:	4798      	blx	r3
 800e368:	4603      	mov	r3, r0
 800e36a:	2b55      	cmp	r3, #85	@ 0x55
 800e36c:	d13b      	bne.n	800e3e6 <svl_iplDaemon+0x26e>
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         100u) == GOS_SUCCESS &&
 800e36e:	4b25      	ldr	r3, [pc, #148]	@ (800e404 <svl_iplDaemon+0x28c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2264      	movs	r2, #100	@ 0x64
 800e374:	2101      	movs	r1, #1
 800e376:	4828      	ldr	r0, [pc, #160]	@ (800e418 <svl_iplDaemon+0x2a0>)
 800e378:	4798      	blx	r3
 800e37a:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e37c:	2b55      	cmp	r3, #85	@ 0x55
 800e37e:	d132      	bne.n	800e3e6 <svl_iplDaemon+0x26e>
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),          0xFFFFFFFFu) == GOS_SUCCESS &&
 800e380:	4b21      	ldr	r3, [pc, #132]	@ (800e408 <svl_iplDaemon+0x290>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	1d38      	adds	r0, r7, #4
 800e386:	f04f 32ff 	mov.w	r2, #4294967295
 800e38a:	2110      	movs	r1, #16
 800e38c:	4798      	blx	r3
 800e38e:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         100u) == GOS_SUCCESS &&
 800e390:	2b55      	cmp	r3, #85	@ 0x55
 800e392:	d128      	bne.n	800e3e6 <svl_iplDaemon+0x26e>
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e394:	4b1c      	ldr	r3, [pc, #112]	@ (800e408 <svl_iplDaemon+0x290>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68b9      	ldr	r1, [r7, #8]
 800e39a:	22c8      	movs	r2, #200	@ 0xc8
 800e39c:	481b      	ldr	r0, [pc, #108]	@ (800e40c <svl_iplDaemon+0x294>)
 800e39e:	4798      	blx	r3
 800e3a0:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),          0xFFFFFFFFu) == GOS_SUCCESS &&
 800e3a2:	2b55      	cmp	r3, #85	@ 0x55
 800e3a4:	d11f      	bne.n	800e3e6 <svl_iplDaemon+0x26e>
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 800e3a6:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e3a8:	f640 2221 	movw	r2, #2593	@ 0xa21
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d11a      	bne.n	800e3e6 <svl_iplDaemon+0x26e>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e3b0:	68b9      	ldr	r1, [r7, #8]
 800e3b2:	693a      	ldr	r2, [r7, #16]
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	4815      	ldr	r0, [pc, #84]	@ (800e40c <svl_iplDaemon+0x294>)
 800e3b8:	f7fb fd90 	bl	8009edc <drv_crcCheckCrc32>
 800e3bc:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 800e3be:	2bca      	cmp	r3, #202	@ 0xca
 800e3c0:	d111      	bne.n	800e3e6 <svl_iplDaemon+0x26e>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&connectResultMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4911      	ldr	r1, [pc, #68]	@ (800e40c <svl_iplDaemon+0x294>)
 800e3c8:	4814      	ldr	r0, [pc, #80]	@ (800e41c <svl_iplDaemon+0x2a4>)
 800e3ca:	f008 feb0 	bl	801712e <memcpy>

					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800e3ce:	4b13      	ldr	r3, [pc, #76]	@ (800e41c <svl_iplDaemon+0x2a4>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	2b36      	cmp	r3, #54	@ 0x36
 800e3d4:	d103      	bne.n	800e3de <svl_iplDaemon+0x266>
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Successfully connected to the network.\r\n");
#endif
						iplState = SVL_IPL_STATE_CONNECTED;
 800e3d6:	4b06      	ldr	r3, [pc, #24]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e3d8:	2207      	movs	r2, #7
 800e3da:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800e3dc:	e007      	b.n	800e3ee <svl_iplDaemon+0x276>
					else
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Network connection failed.\r\n");
#endif
						iplState = SVL_IPL_STATE_DISCOVER_START;
 800e3de:	4b04      	ldr	r3, [pc, #16]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800e3e4:	e003      	b.n	800e3ee <svl_iplDaemon+0x276>
				{
					// No response.
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "No response was received.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800e3e6:	4b02      	ldr	r3, [pc, #8]	@ (800e3f0 <svl_iplDaemon+0x278>)
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	701a      	strb	r2, [r3, #0]
				}

				break;
 800e3ec:	e220      	b.n	800e830 <svl_iplDaemon+0x6b8>
 800e3ee:	e21f      	b.n	800e830 <svl_iplDaemon+0x6b8>
 800e3f0:	20003b58 	.word	0x20003b58
 800e3f4:	20005198 	.word	0x20005198
 800e3f8:	2000059c 	.word	0x2000059c
 800e3fc:	20004d24 	.word	0x20004d24
 800e400:	080196f4 	.word	0x080196f4
 800e404:	20005190 	.word	0x20005190
 800e408:	20005194 	.word	0x20005194
 800e40c:	20003b5c 	.word	0x20003b5c
 800e410:	20004c44 	.word	0x20004c44
 800e414:	20004cb4 	.word	0x20004cb4
 800e418:	20004c34 	.word	0x20004c34
 800e41c:	20004c38 	.word	0x20004c38
			}
			case SVL_IPL_STATE_CONNECTED:
			{
				// Check if there is an incoming request.
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800e420:	4bac      	ldr	r3, [pc, #688]	@ (800e6d4 <svl_iplDaemon+0x55c>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	1d38      	adds	r0, r7, #4
 800e426:	f04f 32ff 	mov.w	r2, #4294967295
 800e42a:	2110      	movs	r1, #16
 800e42c:	4798      	blx	r3
 800e42e:	4603      	mov	r3, r0
 800e430:	2b55      	cmp	r3, #85	@ 0x55
 800e432:	f040 81fc 	bne.w	800e82e <svl_iplDaemon+0x6b6>
					svl_iplReceive(iplRxBuffer,       msgHeader.messageLength, 0xFFFFFFFFu) == GOS_SUCCESS)
 800e436:	4ba7      	ldr	r3, [pc, #668]	@ (800e6d4 <svl_iplDaemon+0x55c>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68b9      	ldr	r1, [r7, #8]
 800e43c:	f04f 32ff 	mov.w	r2, #4294967295
 800e440:	48a5      	ldr	r0, [pc, #660]	@ (800e6d8 <svl_iplDaemon+0x560>)
 800e442:	4798      	blx	r3
 800e444:	4603      	mov	r3, r0
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800e446:	2b55      	cmp	r3, #85	@ 0x55
 800e448:	f040 81f1 	bne.w	800e82e <svl_iplDaemon+0x6b6>
				{
					if (drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e44c:	68b9      	ldr	r1, [r7, #8]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	2300      	movs	r3, #0
 800e452:	48a1      	ldr	r0, [pc, #644]	@ (800e6d8 <svl_iplDaemon+0x560>)
 800e454:	f7fb fd42 	bl	8009edc <drv_crcCheckCrc32>
 800e458:	4603      	mov	r3, r0
 800e45a:	2bca      	cmp	r3, #202	@ 0xca
 800e45c:	f040 81e2 	bne.w	800e824 <svl_iplDaemon+0x6ac>
					{
						switch (msgHeader.messageId)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2bd1      	cmp	r3, #209	@ 0xd1
 800e464:	f000 8108 	beq.w	800e678 <svl_iplDaemon+0x500>
 800e468:	2bd1      	cmp	r3, #209	@ 0xd1
 800e46a:	f200 81ba 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e46e:	2bc1      	cmp	r3, #193	@ 0xc1
 800e470:	f000 80ed 	beq.w	800e64e <svl_iplDaemon+0x4d6>
 800e474:	2bc1      	cmp	r3, #193	@ 0xc1
 800e476:	f200 81b4 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e47a:	2bb1      	cmp	r3, #177	@ 0xb1
 800e47c:	f000 810b 	beq.w	800e696 <svl_iplDaemon+0x51e>
 800e480:	2bb1      	cmp	r3, #177	@ 0xb1
 800e482:	f200 81ae 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e486:	2ba1      	cmp	r3, #161	@ 0xa1
 800e488:	f000 80eb 	beq.w	800e662 <svl_iplDaemon+0x4ea>
 800e48c:	2ba1      	cmp	r3, #161	@ 0xa1
 800e48e:	f200 81a8 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e492:	2b91      	cmp	r3, #145	@ 0x91
 800e494:	f000 80d1 	beq.w	800e63a <svl_iplDaemon+0x4c2>
 800e498:	2b91      	cmp	r3, #145	@ 0x91
 800e49a:	f200 81a2 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e49e:	2b81      	cmp	r3, #129	@ 0x81
 800e4a0:	f000 8092 	beq.w	800e5c8 <svl_iplDaemon+0x450>
 800e4a4:	2b81      	cmp	r3, #129	@ 0x81
 800e4a6:	f200 819c 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e4aa:	2b71      	cmp	r3, #113	@ 0x71
 800e4ac:	d039      	beq.n	800e522 <svl_iplDaemon+0x3aa>
 800e4ae:	2b71      	cmp	r3, #113	@ 0x71
 800e4b0:	f200 8197 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e4b4:	2b61      	cmp	r3, #97	@ 0x61
 800e4b6:	d02a      	beq.n	800e50e <svl_iplDaemon+0x396>
 800e4b8:	2b61      	cmp	r3, #97	@ 0x61
 800e4ba:	f200 8192 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e4be:	2b51      	cmp	r3, #81	@ 0x51
 800e4c0:	d01b      	beq.n	800e4fa <svl_iplDaemon+0x382>
 800e4c2:	2b51      	cmp	r3, #81	@ 0x51
 800e4c4:	f200 818d 	bhi.w	800e7e2 <svl_iplDaemon+0x66a>
 800e4c8:	2b31      	cmp	r3, #49	@ 0x31
 800e4ca:	d002      	beq.n	800e4d2 <svl_iplDaemon+0x35a>
 800e4cc:	2b41      	cmp	r3, #65	@ 0x41
 800e4ce:	d00d      	beq.n	800e4ec <svl_iplDaemon+0x374>
 800e4d0:	e187      	b.n	800e7e2 <svl_iplDaemon+0x66a>
							case IPL_MSG_ID_CPU_LOAD:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL CPU load request received.\r\n");
#endif
								cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 800e4d2:	f001 ff83 	bl	80103dc <gos_kernelGetCpuUsage>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	461a      	mov	r2, r3
 800e4da:	4b80      	ldr	r3, [pc, #512]	@ (800e6dc <svl_iplDaemon+0x564>)
 800e4dc:	801a      	strh	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_CPU_LOAD_ACK, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 800e4de:	2202      	movs	r2, #2
 800e4e0:	497e      	ldr	r1, [pc, #504]	@ (800e6dc <svl_iplDaemon+0x564>)
 800e4e2:	f640 2031 	movw	r0, #2609	@ 0xa31
 800e4e6:	f7ff fe0f 	bl	800e108 <svl_iplSendMessage>
								break;
 800e4ea:	e1a0      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_RESET:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL reset request received.\r\n");
#endif
								(void_t) gos_taskSleep(2000);
 800e4ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800e4f0:	f003 f91e 	bl	8011730 <gos_taskSleep>
								gos_kernelReset();
 800e4f4:	f001 ff84 	bl	8010400 <gos_kernelReset>
								break;
 800e4f8:	e199      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_PING:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL ping request received.\r\n");
#endif
								pingMsg.pingResult = SVL_IPL_PING_OK;
 800e4fa:	4b79      	ldr	r3, [pc, #484]	@ (800e6e0 <svl_iplDaemon+0x568>)
 800e4fc:	2228      	movs	r2, #40	@ 0x28
 800e4fe:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_PING_ACK, (u8_t*)&pingMsg, sizeof(pingMsg));
 800e500:	2201      	movs	r2, #1
 800e502:	4977      	ldr	r1, [pc, #476]	@ (800e6e0 <svl_iplDaemon+0x568>)
 800e504:	f640 2051 	movw	r0, #2641	@ 0xa51
 800e508:	f7ff fdfe 	bl	800e108 <svl_iplSendMessage>
								break;
 800e50c:	e18f      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_TASK_NUM:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL task number request received.\r\n");
#endif
								(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 800e50e:	4875      	ldr	r0, [pc, #468]	@ (800e6e4 <svl_iplDaemon+0x56c>)
 800e510:	f004 fc5e 	bl	8012dd0 <gos_taskGetNumber>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_NUM_ACK, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 800e514:	2202      	movs	r2, #2
 800e516:	4973      	ldr	r1, [pc, #460]	@ (800e6e4 <svl_iplDaemon+0x56c>)
 800e518:	f640 2061 	movw	r0, #2657	@ 0xa61
 800e51c:	f7ff fdf4 	bl	800e108 <svl_iplSendMessage>
								break;
 800e520:	e185      	b.n	800e82e <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800e522:	4b6d      	ldr	r3, [pc, #436]	@ (800e6d8 <svl_iplDaemon+0x560>)
 800e524:	881a      	ldrh	r2, [r3, #0]
 800e526:	4b70      	ldr	r3, [pc, #448]	@ (800e6e8 <svl_iplDaemon+0x570>)
 800e528:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 800e52a:	4b6f      	ldr	r3, [pc, #444]	@ (800e6e8 <svl_iplDaemon+0x570>)
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	496f      	ldr	r1, [pc, #444]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e530:	4618      	mov	r0, r3
 800e532:	f004 fbdb 	bl	8012cec <gos_taskGetDataByIndex>
										GOS_TRUE,
										"IPL task data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
#endif
								// Fill out message.
								taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 800e536:	4b6d      	ldr	r3, [pc, #436]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e538:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e53c:	4b6c      	ldr	r3, [pc, #432]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e53e:	875a      	strh	r2, [r3, #58]	@ 0x3a
								taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 800e540:	4b6a      	ldr	r3, [pc, #424]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e542:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800e546:	4b6a      	ldr	r3, [pc, #424]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e548:	86da      	strh	r2, [r3, #54]	@ 0x36
								taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 800e54a:	4b68      	ldr	r3, [pc, #416]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e54c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e550:	4b67      	ldr	r3, [pc, #412]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e552:	871a      	strh	r2, [r3, #56]	@ 0x38
								taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 800e554:	4b65      	ldr	r3, [pc, #404]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e558:	4a65      	ldr	r2, [pc, #404]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e55a:	f8c2 3027 	str.w	r3, [r2, #39]	@ 0x27
								taskDataMsg.taskId               = taskData.taskId;
 800e55e:	4b63      	ldr	r3, [pc, #396]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e560:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e562:	4b63      	ldr	r3, [pc, #396]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e564:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
								(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 800e568:	4962      	ldr	r1, [pc, #392]	@ (800e6f4 <svl_iplDaemon+0x57c>)
 800e56a:	4863      	ldr	r0, [pc, #396]	@ (800e6f8 <svl_iplDaemon+0x580>)
 800e56c:	f008 fdd7 	bl	801711e <strcpy>
								taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 800e570:	4b5e      	ldr	r3, [pc, #376]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e572:	79da      	ldrb	r2, [r3, #7]
 800e574:	4b5e      	ldr	r3, [pc, #376]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e576:	709a      	strb	r2, [r3, #2]
								taskDataMsg.taskPriority         = taskData.taskPriority;
 800e578:	4b5c      	ldr	r3, [pc, #368]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e57a:	799a      	ldrb	r2, [r3, #6]
 800e57c:	4b5c      	ldr	r3, [pc, #368]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e57e:	705a      	strb	r2, [r3, #1]
								taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 800e580:	4b5a      	ldr	r3, [pc, #360]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e582:	891a      	ldrh	r2, [r3, #8]
 800e584:	4b5a      	ldr	r3, [pc, #360]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e586:	f8a3 2003 	strh.w	r2, [r3, #3]
								(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800e58a:	4a59      	ldr	r2, [pc, #356]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e58c:	4b57      	ldr	r3, [pc, #348]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e58e:	322d      	adds	r2, #45	@ 0x2d
 800e590:	334c      	adds	r3, #76	@ 0x4c
 800e592:	cb03      	ldmia	r3!, {r0, r1}
 800e594:	6010      	str	r0, [r2, #0]
 800e596:	6051      	str	r1, [r2, #4]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	7213      	strb	r3, [r2, #8]
								taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 800e59c:	4b53      	ldr	r3, [pc, #332]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e59e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e5a2:	4b53      	ldr	r3, [pc, #332]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e5a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
								taskDataMsg.taskStackSize        = taskData.taskStackSize;
 800e5a6:	4b51      	ldr	r3, [pc, #324]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e5a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5ac:	4b50      	ldr	r3, [pc, #320]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e5ae:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
								taskDataMsg.taskState            = taskData.taskState;
 800e5b2:	4b4e      	ldr	r3, [pc, #312]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e5b4:	791a      	ldrb	r2, [r3, #4]
 800e5b6:	4b4e      	ldr	r3, [pc, #312]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e5b8:	701a      	strb	r2, [r3, #0]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_DATA_ACK, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 800e5ba:	223e      	movs	r2, #62	@ 0x3e
 800e5bc:	494c      	ldr	r1, [pc, #304]	@ (800e6f0 <svl_iplDaemon+0x578>)
 800e5be:	f640 2071 	movw	r0, #2673	@ 0xa71
 800e5c2:	f7ff fda1 	bl	800e108 <svl_iplSendMessage>
								break;
 800e5c6:	e132      	b.n	800e82e <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_VAR_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800e5c8:	4b43      	ldr	r3, [pc, #268]	@ (800e6d8 <svl_iplDaemon+0x560>)
 800e5ca:	881a      	ldrh	r2, [r3, #0]
 800e5cc:	4b46      	ldr	r3, [pc, #280]	@ (800e6e8 <svl_iplDaemon+0x570>)
 800e5ce:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 800e5d0:	4b45      	ldr	r3, [pc, #276]	@ (800e6e8 <svl_iplDaemon+0x570>)
 800e5d2:	881b      	ldrh	r3, [r3, #0]
 800e5d4:	4945      	ldr	r1, [pc, #276]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f004 fb88 	bl	8012cec <gos_taskGetDataByIndex>
								(void_t) gos_traceTraceFormatted(
										GOS_TRUE,
										"IPL task variable data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
#endif
								taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 800e5dc:	4b43      	ldr	r3, [pc, #268]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e5de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e5e2:	4b46      	ldr	r3, [pc, #280]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e5e4:	f8a3 2013 	strh.w	r2, [r3, #19]
								taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 800e5e8:	4b40      	ldr	r3, [pc, #256]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e5ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e5ee:	4b43      	ldr	r3, [pc, #268]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e5f0:	f8a3 2011 	strh.w	r2, [r3, #17]
								taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 800e5f4:	4b3d      	ldr	r3, [pc, #244]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e5f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e5fa:	4b40      	ldr	r3, [pc, #256]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e5fc:	f8a3 200f 	strh.w	r2, [r3, #15]
								taskVarDataMsg.taskPriority      = taskData.taskPriority;
 800e600:	4b3a      	ldr	r3, [pc, #232]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e602:	799a      	ldrb	r2, [r3, #6]
 800e604:	4b3d      	ldr	r3, [pc, #244]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e606:	705a      	strb	r2, [r3, #1]
								taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 800e608:	4b38      	ldr	r3, [pc, #224]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e60a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e60c:	4a3b      	ldr	r2, [pc, #236]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e60e:	f8c2 3002 	str.w	r3, [r2, #2]
			                    taskVarDataMsg.taskState         = taskData.taskState;
 800e612:	4b36      	ldr	r3, [pc, #216]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e614:	791a      	ldrb	r2, [r3, #4]
 800e616:	4b39      	ldr	r3, [pc, #228]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e618:	701a      	strb	r2, [r3, #0]

			                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800e61a:	4a38      	ldr	r2, [pc, #224]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e61c:	4b33      	ldr	r3, [pc, #204]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e61e:	3206      	adds	r2, #6
 800e620:	334c      	adds	r3, #76	@ 0x4c
 800e622:	cb03      	ldmia	r3!, {r0, r1}
 800e624:	6010      	str	r0, [r2, #0]
 800e626:	6051      	str	r1, [r2, #4]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	7213      	strb	r3, [r2, #8]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_VAR_DATA_ACK, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 800e62c:	2215      	movs	r2, #21
 800e62e:	4933      	ldr	r1, [pc, #204]	@ (800e6fc <svl_iplDaemon+0x584>)
 800e630:	f640 2081 	movw	r0, #2689	@ 0xa81
 800e634:	f7ff fd68 	bl	800e108 <svl_iplSendMessage>

								break;
 800e638:	e0f9      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_RUNTIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL runtime request received.\r\n");
#endif
								(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 800e63a:	4831      	ldr	r0, [pc, #196]	@ (800e700 <svl_iplDaemon+0x588>)
 800e63c:	f006 fe5e 	bl	80152fc <gos_runTimeGet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_RUNTIME_ACK, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 800e640:	2209      	movs	r2, #9
 800e642:	492f      	ldr	r1, [pc, #188]	@ (800e700 <svl_iplDaemon+0x588>)
 800e644:	f640 2091 	movw	r0, #2705	@ 0xa91
 800e648:	f7ff fd5e 	bl	800e108 <svl_iplSendMessage>
								break;
 800e64c:	e0ef      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_HWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL hardware info request received.\r\n");
#endif
								(void_t) svl_pdhGetHwInfo(&hwInfoMsg);
 800e64e:	482d      	ldr	r0, [pc, #180]	@ (800e704 <svl_iplDaemon+0x58c>)
 800e650:	f000 fa5e 	bl	800eb10 <svl_pdhGetHwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_HWINFO_ACK, (u8_t*)&hwInfoMsg, sizeof(hwInfoMsg));
 800e654:	22fa      	movs	r2, #250	@ 0xfa
 800e656:	492b      	ldr	r1, [pc, #172]	@ (800e704 <svl_iplDaemon+0x58c>)
 800e658:	f640 20c1 	movw	r0, #2753	@ 0xac1
 800e65c:	f7ff fd54 	bl	800e108 <svl_iplSendMessage>
								break;
 800e660:	e0e5      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_SWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL software info request received.\r\n");
#endif
								(void_t) svl_pdhGetSwInfo(&swInfoMsg);
 800e662:	4829      	ldr	r0, [pc, #164]	@ (800e708 <svl_iplDaemon+0x590>)
 800e664:	f000 fa1c 	bl	800eaa0 <svl_pdhGetSwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SWINFO_ACK, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 800e668:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800e66c:	4926      	ldr	r1, [pc, #152]	@ (800e708 <svl_iplDaemon+0x590>)
 800e66e:	f640 20a1 	movw	r0, #2721	@ 0xaa1
 800e672:	f7ff fd49 	bl	800e108 <svl_iplSendMessage>
								break;
 800e676:	e0da      	b.n	800e82e <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_SYNC_TIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL system time synchronization request received.\r\n");
#endif
								(void_t) memcpy((void_t*)&sysTimeSetMsg, (void_t*)iplRxBuffer, sizeof(sysTimeSetMsg));
 800e678:	4b24      	ldr	r3, [pc, #144]	@ (800e70c <svl_iplDaemon+0x594>)
 800e67a:	4a17      	ldr	r2, [pc, #92]	@ (800e6d8 <svl_iplDaemon+0x560>)
 800e67c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e67e:	c303      	stmia	r3!, {r0, r1}
 800e680:	801a      	strh	r2, [r3, #0]
								(void_t) gos_timeSet(&sysTimeSetMsg.desiredSystemTime);
 800e682:	4822      	ldr	r0, [pc, #136]	@ (800e70c <svl_iplDaemon+0x594>)
 800e684:	f006 fe1e 	bl	80152c4 <gos_timeSet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SYNC_TIME_ACK, (u8_t*)&sysTimeSetMsg, sizeof(sysTimeSetMsg));
 800e688:	220a      	movs	r2, #10
 800e68a:	4920      	ldr	r1, [pc, #128]	@ (800e70c <svl_iplDaemon+0x594>)
 800e68c:	f640 20d1 	movw	r0, #2769	@ 0xad1
 800e690:	f7ff fd3a 	bl	800e108 <svl_iplSendMessage>
								break;
 800e694:	e0cb      	b.n	800e82e <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_MODIFY:
							{
								// Get parameters.
								(void_t) memcpy((void_t*)&taskModifyMsg, (void_t*)iplRxBuffer, sizeof(taskModifyMsg));
 800e696:	4b10      	ldr	r3, [pc, #64]	@ (800e6d8 <svl_iplDaemon+0x560>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a1d      	ldr	r2, [pc, #116]	@ (800e710 <svl_iplDaemon+0x598>)
 800e69c:	6013      	str	r3, [r2, #0]
										"IPL task modification request received. Idx: %u Type: %u.\r\n",
										taskModifyMsg.taskIdx,
										taskModifyMsg.modificationType);
#endif

								(void_t) gos_taskGetDataByIndex(taskModifyMsg.taskIdx, &taskData);
 800e69e:	4b1c      	ldr	r3, [pc, #112]	@ (800e710 <svl_iplDaemon+0x598>)
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	4912      	ldr	r1, [pc, #72]	@ (800e6ec <svl_iplDaemon+0x574>)
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f004 fb21 	bl	8012cec <gos_taskGetDataByIndex>

								switch (taskModifyMsg.modificationType)
 800e6aa:	4b19      	ldr	r3, [pc, #100]	@ (800e710 <svl_iplDaemon+0x598>)
 800e6ac:	789b      	ldrb	r3, [r3, #2]
 800e6ae:	2b05      	cmp	r3, #5
 800e6b0:	f200 808c 	bhi.w	800e7cc <svl_iplDaemon+0x654>
 800e6b4:	a201      	add	r2, pc, #4	@ (adr r2, 800e6bc <svl_iplDaemon+0x544>)
 800e6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ba:	bf00      	nop
 800e6bc:	0800e715 	.word	0x0800e715
 800e6c0:	0800e733 	.word	0x0800e733
 800e6c4:	0800e751 	.word	0x0800e751
 800e6c8:	0800e76f 	.word	0x0800e76f
 800e6cc:	0800e791 	.word	0x0800e791
 800e6d0:	0800e7af 	.word	0x0800e7af
 800e6d4:	20005194 	.word	0x20005194
 800e6d8:	20003b5c 	.word	0x20003b5c
 800e6dc:	20004c30 	.word	0x20004c30
 800e6e0:	20004c3c 	.word	0x20004c3c
 800e6e4:	20004c40 	.word	0x20004c40
 800e6e8:	20004bc8 	.word	0x20004bc8
 800e6ec:	20004b5c 	.word	0x20004b5c
 800e6f0:	20004bf0 	.word	0x20004bf0
 800e6f4:	20004b66 	.word	0x20004b66
 800e6f8:	20004bf5 	.word	0x20004bf5
 800e6fc:	20004bcc 	.word	0x20004bcc
 800e700:	20004be4 	.word	0x20004be4
 800e704:	20004d64 	.word	0x20004d64
 800e708:	20004e60 	.word	0x20004e60
 800e70c:	20005104 	.word	0x20005104
 800e710:	20005100 	.word	0x20005100
								{
									case IPL_TASK_MODIFY_SUSPEND:
									{
										taskModifyMsg.result = gos_taskSuspend(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e714:	4b48      	ldr	r3, [pc, #288]	@ (800e838 <svl_iplDaemon+0x6c0>)
 800e716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e718:	4618      	mov	r0, r3
 800e71a:	f003 f961 	bl	80119e0 <gos_taskSuspend>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b55      	cmp	r3, #85	@ 0x55
 800e722:	bf0c      	ite	eq
 800e724:	2301      	moveq	r3, #1
 800e726:	2300      	movne	r3, #0
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	461a      	mov	r2, r3
 800e72c:	4b43      	ldr	r3, [pc, #268]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e72e:	70da      	strb	r2, [r3, #3]
										break;
 800e730:	e050      	b.n	800e7d4 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_RESUME:
									{
										taskModifyMsg.result = gos_taskResume(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e732:	4b41      	ldr	r3, [pc, #260]	@ (800e838 <svl_iplDaemon+0x6c0>)
 800e734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e736:	4618      	mov	r0, r3
 800e738:	f003 fa74 	bl	8011c24 <gos_taskResume>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b55      	cmp	r3, #85	@ 0x55
 800e740:	bf0c      	ite	eq
 800e742:	2301      	moveq	r3, #1
 800e744:	2300      	movne	r3, #0
 800e746:	b2db      	uxtb	r3, r3
 800e748:	461a      	mov	r2, r3
 800e74a:	4b3c      	ldr	r3, [pc, #240]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e74c:	70da      	strb	r2, [r3, #3]
										break;
 800e74e:	e041      	b.n	800e7d4 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_DELETE:
									{
										taskModifyMsg.result = gos_taskDelete(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e750:	4b39      	ldr	r3, [pc, #228]	@ (800e838 <svl_iplDaemon+0x6c0>)
 800e752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e754:	4618      	mov	r0, r3
 800e756:	f003 fd0f 	bl	8012178 <gos_taskDelete>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b55      	cmp	r3, #85	@ 0x55
 800e75e:	bf0c      	ite	eq
 800e760:	2301      	moveq	r3, #1
 800e762:	2300      	movne	r3, #0
 800e764:	b2db      	uxtb	r3, r3
 800e766:	461a      	mov	r2, r3
 800e768:	4b34      	ldr	r3, [pc, #208]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e76a:	70da      	strb	r2, [r3, #3]
										break;
 800e76c:	e032      	b.n	800e7d4 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_BLOCK:
									{
										taskModifyMsg.result = gos_taskBlock(taskData.taskId, GOS_TASK_MAX_BLOCK_TIME_MS) == GOS_SUCCESS ? 1 : 0;
 800e76e:	4b32      	ldr	r3, [pc, #200]	@ (800e838 <svl_iplDaemon+0x6c0>)
 800e770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e772:	f04f 31ff 	mov.w	r1, #4294967295
 800e776:	4618      	mov	r0, r3
 800e778:	f003 fb02 	bl	8011d80 <gos_taskBlock>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b55      	cmp	r3, #85	@ 0x55
 800e780:	bf0c      	ite	eq
 800e782:	2301      	moveq	r3, #1
 800e784:	2300      	movne	r3, #0
 800e786:	b2db      	uxtb	r3, r3
 800e788:	461a      	mov	r2, r3
 800e78a:	4b2c      	ldr	r3, [pc, #176]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e78c:	70da      	strb	r2, [r3, #3]
										break;
 800e78e:	e021      	b.n	800e7d4 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_UNBLOCK:
									{
										taskModifyMsg.result = gos_taskUnblock(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e790:	4b29      	ldr	r3, [pc, #164]	@ (800e838 <svl_iplDaemon+0x6c0>)
 800e792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e794:	4618      	mov	r0, r3
 800e796:	f003 fc05 	bl	8011fa4 <gos_taskUnblock>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b55      	cmp	r3, #85	@ 0x55
 800e79e:	bf0c      	ite	eq
 800e7a0:	2301      	moveq	r3, #1
 800e7a2:	2300      	movne	r3, #0
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	4b24      	ldr	r3, [pc, #144]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e7aa:	70da      	strb	r2, [r3, #3]
										break;
 800e7ac:	e012      	b.n	800e7d4 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_WAKEUP:
									{
										taskModifyMsg.result = gos_taskWakeup(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e7ae:	4b22      	ldr	r3, [pc, #136]	@ (800e838 <svl_iplDaemon+0x6c0>)
 800e7b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f003 f84e 	bl	8011854 <gos_taskWakeup>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b55      	cmp	r3, #85	@ 0x55
 800e7bc:	bf0c      	ite	eq
 800e7be:	2301      	moveq	r3, #1
 800e7c0:	2300      	movne	r3, #0
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	4b1d      	ldr	r3, [pc, #116]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e7c8:	70da      	strb	r2, [r3, #3]
										break;
 800e7ca:	e003      	b.n	800e7d4 <svl_iplDaemon+0x65c>
									}
									default:
									{
										taskModifyMsg.result = 0;
 800e7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	70da      	strb	r2, [r3, #3]
										break;
 800e7d2:	bf00      	nop
									}
								}

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	4919      	ldr	r1, [pc, #100]	@ (800e83c <svl_iplDaemon+0x6c4>)
 800e7d8:	f640 20b1 	movw	r0, #2737	@ 0xab1
 800e7dc:	f7ff fc94 	bl	800e108 <svl_iplSendMessage>
								break;
 800e7e0:	e025      	b.n	800e82e <svl_iplDaemon+0x6b6>
							default:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL request received with ID: %u.\r\n", msgHeader.messageId);
#endif
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	75fb      	strb	r3, [r7, #23]
 800e7e6:	e019      	b.n	800e81c <svl_iplDaemon+0x6a4>
								{
									if (userMsgLut[lutIndex].callback == NULL)
 800e7e8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ea:	4a15      	ldr	r2, [pc, #84]	@ (800e840 <svl_iplDaemon+0x6c8>)
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	4413      	add	r3, r2
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d01a      	beq.n	800e82c <svl_iplDaemon+0x6b4>
										// Last registered message found, break loop.
										break;
									}
									else
									{
										if (userMsgLut[lutIndex].msgId == msgHeader.messageId)
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	4a11      	ldr	r2, [pc, #68]	@ (800e840 <svl_iplDaemon+0x6c8>)
 800e7fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	429a      	cmp	r2, r3
 800e802:	d108      	bne.n	800e816 <svl_iplDaemon+0x69e>
										{
											userMsgLut[lutIndex].callback(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc);
 800e804:	7dfb      	ldrb	r3, [r7, #23]
 800e806:	4a0e      	ldr	r2, [pc, #56]	@ (800e840 <svl_iplDaemon+0x6c8>)
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	4413      	add	r3, r2
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	68b9      	ldr	r1, [r7, #8]
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	480c      	ldr	r0, [pc, #48]	@ (800e844 <svl_iplDaemon+0x6cc>)
 800e814:	4798      	blx	r3
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e816:	7dfb      	ldrb	r3, [r7, #23]
 800e818:	3301      	adds	r3, #1
 800e81a:	75fb      	strb	r3, [r7, #23]
 800e81c:	7dfb      	ldrb	r3, [r7, #23]
 800e81e:	2b0f      	cmp	r3, #15
 800e820:	d9e2      	bls.n	800e7e8 <svl_iplDaemon+0x670>
					else
					{
						(void_t) gos_taskSleep(10);
					}
				}
				break;
 800e822:	e004      	b.n	800e82e <svl_iplDaemon+0x6b6>
						(void_t) gos_taskSleep(10);
 800e824:	200a      	movs	r0, #10
 800e826:	f002 ff83 	bl	8011730 <gos_taskSleep>
				break;
 800e82a:	e000      	b.n	800e82e <svl_iplDaemon+0x6b6>
										break;
 800e82c:	bf00      	nop
				break;
 800e82e:	bf00      	nop
			}
		}
		(void_t) gos_taskSleep(10);
 800e830:	200a      	movs	r0, #10
 800e832:	f002 ff7d 	bl	8011730 <gos_taskSleep>
		switch (iplState)
 800e836:	e4a4      	b.n	800e182 <svl_iplDaemon+0xa>
 800e838:	20004b5c 	.word	0x20004b5c
 800e83c:	20005100 	.word	0x20005100
 800e840:	20005110 	.word	0x20005110
 800e844:	20003b5c 	.word	0x20003b5c

0800e848 <svl_pdhInit>:

/*
 * Function: svl_pdhInit
 */
gos_result_t svl_pdhInit (void_t)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 800e84e:	2355      	movs	r3, #85	@ 0x55
 800e850:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&softwareInfoReqMsg));
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	2b55      	cmp	r3, #85	@ 0x55
 800e856:	d105      	bne.n	800e864 <svl_pdhInit+0x1c>
 800e858:	4833      	ldr	r0, [pc, #204]	@ (800e928 <svl_pdhInit+0xe0>)
 800e85a:	f006 f8c1 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e85e:	4603      	mov	r3, r0
 800e860:	71fb      	strb	r3, [r7, #7]
 800e862:	e001      	b.n	800e868 <svl_pdhInit+0x20>
 800e864:	23ae      	movs	r3, #174	@ 0xae
 800e866:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&hardwareInfoReqMsg));
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b55      	cmp	r3, #85	@ 0x55
 800e86c:	d105      	bne.n	800e87a <svl_pdhInit+0x32>
 800e86e:	482f      	ldr	r0, [pc, #188]	@ (800e92c <svl_pdhInit+0xe4>)
 800e870:	f006 f8b6 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e874:	4603      	mov	r3, r0
 800e876:	71fb      	strb	r3, [r7, #7]
 800e878:	e001      	b.n	800e87e <svl_pdhInit+0x36>
 800e87a:	23ae      	movs	r3, #174	@ 0xae
 800e87c:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&wifiCfgReqMsg));
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	2b55      	cmp	r3, #85	@ 0x55
 800e882:	d105      	bne.n	800e890 <svl_pdhInit+0x48>
 800e884:	482a      	ldr	r0, [pc, #168]	@ (800e930 <svl_pdhInit+0xe8>)
 800e886:	f006 f8ab 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e88a:	4603      	mov	r3, r0
 800e88c:	71fb      	strb	r3, [r7, #7]
 800e88e:	e001      	b.n	800e894 <svl_pdhInit+0x4c>
 800e890:	23ae      	movs	r3, #174	@ 0xae
 800e892:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&bldCfgReqMsg));
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	2b55      	cmp	r3, #85	@ 0x55
 800e898:	d105      	bne.n	800e8a6 <svl_pdhInit+0x5e>
 800e89a:	4826      	ldr	r0, [pc, #152]	@ (800e934 <svl_pdhInit+0xec>)
 800e89c:	f006 f8a0 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	71fb      	strb	r3, [r7, #7]
 800e8a4:	e001      	b.n	800e8aa <svl_pdhInit+0x62>
 800e8a6:	23ae      	movs	r3, #174	@ 0xae
 800e8a8:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&softwareInfoSetMsg));
 800e8aa:	79fb      	ldrb	r3, [r7, #7]
 800e8ac:	2b55      	cmp	r3, #85	@ 0x55
 800e8ae:	d105      	bne.n	800e8bc <svl_pdhInit+0x74>
 800e8b0:	4821      	ldr	r0, [pc, #132]	@ (800e938 <svl_pdhInit+0xf0>)
 800e8b2:	f006 f895 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	71fb      	strb	r3, [r7, #7]
 800e8ba:	e001      	b.n	800e8c0 <svl_pdhInit+0x78>
 800e8bc:	23ae      	movs	r3, #174	@ 0xae
 800e8be:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&hardwareInfoSetMsg));
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	2b55      	cmp	r3, #85	@ 0x55
 800e8c4:	d105      	bne.n	800e8d2 <svl_pdhInit+0x8a>
 800e8c6:	481d      	ldr	r0, [pc, #116]	@ (800e93c <svl_pdhInit+0xf4>)
 800e8c8:	f006 f88a 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	71fb      	strb	r3, [r7, #7]
 800e8d0:	e001      	b.n	800e8d6 <svl_pdhInit+0x8e>
 800e8d2:	23ae      	movs	r3, #174	@ 0xae
 800e8d4:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&wifiCfgSetMsg));
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	2b55      	cmp	r3, #85	@ 0x55
 800e8da:	d105      	bne.n	800e8e8 <svl_pdhInit+0xa0>
 800e8dc:	4818      	ldr	r0, [pc, #96]	@ (800e940 <svl_pdhInit+0xf8>)
 800e8de:	f006 f87f 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	71fb      	strb	r3, [r7, #7]
 800e8e6:	e001      	b.n	800e8ec <svl_pdhInit+0xa4>
 800e8e8:	23ae      	movs	r3, #174	@ 0xae
 800e8ea:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&bldCfgSetMsg));
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	2b55      	cmp	r3, #85	@ 0x55
 800e8f0:	d105      	bne.n	800e8fe <svl_pdhInit+0xb6>
 800e8f2:	4814      	ldr	r0, [pc, #80]	@ (800e944 <svl_pdhInit+0xfc>)
 800e8f4:	f006 f874 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	71fb      	strb	r3, [r7, #7]
 800e8fc:	e001      	b.n	800e902 <svl_pdhInit+0xba>
 800e8fe:	23ae      	movs	r3, #174	@ 0xae
 800e900:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_mutexInit(&pdhMutex));
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	2b55      	cmp	r3, #85	@ 0x55
 800e906:	d105      	bne.n	800e914 <svl_pdhInit+0xcc>
 800e908:	480f      	ldr	r0, [pc, #60]	@ (800e948 <svl_pdhInit+0x100>)
 800e90a:	f005 fa51 	bl	8013db0 <gos_mutexInit>
 800e90e:	4603      	mov	r3, r0
 800e910:	71fb      	strb	r3, [r7, #7]
 800e912:	e001      	b.n	800e918 <svl_pdhInit+0xd0>
 800e914:	23ae      	movs	r3, #174	@ 0xae
 800e916:	71fb      	strb	r3, [r7, #7]

	pdhInited = GOS_TRUE;
 800e918:	4b0c      	ldr	r3, [pc, #48]	@ (800e94c <svl_pdhInit+0x104>)
 800e91a:	2236      	movs	r2, #54	@ 0x36
 800e91c:	701a      	strb	r2, [r3, #0]

	return initResult;
 800e91e:	79fb      	ldrb	r3, [r7, #7]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20000608 	.word	0x20000608
 800e92c:	20000618 	.word	0x20000618
 800e930:	20000628 	.word	0x20000628
 800e934:	20000638 	.word	0x20000638
 800e938:	20000648 	.word	0x20000648
 800e93c:	20000658 	.word	0x20000658
 800e940:	20000668 	.word	0x20000668
 800e944:	20000678 	.word	0x20000678
 800e948:	200051a4 	.word	0x200051a4
 800e94c:	20000606 	.word	0x20000606

0800e950 <svl_pdhConfigure>:

/*
 * Function: svl_pdhConfigure
 */
gos_result_t svl_pdhConfigure (svl_pdhCfg_t* pCfg)
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 800e958:	23ae      	movs	r3, #174	@ 0xae
 800e95a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d011      	beq.n	800e986 <svl_pdhConfigure+0x36>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00d      	beq.n	800e986 <svl_pdhConfigure+0x36>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <svl_pdhConfigure+0x36>
	{
		pdhReadFunction  = pCfg->readFunction;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a07      	ldr	r2, [pc, #28]	@ (800e994 <svl_pdhConfigure+0x44>)
 800e978:	6013      	str	r3, [r2, #0]
		pdhWriteFunction = pCfg->writeFunction;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	4a06      	ldr	r2, [pc, #24]	@ (800e998 <svl_pdhConfigure+0x48>)
 800e980:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 800e982:	2355      	movs	r3, #85	@ 0x55
 800e984:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 800e986:	7bfb      	ldrb	r3, [r7, #15]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3714      	adds	r7, #20
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	2000519c 	.word	0x2000519c
 800e998:	200051a0 	.word	0x200051a0

0800e99c <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 800e99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800e9a4:	23ae      	movs	r3, #174	@ 0xae
 800e9a6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d069      	beq.n	800ea82 <svl_pdhGetLibVersion+0xe6>
 800e9ae:	4b38      	ldr	r3, [pc, #224]	@ (800ea90 <svl_pdhGetLibVersion+0xf4>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d065      	beq.n	800ea82 <svl_pdhGetLibVersion+0xe6>
	{
		//(void_t) memset((void_t*)pLibVer, 0, sizeof(*pLibVer));

		pLibVer->major             = PDH_LIBVER_VERSION_MAJOR;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	701a      	strb	r2, [r3, #0]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	705a      	strb	r2, [r3, #1]
		pLibVer->minor             = PDH_LIBVER_VERSION_MINOR;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f042 0215 	orr.w	r2, r2, #21
 800e9c8:	709a      	strb	r2, [r3, #2]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	70da      	strb	r2, [r3, #3]
		pLibVer->build             = PDH_LIBVER_VERSION_BUILD;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	711a      	strb	r2, [r3, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years        = PDH_LIBVER_VERSION_DATE_YEAR;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f062 0216 	orn	r2, r2, #22
 800e9e0:	739a      	strb	r2, [r3, #14]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f042 0207 	orr.w	r2, r2, #7
 800e9e8:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months       = PDH_LIBVER_VERSION_DATE_MONTH;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days         = PDH_LIBVER_VERSION_DATE_DAY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f042 021b 	orr.w	r2, r2, #27
 800e9f8:	72da      	strb	r2, [r3, #11]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	731a      	strb	r2, [r3, #12]
		pLibVer->date.hours        = 0u;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2200      	movs	r2, #0
 800ea02:	729a      	strb	r2, [r3, #10]
		pLibVer->date.minutes      = 0u;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	725a      	strb	r2, [r3, #9]
		pLibVer->date.seconds      = 0u;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	721a      	strb	r2, [r3, #8]
		pLibVer->date.milliseconds = 0u;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	719a      	strb	r2, [r3, #6]
 800ea16:	2200      	movs	r2, #0
 800ea18:	71da      	strb	r2, [r3, #7]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3310      	adds	r3, #16
 800ea1e:	4a1d      	ldr	r2, [pc, #116]	@ (800ea94 <svl_pdhGetLibVersion+0xf8>)
 800ea20:	461c      	mov	r4, r3
 800ea22:	4613      	mov	r3, r2
 800ea24:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea26:	6020      	str	r0, [r4, #0]
 800ea28:	6061      	str	r1, [r4, #4]
 800ea2a:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3370      	adds	r3, #112	@ 0x70
 800ea30:	4a19      	ldr	r2, [pc, #100]	@ (800ea98 <svl_pdhGetLibVersion+0xfc>)
 800ea32:	461d      	mov	r5, r3
 800ea34:	4614      	mov	r4, r2
 800ea36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea38:	6028      	str	r0, [r5, #0]
 800ea3a:	6069      	str	r1, [r5, #4]
 800ea3c:	60aa      	str	r2, [r5, #8]
 800ea3e:	60eb      	str	r3, [r5, #12]
 800ea40:	6820      	ldr	r0, [r4, #0]
 800ea42:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	3340      	adds	r3, #64	@ 0x40
 800ea48:	4a14      	ldr	r2, [pc, #80]	@ (800ea9c <svl_pdhGetLibVersion+0x100>)
 800ea4a:	4614      	mov	r4, r2
 800ea4c:	469c      	mov	ip, r3
 800ea4e:	f104 0e20 	add.w	lr, r4, #32
 800ea52:	4665      	mov	r5, ip
 800ea54:	4626      	mov	r6, r4
 800ea56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea58:	6028      	str	r0, [r5, #0]
 800ea5a:	6069      	str	r1, [r5, #4]
 800ea5c:	60aa      	str	r2, [r5, #8]
 800ea5e:	60eb      	str	r3, [r5, #12]
 800ea60:	3410      	adds	r4, #16
 800ea62:	f10c 0c10 	add.w	ip, ip, #16
 800ea66:	4574      	cmp	r4, lr
 800ea68:	d1f3      	bne.n	800ea52 <svl_pdhGetLibVersion+0xb6>
 800ea6a:	4662      	mov	r2, ip
 800ea6c:	4623      	mov	r3, r4
 800ea6e:	cb03      	ldmia	r3!, {r0, r1}
 800ea70:	6010      	str	r0, [r2, #0]
 800ea72:	6051      	str	r1, [r2, #4]
 800ea74:	8819      	ldrh	r1, [r3, #0]
 800ea76:	789b      	ldrb	r3, [r3, #2]
 800ea78:	8111      	strh	r1, [r2, #8]
 800ea7a:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 800ea7c:	2355      	movs	r3, #85	@ 0x55
 800ea7e:	73fb      	strb	r3, [r7, #15]
 800ea80:	e001      	b.n	800ea86 <svl_pdhGetLibVersion+0xea>
	}
	else
	{
		getResult = GOS_ERROR;
 800ea82:	23ae      	movs	r3, #174	@ 0xae
 800ea84:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea90:	2000519c 	.word	0x2000519c
 800ea94:	08019704 	.word	0x08019704
 800ea98:	08019710 	.word	0x08019710
 800ea9c:	08019724 	.word	0x08019724

0800eaa0 <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800eaa8:	23ae      	movs	r3, #174	@ 0xae
 800eaaa:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d020      	beq.n	800eaf4 <svl_pdhGetSwInfo+0x54>
 800eab2:	4b14      	ldr	r3, [pc, #80]	@ (800eb04 <svl_pdhGetSwInfo+0x64>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d01c      	beq.n	800eaf4 <svl_pdhGetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eaba:	4b13      	ldr	r3, [pc, #76]	@ (800eb08 <svl_pdhGetSwInfo+0x68>)
 800eabc:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eabe:	2b49      	cmp	r3, #73	@ 0x49
 800eac0:	d00b      	beq.n	800eada <svl_pdhGetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eac2:	4b11      	ldr	r3, [pc, #68]	@ (800eb08 <svl_pdhGetSwInfo+0x68>)
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	2b36      	cmp	r3, #54	@ 0x36
 800eac8:	d114      	bne.n	800eaf4 <svl_pdhGetSwInfo+0x54>
 800eaca:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eace:	480f      	ldr	r0, [pc, #60]	@ (800eb0c <svl_pdhGetSwInfo+0x6c>)
 800ead0:	f005 f988 	bl	8013de4 <gos_mutexLock>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b55      	cmp	r3, #85	@ 0x55
 800ead8:	d10c      	bne.n	800eaf4 <svl_pdhGetSwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800eada:	4b0a      	ldr	r3, [pc, #40]	@ (800eb04 <svl_pdhGetSwInfo+0x64>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800eae2:	6879      	ldr	r1, [r7, #4]
 800eae4:	2000      	movs	r0, #0
 800eae6:	4798      	blx	r3
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800eaec:	4807      	ldr	r0, [pc, #28]	@ (800eb0c <svl_pdhGetSwInfo+0x6c>)
 800eaee:	f005 fa7f 	bl	8013ff0 <gos_mutexUnlock>
 800eaf2:	e001      	b.n	800eaf8 <svl_pdhGetSwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800eaf4:	23ae      	movs	r3, #174	@ 0xae
 800eaf6:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	2000519c 	.word	0x2000519c
 800eb08:	20000606 	.word	0x20000606
 800eb0c:	200051a4 	.word	0x200051a4

0800eb10 <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800eb18:	23ae      	movs	r3, #174	@ 0xae
 800eb1a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d020      	beq.n	800eb64 <svl_pdhGetHwInfo+0x54>
 800eb22:	4b14      	ldr	r3, [pc, #80]	@ (800eb74 <svl_pdhGetHwInfo+0x64>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d01c      	beq.n	800eb64 <svl_pdhGetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eb2a:	4b13      	ldr	r3, [pc, #76]	@ (800eb78 <svl_pdhGetHwInfo+0x68>)
 800eb2c:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eb2e:	2b49      	cmp	r3, #73	@ 0x49
 800eb30:	d00b      	beq.n	800eb4a <svl_pdhGetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eb32:	4b11      	ldr	r3, [pc, #68]	@ (800eb78 <svl_pdhGetHwInfo+0x68>)
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2b36      	cmp	r3, #54	@ 0x36
 800eb38:	d114      	bne.n	800eb64 <svl_pdhGetHwInfo+0x54>
 800eb3a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eb3e:	480f      	ldr	r0, [pc, #60]	@ (800eb7c <svl_pdhGetHwInfo+0x6c>)
 800eb40:	f005 f950 	bl	8013de4 <gos_mutexLock>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b55      	cmp	r3, #85	@ 0x55
 800eb48:	d10c      	bne.n	800eb64 <svl_pdhGetHwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800eb4a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb74 <svl_pdhGetHwInfo+0x64>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	22fa      	movs	r2, #250	@ 0xfa
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800eb56:	4798      	blx	r3
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800eb5c:	4807      	ldr	r0, [pc, #28]	@ (800eb7c <svl_pdhGetHwInfo+0x6c>)
 800eb5e:	f005 fa47 	bl	8013ff0 <gos_mutexUnlock>
 800eb62:	e001      	b.n	800eb68 <svl_pdhGetHwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800eb64:	23ae      	movs	r3, #174	@ 0xae
 800eb66:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	2000519c 	.word	0x2000519c
 800eb78:	20000606 	.word	0x20000606
 800eb7c:	200051a4 	.word	0x200051a4

0800eb80 <svl_pdhGetBldCfg>:

/*
 * Function: svl_pdhGetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhGetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800eb88:	23ae      	movs	r3, #174	@ 0xae
 800eb8a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d020      	beq.n	800ebd4 <svl_pdhGetBldCfg+0x54>
 800eb92:	4b14      	ldr	r3, [pc, #80]	@ (800ebe4 <svl_pdhGetBldCfg+0x64>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d01c      	beq.n	800ebd4 <svl_pdhGetBldCfg+0x54>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eb9a:	4b13      	ldr	r3, [pc, #76]	@ (800ebe8 <svl_pdhGetBldCfg+0x68>)
 800eb9c:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800eb9e:	2b49      	cmp	r3, #73	@ 0x49
 800eba0:	d00b      	beq.n	800ebba <svl_pdhGetBldCfg+0x3a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eba2:	4b11      	ldr	r3, [pc, #68]	@ (800ebe8 <svl_pdhGetBldCfg+0x68>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2b36      	cmp	r3, #54	@ 0x36
 800eba8:	d114      	bne.n	800ebd4 <svl_pdhGetBldCfg+0x54>
 800ebaa:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ebae:	480f      	ldr	r0, [pc, #60]	@ (800ebec <svl_pdhGetBldCfg+0x6c>)
 800ebb0:	f005 f918 	bl	8013de4 <gos_mutexLock>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b55      	cmp	r3, #85	@ 0x55
 800ebb8:	d10c      	bne.n	800ebd4 <svl_pdhGetBldCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800ebba:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe4 <svl_pdhGetBldCfg+0x64>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	220e      	movs	r2, #14
 800ebc0:	6879      	ldr	r1, [r7, #4]
 800ebc2:	f240 309a 	movw	r0, #922	@ 0x39a
 800ebc6:	4798      	blx	r3
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ebcc:	4807      	ldr	r0, [pc, #28]	@ (800ebec <svl_pdhGetBldCfg+0x6c>)
 800ebce:	f005 fa0f 	bl	8013ff0 <gos_mutexUnlock>
 800ebd2:	e001      	b.n	800ebd8 <svl_pdhGetBldCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800ebd4:	23ae      	movs	r3, #174	@ 0xae
 800ebd6:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800ebd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	2000519c 	.word	0x2000519c
 800ebe8:	20000606 	.word	0x20000606
 800ebec:	200051a4 	.word	0x200051a4

0800ebf0 <svl_pdhGetWifiCfg>:

/*
 * Function: svl_pdhGetWifiCfg
 */
gos_result_t svl_pdhGetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800ebf8:	23ae      	movs	r3, #174	@ 0xae
 800ebfa:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d020      	beq.n	800ec44 <svl_pdhGetWifiCfg+0x54>
 800ec02:	4b14      	ldr	r3, [pc, #80]	@ (800ec54 <svl_pdhGetWifiCfg+0x64>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d01c      	beq.n	800ec44 <svl_pdhGetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec0a:	4b13      	ldr	r3, [pc, #76]	@ (800ec58 <svl_pdhGetWifiCfg+0x68>)
 800ec0c:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 800ec0e:	2b49      	cmp	r3, #73	@ 0x49
 800ec10:	d00b      	beq.n	800ec2a <svl_pdhGetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec12:	4b11      	ldr	r3, [pc, #68]	@ (800ec58 <svl_pdhGetWifiCfg+0x68>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b36      	cmp	r3, #54	@ 0x36
 800ec18:	d114      	bne.n	800ec44 <svl_pdhGetWifiCfg+0x54>
 800ec1a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ec1e:	480f      	ldr	r0, [pc, #60]	@ (800ec5c <svl_pdhGetWifiCfg+0x6c>)
 800ec20:	f005 f8e0 	bl	8013de4 <gos_mutexLock>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b55      	cmp	r3, #85	@ 0x55
 800ec28:	d10c      	bne.n	800ec44 <svl_pdhGetWifiCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 800ec2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ec54 <svl_pdhGetWifiCfg+0x64>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	226e      	movs	r2, #110	@ 0x6e
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 800ec36:	4798      	blx	r3
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ec3c:	4807      	ldr	r0, [pc, #28]	@ (800ec5c <svl_pdhGetWifiCfg+0x6c>)
 800ec3e:	f005 f9d7 	bl	8013ff0 <gos_mutexUnlock>
 800ec42:	e001      	b.n	800ec48 <svl_pdhGetWifiCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800ec44:	23ae      	movs	r3, #174	@ 0xae
 800ec46:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800ec48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	2000519c 	.word	0x2000519c
 800ec58:	20000606 	.word	0x20000606
 800ec5c:	200051a4 	.word	0x200051a4

0800ec60 <svl_pdhSetSwInfo>:

/*
 * Function: svl_pdhSetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhSetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800ec68:	23ae      	movs	r3, #174	@ 0xae
 800ec6a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d020      	beq.n	800ecb4 <svl_pdhSetSwInfo+0x54>
 800ec72:	4b14      	ldr	r3, [pc, #80]	@ (800ecc4 <svl_pdhSetSwInfo+0x64>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d01c      	beq.n	800ecb4 <svl_pdhSetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec7a:	4b13      	ldr	r3, [pc, #76]	@ (800ecc8 <svl_pdhSetSwInfo+0x68>)
 800ec7c:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ec7e:	2b49      	cmp	r3, #73	@ 0x49
 800ec80:	d00b      	beq.n	800ec9a <svl_pdhSetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec82:	4b11      	ldr	r3, [pc, #68]	@ (800ecc8 <svl_pdhSetSwInfo+0x68>)
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	2b36      	cmp	r3, #54	@ 0x36
 800ec88:	d114      	bne.n	800ecb4 <svl_pdhSetSwInfo+0x54>
 800ec8a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ec8e:	480f      	ldr	r0, [pc, #60]	@ (800eccc <svl_pdhSetSwInfo+0x6c>)
 800ec90:	f005 f8a8 	bl	8013de4 <gos_mutexLock>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b55      	cmp	r3, #85	@ 0x55
 800ec98:	d10c      	bne.n	800ecb4 <svl_pdhSetSwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800ec9a:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc4 <svl_pdhSetSwInfo+0x64>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	2000      	movs	r0, #0
 800eca6:	4798      	blx	r3
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ecac:	4807      	ldr	r0, [pc, #28]	@ (800eccc <svl_pdhSetSwInfo+0x6c>)
 800ecae:	f005 f99f 	bl	8013ff0 <gos_mutexUnlock>
 800ecb2:	e001      	b.n	800ecb8 <svl_pdhSetSwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ecb4:	23ae      	movs	r3, #174	@ 0xae
 800ecb6:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	200051a0 	.word	0x200051a0
 800ecc8:	20000606 	.word	0x20000606
 800eccc:	200051a4 	.word	0x200051a4

0800ecd0 <svl_pdhSetHwInfo>:

/*
 * Function: svl_pdhSetHwInfo
 */
gos_result_t svl_pdhSetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800ecd8:	23ae      	movs	r3, #174	@ 0xae
 800ecda:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d020      	beq.n	800ed24 <svl_pdhSetHwInfo+0x54>
 800ece2:	4b14      	ldr	r3, [pc, #80]	@ (800ed34 <svl_pdhSetHwInfo+0x64>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d01c      	beq.n	800ed24 <svl_pdhSetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ecea:	4b13      	ldr	r3, [pc, #76]	@ (800ed38 <svl_pdhSetHwInfo+0x68>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ecee:	2b49      	cmp	r3, #73	@ 0x49
 800ecf0:	d00b      	beq.n	800ed0a <svl_pdhSetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ecf2:	4b11      	ldr	r3, [pc, #68]	@ (800ed38 <svl_pdhSetHwInfo+0x68>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	2b36      	cmp	r3, #54	@ 0x36
 800ecf8:	d114      	bne.n	800ed24 <svl_pdhSetHwInfo+0x54>
 800ecfa:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ecfe:	480f      	ldr	r0, [pc, #60]	@ (800ed3c <svl_pdhSetHwInfo+0x6c>)
 800ed00:	f005 f870 	bl	8013de4 <gos_mutexLock>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b55      	cmp	r3, #85	@ 0x55
 800ed08:	d10c      	bne.n	800ed24 <svl_pdhSetHwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ed34 <svl_pdhSetHwInfo+0x64>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	22fa      	movs	r2, #250	@ 0xfa
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800ed16:	4798      	blx	r3
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ed1c:	4807      	ldr	r0, [pc, #28]	@ (800ed3c <svl_pdhSetHwInfo+0x6c>)
 800ed1e:	f005 f967 	bl	8013ff0 <gos_mutexUnlock>
 800ed22:	e001      	b.n	800ed28 <svl_pdhSetHwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ed24:	23ae      	movs	r3, #174	@ 0xae
 800ed26:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	200051a0 	.word	0x200051a0
 800ed38:	20000606 	.word	0x20000606
 800ed3c:	200051a4 	.word	0x200051a4

0800ed40 <svl_pdhSetBldCfg>:

/*
 * Function: svl_pdhSetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhSetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800ed48:	23ae      	movs	r3, #174	@ 0xae
 800ed4a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d020      	beq.n	800ed94 <svl_pdhSetBldCfg+0x54>
 800ed52:	4b14      	ldr	r3, [pc, #80]	@ (800eda4 <svl_pdhSetBldCfg+0x64>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d01c      	beq.n	800ed94 <svl_pdhSetBldCfg+0x54>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ed5a:	4b13      	ldr	r3, [pc, #76]	@ (800eda8 <svl_pdhSetBldCfg+0x68>)
 800ed5c:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800ed5e:	2b49      	cmp	r3, #73	@ 0x49
 800ed60:	d00b      	beq.n	800ed7a <svl_pdhSetBldCfg+0x3a>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ed62:	4b11      	ldr	r3, [pc, #68]	@ (800eda8 <svl_pdhSetBldCfg+0x68>)
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	2b36      	cmp	r3, #54	@ 0x36
 800ed68:	d114      	bne.n	800ed94 <svl_pdhSetBldCfg+0x54>
 800ed6a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ed6e:	480f      	ldr	r0, [pc, #60]	@ (800edac <svl_pdhSetBldCfg+0x6c>)
 800ed70:	f005 f838 	bl	8013de4 <gos_mutexLock>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b55      	cmp	r3, #85	@ 0x55
 800ed78:	d10c      	bne.n	800ed94 <svl_pdhSetBldCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800ed7a:	4b0a      	ldr	r3, [pc, #40]	@ (800eda4 <svl_pdhSetBldCfg+0x64>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	220e      	movs	r2, #14
 800ed80:	6879      	ldr	r1, [r7, #4]
 800ed82:	f240 309a 	movw	r0, #922	@ 0x39a
 800ed86:	4798      	blx	r3
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ed8c:	4807      	ldr	r0, [pc, #28]	@ (800edac <svl_pdhSetBldCfg+0x6c>)
 800ed8e:	f005 f92f 	bl	8013ff0 <gos_mutexUnlock>
 800ed92:	e001      	b.n	800ed98 <svl_pdhSetBldCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ed94:	23ae      	movs	r3, #174	@ 0xae
 800ed96:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ed98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	200051a0 	.word	0x200051a0
 800eda8:	20000606 	.word	0x20000606
 800edac:	200051a4 	.word	0x200051a4

0800edb0 <svl_pdhSetWifiCfg>:

/*
 * Function: svl_pdhSetWifiCfg
 */
gos_result_t svl_pdhSetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800edb8:	23ae      	movs	r3, #174	@ 0xae
 800edba:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d020      	beq.n	800ee04 <svl_pdhSetWifiCfg+0x54>
 800edc2:	4b14      	ldr	r3, [pc, #80]	@ (800ee14 <svl_pdhSetWifiCfg+0x64>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d01c      	beq.n	800ee04 <svl_pdhSetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800edca:	4b13      	ldr	r3, [pc, #76]	@ (800ee18 <svl_pdhSetWifiCfg+0x68>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 800edce:	2b49      	cmp	r3, #73	@ 0x49
 800edd0:	d00b      	beq.n	800edea <svl_pdhSetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800edd2:	4b11      	ldr	r3, [pc, #68]	@ (800ee18 <svl_pdhSetWifiCfg+0x68>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	2b36      	cmp	r3, #54	@ 0x36
 800edd8:	d114      	bne.n	800ee04 <svl_pdhSetWifiCfg+0x54>
 800edda:	f241 3188 	movw	r1, #5000	@ 0x1388
 800edde:	480f      	ldr	r0, [pc, #60]	@ (800ee1c <svl_pdhSetWifiCfg+0x6c>)
 800ede0:	f005 f800 	bl	8013de4 <gos_mutexLock>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b55      	cmp	r3, #85	@ 0x55
 800ede8:	d10c      	bne.n	800ee04 <svl_pdhSetWifiCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 800edea:	4b0a      	ldr	r3, [pc, #40]	@ (800ee14 <svl_pdhSetWifiCfg+0x64>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	226e      	movs	r2, #110	@ 0x6e
 800edf0:	6879      	ldr	r1, [r7, #4]
 800edf2:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 800edf6:	4798      	blx	r3
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800edfc:	4807      	ldr	r0, [pc, #28]	@ (800ee1c <svl_pdhSetWifiCfg+0x6c>)
 800edfe:	f005 f8f7 	bl	8013ff0 <gos_mutexUnlock>
 800ee02:	e001      	b.n	800ee08 <svl_pdhSetWifiCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ee04:	23ae      	movs	r3, #174	@ 0xae
 800ee06:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	200051a0 	.word	0x200051a0
 800ee18:	20000606 	.word	0x20000606
 800ee1c:	200051a4 	.word	0x200051a4

0800ee20 <svl_pdhSoftwareInfoReqMsgReceived>:
 * @details Sends out the software info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhSoftwareInfoReqMsgReceived (void_t)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af02      	add	r7, sp, #8
 800ee26:	4b1c      	ldr	r3, [pc, #112]	@ (800ee98 <svl_pdhSoftwareInfoReqMsgReceived+0x78>)
 800ee28:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800ee2a:	23ae      	movs	r3, #174	@ 0xae
 800ee2c:	70fb      	strb	r3, [r7, #3]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d020      	beq.n	800ee76 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
 800ee34:	4b19      	ldr	r3, [pc, #100]	@ (800ee9c <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d01c      	beq.n	800ee76 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ee3c:	4b18      	ldr	r3, [pc, #96]	@ (800eea0 <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800ee40:	2b49      	cmp	r3, #73	@ 0x49
 800ee42:	d00b      	beq.n	800ee5c <svl_pdhSoftwareInfoReqMsgReceived+0x3c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ee44:	4b16      	ldr	r3, [pc, #88]	@ (800eea0 <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b36      	cmp	r3, #54	@ 0x36
 800ee4a:	d114      	bne.n	800ee76 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
 800ee4c:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ee50:	4814      	ldr	r0, [pc, #80]	@ (800eea4 <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 800ee52:	f004 ffc7 	bl	8013de4 <gos_mutexLock>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b55      	cmp	r3, #85	@ 0x55
 800ee5a:	d10c      	bne.n	800ee76 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800ee5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ee9c <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	2000      	movs	r0, #0
 800ee68:	4798      	blx	r3
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ee6e:	480d      	ldr	r0, [pc, #52]	@ (800eea4 <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 800ee70:	f005 f8be 	bl	8013ff0 <gos_mutexUnlock>
 800ee74:	e001      	b.n	800ee7a <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 800ee76:	23ae      	movs	r3, #174	@ 0xae
 800ee78:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800ee7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800ee84:	4a04      	ldr	r2, [pc, #16]	@ (800ee98 <svl_pdhSoftwareInfoReqMsgReceived+0x78>)
 800ee86:	f642 2101 	movw	r1, #10753	@ 0x2a01
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	f004 fa70 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_GET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	200055a8 	.word	0x200055a8
 800ee9c:	2000519c 	.word	0x2000519c
 800eea0:	20000606 	.word	0x20000606
 800eea4:	200051a4 	.word	0x200051a4

0800eea8 <svl_pdhHardwareInfoReqMsgReceived>:
 * @details Sends out the hardware info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhHardwareInfoReqMsgReceived (void_t)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af02      	add	r7, sp, #8
 800eeae:	4b1c      	ldr	r3, [pc, #112]	@ (800ef20 <svl_pdhHardwareInfoReqMsgReceived+0x78>)
 800eeb0:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800eeb2:	23ae      	movs	r3, #174	@ 0xae
 800eeb4:	70fb      	strb	r3, [r7, #3]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d020      	beq.n	800eefe <svl_pdhHardwareInfoReqMsgReceived+0x56>
 800eebc:	4b19      	ldr	r3, [pc, #100]	@ (800ef24 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d01c      	beq.n	800eefe <svl_pdhHardwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eec4:	4b18      	ldr	r3, [pc, #96]	@ (800ef28 <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eec8:	2b49      	cmp	r3, #73	@ 0x49
 800eeca:	d00b      	beq.n	800eee4 <svl_pdhHardwareInfoReqMsgReceived+0x3c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eecc:	4b16      	ldr	r3, [pc, #88]	@ (800ef28 <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	2b36      	cmp	r3, #54	@ 0x36
 800eed2:	d114      	bne.n	800eefe <svl_pdhHardwareInfoReqMsgReceived+0x56>
 800eed4:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eed8:	4814      	ldr	r0, [pc, #80]	@ (800ef2c <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 800eeda:	f004 ff83 	bl	8013de4 <gos_mutexLock>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b55      	cmp	r3, #85	@ 0x55
 800eee2:	d10c      	bne.n	800eefe <svl_pdhHardwareInfoReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800eee4:	4b0f      	ldr	r3, [pc, #60]	@ (800ef24 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	22fa      	movs	r2, #250	@ 0xfa
 800eeea:	6879      	ldr	r1, [r7, #4]
 800eeec:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800eef0:	4798      	blx	r3
 800eef2:	4603      	mov	r3, r0
 800eef4:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800eef6:	480d      	ldr	r0, [pc, #52]	@ (800ef2c <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 800eef8:	f005 f87a 	bl	8013ff0 <gos_mutexUnlock>
 800eefc:	e001      	b.n	800ef02 <svl_pdhHardwareInfoReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 800eefe:	23ae      	movs	r3, #174	@ 0xae
 800ef00:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800ef02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	23fa      	movs	r3, #250	@ 0xfa
 800ef0a:	4a05      	ldr	r2, [pc, #20]	@ (800ef20 <svl_pdhHardwareInfoReqMsgReceived+0x78>)
 800ef0c:	f642 2102 	movw	r1, #10754	@ 0x2a02
 800ef10:	2000      	movs	r0, #0
 800ef12:	f004 fa2d 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_GET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	20005848 	.word	0x20005848
 800ef24:	2000519c 	.word	0x2000519c
 800ef28:	20000606 	.word	0x20000606
 800ef2c:	200051a4 	.word	0x200051a4

0800ef30 <svl_pdhWifiCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgReqMsgReceived (void_t)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 800ef36:	4808      	ldr	r0, [pc, #32]	@ (800ef58 <svl_pdhWifiCfgReqMsgReceived+0x28>)
 800ef38:	f7ff fe5a 	bl	800ebf0 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 800ef3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	236e      	movs	r3, #110	@ 0x6e
 800ef44:	4a04      	ldr	r2, [pc, #16]	@ (800ef58 <svl_pdhWifiCfgReqMsgReceived+0x28>)
 800ef46:	f642 2103 	movw	r1, #10755	@ 0x2a03
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	f004 fa10 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_GET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 800ef50:	bf00      	nop
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20005944 	.word	0x20005944

0800ef5c <svl_pdhBldCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgReqMsgReceived (void_t)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af02      	add	r7, sp, #8
 800ef62:	4b1c      	ldr	r3, [pc, #112]	@ (800efd4 <svl_pdhBldCfgReqMsgReceived+0x78>)
 800ef64:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800ef66:	23ae      	movs	r3, #174	@ 0xae
 800ef68:	70fb      	strb	r3, [r7, #3]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d020      	beq.n	800efb2 <svl_pdhBldCfgReqMsgReceived+0x56>
 800ef70:	4b19      	ldr	r3, [pc, #100]	@ (800efd8 <svl_pdhBldCfgReqMsgReceived+0x7c>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d01c      	beq.n	800efb2 <svl_pdhBldCfgReqMsgReceived+0x56>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ef78:	4b18      	ldr	r3, [pc, #96]	@ (800efdc <svl_pdhBldCfgReqMsgReceived+0x80>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800ef7c:	2b49      	cmp	r3, #73	@ 0x49
 800ef7e:	d00b      	beq.n	800ef98 <svl_pdhBldCfgReqMsgReceived+0x3c>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ef80:	4b16      	ldr	r3, [pc, #88]	@ (800efdc <svl_pdhBldCfgReqMsgReceived+0x80>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	2b36      	cmp	r3, #54	@ 0x36
 800ef86:	d114      	bne.n	800efb2 <svl_pdhBldCfgReqMsgReceived+0x56>
 800ef88:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ef8c:	4814      	ldr	r0, [pc, #80]	@ (800efe0 <svl_pdhBldCfgReqMsgReceived+0x84>)
 800ef8e:	f004 ff29 	bl	8013de4 <gos_mutexLock>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b55      	cmp	r3, #85	@ 0x55
 800ef96:	d10c      	bne.n	800efb2 <svl_pdhBldCfgReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800ef98:	4b0f      	ldr	r3, [pc, #60]	@ (800efd8 <svl_pdhBldCfgReqMsgReceived+0x7c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	220e      	movs	r2, #14
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	f240 309a 	movw	r0, #922	@ 0x39a
 800efa4:	4798      	blx	r3
 800efa6:	4603      	mov	r3, r0
 800efa8:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800efaa:	480d      	ldr	r0, [pc, #52]	@ (800efe0 <svl_pdhBldCfgReqMsgReceived+0x84>)
 800efac:	f005 f820 	bl	8013ff0 <gos_mutexUnlock>
 800efb0:	e001      	b.n	800efb6 <svl_pdhBldCfgReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 800efb2:	23ae      	movs	r3, #174	@ 0xae
 800efb4:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 800efb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	230e      	movs	r3, #14
 800efbe:	4a05      	ldr	r2, [pc, #20]	@ (800efd4 <svl_pdhBldCfgReqMsgReceived+0x78>)
 800efc0:	f642 2104 	movw	r1, #10756	@ 0x2a04
 800efc4:	2000      	movs	r0, #0
 800efc6:	f004 f9d3 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_GET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 800efca:	bf00      	nop
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	200059b4 	.word	0x200059b4
 800efd8:	2000519c 	.word	0x2000519c
 800efdc:	20000606 	.word	0x20000606
 800efe0:	200051a4 	.word	0x200051a4

0800efe4 <svl_pdhSoftwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhSoftwareInfoSetMsgReceived (void_t)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&swInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhSwInfo_t));
 800efea:	4a36      	ldr	r2, [pc, #216]	@ (800f0c4 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800efec:	4b36      	ldr	r3, [pc, #216]	@ (800f0c8 <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 800efee:	4610      	mov	r0, r2
 800eff0:	4619      	mov	r1, r3
 800eff2:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800eff6:	461a      	mov	r2, r3
 800eff8:	f008 f899 	bl	801712e <memcpy>
 800effc:	4b31      	ldr	r3, [pc, #196]	@ (800f0c4 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800effe:	607b      	str	r3, [r7, #4]
	gos_result_t setResult = GOS_ERROR;
 800f000:	23ae      	movs	r3, #174	@ 0xae
 800f002:	70fb      	strb	r3, [r7, #3]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d020      	beq.n	800f04c <svl_pdhSoftwareInfoSetMsgReceived+0x68>
 800f00a:	4b30      	ldr	r3, [pc, #192]	@ (800f0cc <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01c      	beq.n	800f04c <svl_pdhSoftwareInfoSetMsgReceived+0x68>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f012:	4b2f      	ldr	r3, [pc, #188]	@ (800f0d0 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f014:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800f016:	2b49      	cmp	r3, #73	@ 0x49
 800f018:	d00b      	beq.n	800f032 <svl_pdhSoftwareInfoSetMsgReceived+0x4e>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f01a:	4b2d      	ldr	r3, [pc, #180]	@ (800f0d0 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	2b36      	cmp	r3, #54	@ 0x36
 800f020:	d114      	bne.n	800f04c <svl_pdhSoftwareInfoSetMsgReceived+0x68>
 800f022:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f026:	482b      	ldr	r0, [pc, #172]	@ (800f0d4 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f028:	f004 fedc 	bl	8013de4 <gos_mutexLock>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b55      	cmp	r3, #85	@ 0x55
 800f030:	d10c      	bne.n	800f04c <svl_pdhSoftwareInfoSetMsgReceived+0x68>
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800f032:	4b26      	ldr	r3, [pc, #152]	@ (800f0cc <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	2000      	movs	r0, #0
 800f03e:	4798      	blx	r3
 800f040:	4603      	mov	r3, r0
 800f042:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f044:	4823      	ldr	r0, [pc, #140]	@ (800f0d4 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f046:	f004 ffd3 	bl	8013ff0 <gos_mutexUnlock>
 800f04a:	e001      	b.n	800f050 <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
		setResult = GOS_ERROR;
 800f04c:	23ae      	movs	r3, #174	@ 0xae
 800f04e:	70fb      	strb	r3, [r7, #3]
 800f050:	4b1c      	ldr	r3, [pc, #112]	@ (800f0c4 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800f052:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 800f054:	23ae      	movs	r3, #174	@ 0xae
 800f056:	72fb      	strb	r3, [r7, #11]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d020      	beq.n	800f0a0 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
 800f05e:	4b1e      	ldr	r3, [pc, #120]	@ (800f0d8 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d01c      	beq.n	800f0a0 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f066:	4b1a      	ldr	r3, [pc, #104]	@ (800f0d0 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f068:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f06a:	2b49      	cmp	r3, #73	@ 0x49
 800f06c:	d00b      	beq.n	800f086 <svl_pdhSoftwareInfoSetMsgReceived+0xa2>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f06e:	4b18      	ldr	r3, [pc, #96]	@ (800f0d0 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b36      	cmp	r3, #54	@ 0x36
 800f074:	d114      	bne.n	800f0a0 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
 800f076:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f07a:	4816      	ldr	r0, [pc, #88]	@ (800f0d4 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f07c:	f004 feb2 	bl	8013de4 <gos_mutexLock>
 800f080:	4603      	mov	r3, r0
 800f082:	2b55      	cmp	r3, #85	@ 0x55
 800f084:	d10c      	bne.n	800f0a0 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800f086:	4b14      	ldr	r3, [pc, #80]	@ (800f0d8 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800f08e:	68f9      	ldr	r1, [r7, #12]
 800f090:	2000      	movs	r0, #0
 800f092:	4798      	blx	r3
 800f094:	4603      	mov	r3, r0
 800f096:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f098:	480e      	ldr	r0, [pc, #56]	@ (800f0d4 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f09a:	f004 ffa9 	bl	8013ff0 <gos_mutexUnlock>
 800f09e:	e001      	b.n	800f0a4 <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
		getResult = GOS_ERROR;
 800f0a0:	23ae      	movs	r3, #174	@ 0xae
 800f0a2:	72fb      	strb	r3, [r7, #11]

	(void_t) svl_pdhSetSwInfo(&swInfoMsg);
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800f0a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800f0ae:	4a05      	ldr	r2, [pc, #20]	@ (800f0c4 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800f0b0:	f642 2105 	movw	r1, #10757	@ 0x2a05
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	f004 f95b 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_SET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	200055a8 	.word	0x200055a8
 800f0c8:	200051a8 	.word	0x200051a8
 800f0cc:	200051a0 	.word	0x200051a0
 800f0d0:	20000606 	.word	0x20000606
 800f0d4:	200051a4 	.word	0x200051a4
 800f0d8:	2000519c 	.word	0x2000519c

0800f0dc <svl_pdhHardwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhHardwareInfoSetMsgReceived (void_t)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&hwInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhHwInfo_t));
 800f0e2:	4a21      	ldr	r2, [pc, #132]	@ (800f168 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f0e4:	4b21      	ldr	r3, [pc, #132]	@ (800f16c <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 800f0e6:	4610      	mov	r0, r2
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	23fa      	movs	r3, #250	@ 0xfa
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f008 f81e 	bl	801712e <memcpy>

	(void_t) svl_pdhSetHwInfo(&hwInfoMsg);
 800f0f2:	481d      	ldr	r0, [pc, #116]	@ (800f168 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f0f4:	f7ff fdec 	bl	800ecd0 <svl_pdhSetHwInfo>
 800f0f8:	4b1b      	ldr	r3, [pc, #108]	@ (800f168 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f0fa:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800f0fc:	23ae      	movs	r3, #174	@ 0xae
 800f0fe:	70fb      	strb	r3, [r7, #3]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d020      	beq.n	800f148 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
 800f106:	4b1a      	ldr	r3, [pc, #104]	@ (800f170 <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d01c      	beq.n	800f148 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f10e:	4b19      	ldr	r3, [pc, #100]	@ (800f174 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 800f110:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f112:	2b49      	cmp	r3, #73	@ 0x49
 800f114:	d00b      	beq.n	800f12e <svl_pdhHardwareInfoSetMsgReceived+0x52>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f116:	4b17      	ldr	r3, [pc, #92]	@ (800f174 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2b36      	cmp	r3, #54	@ 0x36
 800f11c:	d114      	bne.n	800f148 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
 800f11e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f122:	4815      	ldr	r0, [pc, #84]	@ (800f178 <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 800f124:	f004 fe5e 	bl	8013de4 <gos_mutexLock>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b55      	cmp	r3, #85	@ 0x55
 800f12c:	d10c      	bne.n	800f148 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800f12e:	4b10      	ldr	r3, [pc, #64]	@ (800f170 <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	22fa      	movs	r2, #250	@ 0xfa
 800f134:	6879      	ldr	r1, [r7, #4]
 800f136:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800f13a:	4798      	blx	r3
 800f13c:	4603      	mov	r3, r0
 800f13e:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f140:	480d      	ldr	r0, [pc, #52]	@ (800f178 <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 800f142:	f004 ff55 	bl	8013ff0 <gos_mutexUnlock>
 800f146:	e001      	b.n	800f14c <svl_pdhHardwareInfoSetMsgReceived+0x70>
		getResult = GOS_ERROR;
 800f148:	23ae      	movs	r3, #174	@ 0xae
 800f14a:	70fb      	strb	r3, [r7, #3]
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800f14c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	23fa      	movs	r3, #250	@ 0xfa
 800f154:	4a04      	ldr	r2, [pc, #16]	@ (800f168 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f156:	f642 2106 	movw	r1, #10758	@ 0x2a06
 800f15a:	2000      	movs	r0, #0
 800f15c:	f004 f908 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_SET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	20005848 	.word	0x20005848
 800f16c:	200051a8 	.word	0x200051a8
 800f170:	2000519c 	.word	0x2000519c
 800f174:	20000606 	.word	0x20000606
 800f178:	200051a4 	.word	0x200051a4

0800f17c <svl_pdhWifiCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgSetMsgReceived (void_t)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&wifiCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhWifiCfg_t));
 800f182:	4a0d      	ldr	r2, [pc, #52]	@ (800f1b8 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f184:	4b0d      	ldr	r3, [pc, #52]	@ (800f1bc <svl_pdhWifiCfgSetMsgReceived+0x40>)
 800f186:	4610      	mov	r0, r2
 800f188:	4619      	mov	r1, r3
 800f18a:	236e      	movs	r3, #110	@ 0x6e
 800f18c:	461a      	mov	r2, r3
 800f18e:	f007 ffce 	bl	801712e <memcpy>

	(void_t) svl_pdhSetWifiCfg(&wifiCfgMsg);
 800f192:	4809      	ldr	r0, [pc, #36]	@ (800f1b8 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f194:	f7ff fe0c 	bl	800edb0 <svl_pdhSetWifiCfg>
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 800f198:	4807      	ldr	r0, [pc, #28]	@ (800f1b8 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f19a:	f7ff fd29 	bl	800ebf0 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 800f19e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	236e      	movs	r3, #110	@ 0x6e
 800f1a6:	4a04      	ldr	r2, [pc, #16]	@ (800f1b8 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f1a8:	f642 2107 	movw	r1, #10759	@ 0x2a07
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	f004 f8df 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_SET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 800f1b2:	bf00      	nop
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20005944 	.word	0x20005944
 800f1bc:	200051a8 	.word	0x200051a8

0800f1c0 <svl_pdhBldCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgSetMsgReceived (void_t)
{
 800f1c0:	b590      	push	{r4, r7, lr}
 800f1c2:	b087      	sub	sp, #28
 800f1c4:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&bldCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhBldCfg_t));
 800f1c6:	4a34      	ldr	r2, [pc, #208]	@ (800f298 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f1c8:	4b34      	ldr	r3, [pc, #208]	@ (800f29c <svl_pdhBldCfgSetMsgReceived+0xdc>)
 800f1ca:	4614      	mov	r4, r2
 800f1cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1ce:	c407      	stmia	r4!, {r0, r1, r2}
 800f1d0:	8023      	strh	r3, [r4, #0]
 800f1d2:	4b31      	ldr	r3, [pc, #196]	@ (800f298 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f1d4:	607b      	str	r3, [r7, #4]
	gos_result_t setResult = GOS_ERROR;
 800f1d6:	23ae      	movs	r3, #174	@ 0xae
 800f1d8:	70fb      	strb	r3, [r7, #3]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d020      	beq.n	800f222 <svl_pdhBldCfgSetMsgReceived+0x62>
 800f1e0:	4b2f      	ldr	r3, [pc, #188]	@ (800f2a0 <svl_pdhBldCfgSetMsgReceived+0xe0>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d01c      	beq.n	800f222 <svl_pdhBldCfgSetMsgReceived+0x62>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f1e8:	4b2e      	ldr	r3, [pc, #184]	@ (800f2a4 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f1ea:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800f1ec:	2b49      	cmp	r3, #73	@ 0x49
 800f1ee:	d00b      	beq.n	800f208 <svl_pdhBldCfgSetMsgReceived+0x48>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f1f0:	4b2c      	ldr	r3, [pc, #176]	@ (800f2a4 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	2b36      	cmp	r3, #54	@ 0x36
 800f1f6:	d114      	bne.n	800f222 <svl_pdhBldCfgSetMsgReceived+0x62>
 800f1f8:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f1fc:	482a      	ldr	r0, [pc, #168]	@ (800f2a8 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f1fe:	f004 fdf1 	bl	8013de4 <gos_mutexLock>
 800f202:	4603      	mov	r3, r0
 800f204:	2b55      	cmp	r3, #85	@ 0x55
 800f206:	d10c      	bne.n	800f222 <svl_pdhBldCfgSetMsgReceived+0x62>
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800f208:	4b25      	ldr	r3, [pc, #148]	@ (800f2a0 <svl_pdhBldCfgSetMsgReceived+0xe0>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	220e      	movs	r2, #14
 800f20e:	6879      	ldr	r1, [r7, #4]
 800f210:	f240 309a 	movw	r0, #922	@ 0x39a
 800f214:	4798      	blx	r3
 800f216:	4603      	mov	r3, r0
 800f218:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f21a:	4823      	ldr	r0, [pc, #140]	@ (800f2a8 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f21c:	f004 fee8 	bl	8013ff0 <gos_mutexUnlock>
 800f220:	e001      	b.n	800f226 <svl_pdhBldCfgSetMsgReceived+0x66>
		setResult = GOS_ERROR;
 800f222:	23ae      	movs	r3, #174	@ 0xae
 800f224:	70fb      	strb	r3, [r7, #3]
 800f226:	4b1c      	ldr	r3, [pc, #112]	@ (800f298 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f228:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 800f22a:	23ae      	movs	r3, #174	@ 0xae
 800f22c:	72fb      	strb	r3, [r7, #11]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d020      	beq.n	800f276 <svl_pdhBldCfgSetMsgReceived+0xb6>
 800f234:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ac <svl_pdhBldCfgSetMsgReceived+0xec>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d01c      	beq.n	800f276 <svl_pdhBldCfgSetMsgReceived+0xb6>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f23c:	4b19      	ldr	r3, [pc, #100]	@ (800f2a4 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f23e:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800f240:	2b49      	cmp	r3, #73	@ 0x49
 800f242:	d00b      	beq.n	800f25c <svl_pdhBldCfgSetMsgReceived+0x9c>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f244:	4b17      	ldr	r3, [pc, #92]	@ (800f2a4 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	2b36      	cmp	r3, #54	@ 0x36
 800f24a:	d114      	bne.n	800f276 <svl_pdhBldCfgSetMsgReceived+0xb6>
 800f24c:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f250:	4815      	ldr	r0, [pc, #84]	@ (800f2a8 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f252:	f004 fdc7 	bl	8013de4 <gos_mutexLock>
 800f256:	4603      	mov	r3, r0
 800f258:	2b55      	cmp	r3, #85	@ 0x55
 800f25a:	d10c      	bne.n	800f276 <svl_pdhBldCfgSetMsgReceived+0xb6>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800f25c:	4b13      	ldr	r3, [pc, #76]	@ (800f2ac <svl_pdhBldCfgSetMsgReceived+0xec>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	220e      	movs	r2, #14
 800f262:	68f9      	ldr	r1, [r7, #12]
 800f264:	f240 309a 	movw	r0, #922	@ 0x39a
 800f268:	4798      	blx	r3
 800f26a:	4603      	mov	r3, r0
 800f26c:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f26e:	480e      	ldr	r0, [pc, #56]	@ (800f2a8 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f270:	f004 febe 	bl	8013ff0 <gos_mutexUnlock>
 800f274:	e001      	b.n	800f27a <svl_pdhBldCfgSetMsgReceived+0xba>
		getResult = GOS_ERROR;
 800f276:	23ae      	movs	r3, #174	@ 0xae
 800f278:	72fb      	strb	r3, [r7, #11]

	(void_t) svl_pdhSetBldCfg(&bldCfgMsg);
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 800f27a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	230e      	movs	r3, #14
 800f282:	4a05      	ldr	r2, [pc, #20]	@ (800f298 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f284:	f642 2108 	movw	r1, #10760	@ 0x2a08
 800f288:	2000      	movs	r0, #0
 800f28a:	f004 f871 	bl	8013370 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_SET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 800f28e:	bf00      	nop
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	bd90      	pop	{r4, r7, pc}
 800f296:	bf00      	nop
 800f298:	200059b4 	.word	0x200059b4
 800f29c:	200051a8 	.word	0x200051a8
 800f2a0:	200051a0 	.word	0x200051a0
 800f2a4:	20000606 	.word	0x20000606
 800f2a8:	200051a4 	.word	0x200051a4
 800f2ac:	2000519c 	.word	0x2000519c

0800f2b0 <svl_sdhInit>:

/*
 * Function: svl_sdhInit
 */
gos_result_t svl_sdhInit (void_t)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800f2b6:	2355      	movs	r3, #85	@ 0x55
 800f2b8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Register sysmon callbacks.
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryNumReqMsg));
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	2b55      	cmp	r3, #85	@ 0x55
 800f2be:	d105      	bne.n	800f2cc <svl_sdhInit+0x1c>
 800f2c0:	4853      	ldr	r0, [pc, #332]	@ (800f410 <svl_sdhInit+0x160>)
 800f2c2:	f005 fb8d 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	71fb      	strb	r3, [r7, #7]
 800f2ca:	e001      	b.n	800f2d0 <svl_sdhInit+0x20>
 800f2cc:	23ae      	movs	r3, #174	@ 0xae
 800f2ce:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryInfoReqMsg));
 800f2d0:	79fb      	ldrb	r3, [r7, #7]
 800f2d2:	2b55      	cmp	r3, #85	@ 0x55
 800f2d4:	d105      	bne.n	800f2e2 <svl_sdhInit+0x32>
 800f2d6:	484f      	ldr	r0, [pc, #316]	@ (800f414 <svl_sdhInit+0x164>)
 800f2d8:	f005 fb82 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	71fb      	strb	r3, [r7, #7]
 800f2e0:	e001      	b.n	800f2e6 <svl_sdhInit+0x36>
 800f2e2:	23ae      	movs	r3, #174	@ 0xae
 800f2e4:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonDownloadReqMsg));
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	2b55      	cmp	r3, #85	@ 0x55
 800f2ea:	d105      	bne.n	800f2f8 <svl_sdhInit+0x48>
 800f2ec:	484a      	ldr	r0, [pc, #296]	@ (800f418 <svl_sdhInit+0x168>)
 800f2ee:	f005 fb77 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	71fb      	strb	r3, [r7, #7]
 800f2f6:	e001      	b.n	800f2fc <svl_sdhInit+0x4c>
 800f2f8:	23ae      	movs	r3, #174	@ 0xae
 800f2fa:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryChunkReqMsg));
 800f2fc:	79fb      	ldrb	r3, [r7, #7]
 800f2fe:	2b55      	cmp	r3, #85	@ 0x55
 800f300:	d105      	bne.n	800f30e <svl_sdhInit+0x5e>
 800f302:	4846      	ldr	r0, [pc, #280]	@ (800f41c <svl_sdhInit+0x16c>)
 800f304:	f005 fb6c 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800f308:	4603      	mov	r3, r0
 800f30a:	71fb      	strb	r3, [r7, #7]
 800f30c:	e001      	b.n	800f312 <svl_sdhInit+0x62>
 800f30e:	23ae      	movs	r3, #174	@ 0xae
 800f310:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonSoftwareInstallReqMsg));
 800f312:	79fb      	ldrb	r3, [r7, #7]
 800f314:	2b55      	cmp	r3, #85	@ 0x55
 800f316:	d105      	bne.n	800f324 <svl_sdhInit+0x74>
 800f318:	4841      	ldr	r0, [pc, #260]	@ (800f420 <svl_sdhInit+0x170>)
 800f31a:	f005 fb61 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800f31e:	4603      	mov	r3, r0
 800f320:	71fb      	strb	r3, [r7, #7]
 800f322:	e001      	b.n	800f328 <svl_sdhInit+0x78>
 800f324:	23ae      	movs	r3, #174	@ 0xae
 800f326:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryEraseReqMsg));
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	2b55      	cmp	r3, #85	@ 0x55
 800f32c:	d105      	bne.n	800f33a <svl_sdhInit+0x8a>
 800f32e:	483d      	ldr	r0, [pc, #244]	@ (800f424 <svl_sdhInit+0x174>)
 800f330:	f005 fb56 	bl	80149e0 <gos_sysmonRegisterUserMessage>
 800f334:	4603      	mov	r3, r0
 800f336:	71fb      	strb	r3, [r7, #7]
 800f338:	e001      	b.n	800f33e <svl_sdhInit+0x8e>
 800f33a:	23ae      	movs	r3, #174	@ 0xae
 800f33c:	71fb      	strb	r3, [r7, #7]

    // Register IPL callbacks.
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryNumReqMsg));
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	2b55      	cmp	r3, #85	@ 0x55
 800f342:	d105      	bne.n	800f350 <svl_sdhInit+0xa0>
 800f344:	4838      	ldr	r0, [pc, #224]	@ (800f428 <svl_sdhInit+0x178>)
 800f346:	f7fe fe85 	bl	800e054 <svl_iplRegisterUserMsg>
 800f34a:	4603      	mov	r3, r0
 800f34c:	71fb      	strb	r3, [r7, #7]
 800f34e:	e001      	b.n	800f354 <svl_sdhInit+0xa4>
 800f350:	23ae      	movs	r3, #174	@ 0xae
 800f352:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryInfoReqMsg));
 800f354:	79fb      	ldrb	r3, [r7, #7]
 800f356:	2b55      	cmp	r3, #85	@ 0x55
 800f358:	d105      	bne.n	800f366 <svl_sdhInit+0xb6>
 800f35a:	4834      	ldr	r0, [pc, #208]	@ (800f42c <svl_sdhInit+0x17c>)
 800f35c:	f7fe fe7a 	bl	800e054 <svl_iplRegisterUserMsg>
 800f360:	4603      	mov	r3, r0
 800f362:	71fb      	strb	r3, [r7, #7]
 800f364:	e001      	b.n	800f36a <svl_sdhInit+0xba>
 800f366:	23ae      	movs	r3, #174	@ 0xae
 800f368:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplDownloadReqMsg));
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	2b55      	cmp	r3, #85	@ 0x55
 800f36e:	d105      	bne.n	800f37c <svl_sdhInit+0xcc>
 800f370:	482f      	ldr	r0, [pc, #188]	@ (800f430 <svl_sdhInit+0x180>)
 800f372:	f7fe fe6f 	bl	800e054 <svl_iplRegisterUserMsg>
 800f376:	4603      	mov	r3, r0
 800f378:	71fb      	strb	r3, [r7, #7]
 800f37a:	e001      	b.n	800f380 <svl_sdhInit+0xd0>
 800f37c:	23ae      	movs	r3, #174	@ 0xae
 800f37e:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryChunkReqMsg));
 800f380:	79fb      	ldrb	r3, [r7, #7]
 800f382:	2b55      	cmp	r3, #85	@ 0x55
 800f384:	d105      	bne.n	800f392 <svl_sdhInit+0xe2>
 800f386:	482b      	ldr	r0, [pc, #172]	@ (800f434 <svl_sdhInit+0x184>)
 800f388:	f7fe fe64 	bl	800e054 <svl_iplRegisterUserMsg>
 800f38c:	4603      	mov	r3, r0
 800f38e:	71fb      	strb	r3, [r7, #7]
 800f390:	e001      	b.n	800f396 <svl_sdhInit+0xe6>
 800f392:	23ae      	movs	r3, #174	@ 0xae
 800f394:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplSoftwareInstallReqMsg));
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	2b55      	cmp	r3, #85	@ 0x55
 800f39a:	d105      	bne.n	800f3a8 <svl_sdhInit+0xf8>
 800f39c:	4826      	ldr	r0, [pc, #152]	@ (800f438 <svl_sdhInit+0x188>)
 800f39e:	f7fe fe59 	bl	800e054 <svl_iplRegisterUserMsg>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	71fb      	strb	r3, [r7, #7]
 800f3a6:	e001      	b.n	800f3ac <svl_sdhInit+0xfc>
 800f3a8:	23ae      	movs	r3, #174	@ 0xae
 800f3aa:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplEraseReqMsg));
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	2b55      	cmp	r3, #85	@ 0x55
 800f3b0:	d105      	bne.n	800f3be <svl_sdhInit+0x10e>
 800f3b2:	4822      	ldr	r0, [pc, #136]	@ (800f43c <svl_sdhInit+0x18c>)
 800f3b4:	f7fe fe4e 	bl	800e054 <svl_iplRegisterUserMsg>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	71fb      	strb	r3, [r7, #7]
 800f3bc:	e001      	b.n	800f3c2 <svl_sdhInit+0x112>
 800f3be:	23ae      	movs	r3, #174	@ 0xae
 800f3c0:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_taskRegister(&svlSdhTaskDesc, NULL));
 800f3c2:	79fb      	ldrb	r3, [r7, #7]
 800f3c4:	2b55      	cmp	r3, #85	@ 0x55
 800f3c6:	d106      	bne.n	800f3d6 <svl_sdhInit+0x126>
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	481d      	ldr	r0, [pc, #116]	@ (800f440 <svl_sdhInit+0x190>)
 800f3cc:	f002 f81e 	bl	801140c <gos_taskRegister>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	71fb      	strb	r3, [r7, #7]
 800f3d4:	e001      	b.n	800f3da <svl_sdhInit+0x12a>
 800f3d6:	23ae      	movs	r3, #174	@ 0xae
 800f3d8:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlTrigger));
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	2b55      	cmp	r3, #85	@ 0x55
 800f3de:	d105      	bne.n	800f3ec <svl_sdhInit+0x13c>
 800f3e0:	4818      	ldr	r0, [pc, #96]	@ (800f444 <svl_sdhInit+0x194>)
 800f3e2:	f006 fd87 	bl	8015ef4 <gos_triggerInit>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	71fb      	strb	r3, [r7, #7]
 800f3ea:	e001      	b.n	800f3f0 <svl_sdhInit+0x140>
 800f3ec:	23ae      	movs	r3, #174	@ 0xae
 800f3ee:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlFeedbackTrigger));
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	2b55      	cmp	r3, #85	@ 0x55
 800f3f4:	d105      	bne.n	800f402 <svl_sdhInit+0x152>
 800f3f6:	4814      	ldr	r0, [pc, #80]	@ (800f448 <svl_sdhInit+0x198>)
 800f3f8:	f006 fd7c 	bl	8015ef4 <gos_triggerInit>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	71fb      	strb	r3, [r7, #7]
 800f400:	e001      	b.n	800f406 <svl_sdhInit+0x156>
 800f402:	23ae      	movs	r3, #174	@ 0xae
 800f404:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800f406:	79fb      	ldrb	r3, [r7, #7]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	20000688 	.word	0x20000688
 800f414:	20000698 	.word	0x20000698
 800f418:	200006a8 	.word	0x200006a8
 800f41c:	200006b8 	.word	0x200006b8
 800f420:	200006c8 	.word	0x200006c8
 800f424:	200006d8 	.word	0x200006d8
 800f428:	200006e8 	.word	0x200006e8
 800f42c:	200006f0 	.word	0x200006f0
 800f430:	200006f8 	.word	0x200006f8
 800f434:	20000700 	.word	0x20000700
 800f438:	20000708 	.word	0x20000708
 800f43c:	20000710 	.word	0x20000710
 800f440:	20000718 	.word	0x20000718
 800f444:	20005e0c 	.word	0x20005e0c
 800f448:	20005e18 	.word	0x20005e18

0800f44c <svl_sdhConfigure>:

/*
 * Function: svl_sdhConfigure
 */
gos_result_t svl_sdhConfigure (svl_sdhCfg_t* pCfg)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t cfgResult = GOS_ERROR;
 800f454:	23ae      	movs	r3, #174	@ 0xae
 800f456:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d011      	beq.n	800f482 <svl_sdhConfigure+0x36>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00d      	beq.n	800f482 <svl_sdhConfigure+0x36>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d009      	beq.n	800f482 <svl_sdhConfigure+0x36>
    {
        sdhReadFunction  = pCfg->readFunction;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a07      	ldr	r2, [pc, #28]	@ (800f490 <svl_sdhConfigure+0x44>)
 800f474:	6013      	str	r3, [r2, #0]
        sdhWriteFunction = pCfg->writeFunction;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	4a06      	ldr	r2, [pc, #24]	@ (800f494 <svl_sdhConfigure+0x48>)
 800f47c:	6013      	str	r3, [r2, #0]
        cfgResult        = GOS_SUCCESS;
 800f47e:	2355      	movs	r3, #85	@ 0x55
 800f480:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return cfgResult;
 800f482:	7bfb      	ldrb	r3, [r7, #15]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	200059c4 	.word	0x200059c4
 800f494:	200059c8 	.word	0x200059c8

0800f498 <svl_sdhGetBinaryData>:

/*
 * Function: svl_sdhGetBinaryData
 */
gos_result_t svl_sdhGetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	4603      	mov	r3, r0
 800f4a0:	6039      	str	r1, [r7, #0]
 800f4a2:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_SUCCESS;
 800f4a4:	2355      	movs	r3, #85	@ 0x55
 800f4a6:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL)
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d01e      	beq.n	800f4f0 <svl_sdhGetBinaryData+0x58>
 800f4b2:	4b13      	ldr	r3, [pc, #76]	@ (800f500 <svl_sdhGetBinaryData+0x68>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d01a      	beq.n	800f4f0 <svl_sdhGetBinaryData+0x58>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f4ba:	4b11      	ldr	r3, [pc, #68]	@ (800f500 <svl_sdhGetBinaryData+0x68>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f107 010c 	add.w	r1, r7, #12
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	4798      	blx	r3

        if (index < numOfBinaries)
 800f4c8:	89bb      	ldrh	r3, [r7, #12]
 800f4ca:	88fa      	ldrh	r2, [r7, #6]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d20c      	bcs.n	800f4ea <svl_sdhGetBinaryData+0x52>
        {
            (void_t) sdhReadFunction(
 800f4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f500 <svl_sdhGetBinaryData+0x68>)
 800f4d2:	681c      	ldr	r4, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 800f4d4:	88fa      	ldrh	r2, [r7, #6]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	4413      	add	r3, r2
 800f4dc:	011b      	lsls	r3, r3, #4
 800f4de:	3302      	adds	r3, #2
            (void_t) sdhReadFunction(
 800f4e0:	2230      	movs	r2, #48	@ 0x30
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	47a0      	blx	r4
        if (index < numOfBinaries)
 800f4e8:	e004      	b.n	800f4f4 <svl_sdhGetBinaryData+0x5c>
                    );
        }
        else
        {
            // Invalid request.
            dataGetResult = GOS_ERROR;
 800f4ea:	23ae      	movs	r3, #174	@ 0xae
 800f4ec:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 800f4ee:	e001      	b.n	800f4f4 <svl_sdhGetBinaryData+0x5c>
        }
    }
    else
    {
        // NULL pointer error.
        dataGetResult = GOS_ERROR;
 800f4f0:	23ae      	movs	r3, #174	@ 0xae
 800f4f2:	73fb      	strb	r3, [r7, #15]
    }

    return dataGetResult;
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd90      	pop	{r4, r7, pc}
 800f4fe:	bf00      	nop
 800f500:	200059c4 	.word	0x200059c4

0800f504 <svl_sdhSetBinaryData>:

/*
 * Function: svl_sdhSetBinaryData
 */
gos_result_t svl_sdhSetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 800f504:	b590      	push	{r4, r7, lr}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_SUCCESS;
 800f510:	2355      	movs	r3, #85	@ 0x55
 800f512:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 800f514:	2300      	movs	r3, #0
 800f516:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d022      	beq.n	800f564 <svl_sdhSetBinaryData+0x60>
 800f51e:	4b15      	ldr	r3, [pc, #84]	@ (800f574 <svl_sdhSetBinaryData+0x70>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01e      	beq.n	800f564 <svl_sdhSetBinaryData+0x60>
 800f526:	4b14      	ldr	r3, [pc, #80]	@ (800f578 <svl_sdhSetBinaryData+0x74>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d01a      	beq.n	800f564 <svl_sdhSetBinaryData+0x60>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f52e:	4b11      	ldr	r3, [pc, #68]	@ (800f574 <svl_sdhSetBinaryData+0x70>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f107 010c 	add.w	r1, r7, #12
 800f536:	2202      	movs	r2, #2
 800f538:	2000      	movs	r0, #0
 800f53a:	4798      	blx	r3

        if (index < numOfBinaries)
 800f53c:	89bb      	ldrh	r3, [r7, #12]
 800f53e:	88fa      	ldrh	r2, [r7, #6]
 800f540:	429a      	cmp	r2, r3
 800f542:	d20c      	bcs.n	800f55e <svl_sdhSetBinaryData+0x5a>
        {
            (void_t) sdhWriteFunction(
 800f544:	4b0c      	ldr	r3, [pc, #48]	@ (800f578 <svl_sdhSetBinaryData+0x74>)
 800f546:	681c      	ldr	r4, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 800f548:	88fa      	ldrh	r2, [r7, #6]
 800f54a:	4613      	mov	r3, r2
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	4413      	add	r3, r2
 800f550:	011b      	lsls	r3, r3, #4
 800f552:	3302      	adds	r3, #2
            (void_t) sdhWriteFunction(
 800f554:	2230      	movs	r2, #48	@ 0x30
 800f556:	6839      	ldr	r1, [r7, #0]
 800f558:	4618      	mov	r0, r3
 800f55a:	47a0      	blx	r4
        if (index < numOfBinaries)
 800f55c:	e004      	b.n	800f568 <svl_sdhSetBinaryData+0x64>
                    );
        }
        else
        {
            // Invalid request.
            dataSetResult = GOS_ERROR;
 800f55e:	23ae      	movs	r3, #174	@ 0xae
 800f560:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 800f562:	e001      	b.n	800f568 <svl_sdhSetBinaryData+0x64>
        }
    }
    else
    {
        // NULL pointer error.
        dataSetResult = GOS_ERROR;
 800f564:	23ae      	movs	r3, #174	@ 0xae
 800f566:	73fb      	strb	r3, [r7, #15]
    }

    return dataSetResult;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3714      	adds	r7, #20
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd90      	pop	{r4, r7, pc}
 800f572:	bf00      	nop
 800f574:	200059c4 	.word	0x200059c4
 800f578:	200059c8 	.word	0x200059c8

0800f57c <svl_sdhReadBytesFromMemory>:

/*
 * Function: svl_sdhReadBytesFromMemory
 */
gos_result_t svl_sdhReadBytesFromMemory (u32_t address, u8_t* pBuffer, u32_t size)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t readResult = GOS_SUCCESS;
 800f588:	2355      	movs	r3, #85	@ 0x55
 800f58a:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pBuffer != NULL && sdhReadFunction != NULL)
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00a      	beq.n	800f5a8 <svl_sdhReadBytesFromMemory+0x2c>
 800f592:	4b09      	ldr	r3, [pc, #36]	@ (800f5b8 <svl_sdhReadBytesFromMemory+0x3c>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d006      	beq.n	800f5a8 <svl_sdhReadBytesFromMemory+0x2c>
    {
        (void_t) sdhReadFunction(address, pBuffer, size);
 800f59a:	4b07      	ldr	r3, [pc, #28]	@ (800f5b8 <svl_sdhReadBytesFromMemory+0x3c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	68b9      	ldr	r1, [r7, #8]
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	4798      	blx	r3
 800f5a6:	e001      	b.n	800f5ac <svl_sdhReadBytesFromMemory+0x30>
    }
    else
    {
        // NULL pointer error.
        readResult = GOS_ERROR;
 800f5a8:	23ae      	movs	r3, #174	@ 0xae
 800f5aa:	75fb      	strb	r3, [r7, #23]
    }

    return readResult;
 800f5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3718      	adds	r7, #24
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	200059c4 	.word	0x200059c4

0800f5bc <svl_sdhDaemon>:
 * @details Handles the incoming requests via sysmon or IPL.
 *
 * @return -
 */
GOS_STATIC void_t svl_sdhDaemon (void_t)
{
 800f5bc:	b5b0      	push	{r4, r5, r7, lr}
 800f5be:	b0aa      	sub	sp, #168	@ 0xa8
 800f5c0:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    svl_sdhBinaryDesc_t binaryDescriptor    = {0};
 800f5c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f5c6:	2230      	movs	r2, #48	@ 0x30
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f007 fd18 	bl	8017000 <memset>
    svl_sdhBinaryDesc_t newBinaryDescriptor = {0};
 800f5d0:	f107 0320 	add.w	r3, r7, #32
 800f5d4:	2230      	movs	r2, #48	@ 0x30
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f007 fd11 	bl	8017000 <memset>
    svl_sdhChunkDesc_t  chunkDesc           = {0};
 800f5de:	f107 031c 	add.w	r3, r7, #28
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	460a      	mov	r2, r1
 800f5e6:	801a      	strh	r2, [r3, #0]
 800f5e8:	460a      	mov	r2, r1
 800f5ea:	709a      	strb	r2, [r3, #2]
    svl_pdhBldCfg_t     bldCfg              = {0};
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	605a      	str	r2, [r3, #4]
 800f5f6:	609a      	str	r2, [r3, #8]
 800f5f8:	819a      	strh	r2, [r3, #12]
    u16_t               numOfChunks         = 0u;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    u16_t               index               = 0u;
 800f600:	2300      	movs	r3, #0
 800f602:	817b      	strh	r3, [r7, #10]
    u16_t               numOfBinaries       = 0u;
 800f604:	2300      	movs	r3, #0
 800f606:	813b      	strh	r3, [r7, #8]
    u8_t                result              = 0u;
 800f608:	2300      	movs	r3, #0
 800f60a:	71fb      	strb	r3, [r7, #7]
    u32_t               startAddress        = 0u;
 800f60c:	2300      	movs	r3, #0
 800f60e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    u32_t               fromAddress         = 0u;
 800f612:	2300      	movs	r3, #0
 800f614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    u32_t               totalCopySize       = 0u;
 800f618:	2300      	movs	r3, #0
 800f61a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    bool_t              defragment          = GOS_FALSE;
 800f61e:	2349      	movs	r3, #73	@ 0x49
 800f620:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800f622:	f04f 32ff 	mov.w	r2, #4294967295
 800f626:	2101      	movs	r1, #1
 800f628:	4890      	ldr	r0, [pc, #576]	@ (800f86c <svl_sdhDaemon+0x2b0>)
 800f62a:	f006 fcd7 	bl	8015fdc <gos_triggerWait>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b55      	cmp	r3, #85	@ 0x55
 800f632:	f040 829d 	bne.w	800fb70 <svl_sdhDaemon+0x5b4>
        {
            switch (sdhRequestedState)
 800f636:	4b8e      	ldr	r3, [pc, #568]	@ (800f870 <svl_sdhDaemon+0x2b4>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	2b05      	cmp	r3, #5
 800f63e:	f200 8286 	bhi.w	800fb4e <svl_sdhDaemon+0x592>
 800f642:	a201      	add	r2, pc, #4	@ (adr r2, 800f648 <svl_sdhDaemon+0x8c>)
 800f644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f648:	0800f8a1 	.word	0x0800f8a1
 800f64c:	0800f661 	.word	0x0800f661
 800f650:	0800f6b5 	.word	0x0800f6b5
 800f654:	0800f765 	.word	0x0800f765
 800f658:	0800f707 	.word	0x0800f707
 800f65c:	0800f993 	.word	0x0800f993
            {
                case SDH_STATE_BINARY_NUM_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f660:	4b84      	ldr	r3, [pc, #528]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 8274 	beq.w	800fb52 <svl_sdhDaemon+0x596>
 800f66a:	4b83      	ldr	r3, [pc, #524]	@ (800f878 <svl_sdhDaemon+0x2bc>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f000 826f 	beq.w	800fb52 <svl_sdhDaemon+0x596>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary number request received.\r\n");
 800f674:	4981      	ldr	r1, [pc, #516]	@ (800f87c <svl_sdhDaemon+0x2c0>)
 800f676:	2036      	movs	r0, #54	@ 0x36
 800f678:	f006 f98a 	bl	8015990 <gos_traceTrace>
#endif
                        u16_t numOfBinaries = 0u;
 800f67c:	2300      	movs	r3, #0
 800f67e:	80bb      	strh	r3, [r7, #4]

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f680:	4b7c      	ldr	r3, [pc, #496]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	1d39      	adds	r1, r7, #4
 800f686:	2202      	movs	r2, #2
 800f688:	2000      	movs	r0, #0
 800f68a:	4798      	blx	r3

                        if (numOfBinaries == 0xFFFF)
 800f68c:	88bb      	ldrh	r3, [r7, #4]
 800f68e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f692:	4293      	cmp	r3, r2
 800f694:	d107      	bne.n	800f6a6 <svl_sdhDaemon+0xea>
                        {
                            numOfBinaries = 0u;
 800f696:	2300      	movs	r3, #0
 800f698:	80bb      	strh	r3, [r7, #4]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f69a:	4b77      	ldr	r3, [pc, #476]	@ (800f878 <svl_sdhDaemon+0x2bc>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	1d39      	adds	r1, r7, #4
 800f6a0:	2202      	movs	r2, #2
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	4798      	blx	r3
                        else
                        {
                            // Number OK.
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, &numOfBinaries, sizeof(numOfBinaries));
 800f6a6:	88ba      	ldrh	r2, [r7, #4]
 800f6a8:	4b75      	ldr	r3, [pc, #468]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f6aa:	801a      	strh	r2, [r3, #0]

                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f6ac:	4875      	ldr	r0, [pc, #468]	@ (800f884 <svl_sdhDaemon+0x2c8>)
 800f6ae:	f006 fd45 	bl	801613c <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f6b2:	e24e      	b.n	800fb52 <svl_sdhDaemon+0x596>
                }
                case SDH_STATE_BINARY_INFO_REQ:
                {
                    if (sdhReadFunction != NULL)
 800f6b4:	4b6f      	ldr	r3, [pc, #444]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 824c 	beq.w	800fb56 <svl_sdhDaemon+0x59a>
                    {
                        (void_t) memcpy((void_t*)&index, sdhBuffer, sizeof(index));
 800f6be:	4b70      	ldr	r3, [pc, #448]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	817b      	strh	r3, [r7, #10]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary info request received. Index: %u\r\n", index);
 800f6c4:	897b      	ldrh	r3, [r7, #10]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	496f      	ldr	r1, [pc, #444]	@ (800f888 <svl_sdhDaemon+0x2cc>)
 800f6ca:	2036      	movs	r0, #54	@ 0x36
 800f6cc:	f006 fa84 	bl	8015bd8 <gos_traceTraceFormatted>
#endif
                        if (svl_sdhGetBinaryData(index, &binaryDescriptor) == GOS_SUCCESS)
 800f6d0:	897b      	ldrh	r3, [r7, #10]
 800f6d2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff fedd 	bl	800f498 <svl_sdhGetBinaryData>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b55      	cmp	r3, #85	@ 0x55
 800f6e2:	f040 8238 	bne.w	800fb56 <svl_sdhDaemon+0x59a>
                        {
                            (void_t) memcpy(sdhBuffer, (void_t*)&binaryDescriptor, sizeof(binaryDescriptor));
 800f6e6:	4b66      	ldr	r3, [pc, #408]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f6e8:	461d      	mov	r5, r3
 800f6ea:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800f6ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f6f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f6f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f6fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                            gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f6fe:	4861      	ldr	r0, [pc, #388]	@ (800f884 <svl_sdhDaemon+0x2c8>)
 800f700:	f006 fd1c 	bl	801613c <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f704:	e227      	b.n	800fb56 <svl_sdhDaemon+0x59a>
                }
                case SDH_STATE_BINARY_INSTALL_REQ:
                {
                    if (sdhReadFunction != NULL)
 800f706:	4b5b      	ldr	r3, [pc, #364]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 8225 	beq.w	800fb5a <svl_sdhDaemon+0x59e>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 800f710:	4b5b      	ldr	r3, [pc, #364]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f712:	881b      	ldrh	r3, [r3, #0]
 800f714:	817b      	strh	r3, [r7, #10]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary install request received. Index: %u\r\n", index);
 800f716:	897b      	ldrh	r3, [r7, #10]
 800f718:	461a      	mov	r2, r3
 800f71a:	495c      	ldr	r1, [pc, #368]	@ (800f88c <svl_sdhDaemon+0x2d0>)
 800f71c:	2036      	movs	r0, #54	@ 0x36
 800f71e:	f006 fa5b 	bl	8015bd8 <gos_traceTraceFormatted>
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f722:	4b54      	ldr	r3, [pc, #336]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f107 0108 	add.w	r1, r7, #8
 800f72a:	2202      	movs	r2, #2
 800f72c:	2000      	movs	r0, #0
 800f72e:	4798      	blx	r3

                        if (index < numOfBinaries)
 800f730:	897a      	ldrh	r2, [r7, #10]
 800f732:	893b      	ldrh	r3, [r7, #8]
 800f734:	429a      	cmp	r2, r3
 800f736:	f080 8210 	bcs.w	800fb5a <svl_sdhDaemon+0x59e>
                        {
                            (void_t) svl_pdhGetBldCfg(&bldCfg);
 800f73a:	f107 030c 	add.w	r3, r7, #12
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff fa1e 	bl	800eb80 <svl_pdhGetBldCfg>

                            bldCfg.installRequested = GOS_TRUE;
 800f744:	2336      	movs	r3, #54	@ 0x36
 800f746:	733b      	strb	r3, [r7, #12]
                            bldCfg.binaryIndex      = index;
 800f748:	897b      	ldrh	r3, [r7, #10]
 800f74a:	81fb      	strh	r3, [r7, #14]

                            (void_t) svl_pdhSetBldCfg(&bldCfg);
 800f74c:	f107 030c 	add.w	r3, r7, #12
 800f750:	4618      	mov	r0, r3
 800f752:	f7ff faf5 	bl	800ed40 <svl_pdhSetBldCfg>

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 800f756:	897a      	ldrh	r2, [r7, #10]
 800f758:	4b49      	ldr	r3, [pc, #292]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f75a:	801a      	strh	r2, [r3, #0]

                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f75c:	4849      	ldr	r0, [pc, #292]	@ (800f884 <svl_sdhDaemon+0x2c8>)
 800f75e:	f006 fced 	bl	801613c <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f762:	e1fa      	b.n	800fb5a <svl_sdhDaemon+0x59e>
                }
                case SDH_STATE_BINARY_DOWNLOAD_REQ:
                {
                    if (sdhReadFunction != NULL)
 800f764:	4b43      	ldr	r3, [pc, #268]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 81f8 	beq.w	800fb5e <svl_sdhDaemon+0x5a2>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download request received.\r\n");
 800f76e:	4948      	ldr	r1, [pc, #288]	@ (800f890 <svl_sdhDaemon+0x2d4>)
 800f770:	2036      	movs	r0, #54	@ 0x36
 800f772:	f006 f90d 	bl	8015990 <gos_traceTrace>
#endif
                        // Check if descriptor fits.
                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f776:	4b3f      	ldr	r3, [pc, #252]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f107 0108 	add.w	r1, r7, #8
 800f77e:	2202      	movs	r2, #2
 800f780:	2000      	movs	r0, #0
 800f782:	4798      	blx	r3

                        if ((SVL_SDH_STORAGE_DESC_BIN_DESC_START + ((numOfBinaries + 1) * sizeof(svl_sdhBinaryDesc_t))) < SVL_SDH_STORAGE_DESC_AREA_SIZE)
 800f784:	893b      	ldrh	r3, [r7, #8]
 800f786:	3301      	adds	r3, #1
 800f788:	461a      	mov	r2, r3
 800f78a:	4613      	mov	r3, r2
 800f78c:	005b      	lsls	r3, r3, #1
 800f78e:	4413      	add	r3, r2
 800f790:	011b      	lsls	r3, r3, #4
 800f792:	3302      	adds	r3, #2
 800f794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f798:	d25f      	bcs.n	800f85a <svl_sdhDaemon+0x29e>
                        {
                            (void_t) memcpy((void_t*)&newBinaryDescriptor, (void_t*)sdhBuffer, sizeof(newBinaryDescriptor));
 800f79a:	4b39      	ldr	r3, [pc, #228]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f79c:	f107 0420 	add.w	r4, r7, #32
 800f7a0:	461d      	mov	r5, r3
 800f7a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f7ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

                            if (numOfBinaries > 0)
 800f7b2:	893b      	ldrh	r3, [r7, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d013      	beq.n	800f7e0 <svl_sdhDaemon+0x224>
                            {
                                (void_t) sdhReadFunction(
 800f7b8:	4b2e      	ldr	r3, [pc, #184]	@ (800f874 <svl_sdhDaemon+0x2b8>)
 800f7ba:	681c      	ldr	r4, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + (numOfBinaries - 1) * sizeof(svl_sdhBinaryDesc_t),
 800f7bc:	893b      	ldrh	r3, [r7, #8]
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	4413      	add	r3, r2
 800f7c8:	011b      	lsls	r3, r3, #4
 800f7ca:	3302      	adds	r3, #2
                                (void_t) sdhReadFunction(
 800f7cc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800f7d0:	2230      	movs	r2, #48	@ 0x30
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	47a0      	blx	r4
                                        (u8_t*)&binaryDescriptor,
                                        sizeof(binaryDescriptor)
                                        );

                                newBinaryDescriptor.binaryLocation = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size;
 800f7d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f7d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f7da:	4413      	add	r3, r2
 800f7dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7de:	e002      	b.n	800f7e6 <svl_sdhDaemon+0x22a>
                            }
                            else
                            {
                                newBinaryDescriptor.binaryLocation = SVL_SDH_BINARY_AREA_START;
 800f7e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f7e4:	643b      	str	r3, [r7, #64]	@ 0x40
                            }

#if SVL_SDH_TRACE_LEVEL == 2
                            (void_t) gos_traceTraceFormatted(
 800f7e6:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800f7e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800f7ee:	f107 0020 	add.w	r0, r7, #32
 800f7f2:	9102      	str	r1, [sp, #8]
 800f7f4:	9201      	str	r2, [sp, #4]
 800f7f6:	9300      	str	r3, [sp, #0]
 800f7f8:	4623      	mov	r3, r4
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	4925      	ldr	r1, [pc, #148]	@ (800f894 <svl_sdhDaemon+0x2d8>)
 800f7fe:	2036      	movs	r0, #54	@ 0x36
 800f800:	f006 f9ea 	bl	8015bd8 <gos_traceTraceFormatted>
                                    newBinaryDescriptor.binaryInfo.size,
                                    newBinaryDescriptor.binaryInfo.startAddress,
                                    newBinaryDescriptor.binaryInfo.crc);
#endif

                            if ((newBinaryDescriptor.binaryLocation + newBinaryDescriptor.binaryInfo.size) < SVL_SDH_BINARY_AREA_END)
 800f804:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f808:	4413      	add	r3, r2
 800f80a:	4a23      	ldr	r2, [pc, #140]	@ (800f898 <svl_sdhDaemon+0x2dc>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d821      	bhi.n	800f854 <svl_sdhDaemon+0x298>
                            {
                                (void_t) sdhWriteFunction(
 800f810:	4b19      	ldr	r3, [pc, #100]	@ (800f878 <svl_sdhDaemon+0x2bc>)
 800f812:	681c      	ldr	r4, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + numOfBinaries * sizeof(svl_sdhBinaryDesc_t),
 800f814:	893b      	ldrh	r3, [r7, #8]
 800f816:	461a      	mov	r2, r3
 800f818:	4613      	mov	r3, r2
 800f81a:	005b      	lsls	r3, r3, #1
 800f81c:	4413      	add	r3, r2
 800f81e:	011b      	lsls	r3, r3, #4
 800f820:	3302      	adds	r3, #2
                                (void_t) sdhWriteFunction(
 800f822:	f107 0120 	add.w	r1, r7, #32
 800f826:	2230      	movs	r2, #48	@ 0x30
 800f828:	4618      	mov	r0, r3
 800f82a:	47a0      	blx	r4
                                        (u8_t*)&newBinaryDescriptor,
                                        sizeof(newBinaryDescriptor)
                                );
                                result = SDH_DOWNLOAD_REQ_OK;
 800f82c:	2301      	movs	r3, #1
 800f82e:	71fb      	strb	r3, [r7, #7]

                                numOfChunks = newBinaryDescriptor.binaryInfo.size / SVL_SDH_CHUNK_SIZE + (newBinaryDescriptor.binaryInfo.size % SVL_SDH_CHUNK_SIZE == 0 ? 0 : 1);
 800f830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f832:	0a9b      	lsrs	r3, r3, #10
 800f834:	b29b      	uxth	r3, r3
 800f836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f838:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f83c:	2a00      	cmp	r2, #0
 800f83e:	bf14      	ite	ne
 800f840:	2201      	movne	r2, #1
 800f842:	2200      	moveq	r2, #0
 800f844:	b2d2      	uxtb	r2, r2
 800f846:	4413      	add	r3, r2
 800f848:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

                                sdhState = SDH_STATE_DOWNLOADING_BINARY;
 800f84c:	4b13      	ldr	r3, [pc, #76]	@ (800f89c <svl_sdhDaemon+0x2e0>)
 800f84e:	2201      	movs	r2, #1
 800f850:	701a      	strb	r2, [r3, #0]
 800f852:	e004      	b.n	800f85e <svl_sdhDaemon+0x2a2>
                            }
                            else
                            {
                                // New binary does not fit.
                                result = SDH_DOWNLOAD_REQ_FILE_SIZE_ERR;
 800f854:	2304      	movs	r3, #4
 800f856:	71fb      	strb	r3, [r7, #7]
 800f858:	e001      	b.n	800f85e <svl_sdhDaemon+0x2a2>
                            }
                        }
                        else
                        {
                            // There is not enough size for descriptor.
                            result = SDH_DOWNLOAD_REQ_DESC_SIZE_ERR;
 800f85a:	2302      	movs	r3, #2
 800f85c:	71fb      	strb	r3, [r7, #7]
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&result, sizeof(result));
 800f85e:	79fa      	ldrb	r2, [r7, #7]
 800f860:	4b07      	ldr	r3, [pc, #28]	@ (800f880 <svl_sdhDaemon+0x2c4>)
 800f862:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f864:	4807      	ldr	r0, [pc, #28]	@ (800f884 <svl_sdhDaemon+0x2c8>)
 800f866:	f006 fc69 	bl	801613c <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f86a:	e178      	b.n	800fb5e <svl_sdhDaemon+0x5a2>
 800f86c:	20005e0c 	.word	0x20005e0c
 800f870:	20005e25 	.word	0x20005e25
 800f874:	200059c4 	.word	0x200059c4
 800f878:	200059c8 	.word	0x200059c8
 800f87c:	08019750 	.word	0x08019750
 800f880:	200059cc 	.word	0x200059cc
 800f884:	20005e18 	.word	0x20005e18
 800f888:	08019778 	.word	0x08019778
 800f88c:	080197a8 	.word	0x080197a8
 800f890:	080197dc 	.word	0x080197dc
 800f894:	08019804 	.word	0x08019804
 800f898:	007ffffe 	.word	0x007ffffe
 800f89c:	20005e24 	.word	0x20005e24
                }
                case SDH_STATE_DOWNLOADING_BINARY:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f8a0:	4bbb      	ldr	r3, [pc, #748]	@ (800fb90 <svl_sdhDaemon+0x5d4>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f000 815c 	beq.w	800fb62 <svl_sdhDaemon+0x5a6>
 800f8aa:	4bba      	ldr	r3, [pc, #744]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 8157 	beq.w	800fb62 <svl_sdhDaemon+0x5a6>
                    {
                        // Get chunk descriptor.
                        (void_t) memcpy((void_t*)&chunkDesc, (void_t*)sdhBuffer, sizeof(chunkDesc));
 800f8b4:	4ab8      	ldr	r2, [pc, #736]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800f8b6:	f107 031c 	add.w	r3, r7, #28
 800f8ba:	6812      	ldr	r2, [r2, #0]
 800f8bc:	4611      	mov	r1, r2
 800f8be:	8019      	strh	r1, [r3, #0]
 800f8c0:	3302      	adds	r3, #2
 800f8c2:	0c12      	lsrs	r2, r2, #16
 800f8c4:	701a      	strb	r2, [r3, #0]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary chunk request received.\r\n");
 800f8c6:	49b5      	ldr	r1, [pc, #724]	@ (800fb9c <svl_sdhDaemon+0x5e0>)
 800f8c8:	2036      	movs	r0, #54	@ 0x36
 800f8ca:	f006 f861 	bl	8015990 <gos_traceTrace>
#endif

#if SVL_SDH_TRACE_LEVEL == 2
                        u32_t percentage = 100 * 100 * (chunkDesc.chunkIdx + 1) / numOfChunks;
 800f8ce:	8bbb      	ldrh	r3, [r7, #28]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f8d6:	fb03 f202 	mul.w	r2, r3, r2
 800f8da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f8de:	fb92 f3f3 	sdiv	r3, r2, r3
 800f8e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                        (void_t) gos_traceTraceFormatted(
                                GOS_TRUE,
                                "SDH chunk counter [%u/%u] ... %3u.%02u%%\r\n",
                                chunkDesc.chunkIdx + 1,
 800f8e6:	8bbb      	ldrh	r3, [r7, #28]
                        (void_t) gos_traceTraceFormatted(
 800f8e8:	1c58      	adds	r0, r3, #1
 800f8ea:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 800f8ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f8f2:	4aab      	ldr	r2, [pc, #684]	@ (800fba0 <svl_sdhDaemon+0x5e4>)
 800f8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f8:	0959      	lsrs	r1, r3, #5
 800f8fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f8fe:	4ba8      	ldr	r3, [pc, #672]	@ (800fba0 <svl_sdhDaemon+0x5e4>)
 800f900:	fba3 5302 	umull	r5, r3, r3, r2
 800f904:	095b      	lsrs	r3, r3, #5
 800f906:	2564      	movs	r5, #100	@ 0x64
 800f908:	fb05 f303 	mul.w	r3, r5, r3
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	9301      	str	r3, [sp, #4]
 800f910:	9100      	str	r1, [sp, #0]
 800f912:	4623      	mov	r3, r4
 800f914:	4602      	mov	r2, r0
 800f916:	49a3      	ldr	r1, [pc, #652]	@ (800fba4 <svl_sdhDaemon+0x5e8>)
 800f918:	2036      	movs	r0, #54	@ 0x36
 800f91a:	f006 f95d 	bl	8015bd8 <gos_traceTraceFormatted>
                                percentage % 100
                        );
#endif

                        // Save chunk.
                        (void_t) sdhWriteFunction(
 800f91e:	4b9d      	ldr	r3, [pc, #628]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800f920:	681b      	ldr	r3, [r3, #0]
                                newBinaryDescriptor.binaryLocation + chunkDesc.chunkIdx * SVL_SDH_CHUNK_SIZE,
 800f922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f924:	8bba      	ldrh	r2, [r7, #28]
 800f926:	0292      	lsls	r2, r2, #10
                        (void_t) sdhWriteFunction(
 800f928:	1888      	adds	r0, r1, r2
 800f92a:	499f      	ldr	r1, [pc, #636]	@ (800fba8 <svl_sdhDaemon+0x5ec>)
 800f92c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f930:	4798      	blx	r3
                                (u8_t*)(/*controlMsg.pData*/sdhBuffer + sizeof(chunkDesc)),
                                SVL_SDH_CHUNK_SIZE
                        );

                        // Send response.
                        chunkDesc.result = 1;
 800f932:	2301      	movs	r3, #1
 800f934:	77bb      	strb	r3, [r7, #30]

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&chunkDesc, sizeof(chunkDesc));
 800f936:	4b98      	ldr	r3, [pc, #608]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800f938:	f107 021c 	add.w	r2, r7, #28
 800f93c:	6812      	ldr	r2, [r2, #0]
 800f93e:	4611      	mov	r1, r2
 800f940:	8019      	strh	r1, [r3, #0]
 800f942:	3302      	adds	r3, #2
 800f944:	0c12      	lsrs	r2, r2, #16
 800f946:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f948:	4898      	ldr	r0, [pc, #608]	@ (800fbac <svl_sdhDaemon+0x5f0>)
 800f94a:	f006 fbf7 	bl	801613c <gos_triggerIncrement>

                        // Check if all chunks have been received.
                        if (chunkDesc.chunkIdx == (numOfChunks - 1))
 800f94e:	8bbb      	ldrh	r3, [r7, #28]
 800f950:	461a      	mov	r2, r3
 800f952:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f956:	3b01      	subs	r3, #1
 800f958:	429a      	cmp	r2, r3
 800f95a:	f040 8102 	bne.w	800fb62 <svl_sdhDaemon+0x5a6>
                        {
#if SVL_SDH_TRACE_LEVEL > 0
                            (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download finished.\r\n");
 800f95e:	4994      	ldr	r1, [pc, #592]	@ (800fbb0 <svl_sdhDaemon+0x5f4>)
 800f960:	2036      	movs	r0, #54	@ 0x36
 800f962:	f006 f815 	bl	8015990 <gos_traceTrace>
#endif
                            (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f966:	4b8a      	ldr	r3, [pc, #552]	@ (800fb90 <svl_sdhDaemon+0x5d4>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f107 0108 	add.w	r1, r7, #8
 800f96e:	2202      	movs	r2, #2
 800f970:	2000      	movs	r0, #0
 800f972:	4798      	blx	r3
                            numOfBinaries++;
 800f974:	893b      	ldrh	r3, [r7, #8]
 800f976:	3301      	adds	r3, #1
 800f978:	b29b      	uxth	r3, r3
 800f97a:	813b      	strh	r3, [r7, #8]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f97c:	4b85      	ldr	r3, [pc, #532]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f107 0108 	add.w	r1, r7, #8
 800f984:	2202      	movs	r2, #2
 800f986:	2000      	movs	r0, #0
 800f988:	4798      	blx	r3

                            sdhState = SDH_STATE_IDLE;
 800f98a:	4b8a      	ldr	r3, [pc, #552]	@ (800fbb4 <svl_sdhDaemon+0x5f8>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            // Continue reception.
                        }
                    }
                    break;
 800f990:	e0e7      	b.n	800fb62 <svl_sdhDaemon+0x5a6>
                }
                case SDH_STATE_BINARY_ERASE_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f992:	4b7f      	ldr	r3, [pc, #508]	@ (800fb90 <svl_sdhDaemon+0x5d4>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 80e5 	beq.w	800fb66 <svl_sdhDaemon+0x5aa>
 800f99c:	4b7d      	ldr	r3, [pc, #500]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 80e0 	beq.w	800fb66 <svl_sdhDaemon+0x5aa>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 800f9a6:	4b7c      	ldr	r3, [pc, #496]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800f9a8:	881b      	ldrh	r3, [r3, #0]
 800f9aa:	817b      	strh	r3, [r7, #10]
                        (void_t) memcpy((void_t*)&defragment, (void_t*)sdhBuffer + sizeof(index), sizeof(defragment));
 800f9ac:	4b82      	ldr	r3, [pc, #520]	@ (800fbb8 <svl_sdhDaemon+0x5fc>)
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	71bb      	strb	r3, [r7, #6]
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary erase request received. Index: %u\r\n", index);
 800f9b2:	897b      	ldrh	r3, [r7, #10]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4981      	ldr	r1, [pc, #516]	@ (800fbbc <svl_sdhDaemon+0x600>)
 800f9b8:	2036      	movs	r0, #54	@ 0x36
 800f9ba:	f006 f90d 	bl	8015bd8 <gos_traceTraceFormatted>
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f9be:	4b74      	ldr	r3, [pc, #464]	@ (800fb90 <svl_sdhDaemon+0x5d4>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f107 0108 	add.w	r1, r7, #8
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	4798      	blx	r3

                        if (index < numOfBinaries)
 800f9cc:	897a      	ldrh	r2, [r7, #10]
 800f9ce:	893b      	ldrh	r3, [r7, #8]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	f080 80c8 	bcs.w	800fb66 <svl_sdhDaemon+0x5aa>
                        {
                            svl_sdhGetBinaryData(index, &binaryDescriptor);
 800f9d6:	897b      	ldrh	r3, [r7, #10]
 800f9d8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800f9dc:	4611      	mov	r1, r2
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff fd5a 	bl	800f498 <svl_sdhGetBinaryData>

                            // Start address to copy is the binary location of
                            // the binary that is being deleted.
                            startAddress = binaryDescriptor.binaryLocation;
 800f9e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f9e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                            // Reorganize descriptors and binary.
                            if (index != (numOfBinaries - 1))
 800f9ea:	897b      	ldrh	r3, [r7, #10]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	893b      	ldrh	r3, [r7, #8]
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	f000 8099 	beq.w	800fb2a <svl_sdhDaemon+0x56e>
                            {
                                // Move descriptors.
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800f9fe:	e01c      	b.n	800fa3a <svl_sdhDaemon+0x47e>
                                {
                                    (void_t) svl_sdhGetBinaryData((index + 1 + idx), &binaryDescriptor);
 800fa00:	897a      	ldrh	r2, [r7, #10]
 800fa02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fa06:	4413      	add	r3, r2
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800fa12:	4611      	mov	r1, r2
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fd3f 	bl	800f498 <svl_sdhGetBinaryData>
                                    (void_t) svl_sdhSetBinaryData((index + idx), &binaryDescriptor);
 800fa1a:	897a      	ldrh	r2, [r7, #10]
 800fa1c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fa20:	4413      	add	r3, r2
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800fa28:	4611      	mov	r1, r2
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff fd6a 	bl	800f504 <svl_sdhSetBinaryData>
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 800fa30:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fa34:	3301      	adds	r3, #1
 800fa36:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800fa3a:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 800fa3e:	893b      	ldrh	r3, [r7, #8]
 800fa40:	4619      	mov	r1, r3
 800fa42:	897b      	ldrh	r3, [r7, #10]
 800fa44:	3301      	adds	r3, #1
 800fa46:	1acb      	subs	r3, r1, r3
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	dbd9      	blt.n	800fa00 <svl_sdhDaemon+0x444>
                                }

                                // Move binaries and update descriptor data.
                                // Prepare variables.
                                if (defragment == GOS_TRUE)
 800fa4c:	79bb      	ldrb	r3, [r7, #6]
 800fa4e:	2b36      	cmp	r3, #54	@ 0x36
 800fa50:	d16b      	bne.n	800fb2a <svl_sdhDaemon+0x56e>
                                {
                                    (void_t) svl_sdhGetBinaryData(index, &binaryDescriptor);
 800fa52:	897b      	ldrh	r3, [r7, #10]
 800fa54:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800fa58:	4611      	mov	r1, r2
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7ff fd1c 	bl	800f498 <svl_sdhGetBinaryData>
                                    fromAddress = binaryDescriptor.binaryLocation;
 800fa60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                                    (void_t) svl_sdhGetBinaryData((numOfBinaries - 2), &binaryDescriptor);
 800fa66:	893b      	ldrh	r3, [r7, #8]
 800fa68:	3b02      	subs	r3, #2
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800fa70:	4611      	mov	r1, r2
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7ff fd10 	bl	800f498 <svl_sdhGetBinaryData>
                                    totalCopySize = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size - fromAddress;
 800fa78:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fa7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa7c:	441a      	add	r2, r3
 800fa7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                    // Move in chunks using SDH buffer.
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fa8e:	e045      	b.n	800fb1c <svl_sdhDaemon+0x560>
                                    {
                                        if ((cntr + 1) * SVL_SDH_CHUNK_SIZE < totalCopySize)
 800fa90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fa94:	3301      	adds	r3, #1
 800fa96:	029b      	lsls	r3, r3, #10
 800fa98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d918      	bls.n	800fad2 <svl_sdhDaemon+0x516>
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 800faa0:	4b3b      	ldr	r3, [pc, #236]	@ (800fb90 <svl_sdhDaemon+0x5d4>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800faa8:	0291      	lsls	r1, r2, #10
 800faaa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800faae:	1888      	adds	r0, r1, r2
 800fab0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fab4:	4938      	ldr	r1, [pc, #224]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800fab6:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 800fab8:	4b36      	ldr	r3, [pc, #216]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fac0:	0291      	lsls	r1, r2, #10
 800fac2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fac6:	1888      	adds	r0, r1, r2
 800fac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800facc:	4932      	ldr	r1, [pc, #200]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800face:	4798      	blx	r3
 800fad0:	e01f      	b.n	800fb12 <svl_sdhDaemon+0x556>
                                        }
                                        else
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 800fad2:	4b2f      	ldr	r3, [pc, #188]	@ (800fb90 <svl_sdhDaemon+0x5d4>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fada:	0291      	lsls	r1, r2, #10
 800fadc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800fae0:	1888      	adds	r0, r1, r2
 800fae2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fae6:	0292      	lsls	r2, r2, #10
 800fae8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800faec:	1a8a      	subs	r2, r1, r2
 800faee:	492a      	ldr	r1, [pc, #168]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800faf0:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 800faf2:	4b28      	ldr	r3, [pc, #160]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fafa:	0291      	lsls	r1, r2, #10
 800fafc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fb00:	1888      	adds	r0, r1, r2
 800fb02:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fb06:	0292      	lsls	r2, r2, #10
 800fb08:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800fb0c:	1a8a      	subs	r2, r1, r2
 800fb0e:	4922      	ldr	r1, [pc, #136]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800fb10:	4798      	blx	r3
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 800fb12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb16:	3301      	adds	r3, #1
 800fb18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fb1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb20:	029b      	lsls	r3, r3, #10
 800fb22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d8b2      	bhi.n	800fa90 <svl_sdhDaemon+0x4d4>
                            {
                                // No moving required.
                            }

                            // Decrease number of binaries.
                            numOfBinaries--;
 800fb2a:	893b      	ldrh	r3, [r7, #8]
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	813b      	strh	r3, [r7, #8]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800fb32:	4b18      	ldr	r3, [pc, #96]	@ (800fb94 <svl_sdhDaemon+0x5d8>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f107 0108 	add.w	r1, r7, #8
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	4798      	blx	r3

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 800fb40:	897a      	ldrh	r2, [r7, #10]
 800fb42:	4b15      	ldr	r3, [pc, #84]	@ (800fb98 <svl_sdhDaemon+0x5dc>)
 800fb44:	801a      	strh	r2, [r3, #0]
                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800fb46:	4819      	ldr	r0, [pc, #100]	@ (800fbac <svl_sdhDaemon+0x5f0>)
 800fb48:	f006 faf8 	bl	801613c <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800fb4c:	e00b      	b.n	800fb66 <svl_sdhDaemon+0x5aa>
                }
                default: break;
 800fb4e:	bf00      	nop
 800fb50:	e00a      	b.n	800fb68 <svl_sdhDaemon+0x5ac>
                    break;
 800fb52:	bf00      	nop
 800fb54:	e008      	b.n	800fb68 <svl_sdhDaemon+0x5ac>
                    break;
 800fb56:	bf00      	nop
 800fb58:	e006      	b.n	800fb68 <svl_sdhDaemon+0x5ac>
                    break;
 800fb5a:	bf00      	nop
 800fb5c:	e004      	b.n	800fb68 <svl_sdhDaemon+0x5ac>
                    break;
 800fb5e:	bf00      	nop
 800fb60:	e002      	b.n	800fb68 <svl_sdhDaemon+0x5ac>
                    break;
 800fb62:	bf00      	nop
 800fb64:	e000      	b.n	800fb68 <svl_sdhDaemon+0x5ac>
                    break;
 800fb66:	bf00      	nop
            }
            (void_t) gos_triggerReset(&sdhControlTrigger);
 800fb68:	4815      	ldr	r0, [pc, #84]	@ (800fbc0 <svl_sdhDaemon+0x604>)
 800fb6a:	f006 f9df 	bl	8015f2c <gos_triggerReset>
 800fb6e:	e558      	b.n	800f622 <svl_sdhDaemon+0x66>
        }
        else
        {
            // Timeout.
#if SVL_SDH_TRACE_LEVEL > 0
            if (sdhState != SDH_STATE_IDLE)
 800fb70:	4b10      	ldr	r3, [pc, #64]	@ (800fbb4 <svl_sdhDaemon+0x5f8>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d003      	beq.n	800fb80 <svl_sdhDaemon+0x5c4>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "SDH timeout.\r\n");
 800fb78:	4912      	ldr	r1, [pc, #72]	@ (800fbc4 <svl_sdhDaemon+0x608>)
 800fb7a:	2036      	movs	r0, #54	@ 0x36
 800fb7c:	f005 ff08 	bl	8015990 <gos_traceTrace>
            else
            {
                // Just message RX timeout in idle state.
            }
#endif
            sdhState = SDH_STATE_IDLE;
 800fb80:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb4 <svl_sdhDaemon+0x5f8>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskSleep(100);
 800fb86:	2064      	movs	r0, #100	@ 0x64
 800fb88:	f001 fdd2 	bl	8011730 <gos_taskSleep>
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800fb8c:	e549      	b.n	800f622 <svl_sdhDaemon+0x66>
 800fb8e:	bf00      	nop
 800fb90:	200059c4 	.word	0x200059c4
 800fb94:	200059c8 	.word	0x200059c8
 800fb98:	200059cc 	.word	0x200059cc
 800fb9c:	08019854 	.word	0x08019854
 800fba0:	51eb851f 	.word	0x51eb851f
 800fba4:	0801987c 	.word	0x0801987c
 800fba8:	200059cf 	.word	0x200059cf
 800fbac:	20005e18 	.word	0x20005e18
 800fbb0:	080198a8 	.word	0x080198a8
 800fbb4:	20005e24 	.word	0x20005e24
 800fbb8:	200059ce 	.word	0x200059ce
 800fbbc:	080198c8 	.word	0x080198c8
 800fbc0:	20005e0c 	.word	0x20005e0c
 800fbc4:	080198f8 	.word	0x080198f8

0800fbc8 <svl_sdhSysmonBinaryNumReqCallback>:
 * @details Handles the binary number request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryNumReqCallback (void_t)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 800fbce:	4b0f      	ldr	r3, [pc, #60]	@ (800fc0c <svl_sdhSysmonBinaryNumReqCallback+0x44>)
 800fbd0:	2202      	movs	r2, #2
 800fbd2:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fbd4:	480e      	ldr	r0, [pc, #56]	@ (800fc10 <svl_sdhSysmonBinaryNumReqCallback+0x48>)
 800fbd6:	f006 fab1 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fbda:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fbde:	2101      	movs	r1, #1
 800fbe0:	480c      	ldr	r0, [pc, #48]	@ (800fc14 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 800fbe2:	f006 f9fb 	bl	8015fdc <gos_triggerWait>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b55      	cmp	r3, #85	@ 0x55
 800fbea:	d109      	bne.n	800fc00 <svl_sdhSysmonBinaryNumReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fbec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	4a08      	ldr	r2, [pc, #32]	@ (800fc18 <svl_sdhSysmonBinaryNumReqCallback+0x50>)
 800fbf6:	f641 2101 	movw	r1, #6657	@ 0x1a01
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	f003 fbb8 	bl	8013370 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fc00:	4804      	ldr	r0, [pc, #16]	@ (800fc14 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 800fc02:	f006 f993 	bl	8015f2c <gos_triggerReset>
}
 800fc06:	bf00      	nop
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	20005e25 	.word	0x20005e25
 800fc10:	20005e0c 	.word	0x20005e0c
 800fc14:	20005e18 	.word	0x20005e18
 800fc18:	200059cc 	.word	0x200059cc

0800fc1c <svl_sdhSysmonBinaryInfoReqCallback>:
 * @details Handles the binary info request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryInfoReqCallback (void_t)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 800fc22:	4b0f      	ldr	r3, [pc, #60]	@ (800fc60 <svl_sdhSysmonBinaryInfoReqCallback+0x44>)
 800fc24:	2203      	movs	r2, #3
 800fc26:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fc28:	480e      	ldr	r0, [pc, #56]	@ (800fc64 <svl_sdhSysmonBinaryInfoReqCallback+0x48>)
 800fc2a:	f006 fa87 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fc2e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fc32:	2101      	movs	r1, #1
 800fc34:	480c      	ldr	r0, [pc, #48]	@ (800fc68 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 800fc36:	f006 f9d1 	bl	8015fdc <gos_triggerWait>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b55      	cmp	r3, #85	@ 0x55
 800fc3e:	d109      	bne.n	800fc54 <svl_sdhSysmonBinaryInfoReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fc40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	2330      	movs	r3, #48	@ 0x30
 800fc48:	4a08      	ldr	r2, [pc, #32]	@ (800fc6c <svl_sdhSysmonBinaryInfoReqCallback+0x50>)
 800fc4a:	f641 2102 	movw	r1, #6658	@ 0x1a02
 800fc4e:	2000      	movs	r0, #0
 800fc50:	f003 fb8e 	bl	8013370 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fc54:	4804      	ldr	r0, [pc, #16]	@ (800fc68 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 800fc56:	f006 f969 	bl	8015f2c <gos_triggerReset>
}
 800fc5a:	bf00      	nop
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	20005e25 	.word	0x20005e25
 800fc64:	20005e0c 	.word	0x20005e0c
 800fc68:	20005e18 	.word	0x20005e18
 800fc6c:	200059cc 	.word	0x200059cc

0800fc70 <svl_sdhSysmonDownloadReqCallback>:
 * @details Handles the download request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonDownloadReqCallback (void_t)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 800fc76:	4b0f      	ldr	r3, [pc, #60]	@ (800fcb4 <svl_sdhSysmonDownloadReqCallback+0x44>)
 800fc78:	2204      	movs	r2, #4
 800fc7a:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fc7c:	480e      	ldr	r0, [pc, #56]	@ (800fcb8 <svl_sdhSysmonDownloadReqCallback+0x48>)
 800fc7e:	f006 fa5d 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fc82:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fc86:	2101      	movs	r1, #1
 800fc88:	480c      	ldr	r0, [pc, #48]	@ (800fcbc <svl_sdhSysmonDownloadReqCallback+0x4c>)
 800fc8a:	f006 f9a7 	bl	8015fdc <gos_triggerWait>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b55      	cmp	r3, #85	@ 0x55
 800fc92:	d109      	bne.n	800fca8 <svl_sdhSysmonDownloadReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fc94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	4a08      	ldr	r2, [pc, #32]	@ (800fcc0 <svl_sdhSysmonDownloadReqCallback+0x50>)
 800fc9e:	f641 2103 	movw	r1, #6659	@ 0x1a03
 800fca2:	2000      	movs	r0, #0
 800fca4:	f003 fb64 	bl	8013370 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fca8:	4804      	ldr	r0, [pc, #16]	@ (800fcbc <svl_sdhSysmonDownloadReqCallback+0x4c>)
 800fcaa:	f006 f93f 	bl	8015f2c <gos_triggerReset>
}
 800fcae:	bf00      	nop
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	20005e25 	.word	0x20005e25
 800fcb8:	20005e0c 	.word	0x20005e0c
 800fcbc:	20005e18 	.word	0x20005e18
 800fcc0:	200059cc 	.word	0x200059cc

0800fcc4 <svl_sdhSysmonBinaryChunkReqCallback>:
 * @details Handles the binary chunk request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryChunkReqCallback (void_t)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 800fcca:	4b0f      	ldr	r3, [pc, #60]	@ (800fd08 <svl_sdhSysmonBinaryChunkReqCallback+0x44>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fcd0:	480e      	ldr	r0, [pc, #56]	@ (800fd0c <svl_sdhSysmonBinaryChunkReqCallback+0x48>)
 800fcd2:	f006 fa33 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 800fcd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fcda:	2101      	movs	r1, #1
 800fcdc:	480c      	ldr	r0, [pc, #48]	@ (800fd10 <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 800fcde:	f006 f97d 	bl	8015fdc <gos_triggerWait>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b55      	cmp	r3, #85	@ 0x55
 800fce6:	d109      	bne.n	800fcfc <svl_sdhSysmonBinaryChunkReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	2303      	movs	r3, #3
 800fcf0:	4a08      	ldr	r2, [pc, #32]	@ (800fd14 <svl_sdhSysmonBinaryChunkReqCallback+0x50>)
 800fcf2:	f641 2104 	movw	r1, #6660	@ 0x1a04
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	f003 fb3a 	bl	8013370 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fcfc:	4804      	ldr	r0, [pc, #16]	@ (800fd10 <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 800fcfe:	f006 f915 	bl	8015f2c <gos_triggerReset>
}
 800fd02:	bf00      	nop
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	20005e25 	.word	0x20005e25
 800fd0c:	20005e0c 	.word	0x20005e0c
 800fd10:	20005e18 	.word	0x20005e18
 800fd14:	200059cc 	.word	0x200059cc

0800fd18 <svl_sdhSysmonSoftwareInstallReqCallback>:
 * @details Handles the install request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonSoftwareInstallReqCallback (void_t)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 800fd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd5c <svl_sdhSysmonSoftwareInstallReqCallback+0x44>)
 800fd20:	2205      	movs	r2, #5
 800fd22:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fd24:	480e      	ldr	r0, [pc, #56]	@ (800fd60 <svl_sdhSysmonSoftwareInstallReqCallback+0x48>)
 800fd26:	f006 fa09 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fd2a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fd2e:	2101      	movs	r1, #1
 800fd30:	480c      	ldr	r0, [pc, #48]	@ (800fd64 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 800fd32:	f006 f953 	bl	8015fdc <gos_triggerWait>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b55      	cmp	r3, #85	@ 0x55
 800fd3a:	d109      	bne.n	800fd50 <svl_sdhSysmonSoftwareInstallReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fd3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	2302      	movs	r3, #2
 800fd44:	4a08      	ldr	r2, [pc, #32]	@ (800fd68 <svl_sdhSysmonSoftwareInstallReqCallback+0x50>)
 800fd46:	f641 2105 	movw	r1, #6661	@ 0x1a05
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	f003 fb10 	bl	8013370 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fd50:	4804      	ldr	r0, [pc, #16]	@ (800fd64 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 800fd52:	f006 f8eb 	bl	8015f2c <gos_triggerReset>
}
 800fd56:	bf00      	nop
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	20005e25 	.word	0x20005e25
 800fd60:	20005e0c 	.word	0x20005e0c
 800fd64:	20005e18 	.word	0x20005e18
 800fd68:	200059cc 	.word	0x200059cc

0800fd6c <svl_sdhSysmonBinaryEraseReqCallback>:
 * @details Handles the erase request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryEraseReqCallback (void_t)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 800fd72:	4b0f      	ldr	r3, [pc, #60]	@ (800fdb0 <svl_sdhSysmonBinaryEraseReqCallback+0x44>)
 800fd74:	2206      	movs	r2, #6
 800fd76:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fd78:	480e      	ldr	r0, [pc, #56]	@ (800fdb4 <svl_sdhSysmonBinaryEraseReqCallback+0x48>)
 800fd7a:	f006 f9df 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 800fd7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd82:	2101      	movs	r1, #1
 800fd84:	480c      	ldr	r0, [pc, #48]	@ (800fdb8 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 800fd86:	f006 f929 	bl	8015fdc <gos_triggerWait>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b55      	cmp	r3, #85	@ 0x55
 800fd8e:	d109      	bne.n	800fda4 <svl_sdhSysmonBinaryEraseReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fd90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	2302      	movs	r3, #2
 800fd98:	4a08      	ldr	r2, [pc, #32]	@ (800fdbc <svl_sdhSysmonBinaryEraseReqCallback+0x50>)
 800fd9a:	f641 2106 	movw	r1, #6662	@ 0x1a06
 800fd9e:	2000      	movs	r0, #0
 800fda0:	f003 fae6 	bl	8013370 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fda4:	4804      	ldr	r0, [pc, #16]	@ (800fdb8 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 800fda6:	f006 f8c1 	bl	8015f2c <gos_triggerReset>
}
 800fdaa:	bf00      	nop
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20005e25 	.word	0x20005e25
 800fdb4:	20005e0c 	.word	0x20005e0c
 800fdb8:	20005e18 	.word	0x20005e18
 800fdbc:	200059cc 	.word	0x200059cc

0800fdc0 <svl_sdhIplBinaryNumReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhIplBinaryNumReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 800fdcc:	4b0d      	ldr	r3, [pc, #52]	@ (800fe04 <svl_sdhIplBinaryNumReqCallback+0x44>)
 800fdce:	2202      	movs	r2, #2
 800fdd0:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fdd2:	480d      	ldr	r0, [pc, #52]	@ (800fe08 <svl_sdhIplBinaryNumReqCallback+0x48>)
 800fdd4:	f006 f9b2 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fdd8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fddc:	2101      	movs	r1, #1
 800fdde:	480b      	ldr	r0, [pc, #44]	@ (800fe0c <svl_sdhIplBinaryNumReqCallback+0x4c>)
 800fde0:	f006 f8fc 	bl	8015fdc <gos_triggerWait>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b55      	cmp	r3, #85	@ 0x55
 800fde8:	d105      	bne.n	800fdf6 <svl_sdhIplBinaryNumReqCallback+0x36>
    {
        (void_t) svl_iplSendMessage(0xA02, sdhBuffer, sizeof(u16_t));
 800fdea:	2202      	movs	r2, #2
 800fdec:	4908      	ldr	r1, [pc, #32]	@ (800fe10 <svl_sdhIplBinaryNumReqCallback+0x50>)
 800fdee:	f640 2002 	movw	r0, #2562	@ 0xa02
 800fdf2:	f7fe f989 	bl	800e108 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fdf6:	4805      	ldr	r0, [pc, #20]	@ (800fe0c <svl_sdhIplBinaryNumReqCallback+0x4c>)
 800fdf8:	f006 f898 	bl	8015f2c <gos_triggerReset>
}
 800fdfc:	bf00      	nop
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	20005e25 	.word	0x20005e25
 800fe08:	20005e0c 	.word	0x20005e0c
 800fe0c:	20005e18 	.word	0x20005e18
 800fe10:	200059cc 	.word	0x200059cc

0800fe14 <svl_sdhIplBinaryInfoReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryInfoReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 800fe20:	4b13      	ldr	r3, [pc, #76]	@ (800fe70 <svl_sdhIplBinaryInfoReqCallback+0x5c>)
 800fe22:	2203      	movs	r2, #3
 800fe24:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800fe2c:	d902      	bls.n	800fe34 <svl_sdhIplBinaryInfoReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800fe2e:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800fe32:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800fe34:	68ba      	ldr	r2, [r7, #8]
 800fe36:	68f9      	ldr	r1, [r7, #12]
 800fe38:	480e      	ldr	r0, [pc, #56]	@ (800fe74 <svl_sdhIplBinaryInfoReqCallback+0x60>)
 800fe3a:	f007 f978 	bl	801712e <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fe3e:	480e      	ldr	r0, [pc, #56]	@ (800fe78 <svl_sdhIplBinaryInfoReqCallback+0x64>)
 800fe40:	f006 f97c 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fe44:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fe48:	2101      	movs	r1, #1
 800fe4a:	480c      	ldr	r0, [pc, #48]	@ (800fe7c <svl_sdhIplBinaryInfoReqCallback+0x68>)
 800fe4c:	f006 f8c6 	bl	8015fdc <gos_triggerWait>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b55      	cmp	r3, #85	@ 0x55
 800fe54:	d105      	bne.n	800fe62 <svl_sdhIplBinaryInfoReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA12, (u8_t*)sdhBuffer, sizeof(svl_sdhBinaryDesc_t));
 800fe56:	2230      	movs	r2, #48	@ 0x30
 800fe58:	4906      	ldr	r1, [pc, #24]	@ (800fe74 <svl_sdhIplBinaryInfoReqCallback+0x60>)
 800fe5a:	f640 2012 	movw	r0, #2578	@ 0xa12
 800fe5e:	f7fe f953 	bl	800e108 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fe62:	4806      	ldr	r0, [pc, #24]	@ (800fe7c <svl_sdhIplBinaryInfoReqCallback+0x68>)
 800fe64:	f006 f862 	bl	8015f2c <gos_triggerReset>
}
 800fe68:	bf00      	nop
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	20005e25 	.word	0x20005e25
 800fe74:	200059cc 	.word	0x200059cc
 800fe78:	20005e0c 	.word	0x20005e0c
 800fe7c:	20005e18 	.word	0x20005e18

0800fe80 <svl_sdhIplDownloadReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplDownloadReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 800fe8c:	4b13      	ldr	r3, [pc, #76]	@ (800fedc <svl_sdhIplDownloadReqCallback+0x5c>)
 800fe8e:	2204      	movs	r2, #4
 800fe90:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800fe98:	d902      	bls.n	800fea0 <svl_sdhIplDownloadReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800fe9a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800fe9e:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	68f9      	ldr	r1, [r7, #12]
 800fea4:	480e      	ldr	r0, [pc, #56]	@ (800fee0 <svl_sdhIplDownloadReqCallback+0x60>)
 800fea6:	f007 f942 	bl	801712e <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800feaa:	480e      	ldr	r0, [pc, #56]	@ (800fee4 <svl_sdhIplDownloadReqCallback+0x64>)
 800feac:	f006 f946 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800feb0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800feb4:	2101      	movs	r1, #1
 800feb6:	480c      	ldr	r0, [pc, #48]	@ (800fee8 <svl_sdhIplDownloadReqCallback+0x68>)
 800feb8:	f006 f890 	bl	8015fdc <gos_triggerWait>
 800febc:	4603      	mov	r3, r0
 800febe:	2b55      	cmp	r3, #85	@ 0x55
 800fec0:	d105      	bne.n	800fece <svl_sdhIplDownloadReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA22, sdhBuffer, sizeof(u8_t));
 800fec2:	2201      	movs	r2, #1
 800fec4:	4906      	ldr	r1, [pc, #24]	@ (800fee0 <svl_sdhIplDownloadReqCallback+0x60>)
 800fec6:	f640 2022 	movw	r0, #2594	@ 0xa22
 800feca:	f7fe f91d 	bl	800e108 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fece:	4806      	ldr	r0, [pc, #24]	@ (800fee8 <svl_sdhIplDownloadReqCallback+0x68>)
 800fed0:	f006 f82c 	bl	8015f2c <gos_triggerReset>
}
 800fed4:	bf00      	nop
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20005e25 	.word	0x20005e25
 800fee0:	200059cc 	.word	0x200059cc
 800fee4:	20005e0c 	.word	0x20005e0c
 800fee8:	20005e18 	.word	0x20005e18

0800feec <svl_sdhIplBinaryChunkReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryChunkReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 800fef8:	4b13      	ldr	r3, [pc, #76]	@ (800ff48 <svl_sdhIplBinaryChunkReqCallback+0x5c>)
 800fefa:	2201      	movs	r2, #1
 800fefc:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800ff04:	d902      	bls.n	800ff0c <svl_sdhIplBinaryChunkReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800ff06:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800ff0a:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	480e      	ldr	r0, [pc, #56]	@ (800ff4c <svl_sdhIplBinaryChunkReqCallback+0x60>)
 800ff12:	f007 f90c 	bl	801712e <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800ff16:	480e      	ldr	r0, [pc, #56]	@ (800ff50 <svl_sdhIplBinaryChunkReqCallback+0x64>)
 800ff18:	f006 f910 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 800ff1c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ff20:	2101      	movs	r1, #1
 800ff22:	480c      	ldr	r0, [pc, #48]	@ (800ff54 <svl_sdhIplBinaryChunkReqCallback+0x68>)
 800ff24:	f006 f85a 	bl	8015fdc <gos_triggerWait>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b55      	cmp	r3, #85	@ 0x55
 800ff2c:	d105      	bne.n	800ff3a <svl_sdhIplBinaryChunkReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA32, sdhBuffer, sizeof(svl_sdhChunkDesc_t));
 800ff2e:	2203      	movs	r2, #3
 800ff30:	4906      	ldr	r1, [pc, #24]	@ (800ff4c <svl_sdhIplBinaryChunkReqCallback+0x60>)
 800ff32:	f640 2032 	movw	r0, #2610	@ 0xa32
 800ff36:	f7fe f8e7 	bl	800e108 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800ff3a:	4806      	ldr	r0, [pc, #24]	@ (800ff54 <svl_sdhIplBinaryChunkReqCallback+0x68>)
 800ff3c:	f005 fff6 	bl	8015f2c <gos_triggerReset>
}
 800ff40:	bf00      	nop
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	20005e25 	.word	0x20005e25
 800ff4c:	200059cc 	.word	0x200059cc
 800ff50:	20005e0c 	.word	0x20005e0c
 800ff54:	20005e18 	.word	0x20005e18

0800ff58 <svl_sdhIplSoftwareInstallReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplSoftwareInstallReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 800ff64:	4b13      	ldr	r3, [pc, #76]	@ (800ffb4 <svl_sdhIplSoftwareInstallReqCallback+0x5c>)
 800ff66:	2205      	movs	r2, #5
 800ff68:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800ff70:	d902      	bls.n	800ff78 <svl_sdhIplSoftwareInstallReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800ff72:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800ff76:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	68f9      	ldr	r1, [r7, #12]
 800ff7c:	480e      	ldr	r0, [pc, #56]	@ (800ffb8 <svl_sdhIplSoftwareInstallReqCallback+0x60>)
 800ff7e:	f007 f8d6 	bl	801712e <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800ff82:	480e      	ldr	r0, [pc, #56]	@ (800ffbc <svl_sdhIplSoftwareInstallReqCallback+0x64>)
 800ff84:	f006 f8da 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800ff88:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ff8c:	2101      	movs	r1, #1
 800ff8e:	480c      	ldr	r0, [pc, #48]	@ (800ffc0 <svl_sdhIplSoftwareInstallReqCallback+0x68>)
 800ff90:	f006 f824 	bl	8015fdc <gos_triggerWait>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b55      	cmp	r3, #85	@ 0x55
 800ff98:	d105      	bne.n	800ffa6 <svl_sdhIplSoftwareInstallReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA42, sdhBuffer, sizeof(u16_t));
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	4906      	ldr	r1, [pc, #24]	@ (800ffb8 <svl_sdhIplSoftwareInstallReqCallback+0x60>)
 800ff9e:	f640 2042 	movw	r0, #2626	@ 0xa42
 800ffa2:	f7fe f8b1 	bl	800e108 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800ffa6:	4806      	ldr	r0, [pc, #24]	@ (800ffc0 <svl_sdhIplSoftwareInstallReqCallback+0x68>)
 800ffa8:	f005 ffc0 	bl	8015f2c <gos_triggerReset>
}
 800ffac:	bf00      	nop
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	20005e25 	.word	0x20005e25
 800ffb8:	200059cc 	.word	0x200059cc
 800ffbc:	20005e0c 	.word	0x20005e0c
 800ffc0:	20005e18 	.word	0x20005e18

0800ffc4 <svl_sdhIplBinaryEraseReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryEraseReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 800ffd0:	4b13      	ldr	r3, [pc, #76]	@ (8010020 <svl_sdhIplBinaryEraseReqCallback+0x5c>)
 800ffd2:	2206      	movs	r2, #6
 800ffd4:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800ffdc:	d902      	bls.n	800ffe4 <svl_sdhIplBinaryEraseReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800ffde:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800ffe2:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	68f9      	ldr	r1, [r7, #12]
 800ffe8:	480e      	ldr	r0, [pc, #56]	@ (8010024 <svl_sdhIplBinaryEraseReqCallback+0x60>)
 800ffea:	f007 f8a0 	bl	801712e <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800ffee:	480e      	ldr	r0, [pc, #56]	@ (8010028 <svl_sdhIplBinaryEraseReqCallback+0x64>)
 800fff0:	f006 f8a4 	bl	801613c <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 800fff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fff8:	2101      	movs	r1, #1
 800fffa:	480c      	ldr	r0, [pc, #48]	@ (801002c <svl_sdhIplBinaryEraseReqCallback+0x68>)
 800fffc:	f005 ffee 	bl	8015fdc <gos_triggerWait>
 8010000:	4603      	mov	r3, r0
 8010002:	2b55      	cmp	r3, #85	@ 0x55
 8010004:	d105      	bne.n	8010012 <svl_sdhIplBinaryEraseReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA52, sdhBuffer, sizeof(u16_t));
 8010006:	2202      	movs	r2, #2
 8010008:	4906      	ldr	r1, [pc, #24]	@ (8010024 <svl_sdhIplBinaryEraseReqCallback+0x60>)
 801000a:	f640 2052 	movw	r0, #2642	@ 0xa52
 801000e:	f7fe f87b 	bl	800e108 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8010012:	4806      	ldr	r0, [pc, #24]	@ (801002c <svl_sdhIplBinaryEraseReqCallback+0x68>)
 8010014:	f005 ff8a 	bl	8015f2c <gos_triggerReset>
}
 8010018:	bf00      	nop
 801001a:	3710      	adds	r7, #16
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	20005e25 	.word	0x20005e25
 8010024:	200059cc 	.word	0x200059cc
 8010028:	20005e0c 	.word	0x20005e0c
 801002c:	20005e18 	.word	0x20005e18

08010030 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 8010038:	23ae      	movs	r3, #174	@ 0xae
 801003a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d006      	beq.n	8010050 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 8010042:	221c      	movs	r2, #28
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	4805      	ldr	r0, [pc, #20]	@ (801005c <gos_driverInit+0x2c>)
 8010048:	f007 f871 	bl	801712e <memcpy>
        driverInitResult = GOS_SUCCESS;
 801004c:	2355      	movs	r3, #85	@ 0x55
 801004e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 8010050:	7bfb      	ldrb	r3, [r7, #15]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	20005e28 	.word	0x20005e28

08010060 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8010068:	23ae      	movs	r3, #174	@ 0xae
 801006a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 801006c:	4b07      	ldr	r3, [pc, #28]	@ (801008c <gos_traceDriverTransmitString+0x2c>)
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d005      	beq.n	8010080 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 8010074:	4b05      	ldr	r3, [pc, #20]	@ (801008c <gos_traceDriverTransmitString+0x2c>)
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	4798      	blx	r3
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	20005e28 	.word	0x20005e28

08010090 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8010098:	23ae      	movs	r3, #174	@ 0xae
 801009a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 801009c:	4b07      	ldr	r3, [pc, #28]	@ (80100bc <gos_traceDriverTransmitString_Unsafe+0x2c>)
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d005      	beq.n	80100b0 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 80100a4:	4b05      	ldr	r3, [pc, #20]	@ (80100bc <gos_traceDriverTransmitString_Unsafe+0x2c>)
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	4798      	blx	r3
 80100ac:	4603      	mov	r3, r0
 80100ae:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	20005e28 	.word	0x20005e28

080100c0 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 80100c6:	23ae      	movs	r3, #174	@ 0xae
 80100c8:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 80100ca:	2301      	movs	r3, #1
 80100cc:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80100ce:	2301      	movs	r3, #1
 80100d0:	80fb      	strh	r3, [r7, #6]
 80100d2:	e038      	b.n	8010146 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 80100d4:	88fb      	ldrh	r3, [r7, #6]
 80100d6:	4a6b      	ldr	r2, [pc, #428]	@ (8010284 <gos_kernelInit+0x1c4>)
 80100d8:	216a      	movs	r1, #106	@ 0x6a
 80100da:	fb01 f303 	mul.w	r3, r1, r3
 80100de:	4413      	add	r3, r2
 80100e0:	2200      	movs	r2, #0
 80100e2:	701a      	strb	r2, [r3, #0]
 80100e4:	2200      	movs	r2, #0
 80100e6:	705a      	strb	r2, [r3, #1]
 80100e8:	2200      	movs	r2, #0
 80100ea:	709a      	strb	r2, [r3, #2]
 80100ec:	2200      	movs	r2, #0
 80100ee:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 80100f0:	88fb      	ldrh	r3, [r7, #6]
 80100f2:	4a64      	ldr	r2, [pc, #400]	@ (8010284 <gos_kernelInit+0x1c4>)
 80100f4:	216a      	movs	r1, #106	@ 0x6a
 80100f6:	fb01 f303 	mul.w	r3, r1, r3
 80100fa:	4413      	add	r3, r2
 80100fc:	3306      	adds	r3, #6
 80100fe:	22ff      	movs	r2, #255	@ 0xff
 8010100:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 8010102:	88fb      	ldrh	r3, [r7, #6]
 8010104:	4a5f      	ldr	r2, [pc, #380]	@ (8010284 <gos_kernelInit+0x1c4>)
 8010106:	216a      	movs	r1, #106	@ 0x6a
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	4413      	add	r3, r2
 801010e:	3307      	adds	r3, #7
 8010110:	22ff      	movs	r2, #255	@ 0xff
 8010112:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 8010114:	88fb      	ldrh	r3, [r7, #6]
 8010116:	4a5b      	ldr	r2, [pc, #364]	@ (8010284 <gos_kernelInit+0x1c4>)
 8010118:	216a      	movs	r1, #106	@ 0x6a
 801011a:	fb01 f303 	mul.w	r3, r1, r3
 801011e:	4413      	add	r3, r2
 8010120:	3304      	adds	r3, #4
 8010122:	2205      	movs	r2, #5
 8010124:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 8010126:	88fb      	ldrh	r3, [r7, #6]
 8010128:	4a56      	ldr	r2, [pc, #344]	@ (8010284 <gos_kernelInit+0x1c4>)
 801012a:	216a      	movs	r1, #106	@ 0x6a
 801012c:	fb01 f303 	mul.w	r3, r1, r3
 8010130:	4413      	add	r3, r2
 8010132:	3328      	adds	r3, #40	@ 0x28
 8010134:	2200      	movs	r2, #0
 8010136:	709a      	strb	r2, [r3, #2]
 8010138:	2200      	movs	r2, #0
 801013a:	f042 0201 	orr.w	r2, r2, #1
 801013e:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010140:	88fb      	ldrh	r3, [r7, #6]
 8010142:	3301      	adds	r3, #1
 8010144:	80fb      	strh	r3, [r7, #6]
 8010146:	88fb      	ldrh	r3, [r7, #6]
 8010148:	2b0f      	cmp	r3, #15
 801014a:	d9c3      	bls.n	80100d4 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 801014c:	4b4e      	ldr	r3, [pc, #312]	@ (8010288 <gos_kernelInit+0x1c8>)
 801014e:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	3b04      	subs	r3, #4
 8010154:	603b      	str	r3, [r7, #0]
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801015c:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	3b04      	subs	r3, #4
 8010162:	603b      	str	r3, [r7, #0]
 8010164:	4a49      	ldr	r2, [pc, #292]	@ (801028c <gos_kernelInit+0x1cc>)
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	3b04      	subs	r3, #4
 801016e:	603b      	str	r3, [r7, #0]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	f06f 0202 	mvn.w	r2, #2
 8010176:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	3b04      	subs	r3, #4
 801017c:	603b      	str	r3, [r7, #0]
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8010184:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	3b04      	subs	r3, #4
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8010192:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	3b04      	subs	r3, #4
 8010198:	603b      	str	r3, [r7, #0]
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80101a0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	3b04      	subs	r3, #4
 80101a6:	603b      	str	r3, [r7, #0]
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80101ae:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	3b04      	subs	r3, #4
 80101b4:	603b      	str	r3, [r7, #0]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	2200      	movs	r2, #0
 80101ba:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	3b04      	subs	r3, #4
 80101c0:	603b      	str	r3, [r7, #0]
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80101c8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	3b04      	subs	r3, #4
 80101ce:	603b      	str	r3, [r7, #0]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80101d6:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	3b04      	subs	r3, #4
 80101dc:	603b      	str	r3, [r7, #0]
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80101e4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	3b04      	subs	r3, #4
 80101ea:	603b      	str	r3, [r7, #0]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80101f2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	3b04      	subs	r3, #4
 80101f8:	603b      	str	r3, [r7, #0]
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8010200:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	3b04      	subs	r3, #4
 8010206:	603b      	str	r3, [r7, #0]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 801020e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	3b04      	subs	r3, #4
 8010214:	603b      	str	r3, [r7, #0]
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 801021c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	3b04      	subs	r3, #4
 8010222:	603b      	str	r3, [r7, #0]
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 801022a:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	4a15      	ldr	r2, [pc, #84]	@ (8010284 <gos_kernelInit+0x1c4>)
 8010230:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 8010232:	4b14      	ldr	r3, [pc, #80]	@ (8010284 <gos_kernelInit+0x1c4>)
 8010234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010236:	4a13      	ldr	r2, [pc, #76]	@ (8010284 <gos_kernelInit+0x1c4>)
 8010238:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 801023c:	b292      	uxth	r2, r2
 801023e:	1a9b      	subs	r3, r3, r2
 8010240:	3340      	adds	r3, #64	@ 0x40
 8010242:	4a10      	ldr	r2, [pc, #64]	@ (8010284 <gos_kernelInit+0x1c4>)
 8010244:	f8c2 3066 	str.w	r3, [r2, #102]	@ 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 8010248:	4b11      	ldr	r3, [pc, #68]	@ (8010290 <gos_kernelInit+0x1d0>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a10      	ldr	r2, [pc, #64]	@ (8010290 <gos_kernelInit+0x1d0>)
 801024e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010252:	6013      	str	r3, [r2, #0]
 8010254:	4b0e      	ldr	r3, [pc, #56]	@ (8010290 <gos_kernelInit+0x1d0>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a0d      	ldr	r2, [pc, #52]	@ (8010290 <gos_kernelInit+0x1d0>)
 801025a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801025e:	6013      	str	r3, [r2, #0]
 8010260:	4b0b      	ldr	r3, [pc, #44]	@ (8010290 <gos_kernelInit+0x1d0>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a0a      	ldr	r2, [pc, #40]	@ (8010290 <gos_kernelInit+0x1d0>)
 8010266:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801026a:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 801026c:	4b09      	ldr	r3, [pc, #36]	@ (8010294 <gos_kernelInit+0x1d4>)
 801026e:	2200      	movs	r2, #0
 8010270:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 8010272:	2355      	movs	r3, #85	@ 0x55
 8010274:	717b      	strb	r3, [r7, #5]

    return initResult;
 8010276:	797b      	ldrb	r3, [r7, #5]
}
 8010278:	4618      	mov	r0, r3
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	20000788 	.word	0x20000788
 8010288:	2001ee00 	.word	0x2001ee00
 801028c:	08012ea5 	.word	0x08012ea5
 8010290:	e000ed24 	.word	0xe000ed24
 8010294:	20005e45 	.word	0x20005e45

08010298 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 801029e:	23ae      	movs	r3, #174	@ 0xae
 80102a0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 80102a2:	4b19      	ldr	r3, [pc, #100]	@ (8010308 <gos_kernelStart+0x70>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 80102a8:	f000 fea2 	bl	8010ff0 <gos_kernelGetCurrentPsp>
 80102ac:	f380 8809 	msr	PSP, r0
 80102b0:	f3ef 8014 	mrs	r0, CONTROL
 80102b4:	f040 0002 	orr.w	r0, r0, #2
 80102b8:	f380 8814 	msr	CONTROL, r0
 80102bc:	f3ef 8014 	mrs	r0, CONTROL
 80102c0:	f040 0001 	orr.w	r0, r0, #1
 80102c4:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 80102c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010308 <gos_kernelStart+0x70>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a0f      	ldr	r2, [pc, #60]	@ (801030c <gos_kernelStart+0x74>)
 80102ce:	216a      	movs	r1, #106	@ 0x6a
 80102d0:	fb01 f303 	mul.w	r3, r1, r3
 80102d4:	4413      	add	r3, r2
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 80102da:	480d      	ldr	r0, [pc, #52]	@ (8010310 <gos_kernelStart+0x78>)
 80102dc:	f006 f852 	bl	8016384 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 80102e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010314 <gos_kernelStart+0x7c>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d005      	beq.n	80102f4 <gos_kernelStart+0x5c>
 80102e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010314 <gos_kernelStart+0x7c>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	3b01      	subs	r3, #1
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	4b08      	ldr	r3, [pc, #32]	@ (8010314 <gos_kernelStart+0x7c>)
 80102f2:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 80102f4:	4b08      	ldr	r3, [pc, #32]	@ (8010318 <gos_kernelStart+0x80>)
 80102f6:	2236      	movs	r2, #54	@ 0x36
 80102f8:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 80102fe:	79fb      	ldrb	r3, [r7, #7]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	20005e4c 	.word	0x20005e4c
 801030c:	20000788 	.word	0x20000788
 8010310:	20005e54 	.word	0x20005e54
 8010314:	20005e45 	.word	0x20005e45
 8010318:	20000784 	.word	0x20000784

0801031c <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 8010324:	23ae      	movs	r3, #174	@ 0xae
 8010326:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d008      	beq.n	8010340 <gos_kernelRegisterSysTickHook+0x24>
 801032e:	4b08      	ldr	r3, [pc, #32]	@ (8010350 <gos_kernelRegisterSysTickHook+0x34>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d104      	bne.n	8010340 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 8010336:	4a06      	ldr	r2, [pc, #24]	@ (8010350 <gos_kernelRegisterSysTickHook+0x34>)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 801033c:	2355      	movs	r3, #85	@ 0x55
 801033e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 8010340:	7bfb      	ldrb	r3, [r7, #15]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3714      	adds	r7, #20
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr
 801034e:	bf00      	nop
 8010350:	20005e68 	.word	0x20005e68

08010354 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 801035a:	4b15      	ldr	r3, [pc, #84]	@ (80103b0 <SysTick_Handler+0x5c>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3301      	adds	r3, #1
 8010360:	4a13      	ldr	r2, [pc, #76]	@ (80103b0 <SysTick_Handler+0x5c>)
 8010362:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 8010364:	2001      	movs	r0, #1
 8010366:	f005 fa6f 	bl	8015848 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 801036a:	4b12      	ldr	r3, [pc, #72]	@ (80103b4 <SysTick_Handler+0x60>)
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	2b36      	cmp	r3, #54	@ 0x36
 8010370:	d113      	bne.n	801039a <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 8010372:	f000 fdad 	bl	8010ed0 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 8010376:	4b10      	ldr	r3, [pc, #64]	@ (80103b8 <SysTick_Handler+0x64>)
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d10d      	bne.n	801039a <SysTick_Handler+0x46>
 801037e:	2316      	movs	r3, #22
 8010380:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2b16      	cmp	r3, #22
 8010386:	d106      	bne.n	8010396 <SysTick_Handler+0x42>
 8010388:	4b0c      	ldr	r3, [pc, #48]	@ (80103bc <SysTick_Handler+0x68>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a0b      	ldr	r2, [pc, #44]	@ (80103bc <SysTick_Handler+0x68>)
 801038e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010392:	6013      	str	r3, [r2, #0]
}
 8010394:	e000      	b.n	8010398 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 8010396:	dfff      	svc	255	@ 0xff
}
 8010398:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 801039a:	4b09      	ldr	r3, [pc, #36]	@ (80103c0 <SysTick_Handler+0x6c>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d002      	beq.n	80103a8 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 80103a2:	4b07      	ldr	r3, [pc, #28]	@ (80103c0 <SysTick_Handler+0x6c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4798      	blx	r3
}
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	20005e50 	.word	0x20005e50
 80103b4:	20000784 	.word	0x20000784
 80103b8:	20005e45 	.word	0x20005e45
 80103bc:	e000ed04 	.word	0xe000ed04
 80103c0:	20005e68 	.word	0x20005e68

080103c4 <gos_kernelGetSysTicks>:
{
 80103c4:	b480      	push	{r7}
 80103c6:	af00      	add	r7, sp, #0
    return sysTicks;
 80103c8:	4b03      	ldr	r3, [pc, #12]	@ (80103d8 <gos_kernelGetSysTicks+0x14>)
 80103ca:	681b      	ldr	r3, [r3, #0]
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	20005e50 	.word	0x20005e50

080103dc <gos_kernelGetCpuUsage>:
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 80103e0:	4b06      	ldr	r3, [pc, #24]	@ (80103fc <gos_kernelGetCpuUsage+0x20>)
 80103e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 80103ec:	3310      	adds	r3, #16
 80103ee:	b29b      	uxth	r3, r3
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	20000788 	.word	0x20000788

08010400 <gos_kernelReset>:
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
	if (kernelPreResetHookFunction != NULL)
 8010406:	4b0e      	ldr	r3, [pc, #56]	@ (8010440 <gos_kernelReset+0x40>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d002      	beq.n	8010414 <gos_kernelReset+0x14>
		kernelPreResetHookFunction();
 801040e:	4b0c      	ldr	r3, [pc, #48]	@ (8010440 <gos_kernelReset+0x40>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4798      	blx	r3
    resetRequired = GOS_TRUE;
 8010414:	4b0b      	ldr	r3, [pc, #44]	@ (8010444 <gos_kernelReset+0x44>)
 8010416:	2236      	movs	r2, #54	@ 0x36
 8010418:	701a      	strb	r2, [r3, #0]
 801041a:	2309      	movs	r3, #9
 801041c:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	2b16      	cmp	r3, #22
 8010422:	d106      	bne.n	8010432 <gos_kernelReset+0x32>
 8010424:	4b08      	ldr	r3, [pc, #32]	@ (8010448 <gos_kernelReset+0x48>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a07      	ldr	r2, [pc, #28]	@ (8010448 <gos_kernelReset+0x48>)
 801042a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801042e:	6013      	str	r3, [r2, #0]
}
 8010430:	e000      	b.n	8010434 <gos_kernelReset+0x34>
    gos_ported_reschedule(privilege);
 8010432:	dfff      	svc	255	@ 0xff
}
 8010434:	bf00      	nop
}
 8010436:	bf00      	nop
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	20005e6c 	.word	0x20005e6c
 8010444:	20000785 	.word	0x20000785
 8010448:	e000ed04 	.word	0xe000ed04

0801044c <gos_kernelDelayMs>:
{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	4603      	mov	r3, r0
 8010454:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 8010456:	4b0a      	ldr	r3, [pc, #40]	@ (8010480 <gos_kernelDelayMs+0x34>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 801045c:	bf00      	nop
 801045e:	4b08      	ldr	r3, [pc, #32]	@ (8010480 <gos_kernelDelayMs+0x34>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	b29a      	uxth	r2, r3
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	b29b      	uxth	r3, r3
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	b29b      	uxth	r3, r3
 801046c:	88fa      	ldrh	r2, [r7, #6]
 801046e:	429a      	cmp	r2, r3
 8010470:	d8f5      	bhi.n	801045e <gos_kernelDelayMs+0x12>
}
 8010472:	bf00      	nop
 8010474:	bf00      	nop
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	20005e50 	.word	0x20005e50

08010484 <gos_kernelCalculateTaskCpuUsages>:
{
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b087      	sub	sp, #28
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 801048e:	2300      	movs	r3, #0
 8010490:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8010492:	2300      	movs	r3, #0
 8010494:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 8010496:	2300      	movs	r3, #0
 8010498:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 801049a:	4ba8      	ldr	r3, [pc, #672]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 801049c:	795b      	ldrb	r3, [r3, #5]
 801049e:	461a      	mov	r2, r3
 80104a0:	4ba7      	ldr	r3, [pc, #668]	@ (8010740 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80104a2:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 80104a6:	4ba5      	ldr	r3, [pc, #660]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80104a8:	791b      	ldrb	r3, [r3, #4]
 80104aa:	4619      	mov	r1, r3
 80104ac:	4ba5      	ldr	r3, [pc, #660]	@ (8010744 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 80104ae:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 80104b2:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 80104b4:	4ba1      	ldr	r3, [pc, #644]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80104b6:	885b      	ldrh	r3, [r3, #2]
 80104b8:	4619      	mov	r1, r3
 80104ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104be:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 80104c2:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 80104c4:	4a9d      	ldr	r2, [pc, #628]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80104c6:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 80104c8:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 80104ca:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80104cc:	2300      	movs	r3, #0
 80104ce:	82fb      	strh	r3, [r7, #22]
 80104d0:	e10f      	b.n	80106f2 <gos_kernelCalculateTaskCpuUsages+0x26e>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 80104d2:	8afb      	ldrh	r3, [r7, #22]
 80104d4:	4a9c      	ldr	r2, [pc, #624]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80104d6:	216a      	movs	r1, #106	@ 0x6a
 80104d8:	fb01 f303 	mul.w	r3, r1, r3
 80104dc:	4413      	add	r3, r2
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 810b 	beq.w	80106fc <gos_kernelCalculateTaskCpuUsages+0x278>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80104e6:	8afb      	ldrh	r3, [r7, #22]
 80104e8:	4a97      	ldr	r2, [pc, #604]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80104ea:	216a      	movs	r1, #106	@ 0x6a
 80104ec:	fb01 f303 	mul.w	r3, r1, r3
 80104f0:	4413      	add	r3, r2
 80104f2:	335a      	adds	r3, #90	@ 0x5a
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	4b91      	ldr	r3, [pc, #580]	@ (8010740 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80104fa:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80104fe:	8afb      	ldrh	r3, [r7, #22]
 8010500:	4991      	ldr	r1, [pc, #580]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010502:	206a      	movs	r0, #106	@ 0x6a
 8010504:	fb00 f303 	mul.w	r3, r0, r3
 8010508:	440b      	add	r3, r1
 801050a:	3359      	adds	r3, #89	@ 0x59
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	4619      	mov	r1, r3
 8010510:	4b8c      	ldr	r3, [pc, #560]	@ (8010744 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 8010512:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8010516:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8010518:	8afb      	ldrh	r3, [r7, #22]
 801051a:	498b      	ldr	r1, [pc, #556]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801051c:	206a      	movs	r0, #106	@ 0x6a
 801051e:	fb00 f303 	mul.w	r3, r0, r3
 8010522:	440b      	add	r3, r1
 8010524:	3350      	adds	r3, #80	@ 0x50
 8010526:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801052a:	b29b      	uxth	r3, r3
 801052c:	4619      	mov	r1, r3
 801052e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010532:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8010536:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 8010538:	8afa      	ldrh	r2, [r7, #22]
 801053a:	4983      	ldr	r1, [pc, #524]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801053c:	206a      	movs	r0, #106	@ 0x6a
 801053e:	fb00 f202 	mul.w	r2, r0, r2
 8010542:	440a      	add	r2, r1
 8010544:	3250      	adds	r2, #80	@ 0x50
 8010546:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 801054a:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 801054c:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 801054e:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	2b00      	cmp	r3, #0
 8010554:	f000 80ca 	beq.w	80106ec <gos_kernelCalculateTaskCpuUsages+0x268>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801055e:	fb03 f202 	mul.w	r2, r3, r2
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	fbb2 f2f3 	udiv	r2, r2, r3
 8010568:	8afb      	ldrh	r3, [r7, #22]
 801056a:	b290      	uxth	r0, r2
 801056c:	4a76      	ldr	r2, [pc, #472]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801056e:	216a      	movs	r1, #106	@ 0x6a
 8010570:	fb01 f303 	mul.w	r3, r1, r3
 8010574:	4413      	add	r3, r2
 8010576:	3360      	adds	r3, #96	@ 0x60
 8010578:	4602      	mov	r2, r0
 801057a:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 801057c:	79fb      	ldrb	r3, [r7, #7]
 801057e:	2b36      	cmp	r3, #54	@ 0x36
 8010580:	d004      	beq.n	801058c <gos_kernelCalculateTaskCpuUsages+0x108>
 8010582:	4b6e      	ldr	r3, [pc, #440]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010584:	791b      	ldrb	r3, [r3, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80b0 	beq.w	80106ec <gos_kernelCalculateTaskCpuUsages+0x268>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010592:	fb03 f202 	mul.w	r2, r3, r2
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	fbb2 f2f3 	udiv	r2, r2, r3
 801059c:	8afb      	ldrh	r3, [r7, #22]
 801059e:	b290      	uxth	r0, r2
 80105a0:	4a69      	ldr	r2, [pc, #420]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105a2:	216a      	movs	r1, #106	@ 0x6a
 80105a4:	fb01 f303 	mul.w	r3, r1, r3
 80105a8:	4413      	add	r3, r2
 80105aa:	3360      	adds	r3, #96	@ 0x60
 80105ac:	4602      	mov	r2, r0
 80105ae:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 80105b0:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 80105b2:	226a      	movs	r2, #106	@ 0x6a
 80105b4:	fb02 f303 	mul.w	r3, r2, r3
 80105b8:	3348      	adds	r3, #72	@ 0x48
 80105ba:	4a63      	ldr	r2, [pc, #396]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105bc:	4413      	add	r3, r2
 80105be:	1d18      	adds	r0, r3, #4
 80105c0:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 80105c2:	4a61      	ldr	r2, [pc, #388]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105c4:	216a      	movs	r1, #106	@ 0x6a
 80105c6:	fb01 f303 	mul.w	r3, r1, r3
 80105ca:	4413      	add	r3, r2
 80105cc:	3350      	adds	r3, #80	@ 0x50
 80105ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80105d2:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 80105d4:	461a      	mov	r2, r3
 80105d6:	2100      	movs	r1, #0
 80105d8:	f004 ffae 	bl	8015538 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 80105dc:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 80105de:	226a      	movs	r2, #106	@ 0x6a
 80105e0:	fb02 f303 	mul.w	r3, r2, r3
 80105e4:	3348      	adds	r3, #72	@ 0x48
 80105e6:	4a58      	ldr	r2, [pc, #352]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105e8:	4413      	add	r3, r2
 80105ea:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 80105ec:	8afb      	ldrh	r3, [r7, #22]
 80105ee:	4a56      	ldr	r2, [pc, #344]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105f0:	216a      	movs	r1, #106	@ 0x6a
 80105f2:	fb01 f303 	mul.w	r3, r1, r3
 80105f6:	4413      	add	r3, r2
 80105f8:	3350      	adds	r3, #80	@ 0x50
 80105fa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80105fe:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8010600:	8afb      	ldrh	r3, [r7, #22]
 8010602:	4951      	ldr	r1, [pc, #324]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010604:	246a      	movs	r4, #106	@ 0x6a
 8010606:	fb04 f303 	mul.w	r3, r4, r3
 801060a:	440b      	add	r3, r1
 801060c:	3359      	adds	r3, #89	@ 0x59
 801060e:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 8010610:	4619      	mov	r1, r3
 8010612:	0149      	lsls	r1, r1, #5
 8010614:	1ac9      	subs	r1, r1, r3
 8010616:	0089      	lsls	r1, r1, #2
 8010618:	440b      	add	r3, r1
 801061a:	00db      	lsls	r3, r3, #3
 801061c:	b29b      	uxth	r3, r3
 801061e:	4413      	add	r3, r2
 8010620:	b29b      	uxth	r3, r3
 8010622:	4619      	mov	r1, r3
 8010624:	f005 f868 	bl	80156f8 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 8010628:	8afb      	ldrh	r3, [r7, #22]
 801062a:	4a47      	ldr	r2, [pc, #284]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801062c:	216a      	movs	r1, #106	@ 0x6a
 801062e:	fb01 f303 	mul.w	r3, r1, r3
 8010632:	4413      	add	r3, r2
 8010634:	3350      	adds	r3, #80	@ 0x50
 8010636:	2200      	movs	r2, #0
 8010638:	731a      	strb	r2, [r3, #12]
 801063a:	2200      	movs	r2, #0
 801063c:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 801063e:	8afb      	ldrh	r3, [r7, #22]
 8010640:	4a41      	ldr	r2, [pc, #260]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010642:	216a      	movs	r1, #106	@ 0x6a
 8010644:	fb01 f303 	mul.w	r3, r1, r3
 8010648:	4413      	add	r3, r2
 801064a:	335b      	adds	r3, #91	@ 0x5b
 801064c:	2200      	movs	r2, #0
 801064e:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8010650:	8afb      	ldrh	r3, [r7, #22]
 8010652:	4a3d      	ldr	r2, [pc, #244]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010654:	216a      	movs	r1, #106	@ 0x6a
 8010656:	fb01 f303 	mul.w	r3, r1, r3
 801065a:	4413      	add	r3, r2
 801065c:	335a      	adds	r3, #90	@ 0x5a
 801065e:	2200      	movs	r2, #0
 8010660:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8010662:	8afb      	ldrh	r3, [r7, #22]
 8010664:	4a38      	ldr	r2, [pc, #224]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010666:	216a      	movs	r1, #106	@ 0x6a
 8010668:	fb01 f303 	mul.w	r3, r1, r3
 801066c:	4413      	add	r3, r2
 801066e:	3359      	adds	r3, #89	@ 0x59
 8010670:	2200      	movs	r2, #0
 8010672:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8010674:	8afb      	ldrh	r3, [r7, #22]
 8010676:	4a34      	ldr	r2, [pc, #208]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010678:	216a      	movs	r1, #106	@ 0x6a
 801067a:	fb01 f303 	mul.w	r3, r1, r3
 801067e:	4413      	add	r3, r2
 8010680:	3350      	adds	r3, #80	@ 0x50
 8010682:	2200      	movs	r2, #0
 8010684:	71da      	strb	r2, [r3, #7]
 8010686:	2200      	movs	r2, #0
 8010688:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 801068a:	8afb      	ldrh	r3, [r7, #22]
 801068c:	4a2e      	ldr	r2, [pc, #184]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801068e:	216a      	movs	r1, #106	@ 0x6a
 8010690:	fb01 f303 	mul.w	r3, r1, r3
 8010694:	4413      	add	r3, r2
 8010696:	3350      	adds	r3, #80	@ 0x50
 8010698:	2200      	movs	r2, #0
 801069a:	715a      	strb	r2, [r3, #5]
 801069c:	2200      	movs	r2, #0
 801069e:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 80106a0:	8afb      	ldrh	r3, [r7, #22]
 80106a2:	4a29      	ldr	r2, [pc, #164]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106a4:	216a      	movs	r1, #106	@ 0x6a
 80106a6:	fb01 f303 	mul.w	r3, r1, r3
 80106aa:	4413      	add	r3, r2
 80106ac:	3360      	adds	r3, #96	@ 0x60
 80106ae:	885b      	ldrh	r3, [r3, #2]
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	8afb      	ldrh	r3, [r7, #22]
 80106b4:	4924      	ldr	r1, [pc, #144]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106b6:	206a      	movs	r0, #106	@ 0x6a
 80106b8:	fb00 f303 	mul.w	r3, r0, r3
 80106bc:	440b      	add	r3, r1
 80106be:	3360      	adds	r3, #96	@ 0x60
 80106c0:	881b      	ldrh	r3, [r3, #0]
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d911      	bls.n	80106ec <gos_kernelCalculateTaskCpuUsages+0x268>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 80106c8:	8afa      	ldrh	r2, [r7, #22]
 80106ca:	8afb      	ldrh	r3, [r7, #22]
 80106cc:	491e      	ldr	r1, [pc, #120]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106ce:	206a      	movs	r0, #106	@ 0x6a
 80106d0:	fb00 f202 	mul.w	r2, r0, r2
 80106d4:	440a      	add	r2, r1
 80106d6:	3260      	adds	r2, #96	@ 0x60
 80106d8:	8852      	ldrh	r2, [r2, #2]
 80106da:	b290      	uxth	r0, r2
 80106dc:	4a1a      	ldr	r2, [pc, #104]	@ (8010748 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106de:	216a      	movs	r1, #106	@ 0x6a
 80106e0:	fb01 f303 	mul.w	r3, r1, r3
 80106e4:	4413      	add	r3, r2
 80106e6:	3360      	adds	r3, #96	@ 0x60
 80106e8:	4602      	mov	r2, r0
 80106ea:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80106ec:	8afb      	ldrh	r3, [r7, #22]
 80106ee:	3301      	adds	r3, #1
 80106f0:	82fb      	strh	r3, [r7, #22]
 80106f2:	8afb      	ldrh	r3, [r7, #22]
 80106f4:	2b0f      	cmp	r3, #15
 80106f6:	f67f aeec 	bls.w	80104d2 <gos_kernelCalculateTaskCpuUsages+0x4e>
 80106fa:	e000      	b.n	80106fe <gos_kernelCalculateTaskCpuUsages+0x27a>
            break;
 80106fc:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80106fe:	79fb      	ldrb	r3, [r7, #7]
 8010700:	2b36      	cmp	r3, #54	@ 0x36
 8010702:	d003      	beq.n	801070c <gos_kernelCalculateTaskCpuUsages+0x288>
 8010704:	4b0d      	ldr	r3, [pc, #52]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010706:	791b      	ldrb	r3, [r3, #4]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d013      	beq.n	8010734 <gos_kernelCalculateTaskCpuUsages+0x2b0>
        monitoringTime.days         = 0u;
 801070c:	4b0b      	ldr	r3, [pc, #44]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 801070e:	2200      	movs	r2, #0
 8010710:	71da      	strb	r2, [r3, #7]
 8010712:	2200      	movs	r2, #0
 8010714:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 8010716:	4b09      	ldr	r3, [pc, #36]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010718:	2200      	movs	r2, #0
 801071a:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 801071c:	4b07      	ldr	r3, [pc, #28]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 801071e:	2200      	movs	r2, #0
 8010720:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 8010722:	4b06      	ldr	r3, [pc, #24]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010724:	2200      	movs	r2, #0
 8010726:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8010728:	4b04      	ldr	r3, [pc, #16]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 801072a:	2200      	movs	r2, #0
 801072c:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 801072e:	4b03      	ldr	r3, [pc, #12]	@ (801073c <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010730:	2200      	movs	r2, #0
 8010732:	801a      	strh	r2, [r3, #0]
}
 8010734:	bf00      	nop
 8010736:	371c      	adds	r7, #28
 8010738:	46bd      	mov	sp, r7
 801073a:	bd90      	pop	{r4, r7, pc}
 801073c:	20005e58 	.word	0x20005e58
 8010740:	03938700 	.word	0x03938700
 8010744:	000f4240 	.word	0x000f4240
 8010748:	20000788 	.word	0x20000788

0801074c <gos_kernelDump>:
{
 801074c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010750:	b0a6      	sub	sp, #152	@ 0x98
 8010752:	af14      	add	r7, sp, #80	@ 0x50
    u16_t taskIndex = 0u;
 8010754:	2300      	movs	r3, #0
 8010756:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 801075a:	48ae      	ldr	r0, [pc, #696]	@ (8010a14 <gos_kernelDump+0x2c8>)
 801075c:	f005 fdb6 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8010760:	48ad      	ldr	r0, [pc, #692]	@ (8010a18 <gos_kernelDump+0x2cc>)
 8010762:	f005 fdb3 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8010766:	4bad      	ldr	r3, [pc, #692]	@ (8010a1c <gos_kernelDump+0x2d0>)
 8010768:	9302      	str	r3, [sp, #8]
 801076a:	4bad      	ldr	r3, [pc, #692]	@ (8010a20 <gos_kernelDump+0x2d4>)
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	4bad      	ldr	r3, [pc, #692]	@ (8010a24 <gos_kernelDump+0x2d8>)
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	4bad      	ldr	r3, [pc, #692]	@ (8010a28 <gos_kernelDump+0x2dc>)
 8010774:	4aad      	ldr	r2, [pc, #692]	@ (8010a2c <gos_kernelDump+0x2e0>)
 8010776:	49ae      	ldr	r1, [pc, #696]	@ (8010a30 <gos_kernelDump+0x2e4>)
 8010778:	48ae      	ldr	r0, [pc, #696]	@ (8010a34 <gos_kernelDump+0x2e8>)
 801077a:	f005 fda7 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 801077e:	48a6      	ldr	r0, [pc, #664]	@ (8010a18 <gos_kernelDump+0x2cc>)
 8010780:	f005 fda4 	bl	80162cc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010784:	2300      	movs	r3, #0
 8010786:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 801078a:	e1cc      	b.n	8010b26 <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 801078c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010790:	4aa9      	ldr	r2, [pc, #676]	@ (8010a38 <gos_kernelDump+0x2ec>)
 8010792:	216a      	movs	r1, #106	@ 0x6a
 8010794:	fb01 f303 	mul.w	r3, r1, r3
 8010798:	4413      	add	r3, r2
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 81c8 	beq.w	8010b32 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 80107a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107a6:	4aa4      	ldr	r2, [pc, #656]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80107a8:	216a      	movs	r1, #106	@ 0x6a
 80107aa:	fb01 f303 	mul.w	r3, r1, r3
 80107ae:	4413      	add	r3, r2
 80107b0:	3328      	adds	r3, #40	@ 0x28
 80107b2:	885b      	ldrh	r3, [r3, #2]
 80107b4:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80107b6:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 80107b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107bc:	226a      	movs	r2, #106	@ 0x6a
 80107be:	fb02 f303 	mul.w	r3, r2, r3
 80107c2:	3308      	adds	r3, #8
 80107c4:	4a9c      	ldr	r2, [pc, #624]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80107c6:	4413      	add	r3, r2
 80107c8:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 80107cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107d0:	4a99      	ldr	r2, [pc, #612]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80107d2:	216a      	movs	r1, #106	@ 0x6a
 80107d4:	fb01 f303 	mul.w	r3, r1, r3
 80107d8:	4413      	add	r3, r2
 80107da:	3306      	adds	r3, #6
 80107dc:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80107de:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80107e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107e4:	4a94      	ldr	r2, [pc, #592]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80107e6:	216a      	movs	r1, #106	@ 0x6a
 80107e8:	fb01 f303 	mul.w	r3, r1, r3
 80107ec:	4413      	add	r3, r2
 80107ee:	3308      	adds	r3, #8
 80107f0:	881b      	ldrh	r3, [r3, #0]
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	da02      	bge.n	8010800 <gos_kernelDump+0xb4>
 80107fa:	4b90      	ldr	r3, [pc, #576]	@ (8010a3c <gos_kernelDump+0x2f0>)
 80107fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80107fe:	e001      	b.n	8010804 <gos_kernelDump+0xb8>
 8010800:	4b8f      	ldr	r3, [pc, #572]	@ (8010a40 <gos_kernelDump+0x2f4>)
 8010802:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010804:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010808:	4a8b      	ldr	r2, [pc, #556]	@ (8010a38 <gos_kernelDump+0x2ec>)
 801080a:	216a      	movs	r1, #106	@ 0x6a
 801080c:	fb01 f303 	mul.w	r3, r1, r3
 8010810:	4413      	add	r3, r2
 8010812:	3308      	adds	r3, #8
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	b29b      	uxth	r3, r3
 8010818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            (void_t) gos_shellDriverTransmitString(
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <gos_kernelDump+0xda>
 8010820:	4b86      	ldr	r3, [pc, #536]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010822:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010824:	e001      	b.n	801082a <gos_kernelDump+0xde>
 8010826:	4b86      	ldr	r3, [pc, #536]	@ (8010a40 <gos_kernelDump+0x2f4>)
 8010828:	63bb      	str	r3, [r7, #56]	@ 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801082a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801082e:	4a82      	ldr	r2, [pc, #520]	@ (8010a38 <gos_kernelDump+0x2ec>)
 8010830:	216a      	movs	r1, #106	@ 0x6a
 8010832:	fb01 f303 	mul.w	r3, r1, r3
 8010836:	4413      	add	r3, r2
 8010838:	3308      	adds	r3, #8
 801083a:	881b      	ldrh	r3, [r3, #0]
 801083c:	b29b      	uxth	r3, r3
 801083e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            (void_t) gos_shellDriverTransmitString(
 8010842:	2b00      	cmp	r3, #0
 8010844:	d002      	beq.n	801084c <gos_kernelDump+0x100>
 8010846:	4b7d      	ldr	r3, [pc, #500]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010848:	637b      	str	r3, [r7, #52]	@ 0x34
 801084a:	e001      	b.n	8010850 <gos_kernelDump+0x104>
 801084c:	4b7c      	ldr	r3, [pc, #496]	@ (8010a40 <gos_kernelDump+0x2f4>)
 801084e:	637b      	str	r3, [r7, #52]	@ 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010850:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010854:	4a78      	ldr	r2, [pc, #480]	@ (8010a38 <gos_kernelDump+0x2ec>)
 8010856:	216a      	movs	r1, #106	@ 0x6a
 8010858:	fb01 f303 	mul.w	r3, r1, r3
 801085c:	4413      	add	r3, r2
 801085e:	3308      	adds	r3, #8
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	b29b      	uxth	r3, r3
 8010864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
            (void_t) gos_shellDriverTransmitString(
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <gos_kernelDump+0x126>
 801086c:	4b73      	ldr	r3, [pc, #460]	@ (8010a3c <gos_kernelDump+0x2f0>)
 801086e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010870:	e001      	b.n	8010876 <gos_kernelDump+0x12a>
 8010872:	4b73      	ldr	r3, [pc, #460]	@ (8010a40 <gos_kernelDump+0x2f4>)
 8010874:	633b      	str	r3, [r7, #48]	@ 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801087a:	4a6f      	ldr	r2, [pc, #444]	@ (8010a38 <gos_kernelDump+0x2ec>)
 801087c:	216a      	movs	r1, #106	@ 0x6a
 801087e:	fb01 f303 	mul.w	r3, r1, r3
 8010882:	4413      	add	r3, r2
 8010884:	3308      	adds	r3, #8
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	b29b      	uxth	r3, r3
 801088a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            (void_t) gos_shellDriverTransmitString(
 801088e:	2b00      	cmp	r3, #0
 8010890:	d002      	beq.n	8010898 <gos_kernelDump+0x14c>
 8010892:	4b6a      	ldr	r3, [pc, #424]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010896:	e001      	b.n	801089c <gos_kernelDump+0x150>
 8010898:	4b69      	ldr	r3, [pc, #420]	@ (8010a40 <gos_kernelDump+0x2f4>)
 801089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801089c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80108a0:	4a65      	ldr	r2, [pc, #404]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80108a2:	216a      	movs	r1, #106	@ 0x6a
 80108a4:	fb01 f303 	mul.w	r3, r1, r3
 80108a8:	4413      	add	r3, r2
 80108aa:	3308      	adds	r3, #8
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
            (void_t) gos_shellDriverTransmitString(
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <gos_kernelDump+0x172>
 80108b8:	4b60      	ldr	r3, [pc, #384]	@ (8010a3c <gos_kernelDump+0x2f0>)
 80108ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108bc:	e001      	b.n	80108c2 <gos_kernelDump+0x176>
 80108be:	4b60      	ldr	r3, [pc, #384]	@ (8010a40 <gos_kernelDump+0x2f4>)
 80108c0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80108c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80108c6:	4a5c      	ldr	r2, [pc, #368]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80108c8:	216a      	movs	r1, #106	@ 0x6a
 80108ca:	fb01 f303 	mul.w	r3, r1, r3
 80108ce:	4413      	add	r3, r2
 80108d0:	3308      	adds	r3, #8
 80108d2:	881b      	ldrh	r3, [r3, #0]
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
            (void_t) gos_shellDriverTransmitString(
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d002      	beq.n	80108e4 <gos_kernelDump+0x198>
 80108de:	4b57      	ldr	r3, [pc, #348]	@ (8010a3c <gos_kernelDump+0x2f0>)
 80108e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80108e2:	e001      	b.n	80108e8 <gos_kernelDump+0x19c>
 80108e4:	4b56      	ldr	r3, [pc, #344]	@ (8010a40 <gos_kernelDump+0x2f4>)
 80108e6:	627b      	str	r3, [r7, #36]	@ 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80108e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80108ec:	4a52      	ldr	r2, [pc, #328]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80108ee:	216a      	movs	r1, #106	@ 0x6a
 80108f0:	fb01 f303 	mul.w	r3, r1, r3
 80108f4:	4413      	add	r3, r2
 80108f6:	3308      	adds	r3, #8
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
            (void_t) gos_shellDriverTransmitString(
 8010900:	2b00      	cmp	r3, #0
 8010902:	d002      	beq.n	801090a <gos_kernelDump+0x1be>
 8010904:	4b4d      	ldr	r3, [pc, #308]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010906:	623b      	str	r3, [r7, #32]
 8010908:	e001      	b.n	801090e <gos_kernelDump+0x1c2>
 801090a:	4b4d      	ldr	r3, [pc, #308]	@ (8010a40 <gos_kernelDump+0x2f4>)
 801090c:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801090e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010912:	4a49      	ldr	r2, [pc, #292]	@ (8010a38 <gos_kernelDump+0x2ec>)
 8010914:	216a      	movs	r1, #106	@ 0x6a
 8010916:	fb01 f303 	mul.w	r3, r1, r3
 801091a:	4413      	add	r3, r2
 801091c:	3308      	adds	r3, #8
 801091e:	881b      	ldrh	r3, [r3, #0]
 8010920:	b29b      	uxth	r3, r3
 8010922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
            (void_t) gos_shellDriverTransmitString(
 8010926:	2b00      	cmp	r3, #0
 8010928:	d002      	beq.n	8010930 <gos_kernelDump+0x1e4>
 801092a:	4b44      	ldr	r3, [pc, #272]	@ (8010a3c <gos_kernelDump+0x2f0>)
 801092c:	61fb      	str	r3, [r7, #28]
 801092e:	e001      	b.n	8010934 <gos_kernelDump+0x1e8>
 8010930:	4b43      	ldr	r3, [pc, #268]	@ (8010a40 <gos_kernelDump+0x2f4>)
 8010932:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010934:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010938:	493f      	ldr	r1, [pc, #252]	@ (8010a38 <gos_kernelDump+0x2ec>)
 801093a:	236a      	movs	r3, #106	@ 0x6a
 801093c:	fb02 f303 	mul.w	r3, r2, r3
 8010940:	440b      	add	r3, r1
 8010942:	3308      	adds	r3, #8
 8010944:	881b      	ldrh	r3, [r3, #0]
 8010946:	b29b      	uxth	r3, r3
 8010948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
            (void_t) gos_shellDriverTransmitString(
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <gos_kernelDump+0x20a>
 8010950:	4b3a      	ldr	r3, [pc, #232]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010952:	61bb      	str	r3, [r7, #24]
 8010954:	e001      	b.n	801095a <gos_kernelDump+0x20e>
 8010956:	4b3a      	ldr	r3, [pc, #232]	@ (8010a40 <gos_kernelDump+0x2f4>)
 8010958:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801095a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801095e:	4936      	ldr	r1, [pc, #216]	@ (8010a38 <gos_kernelDump+0x2ec>)
 8010960:	236a      	movs	r3, #106	@ 0x6a
 8010962:	fb02 f303 	mul.w	r3, r2, r3
 8010966:	440b      	add	r3, r1
 8010968:	3308      	adds	r3, #8
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	b29b      	uxth	r3, r3
 801096e:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8010972:	2b00      	cmp	r3, #0
 8010974:	d002      	beq.n	801097c <gos_kernelDump+0x230>
 8010976:	4b31      	ldr	r3, [pc, #196]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010978:	617b      	str	r3, [r7, #20]
 801097a:	e001      	b.n	8010980 <gos_kernelDump+0x234>
 801097c:	4b30      	ldr	r3, [pc, #192]	@ (8010a40 <gos_kernelDump+0x2f4>)
 801097e:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010980:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010984:	492c      	ldr	r1, [pc, #176]	@ (8010a38 <gos_kernelDump+0x2ec>)
 8010986:	236a      	movs	r3, #106	@ 0x6a
 8010988:	fb02 f303 	mul.w	r3, r2, r3
 801098c:	440b      	add	r3, r1
 801098e:	3308      	adds	r3, #8
 8010990:	881b      	ldrh	r3, [r3, #0]
 8010992:	b29b      	uxth	r3, r3
 8010994:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <gos_kernelDump+0x256>
 801099c:	4b27      	ldr	r3, [pc, #156]	@ (8010a3c <gos_kernelDump+0x2f0>)
 801099e:	613b      	str	r3, [r7, #16]
 80109a0:	e001      	b.n	80109a6 <gos_kernelDump+0x25a>
 80109a2:	4b27      	ldr	r3, [pc, #156]	@ (8010a40 <gos_kernelDump+0x2f4>)
 80109a4:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80109a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80109aa:	4923      	ldr	r1, [pc, #140]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80109ac:	236a      	movs	r3, #106	@ 0x6a
 80109ae:	fb02 f303 	mul.w	r3, r2, r3
 80109b2:	440b      	add	r3, r1
 80109b4:	3308      	adds	r3, #8
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d002      	beq.n	80109c8 <gos_kernelDump+0x27c>
 80109c2:	4b1e      	ldr	r3, [pc, #120]	@ (8010a3c <gos_kernelDump+0x2f0>)
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	e001      	b.n	80109cc <gos_kernelDump+0x280>
 80109c8:	4b1d      	ldr	r3, [pc, #116]	@ (8010a40 <gos_kernelDump+0x2f4>)
 80109ca:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80109cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80109d0:	4919      	ldr	r1, [pc, #100]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80109d2:	236a      	movs	r3, #106	@ 0x6a
 80109d4:	fb02 f303 	mul.w	r3, r2, r3
 80109d8:	440b      	add	r3, r1
 80109da:	3308      	adds	r3, #8
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	b29b      	uxth	r3, r3
 80109e0:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <gos_kernelDump+0x2a2>
 80109e8:	4b14      	ldr	r3, [pc, #80]	@ (8010a3c <gos_kernelDump+0x2f0>)
 80109ea:	60bb      	str	r3, [r7, #8]
 80109ec:	e001      	b.n	80109f2 <gos_kernelDump+0x2a6>
 80109ee:	4b14      	ldr	r3, [pc, #80]	@ (8010a40 <gos_kernelDump+0x2f4>)
 80109f0:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80109f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80109f6:	4910      	ldr	r1, [pc, #64]	@ (8010a38 <gos_kernelDump+0x2ec>)
 80109f8:	236a      	movs	r3, #106	@ 0x6a
 80109fa:	fb02 f303 	mul.w	r3, r2, r3
 80109fe:	440b      	add	r3, r1
 8010a00:	3308      	adds	r3, #8
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d01a      	beq.n	8010a44 <gos_kernelDump+0x2f8>
 8010a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010a3c <gos_kernelDump+0x2f0>)
 8010a10:	607b      	str	r3, [r7, #4]
 8010a12:	e019      	b.n	8010a48 <gos_kernelDump+0x2fc>
 8010a14:	08019908 	.word	0x08019908
 8010a18:	08019918 	.word	0x08019918
 8010a1c:	080199b4 	.word	0x080199b4
 8010a20:	080199bc 	.word	0x080199bc
 8010a24:	080199c4 	.word	0x080199c4
 8010a28:	08019974 	.word	0x08019974
 8010a2c:	0801997c 	.word	0x0801997c
 8010a30:	08019984 	.word	0x08019984
 8010a34:	08019988 	.word	0x08019988
 8010a38:	20000788 	.word	0x20000788
 8010a3c:	080199d0 	.word	0x080199d0
 8010a40:	080199d8 	.word	0x080199d8
 8010a44:	4b7d      	ldr	r3, [pc, #500]	@ (8010c3c <gos_kernelDump+0x4f0>)
 8010a46:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010a48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a4c:	497c      	ldr	r1, [pc, #496]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010a4e:	236a      	movs	r3, #106	@ 0x6a
 8010a50:	fb02 f303 	mul.w	r3, r2, r3
 8010a54:	440b      	add	r3, r1
 8010a56:	3308      	adds	r3, #8
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d001      	beq.n	8010a68 <gos_kernelDump+0x31c>
 8010a64:	4d77      	ldr	r5, [pc, #476]	@ (8010c44 <gos_kernelDump+0x4f8>)
 8010a66:	e000      	b.n	8010a6a <gos_kernelDump+0x31e>
 8010a68:	4d74      	ldr	r5, [pc, #464]	@ (8010c3c <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 8010a6a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a6e:	4974      	ldr	r1, [pc, #464]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010a70:	236a      	movs	r3, #106	@ 0x6a
 8010a72:	fb02 f303 	mul.w	r3, r2, r3
 8010a76:	440b      	add	r3, r1
 8010a78:	3360      	adds	r3, #96	@ 0x60
 8010a7a:	885b      	ldrh	r3, [r3, #2]
 8010a7c:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8010a7e:	4b72      	ldr	r3, [pc, #456]	@ (8010c48 <gos_kernelDump+0x4fc>)
 8010a80:	fba3 2302 	umull	r2, r3, r3, r2
 8010a84:	095b      	lsrs	r3, r3, #5
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 8010a8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a8e:	496c      	ldr	r1, [pc, #432]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010a90:	236a      	movs	r3, #106	@ 0x6a
 8010a92:	fb02 f303 	mul.w	r3, r2, r3
 8010a96:	440b      	add	r3, r1
 8010a98:	3360      	adds	r3, #96	@ 0x60
 8010a9a:	885b      	ldrh	r3, [r3, #2]
 8010a9c:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8010a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8010c48 <gos_kernelDump+0x4fc>)
 8010aa0:	fba3 2301 	umull	r2, r3, r3, r1
 8010aa4:	095a      	lsrs	r2, r3, #5
 8010aa6:	2364      	movs	r3, #100	@ 0x64
 8010aa8:	fb02 f303 	mul.w	r3, r2, r3
 8010aac:	1acb      	subs	r3, r1, r3
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	461c      	mov	r4, r3
 8010ab2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010ab6:	4962      	ldr	r1, [pc, #392]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010ab8:	236a      	movs	r3, #106	@ 0x6a
 8010aba:	fb02 f303 	mul.w	r3, r2, r3
 8010abe:	440b      	add	r3, r1
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f000 fc25 	bl	8011314 <gos_kernelGetTaskStateString>
 8010aca:	4603      	mov	r3, r0
 8010acc:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ace:	9411      	str	r4, [sp, #68]	@ 0x44
 8010ad0:	9610      	str	r6, [sp, #64]	@ 0x40
 8010ad2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	930e      	str	r3, [sp, #56]	@ 0x38
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	930d      	str	r3, [sp, #52]	@ 0x34
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	9308      	str	r3, [sp, #32]
 8010af0:	6a3b      	ldr	r3, [r7, #32]
 8010af2:	9307      	str	r3, [sp, #28]
 8010af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af6:	9306      	str	r3, [sp, #24]
 8010af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010afa:	9305      	str	r3, [sp, #20]
 8010afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afe:	9304      	str	r3, [sp, #16]
 8010b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b02:	9303      	str	r3, [sp, #12]
 8010b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b06:	9302      	str	r3, [sp, #8]
 8010b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0a:	9301      	str	r3, [sp, #4]
 8010b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	4653      	mov	r3, sl
 8010b12:	4642      	mov	r2, r8
 8010b14:	4649      	mov	r1, r9
 8010b16:	484d      	ldr	r0, [pc, #308]	@ (8010c4c <gos_kernelDump+0x500>)
 8010b18:	f005 fbd8 	bl	80162cc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010b1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b20:	3301      	adds	r3, #1
 8010b22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010b26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b2a:	2b0f      	cmp	r3, #15
 8010b2c:	f67f ae2e 	bls.w	801078c <gos_kernelDump+0x40>
 8010b30:	e000      	b.n	8010b34 <gos_kernelDump+0x3e8>
            break;
 8010b32:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8010b34:	4846      	ldr	r0, [pc, #280]	@ (8010c50 <gos_kernelDump+0x504>)
 8010b36:	f005 fbc9 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8010b3a:	4846      	ldr	r0, [pc, #280]	@ (8010c54 <gos_kernelDump+0x508>)
 8010b3c:	f005 fbc6 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8010b40:	4845      	ldr	r0, [pc, #276]	@ (8010c58 <gos_kernelDump+0x50c>)
 8010b42:	f005 fbc3 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8010b46:	4b45      	ldr	r3, [pc, #276]	@ (8010c5c <gos_kernelDump+0x510>)
 8010b48:	4a45      	ldr	r2, [pc, #276]	@ (8010c60 <gos_kernelDump+0x514>)
 8010b4a:	4946      	ldr	r1, [pc, #280]	@ (8010c64 <gos_kernelDump+0x518>)
 8010b4c:	4846      	ldr	r0, [pc, #280]	@ (8010c68 <gos_kernelDump+0x51c>)
 8010b4e:	f005 fbbd 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8010b52:	4841      	ldr	r0, [pc, #260]	@ (8010c58 <gos_kernelDump+0x50c>)
 8010b54:	f005 fbba 	bl	80162cc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010b5e:	e04c      	b.n	8010bfa <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8010b60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b64:	4a36      	ldr	r2, [pc, #216]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010b66:	216a      	movs	r1, #106	@ 0x6a
 8010b68:	fb01 f303 	mul.w	r3, r1, r3
 8010b6c:	4413      	add	r3, r2
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d047      	beq.n	8010c04 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8010b74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b78:	4a31      	ldr	r2, [pc, #196]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010b7a:	216a      	movs	r1, #106	@ 0x6a
 8010b7c:	fb01 f303 	mul.w	r3, r1, r3
 8010b80:	4413      	add	r3, r2
 8010b82:	3328      	adds	r3, #40	@ 0x28
 8010b84:	885b      	ldrh	r3, [r3, #2]
 8010b86:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010b88:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 8010b8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b8e:	226a      	movs	r2, #106	@ 0x6a
 8010b90:	fb02 f303 	mul.w	r3, r2, r3
 8010b94:	3308      	adds	r3, #8
 8010b96:	4a2a      	ldr	r2, [pc, #168]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010b98:	4413      	add	r3, r2
 8010b9a:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8010b9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010ba0:	4a27      	ldr	r2, [pc, #156]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010ba2:	206a      	movs	r0, #106	@ 0x6a
 8010ba4:	fb00 f303 	mul.w	r3, r0, r3
 8010ba8:	4413      	add	r3, r2
 8010baa:	3360      	adds	r3, #96	@ 0x60
 8010bac:	881b      	ldrh	r3, [r3, #0]
 8010bae:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010bb0:	4a25      	ldr	r2, [pc, #148]	@ (8010c48 <gos_kernelDump+0x4fc>)
 8010bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bb6:	095b      	lsrs	r3, r3, #5
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8010bbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8010c40 <gos_kernelDump+0x4f4>)
 8010bc2:	206a      	movs	r0, #106	@ 0x6a
 8010bc4:	fb00 f303 	mul.w	r3, r0, r3
 8010bc8:	4413      	add	r3, r2
 8010bca:	3360      	adds	r3, #96	@ 0x60
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8010c48 <gos_kernelDump+0x4fc>)
 8010bd2:	fba2 0203 	umull	r0, r2, r2, r3
 8010bd6:	0952      	lsrs	r2, r2, #5
 8010bd8:	2064      	movs	r0, #100	@ 0x64
 8010bda:	fb00 f202 	mul.w	r2, r0, r2
 8010bde:	1a9b      	subs	r3, r3, r2
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	462b      	mov	r3, r5
 8010be6:	460a      	mov	r2, r1
 8010be8:	4621      	mov	r1, r4
 8010bea:	4820      	ldr	r0, [pc, #128]	@ (8010c6c <gos_kernelDump+0x520>)
 8010bec:	f005 fb6e 	bl	80162cc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010bf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010bfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010bfe:	2b0f      	cmp	r3, #15
 8010c00:	d9ae      	bls.n	8010b60 <gos_kernelDump+0x414>
 8010c02:	e000      	b.n	8010c06 <gos_kernelDump+0x4ba>
            break;
 8010c04:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 8010c06:	481a      	ldr	r0, [pc, #104]	@ (8010c70 <gos_kernelDump+0x524>)
 8010c08:	f005 fb60 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8010c0c:	4819      	ldr	r0, [pc, #100]	@ (8010c74 <gos_kernelDump+0x528>)
 8010c0e:	f005 fb5d 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8010c12:	4819      	ldr	r0, [pc, #100]	@ (8010c78 <gos_kernelDump+0x52c>)
 8010c14:	f005 fb5a 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8010c18:	4b18      	ldr	r3, [pc, #96]	@ (8010c7c <gos_kernelDump+0x530>)
 8010c1a:	9301      	str	r3, [sp, #4]
 8010c1c:	4b18      	ldr	r3, [pc, #96]	@ (8010c80 <gos_kernelDump+0x534>)
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	4b18      	ldr	r3, [pc, #96]	@ (8010c84 <gos_kernelDump+0x538>)
 8010c22:	4a0f      	ldr	r2, [pc, #60]	@ (8010c60 <gos_kernelDump+0x514>)
 8010c24:	490f      	ldr	r1, [pc, #60]	@ (8010c64 <gos_kernelDump+0x518>)
 8010c26:	4818      	ldr	r0, [pc, #96]	@ (8010c88 <gos_kernelDump+0x53c>)
 8010c28:	f005 fb50 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8010c2c:	4812      	ldr	r0, [pc, #72]	@ (8010c78 <gos_kernelDump+0x52c>)
 8010c2e:	f005 fb4d 	bl	80162cc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010c32:	2300      	movs	r3, #0
 8010c34:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010c38:	e0b1      	b.n	8010d9e <gos_kernelDump+0x652>
 8010c3a:	bf00      	nop
 8010c3c:	080199d8 	.word	0x080199d8
 8010c40:	20000788 	.word	0x20000788
 8010c44:	080199d0 	.word	0x080199d0
 8010c48:	51eb851f 	.word	0x51eb851f
 8010c4c:	080199e0 	.word	0x080199e0
 8010c50:	08019a34 	.word	0x08019a34
 8010c54:	08019a94 	.word	0x08019a94
 8010c58:	08019aa8 	.word	0x08019aa8
 8010c5c:	08019ae4 	.word	0x08019ae4
 8010c60:	0801997c 	.word	0x0801997c
 8010c64:	08019984 	.word	0x08019984
 8010c68:	08019af0 	.word	0x08019af0
 8010c6c:	08019b08 	.word	0x08019b08
 8010c70:	08019b28 	.word	0x08019b28
 8010c74:	08019b64 	.word	0x08019b64
 8010c78:	08019b78 	.word	0x08019b78
 8010c7c:	08019bf8 	.word	0x08019bf8
 8010c80:	08019c04 	.word	0x08019c04
 8010c84:	08019bcc 	.word	0x08019bcc
 8010c88:	08019bd4 	.word	0x08019bd4
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8010c8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c90:	4a4a      	ldr	r2, [pc, #296]	@ (8010dbc <gos_kernelDump+0x670>)
 8010c92:	216a      	movs	r1, #106	@ 0x6a
 8010c94:	fb01 f303 	mul.w	r3, r1, r3
 8010c98:	4413      	add	r3, r2
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 8084 	beq.w	8010daa <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8010ca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010ca6:	4a45      	ldr	r2, [pc, #276]	@ (8010dbc <gos_kernelDump+0x670>)
 8010ca8:	216a      	movs	r1, #106	@ 0x6a
 8010caa:	fb01 f303 	mul.w	r3, r1, r3
 8010cae:	4413      	add	r3, r2
 8010cb0:	3328      	adds	r3, #40	@ 0x28
 8010cb2:	885b      	ldrh	r3, [r3, #2]
 8010cb4:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010cb6:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 8010cb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010cbc:	226a      	movs	r2, #106	@ 0x6a
 8010cbe:	fb02 f303 	mul.w	r3, r2, r3
 8010cc2:	3308      	adds	r3, #8
 8010cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8010dbc <gos_kernelDump+0x670>)
 8010cc6:	4413      	add	r3, r2
 8010cc8:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 8010cca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010cce:	4a3b      	ldr	r2, [pc, #236]	@ (8010dbc <gos_kernelDump+0x670>)
 8010cd0:	216a      	movs	r1, #106	@ 0x6a
 8010cd2:	fb01 f303 	mul.w	r3, r1, r3
 8010cd6:	4413      	add	r3, r2
 8010cd8:	3348      	adds	r3, #72	@ 0x48
 8010cda:	881b      	ldrh	r3, [r3, #0]
 8010cdc:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010cde:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8010ce0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010ce4:	4a35      	ldr	r2, [pc, #212]	@ (8010dbc <gos_kernelDump+0x670>)
 8010ce6:	216a      	movs	r1, #106	@ 0x6a
 8010ce8:	fb01 f303 	mul.w	r3, r1, r3
 8010cec:	4413      	add	r3, r2
 8010cee:	3348      	adds	r3, #72	@ 0x48
 8010cf0:	885b      	ldrh	r3, [r3, #2]
 8010cf2:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010cf4:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 8010cf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010cfa:	4a30      	ldr	r2, [pc, #192]	@ (8010dbc <gos_kernelDump+0x670>)
 8010cfc:	216a      	movs	r1, #106	@ 0x6a
 8010cfe:	fb01 f303 	mul.w	r3, r1, r3
 8010d02:	4413      	add	r3, r2
 8010d04:	3348      	adds	r3, #72	@ 0x48
 8010d06:	885b      	ldrh	r3, [r3, #2]
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010d10:	fb02 f303 	mul.w	r3, r2, r3
 8010d14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010d18:	4928      	ldr	r1, [pc, #160]	@ (8010dbc <gos_kernelDump+0x670>)
 8010d1a:	206a      	movs	r0, #106	@ 0x6a
 8010d1c:	fb00 f202 	mul.w	r2, r0, r2
 8010d20:	440a      	add	r2, r1
 8010d22:	3248      	adds	r2, #72	@ 0x48
 8010d24:	8812      	ldrh	r2, [r2, #0]
 8010d26:	b292      	uxth	r2, r2
 8010d28:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8010d2c:	4a24      	ldr	r2, [pc, #144]	@ (8010dc0 <gos_kernelDump+0x674>)
 8010d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8010d32:	1152      	asrs	r2, r2, #5
 8010d34:	17db      	asrs	r3, r3, #31
 8010d36:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 8010d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8010dbc <gos_kernelDump+0x670>)
 8010d3e:	206a      	movs	r0, #106	@ 0x6a
 8010d40:	fb00 f303 	mul.w	r3, r0, r3
 8010d44:	4413      	add	r3, r2
 8010d46:	3348      	adds	r3, #72	@ 0x48
 8010d48:	885b      	ldrh	r3, [r3, #2]
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010d52:	fb02 f303 	mul.w	r3, r2, r3
 8010d56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010d5a:	4818      	ldr	r0, [pc, #96]	@ (8010dbc <gos_kernelDump+0x670>)
 8010d5c:	256a      	movs	r5, #106	@ 0x6a
 8010d5e:	fb05 f202 	mul.w	r2, r5, r2
 8010d62:	4402      	add	r2, r0
 8010d64:	3248      	adds	r2, #72	@ 0x48
 8010d66:	8812      	ldrh	r2, [r2, #0]
 8010d68:	b292      	uxth	r2, r2
 8010d6a:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8010d6e:	4b14      	ldr	r3, [pc, #80]	@ (8010dc0 <gos_kernelDump+0x674>)
 8010d70:	fb83 0302 	smull	r0, r3, r3, r2
 8010d74:	1158      	asrs	r0, r3, #5
 8010d76:	17d3      	asrs	r3, r2, #31
 8010d78:	1ac3      	subs	r3, r0, r3
 8010d7a:	2064      	movs	r0, #100	@ 0x64
 8010d7c:	fb00 f303 	mul.w	r3, r0, r3
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	9302      	str	r3, [sp, #8]
 8010d84:	9101      	str	r1, [sp, #4]
 8010d86:	9600      	str	r6, [sp, #0]
 8010d88:	4673      	mov	r3, lr
 8010d8a:	4622      	mov	r2, r4
 8010d8c:	4661      	mov	r1, ip
 8010d8e:	480d      	ldr	r0, [pc, #52]	@ (8010dc4 <gos_kernelDump+0x678>)
 8010d90:	f005 fa9c 	bl	80162cc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010d94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d98:	3301      	adds	r3, #1
 8010d9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010d9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010da2:	2b0f      	cmp	r3, #15
 8010da4:	f67f af72 	bls.w	8010c8c <gos_kernelDump+0x540>
 8010da8:	e000      	b.n	8010dac <gos_kernelDump+0x660>
            break;
 8010daa:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 8010dac:	4806      	ldr	r0, [pc, #24]	@ (8010dc8 <gos_kernelDump+0x67c>)
 8010dae:	f005 fa8d 	bl	80162cc <gos_shellDriverTransmitString>
}
 8010db2:	bf00      	nop
 8010db4:	3748      	adds	r7, #72	@ 0x48
 8010db6:	46bd      	mov	sp, r7
 8010db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dbc:	20000788 	.word	0x20000788
 8010dc0:	51eb851f 	.word	0x51eb851f
 8010dc4:	08019c14 	.word	0x08019c14
 8010dc8:	08019c48 	.word	0x08019c48

08010dcc <gos_kernelIsCallerIsr>:
{
 8010dcc:	b480      	push	{r7}
 8010dce:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 8010dd0:	4b05      	ldr	r3, [pc, #20]	@ (8010de8 <gos_kernelIsCallerIsr+0x1c>)
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d001      	beq.n	8010ddc <gos_kernelIsCallerIsr+0x10>
 8010dd8:	2336      	movs	r3, #54	@ 0x36
 8010dda:	e000      	b.n	8010dde <gos_kernelIsCallerIsr+0x12>
 8010ddc:	2349      	movs	r3, #73	@ 0x49
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr
 8010de8:	20005e46 	.word	0x20005e46

08010dec <SVC_Handler>:
    gos_ported_handleSVC();
 8010dec:	f01e 0f04 	tst.w	lr, #4
 8010df0:	bf0c      	ite	eq
 8010df2:	f3ef 8008 	mrseq	r0, MSP
 8010df6:	f3ef 8009 	mrsne	r0, PSP
 8010dfa:	4b06      	ldr	r3, [pc, #24]	@ (8010e14 <SVC_Handler+0x28>)
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	2b36      	cmp	r3, #54	@ 0x36
 8010e00:	d104      	bne.n	8010e0c <SVC_Handler+0x20>
 8010e02:	4b04      	ldr	r3, [pc, #16]	@ (8010e14 <SVC_Handler+0x28>)
 8010e04:	2249      	movs	r2, #73	@ 0x49
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	f000 fad8 	bl	80113bc <gos_kernelProcessorReset>
 8010e0c:	f000 b804 	b.w	8010e18 <gos_kernelSVC_HandlerMain>
}
 8010e10:	bf00      	nop
 8010e12:	bf00      	nop
 8010e14:	20000785 	.word	0x20000785

08010e18 <gos_kernelSVC_HandlerMain>:
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	3318      	adds	r3, #24
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	60fb      	str	r3, [r7, #12]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	3b02      	subs	r3, #2
 8010e2c:	60fb      	str	r3, [r7, #12]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	72fb      	strb	r3, [r7, #11]
 8010e34:	7afb      	ldrb	r3, [r7, #11]
 8010e36:	2bff      	cmp	r3, #255	@ 0xff
 8010e38:	d105      	bne.n	8010e46 <gos_kernelSVC_HandlerMain+0x2e>
 8010e3a:	4b06      	ldr	r3, [pc, #24]	@ (8010e54 <gos_kernelSVC_HandlerMain+0x3c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4a05      	ldr	r2, [pc, #20]	@ (8010e54 <gos_kernelSVC_HandlerMain+0x3c>)
 8010e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010e44:	6013      	str	r3, [r2, #0]
}
 8010e46:	bf00      	nop
 8010e48:	3714      	adds	r7, #20
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	e000ed04 	.word	0xe000ed04

08010e58 <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 8010e58:	4b10      	ldr	r3, [pc, #64]	@ (8010e9c <PendSV_Handler+0x44>)
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b36      	cmp	r3, #54	@ 0x36
 8010e5e:	d109      	bne.n	8010e74 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 8010e60:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8010e64:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 8010e68:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 8010e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e9c <PendSV_Handler+0x44>)
 8010e6e:	2249      	movs	r2, #73	@ 0x49
 8010e70:	701a      	strb	r2, [r3, #0]
}
 8010e72:	e011      	b.n	8010e98 <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8010e74:	b500      	push	{lr}
 8010e76:	f3ef 8009 	mrs	r0, PSP
 8010e7a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e7e:	f000 f8cb 	bl	8011018 <gos_kernelSaveCurrentPsp>
 8010e82:	f000 f8e1 	bl	8011048 <gos_kernelSelectNextTask>
 8010e86:	f000 f8b3 	bl	8010ff0 <gos_kernelGetCurrentPsp>
 8010e8a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e8e:	f380 8809 	msr	PSP, r0
 8010e92:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e96:	4770      	bx	lr
}
 8010e98:	bf00      	nop
 8010e9a:	bf00      	nop
 8010e9c:	20000786 	.word	0x20000786

08010ea0 <gos_kernelReschedule>:
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8010eaa:	79fb      	ldrb	r3, [r7, #7]
 8010eac:	2b16      	cmp	r3, #22
 8010eae:	d106      	bne.n	8010ebe <gos_kernelReschedule+0x1e>
 8010eb0:	4b06      	ldr	r3, [pc, #24]	@ (8010ecc <gos_kernelReschedule+0x2c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a05      	ldr	r2, [pc, #20]	@ (8010ecc <gos_kernelReschedule+0x2c>)
 8010eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010eba:	6013      	str	r3, [r2, #0]
}
 8010ebc:	e000      	b.n	8010ec0 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 8010ebe:	dfff      	svc	255	@ 0xff
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	e000ed04 	.word	0xe000ed04

08010ed0 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b086      	sub	sp, #24
 8010ed4:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 8010eda:	f3ef 8309 	mrs	r3, PSP
 8010ede:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d02b      	beq.n	8010f3e <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 8010ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a3f      	ldr	r2, [pc, #252]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010eec:	216a      	movs	r1, #106	@ 0x6a
 8010eee:	fb01 f303 	mul.w	r3, r1, r3
 8010ef2:	4413      	add	r3, r2
 8010ef4:	3360      	adds	r3, #96	@ 0x60
 8010ef6:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d21e      	bcs.n	8010f3e <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 8010f00:	4b38      	ldr	r3, [pc, #224]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	226a      	movs	r2, #106	@ 0x6a
 8010f06:	fb02 f303 	mul.w	r3, r2, r3
 8010f0a:	3308      	adds	r3, #8
 8010f0c:	4a36      	ldr	r2, [pc, #216]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010f0e:	4413      	add	r3, r2
 8010f10:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 8010f12:	4a34      	ldr	r2, [pc, #208]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010f14:	6812      	ldr	r2, [r2, #0]
 8010f16:	4934      	ldr	r1, [pc, #208]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010f18:	206a      	movs	r0, #106	@ 0x6a
 8010f1a:	fb00 f202 	mul.w	r2, r0, r2
 8010f1e:	440a      	add	r2, r1
 8010f20:	3260      	adds	r2, #96	@ 0x60
 8010f22:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	1a8a      	subs	r2, r1, r2
 8010f2a:	9202      	str	r2, [sp, #8]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	9201      	str	r2, [sp, #4]
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	4b2e      	ldr	r3, [pc, #184]	@ (8010fec <gos_kernelCheckTaskStack+0x11c>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	2100      	movs	r1, #0
 8010f38:	2034      	movs	r0, #52	@ 0x34
 8010f3a:	f002 f8eb 	bl	8013114 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d04a      	beq.n	8010fda <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8010f44:	4b27      	ldr	r3, [pc, #156]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4a27      	ldr	r2, [pc, #156]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010f4a:	216a      	movs	r1, #106	@ 0x6a
 8010f4c:	fb01 f303 	mul.w	r3, r1, r3
 8010f50:	4413      	add	r3, r2
 8010f52:	3360      	adds	r3, #96	@ 0x60
 8010f54:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8010f58:	4a22      	ldr	r2, [pc, #136]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010f5a:	6812      	ldr	r2, [r2, #0]
 8010f5c:	4922      	ldr	r1, [pc, #136]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010f5e:	206a      	movs	r0, #106	@ 0x6a
 8010f60:	fb00 f202 	mul.w	r2, r0, r2
 8010f64:	440a      	add	r2, r1
 8010f66:	3248      	adds	r2, #72	@ 0x48
 8010f68:	8812      	ldrh	r2, [r2, #0]
 8010f6a:	b292      	uxth	r2, r2
 8010f6c:	441a      	add	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	3b40      	subs	r3, #64	@ 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 8010f74:	4a1b      	ldr	r2, [pc, #108]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010f76:	6812      	ldr	r2, [r2, #0]
 8010f78:	491b      	ldr	r1, [pc, #108]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010f7a:	206a      	movs	r0, #106	@ 0x6a
 8010f7c:	fb00 f202 	mul.w	r2, r0, r2
 8010f80:	440a      	add	r2, r1
 8010f82:	3248      	adds	r2, #72	@ 0x48
 8010f84:	8852      	ldrh	r2, [r2, #2]
 8010f86:	b292      	uxth	r2, r2
    if (sp != 0 &&
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d926      	bls.n	8010fda <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8010f8c:	4b15      	ldr	r3, [pc, #84]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a15      	ldr	r2, [pc, #84]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010f92:	216a      	movs	r1, #106	@ 0x6a
 8010f94:	fb01 f303 	mul.w	r3, r1, r3
 8010f98:	4413      	add	r3, r2
 8010f9a:	3360      	adds	r3, #96	@ 0x60
 8010f9c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	4b10      	ldr	r3, [pc, #64]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4910      	ldr	r1, [pc, #64]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010fa8:	206a      	movs	r0, #106	@ 0x6a
 8010faa:	fb00 f303 	mul.w	r3, r0, r3
 8010fae:	440b      	add	r3, r1
 8010fb0:	3348      	adds	r3, #72	@ 0x48
 8010fb2:	881b      	ldrh	r3, [r3, #0]
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	4413      	add	r3, r2
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	4b08      	ldr	r3, [pc, #32]	@ (8010fe4 <gos_kernelCheckTaskStack+0x114>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	3a20      	subs	r2, #32
 8010fc8:	b290      	uxth	r0, r2
 8010fca:	4a07      	ldr	r2, [pc, #28]	@ (8010fe8 <gos_kernelCheckTaskStack+0x118>)
 8010fcc:	216a      	movs	r1, #106	@ 0x6a
 8010fce:	fb01 f303 	mul.w	r3, r1, r3
 8010fd2:	4413      	add	r3, r2
 8010fd4:	3348      	adds	r3, #72	@ 0x48
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 8010fda:	bf00      	nop
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	20005e4c 	.word	0x20005e4c
 8010fe8:	20000788 	.word	0x20000788
 8010fec:	08019c9c 	.word	0x08019c9c

08010ff0 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 8010ff4:	4b06      	ldr	r3, [pc, #24]	@ (8011010 <gos_kernelGetCurrentPsp+0x20>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a06      	ldr	r2, [pc, #24]	@ (8011014 <gos_kernelGetCurrentPsp+0x24>)
 8010ffa:	216a      	movs	r1, #106	@ 0x6a
 8010ffc:	fb01 f303 	mul.w	r3, r1, r3
 8011000:	4413      	add	r3, r2
 8011002:	3338      	adds	r3, #56	@ 0x38
 8011004:	685b      	ldr	r3, [r3, #4]
}
 8011006:	4618      	mov	r0, r3
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr
 8011010:	20005e4c 	.word	0x20005e4c
 8011014:	20000788 	.word	0x20000788

08011018 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 8011020:	4b07      	ldr	r3, [pc, #28]	@ (8011040 <gos_kernelSaveCurrentPsp+0x28>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4a07      	ldr	r2, [pc, #28]	@ (8011044 <gos_kernelSaveCurrentPsp+0x2c>)
 8011026:	216a      	movs	r1, #106	@ 0x6a
 8011028:	fb01 f303 	mul.w	r3, r1, r3
 801102c:	4413      	add	r3, r2
 801102e:	3338      	adds	r3, #56	@ 0x38
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	605a      	str	r2, [r3, #4]
}
 8011034:	bf00      	nop
 8011036:	370c      	adds	r7, #12
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	20005e4c 	.word	0x20005e4c
 8011044:	20000788 	.word	0x20000788

08011048 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 8011048:	b590      	push	{r4, r7, lr}
 801104a:	b085      	sub	sp, #20
 801104c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 801104e:	2300      	movs	r3, #0
 8011050:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 8011052:	23ff      	movs	r3, #255	@ 0xff
 8011054:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 8011056:	2300      	movs	r3, #0
 8011058:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 801105a:	2300      	movs	r3, #0
 801105c:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 801105e:	2300      	movs	r3, #0
 8011060:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 8011062:	4ba3      	ldr	r3, [pc, #652]	@ (80112f0 <gos_kernelSelectNextTask+0x2a8>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	4ba3      	ldr	r3, [pc, #652]	@ (80112f4 <gos_kernelSelectNextTask+0x2ac>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 801106e:	f7ff ff2f 	bl	8010ed0 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 8011072:	4ba1      	ldr	r3, [pc, #644]	@ (80112f8 <gos_kernelSelectNextTask+0x2b0>)
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f040 8136 	bne.w	80112e8 <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801107c:	2300      	movs	r3, #0
 801107e:	81fb      	strh	r3, [r7, #14]
 8011080:	e0d0      	b.n	8011224 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8011082:	89fb      	ldrh	r3, [r7, #14]
 8011084:	4a9d      	ldr	r2, [pc, #628]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011086:	216a      	movs	r1, #106	@ 0x6a
 8011088:	fb01 f303 	mul.w	r3, r1, r3
 801108c:	4413      	add	r3, r2
 801108e:	3304      	adds	r3, #4
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	2b16      	cmp	r3, #22
 8011094:	d12c      	bne.n	80110f0 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 8011096:	89fb      	ldrh	r3, [r7, #14]
 8011098:	4a98      	ldr	r2, [pc, #608]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 801109a:	216a      	movs	r1, #106	@ 0x6a
 801109c:	fb01 f303 	mul.w	r3, r1, r3
 80110a0:	4413      	add	r3, r2
 80110a2:	3330      	adds	r3, #48	@ 0x30
 80110a4:	6819      	ldr	r1, [r3, #0]
 80110a6:	89fb      	ldrh	r3, [r7, #14]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	4411      	add	r1, r2
 80110ac:	4893      	ldr	r0, [pc, #588]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80110ae:	226a      	movs	r2, #106	@ 0x6a
 80110b0:	fb03 f202 	mul.w	r2, r3, r2
 80110b4:	4402      	add	r2, r0
 80110b6:	3230      	adds	r2, #48	@ 0x30
 80110b8:	6011      	str	r1, [r2, #0]
 80110ba:	4a90      	ldr	r2, [pc, #576]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80110bc:	216a      	movs	r1, #106	@ 0x6a
 80110be:	fb01 f303 	mul.w	r3, r1, r3
 80110c2:	4413      	add	r3, r2
 80110c4:	3330      	adds	r3, #48	@ 0x30
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	89fb      	ldrh	r3, [r7, #14]
 80110ca:	498c      	ldr	r1, [pc, #560]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80110cc:	206a      	movs	r0, #106	@ 0x6a
 80110ce:	fb00 f303 	mul.w	r3, r0, r3
 80110d2:	440b      	add	r3, r1
 80110d4:	3328      	adds	r3, #40	@ 0x28
 80110d6:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 80110d8:	429a      	cmp	r2, r3
 80110da:	d309      	bcc.n	80110f0 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80110dc:	89fb      	ldrh	r3, [r7, #14]
 80110de:	4a87      	ldr	r2, [pc, #540]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80110e0:	216a      	movs	r1, #106	@ 0x6a
 80110e2:	fb01 f303 	mul.w	r3, r1, r3
 80110e6:	4413      	add	r3, r2
 80110e8:	3304      	adds	r3, #4
 80110ea:	220a      	movs	r2, #10
 80110ec:	701a      	strb	r2, [r3, #0]
 80110ee:	e040      	b.n	8011172 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 80110f0:	89fb      	ldrh	r3, [r7, #14]
 80110f2:	4a82      	ldr	r2, [pc, #520]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80110f4:	216a      	movs	r1, #106	@ 0x6a
 80110f6:	fb01 f303 	mul.w	r3, r1, r3
 80110fa:	4413      	add	r3, r2
 80110fc:	3304      	adds	r3, #4
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b19      	cmp	r3, #25
 8011102:	d136      	bne.n	8011172 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8011104:	89fb      	ldrh	r3, [r7, #14]
 8011106:	4a7d      	ldr	r2, [pc, #500]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011108:	216a      	movs	r1, #106	@ 0x6a
 801110a:	fb01 f303 	mul.w	r3, r1, r3
 801110e:	4413      	add	r3, r2
 8011110:	3330      	adds	r3, #48	@ 0x30
 8011112:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8011114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011118:	d02b      	beq.n	8011172 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 801111a:	89fb      	ldrh	r3, [r7, #14]
 801111c:	4a77      	ldr	r2, [pc, #476]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 801111e:	216a      	movs	r1, #106	@ 0x6a
 8011120:	fb01 f303 	mul.w	r3, r1, r3
 8011124:	4413      	add	r3, r2
 8011126:	3338      	adds	r3, #56	@ 0x38
 8011128:	6819      	ldr	r1, [r3, #0]
 801112a:	89fb      	ldrh	r3, [r7, #14]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	4411      	add	r1, r2
 8011130:	4872      	ldr	r0, [pc, #456]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011132:	226a      	movs	r2, #106	@ 0x6a
 8011134:	fb03 f202 	mul.w	r2, r3, r2
 8011138:	4402      	add	r2, r0
 801113a:	3238      	adds	r2, #56	@ 0x38
 801113c:	6011      	str	r1, [r2, #0]
 801113e:	4a6f      	ldr	r2, [pc, #444]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011140:	216a      	movs	r1, #106	@ 0x6a
 8011142:	fb01 f303 	mul.w	r3, r1, r3
 8011146:	4413      	add	r3, r2
 8011148:	3338      	adds	r3, #56	@ 0x38
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	89fb      	ldrh	r3, [r7, #14]
 801114e:	496b      	ldr	r1, [pc, #428]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011150:	206a      	movs	r0, #106	@ 0x6a
 8011152:	fb00 f303 	mul.w	r3, r0, r3
 8011156:	440b      	add	r3, r1
 8011158:	3330      	adds	r3, #48	@ 0x30
 801115a:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 801115c:	429a      	cmp	r2, r3
 801115e:	d308      	bcc.n	8011172 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8011160:	89fb      	ldrh	r3, [r7, #14]
 8011162:	4a66      	ldr	r2, [pc, #408]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011164:	216a      	movs	r1, #106	@ 0x6a
 8011166:	fb01 f303 	mul.w	r3, r1, r3
 801116a:	4413      	add	r3, r2
 801116c:	3304      	adds	r3, #4
 801116e:	220a      	movs	r2, #10
 8011170:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 8011172:	89fa      	ldrh	r2, [r7, #14]
 8011174:	4b62      	ldr	r3, [pc, #392]	@ (8011300 <gos_kernelSelectNextTask+0x2b8>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	429a      	cmp	r2, r3
 801117a:	d047      	beq.n	801120c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 801117c:	89fb      	ldrh	r3, [r7, #14]
 801117e:	4a5f      	ldr	r2, [pc, #380]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011180:	216a      	movs	r1, #106	@ 0x6a
 8011182:	fb01 f303 	mul.w	r3, r1, r3
 8011186:	4413      	add	r3, r2
 8011188:	3304      	adds	r3, #4
 801118a:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 801118c:	2b0a      	cmp	r3, #10
 801118e:	d13d      	bne.n	801120c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8011190:	89fb      	ldrh	r3, [r7, #14]
 8011192:	4a5a      	ldr	r2, [pc, #360]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011194:	216a      	movs	r1, #106	@ 0x6a
 8011196:	fb01 f303 	mul.w	r3, r1, r3
 801119a:	4413      	add	r3, r2
 801119c:	3306      	adds	r3, #6
 801119e:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 80111a0:	7b7a      	ldrb	r2, [r7, #13]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d932      	bls.n	801120c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80111a6:	89fb      	ldrh	r3, [r7, #14]
 80111a8:	4a54      	ldr	r2, [pc, #336]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80111aa:	216a      	movs	r1, #106	@ 0x6a
 80111ac:	fb01 f303 	mul.w	r3, r1, r3
 80111b0:	4413      	add	r3, r2
 80111b2:	3360      	adds	r3, #96	@ 0x60
 80111b4:	889b      	ldrh	r3, [r3, #4]
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	89fb      	ldrh	r3, [r7, #14]
 80111ba:	4950      	ldr	r1, [pc, #320]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80111bc:	206a      	movs	r0, #106	@ 0x6a
 80111be:	fb00 f303 	mul.w	r3, r0, r3
 80111c2:	440b      	add	r3, r1
 80111c4:	3358      	adds	r3, #88	@ 0x58
 80111c6:	88db      	ldrh	r3, [r3, #6]
 80111c8:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d21e      	bcs.n	801120c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 80111ce:	89fb      	ldrh	r3, [r7, #14]
 80111d0:	4a4a      	ldr	r2, [pc, #296]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80111d2:	216a      	movs	r1, #106	@ 0x6a
 80111d4:	fb01 f303 	mul.w	r3, r1, r3
 80111d8:	4413      	add	r3, r2
 80111da:	3360      	adds	r3, #96	@ 0x60
 80111dc:	885b      	ldrh	r3, [r3, #2]
 80111de:	b29a      	uxth	r2, r3
 80111e0:	89fb      	ldrh	r3, [r7, #14]
 80111e2:	4946      	ldr	r1, [pc, #280]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80111e4:	206a      	movs	r0, #106	@ 0x6a
 80111e6:	fb00 f303 	mul.w	r3, r0, r3
 80111ea:	440b      	add	r3, r1
 80111ec:	3358      	adds	r3, #88	@ 0x58
 80111ee:	88db      	ldrh	r3, [r3, #6]
 80111f0:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d20a      	bcs.n	801120c <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 80111f6:	89fb      	ldrh	r3, [r7, #14]
 80111f8:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 80111fa:	89fb      	ldrh	r3, [r7, #14]
 80111fc:	4a3f      	ldr	r2, [pc, #252]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80111fe:	216a      	movs	r1, #106	@ 0x6a
 8011200:	fb01 f303 	mul.w	r3, r1, r3
 8011204:	4413      	add	r3, r2
 8011206:	3306      	adds	r3, #6
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 801120c:	89fb      	ldrh	r3, [r7, #14]
 801120e:	4a3b      	ldr	r2, [pc, #236]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011210:	216a      	movs	r1, #106	@ 0x6a
 8011212:	fb01 f303 	mul.w	r3, r1, r3
 8011216:	4413      	add	r3, r2
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d007      	beq.n	801122e <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801121e:	89fb      	ldrh	r3, [r7, #14]
 8011220:	3301      	adds	r3, #1
 8011222:	81fb      	strh	r3, [r7, #14]
 8011224:	89fb      	ldrh	r3, [r7, #14]
 8011226:	2b0f      	cmp	r3, #15
 8011228:	f67f af2b 	bls.w	8011082 <gos_kernelSelectNextTask+0x3a>
 801122c:	e000      	b.n	8011230 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 801122e:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 8011230:	f7ff f8d4 	bl	80103dc <gos_kernelGetCpuUsage>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	4b32      	ldr	r3, [pc, #200]	@ (8011304 <gos_kernelSelectNextTask+0x2bc>)
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	429a      	cmp	r2, r3
 801123e:	d901      	bls.n	8011244 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 8011240:	2300      	movs	r3, #0
 8011242:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 8011244:	897a      	ldrh	r2, [r7, #10]
 8011246:	4b2e      	ldr	r3, [pc, #184]	@ (8011300 <gos_kernelSelectNextTask+0x2b8>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	429a      	cmp	r2, r3
 801124c:	d02b      	beq.n	80112a6 <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 801124e:	4b2e      	ldr	r3, [pc, #184]	@ (8011308 <gos_kernelSelectNextTask+0x2c0>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d016      	beq.n	8011284 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 8011256:	4b2c      	ldr	r3, [pc, #176]	@ (8011308 <gos_kernelSelectNextTask+0x2c0>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4a29      	ldr	r2, [pc, #164]	@ (8011300 <gos_kernelSelectNextTask+0x2b8>)
 801125c:	6812      	ldr	r2, [r2, #0]
 801125e:	4927      	ldr	r1, [pc, #156]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011260:	206a      	movs	r0, #106	@ 0x6a
 8011262:	fb00 f202 	mul.w	r2, r0, r2
 8011266:	440a      	add	r2, r1
 8011268:	3228      	adds	r2, #40	@ 0x28
 801126a:	8852      	ldrh	r2, [r2, #2]
 801126c:	b290      	uxth	r0, r2
 801126e:	897a      	ldrh	r2, [r7, #10]
 8011270:	4922      	ldr	r1, [pc, #136]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 8011272:	246a      	movs	r4, #106	@ 0x6a
 8011274:	fb04 f202 	mul.w	r2, r4, r2
 8011278:	440a      	add	r2, r1
 801127a:	3228      	adds	r2, #40	@ 0x28
 801127c:	8852      	ldrh	r2, [r2, #2]
 801127e:	b292      	uxth	r2, r2
 8011280:	4611      	mov	r1, r2
 8011282:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8011284:	4b1e      	ldr	r3, [pc, #120]	@ (8011300 <gos_kernelSelectNextTask+0x2b8>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	491c      	ldr	r1, [pc, #112]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 801128a:	226a      	movs	r2, #106	@ 0x6a
 801128c:	fb03 f202 	mul.w	r2, r3, r2
 8011290:	440a      	add	r2, r1
 8011292:	3240      	adds	r2, #64	@ 0x40
 8011294:	6852      	ldr	r2, [r2, #4]
 8011296:	3201      	adds	r2, #1
 8011298:	4918      	ldr	r1, [pc, #96]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 801129a:	206a      	movs	r0, #106	@ 0x6a
 801129c:	fb00 f303 	mul.w	r3, r0, r3
 80112a0:	440b      	add	r3, r1
 80112a2:	3340      	adds	r3, #64	@ 0x40
 80112a4:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 80112a6:	1cbb      	adds	r3, r7, #2
 80112a8:	4618      	mov	r0, r3
 80112aa:	f005 f86b 	bl	8016384 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 80112ae:	887a      	ldrh	r2, [r7, #2]
 80112b0:	4b16      	ldr	r3, [pc, #88]	@ (801130c <gos_kernelSelectNextTask+0x2c4>)
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 80112b8:	4b11      	ldr	r3, [pc, #68]	@ (8011300 <gos_kernelSelectNextTask+0x2b8>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	226a      	movs	r2, #106	@ 0x6a
 80112be:	fb02 f303 	mul.w	r3, r2, r3
 80112c2:	3350      	adds	r3, #80	@ 0x50
 80112c4:	4a0d      	ldr	r2, [pc, #52]	@ (80112fc <gos_kernelSelectNextTask+0x2b4>)
 80112c6:	4413      	add	r3, r2
 80112c8:	3305      	adds	r3, #5
 80112ca:	893a      	ldrh	r2, [r7, #8]
 80112cc:	4619      	mov	r1, r3
 80112ce:	4810      	ldr	r0, [pc, #64]	@ (8011310 <gos_kernelSelectNextTask+0x2c8>)
 80112d0:	f004 f932 	bl	8015538 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 80112d4:	480d      	ldr	r0, [pc, #52]	@ (801130c <gos_kernelSelectNextTask+0x2c4>)
 80112d6:	f005 f855 	bl	8016384 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 80112da:	897b      	ldrh	r3, [r7, #10]
 80112dc:	4a08      	ldr	r2, [pc, #32]	@ (8011300 <gos_kernelSelectNextTask+0x2b8>)
 80112de:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 80112e0:	4b03      	ldr	r3, [pc, #12]	@ (80112f0 <gos_kernelSelectNextTask+0x2a8>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4a03      	ldr	r2, [pc, #12]	@ (80112f4 <gos_kernelSelectNextTask+0x2ac>)
 80112e6:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 80112e8:	bf00      	nop
 80112ea:	3714      	adds	r7, #20
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd90      	pop	{r4, r7, pc}
 80112f0:	20005e50 	.word	0x20005e50
 80112f4:	20005e70 	.word	0x20005e70
 80112f8:	20005e45 	.word	0x20005e45
 80112fc:	20000788 	.word	0x20000788
 8011300:	20005e4c 	.word	0x20005e4c
 8011304:	20000782 	.word	0x20000782
 8011308:	20005e64 	.word	0x20005e64
 801130c:	20005e54 	.word	0x20005e54
 8011310:	20005e58 	.word	0x20005e58

08011314 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
 801131a:	4603      	mov	r3, r0
 801131c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 801131e:	79fb      	ldrb	r3, [r7, #7]
 8011320:	3b05      	subs	r3, #5
 8011322:	2b14      	cmp	r3, #20
 8011324:	d836      	bhi.n	8011394 <gos_kernelGetTaskStateString+0x80>
 8011326:	a201      	add	r2, pc, #4	@ (adr r2, 801132c <gos_kernelGetTaskStateString+0x18>)
 8011328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132c:	08011389 	.word	0x08011389
 8011330:	08011395 	.word	0x08011395
 8011334:	08011395 	.word	0x08011395
 8011338:	08011395 	.word	0x08011395
 801133c:	08011395 	.word	0x08011395
 8011340:	08011381 	.word	0x08011381
 8011344:	08011395 	.word	0x08011395
 8011348:	08011395 	.word	0x08011395
 801134c:	08011391 	.word	0x08011391
 8011350:	08011395 	.word	0x08011395
 8011354:	08011395 	.word	0x08011395
 8011358:	08011395 	.word	0x08011395
 801135c:	08011395 	.word	0x08011395
 8011360:	08011395 	.word	0x08011395
 8011364:	08011395 	.word	0x08011395
 8011368:	08011395 	.word	0x08011395
 801136c:	08011395 	.word	0x08011395
 8011370:	08011385 	.word	0x08011385
 8011374:	08011395 	.word	0x08011395
 8011378:	08011395 	.word	0x08011395
 801137c:	0801138d 	.word	0x0801138d
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 8011380:	4b08      	ldr	r3, [pc, #32]	@ (80113a4 <gos_kernelGetTaskStateString+0x90>)
 8011382:	e008      	b.n	8011396 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8011384:	4b08      	ldr	r3, [pc, #32]	@ (80113a8 <gos_kernelGetTaskStateString+0x94>)
 8011386:	e006      	b.n	8011396 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 8011388:	4b08      	ldr	r3, [pc, #32]	@ (80113ac <gos_kernelGetTaskStateString+0x98>)
 801138a:	e004      	b.n	8011396 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 801138c:	4b08      	ldr	r3, [pc, #32]	@ (80113b0 <gos_kernelGetTaskStateString+0x9c>)
 801138e:	e002      	b.n	8011396 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 8011390:	4b08      	ldr	r3, [pc, #32]	@ (80113b4 <gos_kernelGetTaskStateString+0xa0>)
 8011392:	e000      	b.n	8011396 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8011394:	4b08      	ldr	r3, [pc, #32]	@ (80113b8 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 8011396:	4618      	mov	r0, r3
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	08019ce0 	.word	0x08019ce0
 80113a8:	08019cf0 	.word	0x08019cf0
 80113ac:	08019d04 	.word	0x08019d04
 80113b0:	08019d18 	.word	0x08019d18
 80113b4:	08019d2c 	.word	0x08019d2c
 80113b8:	08019d3c 	.word	0x08019d3c

080113bc <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 80113bc:	b480      	push	{r7}
 80113be:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 80113c0:	f3bf 8f4f 	dsb	sy
 80113c4:	4b05      	ldr	r3, [pc, #20]	@ (80113dc <gos_kernelProcessorReset+0x20>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80113cc:	4903      	ldr	r1, [pc, #12]	@ (80113dc <gos_kernelProcessorReset+0x20>)
 80113ce:	4b04      	ldr	r3, [pc, #16]	@ (80113e0 <gos_kernelProcessorReset+0x24>)
 80113d0:	4313      	orrs	r3, r2
 80113d2:	600b      	str	r3, [r1, #0]
 80113d4:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 80113d8:	bf00      	nop
 80113da:	e7fd      	b.n	80113d8 <gos_kernelProcessorReset+0x1c>
 80113dc:	e000ed0c 	.word	0xe000ed0c
 80113e0:	05fa0004 	.word	0x05fa0004

080113e4 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 80113e4:	b480      	push	{r7}
 80113e6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80113e8:	bf00      	nop
 80113ea:	e7fd      	b.n	80113e8 <NMI_Handler+0x4>

080113ec <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 80113ec:	b480      	push	{r7}
 80113ee:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 80113f0:	bf00      	nop
 80113f2:	e7fd      	b.n	80113f0 <HardFault_Handler+0x4>

080113f4 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 80113f4:	b480      	push	{r7}
 80113f6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80113f8:	bf00      	nop
 80113fa:	e7fd      	b.n	80113f8 <MemManage_Handler+0x4>

080113fc <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 80113fc:	b480      	push	{r7}
 80113fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8011400:	bf00      	nop
 8011402:	e7fd      	b.n	8011400 <BusFault_Handler+0x4>

08011404 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8011404:	b480      	push	{r7}
 8011406:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8011408:	bf00      	nop
 801140a:	e7fd      	b.n	8011408 <UsageFault_Handler+0x4>

0801140c <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b086      	sub	sp, #24
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 8011416:	2355      	movs	r3, #85	@ 0x55
 8011418:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 801141a:	2300      	movs	r3, #0
 801141c:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 801141e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8011422:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 8011424:	2300      	movs	r3, #0
 8011426:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f001 fd05 	bl	8012e38 <gos_taskCheckDescriptor>
 801142e:	4603      	mov	r3, r0
 8011430:	2bae      	cmp	r3, #174	@ 0xae
 8011432:	d102      	bne.n	801143a <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 8011434:	23ae      	movs	r3, #174	@ 0xae
 8011436:	75fb      	strb	r3, [r7, #23]
 8011438:	e173      	b.n	8011722 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 801143a:	23ae      	movs	r3, #174	@ 0xae
 801143c:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801143e:	2300      	movs	r3, #0
 8011440:	82bb      	strh	r3, [r7, #20]
 8011442:	e01a      	b.n	801147a <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8011444:	8abb      	ldrh	r3, [r7, #20]
 8011446:	4a89      	ldr	r2, [pc, #548]	@ (801166c <gos_taskRegister+0x260>)
 8011448:	216a      	movs	r1, #106	@ 0x6a
 801144a:	fb01 f303 	mul.w	r3, r1, r3
 801144e:	4413      	add	r3, r2
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d102      	bne.n	801145c <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 8011456:	2355      	movs	r3, #85	@ 0x55
 8011458:	75fb      	strb	r3, [r7, #23]
                break;
 801145a:	e011      	b.n	8011480 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 801145c:	8abb      	ldrh	r3, [r7, #20]
 801145e:	4a83      	ldr	r2, [pc, #524]	@ (801166c <gos_taskRegister+0x260>)
 8011460:	216a      	movs	r1, #106	@ 0x6a
 8011462:	fb01 f303 	mul.w	r3, r1, r3
 8011466:	4413      	add	r3, r2
 8011468:	3348      	adds	r3, #72	@ 0x48
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	461a      	mov	r2, r3
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	4413      	add	r3, r2
 8011472:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8011474:	8abb      	ldrh	r3, [r7, #20]
 8011476:	3301      	adds	r3, #1
 8011478:	82bb      	strh	r3, [r7, #20]
 801147a:	8abb      	ldrh	r3, [r7, #20]
 801147c:	2b0f      	cmp	r3, #15
 801147e:	d9e1      	bls.n	8011444 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 8011480:	8abb      	ldrh	r3, [r7, #20]
 8011482:	2b0f      	cmp	r3, #15
 8011484:	d902      	bls.n	801148c <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 8011486:	23ae      	movs	r3, #174	@ 0xae
 8011488:	75fb      	strb	r3, [r7, #23]
 801148a:	e14a      	b.n	8011722 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8011492:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8011496:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	3b04      	subs	r3, #4
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80114a4:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	3b04      	subs	r3, #4
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	3b04      	subs	r3, #4
 80114b8:	60fb      	str	r3, [r7, #12]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f06f 0202 	mvn.w	r2, #2
 80114c0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3b04      	subs	r3, #4
 80114c6:	60fb      	str	r3, [r7, #12]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80114ce:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	3b04      	subs	r3, #4
 80114d4:	60fb      	str	r3, [r7, #12]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80114dc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	3b04      	subs	r3, #4
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80114ea:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	3b04      	subs	r3, #4
 80114f0:	60fb      	str	r3, [r7, #12]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80114f8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	3b04      	subs	r3, #4
 80114fe:	60fb      	str	r3, [r7, #12]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2200      	movs	r2, #0
 8011504:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	3b04      	subs	r3, #4
 801150a:	60fb      	str	r3, [r7, #12]
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8011512:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	3b04      	subs	r3, #4
 8011518:	60fb      	str	r3, [r7, #12]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8011520:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	3b04      	subs	r3, #4
 8011526:	60fb      	str	r3, [r7, #12]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 801152e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	3b04      	subs	r3, #4
 8011534:	60fb      	str	r3, [r7, #12]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 801153c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3b04      	subs	r3, #4
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 801154a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	3b04      	subs	r3, #4
 8011550:	60fb      	str	r3, [r7, #12]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8011558:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	3b04      	subs	r3, #4
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8011566:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	3b04      	subs	r3, #4
 801156c:	60fb      	str	r3, [r7, #12]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8011574:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 8011576:	8abb      	ldrh	r3, [r7, #20]
 8011578:	68fa      	ldr	r2, [r7, #12]
 801157a:	493c      	ldr	r1, [pc, #240]	@ (801166c <gos_taskRegister+0x260>)
 801157c:	206a      	movs	r0, #106	@ 0x6a
 801157e:	fb00 f303 	mul.w	r3, r0, r3
 8011582:	440b      	add	r3, r1
 8011584:	333c      	adds	r3, #60	@ 0x3c
 8011586:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 8011588:	8abb      	ldrh	r3, [r7, #20]
 801158a:	4a38      	ldr	r2, [pc, #224]	@ (801166c <gos_taskRegister+0x260>)
 801158c:	216a      	movs	r1, #106	@ 0x6a
 801158e:	fb01 f303 	mul.w	r3, r1, r3
 8011592:	4413      	add	r3, r2
 8011594:	3304      	adds	r3, #4
 8011596:	220a      	movs	r2, #10
 8011598:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 801159a:	8abb      	ldrh	r3, [r7, #20]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	6812      	ldr	r2, [r2, #0]
 80115a0:	4932      	ldr	r1, [pc, #200]	@ (801166c <gos_taskRegister+0x260>)
 80115a2:	206a      	movs	r0, #106	@ 0x6a
 80115a4:	fb00 f303 	mul.w	r3, r0, r3
 80115a8:	440b      	add	r3, r1
 80115aa:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 80115ac:	8abb      	ldrh	r3, [r7, #20]
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	7990      	ldrb	r0, [r2, #6]
 80115b2:	4a2e      	ldr	r2, [pc, #184]	@ (801166c <gos_taskRegister+0x260>)
 80115b4:	216a      	movs	r1, #106	@ 0x6a
 80115b6:	fb01 f303 	mul.w	r3, r1, r3
 80115ba:	4413      	add	r3, r2
 80115bc:	3306      	adds	r3, #6
 80115be:	4602      	mov	r2, r0
 80115c0:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 80115c2:	8abb      	ldrh	r3, [r7, #20]
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	7990      	ldrb	r0, [r2, #6]
 80115c8:	4a28      	ldr	r2, [pc, #160]	@ (801166c <gos_taskRegister+0x260>)
 80115ca:	216a      	movs	r1, #106	@ 0x6a
 80115cc:	fb01 f303 	mul.w	r3, r1, r3
 80115d0:	4413      	add	r3, r2
 80115d2:	3307      	adds	r3, #7
 80115d4:	4602      	mov	r2, r0
 80115d6:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 80115d8:	8abb      	ldrh	r3, [r7, #20]
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80115e0:	b290      	uxth	r0, r2
 80115e2:	4a22      	ldr	r2, [pc, #136]	@ (801166c <gos_taskRegister+0x260>)
 80115e4:	216a      	movs	r1, #106	@ 0x6a
 80115e6:	fb01 f303 	mul.w	r3, r1, r3
 80115ea:	4413      	add	r3, r2
 80115ec:	3348      	adds	r3, #72	@ 0x48
 80115ee:	4602      	mov	r2, r0
 80115f0:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 80115f2:	8abb      	ldrh	r3, [r7, #20]
 80115f4:	8aba      	ldrh	r2, [r7, #20]
 80115f6:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 80115fa:	b290      	uxth	r0, r2
 80115fc:	4a1b      	ldr	r2, [pc, #108]	@ (801166c <gos_taskRegister+0x260>)
 80115fe:	216a      	movs	r1, #106	@ 0x6a
 8011600:	fb01 f303 	mul.w	r3, r1, r3
 8011604:	4413      	add	r3, r2
 8011606:	332a      	adds	r3, #42	@ 0x2a
 8011608:	4602      	mov	r2, r0
 801160a:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 801160c:	8abb      	ldrh	r3, [r7, #20]
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	8912      	ldrh	r2, [r2, #8]
 8011612:	b290      	uxth	r0, r2
 8011614:	4a15      	ldr	r2, [pc, #84]	@ (801166c <gos_taskRegister+0x260>)
 8011616:	216a      	movs	r1, #106	@ 0x6a
 8011618:	fb01 f303 	mul.w	r3, r1, r3
 801161c:	4413      	add	r3, r2
 801161e:	3308      	adds	r3, #8
 8011620:	4602      	mov	r2, r0
 8011622:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801162a:	b29b      	uxth	r3, r3
 801162c:	2b00      	cmp	r3, #0
 801162e:	d10a      	bne.n	8011646 <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8011630:	8abb      	ldrh	r3, [r7, #20]
 8011632:	4a0e      	ldr	r2, [pc, #56]	@ (801166c <gos_taskRegister+0x260>)
 8011634:	216a      	movs	r1, #106	@ 0x6a
 8011636:	fb01 f303 	mul.w	r3, r1, r3
 801163a:	4413      	add	r3, r2
 801163c:	335e      	adds	r3, #94	@ 0x5e
 801163e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011642:	801a      	strh	r2, [r3, #0]
 8011644:	e021      	b.n	801168a <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801164c:	b29b      	uxth	r3, r3
 801164e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011652:	4293      	cmp	r3, r2
 8011654:	d90c      	bls.n	8011670 <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8011656:	8abb      	ldrh	r3, [r7, #20]
 8011658:	4a04      	ldr	r2, [pc, #16]	@ (801166c <gos_taskRegister+0x260>)
 801165a:	216a      	movs	r1, #106	@ 0x6a
 801165c:	fb01 f303 	mul.w	r3, r1, r3
 8011660:	4413      	add	r3, r2
 8011662:	335e      	adds	r3, #94	@ 0x5e
 8011664:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011668:	801a      	strh	r2, [r3, #0]
 801166a:	e00e      	b.n	801168a <gos_taskRegister+0x27e>
 801166c:	20000788 	.word	0x20000788
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 8011670:	8abb      	ldrh	r3, [r7, #20]
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8011678:	b290      	uxth	r0, r2
 801167a:	4a2c      	ldr	r2, [pc, #176]	@ (801172c <gos_taskRegister+0x320>)
 801167c:	216a      	movs	r1, #106	@ 0x6a
 801167e:	fb01 f303 	mul.w	r3, r1, r3
 8011682:	4413      	add	r3, r2
 8011684:	335e      	adds	r3, #94	@ 0x5e
 8011686:	4602      	mov	r2, r0
 8011688:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	330a      	adds	r3, #10
 801168e:	2b00      	cmp	r3, #0
 8011690:	d015      	beq.n	80116be <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	330a      	adds	r3, #10
 8011696:	4618      	mov	r0, r3
 8011698:	f7ee fe0a 	bl	80002b0 <strlen>
 801169c:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 801169e:	2b20      	cmp	r3, #32
 80116a0:	d80d      	bhi.n	80116be <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 80116a2:	8abb      	ldrh	r3, [r7, #20]
 80116a4:	226a      	movs	r2, #106	@ 0x6a
 80116a6:	fb02 f303 	mul.w	r3, r2, r3
 80116aa:	3308      	adds	r3, #8
 80116ac:	4a1f      	ldr	r2, [pc, #124]	@ (801172c <gos_taskRegister+0x320>)
 80116ae:	4413      	add	r3, r2
 80116b0:	1c9a      	adds	r2, r3, #2
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	330a      	adds	r3, #10
 80116b6:	4619      	mov	r1, r3
 80116b8:	4610      	mov	r0, r2
 80116ba:	f005 fd30 	bl	801711e <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 80116be:	8abb      	ldrh	r3, [r7, #20]
 80116c0:	4a1a      	ldr	r2, [pc, #104]	@ (801172c <gos_taskRegister+0x320>)
 80116c2:	216a      	movs	r1, #106	@ 0x6a
 80116c4:	fb01 f303 	mul.w	r3, r1, r3
 80116c8:	4413      	add	r3, r2
 80116ca:	332a      	adds	r3, #42	@ 0x2a
 80116cc:	881a      	ldrh	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
            if (taskId != NULL)
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d009      	beq.n	80116ec <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 80116d8:	8abb      	ldrh	r3, [r7, #20]
 80116da:	4a14      	ldr	r2, [pc, #80]	@ (801172c <gos_taskRegister+0x320>)
 80116dc:	216a      	movs	r1, #106	@ 0x6a
 80116de:	fb01 f303 	mul.w	r3, r1, r3
 80116e2:	4413      	add	r3, r2
 80116e4:	332a      	adds	r3, #42	@ 0x2a
 80116e6:	881a      	ldrh	r2, [r3, #0]
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 80116ec:	8abb      	ldrh	r3, [r7, #20]
 80116ee:	4a0f      	ldr	r2, [pc, #60]	@ (801172c <gos_taskRegister+0x320>)
 80116f0:	216a      	movs	r1, #106	@ 0x6a
 80116f2:	fb01 f303 	mul.w	r3, r1, r3
 80116f6:	4413      	add	r3, r2
 80116f8:	333c      	adds	r3, #60	@ 0x3c
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	8aba      	ldrh	r2, [r7, #20]
 80116fe:	490b      	ldr	r1, [pc, #44]	@ (801172c <gos_taskRegister+0x320>)
 8011700:	206a      	movs	r0, #106	@ 0x6a
 8011702:	fb00 f202 	mul.w	r2, r0, r2
 8011706:	440a      	add	r2, r1
 8011708:	3248      	adds	r2, #72	@ 0x48
 801170a:	8812      	ldrh	r2, [r2, #0]
 801170c:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 801170e:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8011710:	3240      	adds	r2, #64	@ 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8011712:	4906      	ldr	r1, [pc, #24]	@ (801172c <gos_taskRegister+0x320>)
 8011714:	206a      	movs	r0, #106	@ 0x6a
 8011716:	fb00 f303 	mul.w	r3, r0, r3
 801171a:	440b      	add	r3, r1
 801171c:	3360      	adds	r3, #96	@ 0x60
 801171e:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 8011722:	7dfb      	ldrb	r3, [r7, #23]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3718      	adds	r7, #24
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	20000788 	.word	0x20000788

08011730 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 8011738:	23ae      	movs	r3, #174	@ 0xae
 801173a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (isKernelRunning == GOS_FALSE)
 801173c:	4b3f      	ldr	r3, [pc, #252]	@ (801183c <gos_taskSleep+0x10c>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	2b49      	cmp	r3, #73	@ 0x49
 8011742:	d105      	bne.n	8011750 <gos_taskSleep+0x20>
    {
    	gos_kernelDelayMs(sleepTicks);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	b29b      	uxth	r3, r3
 8011748:	4618      	mov	r0, r3
 801174a:	f7fe fe7f 	bl	801044c <gos_kernelDelayMs>
 801174e:	e070      	b.n	8011832 <gos_taskSleep+0x102>
    }
    else
    {
        if (currentTaskIndex > 0u)
 8011750:	4b3b      	ldr	r3, [pc, #236]	@ (8011840 <gos_taskSleep+0x110>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d06c      	beq.n	8011832 <gos_taskSleep+0x102>
        {
            GOS_ATOMIC_ENTER
 8011758:	4b3a      	ldr	r3, [pc, #232]	@ (8011844 <gos_taskSleep+0x114>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d108      	bne.n	8011772 <gos_taskSleep+0x42>
 8011760:	b672      	cpsid	i
 8011762:	f3ef 8310 	mrs	r3, PRIMASK
 8011766:	4a38      	ldr	r2, [pc, #224]	@ (8011848 <gos_taskSleep+0x118>)
 8011768:	6013      	str	r3, [r2, #0]
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	f3bf 8f6f 	isb	sy
 8011772:	4b34      	ldr	r3, [pc, #208]	@ (8011844 <gos_taskSleep+0x114>)
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	3301      	adds	r3, #1
 8011778:	b2da      	uxtb	r2, r3
 801177a:	4b32      	ldr	r3, [pc, #200]	@ (8011844 <gos_taskSleep+0x114>)
 801177c:	701a      	strb	r2, [r3, #0]
 801177e:	4b33      	ldr	r3, [pc, #204]	@ (801184c <gos_taskSleep+0x11c>)
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	3301      	adds	r3, #1
 8011784:	b2da      	uxtb	r2, r3
 8011786:	4b31      	ldr	r3, [pc, #196]	@ (801184c <gos_taskSleep+0x11c>)
 8011788:	701a      	strb	r2, [r3, #0]
            {
                if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 801178a:	4b2d      	ldr	r3, [pc, #180]	@ (8011840 <gos_taskSleep+0x110>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a30      	ldr	r2, [pc, #192]	@ (8011850 <gos_taskSleep+0x120>)
 8011790:	216a      	movs	r1, #106	@ 0x6a
 8011792:	fb01 f303 	mul.w	r3, r1, r3
 8011796:	4413      	add	r3, r2
 8011798:	3304      	adds	r3, #4
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2b0a      	cmp	r3, #10
 801179e:	d121      	bne.n	80117e4 <gos_taskSleep+0xb4>
                {
                    taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 80117a0:	4b27      	ldr	r3, [pc, #156]	@ (8011840 <gos_taskSleep+0x110>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	4a2a      	ldr	r2, [pc, #168]	@ (8011850 <gos_taskSleep+0x120>)
 80117a6:	216a      	movs	r1, #106	@ 0x6a
 80117a8:	fb01 f303 	mul.w	r3, r1, r3
 80117ac:	4413      	add	r3, r2
 80117ae:	3304      	adds	r3, #4
 80117b0:	2216      	movs	r2, #22
 80117b2:	701a      	strb	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 80117b4:	4b22      	ldr	r3, [pc, #136]	@ (8011840 <gos_taskSleep+0x110>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	4a25      	ldr	r2, [pc, #148]	@ (8011850 <gos_taskSleep+0x120>)
 80117ba:	216a      	movs	r1, #106	@ 0x6a
 80117bc:	fb01 f303 	mul.w	r3, r1, r3
 80117c0:	4413      	add	r3, r2
 80117c2:	332c      	adds	r3, #44	@ 0x2c
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	601a      	str	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 80117c8:	4b1d      	ldr	r3, [pc, #116]	@ (8011840 <gos_taskSleep+0x110>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4a20      	ldr	r2, [pc, #128]	@ (8011850 <gos_taskSleep+0x120>)
 80117ce:	216a      	movs	r1, #106	@ 0x6a
 80117d0:	fb01 f303 	mul.w	r3, r1, r3
 80117d4:	4413      	add	r3, r2
 80117d6:	3330      	adds	r3, #48	@ 0x30
 80117d8:	2200      	movs	r2, #0
 80117da:	801a      	strh	r2, [r3, #0]
 80117dc:	2200      	movs	r2, #0
 80117de:	805a      	strh	r2, [r3, #2]
                    taskSleepResult = GOS_SUCCESS;
 80117e0:	2355      	movs	r3, #85	@ 0x55
 80117e2:	73fb      	strb	r3, [r7, #15]
                else
                {
                    // Nothing to do.
                }
            }
            GOS_ATOMIC_EXIT
 80117e4:	4b17      	ldr	r3, [pc, #92]	@ (8011844 <gos_taskSleep+0x114>)
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d005      	beq.n	80117f8 <gos_taskSleep+0xc8>
 80117ec:	4b15      	ldr	r3, [pc, #84]	@ (8011844 <gos_taskSleep+0x114>)
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	3b01      	subs	r3, #1
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	4b13      	ldr	r3, [pc, #76]	@ (8011844 <gos_taskSleep+0x114>)
 80117f6:	701a      	strb	r2, [r3, #0]
 80117f8:	4b12      	ldr	r3, [pc, #72]	@ (8011844 <gos_taskSleep+0x114>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d108      	bne.n	8011812 <gos_taskSleep+0xe2>
 8011800:	4b11      	ldr	r3, [pc, #68]	@ (8011848 <gos_taskSleep+0x118>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f383 8810 	msr	PRIMASK, r3
 8011808:	b662      	cpsie	i
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	f3bf 8f6f 	isb	sy
 8011812:	4b0e      	ldr	r3, [pc, #56]	@ (801184c <gos_taskSleep+0x11c>)
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <gos_taskSleep+0xf6>
 801181a:	4b0c      	ldr	r3, [pc, #48]	@ (801184c <gos_taskSleep+0x11c>)
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	3b01      	subs	r3, #1
 8011820:	b2da      	uxtb	r2, r3
 8011822:	4b0a      	ldr	r3, [pc, #40]	@ (801184c <gos_taskSleep+0x11c>)
 8011824:	701a      	strb	r2, [r3, #0]

            if (taskSleepResult == GOS_SUCCESS)
 8011826:	7bfb      	ldrb	r3, [r7, #15]
 8011828:	2b55      	cmp	r3, #85	@ 0x55
 801182a:	d102      	bne.n	8011832 <gos_taskSleep+0x102>
            {
                // Unprivileged.
                gos_kernelReschedule(GOS_UNPRIVILEGED);
 801182c:	2009      	movs	r0, #9
 801182e:	f7ff fb37 	bl	8010ea0 <gos_kernelReschedule>
        {
            // Idle task cannot sleep.
        }
    }

    return taskSleepResult;
 8011832:	7bfb      	ldrb	r3, [r7, #15]
}
 8011834:	4618      	mov	r0, r3
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	20000784 	.word	0x20000784
 8011840:	20005e4c 	.word	0x20005e4c
 8011844:	20005e47 	.word	0x20005e47
 8011848:	20005e48 	.word	0x20005e48
 801184c:	20005e45 	.word	0x20005e45
 8011850:	20000788 	.word	0x20000788

08011854 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af02      	add	r7, sp, #8
 801185a:	4603      	mov	r3, r0
 801185c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 801185e:	23ae      	movs	r3, #174	@ 0xae
 8011860:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8011862:	2300      	movs	r3, #0
 8011864:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011866:	4b56      	ldr	r3, [pc, #344]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d108      	bne.n	8011880 <gos_taskWakeup+0x2c>
 801186e:	b672      	cpsid	i
 8011870:	f3ef 8310 	mrs	r3, PRIMASK
 8011874:	4a53      	ldr	r2, [pc, #332]	@ (80119c4 <gos_taskWakeup+0x170>)
 8011876:	6013      	str	r3, [r2, #0]
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	4b4f      	ldr	r3, [pc, #316]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	3301      	adds	r3, #1
 8011886:	b2da      	uxtb	r2, r3
 8011888:	4b4d      	ldr	r3, [pc, #308]	@ (80119c0 <gos_taskWakeup+0x16c>)
 801188a:	701a      	strb	r2, [r3, #0]
 801188c:	4b4e      	ldr	r3, [pc, #312]	@ (80119c8 <gos_taskWakeup+0x174>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	3301      	adds	r3, #1
 8011892:	b2da      	uxtb	r2, r3
 8011894:	4b4c      	ldr	r3, [pc, #304]	@ (80119c8 <gos_taskWakeup+0x174>)
 8011896:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011898:	88fb      	ldrh	r3, [r7, #6]
 801189a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801189e:	d969      	bls.n	8011974 <gos_taskWakeup+0x120>
 80118a0:	88fb      	ldrh	r3, [r7, #6]
 80118a2:	f248 020f 	movw	r2, #32783	@ 0x800f
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d864      	bhi.n	8011974 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80118aa:	88fb      	ldrh	r3, [r7, #6]
 80118ac:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80118b0:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80118b2:	4b46      	ldr	r3, [pc, #280]	@ (80119cc <gos_taskWakeup+0x178>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a46      	ldr	r2, [pc, #280]	@ (80119d0 <gos_taskWakeup+0x17c>)
 80118b8:	216a      	movs	r1, #106	@ 0x6a
 80118ba:	fb01 f303 	mul.w	r3, r1, r3
 80118be:	4413      	add	r3, r2
 80118c0:	3308      	adds	r3, #8
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	b21b      	sxth	r3, r3
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	db03      	blt.n	80118d2 <gos_taskWakeup+0x7e>
            inIsr > 0)
 80118ca:	4b42      	ldr	r3, [pc, #264]	@ (80119d4 <gos_taskWakeup+0x180>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d015      	beq.n	80118fe <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 80118d2:	4a3f      	ldr	r2, [pc, #252]	@ (80119d0 <gos_taskWakeup+0x17c>)
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	216a      	movs	r1, #106	@ 0x6a
 80118d8:	fb01 f303 	mul.w	r3, r1, r3
 80118dc:	4413      	add	r3, r2
 80118de:	3304      	adds	r3, #4
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	2b16      	cmp	r3, #22
 80118e4:	d146      	bne.n	8011974 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80118e6:	4a3a      	ldr	r2, [pc, #232]	@ (80119d0 <gos_taskWakeup+0x17c>)
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	216a      	movs	r1, #106	@ 0x6a
 80118ec:	fb01 f303 	mul.w	r3, r1, r3
 80118f0:	4413      	add	r3, r2
 80118f2:	3304      	adds	r3, #4
 80118f4:	220a      	movs	r2, #10
 80118f6:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 80118f8:	2355      	movs	r3, #85	@ 0x55
 80118fa:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 80118fc:	e03a      	b.n	8011974 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80118fe:	4b30      	ldr	r3, [pc, #192]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d005      	beq.n	8011912 <gos_taskWakeup+0xbe>
 8011906:	4b2e      	ldr	r3, [pc, #184]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	3b01      	subs	r3, #1
 801190c:	b2da      	uxtb	r2, r3
 801190e:	4b2c      	ldr	r3, [pc, #176]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011910:	701a      	strb	r2, [r3, #0]
 8011912:	4b2b      	ldr	r3, [pc, #172]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d108      	bne.n	801192c <gos_taskWakeup+0xd8>
 801191a:	4b2a      	ldr	r3, [pc, #168]	@ (80119c4 <gos_taskWakeup+0x170>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f383 8810 	msr	PRIMASK, r3
 8011922:	b662      	cpsie	i
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	4b26      	ldr	r3, [pc, #152]	@ (80119c8 <gos_taskWakeup+0x174>)
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d005      	beq.n	8011940 <gos_taskWakeup+0xec>
 8011934:	4b24      	ldr	r3, [pc, #144]	@ (80119c8 <gos_taskWakeup+0x174>)
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	3b01      	subs	r3, #1
 801193a:	b2da      	uxtb	r2, r3
 801193c:	4b22      	ldr	r3, [pc, #136]	@ (80119c8 <gos_taskWakeup+0x174>)
 801193e:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011940:	4b22      	ldr	r3, [pc, #136]	@ (80119cc <gos_taskWakeup+0x178>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	226a      	movs	r2, #106	@ 0x6a
 8011946:	fb02 f303 	mul.w	r3, r2, r3
 801194a:	3308      	adds	r3, #8
 801194c:	4a20      	ldr	r2, [pc, #128]	@ (80119d0 <gos_taskWakeup+0x17c>)
 801194e:	4413      	add	r3, r2
 8011950:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011952:	68ba      	ldr	r2, [r7, #8]
 8011954:	216a      	movs	r1, #106	@ 0x6a
 8011956:	fb01 f202 	mul.w	r2, r1, r2
 801195a:	3208      	adds	r2, #8
 801195c:	491c      	ldr	r1, [pc, #112]	@ (80119d0 <gos_taskWakeup+0x17c>)
 801195e:	440a      	add	r2, r1
 8011960:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 8011962:	9201      	str	r2, [sp, #4]
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	4b1c      	ldr	r3, [pc, #112]	@ (80119d8 <gos_taskWakeup+0x184>)
 8011968:	f240 1275 	movw	r2, #373	@ 0x175
 801196c:	491b      	ldr	r1, [pc, #108]	@ (80119dc <gos_taskWakeup+0x188>)
 801196e:	2034      	movs	r0, #52	@ 0x34
 8011970:	f001 fbd0 	bl	8013114 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8011974:	4b12      	ldr	r3, [pc, #72]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d005      	beq.n	8011988 <gos_taskWakeup+0x134>
 801197c:	4b10      	ldr	r3, [pc, #64]	@ (80119c0 <gos_taskWakeup+0x16c>)
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	3b01      	subs	r3, #1
 8011982:	b2da      	uxtb	r2, r3
 8011984:	4b0e      	ldr	r3, [pc, #56]	@ (80119c0 <gos_taskWakeup+0x16c>)
 8011986:	701a      	strb	r2, [r3, #0]
 8011988:	4b0d      	ldr	r3, [pc, #52]	@ (80119c0 <gos_taskWakeup+0x16c>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d108      	bne.n	80119a2 <gos_taskWakeup+0x14e>
 8011990:	4b0c      	ldr	r3, [pc, #48]	@ (80119c4 <gos_taskWakeup+0x170>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f383 8810 	msr	PRIMASK, r3
 8011998:	b662      	cpsie	i
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	f3bf 8f6f 	isb	sy
 80119a2:	4b09      	ldr	r3, [pc, #36]	@ (80119c8 <gos_taskWakeup+0x174>)
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d005      	beq.n	80119b6 <gos_taskWakeup+0x162>
 80119aa:	4b07      	ldr	r3, [pc, #28]	@ (80119c8 <gos_taskWakeup+0x174>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	3b01      	subs	r3, #1
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	4b05      	ldr	r3, [pc, #20]	@ (80119c8 <gos_taskWakeup+0x174>)
 80119b4:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 80119b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	20005e47 	.word	0x20005e47
 80119c4:	20005e48 	.word	0x20005e48
 80119c8:	20005e45 	.word	0x20005e45
 80119cc:	20005e4c 	.word	0x20005e4c
 80119d0:	20000788 	.word	0x20000788
 80119d4:	20005e46 	.word	0x20005e46
 80119d8:	08019d40 	.word	0x08019d40
 80119dc:	0801a9f8 	.word	0x0801a9f8

080119e0 <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b086      	sub	sp, #24
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	4603      	mov	r3, r0
 80119e8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 80119ea:	23ae      	movs	r3, #174	@ 0xae
 80119ec:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 80119ee:	2300      	movs	r3, #0
 80119f0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80119f2:	4b84      	ldr	r3, [pc, #528]	@ (8011c04 <gos_taskSuspend+0x224>)
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d108      	bne.n	8011a0c <gos_taskSuspend+0x2c>
 80119fa:	b672      	cpsid	i
 80119fc:	f3ef 8310 	mrs	r3, PRIMASK
 8011a00:	4a81      	ldr	r2, [pc, #516]	@ (8011c08 <gos_taskSuspend+0x228>)
 8011a02:	6013      	str	r3, [r2, #0]
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	f3bf 8f6f 	isb	sy
 8011a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	3301      	adds	r3, #1
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	4b7b      	ldr	r3, [pc, #492]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011a16:	701a      	strb	r2, [r3, #0]
 8011a18:	4b7c      	ldr	r3, [pc, #496]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	4b7a      	ldr	r3, [pc, #488]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011a22:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011a24:	88fb      	ldrh	r3, [r7, #6]
 8011a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011a2a:	f240 80c1 	bls.w	8011bb0 <gos_taskSuspend+0x1d0>
 8011a2e:	88fb      	ldrh	r3, [r7, #6]
 8011a30:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011a34:	4293      	cmp	r3, r2
 8011a36:	f200 80bb 	bhi.w	8011bb0 <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011a3a:	88fb      	ldrh	r3, [r7, #6]
 8011a3c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8011a40:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011a42:	4b73      	ldr	r3, [pc, #460]	@ (8011c10 <gos_taskSuspend+0x230>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a73      	ldr	r2, [pc, #460]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011a48:	216a      	movs	r1, #106	@ 0x6a
 8011a4a:	fb01 f303 	mul.w	r3, r1, r3
 8011a4e:	4413      	add	r3, r2
 8011a50:	3308      	adds	r3, #8
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	b21b      	sxth	r3, r3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	db08      	blt.n	8011a6c <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8011c10 <gos_taskSuspend+0x230>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011a5e:	68ba      	ldr	r2, [r7, #8]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d003      	beq.n	8011a6c <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011a64:	4b6c      	ldr	r3, [pc, #432]	@ (8011c18 <gos_taskSuspend+0x238>)
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d064      	beq.n	8011b36 <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011a6c:	4a69      	ldr	r2, [pc, #420]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	216a      	movs	r1, #106	@ 0x6a
 8011a72:	fb01 f303 	mul.w	r3, r1, r3
 8011a76:	4413      	add	r3, r2
 8011a78:	3304      	adds	r3, #4
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2b0a      	cmp	r3, #10
 8011a7e:	d014      	beq.n	8011aaa <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8011a80:	4a64      	ldr	r2, [pc, #400]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	216a      	movs	r1, #106	@ 0x6a
 8011a86:	fb01 f303 	mul.w	r3, r1, r3
 8011a8a:	4413      	add	r3, r2
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011a90:	2b16      	cmp	r3, #22
 8011a92:	d00a      	beq.n	8011aaa <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8011a94:	4a5f      	ldr	r2, [pc, #380]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	216a      	movs	r1, #106	@ 0x6a
 8011a9a:	fb01 f303 	mul.w	r3, r1, r3
 8011a9e:	4413      	add	r3, r2
 8011aa0:	3304      	adds	r3, #4
 8011aa2:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8011aa4:	2b19      	cmp	r3, #25
 8011aa6:	f040 8082 	bne.w	8011bae <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 8011aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	216a      	movs	r1, #106	@ 0x6a
 8011ab0:	fb01 f303 	mul.w	r3, r1, r3
 8011ab4:	4413      	add	r3, r2
 8011ab6:	3304      	adds	r3, #4
 8011ab8:	7818      	ldrb	r0, [r3, #0]
 8011aba:	4a56      	ldr	r2, [pc, #344]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	216a      	movs	r1, #106	@ 0x6a
 8011ac0:	fb01 f303 	mul.w	r3, r1, r3
 8011ac4:	4413      	add	r3, r2
 8011ac6:	3305      	adds	r3, #5
 8011ac8:	4602      	mov	r2, r0
 8011aca:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 8011acc:	4a51      	ldr	r2, [pc, #324]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	216a      	movs	r1, #106	@ 0x6a
 8011ad2:	fb01 f303 	mul.w	r3, r1, r3
 8011ad6:	4413      	add	r3, r2
 8011ad8:	3304      	adds	r3, #4
 8011ada:	2205      	movs	r2, #5
 8011adc:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8011ade:	2355      	movs	r3, #85	@ 0x55
 8011ae0:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8011ae2:	4b48      	ldr	r3, [pc, #288]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d005      	beq.n	8011af6 <gos_taskSuspend+0x116>
 8011aea:	4b46      	ldr	r3, [pc, #280]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	b2da      	uxtb	r2, r3
 8011af2:	4b44      	ldr	r3, [pc, #272]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011af4:	701a      	strb	r2, [r3, #0]
 8011af6:	4b43      	ldr	r3, [pc, #268]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d108      	bne.n	8011b10 <gos_taskSuspend+0x130>
 8011afe:	4b42      	ldr	r3, [pc, #264]	@ (8011c08 <gos_taskSuspend+0x228>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f383 8810 	msr	PRIMASK, r3
 8011b06:	b662      	cpsie	i
 8011b08:	f3bf 8f4f 	dsb	sy
 8011b0c:	f3bf 8f6f 	isb	sy
 8011b10:	4b3e      	ldr	r3, [pc, #248]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d005      	beq.n	8011b24 <gos_taskSuspend+0x144>
 8011b18:	4b3c      	ldr	r3, [pc, #240]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	3b01      	subs	r3, #1
 8011b1e:	b2da      	uxtb	r2, r3
 8011b20:	4b3a      	ldr	r3, [pc, #232]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011b22:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8011b24:	4b3a      	ldr	r3, [pc, #232]	@ (8011c10 <gos_taskSuspend+0x230>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d13f      	bne.n	8011bae <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8011b2e:	2009      	movs	r0, #9
 8011b30:	f7ff f9b6 	bl	8010ea0 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011b34:	e03b      	b.n	8011bae <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8011b36:	4b33      	ldr	r3, [pc, #204]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d005      	beq.n	8011b4a <gos_taskSuspend+0x16a>
 8011b3e:	4b31      	ldr	r3, [pc, #196]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	3b01      	subs	r3, #1
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	4b2f      	ldr	r3, [pc, #188]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011b48:	701a      	strb	r2, [r3, #0]
 8011b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d108      	bne.n	8011b64 <gos_taskSuspend+0x184>
 8011b52:	4b2d      	ldr	r3, [pc, #180]	@ (8011c08 <gos_taskSuspend+0x228>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f383 8810 	msr	PRIMASK, r3
 8011b5a:	b662      	cpsie	i
 8011b5c:	f3bf 8f4f 	dsb	sy
 8011b60:	f3bf 8f6f 	isb	sy
 8011b64:	4b29      	ldr	r3, [pc, #164]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d005      	beq.n	8011b78 <gos_taskSuspend+0x198>
 8011b6c:	4b27      	ldr	r3, [pc, #156]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	4b25      	ldr	r3, [pc, #148]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011b76:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011b78:	4b25      	ldr	r3, [pc, #148]	@ (8011c10 <gos_taskSuspend+0x230>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	226a      	movs	r2, #106	@ 0x6a
 8011b7e:	fb02 f303 	mul.w	r3, r2, r3
 8011b82:	3308      	adds	r3, #8
 8011b84:	4a23      	ldr	r2, [pc, #140]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011b86:	4413      	add	r3, r2
 8011b88:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011b8a:	68ba      	ldr	r2, [r7, #8]
 8011b8c:	216a      	movs	r1, #106	@ 0x6a
 8011b8e:	fb01 f202 	mul.w	r2, r1, r2
 8011b92:	3208      	adds	r2, #8
 8011b94:	491f      	ldr	r1, [pc, #124]	@ (8011c14 <gos_taskSuspend+0x234>)
 8011b96:	440a      	add	r2, r1
 8011b98:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 8011b9a:	9201      	str	r2, [sp, #4]
 8011b9c:	9300      	str	r3, [sp, #0]
 8011b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8011c1c <gos_taskSuspend+0x23c>)
 8011ba0:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8011ba4:	491e      	ldr	r1, [pc, #120]	@ (8011c20 <gos_taskSuspend+0x240>)
 8011ba6:	2034      	movs	r0, #52	@ 0x34
 8011ba8:	f001 fab4 	bl	8013114 <gos_errorHandler>
 8011bac:	e000      	b.n	8011bb0 <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011bae:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 8011bb0:	7bfb      	ldrb	r3, [r7, #15]
 8011bb2:	2b55      	cmp	r3, #85	@ 0x55
 8011bb4:	d020      	beq.n	8011bf8 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 8011bb6:	4b13      	ldr	r3, [pc, #76]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d005      	beq.n	8011bca <gos_taskSuspend+0x1ea>
 8011bbe:	4b11      	ldr	r3, [pc, #68]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	b2da      	uxtb	r2, r3
 8011bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011bc8:	701a      	strb	r2, [r3, #0]
 8011bca:	4b0e      	ldr	r3, [pc, #56]	@ (8011c04 <gos_taskSuspend+0x224>)
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d108      	bne.n	8011be4 <gos_taskSuspend+0x204>
 8011bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8011c08 <gos_taskSuspend+0x228>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f383 8810 	msr	PRIMASK, r3
 8011bda:	b662      	cpsie	i
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
 8011be4:	4b09      	ldr	r3, [pc, #36]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d005      	beq.n	8011bf8 <gos_taskSuspend+0x218>
 8011bec:	4b07      	ldr	r3, [pc, #28]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	b2da      	uxtb	r2, r3
 8011bf4:	4b05      	ldr	r3, [pc, #20]	@ (8011c0c <gos_taskSuspend+0x22c>)
 8011bf6:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 8011bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20005e47 	.word	0x20005e47
 8011c08:	20005e48 	.word	0x20005e48
 8011c0c:	20005e45 	.word	0x20005e45
 8011c10:	20005e4c 	.word	0x20005e4c
 8011c14:	20000788 	.word	0x20000788
 8011c18:	20005e46 	.word	0x20005e46
 8011c1c:	08019d68 	.word	0x08019d68
 8011c20:	0801aa08 	.word	0x0801aa08

08011c24 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b086      	sub	sp, #24
 8011c28:	af02      	add	r7, sp, #8
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 8011c2e:	23ae      	movs	r3, #174	@ 0xae
 8011c30:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8011c32:	2300      	movs	r3, #0
 8011c34:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011c36:	4b4a      	ldr	r3, [pc, #296]	@ (8011d60 <gos_taskResume+0x13c>)
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d108      	bne.n	8011c50 <gos_taskResume+0x2c>
 8011c3e:	b672      	cpsid	i
 8011c40:	f3ef 8310 	mrs	r3, PRIMASK
 8011c44:	4a47      	ldr	r2, [pc, #284]	@ (8011d64 <gos_taskResume+0x140>)
 8011c46:	6013      	str	r3, [r2, #0]
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	4b43      	ldr	r3, [pc, #268]	@ (8011d60 <gos_taskResume+0x13c>)
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	3301      	adds	r3, #1
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	4b41      	ldr	r3, [pc, #260]	@ (8011d60 <gos_taskResume+0x13c>)
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	4b42      	ldr	r3, [pc, #264]	@ (8011d68 <gos_taskResume+0x144>)
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	3301      	adds	r3, #1
 8011c62:	b2da      	uxtb	r2, r3
 8011c64:	4b40      	ldr	r3, [pc, #256]	@ (8011d68 <gos_taskResume+0x144>)
 8011c66:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011c68:	88fb      	ldrh	r3, [r7, #6]
 8011c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011c6e:	d950      	bls.n	8011d12 <gos_taskResume+0xee>
 8011c70:	88fb      	ldrh	r3, [r7, #6]
 8011c72:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d84b      	bhi.n	8011d12 <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011c7a:	88fb      	ldrh	r3, [r7, #6]
 8011c7c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8011c80:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011c82:	4b3a      	ldr	r3, [pc, #232]	@ (8011d6c <gos_taskResume+0x148>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4a3a      	ldr	r2, [pc, #232]	@ (8011d70 <gos_taskResume+0x14c>)
 8011c88:	216a      	movs	r1, #106	@ 0x6a
 8011c8a:	fb01 f303 	mul.w	r3, r1, r3
 8011c8e:	4413      	add	r3, r2
 8011c90:	3308      	adds	r3, #8
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	b21b      	sxth	r3, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	db03      	blt.n	8011ca2 <gos_taskResume+0x7e>
            inIsr > 0)
 8011c9a:	4b36      	ldr	r3, [pc, #216]	@ (8011d74 <gos_taskResume+0x150>)
 8011c9c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d01d      	beq.n	8011cde <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8011ca2:	4a33      	ldr	r2, [pc, #204]	@ (8011d70 <gos_taskResume+0x14c>)
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	216a      	movs	r1, #106	@ 0x6a
 8011ca8:	fb01 f303 	mul.w	r3, r1, r3
 8011cac:	4413      	add	r3, r2
 8011cae:	3304      	adds	r3, #4
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	2b05      	cmp	r3, #5
 8011cb4:	d12d      	bne.n	8011d12 <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8011cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8011d70 <gos_taskResume+0x14c>)
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	216a      	movs	r1, #106	@ 0x6a
 8011cbc:	fb01 f303 	mul.w	r3, r1, r3
 8011cc0:	4413      	add	r3, r2
 8011cc2:	3305      	adds	r3, #5
 8011cc4:	7818      	ldrb	r0, [r3, #0]
 8011cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8011d70 <gos_taskResume+0x14c>)
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	216a      	movs	r1, #106	@ 0x6a
 8011ccc:	fb01 f303 	mul.w	r3, r1, r3
 8011cd0:	4413      	add	r3, r2
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8011cd8:	2355      	movs	r3, #85	@ 0x55
 8011cda:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8011cdc:	e019      	b.n	8011d12 <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011cde:	4b23      	ldr	r3, [pc, #140]	@ (8011d6c <gos_taskResume+0x148>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	226a      	movs	r2, #106	@ 0x6a
 8011ce4:	fb02 f303 	mul.w	r3, r2, r3
 8011ce8:	3308      	adds	r3, #8
 8011cea:	4a21      	ldr	r2, [pc, #132]	@ (8011d70 <gos_taskResume+0x14c>)
 8011cec:	4413      	add	r3, r2
 8011cee:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	216a      	movs	r1, #106	@ 0x6a
 8011cf4:	fb01 f202 	mul.w	r2, r1, r2
 8011cf8:	3208      	adds	r2, #8
 8011cfa:	491d      	ldr	r1, [pc, #116]	@ (8011d70 <gos_taskResume+0x14c>)
 8011cfc:	440a      	add	r2, r1
 8011cfe:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 8011d00:	9201      	str	r2, [sp, #4]
 8011d02:	9300      	str	r3, [sp, #0]
 8011d04:	4b1c      	ldr	r3, [pc, #112]	@ (8011d78 <gos_taskResume+0x154>)
 8011d06:	f240 12f1 	movw	r2, #497	@ 0x1f1
 8011d0a:	491c      	ldr	r1, [pc, #112]	@ (8011d7c <gos_taskResume+0x158>)
 8011d0c:	2034      	movs	r0, #52	@ 0x34
 8011d0e:	f001 fa01 	bl	8013114 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 8011d12:	4b13      	ldr	r3, [pc, #76]	@ (8011d60 <gos_taskResume+0x13c>)
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d005      	beq.n	8011d26 <gos_taskResume+0x102>
 8011d1a:	4b11      	ldr	r3, [pc, #68]	@ (8011d60 <gos_taskResume+0x13c>)
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	b2da      	uxtb	r2, r3
 8011d22:	4b0f      	ldr	r3, [pc, #60]	@ (8011d60 <gos_taskResume+0x13c>)
 8011d24:	701a      	strb	r2, [r3, #0]
 8011d26:	4b0e      	ldr	r3, [pc, #56]	@ (8011d60 <gos_taskResume+0x13c>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d108      	bne.n	8011d40 <gos_taskResume+0x11c>
 8011d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d64 <gos_taskResume+0x140>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f383 8810 	msr	PRIMASK, r3
 8011d36:	b662      	cpsie	i
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	4b09      	ldr	r3, [pc, #36]	@ (8011d68 <gos_taskResume+0x144>)
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d005      	beq.n	8011d54 <gos_taskResume+0x130>
 8011d48:	4b07      	ldr	r3, [pc, #28]	@ (8011d68 <gos_taskResume+0x144>)
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	4b05      	ldr	r3, [pc, #20]	@ (8011d68 <gos_taskResume+0x144>)
 8011d52:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 8011d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	20005e47 	.word	0x20005e47
 8011d64:	20005e48 	.word	0x20005e48
 8011d68:	20005e45 	.word	0x20005e45
 8011d6c:	20005e4c 	.word	0x20005e4c
 8011d70:	20000788 	.word	0x20000788
 8011d74:	20005e46 	.word	0x20005e46
 8011d78:	08019d90 	.word	0x08019d90
 8011d7c:	0801aa18 	.word	0x0801aa18

08011d80 <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af02      	add	r7, sp, #8
 8011d86:	4603      	mov	r3, r0
 8011d88:	6039      	str	r1, [r7, #0]
 8011d8a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 8011d8c:	23ae      	movs	r3, #174	@ 0xae
 8011d8e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8011d90:	2300      	movs	r3, #0
 8011d92:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011d94:	4b7b      	ldr	r3, [pc, #492]	@ (8011f84 <gos_taskBlock+0x204>)
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d108      	bne.n	8011dae <gos_taskBlock+0x2e>
 8011d9c:	b672      	cpsid	i
 8011d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8011da2:	4a79      	ldr	r2, [pc, #484]	@ (8011f88 <gos_taskBlock+0x208>)
 8011da4:	6013      	str	r3, [r2, #0]
 8011da6:	f3bf 8f4f 	dsb	sy
 8011daa:	f3bf 8f6f 	isb	sy
 8011dae:	4b75      	ldr	r3, [pc, #468]	@ (8011f84 <gos_taskBlock+0x204>)
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	3301      	adds	r3, #1
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	4b73      	ldr	r3, [pc, #460]	@ (8011f84 <gos_taskBlock+0x204>)
 8011db8:	701a      	strb	r2, [r3, #0]
 8011dba:	4b74      	ldr	r3, [pc, #464]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	4b72      	ldr	r3, [pc, #456]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011dc4:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011dc6:	88fb      	ldrh	r3, [r7, #6]
 8011dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011dcc:	f240 80b0 	bls.w	8011f30 <gos_taskBlock+0x1b0>
 8011dd0:	88fb      	ldrh	r3, [r7, #6]
 8011dd2:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	f200 80aa 	bhi.w	8011f30 <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011ddc:	88fb      	ldrh	r3, [r7, #6]
 8011dde:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8011de2:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011de4:	4b6a      	ldr	r3, [pc, #424]	@ (8011f90 <gos_taskBlock+0x210>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a6a      	ldr	r2, [pc, #424]	@ (8011f94 <gos_taskBlock+0x214>)
 8011dea:	216a      	movs	r1, #106	@ 0x6a
 8011dec:	fb01 f303 	mul.w	r3, r1, r3
 8011df0:	4413      	add	r3, r2
 8011df2:	3308      	adds	r3, #8
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	b21b      	sxth	r3, r3
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	db08      	blt.n	8011e0e <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011dfc:	4b64      	ldr	r3, [pc, #400]	@ (8011f90 <gos_taskBlock+0x210>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d003      	beq.n	8011e0e <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011e06:	4b64      	ldr	r3, [pc, #400]	@ (8011f98 <gos_taskBlock+0x218>)
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d053      	beq.n	8011eb6 <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8011e0e:	4a61      	ldr	r2, [pc, #388]	@ (8011f94 <gos_taskBlock+0x214>)
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	216a      	movs	r1, #106	@ 0x6a
 8011e14:	fb01 f303 	mul.w	r3, r1, r3
 8011e18:	4413      	add	r3, r2
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2b0a      	cmp	r3, #10
 8011e20:	f040 8085 	bne.w	8011f2e <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 8011e24:	4a5b      	ldr	r2, [pc, #364]	@ (8011f94 <gos_taskBlock+0x214>)
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	216a      	movs	r1, #106	@ 0x6a
 8011e2a:	fb01 f303 	mul.w	r3, r1, r3
 8011e2e:	4413      	add	r3, r2
 8011e30:	3304      	adds	r3, #4
 8011e32:	2219      	movs	r2, #25
 8011e34:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 8011e36:	4a57      	ldr	r2, [pc, #348]	@ (8011f94 <gos_taskBlock+0x214>)
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	216a      	movs	r1, #106	@ 0x6a
 8011e3c:	fb01 f303 	mul.w	r3, r1, r3
 8011e40:	4413      	add	r3, r2
 8011e42:	3334      	adds	r3, #52	@ 0x34
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 8011e48:	4a52      	ldr	r2, [pc, #328]	@ (8011f94 <gos_taskBlock+0x214>)
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	216a      	movs	r1, #106	@ 0x6a
 8011e4e:	fb01 f303 	mul.w	r3, r1, r3
 8011e52:	4413      	add	r3, r2
 8011e54:	3338      	adds	r3, #56	@ 0x38
 8011e56:	2200      	movs	r2, #0
 8011e58:	801a      	strh	r2, [r3, #0]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 8011e5e:	2355      	movs	r3, #85	@ 0x55
 8011e60:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8011e62:	4b48      	ldr	r3, [pc, #288]	@ (8011f84 <gos_taskBlock+0x204>)
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d005      	beq.n	8011e76 <gos_taskBlock+0xf6>
 8011e6a:	4b46      	ldr	r3, [pc, #280]	@ (8011f84 <gos_taskBlock+0x204>)
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	b2da      	uxtb	r2, r3
 8011e72:	4b44      	ldr	r3, [pc, #272]	@ (8011f84 <gos_taskBlock+0x204>)
 8011e74:	701a      	strb	r2, [r3, #0]
 8011e76:	4b43      	ldr	r3, [pc, #268]	@ (8011f84 <gos_taskBlock+0x204>)
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d108      	bne.n	8011e90 <gos_taskBlock+0x110>
 8011e7e:	4b42      	ldr	r3, [pc, #264]	@ (8011f88 <gos_taskBlock+0x208>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f383 8810 	msr	PRIMASK, r3
 8011e86:	b662      	cpsie	i
 8011e88:	f3bf 8f4f 	dsb	sy
 8011e8c:	f3bf 8f6f 	isb	sy
 8011e90:	4b3e      	ldr	r3, [pc, #248]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d005      	beq.n	8011ea4 <gos_taskBlock+0x124>
 8011e98:	4b3c      	ldr	r3, [pc, #240]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	3b01      	subs	r3, #1
 8011e9e:	b2da      	uxtb	r2, r3
 8011ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011ea2:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8011ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8011f90 <gos_taskBlock+0x210>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d13f      	bne.n	8011f2e <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8011eae:	2009      	movs	r0, #9
 8011eb0:	f7fe fff6 	bl	8010ea0 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8011eb4:	e03b      	b.n	8011f2e <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8011eb6:	4b33      	ldr	r3, [pc, #204]	@ (8011f84 <gos_taskBlock+0x204>)
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <gos_taskBlock+0x14a>
 8011ebe:	4b31      	ldr	r3, [pc, #196]	@ (8011f84 <gos_taskBlock+0x204>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	b2da      	uxtb	r2, r3
 8011ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8011f84 <gos_taskBlock+0x204>)
 8011ec8:	701a      	strb	r2, [r3, #0]
 8011eca:	4b2e      	ldr	r3, [pc, #184]	@ (8011f84 <gos_taskBlock+0x204>)
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d108      	bne.n	8011ee4 <gos_taskBlock+0x164>
 8011ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8011f88 <gos_taskBlock+0x208>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f383 8810 	msr	PRIMASK, r3
 8011eda:	b662      	cpsie	i
 8011edc:	f3bf 8f4f 	dsb	sy
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	4b29      	ldr	r3, [pc, #164]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d005      	beq.n	8011ef8 <gos_taskBlock+0x178>
 8011eec:	4b27      	ldr	r3, [pc, #156]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	4b25      	ldr	r3, [pc, #148]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011ef6:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011ef8:	4b25      	ldr	r3, [pc, #148]	@ (8011f90 <gos_taskBlock+0x210>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	226a      	movs	r2, #106	@ 0x6a
 8011efe:	fb02 f303 	mul.w	r3, r2, r3
 8011f02:	3308      	adds	r3, #8
 8011f04:	4a23      	ldr	r2, [pc, #140]	@ (8011f94 <gos_taskBlock+0x214>)
 8011f06:	4413      	add	r3, r2
 8011f08:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011f0a:	68ba      	ldr	r2, [r7, #8]
 8011f0c:	216a      	movs	r1, #106	@ 0x6a
 8011f0e:	fb01 f202 	mul.w	r2, r1, r2
 8011f12:	3208      	adds	r2, #8
 8011f14:	491f      	ldr	r1, [pc, #124]	@ (8011f94 <gos_taskBlock+0x214>)
 8011f16:	440a      	add	r2, r1
 8011f18:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 8011f1a:	9201      	str	r2, [sp, #4]
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8011f9c <gos_taskBlock+0x21c>)
 8011f20:	f240 2235 	movw	r2, #565	@ 0x235
 8011f24:	491e      	ldr	r1, [pc, #120]	@ (8011fa0 <gos_taskBlock+0x220>)
 8011f26:	2034      	movs	r0, #52	@ 0x34
 8011f28:	f001 f8f4 	bl	8013114 <gos_errorHandler>
 8011f2c:	e000      	b.n	8011f30 <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8011f2e:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 8011f30:	7bfb      	ldrb	r3, [r7, #15]
 8011f32:	2b55      	cmp	r3, #85	@ 0x55
 8011f34:	d020      	beq.n	8011f78 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 8011f36:	4b13      	ldr	r3, [pc, #76]	@ (8011f84 <gos_taskBlock+0x204>)
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d005      	beq.n	8011f4a <gos_taskBlock+0x1ca>
 8011f3e:	4b11      	ldr	r3, [pc, #68]	@ (8011f84 <gos_taskBlock+0x204>)
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	3b01      	subs	r3, #1
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	4b0f      	ldr	r3, [pc, #60]	@ (8011f84 <gos_taskBlock+0x204>)
 8011f48:	701a      	strb	r2, [r3, #0]
 8011f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8011f84 <gos_taskBlock+0x204>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d108      	bne.n	8011f64 <gos_taskBlock+0x1e4>
 8011f52:	4b0d      	ldr	r3, [pc, #52]	@ (8011f88 <gos_taskBlock+0x208>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	f383 8810 	msr	PRIMASK, r3
 8011f5a:	b662      	cpsie	i
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	4b09      	ldr	r3, [pc, #36]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d005      	beq.n	8011f78 <gos_taskBlock+0x1f8>
 8011f6c:	4b07      	ldr	r3, [pc, #28]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	3b01      	subs	r3, #1
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	4b05      	ldr	r3, [pc, #20]	@ (8011f8c <gos_taskBlock+0x20c>)
 8011f76:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 8011f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3710      	adds	r7, #16
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	20005e47 	.word	0x20005e47
 8011f88:	20005e48 	.word	0x20005e48
 8011f8c:	20005e45 	.word	0x20005e45
 8011f90:	20005e4c 	.word	0x20005e4c
 8011f94:	20000788 	.word	0x20000788
 8011f98:	20005e46 	.word	0x20005e46
 8011f9c:	08019db8 	.word	0x08019db8
 8011fa0:	0801aa28 	.word	0x0801aa28

08011fa4 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b086      	sub	sp, #24
 8011fa8:	af02      	add	r7, sp, #8
 8011faa:	4603      	mov	r3, r0
 8011fac:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 8011fae:	23ae      	movs	r3, #174	@ 0xae
 8011fb0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011fb6:	4b68      	ldr	r3, [pc, #416]	@ (8012158 <gos_taskUnblock+0x1b4>)
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d108      	bne.n	8011fd0 <gos_taskUnblock+0x2c>
 8011fbe:	b672      	cpsid	i
 8011fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8011fc4:	4a65      	ldr	r2, [pc, #404]	@ (801215c <gos_taskUnblock+0x1b8>)
 8011fc6:	6013      	str	r3, [r2, #0]
 8011fc8:	f3bf 8f4f 	dsb	sy
 8011fcc:	f3bf 8f6f 	isb	sy
 8011fd0:	4b61      	ldr	r3, [pc, #388]	@ (8012158 <gos_taskUnblock+0x1b4>)
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	b2da      	uxtb	r2, r3
 8011fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8012158 <gos_taskUnblock+0x1b4>)
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	4b60      	ldr	r3, [pc, #384]	@ (8012160 <gos_taskUnblock+0x1bc>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8012160 <gos_taskUnblock+0x1bc>)
 8011fe6:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011fe8:	88fb      	ldrh	r3, [r7, #6]
 8011fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fee:	f240 808d 	bls.w	801210c <gos_taskUnblock+0x168>
 8011ff2:	88fb      	ldrh	r3, [r7, #6]
 8011ff4:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	f200 8087 	bhi.w	801210c <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011ffe:	88fb      	ldrh	r3, [r7, #6]
 8012000:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012004:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8012006:	4b57      	ldr	r3, [pc, #348]	@ (8012164 <gos_taskUnblock+0x1c0>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4a57      	ldr	r2, [pc, #348]	@ (8012168 <gos_taskUnblock+0x1c4>)
 801200c:	216a      	movs	r1, #106	@ 0x6a
 801200e:	fb01 f303 	mul.w	r3, r1, r3
 8012012:	4413      	add	r3, r2
 8012014:	3308      	adds	r3, #8
 8012016:	881b      	ldrh	r3, [r3, #0]
 8012018:	b21b      	sxth	r3, r3
 801201a:	2b00      	cmp	r3, #0
 801201c:	db03      	blt.n	8012026 <gos_taskUnblock+0x82>
            inIsr > 0)
 801201e:	4b53      	ldr	r3, [pc, #332]	@ (801216c <gos_taskUnblock+0x1c8>)
 8012020:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8012022:	2b00      	cmp	r3, #0
 8012024:	d035      	beq.n	8012092 <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8012026:	4a50      	ldr	r2, [pc, #320]	@ (8012168 <gos_taskUnblock+0x1c4>)
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	216a      	movs	r1, #106	@ 0x6a
 801202c:	fb01 f303 	mul.w	r3, r1, r3
 8012030:	4413      	add	r3, r2
 8012032:	3304      	adds	r3, #4
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b19      	cmp	r3, #25
 8012038:	d10b      	bne.n	8012052 <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 801203a:	4a4b      	ldr	r2, [pc, #300]	@ (8012168 <gos_taskUnblock+0x1c4>)
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	216a      	movs	r1, #106	@ 0x6a
 8012040:	fb01 f303 	mul.w	r3, r1, r3
 8012044:	4413      	add	r3, r2
 8012046:	3304      	adds	r3, #4
 8012048:	220a      	movs	r2, #10
 801204a:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 801204c:	2355      	movs	r3, #85	@ 0x55
 801204e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8012050:	e05b      	b.n	801210a <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8012052:	4a45      	ldr	r2, [pc, #276]	@ (8012168 <gos_taskUnblock+0x1c4>)
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	216a      	movs	r1, #106	@ 0x6a
 8012058:	fb01 f303 	mul.w	r3, r1, r3
 801205c:	4413      	add	r3, r2
 801205e:	3304      	adds	r3, #4
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	2b05      	cmp	r3, #5
 8012064:	d151      	bne.n	801210a <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8012066:	4a40      	ldr	r2, [pc, #256]	@ (8012168 <gos_taskUnblock+0x1c4>)
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	216a      	movs	r1, #106	@ 0x6a
 801206c:	fb01 f303 	mul.w	r3, r1, r3
 8012070:	4413      	add	r3, r2
 8012072:	3305      	adds	r3, #5
 8012074:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8012076:	2b19      	cmp	r3, #25
 8012078:	d147      	bne.n	801210a <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 801207a:	4a3b      	ldr	r2, [pc, #236]	@ (8012168 <gos_taskUnblock+0x1c4>)
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	216a      	movs	r1, #106	@ 0x6a
 8012080:	fb01 f303 	mul.w	r3, r1, r3
 8012084:	4413      	add	r3, r2
 8012086:	3305      	adds	r3, #5
 8012088:	220a      	movs	r2, #10
 801208a:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 801208c:	2355      	movs	r3, #85	@ 0x55
 801208e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8012090:	e03b      	b.n	801210a <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8012092:	4b31      	ldr	r3, [pc, #196]	@ (8012158 <gos_taskUnblock+0x1b4>)
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d005      	beq.n	80120a6 <gos_taskUnblock+0x102>
 801209a:	4b2f      	ldr	r3, [pc, #188]	@ (8012158 <gos_taskUnblock+0x1b4>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	3b01      	subs	r3, #1
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	4b2d      	ldr	r3, [pc, #180]	@ (8012158 <gos_taskUnblock+0x1b4>)
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	4b2c      	ldr	r3, [pc, #176]	@ (8012158 <gos_taskUnblock+0x1b4>)
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d108      	bne.n	80120c0 <gos_taskUnblock+0x11c>
 80120ae:	4b2b      	ldr	r3, [pc, #172]	@ (801215c <gos_taskUnblock+0x1b8>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f383 8810 	msr	PRIMASK, r3
 80120b6:	b662      	cpsie	i
 80120b8:	f3bf 8f4f 	dsb	sy
 80120bc:	f3bf 8f6f 	isb	sy
 80120c0:	4b27      	ldr	r3, [pc, #156]	@ (8012160 <gos_taskUnblock+0x1bc>)
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d005      	beq.n	80120d4 <gos_taskUnblock+0x130>
 80120c8:	4b25      	ldr	r3, [pc, #148]	@ (8012160 <gos_taskUnblock+0x1bc>)
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	3b01      	subs	r3, #1
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	4b23      	ldr	r3, [pc, #140]	@ (8012160 <gos_taskUnblock+0x1bc>)
 80120d2:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80120d4:	4b23      	ldr	r3, [pc, #140]	@ (8012164 <gos_taskUnblock+0x1c0>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	226a      	movs	r2, #106	@ 0x6a
 80120da:	fb02 f303 	mul.w	r3, r2, r3
 80120de:	3308      	adds	r3, #8
 80120e0:	4a21      	ldr	r2, [pc, #132]	@ (8012168 <gos_taskUnblock+0x1c4>)
 80120e2:	4413      	add	r3, r2
 80120e4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80120e6:	68ba      	ldr	r2, [r7, #8]
 80120e8:	216a      	movs	r1, #106	@ 0x6a
 80120ea:	fb01 f202 	mul.w	r2, r1, r2
 80120ee:	3208      	adds	r2, #8
 80120f0:	491d      	ldr	r1, [pc, #116]	@ (8012168 <gos_taskUnblock+0x1c4>)
 80120f2:	440a      	add	r2, r1
 80120f4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 80120f6:	9201      	str	r2, [sp, #4]
 80120f8:	9300      	str	r3, [sp, #0]
 80120fa:	4b1d      	ldr	r3, [pc, #116]	@ (8012170 <gos_taskUnblock+0x1cc>)
 80120fc:	f240 2276 	movw	r2, #630	@ 0x276
 8012100:	491c      	ldr	r1, [pc, #112]	@ (8012174 <gos_taskUnblock+0x1d0>)
 8012102:	2034      	movs	r0, #52	@ 0x34
 8012104:	f001 f806 	bl	8013114 <gos_errorHandler>
 8012108:	e000      	b.n	801210c <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 801210a:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 801210c:	4b12      	ldr	r3, [pc, #72]	@ (8012158 <gos_taskUnblock+0x1b4>)
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d005      	beq.n	8012120 <gos_taskUnblock+0x17c>
 8012114:	4b10      	ldr	r3, [pc, #64]	@ (8012158 <gos_taskUnblock+0x1b4>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	3b01      	subs	r3, #1
 801211a:	b2da      	uxtb	r2, r3
 801211c:	4b0e      	ldr	r3, [pc, #56]	@ (8012158 <gos_taskUnblock+0x1b4>)
 801211e:	701a      	strb	r2, [r3, #0]
 8012120:	4b0d      	ldr	r3, [pc, #52]	@ (8012158 <gos_taskUnblock+0x1b4>)
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d108      	bne.n	801213a <gos_taskUnblock+0x196>
 8012128:	4b0c      	ldr	r3, [pc, #48]	@ (801215c <gos_taskUnblock+0x1b8>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f383 8810 	msr	PRIMASK, r3
 8012130:	b662      	cpsie	i
 8012132:	f3bf 8f4f 	dsb	sy
 8012136:	f3bf 8f6f 	isb	sy
 801213a:	4b09      	ldr	r3, [pc, #36]	@ (8012160 <gos_taskUnblock+0x1bc>)
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d005      	beq.n	801214e <gos_taskUnblock+0x1aa>
 8012142:	4b07      	ldr	r3, [pc, #28]	@ (8012160 <gos_taskUnblock+0x1bc>)
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	3b01      	subs	r3, #1
 8012148:	b2da      	uxtb	r2, r3
 801214a:	4b05      	ldr	r3, [pc, #20]	@ (8012160 <gos_taskUnblock+0x1bc>)
 801214c:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 801214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012150:	4618      	mov	r0, r3
 8012152:	3710      	adds	r7, #16
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	20005e47 	.word	0x20005e47
 801215c:	20005e48 	.word	0x20005e48
 8012160:	20005e45 	.word	0x20005e45
 8012164:	20005e4c 	.word	0x20005e4c
 8012168:	20000788 	.word	0x20000788
 801216c:	20005e46 	.word	0x20005e46
 8012170:	08019de0 	.word	0x08019de0
 8012174:	0801aa38 	.word	0x0801aa38

08012178 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	af02      	add	r7, sp, #8
 801217e:	4603      	mov	r3, r0
 8012180:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 8012182:	23ae      	movs	r3, #174	@ 0xae
 8012184:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8012186:	2300      	movs	r3, #0
 8012188:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 801218a:	4b84      	ldr	r3, [pc, #528]	@ (801239c <gos_taskDelete+0x224>)
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d108      	bne.n	80121a4 <gos_taskDelete+0x2c>
 8012192:	b672      	cpsid	i
 8012194:	f3ef 8310 	mrs	r3, PRIMASK
 8012198:	4a81      	ldr	r2, [pc, #516]	@ (80123a0 <gos_taskDelete+0x228>)
 801219a:	6013      	str	r3, [r2, #0]
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	f3bf 8f6f 	isb	sy
 80121a4:	4b7d      	ldr	r3, [pc, #500]	@ (801239c <gos_taskDelete+0x224>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	3301      	adds	r3, #1
 80121aa:	b2da      	uxtb	r2, r3
 80121ac:	4b7b      	ldr	r3, [pc, #492]	@ (801239c <gos_taskDelete+0x224>)
 80121ae:	701a      	strb	r2, [r3, #0]
 80121b0:	4b7c      	ldr	r3, [pc, #496]	@ (80123a4 <gos_taskDelete+0x22c>)
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	3301      	adds	r3, #1
 80121b6:	b2da      	uxtb	r2, r3
 80121b8:	4b7a      	ldr	r3, [pc, #488]	@ (80123a4 <gos_taskDelete+0x22c>)
 80121ba:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80121bc:	88fb      	ldrh	r3, [r7, #6]
 80121be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80121c2:	f240 80b9 	bls.w	8012338 <gos_taskDelete+0x1c0>
 80121c6:	88fb      	ldrh	r3, [r7, #6]
 80121c8:	f248 020f 	movw	r2, #32783	@ 0x800f
 80121cc:	4293      	cmp	r3, r2
 80121ce:	f200 80b3 	bhi.w	8012338 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80121d2:	88fb      	ldrh	r3, [r7, #6]
 80121d4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80121d8:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80121da:	4b73      	ldr	r3, [pc, #460]	@ (80123a8 <gos_taskDelete+0x230>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	4a73      	ldr	r2, [pc, #460]	@ (80123ac <gos_taskDelete+0x234>)
 80121e0:	216a      	movs	r1, #106	@ 0x6a
 80121e2:	fb01 f303 	mul.w	r3, r1, r3
 80121e6:	4413      	add	r3, r2
 80121e8:	3308      	adds	r3, #8
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	b21b      	sxth	r3, r3
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	db08      	blt.n	8012204 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80121f2:	4b6d      	ldr	r3, [pc, #436]	@ (80123a8 <gos_taskDelete+0x230>)
 80121f4:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80121f6:	68ba      	ldr	r2, [r7, #8]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d003      	beq.n	8012204 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80121fc:	4b6c      	ldr	r3, [pc, #432]	@ (80123b0 <gos_taskDelete+0x238>)
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d05e      	beq.n	80122c2 <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8012204:	4a69      	ldr	r2, [pc, #420]	@ (80123ac <gos_taskDelete+0x234>)
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	216a      	movs	r1, #106	@ 0x6a
 801220a:	fb01 f303 	mul.w	r3, r1, r3
 801220e:	4413      	add	r3, r2
 8012210:	3304      	adds	r3, #4
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	2b0d      	cmp	r3, #13
 8012216:	f000 808f 	beq.w	8012338 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 801221a:	4a64      	ldr	r2, [pc, #400]	@ (80123ac <gos_taskDelete+0x234>)
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	216a      	movs	r1, #106	@ 0x6a
 8012220:	fb01 f303 	mul.w	r3, r1, r3
 8012224:	4413      	add	r3, r2
 8012226:	3304      	adds	r3, #4
 8012228:	220d      	movs	r2, #13
 801222a:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 801222c:	2355      	movs	r3, #85	@ 0x55
 801222e:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 8012230:	4b5d      	ldr	r3, [pc, #372]	@ (80123a8 <gos_taskDelete+0x230>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4a5d      	ldr	r2, [pc, #372]	@ (80123ac <gos_taskDelete+0x234>)
 8012236:	216a      	movs	r1, #106	@ 0x6a
 8012238:	fb01 f303 	mul.w	r3, r1, r3
 801223c:	4413      	add	r3, r2
 801223e:	3308      	adds	r3, #8
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012246:	2b00      	cmp	r3, #0
 8012248:	d133      	bne.n	80122b2 <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 801224a:	4b57      	ldr	r3, [pc, #348]	@ (80123a8 <gos_taskDelete+0x230>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	4a57      	ldr	r2, [pc, #348]	@ (80123ac <gos_taskDelete+0x234>)
 8012250:	216a      	movs	r1, #106	@ 0x6a
 8012252:	fb01 f303 	mul.w	r3, r1, r3
 8012256:	4413      	add	r3, r2
 8012258:	3308      	adds	r3, #8
 801225a:	881a      	ldrh	r2, [r3, #0]
 801225c:	4b52      	ldr	r3, [pc, #328]	@ (80123a8 <gos_taskDelete+0x230>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012264:	b290      	uxth	r0, r2
 8012266:	4a51      	ldr	r2, [pc, #324]	@ (80123ac <gos_taskDelete+0x234>)
 8012268:	216a      	movs	r1, #106	@ 0x6a
 801226a:	fb01 f303 	mul.w	r3, r1, r3
 801226e:	4413      	add	r3, r2
 8012270:	3308      	adds	r3, #8
 8012272:	4602      	mov	r2, r0
 8012274:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8012276:	4b4f      	ldr	r3, [pc, #316]	@ (80123b4 <gos_taskDelete+0x23c>)
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	88fa      	ldrh	r2, [r7, #6]
 801227c:	4611      	mov	r1, r2
 801227e:	4618      	mov	r0, r3
 8012280:	f002 fa78 	bl	8014774 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8012284:	4b48      	ldr	r3, [pc, #288]	@ (80123a8 <gos_taskDelete+0x230>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4a48      	ldr	r2, [pc, #288]	@ (80123ac <gos_taskDelete+0x234>)
 801228a:	216a      	movs	r1, #106	@ 0x6a
 801228c:	fb01 f303 	mul.w	r3, r1, r3
 8012290:	4413      	add	r3, r2
 8012292:	3308      	adds	r3, #8
 8012294:	881a      	ldrh	r2, [r3, #0]
 8012296:	4b44      	ldr	r3, [pc, #272]	@ (80123a8 <gos_taskDelete+0x230>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801229e:	b290      	uxth	r0, r2
 80122a0:	4a42      	ldr	r2, [pc, #264]	@ (80123ac <gos_taskDelete+0x234>)
 80122a2:	216a      	movs	r1, #106	@ 0x6a
 80122a4:	fb01 f303 	mul.w	r3, r1, r3
 80122a8:	4413      	add	r3, r2
 80122aa:	3308      	adds	r3, #8
 80122ac:	4602      	mov	r2, r0
 80122ae:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80122b0:	e042      	b.n	8012338 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 80122b2:	4b40      	ldr	r3, [pc, #256]	@ (80123b4 <gos_taskDelete+0x23c>)
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	88fa      	ldrh	r2, [r7, #6]
 80122b8:	4611      	mov	r1, r2
 80122ba:	4618      	mov	r0, r3
 80122bc:	f002 fa5a 	bl	8014774 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80122c0:	e03a      	b.n	8012338 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80122c2:	4b36      	ldr	r3, [pc, #216]	@ (801239c <gos_taskDelete+0x224>)
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d005      	beq.n	80122d6 <gos_taskDelete+0x15e>
 80122ca:	4b34      	ldr	r3, [pc, #208]	@ (801239c <gos_taskDelete+0x224>)
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	3b01      	subs	r3, #1
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	4b32      	ldr	r3, [pc, #200]	@ (801239c <gos_taskDelete+0x224>)
 80122d4:	701a      	strb	r2, [r3, #0]
 80122d6:	4b31      	ldr	r3, [pc, #196]	@ (801239c <gos_taskDelete+0x224>)
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d108      	bne.n	80122f0 <gos_taskDelete+0x178>
 80122de:	4b30      	ldr	r3, [pc, #192]	@ (80123a0 <gos_taskDelete+0x228>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f383 8810 	msr	PRIMASK, r3
 80122e6:	b662      	cpsie	i
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	4b2c      	ldr	r3, [pc, #176]	@ (80123a4 <gos_taskDelete+0x22c>)
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d005      	beq.n	8012304 <gos_taskDelete+0x18c>
 80122f8:	4b2a      	ldr	r3, [pc, #168]	@ (80123a4 <gos_taskDelete+0x22c>)
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	b2da      	uxtb	r2, r3
 8012300:	4b28      	ldr	r3, [pc, #160]	@ (80123a4 <gos_taskDelete+0x22c>)
 8012302:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8012304:	4b28      	ldr	r3, [pc, #160]	@ (80123a8 <gos_taskDelete+0x230>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	226a      	movs	r2, #106	@ 0x6a
 801230a:	fb02 f303 	mul.w	r3, r2, r3
 801230e:	3308      	adds	r3, #8
 8012310:	4a26      	ldr	r2, [pc, #152]	@ (80123ac <gos_taskDelete+0x234>)
 8012312:	4413      	add	r3, r2
 8012314:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8012316:	68ba      	ldr	r2, [r7, #8]
 8012318:	216a      	movs	r1, #106	@ 0x6a
 801231a:	fb01 f202 	mul.w	r2, r1, r2
 801231e:	3208      	adds	r2, #8
 8012320:	4922      	ldr	r1, [pc, #136]	@ (80123ac <gos_taskDelete+0x234>)
 8012322:	440a      	add	r2, r1
 8012324:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 8012326:	9201      	str	r2, [sp, #4]
 8012328:	9300      	str	r3, [sp, #0]
 801232a:	4b23      	ldr	r3, [pc, #140]	@ (80123b8 <gos_taskDelete+0x240>)
 801232c:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8012330:	4922      	ldr	r1, [pc, #136]	@ (80123bc <gos_taskDelete+0x244>)
 8012332:	2034      	movs	r0, #52	@ 0x34
 8012334:	f000 feee 	bl	8013114 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8012338:	4b18      	ldr	r3, [pc, #96]	@ (801239c <gos_taskDelete+0x224>)
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d005      	beq.n	801234c <gos_taskDelete+0x1d4>
 8012340:	4b16      	ldr	r3, [pc, #88]	@ (801239c <gos_taskDelete+0x224>)
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	3b01      	subs	r3, #1
 8012346:	b2da      	uxtb	r2, r3
 8012348:	4b14      	ldr	r3, [pc, #80]	@ (801239c <gos_taskDelete+0x224>)
 801234a:	701a      	strb	r2, [r3, #0]
 801234c:	4b13      	ldr	r3, [pc, #76]	@ (801239c <gos_taskDelete+0x224>)
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d108      	bne.n	8012366 <gos_taskDelete+0x1ee>
 8012354:	4b12      	ldr	r3, [pc, #72]	@ (80123a0 <gos_taskDelete+0x228>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	f383 8810 	msr	PRIMASK, r3
 801235c:	b662      	cpsie	i
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	4b0f      	ldr	r3, [pc, #60]	@ (80123a4 <gos_taskDelete+0x22c>)
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d005      	beq.n	801237a <gos_taskDelete+0x202>
 801236e:	4b0d      	ldr	r3, [pc, #52]	@ (80123a4 <gos_taskDelete+0x22c>)
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	3b01      	subs	r3, #1
 8012374:	b2da      	uxtb	r2, r3
 8012376:	4b0b      	ldr	r3, [pc, #44]	@ (80123a4 <gos_taskDelete+0x22c>)
 8012378:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 801237a:	7bfb      	ldrb	r3, [r7, #15]
 801237c:	2b55      	cmp	r3, #85	@ 0x55
 801237e:	d107      	bne.n	8012390 <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 8012380:	4b09      	ldr	r3, [pc, #36]	@ (80123a8 <gos_taskDelete+0x230>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68ba      	ldr	r2, [r7, #8]
 8012386:	429a      	cmp	r2, r3
 8012388:	d102      	bne.n	8012390 <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 801238a:	2009      	movs	r0, #9
 801238c:	f7fe fd88 	bl	8010ea0 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 8012390:	7bfb      	ldrb	r3, [r7, #15]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	20005e47 	.word	0x20005e47
 80123a0:	20005e48 	.word	0x20005e48
 80123a4:	20005e45 	.word	0x20005e45
 80123a8:	20005e4c 	.word	0x20005e4c
 80123ac:	20000788 	.word	0x20000788
 80123b0:	20005e46 	.word	0x20005e46
 80123b4:	20005e74 	.word	0x20005e74
 80123b8:	08019e08 	.word	0x08019e08
 80123bc:	0801aa48 	.word	0x0801aa48

080123c0 <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b086      	sub	sp, #24
 80123c4:	af02      	add	r7, sp, #8
 80123c6:	4603      	mov	r3, r0
 80123c8:	460a      	mov	r2, r1
 80123ca:	80fb      	strh	r3, [r7, #6]
 80123cc:	4613      	mov	r3, r2
 80123ce:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80123d0:	23ae      	movs	r3, #174	@ 0xae
 80123d2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80123d4:	2300      	movs	r3, #0
 80123d6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80123d8:	4b53      	ldr	r3, [pc, #332]	@ (8012528 <gos_taskSetPriority+0x168>)
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d108      	bne.n	80123f2 <gos_taskSetPriority+0x32>
 80123e0:	b672      	cpsid	i
 80123e2:	f3ef 8310 	mrs	r3, PRIMASK
 80123e6:	4a51      	ldr	r2, [pc, #324]	@ (801252c <gos_taskSetPriority+0x16c>)
 80123e8:	6013      	str	r3, [r2, #0]
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	f3bf 8f6f 	isb	sy
 80123f2:	4b4d      	ldr	r3, [pc, #308]	@ (8012528 <gos_taskSetPriority+0x168>)
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	3301      	adds	r3, #1
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	4b4b      	ldr	r3, [pc, #300]	@ (8012528 <gos_taskSetPriority+0x168>)
 80123fc:	701a      	strb	r2, [r3, #0]
 80123fe:	4b4c      	ldr	r3, [pc, #304]	@ (8012530 <gos_taskSetPriority+0x170>)
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	3301      	adds	r3, #1
 8012404:	b2da      	uxtb	r2, r3
 8012406:	4b4a      	ldr	r3, [pc, #296]	@ (8012530 <gos_taskSetPriority+0x170>)
 8012408:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 801240a:	88fb      	ldrh	r3, [r7, #6]
 801240c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012410:	d963      	bls.n	80124da <gos_taskSetPriority+0x11a>
 8012412:	88fb      	ldrh	r3, [r7, #6]
 8012414:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012418:	4293      	cmp	r3, r2
 801241a:	d85e      	bhi.n	80124da <gos_taskSetPriority+0x11a>
 801241c:	797b      	ldrb	r3, [r7, #5]
 801241e:	2bff      	cmp	r3, #255	@ 0xff
 8012420:	d05b      	beq.n	80124da <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012422:	88fb      	ldrh	r3, [r7, #6]
 8012424:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012428:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 801242a:	4b42      	ldr	r3, [pc, #264]	@ (8012534 <gos_taskSetPriority+0x174>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	4a42      	ldr	r2, [pc, #264]	@ (8012538 <gos_taskSetPriority+0x178>)
 8012430:	216a      	movs	r1, #106	@ 0x6a
 8012432:	fb01 f303 	mul.w	r3, r1, r3
 8012436:	4413      	add	r3, r2
 8012438:	3308      	adds	r3, #8
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012440:	2b00      	cmp	r3, #0
 8012442:	d103      	bne.n	801244c <gos_taskSetPriority+0x8c>
            inIsr > 0)
 8012444:	4b3d      	ldr	r3, [pc, #244]	@ (801253c <gos_taskSetPriority+0x17c>)
 8012446:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00b      	beq.n	8012464 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 801244c:	4a3a      	ldr	r2, [pc, #232]	@ (8012538 <gos_taskSetPriority+0x178>)
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	216a      	movs	r1, #106	@ 0x6a
 8012452:	fb01 f303 	mul.w	r3, r1, r3
 8012456:	4413      	add	r3, r2
 8012458:	3306      	adds	r3, #6
 801245a:	797a      	ldrb	r2, [r7, #5]
 801245c:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 801245e:	2355      	movs	r3, #85	@ 0x55
 8012460:	73fb      	strb	r3, [r7, #15]
 8012462:	e03a      	b.n	80124da <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8012464:	4b30      	ldr	r3, [pc, #192]	@ (8012528 <gos_taskSetPriority+0x168>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d005      	beq.n	8012478 <gos_taskSetPriority+0xb8>
 801246c:	4b2e      	ldr	r3, [pc, #184]	@ (8012528 <gos_taskSetPriority+0x168>)
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	3b01      	subs	r3, #1
 8012472:	b2da      	uxtb	r2, r3
 8012474:	4b2c      	ldr	r3, [pc, #176]	@ (8012528 <gos_taskSetPriority+0x168>)
 8012476:	701a      	strb	r2, [r3, #0]
 8012478:	4b2b      	ldr	r3, [pc, #172]	@ (8012528 <gos_taskSetPriority+0x168>)
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d108      	bne.n	8012492 <gos_taskSetPriority+0xd2>
 8012480:	4b2a      	ldr	r3, [pc, #168]	@ (801252c <gos_taskSetPriority+0x16c>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f383 8810 	msr	PRIMASK, r3
 8012488:	b662      	cpsie	i
 801248a:	f3bf 8f4f 	dsb	sy
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	4b27      	ldr	r3, [pc, #156]	@ (8012530 <gos_taskSetPriority+0x170>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d005      	beq.n	80124a6 <gos_taskSetPriority+0xe6>
 801249a:	4b25      	ldr	r3, [pc, #148]	@ (8012530 <gos_taskSetPriority+0x170>)
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	3b01      	subs	r3, #1
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	4b23      	ldr	r3, [pc, #140]	@ (8012530 <gos_taskSetPriority+0x170>)
 80124a4:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80124a6:	4b23      	ldr	r3, [pc, #140]	@ (8012534 <gos_taskSetPriority+0x174>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	226a      	movs	r2, #106	@ 0x6a
 80124ac:	fb02 f303 	mul.w	r3, r2, r3
 80124b0:	3308      	adds	r3, #8
 80124b2:	4a21      	ldr	r2, [pc, #132]	@ (8012538 <gos_taskSetPriority+0x178>)
 80124b4:	4413      	add	r3, r2
 80124b6:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80124b8:	68ba      	ldr	r2, [r7, #8]
 80124ba:	216a      	movs	r1, #106	@ 0x6a
 80124bc:	fb01 f202 	mul.w	r2, r1, r2
 80124c0:	3208      	adds	r2, #8
 80124c2:	491d      	ldr	r1, [pc, #116]	@ (8012538 <gos_taskSetPriority+0x178>)
 80124c4:	440a      	add	r2, r1
 80124c6:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 80124c8:	9201      	str	r2, [sp, #4]
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	4b1c      	ldr	r3, [pc, #112]	@ (8012540 <gos_taskSetPriority+0x180>)
 80124ce:	f44f 723d 	mov.w	r2, #756	@ 0x2f4
 80124d2:	491c      	ldr	r1, [pc, #112]	@ (8012544 <gos_taskSetPriority+0x184>)
 80124d4:	2034      	movs	r0, #52	@ 0x34
 80124d6:	f000 fe1d 	bl	8013114 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 80124da:	4b13      	ldr	r3, [pc, #76]	@ (8012528 <gos_taskSetPriority+0x168>)
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d005      	beq.n	80124ee <gos_taskSetPriority+0x12e>
 80124e2:	4b11      	ldr	r3, [pc, #68]	@ (8012528 <gos_taskSetPriority+0x168>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	3b01      	subs	r3, #1
 80124e8:	b2da      	uxtb	r2, r3
 80124ea:	4b0f      	ldr	r3, [pc, #60]	@ (8012528 <gos_taskSetPriority+0x168>)
 80124ec:	701a      	strb	r2, [r3, #0]
 80124ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012528 <gos_taskSetPriority+0x168>)
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d108      	bne.n	8012508 <gos_taskSetPriority+0x148>
 80124f6:	4b0d      	ldr	r3, [pc, #52]	@ (801252c <gos_taskSetPriority+0x16c>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f383 8810 	msr	PRIMASK, r3
 80124fe:	b662      	cpsie	i
 8012500:	f3bf 8f4f 	dsb	sy
 8012504:	f3bf 8f6f 	isb	sy
 8012508:	4b09      	ldr	r3, [pc, #36]	@ (8012530 <gos_taskSetPriority+0x170>)
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d005      	beq.n	801251c <gos_taskSetPriority+0x15c>
 8012510:	4b07      	ldr	r3, [pc, #28]	@ (8012530 <gos_taskSetPriority+0x170>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	3b01      	subs	r3, #1
 8012516:	b2da      	uxtb	r2, r3
 8012518:	4b05      	ldr	r3, [pc, #20]	@ (8012530 <gos_taskSetPriority+0x170>)
 801251a:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 801251c:	7bfb      	ldrb	r3, [r7, #15]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20005e47 	.word	0x20005e47
 801252c:	20005e48 	.word	0x20005e48
 8012530:	20005e45 	.word	0x20005e45
 8012534:	20005e4c 	.word	0x20005e4c
 8012538:	20000788 	.word	0x20000788
 801253c:	20005e46 	.word	0x20005e46
 8012540:	08019e30 	.word	0x08019e30
 8012544:	0801aa58 	.word	0x0801aa58

08012548 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b086      	sub	sp, #24
 801254c:	af02      	add	r7, sp, #8
 801254e:	4603      	mov	r3, r0
 8012550:	460a      	mov	r2, r1
 8012552:	80fb      	strh	r3, [r7, #6]
 8012554:	4613      	mov	r3, r2
 8012556:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8012558:	23ae      	movs	r3, #174	@ 0xae
 801255a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 801255c:	2300      	movs	r3, #0
 801255e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012560:	4b53      	ldr	r3, [pc, #332]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d108      	bne.n	801257a <gos_taskSetOriginalPriority+0x32>
 8012568:	b672      	cpsid	i
 801256a:	f3ef 8310 	mrs	r3, PRIMASK
 801256e:	4a51      	ldr	r2, [pc, #324]	@ (80126b4 <gos_taskSetOriginalPriority+0x16c>)
 8012570:	6013      	str	r3, [r2, #0]
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	4b4d      	ldr	r3, [pc, #308]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	3301      	adds	r3, #1
 8012580:	b2da      	uxtb	r2, r3
 8012582:	4b4b      	ldr	r3, [pc, #300]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 8012584:	701a      	strb	r2, [r3, #0]
 8012586:	4b4c      	ldr	r3, [pc, #304]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	3301      	adds	r3, #1
 801258c:	b2da      	uxtb	r2, r3
 801258e:	4b4a      	ldr	r3, [pc, #296]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 8012590:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012592:	88fb      	ldrh	r3, [r7, #6]
 8012594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012598:	d963      	bls.n	8012662 <gos_taskSetOriginalPriority+0x11a>
 801259a:	88fb      	ldrh	r3, [r7, #6]
 801259c:	f248 020f 	movw	r2, #32783	@ 0x800f
 80125a0:	4293      	cmp	r3, r2
 80125a2:	d85e      	bhi.n	8012662 <gos_taskSetOriginalPriority+0x11a>
 80125a4:	797b      	ldrb	r3, [r7, #5]
 80125a6:	2bff      	cmp	r3, #255	@ 0xff
 80125a8:	d05b      	beq.n	8012662 <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80125aa:	88fb      	ldrh	r3, [r7, #6]
 80125ac:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80125b0:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80125b2:	4b42      	ldr	r3, [pc, #264]	@ (80126bc <gos_taskSetOriginalPriority+0x174>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a42      	ldr	r2, [pc, #264]	@ (80126c0 <gos_taskSetOriginalPriority+0x178>)
 80125b8:	216a      	movs	r1, #106	@ 0x6a
 80125ba:	fb01 f303 	mul.w	r3, r1, r3
 80125be:	4413      	add	r3, r2
 80125c0:	3308      	adds	r3, #8
 80125c2:	881b      	ldrh	r3, [r3, #0]
 80125c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d103      	bne.n	80125d4 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 80125cc:	4b3d      	ldr	r3, [pc, #244]	@ (80126c4 <gos_taskSetOriginalPriority+0x17c>)
 80125ce:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d00b      	beq.n	80125ec <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 80125d4:	4a3a      	ldr	r2, [pc, #232]	@ (80126c0 <gos_taskSetOriginalPriority+0x178>)
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	216a      	movs	r1, #106	@ 0x6a
 80125da:	fb01 f303 	mul.w	r3, r1, r3
 80125de:	4413      	add	r3, r2
 80125e0:	3307      	adds	r3, #7
 80125e2:	797a      	ldrb	r2, [r7, #5]
 80125e4:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 80125e6:	2355      	movs	r3, #85	@ 0x55
 80125e8:	73fb      	strb	r3, [r7, #15]
 80125ea:	e03a      	b.n	8012662 <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 80125ec:	4b30      	ldr	r3, [pc, #192]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d005      	beq.n	8012600 <gos_taskSetOriginalPriority+0xb8>
 80125f4:	4b2e      	ldr	r3, [pc, #184]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	3b01      	subs	r3, #1
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	4b2c      	ldr	r3, [pc, #176]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 80125fe:	701a      	strb	r2, [r3, #0]
 8012600:	4b2b      	ldr	r3, [pc, #172]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d108      	bne.n	801261a <gos_taskSetOriginalPriority+0xd2>
 8012608:	4b2a      	ldr	r3, [pc, #168]	@ (80126b4 <gos_taskSetOriginalPriority+0x16c>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f383 8810 	msr	PRIMASK, r3
 8012610:	b662      	cpsie	i
 8012612:	f3bf 8f4f 	dsb	sy
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	4b27      	ldr	r3, [pc, #156]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d005      	beq.n	801262e <gos_taskSetOriginalPriority+0xe6>
 8012622:	4b25      	ldr	r3, [pc, #148]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	3b01      	subs	r3, #1
 8012628:	b2da      	uxtb	r2, r3
 801262a:	4b23      	ldr	r3, [pc, #140]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 801262c:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 801262e:	4b23      	ldr	r3, [pc, #140]	@ (80126bc <gos_taskSetOriginalPriority+0x174>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	226a      	movs	r2, #106	@ 0x6a
 8012634:	fb02 f303 	mul.w	r3, r2, r3
 8012638:	3308      	adds	r3, #8
 801263a:	4a21      	ldr	r2, [pc, #132]	@ (80126c0 <gos_taskSetOriginalPriority+0x178>)
 801263c:	4413      	add	r3, r2
 801263e:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	216a      	movs	r1, #106	@ 0x6a
 8012644:	fb01 f202 	mul.w	r2, r1, r2
 8012648:	3208      	adds	r2, #8
 801264a:	491d      	ldr	r1, [pc, #116]	@ (80126c0 <gos_taskSetOriginalPriority+0x178>)
 801264c:	440a      	add	r2, r1
 801264e:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8012650:	9201      	str	r2, [sp, #4]
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	4b1c      	ldr	r3, [pc, #112]	@ (80126c8 <gos_taskSetOriginalPriority+0x180>)
 8012656:	f240 3222 	movw	r2, #802	@ 0x322
 801265a:	491c      	ldr	r1, [pc, #112]	@ (80126cc <gos_taskSetOriginalPriority+0x184>)
 801265c:	2034      	movs	r0, #52	@ 0x34
 801265e:	f000 fd59 	bl	8013114 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8012662:	4b13      	ldr	r3, [pc, #76]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d005      	beq.n	8012676 <gos_taskSetOriginalPriority+0x12e>
 801266a:	4b11      	ldr	r3, [pc, #68]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	3b01      	subs	r3, #1
 8012670:	b2da      	uxtb	r2, r3
 8012672:	4b0f      	ldr	r3, [pc, #60]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	4b0e      	ldr	r3, [pc, #56]	@ (80126b0 <gos_taskSetOriginalPriority+0x168>)
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d108      	bne.n	8012690 <gos_taskSetOriginalPriority+0x148>
 801267e:	4b0d      	ldr	r3, [pc, #52]	@ (80126b4 <gos_taskSetOriginalPriority+0x16c>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f383 8810 	msr	PRIMASK, r3
 8012686:	b662      	cpsie	i
 8012688:	f3bf 8f4f 	dsb	sy
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	4b09      	ldr	r3, [pc, #36]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d005      	beq.n	80126a4 <gos_taskSetOriginalPriority+0x15c>
 8012698:	4b07      	ldr	r3, [pc, #28]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	3b01      	subs	r3, #1
 801269e:	b2da      	uxtb	r2, r3
 80126a0:	4b05      	ldr	r3, [pc, #20]	@ (80126b8 <gos_taskSetOriginalPriority+0x170>)
 80126a2:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 80126a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	20005e47 	.word	0x20005e47
 80126b4:	20005e48 	.word	0x20005e48
 80126b8:	20005e45 	.word	0x20005e45
 80126bc:	20005e4c 	.word	0x20005e4c
 80126c0:	20000788 	.word	0x20000788
 80126c4:	20005e46 	.word	0x20005e46
 80126c8:	08019e30 	.word	0x08019e30
 80126cc:	0801aa6c 	.word	0x0801aa6c

080126d0 <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	4603      	mov	r3, r0
 80126d8:	6039      	str	r1, [r7, #0]
 80126da:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 80126dc:	23ae      	movs	r3, #174	@ 0xae
 80126de:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80126e0:	2300      	movs	r3, #0
 80126e2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80126e4:	4b2e      	ldr	r3, [pc, #184]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d108      	bne.n	80126fe <gos_taskGetPriority+0x2e>
 80126ec:	b672      	cpsid	i
 80126ee:	f3ef 8310 	mrs	r3, PRIMASK
 80126f2:	4a2c      	ldr	r2, [pc, #176]	@ (80127a4 <gos_taskGetPriority+0xd4>)
 80126f4:	6013      	str	r3, [r2, #0]
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	f3bf 8f6f 	isb	sy
 80126fe:	4b28      	ldr	r3, [pc, #160]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	3301      	adds	r3, #1
 8012704:	b2da      	uxtb	r2, r3
 8012706:	4b26      	ldr	r3, [pc, #152]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 8012708:	701a      	strb	r2, [r3, #0]
 801270a:	4b27      	ldr	r3, [pc, #156]	@ (80127a8 <gos_taskGetPriority+0xd8>)
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	3301      	adds	r3, #1
 8012710:	b2da      	uxtb	r2, r3
 8012712:	4b25      	ldr	r3, [pc, #148]	@ (80127a8 <gos_taskGetPriority+0xd8>)
 8012714:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012716:	88fb      	ldrh	r3, [r7, #6]
 8012718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801271c:	d917      	bls.n	801274e <gos_taskGetPriority+0x7e>
 801271e:	88fb      	ldrh	r3, [r7, #6]
 8012720:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012724:	4293      	cmp	r3, r2
 8012726:	d812      	bhi.n	801274e <gos_taskGetPriority+0x7e>
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00f      	beq.n	801274e <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801272e:	88fb      	ldrh	r3, [r7, #6]
 8012730:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012734:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 8012736:	4a1d      	ldr	r2, [pc, #116]	@ (80127ac <gos_taskGetPriority+0xdc>)
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	216a      	movs	r1, #106	@ 0x6a
 801273c:	fb01 f303 	mul.w	r3, r1, r3
 8012740:	4413      	add	r3, r2
 8012742:	3306      	adds	r3, #6
 8012744:	781a      	ldrb	r2, [r3, #0]
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 801274a:	2355      	movs	r3, #85	@ 0x55
 801274c:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 801274e:	4b14      	ldr	r3, [pc, #80]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d005      	beq.n	8012762 <gos_taskGetPriority+0x92>
 8012756:	4b12      	ldr	r3, [pc, #72]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	3b01      	subs	r3, #1
 801275c:	b2da      	uxtb	r2, r3
 801275e:	4b10      	ldr	r3, [pc, #64]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 8012760:	701a      	strb	r2, [r3, #0]
 8012762:	4b0f      	ldr	r3, [pc, #60]	@ (80127a0 <gos_taskGetPriority+0xd0>)
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d108      	bne.n	801277c <gos_taskGetPriority+0xac>
 801276a:	4b0e      	ldr	r3, [pc, #56]	@ (80127a4 <gos_taskGetPriority+0xd4>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f383 8810 	msr	PRIMASK, r3
 8012772:	b662      	cpsie	i
 8012774:	f3bf 8f4f 	dsb	sy
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	4b0a      	ldr	r3, [pc, #40]	@ (80127a8 <gos_taskGetPriority+0xd8>)
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d005      	beq.n	8012790 <gos_taskGetPriority+0xc0>
 8012784:	4b08      	ldr	r3, [pc, #32]	@ (80127a8 <gos_taskGetPriority+0xd8>)
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	3b01      	subs	r3, #1
 801278a:	b2da      	uxtb	r2, r3
 801278c:	4b06      	ldr	r3, [pc, #24]	@ (80127a8 <gos_taskGetPriority+0xd8>)
 801278e:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 8012790:	7bfb      	ldrb	r3, [r7, #15]
}
 8012792:	4618      	mov	r0, r3
 8012794:	3714      	adds	r7, #20
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	20005e47 	.word	0x20005e47
 80127a4:	20005e48 	.word	0x20005e48
 80127a8:	20005e45 	.word	0x20005e45
 80127ac:	20000788 	.word	0x20000788

080127b0 <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	4603      	mov	r3, r0
 80127b8:	460a      	mov	r2, r1
 80127ba:	80fb      	strh	r3, [r7, #6]
 80127bc:	4613      	mov	r3, r2
 80127be:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 80127c0:	23ae      	movs	r3, #174	@ 0xae
 80127c2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 80127c4:	2300      	movs	r3, #0
 80127c6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80127c8:	4b31      	ldr	r3, [pc, #196]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d108      	bne.n	80127e2 <gos_taskAddPrivilege+0x32>
 80127d0:	b672      	cpsid	i
 80127d2:	f3ef 8310 	mrs	r3, PRIMASK
 80127d6:	4a2f      	ldr	r2, [pc, #188]	@ (8012894 <gos_taskAddPrivilege+0xe4>)
 80127d8:	6013      	str	r3, [r2, #0]
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	4b2b      	ldr	r3, [pc, #172]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	3301      	adds	r3, #1
 80127e8:	b2da      	uxtb	r2, r3
 80127ea:	4b29      	ldr	r3, [pc, #164]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 80127ec:	701a      	strb	r2, [r3, #0]
 80127ee:	4b2a      	ldr	r3, [pc, #168]	@ (8012898 <gos_taskAddPrivilege+0xe8>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	3301      	adds	r3, #1
 80127f4:	b2da      	uxtb	r2, r3
 80127f6:	4b28      	ldr	r3, [pc, #160]	@ (8012898 <gos_taskAddPrivilege+0xe8>)
 80127f8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80127fa:	88fb      	ldrh	r3, [r7, #6]
 80127fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012800:	d91e      	bls.n	8012840 <gos_taskAddPrivilege+0x90>
 8012802:	88fb      	ldrh	r3, [r7, #6]
 8012804:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012808:	4293      	cmp	r3, r2
 801280a:	d819      	bhi.n	8012840 <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801280c:	88fb      	ldrh	r3, [r7, #6]
 801280e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012812:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8012814:	4a21      	ldr	r2, [pc, #132]	@ (801289c <gos_taskAddPrivilege+0xec>)
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	216a      	movs	r1, #106	@ 0x6a
 801281a:	fb01 f303 	mul.w	r3, r1, r3
 801281e:	4413      	add	r3, r2
 8012820:	3308      	adds	r3, #8
 8012822:	881a      	ldrh	r2, [r3, #0]
 8012824:	88bb      	ldrh	r3, [r7, #4]
 8012826:	4313      	orrs	r3, r2
 8012828:	b298      	uxth	r0, r3
 801282a:	4a1c      	ldr	r2, [pc, #112]	@ (801289c <gos_taskAddPrivilege+0xec>)
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	216a      	movs	r1, #106	@ 0x6a
 8012830:	fb01 f303 	mul.w	r3, r1, r3
 8012834:	4413      	add	r3, r2
 8012836:	3308      	adds	r3, #8
 8012838:	4602      	mov	r2, r0
 801283a:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 801283c:	2355      	movs	r3, #85	@ 0x55
 801283e:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8012840:	4b13      	ldr	r3, [pc, #76]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d005      	beq.n	8012854 <gos_taskAddPrivilege+0xa4>
 8012848:	4b11      	ldr	r3, [pc, #68]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	3b01      	subs	r3, #1
 801284e:	b2da      	uxtb	r2, r3
 8012850:	4b0f      	ldr	r3, [pc, #60]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 8012852:	701a      	strb	r2, [r3, #0]
 8012854:	4b0e      	ldr	r3, [pc, #56]	@ (8012890 <gos_taskAddPrivilege+0xe0>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d108      	bne.n	801286e <gos_taskAddPrivilege+0xbe>
 801285c:	4b0d      	ldr	r3, [pc, #52]	@ (8012894 <gos_taskAddPrivilege+0xe4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f383 8810 	msr	PRIMASK, r3
 8012864:	b662      	cpsie	i
 8012866:	f3bf 8f4f 	dsb	sy
 801286a:	f3bf 8f6f 	isb	sy
 801286e:	4b0a      	ldr	r3, [pc, #40]	@ (8012898 <gos_taskAddPrivilege+0xe8>)
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d005      	beq.n	8012882 <gos_taskAddPrivilege+0xd2>
 8012876:	4b08      	ldr	r3, [pc, #32]	@ (8012898 <gos_taskAddPrivilege+0xe8>)
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	3b01      	subs	r3, #1
 801287c:	b2da      	uxtb	r2, r3
 801287e:	4b06      	ldr	r3, [pc, #24]	@ (8012898 <gos_taskAddPrivilege+0xe8>)
 8012880:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 8012882:	7bfb      	ldrb	r3, [r7, #15]
}
 8012884:	4618      	mov	r0, r3
 8012886:	3714      	adds	r7, #20
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr
 8012890:	20005e47 	.word	0x20005e47
 8012894:	20005e48 	.word	0x20005e48
 8012898:	20005e45 	.word	0x20005e45
 801289c:	20000788 	.word	0x20000788

080128a0 <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	4603      	mov	r3, r0
 80128a8:	460a      	mov	r2, r1
 80128aa:	80fb      	strh	r3, [r7, #6]
 80128ac:	4613      	mov	r3, r2
 80128ae:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 80128b0:	23ae      	movs	r3, #174	@ 0xae
 80128b2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 80128b4:	2300      	movs	r3, #0
 80128b6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80128b8:	4b34      	ldr	r3, [pc, #208]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d108      	bne.n	80128d2 <gos_taskRemovePrivilege+0x32>
 80128c0:	b672      	cpsid	i
 80128c2:	f3ef 8310 	mrs	r3, PRIMASK
 80128c6:	4a32      	ldr	r2, [pc, #200]	@ (8012990 <gos_taskRemovePrivilege+0xf0>)
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	f3bf 8f4f 	dsb	sy
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	4b2e      	ldr	r3, [pc, #184]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	3301      	adds	r3, #1
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	4b2c      	ldr	r3, [pc, #176]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 80128dc:	701a      	strb	r2, [r3, #0]
 80128de:	4b2d      	ldr	r3, [pc, #180]	@ (8012994 <gos_taskRemovePrivilege+0xf4>)
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	3301      	adds	r3, #1
 80128e4:	b2da      	uxtb	r2, r3
 80128e6:	4b2b      	ldr	r3, [pc, #172]	@ (8012994 <gos_taskRemovePrivilege+0xf4>)
 80128e8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80128ea:	88fb      	ldrh	r3, [r7, #6]
 80128ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80128f0:	d923      	bls.n	801293a <gos_taskRemovePrivilege+0x9a>
 80128f2:	88fb      	ldrh	r3, [r7, #6]
 80128f4:	f248 020f 	movw	r2, #32783	@ 0x800f
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d81e      	bhi.n	801293a <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80128fc:	88fb      	ldrh	r3, [r7, #6]
 80128fe:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012902:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8012904:	4a24      	ldr	r2, [pc, #144]	@ (8012998 <gos_taskRemovePrivilege+0xf8>)
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	216a      	movs	r1, #106	@ 0x6a
 801290a:	fb01 f303 	mul.w	r3, r1, r3
 801290e:	4413      	add	r3, r2
 8012910:	3308      	adds	r3, #8
 8012912:	881b      	ldrh	r3, [r3, #0]
 8012914:	b21a      	sxth	r2, r3
 8012916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801291a:	43db      	mvns	r3, r3
 801291c:	b21b      	sxth	r3, r3
 801291e:	4013      	ands	r3, r2
 8012920:	b21b      	sxth	r3, r3
 8012922:	b298      	uxth	r0, r3
 8012924:	4a1c      	ldr	r2, [pc, #112]	@ (8012998 <gos_taskRemovePrivilege+0xf8>)
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	216a      	movs	r1, #106	@ 0x6a
 801292a:	fb01 f303 	mul.w	r3, r1, r3
 801292e:	4413      	add	r3, r2
 8012930:	3308      	adds	r3, #8
 8012932:	4602      	mov	r2, r0
 8012934:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8012936:	2355      	movs	r3, #85	@ 0x55
 8012938:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 801293a:	4b14      	ldr	r3, [pc, #80]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d005      	beq.n	801294e <gos_taskRemovePrivilege+0xae>
 8012942:	4b12      	ldr	r3, [pc, #72]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	3b01      	subs	r3, #1
 8012948:	b2da      	uxtb	r2, r3
 801294a:	4b10      	ldr	r3, [pc, #64]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 801294c:	701a      	strb	r2, [r3, #0]
 801294e:	4b0f      	ldr	r3, [pc, #60]	@ (801298c <gos_taskRemovePrivilege+0xec>)
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d108      	bne.n	8012968 <gos_taskRemovePrivilege+0xc8>
 8012956:	4b0e      	ldr	r3, [pc, #56]	@ (8012990 <gos_taskRemovePrivilege+0xf0>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f383 8810 	msr	PRIMASK, r3
 801295e:	b662      	cpsie	i
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	4b0a      	ldr	r3, [pc, #40]	@ (8012994 <gos_taskRemovePrivilege+0xf4>)
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <gos_taskRemovePrivilege+0xdc>
 8012970:	4b08      	ldr	r3, [pc, #32]	@ (8012994 <gos_taskRemovePrivilege+0xf4>)
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	3b01      	subs	r3, #1
 8012976:	b2da      	uxtb	r2, r3
 8012978:	4b06      	ldr	r3, [pc, #24]	@ (8012994 <gos_taskRemovePrivilege+0xf4>)
 801297a:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 801297c:	7bfb      	ldrb	r3, [r7, #15]
}
 801297e:	4618      	mov	r0, r3
 8012980:	3714      	adds	r7, #20
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	20005e47 	.word	0x20005e47
 8012990:	20005e48 	.word	0x20005e48
 8012994:	20005e45 	.word	0x20005e45
 8012998:	20000788 	.word	0x20000788

0801299c <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 801299c:	b480      	push	{r7}
 801299e:	b085      	sub	sp, #20
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	4603      	mov	r3, r0
 80129a4:	460a      	mov	r2, r1
 80129a6:	80fb      	strh	r3, [r7, #6]
 80129a8:	4613      	mov	r3, r2
 80129aa:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 80129ac:	23ae      	movs	r3, #174	@ 0xae
 80129ae:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 80129b0:	2300      	movs	r3, #0
 80129b2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80129b4:	4b2c      	ldr	r3, [pc, #176]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d108      	bne.n	80129ce <gos_taskSetPrivileges+0x32>
 80129bc:	b672      	cpsid	i
 80129be:	f3ef 8310 	mrs	r3, PRIMASK
 80129c2:	4a2a      	ldr	r2, [pc, #168]	@ (8012a6c <gos_taskSetPrivileges+0xd0>)
 80129c4:	6013      	str	r3, [r2, #0]
 80129c6:	f3bf 8f4f 	dsb	sy
 80129ca:	f3bf 8f6f 	isb	sy
 80129ce:	4b26      	ldr	r3, [pc, #152]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	3301      	adds	r3, #1
 80129d4:	b2da      	uxtb	r2, r3
 80129d6:	4b24      	ldr	r3, [pc, #144]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 80129d8:	701a      	strb	r2, [r3, #0]
 80129da:	4b25      	ldr	r3, [pc, #148]	@ (8012a70 <gos_taskSetPrivileges+0xd4>)
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	3301      	adds	r3, #1
 80129e0:	b2da      	uxtb	r2, r3
 80129e2:	4b23      	ldr	r3, [pc, #140]	@ (8012a70 <gos_taskSetPrivileges+0xd4>)
 80129e4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80129e6:	88fb      	ldrh	r3, [r7, #6]
 80129e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80129ec:	d913      	bls.n	8012a16 <gos_taskSetPrivileges+0x7a>
 80129ee:	88fb      	ldrh	r3, [r7, #6]
 80129f0:	f248 020f 	movw	r2, #32783	@ 0x800f
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d80e      	bhi.n	8012a16 <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80129f8:	88fb      	ldrh	r3, [r7, #6]
 80129fa:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80129fe:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8012a00:	4a1c      	ldr	r2, [pc, #112]	@ (8012a74 <gos_taskSetPrivileges+0xd8>)
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	216a      	movs	r1, #106	@ 0x6a
 8012a06:	fb01 f303 	mul.w	r3, r1, r3
 8012a0a:	4413      	add	r3, r2
 8012a0c:	3308      	adds	r3, #8
 8012a0e:	88ba      	ldrh	r2, [r7, #4]
 8012a10:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8012a12:	2355      	movs	r3, #85	@ 0x55
 8012a14:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8012a16:	4b14      	ldr	r3, [pc, #80]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d005      	beq.n	8012a2a <gos_taskSetPrivileges+0x8e>
 8012a1e:	4b12      	ldr	r3, [pc, #72]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	3b01      	subs	r3, #1
 8012a24:	b2da      	uxtb	r2, r3
 8012a26:	4b10      	ldr	r3, [pc, #64]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 8012a28:	701a      	strb	r2, [r3, #0]
 8012a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8012a68 <gos_taskSetPrivileges+0xcc>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d108      	bne.n	8012a44 <gos_taskSetPrivileges+0xa8>
 8012a32:	4b0e      	ldr	r3, [pc, #56]	@ (8012a6c <gos_taskSetPrivileges+0xd0>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f383 8810 	msr	PRIMASK, r3
 8012a3a:	b662      	cpsie	i
 8012a3c:	f3bf 8f4f 	dsb	sy
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	4b0a      	ldr	r3, [pc, #40]	@ (8012a70 <gos_taskSetPrivileges+0xd4>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d005      	beq.n	8012a58 <gos_taskSetPrivileges+0xbc>
 8012a4c:	4b08      	ldr	r3, [pc, #32]	@ (8012a70 <gos_taskSetPrivileges+0xd4>)
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	3b01      	subs	r3, #1
 8012a52:	b2da      	uxtb	r2, r3
 8012a54:	4b06      	ldr	r3, [pc, #24]	@ (8012a70 <gos_taskSetPrivileges+0xd4>)
 8012a56:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8012a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3714      	adds	r7, #20
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop
 8012a68:	20005e47 	.word	0x20005e47
 8012a6c:	20005e48 	.word	0x20005e48
 8012a70:	20005e45 	.word	0x20005e45
 8012a74:	20000788 	.word	0x20000788

08012a78 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	4603      	mov	r3, r0
 8012a80:	6039      	str	r1, [r7, #0]
 8012a82:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8012a84:	23ae      	movs	r3, #174	@ 0xae
 8012a86:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d108      	bne.n	8012aa6 <gos_taskGetPrivileges+0x2e>
 8012a94:	b672      	cpsid	i
 8012a96:	f3ef 8310 	mrs	r3, PRIMASK
 8012a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8012b4c <gos_taskGetPrivileges+0xd4>)
 8012a9c:	6013      	str	r3, [r2, #0]
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	f3bf 8f6f 	isb	sy
 8012aa6:	4b28      	ldr	r3, [pc, #160]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	b2da      	uxtb	r2, r3
 8012aae:	4b26      	ldr	r3, [pc, #152]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012ab0:	701a      	strb	r2, [r3, #0]
 8012ab2:	4b27      	ldr	r3, [pc, #156]	@ (8012b50 <gos_taskGetPrivileges+0xd8>)
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	b2da      	uxtb	r2, r3
 8012aba:	4b25      	ldr	r3, [pc, #148]	@ (8012b50 <gos_taskGetPrivileges+0xd8>)
 8012abc:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012abe:	88fb      	ldrh	r3, [r7, #6]
 8012ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012ac4:	d917      	bls.n	8012af6 <gos_taskGetPrivileges+0x7e>
 8012ac6:	88fb      	ldrh	r3, [r7, #6]
 8012ac8:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d812      	bhi.n	8012af6 <gos_taskGetPrivileges+0x7e>
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d00f      	beq.n	8012af6 <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012ad6:	88fb      	ldrh	r3, [r7, #6]
 8012ad8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012adc:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8012ade:	4a1d      	ldr	r2, [pc, #116]	@ (8012b54 <gos_taskGetPrivileges+0xdc>)
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	216a      	movs	r1, #106	@ 0x6a
 8012ae4:	fb01 f303 	mul.w	r3, r1, r3
 8012ae8:	4413      	add	r3, r2
 8012aea:	3308      	adds	r3, #8
 8012aec:	881a      	ldrh	r2, [r3, #0]
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8012af2:	2355      	movs	r3, #85	@ 0x55
 8012af4:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 8012af6:	4b14      	ldr	r3, [pc, #80]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d005      	beq.n	8012b0a <gos_taskGetPrivileges+0x92>
 8012afe:	4b12      	ldr	r3, [pc, #72]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	3b01      	subs	r3, #1
 8012b04:	b2da      	uxtb	r2, r3
 8012b06:	4b10      	ldr	r3, [pc, #64]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012b08:	701a      	strb	r2, [r3, #0]
 8012b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8012b48 <gos_taskGetPrivileges+0xd0>)
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d108      	bne.n	8012b24 <gos_taskGetPrivileges+0xac>
 8012b12:	4b0e      	ldr	r3, [pc, #56]	@ (8012b4c <gos_taskGetPrivileges+0xd4>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f383 8810 	msr	PRIMASK, r3
 8012b1a:	b662      	cpsie	i
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	f3bf 8f6f 	isb	sy
 8012b24:	4b0a      	ldr	r3, [pc, #40]	@ (8012b50 <gos_taskGetPrivileges+0xd8>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d005      	beq.n	8012b38 <gos_taskGetPrivileges+0xc0>
 8012b2c:	4b08      	ldr	r3, [pc, #32]	@ (8012b50 <gos_taskGetPrivileges+0xd8>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	3b01      	subs	r3, #1
 8012b32:	b2da      	uxtb	r2, r3
 8012b34:	4b06      	ldr	r3, [pc, #24]	@ (8012b50 <gos_taskGetPrivileges+0xd8>)
 8012b36:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 8012b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3714      	adds	r7, #20
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	20005e47 	.word	0x20005e47
 8012b4c:	20005e48 	.word	0x20005e48
 8012b50:	20005e45 	.word	0x20005e45
 8012b54:	20000788 	.word	0x20000788

08012b58 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8012b60:	23ae      	movs	r3, #174	@ 0xae
 8012b62:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012b64:	4b26      	ldr	r3, [pc, #152]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d108      	bne.n	8012b7e <gos_taskGetCurrentId+0x26>
 8012b6c:	b672      	cpsid	i
 8012b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8012b72:	4a24      	ldr	r2, [pc, #144]	@ (8012c04 <gos_taskGetCurrentId+0xac>)
 8012b74:	6013      	str	r3, [r2, #0]
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	f3bf 8f6f 	isb	sy
 8012b7e:	4b20      	ldr	r3, [pc, #128]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	3301      	adds	r3, #1
 8012b84:	b2da      	uxtb	r2, r3
 8012b86:	4b1e      	ldr	r3, [pc, #120]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012b88:	701a      	strb	r2, [r3, #0]
 8012b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8012c08 <gos_taskGetCurrentId+0xb0>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	4b1d      	ldr	r3, [pc, #116]	@ (8012c08 <gos_taskGetCurrentId+0xb0>)
 8012b94:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d009      	beq.n	8012bb0 <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8012b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8012c0c <gos_taskGetCurrentId+0xb4>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8012bac:	2355      	movs	r3, #85	@ 0x55
 8012bae:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 8012bb0:	4b13      	ldr	r3, [pc, #76]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d005      	beq.n	8012bc4 <gos_taskGetCurrentId+0x6c>
 8012bb8:	4b11      	ldr	r3, [pc, #68]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	b2da      	uxtb	r2, r3
 8012bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012bc2:	701a      	strb	r2, [r3, #0]
 8012bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8012c00 <gos_taskGetCurrentId+0xa8>)
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d108      	bne.n	8012bde <gos_taskGetCurrentId+0x86>
 8012bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8012c04 <gos_taskGetCurrentId+0xac>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f383 8810 	msr	PRIMASK, r3
 8012bd4:	b662      	cpsie	i
 8012bd6:	f3bf 8f4f 	dsb	sy
 8012bda:	f3bf 8f6f 	isb	sy
 8012bde:	4b0a      	ldr	r3, [pc, #40]	@ (8012c08 <gos_taskGetCurrentId+0xb0>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d005      	beq.n	8012bf2 <gos_taskGetCurrentId+0x9a>
 8012be6:	4b08      	ldr	r3, [pc, #32]	@ (8012c08 <gos_taskGetCurrentId+0xb0>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	3b01      	subs	r3, #1
 8012bec:	b2da      	uxtb	r2, r3
 8012bee:	4b06      	ldr	r3, [pc, #24]	@ (8012c08 <gos_taskGetCurrentId+0xb0>)
 8012bf0:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 8012bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr
 8012c00:	20005e47 	.word	0x20005e47
 8012c04:	20005e48 	.word	0x20005e48
 8012c08:	20005e45 	.word	0x20005e45
 8012c0c:	20005e4c 	.word	0x20005e4c

08012c10 <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	4603      	mov	r3, r0
 8012c18:	6039      	str	r1, [r7, #0]
 8012c1a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8012c1c:	23ae      	movs	r3, #174	@ 0xae
 8012c1e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8012c20:	2300      	movs	r3, #0
 8012c22:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012c24:	4b2d      	ldr	r3, [pc, #180]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d108      	bne.n	8012c3e <gos_taskGetData+0x2e>
 8012c2c:	b672      	cpsid	i
 8012c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8012c32:	4a2b      	ldr	r2, [pc, #172]	@ (8012ce0 <gos_taskGetData+0xd0>)
 8012c34:	6013      	str	r3, [r2, #0]
 8012c36:	f3bf 8f4f 	dsb	sy
 8012c3a:	f3bf 8f6f 	isb	sy
 8012c3e:	4b27      	ldr	r3, [pc, #156]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	3301      	adds	r3, #1
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	4b25      	ldr	r3, [pc, #148]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012c48:	701a      	strb	r2, [r3, #0]
 8012c4a:	4b26      	ldr	r3, [pc, #152]	@ (8012ce4 <gos_taskGetData+0xd4>)
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	3301      	adds	r3, #1
 8012c50:	b2da      	uxtb	r2, r3
 8012c52:	4b24      	ldr	r3, [pc, #144]	@ (8012ce4 <gos_taskGetData+0xd4>)
 8012c54:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	da18      	bge.n	8012c90 <gos_taskGetData+0x80>
 8012c5e:	88fb      	ldrh	r3, [r7, #6]
 8012c60:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d813      	bhi.n	8012c90 <gos_taskGetData+0x80>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d010      	beq.n	8012c90 <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012c6e:	88fb      	ldrh	r3, [r7, #6]
 8012c70:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012c74:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	226a      	movs	r2, #106	@ 0x6a
 8012c7a:	fb02 f303 	mul.w	r3, r2, r3
 8012c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8012ce8 <gos_taskGetData+0xd8>)
 8012c80:	4413      	add	r3, r2
 8012c82:	226a      	movs	r2, #106	@ 0x6a
 8012c84:	4619      	mov	r1, r3
 8012c86:	6838      	ldr	r0, [r7, #0]
 8012c88:	f004 fa51 	bl	801712e <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8012c8c:	2355      	movs	r3, #85	@ 0x55
 8012c8e:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8012c90:	4b12      	ldr	r3, [pc, #72]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d005      	beq.n	8012ca4 <gos_taskGetData+0x94>
 8012c98:	4b10      	ldr	r3, [pc, #64]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012ca2:	701a      	strb	r2, [r3, #0]
 8012ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8012cdc <gos_taskGetData+0xcc>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d108      	bne.n	8012cbe <gos_taskGetData+0xae>
 8012cac:	4b0c      	ldr	r3, [pc, #48]	@ (8012ce0 <gos_taskGetData+0xd0>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	f383 8810 	msr	PRIMASK, r3
 8012cb4:	b662      	cpsie	i
 8012cb6:	f3bf 8f4f 	dsb	sy
 8012cba:	f3bf 8f6f 	isb	sy
 8012cbe:	4b09      	ldr	r3, [pc, #36]	@ (8012ce4 <gos_taskGetData+0xd4>)
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d005      	beq.n	8012cd2 <gos_taskGetData+0xc2>
 8012cc6:	4b07      	ldr	r3, [pc, #28]	@ (8012ce4 <gos_taskGetData+0xd4>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	3b01      	subs	r3, #1
 8012ccc:	b2da      	uxtb	r2, r3
 8012cce:	4b05      	ldr	r3, [pc, #20]	@ (8012ce4 <gos_taskGetData+0xd4>)
 8012cd0:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 8012cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	20005e47 	.word	0x20005e47
 8012ce0:	20005e48 	.word	0x20005e48
 8012ce4:	20005e45 	.word	0x20005e45
 8012ce8:	20000788 	.word	0x20000788

08012cec <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	6039      	str	r1, [r7, #0]
 8012cf6:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8012cf8:	23ae      	movs	r3, #174	@ 0xae
 8012cfa:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d108      	bne.n	8012d16 <gos_taskGetDataByIndex+0x2a>
 8012d04:	b672      	cpsid	i
 8012d06:	f3ef 8310 	mrs	r3, PRIMASK
 8012d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8012dc0 <gos_taskGetDataByIndex+0xd4>)
 8012d0c:	6013      	str	r3, [r2, #0]
 8012d0e:	f3bf 8f4f 	dsb	sy
 8012d12:	f3bf 8f6f 	isb	sy
 8012d16:	4b29      	ldr	r3, [pc, #164]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	b2da      	uxtb	r2, r3
 8012d1e:	4b27      	ldr	r3, [pc, #156]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012d20:	701a      	strb	r2, [r3, #0]
 8012d22:	4b28      	ldr	r3, [pc, #160]	@ (8012dc4 <gos_taskGetDataByIndex+0xd8>)
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	3301      	adds	r3, #1
 8012d28:	b2da      	uxtb	r2, r3
 8012d2a:	4b26      	ldr	r3, [pc, #152]	@ (8012dc4 <gos_taskGetDataByIndex+0xd8>)
 8012d2c:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 8012d2e:	88fb      	ldrh	r3, [r7, #6]
 8012d30:	2b0f      	cmp	r3, #15
 8012d32:	d81d      	bhi.n	8012d70 <gos_taskGetDataByIndex+0x84>
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d01a      	beq.n	8012d70 <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 8012d3a:	4b23      	ldr	r3, [pc, #140]	@ (8012dc8 <gos_taskGetDataByIndex+0xdc>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	4a23      	ldr	r2, [pc, #140]	@ (8012dcc <gos_taskGetDataByIndex+0xe0>)
 8012d40:	216a      	movs	r1, #106	@ 0x6a
 8012d42:	fb01 f303 	mul.w	r3, r1, r3
 8012d46:	4413      	add	r3, r2
 8012d48:	3308      	adds	r3, #8
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        taskData != NULL &&
 8012d50:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8012d54:	d10c      	bne.n	8012d70 <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8012d56:	88fb      	ldrh	r3, [r7, #6]
 8012d58:	226a      	movs	r2, #106	@ 0x6a
 8012d5a:	fb02 f303 	mul.w	r3, r2, r3
 8012d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8012dcc <gos_taskGetDataByIndex+0xe0>)
 8012d60:	4413      	add	r3, r2
 8012d62:	226a      	movs	r2, #106	@ 0x6a
 8012d64:	4619      	mov	r1, r3
 8012d66:	6838      	ldr	r0, [r7, #0]
 8012d68:	f004 f9e1 	bl	801712e <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8012d6c:	2355      	movs	r3, #85	@ 0x55
 8012d6e:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8012d70:	4b12      	ldr	r3, [pc, #72]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d005      	beq.n	8012d84 <gos_taskGetDataByIndex+0x98>
 8012d78:	4b10      	ldr	r3, [pc, #64]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	4b0e      	ldr	r3, [pc, #56]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012d82:	701a      	strb	r2, [r3, #0]
 8012d84:	4b0d      	ldr	r3, [pc, #52]	@ (8012dbc <gos_taskGetDataByIndex+0xd0>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d108      	bne.n	8012d9e <gos_taskGetDataByIndex+0xb2>
 8012d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8012dc0 <gos_taskGetDataByIndex+0xd4>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f383 8810 	msr	PRIMASK, r3
 8012d94:	b662      	cpsie	i
 8012d96:	f3bf 8f4f 	dsb	sy
 8012d9a:	f3bf 8f6f 	isb	sy
 8012d9e:	4b09      	ldr	r3, [pc, #36]	@ (8012dc4 <gos_taskGetDataByIndex+0xd8>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d005      	beq.n	8012db2 <gos_taskGetDataByIndex+0xc6>
 8012da6:	4b07      	ldr	r3, [pc, #28]	@ (8012dc4 <gos_taskGetDataByIndex+0xd8>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	3b01      	subs	r3, #1
 8012dac:	b2da      	uxtb	r2, r3
 8012dae:	4b05      	ldr	r3, [pc, #20]	@ (8012dc4 <gos_taskGetDataByIndex+0xd8>)
 8012db0:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 8012db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	20005e47 	.word	0x20005e47
 8012dc0:	20005e48 	.word	0x20005e48
 8012dc4:	20005e45 	.word	0x20005e45
 8012dc8:	20005e4c 	.word	0x20005e4c
 8012dcc:	20000788 	.word	0x20000788

08012dd0 <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 8012dd8:	23ae      	movs	r3, #174	@ 0xae
 8012dda:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d01e      	beq.n	8012e24 <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2200      	movs	r2, #0
 8012dea:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012dec:	2300      	movs	r3, #0
 8012dee:	81bb      	strh	r3, [r7, #12]
 8012df0:	e011      	b.n	8012e16 <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 8012df2:	89bb      	ldrh	r3, [r7, #12]
 8012df4:	4a0f      	ldr	r2, [pc, #60]	@ (8012e34 <gos_taskGetNumber+0x64>)
 8012df6:	216a      	movs	r1, #106	@ 0x6a
 8012df8:	fb01 f303 	mul.w	r3, r1, r3
 8012dfc:	4413      	add	r3, r2
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d00c      	beq.n	8012e1e <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	881b      	ldrh	r3, [r3, #0]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	b29a      	uxth	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012e10:	89bb      	ldrh	r3, [r7, #12]
 8012e12:	3301      	adds	r3, #1
 8012e14:	81bb      	strh	r3, [r7, #12]
 8012e16:	89bb      	ldrh	r3, [r7, #12]
 8012e18:	2b0f      	cmp	r3, #15
 8012e1a:	d9ea      	bls.n	8012df2 <gos_taskGetNumber+0x22>
 8012e1c:	e000      	b.n	8012e20 <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 8012e1e:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 8012e20:	2355      	movs	r3, #85	@ 0x55
 8012e22:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 8012e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3714      	adds	r7, #20
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr
 8012e32:	bf00      	nop
 8012e34:	20000788 	.word	0x20000788

08012e38 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_ERROR;
 8012e40:	23ae      	movs	r3, #174	@ 0xae
 8012e42:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction != NULL                     &&
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d022      	beq.n	8012e92 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPrivilegeLevel != 0                  &&
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	891b      	ldrh	r3, [r3, #8]
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d01d      	beq.n	8012e92 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
        taskDescriptor->taskFunction != gos_idleTask             &&
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
 8012e5a:	4a11      	ldr	r2, [pc, #68]	@ (8012ea0 <gos_taskCheckDescriptor+0x68>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d018      	beq.n	8012e92 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e66:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction != gos_idleTask             &&
 8012e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012e6c:	d811      	bhi.n	8012e92 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e74:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 8012e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e7a:	d30a      	bcc.n	8012e92 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize % 4 == 0u)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	f003 0303 	and.w	r3, r3, #3
 8012e88:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d101      	bne.n	8012e92 <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_SUCCESS;
 8012e8e:	2355      	movs	r3, #85	@ 0x55
 8012e90:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 8012e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3714      	adds	r7, #20
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr
 8012ea0:	08012ea5 	.word	0x08012ea5

08012ea4 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8012eaa:	2155      	movs	r1, #85	@ 0x55
 8012eac:	480c      	ldr	r0, [pc, #48]	@ (8012ee0 <gos_idleTask+0x3c>)
 8012eae:	f000 f9c9 	bl	8013244 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 8012eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8012ee4 <gos_idleTask+0x40>)
 8012eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8012ee4 <gos_idleTask+0x40>)
 8012eba:	6413      	str	r3, [r2, #64]	@ 0x40

        if (kernelIdleHookFunction != NULL)
 8012ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8012ee8 <gos_idleTask+0x44>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d002      	beq.n	8012eca <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 8012ec4:	4b08      	ldr	r3, [pc, #32]	@ (8012ee8 <gos_idleTask+0x44>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 8012eca:	2049      	movs	r0, #73	@ 0x49
 8012ecc:	f7fd fada 	bl	8010484 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 8012ed0:	2355      	movs	r3, #85	@ 0x55
 8012ed2:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8012ed4:	2009      	movs	r0, #9
 8012ed6:	f7fd ffe3 	bl	8010ea0 <gos_kernelReschedule>
    return taskYieldResult;
 8012eda:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8012edc:	e7e9      	b.n	8012eb2 <gos_idleTask+0xe>
 8012ede:	bf00      	nop
 8012ee0:	08019e64 	.word	0x08019e64
 8012ee4:	20000788 	.word	0x20000788
 8012ee8:	20005e78 	.word	0x20005e78

08012eec <main>:

/*
 * Main
 */
int main (void_t)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8012ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8012f68 <main+0x7c>)
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	4b1b      	ldr	r3, [pc, #108]	@ (8012f68 <main+0x7c>)
 8012efc:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 8012efe:	f7ed ffeb 	bl	8000ed8 <gos_platformDriverInit>
 8012f02:	4603      	mov	r3, r0
 8012f04:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8012f06:	f000 f8cb 	bl	80130a0 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 8012f0a:	79fb      	ldrb	r3, [r7, #7]
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	4817      	ldr	r0, [pc, #92]	@ (8012f6c <main+0x80>)
 8012f10:	f000 f998 	bl	8013244 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8012f14:	f7fd f8d4 	bl	80100c0 <gos_kernelInit>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	4814      	ldr	r0, [pc, #80]	@ (8012f70 <main+0x84>)
 8012f1e:	f000 f991 	bl	8013244 <gos_errorTraceInit>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b55      	cmp	r3, #85	@ 0x55
 8012f26:	d109      	bne.n	8012f3c <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 8012f28:	4912      	ldr	r1, [pc, #72]	@ (8012f74 <main+0x88>)
 8012f2a:	4813      	ldr	r0, [pc, #76]	@ (8012f78 <main+0x8c>)
 8012f2c:	f7fe fa6e 	bl	801140c <gos_taskRegister>
 8012f30:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8012f32:	2b55      	cmp	r3, #85	@ 0x55
 8012f34:	d102      	bne.n	8012f3c <main+0x50>
    {
        initError = GOS_FALSE;
 8012f36:	4b11      	ldr	r3, [pc, #68]	@ (8012f7c <main+0x90>)
 8012f38:	2249      	movs	r2, #73	@ 0x49
 8012f3a:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 8012f3c:	f000 f826 	bl	8012f8c <gos_Start>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2bae      	cmp	r3, #174	@ 0xae
 8012f44:	d106      	bne.n	8012f54 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8012f46:	4b0e      	ldr	r3, [pc, #56]	@ (8012f80 <main+0x94>)
 8012f48:	22c2      	movs	r2, #194	@ 0xc2
 8012f4a:	490e      	ldr	r1, [pc, #56]	@ (8012f84 <main+0x98>)
 8012f4c:	2034      	movs	r0, #52	@ 0x34
 8012f4e:	f000 f8e1 	bl	8013114 <gos_errorHandler>
 8012f52:	e006      	b.n	8012f62 <main+0x76>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8012f54:	4b0c      	ldr	r3, [pc, #48]	@ (8012f88 <main+0x9c>)
 8012f56:	22c6      	movs	r2, #198	@ 0xc6
 8012f58:	490a      	ldr	r1, [pc, #40]	@ (8012f84 <main+0x98>)
 8012f5a:	2034      	movs	r0, #52	@ 0x34
 8012f5c:	f000 f8da 	bl	8013114 <gos_errorHandler>
    }

    for (;;);
 8012f60:	bf00      	nop
 8012f62:	bf00      	nop
 8012f64:	e7fd      	b.n	8012f62 <main+0x76>
 8012f66:	bf00      	nop
 8012f68:	20005e45 	.word	0x20005e45
 8012f6c:	08019e74 	.word	0x08019e74
 8012f70:	08019e94 	.word	0x08019e94
 8012f74:	20005e7e 	.word	0x20005e7e
 8012f78:	20000f48 	.word	0x20000f48
 8012f7c:	20005e7c 	.word	0x20005e7c
 8012f80:	08019eac 	.word	0x08019eac
 8012f84:	0801aa88 	.word	0x0801aa88
 8012f88:	08019ecc 	.word	0x08019ecc

08012f8c <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 8012f92:	23b1      	movs	r3, #177	@ 0xb1
 8012f94:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8012f96:	4b06      	ldr	r3, [pc, #24]	@ (8012fb0 <gos_Start+0x24>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b49      	cmp	r3, #73	@ 0x49
 8012f9c:	d103      	bne.n	8012fa6 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 8012f9e:	f7fd f97b 	bl	8010298 <gos_kernelStart>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 8012fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	20005e7c 	.word	0x20005e7c

08012fb4 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8012fb4:	b590      	push	{r4, r7, lr}
 8012fb6:	b083      	sub	sp, #12
 8012fb8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 8012fba:	2355      	movs	r3, #85	@ 0x55
 8012fbc:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8012fc2:	4b31      	ldr	r3, [pc, #196]	@ (8013088 <gos_systemTask+0xd4>)
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	4b2f      	ldr	r3, [pc, #188]	@ (8013088 <gos_systemTask+0xd4>)
 8012fcc:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8012fce:	2300      	movs	r3, #0
 8012fd0:	71bb      	strb	r3, [r7, #6]
 8012fd2:	e020      	b.n	8013016 <gos_systemTask+0x62>
    {
    	GOS_CONCAT_RESULT(sysInitResult, gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc()));
 8012fd4:	79fb      	ldrb	r3, [r7, #7]
 8012fd6:	2b55      	cmp	r3, #85	@ 0x55
 8012fd8:	d118      	bne.n	801300c <gos_systemTask+0x58>
 8012fda:	79ba      	ldrb	r2, [r7, #6]
 8012fdc:	4613      	mov	r3, r2
 8012fde:	00db      	lsls	r3, r3, #3
 8012fe0:	4413      	add	r3, r2
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	4a29      	ldr	r2, [pc, #164]	@ (801308c <gos_systemTask+0xd8>)
 8012fe6:	189c      	adds	r4, r3, r2
 8012fe8:	79ba      	ldrb	r2, [r7, #6]
 8012fea:	4928      	ldr	r1, [pc, #160]	@ (801308c <gos_systemTask+0xd8>)
 8012fec:	4613      	mov	r3, r2
 8012fee:	00db      	lsls	r3, r3, #3
 8012ff0:	4413      	add	r3, r2
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3320      	adds	r3, #32
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	4798      	blx	r3
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	4619      	mov	r1, r3
 8013000:	4620      	mov	r0, r4
 8013002:	f000 f91f 	bl	8013244 <gos_errorTraceInit>
 8013006:	4603      	mov	r3, r0
 8013008:	71fb      	strb	r3, [r7, #7]
 801300a:	e001      	b.n	8013010 <gos_systemTask+0x5c>
 801300c:	23ae      	movs	r3, #174	@ 0xae
 801300e:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8013010:	79bb      	ldrb	r3, [r7, #6]
 8013012:	3301      	adds	r3, #1
 8013014:	71bb      	strb	r3, [r7, #6]
 8013016:	79bb      	ldrb	r3, [r7, #6]
 8013018:	2b07      	cmp	r3, #7
 801301a:	d9db      	bls.n	8012fd4 <gos_systemTask+0x20>
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 801301c:	79fb      	ldrb	r3, [r7, #7]
 801301e:	4619      	mov	r1, r3
 8013020:	481b      	ldr	r0, [pc, #108]	@ (8013090 <gos_systemTask+0xdc>)
 8013022:	f000 f90f 	bl	8013244 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 8013026:	4b18      	ldr	r3, [pc, #96]	@ (8013088 <gos_systemTask+0xd4>)
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d005      	beq.n	801303a <gos_systemTask+0x86>
 801302e:	4b16      	ldr	r3, [pc, #88]	@ (8013088 <gos_systemTask+0xd4>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	3b01      	subs	r3, #1
 8013034:	b2da      	uxtb	r2, r3
 8013036:	4b14      	ldr	r3, [pc, #80]	@ (8013088 <gos_systemTask+0xd4>)
 8013038:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 801303a:	4b16      	ldr	r3, [pc, #88]	@ (8013094 <gos_systemTask+0xe0>)
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	21c3      	movs	r1, #195	@ 0xc3
 8013040:	4618      	mov	r0, r3
 8013042:	f7ff fa81 	bl	8012548 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 8013046:	4b13      	ldr	r3, [pc, #76]	@ (8013094 <gos_systemTask+0xe0>)
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	21c3      	movs	r1, #195	@ 0xc3
 801304c:	4618      	mov	r0, r3
 801304e:	f7ff f9b7 	bl	80123c0 <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8013052:	2036      	movs	r0, #54	@ 0x36
 8013054:	f7fd fa16 	bl	8010484 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 8013058:	4b0f      	ldr	r3, [pc, #60]	@ (8013098 <gos_systemTask+0xe4>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	2b36      	cmp	r3, #54	@ 0x36
 801305e:	d10e      	bne.n	801307e <gos_systemTask+0xca>
        {
            gos_kernelDump();
 8013060:	f7fd fb74 	bl	801074c <gos_kernelDump>
            gos_queueDump();
 8013064:	f001 fa8e 	bl	8014584 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 8013068:	4b0c      	ldr	r3, [pc, #48]	@ (801309c <gos_systemTask+0xe8>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	2100      	movs	r1, #0
 801306e:	4618      	mov	r0, r3
 8013070:	f001 fb80 	bl	8014774 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 8013074:	4b08      	ldr	r3, [pc, #32]	@ (8013098 <gos_systemTask+0xe4>)
 8013076:	2249      	movs	r2, #73	@ 0x49
 8013078:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 801307a:	f001 fae7 	bl	801464c <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 801307e:	2064      	movs	r0, #100	@ 0x64
 8013080:	f7fe fb56 	bl	8011730 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8013084:	e7e5      	b.n	8013052 <gos_systemTask+0x9e>
 8013086:	bf00      	nop
 8013088:	20005e45 	.word	0x20005e45
 801308c:	20000e28 	.word	0x20000e28
 8013090:	08019f48 	.word	0x08019f48
 8013094:	20005e7e 	.word	0x20005e7e
 8013098:	20005e7d 	.word	0x20005e7d
 801309c:	20005e44 	.word	0x20005e44

080130a0 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 80130a4:	4811      	ldr	r0, [pc, #68]	@ (80130ec <gos_printStartupLogo+0x4c>)
 80130a6:	f002 fec9 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 80130aa:	4811      	ldr	r0, [pc, #68]	@ (80130f0 <gos_printStartupLogo+0x50>)
 80130ac:	f002 fec6 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 80130b0:	4810      	ldr	r0, [pc, #64]	@ (80130f4 <gos_printStartupLogo+0x54>)
 80130b2:	f002 fec3 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 80130b6:	4810      	ldr	r0, [pc, #64]	@ (80130f8 <gos_printStartupLogo+0x58>)
 80130b8:	f002 fec0 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 80130bc:	480f      	ldr	r0, [pc, #60]	@ (80130fc <gos_printStartupLogo+0x5c>)
 80130be:	f002 febd 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 80130c2:	480f      	ldr	r0, [pc, #60]	@ (8013100 <gos_printStartupLogo+0x60>)
 80130c4:	f002 feba 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 80130c8:	480e      	ldr	r0, [pc, #56]	@ (8013104 <gos_printStartupLogo+0x64>)
 80130ca:	f002 feb7 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 80130ce:	4809      	ldr	r0, [pc, #36]	@ (80130f4 <gos_printStartupLogo+0x54>)
 80130d0:	f002 feb4 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 80130d4:	480c      	ldr	r0, [pc, #48]	@ (8013108 <gos_printStartupLogo+0x68>)
 80130d6:	f002 feb1 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2025                        \r\n\r\n");
 80130da:	480c      	ldr	r0, [pc, #48]	@ (801310c <gos_printStartupLogo+0x6c>)
 80130dc:	f002 feae 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 80130e0:	480b      	ldr	r0, [pc, #44]	@ (8013110 <gos_printStartupLogo+0x70>)
 80130e2:	f002 feab 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
}
 80130e6:	bf00      	nop
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	08019f60 	.word	0x08019f60
 80130f0:	08019fb0 	.word	0x08019fb0
 80130f4:	0801a000 	.word	0x0801a000
 80130f8:	0801a050 	.word	0x0801a050
 80130fc:	0801a0a0 	.word	0x0801a0a0
 8013100:	0801a0f0 	.word	0x0801a0f0
 8013104:	0801a140 	.word	0x0801a140
 8013108:	0801a190 	.word	0x0801a190
 801310c:	0801a1e0 	.word	0x0801a1e0
 8013110:	0801a230 	.word	0x0801a230

08013114 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 8013114:	b408      	push	{r3}
 8013116:	b580      	push	{r7, lr}
 8013118:	b087      	sub	sp, #28
 801311a:	af00      	add	r7, sp, #0
 801311c:	4603      	mov	r3, r0
 801311e:	60b9      	str	r1, [r7, #8]
 8013120:	607a      	str	r2, [r7, #4]
 8013122:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 8013124:	483a      	ldr	r0, [pc, #232]	@ (8013210 <gos_errorHandler+0xfc>)
 8013126:	f002 fe89 	bl	8015e3c <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 801312a:	7bfb      	ldrb	r3, [r7, #15]
 801312c:	2b34      	cmp	r3, #52	@ 0x34
 801312e:	d103      	bne.n	8013138 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8013130:	4838      	ldr	r0, [pc, #224]	@ (8013214 <gos_errorHandler+0x100>)
 8013132:	f002 fe83 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
 8013136:	e013      	b.n	8013160 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 8013138:	7bfb      	ldrb	r3, [r7, #15]
 801313a:	2b2e      	cmp	r3, #46	@ 0x2e
 801313c:	d103      	bne.n	8013146 <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 801313e:	4836      	ldr	r0, [pc, #216]	@ (8013218 <gos_errorHandler+0x104>)
 8013140:	f002 fe7c 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
 8013144:	e00c      	b.n	8013160 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8013146:	7bfb      	ldrb	r3, [r7, #15]
 8013148:	2b1a      	cmp	r3, #26
 801314a:	d103      	bne.n	8013154 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 801314c:	4833      	ldr	r0, [pc, #204]	@ (801321c <gos_errorHandler+0x108>)
 801314e:	f002 fe75 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
 8013152:	e005      	b.n	8013160 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 8013154:	7bfb      	ldrb	r3, [r7, #15]
 8013156:	2b3a      	cmp	r3, #58	@ 0x3a
 8013158:	d102      	bne.n	8013160 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 801315a:	4831      	ldr	r0, [pc, #196]	@ (8013220 <gos_errorHandler+0x10c>)
 801315c:	f002 fe6e 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d005      	beq.n	8013172 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	68b9      	ldr	r1, [r7, #8]
 801316a:	482e      	ldr	r0, [pc, #184]	@ (8013224 <gos_errorHandler+0x110>)
 801316c:	f002 fe66 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
 8013170:	e006      	b.n	8013180 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d003      	beq.n	8013180 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8013178:	6879      	ldr	r1, [r7, #4]
 801317a:	482b      	ldr	r0, [pc, #172]	@ (8013228 <gos_errorHandler+0x114>)
 801317c:	f002 fe5e 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8013180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00b      	beq.n	801319e <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 8013186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801318a:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 801318c:	697a      	ldr	r2, [r7, #20]
 801318e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013190:	4826      	ldr	r0, [pc, #152]	@ (801322c <gos_errorHandler+0x118>)
 8013192:	f003 ff2b 	bl	8016fec <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 8013196:	4925      	ldr	r1, [pc, #148]	@ (801322c <gos_errorHandler+0x118>)
 8013198:	4825      	ldr	r0, [pc, #148]	@ (8013230 <gos_errorHandler+0x11c>)
 801319a:	f002 fe4f 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 801319e:	4825      	ldr	r0, [pc, #148]	@ (8013234 <gos_errorHandler+0x120>)
 80131a0:	f002 fe4c 	bl	8015e3c <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80131a4:	7bfb      	ldrb	r3, [r7, #15]
 80131a6:	2b34      	cmp	r3, #52	@ 0x34
 80131a8:	d002      	beq.n	80131b0 <gos_errorHandler+0x9c>
 80131aa:	7bfb      	ldrb	r3, [r7, #15]
 80131ac:	2b1a      	cmp	r3, #26
 80131ae:	d127      	bne.n	8013200 <gos_errorHandler+0xec>
    {
        GOS_DISABLE_SCHED
 80131b0:	4b21      	ldr	r3, [pc, #132]	@ (8013238 <gos_errorHandler+0x124>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	3301      	adds	r3, #1
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	4b1f      	ldr	r3, [pc, #124]	@ (8013238 <gos_errorHandler+0x124>)
 80131ba:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 80131bc:	4b1f      	ldr	r3, [pc, #124]	@ (801323c <gos_errorHandler+0x128>)
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d108      	bne.n	80131d6 <gos_errorHandler+0xc2>
 80131c4:	b672      	cpsid	i
 80131c6:	f3ef 8310 	mrs	r3, PRIMASK
 80131ca:	4a1d      	ldr	r2, [pc, #116]	@ (8013240 <gos_errorHandler+0x12c>)
 80131cc:	6013      	str	r3, [r2, #0]
 80131ce:	f3bf 8f4f 	dsb	sy
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	4b19      	ldr	r3, [pc, #100]	@ (801323c <gos_errorHandler+0x128>)
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	3301      	adds	r3, #1
 80131dc:	b2da      	uxtb	r2, r3
 80131de:	4b17      	ldr	r3, [pc, #92]	@ (801323c <gos_errorHandler+0x128>)
 80131e0:	701a      	strb	r2, [r3, #0]
 80131e2:	4b15      	ldr	r3, [pc, #84]	@ (8013238 <gos_errorHandler+0x124>)
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	3301      	adds	r3, #1
 80131e8:	b2da      	uxtb	r2, r3
 80131ea:	4b13      	ldr	r3, [pc, #76]	@ (8013238 <gos_errorHandler+0x124>)
 80131ec:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 80131ee:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 80131f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80131f4:	f7fd f92a 	bl	801044c <gos_kernelDelayMs>
            gos_kernelReset();
 80131f8:	f7fd f902 	bl	8010400 <gos_kernelReset>
            GOS_NOP;
 80131fc:	bf00      	nop
 80131fe:	e7f6      	b.n	80131ee <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 8013200:	bf00      	nop
 8013202:	371c      	adds	r7, #28
 8013204:	46bd      	mov	sp, r7
 8013206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801320a:	b001      	add	sp, #4
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop
 8013210:	0801a280 	.word	0x0801a280
 8013214:	0801a2d4 	.word	0x0801a2d4
 8013218:	0801a300 	.word	0x0801a300
 801321c:	0801a320 	.word	0x0801a320
 8013220:	0801a350 	.word	0x0801a350
 8013224:	0801a370 	.word	0x0801a370
 8013228:	0801a394 	.word	0x0801a394
 801322c:	20005e80 	.word	0x20005e80
 8013230:	0801a3c0 	.word	0x0801a3c0
 8013234:	0801a3c8 	.word	0x0801a3c8
 8013238:	20005e45 	.word	0x20005e45
 801323c:	20005e47 	.word	0x20005e47
 8013240:	20005e48 	.word	0x20005e48

08013244 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 8013244:	b590      	push	{r4, r7, lr}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	460b      	mov	r3, r1
 801324e:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 8013250:	f7fd f8b8 	bl	80103c4 <gos_kernelGetSysTicks>
 8013254:	4604      	mov	r4, r0
 8013256:	1cfb      	adds	r3, r7, #3
 8013258:	4618      	mov	r0, r3
 801325a:	f000 f80d 	bl	8013278 <gos_traceResultToString>
 801325e:	4603      	mov	r3, r0
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	4621      	mov	r1, r4
 8013264:	4803      	ldr	r0, [pc, #12]	@ (8013274 <gos_errorTraceInit+0x30>)
 8013266:	f002 fde9 	bl	8015e3c <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 801326a:	78fb      	ldrb	r3, [r7, #3]
}
 801326c:	4618      	mov	r0, r3
 801326e:	370c      	adds	r7, #12
 8013270:	46bd      	mov	sp, r7
 8013272:	bd90      	pop	{r4, r7, pc}
 8013274:	0801a418 	.word	0x0801a418

08013278 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 8013278:	b480      	push	{r7}
 801327a:	b083      	sub	sp, #12
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	2b55      	cmp	r3, #85	@ 0x55
 8013286:	d002      	beq.n	801328e <gos_traceResultToString+0x16>
 8013288:	2bae      	cmp	r3, #174	@ 0xae
 801328a:	d002      	beq.n	8013292 <gos_traceResultToString+0x1a>
 801328c:	e003      	b.n	8013296 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 801328e:	4b05      	ldr	r3, [pc, #20]	@ (80132a4 <gos_traceResultToString+0x2c>)
 8013290:	e002      	b.n	8013298 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 8013292:	4b05      	ldr	r3, [pc, #20]	@ (80132a8 <gos_traceResultToString+0x30>)
 8013294:	e000      	b.n	8013298 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 8013296:	4b05      	ldr	r3, [pc, #20]	@ (80132ac <gos_traceResultToString+0x34>)
        }
    }
}
 8013298:	4618      	mov	r0, r3
 801329a:	370c      	adds	r7, #12
 801329c:	46bd      	mov	sp, r7
 801329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a2:	4770      	bx	lr
 80132a4:	0801a434 	.word	0x0801a434
 80132a8:	0801a448 	.word	0x0801a448
 80132ac:	0801a45c 	.word	0x0801a45c

080132b0 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 80132b6:	2355      	movs	r3, #85	@ 0x55
 80132b8:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 80132ba:	2300      	movs	r3, #0
 80132bc:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 80132be:	2300      	movs	r3, #0
 80132c0:	80bb      	strh	r3, [r7, #4]
 80132c2:	e020      	b.n	8013306 <gos_gcpInit+0x56>
    {
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpRxMutexes[mutexIdx]));
 80132c4:	79fb      	ldrb	r3, [r7, #7]
 80132c6:	2b55      	cmp	r3, #85	@ 0x55
 80132c8:	d109      	bne.n	80132de <gos_gcpInit+0x2e>
 80132ca:	88bb      	ldrh	r3, [r7, #4]
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4a12      	ldr	r2, [pc, #72]	@ (8013318 <gos_gcpInit+0x68>)
 80132d0:	4413      	add	r3, r2
 80132d2:	4618      	mov	r0, r3
 80132d4:	f000 fd6c 	bl	8013db0 <gos_mutexInit>
 80132d8:	4603      	mov	r3, r0
 80132da:	71fb      	strb	r3, [r7, #7]
 80132dc:	e001      	b.n	80132e2 <gos_gcpInit+0x32>
 80132de:	23ae      	movs	r3, #174	@ 0xae
 80132e0:	71fb      	strb	r3, [r7, #7]
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpTxMutexes[mutexIdx]));
 80132e2:	79fb      	ldrb	r3, [r7, #7]
 80132e4:	2b55      	cmp	r3, #85	@ 0x55
 80132e6:	d109      	bne.n	80132fc <gos_gcpInit+0x4c>
 80132e8:	88bb      	ldrh	r3, [r7, #4]
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	4a0b      	ldr	r2, [pc, #44]	@ (801331c <gos_gcpInit+0x6c>)
 80132ee:	4413      	add	r3, r2
 80132f0:	4618      	mov	r0, r3
 80132f2:	f000 fd5d 	bl	8013db0 <gos_mutexInit>
 80132f6:	4603      	mov	r3, r0
 80132f8:	71fb      	strb	r3, [r7, #7]
 80132fa:	e001      	b.n	8013300 <gos_gcpInit+0x50>
 80132fc:	23ae      	movs	r3, #174	@ 0xae
 80132fe:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8013300:	88bb      	ldrh	r3, [r7, #4]
 8013302:	3301      	adds	r3, #1
 8013304:	80bb      	strh	r3, [r7, #4]
 8013306:	88bb      	ldrh	r3, [r7, #4]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d0db      	beq.n	80132c4 <gos_gcpInit+0x14>
    }

    return gcpInitResult;
 801330c:	79fb      	ldrb	r3, [r7, #7]
}
 801330e:	4618      	mov	r0, r3
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	20005ed8 	.word	0x20005ed8
 801331c:	20005edc 	.word	0x20005edc

08013320 <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 8013320:	b480      	push	{r7}
 8013322:	b087      	sub	sp, #28
 8013324:	af00      	add	r7, sp, #0
 8013326:	4603      	mov	r3, r0
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
 801332c:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 801332e:	23ae      	movs	r3, #174	@ 0xae
 8013330:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 8013332:	7bfb      	ldrb	r3, [r7, #15]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d112      	bne.n	801335e <gos_gcpRegisterPhysicalDriver+0x3e>
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d00f      	beq.n	801335e <gos_gcpRegisterPhysicalDriver+0x3e>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00c      	beq.n	801335e <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 8013344:	7bfb      	ldrb	r3, [r7, #15]
 8013346:	4a09      	ldr	r2, [pc, #36]	@ (801336c <gos_gcpRegisterPhysicalDriver+0x4c>)
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	4413      	add	r3, r2
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 8013350:	7bfb      	ldrb	r3, [r7, #15]
 8013352:	4906      	ldr	r1, [pc, #24]	@ (801336c <gos_gcpRegisterPhysicalDriver+0x4c>)
 8013354:	68ba      	ldr	r2, [r7, #8]
 8013356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 801335a:	2355      	movs	r3, #85	@ 0x55
 801335c:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 801335e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013360:	4618      	mov	r0, r3
 8013362:	371c      	adds	r7, #28
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr
 801336c:	20005ed0 	.word	0x20005ed0

08013370 <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b092      	sub	sp, #72	@ 0x48
 8013374:	af00      	add	r7, sp, #0
 8013376:	60ba      	str	r2, [r7, #8]
 8013378:	461a      	mov	r2, r3
 801337a:	4603      	mov	r3, r0
 801337c:	73fb      	strb	r3, [r7, #15]
 801337e:	460b      	mov	r3, r1
 8013380:	81bb      	strh	r3, [r7, #12]
 8013382:	4613      	mov	r3, r2
 8013384:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 8013386:	23ae      	movs	r3, #174	@ 0xae
 8013388:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 801338c:	7bfb      	ldrb	r3, [r7, #15]
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	4a8e      	ldr	r2, [pc, #568]	@ (80135cc <gos_gcpTransmitMessage+0x25c>)
 8013392:	4413      	add	r3, r2
 8013394:	f04f 31ff 	mov.w	r1, #4294967295
 8013398:	4618      	mov	r0, r3
 801339a:	f000 fd23 	bl	8013de4 <gos_mutexLock>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b55      	cmp	r3, #85	@ 0x55
 80133a2:	f040 8105 	bne.w	80135b0 <gos_gcpTransmitMessage+0x240>
 80133a6:	7bfb      	ldrb	r3, [r7, #15]
 80133a8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80133ac:	89bb      	ldrh	r3, [r7, #12]
 80133ae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80133b6:	88fb      	ldrh	r3, [r7, #6]
 80133b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80133ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80133be:	87bb      	strh	r3, [r7, #60]	@ 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 80133c0:	23ae      	movs	r3, #174	@ 0xae
 80133c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 80133c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133ca:	2200      	movs	r2, #0
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	605a      	str	r2, [r3, #4]
 80133d0:	609a      	str	r2, [r3, #8]
 80133d2:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 80133d4:	f107 0314 	add.w	r3, r7, #20
 80133d8:	2200      	movs	r2, #0
 80133da:	601a      	str	r2, [r3, #0]
 80133dc:	605a      	str	r2, [r3, #4]
 80133de:	609a      	str	r2, [r3, #8]
 80133e0:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 80133e2:	2300      	movs	r3, #0
 80133e4:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 80133e6:	2300      	movs	r3, #0
 80133e8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    u8_t                 chunkIndex            = 0u;
 80133ec:	2300      	movs	r3, #0
 80133ee:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    u16_t                tempSize              = 0u;
 80133f2:	2300      	movs	r3, #0
 80133f4:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 80133f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d107      	bne.n	801340c <gos_gcpTransmitMessage+0x9c>
 80133fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133fe:	2b00      	cmp	r3, #0
 8013400:	f040 80d2 	bne.w	80135a8 <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 8013404:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013406:	2b00      	cmp	r3, #0
 8013408:	f040 80ce 	bne.w	80135a8 <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 801340c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013410:	2b00      	cmp	r3, #0
 8013412:	f040 80c9 	bne.w	80135a8 <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 8013416:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801341a:	4a6d      	ldr	r2, [pc, #436]	@ (80135d0 <gos_gcpTransmitMessage+0x260>)
 801341c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 80c1 	beq.w	80135a8 <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 8013426:	2300      	movs	r3, #0
 8013428:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 801342c:	2302      	movs	r3, #2
 801342e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8013432:	2300      	movs	r3, #0
 8013434:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 8013438:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801343a:	857b      	strh	r3, [r7, #42]	@ 0x2a
        requestHeaderFrame.messageId     = messageId;
 801343c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013440:	853b      	strh	r3, [r7, #40]	@ 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 8013442:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013444:	4619      	mov	r1, r3
 8013446:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8013448:	f002 ff02 	bl	8016250 <gos_crcDriverGetCrc>
 801344c:	4603      	mov	r3, r0
 801344e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 8013450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013454:	210c      	movs	r1, #12
 8013456:	4618      	mov	r0, r3
 8013458:	f002 fefa 	bl	8016250 <gos_crcDriverGetCrc>
 801345c:	4603      	mov	r3, r0
 801345e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 8013460:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013464:	4a5a      	ldr	r2, [pc, #360]	@ (80135d0 <gos_gcpTransmitMessage+0x260>)
 8013466:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801346a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801346e:	2110      	movs	r1, #16
 8013470:	4610      	mov	r0, r2
 8013472:	4798      	blx	r3
 8013474:	4603      	mov	r3, r0
 8013476:	2b55      	cmp	r3, #85	@ 0x55
 8013478:	f040 8096 	bne.w	80135a8 <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 801347c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801347e:	2b00      	cmp	r3, #0
 8013480:	d120      	bne.n	80134c4 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8013482:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013486:	4a52      	ldr	r2, [pc, #328]	@ (80135d0 <gos_gcpTransmitMessage+0x260>)
 8013488:	00db      	lsls	r3, r3, #3
 801348a:	4413      	add	r3, r2
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	f107 0214 	add.w	r2, r7, #20
 8013492:	2110      	movs	r1, #16
 8013494:	4610      	mov	r0, r2
 8013496:	4798      	blx	r3
 8013498:	4603      	mov	r3, r0
 801349a:	2b55      	cmp	r3, #85	@ 0x55
 801349c:	f040 8084 	bne.w	80135a8 <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80134a0:	f107 0213 	add.w	r2, r7, #19
 80134a4:	f107 0314 	add.w	r3, r7, #20
 80134a8:	4611      	mov	r1, r2
 80134aa:	4618      	mov	r0, r3
 80134ac:	f000 f9de 	bl	801386c <gos_gcpValidateHeader>
 80134b0:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 80134b2:	2b55      	cmp	r3, #85	@ 0x55
 80134b4:	d178      	bne.n	80135a8 <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 80134b6:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d175      	bne.n	80135a8 <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 80134bc:	2355      	movs	r3, #85	@ 0x55
 80134be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80134c2:	e071      	b.n	80135a8 <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 80134c4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80134c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80134c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 80134d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80134d4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80134d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80134da:	fb01 f202 	mul.w	r2, r1, r2
 80134de:	1a9b      	subs	r3, r3, r2
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d004      	beq.n	80134f0 <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 80134e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80134ea:	3301      	adds	r3, #1
 80134ec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80134f0:	2300      	movs	r3, #0
 80134f2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80134f6:	e051      	b.n	801359c <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 80134f8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80134fc:	3301      	adds	r3, #1
 80134fe:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8013500:	fb02 f303 	mul.w	r3, r2, r3
 8013504:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8013506:	4293      	cmp	r3, r2
 8013508:	dd0a      	ble.n	8013520 <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 801350a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 801350c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013510:	b29b      	uxth	r3, r3
 8013512:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8013514:	fb11 f303 	smulbb	r3, r1, r3
 8013518:	b29b      	uxth	r3, r3
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801351e:	e001      	b.n	8013524 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8013520:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013522:	86fb      	strh	r3, [r7, #54]	@ 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8013524:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013528:	4a29      	ldr	r2, [pc, #164]	@ (80135d0 <gos_gcpTransmitMessage+0x260>)
 801352a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801352e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8013532:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8013534:	fb01 f202 	mul.w	r2, r1, r2
 8013538:	4611      	mov	r1, r2
 801353a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801353c:	440a      	add	r2, r1
 801353e:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8013540:	4610      	mov	r0, r2
 8013542:	4798      	blx	r3
 8013544:	4603      	mov	r3, r0
 8013546:	2b55      	cmp	r3, #85	@ 0x55
 8013548:	d124      	bne.n	8013594 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 801354a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801354e:	4a20      	ldr	r2, [pc, #128]	@ (80135d0 <gos_gcpTransmitMessage+0x260>)
 8013550:	00db      	lsls	r3, r3, #3
 8013552:	4413      	add	r3, r2
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	f107 0214 	add.w	r2, r7, #20
 801355a:	2110      	movs	r1, #16
 801355c:	4610      	mov	r0, r2
 801355e:	4798      	blx	r3
 8013560:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8013562:	2b55      	cmp	r3, #85	@ 0x55
 8013564:	d116      	bne.n	8013594 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8013566:	f107 0213 	add.w	r2, r7, #19
 801356a:	f107 0314 	add.w	r3, r7, #20
 801356e:	4611      	mov	r1, r2
 8013570:	4618      	mov	r0, r3
 8013572:	f000 f97b 	bl	801386c <gos_gcpValidateHeader>
 8013576:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8013578:	2b55      	cmp	r3, #85	@ 0x55
 801357a:	d10b      	bne.n	8013594 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 801357c:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 801357e:	2b01      	cmp	r3, #1
 8013580:	d108      	bne.n	8013594 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 8013582:	2355      	movs	r3, #85	@ 0x55
 8013584:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8013588:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801358c:	3301      	adds	r3, #1
 801358e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8013592:	e003      	b.n	801359c <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 8013594:	23ae      	movs	r3, #174	@ 0xae
 8013596:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            			break;
 801359a:	e005      	b.n	80135a8 <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 801359c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80135a0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d3a7      	bcc.n	80134f8 <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 80135a8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 80135ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 80135b0:	7bfb      	ldrb	r3, [r7, #15]
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	4a05      	ldr	r2, [pc, #20]	@ (80135cc <gos_gcpTransmitMessage+0x25c>)
 80135b6:	4413      	add	r3, r2
 80135b8:	4618      	mov	r0, r3
 80135ba:	f000 fd19 	bl	8013ff0 <gos_mutexUnlock>
    return transmitMessageResult;
 80135be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3748      	adds	r7, #72	@ 0x48
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	20005edc 	.word	0x20005edc
 80135d0:	20005ed0 	.word	0x20005ed0

080135d4 <gos_gcpReceiveMessage>:
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b094      	sub	sp, #80	@ 0x50
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
 80135de:	461a      	mov	r2, r3
 80135e0:	4603      	mov	r3, r0
 80135e2:	73fb      	strb	r3, [r7, #15]
 80135e4:	4613      	mov	r3, r2
 80135e6:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 80135e8:	23ae      	movs	r3, #174	@ 0xae
 80135ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 80135ee:	7bfb      	ldrb	r3, [r7, #15]
 80135f0:	009b      	lsls	r3, r3, #2
 80135f2:	4a9c      	ldr	r2, [pc, #624]	@ (8013864 <gos_gcpReceiveMessage+0x290>)
 80135f4:	4413      	add	r3, r2
 80135f6:	f04f 31ff 	mov.w	r1, #4294967295
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 fbf2 	bl	8013de4 <gos_mutexLock>
 8013600:	4603      	mov	r3, r0
 8013602:	2b55      	cmp	r3, #85	@ 0x55
 8013604:	f040 8120 	bne.w	8013848 <gos_gcpReceiveMessage+0x274>
 8013608:	7bfb      	ldrb	r3, [r7, #15]
 801360a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	647b      	str	r3, [r7, #68]	@ 0x44
 8013616:	89bb      	ldrh	r3, [r7, #12]
 8013618:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801361c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8013620:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 8013624:	23ae      	movs	r3, #174	@ 0xae
 8013626:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 801362a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801362e:	2200      	movs	r2, #0
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	605a      	str	r2, [r3, #4]
 8013634:	609a      	str	r2, [r3, #8]
 8013636:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8013638:	f107 0318 	add.w	r3, r7, #24
 801363c:	2200      	movs	r2, #0
 801363e:	601a      	str	r2, [r3, #0]
 8013640:	605a      	str	r2, [r3, #4]
 8013642:	609a      	str	r2, [r3, #8]
 8013644:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 8013646:	2300      	movs	r3, #0
 8013648:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 801364a:	2300      	movs	r3, #0
 801364c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    u8_t                 chunkIndex            = 0u;
 8013650:	2300      	movs	r3, #0
 8013652:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    u16_t                tempSize              = 0u;
 8013656:	2300      	movs	r3, #0
 8013658:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 801365a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801365c:	2b00      	cmp	r3, #0
 801365e:	f000 80ef 	beq.w	8013840 <gos_gcpReceiveMessage+0x26c>
 8013662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013664:	2b00      	cmp	r3, #0
 8013666:	f000 80eb 	beq.w	8013840 <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 801366a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801366e:	2b00      	cmp	r3, #0
 8013670:	f040 80e6 	bne.w	8013840 <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 8013674:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8013678:	4a7b      	ldr	r2, [pc, #492]	@ (8013868 <gos_gcpReceiveMessage+0x294>)
 801367a:	00db      	lsls	r3, r3, #3
 801367c:	4413      	add	r3, r2
 801367e:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8013680:	2b00      	cmp	r3, #0
 8013682:	f000 80dd 	beq.w	8013840 <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 8013686:	2300      	movs	r3, #0
 8013688:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 801368a:	2300      	movs	r3, #0
 801368c:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 801368e:	2302      	movs	r3, #2
 8013690:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8013692:	2300      	movs	r3, #0
 8013694:	767b      	strb	r3, [r7, #25]

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8013696:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801369a:	4a73      	ldr	r2, [pc, #460]	@ (8013868 <gos_gcpReceiveMessage+0x294>)
 801369c:	00db      	lsls	r3, r3, #3
 801369e:	4413      	add	r3, r2
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80136a6:	2110      	movs	r1, #16
 80136a8:	4610      	mov	r0, r2
 80136aa:	4798      	blx	r3
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b55      	cmp	r3, #85	@ 0x55
 80136b0:	f040 80b0 	bne.w	8013814 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 80136b4:	f107 0217 	add.w	r2, r7, #23
 80136b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80136bc:	4611      	mov	r1, r2
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 f8d4 	bl	801386c <gos_gcpValidateHeader>
 80136c4:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 80136c6:	2b55      	cmp	r3, #85	@ 0x55
 80136c8:	f040 80a4 	bne.w	8013814 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 80136cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d11e      	bne.n	8013710 <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 80136d2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80136d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136d6:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 80136d8:	2301      	movs	r3, #1
 80136da:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 80136dc:	f107 0318 	add.w	r3, r7, #24
 80136e0:	210c      	movs	r1, #12
 80136e2:	4618      	mov	r0, r3
 80136e4:	f002 fdb4 	bl	8016250 <gos_crcDriverGetCrc>
 80136e8:	4603      	mov	r3, r0
 80136ea:	627b      	str	r3, [r7, #36]	@ 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 80136ec:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80136f0:	4a5d      	ldr	r2, [pc, #372]	@ (8013868 <gos_gcpReceiveMessage+0x294>)
 80136f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80136f6:	f107 0218 	add.w	r2, r7, #24
 80136fa:	2110      	movs	r1, #16
 80136fc:	4610      	mov	r0, r2
 80136fe:	4798      	blx	r3
 8013700:	4603      	mov	r3, r0
 8013702:	2b55      	cmp	r3, #85	@ 0x55
 8013704:	f040 809b 	bne.w	801383e <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 8013708:	2355      	movs	r3, #85	@ 0x55
 801370a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 801370e:	e096      	b.n	801383e <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8013710:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013712:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013716:	fbb2 f3f3 	udiv	r3, r2, r3
 801371a:	b29b      	uxth	r3, r3
 801371c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 8013720:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013722:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013726:	fbb3 f1f2 	udiv	r1, r3, r2
 801372a:	fb01 f202 	mul.w	r2, r1, r2
 801372e:	1a9b      	subs	r3, r3, r2
 8013730:	b29b      	uxth	r3, r3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d004      	beq.n	8013740 <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 8013736:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801373a:	3301      	adds	r3, #1
 801373c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8013740:	2300      	movs	r3, #0
 8013742:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8013746:	e04c      	b.n	80137e2 <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8013748:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 801374c:	3301      	adds	r3, #1
 801374e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013752:	fb02 f303 	mul.w	r3, r2, r3
 8013756:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013758:	4293      	cmp	r3, r2
 801375a:	dd0b      	ble.n	8013774 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 801375c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801375e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8013762:	b29b      	uxth	r3, r3
 8013764:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8013768:	fb11 f303 	smulbb	r3, r1, r3
 801376c:	b29b      	uxth	r3, r3
 801376e:	1ad3      	subs	r3, r2, r3
 8013770:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8013772:	e002      	b.n	801377a <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8013774:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013778:	877b      	strh	r3, [r7, #58]	@ 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 801377a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801377e:	4a3a      	ldr	r2, [pc, #232]	@ (8013868 <gos_gcpReceiveMessage+0x294>)
 8013780:	00db      	lsls	r3, r3, #3
 8013782:	4413      	add	r3, r2
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 801378a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 801378e:	fb01 f202 	mul.w	r2, r1, r2
 8013792:	4611      	mov	r1, r2
 8013794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013796:	440a      	add	r2, r1
 8013798:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 801379a:	4610      	mov	r0, r2
 801379c:	4798      	blx	r3
 801379e:	4603      	mov	r3, r0
 80137a0:	2b55      	cmp	r3, #85	@ 0x55
 80137a2:	d125      	bne.n	80137f0 <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 80137a4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80137a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80137a8:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 80137aa:	2301      	movs	r3, #1
 80137ac:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 80137ae:	f107 0318 	add.w	r3, r7, #24
 80137b2:	210c      	movs	r1, #12
 80137b4:	4618      	mov	r0, r3
 80137b6:	f002 fd4b 	bl	8016250 <gos_crcDriverGetCrc>
 80137ba:	4603      	mov	r3, r0
 80137bc:	627b      	str	r3, [r7, #36]	@ 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 80137be:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80137c2:	4a29      	ldr	r2, [pc, #164]	@ (8013868 <gos_gcpReceiveMessage+0x294>)
 80137c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80137c8:	f107 0218 	add.w	r2, r7, #24
 80137cc:	2110      	movs	r1, #16
 80137ce:	4610      	mov	r0, r2
 80137d0:	4798      	blx	r3
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b55      	cmp	r3, #85	@ 0x55
 80137d6:	d10d      	bne.n	80137f4 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80137d8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80137dc:	3301      	adds	r3, #1
 80137de:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80137e2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80137e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d3ac      	bcc.n	8013748 <gos_gcpReceiveMessage+0x174>
 80137ee:	e002      	b.n	80137f6 <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 80137f0:	bf00      	nop
 80137f2:	e000      	b.n	80137f6 <gos_gcpReceiveMessage+0x222>
                        	break;
 80137f4:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 80137f6:	f107 0217 	add.w	r2, r7, #23
 80137fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80137fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013800:	4618      	mov	r0, r3
 8013802:	f000 f860 	bl	80138c6 <gos_gcpValidateData>
 8013806:	4603      	mov	r3, r0
 8013808:	2b55      	cmp	r3, #85	@ 0x55
 801380a:	d118      	bne.n	801383e <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 801380c:	2355      	movs	r3, #85	@ 0x55
 801380e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8013812:	e014      	b.n	801383e <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 8013814:	7dfb      	ldrb	r3, [r7, #23]
 8013816:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8013818:	f107 0318 	add.w	r3, r7, #24
 801381c:	210c      	movs	r1, #12
 801381e:	4618      	mov	r0, r3
 8013820:	f002 fd16 	bl	8016250 <gos_crcDriverGetCrc>
 8013824:	4603      	mov	r3, r0
 8013826:	627b      	str	r3, [r7, #36]	@ 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 8013828:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801382c:	4a0e      	ldr	r2, [pc, #56]	@ (8013868 <gos_gcpReceiveMessage+0x294>)
 801382e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013832:	f107 0218 	add.w	r2, r7, #24
 8013836:	2110      	movs	r1, #16
 8013838:	4610      	mov	r0, r2
 801383a:	4798      	blx	r3
 801383c:	e000      	b.n	8013840 <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 801383e:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 8013840:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 8013844:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 8013848:	7bfb      	ldrb	r3, [r7, #15]
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	4a05      	ldr	r2, [pc, #20]	@ (8013864 <gos_gcpReceiveMessage+0x290>)
 801384e:	4413      	add	r3, r2
 8013850:	4618      	mov	r0, r3
 8013852:	f000 fbcd 	bl	8013ff0 <gos_mutexUnlock>
    return receiveMessageResult;
 8013856:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801385a:	4618      	mov	r0, r3
 801385c:	3750      	adds	r7, #80	@ 0x50
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	20005ed8 	.word	0x20005ed8
 8013868:	20005ed0 	.word	0x20005ed0

0801386c <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b084      	sub	sp, #16
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8013876:	23ae      	movs	r3, #174	@ 0xae
 8013878:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d01d      	beq.n	80138bc <gos_gcpValidateHeader+0x50>
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d01a      	beq.n	80138bc <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 8013886:	210c      	movs	r1, #12
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f002 fce1 	bl	8016250 <gos_crcDriverGetCrc>
 801388e:	4602      	mov	r2, r0
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	429a      	cmp	r2, r3
 8013896:	d10e      	bne.n	80138b6 <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	2b02      	cmp	r3, #2
 801389e:	d106      	bne.n	80138ae <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 80138a8:	2355      	movs	r3, #85	@ 0x55
 80138aa:	73fb      	strb	r3, [r7, #15]
 80138ac:	e006      	b.n	80138bc <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	2205      	movs	r2, #5
 80138b2:	701a      	strb	r2, [r3, #0]
 80138b4:	e002      	b.n	80138bc <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	2202      	movs	r2, #2
 80138ba:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3710      	adds	r7, #16
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}

080138c6 <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 80138c6:	b580      	push	{r7, lr}
 80138c8:	b086      	sub	sp, #24
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	60f8      	str	r0, [r7, #12]
 80138ce:	60b9      	str	r1, [r7, #8]
 80138d0:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 80138d2:	23ae      	movs	r3, #174	@ 0xae
 80138d4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d016      	beq.n	801390a <gos_gcpValidateData+0x44>
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d013      	beq.n	801390a <gos_gcpValidateData+0x44>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d010      	beq.n	801390a <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	88db      	ldrh	r3, [r3, #6]
 80138ec:	4619      	mov	r1, r3
 80138ee:	68b8      	ldr	r0, [r7, #8]
 80138f0:	f002 fcae 	bl	8016250 <gos_crcDriverGetCrc>
 80138f4:	4602      	mov	r2, r0
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d102      	bne.n	8013904 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 80138fe:	2355      	movs	r3, #85	@ 0x55
 8013900:	75fb      	strb	r3, [r7, #23]
 8013902:	e002      	b.n	801390a <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2202      	movs	r2, #2
 8013908:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 801390a:	7dfb      	ldrb	r3, [r7, #23]
}
 801390c:	4618      	mov	r0, r3
 801390e:	3718      	adds	r7, #24
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b082      	sub	sp, #8
 8013918:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_ERROR;
 801391a:	23ae      	movs	r3, #174	@ 0xae
 801391c:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 801391e:	2300      	movs	r3, #0
 8013920:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8013922:	2300      	movs	r3, #0
 8013924:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 8013926:	4b22      	ldr	r3, [pc, #136]	@ (80139b0 <gos_messageInit+0x9c>)
 8013928:	2200      	movs	r2, #0
 801392a:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 801392c:	4b21      	ldr	r3, [pc, #132]	@ (80139b4 <gos_messageInit+0xa0>)
 801392e:	2200      	movs	r2, #0
 8013930:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8013932:	2300      	movs	r3, #0
 8013934:	71bb      	strb	r3, [r7, #6]
 8013936:	e014      	b.n	8013962 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 8013938:	79bb      	ldrb	r3, [r7, #6]
 801393a:	4a1f      	ldr	r2, [pc, #124]	@ (80139b8 <gos_messageInit+0xa4>)
 801393c:	2154      	movs	r1, #84	@ 0x54
 801393e:	fb01 f303 	mul.w	r3, r1, r3
 8013942:	4413      	add	r3, r2
 8013944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013948:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 801394a:	79bb      	ldrb	r3, [r7, #6]
 801394c:	4a1a      	ldr	r2, [pc, #104]	@ (80139b8 <gos_messageInit+0xa4>)
 801394e:	2154      	movs	r1, #84	@ 0x54
 8013950:	fb01 f303 	mul.w	r3, r1, r3
 8013954:	4413      	add	r3, r2
 8013956:	3302      	adds	r3, #2
 8013958:	2200      	movs	r2, #0
 801395a:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 801395c:	79bb      	ldrb	r3, [r7, #6]
 801395e:	3301      	adds	r3, #1
 8013960:	71bb      	strb	r3, [r7, #6]
 8013962:	79bb      	ldrb	r3, [r7, #6]
 8013964:	2b0f      	cmp	r3, #15
 8013966:	d9e7      	bls.n	8013938 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8013968:	2300      	movs	r3, #0
 801396a:	717b      	strb	r3, [r7, #5]
 801396c:	e009      	b.n	8013982 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 801396e:	797b      	ldrb	r3, [r7, #5]
 8013970:	4a12      	ldr	r2, [pc, #72]	@ (80139bc <gos_messageInit+0xa8>)
 8013972:	015b      	lsls	r3, r3, #5
 8013974:	4413      	add	r3, r2
 8013976:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801397a:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 801397c:	797b      	ldrb	r3, [r7, #5]
 801397e:	3301      	adds	r3, #1
 8013980:	717b      	strb	r3, [r7, #5]
 8013982:	797b      	ldrb	r3, [r7, #5]
 8013984:	2b0f      	cmp	r3, #15
 8013986:	d9f2      	bls.n	801396e <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 8013988:	480d      	ldr	r0, [pc, #52]	@ (80139c0 <gos_messageInit+0xac>)
 801398a:	f000 fa11 	bl	8013db0 <gos_mutexInit>
 801398e:	4603      	mov	r3, r0
 8013990:	2b55      	cmp	r3, #85	@ 0x55
 8013992:	d108      	bne.n	80139a6 <gos_messageInit+0x92>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) == GOS_SUCCESS)
 8013994:	490b      	ldr	r1, [pc, #44]	@ (80139c4 <gos_messageInit+0xb0>)
 8013996:	480c      	ldr	r0, [pc, #48]	@ (80139c8 <gos_messageInit+0xb4>)
 8013998:	f7fd fd38 	bl	801140c <gos_taskRegister>
 801399c:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 801399e:	2b55      	cmp	r3, #85	@ 0x55
 80139a0:	d101      	bne.n	80139a6 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_SUCCESS;
 80139a2:	2355      	movs	r3, #85	@ 0x55
 80139a4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 80139a6:	79fb      	ldrb	r3, [r7, #7]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3708      	adds	r7, #8
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	20006622 	.word	0x20006622
 80139b4:	20006623 	.word	0x20006623
 80139b8:	20005ee0 	.word	0x20005ee0
 80139bc:	20006420 	.word	0x20006420
 80139c0:	20006624 	.word	0x20006624
 80139c4:	20006620 	.word	0x20006620
 80139c8:	20000fb4 	.word	0x20000fb4

080139cc <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 80139cc:	b590      	push	{r4, r7, lr}
 80139ce:	b087      	sub	sp, #28
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	4613      	mov	r3, r2
 80139d8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 80139da:	23ae      	movs	r3, #174	@ 0xae
 80139dc:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 80139de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80139e2:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 80139e4:	2300      	movs	r3, #0
 80139e6:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 80139e8:	2300      	movs	r3, #0
 80139ea:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 80139ec:	2300      	movs	r3, #0
 80139ee:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 80139f0:	2300      	movs	r3, #0
 80139f2:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f000 80d9 	beq.w	8013bae <gos_messageRx+0x1e2>
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f000 80d5 	beq.w	8013bae <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013a04:	f04f 31ff 	mov.w	r1, #4294967295
 8013a08:	486d      	ldr	r0, [pc, #436]	@ (8013bc0 <gos_messageRx+0x1f4>)
 8013a0a:	f000 f9eb 	bl	8013de4 <gos_mutexLock>
 8013a0e:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 8013a10:	2b55      	cmp	r3, #85	@ 0x55
 8013a12:	f040 80cc 	bne.w	8013bae <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8013a16:	4b6b      	ldr	r3, [pc, #428]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	4a6b      	ldr	r2, [pc, #428]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a1c:	015b      	lsls	r3, r3, #5
 8013a1e:	4413      	add	r3, r2
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a26:	f040 80c2 	bne.w	8013bae <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 8013a2a:	f107 0312 	add.w	r3, r7, #18
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7ff f892 	bl	8012b58 <gos_taskGetCurrentId>
 8013a34:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8013a36:	2b55      	cmp	r3, #85	@ 0x55
 8013a38:	f040 80b9 	bne.w	8013bae <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 8013a3c:	4b61      	ldr	r3, [pc, #388]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	8a79      	ldrh	r1, [r7, #18]
 8013a42:	4a61      	ldr	r2, [pc, #388]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a44:	015b      	lsls	r3, r3, #5
 8013a46:	4413      	add	r3, r2
 8013a48:	460a      	mov	r2, r1
 8013a4a:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 8013a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	4a5d      	ldr	r2, [pc, #372]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a52:	015b      	lsls	r3, r3, #5
 8013a54:	4413      	add	r3, r2
 8013a56:	3302      	adds	r3, #2
 8013a58:	88fa      	ldrh	r2, [r7, #6]
 8013a5a:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 8013a5c:	4b59      	ldr	r3, [pc, #356]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	4a59      	ldr	r2, [pc, #356]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a62:	015b      	lsls	r3, r3, #5
 8013a64:	4413      	add	r3, r2
 8013a66:	3304      	adds	r3, #4
 8013a68:	2200      	movs	r2, #0
 8013a6a:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 8013a6c:	4b55      	ldr	r3, [pc, #340]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	4a55      	ldr	r2, [pc, #340]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a72:	015b      	lsls	r3, r3, #5
 8013a74:	4413      	add	r3, r2
 8013a76:	3318      	adds	r3, #24
 8013a78:	68ba      	ldr	r2, [r7, #8]
 8013a7a:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 8013a7c:	4b51      	ldr	r3, [pc, #324]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	4a51      	ldr	r2, [pc, #324]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a82:	015b      	lsls	r3, r3, #5
 8013a84:	4413      	add	r3, r2
 8013a86:	331c      	adds	r3, #28
 8013a88:	2249      	movs	r2, #73	@ 0x49
 8013a8a:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 8013a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	015b      	lsls	r3, r3, #5
 8013a92:	4a4d      	ldr	r2, [pc, #308]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013a94:	4413      	add	r3, r2
 8013a96:	3306      	adds	r3, #6
 8013a98:	2210      	movs	r2, #16
 8013a9a:	2100      	movs	r1, #0
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f003 faaf 	bl	8017000 <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	757b      	strb	r3, [r7, #21]
 8013aa6:	e019      	b.n	8013adc <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 8013aa8:	7d7b      	ldrb	r3, [r7, #21]
 8013aaa:	005b      	lsls	r3, r3, #1
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	4413      	add	r3, r2
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d016      	beq.n	8013ae4 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 8013ab6:	7d7b      	ldrb	r3, [r7, #21]
 8013ab8:	005b      	lsls	r3, r3, #1
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	441a      	add	r2, r3
 8013abe:	4b41      	ldr	r3, [pc, #260]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	461c      	mov	r4, r3
 8013ac4:	7d7b      	ldrb	r3, [r7, #21]
 8013ac6:	8810      	ldrh	r0, [r2, #0]
 8013ac8:	493f      	ldr	r1, [pc, #252]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013aca:	0122      	lsls	r2, r4, #4
 8013acc:	4413      	add	r3, r2
 8013ace:	005b      	lsls	r3, r3, #1
 8013ad0:	440b      	add	r3, r1
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013ad6:	7d7b      	ldrb	r3, [r7, #21]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	757b      	strb	r3, [r7, #21]
 8013adc:	7d7b      	ldrb	r3, [r7, #21]
 8013ade:	2b07      	cmp	r3, #7
 8013ae0:	d9e2      	bls.n	8013aa8 <gos_messageRx+0xdc>
 8013ae2:	e000      	b.n	8013ae6 <gos_messageRx+0x11a>
                    break;
 8013ae4:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 8013ae6:	4b37      	ldr	r3, [pc, #220]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8013aec:	2300      	movs	r3, #0
 8013aee:	75bb      	strb	r3, [r7, #22]
 8013af0:	e018      	b.n	8013b24 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 8013af2:	4b34      	ldr	r3, [pc, #208]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	3301      	adds	r3, #1
 8013af8:	b2da      	uxtb	r2, r3
 8013afa:	4b32      	ldr	r3, [pc, #200]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013afc:	701a      	strb	r2, [r3, #0]
 8013afe:	4b31      	ldr	r3, [pc, #196]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013b00:	781b      	ldrb	r3, [r3, #0]
 8013b02:	2b10      	cmp	r3, #16
 8013b04:	d102      	bne.n	8013b0c <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 8013b06:	4b2f      	ldr	r3, [pc, #188]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013b08:	2200      	movs	r2, #0
 8013b0a:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 8013b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8013bc4 <gos_messageRx+0x1f8>)
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	4a2d      	ldr	r2, [pc, #180]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013b12:	015b      	lsls	r3, r3, #5
 8013b14:	4413      	add	r3, r2
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b1c:	d006      	beq.n	8013b2c <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8013b1e:	7dbb      	ldrb	r3, [r7, #22]
 8013b20:	3301      	adds	r3, #1
 8013b22:	75bb      	strb	r3, [r7, #22]
 8013b24:	7dbb      	ldrb	r3, [r7, #22]
 8013b26:	2b0f      	cmp	r3, #15
 8013b28:	d9e3      	bls.n	8013af2 <gos_messageRx+0x126>
 8013b2a:	e000      	b.n	8013b2e <gos_messageRx+0x162>
                {
                    break;
 8013b2c:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8013b2e:	4824      	ldr	r0, [pc, #144]	@ (8013bc0 <gos_messageRx+0x1f4>)
 8013b30:	f000 fa5e 	bl	8013ff0 <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 8013b34:	8a7b      	ldrh	r3, [r7, #18]
 8013b36:	f107 0210 	add.w	r2, r7, #16
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fe ff9b 	bl	8012a78 <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8013b42:	8a3b      	ldrh	r3, [r7, #16]
 8013b44:	b21b      	sxth	r3, r3
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	db12      	blt.n	8013b70 <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8013b4a:	8a7b      	ldrh	r3, [r7, #18]
 8013b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe fe2d 	bl	80127b0 <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8013b56:	8a7b      	ldrh	r3, [r7, #18]
 8013b58:	f04f 31ff 	mov.w	r1, #4294967295
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fe f90f 	bl	8011d80 <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8013b62:	8a7b      	ldrh	r3, [r7, #18]
 8013b64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fe fe99 	bl	80128a0 <gos_taskRemovePrivilege>
 8013b6e:	e005      	b.n	8013b7c <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8013b70:	8a7b      	ldrh	r3, [r7, #18]
 8013b72:	f04f 31ff 	mov.w	r1, #4294967295
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7fe f902 	bl	8011d80 <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 8013b7c:	7d3b      	ldrb	r3, [r7, #20]
 8013b7e:	4a12      	ldr	r2, [pc, #72]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013b80:	015b      	lsls	r3, r3, #5
 8013b82:	4413      	add	r3, r2
 8013b84:	331c      	adds	r3, #28
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	2b36      	cmp	r3, #54	@ 0x36
 8013b8a:	d102      	bne.n	8013b92 <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 8013b8c:	2355      	movs	r3, #85	@ 0x55
 8013b8e:	75fb      	strb	r3, [r7, #23]
 8013b90:	e006      	b.n	8013ba0 <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8013b92:	7d3b      	ldrb	r3, [r7, #20]
 8013b94:	4a0c      	ldr	r2, [pc, #48]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013b96:	015b      	lsls	r3, r3, #5
 8013b98:	4413      	add	r3, r2
 8013b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013b9e:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 8013ba0:	7d3b      	ldrb	r3, [r7, #20]
 8013ba2:	4a09      	ldr	r2, [pc, #36]	@ (8013bc8 <gos_messageRx+0x1fc>)
 8013ba4:	015b      	lsls	r3, r3, #5
 8013ba6:	4413      	add	r3, r2
 8013ba8:	331c      	adds	r3, #28
 8013baa:	2249      	movs	r2, #73	@ 0x49
 8013bac:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8013bae:	4804      	ldr	r0, [pc, #16]	@ (8013bc0 <gos_messageRx+0x1f4>)
 8013bb0:	f000 fa1e 	bl	8013ff0 <gos_mutexUnlock>

    return messageRxResult;
 8013bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	371c      	adds	r7, #28
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd90      	pop	{r4, r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	20006624 	.word	0x20006624
 8013bc4:	20006623 	.word	0x20006623
 8013bc8:	20006420 	.word	0x20006420

08013bcc <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8013bcc:	b590      	push	{r4, r7, lr}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013bde:	f04f 31ff 	mov.w	r1, #4294967295
 8013be2:	4870      	ldr	r0, [pc, #448]	@ (8013da4 <gos_messageDaemonTask+0x1d8>)
 8013be4:	f000 f8fe 	bl	8013de4 <gos_mutexLock>
 8013be8:	4603      	mov	r3, r0
 8013bea:	2b55      	cmp	r3, #85	@ 0x55
 8013bec:	f040 80d5 	bne.w	8013d9a <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	71bb      	strb	r3, [r7, #6]
 8013bf4:	e0ca      	b.n	8013d8c <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 8013bf6:	79bb      	ldrb	r3, [r7, #6]
 8013bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013bfa:	015b      	lsls	r3, r3, #5
 8013bfc:	4413      	add	r3, r2
 8013bfe:	881b      	ldrh	r3, [r3, #0]
 8013c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c04:	f000 80bf 	beq.w	8013d86 <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013c08:	2300      	movs	r3, #0
 8013c0a:	717b      	strb	r3, [r7, #5]
 8013c0c:	e077      	b.n	8013cfe <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8013c0e:	2300      	movs	r3, #0
 8013c10:	71fb      	strb	r3, [r7, #7]
 8013c12:	e06e      	b.n	8013cf2 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8013c14:	79ba      	ldrb	r2, [r7, #6]
 8013c16:	797b      	ldrb	r3, [r7, #5]
 8013c18:	4963      	ldr	r1, [pc, #396]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013c1a:	0112      	lsls	r2, r2, #4
 8013c1c:	4413      	add	r3, r2
 8013c1e:	005b      	lsls	r3, r3, #1
 8013c20:	440b      	add	r3, r1
 8013c22:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 8013c24:	79fb      	ldrb	r3, [r7, #7]
 8013c26:	4961      	ldr	r1, [pc, #388]	@ (8013dac <gos_messageDaemonTask+0x1e0>)
 8013c28:	2054      	movs	r0, #84	@ 0x54
 8013c2a:	fb00 f303 	mul.w	r3, r0, r3
 8013c2e:	440b      	add	r3, r1
 8013c30:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d15a      	bne.n	8013cec <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8013c36:	79bb      	ldrb	r3, [r7, #6]
 8013c38:	4a5b      	ldr	r2, [pc, #364]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013c3a:	015b      	lsls	r3, r3, #5
 8013c3c:	4413      	add	r3, r2
 8013c3e:	3318      	adds	r3, #24
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 8013c44:	79fb      	ldrb	r3, [r7, #7]
 8013c46:	2254      	movs	r2, #84	@ 0x54
 8013c48:	fb02 f303 	mul.w	r3, r2, r3
 8013c4c:	4a57      	ldr	r2, [pc, #348]	@ (8013dac <gos_messageDaemonTask+0x1e0>)
 8013c4e:	4413      	add	r3, r2
 8013c50:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 8013c52:	79fb      	ldrb	r3, [r7, #7]
 8013c54:	4a55      	ldr	r2, [pc, #340]	@ (8013dac <gos_messageDaemonTask+0x1e0>)
 8013c56:	2454      	movs	r4, #84	@ 0x54
 8013c58:	fb04 f303 	mul.w	r3, r4, r3
 8013c5c:	4413      	add	r3, r2
 8013c5e:	3302      	adds	r3, #2
 8013c60:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8013c62:	461a      	mov	r2, r3
 8013c64:	f003 fa63 	bl	801712e <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 8013c68:	79fa      	ldrb	r2, [r7, #7]
 8013c6a:	79bb      	ldrb	r3, [r7, #6]
 8013c6c:	494e      	ldr	r1, [pc, #312]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013c6e:	015b      	lsls	r3, r3, #5
 8013c70:	440b      	add	r3, r1
 8013c72:	3318      	adds	r3, #24
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	494d      	ldr	r1, [pc, #308]	@ (8013dac <gos_messageDaemonTask+0x1e0>)
 8013c78:	2054      	movs	r0, #84	@ 0x54
 8013c7a:	fb00 f202 	mul.w	r2, r0, r2
 8013c7e:	440a      	add	r2, r1
 8013c80:	3202      	adds	r2, #2
 8013c82:	7812      	ldrb	r2, [r2, #0]
 8013c84:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 8013c86:	79fa      	ldrb	r2, [r7, #7]
 8013c88:	79bb      	ldrb	r3, [r7, #6]
 8013c8a:	4947      	ldr	r1, [pc, #284]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013c8c:	015b      	lsls	r3, r3, #5
 8013c8e:	440b      	add	r3, r1
 8013c90:	3318      	adds	r3, #24
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	4945      	ldr	r1, [pc, #276]	@ (8013dac <gos_messageDaemonTask+0x1e0>)
 8013c96:	2054      	movs	r0, #84	@ 0x54
 8013c98:	fb00 f202 	mul.w	r2, r0, r2
 8013c9c:	440a      	add	r2, r1
 8013c9e:	8812      	ldrh	r2, [r2, #0]
 8013ca0:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8013ca2:	79bb      	ldrb	r3, [r7, #6]
 8013ca4:	4a40      	ldr	r2, [pc, #256]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013ca6:	015b      	lsls	r3, r3, #5
 8013ca8:	4413      	add	r3, r2
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fe f979 	bl	8011fa4 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8013cb2:	79fb      	ldrb	r3, [r7, #7]
 8013cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8013dac <gos_messageDaemonTask+0x1e0>)
 8013cb6:	2154      	movs	r1, #84	@ 0x54
 8013cb8:	fb01 f303 	mul.w	r3, r1, r3
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013cc2:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8013cc4:	79bb      	ldrb	r3, [r7, #6]
 8013cc6:	4a38      	ldr	r2, [pc, #224]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013cc8:	015b      	lsls	r3, r3, #5
 8013cca:	4413      	add	r3, r2
 8013ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013cd0:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 8013cd2:	79bb      	ldrb	r3, [r7, #6]
 8013cd4:	4a34      	ldr	r2, [pc, #208]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013cd6:	015b      	lsls	r3, r3, #5
 8013cd8:	4413      	add	r3, r2
 8013cda:	331c      	adds	r3, #28
 8013cdc:	2236      	movs	r2, #54	@ 0x36
 8013cde:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 8013ce0:	2310      	movs	r3, #16
 8013ce2:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 8013ce4:	2308      	movs	r3, #8
 8013ce6:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 8013ce8:	2310      	movs	r3, #16
 8013cea:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8013cec:	79fb      	ldrb	r3, [r7, #7]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	71fb      	strb	r3, [r7, #7]
 8013cf2:	79fb      	ldrb	r3, [r7, #7]
 8013cf4:	2b0f      	cmp	r3, #15
 8013cf6:	d98d      	bls.n	8013c14 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013cf8:	797b      	ldrb	r3, [r7, #5]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	717b      	strb	r3, [r7, #5]
 8013cfe:	797b      	ldrb	r3, [r7, #5]
 8013d00:	2b07      	cmp	r3, #7
 8013d02:	d984      	bls.n	8013c0e <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8013d04:	79bb      	ldrb	r3, [r7, #6]
 8013d06:	4a28      	ldr	r2, [pc, #160]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d08:	015b      	lsls	r3, r3, #5
 8013d0a:	4413      	add	r3, r2
 8013d0c:	331c      	adds	r3, #28
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	2b49      	cmp	r3, #73	@ 0x49
 8013d12:	d138      	bne.n	8013d86 <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 8013d14:	79bb      	ldrb	r3, [r7, #6]
 8013d16:	4a24      	ldr	r2, [pc, #144]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d18:	015b      	lsls	r3, r3, #5
 8013d1a:	4413      	add	r3, r2
 8013d1c:	3302      	adds	r3, #2
 8013d1e:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8013d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d02e      	beq.n	8013d86 <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 8013d28:	79bb      	ldrb	r3, [r7, #6]
 8013d2a:	491f      	ldr	r1, [pc, #124]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d2c:	015a      	lsls	r2, r3, #5
 8013d2e:	440a      	add	r2, r1
 8013d30:	3204      	adds	r2, #4
 8013d32:	8812      	ldrh	r2, [r2, #0]
 8013d34:	3201      	adds	r2, #1
 8013d36:	b291      	uxth	r1, r2
 8013d38:	4a1b      	ldr	r2, [pc, #108]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d3a:	015b      	lsls	r3, r3, #5
 8013d3c:	4413      	add	r3, r2
 8013d3e:	3304      	adds	r3, #4
 8013d40:	460a      	mov	r2, r1
 8013d42:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8013d44:	79bb      	ldrb	r3, [r7, #6]
 8013d46:	4a18      	ldr	r2, [pc, #96]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d48:	015b      	lsls	r3, r3, #5
 8013d4a:	4413      	add	r3, r2
 8013d4c:	3304      	adds	r3, #4
 8013d4e:	881b      	ldrh	r3, [r3, #0]
 8013d50:	461a      	mov	r2, r3
 8013d52:	2332      	movs	r3, #50	@ 0x32
 8013d54:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 8013d58:	79ba      	ldrb	r2, [r7, #6]
 8013d5a:	4913      	ldr	r1, [pc, #76]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d5c:	0152      	lsls	r2, r2, #5
 8013d5e:	440a      	add	r2, r1
 8013d60:	3202      	adds	r2, #2
 8013d62:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d90e      	bls.n	8013d86 <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8013d68:	79bb      	ldrb	r3, [r7, #6]
 8013d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d6c:	015b      	lsls	r3, r3, #5
 8013d6e:	4413      	add	r3, r2
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fe f916 	bl	8011fa4 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8013d78:	79bb      	ldrb	r3, [r7, #6]
 8013d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8013da8 <gos_messageDaemonTask+0x1dc>)
 8013d7c:	015b      	lsls	r3, r3, #5
 8013d7e:	4413      	add	r3, r2
 8013d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013d84:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8013d86:	79bb      	ldrb	r3, [r7, #6]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	71bb      	strb	r3, [r7, #6]
 8013d8c:	79bb      	ldrb	r3, [r7, #6]
 8013d8e:	2b0f      	cmp	r3, #15
 8013d90:	f67f af31 	bls.w	8013bf6 <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8013d94:	4803      	ldr	r0, [pc, #12]	@ (8013da4 <gos_messageDaemonTask+0x1d8>)
 8013d96:	f000 f92b 	bl	8013ff0 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 8013d9a:	2032      	movs	r0, #50	@ 0x32
 8013d9c:	f7fd fcc8 	bl	8011730 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013da0:	e71d      	b.n	8013bde <gos_messageDaemonTask+0x12>
 8013da2:	bf00      	nop
 8013da4:	20006624 	.word	0x20006624
 8013da8:	20006420 	.word	0x20006420
 8013dac:	20005ee0 	.word	0x20005ee0

08013db0 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b085      	sub	sp, #20
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 8013db8:	23ae      	movs	r3, #174	@ 0xae
 8013dba:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d008      	beq.n	8013dd4 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	22d2      	movs	r2, #210	@ 0xd2
 8013dc6:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013dce:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 8013dd0:	2355      	movs	r3, #85	@ 0x55
 8013dd2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 8013dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3714      	adds	r7, #20
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
	...

08013de4 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 8013dee:	23ae      	movs	r3, #174	@ 0xae
 8013df0:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 8013df2:	f7fc fae7 	bl	80103c4 <gos_kernelGetSysTicks>
 8013df6:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 8013df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013dfc:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 8013dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013e02:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 8013e04:	23ff      	movs	r3, #255	@ 0xff
 8013e06:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 8013e08:	23ff      	movs	r3, #255	@ 0xff
 8013e0a:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 8013e0c:	2349      	movs	r3, #73	@ 0x49
 8013e0e:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8013e10:	e0ce      	b.n	8013fb0 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 8013e12:	4b73      	ldr	r3, [pc, #460]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d108      	bne.n	8013e2c <gos_mutexLock+0x48>
 8013e1a:	b672      	cpsid	i
 8013e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e20:	4a70      	ldr	r2, [pc, #448]	@ (8013fe4 <gos_mutexLock+0x200>)
 8013e22:	6013      	str	r3, [r2, #0]
 8013e24:	f3bf 8f4f 	dsb	sy
 8013e28:	f3bf 8f6f 	isb	sy
 8013e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	3301      	adds	r3, #1
 8013e32:	b2da      	uxtb	r2, r3
 8013e34:	4b6a      	ldr	r3, [pc, #424]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013e36:	701a      	strb	r2, [r3, #0]
 8013e38:	4b6b      	ldr	r3, [pc, #428]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	b2da      	uxtb	r2, r3
 8013e40:	4b69      	ldr	r3, [pc, #420]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013e42:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	2bd2      	cmp	r3, #210	@ 0xd2
 8013e4a:	d13b      	bne.n	8013ec4 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 8013e4c:	7cfb      	ldrb	r3, [r7, #19]
 8013e4e:	2b36      	cmp	r3, #54	@ 0x36
 8013e50:	d12d      	bne.n	8013eae <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8013e52:	4b66      	ldr	r3, [pc, #408]	@ (8013fec <gos_mutexLock+0x208>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d105      	bne.n	8013e66 <gos_mutexLock+0x82>
 8013e5a:	4b63      	ldr	r3, [pc, #396]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	b2da      	uxtb	r2, r3
 8013e62:	4b61      	ldr	r3, [pc, #388]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013e64:	701a      	strb	r2, [r3, #0]
 8013e66:	4b61      	ldr	r3, [pc, #388]	@ (8013fec <gos_mutexLock+0x208>)
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	b2da      	uxtb	r2, r3
 8013e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8013fec <gos_mutexLock+0x208>)
 8013e70:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 8013e72:	7a7a      	ldrb	r2, [r7, #9]
 8013e74:	8abb      	ldrh	r3, [r7, #20]
 8013e76:	4611      	mov	r1, r2
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7fe faa1 	bl	80123c0 <gos_taskSetPriority>
                GOS_ISR_EXIT
 8013e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8013fec <gos_mutexLock+0x208>)
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d005      	beq.n	8013e92 <gos_mutexLock+0xae>
 8013e86:	4b59      	ldr	r3, [pc, #356]	@ (8013fec <gos_mutexLock+0x208>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	3b01      	subs	r3, #1
 8013e8c:	b2da      	uxtb	r2, r3
 8013e8e:	4b57      	ldr	r3, [pc, #348]	@ (8013fec <gos_mutexLock+0x208>)
 8013e90:	701a      	strb	r2, [r3, #0]
 8013e92:	4b56      	ldr	r3, [pc, #344]	@ (8013fec <gos_mutexLock+0x208>)
 8013e94:	781b      	ldrb	r3, [r3, #0]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d109      	bne.n	8013eae <gos_mutexLock+0xca>
 8013e9a:	4b53      	ldr	r3, [pc, #332]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d005      	beq.n	8013eae <gos_mutexLock+0xca>
 8013ea2:	4b51      	ldr	r3, [pc, #324]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	3b01      	subs	r3, #1
 8013ea8:	b2da      	uxtb	r2, r3
 8013eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013eac:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	226b      	movs	r2, #107	@ 0x6b
 8013eb2:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	3302      	adds	r3, #2
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fe fe4d 	bl	8012b58 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 8013ebe:	2355      	movs	r3, #85	@ 0x55
 8013ec0:	75fb      	strb	r3, [r7, #23]
 8013ec2:	e04b      	b.n	8013f5c <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	885b      	ldrh	r3, [r3, #2]
 8013ec8:	f107 0209 	add.w	r2, r7, #9
 8013ecc:	4611      	mov	r1, r2
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fe fbfe 	bl	80126d0 <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 8013ed4:	f107 030a 	add.w	r3, r7, #10
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7fe fe3d 	bl	8012b58 <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 8013ede:	897b      	ldrh	r3, [r7, #10]
 8013ee0:	f107 0208 	add.w	r2, r7, #8
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fe fbf2 	bl	80126d0 <gos_taskGetPriority>
            ownerId = pMutex->owner;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	885b      	ldrh	r3, [r3, #2]
 8013ef0:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 8013ef2:	7a3a      	ldrb	r2, [r7, #8]
 8013ef4:	7a7b      	ldrb	r3, [r7, #9]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d230      	bcs.n	8013f5c <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8013efa:	4b3c      	ldr	r3, [pc, #240]	@ (8013fec <gos_mutexLock+0x208>)
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d105      	bne.n	8013f0e <gos_mutexLock+0x12a>
 8013f02:	4b39      	ldr	r3, [pc, #228]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	3301      	adds	r3, #1
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	4b37      	ldr	r3, [pc, #220]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	4b37      	ldr	r3, [pc, #220]	@ (8013fec <gos_mutexLock+0x208>)
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	3301      	adds	r3, #1
 8013f14:	b2da      	uxtb	r2, r3
 8013f16:	4b35      	ldr	r3, [pc, #212]	@ (8013fec <gos_mutexLock+0x208>)
 8013f18:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	885b      	ldrh	r3, [r3, #2]
 8013f1e:	7a3a      	ldrb	r2, [r7, #8]
 8013f20:	4611      	mov	r1, r2
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7fe fa4c 	bl	80123c0 <gos_taskSetPriority>
                GOS_ISR_EXIT
 8013f28:	4b30      	ldr	r3, [pc, #192]	@ (8013fec <gos_mutexLock+0x208>)
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d005      	beq.n	8013f3c <gos_mutexLock+0x158>
 8013f30:	4b2e      	ldr	r3, [pc, #184]	@ (8013fec <gos_mutexLock+0x208>)
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	3b01      	subs	r3, #1
 8013f36:	b2da      	uxtb	r2, r3
 8013f38:	4b2c      	ldr	r3, [pc, #176]	@ (8013fec <gos_mutexLock+0x208>)
 8013f3a:	701a      	strb	r2, [r3, #0]
 8013f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8013fec <gos_mutexLock+0x208>)
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d109      	bne.n	8013f58 <gos_mutexLock+0x174>
 8013f44:	4b28      	ldr	r3, [pc, #160]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d005      	beq.n	8013f58 <gos_mutexLock+0x174>
 8013f4c:	4b26      	ldr	r3, [pc, #152]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	3b01      	subs	r3, #1
 8013f52:	b2da      	uxtb	r2, r3
 8013f54:	4b24      	ldr	r3, [pc, #144]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f56:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 8013f58:	2336      	movs	r3, #54	@ 0x36
 8013f5a:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 8013f5c:	4b20      	ldr	r3, [pc, #128]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d005      	beq.n	8013f70 <gos_mutexLock+0x18c>
 8013f64:	4b1e      	ldr	r3, [pc, #120]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	b2da      	uxtb	r2, r3
 8013f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013f6e:	701a      	strb	r2, [r3, #0]
 8013f70:	4b1b      	ldr	r3, [pc, #108]	@ (8013fe0 <gos_mutexLock+0x1fc>)
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d108      	bne.n	8013f8a <gos_mutexLock+0x1a6>
 8013f78:	4b1a      	ldr	r3, [pc, #104]	@ (8013fe4 <gos_mutexLock+0x200>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f383 8810 	msr	PRIMASK, r3
 8013f80:	b662      	cpsie	i
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	f3bf 8f6f 	isb	sy
 8013f8a:	4b17      	ldr	r3, [pc, #92]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d005      	beq.n	8013f9e <gos_mutexLock+0x1ba>
 8013f92:	4b15      	ldr	r3, [pc, #84]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	3b01      	subs	r3, #1
 8013f98:	b2da      	uxtb	r2, r3
 8013f9a:	4b13      	ldr	r3, [pc, #76]	@ (8013fe8 <gos_mutexLock+0x204>)
 8013f9c:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 8013f9e:	7dfb      	ldrb	r3, [r7, #23]
 8013fa0:	2b55      	cmp	r3, #85	@ 0x55
 8013fa2:	d017      	beq.n	8013fd4 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d002      	beq.n	8013fb0 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 8013faa:	2002      	movs	r0, #2
 8013fac:	f7fd fbc0 	bl	8011730 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00f      	beq.n	8013fd6 <gos_mutexLock+0x1f2>
 8013fb6:	f7fc fa05 	bl	80103c4 <gos_kernelGetSysTicks>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	1ad3      	subs	r3, r2, r3
 8013fc0:	683a      	ldr	r2, [r7, #0]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	f4bf af25 	bcs.w	8013e12 <gos_mutexLock+0x2e>
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fce:	f43f af20 	beq.w	8013e12 <gos_mutexLock+0x2e>
 8013fd2:	e000      	b.n	8013fd6 <gos_mutexLock+0x1f2>
            break;
 8013fd4:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 8013fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3718      	adds	r7, #24
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	20005e47 	.word	0x20005e47
 8013fe4:	20005e48 	.word	0x20005e48
 8013fe8:	20005e45 	.word	0x20005e45
 8013fec:	20005e46 	.word	0x20005e46

08013ff0 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 8013ff8:	23ae      	movs	r3, #174	@ 0xae
 8013ffa:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 8013ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014000:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d04c      	beq.n	80140a2 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 8014008:	4b28      	ldr	r3, [pc, #160]	@ (80140ac <gos_mutexUnlock+0xbc>)
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d108      	bne.n	8014022 <gos_mutexUnlock+0x32>
 8014010:	b672      	cpsid	i
 8014012:	f3ef 8310 	mrs	r3, PRIMASK
 8014016:	4a26      	ldr	r2, [pc, #152]	@ (80140b0 <gos_mutexUnlock+0xc0>)
 8014018:	6013      	str	r3, [r2, #0]
 801401a:	f3bf 8f4f 	dsb	sy
 801401e:	f3bf 8f6f 	isb	sy
 8014022:	4b22      	ldr	r3, [pc, #136]	@ (80140ac <gos_mutexUnlock+0xbc>)
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	3301      	adds	r3, #1
 8014028:	b2da      	uxtb	r2, r3
 801402a:	4b20      	ldr	r3, [pc, #128]	@ (80140ac <gos_mutexUnlock+0xbc>)
 801402c:	701a      	strb	r2, [r3, #0]
 801402e:	4b21      	ldr	r3, [pc, #132]	@ (80140b4 <gos_mutexUnlock+0xc4>)
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	3301      	adds	r3, #1
 8014034:	b2da      	uxtb	r2, r3
 8014036:	4b1f      	ldr	r3, [pc, #124]	@ (80140b4 <gos_mutexUnlock+0xc4>)
 8014038:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 801403a:	f107 030c 	add.w	r3, r7, #12
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe fd8a 	bl	8012b58 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	885a      	ldrh	r2, [r3, #2]
 8014048:	89bb      	ldrh	r3, [r7, #12]
 801404a:	429a      	cmp	r2, r3
 801404c:	d108      	bne.n	8014060 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	22d2      	movs	r2, #210	@ 0xd2
 8014052:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801405a:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 801405c:	2355      	movs	r3, #85	@ 0x55
 801405e:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 8014060:	4b12      	ldr	r3, [pc, #72]	@ (80140ac <gos_mutexUnlock+0xbc>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d005      	beq.n	8014074 <gos_mutexUnlock+0x84>
 8014068:	4b10      	ldr	r3, [pc, #64]	@ (80140ac <gos_mutexUnlock+0xbc>)
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	3b01      	subs	r3, #1
 801406e:	b2da      	uxtb	r2, r3
 8014070:	4b0e      	ldr	r3, [pc, #56]	@ (80140ac <gos_mutexUnlock+0xbc>)
 8014072:	701a      	strb	r2, [r3, #0]
 8014074:	4b0d      	ldr	r3, [pc, #52]	@ (80140ac <gos_mutexUnlock+0xbc>)
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d108      	bne.n	801408e <gos_mutexUnlock+0x9e>
 801407c:	4b0c      	ldr	r3, [pc, #48]	@ (80140b0 <gos_mutexUnlock+0xc0>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f383 8810 	msr	PRIMASK, r3
 8014084:	b662      	cpsie	i
 8014086:	f3bf 8f4f 	dsb	sy
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	4b09      	ldr	r3, [pc, #36]	@ (80140b4 <gos_mutexUnlock+0xc4>)
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d005      	beq.n	80140a2 <gos_mutexUnlock+0xb2>
 8014096:	4b07      	ldr	r3, [pc, #28]	@ (80140b4 <gos_mutexUnlock+0xc4>)
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	3b01      	subs	r3, #1
 801409c:	b2da      	uxtb	r2, r3
 801409e:	4b05      	ldr	r3, [pc, #20]	@ (80140b4 <gos_mutexUnlock+0xc4>)
 80140a0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 80140a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	20005e47 	.word	0x20005e47
 80140b0:	20005e48 	.word	0x20005e48
 80140b4:	20005e45 	.word	0x20005e45

080140b8 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_ERROR;
 80140be:	23ae      	movs	r3, #174	@ 0xae
 80140c0:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 80140c2:	2300      	movs	r3, #0
 80140c4:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 80140c6:	2300      	movs	r3, #0
 80140c8:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80140ca:	2300      	movs	r3, #0
 80140cc:	71fb      	strb	r3, [r7, #7]
 80140ce:	e038      	b.n	8014142 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 80140d0:	79fb      	ldrb	r3, [r7, #7]
 80140d2:	4a22      	ldr	r2, [pc, #136]	@ (801415c <gos_queueInit+0xa4>)
 80140d4:	2100      	movs	r1, #0
 80140d6:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 80140d8:	79fb      	ldrb	r3, [r7, #7]
 80140da:	4a21      	ldr	r2, [pc, #132]	@ (8014160 <gos_queueInit+0xa8>)
 80140dc:	2100      	movs	r1, #0
 80140de:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 80140e0:	79fb      	ldrb	r3, [r7, #7]
 80140e2:	4a20      	ldr	r2, [pc, #128]	@ (8014164 <gos_queueInit+0xac>)
 80140e4:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80140e8:	fb01 f303 	mul.w	r3, r1, r3
 80140ec:	4413      	add	r3, r2
 80140ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80140f2:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 80140f4:	79fb      	ldrb	r3, [r7, #7]
 80140f6:	4a1b      	ldr	r2, [pc, #108]	@ (8014164 <gos_queueInit+0xac>)
 80140f8:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80140fc:	fb01 f303 	mul.w	r3, r1, r3
 8014100:	4413      	add	r3, r2
 8014102:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014106:	3308      	adds	r3, #8
 8014108:	2200      	movs	r2, #0
 801410a:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 801410c:	2300      	movs	r3, #0
 801410e:	71bb      	strb	r3, [r7, #6]
 8014110:	e011      	b.n	8014136 <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 8014112:	79fb      	ldrb	r3, [r7, #7]
 8014114:	79ba      	ldrb	r2, [r7, #6]
 8014116:	4913      	ldr	r1, [pc, #76]	@ (8014164 <gos_queueInit+0xac>)
 8014118:	20c9      	movs	r0, #201	@ 0xc9
 801411a:	fb00 f202 	mul.w	r2, r0, r2
 801411e:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 8014122:	fb00 f303 	mul.w	r3, r0, r3
 8014126:	4413      	add	r3, r2
 8014128:	440b      	add	r3, r1
 801412a:	33e2      	adds	r3, #226	@ 0xe2
 801412c:	2200      	movs	r2, #0
 801412e:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8014130:	79bb      	ldrb	r3, [r7, #6]
 8014132:	3301      	adds	r3, #1
 8014134:	71bb      	strb	r3, [r7, #6]
 8014136:	79bb      	ldrb	r3, [r7, #6]
 8014138:	2b1d      	cmp	r3, #29
 801413a:	d9ea      	bls.n	8014112 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 801413c:	79fb      	ldrb	r3, [r7, #7]
 801413e:	3301      	adds	r3, #1
 8014140:	71fb      	strb	r3, [r7, #7]
 8014142:	79fb      	ldrb	r3, [r7, #7]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d0c3      	beq.n	80140d0 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 8014148:	4807      	ldr	r0, [pc, #28]	@ (8014168 <gos_queueInit+0xb0>)
 801414a:	f7ff fe31 	bl	8013db0 <gos_mutexInit>
 801414e:	4603      	mov	r3, r0
 8014150:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 8014152:	797b      	ldrb	r3, [r7, #5]
}
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	20007dd4 	.word	0x20007dd4
 8014160:	20007dd8 	.word	0x20007dd8
 8014164:	20006628 	.word	0x20006628
 8014168:	20007ddc 	.word	0x20007ddc

0801416c <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 8014174:	23ae      	movs	r3, #174	@ 0xae
 8014176:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 8014178:	2300      	movs	r3, #0
 801417a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d048      	beq.n	8014214 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014182:	2300      	movs	r3, #0
 8014184:	73bb      	strb	r3, [r7, #14]
 8014186:	e042      	b.n	801420e <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8014188:	7bbb      	ldrb	r3, [r7, #14]
 801418a:	4a25      	ldr	r2, [pc, #148]	@ (8014220 <gos_queueCreate+0xb4>)
 801418c:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014190:	fb01 f303 	mul.w	r3, r1, r3
 8014194:	4413      	add	r3, r2
 8014196:	881b      	ldrh	r3, [r3, #0]
 8014198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801419c:	d134      	bne.n	8014208 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 801419e:	7bbb      	ldrb	r3, [r7, #14]
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	7bbb      	ldrb	r3, [r7, #14]
 80141a4:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80141a8:	b290      	uxth	r0, r2
 80141aa:	4a1d      	ldr	r2, [pc, #116]	@ (8014220 <gos_queueCreate+0xb4>)
 80141ac:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80141b0:	fb01 f303 	mul.w	r3, r1, r3
 80141b4:	4413      	add	r3, r2
 80141b6:	4602      	mov	r2, r0
 80141b8:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 80141ba:	7bbb      	ldrb	r3, [r7, #14]
 80141bc:	4a18      	ldr	r2, [pc, #96]	@ (8014220 <gos_queueCreate+0xb4>)
 80141be:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80141c2:	fb01 f303 	mul.w	r3, r1, r3
 80141c6:	4413      	add	r3, r2
 80141c8:	881a      	ldrh	r2, [r3, #0]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	3302      	adds	r3, #2
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d015      	beq.n	8014202 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	3302      	adds	r3, #2
 80141da:	4618      	mov	r0, r3
 80141dc:	f7ec f868 	bl	80002b0 <strlen>
 80141e0:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 80141e2:	2b18      	cmp	r3, #24
 80141e4:	d80d      	bhi.n	8014202 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 80141e6:	7bbb      	ldrb	r3, [r7, #14]
 80141e8:	f241 72aa 	movw	r2, #6058	@ 0x17aa
 80141ec:	fb02 f303 	mul.w	r3, r2, r3
 80141f0:	4a0b      	ldr	r2, [pc, #44]	@ (8014220 <gos_queueCreate+0xb4>)
 80141f2:	4413      	add	r3, r2
 80141f4:	1c9a      	adds	r2, r3, #2
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	3302      	adds	r3, #2
 80141fa:	4619      	mov	r1, r3
 80141fc:	4610      	mov	r0, r2
 80141fe:	f002 ff8e 	bl	801711e <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 8014202:	2355      	movs	r3, #85	@ 0x55
 8014204:	73fb      	strb	r3, [r7, #15]
                break;
 8014206:	e005      	b.n	8014214 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014208:	7bbb      	ldrb	r3, [r7, #14]
 801420a:	3301      	adds	r3, #1
 801420c:	73bb      	strb	r3, [r7, #14]
 801420e:	7bbb      	ldrb	r3, [r7, #14]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d0b9      	beq.n	8014188 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8014214:	7bfb      	ldrb	r3, [r7, #15]
}
 8014216:	4618      	mov	r0, r3
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	20006628 	.word	0x20006628

08014224 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	60b9      	str	r1, [r7, #8]
 801422c:	607b      	str	r3, [r7, #4]
 801422e:	4603      	mov	r3, r0
 8014230:	81fb      	strh	r3, [r7, #14]
 8014232:	4613      	mov	r3, r2
 8014234:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 8014236:	23ae      	movs	r3, #174	@ 0xae
 8014238:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 801423a:	2300      	movs	r3, #0
 801423c:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	485a      	ldr	r0, [pc, #360]	@ (80143ac <gos_queuePut+0x188>)
 8014242:	f7ff fdcf 	bl	8013de4 <gos_mutexLock>
 8014246:	4603      	mov	r3, r0
 8014248:	2b55      	cmp	r3, #85	@ 0x55
 801424a:	f040 80a6 	bne.w	801439a <gos_queuePut+0x176>
 801424e:	89fb      	ldrh	r3, [r7, #14]
 8014250:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014254:	f0c0 80a1 	bcc.w	801439a <gos_queuePut+0x176>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8014258:	89fb      	ldrh	r3, [r7, #14]
 801425a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801425e:	f200 809c 	bhi.w	801439a <gos_queuePut+0x176>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	2b00      	cmp	r3, #0
 8014266:	f000 8098 	beq.w	801439a <gos_queuePut+0x176>
        element                                          != NULL                 &&
 801426a:	7b7b      	ldrb	r3, [r7, #13]
 801426c:	2bc8      	cmp	r3, #200	@ 0xc8
 801426e:	f200 8094 	bhi.w	801439a <gos_queuePut+0x176>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8014272:	89fb      	ldrh	r3, [r7, #14]
 8014274:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8014278:	4a4d      	ldr	r2, [pc, #308]	@ (80143b0 <gos_queuePut+0x18c>)
 801427a:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801427e:	fb01 f303 	mul.w	r3, r1, r3
 8014282:	4413      	add	r3, r2
 8014284:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 8014286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801428a:	f000 8086 	beq.w	801439a <gos_queuePut+0x176>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 801428e:	89fb      	ldrh	r3, [r7, #14]
 8014290:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8014292:	7dbb      	ldrb	r3, [r7, #22]
 8014294:	4a47      	ldr	r2, [pc, #284]	@ (80143b4 <gos_queuePut+0x190>)
 8014296:	5cd3      	ldrb	r3, [r2, r3]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d009      	beq.n	80142b0 <gos_queuePut+0x8c>
 801429c:	7dbb      	ldrb	r3, [r7, #22]
 801429e:	4a46      	ldr	r2, [pc, #280]	@ (80143b8 <gos_queuePut+0x194>)
 80142a0:	5cd3      	ldrb	r3, [r2, r3]
 80142a2:	4619      	mov	r1, r3
 80142a4:	7dbb      	ldrb	r3, [r7, #22]
 80142a6:	4a43      	ldr	r2, [pc, #268]	@ (80143b4 <gos_queuePut+0x190>)
 80142a8:	5cd3      	ldrb	r3, [r2, r3]
 80142aa:	3b01      	subs	r3, #1
 80142ac:	4299      	cmp	r1, r3
 80142ae:	d109      	bne.n	80142c4 <gos_queuePut+0xa0>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 80142b0:	7dbb      	ldrb	r3, [r7, #22]
 80142b2:	4a40      	ldr	r2, [pc, #256]	@ (80143b4 <gos_queuePut+0x190>)
 80142b4:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d16f      	bne.n	801439a <gos_queuePut+0x176>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 80142ba:	7dbb      	ldrb	r3, [r7, #22]
 80142bc:	4a3e      	ldr	r2, [pc, #248]	@ (80143b8 <gos_queuePut+0x194>)
 80142be:	5cd3      	ldrb	r3, [r2, r3]
 80142c0:	2b1d      	cmp	r3, #29
 80142c2:	d06a      	beq.n	801439a <gos_queuePut+0x176>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 80142c4:	7dbb      	ldrb	r3, [r7, #22]
 80142c6:	7dba      	ldrb	r2, [r7, #22]
 80142c8:	493b      	ldr	r1, [pc, #236]	@ (80143b8 <gos_queuePut+0x194>)
 80142ca:	5c8a      	ldrb	r2, [r1, r2]
 80142cc:	4611      	mov	r1, r2
 80142ce:	22c9      	movs	r2, #201	@ 0xc9
 80142d0:	fb01 f202 	mul.w	r2, r1, r2
 80142d4:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80142d8:	fb01 f303 	mul.w	r3, r1, r3
 80142dc:	4413      	add	r3, r2
 80142de:	3318      	adds	r3, #24
 80142e0:	4a33      	ldr	r2, [pc, #204]	@ (80143b0 <gos_queuePut+0x18c>)
 80142e2:	4413      	add	r3, r2
 80142e4:	3302      	adds	r3, #2
            (void_t) memcpy(
 80142e6:	7b7a      	ldrb	r2, [r7, #13]
 80142e8:	68b9      	ldr	r1, [r7, #8]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f002 ff1f 	bl	801712e <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 80142f0:	7dbb      	ldrb	r3, [r7, #22]
 80142f2:	7dba      	ldrb	r2, [r7, #22]
 80142f4:	4930      	ldr	r1, [pc, #192]	@ (80143b8 <gos_queuePut+0x194>)
 80142f6:	5c8a      	ldrb	r2, [r1, r2]
 80142f8:	4610      	mov	r0, r2
 80142fa:	492d      	ldr	r1, [pc, #180]	@ (80143b0 <gos_queuePut+0x18c>)
 80142fc:	22c9      	movs	r2, #201	@ 0xc9
 80142fe:	fb00 f202 	mul.w	r2, r0, r2
 8014302:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 8014306:	fb00 f303 	mul.w	r3, r0, r3
 801430a:	4413      	add	r3, r2
 801430c:	440b      	add	r3, r1
 801430e:	33e2      	adds	r3, #226	@ 0xe2
 8014310:	7b7a      	ldrb	r2, [r7, #13]
 8014312:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 8014314:	7dbb      	ldrb	r3, [r7, #22]
 8014316:	4a28      	ldr	r2, [pc, #160]	@ (80143b8 <gos_queuePut+0x194>)
 8014318:	5cd2      	ldrb	r2, [r2, r3]
 801431a:	3201      	adds	r2, #1
 801431c:	b2d1      	uxtb	r1, r2
 801431e:	4a26      	ldr	r2, [pc, #152]	@ (80143b8 <gos_queuePut+0x194>)
 8014320:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8014322:	7dba      	ldrb	r2, [r7, #22]
 8014324:	4922      	ldr	r1, [pc, #136]	@ (80143b0 <gos_queuePut+0x18c>)
 8014326:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 801432a:	fb02 f303 	mul.w	r3, r2, r3
 801432e:	440b      	add	r3, r1
 8014330:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014334:	3308      	adds	r3, #8
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	3301      	adds	r3, #1
 801433a:	b2d8      	uxtb	r0, r3
 801433c:	491c      	ldr	r1, [pc, #112]	@ (80143b0 <gos_queuePut+0x18c>)
 801433e:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 8014342:	fb02 f303 	mul.w	r3, r2, r3
 8014346:	440b      	add	r3, r1
 8014348:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 801434c:	3308      	adds	r3, #8
 801434e:	4602      	mov	r2, r0
 8014350:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8014352:	7dbb      	ldrb	r3, [r7, #22]
 8014354:	4a18      	ldr	r2, [pc, #96]	@ (80143b8 <gos_queuePut+0x194>)
 8014356:	5cd3      	ldrb	r3, [r2, r3]
 8014358:	2b1d      	cmp	r3, #29
 801435a:	d903      	bls.n	8014364 <gos_queuePut+0x140>
            {
                writeCounters[queueIndex] = 0u;
 801435c:	7dbb      	ldrb	r3, [r7, #22]
 801435e:	4a16      	ldr	r2, [pc, #88]	@ (80143b8 <gos_queuePut+0x194>)
 8014360:	2100      	movs	r1, #0
 8014362:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8014364:	7dbb      	ldrb	r3, [r7, #22]
 8014366:	4a12      	ldr	r2, [pc, #72]	@ (80143b0 <gos_queuePut+0x18c>)
 8014368:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801436c:	fb01 f303 	mul.w	r3, r1, r3
 8014370:	4413      	add	r3, r2
 8014372:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014376:	3308      	adds	r3, #8
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	2b1d      	cmp	r3, #29
 801437c:	d10b      	bne.n	8014396 <gos_queuePut+0x172>
                queueFullHook != NULL)
 801437e:	4b0f      	ldr	r3, [pc, #60]	@ (80143bc <gos_queuePut+0x198>)
 8014380:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8014382:	2b00      	cmp	r3, #0
 8014384:	d007      	beq.n	8014396 <gos_queuePut+0x172>
            {
                gos_mutexUnlock(&queueMutex);
 8014386:	4809      	ldr	r0, [pc, #36]	@ (80143ac <gos_queuePut+0x188>)
 8014388:	f7ff fe32 	bl	8013ff0 <gos_mutexUnlock>
                queueFullHook(queueId);
 801438c:	4b0b      	ldr	r3, [pc, #44]	@ (80143bc <gos_queuePut+0x198>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	89fa      	ldrh	r2, [r7, #14]
 8014392:	4610      	mov	r0, r2
 8014394:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 8014396:	2355      	movs	r3, #85	@ 0x55
 8014398:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 801439a:	4804      	ldr	r0, [pc, #16]	@ (80143ac <gos_queuePut+0x188>)
 801439c:	f7ff fe28 	bl	8013ff0 <gos_mutexUnlock>

    return queuePutResult;
 80143a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3718      	adds	r7, #24
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	20007ddc 	.word	0x20007ddc
 80143b0:	20006628 	.word	0x20006628
 80143b4:	20007dd4 	.word	0x20007dd4
 80143b8:	20007dd8 	.word	0x20007dd8
 80143bc:	20007de0 	.word	0x20007de0

080143c0 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 80143c0:	b590      	push	{r4, r7, lr}
 80143c2:	b087      	sub	sp, #28
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60b9      	str	r1, [r7, #8]
 80143c8:	607b      	str	r3, [r7, #4]
 80143ca:	4603      	mov	r3, r0
 80143cc:	81fb      	strh	r3, [r7, #14]
 80143ce:	4613      	mov	r3, r2
 80143d0:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 80143d2:	23ae      	movs	r3, #174	@ 0xae
 80143d4:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 80143d6:	2300      	movs	r3, #0
 80143d8:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 80143da:	6879      	ldr	r1, [r7, #4]
 80143dc:	4864      	ldr	r0, [pc, #400]	@ (8014570 <gos_queueGet+0x1b0>)
 80143de:	f7ff fd01 	bl	8013de4 <gos_mutexLock>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b55      	cmp	r3, #85	@ 0x55
 80143e6:	f040 80ba 	bne.w	801455e <gos_queueGet+0x19e>
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	f000 80b6 	beq.w	801455e <gos_queueGet+0x19e>
        target                                           != NULL                 &&
 80143f2:	89fb      	ldrh	r3, [r7, #14]
 80143f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80143f8:	f0c0 80b1 	bcc.w	801455e <gos_queueGet+0x19e>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 80143fc:	89fb      	ldrh	r3, [r7, #14]
 80143fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014402:	f200 80ac 	bhi.w	801455e <gos_queueGet+0x19e>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8014406:	89fb      	ldrh	r3, [r7, #14]
 8014408:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 801440c:	4a59      	ldr	r2, [pc, #356]	@ (8014574 <gos_queueGet+0x1b4>)
 801440e:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014412:	fb01 f303 	mul.w	r3, r1, r3
 8014416:	4413      	add	r3, r2
 8014418:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 801441a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801441e:	f000 809e 	beq.w	801455e <gos_queueGet+0x19e>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8014422:	89fb      	ldrh	r3, [r7, #14]
 8014424:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8014428:	89fa      	ldrh	r2, [r7, #14]
 801442a:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 801442e:	4952      	ldr	r1, [pc, #328]	@ (8014578 <gos_queueGet+0x1b8>)
 8014430:	5c8a      	ldrb	r2, [r1, r2]
 8014432:	4610      	mov	r0, r2
 8014434:	494f      	ldr	r1, [pc, #316]	@ (8014574 <gos_queueGet+0x1b4>)
 8014436:	22c9      	movs	r2, #201	@ 0xc9
 8014438:	fb00 f202 	mul.w	r2, r0, r2
 801443c:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 8014440:	fb00 f303 	mul.w	r3, r0, r3
 8014444:	4413      	add	r3, r2
 8014446:	440b      	add	r3, r1
 8014448:	33e2      	adds	r3, #226	@ 0xe2
 801444a:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 801444c:	7b7a      	ldrb	r2, [r7, #13]
 801444e:	429a      	cmp	r2, r3
 8014450:	f0c0 8085 	bcc.w	801455e <gos_queueGet+0x19e>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8014454:	89fb      	ldrh	r3, [r7, #14]
 8014456:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 8014458:	7dbb      	ldrb	r3, [r7, #22]
 801445a:	4a47      	ldr	r2, [pc, #284]	@ (8014578 <gos_queueGet+0x1b8>)
 801445c:	5cd2      	ldrb	r2, [r2, r3]
 801445e:	7dbb      	ldrb	r3, [r7, #22]
 8014460:	4946      	ldr	r1, [pc, #280]	@ (801457c <gos_queueGet+0x1bc>)
 8014462:	5ccb      	ldrb	r3, [r1, r3]
 8014464:	429a      	cmp	r2, r3
 8014466:	d07a      	beq.n	801455e <gos_queueGet+0x19e>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 8014468:	7dbb      	ldrb	r3, [r7, #22]
 801446a:	7dba      	ldrb	r2, [r7, #22]
 801446c:	4942      	ldr	r1, [pc, #264]	@ (8014578 <gos_queueGet+0x1b8>)
 801446e:	5c8a      	ldrb	r2, [r1, r2]
 8014470:	4611      	mov	r1, r2
 8014472:	22c9      	movs	r2, #201	@ 0xc9
 8014474:	fb01 f202 	mul.w	r2, r1, r2
 8014478:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801447c:	fb01 f303 	mul.w	r3, r1, r3
 8014480:	4413      	add	r3, r2
 8014482:	3318      	adds	r3, #24
 8014484:	4a3b      	ldr	r2, [pc, #236]	@ (8014574 <gos_queueGet+0x1b4>)
 8014486:	4413      	add	r3, r2
 8014488:	1c99      	adds	r1, r3, #2
 801448a:	7dbb      	ldrb	r3, [r7, #22]
 801448c:	7dba      	ldrb	r2, [r7, #22]
 801448e:	483a      	ldr	r0, [pc, #232]	@ (8014578 <gos_queueGet+0x1b8>)
 8014490:	5c82      	ldrb	r2, [r0, r2]
 8014492:	4614      	mov	r4, r2
 8014494:	4837      	ldr	r0, [pc, #220]	@ (8014574 <gos_queueGet+0x1b4>)
 8014496:	22c9      	movs	r2, #201	@ 0xc9
 8014498:	fb04 f202 	mul.w	r2, r4, r2
 801449c:	f241 74aa 	movw	r4, #6058	@ 0x17aa
 80144a0:	fb04 f303 	mul.w	r3, r4, r3
 80144a4:	4413      	add	r3, r2
 80144a6:	4403      	add	r3, r0
 80144a8:	33e2      	adds	r3, #226	@ 0xe2
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	461a      	mov	r2, r3
 80144ae:	68b8      	ldr	r0, [r7, #8]
 80144b0:	f002 fe3d 	bl	801712e <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 80144b4:	7dbb      	ldrb	r3, [r7, #22]
 80144b6:	7dba      	ldrb	r2, [r7, #22]
 80144b8:	492f      	ldr	r1, [pc, #188]	@ (8014578 <gos_queueGet+0x1b8>)
 80144ba:	5c8a      	ldrb	r2, [r1, r2]
 80144bc:	4610      	mov	r0, r2
 80144be:	492d      	ldr	r1, [pc, #180]	@ (8014574 <gos_queueGet+0x1b4>)
 80144c0:	22c9      	movs	r2, #201	@ 0xc9
 80144c2:	fb00 f202 	mul.w	r2, r0, r2
 80144c6:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 80144ca:	fb00 f303 	mul.w	r3, r0, r3
 80144ce:	4413      	add	r3, r2
 80144d0:	440b      	add	r3, r1
 80144d2:	33e2      	adds	r3, #226	@ 0xe2
 80144d4:	2200      	movs	r2, #0
 80144d6:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 80144d8:	7dbb      	ldrb	r3, [r7, #22]
 80144da:	4a27      	ldr	r2, [pc, #156]	@ (8014578 <gos_queueGet+0x1b8>)
 80144dc:	5cd2      	ldrb	r2, [r2, r3]
 80144de:	3201      	adds	r2, #1
 80144e0:	b2d1      	uxtb	r1, r2
 80144e2:	4a25      	ldr	r2, [pc, #148]	@ (8014578 <gos_queueGet+0x1b8>)
 80144e4:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 80144e6:	7dba      	ldrb	r2, [r7, #22]
 80144e8:	4922      	ldr	r1, [pc, #136]	@ (8014574 <gos_queueGet+0x1b4>)
 80144ea:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 80144ee:	fb02 f303 	mul.w	r3, r2, r3
 80144f2:	440b      	add	r3, r1
 80144f4:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 80144f8:	3308      	adds	r3, #8
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	3b01      	subs	r3, #1
 80144fe:	b2d8      	uxtb	r0, r3
 8014500:	491c      	ldr	r1, [pc, #112]	@ (8014574 <gos_queueGet+0x1b4>)
 8014502:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 8014506:	fb02 f303 	mul.w	r3, r2, r3
 801450a:	440b      	add	r3, r1
 801450c:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014510:	3308      	adds	r3, #8
 8014512:	4602      	mov	r2, r0
 8014514:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8014516:	7dbb      	ldrb	r3, [r7, #22]
 8014518:	4a17      	ldr	r2, [pc, #92]	@ (8014578 <gos_queueGet+0x1b8>)
 801451a:	5cd3      	ldrb	r3, [r2, r3]
 801451c:	2b1d      	cmp	r3, #29
 801451e:	d903      	bls.n	8014528 <gos_queueGet+0x168>
            {
                readCounters[queueIndex] = 0u;
 8014520:	7dbb      	ldrb	r3, [r7, #22]
 8014522:	4a15      	ldr	r2, [pc, #84]	@ (8014578 <gos_queueGet+0x1b8>)
 8014524:	2100      	movs	r1, #0
 8014526:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 8014528:	7dbb      	ldrb	r3, [r7, #22]
 801452a:	4a12      	ldr	r2, [pc, #72]	@ (8014574 <gos_queueGet+0x1b4>)
 801452c:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014530:	fb01 f303 	mul.w	r3, r1, r3
 8014534:	4413      	add	r3, r2
 8014536:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 801453a:	3308      	adds	r3, #8
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d10b      	bne.n	801455a <gos_queueGet+0x19a>
                queueEmptyHook != NULL)
 8014542:	4b0f      	ldr	r3, [pc, #60]	@ (8014580 <gos_queueGet+0x1c0>)
 8014544:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 8014546:	2b00      	cmp	r3, #0
 8014548:	d007      	beq.n	801455a <gos_queueGet+0x19a>
            {
                gos_mutexUnlock(&queueMutex);
 801454a:	4809      	ldr	r0, [pc, #36]	@ (8014570 <gos_queueGet+0x1b0>)
 801454c:	f7ff fd50 	bl	8013ff0 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 8014550:	4b0b      	ldr	r3, [pc, #44]	@ (8014580 <gos_queueGet+0x1c0>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	89fa      	ldrh	r2, [r7, #14]
 8014556:	4610      	mov	r0, r2
 8014558:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 801455a:	2355      	movs	r3, #85	@ 0x55
 801455c:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 801455e:	4804      	ldr	r0, [pc, #16]	@ (8014570 <gos_queueGet+0x1b0>)
 8014560:	f7ff fd46 	bl	8013ff0 <gos_mutexUnlock>

    return queueGetResult;
 8014564:	7dfb      	ldrb	r3, [r7, #23]
}
 8014566:	4618      	mov	r0, r3
 8014568:	371c      	adds	r7, #28
 801456a:	46bd      	mov	sp, r7
 801456c:	bd90      	pop	{r4, r7, pc}
 801456e:	bf00      	nop
 8014570:	20007ddc 	.word	0x20007ddc
 8014574:	20006628 	.word	0x20006628
 8014578:	20007dd4 	.word	0x20007dd4
 801457c:	20007dd8 	.word	0x20007dd8
 8014580:	20007de4 	.word	0x20007de4

08014584 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8014584:	b590      	push	{r4, r7, lr}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 801458a:	2300      	movs	r3, #0
 801458c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 801458e:	4826      	ldr	r0, [pc, #152]	@ (8014628 <gos_queueDump+0xa4>)
 8014590:	f001 fe9c 	bl	80162cc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8014594:	4825      	ldr	r0, [pc, #148]	@ (801462c <gos_queueDump+0xa8>)
 8014596:	f001 fe99 	bl	80162cc <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 801459a:	4b25      	ldr	r3, [pc, #148]	@ (8014630 <gos_queueDump+0xac>)
 801459c:	4a25      	ldr	r2, [pc, #148]	@ (8014634 <gos_queueDump+0xb0>)
 801459e:	4926      	ldr	r1, [pc, #152]	@ (8014638 <gos_queueDump+0xb4>)
 80145a0:	4826      	ldr	r0, [pc, #152]	@ (801463c <gos_queueDump+0xb8>)
 80145a2:	f001 fe93 	bl	80162cc <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 80145a6:	4821      	ldr	r0, [pc, #132]	@ (801462c <gos_queueDump+0xa8>)
 80145a8:	f001 fe90 	bl	80162cc <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80145ac:	2300      	movs	r3, #0
 80145ae:	71fb      	strb	r3, [r7, #7]
 80145b0:	e02d      	b.n	801460e <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 80145b2:	79fb      	ldrb	r3, [r7, #7]
 80145b4:	4a22      	ldr	r2, [pc, #136]	@ (8014640 <gos_queueDump+0xbc>)
 80145b6:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80145ba:	fb01 f303 	mul.w	r3, r1, r3
 80145be:	4413      	add	r3, r2
 80145c0:	881b      	ldrh	r3, [r3, #0]
 80145c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80145c6:	d026      	beq.n	8014616 <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 80145c8:	79fb      	ldrb	r3, [r7, #7]
 80145ca:	4a1d      	ldr	r2, [pc, #116]	@ (8014640 <gos_queueDump+0xbc>)
 80145cc:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80145d0:	fb01 f303 	mul.w	r3, r1, r3
 80145d4:	4413      	add	r3, r2
 80145d6:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80145d8:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 80145da:	79fb      	ldrb	r3, [r7, #7]
 80145dc:	f241 72aa 	movw	r2, #6058	@ 0x17aa
 80145e0:	fb02 f303 	mul.w	r3, r2, r3
 80145e4:	4a16      	ldr	r2, [pc, #88]	@ (8014640 <gos_queueDump+0xbc>)
 80145e6:	4413      	add	r3, r2
 80145e8:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 80145ea:	79fb      	ldrb	r3, [r7, #7]
 80145ec:	4914      	ldr	r1, [pc, #80]	@ (8014640 <gos_queueDump+0xbc>)
 80145ee:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 80145f2:	fb00 f303 	mul.w	r3, r0, r3
 80145f6:	440b      	add	r3, r1
 80145f8:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 80145fc:	3308      	adds	r3, #8
 80145fe:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8014600:	4621      	mov	r1, r4
 8014602:	4810      	ldr	r0, [pc, #64]	@ (8014644 <gos_queueDump+0xc0>)
 8014604:	f001 fe62 	bl	80162cc <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014608:	79fb      	ldrb	r3, [r7, #7]
 801460a:	3301      	adds	r3, #1
 801460c:	71fb      	strb	r3, [r7, #7]
 801460e:	79fb      	ldrb	r3, [r7, #7]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d0ce      	beq.n	80145b2 <gos_queueDump+0x2e>
 8014614:	e000      	b.n	8014618 <gos_queueDump+0x94>
            break;
 8014616:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 8014618:	480b      	ldr	r0, [pc, #44]	@ (8014648 <gos_queueDump+0xc4>)
 801461a:	f001 fe57 	bl	80162cc <gos_shellDriverTransmitString>
}
 801461e:	bf00      	nop
 8014620:	370c      	adds	r7, #12
 8014622:	46bd      	mov	sp, r7
 8014624:	bd90      	pop	{r4, r7, pc}
 8014626:	bf00      	nop
 8014628:	0801a470 	.word	0x0801a470
 801462c:	0801a480 	.word	0x0801a480
 8014630:	0801a4bc 	.word	0x0801a4bc
 8014634:	0801a4c8 	.word	0x0801a4c8
 8014638:	0801a4d0 	.word	0x0801a4d0
 801463c:	0801a4d4 	.word	0x0801a4d4
 8014640:	20006628 	.word	0x20006628
 8014644:	0801a4ec 	.word	0x0801a4ec
 8014648:	0801a508 	.word	0x0801a508

0801464c <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 8014652:	23ae      	movs	r3, #174	@ 0xae
 8014654:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 8014656:	4b06      	ldr	r3, [pc, #24]	@ (8014670 <gos_shellResume+0x24>)
 8014658:	881b      	ldrh	r3, [r3, #0]
 801465a:	4618      	mov	r0, r3
 801465c:	f7fd fae2 	bl	8011c24 <gos_taskResume>
 8014660:	4603      	mov	r3, r0
 8014662:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 8014664:	79fb      	ldrb	r3, [r7, #7]
}
 8014666:	4618      	mov	r0, r3
 8014668:	3708      	adds	r7, #8
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	20007de8 	.word	0x20007de8

08014674 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_ERROR;
 801467a:	23ae      	movs	r3, #174	@ 0xae
 801467c:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 801467e:	2300      	movs	r3, #0
 8014680:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014682:	2300      	movs	r3, #0
 8014684:	71bb      	strb	r3, [r7, #6]
 8014686:	e00a      	b.n	801469e <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 8014688:	79bb      	ldrb	r3, [r7, #6]
 801468a:	4a16      	ldr	r2, [pc, #88]	@ (80146e4 <gos_signalInit+0x70>)
 801468c:	212c      	movs	r1, #44	@ 0x2c
 801468e:	fb01 f303 	mul.w	r3, r1, r3
 8014692:	4413      	add	r3, r2
 8014694:	2249      	movs	r2, #73	@ 0x49
 8014696:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014698:	79bb      	ldrb	r3, [r7, #6]
 801469a:	3301      	adds	r3, #1
 801469c:	71bb      	strb	r3, [r7, #6]
 801469e:	79bb      	ldrb	r3, [r7, #6]
 80146a0:	2b02      	cmp	r3, #2
 80146a2:	d9f1      	bls.n	8014688 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 80146a4:	2100      	movs	r1, #0
 80146a6:	4810      	ldr	r0, [pc, #64]	@ (80146e8 <gos_signalInit+0x74>)
 80146a8:	f7fc feb0 	bl	801140c <gos_taskRegister>
 80146ac:	4603      	mov	r3, r0
 80146ae:	2b55      	cmp	r3, #85	@ 0x55
 80146b0:	d113      	bne.n	80146da <gos_signalInit+0x66>
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 80146b2:	480e      	ldr	r0, [pc, #56]	@ (80146ec <gos_signalInit+0x78>)
 80146b4:	f000 f820 	bl	80146f8 <gos_signalCreate>
 80146b8:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 80146ba:	2b55      	cmp	r3, #85	@ 0x55
 80146bc:	d10d      	bne.n	80146da <gos_signalInit+0x66>
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 80146be:	480c      	ldr	r0, [pc, #48]	@ (80146f0 <gos_signalInit+0x7c>)
 80146c0:	f000 f81a 	bl	80146f8 <gos_signalCreate>
 80146c4:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 80146c6:	2b55      	cmp	r3, #85	@ 0x55
 80146c8:	d107      	bne.n	80146da <gos_signalInit+0x66>
        gos_triggerInit(&signalInvokeTrigger)               == GOS_SUCCESS
 80146ca:	480a      	ldr	r0, [pc, #40]	@ (80146f4 <gos_signalInit+0x80>)
 80146cc:	f001 fc12 	bl	8015ef4 <gos_triggerInit>
 80146d0:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 80146d2:	2b55      	cmp	r3, #85	@ 0x55
 80146d4:	d101      	bne.n	80146da <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_SUCCESS;
 80146d6:	2355      	movs	r3, #85	@ 0x55
 80146d8:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 80146da:	79fb      	ldrb	r3, [r7, #7]
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3708      	adds	r7, #8
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	20007dec 	.word	0x20007dec
 80146e8:	20001020 	.word	0x20001020
 80146ec:	20005e74 	.word	0x20005e74
 80146f0:	20005e44 	.word	0x20005e44
 80146f4:	20007e70 	.word	0x20007e70

080146f8 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b085      	sub	sp, #20
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 8014700:	23ae      	movs	r3, #174	@ 0xae
 8014702:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 8014704:	2300      	movs	r3, #0
 8014706:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014708:	2300      	movs	r3, #0
 801470a:	73bb      	strb	r3, [r7, #14]
 801470c:	e025      	b.n	801475a <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 801470e:	7bbb      	ldrb	r3, [r7, #14]
 8014710:	4a17      	ldr	r2, [pc, #92]	@ (8014770 <gos_signalCreate+0x78>)
 8014712:	212c      	movs	r1, #44	@ 0x2c
 8014714:	fb01 f303 	mul.w	r3, r1, r3
 8014718:	4413      	add	r3, r2
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	2b49      	cmp	r3, #73	@ 0x49
 801471e:	d119      	bne.n	8014754 <gos_signalCreate+0x5c>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d016      	beq.n	8014754 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	7bba      	ldrb	r2, [r7, #14]
 801472a:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 801472c:	7bbb      	ldrb	r3, [r7, #14]
 801472e:	4a10      	ldr	r2, [pc, #64]	@ (8014770 <gos_signalCreate+0x78>)
 8014730:	212c      	movs	r1, #44	@ 0x2c
 8014732:	fb01 f303 	mul.w	r3, r1, r3
 8014736:	4413      	add	r3, r2
 8014738:	2236      	movs	r2, #54	@ 0x36
 801473a:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 801473c:	7bbb      	ldrb	r3, [r7, #14]
 801473e:	4a0c      	ldr	r2, [pc, #48]	@ (8014770 <gos_signalCreate+0x78>)
 8014740:	212c      	movs	r1, #44	@ 0x2c
 8014742:	fb01 f303 	mul.w	r3, r1, r3
 8014746:	4413      	add	r3, r2
 8014748:	3328      	adds	r3, #40	@ 0x28
 801474a:	2249      	movs	r2, #73	@ 0x49
 801474c:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 801474e:	2355      	movs	r3, #85	@ 0x55
 8014750:	73fb      	strb	r3, [r7, #15]
            break;
 8014752:	e005      	b.n	8014760 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014754:	7bbb      	ldrb	r3, [r7, #14]
 8014756:	3301      	adds	r3, #1
 8014758:	73bb      	strb	r3, [r7, #14]
 801475a:	7bbb      	ldrb	r3, [r7, #14]
 801475c:	2b02      	cmp	r3, #2
 801475e:	d9d6      	bls.n	801470e <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 8014760:	7bfb      	ldrb	r3, [r7, #15]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3714      	adds	r7, #20
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr
 801476e:	bf00      	nop
 8014770:	20007dec 	.word	0x20007dec

08014774 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af02      	add	r7, sp, #8
 801477a:	4603      	mov	r3, r0
 801477c:	460a      	mov	r2, r1
 801477e:	71fb      	strb	r3, [r7, #7]
 8014780:	4613      	mov	r3, r2
 8014782:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 8014784:	23ae      	movs	r3, #174	@ 0xae
 8014786:	73fb      	strb	r3, [r7, #15]
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 8014788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801478c:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 801478e:	79fb      	ldrb	r3, [r7, #7]
 8014790:	2b02      	cmp	r3, #2
 8014792:	d844      	bhi.n	801481e <gos_signalInvoke+0xaa>
 8014794:	79fb      	ldrb	r3, [r7, #7]
 8014796:	4a24      	ldr	r2, [pc, #144]	@ (8014828 <gos_signalInvoke+0xb4>)
 8014798:	212c      	movs	r1, #44	@ 0x2c
 801479a:	fb01 f303 	mul.w	r3, r1, r3
 801479e:	4413      	add	r3, r2
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b36      	cmp	r3, #54	@ 0x36
 80147a4:	d13b      	bne.n	801481e <gos_signalInvoke+0xaa>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 80147a6:	f7fc fb11 	bl	8010dcc <gos_kernelIsCallerIsr>
 80147aa:	4603      	mov	r3, r0
 80147ac:	2b36      	cmp	r3, #54	@ 0x36
 80147ae:	d015      	beq.n	80147dc <gos_signalInvoke+0x68>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 80147b0:	f107 030c 	add.w	r3, r7, #12
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fe f9cf 	bl	8012b58 <gos_taskGetCurrentId>
 80147ba:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 80147bc:	2b55      	cmp	r3, #85	@ 0x55
 80147be:	d125      	bne.n	801480c <gos_signalInvoke+0x98>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 80147c0:	89bb      	ldrh	r3, [r7, #12]
 80147c2:	491a      	ldr	r1, [pc, #104]	@ (801482c <gos_signalInvoke+0xb8>)
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7fe fa23 	bl	8012c10 <gos_taskGetData>
 80147ca:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 80147cc:	2b55      	cmp	r3, #85	@ 0x55
 80147ce:	d11d      	bne.n	801480c <gos_signalInvoke+0x98>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 80147d0:	4b16      	ldr	r3, [pc, #88]	@ (801482c <gos_signalInvoke+0xb8>)
 80147d2:	891b      	ldrh	r3, [r3, #8]
 80147d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d017      	beq.n	801480c <gos_signalInvoke+0x98>
            )
        {
            signalArray[signalId].senderId       = senderId;
 80147dc:	79fb      	ldrb	r3, [r7, #7]
 80147de:	4a12      	ldr	r2, [pc, #72]	@ (8014828 <gos_signalInvoke+0xb4>)
 80147e0:	212c      	movs	r1, #44	@ 0x2c
 80147e2:	fb01 f303 	mul.w	r3, r1, r3
 80147e6:	4413      	add	r3, r2
 80147e8:	332a      	adds	r3, #42	@ 0x2a
 80147ea:	88ba      	ldrh	r2, [r7, #4]
 80147ec:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 80147ee:	79fb      	ldrb	r3, [r7, #7]
 80147f0:	4a0d      	ldr	r2, [pc, #52]	@ (8014828 <gos_signalInvoke+0xb4>)
 80147f2:	212c      	movs	r1, #44	@ 0x2c
 80147f4:	fb01 f303 	mul.w	r3, r1, r3
 80147f8:	4413      	add	r3, r2
 80147fa:	3328      	adds	r3, #40	@ 0x28
 80147fc:	2236      	movs	r2, #54	@ 0x36
 80147fe:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 8014800:	2355      	movs	r3, #85	@ 0x55
 8014802:	73fb      	strb	r3, [r7, #15]

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 8014804:	480a      	ldr	r0, [pc, #40]	@ (8014830 <gos_signalInvoke+0xbc>)
 8014806:	f001 fc99 	bl	801613c <gos_triggerIncrement>
 801480a:	e008      	b.n	801481e <gos_signalInvoke+0xaa>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 801480c:	4b09      	ldr	r3, [pc, #36]	@ (8014834 <gos_signalInvoke+0xc0>)
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	4b09      	ldr	r3, [pc, #36]	@ (8014838 <gos_signalInvoke+0xc4>)
 8014812:	f240 1221 	movw	r2, #289	@ 0x121
 8014816:	4909      	ldr	r1, [pc, #36]	@ (801483c <gos_signalInvoke+0xc8>)
 8014818:	202e      	movs	r0, #46	@ 0x2e
 801481a:	f7fe fc7b 	bl	8013114 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 801481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	20007dec 	.word	0x20007dec
 801482c:	20007e7c 	.word	0x20007e7c
 8014830:	20007e70 	.word	0x20007e70
 8014834:	20007e86 	.word	0x20007e86
 8014838:	0801a548 	.word	0x0801a548
 801483c:	0801aa90 	.word	0x0801aa90

08014840 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 8014840:	b590      	push	{r4, r7, lr}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 8014846:	2300      	movs	r3, #0
 8014848:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 801484a:	2300      	movs	r3, #0
 801484c:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 801484e:	f04f 32ff 	mov.w	r2, #4294967295
 8014852:	2101      	movs	r1, #1
 8014854:	4837      	ldr	r0, [pc, #220]	@ (8014934 <gos_signalDaemonTask+0xf4>)
 8014856:	f001 fbc1 	bl	8015fdc <gos_triggerWait>
 801485a:	4603      	mov	r3, r0
 801485c:	2b55      	cmp	r3, #85	@ 0x55
 801485e:	d164      	bne.n	801492a <gos_signalDaemonTask+0xea>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 8014860:	4834      	ldr	r0, [pc, #208]	@ (8014934 <gos_signalDaemonTask+0xf4>)
 8014862:	f001 fb63 	bl	8015f2c <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014866:	2300      	movs	r3, #0
 8014868:	71bb      	strb	r3, [r7, #6]
 801486a:	e05b      	b.n	8014924 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 801486c:	79bb      	ldrb	r3, [r7, #6]
 801486e:	4a32      	ldr	r2, [pc, #200]	@ (8014938 <gos_signalDaemonTask+0xf8>)
 8014870:	212c      	movs	r1, #44	@ 0x2c
 8014872:	fb01 f303 	mul.w	r3, r1, r3
 8014876:	4413      	add	r3, r2
 8014878:	3328      	adds	r3, #40	@ 0x28
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	2b36      	cmp	r3, #54	@ 0x36
 801487e:	d14e      	bne.n	801491e <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8014880:	2300      	movs	r3, #0
 8014882:	71fb      	strb	r3, [r7, #7]
 8014884:	e03d      	b.n	8014902 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 8014886:	79ba      	ldrb	r2, [r7, #6]
 8014888:	79f9      	ldrb	r1, [r7, #7]
 801488a:	482b      	ldr	r0, [pc, #172]	@ (8014938 <gos_signalDaemonTask+0xf8>)
 801488c:	4613      	mov	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4413      	add	r3, r2
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	4413      	add	r3, r2
 8014896:	440b      	add	r3, r1
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	4403      	add	r3, r0
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d033      	beq.n	801490a <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 80148a2:	4b26      	ldr	r3, [pc, #152]	@ (801493c <gos_signalDaemonTask+0xfc>)
 80148a4:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 80148a6:	79ba      	ldrb	r2, [r7, #6]
 80148a8:	79fb      	ldrb	r3, [r7, #7]
 80148aa:	4923      	ldr	r1, [pc, #140]	@ (8014938 <gos_signalDaemonTask+0xf8>)
 80148ac:	2416      	movs	r4, #22
 80148ae:	fb04 f202 	mul.w	r2, r4, r2
 80148b2:	4413      	add	r3, r2
 80148b4:	330c      	adds	r3, #12
 80148b6:	005b      	lsls	r3, r3, #1
 80148b8:	440b      	add	r3, r1
 80148ba:	889b      	ldrh	r3, [r3, #4]
 80148bc:	4619      	mov	r1, r3
 80148be:	f7fe f86d 	bl	801299c <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 80148c2:	79ba      	ldrb	r2, [r7, #6]
 80148c4:	79f9      	ldrb	r1, [r7, #7]
 80148c6:	481c      	ldr	r0, [pc, #112]	@ (8014938 <gos_signalDaemonTask+0xf8>)
 80148c8:	4613      	mov	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	4413      	add	r3, r2
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	4413      	add	r3, r2
 80148d2:	440b      	add	r3, r1
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	4403      	add	r3, r0
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	79ba      	ldrb	r2, [r7, #6]
 80148dc:	4916      	ldr	r1, [pc, #88]	@ (8014938 <gos_signalDaemonTask+0xf8>)
 80148de:	202c      	movs	r0, #44	@ 0x2c
 80148e0:	fb00 f202 	mul.w	r2, r0, r2
 80148e4:	440a      	add	r2, r1
 80148e6:	322a      	adds	r2, #42	@ 0x2a
 80148e8:	8812      	ldrh	r2, [r2, #0]
 80148ea:	4610      	mov	r0, r2
 80148ec:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 80148ee:	4b13      	ldr	r3, [pc, #76]	@ (801493c <gos_signalDaemonTask+0xfc>)
 80148f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148f2:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7fe f850 	bl	801299c <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 80148fc:	79fb      	ldrb	r3, [r7, #7]
 80148fe:	3301      	adds	r3, #1
 8014900:	71fb      	strb	r3, [r7, #7]
 8014902:	79fb      	ldrb	r3, [r7, #7]
 8014904:	2b05      	cmp	r3, #5
 8014906:	d9be      	bls.n	8014886 <gos_signalDaemonTask+0x46>
 8014908:	e000      	b.n	801490c <gos_signalDaemonTask+0xcc>
                            break;
 801490a:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 801490c:	79bb      	ldrb	r3, [r7, #6]
 801490e:	4a0a      	ldr	r2, [pc, #40]	@ (8014938 <gos_signalDaemonTask+0xf8>)
 8014910:	212c      	movs	r1, #44	@ 0x2c
 8014912:	fb01 f303 	mul.w	r3, r1, r3
 8014916:	4413      	add	r3, r2
 8014918:	3328      	adds	r3, #40	@ 0x28
 801491a:	2249      	movs	r2, #73	@ 0x49
 801491c:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 801491e:	79bb      	ldrb	r3, [r7, #6]
 8014920:	3301      	adds	r3, #1
 8014922:	71bb      	strb	r3, [r7, #6]
 8014924:	79bb      	ldrb	r3, [r7, #6]
 8014926:	2b02      	cmp	r3, #2
 8014928:	d9a0      	bls.n	801486c <gos_signalDaemonTask+0x2c>
        else
        {
            // Unexpected error.
        }

        (void_t) gos_taskSleep(GOS_SIGNAL_DAEMON_POLL_TIME_MS);
 801492a:	2032      	movs	r0, #50	@ 0x32
 801492c:	f7fc ff00 	bl	8011730 <gos_taskSleep>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8014930:	e78d      	b.n	801484e <gos_signalDaemonTask+0xe>
 8014932:	bf00      	nop
 8014934:	20007e70 	.word	0x20007e70
 8014938:	20007dec 	.word	0x20007dec
 801493c:	20001020 	.word	0x20001020

08014940 <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 8014946:	23ae      	movs	r3, #174	@ 0xae
 8014948:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 801494a:	2300      	movs	r3, #0
 801494c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 801494e:	2300      	movs	r3, #0
 8014950:	71bb      	strb	r3, [r7, #6]
 8014952:	e024      	b.n	801499e <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 8014954:	79bb      	ldrb	r3, [r7, #6]
 8014956:	4a1e      	ldr	r2, [pc, #120]	@ (80149d0 <gos_sysmonInit+0x90>)
 8014958:	011b      	lsls	r3, r3, #4
 801495a:	4413      	add	r3, r2
 801495c:	330c      	adds	r3, #12
 801495e:	2200      	movs	r2, #0
 8014960:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 8014962:	79bb      	ldrb	r3, [r7, #6]
 8014964:	4a1a      	ldr	r2, [pc, #104]	@ (80149d0 <gos_sysmonInit+0x90>)
 8014966:	011b      	lsls	r3, r3, #4
 8014968:	4413      	add	r3, r2
 801496a:	3304      	adds	r3, #4
 801496c:	2200      	movs	r2, #0
 801496e:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 8014970:	79bb      	ldrb	r3, [r7, #6]
 8014972:	4a17      	ldr	r2, [pc, #92]	@ (80149d0 <gos_sysmonInit+0x90>)
 8014974:	011b      	lsls	r3, r3, #4
 8014976:	4413      	add	r3, r2
 8014978:	3308      	adds	r3, #8
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 801497e:	79bb      	ldrb	r3, [r7, #6]
 8014980:	4a13      	ldr	r2, [pc, #76]	@ (80149d0 <gos_sysmonInit+0x90>)
 8014982:	011b      	lsls	r3, r3, #4
 8014984:	4413      	add	r3, r2
 8014986:	3302      	adds	r3, #2
 8014988:	2200      	movs	r2, #0
 801498a:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 801498c:	79bb      	ldrb	r3, [r7, #6]
 801498e:	4a10      	ldr	r2, [pc, #64]	@ (80149d0 <gos_sysmonInit+0x90>)
 8014990:	011b      	lsls	r3, r3, #4
 8014992:	4413      	add	r3, r2
 8014994:	2200      	movs	r2, #0
 8014996:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014998:	79bb      	ldrb	r3, [r7, #6]
 801499a:	3301      	adds	r3, #1
 801499c:	71bb      	strb	r3, [r7, #6]
 801499e:	79bb      	ldrb	r3, [r7, #6]
 80149a0:	2b17      	cmp	r3, #23
 80149a2:	d9d7      	bls.n	8014954 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 80149a4:	4a0b      	ldr	r2, [pc, #44]	@ (80149d4 <gos_sysmonInit+0x94>)
 80149a6:	490c      	ldr	r1, [pc, #48]	@ (80149d8 <gos_sysmonInit+0x98>)
 80149a8:	2000      	movs	r0, #0
 80149aa:	f7fe fcb9 	bl	8013320 <gos_gcpRegisterPhysicalDriver>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2b55      	cmp	r3, #85	@ 0x55
 80149b2:	d108      	bne.n	80149c6 <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 80149b4:	2100      	movs	r1, #0
 80149b6:	4809      	ldr	r0, [pc, #36]	@ (80149dc <gos_sysmonInit+0x9c>)
 80149b8:	f7fc fd28 	bl	801140c <gos_taskRegister>
 80149bc:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 80149be:	2b55      	cmp	r3, #85	@ 0x55
 80149c0:	d101      	bne.n	80149c6 <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 80149c2:	2355      	movs	r3, #85	@ 0x55
 80149c4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 80149c6:	79fb      	ldrb	r3, [r7, #7]
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	20008fe0 	.word	0x20008fe0
 80149d4:	08016315 	.word	0x08016315
 80149d8:	0801634d 	.word	0x0801634d
 80149dc:	2000108c 	.word	0x2000108c

080149e0 <gos_sysmonRegisterUserMessage>:

/*
 * Function: gos_sysmonRegisterUserMessage
 */
gos_result_t gos_sysmonRegisterUserMessage (gos_sysmonUserMessageDescriptor_t* pDesc)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b084      	sub	sp, #16
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 80149e8:	23ae      	movs	r3, #174	@ 0xae
 80149ea:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 80149ec:	2300      	movs	r3, #0
 80149ee:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d027      	beq.n	8014a46 <gos_sysmonRegisterUserMessage+0x66>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d023      	beq.n	8014a46 <gos_sysmonRegisterUserMessage+0x66>
    {
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80149fe:	2300      	movs	r3, #0
 8014a00:	73bb      	strb	r3, [r7, #14]
 8014a02:	e01d      	b.n	8014a40 <gos_sysmonRegisterUserMessage+0x60>
        {
            if (userMessages[userMessageIndex].messageId == 0u &&
 8014a04:	7bbb      	ldrb	r3, [r7, #14]
 8014a06:	4a12      	ldr	r2, [pc, #72]	@ (8014a50 <gos_sysmonRegisterUserMessage+0x70>)
 8014a08:	011b      	lsls	r3, r3, #4
 8014a0a:	4413      	add	r3, r2
 8014a0c:	881b      	ldrh	r3, [r3, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d113      	bne.n	8014a3a <gos_sysmonRegisterUserMessage+0x5a>
                userMessages[userMessageIndex].callback == NULL)
 8014a12:	7bbb      	ldrb	r3, [r7, #14]
 8014a14:	4a0e      	ldr	r2, [pc, #56]	@ (8014a50 <gos_sysmonRegisterUserMessage+0x70>)
 8014a16:	011b      	lsls	r3, r3, #4
 8014a18:	4413      	add	r3, r2
 8014a1a:	330c      	adds	r3, #12
 8014a1c:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == 0u &&
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d10b      	bne.n	8014a3a <gos_sysmonRegisterUserMessage+0x5a>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 8014a22:	7bbb      	ldrb	r3, [r7, #14]
 8014a24:	011b      	lsls	r3, r3, #4
 8014a26:	4a0a      	ldr	r2, [pc, #40]	@ (8014a50 <gos_sysmonRegisterUserMessage+0x70>)
 8014a28:	4413      	add	r3, r2
 8014a2a:	2210      	movs	r2, #16
 8014a2c:	6879      	ldr	r1, [r7, #4]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f002 fb7d 	bl	801712e <memcpy>
                registerResult = GOS_SUCCESS;
 8014a34:	2355      	movs	r3, #85	@ 0x55
 8014a36:	73fb      	strb	r3, [r7, #15]
                break;
 8014a38:	e005      	b.n	8014a46 <gos_sysmonRegisterUserMessage+0x66>
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014a3a:	7bbb      	ldrb	r3, [r7, #14]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	73bb      	strb	r3, [r7, #14]
 8014a40:	7bbb      	ldrb	r3, [r7, #14]
 8014a42:	2b17      	cmp	r3, #23
 8014a44:	d9de      	bls.n	8014a04 <gos_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 8014a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3710      	adds	r7, #16
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	20008fe0 	.word	0x20008fe0

08014a54 <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 8014a62:	2300      	movs	r3, #0
 8014a64:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8014a66:	2300      	movs	r3, #0
 8014a68:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 8014a6a:	1d39      	adds	r1, r7, #4
 8014a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a70:	9300      	str	r3, [sp, #0]
 8014a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014a76:	4a33      	ldr	r2, [pc, #204]	@ (8014b44 <gos_sysmonDaemonTask+0xf0>)
 8014a78:	2000      	movs	r0, #0
 8014a7a:	f7fe fdab 	bl	80135d4 <gos_gcpReceiveMessage>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b55      	cmp	r3, #85	@ 0x55
 8014a82:	d15a      	bne.n	8014b3a <gos_sysmonDaemonTask+0xe6>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 8014a84:	88bb      	ldrh	r3, [r7, #4]
 8014a86:	4618      	mov	r0, r3
 8014a88:	f000 f862 	bl	8014b50 <gos_sysmonGetLutIndex>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8014a90:	79bb      	ldrb	r3, [r7, #6]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d002      	beq.n	8014a9c <gos_sysmonDaemonTask+0x48>
 8014a96:	79bb      	ldrb	r3, [r7, #6]
 8014a98:	2b10      	cmp	r3, #16
 8014a9a:	d138      	bne.n	8014b0e <gos_sysmonDaemonTask+0xba>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	71fb      	strb	r3, [r7, #7]
 8014aa0:	e031      	b.n	8014b06 <gos_sysmonDaemonTask+0xb2>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 8014aa2:	79fb      	ldrb	r3, [r7, #7]
 8014aa4:	4a28      	ldr	r2, [pc, #160]	@ (8014b48 <gos_sysmonDaemonTask+0xf4>)
 8014aa6:	011b      	lsls	r3, r3, #4
 8014aa8:	4413      	add	r3, r2
 8014aaa:	881a      	ldrh	r2, [r3, #0]
 8014aac:	88bb      	ldrh	r3, [r7, #4]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d126      	bne.n	8014b00 <gos_sysmonDaemonTask+0xac>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 8014ab2:	79fb      	ldrb	r3, [r7, #7]
 8014ab4:	4a24      	ldr	r2, [pc, #144]	@ (8014b48 <gos_sysmonDaemonTask+0xf4>)
 8014ab6:	011b      	lsls	r3, r3, #4
 8014ab8:	4413      	add	r3, r2
 8014aba:	3304      	adds	r3, #4
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d00f      	beq.n	8014ae2 <gos_sysmonDaemonTask+0x8e>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 8014ac2:	79fb      	ldrb	r3, [r7, #7]
 8014ac4:	4a20      	ldr	r2, [pc, #128]	@ (8014b48 <gos_sysmonDaemonTask+0xf4>)
 8014ac6:	011b      	lsls	r3, r3, #4
 8014ac8:	4413      	add	r3, r2
 8014aca:	3304      	adds	r3, #4
 8014acc:	6818      	ldr	r0, [r3, #0]
 8014ace:	79fb      	ldrb	r3, [r7, #7]
 8014ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8014b48 <gos_sysmonDaemonTask+0xf4>)
 8014ad2:	011b      	lsls	r3, r3, #4
 8014ad4:	4413      	add	r3, r2
 8014ad6:	3308      	adds	r3, #8
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	461a      	mov	r2, r3
 8014adc:	4919      	ldr	r1, [pc, #100]	@ (8014b44 <gos_sysmonDaemonTask+0xf0>)
 8014ade:	f002 fb26 	bl	801712e <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 8014ae2:	79fb      	ldrb	r3, [r7, #7]
 8014ae4:	4a18      	ldr	r2, [pc, #96]	@ (8014b48 <gos_sysmonDaemonTask+0xf4>)
 8014ae6:	011b      	lsls	r3, r3, #4
 8014ae8:	4413      	add	r3, r2
 8014aea:	330c      	adds	r3, #12
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d006      	beq.n	8014b00 <gos_sysmonDaemonTask+0xac>
                        {
                        	userMessages[userMessageIndex].callback();
 8014af2:	79fb      	ldrb	r3, [r7, #7]
 8014af4:	4a14      	ldr	r2, [pc, #80]	@ (8014b48 <gos_sysmonDaemonTask+0xf4>)
 8014af6:	011b      	lsls	r3, r3, #4
 8014af8:	4413      	add	r3, r2
 8014afa:	330c      	adds	r3, #12
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014b00:	79fb      	ldrb	r3, [r7, #7]
 8014b02:	3301      	adds	r3, #1
 8014b04:	71fb      	strb	r3, [r7, #7]
 8014b06:	79fb      	ldrb	r3, [r7, #7]
 8014b08:	2b17      	cmp	r3, #23
 8014b0a:	d9ca      	bls.n	8014aa2 <gos_sysmonDaemonTask+0x4e>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8014b0c:	e018      	b.n	8014b40 <gos_sysmonDaemonTask+0xec>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 8014b0e:	79bb      	ldrb	r3, [r7, #6]
 8014b10:	4a0e      	ldr	r2, [pc, #56]	@ (8014b4c <gos_sysmonDaemonTask+0xf8>)
 8014b12:	011b      	lsls	r3, r3, #4
 8014b14:	4413      	add	r3, r2
 8014b16:	330c      	adds	r3, #12
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d009      	beq.n	8014b32 <gos_sysmonDaemonTask+0xde>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 8014b1e:	79bb      	ldrb	r3, [r7, #6]
 8014b20:	4a0a      	ldr	r2, [pc, #40]	@ (8014b4c <gos_sysmonDaemonTask+0xf8>)
 8014b22:	011b      	lsls	r3, r3, #4
 8014b24:	4413      	add	r3, r2
 8014b26:	330c      	adds	r3, #12
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	79ba      	ldrb	r2, [r7, #6]
 8014b2c:	4610      	mov	r0, r2
 8014b2e:	4798      	blx	r3
 8014b30:	e799      	b.n	8014a66 <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 8014b32:	2000      	movs	r0, #0
 8014b34:	f000 f830 	bl	8014b98 <gos_sysmonSendResponse>
 8014b38:	e795      	b.n	8014a66 <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 8014b3a:	200a      	movs	r0, #10
 8014b3c:	f7fc fdf8 	bl	8011730 <gos_taskSleep>
        messageId = 0u;
 8014b40:	e791      	b.n	8014a66 <gos_sysmonDaemonTask+0x12>
 8014b42:	bf00      	nop
 8014b44:	20007ee8 	.word	0x20007ee8
 8014b48:	20008fe0 	.word	0x20008fe0
 8014b4c:	0801aaa4 	.word	0x0801aaa4

08014b50 <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b085      	sub	sp, #20
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	4603      	mov	r3, r0
 8014b58:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8014b5e:	2300      	movs	r3, #0
 8014b60:	73fb      	strb	r3, [r7, #15]
 8014b62:	e00a      	b.n	8014b7a <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
 8014b66:	4a0b      	ldr	r2, [pc, #44]	@ (8014b94 <gos_sysmonGetLutIndex+0x44>)
 8014b68:	011b      	lsls	r3, r3, #4
 8014b6a:	4413      	add	r3, r2
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	88fa      	ldrh	r2, [r7, #6]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d006      	beq.n	8014b82 <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8014b74:	7bfb      	ldrb	r3, [r7, #15]
 8014b76:	3301      	adds	r3, #1
 8014b78:	73fb      	strb	r3, [r7, #15]
 8014b7a:	7bfb      	ldrb	r3, [r7, #15]
 8014b7c:	2b0f      	cmp	r3, #15
 8014b7e:	d9f1      	bls.n	8014b64 <gos_sysmonGetLutIndex+0x14>
 8014b80:	e000      	b.n	8014b84 <gos_sysmonGetLutIndex+0x34>
        {
            break;
 8014b82:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 8014b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3714      	adds	r7, #20
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b90:	4770      	bx	lr
 8014b92:	bf00      	nop
 8014b94:	0801aaa4 	.word	0x0801aaa4

08014b98 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b084      	sub	sp, #16
 8014b9c:	af02      	add	r7, sp, #8
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 8014ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8014bd8 <gos_sysmonSendResponse+0x40>)
 8014ba6:	011b      	lsls	r3, r3, #4
 8014ba8:	4413      	add	r3, r2
 8014baa:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8014bac:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8014bae:	4a0a      	ldr	r2, [pc, #40]	@ (8014bd8 <gos_sysmonSendResponse+0x40>)
 8014bb0:	011b      	lsls	r3, r3, #4
 8014bb2:	4413      	add	r3, r2
 8014bb4:	3304      	adds	r3, #4
 8014bb6:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8014bb8:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8014bba:	4807      	ldr	r0, [pc, #28]	@ (8014bd8 <gos_sysmonSendResponse+0x40>)
 8014bbc:	011b      	lsls	r3, r3, #4
 8014bbe:	4403      	add	r3, r0
 8014bc0:	3308      	adds	r3, #8
 8014bc2:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8014bc4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8014bc8:	9000      	str	r0, [sp, #0]
 8014bca:	2000      	movs	r0, #0
 8014bcc:	f7fe fbd0 	bl	8013370 <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 8014bd0:	bf00      	nop
 8014bd2:	3708      	adds	r7, #8
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	0801aaa4 	.word	0x0801aaa4

08014bdc <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	4603      	mov	r3, r0
 8014be4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014be6:	79fb      	ldrb	r3, [r7, #7]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f000 fb05 	bl	80151f8 <gos_sysmonCheckMessage>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	4b06      	ldr	r3, [pc, #24]	@ (8014c0c <gos_sysmonHandlePingRequest+0x30>)
 8014bf4:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 8014bf6:	79fb      	ldrb	r3, [r7, #7]
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7ff ffcb 	bl	8014b98 <gos_sysmonSendResponse>
}
 8014c02:	bf00      	nop
 8014c04:	3708      	adds	r7, #8
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	20008ee8 	.word	0x20008ee8

08014c10 <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	4603      	mov	r3, r0
 8014c18:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014c1a:	79fb      	ldrb	r3, [r7, #7]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f000 faeb 	bl	80151f8 <gos_sysmonCheckMessage>
 8014c22:	4603      	mov	r3, r0
 8014c24:	461a      	mov	r2, r3
 8014c26:	4b0b      	ldr	r3, [pc, #44]	@ (8014c54 <gos_sysmonHandleCpuUsageGet+0x44>)
 8014c28:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8014c54 <gos_sysmonHandleCpuUsageGet+0x44>)
 8014c2c:	781b      	ldrb	r3, [r3, #0]
 8014c2e:	2b28      	cmp	r3, #40	@ 0x28
 8014c30:	d106      	bne.n	8014c40 <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 8014c32:	f7fb fbd3 	bl	80103dc <gos_kernelGetCpuUsage>
 8014c36:	4603      	mov	r3, r0
 8014c38:	461a      	mov	r2, r3
 8014c3a:	4b06      	ldr	r3, [pc, #24]	@ (8014c54 <gos_sysmonHandleCpuUsageGet+0x44>)
 8014c3c:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8014c40:	79fb      	ldrb	r3, [r7, #7]
 8014c42:	3301      	adds	r3, #1
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7ff ffa6 	bl	8014b98 <gos_sysmonSendResponse>
}
 8014c4c:	bf00      	nop
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	20008eec 	.word	0x20008eec

08014c58 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	4603      	mov	r3, r0
 8014c60:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8014c62:	2300      	movs	r3, #0
 8014c64:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8014c66:	2349      	movs	r3, #73	@ 0x49
 8014c68:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014c6a:	79fb      	ldrb	r3, [r7, #7]
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f000 fac3 	bl	80151f8 <gos_sysmonCheckMessage>
 8014c72:	4603      	mov	r3, r0
 8014c74:	461a      	mov	r2, r3
 8014c76:	4b66      	ldr	r3, [pc, #408]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014c78:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014c7a:	4b65      	ldr	r3, [pc, #404]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	2b28      	cmp	r3, #40	@ 0x28
 8014c80:	f040 80c2 	bne.w	8014e08 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8014c84:	4b63      	ldr	r3, [pc, #396]	@ (8014e14 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	d168      	bne.n	8014d62 <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014c90:	2300      	movs	r3, #0
 8014c92:	81fb      	strh	r3, [r7, #14]
 8014c94:	e061      	b.n	8014d5a <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 8014c96:	7b7b      	ldrb	r3, [r7, #13]
 8014c98:	2b36      	cmp	r3, #54	@ 0x36
 8014c9a:	f000 80b4 	beq.w	8014e06 <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8014c9e:	89fb      	ldrh	r3, [r7, #14]
 8014ca0:	495d      	ldr	r1, [pc, #372]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7fe f822 	bl	8012cec <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8014ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014cb0:	d045      	beq.n	8014d3e <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8014cb2:	4b59      	ldr	r3, [pc, #356]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cb4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014cb6:	4b56      	ldr	r3, [pc, #344]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cb8:	84da      	strh	r2, [r3, #38]	@ 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8014cba:	4b57      	ldr	r3, [pc, #348]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014cc0:	4b53      	ldr	r3, [pc, #332]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8014cc4:	4b54      	ldr	r3, [pc, #336]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014cca:	4b51      	ldr	r3, [pc, #324]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014ccc:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8014cd0:	4b51      	ldr	r3, [pc, #324]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cd2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8014cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cd8:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8014cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cde:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014ce4:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8014ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014cee:	4b48      	ldr	r3, [pc, #288]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cf0:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8014cf4:	4b48      	ldr	r3, [pc, #288]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cf6:	79da      	ldrb	r2, [r3, #7]
 8014cf8:	4b45      	ldr	r3, [pc, #276]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cfa:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8014cfc:	4b46      	ldr	r3, [pc, #280]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014cfe:	799a      	ldrb	r2, [r3, #6]
 8014d00:	4b43      	ldr	r3, [pc, #268]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d02:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8014d04:	4b44      	ldr	r3, [pc, #272]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d08:	4a41      	ldr	r2, [pc, #260]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d0a:	6293      	str	r3, [r2, #40]	@ 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8014d0c:	4b42      	ldr	r3, [pc, #264]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d0e:	891a      	ldrh	r2, [r3, #8]
 8014d10:	4b3f      	ldr	r3, [pc, #252]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d12:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8014d14:	4b40      	ldr	r3, [pc, #256]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d16:	791a      	ldrb	r2, [r3, #4]
 8014d18:	4b3d      	ldr	r3, [pc, #244]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d1a:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d20:	322e      	adds	r2, #46	@ 0x2e
 8014d22:	334c      	adds	r3, #76	@ 0x4c
 8014d24:	cb03      	ldmia	r3!, {r0, r1}
 8014d26:	6010      	str	r0, [r2, #0]
 8014d28:	6051      	str	r1, [r2, #4]
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8014d2e:	493b      	ldr	r1, [pc, #236]	@ (8014e1c <gos_sysmonHandleTaskDataGet+0x1c4>)
 8014d30:	483b      	ldr	r0, [pc, #236]	@ (8014e20 <gos_sysmonHandleTaskDataGet+0x1c8>)
 8014d32:	f002 f9f4 	bl	801711e <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014d36:	4b36      	ldr	r3, [pc, #216]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d38:	2228      	movs	r2, #40	@ 0x28
 8014d3a:	701a      	strb	r2, [r3, #0]
 8014d3c:	e004      	b.n	8014d48 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8014d3e:	4b34      	ldr	r3, [pc, #208]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d40:	2263      	movs	r2, #99	@ 0x63
 8014d42:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8014d44:	2336      	movs	r3, #54	@ 0x36
 8014d46:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8014d48:	79fb      	ldrb	r3, [r7, #7]
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7ff ff22 	bl	8014b98 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014d54:	89fb      	ldrh	r3, [r7, #14]
 8014d56:	3301      	adds	r3, #1
 8014d58:	81fb      	strh	r3, [r7, #14]
 8014d5a:	89fb      	ldrh	r3, [r7, #14]
 8014d5c:	2b0f      	cmp	r3, #15
 8014d5e:	d99a      	bls.n	8014c96 <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8014d60:	e052      	b.n	8014e08 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8014d62:	4b2c      	ldr	r3, [pc, #176]	@ (8014e14 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8014d64:	881b      	ldrh	r3, [r3, #0]
 8014d66:	492c      	ldr	r1, [pc, #176]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fd ffbf 	bl	8012cec <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8014d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d70:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014d72:	4b27      	ldr	r3, [pc, #156]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d74:	84da      	strh	r2, [r3, #38]	@ 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8014d76:	4b28      	ldr	r3, [pc, #160]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014d7c:	4b24      	ldr	r3, [pc, #144]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8014d80:	4b25      	ldr	r3, [pc, #148]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014d86:	4b22      	ldr	r3, [pc, #136]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d88:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8014d8c:	4b22      	ldr	r3, [pc, #136]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d8e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8014d92:	4b1f      	ldr	r3, [pc, #124]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d94:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8014d98:	4b1f      	ldr	r3, [pc, #124]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d9a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014da0:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8014da4:	4b1c      	ldr	r3, [pc, #112]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014da6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014daa:	4b19      	ldr	r3, [pc, #100]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dac:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8014db0:	4b19      	ldr	r3, [pc, #100]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014db2:	79da      	ldrb	r2, [r3, #7]
 8014db4:	4b16      	ldr	r3, [pc, #88]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014db6:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8014db8:	4b17      	ldr	r3, [pc, #92]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014dba:	799a      	ldrb	r2, [r3, #6]
 8014dbc:	4b14      	ldr	r3, [pc, #80]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dbe:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8014dc0:	4b15      	ldr	r3, [pc, #84]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014dc4:	4a12      	ldr	r2, [pc, #72]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dc6:	6293      	str	r3, [r2, #40]	@ 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8014dc8:	4b13      	ldr	r3, [pc, #76]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014dca:	891a      	ldrh	r2, [r3, #8]
 8014dcc:	4b10      	ldr	r3, [pc, #64]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dce:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8014dd0:	4b11      	ldr	r3, [pc, #68]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014dd2:	791a      	ldrb	r2, [r3, #4]
 8014dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dd6:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dda:	4b0f      	ldr	r3, [pc, #60]	@ (8014e18 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014ddc:	322e      	adds	r2, #46	@ 0x2e
 8014dde:	334c      	adds	r3, #76	@ 0x4c
 8014de0:	cb03      	ldmia	r3!, {r0, r1}
 8014de2:	6010      	str	r0, [r2, #0]
 8014de4:	6051      	str	r1, [r2, #4]
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8014dea:	490c      	ldr	r1, [pc, #48]	@ (8014e1c <gos_sysmonHandleTaskDataGet+0x1c4>)
 8014dec:	480c      	ldr	r0, [pc, #48]	@ (8014e20 <gos_sysmonHandleTaskDataGet+0x1c8>)
 8014dee:	f002 f996 	bl	801711e <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014df2:	4b07      	ldr	r3, [pc, #28]	@ (8014e10 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014df4:	2228      	movs	r2, #40	@ 0x28
 8014df6:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8014df8:	79fb      	ldrb	r3, [r7, #7]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7ff feca 	bl	8014b98 <gos_sysmonSendResponse>
}
 8014e04:	e000      	b.n	8014e08 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 8014e06:	bf00      	nop
}
 8014e08:	bf00      	nop
 8014e0a:	3710      	adds	r7, #16
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	20008ef4 	.word	0x20008ef4
 8014e14:	20008ef0 	.word	0x20008ef0
 8014e18:	20008f4c 	.word	0x20008f4c
 8014e1c:	20008f56 	.word	0x20008f56
 8014e20:	20008efa 	.word	0x20008efa

08014e24 <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8014e32:	2349      	movs	r3, #73	@ 0x49
 8014e34:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014e36:	79fb      	ldrb	r3, [r7, #7]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f000 f9dd 	bl	80151f8 <gos_sysmonCheckMessage>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	461a      	mov	r2, r3
 8014e42:	4b49      	ldr	r3, [pc, #292]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014e44:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014e46:	4b48      	ldr	r3, [pc, #288]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	2b28      	cmp	r3, #40	@ 0x28
 8014e4c:	f040 8087 	bne.w	8014f5e <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8014e50:	4b46      	ldr	r3, [pc, #280]	@ (8014f6c <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8014e52:	881b      	ldrh	r3, [r3, #0]
 8014e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e58:	4293      	cmp	r3, r2
 8014e5a:	d14a      	bne.n	8014ef2 <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	81fb      	strh	r3, [r7, #14]
 8014e60:	e043      	b.n	8014eea <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 8014e62:	7b7b      	ldrb	r3, [r7, #13]
 8014e64:	2b36      	cmp	r3, #54	@ 0x36
 8014e66:	d079      	beq.n	8014f5c <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8014e68:	89fb      	ldrh	r3, [r7, #14]
 8014e6a:	4941      	ldr	r1, [pc, #260]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7fd ff3d 	bl	8012cec <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8014e72:	4b3f      	ldr	r3, [pc, #252]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e7a:	d028      	beq.n	8014ece <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8014e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014e7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014e82:	4b39      	ldr	r3, [pc, #228]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014e84:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8014e86:	4b3a      	ldr	r3, [pc, #232]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014e88:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014e8c:	4b36      	ldr	r3, [pc, #216]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014e8e:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8014e90:	4b37      	ldr	r3, [pc, #220]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014e92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014e96:	4b34      	ldr	r3, [pc, #208]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014e98:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8014e9a:	4b35      	ldr	r3, [pc, #212]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014e9c:	799a      	ldrb	r2, [r3, #6]
 8014e9e:	4b32      	ldr	r3, [pc, #200]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014ea0:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8014ea2:	4b33      	ldr	r3, [pc, #204]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ea6:	4a30      	ldr	r2, [pc, #192]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014ea8:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8014eac:	4b30      	ldr	r3, [pc, #192]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014eae:	791a      	ldrb	r2, [r3, #4]
 8014eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014eb2:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014eb8:	3207      	adds	r2, #7
 8014eba:	334c      	adds	r3, #76	@ 0x4c
 8014ebc:	cb03      	ldmia	r3!, {r0, r1}
 8014ebe:	6010      	str	r0, [r2, #0]
 8014ec0:	6051      	str	r1, [r2, #4]
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014ec6:	4b28      	ldr	r3, [pc, #160]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014ec8:	2228      	movs	r2, #40	@ 0x28
 8014eca:	701a      	strb	r2, [r3, #0]
 8014ecc:	e004      	b.n	8014ed8 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8014ece:	4b26      	ldr	r3, [pc, #152]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014ed0:	2263      	movs	r2, #99	@ 0x63
 8014ed2:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8014ed4:	2336      	movs	r3, #54	@ 0x36
 8014ed6:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8014ed8:	79fb      	ldrb	r3, [r7, #7]
 8014eda:	3301      	adds	r3, #1
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7ff fe5a 	bl	8014b98 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014ee4:	89fb      	ldrh	r3, [r7, #14]
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	81fb      	strh	r3, [r7, #14]
 8014eea:	89fb      	ldrh	r3, [r7, #14]
 8014eec:	2b0f      	cmp	r3, #15
 8014eee:	d9b8      	bls.n	8014e62 <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8014ef0:	e035      	b.n	8014f5e <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8014ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8014f6c <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8014ef4:	881b      	ldrh	r3, [r3, #0]
 8014ef6:	491e      	ldr	r1, [pc, #120]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7fd fef7 	bl	8012cec <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8014efe:	4b1c      	ldr	r3, [pc, #112]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014f04:	4b18      	ldr	r3, [pc, #96]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f06:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8014f08:	4b19      	ldr	r3, [pc, #100]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f0a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014f0e:	4b16      	ldr	r3, [pc, #88]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f10:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8014f12:	4b17      	ldr	r3, [pc, #92]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f14:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014f18:	4b13      	ldr	r3, [pc, #76]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f1a:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8014f1c:	4b14      	ldr	r3, [pc, #80]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f1e:	799a      	ldrb	r2, [r3, #6]
 8014f20:	4b11      	ldr	r3, [pc, #68]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f22:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8014f24:	4b12      	ldr	r3, [pc, #72]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f28:	4a0f      	ldr	r2, [pc, #60]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f2a:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8014f2e:	4b10      	ldr	r3, [pc, #64]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f30:	791a      	ldrb	r2, [r3, #4]
 8014f32:	4b0d      	ldr	r3, [pc, #52]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f34:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014f36:	4a0c      	ldr	r2, [pc, #48]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f38:	4b0d      	ldr	r3, [pc, #52]	@ (8014f70 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f3a:	3207      	adds	r2, #7
 8014f3c:	334c      	adds	r3, #76	@ 0x4c
 8014f3e:	cb03      	ldmia	r3!, {r0, r1}
 8014f40:	6010      	str	r0, [r2, #0]
 8014f42:	6051      	str	r1, [r2, #4]
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014f48:	4b07      	ldr	r3, [pc, #28]	@ (8014f68 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f4a:	2228      	movs	r2, #40	@ 0x28
 8014f4c:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	3301      	adds	r3, #1
 8014f52:	b2db      	uxtb	r3, r3
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7ff fe1f 	bl	8014b98 <gos_sysmonSendResponse>
}
 8014f5a:	e000      	b.n	8014f5e <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 8014f5c:	bf00      	nop
}
 8014f5e:	bf00      	nop
 8014f60:	3710      	adds	r7, #16
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	20008f34 	.word	0x20008f34
 8014f6c:	20008ef0 	.word	0x20008ef0
 8014f70:	20008f4c 	.word	0x20008f4c

08014f74 <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b082      	sub	sp, #8
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014f7e:	79fb      	ldrb	r3, [r7, #7]
 8014f80:	4618      	mov	r0, r3
 8014f82:	f000 f939 	bl	80151f8 <gos_sysmonCheckMessage>
 8014f86:	4603      	mov	r3, r0
 8014f88:	461a      	mov	r2, r3
 8014f8a:	4b63      	ldr	r3, [pc, #396]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 8014f8c:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014f8e:	4b62      	ldr	r3, [pc, #392]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	2b28      	cmp	r3, #40	@ 0x28
 8014f94:	f040 80b5 	bne.w	8015102 <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 8014f98:	4b60      	ldr	r3, [pc, #384]	@ (801511c <gos_sysmonHandleTaskModification+0x1a8>)
 8014f9a:	881b      	ldrh	r3, [r3, #0]
 8014f9c:	4960      	ldr	r1, [pc, #384]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fd fea4 	bl	8012cec <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 8014fa4:	4b5d      	ldr	r3, [pc, #372]	@ (801511c <gos_sysmonHandleTaskModification+0x1a8>)
 8014fa6:	789b      	ldrb	r3, [r3, #2]
 8014fa8:	2b4a      	cmp	r3, #74	@ 0x4a
 8014faa:	f300 80a7 	bgt.w	80150fc <gos_sysmonHandleTaskModification+0x188>
 8014fae:	2b31      	cmp	r3, #49	@ 0x31
 8014fb0:	da04      	bge.n	8014fbc <gos_sysmonHandleTaskModification+0x48>
 8014fb2:	2b0c      	cmp	r3, #12
 8014fb4:	d03e      	beq.n	8015034 <gos_sysmonHandleTaskModification+0xc0>
 8014fb6:	2b22      	cmp	r3, #34	@ 0x22
 8014fb8:	d04c      	beq.n	8015054 <gos_sysmonHandleTaskModification+0xe0>
 8014fba:	e09f      	b.n	80150fc <gos_sysmonHandleTaskModification+0x188>
 8014fbc:	3b31      	subs	r3, #49	@ 0x31
 8014fbe:	2b19      	cmp	r3, #25
 8014fc0:	f200 809c 	bhi.w	80150fc <gos_sysmonHandleTaskModification+0x188>
 8014fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8014fcc <gos_sysmonHandleTaskModification+0x58>)
 8014fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fca:	bf00      	nop
 8014fcc:	08015075 	.word	0x08015075
 8014fd0:	080150fd 	.word	0x080150fd
 8014fd4:	080150fd 	.word	0x080150fd
 8014fd8:	08015095 	.word	0x08015095
 8014fdc:	080150fd 	.word	0x080150fd
 8014fe0:	080150fd 	.word	0x080150fd
 8014fe4:	080150fd 	.word	0x080150fd
 8014fe8:	080150fd 	.word	0x080150fd
 8014fec:	080150fd 	.word	0x080150fd
 8014ff0:	080150fd 	.word	0x080150fd
 8014ff4:	080150fd 	.word	0x080150fd
 8014ff8:	080150fd 	.word	0x080150fd
 8014ffc:	080150fd 	.word	0x080150fd
 8015000:	080150fd 	.word	0x080150fd
 8015004:	080150bd 	.word	0x080150bd
 8015008:	080150fd 	.word	0x080150fd
 801500c:	080150fd 	.word	0x080150fd
 8015010:	080150fd 	.word	0x080150fd
 8015014:	080150fd 	.word	0x080150fd
 8015018:	080150fd 	.word	0x080150fd
 801501c:	080150fd 	.word	0x080150fd
 8015020:	080150fd 	.word	0x080150fd
 8015024:	080150fd 	.word	0x080150fd
 8015028:	080150fd 	.word	0x080150fd
 801502c:	080150fd 	.word	0x080150fd
 8015030:	080150dd 	.word	0x080150dd
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 8015034:	4b3a      	ldr	r3, [pc, #232]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 8015036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015038:	4618      	mov	r0, r3
 801503a:	f7fc fcd1 	bl	80119e0 <gos_taskSuspend>
 801503e:	4603      	mov	r3, r0
 8015040:	2b55      	cmp	r3, #85	@ 0x55
 8015042:	d103      	bne.n	801504c <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015044:	4b34      	ldr	r3, [pc, #208]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 8015046:	2228      	movs	r2, #40	@ 0x28
 8015048:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801504a:	e05a      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801504c:	4b32      	ldr	r3, [pc, #200]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 801504e:	2263      	movs	r2, #99	@ 0x63
 8015050:	701a      	strb	r2, [r3, #0]
                 break;
 8015052:	e056      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 8015054:	4b32      	ldr	r3, [pc, #200]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 8015056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015058:	4618      	mov	r0, r3
 801505a:	f7fc fde3 	bl	8011c24 <gos_taskResume>
 801505e:	4603      	mov	r3, r0
 8015060:	2b55      	cmp	r3, #85	@ 0x55
 8015062:	d103      	bne.n	801506c <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015064:	4b2c      	ldr	r3, [pc, #176]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 8015066:	2228      	movs	r2, #40	@ 0x28
 8015068:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801506a:	e04a      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801506c:	4b2a      	ldr	r3, [pc, #168]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 801506e:	2263      	movs	r2, #99	@ 0x63
 8015070:	701a      	strb	r2, [r3, #0]
                 break;
 8015072:	e046      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 8015074:	4b2a      	ldr	r3, [pc, #168]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 8015076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015078:	4618      	mov	r0, r3
 801507a:	f7fd f87d 	bl	8012178 <gos_taskDelete>
 801507e:	4603      	mov	r3, r0
 8015080:	2b55      	cmp	r3, #85	@ 0x55
 8015082:	d103      	bne.n	801508c <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015084:	4b24      	ldr	r3, [pc, #144]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 8015086:	2228      	movs	r2, #40	@ 0x28
 8015088:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801508a:	e03a      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801508c:	4b22      	ldr	r3, [pc, #136]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 801508e:	2263      	movs	r2, #99	@ 0x63
 8015090:	701a      	strb	r2, [r3, #0]
                 break;
 8015092:	e036      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 8015094:	4b22      	ldr	r3, [pc, #136]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 8015096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015098:	4a20      	ldr	r2, [pc, #128]	@ (801511c <gos_sysmonHandleTaskModification+0x1a8>)
 801509a:	f8d2 2003 	ldr.w	r2, [r2, #3]
 801509e:	4611      	mov	r1, r2
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fc fe6d 	bl	8011d80 <gos_taskBlock>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b55      	cmp	r3, #85	@ 0x55
 80150aa:	d103      	bne.n	80150b4 <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80150ac:	4b1a      	ldr	r3, [pc, #104]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150ae:	2228      	movs	r2, #40	@ 0x28
 80150b0:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80150b2:	e026      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80150b4:	4b18      	ldr	r3, [pc, #96]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150b6:	2263      	movs	r2, #99	@ 0x63
 80150b8:	701a      	strb	r2, [r3, #0]
                 break;
 80150ba:	e022      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 80150bc:	4b18      	ldr	r3, [pc, #96]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 80150be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7fc ff6f 	bl	8011fa4 <gos_taskUnblock>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b55      	cmp	r3, #85	@ 0x55
 80150ca:	d103      	bne.n	80150d4 <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80150cc:	4b12      	ldr	r3, [pc, #72]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150ce:	2228      	movs	r2, #40	@ 0x28
 80150d0:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80150d2:	e016      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80150d4:	4b10      	ldr	r3, [pc, #64]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150d6:	2263      	movs	r2, #99	@ 0x63
 80150d8:	701a      	strb	r2, [r3, #0]
                 break;
 80150da:	e012      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 80150dc:	4b10      	ldr	r3, [pc, #64]	@ (8015120 <gos_sysmonHandleTaskModification+0x1ac>)
 80150de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7fc fbb7 	bl	8011854 <gos_taskWakeup>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b55      	cmp	r3, #85	@ 0x55
 80150ea:	d103      	bne.n	80150f4 <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80150ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150ee:	2228      	movs	r2, #40	@ 0x28
 80150f0:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80150f2:	e006      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80150f4:	4b08      	ldr	r3, [pc, #32]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150f6:	2263      	movs	r2, #99	@ 0x63
 80150f8:	701a      	strb	r2, [r3, #0]
                 break;
 80150fa:	e002      	b.n	8015102 <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80150fc:	4b06      	ldr	r3, [pc, #24]	@ (8015118 <gos_sysmonHandleTaskModification+0x1a4>)
 80150fe:	2263      	movs	r2, #99	@ 0x63
 8015100:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8015102:	79fb      	ldrb	r3, [r7, #7]
 8015104:	3301      	adds	r3, #1
 8015106:	b2db      	uxtb	r3, r3
 8015108:	4618      	mov	r0, r3
 801510a:	f7ff fd45 	bl	8014b98 <gos_sysmonSendResponse>
}
 801510e:	bf00      	nop
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	20008fc0 	.word	0x20008fc0
 801511c:	20008fb8 	.word	0x20008fb8
 8015120:	20008f4c 	.word	0x20008f4c

08015124 <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	4603      	mov	r3, r0
 801512c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 801512e:	79fb      	ldrb	r3, [r7, #7]
 8015130:	4618      	mov	r0, r3
 8015132:	f000 f861 	bl	80151f8 <gos_sysmonCheckMessage>
 8015136:	4603      	mov	r3, r0
 8015138:	461a      	mov	r2, r3
 801513a:	4b0e      	ldr	r3, [pc, #56]	@ (8015174 <gos_sysmonHandleSysRuntimeGet+0x50>)
 801513c:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 801513e:	4b0d      	ldr	r3, [pc, #52]	@ (8015174 <gos_sysmonHandleSysRuntimeGet+0x50>)
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	2b28      	cmp	r3, #40	@ 0x28
 8015144:	d10c      	bne.n	8015160 <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 8015146:	480c      	ldr	r0, [pc, #48]	@ (8015178 <gos_sysmonHandleSysRuntimeGet+0x54>)
 8015148:	f000 f8d8 	bl	80152fc <gos_runTimeGet>
 801514c:	4603      	mov	r3, r0
 801514e:	2b55      	cmp	r3, #85	@ 0x55
 8015150:	d103      	bne.n	801515a <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015152:	4b08      	ldr	r3, [pc, #32]	@ (8015174 <gos_sysmonHandleSysRuntimeGet+0x50>)
 8015154:	2228      	movs	r2, #40	@ 0x28
 8015156:	701a      	strb	r2, [r3, #0]
 8015158:	e002      	b.n	8015160 <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801515a:	4b06      	ldr	r3, [pc, #24]	@ (8015174 <gos_sysmonHandleSysRuntimeGet+0x50>)
 801515c:	2263      	movs	r2, #99	@ 0x63
 801515e:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8015160:	79fb      	ldrb	r3, [r7, #7]
 8015162:	3301      	adds	r3, #1
 8015164:	b2db      	uxtb	r3, r3
 8015166:	4618      	mov	r0, r3
 8015168:	f7ff fd16 	bl	8014b98 <gos_sysmonSendResponse>
}
 801516c:	bf00      	nop
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	20008fc4 	.word	0x20008fc4
 8015178:	20008fc5 	.word	0x20008fc5

0801517c <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	4603      	mov	r3, r0
 8015184:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8015186:	79fb      	ldrb	r3, [r7, #7]
 8015188:	4618      	mov	r0, r3
 801518a:	f000 f835 	bl	80151f8 <gos_sysmonCheckMessage>
 801518e:	4603      	mov	r3, r0
 8015190:	461a      	mov	r2, r3
 8015192:	4b0e      	ldr	r3, [pc, #56]	@ (80151cc <gos_sysmonHandleSystimeSet+0x50>)
 8015194:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8015196:	4b0d      	ldr	r3, [pc, #52]	@ (80151cc <gos_sysmonHandleSystimeSet+0x50>)
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	2b28      	cmp	r3, #40	@ 0x28
 801519c:	d10c      	bne.n	80151b8 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 801519e:	480c      	ldr	r0, [pc, #48]	@ (80151d0 <gos_sysmonHandleSystimeSet+0x54>)
 80151a0:	f000 f890 	bl	80152c4 <gos_timeSet>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b55      	cmp	r3, #85	@ 0x55
 80151a8:	d103      	bne.n	80151b2 <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80151aa:	4b08      	ldr	r3, [pc, #32]	@ (80151cc <gos_sysmonHandleSystimeSet+0x50>)
 80151ac:	2228      	movs	r2, #40	@ 0x28
 80151ae:	701a      	strb	r2, [r3, #0]
 80151b0:	e002      	b.n	80151b8 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80151b2:	4b06      	ldr	r3, [pc, #24]	@ (80151cc <gos_sysmonHandleSystimeSet+0x50>)
 80151b4:	2263      	movs	r2, #99	@ 0x63
 80151b6:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 80151b8:	79fb      	ldrb	r3, [r7, #7]
 80151ba:	3301      	adds	r3, #1
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	4618      	mov	r0, r3
 80151c0:	f7ff fcea 	bl	8014b98 <gos_sysmonSendResponse>
}
 80151c4:	bf00      	nop
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	20008fdc 	.word	0x20008fdc
 80151d0:	20008fd0 	.word	0x20008fd0

080151d4 <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 80151de:	79fb      	ldrb	r3, [r7, #7]
 80151e0:	4618      	mov	r0, r3
 80151e2:	f000 f809 	bl	80151f8 <gos_sysmonCheckMessage>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b28      	cmp	r3, #40	@ 0x28
 80151ea:	d101      	bne.n	80151f0 <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 80151ec:	f7fb f908 	bl	8010400 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 80151f0:	bf00      	nop
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	4603      	mov	r3, r0
 8015200:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 8015202:	2328      	movs	r3, #40	@ 0x28
 8015204:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 8015206:	79fb      	ldrb	r3, [r7, #7]
 8015208:	4a0d      	ldr	r2, [pc, #52]	@ (8015240 <gos_sysmonCheckMessage+0x48>)
 801520a:	011b      	lsls	r3, r3, #4
 801520c:	4413      	add	r3, r2
 801520e:	3304      	adds	r3, #4
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d00f      	beq.n	8015236 <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 8015216:	79fb      	ldrb	r3, [r7, #7]
 8015218:	4a09      	ldr	r2, [pc, #36]	@ (8015240 <gos_sysmonCheckMessage+0x48>)
 801521a:	011b      	lsls	r3, r3, #4
 801521c:	4413      	add	r3, r2
 801521e:	3304      	adds	r3, #4
 8015220:	6818      	ldr	r0, [r3, #0]
 8015222:	79fb      	ldrb	r3, [r7, #7]
 8015224:	4a06      	ldr	r2, [pc, #24]	@ (8015240 <gos_sysmonCheckMessage+0x48>)
 8015226:	011b      	lsls	r3, r3, #4
 8015228:	4413      	add	r3, r2
 801522a:	3308      	adds	r3, #8
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	461a      	mov	r2, r3
 8015230:	4904      	ldr	r1, [pc, #16]	@ (8015244 <gos_sysmonCheckMessage+0x4c>)
 8015232:	f001 ff7c 	bl	801712e <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 8015236:	7bfb      	ldrb	r3, [r7, #15]
}
 8015238:	4618      	mov	r0, r3
 801523a:	3710      	adds	r7, #16
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	0801aaa4 	.word	0x0801aaa4
 8015244:	20007ee8 	.word	0x20007ee8

08015248 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_ERROR;
 801524e:	23ae      	movs	r3, #174	@ 0xae
 8015250:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 8015252:	480a      	ldr	r0, [pc, #40]	@ (801527c <gos_timeInit+0x34>)
 8015254:	f7ff fa50 	bl	80146f8 <gos_signalCreate>
 8015258:	4603      	mov	r3, r0
 801525a:	2b55      	cmp	r3, #85	@ 0x55
 801525c:	d108      	bne.n	8015270 <gos_timeInit+0x28>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) == GOS_SUCCESS
 801525e:	4908      	ldr	r1, [pc, #32]	@ (8015280 <gos_timeInit+0x38>)
 8015260:	4808      	ldr	r0, [pc, #32]	@ (8015284 <gos_timeInit+0x3c>)
 8015262:	f7fc f8d3 	bl	801140c <gos_taskRegister>
 8015266:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 8015268:	2b55      	cmp	r3, #85	@ 0x55
 801526a:	d101      	bne.n	8015270 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_SUCCESS;
 801526c:	2355      	movs	r3, #85	@ 0x55
 801526e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 8015270:	79fb      	ldrb	r3, [r7, #7]
}
 8015272:	4618      	mov	r0, r3
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}
 801527a:	bf00      	nop
 801527c:	2000916c 	.word	0x2000916c
 8015280:	2000916a 	.word	0x2000916a
 8015284:	20001104 	.word	0x20001104

08015288 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8015288:	b480      	push	{r7}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 8015290:	23ae      	movs	r3, #174	@ 0xae
 8015292:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d00a      	beq.n	80152b0 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	4908      	ldr	r1, [pc, #32]	@ (80152c0 <gos_timeGet+0x38>)
 801529e:	461a      	mov	r2, r3
 80152a0:	460b      	mov	r3, r1
 80152a2:	cb03      	ldmia	r3!, {r0, r1}
 80152a4:	6010      	str	r0, [r2, #0]
 80152a6:	6051      	str	r1, [r2, #4]
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 80152ac:	2355      	movs	r3, #85	@ 0x55
 80152ae:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 80152b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3714      	adds	r7, #20
 80152b6:	46bd      	mov	sp, r7
 80152b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152bc:	4770      	bx	lr
 80152be:	bf00      	nop
 80152c0:	200010f8 	.word	0x200010f8

080152c4 <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 80152cc:	23ae      	movs	r3, #174	@ 0xae
 80152ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d008      	beq.n	80152e8 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 80152d6:	4b08      	ldr	r3, [pc, #32]	@ (80152f8 <gos_timeSet+0x34>)
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	6810      	ldr	r0, [r2, #0]
 80152dc:	6851      	ldr	r1, [r2, #4]
 80152de:	c303      	stmia	r3!, {r0, r1}
 80152e0:	8912      	ldrh	r2, [r2, #8]
 80152e2:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 80152e4:	2355      	movs	r3, #85	@ 0x55
 80152e6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 80152e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3714      	adds	r7, #20
 80152ee:	46bd      	mov	sp, r7
 80152f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop
 80152f8:	200010f8 	.word	0x200010f8

080152fc <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 80152fc:	b480      	push	{r7}
 80152fe:	b085      	sub	sp, #20
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 8015304:	23ae      	movs	r3, #174	@ 0xae
 8015306:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00a      	beq.n	8015324 <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	4908      	ldr	r1, [pc, #32]	@ (8015334 <gos_runTimeGet+0x38>)
 8015312:	461a      	mov	r2, r3
 8015314:	460b      	mov	r3, r1
 8015316:	cb03      	ldmia	r3!, {r0, r1}
 8015318:	6010      	str	r0, [r2, #0]
 801531a:	6051      	str	r1, [r2, #4]
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 8015320:	2355      	movs	r3, #85	@ 0x55
 8015322:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 8015324:	7bfb      	ldrb	r3, [r7, #15]
}
 8015326:	4618      	mov	r0, r3
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	20009160 	.word	0x20009160

08015338 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 8015338:	b480      	push	{r7}
 801533a:	b085      	sub	sp, #20
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	460b      	mov	r3, r1
 8015342:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 8015344:	23ae      	movs	r3, #174	@ 0xae
 8015346:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	f000 80e4 	beq.w	8015518 <gos_timeAddMilliseconds+0x1e0>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	881b      	ldrh	r3, [r3, #0]
 8015354:	b29a      	uxth	r2, r3
 8015356:	887b      	ldrh	r3, [r7, #2]
 8015358:	4413      	add	r3, r2
 801535a:	b29a      	uxth	r2, r3
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	b29b      	uxth	r3, r3
 8015366:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801536a:	f0c0 80d3 	bcc.w	8015514 <gos_timeAddMilliseconds+0x1dc>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	789a      	ldrb	r2, [r3, #2]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	881b      	ldrh	r3, [r3, #0]
 8015376:	b29b      	uxth	r3, r3
 8015378:	496b      	ldr	r1, [pc, #428]	@ (8015528 <gos_timeAddMilliseconds+0x1f0>)
 801537a:	fba1 1303 	umull	r1, r3, r1, r3
 801537e:	099b      	lsrs	r3, r3, #6
 8015380:	b29b      	uxth	r3, r3
 8015382:	b2db      	uxtb	r3, r3
 8015384:	4413      	add	r3, r2
 8015386:	b2da      	uxtb	r2, r3
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	881b      	ldrh	r3, [r3, #0]
 8015390:	b29b      	uxth	r3, r3
 8015392:	4a65      	ldr	r2, [pc, #404]	@ (8015528 <gos_timeAddMilliseconds+0x1f0>)
 8015394:	fba2 1203 	umull	r1, r2, r2, r3
 8015398:	0992      	lsrs	r2, r2, #6
 801539a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801539e:	fb01 f202 	mul.w	r2, r1, r2
 80153a2:	1a9b      	subs	r3, r3, r2
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	789b      	ldrb	r3, [r3, #2]
 80153ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80153b0:	f240 80b0 	bls.w	8015514 <gos_timeAddMilliseconds+0x1dc>
            {
                pTime->minutes += pTime->seconds / 60u;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	78da      	ldrb	r2, [r3, #3]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	789b      	ldrb	r3, [r3, #2]
 80153bc:	495b      	ldr	r1, [pc, #364]	@ (801552c <gos_timeAddMilliseconds+0x1f4>)
 80153be:	fba1 1303 	umull	r1, r3, r1, r3
 80153c2:	095b      	lsrs	r3, r3, #5
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	4413      	add	r3, r2
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	789a      	ldrb	r2, [r3, #2]
 80153d2:	4b56      	ldr	r3, [pc, #344]	@ (801552c <gos_timeAddMilliseconds+0x1f4>)
 80153d4:	fba3 1302 	umull	r1, r3, r3, r2
 80153d8:	0959      	lsrs	r1, r3, #5
 80153da:	460b      	mov	r3, r1
 80153dc:	011b      	lsls	r3, r3, #4
 80153de:	1a5b      	subs	r3, r3, r1
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	1ad3      	subs	r3, r2, r3
 80153e4:	b2da      	uxtb	r2, r3
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	78db      	ldrb	r3, [r3, #3]
 80153ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80153f0:	f240 8090 	bls.w	8015514 <gos_timeAddMilliseconds+0x1dc>
                {
                    pTime->hours += pTime->minutes / 60u;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	791a      	ldrb	r2, [r3, #4]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	78db      	ldrb	r3, [r3, #3]
 80153fc:	494b      	ldr	r1, [pc, #300]	@ (801552c <gos_timeAddMilliseconds+0x1f4>)
 80153fe:	fba1 1303 	umull	r1, r3, r1, r3
 8015402:	095b      	lsrs	r3, r3, #5
 8015404:	b2db      	uxtb	r3, r3
 8015406:	4413      	add	r3, r2
 8015408:	b2da      	uxtb	r2, r3
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	78da      	ldrb	r2, [r3, #3]
 8015412:	4b46      	ldr	r3, [pc, #280]	@ (801552c <gos_timeAddMilliseconds+0x1f4>)
 8015414:	fba3 1302 	umull	r1, r3, r3, r2
 8015418:	0959      	lsrs	r1, r3, #5
 801541a:	460b      	mov	r3, r1
 801541c:	011b      	lsls	r3, r3, #4
 801541e:	1a5b      	subs	r3, r3, r1
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	1ad3      	subs	r3, r2, r3
 8015424:	b2da      	uxtb	r2, r3
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	791b      	ldrb	r3, [r3, #4]
 801542e:	2b17      	cmp	r3, #23
 8015430:	d970      	bls.n	8015514 <gos_timeAddMilliseconds+0x1dc>
                    {
                        pTime->days += pTime->hours / 24u;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8015438:	b29b      	uxth	r3, r3
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	7912      	ldrb	r2, [r2, #4]
 801543e:	493c      	ldr	r1, [pc, #240]	@ (8015530 <gos_timeAddMilliseconds+0x1f8>)
 8015440:	fba1 1202 	umull	r1, r2, r1, r2
 8015444:	0912      	lsrs	r2, r2, #4
 8015446:	b2d2      	uxtb	r2, r2
 8015448:	4413      	add	r3, r2
 801544a:	b29a      	uxth	r2, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	791a      	ldrb	r2, [r3, #4]
 8015456:	4b36      	ldr	r3, [pc, #216]	@ (8015530 <gos_timeAddMilliseconds+0x1f8>)
 8015458:	fba3 1302 	umull	r1, r3, r3, r2
 801545c:	0919      	lsrs	r1, r3, #4
 801545e:	460b      	mov	r3, r1
 8015460:	005b      	lsls	r3, r3, #1
 8015462:	440b      	add	r3, r1
 8015464:	00db      	lsls	r3, r3, #3
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	b2da      	uxtb	r2, r3
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	891b      	ldrh	r3, [r3, #8]
 8015472:	b29b      	uxth	r3, r3
 8015474:	f003 0303 	and.w	r3, r3, #3
 8015478:	b29b      	uxth	r3, r3
 801547a:	2b00      	cmp	r3, #0
 801547c:	d117      	bne.n	80154ae <gos_timeAddMilliseconds+0x176>
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	79db      	ldrb	r3, [r3, #7]
 8015482:	2b02      	cmp	r3, #2
 8015484:	d113      	bne.n	80154ae <gos_timeAddMilliseconds+0x176>
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801548c:	b29b      	uxth	r3, r3
 801548e:	2b1d      	cmp	r3, #29
 8015490:	d90d      	bls.n	80154ae <gos_timeAddMilliseconds+0x176>
                        {
                            pTime->days = 1u;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	f042 0201 	orr.w	r2, r2, #1
 801549a:	715a      	strb	r2, [r3, #5]
 801549c:	2200      	movs	r2, #0
 801549e:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	79db      	ldrb	r3, [r3, #7]
 80154a4:	3301      	adds	r3, #1
 80154a6:	b2da      	uxtb	r2, r3
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	71da      	strb	r2, [r3, #7]
 80154ac:	e024      	b.n	80154f8 <gos_timeAddMilliseconds+0x1c0>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	891b      	ldrh	r3, [r3, #8]
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	f003 0303 	and.w	r3, r3, #3
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d103      	bne.n	80154c6 <gos_timeAddMilliseconds+0x18e>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	79db      	ldrb	r3, [r3, #7]
 80154c2:	2b02      	cmp	r3, #2
 80154c4:	d018      	beq.n	80154f8 <gos_timeAddMilliseconds+0x1c0>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	79db      	ldrb	r3, [r3, #7]
 80154ca:	3b01      	subs	r3, #1
 80154cc:	4a19      	ldr	r2, [pc, #100]	@ (8015534 <gos_timeAddMilliseconds+0x1fc>)
 80154ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80154d8:	b29b      	uxth	r3, r3
 80154da:	429a      	cmp	r2, r3
 80154dc:	d20c      	bcs.n	80154f8 <gos_timeAddMilliseconds+0x1c0>
                        {
                            pTime->days = 1u;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2200      	movs	r2, #0
 80154e2:	f042 0201 	orr.w	r2, r2, #1
 80154e6:	715a      	strb	r2, [r3, #5]
 80154e8:	2200      	movs	r2, #0
 80154ea:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	79db      	ldrb	r3, [r3, #7]
 80154f0:	3301      	adds	r3, #1
 80154f2:	b2da      	uxtb	r2, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	79db      	ldrb	r3, [r3, #7]
 80154fc:	2b0d      	cmp	r3, #13
 80154fe:	d109      	bne.n	8015514 <gos_timeAddMilliseconds+0x1dc>
                        {
                            pTime->months = 1;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2201      	movs	r2, #1
 8015504:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	891b      	ldrh	r3, [r3, #8]
 801550a:	b29b      	uxth	r3, r3
 801550c:	3301      	adds	r3, #1
 801550e:	b29a      	uxth	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 8015514:	2355      	movs	r3, #85	@ 0x55
 8015516:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 8015518:	7bfb      	ldrb	r3, [r7, #15]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3714      	adds	r7, #20
 801551e:	46bd      	mov	sp, r7
 8015520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015524:	4770      	bx	lr
 8015526:	bf00      	nop
 8015528:	10624dd3 	.word	0x10624dd3
 801552c:	88888889 	.word	0x88888889
 8015530:	aaaaaaab 	.word	0xaaaaaaab
 8015534:	0801aba4 	.word	0x0801aba4

08015538 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 8015538:	b480      	push	{r7}
 801553a:	b087      	sub	sp, #28
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	4613      	mov	r3, r2
 8015544:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 8015546:	23ae      	movs	r3, #174	@ 0xae
 8015548:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d063      	beq.n	8015618 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	881b      	ldrh	r3, [r3, #0]
 8015554:	b29a      	uxth	r2, r3
 8015556:	88fb      	ldrh	r3, [r7, #6]
 8015558:	4413      	add	r3, r2
 801555a:	b29a      	uxth	r2, r3
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	881b      	ldrh	r3, [r3, #0]
 8015564:	b29b      	uxth	r3, r3
 8015566:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801556a:	d355      	bcc.n	8015618 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	881b      	ldrh	r3, [r3, #0]
 8015570:	b29b      	uxth	r3, r3
 8015572:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8015576:	b29a      	uxth	r2, r3
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	885b      	ldrh	r3, [r3, #2]
 8015580:	b29b      	uxth	r3, r3
 8015582:	3301      	adds	r3, #1
 8015584:	b29a      	uxth	r2, r3
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	885b      	ldrh	r3, [r3, #2]
 801558e:	b29b      	uxth	r3, r3
 8015590:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015594:	d340      	bcc.n	8015618 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	885b      	ldrh	r3, [r3, #2]
 801559a:	b29b      	uxth	r3, r3
 801559c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80155a0:	b29a      	uxth	r2, r3
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	791b      	ldrb	r3, [r3, #4]
 80155aa:	3301      	adds	r3, #1
 80155ac:	b2da      	uxtb	r2, r3
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	791b      	ldrb	r3, [r3, #4]
 80155b6:	2b3b      	cmp	r3, #59	@ 0x3b
 80155b8:	d92e      	bls.n	8015618 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	791b      	ldrb	r3, [r3, #4]
 80155be:	3b3c      	subs	r3, #60	@ 0x3c
 80155c0:	b2da      	uxtb	r2, r3
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	795b      	ldrb	r3, [r3, #5]
 80155ca:	3301      	adds	r3, #1
 80155cc:	b2da      	uxtb	r2, r3
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	795b      	ldrb	r3, [r3, #5]
 80155d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80155d8:	d91e      	bls.n	8015618 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	795b      	ldrb	r3, [r3, #5]
 80155de:	3b3c      	subs	r3, #60	@ 0x3c
 80155e0:	b2da      	uxtb	r2, r3
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	799b      	ldrb	r3, [r3, #6]
 80155ea:	3301      	adds	r3, #1
 80155ec:	b2da      	uxtb	r2, r3
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	799b      	ldrb	r3, [r3, #6]
 80155f6:	2b17      	cmp	r3, #23
 80155f8:	d90e      	bls.n	8015618 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	799b      	ldrb	r3, [r3, #6]
 80155fe:	3b18      	subs	r3, #24
 8015600:	b2da      	uxtb	r2, r3
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801560c:	b29b      	uxth	r3, r3
 801560e:	3301      	adds	r3, #1
 8015610:	b29a      	uxth	r2, r3
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d063      	beq.n	80156e6 <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	881b      	ldrh	r3, [r3, #0]
 8015622:	b29a      	uxth	r2, r3
 8015624:	88fb      	ldrh	r3, [r7, #6]
 8015626:	4413      	add	r3, r2
 8015628:	b29a      	uxth	r2, r3
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	b29b      	uxth	r3, r3
 8015634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015638:	d355      	bcc.n	80156e6 <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	881b      	ldrh	r3, [r3, #0]
 801563e:	b29b      	uxth	r3, r3
 8015640:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8015644:	b29a      	uxth	r2, r3
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	885b      	ldrh	r3, [r3, #2]
 801564e:	b29b      	uxth	r3, r3
 8015650:	3301      	adds	r3, #1
 8015652:	b29a      	uxth	r2, r3
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	885b      	ldrh	r3, [r3, #2]
 801565c:	b29b      	uxth	r3, r3
 801565e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015662:	d340      	bcc.n	80156e6 <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	885b      	ldrh	r3, [r3, #2]
 8015668:	b29b      	uxth	r3, r3
 801566a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801566e:	b29a      	uxth	r2, r3
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	791b      	ldrb	r3, [r3, #4]
 8015678:	3301      	adds	r3, #1
 801567a:	b2da      	uxtb	r2, r3
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	791b      	ldrb	r3, [r3, #4]
 8015684:	2b3b      	cmp	r3, #59	@ 0x3b
 8015686:	d92e      	bls.n	80156e6 <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	791b      	ldrb	r3, [r3, #4]
 801568c:	3b3c      	subs	r3, #60	@ 0x3c
 801568e:	b2da      	uxtb	r2, r3
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	795b      	ldrb	r3, [r3, #5]
 8015698:	3301      	adds	r3, #1
 801569a:	b2da      	uxtb	r2, r3
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	795b      	ldrb	r3, [r3, #5]
 80156a4:	2b3b      	cmp	r3, #59	@ 0x3b
 80156a6:	d91e      	bls.n	80156e6 <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	795b      	ldrb	r3, [r3, #5]
 80156ac:	3b3c      	subs	r3, #60	@ 0x3c
 80156ae:	b2da      	uxtb	r2, r3
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	799b      	ldrb	r3, [r3, #6]
 80156b8:	3301      	adds	r3, #1
 80156ba:	b2da      	uxtb	r2, r3
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	799b      	ldrb	r3, [r3, #6]
 80156c4:	2b17      	cmp	r3, #23
 80156c6:	d90e      	bls.n	80156e6 <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	799b      	ldrb	r3, [r3, #6]
 80156cc:	3b18      	subs	r3, #24
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80156da:	b29b      	uxth	r3, r3
 80156dc:	3301      	adds	r3, #1
 80156de:	b29a      	uxth	r2, r3
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 80156e6:	2355      	movs	r3, #85	@ 0x55
 80156e8:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 80156ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	371c      	adds	r7, #28
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr

080156f8 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 80156f8:	b480      	push	{r7}
 80156fa:	b085      	sub	sp, #20
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	460b      	mov	r3, r1
 8015702:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 8015704:	23ae      	movs	r3, #174	@ 0xae
 8015706:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2b00      	cmp	r3, #0
 801570c:	f000 808e 	beq.w	801582c <gos_runTimeAddMilliseconds+0x134>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	885b      	ldrh	r3, [r3, #2]
 8015714:	b29a      	uxth	r2, r3
 8015716:	887b      	ldrh	r3, [r7, #2]
 8015718:	4413      	add	r3, r2
 801571a:	b29a      	uxth	r2, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	885b      	ldrh	r3, [r3, #2]
 8015724:	b29b      	uxth	r3, r3
 8015726:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801572a:	d37d      	bcc.n	8015828 <gos_runTimeAddMilliseconds+0x130>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	791a      	ldrb	r2, [r3, #4]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	885b      	ldrh	r3, [r3, #2]
 8015734:	b29b      	uxth	r3, r3
 8015736:	4941      	ldr	r1, [pc, #260]	@ (801583c <gos_runTimeAddMilliseconds+0x144>)
 8015738:	fba1 1303 	umull	r1, r3, r1, r3
 801573c:	099b      	lsrs	r3, r3, #6
 801573e:	b29b      	uxth	r3, r3
 8015740:	b2db      	uxtb	r3, r3
 8015742:	4413      	add	r3, r2
 8015744:	b2da      	uxtb	r2, r3
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	885b      	ldrh	r3, [r3, #2]
 801574e:	b29b      	uxth	r3, r3
 8015750:	4a3a      	ldr	r2, [pc, #232]	@ (801583c <gos_runTimeAddMilliseconds+0x144>)
 8015752:	fba2 1203 	umull	r1, r2, r2, r3
 8015756:	0992      	lsrs	r2, r2, #6
 8015758:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801575c:	fb01 f202 	mul.w	r2, r1, r2
 8015760:	1a9b      	subs	r3, r3, r2
 8015762:	b29a      	uxth	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	791b      	ldrb	r3, [r3, #4]
 801576c:	2b3b      	cmp	r3, #59	@ 0x3b
 801576e:	d95b      	bls.n	8015828 <gos_runTimeAddMilliseconds+0x130>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	795a      	ldrb	r2, [r3, #5]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	791b      	ldrb	r3, [r3, #4]
 8015778:	4931      	ldr	r1, [pc, #196]	@ (8015840 <gos_runTimeAddMilliseconds+0x148>)
 801577a:	fba1 1303 	umull	r1, r3, r1, r3
 801577e:	095b      	lsrs	r3, r3, #5
 8015780:	b2db      	uxtb	r3, r3
 8015782:	4413      	add	r3, r2
 8015784:	b2da      	uxtb	r2, r3
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	791a      	ldrb	r2, [r3, #4]
 801578e:	4b2c      	ldr	r3, [pc, #176]	@ (8015840 <gos_runTimeAddMilliseconds+0x148>)
 8015790:	fba3 1302 	umull	r1, r3, r3, r2
 8015794:	0959      	lsrs	r1, r3, #5
 8015796:	460b      	mov	r3, r1
 8015798:	011b      	lsls	r3, r3, #4
 801579a:	1a5b      	subs	r3, r3, r1
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	1ad3      	subs	r3, r2, r3
 80157a0:	b2da      	uxtb	r2, r3
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	795b      	ldrb	r3, [r3, #5]
 80157aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80157ac:	d93c      	bls.n	8015828 <gos_runTimeAddMilliseconds+0x130>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	799a      	ldrb	r2, [r3, #6]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	795b      	ldrb	r3, [r3, #5]
 80157b6:	4922      	ldr	r1, [pc, #136]	@ (8015840 <gos_runTimeAddMilliseconds+0x148>)
 80157b8:	fba1 1303 	umull	r1, r3, r1, r3
 80157bc:	095b      	lsrs	r3, r3, #5
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	4413      	add	r3, r2
 80157c2:	b2da      	uxtb	r2, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	795a      	ldrb	r2, [r3, #5]
 80157cc:	4b1c      	ldr	r3, [pc, #112]	@ (8015840 <gos_runTimeAddMilliseconds+0x148>)
 80157ce:	fba3 1302 	umull	r1, r3, r3, r2
 80157d2:	0959      	lsrs	r1, r3, #5
 80157d4:	460b      	mov	r3, r1
 80157d6:	011b      	lsls	r3, r3, #4
 80157d8:	1a5b      	subs	r3, r3, r1
 80157da:	009b      	lsls	r3, r3, #2
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	b2da      	uxtb	r2, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	799b      	ldrb	r3, [r3, #6]
 80157e8:	2b17      	cmp	r3, #23
 80157ea:	d91d      	bls.n	8015828 <gos_runTimeAddMilliseconds+0x130>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	7992      	ldrb	r2, [r2, #6]
 80157f8:	4912      	ldr	r1, [pc, #72]	@ (8015844 <gos_runTimeAddMilliseconds+0x14c>)
 80157fa:	fba1 1202 	umull	r1, r2, r1, r2
 80157fe:	0912      	lsrs	r2, r2, #4
 8015800:	b2d2      	uxtb	r2, r2
 8015802:	4413      	add	r3, r2
 8015804:	b29a      	uxth	r2, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	799a      	ldrb	r2, [r3, #6]
 8015810:	4b0c      	ldr	r3, [pc, #48]	@ (8015844 <gos_runTimeAddMilliseconds+0x14c>)
 8015812:	fba3 1302 	umull	r1, r3, r3, r2
 8015816:	0919      	lsrs	r1, r3, #4
 8015818:	460b      	mov	r3, r1
 801581a:	005b      	lsls	r3, r3, #1
 801581c:	440b      	add	r3, r1
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	1ad3      	subs	r3, r2, r3
 8015822:	b2da      	uxtb	r2, r3
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 8015828:	2355      	movs	r3, #85	@ 0x55
 801582a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 801582c:	7bfb      	ldrb	r3, [r7, #15]
}
 801582e:	4618      	mov	r0, r3
 8015830:	3714      	adds	r7, #20
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr
 801583a:	bf00      	nop
 801583c:	10624dd3 	.word	0x10624dd3
 8015840:	88888889 	.word	0x88888889
 8015844:	aaaaaaab 	.word	0xaaaaaaab

08015848 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	4603      	mov	r3, r0
 8015850:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 8015852:	23ae      	movs	r3, #174	@ 0xae
 8015854:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 8015856:	88fb      	ldrh	r3, [r7, #6]
 8015858:	4619      	mov	r1, r3
 801585a:	480a      	ldr	r0, [pc, #40]	@ (8015884 <gos_timeIncreaseSystemTime+0x3c>)
 801585c:	f7ff ff4c 	bl	80156f8 <gos_runTimeAddMilliseconds>
 8015860:	4603      	mov	r3, r0
 8015862:	2b55      	cmp	r3, #85	@ 0x55
 8015864:	d109      	bne.n	801587a <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 8015866:	88fb      	ldrh	r3, [r7, #6]
 8015868:	4619      	mov	r1, r3
 801586a:	4807      	ldr	r0, [pc, #28]	@ (8015888 <gos_timeIncreaseSystemTime+0x40>)
 801586c:	f7ff fd64 	bl	8015338 <gos_timeAddMilliseconds>
 8015870:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 8015872:	2b55      	cmp	r3, #85	@ 0x55
 8015874:	d101      	bne.n	801587a <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 8015876:	2355      	movs	r3, #85	@ 0x55
 8015878:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 801587a:	7bfb      	ldrb	r3, [r7, #15]
}
 801587c:	4618      	mov	r0, r3
 801587e:	3710      	adds	r7, #16
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}
 8015884:	20009160 	.word	0x20009160
 8015888:	200010f8 	.word	0x200010f8

0801588c <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 8015892:	1d3b      	adds	r3, r7, #4
 8015894:	2200      	movs	r2, #0
 8015896:	601a      	str	r2, [r3, #0]
 8015898:	605a      	str	r2, [r3, #4]
 801589a:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 801589c:	4b27      	ldr	r3, [pc, #156]	@ (801593c <gos_timeDaemonTask+0xb0>)
 801589e:	789a      	ldrb	r2, [r3, #2]
 80158a0:	79bb      	ldrb	r3, [r7, #6]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d905      	bls.n	80158b2 <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 80158a6:	4b26      	ldr	r3, [pc, #152]	@ (8015940 <gos_timeDaemonTask+0xb4>)
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	2100      	movs	r1, #0
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7fe ff61 	bl	8014774 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 80158b2:	4b22      	ldr	r3, [pc, #136]	@ (801593c <gos_timeDaemonTask+0xb0>)
 80158b4:	78da      	ldrb	r2, [r3, #3]
 80158b6:	79fb      	ldrb	r3, [r7, #7]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d905      	bls.n	80158c8 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 80158bc:	4b20      	ldr	r3, [pc, #128]	@ (8015940 <gos_timeDaemonTask+0xb4>)
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	2101      	movs	r1, #1
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7fe ff56 	bl	8014774 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 80158c8:	4b1c      	ldr	r3, [pc, #112]	@ (801593c <gos_timeDaemonTask+0xb0>)
 80158ca:	791a      	ldrb	r2, [r3, #4]
 80158cc:	7a3b      	ldrb	r3, [r7, #8]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d905      	bls.n	80158de <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 80158d2:	4b1b      	ldr	r3, [pc, #108]	@ (8015940 <gos_timeDaemonTask+0xb4>)
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	2102      	movs	r1, #2
 80158d8:	4618      	mov	r0, r3
 80158da:	f7fe ff4b 	bl	8014774 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 80158de:	4b17      	ldr	r3, [pc, #92]	@ (801593c <gos_timeDaemonTask+0xb0>)
 80158e0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80158e4:	b29a      	uxth	r2, r3
 80158e6:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d905      	bls.n	80158fc <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 80158f0:	4b13      	ldr	r3, [pc, #76]	@ (8015940 <gos_timeDaemonTask+0xb4>)
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	2103      	movs	r1, #3
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fe ff3c 	bl	8014774 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 80158fc:	4b0f      	ldr	r3, [pc, #60]	@ (801593c <gos_timeDaemonTask+0xb0>)
 80158fe:	79da      	ldrb	r2, [r3, #7]
 8015900:	7afb      	ldrb	r3, [r7, #11]
 8015902:	429a      	cmp	r2, r3
 8015904:	d905      	bls.n	8015912 <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 8015906:	4b0e      	ldr	r3, [pc, #56]	@ (8015940 <gos_timeDaemonTask+0xb4>)
 8015908:	781b      	ldrb	r3, [r3, #0]
 801590a:	2104      	movs	r1, #4
 801590c:	4618      	mov	r0, r3
 801590e:	f7fe ff31 	bl	8014774 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 8015912:	4b0a      	ldr	r3, [pc, #40]	@ (801593c <gos_timeDaemonTask+0xb0>)
 8015914:	891a      	ldrh	r2, [r3, #8]
 8015916:	89bb      	ldrh	r3, [r7, #12]
 8015918:	429a      	cmp	r2, r3
 801591a:	d905      	bls.n	8015928 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 801591c:	4b08      	ldr	r3, [pc, #32]	@ (8015940 <gos_timeDaemonTask+0xb4>)
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	2105      	movs	r1, #5
 8015922:	4618      	mov	r0, r3
 8015924:	f7fe ff26 	bl	8014774 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 8015928:	1d3b      	adds	r3, r7, #4
 801592a:	4618      	mov	r0, r3
 801592c:	f7ff fcac 	bl	8015288 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 8015930:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8015934:	f7fb fefc 	bl	8011730 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 8015938:	e7b0      	b.n	801589c <gos_timeDaemonTask+0x10>
 801593a:	bf00      	nop
 801593c:	200010f8 	.word	0x200010f8
 8015940:	2000916c 	.word	0x2000916c

08015944 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_ERROR;
 801594a:	23ae      	movs	r3, #174	@ 0xae
 801594c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 801594e:	480d      	ldr	r0, [pc, #52]	@ (8015984 <gos_traceInit+0x40>)
 8015950:	f7fe fc0c 	bl	801416c <gos_queueCreate>
 8015954:	4603      	mov	r3, r0
 8015956:	2b55      	cmp	r3, #85	@ 0x55
 8015958:	d10e      	bne.n	8015978 <gos_traceInit+0x34>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 801595a:	2100      	movs	r1, #0
 801595c:	480a      	ldr	r0, [pc, #40]	@ (8015988 <gos_traceInit+0x44>)
 801595e:	f7fb fd55 	bl	801140c <gos_taskRegister>
 8015962:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 8015964:	2b55      	cmp	r3, #85	@ 0x55
 8015966:	d107      	bne.n	8015978 <gos_traceInit+0x34>
        gos_mutexInit(&traceMutex) == GOS_SUCCESS
 8015968:	4808      	ldr	r0, [pc, #32]	@ (801598c <gos_traceInit+0x48>)
 801596a:	f7fe fa21 	bl	8013db0 <gos_mutexInit>
 801596e:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 8015970:	2b55      	cmp	r3, #85	@ 0x55
 8015972:	d101      	bne.n	8015978 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_SUCCESS;
 8015974:	2355      	movs	r3, #85	@ 0x55
 8015976:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 8015978:	79fb      	ldrb	r3, [r7, #7]
}
 801597a:	4618      	mov	r0, r3
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}
 8015982:	bf00      	nop
 8015984:	20001170 	.word	0x20001170
 8015988:	2000118c 	.word	0x2000118c
 801598c:	20009330 	.word	0x20009330

08015990 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 8015990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015992:	b0a9      	sub	sp, #164	@ 0xa4
 8015994:	af06      	add	r7, sp, #24
 8015996:	4603      	mov	r3, r0
 8015998:	6039      	str	r1, [r7, #0]
 801599a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 801599c:	23ae      	movs	r3, #174	@ 0xae
 801599e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 80159a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80159a6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    gos_taskPrivilegeLevel_t privileges     = 0u;
 80159aa:	2300      	movs	r3, #0
 80159ac:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    gos_taskDescriptor_t     callerTaskDesc = {0};
 80159b0:	f107 0318 	add.w	r3, r7, #24
 80159b4:	226a      	movs	r2, #106	@ 0x6a
 80159b6:	2100      	movs	r1, #0
 80159b8:	4618      	mov	r0, r3
 80159ba:	f001 fb21 	bl	8017000 <memset>
    gos_time_t               sysTime        = {0};
 80159be:	f107 030c 	add.w	r3, r7, #12
 80159c2:	2200      	movs	r2, #0
 80159c4:	601a      	str	r2, [r3, #0]
 80159c6:	605a      	str	r2, [r3, #4]
 80159c8:	811a      	strh	r2, [r3, #8]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	f000 80ec 	beq.w	8015baa <gos_traceTrace+0x21a>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 80159d2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fd f8be 	bl	8012b58 <gos_taskGetCurrentId>
 80159dc:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 80159de:	2b55      	cmp	r3, #85	@ 0x55
 80159e0:	f040 80e3 	bne.w	8015baa <gos_traceTrace+0x21a>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 80159e4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80159e8:	f107 0218 	add.w	r2, r7, #24
 80159ec:	4611      	mov	r1, r2
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fd f90e 	bl	8012c10 <gos_taskGetData>
 80159f4:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 80159f6:	2b55      	cmp	r3, #85	@ 0x55
 80159f8:	f040 80d7 	bne.w	8015baa <gos_traceTrace+0x21a>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 80159fc:	8c3b      	ldrh	r3, [r7, #32]
 80159fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d105      	bne.n	8015a12 <gos_traceTrace+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015a06:	f7fb f9e1 	bl	8010dcc <gos_kernelIsCallerIsr>
 8015a0a:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015a0c:	2b36      	cmp	r3, #54	@ 0x36
 8015a0e:	f040 80cc 	bne.w	8015baa <gos_traceTrace+0x21a>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8015a12:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8015a16:	4868      	ldr	r0, [pc, #416]	@ (8015bb8 <gos_traceTrace+0x228>)
 8015a18:	f7fe f9e4 	bl	8013de4 <gos_mutexLock>
 8015a1c:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015a1e:	2b55      	cmp	r3, #85	@ 0x55
 8015a20:	f040 80c3 	bne.w	8015baa <gos_traceTrace+0x21a>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 8015a24:	2355      	movs	r3, #85	@ 0x55
 8015a26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        if (addTimeStamp == GOS_TRUE)
 8015a2a:	79fb      	ldrb	r3, [r7, #7]
 8015a2c:	2b36      	cmp	r3, #54	@ 0x36
 8015a2e:	d13f      	bne.n	8015ab0 <gos_traceTrace+0x120>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 8015a30:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8015a34:	2b55      	cmp	r3, #85	@ 0x55
 8015a36:	d108      	bne.n	8015a4a <gos_traceTrace+0xba>
 8015a38:	f107 030c 	add.w	r3, r7, #12
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f7ff fc23 	bl	8015288 <gos_timeGet>
 8015a42:	4603      	mov	r3, r0
 8015a44:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8015a48:	e002      	b.n	8015a50 <gos_traceTrace+0xc0>
 8015a4a:	23ae      	movs	r3, #174	@ 0xae
 8015a4c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8015a50:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015a52:	461d      	mov	r5, r3
                    sysTime.months,
 8015a54:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015a56:	461e      	mov	r6, r3
                    sysTime.days,
 8015a58:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8015a5c:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8015a5e:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 8015a60:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 8015a62:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 8015a64:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015a66:	9404      	str	r4, [sp, #16]
 8015a68:	9003      	str	r0, [sp, #12]
 8015a6a:	9102      	str	r1, [sp, #8]
 8015a6c:	9201      	str	r2, [sp, #4]
 8015a6e:	9300      	str	r3, [sp, #0]
 8015a70:	4633      	mov	r3, r6
 8015a72:	462a      	mov	r2, r5
 8015a74:	4951      	ldr	r1, [pc, #324]	@ (8015bbc <gos_traceTrace+0x22c>)
 8015a76:	4852      	ldr	r0, [pc, #328]	@ (8015bc0 <gos_traceTrace+0x230>)
 8015a78:	f001 fa3e 	bl	8016ef8 <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015a7c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8015a80:	2b55      	cmp	r3, #85	@ 0x55
 8015a82:	d112      	bne.n	8015aaa <gos_traceTrace+0x11a>
 8015a84:	4b4f      	ldr	r3, [pc, #316]	@ (8015bc4 <gos_traceTrace+0x234>)
 8015a86:	881c      	ldrh	r4, [r3, #0]
 8015a88:	484d      	ldr	r0, [pc, #308]	@ (8015bc0 <gos_traceTrace+0x230>)
 8015a8a:	f7ea fc11 	bl	80002b0 <strlen>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	3301      	adds	r3, #1
 8015a94:	b2da      	uxtb	r2, r3
 8015a96:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015a9a:	4949      	ldr	r1, [pc, #292]	@ (8015bc0 <gos_traceTrace+0x230>)
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f7fe fbc1 	bl	8014224 <gos_queuePut>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8015aa8:	e002      	b.n	8015ab0 <gos_traceTrace+0x120>
 8015aaa:	23ae      	movs	r3, #174	@ 0xae
 8015aac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015ab0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8015ab4:	2b55      	cmp	r3, #85	@ 0x55
 8015ab6:	d112      	bne.n	8015ade <gos_traceTrace+0x14e>
 8015ab8:	4b42      	ldr	r3, [pc, #264]	@ (8015bc4 <gos_traceTrace+0x234>)
 8015aba:	881c      	ldrh	r4, [r3, #0]
 8015abc:	6838      	ldr	r0, [r7, #0]
 8015abe:	f7ea fbf7 	bl	80002b0 <strlen>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	b2db      	uxtb	r3, r3
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	b2da      	uxtb	r2, r3
 8015aca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015ace:	6839      	ldr	r1, [r7, #0]
 8015ad0:	4620      	mov	r0, r4
 8015ad2:	f7fe fba7 	bl	8014224 <gos_queuePut>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8015adc:	e002      	b.n	8015ae4 <gos_traceTrace+0x154>
 8015ade:	23ae      	movs	r3, #174	@ 0xae
 8015ae0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 8015ae4:	4b38      	ldr	r3, [pc, #224]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015ae6:	781b      	ldrb	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d108      	bne.n	8015afe <gos_traceTrace+0x16e>
 8015aec:	b672      	cpsid	i
 8015aee:	f3ef 8310 	mrs	r3, PRIMASK
 8015af2:	4a36      	ldr	r2, [pc, #216]	@ (8015bcc <gos_traceTrace+0x23c>)
 8015af4:	6013      	str	r3, [r2, #0]
 8015af6:	f3bf 8f4f 	dsb	sy
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	4b32      	ldr	r3, [pc, #200]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	3301      	adds	r3, #1
 8015b04:	b2da      	uxtb	r2, r3
 8015b06:	4b30      	ldr	r3, [pc, #192]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015b08:	701a      	strb	r2, [r3, #0]
 8015b0a:	4b31      	ldr	r3, [pc, #196]	@ (8015bd0 <gos_traceTrace+0x240>)
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	3301      	adds	r3, #1
 8015b10:	b2da      	uxtb	r2, r3
 8015b12:	4b2f      	ldr	r3, [pc, #188]	@ (8015bd0 <gos_traceTrace+0x240>)
 8015b14:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8015b16:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015b1a:	f107 0282 	add.w	r2, r7, #130	@ 0x82
 8015b1e:	4611      	mov	r1, r2
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7fc ffa9 	bl	8012a78 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8015b26:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8015b2a:	b21b      	sxth	r3, r3
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	db13      	blt.n	8015b58 <gos_traceTrace+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015b30:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015b34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7fc fe39 	bl	80127b0 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015b3e:	4b25      	ldr	r3, [pc, #148]	@ (8015bd4 <gos_traceTrace+0x244>)
 8015b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7fc f86e 	bl	8011c24 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015b48:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7fc fea5 	bl	80128a0 <gos_taskRemovePrivilege>
 8015b56:	e004      	b.n	8015b62 <gos_traceTrace+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015b58:	4b1e      	ldr	r3, [pc, #120]	@ (8015bd4 <gos_traceTrace+0x244>)
 8015b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fc f861 	bl	8011c24 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8015b62:	4b19      	ldr	r3, [pc, #100]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d005      	beq.n	8015b76 <gos_traceTrace+0x1e6>
 8015b6a:	4b17      	ldr	r3, [pc, #92]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	3b01      	subs	r3, #1
 8015b70:	b2da      	uxtb	r2, r3
 8015b72:	4b15      	ldr	r3, [pc, #84]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015b74:	701a      	strb	r2, [r3, #0]
 8015b76:	4b14      	ldr	r3, [pc, #80]	@ (8015bc8 <gos_traceTrace+0x238>)
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d108      	bne.n	8015b90 <gos_traceTrace+0x200>
 8015b7e:	4b13      	ldr	r3, [pc, #76]	@ (8015bcc <gos_traceTrace+0x23c>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	f383 8810 	msr	PRIMASK, r3
 8015b86:	b662      	cpsie	i
 8015b88:	f3bf 8f4f 	dsb	sy
 8015b8c:	f3bf 8f6f 	isb	sy
 8015b90:	4b0f      	ldr	r3, [pc, #60]	@ (8015bd0 <gos_traceTrace+0x240>)
 8015b92:	781b      	ldrb	r3, [r3, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d005      	beq.n	8015ba4 <gos_traceTrace+0x214>
 8015b98:	4b0d      	ldr	r3, [pc, #52]	@ (8015bd0 <gos_traceTrace+0x240>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	b2da      	uxtb	r2, r3
 8015ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8015bd0 <gos_traceTrace+0x240>)
 8015ba2:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8015ba4:	4804      	ldr	r0, [pc, #16]	@ (8015bb8 <gos_traceTrace+0x228>)
 8015ba6:	f7fe fa23 	bl	8013ff0 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8015baa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	378c      	adds	r7, #140	@ 0x8c
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	20009330 	.word	0x20009330
 8015bbc:	0801a574 	.word	0x0801a574
 8015bc0:	20009300 	.word	0x20009300
 8015bc4:	20001170 	.word	0x20001170
 8015bc8:	20005e47 	.word	0x20005e47
 8015bcc:	20005e48 	.word	0x20005e48
 8015bd0:	20005e45 	.word	0x20005e45
 8015bd4:	2000118c 	.word	0x2000118c

08015bd8 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 8015bd8:	b40e      	push	{r1, r2, r3}
 8015bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bdc:	b0aa      	sub	sp, #168	@ 0xa8
 8015bde:	af06      	add	r7, sp, #24
 8015be0:	4603      	mov	r3, r0
 8015be2:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8015be4:	2355      	movs	r3, #85	@ 0x55
 8015be6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8015bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015bee:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8015bf2:	f107 0320 	add.w	r3, r7, #32
 8015bf6:	226a      	movs	r2, #106	@ 0x6a
 8015bf8:	2100      	movs	r1, #0
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f001 fa00 	bl	8017000 <memset>
    gos_time_t               sysTime        = {0};
 8015c00:	f107 0314 	add.w	r3, r7, #20
 8015c04:	2200      	movs	r2, #0
 8015c06:	601a      	str	r2, [r3, #0]
 8015c08:	605a      	str	r2, [r3, #4]
 8015c0a:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 8015c10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 80f2 	beq.w	8015dfe <gos_traceTraceFormatted+0x226>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8015c1a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7fc ff9a 	bl	8012b58 <gos_taskGetCurrentId>
 8015c24:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 8015c26:	2b55      	cmp	r3, #85	@ 0x55
 8015c28:	f040 80e9 	bne.w	8015dfe <gos_traceTraceFormatted+0x226>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015c2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015c30:	f107 0220 	add.w	r2, r7, #32
 8015c34:	4611      	mov	r1, r2
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7fc ffea 	bl	8012c10 <gos_taskGetData>
 8015c3c:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8015c3e:	2b55      	cmp	r3, #85	@ 0x55
 8015c40:	f040 80dd 	bne.w	8015dfe <gos_traceTraceFormatted+0x226>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015c44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d105      	bne.n	8015c5a <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015c4e:	f7fb f8bd 	bl	8010dcc <gos_kernelIsCallerIsr>
 8015c52:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015c54:	2b36      	cmp	r3, #54	@ 0x36
 8015c56:	f040 80d2 	bne.w	8015dfe <gos_traceTraceFormatted+0x226>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8015c5a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8015c5e:	486e      	ldr	r0, [pc, #440]	@ (8015e18 <gos_traceTraceFormatted+0x240>)
 8015c60:	f7fe f8c0 	bl	8013de4 <gos_mutexLock>
 8015c64:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015c66:	2b55      	cmp	r3, #85	@ 0x55
 8015c68:	f040 80c9 	bne.w	8015dfe <gos_traceTraceFormatted+0x226>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8015c6c:	79fb      	ldrb	r3, [r7, #7]
 8015c6e:	2b36      	cmp	r3, #54	@ 0x36
 8015c70:	d13f      	bne.n	8015cf2 <gos_traceTraceFormatted+0x11a>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 8015c72:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8015c76:	2b55      	cmp	r3, #85	@ 0x55
 8015c78:	d108      	bne.n	8015c8c <gos_traceTraceFormatted+0xb4>
 8015c7a:	f107 0314 	add.w	r3, r7, #20
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7ff fb02 	bl	8015288 <gos_timeGet>
 8015c84:	4603      	mov	r3, r0
 8015c86:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8015c8a:	e002      	b.n	8015c92 <gos_traceTraceFormatted+0xba>
 8015c8c:	23ae      	movs	r3, #174	@ 0xae
 8015c8e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8015c92:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015c94:	461d      	mov	r5, r3
                    sysTime.months,
 8015c96:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015c98:	461e      	mov	r6, r3
                    sysTime.days,
 8015c9a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8015c9e:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8015ca0:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 8015ca2:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 8015ca4:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 8015ca6:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015ca8:	9404      	str	r4, [sp, #16]
 8015caa:	9003      	str	r0, [sp, #12]
 8015cac:	9102      	str	r1, [sp, #8]
 8015cae:	9201      	str	r2, [sp, #4]
 8015cb0:	9300      	str	r3, [sp, #0]
 8015cb2:	4633      	mov	r3, r6
 8015cb4:	462a      	mov	r2, r5
 8015cb6:	4959      	ldr	r1, [pc, #356]	@ (8015e1c <gos_traceTraceFormatted+0x244>)
 8015cb8:	4859      	ldr	r0, [pc, #356]	@ (8015e20 <gos_traceTraceFormatted+0x248>)
 8015cba:	f001 f91d 	bl	8016ef8 <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015cbe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8015cc2:	2b55      	cmp	r3, #85	@ 0x55
 8015cc4:	d112      	bne.n	8015cec <gos_traceTraceFormatted+0x114>
 8015cc6:	4b57      	ldr	r3, [pc, #348]	@ (8015e24 <gos_traceTraceFormatted+0x24c>)
 8015cc8:	881c      	ldrh	r4, [r3, #0]
 8015cca:	4855      	ldr	r0, [pc, #340]	@ (8015e20 <gos_traceTraceFormatted+0x248>)
 8015ccc:	f7ea faf0 	bl	80002b0 <strlen>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	b2da      	uxtb	r2, r3
 8015cd8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015cdc:	4950      	ldr	r1, [pc, #320]	@ (8015e20 <gos_traceTraceFormatted+0x248>)
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f7fe faa0 	bl	8014224 <gos_queuePut>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8015cea:	e002      	b.n	8015cf2 <gos_traceTraceFormatted+0x11a>
 8015cec:	23ae      	movs	r3, #174	@ 0xae
 8015cee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 8015cf2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8015cf6:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8015cf8:	693a      	ldr	r2, [r7, #16]
 8015cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8015cfe:	484a      	ldr	r0, [pc, #296]	@ (8015e28 <gos_traceTraceFormatted+0x250>)
 8015d00:	f001 f974 	bl	8016fec <vsiprintf>
        va_end(args);
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015d04:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8015d08:	2b55      	cmp	r3, #85	@ 0x55
 8015d0a:	d112      	bne.n	8015d32 <gos_traceTraceFormatted+0x15a>
 8015d0c:	4b45      	ldr	r3, [pc, #276]	@ (8015e24 <gos_traceTraceFormatted+0x24c>)
 8015d0e:	881c      	ldrh	r4, [r3, #0]
 8015d10:	4845      	ldr	r0, [pc, #276]	@ (8015e28 <gos_traceTraceFormatted+0x250>)
 8015d12:	f7ea facd 	bl	80002b0 <strlen>
 8015d16:	4603      	mov	r3, r0
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	b2da      	uxtb	r2, r3
 8015d1e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015d22:	4941      	ldr	r1, [pc, #260]	@ (8015e28 <gos_traceTraceFormatted+0x250>)
 8015d24:	4620      	mov	r0, r4
 8015d26:	f7fe fa7d 	bl	8014224 <gos_queuePut>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8015d30:	e002      	b.n	8015d38 <gos_traceTraceFormatted+0x160>
 8015d32:	23ae      	movs	r3, #174	@ 0xae
 8015d34:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 8015d38:	4b3c      	ldr	r3, [pc, #240]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d108      	bne.n	8015d52 <gos_traceTraceFormatted+0x17a>
 8015d40:	b672      	cpsid	i
 8015d42:	f3ef 8310 	mrs	r3, PRIMASK
 8015d46:	4a3a      	ldr	r2, [pc, #232]	@ (8015e30 <gos_traceTraceFormatted+0x258>)
 8015d48:	6013      	str	r3, [r2, #0]
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	f3bf 8f6f 	isb	sy
 8015d52:	4b36      	ldr	r3, [pc, #216]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	3301      	adds	r3, #1
 8015d58:	b2da      	uxtb	r2, r3
 8015d5a:	4b34      	ldr	r3, [pc, #208]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015d5c:	701a      	strb	r2, [r3, #0]
 8015d5e:	4b35      	ldr	r3, [pc, #212]	@ (8015e34 <gos_traceTraceFormatted+0x25c>)
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	3301      	adds	r3, #1
 8015d64:	b2da      	uxtb	r2, r3
 8015d66:	4b33      	ldr	r3, [pc, #204]	@ (8015e34 <gos_traceTraceFormatted+0x25c>)
 8015d68:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8015d6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015d6e:	f107 020e 	add.w	r2, r7, #14
 8015d72:	4611      	mov	r1, r2
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7fc fe7f 	bl	8012a78 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8015d7a:	89fb      	ldrh	r3, [r7, #14]
 8015d7c:	b21b      	sxth	r3, r3
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	db13      	blt.n	8015daa <gos_traceTraceFormatted+0x1d2>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015d82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fc fd10 	bl	80127b0 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015d90:	4b29      	ldr	r3, [pc, #164]	@ (8015e38 <gos_traceTraceFormatted+0x260>)
 8015d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7fb ff45 	bl	8011c24 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015d9a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fc fd7c 	bl	80128a0 <gos_taskRemovePrivilege>
 8015da8:	e004      	b.n	8015db4 <gos_traceTraceFormatted+0x1dc>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015daa:	4b23      	ldr	r3, [pc, #140]	@ (8015e38 <gos_traceTraceFormatted+0x260>)
 8015dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7fb ff38 	bl	8011c24 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8015db4:	4b1d      	ldr	r3, [pc, #116]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d005      	beq.n	8015dc8 <gos_traceTraceFormatted+0x1f0>
 8015dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	b2da      	uxtb	r2, r3
 8015dc4:	4b19      	ldr	r3, [pc, #100]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015dc6:	701a      	strb	r2, [r3, #0]
 8015dc8:	4b18      	ldr	r3, [pc, #96]	@ (8015e2c <gos_traceTraceFormatted+0x254>)
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d108      	bne.n	8015de2 <gos_traceTraceFormatted+0x20a>
 8015dd0:	4b17      	ldr	r3, [pc, #92]	@ (8015e30 <gos_traceTraceFormatted+0x258>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	f383 8810 	msr	PRIMASK, r3
 8015dd8:	b662      	cpsie	i
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	f3bf 8f6f 	isb	sy
 8015de2:	4b14      	ldr	r3, [pc, #80]	@ (8015e34 <gos_traceTraceFormatted+0x25c>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d005      	beq.n	8015df6 <gos_traceTraceFormatted+0x21e>
 8015dea:	4b12      	ldr	r3, [pc, #72]	@ (8015e34 <gos_traceTraceFormatted+0x25c>)
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	3b01      	subs	r3, #1
 8015df0:	b2da      	uxtb	r2, r3
 8015df2:	4b10      	ldr	r3, [pc, #64]	@ (8015e34 <gos_traceTraceFormatted+0x25c>)
 8015df4:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8015df6:	4808      	ldr	r0, [pc, #32]	@ (8015e18 <gos_traceTraceFormatted+0x240>)
 8015df8:	f7fe f8fa 	bl	8013ff0 <gos_mutexUnlock>
 8015dfc:	e002      	b.n	8015e04 <gos_traceTraceFormatted+0x22c>
    }
    else
    {
        traceResult = GOS_ERROR;
 8015dfe:	23ae      	movs	r3, #174	@ 0xae
 8015e00:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return traceResult;
 8015e04:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3790      	adds	r7, #144	@ 0x90
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e12:	b003      	add	sp, #12
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop
 8015e18:	20009330 	.word	0x20009330
 8015e1c:	0801a574 	.word	0x0801a574
 8015e20:	20009300 	.word	0x20009300
 8015e24:	20001170 	.word	0x20001170
 8015e28:	20009238 	.word	0x20009238
 8015e2c:	20005e47 	.word	0x20005e47
 8015e30:	20005e48 	.word	0x20005e48
 8015e34:	20005e45 	.word	0x20005e45
 8015e38:	2000118c 	.word	0x2000118c

08015e3c <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 8015e3c:	b40f      	push	{r0, r1, r2, r3}
 8015e3e:	b580      	push	{r7, lr}
 8015e40:	b082      	sub	sp, #8
 8015e42:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 8015e44:	23ae      	movs	r3, #174	@ 0xae
 8015e46:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d01c      	beq.n	8015e88 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 8015e4e:	4b12      	ldr	r3, [pc, #72]	@ (8015e98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	3301      	adds	r3, #1
 8015e54:	b2da      	uxtb	r2, r3
 8015e56:	4b10      	ldr	r3, [pc, #64]	@ (8015e98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015e58:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 8015e5a:	f107 0314 	add.w	r3, r7, #20
 8015e5e:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8015e60:	683a      	ldr	r2, [r7, #0]
 8015e62:	6939      	ldr	r1, [r7, #16]
 8015e64:	480d      	ldr	r0, [pc, #52]	@ (8015e9c <gos_traceTraceFormattedUnsafe+0x60>)
 8015e66:	f001 f8c1 	bl	8016fec <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 8015e6a:	480c      	ldr	r0, [pc, #48]	@ (8015e9c <gos_traceTraceFormattedUnsafe+0x60>)
 8015e6c:	f7fa f910 	bl	8010090 <gos_traceDriverTransmitString_Unsafe>
 8015e70:	4603      	mov	r3, r0
 8015e72:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8015e74:	4b08      	ldr	r3, [pc, #32]	@ (8015e98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d005      	beq.n	8015e88 <gos_traceTraceFormattedUnsafe+0x4c>
 8015e7c:	4b06      	ldr	r3, [pc, #24]	@ (8015e98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	3b01      	subs	r3, #1
 8015e82:	b2da      	uxtb	r2, r3
 8015e84:	4b04      	ldr	r3, [pc, #16]	@ (8015e98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015e86:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8015e88:	79fb      	ldrb	r3, [r7, #7]
}
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	3708      	adds	r7, #8
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015e94:	b004      	add	sp, #16
 8015e96:	4770      	bx	lr
 8015e98:	20005e45 	.word	0x20005e45
 8015e9c:	20009238 	.word	0x20009238

08015ea0 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8015ea4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8015ea8:	480e      	ldr	r0, [pc, #56]	@ (8015ee4 <gos_traceDaemonTask+0x44>)
 8015eaa:	f7fd ff9b 	bl	8013de4 <gos_mutexLock>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	2b55      	cmp	r3, #85	@ 0x55
 8015eb2:	d10e      	bne.n	8015ed2 <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8015eb4:	e002      	b.n	8015ebc <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 8015eb6:	480c      	ldr	r0, [pc, #48]	@ (8015ee8 <gos_traceDaemonTask+0x48>)
 8015eb8:	f7fa f8d2 	bl	8010060 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8015ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8015eec <gos_traceDaemonTask+0x4c>)
 8015ebe:	8818      	ldrh	r0, [r3, #0]
 8015ec0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015ec4:	22c8      	movs	r2, #200	@ 0xc8
 8015ec6:	4908      	ldr	r1, [pc, #32]	@ (8015ee8 <gos_traceDaemonTask+0x48>)
 8015ec8:	f7fe fa7a 	bl	80143c0 <gos_queueGet>
 8015ecc:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 8015ece:	2b55      	cmp	r3, #85	@ 0x55
 8015ed0:	d0f1      	beq.n	8015eb6 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 8015ed2:	4804      	ldr	r0, [pc, #16]	@ (8015ee4 <gos_traceDaemonTask+0x44>)
 8015ed4:	f7fe f88c 	bl	8013ff0 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 8015ed8:	4b05      	ldr	r3, [pc, #20]	@ (8015ef0 <gos_traceDaemonTask+0x50>)
 8015eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fb fd7f 	bl	80119e0 <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8015ee2:	e7df      	b.n	8015ea4 <gos_traceDaemonTask+0x4>
 8015ee4:	20009330 	.word	0x20009330
 8015ee8:	20009170 	.word	0x20009170
 8015eec:	20001170 	.word	0x20001170
 8015ef0:	2000118c 	.word	0x2000118c

08015ef4 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 8015efc:	23ae      	movs	r3, #174	@ 0xae
 8015efe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d00b      	beq.n	8015f1e <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2200      	movs	r2, #0
 8015f10:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015f18:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 8015f1a:	2355      	movs	r3, #85	@ 0x55
 8015f1c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 8015f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3714      	adds	r7, #20
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr

08015f2c <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b085      	sub	sp, #20
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 8015f34:	23ae      	movs	r3, #174	@ 0xae
 8015f36:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d041      	beq.n	8015fc2 <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 8015f3e:	4b24      	ldr	r3, [pc, #144]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d108      	bne.n	8015f58 <gos_triggerReset+0x2c>
 8015f46:	b672      	cpsid	i
 8015f48:	f3ef 8310 	mrs	r3, PRIMASK
 8015f4c:	4a21      	ldr	r2, [pc, #132]	@ (8015fd4 <gos_triggerReset+0xa8>)
 8015f4e:	6013      	str	r3, [r2, #0]
 8015f50:	f3bf 8f4f 	dsb	sy
 8015f54:	f3bf 8f6f 	isb	sy
 8015f58:	4b1d      	ldr	r3, [pc, #116]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	b2da      	uxtb	r2, r3
 8015f60:	4b1b      	ldr	r3, [pc, #108]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f62:	701a      	strb	r2, [r3, #0]
 8015f64:	4b1c      	ldr	r3, [pc, #112]	@ (8015fd8 <gos_triggerReset+0xac>)
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	3301      	adds	r3, #1
 8015f6a:	b2da      	uxtb	r2, r3
 8015f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8015fd8 <gos_triggerReset+0xac>)
 8015f6e:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 8015f7c:	2355      	movs	r3, #85	@ 0x55
 8015f7e:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8015f80:	4b13      	ldr	r3, [pc, #76]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d005      	beq.n	8015f94 <gos_triggerReset+0x68>
 8015f88:	4b11      	ldr	r3, [pc, #68]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	3b01      	subs	r3, #1
 8015f8e:	b2da      	uxtb	r2, r3
 8015f90:	4b0f      	ldr	r3, [pc, #60]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f92:	701a      	strb	r2, [r3, #0]
 8015f94:	4b0e      	ldr	r3, [pc, #56]	@ (8015fd0 <gos_triggerReset+0xa4>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d108      	bne.n	8015fae <gos_triggerReset+0x82>
 8015f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8015fd4 <gos_triggerReset+0xa8>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f383 8810 	msr	PRIMASK, r3
 8015fa4:	b662      	cpsie	i
 8015fa6:	f3bf 8f4f 	dsb	sy
 8015faa:	f3bf 8f6f 	isb	sy
 8015fae:	4b0a      	ldr	r3, [pc, #40]	@ (8015fd8 <gos_triggerReset+0xac>)
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d005      	beq.n	8015fc2 <gos_triggerReset+0x96>
 8015fb6:	4b08      	ldr	r3, [pc, #32]	@ (8015fd8 <gos_triggerReset+0xac>)
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	3b01      	subs	r3, #1
 8015fbc:	b2da      	uxtb	r2, r3
 8015fbe:	4b06      	ldr	r3, [pc, #24]	@ (8015fd8 <gos_triggerReset+0xac>)
 8015fc0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 8015fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3714      	adds	r7, #20
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fce:	4770      	bx	lr
 8015fd0:	20005e47 	.word	0x20005e47
 8015fd4:	20005e48 	.word	0x20005e48
 8015fd8:	20005e45 	.word	0x20005e45

08015fdc <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	60b9      	str	r1, [r7, #8]
 8015fe6:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 8015fe8:	23ae      	movs	r3, #174	@ 0xae
 8015fea:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 8015fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ff0:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f000 8096 	beq.w	8016126 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 8015ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8016130 <gos_triggerWait+0x154>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d108      	bne.n	8016014 <gos_triggerWait+0x38>
 8016002:	b672      	cpsid	i
 8016004:	f3ef 8310 	mrs	r3, PRIMASK
 8016008:	4a4a      	ldr	r2, [pc, #296]	@ (8016134 <gos_triggerWait+0x158>)
 801600a:	6013      	str	r3, [r2, #0]
 801600c:	f3bf 8f4f 	dsb	sy
 8016010:	f3bf 8f6f 	isb	sy
 8016014:	4b46      	ldr	r3, [pc, #280]	@ (8016130 <gos_triggerWait+0x154>)
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	3301      	adds	r3, #1
 801601a:	b2da      	uxtb	r2, r3
 801601c:	4b44      	ldr	r3, [pc, #272]	@ (8016130 <gos_triggerWait+0x154>)
 801601e:	701a      	strb	r2, [r3, #0]
 8016020:	4b45      	ldr	r3, [pc, #276]	@ (8016138 <gos_triggerWait+0x15c>)
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	3301      	adds	r3, #1
 8016026:	b2da      	uxtb	r2, r3
 8016028:	4b43      	ldr	r3, [pc, #268]	@ (8016138 <gos_triggerWait+0x15c>)
 801602a:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 801602c:	f107 0314 	add.w	r3, r7, #20
 8016030:	4618      	mov	r0, r3
 8016032:	f7fc fd91 	bl	8012b58 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 8016036:	8aba      	ldrh	r2, [r7, #20]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	68ba      	ldr	r2, [r7, #8]
 8016040:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 8016042:	4b3b      	ldr	r3, [pc, #236]	@ (8016130 <gos_triggerWait+0x154>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d005      	beq.n	8016056 <gos_triggerWait+0x7a>
 801604a:	4b39      	ldr	r3, [pc, #228]	@ (8016130 <gos_triggerWait+0x154>)
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	3b01      	subs	r3, #1
 8016050:	b2da      	uxtb	r2, r3
 8016052:	4b37      	ldr	r3, [pc, #220]	@ (8016130 <gos_triggerWait+0x154>)
 8016054:	701a      	strb	r2, [r3, #0]
 8016056:	4b36      	ldr	r3, [pc, #216]	@ (8016130 <gos_triggerWait+0x154>)
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d108      	bne.n	8016070 <gos_triggerWait+0x94>
 801605e:	4b35      	ldr	r3, [pc, #212]	@ (8016134 <gos_triggerWait+0x158>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f383 8810 	msr	PRIMASK, r3
 8016066:	b662      	cpsie	i
 8016068:	f3bf 8f4f 	dsb	sy
 801606c:	f3bf 8f6f 	isb	sy
 8016070:	4b31      	ldr	r3, [pc, #196]	@ (8016138 <gos_triggerWait+0x15c>)
 8016072:	781b      	ldrb	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d005      	beq.n	8016084 <gos_triggerWait+0xa8>
 8016078:	4b2f      	ldr	r3, [pc, #188]	@ (8016138 <gos_triggerWait+0x15c>)
 801607a:	781b      	ldrb	r3, [r3, #0]
 801607c:	3b01      	subs	r3, #1
 801607e:	b2da      	uxtb	r2, r3
 8016080:	4b2d      	ldr	r3, [pc, #180]	@ (8016138 <gos_triggerWait+0x15c>)
 8016082:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681a      	ldr	r2, [r3, #0]
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	685b      	ldr	r3, [r3, #4]
 801608c:	429a      	cmp	r2, r3
 801608e:	d204      	bcs.n	801609a <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 8016090:	8abb      	ldrh	r3, [r7, #20]
 8016092:	6879      	ldr	r1, [r7, #4]
 8016094:	4618      	mov	r0, r3
 8016096:	f7fb fe73 	bl	8011d80 <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 801609a:	4b25      	ldr	r3, [pc, #148]	@ (8016130 <gos_triggerWait+0x154>)
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d108      	bne.n	80160b4 <gos_triggerWait+0xd8>
 80160a2:	b672      	cpsid	i
 80160a4:	f3ef 8310 	mrs	r3, PRIMASK
 80160a8:	4a22      	ldr	r2, [pc, #136]	@ (8016134 <gos_triggerWait+0x158>)
 80160aa:	6013      	str	r3, [r2, #0]
 80160ac:	f3bf 8f4f 	dsb	sy
 80160b0:	f3bf 8f6f 	isb	sy
 80160b4:	4b1e      	ldr	r3, [pc, #120]	@ (8016130 <gos_triggerWait+0x154>)
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	3301      	adds	r3, #1
 80160ba:	b2da      	uxtb	r2, r3
 80160bc:	4b1c      	ldr	r3, [pc, #112]	@ (8016130 <gos_triggerWait+0x154>)
 80160be:	701a      	strb	r2, [r3, #0]
 80160c0:	4b1d      	ldr	r3, [pc, #116]	@ (8016138 <gos_triggerWait+0x15c>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	3301      	adds	r3, #1
 80160c6:	b2da      	uxtb	r2, r3
 80160c8:	4b1b      	ldr	r3, [pc, #108]	@ (8016138 <gos_triggerWait+0x15c>)
 80160ca:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681a      	ldr	r2, [r3, #0]
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d105      	bne.n	80160e4 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 80160d8:	2355      	movs	r3, #85	@ 0x55
 80160da:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80160e2:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 80160e4:	4b12      	ldr	r3, [pc, #72]	@ (8016130 <gos_triggerWait+0x154>)
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d005      	beq.n	80160f8 <gos_triggerWait+0x11c>
 80160ec:	4b10      	ldr	r3, [pc, #64]	@ (8016130 <gos_triggerWait+0x154>)
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	3b01      	subs	r3, #1
 80160f2:	b2da      	uxtb	r2, r3
 80160f4:	4b0e      	ldr	r3, [pc, #56]	@ (8016130 <gos_triggerWait+0x154>)
 80160f6:	701a      	strb	r2, [r3, #0]
 80160f8:	4b0d      	ldr	r3, [pc, #52]	@ (8016130 <gos_triggerWait+0x154>)
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d108      	bne.n	8016112 <gos_triggerWait+0x136>
 8016100:	4b0c      	ldr	r3, [pc, #48]	@ (8016134 <gos_triggerWait+0x158>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f383 8810 	msr	PRIMASK, r3
 8016108:	b662      	cpsie	i
 801610a:	f3bf 8f4f 	dsb	sy
 801610e:	f3bf 8f6f 	isb	sy
 8016112:	4b09      	ldr	r3, [pc, #36]	@ (8016138 <gos_triggerWait+0x15c>)
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d005      	beq.n	8016126 <gos_triggerWait+0x14a>
 801611a:	4b07      	ldr	r3, [pc, #28]	@ (8016138 <gos_triggerWait+0x15c>)
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	3b01      	subs	r3, #1
 8016120:	b2da      	uxtb	r2, r3
 8016122:	4b05      	ldr	r3, [pc, #20]	@ (8016138 <gos_triggerWait+0x15c>)
 8016124:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 8016126:	7dfb      	ldrb	r3, [r7, #23]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3718      	adds	r7, #24
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}
 8016130:	20005e47 	.word	0x20005e47
 8016134:	20005e48 	.word	0x20005e48
 8016138:	20005e45 	.word	0x20005e45

0801613c <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 8016144:	23ae      	movs	r3, #174	@ 0xae
 8016146:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d073      	beq.n	8016236 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 801614e:	4b3c      	ldr	r3, [pc, #240]	@ (8016240 <gos_triggerIncrement+0x104>)
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d108      	bne.n	8016168 <gos_triggerIncrement+0x2c>
 8016156:	b672      	cpsid	i
 8016158:	f3ef 8310 	mrs	r3, PRIMASK
 801615c:	4a39      	ldr	r2, [pc, #228]	@ (8016244 <gos_triggerIncrement+0x108>)
 801615e:	6013      	str	r3, [r2, #0]
 8016160:	f3bf 8f4f 	dsb	sy
 8016164:	f3bf 8f6f 	isb	sy
 8016168:	4b35      	ldr	r3, [pc, #212]	@ (8016240 <gos_triggerIncrement+0x104>)
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	3301      	adds	r3, #1
 801616e:	b2da      	uxtb	r2, r3
 8016170:	4b33      	ldr	r3, [pc, #204]	@ (8016240 <gos_triggerIncrement+0x104>)
 8016172:	701a      	strb	r2, [r3, #0]
 8016174:	4b34      	ldr	r3, [pc, #208]	@ (8016248 <gos_triggerIncrement+0x10c>)
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	3301      	adds	r3, #1
 801617a:	b2da      	uxtb	r2, r3
 801617c:	4b32      	ldr	r3, [pc, #200]	@ (8016248 <gos_triggerIncrement+0x10c>)
 801617e:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	1c5a      	adds	r2, r3, #1
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681a      	ldr	r2, [r3, #0]
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	429a      	cmp	r2, r3
 8016194:	d12c      	bne.n	80161f0 <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 8016196:	4b2d      	ldr	r3, [pc, #180]	@ (801624c <gos_triggerIncrement+0x110>)
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d105      	bne.n	80161aa <gos_triggerIncrement+0x6e>
 801619e:	4b2a      	ldr	r3, [pc, #168]	@ (8016248 <gos_triggerIncrement+0x10c>)
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	3301      	adds	r3, #1
 80161a4:	b2da      	uxtb	r2, r3
 80161a6:	4b28      	ldr	r3, [pc, #160]	@ (8016248 <gos_triggerIncrement+0x10c>)
 80161a8:	701a      	strb	r2, [r3, #0]
 80161aa:	4b28      	ldr	r3, [pc, #160]	@ (801624c <gos_triggerIncrement+0x110>)
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	3301      	adds	r3, #1
 80161b0:	b2da      	uxtb	r2, r3
 80161b2:	4b26      	ldr	r3, [pc, #152]	@ (801624c <gos_triggerIncrement+0x110>)
 80161b4:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	891b      	ldrh	r3, [r3, #8]
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7fb fef2 	bl	8011fa4 <gos_taskUnblock>

            GOS_ISR_EXIT
 80161c0:	4b22      	ldr	r3, [pc, #136]	@ (801624c <gos_triggerIncrement+0x110>)
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d005      	beq.n	80161d4 <gos_triggerIncrement+0x98>
 80161c8:	4b20      	ldr	r3, [pc, #128]	@ (801624c <gos_triggerIncrement+0x110>)
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	3b01      	subs	r3, #1
 80161ce:	b2da      	uxtb	r2, r3
 80161d0:	4b1e      	ldr	r3, [pc, #120]	@ (801624c <gos_triggerIncrement+0x110>)
 80161d2:	701a      	strb	r2, [r3, #0]
 80161d4:	4b1d      	ldr	r3, [pc, #116]	@ (801624c <gos_triggerIncrement+0x110>)
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d109      	bne.n	80161f0 <gos_triggerIncrement+0xb4>
 80161dc:	4b1a      	ldr	r3, [pc, #104]	@ (8016248 <gos_triggerIncrement+0x10c>)
 80161de:	781b      	ldrb	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d005      	beq.n	80161f0 <gos_triggerIncrement+0xb4>
 80161e4:	4b18      	ldr	r3, [pc, #96]	@ (8016248 <gos_triggerIncrement+0x10c>)
 80161e6:	781b      	ldrb	r3, [r3, #0]
 80161e8:	3b01      	subs	r3, #1
 80161ea:	b2da      	uxtb	r2, r3
 80161ec:	4b16      	ldr	r3, [pc, #88]	@ (8016248 <gos_triggerIncrement+0x10c>)
 80161ee:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 80161f0:	2355      	movs	r3, #85	@ 0x55
 80161f2:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 80161f4:	4b12      	ldr	r3, [pc, #72]	@ (8016240 <gos_triggerIncrement+0x104>)
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d005      	beq.n	8016208 <gos_triggerIncrement+0xcc>
 80161fc:	4b10      	ldr	r3, [pc, #64]	@ (8016240 <gos_triggerIncrement+0x104>)
 80161fe:	781b      	ldrb	r3, [r3, #0]
 8016200:	3b01      	subs	r3, #1
 8016202:	b2da      	uxtb	r2, r3
 8016204:	4b0e      	ldr	r3, [pc, #56]	@ (8016240 <gos_triggerIncrement+0x104>)
 8016206:	701a      	strb	r2, [r3, #0]
 8016208:	4b0d      	ldr	r3, [pc, #52]	@ (8016240 <gos_triggerIncrement+0x104>)
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d108      	bne.n	8016222 <gos_triggerIncrement+0xe6>
 8016210:	4b0c      	ldr	r3, [pc, #48]	@ (8016244 <gos_triggerIncrement+0x108>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	f383 8810 	msr	PRIMASK, r3
 8016218:	b662      	cpsie	i
 801621a:	f3bf 8f4f 	dsb	sy
 801621e:	f3bf 8f6f 	isb	sy
 8016222:	4b09      	ldr	r3, [pc, #36]	@ (8016248 <gos_triggerIncrement+0x10c>)
 8016224:	781b      	ldrb	r3, [r3, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d005      	beq.n	8016236 <gos_triggerIncrement+0xfa>
 801622a:	4b07      	ldr	r3, [pc, #28]	@ (8016248 <gos_triggerIncrement+0x10c>)
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	3b01      	subs	r3, #1
 8016230:	b2da      	uxtb	r2, r3
 8016232:	4b05      	ldr	r3, [pc, #20]	@ (8016248 <gos_triggerIncrement+0x10c>)
 8016234:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 8016236:	7bfb      	ldrb	r3, [r7, #15]
}
 8016238:	4618      	mov	r0, r3
 801623a:	3710      	adds	r7, #16
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}
 8016240:	20005e47 	.word	0x20005e47
 8016244:	20005e48 	.word	0x20005e48
 8016248:	20005e45 	.word	0x20005e45
 801624c:	20005e46 	.word	0x20005e46

08016250 <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 8016250:	b480      	push	{r7}
 8016252:	b087      	sub	sp, #28
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 801625a:	f04f 33ff 	mov.w	r3, #4294967295
 801625e:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 8016260:	2300      	movs	r3, #0
 8016262:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 8016264:	2300      	movs	r3, #0
 8016266:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 8016268:	2300      	movs	r3, #0
 801626a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 801626c:	2300      	movs	r3, #0
 801626e:	613b      	str	r3, [r7, #16]
 8016270:	e01e      	b.n	80162b0 <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	4413      	add	r3, r2
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	461a      	mov	r2, r3
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	4053      	eors	r3, r2
 8016280:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 8016282:	2308      	movs	r3, #8
 8016284:	73fb      	strb	r3, [r7, #15]
 8016286:	e00d      	b.n	80162a4 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	f003 0301 	and.w	r3, r3, #1
 801628e:	425b      	negs	r3, r3
 8016290:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 8016292:	68ba      	ldr	r2, [r7, #8]
 8016294:	4b0c      	ldr	r3, [pc, #48]	@ (80162c8 <gos_crcDriverGetCrc+0x78>)
 8016296:	4013      	ands	r3, r2
 8016298:	697a      	ldr	r2, [r7, #20]
 801629a:	4053      	eors	r3, r2
 801629c:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 801629e:	7bfb      	ldrb	r3, [r7, #15]
 80162a0:	3b01      	subs	r3, #1
 80162a2:	73fb      	strb	r3, [r7, #15]
 80162a4:	7bfb      	ldrb	r3, [r7, #15]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d1ee      	bne.n	8016288 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 80162aa:	693b      	ldr	r3, [r7, #16]
 80162ac:	3301      	adds	r3, #1
 80162ae:	613b      	str	r3, [r7, #16]
 80162b0:	693a      	ldr	r2, [r7, #16]
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d3dc      	bcc.n	8016272 <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	43db      	mvns	r3, r3
}
 80162bc:	4618      	mov	r0, r3
 80162be:	371c      	adds	r7, #28
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr
 80162c8:	edb88320 	.word	0xedb88320

080162cc <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 80162cc:	b40f      	push	{r0, r1, r2, r3}
 80162ce:	b580      	push	{r7, lr}
 80162d0:	b082      	sub	sp, #8
 80162d2:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 80162d4:	23ae      	movs	r3, #174	@ 0xae
 80162d6:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 80162d8:	f107 0314 	add.w	r3, r7, #20
 80162dc:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 80162de:	683a      	ldr	r2, [r7, #0]
 80162e0:	6939      	ldr	r1, [r7, #16]
 80162e2:	480a      	ldr	r0, [pc, #40]	@ (801630c <gos_shellDriverTransmitString+0x40>)
 80162e4:	f000 fe82 	bl	8016fec <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 80162e8:	4b09      	ldr	r3, [pc, #36]	@ (8016310 <gos_shellDriverTransmitString+0x44>)
 80162ea:	685b      	ldr	r3, [r3, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d005      	beq.n	80162fc <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 80162f0:	4b07      	ldr	r3, [pc, #28]	@ (8016310 <gos_shellDriverTransmitString+0x44>)
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	4805      	ldr	r0, [pc, #20]	@ (801630c <gos_shellDriverTransmitString+0x40>)
 80162f6:	4798      	blx	r3
 80162f8:	4603      	mov	r3, r0
 80162fa:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 80162fc:	79fb      	ldrb	r3, [r7, #7]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016308:	b004      	add	sp, #16
 801630a:	4770      	bx	lr
 801630c:	20009334 	.word	0x20009334
 8016310:	20005e28 	.word	0x20005e28

08016314 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b084      	sub	sp, #16
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	460b      	mov	r3, r1
 801631e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 8016320:	23ae      	movs	r3, #174	@ 0xae
 8016322:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 8016324:	4b08      	ldr	r3, [pc, #32]	@ (8016348 <gos_sysmonDriverReceive+0x34>)
 8016326:	699b      	ldr	r3, [r3, #24]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d007      	beq.n	801633c <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 801632c:	4b06      	ldr	r3, [pc, #24]	@ (8016348 <gos_sysmonDriverReceive+0x34>)
 801632e:	699b      	ldr	r3, [r3, #24]
 8016330:	887a      	ldrh	r2, [r7, #2]
 8016332:	4611      	mov	r1, r2
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	4798      	blx	r3
 8016338:	4603      	mov	r3, r0
 801633a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 801633c:	7bfb      	ldrb	r3, [r7, #15]
}
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	20005e28 	.word	0x20005e28

0801634c <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	460b      	mov	r3, r1
 8016356:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 8016358:	23ae      	movs	r3, #174	@ 0xae
 801635a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 801635c:	4b08      	ldr	r3, [pc, #32]	@ (8016380 <gos_sysmonDriverTransmit+0x34>)
 801635e:	695b      	ldr	r3, [r3, #20]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d007      	beq.n	8016374 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 8016364:	4b06      	ldr	r3, [pc, #24]	@ (8016380 <gos_sysmonDriverTransmit+0x34>)
 8016366:	695b      	ldr	r3, [r3, #20]
 8016368:	887a      	ldrh	r2, [r7, #2]
 801636a:	4611      	mov	r1, r2
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	4798      	blx	r3
 8016370:	4603      	mov	r3, r0
 8016372:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 8016374:	7bfb      	ldrb	r3, [r7, #15]
}
 8016376:	4618      	mov	r0, r3
 8016378:	3710      	adds	r7, #16
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	20005e28 	.word	0x20005e28

08016384 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b084      	sub	sp, #16
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 801638c:	23ae      	movs	r3, #174	@ 0xae
 801638e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 8016390:	4b07      	ldr	r3, [pc, #28]	@ (80163b0 <gos_timerDriverSysTimerGet+0x2c>)
 8016392:	691b      	ldr	r3, [r3, #16]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d005      	beq.n	80163a4 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 8016398:	4b05      	ldr	r3, [pc, #20]	@ (80163b0 <gos_timerDriverSysTimerGet+0x2c>)
 801639a:	691b      	ldr	r3, [r3, #16]
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	4798      	blx	r3
 80163a0:	4603      	mov	r3, r0
 80163a2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 80163a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3710      	adds	r7, #16
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	20005e28 	.word	0x20005e28

080163b4 <atoi>:
 80163b4:	220a      	movs	r2, #10
 80163b6:	2100      	movs	r1, #0
 80163b8:	f000 b87a 	b.w	80164b0 <strtol>

080163bc <_strtol_l.constprop.0>:
 80163bc:	2b24      	cmp	r3, #36	@ 0x24
 80163be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163c2:	4686      	mov	lr, r0
 80163c4:	4690      	mov	r8, r2
 80163c6:	d801      	bhi.n	80163cc <_strtol_l.constprop.0+0x10>
 80163c8:	2b01      	cmp	r3, #1
 80163ca:	d106      	bne.n	80163da <_strtol_l.constprop.0+0x1e>
 80163cc:	f000 fe7a 	bl	80170c4 <__errno>
 80163d0:	2316      	movs	r3, #22
 80163d2:	6003      	str	r3, [r0, #0]
 80163d4:	2000      	movs	r0, #0
 80163d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163da:	4834      	ldr	r0, [pc, #208]	@ (80164ac <_strtol_l.constprop.0+0xf0>)
 80163dc:	460d      	mov	r5, r1
 80163de:	462a      	mov	r2, r5
 80163e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163e4:	5d06      	ldrb	r6, [r0, r4]
 80163e6:	f016 0608 	ands.w	r6, r6, #8
 80163ea:	d1f8      	bne.n	80163de <_strtol_l.constprop.0+0x22>
 80163ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80163ee:	d12d      	bne.n	801644c <_strtol_l.constprop.0+0x90>
 80163f0:	782c      	ldrb	r4, [r5, #0]
 80163f2:	2601      	movs	r6, #1
 80163f4:	1c95      	adds	r5, r2, #2
 80163f6:	f033 0210 	bics.w	r2, r3, #16
 80163fa:	d109      	bne.n	8016410 <_strtol_l.constprop.0+0x54>
 80163fc:	2c30      	cmp	r4, #48	@ 0x30
 80163fe:	d12a      	bne.n	8016456 <_strtol_l.constprop.0+0x9a>
 8016400:	782a      	ldrb	r2, [r5, #0]
 8016402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016406:	2a58      	cmp	r2, #88	@ 0x58
 8016408:	d125      	bne.n	8016456 <_strtol_l.constprop.0+0x9a>
 801640a:	786c      	ldrb	r4, [r5, #1]
 801640c:	2310      	movs	r3, #16
 801640e:	3502      	adds	r5, #2
 8016410:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016414:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016418:	2200      	movs	r2, #0
 801641a:	fbbc f9f3 	udiv	r9, ip, r3
 801641e:	4610      	mov	r0, r2
 8016420:	fb03 ca19 	mls	sl, r3, r9, ip
 8016424:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016428:	2f09      	cmp	r7, #9
 801642a:	d81b      	bhi.n	8016464 <_strtol_l.constprop.0+0xa8>
 801642c:	463c      	mov	r4, r7
 801642e:	42a3      	cmp	r3, r4
 8016430:	dd27      	ble.n	8016482 <_strtol_l.constprop.0+0xc6>
 8016432:	1c57      	adds	r7, r2, #1
 8016434:	d007      	beq.n	8016446 <_strtol_l.constprop.0+0x8a>
 8016436:	4581      	cmp	r9, r0
 8016438:	d320      	bcc.n	801647c <_strtol_l.constprop.0+0xc0>
 801643a:	d101      	bne.n	8016440 <_strtol_l.constprop.0+0x84>
 801643c:	45a2      	cmp	sl, r4
 801643e:	db1d      	blt.n	801647c <_strtol_l.constprop.0+0xc0>
 8016440:	fb00 4003 	mla	r0, r0, r3, r4
 8016444:	2201      	movs	r2, #1
 8016446:	f815 4b01 	ldrb.w	r4, [r5], #1
 801644a:	e7eb      	b.n	8016424 <_strtol_l.constprop.0+0x68>
 801644c:	2c2b      	cmp	r4, #43	@ 0x2b
 801644e:	bf04      	itt	eq
 8016450:	782c      	ldrbeq	r4, [r5, #0]
 8016452:	1c95      	addeq	r5, r2, #2
 8016454:	e7cf      	b.n	80163f6 <_strtol_l.constprop.0+0x3a>
 8016456:	2b00      	cmp	r3, #0
 8016458:	d1da      	bne.n	8016410 <_strtol_l.constprop.0+0x54>
 801645a:	2c30      	cmp	r4, #48	@ 0x30
 801645c:	bf0c      	ite	eq
 801645e:	2308      	moveq	r3, #8
 8016460:	230a      	movne	r3, #10
 8016462:	e7d5      	b.n	8016410 <_strtol_l.constprop.0+0x54>
 8016464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016468:	2f19      	cmp	r7, #25
 801646a:	d801      	bhi.n	8016470 <_strtol_l.constprop.0+0xb4>
 801646c:	3c37      	subs	r4, #55	@ 0x37
 801646e:	e7de      	b.n	801642e <_strtol_l.constprop.0+0x72>
 8016470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016474:	2f19      	cmp	r7, #25
 8016476:	d804      	bhi.n	8016482 <_strtol_l.constprop.0+0xc6>
 8016478:	3c57      	subs	r4, #87	@ 0x57
 801647a:	e7d8      	b.n	801642e <_strtol_l.constprop.0+0x72>
 801647c:	f04f 32ff 	mov.w	r2, #4294967295
 8016480:	e7e1      	b.n	8016446 <_strtol_l.constprop.0+0x8a>
 8016482:	1c53      	adds	r3, r2, #1
 8016484:	d108      	bne.n	8016498 <_strtol_l.constprop.0+0xdc>
 8016486:	2322      	movs	r3, #34	@ 0x22
 8016488:	f8ce 3000 	str.w	r3, [lr]
 801648c:	4660      	mov	r0, ip
 801648e:	f1b8 0f00 	cmp.w	r8, #0
 8016492:	d0a0      	beq.n	80163d6 <_strtol_l.constprop.0+0x1a>
 8016494:	1e69      	subs	r1, r5, #1
 8016496:	e006      	b.n	80164a6 <_strtol_l.constprop.0+0xea>
 8016498:	b106      	cbz	r6, 801649c <_strtol_l.constprop.0+0xe0>
 801649a:	4240      	negs	r0, r0
 801649c:	f1b8 0f00 	cmp.w	r8, #0
 80164a0:	d099      	beq.n	80163d6 <_strtol_l.constprop.0+0x1a>
 80164a2:	2a00      	cmp	r2, #0
 80164a4:	d1f6      	bne.n	8016494 <_strtol_l.constprop.0+0xd8>
 80164a6:	f8c8 1000 	str.w	r1, [r8]
 80164aa:	e794      	b.n	80163d6 <_strtol_l.constprop.0+0x1a>
 80164ac:	0801abbd 	.word	0x0801abbd

080164b0 <strtol>:
 80164b0:	4613      	mov	r3, r2
 80164b2:	460a      	mov	r2, r1
 80164b4:	4601      	mov	r1, r0
 80164b6:	4802      	ldr	r0, [pc, #8]	@ (80164c0 <strtol+0x10>)
 80164b8:	6800      	ldr	r0, [r0, #0]
 80164ba:	f7ff bf7f 	b.w	80163bc <_strtol_l.constprop.0>
 80164be:	bf00      	nop
 80164c0:	20001204 	.word	0x20001204

080164c4 <__cvt>:
 80164c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164c8:	ec57 6b10 	vmov	r6, r7, d0
 80164cc:	2f00      	cmp	r7, #0
 80164ce:	460c      	mov	r4, r1
 80164d0:	4619      	mov	r1, r3
 80164d2:	463b      	mov	r3, r7
 80164d4:	bfbb      	ittet	lt
 80164d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80164da:	461f      	movlt	r7, r3
 80164dc:	2300      	movge	r3, #0
 80164de:	232d      	movlt	r3, #45	@ 0x2d
 80164e0:	700b      	strb	r3, [r1, #0]
 80164e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80164e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80164e8:	4691      	mov	r9, r2
 80164ea:	f023 0820 	bic.w	r8, r3, #32
 80164ee:	bfbc      	itt	lt
 80164f0:	4632      	movlt	r2, r6
 80164f2:	4616      	movlt	r6, r2
 80164f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80164f8:	d005      	beq.n	8016506 <__cvt+0x42>
 80164fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80164fe:	d100      	bne.n	8016502 <__cvt+0x3e>
 8016500:	3401      	adds	r4, #1
 8016502:	2102      	movs	r1, #2
 8016504:	e000      	b.n	8016508 <__cvt+0x44>
 8016506:	2103      	movs	r1, #3
 8016508:	ab03      	add	r3, sp, #12
 801650a:	9301      	str	r3, [sp, #4]
 801650c:	ab02      	add	r3, sp, #8
 801650e:	9300      	str	r3, [sp, #0]
 8016510:	ec47 6b10 	vmov	d0, r6, r7
 8016514:	4653      	mov	r3, sl
 8016516:	4622      	mov	r2, r4
 8016518:	f000 fea2 	bl	8017260 <_dtoa_r>
 801651c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016520:	4605      	mov	r5, r0
 8016522:	d119      	bne.n	8016558 <__cvt+0x94>
 8016524:	f019 0f01 	tst.w	r9, #1
 8016528:	d00e      	beq.n	8016548 <__cvt+0x84>
 801652a:	eb00 0904 	add.w	r9, r0, r4
 801652e:	2200      	movs	r2, #0
 8016530:	2300      	movs	r3, #0
 8016532:	4630      	mov	r0, r6
 8016534:	4639      	mov	r1, r7
 8016536:	f7ea fae7 	bl	8000b08 <__aeabi_dcmpeq>
 801653a:	b108      	cbz	r0, 8016540 <__cvt+0x7c>
 801653c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016540:	2230      	movs	r2, #48	@ 0x30
 8016542:	9b03      	ldr	r3, [sp, #12]
 8016544:	454b      	cmp	r3, r9
 8016546:	d31e      	bcc.n	8016586 <__cvt+0xc2>
 8016548:	9b03      	ldr	r3, [sp, #12]
 801654a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801654c:	1b5b      	subs	r3, r3, r5
 801654e:	4628      	mov	r0, r5
 8016550:	6013      	str	r3, [r2, #0]
 8016552:	b004      	add	sp, #16
 8016554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016558:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801655c:	eb00 0904 	add.w	r9, r0, r4
 8016560:	d1e5      	bne.n	801652e <__cvt+0x6a>
 8016562:	7803      	ldrb	r3, [r0, #0]
 8016564:	2b30      	cmp	r3, #48	@ 0x30
 8016566:	d10a      	bne.n	801657e <__cvt+0xba>
 8016568:	2200      	movs	r2, #0
 801656a:	2300      	movs	r3, #0
 801656c:	4630      	mov	r0, r6
 801656e:	4639      	mov	r1, r7
 8016570:	f7ea faca 	bl	8000b08 <__aeabi_dcmpeq>
 8016574:	b918      	cbnz	r0, 801657e <__cvt+0xba>
 8016576:	f1c4 0401 	rsb	r4, r4, #1
 801657a:	f8ca 4000 	str.w	r4, [sl]
 801657e:	f8da 3000 	ldr.w	r3, [sl]
 8016582:	4499      	add	r9, r3
 8016584:	e7d3      	b.n	801652e <__cvt+0x6a>
 8016586:	1c59      	adds	r1, r3, #1
 8016588:	9103      	str	r1, [sp, #12]
 801658a:	701a      	strb	r2, [r3, #0]
 801658c:	e7d9      	b.n	8016542 <__cvt+0x7e>

0801658e <__exponent>:
 801658e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016590:	2900      	cmp	r1, #0
 8016592:	bfba      	itte	lt
 8016594:	4249      	neglt	r1, r1
 8016596:	232d      	movlt	r3, #45	@ 0x2d
 8016598:	232b      	movge	r3, #43	@ 0x2b
 801659a:	2909      	cmp	r1, #9
 801659c:	7002      	strb	r2, [r0, #0]
 801659e:	7043      	strb	r3, [r0, #1]
 80165a0:	dd29      	ble.n	80165f6 <__exponent+0x68>
 80165a2:	f10d 0307 	add.w	r3, sp, #7
 80165a6:	461d      	mov	r5, r3
 80165a8:	270a      	movs	r7, #10
 80165aa:	461a      	mov	r2, r3
 80165ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80165b0:	fb07 1416 	mls	r4, r7, r6, r1
 80165b4:	3430      	adds	r4, #48	@ 0x30
 80165b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80165ba:	460c      	mov	r4, r1
 80165bc:	2c63      	cmp	r4, #99	@ 0x63
 80165be:	f103 33ff 	add.w	r3, r3, #4294967295
 80165c2:	4631      	mov	r1, r6
 80165c4:	dcf1      	bgt.n	80165aa <__exponent+0x1c>
 80165c6:	3130      	adds	r1, #48	@ 0x30
 80165c8:	1e94      	subs	r4, r2, #2
 80165ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80165ce:	1c41      	adds	r1, r0, #1
 80165d0:	4623      	mov	r3, r4
 80165d2:	42ab      	cmp	r3, r5
 80165d4:	d30a      	bcc.n	80165ec <__exponent+0x5e>
 80165d6:	f10d 0309 	add.w	r3, sp, #9
 80165da:	1a9b      	subs	r3, r3, r2
 80165dc:	42ac      	cmp	r4, r5
 80165de:	bf88      	it	hi
 80165e0:	2300      	movhi	r3, #0
 80165e2:	3302      	adds	r3, #2
 80165e4:	4403      	add	r3, r0
 80165e6:	1a18      	subs	r0, r3, r0
 80165e8:	b003      	add	sp, #12
 80165ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80165f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80165f4:	e7ed      	b.n	80165d2 <__exponent+0x44>
 80165f6:	2330      	movs	r3, #48	@ 0x30
 80165f8:	3130      	adds	r1, #48	@ 0x30
 80165fa:	7083      	strb	r3, [r0, #2]
 80165fc:	70c1      	strb	r1, [r0, #3]
 80165fe:	1d03      	adds	r3, r0, #4
 8016600:	e7f1      	b.n	80165e6 <__exponent+0x58>
	...

08016604 <_printf_float>:
 8016604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016608:	b08d      	sub	sp, #52	@ 0x34
 801660a:	460c      	mov	r4, r1
 801660c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016610:	4616      	mov	r6, r2
 8016612:	461f      	mov	r7, r3
 8016614:	4605      	mov	r5, r0
 8016616:	f000 fd0b 	bl	8017030 <_localeconv_r>
 801661a:	6803      	ldr	r3, [r0, #0]
 801661c:	9304      	str	r3, [sp, #16]
 801661e:	4618      	mov	r0, r3
 8016620:	f7e9 fe46 	bl	80002b0 <strlen>
 8016624:	2300      	movs	r3, #0
 8016626:	930a      	str	r3, [sp, #40]	@ 0x28
 8016628:	f8d8 3000 	ldr.w	r3, [r8]
 801662c:	9005      	str	r0, [sp, #20]
 801662e:	3307      	adds	r3, #7
 8016630:	f023 0307 	bic.w	r3, r3, #7
 8016634:	f103 0208 	add.w	r2, r3, #8
 8016638:	f894 a018 	ldrb.w	sl, [r4, #24]
 801663c:	f8d4 b000 	ldr.w	fp, [r4]
 8016640:	f8c8 2000 	str.w	r2, [r8]
 8016644:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016648:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801664c:	9307      	str	r3, [sp, #28]
 801664e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016652:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801665a:	4b9c      	ldr	r3, [pc, #624]	@ (80168cc <_printf_float+0x2c8>)
 801665c:	f04f 32ff 	mov.w	r2, #4294967295
 8016660:	f7ea fa84 	bl	8000b6c <__aeabi_dcmpun>
 8016664:	bb70      	cbnz	r0, 80166c4 <_printf_float+0xc0>
 8016666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801666a:	4b98      	ldr	r3, [pc, #608]	@ (80168cc <_printf_float+0x2c8>)
 801666c:	f04f 32ff 	mov.w	r2, #4294967295
 8016670:	f7ea fa5e 	bl	8000b30 <__aeabi_dcmple>
 8016674:	bb30      	cbnz	r0, 80166c4 <_printf_float+0xc0>
 8016676:	2200      	movs	r2, #0
 8016678:	2300      	movs	r3, #0
 801667a:	4640      	mov	r0, r8
 801667c:	4649      	mov	r1, r9
 801667e:	f7ea fa4d 	bl	8000b1c <__aeabi_dcmplt>
 8016682:	b110      	cbz	r0, 801668a <_printf_float+0x86>
 8016684:	232d      	movs	r3, #45	@ 0x2d
 8016686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801668a:	4a91      	ldr	r2, [pc, #580]	@ (80168d0 <_printf_float+0x2cc>)
 801668c:	4b91      	ldr	r3, [pc, #580]	@ (80168d4 <_printf_float+0x2d0>)
 801668e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016692:	bf94      	ite	ls
 8016694:	4690      	movls	r8, r2
 8016696:	4698      	movhi	r8, r3
 8016698:	2303      	movs	r3, #3
 801669a:	6123      	str	r3, [r4, #16]
 801669c:	f02b 0304 	bic.w	r3, fp, #4
 80166a0:	6023      	str	r3, [r4, #0]
 80166a2:	f04f 0900 	mov.w	r9, #0
 80166a6:	9700      	str	r7, [sp, #0]
 80166a8:	4633      	mov	r3, r6
 80166aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80166ac:	4621      	mov	r1, r4
 80166ae:	4628      	mov	r0, r5
 80166b0:	f000 f9d2 	bl	8016a58 <_printf_common>
 80166b4:	3001      	adds	r0, #1
 80166b6:	f040 808d 	bne.w	80167d4 <_printf_float+0x1d0>
 80166ba:	f04f 30ff 	mov.w	r0, #4294967295
 80166be:	b00d      	add	sp, #52	@ 0x34
 80166c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c4:	4642      	mov	r2, r8
 80166c6:	464b      	mov	r3, r9
 80166c8:	4640      	mov	r0, r8
 80166ca:	4649      	mov	r1, r9
 80166cc:	f7ea fa4e 	bl	8000b6c <__aeabi_dcmpun>
 80166d0:	b140      	cbz	r0, 80166e4 <_printf_float+0xe0>
 80166d2:	464b      	mov	r3, r9
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	bfbc      	itt	lt
 80166d8:	232d      	movlt	r3, #45	@ 0x2d
 80166da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80166de:	4a7e      	ldr	r2, [pc, #504]	@ (80168d8 <_printf_float+0x2d4>)
 80166e0:	4b7e      	ldr	r3, [pc, #504]	@ (80168dc <_printf_float+0x2d8>)
 80166e2:	e7d4      	b.n	801668e <_printf_float+0x8a>
 80166e4:	6863      	ldr	r3, [r4, #4]
 80166e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80166ea:	9206      	str	r2, [sp, #24]
 80166ec:	1c5a      	adds	r2, r3, #1
 80166ee:	d13b      	bne.n	8016768 <_printf_float+0x164>
 80166f0:	2306      	movs	r3, #6
 80166f2:	6063      	str	r3, [r4, #4]
 80166f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80166f8:	2300      	movs	r3, #0
 80166fa:	6022      	str	r2, [r4, #0]
 80166fc:	9303      	str	r3, [sp, #12]
 80166fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8016700:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016704:	ab09      	add	r3, sp, #36	@ 0x24
 8016706:	9300      	str	r3, [sp, #0]
 8016708:	6861      	ldr	r1, [r4, #4]
 801670a:	ec49 8b10 	vmov	d0, r8, r9
 801670e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016712:	4628      	mov	r0, r5
 8016714:	f7ff fed6 	bl	80164c4 <__cvt>
 8016718:	9b06      	ldr	r3, [sp, #24]
 801671a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801671c:	2b47      	cmp	r3, #71	@ 0x47
 801671e:	4680      	mov	r8, r0
 8016720:	d129      	bne.n	8016776 <_printf_float+0x172>
 8016722:	1cc8      	adds	r0, r1, #3
 8016724:	db02      	blt.n	801672c <_printf_float+0x128>
 8016726:	6863      	ldr	r3, [r4, #4]
 8016728:	4299      	cmp	r1, r3
 801672a:	dd41      	ble.n	80167b0 <_printf_float+0x1ac>
 801672c:	f1aa 0a02 	sub.w	sl, sl, #2
 8016730:	fa5f fa8a 	uxtb.w	sl, sl
 8016734:	3901      	subs	r1, #1
 8016736:	4652      	mov	r2, sl
 8016738:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801673c:	9109      	str	r1, [sp, #36]	@ 0x24
 801673e:	f7ff ff26 	bl	801658e <__exponent>
 8016742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016744:	1813      	adds	r3, r2, r0
 8016746:	2a01      	cmp	r2, #1
 8016748:	4681      	mov	r9, r0
 801674a:	6123      	str	r3, [r4, #16]
 801674c:	dc02      	bgt.n	8016754 <_printf_float+0x150>
 801674e:	6822      	ldr	r2, [r4, #0]
 8016750:	07d2      	lsls	r2, r2, #31
 8016752:	d501      	bpl.n	8016758 <_printf_float+0x154>
 8016754:	3301      	adds	r3, #1
 8016756:	6123      	str	r3, [r4, #16]
 8016758:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801675c:	2b00      	cmp	r3, #0
 801675e:	d0a2      	beq.n	80166a6 <_printf_float+0xa2>
 8016760:	232d      	movs	r3, #45	@ 0x2d
 8016762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016766:	e79e      	b.n	80166a6 <_printf_float+0xa2>
 8016768:	9a06      	ldr	r2, [sp, #24]
 801676a:	2a47      	cmp	r2, #71	@ 0x47
 801676c:	d1c2      	bne.n	80166f4 <_printf_float+0xf0>
 801676e:	2b00      	cmp	r3, #0
 8016770:	d1c0      	bne.n	80166f4 <_printf_float+0xf0>
 8016772:	2301      	movs	r3, #1
 8016774:	e7bd      	b.n	80166f2 <_printf_float+0xee>
 8016776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801677a:	d9db      	bls.n	8016734 <_printf_float+0x130>
 801677c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016780:	d118      	bne.n	80167b4 <_printf_float+0x1b0>
 8016782:	2900      	cmp	r1, #0
 8016784:	6863      	ldr	r3, [r4, #4]
 8016786:	dd0b      	ble.n	80167a0 <_printf_float+0x19c>
 8016788:	6121      	str	r1, [r4, #16]
 801678a:	b913      	cbnz	r3, 8016792 <_printf_float+0x18e>
 801678c:	6822      	ldr	r2, [r4, #0]
 801678e:	07d0      	lsls	r0, r2, #31
 8016790:	d502      	bpl.n	8016798 <_printf_float+0x194>
 8016792:	3301      	adds	r3, #1
 8016794:	440b      	add	r3, r1
 8016796:	6123      	str	r3, [r4, #16]
 8016798:	65a1      	str	r1, [r4, #88]	@ 0x58
 801679a:	f04f 0900 	mov.w	r9, #0
 801679e:	e7db      	b.n	8016758 <_printf_float+0x154>
 80167a0:	b913      	cbnz	r3, 80167a8 <_printf_float+0x1a4>
 80167a2:	6822      	ldr	r2, [r4, #0]
 80167a4:	07d2      	lsls	r2, r2, #31
 80167a6:	d501      	bpl.n	80167ac <_printf_float+0x1a8>
 80167a8:	3302      	adds	r3, #2
 80167aa:	e7f4      	b.n	8016796 <_printf_float+0x192>
 80167ac:	2301      	movs	r3, #1
 80167ae:	e7f2      	b.n	8016796 <_printf_float+0x192>
 80167b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80167b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80167b6:	4299      	cmp	r1, r3
 80167b8:	db05      	blt.n	80167c6 <_printf_float+0x1c2>
 80167ba:	6823      	ldr	r3, [r4, #0]
 80167bc:	6121      	str	r1, [r4, #16]
 80167be:	07d8      	lsls	r0, r3, #31
 80167c0:	d5ea      	bpl.n	8016798 <_printf_float+0x194>
 80167c2:	1c4b      	adds	r3, r1, #1
 80167c4:	e7e7      	b.n	8016796 <_printf_float+0x192>
 80167c6:	2900      	cmp	r1, #0
 80167c8:	bfd4      	ite	le
 80167ca:	f1c1 0202 	rsble	r2, r1, #2
 80167ce:	2201      	movgt	r2, #1
 80167d0:	4413      	add	r3, r2
 80167d2:	e7e0      	b.n	8016796 <_printf_float+0x192>
 80167d4:	6823      	ldr	r3, [r4, #0]
 80167d6:	055a      	lsls	r2, r3, #21
 80167d8:	d407      	bmi.n	80167ea <_printf_float+0x1e6>
 80167da:	6923      	ldr	r3, [r4, #16]
 80167dc:	4642      	mov	r2, r8
 80167de:	4631      	mov	r1, r6
 80167e0:	4628      	mov	r0, r5
 80167e2:	47b8      	blx	r7
 80167e4:	3001      	adds	r0, #1
 80167e6:	d12b      	bne.n	8016840 <_printf_float+0x23c>
 80167e8:	e767      	b.n	80166ba <_printf_float+0xb6>
 80167ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80167ee:	f240 80dd 	bls.w	80169ac <_printf_float+0x3a8>
 80167f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80167f6:	2200      	movs	r2, #0
 80167f8:	2300      	movs	r3, #0
 80167fa:	f7ea f985 	bl	8000b08 <__aeabi_dcmpeq>
 80167fe:	2800      	cmp	r0, #0
 8016800:	d033      	beq.n	801686a <_printf_float+0x266>
 8016802:	4a37      	ldr	r2, [pc, #220]	@ (80168e0 <_printf_float+0x2dc>)
 8016804:	2301      	movs	r3, #1
 8016806:	4631      	mov	r1, r6
 8016808:	4628      	mov	r0, r5
 801680a:	47b8      	blx	r7
 801680c:	3001      	adds	r0, #1
 801680e:	f43f af54 	beq.w	80166ba <_printf_float+0xb6>
 8016812:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016816:	4543      	cmp	r3, r8
 8016818:	db02      	blt.n	8016820 <_printf_float+0x21c>
 801681a:	6823      	ldr	r3, [r4, #0]
 801681c:	07d8      	lsls	r0, r3, #31
 801681e:	d50f      	bpl.n	8016840 <_printf_float+0x23c>
 8016820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016824:	4631      	mov	r1, r6
 8016826:	4628      	mov	r0, r5
 8016828:	47b8      	blx	r7
 801682a:	3001      	adds	r0, #1
 801682c:	f43f af45 	beq.w	80166ba <_printf_float+0xb6>
 8016830:	f04f 0900 	mov.w	r9, #0
 8016834:	f108 38ff 	add.w	r8, r8, #4294967295
 8016838:	f104 0a1a 	add.w	sl, r4, #26
 801683c:	45c8      	cmp	r8, r9
 801683e:	dc09      	bgt.n	8016854 <_printf_float+0x250>
 8016840:	6823      	ldr	r3, [r4, #0]
 8016842:	079b      	lsls	r3, r3, #30
 8016844:	f100 8103 	bmi.w	8016a4e <_printf_float+0x44a>
 8016848:	68e0      	ldr	r0, [r4, #12]
 801684a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801684c:	4298      	cmp	r0, r3
 801684e:	bfb8      	it	lt
 8016850:	4618      	movlt	r0, r3
 8016852:	e734      	b.n	80166be <_printf_float+0xba>
 8016854:	2301      	movs	r3, #1
 8016856:	4652      	mov	r2, sl
 8016858:	4631      	mov	r1, r6
 801685a:	4628      	mov	r0, r5
 801685c:	47b8      	blx	r7
 801685e:	3001      	adds	r0, #1
 8016860:	f43f af2b 	beq.w	80166ba <_printf_float+0xb6>
 8016864:	f109 0901 	add.w	r9, r9, #1
 8016868:	e7e8      	b.n	801683c <_printf_float+0x238>
 801686a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801686c:	2b00      	cmp	r3, #0
 801686e:	dc39      	bgt.n	80168e4 <_printf_float+0x2e0>
 8016870:	4a1b      	ldr	r2, [pc, #108]	@ (80168e0 <_printf_float+0x2dc>)
 8016872:	2301      	movs	r3, #1
 8016874:	4631      	mov	r1, r6
 8016876:	4628      	mov	r0, r5
 8016878:	47b8      	blx	r7
 801687a:	3001      	adds	r0, #1
 801687c:	f43f af1d 	beq.w	80166ba <_printf_float+0xb6>
 8016880:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016884:	ea59 0303 	orrs.w	r3, r9, r3
 8016888:	d102      	bne.n	8016890 <_printf_float+0x28c>
 801688a:	6823      	ldr	r3, [r4, #0]
 801688c:	07d9      	lsls	r1, r3, #31
 801688e:	d5d7      	bpl.n	8016840 <_printf_float+0x23c>
 8016890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016894:	4631      	mov	r1, r6
 8016896:	4628      	mov	r0, r5
 8016898:	47b8      	blx	r7
 801689a:	3001      	adds	r0, #1
 801689c:	f43f af0d 	beq.w	80166ba <_printf_float+0xb6>
 80168a0:	f04f 0a00 	mov.w	sl, #0
 80168a4:	f104 0b1a 	add.w	fp, r4, #26
 80168a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168aa:	425b      	negs	r3, r3
 80168ac:	4553      	cmp	r3, sl
 80168ae:	dc01      	bgt.n	80168b4 <_printf_float+0x2b0>
 80168b0:	464b      	mov	r3, r9
 80168b2:	e793      	b.n	80167dc <_printf_float+0x1d8>
 80168b4:	2301      	movs	r3, #1
 80168b6:	465a      	mov	r2, fp
 80168b8:	4631      	mov	r1, r6
 80168ba:	4628      	mov	r0, r5
 80168bc:	47b8      	blx	r7
 80168be:	3001      	adds	r0, #1
 80168c0:	f43f aefb 	beq.w	80166ba <_printf_float+0xb6>
 80168c4:	f10a 0a01 	add.w	sl, sl, #1
 80168c8:	e7ee      	b.n	80168a8 <_printf_float+0x2a4>
 80168ca:	bf00      	nop
 80168cc:	7fefffff 	.word	0x7fefffff
 80168d0:	0801acbd 	.word	0x0801acbd
 80168d4:	0801acc1 	.word	0x0801acc1
 80168d8:	0801acc5 	.word	0x0801acc5
 80168dc:	0801acc9 	.word	0x0801acc9
 80168e0:	0801accd 	.word	0x0801accd
 80168e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80168e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80168ea:	4553      	cmp	r3, sl
 80168ec:	bfa8      	it	ge
 80168ee:	4653      	movge	r3, sl
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	4699      	mov	r9, r3
 80168f4:	dc36      	bgt.n	8016964 <_printf_float+0x360>
 80168f6:	f04f 0b00 	mov.w	fp, #0
 80168fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80168fe:	f104 021a 	add.w	r2, r4, #26
 8016902:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016904:	9306      	str	r3, [sp, #24]
 8016906:	eba3 0309 	sub.w	r3, r3, r9
 801690a:	455b      	cmp	r3, fp
 801690c:	dc31      	bgt.n	8016972 <_printf_float+0x36e>
 801690e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016910:	459a      	cmp	sl, r3
 8016912:	dc3a      	bgt.n	801698a <_printf_float+0x386>
 8016914:	6823      	ldr	r3, [r4, #0]
 8016916:	07da      	lsls	r2, r3, #31
 8016918:	d437      	bmi.n	801698a <_printf_float+0x386>
 801691a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801691c:	ebaa 0903 	sub.w	r9, sl, r3
 8016920:	9b06      	ldr	r3, [sp, #24]
 8016922:	ebaa 0303 	sub.w	r3, sl, r3
 8016926:	4599      	cmp	r9, r3
 8016928:	bfa8      	it	ge
 801692a:	4699      	movge	r9, r3
 801692c:	f1b9 0f00 	cmp.w	r9, #0
 8016930:	dc33      	bgt.n	801699a <_printf_float+0x396>
 8016932:	f04f 0800 	mov.w	r8, #0
 8016936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801693a:	f104 0b1a 	add.w	fp, r4, #26
 801693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016940:	ebaa 0303 	sub.w	r3, sl, r3
 8016944:	eba3 0309 	sub.w	r3, r3, r9
 8016948:	4543      	cmp	r3, r8
 801694a:	f77f af79 	ble.w	8016840 <_printf_float+0x23c>
 801694e:	2301      	movs	r3, #1
 8016950:	465a      	mov	r2, fp
 8016952:	4631      	mov	r1, r6
 8016954:	4628      	mov	r0, r5
 8016956:	47b8      	blx	r7
 8016958:	3001      	adds	r0, #1
 801695a:	f43f aeae 	beq.w	80166ba <_printf_float+0xb6>
 801695e:	f108 0801 	add.w	r8, r8, #1
 8016962:	e7ec      	b.n	801693e <_printf_float+0x33a>
 8016964:	4642      	mov	r2, r8
 8016966:	4631      	mov	r1, r6
 8016968:	4628      	mov	r0, r5
 801696a:	47b8      	blx	r7
 801696c:	3001      	adds	r0, #1
 801696e:	d1c2      	bne.n	80168f6 <_printf_float+0x2f2>
 8016970:	e6a3      	b.n	80166ba <_printf_float+0xb6>
 8016972:	2301      	movs	r3, #1
 8016974:	4631      	mov	r1, r6
 8016976:	4628      	mov	r0, r5
 8016978:	9206      	str	r2, [sp, #24]
 801697a:	47b8      	blx	r7
 801697c:	3001      	adds	r0, #1
 801697e:	f43f ae9c 	beq.w	80166ba <_printf_float+0xb6>
 8016982:	9a06      	ldr	r2, [sp, #24]
 8016984:	f10b 0b01 	add.w	fp, fp, #1
 8016988:	e7bb      	b.n	8016902 <_printf_float+0x2fe>
 801698a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801698e:	4631      	mov	r1, r6
 8016990:	4628      	mov	r0, r5
 8016992:	47b8      	blx	r7
 8016994:	3001      	adds	r0, #1
 8016996:	d1c0      	bne.n	801691a <_printf_float+0x316>
 8016998:	e68f      	b.n	80166ba <_printf_float+0xb6>
 801699a:	9a06      	ldr	r2, [sp, #24]
 801699c:	464b      	mov	r3, r9
 801699e:	4442      	add	r2, r8
 80169a0:	4631      	mov	r1, r6
 80169a2:	4628      	mov	r0, r5
 80169a4:	47b8      	blx	r7
 80169a6:	3001      	adds	r0, #1
 80169a8:	d1c3      	bne.n	8016932 <_printf_float+0x32e>
 80169aa:	e686      	b.n	80166ba <_printf_float+0xb6>
 80169ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80169b0:	f1ba 0f01 	cmp.w	sl, #1
 80169b4:	dc01      	bgt.n	80169ba <_printf_float+0x3b6>
 80169b6:	07db      	lsls	r3, r3, #31
 80169b8:	d536      	bpl.n	8016a28 <_printf_float+0x424>
 80169ba:	2301      	movs	r3, #1
 80169bc:	4642      	mov	r2, r8
 80169be:	4631      	mov	r1, r6
 80169c0:	4628      	mov	r0, r5
 80169c2:	47b8      	blx	r7
 80169c4:	3001      	adds	r0, #1
 80169c6:	f43f ae78 	beq.w	80166ba <_printf_float+0xb6>
 80169ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80169ce:	4631      	mov	r1, r6
 80169d0:	4628      	mov	r0, r5
 80169d2:	47b8      	blx	r7
 80169d4:	3001      	adds	r0, #1
 80169d6:	f43f ae70 	beq.w	80166ba <_printf_float+0xb6>
 80169da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80169de:	2200      	movs	r2, #0
 80169e0:	2300      	movs	r3, #0
 80169e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80169e6:	f7ea f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80169ea:	b9c0      	cbnz	r0, 8016a1e <_printf_float+0x41a>
 80169ec:	4653      	mov	r3, sl
 80169ee:	f108 0201 	add.w	r2, r8, #1
 80169f2:	4631      	mov	r1, r6
 80169f4:	4628      	mov	r0, r5
 80169f6:	47b8      	blx	r7
 80169f8:	3001      	adds	r0, #1
 80169fa:	d10c      	bne.n	8016a16 <_printf_float+0x412>
 80169fc:	e65d      	b.n	80166ba <_printf_float+0xb6>
 80169fe:	2301      	movs	r3, #1
 8016a00:	465a      	mov	r2, fp
 8016a02:	4631      	mov	r1, r6
 8016a04:	4628      	mov	r0, r5
 8016a06:	47b8      	blx	r7
 8016a08:	3001      	adds	r0, #1
 8016a0a:	f43f ae56 	beq.w	80166ba <_printf_float+0xb6>
 8016a0e:	f108 0801 	add.w	r8, r8, #1
 8016a12:	45d0      	cmp	r8, sl
 8016a14:	dbf3      	blt.n	80169fe <_printf_float+0x3fa>
 8016a16:	464b      	mov	r3, r9
 8016a18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016a1c:	e6df      	b.n	80167de <_printf_float+0x1da>
 8016a1e:	f04f 0800 	mov.w	r8, #0
 8016a22:	f104 0b1a 	add.w	fp, r4, #26
 8016a26:	e7f4      	b.n	8016a12 <_printf_float+0x40e>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	4642      	mov	r2, r8
 8016a2c:	e7e1      	b.n	80169f2 <_printf_float+0x3ee>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	464a      	mov	r2, r9
 8016a32:	4631      	mov	r1, r6
 8016a34:	4628      	mov	r0, r5
 8016a36:	47b8      	blx	r7
 8016a38:	3001      	adds	r0, #1
 8016a3a:	f43f ae3e 	beq.w	80166ba <_printf_float+0xb6>
 8016a3e:	f108 0801 	add.w	r8, r8, #1
 8016a42:	68e3      	ldr	r3, [r4, #12]
 8016a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016a46:	1a5b      	subs	r3, r3, r1
 8016a48:	4543      	cmp	r3, r8
 8016a4a:	dcf0      	bgt.n	8016a2e <_printf_float+0x42a>
 8016a4c:	e6fc      	b.n	8016848 <_printf_float+0x244>
 8016a4e:	f04f 0800 	mov.w	r8, #0
 8016a52:	f104 0919 	add.w	r9, r4, #25
 8016a56:	e7f4      	b.n	8016a42 <_printf_float+0x43e>

08016a58 <_printf_common>:
 8016a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a5c:	4616      	mov	r6, r2
 8016a5e:	4698      	mov	r8, r3
 8016a60:	688a      	ldr	r2, [r1, #8]
 8016a62:	690b      	ldr	r3, [r1, #16]
 8016a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016a68:	4293      	cmp	r3, r2
 8016a6a:	bfb8      	it	lt
 8016a6c:	4613      	movlt	r3, r2
 8016a6e:	6033      	str	r3, [r6, #0]
 8016a70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016a74:	4607      	mov	r7, r0
 8016a76:	460c      	mov	r4, r1
 8016a78:	b10a      	cbz	r2, 8016a7e <_printf_common+0x26>
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	6033      	str	r3, [r6, #0]
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	0699      	lsls	r1, r3, #26
 8016a82:	bf42      	ittt	mi
 8016a84:	6833      	ldrmi	r3, [r6, #0]
 8016a86:	3302      	addmi	r3, #2
 8016a88:	6033      	strmi	r3, [r6, #0]
 8016a8a:	6825      	ldr	r5, [r4, #0]
 8016a8c:	f015 0506 	ands.w	r5, r5, #6
 8016a90:	d106      	bne.n	8016aa0 <_printf_common+0x48>
 8016a92:	f104 0a19 	add.w	sl, r4, #25
 8016a96:	68e3      	ldr	r3, [r4, #12]
 8016a98:	6832      	ldr	r2, [r6, #0]
 8016a9a:	1a9b      	subs	r3, r3, r2
 8016a9c:	42ab      	cmp	r3, r5
 8016a9e:	dc26      	bgt.n	8016aee <_printf_common+0x96>
 8016aa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016aa4:	6822      	ldr	r2, [r4, #0]
 8016aa6:	3b00      	subs	r3, #0
 8016aa8:	bf18      	it	ne
 8016aaa:	2301      	movne	r3, #1
 8016aac:	0692      	lsls	r2, r2, #26
 8016aae:	d42b      	bmi.n	8016b08 <_printf_common+0xb0>
 8016ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016ab4:	4641      	mov	r1, r8
 8016ab6:	4638      	mov	r0, r7
 8016ab8:	47c8      	blx	r9
 8016aba:	3001      	adds	r0, #1
 8016abc:	d01e      	beq.n	8016afc <_printf_common+0xa4>
 8016abe:	6823      	ldr	r3, [r4, #0]
 8016ac0:	6922      	ldr	r2, [r4, #16]
 8016ac2:	f003 0306 	and.w	r3, r3, #6
 8016ac6:	2b04      	cmp	r3, #4
 8016ac8:	bf02      	ittt	eq
 8016aca:	68e5      	ldreq	r5, [r4, #12]
 8016acc:	6833      	ldreq	r3, [r6, #0]
 8016ace:	1aed      	subeq	r5, r5, r3
 8016ad0:	68a3      	ldr	r3, [r4, #8]
 8016ad2:	bf0c      	ite	eq
 8016ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ad8:	2500      	movne	r5, #0
 8016ada:	4293      	cmp	r3, r2
 8016adc:	bfc4      	itt	gt
 8016ade:	1a9b      	subgt	r3, r3, r2
 8016ae0:	18ed      	addgt	r5, r5, r3
 8016ae2:	2600      	movs	r6, #0
 8016ae4:	341a      	adds	r4, #26
 8016ae6:	42b5      	cmp	r5, r6
 8016ae8:	d11a      	bne.n	8016b20 <_printf_common+0xc8>
 8016aea:	2000      	movs	r0, #0
 8016aec:	e008      	b.n	8016b00 <_printf_common+0xa8>
 8016aee:	2301      	movs	r3, #1
 8016af0:	4652      	mov	r2, sl
 8016af2:	4641      	mov	r1, r8
 8016af4:	4638      	mov	r0, r7
 8016af6:	47c8      	blx	r9
 8016af8:	3001      	adds	r0, #1
 8016afa:	d103      	bne.n	8016b04 <_printf_common+0xac>
 8016afc:	f04f 30ff 	mov.w	r0, #4294967295
 8016b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b04:	3501      	adds	r5, #1
 8016b06:	e7c6      	b.n	8016a96 <_printf_common+0x3e>
 8016b08:	18e1      	adds	r1, r4, r3
 8016b0a:	1c5a      	adds	r2, r3, #1
 8016b0c:	2030      	movs	r0, #48	@ 0x30
 8016b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016b12:	4422      	add	r2, r4
 8016b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016b18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016b1c:	3302      	adds	r3, #2
 8016b1e:	e7c7      	b.n	8016ab0 <_printf_common+0x58>
 8016b20:	2301      	movs	r3, #1
 8016b22:	4622      	mov	r2, r4
 8016b24:	4641      	mov	r1, r8
 8016b26:	4638      	mov	r0, r7
 8016b28:	47c8      	blx	r9
 8016b2a:	3001      	adds	r0, #1
 8016b2c:	d0e6      	beq.n	8016afc <_printf_common+0xa4>
 8016b2e:	3601      	adds	r6, #1
 8016b30:	e7d9      	b.n	8016ae6 <_printf_common+0x8e>
	...

08016b34 <_printf_i>:
 8016b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b38:	7e0f      	ldrb	r7, [r1, #24]
 8016b3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016b3c:	2f78      	cmp	r7, #120	@ 0x78
 8016b3e:	4691      	mov	r9, r2
 8016b40:	4680      	mov	r8, r0
 8016b42:	460c      	mov	r4, r1
 8016b44:	469a      	mov	sl, r3
 8016b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016b4a:	d807      	bhi.n	8016b5c <_printf_i+0x28>
 8016b4c:	2f62      	cmp	r7, #98	@ 0x62
 8016b4e:	d80a      	bhi.n	8016b66 <_printf_i+0x32>
 8016b50:	2f00      	cmp	r7, #0
 8016b52:	f000 80d2 	beq.w	8016cfa <_printf_i+0x1c6>
 8016b56:	2f58      	cmp	r7, #88	@ 0x58
 8016b58:	f000 80b9 	beq.w	8016cce <_printf_i+0x19a>
 8016b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016b64:	e03a      	b.n	8016bdc <_printf_i+0xa8>
 8016b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016b6a:	2b15      	cmp	r3, #21
 8016b6c:	d8f6      	bhi.n	8016b5c <_printf_i+0x28>
 8016b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8016b74 <_printf_i+0x40>)
 8016b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016b74:	08016bcd 	.word	0x08016bcd
 8016b78:	08016be1 	.word	0x08016be1
 8016b7c:	08016b5d 	.word	0x08016b5d
 8016b80:	08016b5d 	.word	0x08016b5d
 8016b84:	08016b5d 	.word	0x08016b5d
 8016b88:	08016b5d 	.word	0x08016b5d
 8016b8c:	08016be1 	.word	0x08016be1
 8016b90:	08016b5d 	.word	0x08016b5d
 8016b94:	08016b5d 	.word	0x08016b5d
 8016b98:	08016b5d 	.word	0x08016b5d
 8016b9c:	08016b5d 	.word	0x08016b5d
 8016ba0:	08016ce1 	.word	0x08016ce1
 8016ba4:	08016c0b 	.word	0x08016c0b
 8016ba8:	08016c9b 	.word	0x08016c9b
 8016bac:	08016b5d 	.word	0x08016b5d
 8016bb0:	08016b5d 	.word	0x08016b5d
 8016bb4:	08016d03 	.word	0x08016d03
 8016bb8:	08016b5d 	.word	0x08016b5d
 8016bbc:	08016c0b 	.word	0x08016c0b
 8016bc0:	08016b5d 	.word	0x08016b5d
 8016bc4:	08016b5d 	.word	0x08016b5d
 8016bc8:	08016ca3 	.word	0x08016ca3
 8016bcc:	6833      	ldr	r3, [r6, #0]
 8016bce:	1d1a      	adds	r2, r3, #4
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	6032      	str	r2, [r6, #0]
 8016bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016bdc:	2301      	movs	r3, #1
 8016bde:	e09d      	b.n	8016d1c <_printf_i+0x1e8>
 8016be0:	6833      	ldr	r3, [r6, #0]
 8016be2:	6820      	ldr	r0, [r4, #0]
 8016be4:	1d19      	adds	r1, r3, #4
 8016be6:	6031      	str	r1, [r6, #0]
 8016be8:	0606      	lsls	r6, r0, #24
 8016bea:	d501      	bpl.n	8016bf0 <_printf_i+0xbc>
 8016bec:	681d      	ldr	r5, [r3, #0]
 8016bee:	e003      	b.n	8016bf8 <_printf_i+0xc4>
 8016bf0:	0645      	lsls	r5, r0, #25
 8016bf2:	d5fb      	bpl.n	8016bec <_printf_i+0xb8>
 8016bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016bf8:	2d00      	cmp	r5, #0
 8016bfa:	da03      	bge.n	8016c04 <_printf_i+0xd0>
 8016bfc:	232d      	movs	r3, #45	@ 0x2d
 8016bfe:	426d      	negs	r5, r5
 8016c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c04:	4859      	ldr	r0, [pc, #356]	@ (8016d6c <_printf_i+0x238>)
 8016c06:	230a      	movs	r3, #10
 8016c08:	e011      	b.n	8016c2e <_printf_i+0xfa>
 8016c0a:	6821      	ldr	r1, [r4, #0]
 8016c0c:	6833      	ldr	r3, [r6, #0]
 8016c0e:	0608      	lsls	r0, r1, #24
 8016c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8016c14:	d402      	bmi.n	8016c1c <_printf_i+0xe8>
 8016c16:	0649      	lsls	r1, r1, #25
 8016c18:	bf48      	it	mi
 8016c1a:	b2ad      	uxthmi	r5, r5
 8016c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8016c1e:	4853      	ldr	r0, [pc, #332]	@ (8016d6c <_printf_i+0x238>)
 8016c20:	6033      	str	r3, [r6, #0]
 8016c22:	bf14      	ite	ne
 8016c24:	230a      	movne	r3, #10
 8016c26:	2308      	moveq	r3, #8
 8016c28:	2100      	movs	r1, #0
 8016c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016c2e:	6866      	ldr	r6, [r4, #4]
 8016c30:	60a6      	str	r6, [r4, #8]
 8016c32:	2e00      	cmp	r6, #0
 8016c34:	bfa2      	ittt	ge
 8016c36:	6821      	ldrge	r1, [r4, #0]
 8016c38:	f021 0104 	bicge.w	r1, r1, #4
 8016c3c:	6021      	strge	r1, [r4, #0]
 8016c3e:	b90d      	cbnz	r5, 8016c44 <_printf_i+0x110>
 8016c40:	2e00      	cmp	r6, #0
 8016c42:	d04b      	beq.n	8016cdc <_printf_i+0x1a8>
 8016c44:	4616      	mov	r6, r2
 8016c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8016c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8016c4e:	5dc7      	ldrb	r7, [r0, r7]
 8016c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016c54:	462f      	mov	r7, r5
 8016c56:	42bb      	cmp	r3, r7
 8016c58:	460d      	mov	r5, r1
 8016c5a:	d9f4      	bls.n	8016c46 <_printf_i+0x112>
 8016c5c:	2b08      	cmp	r3, #8
 8016c5e:	d10b      	bne.n	8016c78 <_printf_i+0x144>
 8016c60:	6823      	ldr	r3, [r4, #0]
 8016c62:	07df      	lsls	r7, r3, #31
 8016c64:	d508      	bpl.n	8016c78 <_printf_i+0x144>
 8016c66:	6923      	ldr	r3, [r4, #16]
 8016c68:	6861      	ldr	r1, [r4, #4]
 8016c6a:	4299      	cmp	r1, r3
 8016c6c:	bfde      	ittt	le
 8016c6e:	2330      	movle	r3, #48	@ 0x30
 8016c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016c78:	1b92      	subs	r2, r2, r6
 8016c7a:	6122      	str	r2, [r4, #16]
 8016c7c:	f8cd a000 	str.w	sl, [sp]
 8016c80:	464b      	mov	r3, r9
 8016c82:	aa03      	add	r2, sp, #12
 8016c84:	4621      	mov	r1, r4
 8016c86:	4640      	mov	r0, r8
 8016c88:	f7ff fee6 	bl	8016a58 <_printf_common>
 8016c8c:	3001      	adds	r0, #1
 8016c8e:	d14a      	bne.n	8016d26 <_printf_i+0x1f2>
 8016c90:	f04f 30ff 	mov.w	r0, #4294967295
 8016c94:	b004      	add	sp, #16
 8016c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c9a:	6823      	ldr	r3, [r4, #0]
 8016c9c:	f043 0320 	orr.w	r3, r3, #32
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	4833      	ldr	r0, [pc, #204]	@ (8016d70 <_printf_i+0x23c>)
 8016ca4:	2778      	movs	r7, #120	@ 0x78
 8016ca6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016caa:	6823      	ldr	r3, [r4, #0]
 8016cac:	6831      	ldr	r1, [r6, #0]
 8016cae:	061f      	lsls	r7, r3, #24
 8016cb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8016cb4:	d402      	bmi.n	8016cbc <_printf_i+0x188>
 8016cb6:	065f      	lsls	r7, r3, #25
 8016cb8:	bf48      	it	mi
 8016cba:	b2ad      	uxthmi	r5, r5
 8016cbc:	6031      	str	r1, [r6, #0]
 8016cbe:	07d9      	lsls	r1, r3, #31
 8016cc0:	bf44      	itt	mi
 8016cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8016cc6:	6023      	strmi	r3, [r4, #0]
 8016cc8:	b11d      	cbz	r5, 8016cd2 <_printf_i+0x19e>
 8016cca:	2310      	movs	r3, #16
 8016ccc:	e7ac      	b.n	8016c28 <_printf_i+0xf4>
 8016cce:	4827      	ldr	r0, [pc, #156]	@ (8016d6c <_printf_i+0x238>)
 8016cd0:	e7e9      	b.n	8016ca6 <_printf_i+0x172>
 8016cd2:	6823      	ldr	r3, [r4, #0]
 8016cd4:	f023 0320 	bic.w	r3, r3, #32
 8016cd8:	6023      	str	r3, [r4, #0]
 8016cda:	e7f6      	b.n	8016cca <_printf_i+0x196>
 8016cdc:	4616      	mov	r6, r2
 8016cde:	e7bd      	b.n	8016c5c <_printf_i+0x128>
 8016ce0:	6833      	ldr	r3, [r6, #0]
 8016ce2:	6825      	ldr	r5, [r4, #0]
 8016ce4:	6961      	ldr	r1, [r4, #20]
 8016ce6:	1d18      	adds	r0, r3, #4
 8016ce8:	6030      	str	r0, [r6, #0]
 8016cea:	062e      	lsls	r6, r5, #24
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	d501      	bpl.n	8016cf4 <_printf_i+0x1c0>
 8016cf0:	6019      	str	r1, [r3, #0]
 8016cf2:	e002      	b.n	8016cfa <_printf_i+0x1c6>
 8016cf4:	0668      	lsls	r0, r5, #25
 8016cf6:	d5fb      	bpl.n	8016cf0 <_printf_i+0x1bc>
 8016cf8:	8019      	strh	r1, [r3, #0]
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	6123      	str	r3, [r4, #16]
 8016cfe:	4616      	mov	r6, r2
 8016d00:	e7bc      	b.n	8016c7c <_printf_i+0x148>
 8016d02:	6833      	ldr	r3, [r6, #0]
 8016d04:	1d1a      	adds	r2, r3, #4
 8016d06:	6032      	str	r2, [r6, #0]
 8016d08:	681e      	ldr	r6, [r3, #0]
 8016d0a:	6862      	ldr	r2, [r4, #4]
 8016d0c:	2100      	movs	r1, #0
 8016d0e:	4630      	mov	r0, r6
 8016d10:	f7e9 fa7e 	bl	8000210 <memchr>
 8016d14:	b108      	cbz	r0, 8016d1a <_printf_i+0x1e6>
 8016d16:	1b80      	subs	r0, r0, r6
 8016d18:	6060      	str	r0, [r4, #4]
 8016d1a:	6863      	ldr	r3, [r4, #4]
 8016d1c:	6123      	str	r3, [r4, #16]
 8016d1e:	2300      	movs	r3, #0
 8016d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016d24:	e7aa      	b.n	8016c7c <_printf_i+0x148>
 8016d26:	6923      	ldr	r3, [r4, #16]
 8016d28:	4632      	mov	r2, r6
 8016d2a:	4649      	mov	r1, r9
 8016d2c:	4640      	mov	r0, r8
 8016d2e:	47d0      	blx	sl
 8016d30:	3001      	adds	r0, #1
 8016d32:	d0ad      	beq.n	8016c90 <_printf_i+0x15c>
 8016d34:	6823      	ldr	r3, [r4, #0]
 8016d36:	079b      	lsls	r3, r3, #30
 8016d38:	d413      	bmi.n	8016d62 <_printf_i+0x22e>
 8016d3a:	68e0      	ldr	r0, [r4, #12]
 8016d3c:	9b03      	ldr	r3, [sp, #12]
 8016d3e:	4298      	cmp	r0, r3
 8016d40:	bfb8      	it	lt
 8016d42:	4618      	movlt	r0, r3
 8016d44:	e7a6      	b.n	8016c94 <_printf_i+0x160>
 8016d46:	2301      	movs	r3, #1
 8016d48:	4632      	mov	r2, r6
 8016d4a:	4649      	mov	r1, r9
 8016d4c:	4640      	mov	r0, r8
 8016d4e:	47d0      	blx	sl
 8016d50:	3001      	adds	r0, #1
 8016d52:	d09d      	beq.n	8016c90 <_printf_i+0x15c>
 8016d54:	3501      	adds	r5, #1
 8016d56:	68e3      	ldr	r3, [r4, #12]
 8016d58:	9903      	ldr	r1, [sp, #12]
 8016d5a:	1a5b      	subs	r3, r3, r1
 8016d5c:	42ab      	cmp	r3, r5
 8016d5e:	dcf2      	bgt.n	8016d46 <_printf_i+0x212>
 8016d60:	e7eb      	b.n	8016d3a <_printf_i+0x206>
 8016d62:	2500      	movs	r5, #0
 8016d64:	f104 0619 	add.w	r6, r4, #25
 8016d68:	e7f5      	b.n	8016d56 <_printf_i+0x222>
 8016d6a:	bf00      	nop
 8016d6c:	0801accf 	.word	0x0801accf
 8016d70:	0801ace0 	.word	0x0801ace0

08016d74 <std>:
 8016d74:	2300      	movs	r3, #0
 8016d76:	b510      	push	{r4, lr}
 8016d78:	4604      	mov	r4, r0
 8016d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8016d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d82:	6083      	str	r3, [r0, #8]
 8016d84:	8181      	strh	r1, [r0, #12]
 8016d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8016d88:	81c2      	strh	r2, [r0, #14]
 8016d8a:	6183      	str	r3, [r0, #24]
 8016d8c:	4619      	mov	r1, r3
 8016d8e:	2208      	movs	r2, #8
 8016d90:	305c      	adds	r0, #92	@ 0x5c
 8016d92:	f000 f935 	bl	8017000 <memset>
 8016d96:	4b0d      	ldr	r3, [pc, #52]	@ (8016dcc <std+0x58>)
 8016d98:	6263      	str	r3, [r4, #36]	@ 0x24
 8016d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd0 <std+0x5c>)
 8016d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd4 <std+0x60>)
 8016da0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016da2:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd8 <std+0x64>)
 8016da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8016da6:	4b0d      	ldr	r3, [pc, #52]	@ (8016ddc <std+0x68>)
 8016da8:	6224      	str	r4, [r4, #32]
 8016daa:	429c      	cmp	r4, r3
 8016dac:	d006      	beq.n	8016dbc <std+0x48>
 8016dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016db2:	4294      	cmp	r4, r2
 8016db4:	d002      	beq.n	8016dbc <std+0x48>
 8016db6:	33d0      	adds	r3, #208	@ 0xd0
 8016db8:	429c      	cmp	r4, r3
 8016dba:	d105      	bne.n	8016dc8 <std+0x54>
 8016dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dc4:	f000 b9a8 	b.w	8017118 <__retarget_lock_init_recursive>
 8016dc8:	bd10      	pop	{r4, pc}
 8016dca:	bf00      	nop
 8016dcc:	08016f39 	.word	0x08016f39
 8016dd0:	08016f5b 	.word	0x08016f5b
 8016dd4:	08016f93 	.word	0x08016f93
 8016dd8:	08016fb7 	.word	0x08016fb7
 8016ddc:	200093fc 	.word	0x200093fc

08016de0 <stdio_exit_handler>:
 8016de0:	4a02      	ldr	r2, [pc, #8]	@ (8016dec <stdio_exit_handler+0xc>)
 8016de2:	4903      	ldr	r1, [pc, #12]	@ (8016df0 <stdio_exit_handler+0x10>)
 8016de4:	4803      	ldr	r0, [pc, #12]	@ (8016df4 <stdio_exit_handler+0x14>)
 8016de6:	f000 b869 	b.w	8016ebc <_fwalk_sglue>
 8016dea:	bf00      	nop
 8016dec:	200011f8 	.word	0x200011f8
 8016df0:	08018aa5 	.word	0x08018aa5
 8016df4:	20001208 	.word	0x20001208

08016df8 <cleanup_stdio>:
 8016df8:	6841      	ldr	r1, [r0, #4]
 8016dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8016e2c <cleanup_stdio+0x34>)
 8016dfc:	4299      	cmp	r1, r3
 8016dfe:	b510      	push	{r4, lr}
 8016e00:	4604      	mov	r4, r0
 8016e02:	d001      	beq.n	8016e08 <cleanup_stdio+0x10>
 8016e04:	f001 fe4e 	bl	8018aa4 <_fflush_r>
 8016e08:	68a1      	ldr	r1, [r4, #8]
 8016e0a:	4b09      	ldr	r3, [pc, #36]	@ (8016e30 <cleanup_stdio+0x38>)
 8016e0c:	4299      	cmp	r1, r3
 8016e0e:	d002      	beq.n	8016e16 <cleanup_stdio+0x1e>
 8016e10:	4620      	mov	r0, r4
 8016e12:	f001 fe47 	bl	8018aa4 <_fflush_r>
 8016e16:	68e1      	ldr	r1, [r4, #12]
 8016e18:	4b06      	ldr	r3, [pc, #24]	@ (8016e34 <cleanup_stdio+0x3c>)
 8016e1a:	4299      	cmp	r1, r3
 8016e1c:	d004      	beq.n	8016e28 <cleanup_stdio+0x30>
 8016e1e:	4620      	mov	r0, r4
 8016e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e24:	f001 be3e 	b.w	8018aa4 <_fflush_r>
 8016e28:	bd10      	pop	{r4, pc}
 8016e2a:	bf00      	nop
 8016e2c:	200093fc 	.word	0x200093fc
 8016e30:	20009464 	.word	0x20009464
 8016e34:	200094cc 	.word	0x200094cc

08016e38 <global_stdio_init.part.0>:
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8016e68 <global_stdio_init.part.0+0x30>)
 8016e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8016e6c <global_stdio_init.part.0+0x34>)
 8016e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8016e70 <global_stdio_init.part.0+0x38>)
 8016e40:	601a      	str	r2, [r3, #0]
 8016e42:	4620      	mov	r0, r4
 8016e44:	2200      	movs	r2, #0
 8016e46:	2104      	movs	r1, #4
 8016e48:	f7ff ff94 	bl	8016d74 <std>
 8016e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016e50:	2201      	movs	r2, #1
 8016e52:	2109      	movs	r1, #9
 8016e54:	f7ff ff8e 	bl	8016d74 <std>
 8016e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016e5c:	2202      	movs	r2, #2
 8016e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e62:	2112      	movs	r1, #18
 8016e64:	f7ff bf86 	b.w	8016d74 <std>
 8016e68:	20009534 	.word	0x20009534
 8016e6c:	200093fc 	.word	0x200093fc
 8016e70:	08016de1 	.word	0x08016de1

08016e74 <__sfp_lock_acquire>:
 8016e74:	4801      	ldr	r0, [pc, #4]	@ (8016e7c <__sfp_lock_acquire+0x8>)
 8016e76:	f000 b950 	b.w	801711a <__retarget_lock_acquire_recursive>
 8016e7a:	bf00      	nop
 8016e7c:	2000953d 	.word	0x2000953d

08016e80 <__sfp_lock_release>:
 8016e80:	4801      	ldr	r0, [pc, #4]	@ (8016e88 <__sfp_lock_release+0x8>)
 8016e82:	f000 b94b 	b.w	801711c <__retarget_lock_release_recursive>
 8016e86:	bf00      	nop
 8016e88:	2000953d 	.word	0x2000953d

08016e8c <__sinit>:
 8016e8c:	b510      	push	{r4, lr}
 8016e8e:	4604      	mov	r4, r0
 8016e90:	f7ff fff0 	bl	8016e74 <__sfp_lock_acquire>
 8016e94:	6a23      	ldr	r3, [r4, #32]
 8016e96:	b11b      	cbz	r3, 8016ea0 <__sinit+0x14>
 8016e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e9c:	f7ff bff0 	b.w	8016e80 <__sfp_lock_release>
 8016ea0:	4b04      	ldr	r3, [pc, #16]	@ (8016eb4 <__sinit+0x28>)
 8016ea2:	6223      	str	r3, [r4, #32]
 8016ea4:	4b04      	ldr	r3, [pc, #16]	@ (8016eb8 <__sinit+0x2c>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d1f5      	bne.n	8016e98 <__sinit+0xc>
 8016eac:	f7ff ffc4 	bl	8016e38 <global_stdio_init.part.0>
 8016eb0:	e7f2      	b.n	8016e98 <__sinit+0xc>
 8016eb2:	bf00      	nop
 8016eb4:	08016df9 	.word	0x08016df9
 8016eb8:	20009534 	.word	0x20009534

08016ebc <_fwalk_sglue>:
 8016ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ec0:	4607      	mov	r7, r0
 8016ec2:	4688      	mov	r8, r1
 8016ec4:	4614      	mov	r4, r2
 8016ec6:	2600      	movs	r6, #0
 8016ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8016ed0:	d505      	bpl.n	8016ede <_fwalk_sglue+0x22>
 8016ed2:	6824      	ldr	r4, [r4, #0]
 8016ed4:	2c00      	cmp	r4, #0
 8016ed6:	d1f7      	bne.n	8016ec8 <_fwalk_sglue+0xc>
 8016ed8:	4630      	mov	r0, r6
 8016eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ede:	89ab      	ldrh	r3, [r5, #12]
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d907      	bls.n	8016ef4 <_fwalk_sglue+0x38>
 8016ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ee8:	3301      	adds	r3, #1
 8016eea:	d003      	beq.n	8016ef4 <_fwalk_sglue+0x38>
 8016eec:	4629      	mov	r1, r5
 8016eee:	4638      	mov	r0, r7
 8016ef0:	47c0      	blx	r8
 8016ef2:	4306      	orrs	r6, r0
 8016ef4:	3568      	adds	r5, #104	@ 0x68
 8016ef6:	e7e9      	b.n	8016ecc <_fwalk_sglue+0x10>

08016ef8 <siprintf>:
 8016ef8:	b40e      	push	{r1, r2, r3}
 8016efa:	b500      	push	{lr}
 8016efc:	b09c      	sub	sp, #112	@ 0x70
 8016efe:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f00:	9002      	str	r0, [sp, #8]
 8016f02:	9006      	str	r0, [sp, #24]
 8016f04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f08:	4809      	ldr	r0, [pc, #36]	@ (8016f30 <siprintf+0x38>)
 8016f0a:	9107      	str	r1, [sp, #28]
 8016f0c:	9104      	str	r1, [sp, #16]
 8016f0e:	4909      	ldr	r1, [pc, #36]	@ (8016f34 <siprintf+0x3c>)
 8016f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f14:	9105      	str	r1, [sp, #20]
 8016f16:	6800      	ldr	r0, [r0, #0]
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	a902      	add	r1, sp, #8
 8016f1c:	f001 fc42 	bl	80187a4 <_svfiprintf_r>
 8016f20:	9b02      	ldr	r3, [sp, #8]
 8016f22:	2200      	movs	r2, #0
 8016f24:	701a      	strb	r2, [r3, #0]
 8016f26:	b01c      	add	sp, #112	@ 0x70
 8016f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f2c:	b003      	add	sp, #12
 8016f2e:	4770      	bx	lr
 8016f30:	20001204 	.word	0x20001204
 8016f34:	ffff0208 	.word	0xffff0208

08016f38 <__sread>:
 8016f38:	b510      	push	{r4, lr}
 8016f3a:	460c      	mov	r4, r1
 8016f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f40:	f000 f89c 	bl	801707c <_read_r>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	bfab      	itete	ge
 8016f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8016f4c:	181b      	addge	r3, r3, r0
 8016f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f52:	bfac      	ite	ge
 8016f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f56:	81a3      	strhlt	r3, [r4, #12]
 8016f58:	bd10      	pop	{r4, pc}

08016f5a <__swrite>:
 8016f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5e:	461f      	mov	r7, r3
 8016f60:	898b      	ldrh	r3, [r1, #12]
 8016f62:	05db      	lsls	r3, r3, #23
 8016f64:	4605      	mov	r5, r0
 8016f66:	460c      	mov	r4, r1
 8016f68:	4616      	mov	r6, r2
 8016f6a:	d505      	bpl.n	8016f78 <__swrite+0x1e>
 8016f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f70:	2302      	movs	r3, #2
 8016f72:	2200      	movs	r2, #0
 8016f74:	f000 f870 	bl	8017058 <_lseek_r>
 8016f78:	89a3      	ldrh	r3, [r4, #12]
 8016f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f82:	81a3      	strh	r3, [r4, #12]
 8016f84:	4632      	mov	r2, r6
 8016f86:	463b      	mov	r3, r7
 8016f88:	4628      	mov	r0, r5
 8016f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8e:	f000 b887 	b.w	80170a0 <_write_r>

08016f92 <__sseek>:
 8016f92:	b510      	push	{r4, lr}
 8016f94:	460c      	mov	r4, r1
 8016f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f9a:	f000 f85d 	bl	8017058 <_lseek_r>
 8016f9e:	1c43      	adds	r3, r0, #1
 8016fa0:	89a3      	ldrh	r3, [r4, #12]
 8016fa2:	bf15      	itete	ne
 8016fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016fae:	81a3      	strheq	r3, [r4, #12]
 8016fb0:	bf18      	it	ne
 8016fb2:	81a3      	strhne	r3, [r4, #12]
 8016fb4:	bd10      	pop	{r4, pc}

08016fb6 <__sclose>:
 8016fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fba:	f000 b83d 	b.w	8017038 <_close_r>
	...

08016fc0 <_vsiprintf_r>:
 8016fc0:	b500      	push	{lr}
 8016fc2:	b09b      	sub	sp, #108	@ 0x6c
 8016fc4:	9100      	str	r1, [sp, #0]
 8016fc6:	9104      	str	r1, [sp, #16]
 8016fc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016fcc:	9105      	str	r1, [sp, #20]
 8016fce:	9102      	str	r1, [sp, #8]
 8016fd0:	4905      	ldr	r1, [pc, #20]	@ (8016fe8 <_vsiprintf_r+0x28>)
 8016fd2:	9103      	str	r1, [sp, #12]
 8016fd4:	4669      	mov	r1, sp
 8016fd6:	f001 fbe5 	bl	80187a4 <_svfiprintf_r>
 8016fda:	9b00      	ldr	r3, [sp, #0]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	701a      	strb	r2, [r3, #0]
 8016fe0:	b01b      	add	sp, #108	@ 0x6c
 8016fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fe6:	bf00      	nop
 8016fe8:	ffff0208 	.word	0xffff0208

08016fec <vsiprintf>:
 8016fec:	4613      	mov	r3, r2
 8016fee:	460a      	mov	r2, r1
 8016ff0:	4601      	mov	r1, r0
 8016ff2:	4802      	ldr	r0, [pc, #8]	@ (8016ffc <vsiprintf+0x10>)
 8016ff4:	6800      	ldr	r0, [r0, #0]
 8016ff6:	f7ff bfe3 	b.w	8016fc0 <_vsiprintf_r>
 8016ffa:	bf00      	nop
 8016ffc:	20001204 	.word	0x20001204

08017000 <memset>:
 8017000:	4402      	add	r2, r0
 8017002:	4603      	mov	r3, r0
 8017004:	4293      	cmp	r3, r2
 8017006:	d100      	bne.n	801700a <memset+0xa>
 8017008:	4770      	bx	lr
 801700a:	f803 1b01 	strb.w	r1, [r3], #1
 801700e:	e7f9      	b.n	8017004 <memset+0x4>

08017010 <strcat>:
 8017010:	b510      	push	{r4, lr}
 8017012:	4602      	mov	r2, r0
 8017014:	7814      	ldrb	r4, [r2, #0]
 8017016:	4613      	mov	r3, r2
 8017018:	3201      	adds	r2, #1
 801701a:	2c00      	cmp	r4, #0
 801701c:	d1fa      	bne.n	8017014 <strcat+0x4>
 801701e:	3b01      	subs	r3, #1
 8017020:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017024:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017028:	2a00      	cmp	r2, #0
 801702a:	d1f9      	bne.n	8017020 <strcat+0x10>
 801702c:	bd10      	pop	{r4, pc}
	...

08017030 <_localeconv_r>:
 8017030:	4800      	ldr	r0, [pc, #0]	@ (8017034 <_localeconv_r+0x4>)
 8017032:	4770      	bx	lr
 8017034:	20001344 	.word	0x20001344

08017038 <_close_r>:
 8017038:	b538      	push	{r3, r4, r5, lr}
 801703a:	4d06      	ldr	r5, [pc, #24]	@ (8017054 <_close_r+0x1c>)
 801703c:	2300      	movs	r3, #0
 801703e:	4604      	mov	r4, r0
 8017040:	4608      	mov	r0, r1
 8017042:	602b      	str	r3, [r5, #0]
 8017044:	f7ea f9e4 	bl	8001410 <_close>
 8017048:	1c43      	adds	r3, r0, #1
 801704a:	d102      	bne.n	8017052 <_close_r+0x1a>
 801704c:	682b      	ldr	r3, [r5, #0]
 801704e:	b103      	cbz	r3, 8017052 <_close_r+0x1a>
 8017050:	6023      	str	r3, [r4, #0]
 8017052:	bd38      	pop	{r3, r4, r5, pc}
 8017054:	20009538 	.word	0x20009538

08017058 <_lseek_r>:
 8017058:	b538      	push	{r3, r4, r5, lr}
 801705a:	4d07      	ldr	r5, [pc, #28]	@ (8017078 <_lseek_r+0x20>)
 801705c:	4604      	mov	r4, r0
 801705e:	4608      	mov	r0, r1
 8017060:	4611      	mov	r1, r2
 8017062:	2200      	movs	r2, #0
 8017064:	602a      	str	r2, [r5, #0]
 8017066:	461a      	mov	r2, r3
 8017068:	f7ea f9f9 	bl	800145e <_lseek>
 801706c:	1c43      	adds	r3, r0, #1
 801706e:	d102      	bne.n	8017076 <_lseek_r+0x1e>
 8017070:	682b      	ldr	r3, [r5, #0]
 8017072:	b103      	cbz	r3, 8017076 <_lseek_r+0x1e>
 8017074:	6023      	str	r3, [r4, #0]
 8017076:	bd38      	pop	{r3, r4, r5, pc}
 8017078:	20009538 	.word	0x20009538

0801707c <_read_r>:
 801707c:	b538      	push	{r3, r4, r5, lr}
 801707e:	4d07      	ldr	r5, [pc, #28]	@ (801709c <_read_r+0x20>)
 8017080:	4604      	mov	r4, r0
 8017082:	4608      	mov	r0, r1
 8017084:	4611      	mov	r1, r2
 8017086:	2200      	movs	r2, #0
 8017088:	602a      	str	r2, [r5, #0]
 801708a:	461a      	mov	r2, r3
 801708c:	f7ea f987 	bl	800139e <_read>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d102      	bne.n	801709a <_read_r+0x1e>
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	b103      	cbz	r3, 801709a <_read_r+0x1e>
 8017098:	6023      	str	r3, [r4, #0]
 801709a:	bd38      	pop	{r3, r4, r5, pc}
 801709c:	20009538 	.word	0x20009538

080170a0 <_write_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d07      	ldr	r5, [pc, #28]	@ (80170c0 <_write_r+0x20>)
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	4611      	mov	r1, r2
 80170aa:	2200      	movs	r2, #0
 80170ac:	602a      	str	r2, [r5, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	f7ea f992 	bl	80013d8 <_write>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_write_r+0x1e>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_write_r+0x1e>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	20009538 	.word	0x20009538

080170c4 <__errno>:
 80170c4:	4b01      	ldr	r3, [pc, #4]	@ (80170cc <__errno+0x8>)
 80170c6:	6818      	ldr	r0, [r3, #0]
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop
 80170cc:	20001204 	.word	0x20001204

080170d0 <__libc_init_array>:
 80170d0:	b570      	push	{r4, r5, r6, lr}
 80170d2:	4d0d      	ldr	r5, [pc, #52]	@ (8017108 <__libc_init_array+0x38>)
 80170d4:	4c0d      	ldr	r4, [pc, #52]	@ (801710c <__libc_init_array+0x3c>)
 80170d6:	1b64      	subs	r4, r4, r5
 80170d8:	10a4      	asrs	r4, r4, #2
 80170da:	2600      	movs	r6, #0
 80170dc:	42a6      	cmp	r6, r4
 80170de:	d109      	bne.n	80170f4 <__libc_init_array+0x24>
 80170e0:	4d0b      	ldr	r5, [pc, #44]	@ (8017110 <__libc_init_array+0x40>)
 80170e2:	4c0c      	ldr	r4, [pc, #48]	@ (8017114 <__libc_init_array+0x44>)
 80170e4:	f002 f86e 	bl	80191c4 <_init>
 80170e8:	1b64      	subs	r4, r4, r5
 80170ea:	10a4      	asrs	r4, r4, #2
 80170ec:	2600      	movs	r6, #0
 80170ee:	42a6      	cmp	r6, r4
 80170f0:	d105      	bne.n	80170fe <__libc_init_array+0x2e>
 80170f2:	bd70      	pop	{r4, r5, r6, pc}
 80170f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80170f8:	4798      	blx	r3
 80170fa:	3601      	adds	r6, #1
 80170fc:	e7ee      	b.n	80170dc <__libc_init_array+0xc>
 80170fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017102:	4798      	blx	r3
 8017104:	3601      	adds	r6, #1
 8017106:	e7f2      	b.n	80170ee <__libc_init_array+0x1e>
 8017108:	0801af38 	.word	0x0801af38
 801710c:	0801af38 	.word	0x0801af38
 8017110:	0801af38 	.word	0x0801af38
 8017114:	0801af3c 	.word	0x0801af3c

08017118 <__retarget_lock_init_recursive>:
 8017118:	4770      	bx	lr

0801711a <__retarget_lock_acquire_recursive>:
 801711a:	4770      	bx	lr

0801711c <__retarget_lock_release_recursive>:
 801711c:	4770      	bx	lr

0801711e <strcpy>:
 801711e:	4603      	mov	r3, r0
 8017120:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017124:	f803 2b01 	strb.w	r2, [r3], #1
 8017128:	2a00      	cmp	r2, #0
 801712a:	d1f9      	bne.n	8017120 <strcpy+0x2>
 801712c:	4770      	bx	lr

0801712e <memcpy>:
 801712e:	440a      	add	r2, r1
 8017130:	4291      	cmp	r1, r2
 8017132:	f100 33ff 	add.w	r3, r0, #4294967295
 8017136:	d100      	bne.n	801713a <memcpy+0xc>
 8017138:	4770      	bx	lr
 801713a:	b510      	push	{r4, lr}
 801713c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017144:	4291      	cmp	r1, r2
 8017146:	d1f9      	bne.n	801713c <memcpy+0xe>
 8017148:	bd10      	pop	{r4, pc}

0801714a <quorem>:
 801714a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714e:	6903      	ldr	r3, [r0, #16]
 8017150:	690c      	ldr	r4, [r1, #16]
 8017152:	42a3      	cmp	r3, r4
 8017154:	4607      	mov	r7, r0
 8017156:	db7e      	blt.n	8017256 <quorem+0x10c>
 8017158:	3c01      	subs	r4, #1
 801715a:	f101 0814 	add.w	r8, r1, #20
 801715e:	00a3      	lsls	r3, r4, #2
 8017160:	f100 0514 	add.w	r5, r0, #20
 8017164:	9300      	str	r3, [sp, #0]
 8017166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801716a:	9301      	str	r3, [sp, #4]
 801716c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017174:	3301      	adds	r3, #1
 8017176:	429a      	cmp	r2, r3
 8017178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801717c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017180:	d32e      	bcc.n	80171e0 <quorem+0x96>
 8017182:	f04f 0a00 	mov.w	sl, #0
 8017186:	46c4      	mov	ip, r8
 8017188:	46ae      	mov	lr, r5
 801718a:	46d3      	mov	fp, sl
 801718c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017190:	b298      	uxth	r0, r3
 8017192:	fb06 a000 	mla	r0, r6, r0, sl
 8017196:	0c02      	lsrs	r2, r0, #16
 8017198:	0c1b      	lsrs	r3, r3, #16
 801719a:	fb06 2303 	mla	r3, r6, r3, r2
 801719e:	f8de 2000 	ldr.w	r2, [lr]
 80171a2:	b280      	uxth	r0, r0
 80171a4:	b292      	uxth	r2, r2
 80171a6:	1a12      	subs	r2, r2, r0
 80171a8:	445a      	add	r2, fp
 80171aa:	f8de 0000 	ldr.w	r0, [lr]
 80171ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80171b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80171bc:	b292      	uxth	r2, r2
 80171be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80171c2:	45e1      	cmp	r9, ip
 80171c4:	f84e 2b04 	str.w	r2, [lr], #4
 80171c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80171cc:	d2de      	bcs.n	801718c <quorem+0x42>
 80171ce:	9b00      	ldr	r3, [sp, #0]
 80171d0:	58eb      	ldr	r3, [r5, r3]
 80171d2:	b92b      	cbnz	r3, 80171e0 <quorem+0x96>
 80171d4:	9b01      	ldr	r3, [sp, #4]
 80171d6:	3b04      	subs	r3, #4
 80171d8:	429d      	cmp	r5, r3
 80171da:	461a      	mov	r2, r3
 80171dc:	d32f      	bcc.n	801723e <quorem+0xf4>
 80171de:	613c      	str	r4, [r7, #16]
 80171e0:	4638      	mov	r0, r7
 80171e2:	f001 f97b 	bl	80184dc <__mcmp>
 80171e6:	2800      	cmp	r0, #0
 80171e8:	db25      	blt.n	8017236 <quorem+0xec>
 80171ea:	4629      	mov	r1, r5
 80171ec:	2000      	movs	r0, #0
 80171ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80171f2:	f8d1 c000 	ldr.w	ip, [r1]
 80171f6:	fa1f fe82 	uxth.w	lr, r2
 80171fa:	fa1f f38c 	uxth.w	r3, ip
 80171fe:	eba3 030e 	sub.w	r3, r3, lr
 8017202:	4403      	add	r3, r0
 8017204:	0c12      	lsrs	r2, r2, #16
 8017206:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801720a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801720e:	b29b      	uxth	r3, r3
 8017210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017214:	45c1      	cmp	r9, r8
 8017216:	f841 3b04 	str.w	r3, [r1], #4
 801721a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801721e:	d2e6      	bcs.n	80171ee <quorem+0xa4>
 8017220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017228:	b922      	cbnz	r2, 8017234 <quorem+0xea>
 801722a:	3b04      	subs	r3, #4
 801722c:	429d      	cmp	r5, r3
 801722e:	461a      	mov	r2, r3
 8017230:	d30b      	bcc.n	801724a <quorem+0x100>
 8017232:	613c      	str	r4, [r7, #16]
 8017234:	3601      	adds	r6, #1
 8017236:	4630      	mov	r0, r6
 8017238:	b003      	add	sp, #12
 801723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723e:	6812      	ldr	r2, [r2, #0]
 8017240:	3b04      	subs	r3, #4
 8017242:	2a00      	cmp	r2, #0
 8017244:	d1cb      	bne.n	80171de <quorem+0x94>
 8017246:	3c01      	subs	r4, #1
 8017248:	e7c6      	b.n	80171d8 <quorem+0x8e>
 801724a:	6812      	ldr	r2, [r2, #0]
 801724c:	3b04      	subs	r3, #4
 801724e:	2a00      	cmp	r2, #0
 8017250:	d1ef      	bne.n	8017232 <quorem+0xe8>
 8017252:	3c01      	subs	r4, #1
 8017254:	e7ea      	b.n	801722c <quorem+0xe2>
 8017256:	2000      	movs	r0, #0
 8017258:	e7ee      	b.n	8017238 <quorem+0xee>
 801725a:	0000      	movs	r0, r0
 801725c:	0000      	movs	r0, r0
	...

08017260 <_dtoa_r>:
 8017260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017264:	69c7      	ldr	r7, [r0, #28]
 8017266:	b099      	sub	sp, #100	@ 0x64
 8017268:	ed8d 0b02 	vstr	d0, [sp, #8]
 801726c:	ec55 4b10 	vmov	r4, r5, d0
 8017270:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017272:	9109      	str	r1, [sp, #36]	@ 0x24
 8017274:	4683      	mov	fp, r0
 8017276:	920e      	str	r2, [sp, #56]	@ 0x38
 8017278:	9313      	str	r3, [sp, #76]	@ 0x4c
 801727a:	b97f      	cbnz	r7, 801729c <_dtoa_r+0x3c>
 801727c:	2010      	movs	r0, #16
 801727e:	f000 fdfd 	bl	8017e7c <malloc>
 8017282:	4602      	mov	r2, r0
 8017284:	f8cb 001c 	str.w	r0, [fp, #28]
 8017288:	b920      	cbnz	r0, 8017294 <_dtoa_r+0x34>
 801728a:	4ba7      	ldr	r3, [pc, #668]	@ (8017528 <_dtoa_r+0x2c8>)
 801728c:	21ef      	movs	r1, #239	@ 0xef
 801728e:	48a7      	ldr	r0, [pc, #668]	@ (801752c <_dtoa_r+0x2cc>)
 8017290:	f001 fc5a 	bl	8018b48 <__assert_func>
 8017294:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017298:	6007      	str	r7, [r0, #0]
 801729a:	60c7      	str	r7, [r0, #12]
 801729c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80172a0:	6819      	ldr	r1, [r3, #0]
 80172a2:	b159      	cbz	r1, 80172bc <_dtoa_r+0x5c>
 80172a4:	685a      	ldr	r2, [r3, #4]
 80172a6:	604a      	str	r2, [r1, #4]
 80172a8:	2301      	movs	r3, #1
 80172aa:	4093      	lsls	r3, r2
 80172ac:	608b      	str	r3, [r1, #8]
 80172ae:	4658      	mov	r0, fp
 80172b0:	f000 feda 	bl	8018068 <_Bfree>
 80172b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80172b8:	2200      	movs	r2, #0
 80172ba:	601a      	str	r2, [r3, #0]
 80172bc:	1e2b      	subs	r3, r5, #0
 80172be:	bfb9      	ittee	lt
 80172c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80172c4:	9303      	strlt	r3, [sp, #12]
 80172c6:	2300      	movge	r3, #0
 80172c8:	6033      	strge	r3, [r6, #0]
 80172ca:	9f03      	ldr	r7, [sp, #12]
 80172cc:	4b98      	ldr	r3, [pc, #608]	@ (8017530 <_dtoa_r+0x2d0>)
 80172ce:	bfbc      	itt	lt
 80172d0:	2201      	movlt	r2, #1
 80172d2:	6032      	strlt	r2, [r6, #0]
 80172d4:	43bb      	bics	r3, r7
 80172d6:	d112      	bne.n	80172fe <_dtoa_r+0x9e>
 80172d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80172da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80172de:	6013      	str	r3, [r2, #0]
 80172e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80172e4:	4323      	orrs	r3, r4
 80172e6:	f000 854d 	beq.w	8017d84 <_dtoa_r+0xb24>
 80172ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80172ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8017544 <_dtoa_r+0x2e4>
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f000 854f 	beq.w	8017d94 <_dtoa_r+0xb34>
 80172f6:	f10a 0303 	add.w	r3, sl, #3
 80172fa:	f000 bd49 	b.w	8017d90 <_dtoa_r+0xb30>
 80172fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017302:	2200      	movs	r2, #0
 8017304:	ec51 0b17 	vmov	r0, r1, d7
 8017308:	2300      	movs	r3, #0
 801730a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801730e:	f7e9 fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 8017312:	4680      	mov	r8, r0
 8017314:	b158      	cbz	r0, 801732e <_dtoa_r+0xce>
 8017316:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017318:	2301      	movs	r3, #1
 801731a:	6013      	str	r3, [r2, #0]
 801731c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801731e:	b113      	cbz	r3, 8017326 <_dtoa_r+0xc6>
 8017320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017322:	4b84      	ldr	r3, [pc, #528]	@ (8017534 <_dtoa_r+0x2d4>)
 8017324:	6013      	str	r3, [r2, #0]
 8017326:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8017548 <_dtoa_r+0x2e8>
 801732a:	f000 bd33 	b.w	8017d94 <_dtoa_r+0xb34>
 801732e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017332:	aa16      	add	r2, sp, #88	@ 0x58
 8017334:	a917      	add	r1, sp, #92	@ 0x5c
 8017336:	4658      	mov	r0, fp
 8017338:	f001 f980 	bl	801863c <__d2b>
 801733c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8017340:	4681      	mov	r9, r0
 8017342:	2e00      	cmp	r6, #0
 8017344:	d077      	beq.n	8017436 <_dtoa_r+0x1d6>
 8017346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017348:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801734c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017354:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8017358:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801735c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017360:	4619      	mov	r1, r3
 8017362:	2200      	movs	r2, #0
 8017364:	4b74      	ldr	r3, [pc, #464]	@ (8017538 <_dtoa_r+0x2d8>)
 8017366:	f7e8 ffaf 	bl	80002c8 <__aeabi_dsub>
 801736a:	a369      	add	r3, pc, #420	@ (adr r3, 8017510 <_dtoa_r+0x2b0>)
 801736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017370:	f7e9 f962 	bl	8000638 <__aeabi_dmul>
 8017374:	a368      	add	r3, pc, #416	@ (adr r3, 8017518 <_dtoa_r+0x2b8>)
 8017376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737a:	f7e8 ffa7 	bl	80002cc <__adddf3>
 801737e:	4604      	mov	r4, r0
 8017380:	4630      	mov	r0, r6
 8017382:	460d      	mov	r5, r1
 8017384:	f7e9 f8ee 	bl	8000564 <__aeabi_i2d>
 8017388:	a365      	add	r3, pc, #404	@ (adr r3, 8017520 <_dtoa_r+0x2c0>)
 801738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801738e:	f7e9 f953 	bl	8000638 <__aeabi_dmul>
 8017392:	4602      	mov	r2, r0
 8017394:	460b      	mov	r3, r1
 8017396:	4620      	mov	r0, r4
 8017398:	4629      	mov	r1, r5
 801739a:	f7e8 ff97 	bl	80002cc <__adddf3>
 801739e:	4604      	mov	r4, r0
 80173a0:	460d      	mov	r5, r1
 80173a2:	f7e9 fbf9 	bl	8000b98 <__aeabi_d2iz>
 80173a6:	2200      	movs	r2, #0
 80173a8:	4607      	mov	r7, r0
 80173aa:	2300      	movs	r3, #0
 80173ac:	4620      	mov	r0, r4
 80173ae:	4629      	mov	r1, r5
 80173b0:	f7e9 fbb4 	bl	8000b1c <__aeabi_dcmplt>
 80173b4:	b140      	cbz	r0, 80173c8 <_dtoa_r+0x168>
 80173b6:	4638      	mov	r0, r7
 80173b8:	f7e9 f8d4 	bl	8000564 <__aeabi_i2d>
 80173bc:	4622      	mov	r2, r4
 80173be:	462b      	mov	r3, r5
 80173c0:	f7e9 fba2 	bl	8000b08 <__aeabi_dcmpeq>
 80173c4:	b900      	cbnz	r0, 80173c8 <_dtoa_r+0x168>
 80173c6:	3f01      	subs	r7, #1
 80173c8:	2f16      	cmp	r7, #22
 80173ca:	d851      	bhi.n	8017470 <_dtoa_r+0x210>
 80173cc:	4b5b      	ldr	r3, [pc, #364]	@ (801753c <_dtoa_r+0x2dc>)
 80173ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80173d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80173da:	f7e9 fb9f 	bl	8000b1c <__aeabi_dcmplt>
 80173de:	2800      	cmp	r0, #0
 80173e0:	d048      	beq.n	8017474 <_dtoa_r+0x214>
 80173e2:	3f01      	subs	r7, #1
 80173e4:	2300      	movs	r3, #0
 80173e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80173e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80173ea:	1b9b      	subs	r3, r3, r6
 80173ec:	1e5a      	subs	r2, r3, #1
 80173ee:	bf44      	itt	mi
 80173f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80173f4:	2300      	movmi	r3, #0
 80173f6:	9208      	str	r2, [sp, #32]
 80173f8:	bf54      	ite	pl
 80173fa:	f04f 0800 	movpl.w	r8, #0
 80173fe:	9308      	strmi	r3, [sp, #32]
 8017400:	2f00      	cmp	r7, #0
 8017402:	db39      	blt.n	8017478 <_dtoa_r+0x218>
 8017404:	9b08      	ldr	r3, [sp, #32]
 8017406:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017408:	443b      	add	r3, r7
 801740a:	9308      	str	r3, [sp, #32]
 801740c:	2300      	movs	r3, #0
 801740e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017412:	2b09      	cmp	r3, #9
 8017414:	d864      	bhi.n	80174e0 <_dtoa_r+0x280>
 8017416:	2b05      	cmp	r3, #5
 8017418:	bfc4      	itt	gt
 801741a:	3b04      	subgt	r3, #4
 801741c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801741e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017420:	f1a3 0302 	sub.w	r3, r3, #2
 8017424:	bfcc      	ite	gt
 8017426:	2400      	movgt	r4, #0
 8017428:	2401      	movle	r4, #1
 801742a:	2b03      	cmp	r3, #3
 801742c:	d863      	bhi.n	80174f6 <_dtoa_r+0x296>
 801742e:	e8df f003 	tbb	[pc, r3]
 8017432:	372a      	.short	0x372a
 8017434:	5535      	.short	0x5535
 8017436:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801743a:	441e      	add	r6, r3
 801743c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017440:	2b20      	cmp	r3, #32
 8017442:	bfc1      	itttt	gt
 8017444:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8017448:	409f      	lslgt	r7, r3
 801744a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801744e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8017452:	bfd6      	itet	le
 8017454:	f1c3 0320 	rsble	r3, r3, #32
 8017458:	ea47 0003 	orrgt.w	r0, r7, r3
 801745c:	fa04 f003 	lslle.w	r0, r4, r3
 8017460:	f7e9 f870 	bl	8000544 <__aeabi_ui2d>
 8017464:	2201      	movs	r2, #1
 8017466:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801746a:	3e01      	subs	r6, #1
 801746c:	9214      	str	r2, [sp, #80]	@ 0x50
 801746e:	e777      	b.n	8017360 <_dtoa_r+0x100>
 8017470:	2301      	movs	r3, #1
 8017472:	e7b8      	b.n	80173e6 <_dtoa_r+0x186>
 8017474:	9012      	str	r0, [sp, #72]	@ 0x48
 8017476:	e7b7      	b.n	80173e8 <_dtoa_r+0x188>
 8017478:	427b      	negs	r3, r7
 801747a:	930a      	str	r3, [sp, #40]	@ 0x28
 801747c:	2300      	movs	r3, #0
 801747e:	eba8 0807 	sub.w	r8, r8, r7
 8017482:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017484:	e7c4      	b.n	8017410 <_dtoa_r+0x1b0>
 8017486:	2300      	movs	r3, #0
 8017488:	930b      	str	r3, [sp, #44]	@ 0x2c
 801748a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801748c:	2b00      	cmp	r3, #0
 801748e:	dc35      	bgt.n	80174fc <_dtoa_r+0x29c>
 8017490:	2301      	movs	r3, #1
 8017492:	9300      	str	r3, [sp, #0]
 8017494:	9307      	str	r3, [sp, #28]
 8017496:	461a      	mov	r2, r3
 8017498:	920e      	str	r2, [sp, #56]	@ 0x38
 801749a:	e00b      	b.n	80174b4 <_dtoa_r+0x254>
 801749c:	2301      	movs	r3, #1
 801749e:	e7f3      	b.n	8017488 <_dtoa_r+0x228>
 80174a0:	2300      	movs	r3, #0
 80174a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80174a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174a6:	18fb      	adds	r3, r7, r3
 80174a8:	9300      	str	r3, [sp, #0]
 80174aa:	3301      	adds	r3, #1
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	9307      	str	r3, [sp, #28]
 80174b0:	bfb8      	it	lt
 80174b2:	2301      	movlt	r3, #1
 80174b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80174b8:	2100      	movs	r1, #0
 80174ba:	2204      	movs	r2, #4
 80174bc:	f102 0514 	add.w	r5, r2, #20
 80174c0:	429d      	cmp	r5, r3
 80174c2:	d91f      	bls.n	8017504 <_dtoa_r+0x2a4>
 80174c4:	6041      	str	r1, [r0, #4]
 80174c6:	4658      	mov	r0, fp
 80174c8:	f000 fd8e 	bl	8017fe8 <_Balloc>
 80174cc:	4682      	mov	sl, r0
 80174ce:	2800      	cmp	r0, #0
 80174d0:	d13c      	bne.n	801754c <_dtoa_r+0x2ec>
 80174d2:	4b1b      	ldr	r3, [pc, #108]	@ (8017540 <_dtoa_r+0x2e0>)
 80174d4:	4602      	mov	r2, r0
 80174d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80174da:	e6d8      	b.n	801728e <_dtoa_r+0x2e>
 80174dc:	2301      	movs	r3, #1
 80174de:	e7e0      	b.n	80174a2 <_dtoa_r+0x242>
 80174e0:	2401      	movs	r4, #1
 80174e2:	2300      	movs	r3, #0
 80174e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80174e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80174e8:	f04f 33ff 	mov.w	r3, #4294967295
 80174ec:	9300      	str	r3, [sp, #0]
 80174ee:	9307      	str	r3, [sp, #28]
 80174f0:	2200      	movs	r2, #0
 80174f2:	2312      	movs	r3, #18
 80174f4:	e7d0      	b.n	8017498 <_dtoa_r+0x238>
 80174f6:	2301      	movs	r3, #1
 80174f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80174fa:	e7f5      	b.n	80174e8 <_dtoa_r+0x288>
 80174fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174fe:	9300      	str	r3, [sp, #0]
 8017500:	9307      	str	r3, [sp, #28]
 8017502:	e7d7      	b.n	80174b4 <_dtoa_r+0x254>
 8017504:	3101      	adds	r1, #1
 8017506:	0052      	lsls	r2, r2, #1
 8017508:	e7d8      	b.n	80174bc <_dtoa_r+0x25c>
 801750a:	bf00      	nop
 801750c:	f3af 8000 	nop.w
 8017510:	636f4361 	.word	0x636f4361
 8017514:	3fd287a7 	.word	0x3fd287a7
 8017518:	8b60c8b3 	.word	0x8b60c8b3
 801751c:	3fc68a28 	.word	0x3fc68a28
 8017520:	509f79fb 	.word	0x509f79fb
 8017524:	3fd34413 	.word	0x3fd34413
 8017528:	0801acfe 	.word	0x0801acfe
 801752c:	0801ad15 	.word	0x0801ad15
 8017530:	7ff00000 	.word	0x7ff00000
 8017534:	0801acce 	.word	0x0801acce
 8017538:	3ff80000 	.word	0x3ff80000
 801753c:	0801ae10 	.word	0x0801ae10
 8017540:	0801ad6d 	.word	0x0801ad6d
 8017544:	0801acfa 	.word	0x0801acfa
 8017548:	0801accd 	.word	0x0801accd
 801754c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017550:	6018      	str	r0, [r3, #0]
 8017552:	9b07      	ldr	r3, [sp, #28]
 8017554:	2b0e      	cmp	r3, #14
 8017556:	f200 80a4 	bhi.w	80176a2 <_dtoa_r+0x442>
 801755a:	2c00      	cmp	r4, #0
 801755c:	f000 80a1 	beq.w	80176a2 <_dtoa_r+0x442>
 8017560:	2f00      	cmp	r7, #0
 8017562:	dd33      	ble.n	80175cc <_dtoa_r+0x36c>
 8017564:	4bad      	ldr	r3, [pc, #692]	@ (801781c <_dtoa_r+0x5bc>)
 8017566:	f007 020f 	and.w	r2, r7, #15
 801756a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801756e:	ed93 7b00 	vldr	d7, [r3]
 8017572:	05f8      	lsls	r0, r7, #23
 8017574:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017578:	ea4f 1427 	mov.w	r4, r7, asr #4
 801757c:	d516      	bpl.n	80175ac <_dtoa_r+0x34c>
 801757e:	4ba8      	ldr	r3, [pc, #672]	@ (8017820 <_dtoa_r+0x5c0>)
 8017580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017588:	f7e9 f980 	bl	800088c <__aeabi_ddiv>
 801758c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017590:	f004 040f 	and.w	r4, r4, #15
 8017594:	2603      	movs	r6, #3
 8017596:	4da2      	ldr	r5, [pc, #648]	@ (8017820 <_dtoa_r+0x5c0>)
 8017598:	b954      	cbnz	r4, 80175b0 <_dtoa_r+0x350>
 801759a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801759e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175a2:	f7e9 f973 	bl	800088c <__aeabi_ddiv>
 80175a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175aa:	e028      	b.n	80175fe <_dtoa_r+0x39e>
 80175ac:	2602      	movs	r6, #2
 80175ae:	e7f2      	b.n	8017596 <_dtoa_r+0x336>
 80175b0:	07e1      	lsls	r1, r4, #31
 80175b2:	d508      	bpl.n	80175c6 <_dtoa_r+0x366>
 80175b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80175b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80175bc:	f7e9 f83c 	bl	8000638 <__aeabi_dmul>
 80175c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80175c4:	3601      	adds	r6, #1
 80175c6:	1064      	asrs	r4, r4, #1
 80175c8:	3508      	adds	r5, #8
 80175ca:	e7e5      	b.n	8017598 <_dtoa_r+0x338>
 80175cc:	f000 80d2 	beq.w	8017774 <_dtoa_r+0x514>
 80175d0:	427c      	negs	r4, r7
 80175d2:	4b92      	ldr	r3, [pc, #584]	@ (801781c <_dtoa_r+0x5bc>)
 80175d4:	4d92      	ldr	r5, [pc, #584]	@ (8017820 <_dtoa_r+0x5c0>)
 80175d6:	f004 020f 	and.w	r2, r4, #15
 80175da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80175e6:	f7e9 f827 	bl	8000638 <__aeabi_dmul>
 80175ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175ee:	1124      	asrs	r4, r4, #4
 80175f0:	2300      	movs	r3, #0
 80175f2:	2602      	movs	r6, #2
 80175f4:	2c00      	cmp	r4, #0
 80175f6:	f040 80b2 	bne.w	801775e <_dtoa_r+0x4fe>
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d1d3      	bne.n	80175a6 <_dtoa_r+0x346>
 80175fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017600:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017604:	2b00      	cmp	r3, #0
 8017606:	f000 80b7 	beq.w	8017778 <_dtoa_r+0x518>
 801760a:	4b86      	ldr	r3, [pc, #536]	@ (8017824 <_dtoa_r+0x5c4>)
 801760c:	2200      	movs	r2, #0
 801760e:	4620      	mov	r0, r4
 8017610:	4629      	mov	r1, r5
 8017612:	f7e9 fa83 	bl	8000b1c <__aeabi_dcmplt>
 8017616:	2800      	cmp	r0, #0
 8017618:	f000 80ae 	beq.w	8017778 <_dtoa_r+0x518>
 801761c:	9b07      	ldr	r3, [sp, #28]
 801761e:	2b00      	cmp	r3, #0
 8017620:	f000 80aa 	beq.w	8017778 <_dtoa_r+0x518>
 8017624:	9b00      	ldr	r3, [sp, #0]
 8017626:	2b00      	cmp	r3, #0
 8017628:	dd37      	ble.n	801769a <_dtoa_r+0x43a>
 801762a:	1e7b      	subs	r3, r7, #1
 801762c:	9304      	str	r3, [sp, #16]
 801762e:	4620      	mov	r0, r4
 8017630:	4b7d      	ldr	r3, [pc, #500]	@ (8017828 <_dtoa_r+0x5c8>)
 8017632:	2200      	movs	r2, #0
 8017634:	4629      	mov	r1, r5
 8017636:	f7e8 ffff 	bl	8000638 <__aeabi_dmul>
 801763a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801763e:	9c00      	ldr	r4, [sp, #0]
 8017640:	3601      	adds	r6, #1
 8017642:	4630      	mov	r0, r6
 8017644:	f7e8 ff8e 	bl	8000564 <__aeabi_i2d>
 8017648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801764c:	f7e8 fff4 	bl	8000638 <__aeabi_dmul>
 8017650:	4b76      	ldr	r3, [pc, #472]	@ (801782c <_dtoa_r+0x5cc>)
 8017652:	2200      	movs	r2, #0
 8017654:	f7e8 fe3a 	bl	80002cc <__adddf3>
 8017658:	4605      	mov	r5, r0
 801765a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801765e:	2c00      	cmp	r4, #0
 8017660:	f040 808d 	bne.w	801777e <_dtoa_r+0x51e>
 8017664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017668:	4b71      	ldr	r3, [pc, #452]	@ (8017830 <_dtoa_r+0x5d0>)
 801766a:	2200      	movs	r2, #0
 801766c:	f7e8 fe2c 	bl	80002c8 <__aeabi_dsub>
 8017670:	4602      	mov	r2, r0
 8017672:	460b      	mov	r3, r1
 8017674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017678:	462a      	mov	r2, r5
 801767a:	4633      	mov	r3, r6
 801767c:	f7e9 fa6c 	bl	8000b58 <__aeabi_dcmpgt>
 8017680:	2800      	cmp	r0, #0
 8017682:	f040 828b 	bne.w	8017b9c <_dtoa_r+0x93c>
 8017686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801768a:	462a      	mov	r2, r5
 801768c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017690:	f7e9 fa44 	bl	8000b1c <__aeabi_dcmplt>
 8017694:	2800      	cmp	r0, #0
 8017696:	f040 8128 	bne.w	80178ea <_dtoa_r+0x68a>
 801769a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801769e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80176a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f2c0 815a 	blt.w	801795e <_dtoa_r+0x6fe>
 80176aa:	2f0e      	cmp	r7, #14
 80176ac:	f300 8157 	bgt.w	801795e <_dtoa_r+0x6fe>
 80176b0:	4b5a      	ldr	r3, [pc, #360]	@ (801781c <_dtoa_r+0x5bc>)
 80176b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80176b6:	ed93 7b00 	vldr	d7, [r3]
 80176ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176bc:	2b00      	cmp	r3, #0
 80176be:	ed8d 7b00 	vstr	d7, [sp]
 80176c2:	da03      	bge.n	80176cc <_dtoa_r+0x46c>
 80176c4:	9b07      	ldr	r3, [sp, #28]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	f340 8101 	ble.w	80178ce <_dtoa_r+0x66e>
 80176cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80176d0:	4656      	mov	r6, sl
 80176d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176d6:	4620      	mov	r0, r4
 80176d8:	4629      	mov	r1, r5
 80176da:	f7e9 f8d7 	bl	800088c <__aeabi_ddiv>
 80176de:	f7e9 fa5b 	bl	8000b98 <__aeabi_d2iz>
 80176e2:	4680      	mov	r8, r0
 80176e4:	f7e8 ff3e 	bl	8000564 <__aeabi_i2d>
 80176e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176ec:	f7e8 ffa4 	bl	8000638 <__aeabi_dmul>
 80176f0:	4602      	mov	r2, r0
 80176f2:	460b      	mov	r3, r1
 80176f4:	4620      	mov	r0, r4
 80176f6:	4629      	mov	r1, r5
 80176f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80176fc:	f7e8 fde4 	bl	80002c8 <__aeabi_dsub>
 8017700:	f806 4b01 	strb.w	r4, [r6], #1
 8017704:	9d07      	ldr	r5, [sp, #28]
 8017706:	eba6 040a 	sub.w	r4, r6, sl
 801770a:	42a5      	cmp	r5, r4
 801770c:	4602      	mov	r2, r0
 801770e:	460b      	mov	r3, r1
 8017710:	f040 8117 	bne.w	8017942 <_dtoa_r+0x6e2>
 8017714:	f7e8 fdda 	bl	80002cc <__adddf3>
 8017718:	e9dd 2300 	ldrd	r2, r3, [sp]
 801771c:	4604      	mov	r4, r0
 801771e:	460d      	mov	r5, r1
 8017720:	f7e9 fa1a 	bl	8000b58 <__aeabi_dcmpgt>
 8017724:	2800      	cmp	r0, #0
 8017726:	f040 80f9 	bne.w	801791c <_dtoa_r+0x6bc>
 801772a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801772e:	4620      	mov	r0, r4
 8017730:	4629      	mov	r1, r5
 8017732:	f7e9 f9e9 	bl	8000b08 <__aeabi_dcmpeq>
 8017736:	b118      	cbz	r0, 8017740 <_dtoa_r+0x4e0>
 8017738:	f018 0f01 	tst.w	r8, #1
 801773c:	f040 80ee 	bne.w	801791c <_dtoa_r+0x6bc>
 8017740:	4649      	mov	r1, r9
 8017742:	4658      	mov	r0, fp
 8017744:	f000 fc90 	bl	8018068 <_Bfree>
 8017748:	2300      	movs	r3, #0
 801774a:	7033      	strb	r3, [r6, #0]
 801774c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801774e:	3701      	adds	r7, #1
 8017750:	601f      	str	r7, [r3, #0]
 8017752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017754:	2b00      	cmp	r3, #0
 8017756:	f000 831d 	beq.w	8017d94 <_dtoa_r+0xb34>
 801775a:	601e      	str	r6, [r3, #0]
 801775c:	e31a      	b.n	8017d94 <_dtoa_r+0xb34>
 801775e:	07e2      	lsls	r2, r4, #31
 8017760:	d505      	bpl.n	801776e <_dtoa_r+0x50e>
 8017762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017766:	f7e8 ff67 	bl	8000638 <__aeabi_dmul>
 801776a:	3601      	adds	r6, #1
 801776c:	2301      	movs	r3, #1
 801776e:	1064      	asrs	r4, r4, #1
 8017770:	3508      	adds	r5, #8
 8017772:	e73f      	b.n	80175f4 <_dtoa_r+0x394>
 8017774:	2602      	movs	r6, #2
 8017776:	e742      	b.n	80175fe <_dtoa_r+0x39e>
 8017778:	9c07      	ldr	r4, [sp, #28]
 801777a:	9704      	str	r7, [sp, #16]
 801777c:	e761      	b.n	8017642 <_dtoa_r+0x3e2>
 801777e:	4b27      	ldr	r3, [pc, #156]	@ (801781c <_dtoa_r+0x5bc>)
 8017780:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017782:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017786:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801778a:	4454      	add	r4, sl
 801778c:	2900      	cmp	r1, #0
 801778e:	d053      	beq.n	8017838 <_dtoa_r+0x5d8>
 8017790:	4928      	ldr	r1, [pc, #160]	@ (8017834 <_dtoa_r+0x5d4>)
 8017792:	2000      	movs	r0, #0
 8017794:	f7e9 f87a 	bl	800088c <__aeabi_ddiv>
 8017798:	4633      	mov	r3, r6
 801779a:	462a      	mov	r2, r5
 801779c:	f7e8 fd94 	bl	80002c8 <__aeabi_dsub>
 80177a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80177a4:	4656      	mov	r6, sl
 80177a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177aa:	f7e9 f9f5 	bl	8000b98 <__aeabi_d2iz>
 80177ae:	4605      	mov	r5, r0
 80177b0:	f7e8 fed8 	bl	8000564 <__aeabi_i2d>
 80177b4:	4602      	mov	r2, r0
 80177b6:	460b      	mov	r3, r1
 80177b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177bc:	f7e8 fd84 	bl	80002c8 <__aeabi_dsub>
 80177c0:	3530      	adds	r5, #48	@ 0x30
 80177c2:	4602      	mov	r2, r0
 80177c4:	460b      	mov	r3, r1
 80177c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80177ca:	f806 5b01 	strb.w	r5, [r6], #1
 80177ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80177d2:	f7e9 f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80177d6:	2800      	cmp	r0, #0
 80177d8:	d171      	bne.n	80178be <_dtoa_r+0x65e>
 80177da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177de:	4911      	ldr	r1, [pc, #68]	@ (8017824 <_dtoa_r+0x5c4>)
 80177e0:	2000      	movs	r0, #0
 80177e2:	f7e8 fd71 	bl	80002c8 <__aeabi_dsub>
 80177e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80177ea:	f7e9 f997 	bl	8000b1c <__aeabi_dcmplt>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	f040 8095 	bne.w	801791e <_dtoa_r+0x6be>
 80177f4:	42a6      	cmp	r6, r4
 80177f6:	f43f af50 	beq.w	801769a <_dtoa_r+0x43a>
 80177fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80177fe:	4b0a      	ldr	r3, [pc, #40]	@ (8017828 <_dtoa_r+0x5c8>)
 8017800:	2200      	movs	r2, #0
 8017802:	f7e8 ff19 	bl	8000638 <__aeabi_dmul>
 8017806:	4b08      	ldr	r3, [pc, #32]	@ (8017828 <_dtoa_r+0x5c8>)
 8017808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801780c:	2200      	movs	r2, #0
 801780e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017812:	f7e8 ff11 	bl	8000638 <__aeabi_dmul>
 8017816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801781a:	e7c4      	b.n	80177a6 <_dtoa_r+0x546>
 801781c:	0801ae10 	.word	0x0801ae10
 8017820:	0801ade8 	.word	0x0801ade8
 8017824:	3ff00000 	.word	0x3ff00000
 8017828:	40240000 	.word	0x40240000
 801782c:	401c0000 	.word	0x401c0000
 8017830:	40140000 	.word	0x40140000
 8017834:	3fe00000 	.word	0x3fe00000
 8017838:	4631      	mov	r1, r6
 801783a:	4628      	mov	r0, r5
 801783c:	f7e8 fefc 	bl	8000638 <__aeabi_dmul>
 8017840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017844:	9415      	str	r4, [sp, #84]	@ 0x54
 8017846:	4656      	mov	r6, sl
 8017848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801784c:	f7e9 f9a4 	bl	8000b98 <__aeabi_d2iz>
 8017850:	4605      	mov	r5, r0
 8017852:	f7e8 fe87 	bl	8000564 <__aeabi_i2d>
 8017856:	4602      	mov	r2, r0
 8017858:	460b      	mov	r3, r1
 801785a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801785e:	f7e8 fd33 	bl	80002c8 <__aeabi_dsub>
 8017862:	3530      	adds	r5, #48	@ 0x30
 8017864:	f806 5b01 	strb.w	r5, [r6], #1
 8017868:	4602      	mov	r2, r0
 801786a:	460b      	mov	r3, r1
 801786c:	42a6      	cmp	r6, r4
 801786e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017872:	f04f 0200 	mov.w	r2, #0
 8017876:	d124      	bne.n	80178c2 <_dtoa_r+0x662>
 8017878:	4bac      	ldr	r3, [pc, #688]	@ (8017b2c <_dtoa_r+0x8cc>)
 801787a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801787e:	f7e8 fd25 	bl	80002cc <__adddf3>
 8017882:	4602      	mov	r2, r0
 8017884:	460b      	mov	r3, r1
 8017886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801788a:	f7e9 f965 	bl	8000b58 <__aeabi_dcmpgt>
 801788e:	2800      	cmp	r0, #0
 8017890:	d145      	bne.n	801791e <_dtoa_r+0x6be>
 8017892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017896:	49a5      	ldr	r1, [pc, #660]	@ (8017b2c <_dtoa_r+0x8cc>)
 8017898:	2000      	movs	r0, #0
 801789a:	f7e8 fd15 	bl	80002c8 <__aeabi_dsub>
 801789e:	4602      	mov	r2, r0
 80178a0:	460b      	mov	r3, r1
 80178a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178a6:	f7e9 f939 	bl	8000b1c <__aeabi_dcmplt>
 80178aa:	2800      	cmp	r0, #0
 80178ac:	f43f aef5 	beq.w	801769a <_dtoa_r+0x43a>
 80178b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80178b2:	1e73      	subs	r3, r6, #1
 80178b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80178b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80178ba:	2b30      	cmp	r3, #48	@ 0x30
 80178bc:	d0f8      	beq.n	80178b0 <_dtoa_r+0x650>
 80178be:	9f04      	ldr	r7, [sp, #16]
 80178c0:	e73e      	b.n	8017740 <_dtoa_r+0x4e0>
 80178c2:	4b9b      	ldr	r3, [pc, #620]	@ (8017b30 <_dtoa_r+0x8d0>)
 80178c4:	f7e8 feb8 	bl	8000638 <__aeabi_dmul>
 80178c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178cc:	e7bc      	b.n	8017848 <_dtoa_r+0x5e8>
 80178ce:	d10c      	bne.n	80178ea <_dtoa_r+0x68a>
 80178d0:	4b98      	ldr	r3, [pc, #608]	@ (8017b34 <_dtoa_r+0x8d4>)
 80178d2:	2200      	movs	r2, #0
 80178d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178d8:	f7e8 feae 	bl	8000638 <__aeabi_dmul>
 80178dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80178e0:	f7e9 f930 	bl	8000b44 <__aeabi_dcmpge>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	f000 8157 	beq.w	8017b98 <_dtoa_r+0x938>
 80178ea:	2400      	movs	r4, #0
 80178ec:	4625      	mov	r5, r4
 80178ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178f0:	43db      	mvns	r3, r3
 80178f2:	9304      	str	r3, [sp, #16]
 80178f4:	4656      	mov	r6, sl
 80178f6:	2700      	movs	r7, #0
 80178f8:	4621      	mov	r1, r4
 80178fa:	4658      	mov	r0, fp
 80178fc:	f000 fbb4 	bl	8018068 <_Bfree>
 8017900:	2d00      	cmp	r5, #0
 8017902:	d0dc      	beq.n	80178be <_dtoa_r+0x65e>
 8017904:	b12f      	cbz	r7, 8017912 <_dtoa_r+0x6b2>
 8017906:	42af      	cmp	r7, r5
 8017908:	d003      	beq.n	8017912 <_dtoa_r+0x6b2>
 801790a:	4639      	mov	r1, r7
 801790c:	4658      	mov	r0, fp
 801790e:	f000 fbab 	bl	8018068 <_Bfree>
 8017912:	4629      	mov	r1, r5
 8017914:	4658      	mov	r0, fp
 8017916:	f000 fba7 	bl	8018068 <_Bfree>
 801791a:	e7d0      	b.n	80178be <_dtoa_r+0x65e>
 801791c:	9704      	str	r7, [sp, #16]
 801791e:	4633      	mov	r3, r6
 8017920:	461e      	mov	r6, r3
 8017922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017926:	2a39      	cmp	r2, #57	@ 0x39
 8017928:	d107      	bne.n	801793a <_dtoa_r+0x6da>
 801792a:	459a      	cmp	sl, r3
 801792c:	d1f8      	bne.n	8017920 <_dtoa_r+0x6c0>
 801792e:	9a04      	ldr	r2, [sp, #16]
 8017930:	3201      	adds	r2, #1
 8017932:	9204      	str	r2, [sp, #16]
 8017934:	2230      	movs	r2, #48	@ 0x30
 8017936:	f88a 2000 	strb.w	r2, [sl]
 801793a:	781a      	ldrb	r2, [r3, #0]
 801793c:	3201      	adds	r2, #1
 801793e:	701a      	strb	r2, [r3, #0]
 8017940:	e7bd      	b.n	80178be <_dtoa_r+0x65e>
 8017942:	4b7b      	ldr	r3, [pc, #492]	@ (8017b30 <_dtoa_r+0x8d0>)
 8017944:	2200      	movs	r2, #0
 8017946:	f7e8 fe77 	bl	8000638 <__aeabi_dmul>
 801794a:	2200      	movs	r2, #0
 801794c:	2300      	movs	r3, #0
 801794e:	4604      	mov	r4, r0
 8017950:	460d      	mov	r5, r1
 8017952:	f7e9 f8d9 	bl	8000b08 <__aeabi_dcmpeq>
 8017956:	2800      	cmp	r0, #0
 8017958:	f43f aebb 	beq.w	80176d2 <_dtoa_r+0x472>
 801795c:	e6f0      	b.n	8017740 <_dtoa_r+0x4e0>
 801795e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017960:	2a00      	cmp	r2, #0
 8017962:	f000 80db 	beq.w	8017b1c <_dtoa_r+0x8bc>
 8017966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017968:	2a01      	cmp	r2, #1
 801796a:	f300 80bf 	bgt.w	8017aec <_dtoa_r+0x88c>
 801796e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017970:	2a00      	cmp	r2, #0
 8017972:	f000 80b7 	beq.w	8017ae4 <_dtoa_r+0x884>
 8017976:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801797a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801797c:	4646      	mov	r6, r8
 801797e:	9a08      	ldr	r2, [sp, #32]
 8017980:	2101      	movs	r1, #1
 8017982:	441a      	add	r2, r3
 8017984:	4658      	mov	r0, fp
 8017986:	4498      	add	r8, r3
 8017988:	9208      	str	r2, [sp, #32]
 801798a:	f000 fc21 	bl	80181d0 <__i2b>
 801798e:	4605      	mov	r5, r0
 8017990:	b15e      	cbz	r6, 80179aa <_dtoa_r+0x74a>
 8017992:	9b08      	ldr	r3, [sp, #32]
 8017994:	2b00      	cmp	r3, #0
 8017996:	dd08      	ble.n	80179aa <_dtoa_r+0x74a>
 8017998:	42b3      	cmp	r3, r6
 801799a:	9a08      	ldr	r2, [sp, #32]
 801799c:	bfa8      	it	ge
 801799e:	4633      	movge	r3, r6
 80179a0:	eba8 0803 	sub.w	r8, r8, r3
 80179a4:	1af6      	subs	r6, r6, r3
 80179a6:	1ad3      	subs	r3, r2, r3
 80179a8:	9308      	str	r3, [sp, #32]
 80179aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80179ac:	b1f3      	cbz	r3, 80179ec <_dtoa_r+0x78c>
 80179ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	f000 80b7 	beq.w	8017b24 <_dtoa_r+0x8c4>
 80179b6:	b18c      	cbz	r4, 80179dc <_dtoa_r+0x77c>
 80179b8:	4629      	mov	r1, r5
 80179ba:	4622      	mov	r2, r4
 80179bc:	4658      	mov	r0, fp
 80179be:	f000 fcc7 	bl	8018350 <__pow5mult>
 80179c2:	464a      	mov	r2, r9
 80179c4:	4601      	mov	r1, r0
 80179c6:	4605      	mov	r5, r0
 80179c8:	4658      	mov	r0, fp
 80179ca:	f000 fc17 	bl	80181fc <__multiply>
 80179ce:	4649      	mov	r1, r9
 80179d0:	9004      	str	r0, [sp, #16]
 80179d2:	4658      	mov	r0, fp
 80179d4:	f000 fb48 	bl	8018068 <_Bfree>
 80179d8:	9b04      	ldr	r3, [sp, #16]
 80179da:	4699      	mov	r9, r3
 80179dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80179de:	1b1a      	subs	r2, r3, r4
 80179e0:	d004      	beq.n	80179ec <_dtoa_r+0x78c>
 80179e2:	4649      	mov	r1, r9
 80179e4:	4658      	mov	r0, fp
 80179e6:	f000 fcb3 	bl	8018350 <__pow5mult>
 80179ea:	4681      	mov	r9, r0
 80179ec:	2101      	movs	r1, #1
 80179ee:	4658      	mov	r0, fp
 80179f0:	f000 fbee 	bl	80181d0 <__i2b>
 80179f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179f6:	4604      	mov	r4, r0
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	f000 81cf 	beq.w	8017d9c <_dtoa_r+0xb3c>
 80179fe:	461a      	mov	r2, r3
 8017a00:	4601      	mov	r1, r0
 8017a02:	4658      	mov	r0, fp
 8017a04:	f000 fca4 	bl	8018350 <__pow5mult>
 8017a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	f300 8095 	bgt.w	8017b3c <_dtoa_r+0x8dc>
 8017a12:	9b02      	ldr	r3, [sp, #8]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	f040 8087 	bne.w	8017b28 <_dtoa_r+0x8c8>
 8017a1a:	9b03      	ldr	r3, [sp, #12]
 8017a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	f040 8089 	bne.w	8017b38 <_dtoa_r+0x8d8>
 8017a26:	9b03      	ldr	r3, [sp, #12]
 8017a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017a2c:	0d1b      	lsrs	r3, r3, #20
 8017a2e:	051b      	lsls	r3, r3, #20
 8017a30:	b12b      	cbz	r3, 8017a3e <_dtoa_r+0x7de>
 8017a32:	9b08      	ldr	r3, [sp, #32]
 8017a34:	3301      	adds	r3, #1
 8017a36:	9308      	str	r3, [sp, #32]
 8017a38:	f108 0801 	add.w	r8, r8, #1
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	f000 81b0 	beq.w	8017da8 <_dtoa_r+0xb48>
 8017a48:	6923      	ldr	r3, [r4, #16]
 8017a4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017a4e:	6918      	ldr	r0, [r3, #16]
 8017a50:	f000 fb72 	bl	8018138 <__hi0bits>
 8017a54:	f1c0 0020 	rsb	r0, r0, #32
 8017a58:	9b08      	ldr	r3, [sp, #32]
 8017a5a:	4418      	add	r0, r3
 8017a5c:	f010 001f 	ands.w	r0, r0, #31
 8017a60:	d077      	beq.n	8017b52 <_dtoa_r+0x8f2>
 8017a62:	f1c0 0320 	rsb	r3, r0, #32
 8017a66:	2b04      	cmp	r3, #4
 8017a68:	dd6b      	ble.n	8017b42 <_dtoa_r+0x8e2>
 8017a6a:	9b08      	ldr	r3, [sp, #32]
 8017a6c:	f1c0 001c 	rsb	r0, r0, #28
 8017a70:	4403      	add	r3, r0
 8017a72:	4480      	add	r8, r0
 8017a74:	4406      	add	r6, r0
 8017a76:	9308      	str	r3, [sp, #32]
 8017a78:	f1b8 0f00 	cmp.w	r8, #0
 8017a7c:	dd05      	ble.n	8017a8a <_dtoa_r+0x82a>
 8017a7e:	4649      	mov	r1, r9
 8017a80:	4642      	mov	r2, r8
 8017a82:	4658      	mov	r0, fp
 8017a84:	f000 fcbe 	bl	8018404 <__lshift>
 8017a88:	4681      	mov	r9, r0
 8017a8a:	9b08      	ldr	r3, [sp, #32]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	dd05      	ble.n	8017a9c <_dtoa_r+0x83c>
 8017a90:	4621      	mov	r1, r4
 8017a92:	461a      	mov	r2, r3
 8017a94:	4658      	mov	r0, fp
 8017a96:	f000 fcb5 	bl	8018404 <__lshift>
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d059      	beq.n	8017b56 <_dtoa_r+0x8f6>
 8017aa2:	4621      	mov	r1, r4
 8017aa4:	4648      	mov	r0, r9
 8017aa6:	f000 fd19 	bl	80184dc <__mcmp>
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	da53      	bge.n	8017b56 <_dtoa_r+0x8f6>
 8017aae:	1e7b      	subs	r3, r7, #1
 8017ab0:	9304      	str	r3, [sp, #16]
 8017ab2:	4649      	mov	r1, r9
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	220a      	movs	r2, #10
 8017ab8:	4658      	mov	r0, fp
 8017aba:	f000 faf7 	bl	80180ac <__multadd>
 8017abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ac0:	4681      	mov	r9, r0
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	f000 8172 	beq.w	8017dac <_dtoa_r+0xb4c>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	4629      	mov	r1, r5
 8017acc:	220a      	movs	r2, #10
 8017ace:	4658      	mov	r0, fp
 8017ad0:	f000 faec 	bl	80180ac <__multadd>
 8017ad4:	9b00      	ldr	r3, [sp, #0]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	4605      	mov	r5, r0
 8017ada:	dc67      	bgt.n	8017bac <_dtoa_r+0x94c>
 8017adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ade:	2b02      	cmp	r3, #2
 8017ae0:	dc41      	bgt.n	8017b66 <_dtoa_r+0x906>
 8017ae2:	e063      	b.n	8017bac <_dtoa_r+0x94c>
 8017ae4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017ae6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017aea:	e746      	b.n	801797a <_dtoa_r+0x71a>
 8017aec:	9b07      	ldr	r3, [sp, #28]
 8017aee:	1e5c      	subs	r4, r3, #1
 8017af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017af2:	42a3      	cmp	r3, r4
 8017af4:	bfbf      	itttt	lt
 8017af6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017af8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017afa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017afc:	1ae3      	sublt	r3, r4, r3
 8017afe:	bfb4      	ite	lt
 8017b00:	18d2      	addlt	r2, r2, r3
 8017b02:	1b1c      	subge	r4, r3, r4
 8017b04:	9b07      	ldr	r3, [sp, #28]
 8017b06:	bfbc      	itt	lt
 8017b08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017b0a:	2400      	movlt	r4, #0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	bfb5      	itete	lt
 8017b10:	eba8 0603 	sublt.w	r6, r8, r3
 8017b14:	9b07      	ldrge	r3, [sp, #28]
 8017b16:	2300      	movlt	r3, #0
 8017b18:	4646      	movge	r6, r8
 8017b1a:	e730      	b.n	801797e <_dtoa_r+0x71e>
 8017b1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017b1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017b20:	4646      	mov	r6, r8
 8017b22:	e735      	b.n	8017990 <_dtoa_r+0x730>
 8017b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b26:	e75c      	b.n	80179e2 <_dtoa_r+0x782>
 8017b28:	2300      	movs	r3, #0
 8017b2a:	e788      	b.n	8017a3e <_dtoa_r+0x7de>
 8017b2c:	3fe00000 	.word	0x3fe00000
 8017b30:	40240000 	.word	0x40240000
 8017b34:	40140000 	.word	0x40140000
 8017b38:	9b02      	ldr	r3, [sp, #8]
 8017b3a:	e780      	b.n	8017a3e <_dtoa_r+0x7de>
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017b40:	e782      	b.n	8017a48 <_dtoa_r+0x7e8>
 8017b42:	d099      	beq.n	8017a78 <_dtoa_r+0x818>
 8017b44:	9a08      	ldr	r2, [sp, #32]
 8017b46:	331c      	adds	r3, #28
 8017b48:	441a      	add	r2, r3
 8017b4a:	4498      	add	r8, r3
 8017b4c:	441e      	add	r6, r3
 8017b4e:	9208      	str	r2, [sp, #32]
 8017b50:	e792      	b.n	8017a78 <_dtoa_r+0x818>
 8017b52:	4603      	mov	r3, r0
 8017b54:	e7f6      	b.n	8017b44 <_dtoa_r+0x8e4>
 8017b56:	9b07      	ldr	r3, [sp, #28]
 8017b58:	9704      	str	r7, [sp, #16]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	dc20      	bgt.n	8017ba0 <_dtoa_r+0x940>
 8017b5e:	9300      	str	r3, [sp, #0]
 8017b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b62:	2b02      	cmp	r3, #2
 8017b64:	dd1e      	ble.n	8017ba4 <_dtoa_r+0x944>
 8017b66:	9b00      	ldr	r3, [sp, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	f47f aec0 	bne.w	80178ee <_dtoa_r+0x68e>
 8017b6e:	4621      	mov	r1, r4
 8017b70:	2205      	movs	r2, #5
 8017b72:	4658      	mov	r0, fp
 8017b74:	f000 fa9a 	bl	80180ac <__multadd>
 8017b78:	4601      	mov	r1, r0
 8017b7a:	4604      	mov	r4, r0
 8017b7c:	4648      	mov	r0, r9
 8017b7e:	f000 fcad 	bl	80184dc <__mcmp>
 8017b82:	2800      	cmp	r0, #0
 8017b84:	f77f aeb3 	ble.w	80178ee <_dtoa_r+0x68e>
 8017b88:	4656      	mov	r6, sl
 8017b8a:	2331      	movs	r3, #49	@ 0x31
 8017b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8017b90:	9b04      	ldr	r3, [sp, #16]
 8017b92:	3301      	adds	r3, #1
 8017b94:	9304      	str	r3, [sp, #16]
 8017b96:	e6ae      	b.n	80178f6 <_dtoa_r+0x696>
 8017b98:	9c07      	ldr	r4, [sp, #28]
 8017b9a:	9704      	str	r7, [sp, #16]
 8017b9c:	4625      	mov	r5, r4
 8017b9e:	e7f3      	b.n	8017b88 <_dtoa_r+0x928>
 8017ba0:	9b07      	ldr	r3, [sp, #28]
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	f000 8104 	beq.w	8017db4 <_dtoa_r+0xb54>
 8017bac:	2e00      	cmp	r6, #0
 8017bae:	dd05      	ble.n	8017bbc <_dtoa_r+0x95c>
 8017bb0:	4629      	mov	r1, r5
 8017bb2:	4632      	mov	r2, r6
 8017bb4:	4658      	mov	r0, fp
 8017bb6:	f000 fc25 	bl	8018404 <__lshift>
 8017bba:	4605      	mov	r5, r0
 8017bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d05a      	beq.n	8017c78 <_dtoa_r+0xa18>
 8017bc2:	6869      	ldr	r1, [r5, #4]
 8017bc4:	4658      	mov	r0, fp
 8017bc6:	f000 fa0f 	bl	8017fe8 <_Balloc>
 8017bca:	4606      	mov	r6, r0
 8017bcc:	b928      	cbnz	r0, 8017bda <_dtoa_r+0x97a>
 8017bce:	4b84      	ldr	r3, [pc, #528]	@ (8017de0 <_dtoa_r+0xb80>)
 8017bd0:	4602      	mov	r2, r0
 8017bd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017bd6:	f7ff bb5a 	b.w	801728e <_dtoa_r+0x2e>
 8017bda:	692a      	ldr	r2, [r5, #16]
 8017bdc:	3202      	adds	r2, #2
 8017bde:	0092      	lsls	r2, r2, #2
 8017be0:	f105 010c 	add.w	r1, r5, #12
 8017be4:	300c      	adds	r0, #12
 8017be6:	f7ff faa2 	bl	801712e <memcpy>
 8017bea:	2201      	movs	r2, #1
 8017bec:	4631      	mov	r1, r6
 8017bee:	4658      	mov	r0, fp
 8017bf0:	f000 fc08 	bl	8018404 <__lshift>
 8017bf4:	f10a 0301 	add.w	r3, sl, #1
 8017bf8:	9307      	str	r3, [sp, #28]
 8017bfa:	9b00      	ldr	r3, [sp, #0]
 8017bfc:	4453      	add	r3, sl
 8017bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c00:	9b02      	ldr	r3, [sp, #8]
 8017c02:	f003 0301 	and.w	r3, r3, #1
 8017c06:	462f      	mov	r7, r5
 8017c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c0a:	4605      	mov	r5, r0
 8017c0c:	9b07      	ldr	r3, [sp, #28]
 8017c0e:	4621      	mov	r1, r4
 8017c10:	3b01      	subs	r3, #1
 8017c12:	4648      	mov	r0, r9
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	f7ff fa98 	bl	801714a <quorem>
 8017c1a:	4639      	mov	r1, r7
 8017c1c:	9002      	str	r0, [sp, #8]
 8017c1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017c22:	4648      	mov	r0, r9
 8017c24:	f000 fc5a 	bl	80184dc <__mcmp>
 8017c28:	462a      	mov	r2, r5
 8017c2a:	9008      	str	r0, [sp, #32]
 8017c2c:	4621      	mov	r1, r4
 8017c2e:	4658      	mov	r0, fp
 8017c30:	f000 fc70 	bl	8018514 <__mdiff>
 8017c34:	68c2      	ldr	r2, [r0, #12]
 8017c36:	4606      	mov	r6, r0
 8017c38:	bb02      	cbnz	r2, 8017c7c <_dtoa_r+0xa1c>
 8017c3a:	4601      	mov	r1, r0
 8017c3c:	4648      	mov	r0, r9
 8017c3e:	f000 fc4d 	bl	80184dc <__mcmp>
 8017c42:	4602      	mov	r2, r0
 8017c44:	4631      	mov	r1, r6
 8017c46:	4658      	mov	r0, fp
 8017c48:	920e      	str	r2, [sp, #56]	@ 0x38
 8017c4a:	f000 fa0d 	bl	8018068 <_Bfree>
 8017c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c52:	9e07      	ldr	r6, [sp, #28]
 8017c54:	ea43 0102 	orr.w	r1, r3, r2
 8017c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c5a:	4319      	orrs	r1, r3
 8017c5c:	d110      	bne.n	8017c80 <_dtoa_r+0xa20>
 8017c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017c62:	d029      	beq.n	8017cb8 <_dtoa_r+0xa58>
 8017c64:	9b08      	ldr	r3, [sp, #32]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	dd02      	ble.n	8017c70 <_dtoa_r+0xa10>
 8017c6a:	9b02      	ldr	r3, [sp, #8]
 8017c6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017c70:	9b00      	ldr	r3, [sp, #0]
 8017c72:	f883 8000 	strb.w	r8, [r3]
 8017c76:	e63f      	b.n	80178f8 <_dtoa_r+0x698>
 8017c78:	4628      	mov	r0, r5
 8017c7a:	e7bb      	b.n	8017bf4 <_dtoa_r+0x994>
 8017c7c:	2201      	movs	r2, #1
 8017c7e:	e7e1      	b.n	8017c44 <_dtoa_r+0x9e4>
 8017c80:	9b08      	ldr	r3, [sp, #32]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	db04      	blt.n	8017c90 <_dtoa_r+0xa30>
 8017c86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017c88:	430b      	orrs	r3, r1
 8017c8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017c8c:	430b      	orrs	r3, r1
 8017c8e:	d120      	bne.n	8017cd2 <_dtoa_r+0xa72>
 8017c90:	2a00      	cmp	r2, #0
 8017c92:	dded      	ble.n	8017c70 <_dtoa_r+0xa10>
 8017c94:	4649      	mov	r1, r9
 8017c96:	2201      	movs	r2, #1
 8017c98:	4658      	mov	r0, fp
 8017c9a:	f000 fbb3 	bl	8018404 <__lshift>
 8017c9e:	4621      	mov	r1, r4
 8017ca0:	4681      	mov	r9, r0
 8017ca2:	f000 fc1b 	bl	80184dc <__mcmp>
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	dc03      	bgt.n	8017cb2 <_dtoa_r+0xa52>
 8017caa:	d1e1      	bne.n	8017c70 <_dtoa_r+0xa10>
 8017cac:	f018 0f01 	tst.w	r8, #1
 8017cb0:	d0de      	beq.n	8017c70 <_dtoa_r+0xa10>
 8017cb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017cb6:	d1d8      	bne.n	8017c6a <_dtoa_r+0xa0a>
 8017cb8:	9a00      	ldr	r2, [sp, #0]
 8017cba:	2339      	movs	r3, #57	@ 0x39
 8017cbc:	7013      	strb	r3, [r2, #0]
 8017cbe:	4633      	mov	r3, r6
 8017cc0:	461e      	mov	r6, r3
 8017cc2:	3b01      	subs	r3, #1
 8017cc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017cc8:	2a39      	cmp	r2, #57	@ 0x39
 8017cca:	d052      	beq.n	8017d72 <_dtoa_r+0xb12>
 8017ccc:	3201      	adds	r2, #1
 8017cce:	701a      	strb	r2, [r3, #0]
 8017cd0:	e612      	b.n	80178f8 <_dtoa_r+0x698>
 8017cd2:	2a00      	cmp	r2, #0
 8017cd4:	dd07      	ble.n	8017ce6 <_dtoa_r+0xa86>
 8017cd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017cda:	d0ed      	beq.n	8017cb8 <_dtoa_r+0xa58>
 8017cdc:	9a00      	ldr	r2, [sp, #0]
 8017cde:	f108 0301 	add.w	r3, r8, #1
 8017ce2:	7013      	strb	r3, [r2, #0]
 8017ce4:	e608      	b.n	80178f8 <_dtoa_r+0x698>
 8017ce6:	9b07      	ldr	r3, [sp, #28]
 8017ce8:	9a07      	ldr	r2, [sp, #28]
 8017cea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8017cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d028      	beq.n	8017d46 <_dtoa_r+0xae6>
 8017cf4:	4649      	mov	r1, r9
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	220a      	movs	r2, #10
 8017cfa:	4658      	mov	r0, fp
 8017cfc:	f000 f9d6 	bl	80180ac <__multadd>
 8017d00:	42af      	cmp	r7, r5
 8017d02:	4681      	mov	r9, r0
 8017d04:	f04f 0300 	mov.w	r3, #0
 8017d08:	f04f 020a 	mov.w	r2, #10
 8017d0c:	4639      	mov	r1, r7
 8017d0e:	4658      	mov	r0, fp
 8017d10:	d107      	bne.n	8017d22 <_dtoa_r+0xac2>
 8017d12:	f000 f9cb 	bl	80180ac <__multadd>
 8017d16:	4607      	mov	r7, r0
 8017d18:	4605      	mov	r5, r0
 8017d1a:	9b07      	ldr	r3, [sp, #28]
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	9307      	str	r3, [sp, #28]
 8017d20:	e774      	b.n	8017c0c <_dtoa_r+0x9ac>
 8017d22:	f000 f9c3 	bl	80180ac <__multadd>
 8017d26:	4629      	mov	r1, r5
 8017d28:	4607      	mov	r7, r0
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	220a      	movs	r2, #10
 8017d2e:	4658      	mov	r0, fp
 8017d30:	f000 f9bc 	bl	80180ac <__multadd>
 8017d34:	4605      	mov	r5, r0
 8017d36:	e7f0      	b.n	8017d1a <_dtoa_r+0xaba>
 8017d38:	9b00      	ldr	r3, [sp, #0]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	bfcc      	ite	gt
 8017d3e:	461e      	movgt	r6, r3
 8017d40:	2601      	movle	r6, #1
 8017d42:	4456      	add	r6, sl
 8017d44:	2700      	movs	r7, #0
 8017d46:	4649      	mov	r1, r9
 8017d48:	2201      	movs	r2, #1
 8017d4a:	4658      	mov	r0, fp
 8017d4c:	f000 fb5a 	bl	8018404 <__lshift>
 8017d50:	4621      	mov	r1, r4
 8017d52:	4681      	mov	r9, r0
 8017d54:	f000 fbc2 	bl	80184dc <__mcmp>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	dcb0      	bgt.n	8017cbe <_dtoa_r+0xa5e>
 8017d5c:	d102      	bne.n	8017d64 <_dtoa_r+0xb04>
 8017d5e:	f018 0f01 	tst.w	r8, #1
 8017d62:	d1ac      	bne.n	8017cbe <_dtoa_r+0xa5e>
 8017d64:	4633      	mov	r3, r6
 8017d66:	461e      	mov	r6, r3
 8017d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017d6c:	2a30      	cmp	r2, #48	@ 0x30
 8017d6e:	d0fa      	beq.n	8017d66 <_dtoa_r+0xb06>
 8017d70:	e5c2      	b.n	80178f8 <_dtoa_r+0x698>
 8017d72:	459a      	cmp	sl, r3
 8017d74:	d1a4      	bne.n	8017cc0 <_dtoa_r+0xa60>
 8017d76:	9b04      	ldr	r3, [sp, #16]
 8017d78:	3301      	adds	r3, #1
 8017d7a:	9304      	str	r3, [sp, #16]
 8017d7c:	2331      	movs	r3, #49	@ 0x31
 8017d7e:	f88a 3000 	strb.w	r3, [sl]
 8017d82:	e5b9      	b.n	80178f8 <_dtoa_r+0x698>
 8017d84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017d86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8017de4 <_dtoa_r+0xb84>
 8017d8a:	b11b      	cbz	r3, 8017d94 <_dtoa_r+0xb34>
 8017d8c:	f10a 0308 	add.w	r3, sl, #8
 8017d90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017d92:	6013      	str	r3, [r2, #0]
 8017d94:	4650      	mov	r0, sl
 8017d96:	b019      	add	sp, #100	@ 0x64
 8017d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d9e:	2b01      	cmp	r3, #1
 8017da0:	f77f ae37 	ble.w	8017a12 <_dtoa_r+0x7b2>
 8017da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017da8:	2001      	movs	r0, #1
 8017daa:	e655      	b.n	8017a58 <_dtoa_r+0x7f8>
 8017dac:	9b00      	ldr	r3, [sp, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	f77f aed6 	ble.w	8017b60 <_dtoa_r+0x900>
 8017db4:	4656      	mov	r6, sl
 8017db6:	4621      	mov	r1, r4
 8017db8:	4648      	mov	r0, r9
 8017dba:	f7ff f9c6 	bl	801714a <quorem>
 8017dbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017dc2:	f806 8b01 	strb.w	r8, [r6], #1
 8017dc6:	9b00      	ldr	r3, [sp, #0]
 8017dc8:	eba6 020a 	sub.w	r2, r6, sl
 8017dcc:	4293      	cmp	r3, r2
 8017dce:	ddb3      	ble.n	8017d38 <_dtoa_r+0xad8>
 8017dd0:	4649      	mov	r1, r9
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	220a      	movs	r2, #10
 8017dd6:	4658      	mov	r0, fp
 8017dd8:	f000 f968 	bl	80180ac <__multadd>
 8017ddc:	4681      	mov	r9, r0
 8017dde:	e7ea      	b.n	8017db6 <_dtoa_r+0xb56>
 8017de0:	0801ad6d 	.word	0x0801ad6d
 8017de4:	0801acf1 	.word	0x0801acf1

08017de8 <_free_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4605      	mov	r5, r0
 8017dec:	2900      	cmp	r1, #0
 8017dee:	d041      	beq.n	8017e74 <_free_r+0x8c>
 8017df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017df4:	1f0c      	subs	r4, r1, #4
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	bfb8      	it	lt
 8017dfa:	18e4      	addlt	r4, r4, r3
 8017dfc:	f000 f8e8 	bl	8017fd0 <__malloc_lock>
 8017e00:	4a1d      	ldr	r2, [pc, #116]	@ (8017e78 <_free_r+0x90>)
 8017e02:	6813      	ldr	r3, [r2, #0]
 8017e04:	b933      	cbnz	r3, 8017e14 <_free_r+0x2c>
 8017e06:	6063      	str	r3, [r4, #4]
 8017e08:	6014      	str	r4, [r2, #0]
 8017e0a:	4628      	mov	r0, r5
 8017e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e10:	f000 b8e4 	b.w	8017fdc <__malloc_unlock>
 8017e14:	42a3      	cmp	r3, r4
 8017e16:	d908      	bls.n	8017e2a <_free_r+0x42>
 8017e18:	6820      	ldr	r0, [r4, #0]
 8017e1a:	1821      	adds	r1, r4, r0
 8017e1c:	428b      	cmp	r3, r1
 8017e1e:	bf01      	itttt	eq
 8017e20:	6819      	ldreq	r1, [r3, #0]
 8017e22:	685b      	ldreq	r3, [r3, #4]
 8017e24:	1809      	addeq	r1, r1, r0
 8017e26:	6021      	streq	r1, [r4, #0]
 8017e28:	e7ed      	b.n	8017e06 <_free_r+0x1e>
 8017e2a:	461a      	mov	r2, r3
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	b10b      	cbz	r3, 8017e34 <_free_r+0x4c>
 8017e30:	42a3      	cmp	r3, r4
 8017e32:	d9fa      	bls.n	8017e2a <_free_r+0x42>
 8017e34:	6811      	ldr	r1, [r2, #0]
 8017e36:	1850      	adds	r0, r2, r1
 8017e38:	42a0      	cmp	r0, r4
 8017e3a:	d10b      	bne.n	8017e54 <_free_r+0x6c>
 8017e3c:	6820      	ldr	r0, [r4, #0]
 8017e3e:	4401      	add	r1, r0
 8017e40:	1850      	adds	r0, r2, r1
 8017e42:	4283      	cmp	r3, r0
 8017e44:	6011      	str	r1, [r2, #0]
 8017e46:	d1e0      	bne.n	8017e0a <_free_r+0x22>
 8017e48:	6818      	ldr	r0, [r3, #0]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	6053      	str	r3, [r2, #4]
 8017e4e:	4408      	add	r0, r1
 8017e50:	6010      	str	r0, [r2, #0]
 8017e52:	e7da      	b.n	8017e0a <_free_r+0x22>
 8017e54:	d902      	bls.n	8017e5c <_free_r+0x74>
 8017e56:	230c      	movs	r3, #12
 8017e58:	602b      	str	r3, [r5, #0]
 8017e5a:	e7d6      	b.n	8017e0a <_free_r+0x22>
 8017e5c:	6820      	ldr	r0, [r4, #0]
 8017e5e:	1821      	adds	r1, r4, r0
 8017e60:	428b      	cmp	r3, r1
 8017e62:	bf04      	itt	eq
 8017e64:	6819      	ldreq	r1, [r3, #0]
 8017e66:	685b      	ldreq	r3, [r3, #4]
 8017e68:	6063      	str	r3, [r4, #4]
 8017e6a:	bf04      	itt	eq
 8017e6c:	1809      	addeq	r1, r1, r0
 8017e6e:	6021      	streq	r1, [r4, #0]
 8017e70:	6054      	str	r4, [r2, #4]
 8017e72:	e7ca      	b.n	8017e0a <_free_r+0x22>
 8017e74:	bd38      	pop	{r3, r4, r5, pc}
 8017e76:	bf00      	nop
 8017e78:	20009544 	.word	0x20009544

08017e7c <malloc>:
 8017e7c:	4b02      	ldr	r3, [pc, #8]	@ (8017e88 <malloc+0xc>)
 8017e7e:	4601      	mov	r1, r0
 8017e80:	6818      	ldr	r0, [r3, #0]
 8017e82:	f000 b825 	b.w	8017ed0 <_malloc_r>
 8017e86:	bf00      	nop
 8017e88:	20001204 	.word	0x20001204

08017e8c <sbrk_aligned>:
 8017e8c:	b570      	push	{r4, r5, r6, lr}
 8017e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8017ecc <sbrk_aligned+0x40>)
 8017e90:	460c      	mov	r4, r1
 8017e92:	6831      	ldr	r1, [r6, #0]
 8017e94:	4605      	mov	r5, r0
 8017e96:	b911      	cbnz	r1, 8017e9e <sbrk_aligned+0x12>
 8017e98:	f000 fe46 	bl	8018b28 <_sbrk_r>
 8017e9c:	6030      	str	r0, [r6, #0]
 8017e9e:	4621      	mov	r1, r4
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	f000 fe41 	bl	8018b28 <_sbrk_r>
 8017ea6:	1c43      	adds	r3, r0, #1
 8017ea8:	d103      	bne.n	8017eb2 <sbrk_aligned+0x26>
 8017eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8017eae:	4620      	mov	r0, r4
 8017eb0:	bd70      	pop	{r4, r5, r6, pc}
 8017eb2:	1cc4      	adds	r4, r0, #3
 8017eb4:	f024 0403 	bic.w	r4, r4, #3
 8017eb8:	42a0      	cmp	r0, r4
 8017eba:	d0f8      	beq.n	8017eae <sbrk_aligned+0x22>
 8017ebc:	1a21      	subs	r1, r4, r0
 8017ebe:	4628      	mov	r0, r5
 8017ec0:	f000 fe32 	bl	8018b28 <_sbrk_r>
 8017ec4:	3001      	adds	r0, #1
 8017ec6:	d1f2      	bne.n	8017eae <sbrk_aligned+0x22>
 8017ec8:	e7ef      	b.n	8017eaa <sbrk_aligned+0x1e>
 8017eca:	bf00      	nop
 8017ecc:	20009540 	.word	0x20009540

08017ed0 <_malloc_r>:
 8017ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ed4:	1ccd      	adds	r5, r1, #3
 8017ed6:	f025 0503 	bic.w	r5, r5, #3
 8017eda:	3508      	adds	r5, #8
 8017edc:	2d0c      	cmp	r5, #12
 8017ede:	bf38      	it	cc
 8017ee0:	250c      	movcc	r5, #12
 8017ee2:	2d00      	cmp	r5, #0
 8017ee4:	4606      	mov	r6, r0
 8017ee6:	db01      	blt.n	8017eec <_malloc_r+0x1c>
 8017ee8:	42a9      	cmp	r1, r5
 8017eea:	d904      	bls.n	8017ef6 <_malloc_r+0x26>
 8017eec:	230c      	movs	r3, #12
 8017eee:	6033      	str	r3, [r6, #0]
 8017ef0:	2000      	movs	r0, #0
 8017ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017fcc <_malloc_r+0xfc>
 8017efa:	f000 f869 	bl	8017fd0 <__malloc_lock>
 8017efe:	f8d8 3000 	ldr.w	r3, [r8]
 8017f02:	461c      	mov	r4, r3
 8017f04:	bb44      	cbnz	r4, 8017f58 <_malloc_r+0x88>
 8017f06:	4629      	mov	r1, r5
 8017f08:	4630      	mov	r0, r6
 8017f0a:	f7ff ffbf 	bl	8017e8c <sbrk_aligned>
 8017f0e:	1c43      	adds	r3, r0, #1
 8017f10:	4604      	mov	r4, r0
 8017f12:	d158      	bne.n	8017fc6 <_malloc_r+0xf6>
 8017f14:	f8d8 4000 	ldr.w	r4, [r8]
 8017f18:	4627      	mov	r7, r4
 8017f1a:	2f00      	cmp	r7, #0
 8017f1c:	d143      	bne.n	8017fa6 <_malloc_r+0xd6>
 8017f1e:	2c00      	cmp	r4, #0
 8017f20:	d04b      	beq.n	8017fba <_malloc_r+0xea>
 8017f22:	6823      	ldr	r3, [r4, #0]
 8017f24:	4639      	mov	r1, r7
 8017f26:	4630      	mov	r0, r6
 8017f28:	eb04 0903 	add.w	r9, r4, r3
 8017f2c:	f000 fdfc 	bl	8018b28 <_sbrk_r>
 8017f30:	4581      	cmp	r9, r0
 8017f32:	d142      	bne.n	8017fba <_malloc_r+0xea>
 8017f34:	6821      	ldr	r1, [r4, #0]
 8017f36:	1a6d      	subs	r5, r5, r1
 8017f38:	4629      	mov	r1, r5
 8017f3a:	4630      	mov	r0, r6
 8017f3c:	f7ff ffa6 	bl	8017e8c <sbrk_aligned>
 8017f40:	3001      	adds	r0, #1
 8017f42:	d03a      	beq.n	8017fba <_malloc_r+0xea>
 8017f44:	6823      	ldr	r3, [r4, #0]
 8017f46:	442b      	add	r3, r5
 8017f48:	6023      	str	r3, [r4, #0]
 8017f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8017f4e:	685a      	ldr	r2, [r3, #4]
 8017f50:	bb62      	cbnz	r2, 8017fac <_malloc_r+0xdc>
 8017f52:	f8c8 7000 	str.w	r7, [r8]
 8017f56:	e00f      	b.n	8017f78 <_malloc_r+0xa8>
 8017f58:	6822      	ldr	r2, [r4, #0]
 8017f5a:	1b52      	subs	r2, r2, r5
 8017f5c:	d420      	bmi.n	8017fa0 <_malloc_r+0xd0>
 8017f5e:	2a0b      	cmp	r2, #11
 8017f60:	d917      	bls.n	8017f92 <_malloc_r+0xc2>
 8017f62:	1961      	adds	r1, r4, r5
 8017f64:	42a3      	cmp	r3, r4
 8017f66:	6025      	str	r5, [r4, #0]
 8017f68:	bf18      	it	ne
 8017f6a:	6059      	strne	r1, [r3, #4]
 8017f6c:	6863      	ldr	r3, [r4, #4]
 8017f6e:	bf08      	it	eq
 8017f70:	f8c8 1000 	streq.w	r1, [r8]
 8017f74:	5162      	str	r2, [r4, r5]
 8017f76:	604b      	str	r3, [r1, #4]
 8017f78:	4630      	mov	r0, r6
 8017f7a:	f000 f82f 	bl	8017fdc <__malloc_unlock>
 8017f7e:	f104 000b 	add.w	r0, r4, #11
 8017f82:	1d23      	adds	r3, r4, #4
 8017f84:	f020 0007 	bic.w	r0, r0, #7
 8017f88:	1ac2      	subs	r2, r0, r3
 8017f8a:	bf1c      	itt	ne
 8017f8c:	1a1b      	subne	r3, r3, r0
 8017f8e:	50a3      	strne	r3, [r4, r2]
 8017f90:	e7af      	b.n	8017ef2 <_malloc_r+0x22>
 8017f92:	6862      	ldr	r2, [r4, #4]
 8017f94:	42a3      	cmp	r3, r4
 8017f96:	bf0c      	ite	eq
 8017f98:	f8c8 2000 	streq.w	r2, [r8]
 8017f9c:	605a      	strne	r2, [r3, #4]
 8017f9e:	e7eb      	b.n	8017f78 <_malloc_r+0xa8>
 8017fa0:	4623      	mov	r3, r4
 8017fa2:	6864      	ldr	r4, [r4, #4]
 8017fa4:	e7ae      	b.n	8017f04 <_malloc_r+0x34>
 8017fa6:	463c      	mov	r4, r7
 8017fa8:	687f      	ldr	r7, [r7, #4]
 8017faa:	e7b6      	b.n	8017f1a <_malloc_r+0x4a>
 8017fac:	461a      	mov	r2, r3
 8017fae:	685b      	ldr	r3, [r3, #4]
 8017fb0:	42a3      	cmp	r3, r4
 8017fb2:	d1fb      	bne.n	8017fac <_malloc_r+0xdc>
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	6053      	str	r3, [r2, #4]
 8017fb8:	e7de      	b.n	8017f78 <_malloc_r+0xa8>
 8017fba:	230c      	movs	r3, #12
 8017fbc:	6033      	str	r3, [r6, #0]
 8017fbe:	4630      	mov	r0, r6
 8017fc0:	f000 f80c 	bl	8017fdc <__malloc_unlock>
 8017fc4:	e794      	b.n	8017ef0 <_malloc_r+0x20>
 8017fc6:	6005      	str	r5, [r0, #0]
 8017fc8:	e7d6      	b.n	8017f78 <_malloc_r+0xa8>
 8017fca:	bf00      	nop
 8017fcc:	20009544 	.word	0x20009544

08017fd0 <__malloc_lock>:
 8017fd0:	4801      	ldr	r0, [pc, #4]	@ (8017fd8 <__malloc_lock+0x8>)
 8017fd2:	f7ff b8a2 	b.w	801711a <__retarget_lock_acquire_recursive>
 8017fd6:	bf00      	nop
 8017fd8:	2000953c 	.word	0x2000953c

08017fdc <__malloc_unlock>:
 8017fdc:	4801      	ldr	r0, [pc, #4]	@ (8017fe4 <__malloc_unlock+0x8>)
 8017fde:	f7ff b89d 	b.w	801711c <__retarget_lock_release_recursive>
 8017fe2:	bf00      	nop
 8017fe4:	2000953c 	.word	0x2000953c

08017fe8 <_Balloc>:
 8017fe8:	b570      	push	{r4, r5, r6, lr}
 8017fea:	69c6      	ldr	r6, [r0, #28]
 8017fec:	4604      	mov	r4, r0
 8017fee:	460d      	mov	r5, r1
 8017ff0:	b976      	cbnz	r6, 8018010 <_Balloc+0x28>
 8017ff2:	2010      	movs	r0, #16
 8017ff4:	f7ff ff42 	bl	8017e7c <malloc>
 8017ff8:	4602      	mov	r2, r0
 8017ffa:	61e0      	str	r0, [r4, #28]
 8017ffc:	b920      	cbnz	r0, 8018008 <_Balloc+0x20>
 8017ffe:	4b18      	ldr	r3, [pc, #96]	@ (8018060 <_Balloc+0x78>)
 8018000:	4818      	ldr	r0, [pc, #96]	@ (8018064 <_Balloc+0x7c>)
 8018002:	216b      	movs	r1, #107	@ 0x6b
 8018004:	f000 fda0 	bl	8018b48 <__assert_func>
 8018008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801800c:	6006      	str	r6, [r0, #0]
 801800e:	60c6      	str	r6, [r0, #12]
 8018010:	69e6      	ldr	r6, [r4, #28]
 8018012:	68f3      	ldr	r3, [r6, #12]
 8018014:	b183      	cbz	r3, 8018038 <_Balloc+0x50>
 8018016:	69e3      	ldr	r3, [r4, #28]
 8018018:	68db      	ldr	r3, [r3, #12]
 801801a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801801e:	b9b8      	cbnz	r0, 8018050 <_Balloc+0x68>
 8018020:	2101      	movs	r1, #1
 8018022:	fa01 f605 	lsl.w	r6, r1, r5
 8018026:	1d72      	adds	r2, r6, #5
 8018028:	0092      	lsls	r2, r2, #2
 801802a:	4620      	mov	r0, r4
 801802c:	f000 fdaa 	bl	8018b84 <_calloc_r>
 8018030:	b160      	cbz	r0, 801804c <_Balloc+0x64>
 8018032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018036:	e00e      	b.n	8018056 <_Balloc+0x6e>
 8018038:	2221      	movs	r2, #33	@ 0x21
 801803a:	2104      	movs	r1, #4
 801803c:	4620      	mov	r0, r4
 801803e:	f000 fda1 	bl	8018b84 <_calloc_r>
 8018042:	69e3      	ldr	r3, [r4, #28]
 8018044:	60f0      	str	r0, [r6, #12]
 8018046:	68db      	ldr	r3, [r3, #12]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d1e4      	bne.n	8018016 <_Balloc+0x2e>
 801804c:	2000      	movs	r0, #0
 801804e:	bd70      	pop	{r4, r5, r6, pc}
 8018050:	6802      	ldr	r2, [r0, #0]
 8018052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018056:	2300      	movs	r3, #0
 8018058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801805c:	e7f7      	b.n	801804e <_Balloc+0x66>
 801805e:	bf00      	nop
 8018060:	0801acfe 	.word	0x0801acfe
 8018064:	0801ad7e 	.word	0x0801ad7e

08018068 <_Bfree>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	69c6      	ldr	r6, [r0, #28]
 801806c:	4605      	mov	r5, r0
 801806e:	460c      	mov	r4, r1
 8018070:	b976      	cbnz	r6, 8018090 <_Bfree+0x28>
 8018072:	2010      	movs	r0, #16
 8018074:	f7ff ff02 	bl	8017e7c <malloc>
 8018078:	4602      	mov	r2, r0
 801807a:	61e8      	str	r0, [r5, #28]
 801807c:	b920      	cbnz	r0, 8018088 <_Bfree+0x20>
 801807e:	4b09      	ldr	r3, [pc, #36]	@ (80180a4 <_Bfree+0x3c>)
 8018080:	4809      	ldr	r0, [pc, #36]	@ (80180a8 <_Bfree+0x40>)
 8018082:	218f      	movs	r1, #143	@ 0x8f
 8018084:	f000 fd60 	bl	8018b48 <__assert_func>
 8018088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801808c:	6006      	str	r6, [r0, #0]
 801808e:	60c6      	str	r6, [r0, #12]
 8018090:	b13c      	cbz	r4, 80180a2 <_Bfree+0x3a>
 8018092:	69eb      	ldr	r3, [r5, #28]
 8018094:	6862      	ldr	r2, [r4, #4]
 8018096:	68db      	ldr	r3, [r3, #12]
 8018098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801809c:	6021      	str	r1, [r4, #0]
 801809e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80180a2:	bd70      	pop	{r4, r5, r6, pc}
 80180a4:	0801acfe 	.word	0x0801acfe
 80180a8:	0801ad7e 	.word	0x0801ad7e

080180ac <__multadd>:
 80180ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b0:	690d      	ldr	r5, [r1, #16]
 80180b2:	4607      	mov	r7, r0
 80180b4:	460c      	mov	r4, r1
 80180b6:	461e      	mov	r6, r3
 80180b8:	f101 0c14 	add.w	ip, r1, #20
 80180bc:	2000      	movs	r0, #0
 80180be:	f8dc 3000 	ldr.w	r3, [ip]
 80180c2:	b299      	uxth	r1, r3
 80180c4:	fb02 6101 	mla	r1, r2, r1, r6
 80180c8:	0c1e      	lsrs	r6, r3, #16
 80180ca:	0c0b      	lsrs	r3, r1, #16
 80180cc:	fb02 3306 	mla	r3, r2, r6, r3
 80180d0:	b289      	uxth	r1, r1
 80180d2:	3001      	adds	r0, #1
 80180d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80180d8:	4285      	cmp	r5, r0
 80180da:	f84c 1b04 	str.w	r1, [ip], #4
 80180de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80180e2:	dcec      	bgt.n	80180be <__multadd+0x12>
 80180e4:	b30e      	cbz	r6, 801812a <__multadd+0x7e>
 80180e6:	68a3      	ldr	r3, [r4, #8]
 80180e8:	42ab      	cmp	r3, r5
 80180ea:	dc19      	bgt.n	8018120 <__multadd+0x74>
 80180ec:	6861      	ldr	r1, [r4, #4]
 80180ee:	4638      	mov	r0, r7
 80180f0:	3101      	adds	r1, #1
 80180f2:	f7ff ff79 	bl	8017fe8 <_Balloc>
 80180f6:	4680      	mov	r8, r0
 80180f8:	b928      	cbnz	r0, 8018106 <__multadd+0x5a>
 80180fa:	4602      	mov	r2, r0
 80180fc:	4b0c      	ldr	r3, [pc, #48]	@ (8018130 <__multadd+0x84>)
 80180fe:	480d      	ldr	r0, [pc, #52]	@ (8018134 <__multadd+0x88>)
 8018100:	21ba      	movs	r1, #186	@ 0xba
 8018102:	f000 fd21 	bl	8018b48 <__assert_func>
 8018106:	6922      	ldr	r2, [r4, #16]
 8018108:	3202      	adds	r2, #2
 801810a:	f104 010c 	add.w	r1, r4, #12
 801810e:	0092      	lsls	r2, r2, #2
 8018110:	300c      	adds	r0, #12
 8018112:	f7ff f80c 	bl	801712e <memcpy>
 8018116:	4621      	mov	r1, r4
 8018118:	4638      	mov	r0, r7
 801811a:	f7ff ffa5 	bl	8018068 <_Bfree>
 801811e:	4644      	mov	r4, r8
 8018120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018124:	3501      	adds	r5, #1
 8018126:	615e      	str	r6, [r3, #20]
 8018128:	6125      	str	r5, [r4, #16]
 801812a:	4620      	mov	r0, r4
 801812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018130:	0801ad6d 	.word	0x0801ad6d
 8018134:	0801ad7e 	.word	0x0801ad7e

08018138 <__hi0bits>:
 8018138:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801813c:	4603      	mov	r3, r0
 801813e:	bf36      	itet	cc
 8018140:	0403      	lslcc	r3, r0, #16
 8018142:	2000      	movcs	r0, #0
 8018144:	2010      	movcc	r0, #16
 8018146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801814a:	bf3c      	itt	cc
 801814c:	021b      	lslcc	r3, r3, #8
 801814e:	3008      	addcc	r0, #8
 8018150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018154:	bf3c      	itt	cc
 8018156:	011b      	lslcc	r3, r3, #4
 8018158:	3004      	addcc	r0, #4
 801815a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801815e:	bf3c      	itt	cc
 8018160:	009b      	lslcc	r3, r3, #2
 8018162:	3002      	addcc	r0, #2
 8018164:	2b00      	cmp	r3, #0
 8018166:	db05      	blt.n	8018174 <__hi0bits+0x3c>
 8018168:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801816c:	f100 0001 	add.w	r0, r0, #1
 8018170:	bf08      	it	eq
 8018172:	2020      	moveq	r0, #32
 8018174:	4770      	bx	lr

08018176 <__lo0bits>:
 8018176:	6803      	ldr	r3, [r0, #0]
 8018178:	4602      	mov	r2, r0
 801817a:	f013 0007 	ands.w	r0, r3, #7
 801817e:	d00b      	beq.n	8018198 <__lo0bits+0x22>
 8018180:	07d9      	lsls	r1, r3, #31
 8018182:	d421      	bmi.n	80181c8 <__lo0bits+0x52>
 8018184:	0798      	lsls	r0, r3, #30
 8018186:	bf49      	itett	mi
 8018188:	085b      	lsrmi	r3, r3, #1
 801818a:	089b      	lsrpl	r3, r3, #2
 801818c:	2001      	movmi	r0, #1
 801818e:	6013      	strmi	r3, [r2, #0]
 8018190:	bf5c      	itt	pl
 8018192:	6013      	strpl	r3, [r2, #0]
 8018194:	2002      	movpl	r0, #2
 8018196:	4770      	bx	lr
 8018198:	b299      	uxth	r1, r3
 801819a:	b909      	cbnz	r1, 80181a0 <__lo0bits+0x2a>
 801819c:	0c1b      	lsrs	r3, r3, #16
 801819e:	2010      	movs	r0, #16
 80181a0:	b2d9      	uxtb	r1, r3
 80181a2:	b909      	cbnz	r1, 80181a8 <__lo0bits+0x32>
 80181a4:	3008      	adds	r0, #8
 80181a6:	0a1b      	lsrs	r3, r3, #8
 80181a8:	0719      	lsls	r1, r3, #28
 80181aa:	bf04      	itt	eq
 80181ac:	091b      	lsreq	r3, r3, #4
 80181ae:	3004      	addeq	r0, #4
 80181b0:	0799      	lsls	r1, r3, #30
 80181b2:	bf04      	itt	eq
 80181b4:	089b      	lsreq	r3, r3, #2
 80181b6:	3002      	addeq	r0, #2
 80181b8:	07d9      	lsls	r1, r3, #31
 80181ba:	d403      	bmi.n	80181c4 <__lo0bits+0x4e>
 80181bc:	085b      	lsrs	r3, r3, #1
 80181be:	f100 0001 	add.w	r0, r0, #1
 80181c2:	d003      	beq.n	80181cc <__lo0bits+0x56>
 80181c4:	6013      	str	r3, [r2, #0]
 80181c6:	4770      	bx	lr
 80181c8:	2000      	movs	r0, #0
 80181ca:	4770      	bx	lr
 80181cc:	2020      	movs	r0, #32
 80181ce:	4770      	bx	lr

080181d0 <__i2b>:
 80181d0:	b510      	push	{r4, lr}
 80181d2:	460c      	mov	r4, r1
 80181d4:	2101      	movs	r1, #1
 80181d6:	f7ff ff07 	bl	8017fe8 <_Balloc>
 80181da:	4602      	mov	r2, r0
 80181dc:	b928      	cbnz	r0, 80181ea <__i2b+0x1a>
 80181de:	4b05      	ldr	r3, [pc, #20]	@ (80181f4 <__i2b+0x24>)
 80181e0:	4805      	ldr	r0, [pc, #20]	@ (80181f8 <__i2b+0x28>)
 80181e2:	f240 1145 	movw	r1, #325	@ 0x145
 80181e6:	f000 fcaf 	bl	8018b48 <__assert_func>
 80181ea:	2301      	movs	r3, #1
 80181ec:	6144      	str	r4, [r0, #20]
 80181ee:	6103      	str	r3, [r0, #16]
 80181f0:	bd10      	pop	{r4, pc}
 80181f2:	bf00      	nop
 80181f4:	0801ad6d 	.word	0x0801ad6d
 80181f8:	0801ad7e 	.word	0x0801ad7e

080181fc <__multiply>:
 80181fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018200:	4614      	mov	r4, r2
 8018202:	690a      	ldr	r2, [r1, #16]
 8018204:	6923      	ldr	r3, [r4, #16]
 8018206:	429a      	cmp	r2, r3
 8018208:	bfa8      	it	ge
 801820a:	4623      	movge	r3, r4
 801820c:	460f      	mov	r7, r1
 801820e:	bfa4      	itt	ge
 8018210:	460c      	movge	r4, r1
 8018212:	461f      	movge	r7, r3
 8018214:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018218:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801821c:	68a3      	ldr	r3, [r4, #8]
 801821e:	6861      	ldr	r1, [r4, #4]
 8018220:	eb0a 0609 	add.w	r6, sl, r9
 8018224:	42b3      	cmp	r3, r6
 8018226:	b085      	sub	sp, #20
 8018228:	bfb8      	it	lt
 801822a:	3101      	addlt	r1, #1
 801822c:	f7ff fedc 	bl	8017fe8 <_Balloc>
 8018230:	b930      	cbnz	r0, 8018240 <__multiply+0x44>
 8018232:	4602      	mov	r2, r0
 8018234:	4b44      	ldr	r3, [pc, #272]	@ (8018348 <__multiply+0x14c>)
 8018236:	4845      	ldr	r0, [pc, #276]	@ (801834c <__multiply+0x150>)
 8018238:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801823c:	f000 fc84 	bl	8018b48 <__assert_func>
 8018240:	f100 0514 	add.w	r5, r0, #20
 8018244:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018248:	462b      	mov	r3, r5
 801824a:	2200      	movs	r2, #0
 801824c:	4543      	cmp	r3, r8
 801824e:	d321      	bcc.n	8018294 <__multiply+0x98>
 8018250:	f107 0114 	add.w	r1, r7, #20
 8018254:	f104 0214 	add.w	r2, r4, #20
 8018258:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801825c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018260:	9302      	str	r3, [sp, #8]
 8018262:	1b13      	subs	r3, r2, r4
 8018264:	3b15      	subs	r3, #21
 8018266:	f023 0303 	bic.w	r3, r3, #3
 801826a:	3304      	adds	r3, #4
 801826c:	f104 0715 	add.w	r7, r4, #21
 8018270:	42ba      	cmp	r2, r7
 8018272:	bf38      	it	cc
 8018274:	2304      	movcc	r3, #4
 8018276:	9301      	str	r3, [sp, #4]
 8018278:	9b02      	ldr	r3, [sp, #8]
 801827a:	9103      	str	r1, [sp, #12]
 801827c:	428b      	cmp	r3, r1
 801827e:	d80c      	bhi.n	801829a <__multiply+0x9e>
 8018280:	2e00      	cmp	r6, #0
 8018282:	dd03      	ble.n	801828c <__multiply+0x90>
 8018284:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018288:	2b00      	cmp	r3, #0
 801828a:	d05b      	beq.n	8018344 <__multiply+0x148>
 801828c:	6106      	str	r6, [r0, #16]
 801828e:	b005      	add	sp, #20
 8018290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018294:	f843 2b04 	str.w	r2, [r3], #4
 8018298:	e7d8      	b.n	801824c <__multiply+0x50>
 801829a:	f8b1 a000 	ldrh.w	sl, [r1]
 801829e:	f1ba 0f00 	cmp.w	sl, #0
 80182a2:	d024      	beq.n	80182ee <__multiply+0xf2>
 80182a4:	f104 0e14 	add.w	lr, r4, #20
 80182a8:	46a9      	mov	r9, r5
 80182aa:	f04f 0c00 	mov.w	ip, #0
 80182ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80182b2:	f8d9 3000 	ldr.w	r3, [r9]
 80182b6:	fa1f fb87 	uxth.w	fp, r7
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80182c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80182c4:	f8d9 7000 	ldr.w	r7, [r9]
 80182c8:	4463      	add	r3, ip
 80182ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80182ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80182d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80182dc:	4572      	cmp	r2, lr
 80182de:	f849 3b04 	str.w	r3, [r9], #4
 80182e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80182e6:	d8e2      	bhi.n	80182ae <__multiply+0xb2>
 80182e8:	9b01      	ldr	r3, [sp, #4]
 80182ea:	f845 c003 	str.w	ip, [r5, r3]
 80182ee:	9b03      	ldr	r3, [sp, #12]
 80182f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80182f4:	3104      	adds	r1, #4
 80182f6:	f1b9 0f00 	cmp.w	r9, #0
 80182fa:	d021      	beq.n	8018340 <__multiply+0x144>
 80182fc:	682b      	ldr	r3, [r5, #0]
 80182fe:	f104 0c14 	add.w	ip, r4, #20
 8018302:	46ae      	mov	lr, r5
 8018304:	f04f 0a00 	mov.w	sl, #0
 8018308:	f8bc b000 	ldrh.w	fp, [ip]
 801830c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018310:	fb09 770b 	mla	r7, r9, fp, r7
 8018314:	4457      	add	r7, sl
 8018316:	b29b      	uxth	r3, r3
 8018318:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801831c:	f84e 3b04 	str.w	r3, [lr], #4
 8018320:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018324:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018328:	f8be 3000 	ldrh.w	r3, [lr]
 801832c:	fb09 330a 	mla	r3, r9, sl, r3
 8018330:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018334:	4562      	cmp	r2, ip
 8018336:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801833a:	d8e5      	bhi.n	8018308 <__multiply+0x10c>
 801833c:	9f01      	ldr	r7, [sp, #4]
 801833e:	51eb      	str	r3, [r5, r7]
 8018340:	3504      	adds	r5, #4
 8018342:	e799      	b.n	8018278 <__multiply+0x7c>
 8018344:	3e01      	subs	r6, #1
 8018346:	e79b      	b.n	8018280 <__multiply+0x84>
 8018348:	0801ad6d 	.word	0x0801ad6d
 801834c:	0801ad7e 	.word	0x0801ad7e

08018350 <__pow5mult>:
 8018350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018354:	4615      	mov	r5, r2
 8018356:	f012 0203 	ands.w	r2, r2, #3
 801835a:	4607      	mov	r7, r0
 801835c:	460e      	mov	r6, r1
 801835e:	d007      	beq.n	8018370 <__pow5mult+0x20>
 8018360:	4c25      	ldr	r4, [pc, #148]	@ (80183f8 <__pow5mult+0xa8>)
 8018362:	3a01      	subs	r2, #1
 8018364:	2300      	movs	r3, #0
 8018366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801836a:	f7ff fe9f 	bl	80180ac <__multadd>
 801836e:	4606      	mov	r6, r0
 8018370:	10ad      	asrs	r5, r5, #2
 8018372:	d03d      	beq.n	80183f0 <__pow5mult+0xa0>
 8018374:	69fc      	ldr	r4, [r7, #28]
 8018376:	b97c      	cbnz	r4, 8018398 <__pow5mult+0x48>
 8018378:	2010      	movs	r0, #16
 801837a:	f7ff fd7f 	bl	8017e7c <malloc>
 801837e:	4602      	mov	r2, r0
 8018380:	61f8      	str	r0, [r7, #28]
 8018382:	b928      	cbnz	r0, 8018390 <__pow5mult+0x40>
 8018384:	4b1d      	ldr	r3, [pc, #116]	@ (80183fc <__pow5mult+0xac>)
 8018386:	481e      	ldr	r0, [pc, #120]	@ (8018400 <__pow5mult+0xb0>)
 8018388:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801838c:	f000 fbdc 	bl	8018b48 <__assert_func>
 8018390:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018394:	6004      	str	r4, [r0, #0]
 8018396:	60c4      	str	r4, [r0, #12]
 8018398:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801839c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80183a0:	b94c      	cbnz	r4, 80183b6 <__pow5mult+0x66>
 80183a2:	f240 2171 	movw	r1, #625	@ 0x271
 80183a6:	4638      	mov	r0, r7
 80183a8:	f7ff ff12 	bl	80181d0 <__i2b>
 80183ac:	2300      	movs	r3, #0
 80183ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80183b2:	4604      	mov	r4, r0
 80183b4:	6003      	str	r3, [r0, #0]
 80183b6:	f04f 0900 	mov.w	r9, #0
 80183ba:	07eb      	lsls	r3, r5, #31
 80183bc:	d50a      	bpl.n	80183d4 <__pow5mult+0x84>
 80183be:	4631      	mov	r1, r6
 80183c0:	4622      	mov	r2, r4
 80183c2:	4638      	mov	r0, r7
 80183c4:	f7ff ff1a 	bl	80181fc <__multiply>
 80183c8:	4631      	mov	r1, r6
 80183ca:	4680      	mov	r8, r0
 80183cc:	4638      	mov	r0, r7
 80183ce:	f7ff fe4b 	bl	8018068 <_Bfree>
 80183d2:	4646      	mov	r6, r8
 80183d4:	106d      	asrs	r5, r5, #1
 80183d6:	d00b      	beq.n	80183f0 <__pow5mult+0xa0>
 80183d8:	6820      	ldr	r0, [r4, #0]
 80183da:	b938      	cbnz	r0, 80183ec <__pow5mult+0x9c>
 80183dc:	4622      	mov	r2, r4
 80183de:	4621      	mov	r1, r4
 80183e0:	4638      	mov	r0, r7
 80183e2:	f7ff ff0b 	bl	80181fc <__multiply>
 80183e6:	6020      	str	r0, [r4, #0]
 80183e8:	f8c0 9000 	str.w	r9, [r0]
 80183ec:	4604      	mov	r4, r0
 80183ee:	e7e4      	b.n	80183ba <__pow5mult+0x6a>
 80183f0:	4630      	mov	r0, r6
 80183f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183f6:	bf00      	nop
 80183f8:	0801add8 	.word	0x0801add8
 80183fc:	0801acfe 	.word	0x0801acfe
 8018400:	0801ad7e 	.word	0x0801ad7e

08018404 <__lshift>:
 8018404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018408:	460c      	mov	r4, r1
 801840a:	6849      	ldr	r1, [r1, #4]
 801840c:	6923      	ldr	r3, [r4, #16]
 801840e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018412:	68a3      	ldr	r3, [r4, #8]
 8018414:	4607      	mov	r7, r0
 8018416:	4691      	mov	r9, r2
 8018418:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801841c:	f108 0601 	add.w	r6, r8, #1
 8018420:	42b3      	cmp	r3, r6
 8018422:	db0b      	blt.n	801843c <__lshift+0x38>
 8018424:	4638      	mov	r0, r7
 8018426:	f7ff fddf 	bl	8017fe8 <_Balloc>
 801842a:	4605      	mov	r5, r0
 801842c:	b948      	cbnz	r0, 8018442 <__lshift+0x3e>
 801842e:	4602      	mov	r2, r0
 8018430:	4b28      	ldr	r3, [pc, #160]	@ (80184d4 <__lshift+0xd0>)
 8018432:	4829      	ldr	r0, [pc, #164]	@ (80184d8 <__lshift+0xd4>)
 8018434:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018438:	f000 fb86 	bl	8018b48 <__assert_func>
 801843c:	3101      	adds	r1, #1
 801843e:	005b      	lsls	r3, r3, #1
 8018440:	e7ee      	b.n	8018420 <__lshift+0x1c>
 8018442:	2300      	movs	r3, #0
 8018444:	f100 0114 	add.w	r1, r0, #20
 8018448:	f100 0210 	add.w	r2, r0, #16
 801844c:	4618      	mov	r0, r3
 801844e:	4553      	cmp	r3, sl
 8018450:	db33      	blt.n	80184ba <__lshift+0xb6>
 8018452:	6920      	ldr	r0, [r4, #16]
 8018454:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018458:	f104 0314 	add.w	r3, r4, #20
 801845c:	f019 091f 	ands.w	r9, r9, #31
 8018460:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018464:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018468:	d02b      	beq.n	80184c2 <__lshift+0xbe>
 801846a:	f1c9 0e20 	rsb	lr, r9, #32
 801846e:	468a      	mov	sl, r1
 8018470:	2200      	movs	r2, #0
 8018472:	6818      	ldr	r0, [r3, #0]
 8018474:	fa00 f009 	lsl.w	r0, r0, r9
 8018478:	4310      	orrs	r0, r2
 801847a:	f84a 0b04 	str.w	r0, [sl], #4
 801847e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018482:	459c      	cmp	ip, r3
 8018484:	fa22 f20e 	lsr.w	r2, r2, lr
 8018488:	d8f3      	bhi.n	8018472 <__lshift+0x6e>
 801848a:	ebac 0304 	sub.w	r3, ip, r4
 801848e:	3b15      	subs	r3, #21
 8018490:	f023 0303 	bic.w	r3, r3, #3
 8018494:	3304      	adds	r3, #4
 8018496:	f104 0015 	add.w	r0, r4, #21
 801849a:	4584      	cmp	ip, r0
 801849c:	bf38      	it	cc
 801849e:	2304      	movcc	r3, #4
 80184a0:	50ca      	str	r2, [r1, r3]
 80184a2:	b10a      	cbz	r2, 80184a8 <__lshift+0xa4>
 80184a4:	f108 0602 	add.w	r6, r8, #2
 80184a8:	3e01      	subs	r6, #1
 80184aa:	4638      	mov	r0, r7
 80184ac:	612e      	str	r6, [r5, #16]
 80184ae:	4621      	mov	r1, r4
 80184b0:	f7ff fdda 	bl	8018068 <_Bfree>
 80184b4:	4628      	mov	r0, r5
 80184b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80184be:	3301      	adds	r3, #1
 80184c0:	e7c5      	b.n	801844e <__lshift+0x4a>
 80184c2:	3904      	subs	r1, #4
 80184c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80184cc:	459c      	cmp	ip, r3
 80184ce:	d8f9      	bhi.n	80184c4 <__lshift+0xc0>
 80184d0:	e7ea      	b.n	80184a8 <__lshift+0xa4>
 80184d2:	bf00      	nop
 80184d4:	0801ad6d 	.word	0x0801ad6d
 80184d8:	0801ad7e 	.word	0x0801ad7e

080184dc <__mcmp>:
 80184dc:	690a      	ldr	r2, [r1, #16]
 80184de:	4603      	mov	r3, r0
 80184e0:	6900      	ldr	r0, [r0, #16]
 80184e2:	1a80      	subs	r0, r0, r2
 80184e4:	b530      	push	{r4, r5, lr}
 80184e6:	d10e      	bne.n	8018506 <__mcmp+0x2a>
 80184e8:	3314      	adds	r3, #20
 80184ea:	3114      	adds	r1, #20
 80184ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80184f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80184f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80184f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80184fc:	4295      	cmp	r5, r2
 80184fe:	d003      	beq.n	8018508 <__mcmp+0x2c>
 8018500:	d205      	bcs.n	801850e <__mcmp+0x32>
 8018502:	f04f 30ff 	mov.w	r0, #4294967295
 8018506:	bd30      	pop	{r4, r5, pc}
 8018508:	42a3      	cmp	r3, r4
 801850a:	d3f3      	bcc.n	80184f4 <__mcmp+0x18>
 801850c:	e7fb      	b.n	8018506 <__mcmp+0x2a>
 801850e:	2001      	movs	r0, #1
 8018510:	e7f9      	b.n	8018506 <__mcmp+0x2a>
	...

08018514 <__mdiff>:
 8018514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018518:	4689      	mov	r9, r1
 801851a:	4606      	mov	r6, r0
 801851c:	4611      	mov	r1, r2
 801851e:	4648      	mov	r0, r9
 8018520:	4614      	mov	r4, r2
 8018522:	f7ff ffdb 	bl	80184dc <__mcmp>
 8018526:	1e05      	subs	r5, r0, #0
 8018528:	d112      	bne.n	8018550 <__mdiff+0x3c>
 801852a:	4629      	mov	r1, r5
 801852c:	4630      	mov	r0, r6
 801852e:	f7ff fd5b 	bl	8017fe8 <_Balloc>
 8018532:	4602      	mov	r2, r0
 8018534:	b928      	cbnz	r0, 8018542 <__mdiff+0x2e>
 8018536:	4b3f      	ldr	r3, [pc, #252]	@ (8018634 <__mdiff+0x120>)
 8018538:	f240 2137 	movw	r1, #567	@ 0x237
 801853c:	483e      	ldr	r0, [pc, #248]	@ (8018638 <__mdiff+0x124>)
 801853e:	f000 fb03 	bl	8018b48 <__assert_func>
 8018542:	2301      	movs	r3, #1
 8018544:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018548:	4610      	mov	r0, r2
 801854a:	b003      	add	sp, #12
 801854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018550:	bfbc      	itt	lt
 8018552:	464b      	movlt	r3, r9
 8018554:	46a1      	movlt	r9, r4
 8018556:	4630      	mov	r0, r6
 8018558:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801855c:	bfba      	itte	lt
 801855e:	461c      	movlt	r4, r3
 8018560:	2501      	movlt	r5, #1
 8018562:	2500      	movge	r5, #0
 8018564:	f7ff fd40 	bl	8017fe8 <_Balloc>
 8018568:	4602      	mov	r2, r0
 801856a:	b918      	cbnz	r0, 8018574 <__mdiff+0x60>
 801856c:	4b31      	ldr	r3, [pc, #196]	@ (8018634 <__mdiff+0x120>)
 801856e:	f240 2145 	movw	r1, #581	@ 0x245
 8018572:	e7e3      	b.n	801853c <__mdiff+0x28>
 8018574:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018578:	6926      	ldr	r6, [r4, #16]
 801857a:	60c5      	str	r5, [r0, #12]
 801857c:	f109 0310 	add.w	r3, r9, #16
 8018580:	f109 0514 	add.w	r5, r9, #20
 8018584:	f104 0e14 	add.w	lr, r4, #20
 8018588:	f100 0b14 	add.w	fp, r0, #20
 801858c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018590:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018594:	9301      	str	r3, [sp, #4]
 8018596:	46d9      	mov	r9, fp
 8018598:	f04f 0c00 	mov.w	ip, #0
 801859c:	9b01      	ldr	r3, [sp, #4]
 801859e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80185a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80185a6:	9301      	str	r3, [sp, #4]
 80185a8:	fa1f f38a 	uxth.w	r3, sl
 80185ac:	4619      	mov	r1, r3
 80185ae:	b283      	uxth	r3, r0
 80185b0:	1acb      	subs	r3, r1, r3
 80185b2:	0c00      	lsrs	r0, r0, #16
 80185b4:	4463      	add	r3, ip
 80185b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80185ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80185be:	b29b      	uxth	r3, r3
 80185c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80185c4:	4576      	cmp	r6, lr
 80185c6:	f849 3b04 	str.w	r3, [r9], #4
 80185ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80185ce:	d8e5      	bhi.n	801859c <__mdiff+0x88>
 80185d0:	1b33      	subs	r3, r6, r4
 80185d2:	3b15      	subs	r3, #21
 80185d4:	f023 0303 	bic.w	r3, r3, #3
 80185d8:	3415      	adds	r4, #21
 80185da:	3304      	adds	r3, #4
 80185dc:	42a6      	cmp	r6, r4
 80185de:	bf38      	it	cc
 80185e0:	2304      	movcc	r3, #4
 80185e2:	441d      	add	r5, r3
 80185e4:	445b      	add	r3, fp
 80185e6:	461e      	mov	r6, r3
 80185e8:	462c      	mov	r4, r5
 80185ea:	4544      	cmp	r4, r8
 80185ec:	d30e      	bcc.n	801860c <__mdiff+0xf8>
 80185ee:	f108 0103 	add.w	r1, r8, #3
 80185f2:	1b49      	subs	r1, r1, r5
 80185f4:	f021 0103 	bic.w	r1, r1, #3
 80185f8:	3d03      	subs	r5, #3
 80185fa:	45a8      	cmp	r8, r5
 80185fc:	bf38      	it	cc
 80185fe:	2100      	movcc	r1, #0
 8018600:	440b      	add	r3, r1
 8018602:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018606:	b191      	cbz	r1, 801862e <__mdiff+0x11a>
 8018608:	6117      	str	r7, [r2, #16]
 801860a:	e79d      	b.n	8018548 <__mdiff+0x34>
 801860c:	f854 1b04 	ldr.w	r1, [r4], #4
 8018610:	46e6      	mov	lr, ip
 8018612:	0c08      	lsrs	r0, r1, #16
 8018614:	fa1c fc81 	uxtah	ip, ip, r1
 8018618:	4471      	add	r1, lr
 801861a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801861e:	b289      	uxth	r1, r1
 8018620:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018624:	f846 1b04 	str.w	r1, [r6], #4
 8018628:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801862c:	e7dd      	b.n	80185ea <__mdiff+0xd6>
 801862e:	3f01      	subs	r7, #1
 8018630:	e7e7      	b.n	8018602 <__mdiff+0xee>
 8018632:	bf00      	nop
 8018634:	0801ad6d 	.word	0x0801ad6d
 8018638:	0801ad7e 	.word	0x0801ad7e

0801863c <__d2b>:
 801863c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018640:	460f      	mov	r7, r1
 8018642:	2101      	movs	r1, #1
 8018644:	ec59 8b10 	vmov	r8, r9, d0
 8018648:	4616      	mov	r6, r2
 801864a:	f7ff fccd 	bl	8017fe8 <_Balloc>
 801864e:	4604      	mov	r4, r0
 8018650:	b930      	cbnz	r0, 8018660 <__d2b+0x24>
 8018652:	4602      	mov	r2, r0
 8018654:	4b23      	ldr	r3, [pc, #140]	@ (80186e4 <__d2b+0xa8>)
 8018656:	4824      	ldr	r0, [pc, #144]	@ (80186e8 <__d2b+0xac>)
 8018658:	f240 310f 	movw	r1, #783	@ 0x30f
 801865c:	f000 fa74 	bl	8018b48 <__assert_func>
 8018660:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018668:	b10d      	cbz	r5, 801866e <__d2b+0x32>
 801866a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801866e:	9301      	str	r3, [sp, #4]
 8018670:	f1b8 0300 	subs.w	r3, r8, #0
 8018674:	d023      	beq.n	80186be <__d2b+0x82>
 8018676:	4668      	mov	r0, sp
 8018678:	9300      	str	r3, [sp, #0]
 801867a:	f7ff fd7c 	bl	8018176 <__lo0bits>
 801867e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018682:	b1d0      	cbz	r0, 80186ba <__d2b+0x7e>
 8018684:	f1c0 0320 	rsb	r3, r0, #32
 8018688:	fa02 f303 	lsl.w	r3, r2, r3
 801868c:	430b      	orrs	r3, r1
 801868e:	40c2      	lsrs	r2, r0
 8018690:	6163      	str	r3, [r4, #20]
 8018692:	9201      	str	r2, [sp, #4]
 8018694:	9b01      	ldr	r3, [sp, #4]
 8018696:	61a3      	str	r3, [r4, #24]
 8018698:	2b00      	cmp	r3, #0
 801869a:	bf0c      	ite	eq
 801869c:	2201      	moveq	r2, #1
 801869e:	2202      	movne	r2, #2
 80186a0:	6122      	str	r2, [r4, #16]
 80186a2:	b1a5      	cbz	r5, 80186ce <__d2b+0x92>
 80186a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80186a8:	4405      	add	r5, r0
 80186aa:	603d      	str	r5, [r7, #0]
 80186ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80186b0:	6030      	str	r0, [r6, #0]
 80186b2:	4620      	mov	r0, r4
 80186b4:	b003      	add	sp, #12
 80186b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ba:	6161      	str	r1, [r4, #20]
 80186bc:	e7ea      	b.n	8018694 <__d2b+0x58>
 80186be:	a801      	add	r0, sp, #4
 80186c0:	f7ff fd59 	bl	8018176 <__lo0bits>
 80186c4:	9b01      	ldr	r3, [sp, #4]
 80186c6:	6163      	str	r3, [r4, #20]
 80186c8:	3020      	adds	r0, #32
 80186ca:	2201      	movs	r2, #1
 80186cc:	e7e8      	b.n	80186a0 <__d2b+0x64>
 80186ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80186d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80186d6:	6038      	str	r0, [r7, #0]
 80186d8:	6918      	ldr	r0, [r3, #16]
 80186da:	f7ff fd2d 	bl	8018138 <__hi0bits>
 80186de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80186e2:	e7e5      	b.n	80186b0 <__d2b+0x74>
 80186e4:	0801ad6d 	.word	0x0801ad6d
 80186e8:	0801ad7e 	.word	0x0801ad7e

080186ec <__ssputs_r>:
 80186ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186f0:	688e      	ldr	r6, [r1, #8]
 80186f2:	461f      	mov	r7, r3
 80186f4:	42be      	cmp	r6, r7
 80186f6:	680b      	ldr	r3, [r1, #0]
 80186f8:	4682      	mov	sl, r0
 80186fa:	460c      	mov	r4, r1
 80186fc:	4690      	mov	r8, r2
 80186fe:	d82d      	bhi.n	801875c <__ssputs_r+0x70>
 8018700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018708:	d026      	beq.n	8018758 <__ssputs_r+0x6c>
 801870a:	6965      	ldr	r5, [r4, #20]
 801870c:	6909      	ldr	r1, [r1, #16]
 801870e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018712:	eba3 0901 	sub.w	r9, r3, r1
 8018716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801871a:	1c7b      	adds	r3, r7, #1
 801871c:	444b      	add	r3, r9
 801871e:	106d      	asrs	r5, r5, #1
 8018720:	429d      	cmp	r5, r3
 8018722:	bf38      	it	cc
 8018724:	461d      	movcc	r5, r3
 8018726:	0553      	lsls	r3, r2, #21
 8018728:	d527      	bpl.n	801877a <__ssputs_r+0x8e>
 801872a:	4629      	mov	r1, r5
 801872c:	f7ff fbd0 	bl	8017ed0 <_malloc_r>
 8018730:	4606      	mov	r6, r0
 8018732:	b360      	cbz	r0, 801878e <__ssputs_r+0xa2>
 8018734:	6921      	ldr	r1, [r4, #16]
 8018736:	464a      	mov	r2, r9
 8018738:	f7fe fcf9 	bl	801712e <memcpy>
 801873c:	89a3      	ldrh	r3, [r4, #12]
 801873e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018746:	81a3      	strh	r3, [r4, #12]
 8018748:	6126      	str	r6, [r4, #16]
 801874a:	6165      	str	r5, [r4, #20]
 801874c:	444e      	add	r6, r9
 801874e:	eba5 0509 	sub.w	r5, r5, r9
 8018752:	6026      	str	r6, [r4, #0]
 8018754:	60a5      	str	r5, [r4, #8]
 8018756:	463e      	mov	r6, r7
 8018758:	42be      	cmp	r6, r7
 801875a:	d900      	bls.n	801875e <__ssputs_r+0x72>
 801875c:	463e      	mov	r6, r7
 801875e:	6820      	ldr	r0, [r4, #0]
 8018760:	4632      	mov	r2, r6
 8018762:	4641      	mov	r1, r8
 8018764:	f000 f9c6 	bl	8018af4 <memmove>
 8018768:	68a3      	ldr	r3, [r4, #8]
 801876a:	1b9b      	subs	r3, r3, r6
 801876c:	60a3      	str	r3, [r4, #8]
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	4433      	add	r3, r6
 8018772:	6023      	str	r3, [r4, #0]
 8018774:	2000      	movs	r0, #0
 8018776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801877a:	462a      	mov	r2, r5
 801877c:	f000 fa28 	bl	8018bd0 <_realloc_r>
 8018780:	4606      	mov	r6, r0
 8018782:	2800      	cmp	r0, #0
 8018784:	d1e0      	bne.n	8018748 <__ssputs_r+0x5c>
 8018786:	6921      	ldr	r1, [r4, #16]
 8018788:	4650      	mov	r0, sl
 801878a:	f7ff fb2d 	bl	8017de8 <_free_r>
 801878e:	230c      	movs	r3, #12
 8018790:	f8ca 3000 	str.w	r3, [sl]
 8018794:	89a3      	ldrh	r3, [r4, #12]
 8018796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801879a:	81a3      	strh	r3, [r4, #12]
 801879c:	f04f 30ff 	mov.w	r0, #4294967295
 80187a0:	e7e9      	b.n	8018776 <__ssputs_r+0x8a>
	...

080187a4 <_svfiprintf_r>:
 80187a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187a8:	4698      	mov	r8, r3
 80187aa:	898b      	ldrh	r3, [r1, #12]
 80187ac:	061b      	lsls	r3, r3, #24
 80187ae:	b09d      	sub	sp, #116	@ 0x74
 80187b0:	4607      	mov	r7, r0
 80187b2:	460d      	mov	r5, r1
 80187b4:	4614      	mov	r4, r2
 80187b6:	d510      	bpl.n	80187da <_svfiprintf_r+0x36>
 80187b8:	690b      	ldr	r3, [r1, #16]
 80187ba:	b973      	cbnz	r3, 80187da <_svfiprintf_r+0x36>
 80187bc:	2140      	movs	r1, #64	@ 0x40
 80187be:	f7ff fb87 	bl	8017ed0 <_malloc_r>
 80187c2:	6028      	str	r0, [r5, #0]
 80187c4:	6128      	str	r0, [r5, #16]
 80187c6:	b930      	cbnz	r0, 80187d6 <_svfiprintf_r+0x32>
 80187c8:	230c      	movs	r3, #12
 80187ca:	603b      	str	r3, [r7, #0]
 80187cc:	f04f 30ff 	mov.w	r0, #4294967295
 80187d0:	b01d      	add	sp, #116	@ 0x74
 80187d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187d6:	2340      	movs	r3, #64	@ 0x40
 80187d8:	616b      	str	r3, [r5, #20]
 80187da:	2300      	movs	r3, #0
 80187dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80187de:	2320      	movs	r3, #32
 80187e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80187e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80187e8:	2330      	movs	r3, #48	@ 0x30
 80187ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018988 <_svfiprintf_r+0x1e4>
 80187ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80187f2:	f04f 0901 	mov.w	r9, #1
 80187f6:	4623      	mov	r3, r4
 80187f8:	469a      	mov	sl, r3
 80187fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187fe:	b10a      	cbz	r2, 8018804 <_svfiprintf_r+0x60>
 8018800:	2a25      	cmp	r2, #37	@ 0x25
 8018802:	d1f9      	bne.n	80187f8 <_svfiprintf_r+0x54>
 8018804:	ebba 0b04 	subs.w	fp, sl, r4
 8018808:	d00b      	beq.n	8018822 <_svfiprintf_r+0x7e>
 801880a:	465b      	mov	r3, fp
 801880c:	4622      	mov	r2, r4
 801880e:	4629      	mov	r1, r5
 8018810:	4638      	mov	r0, r7
 8018812:	f7ff ff6b 	bl	80186ec <__ssputs_r>
 8018816:	3001      	adds	r0, #1
 8018818:	f000 80a7 	beq.w	801896a <_svfiprintf_r+0x1c6>
 801881c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801881e:	445a      	add	r2, fp
 8018820:	9209      	str	r2, [sp, #36]	@ 0x24
 8018822:	f89a 3000 	ldrb.w	r3, [sl]
 8018826:	2b00      	cmp	r3, #0
 8018828:	f000 809f 	beq.w	801896a <_svfiprintf_r+0x1c6>
 801882c:	2300      	movs	r3, #0
 801882e:	f04f 32ff 	mov.w	r2, #4294967295
 8018832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018836:	f10a 0a01 	add.w	sl, sl, #1
 801883a:	9304      	str	r3, [sp, #16]
 801883c:	9307      	str	r3, [sp, #28]
 801883e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018842:	931a      	str	r3, [sp, #104]	@ 0x68
 8018844:	4654      	mov	r4, sl
 8018846:	2205      	movs	r2, #5
 8018848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801884c:	484e      	ldr	r0, [pc, #312]	@ (8018988 <_svfiprintf_r+0x1e4>)
 801884e:	f7e7 fcdf 	bl	8000210 <memchr>
 8018852:	9a04      	ldr	r2, [sp, #16]
 8018854:	b9d8      	cbnz	r0, 801888e <_svfiprintf_r+0xea>
 8018856:	06d0      	lsls	r0, r2, #27
 8018858:	bf44      	itt	mi
 801885a:	2320      	movmi	r3, #32
 801885c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018860:	0711      	lsls	r1, r2, #28
 8018862:	bf44      	itt	mi
 8018864:	232b      	movmi	r3, #43	@ 0x2b
 8018866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801886a:	f89a 3000 	ldrb.w	r3, [sl]
 801886e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018870:	d015      	beq.n	801889e <_svfiprintf_r+0xfa>
 8018872:	9a07      	ldr	r2, [sp, #28]
 8018874:	4654      	mov	r4, sl
 8018876:	2000      	movs	r0, #0
 8018878:	f04f 0c0a 	mov.w	ip, #10
 801887c:	4621      	mov	r1, r4
 801887e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018882:	3b30      	subs	r3, #48	@ 0x30
 8018884:	2b09      	cmp	r3, #9
 8018886:	d94b      	bls.n	8018920 <_svfiprintf_r+0x17c>
 8018888:	b1b0      	cbz	r0, 80188b8 <_svfiprintf_r+0x114>
 801888a:	9207      	str	r2, [sp, #28]
 801888c:	e014      	b.n	80188b8 <_svfiprintf_r+0x114>
 801888e:	eba0 0308 	sub.w	r3, r0, r8
 8018892:	fa09 f303 	lsl.w	r3, r9, r3
 8018896:	4313      	orrs	r3, r2
 8018898:	9304      	str	r3, [sp, #16]
 801889a:	46a2      	mov	sl, r4
 801889c:	e7d2      	b.n	8018844 <_svfiprintf_r+0xa0>
 801889e:	9b03      	ldr	r3, [sp, #12]
 80188a0:	1d19      	adds	r1, r3, #4
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	9103      	str	r1, [sp, #12]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	bfbb      	ittet	lt
 80188aa:	425b      	neglt	r3, r3
 80188ac:	f042 0202 	orrlt.w	r2, r2, #2
 80188b0:	9307      	strge	r3, [sp, #28]
 80188b2:	9307      	strlt	r3, [sp, #28]
 80188b4:	bfb8      	it	lt
 80188b6:	9204      	strlt	r2, [sp, #16]
 80188b8:	7823      	ldrb	r3, [r4, #0]
 80188ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80188bc:	d10a      	bne.n	80188d4 <_svfiprintf_r+0x130>
 80188be:	7863      	ldrb	r3, [r4, #1]
 80188c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80188c2:	d132      	bne.n	801892a <_svfiprintf_r+0x186>
 80188c4:	9b03      	ldr	r3, [sp, #12]
 80188c6:	1d1a      	adds	r2, r3, #4
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	9203      	str	r2, [sp, #12]
 80188cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80188d0:	3402      	adds	r4, #2
 80188d2:	9305      	str	r3, [sp, #20]
 80188d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018998 <_svfiprintf_r+0x1f4>
 80188d8:	7821      	ldrb	r1, [r4, #0]
 80188da:	2203      	movs	r2, #3
 80188dc:	4650      	mov	r0, sl
 80188de:	f7e7 fc97 	bl	8000210 <memchr>
 80188e2:	b138      	cbz	r0, 80188f4 <_svfiprintf_r+0x150>
 80188e4:	9b04      	ldr	r3, [sp, #16]
 80188e6:	eba0 000a 	sub.w	r0, r0, sl
 80188ea:	2240      	movs	r2, #64	@ 0x40
 80188ec:	4082      	lsls	r2, r0
 80188ee:	4313      	orrs	r3, r2
 80188f0:	3401      	adds	r4, #1
 80188f2:	9304      	str	r3, [sp, #16]
 80188f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188f8:	4824      	ldr	r0, [pc, #144]	@ (801898c <_svfiprintf_r+0x1e8>)
 80188fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80188fe:	2206      	movs	r2, #6
 8018900:	f7e7 fc86 	bl	8000210 <memchr>
 8018904:	2800      	cmp	r0, #0
 8018906:	d036      	beq.n	8018976 <_svfiprintf_r+0x1d2>
 8018908:	4b21      	ldr	r3, [pc, #132]	@ (8018990 <_svfiprintf_r+0x1ec>)
 801890a:	bb1b      	cbnz	r3, 8018954 <_svfiprintf_r+0x1b0>
 801890c:	9b03      	ldr	r3, [sp, #12]
 801890e:	3307      	adds	r3, #7
 8018910:	f023 0307 	bic.w	r3, r3, #7
 8018914:	3308      	adds	r3, #8
 8018916:	9303      	str	r3, [sp, #12]
 8018918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801891a:	4433      	add	r3, r6
 801891c:	9309      	str	r3, [sp, #36]	@ 0x24
 801891e:	e76a      	b.n	80187f6 <_svfiprintf_r+0x52>
 8018920:	fb0c 3202 	mla	r2, ip, r2, r3
 8018924:	460c      	mov	r4, r1
 8018926:	2001      	movs	r0, #1
 8018928:	e7a8      	b.n	801887c <_svfiprintf_r+0xd8>
 801892a:	2300      	movs	r3, #0
 801892c:	3401      	adds	r4, #1
 801892e:	9305      	str	r3, [sp, #20]
 8018930:	4619      	mov	r1, r3
 8018932:	f04f 0c0a 	mov.w	ip, #10
 8018936:	4620      	mov	r0, r4
 8018938:	f810 2b01 	ldrb.w	r2, [r0], #1
 801893c:	3a30      	subs	r2, #48	@ 0x30
 801893e:	2a09      	cmp	r2, #9
 8018940:	d903      	bls.n	801894a <_svfiprintf_r+0x1a6>
 8018942:	2b00      	cmp	r3, #0
 8018944:	d0c6      	beq.n	80188d4 <_svfiprintf_r+0x130>
 8018946:	9105      	str	r1, [sp, #20]
 8018948:	e7c4      	b.n	80188d4 <_svfiprintf_r+0x130>
 801894a:	fb0c 2101 	mla	r1, ip, r1, r2
 801894e:	4604      	mov	r4, r0
 8018950:	2301      	movs	r3, #1
 8018952:	e7f0      	b.n	8018936 <_svfiprintf_r+0x192>
 8018954:	ab03      	add	r3, sp, #12
 8018956:	9300      	str	r3, [sp, #0]
 8018958:	462a      	mov	r2, r5
 801895a:	4b0e      	ldr	r3, [pc, #56]	@ (8018994 <_svfiprintf_r+0x1f0>)
 801895c:	a904      	add	r1, sp, #16
 801895e:	4638      	mov	r0, r7
 8018960:	f7fd fe50 	bl	8016604 <_printf_float>
 8018964:	1c42      	adds	r2, r0, #1
 8018966:	4606      	mov	r6, r0
 8018968:	d1d6      	bne.n	8018918 <_svfiprintf_r+0x174>
 801896a:	89ab      	ldrh	r3, [r5, #12]
 801896c:	065b      	lsls	r3, r3, #25
 801896e:	f53f af2d 	bmi.w	80187cc <_svfiprintf_r+0x28>
 8018972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018974:	e72c      	b.n	80187d0 <_svfiprintf_r+0x2c>
 8018976:	ab03      	add	r3, sp, #12
 8018978:	9300      	str	r3, [sp, #0]
 801897a:	462a      	mov	r2, r5
 801897c:	4b05      	ldr	r3, [pc, #20]	@ (8018994 <_svfiprintf_r+0x1f0>)
 801897e:	a904      	add	r1, sp, #16
 8018980:	4638      	mov	r0, r7
 8018982:	f7fe f8d7 	bl	8016b34 <_printf_i>
 8018986:	e7ed      	b.n	8018964 <_svfiprintf_r+0x1c0>
 8018988:	0801aed8 	.word	0x0801aed8
 801898c:	0801aee2 	.word	0x0801aee2
 8018990:	08016605 	.word	0x08016605
 8018994:	080186ed 	.word	0x080186ed
 8018998:	0801aede 	.word	0x0801aede

0801899c <__sflush_r>:
 801899c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80189a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189a4:	0716      	lsls	r6, r2, #28
 80189a6:	4605      	mov	r5, r0
 80189a8:	460c      	mov	r4, r1
 80189aa:	d454      	bmi.n	8018a56 <__sflush_r+0xba>
 80189ac:	684b      	ldr	r3, [r1, #4]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	dc02      	bgt.n	80189b8 <__sflush_r+0x1c>
 80189b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	dd48      	ble.n	8018a4a <__sflush_r+0xae>
 80189b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80189ba:	2e00      	cmp	r6, #0
 80189bc:	d045      	beq.n	8018a4a <__sflush_r+0xae>
 80189be:	2300      	movs	r3, #0
 80189c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80189c4:	682f      	ldr	r7, [r5, #0]
 80189c6:	6a21      	ldr	r1, [r4, #32]
 80189c8:	602b      	str	r3, [r5, #0]
 80189ca:	d030      	beq.n	8018a2e <__sflush_r+0x92>
 80189cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80189ce:	89a3      	ldrh	r3, [r4, #12]
 80189d0:	0759      	lsls	r1, r3, #29
 80189d2:	d505      	bpl.n	80189e0 <__sflush_r+0x44>
 80189d4:	6863      	ldr	r3, [r4, #4]
 80189d6:	1ad2      	subs	r2, r2, r3
 80189d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80189da:	b10b      	cbz	r3, 80189e0 <__sflush_r+0x44>
 80189dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80189de:	1ad2      	subs	r2, r2, r3
 80189e0:	2300      	movs	r3, #0
 80189e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80189e4:	6a21      	ldr	r1, [r4, #32]
 80189e6:	4628      	mov	r0, r5
 80189e8:	47b0      	blx	r6
 80189ea:	1c43      	adds	r3, r0, #1
 80189ec:	89a3      	ldrh	r3, [r4, #12]
 80189ee:	d106      	bne.n	80189fe <__sflush_r+0x62>
 80189f0:	6829      	ldr	r1, [r5, #0]
 80189f2:	291d      	cmp	r1, #29
 80189f4:	d82b      	bhi.n	8018a4e <__sflush_r+0xb2>
 80189f6:	4a2a      	ldr	r2, [pc, #168]	@ (8018aa0 <__sflush_r+0x104>)
 80189f8:	410a      	asrs	r2, r1
 80189fa:	07d6      	lsls	r6, r2, #31
 80189fc:	d427      	bmi.n	8018a4e <__sflush_r+0xb2>
 80189fe:	2200      	movs	r2, #0
 8018a00:	6062      	str	r2, [r4, #4]
 8018a02:	04d9      	lsls	r1, r3, #19
 8018a04:	6922      	ldr	r2, [r4, #16]
 8018a06:	6022      	str	r2, [r4, #0]
 8018a08:	d504      	bpl.n	8018a14 <__sflush_r+0x78>
 8018a0a:	1c42      	adds	r2, r0, #1
 8018a0c:	d101      	bne.n	8018a12 <__sflush_r+0x76>
 8018a0e:	682b      	ldr	r3, [r5, #0]
 8018a10:	b903      	cbnz	r3, 8018a14 <__sflush_r+0x78>
 8018a12:	6560      	str	r0, [r4, #84]	@ 0x54
 8018a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a16:	602f      	str	r7, [r5, #0]
 8018a18:	b1b9      	cbz	r1, 8018a4a <__sflush_r+0xae>
 8018a1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018a1e:	4299      	cmp	r1, r3
 8018a20:	d002      	beq.n	8018a28 <__sflush_r+0x8c>
 8018a22:	4628      	mov	r0, r5
 8018a24:	f7ff f9e0 	bl	8017de8 <_free_r>
 8018a28:	2300      	movs	r3, #0
 8018a2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8018a2c:	e00d      	b.n	8018a4a <__sflush_r+0xae>
 8018a2e:	2301      	movs	r3, #1
 8018a30:	4628      	mov	r0, r5
 8018a32:	47b0      	blx	r6
 8018a34:	4602      	mov	r2, r0
 8018a36:	1c50      	adds	r0, r2, #1
 8018a38:	d1c9      	bne.n	80189ce <__sflush_r+0x32>
 8018a3a:	682b      	ldr	r3, [r5, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d0c6      	beq.n	80189ce <__sflush_r+0x32>
 8018a40:	2b1d      	cmp	r3, #29
 8018a42:	d001      	beq.n	8018a48 <__sflush_r+0xac>
 8018a44:	2b16      	cmp	r3, #22
 8018a46:	d11e      	bne.n	8018a86 <__sflush_r+0xea>
 8018a48:	602f      	str	r7, [r5, #0]
 8018a4a:	2000      	movs	r0, #0
 8018a4c:	e022      	b.n	8018a94 <__sflush_r+0xf8>
 8018a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a52:	b21b      	sxth	r3, r3
 8018a54:	e01b      	b.n	8018a8e <__sflush_r+0xf2>
 8018a56:	690f      	ldr	r7, [r1, #16]
 8018a58:	2f00      	cmp	r7, #0
 8018a5a:	d0f6      	beq.n	8018a4a <__sflush_r+0xae>
 8018a5c:	0793      	lsls	r3, r2, #30
 8018a5e:	680e      	ldr	r6, [r1, #0]
 8018a60:	bf08      	it	eq
 8018a62:	694b      	ldreq	r3, [r1, #20]
 8018a64:	600f      	str	r7, [r1, #0]
 8018a66:	bf18      	it	ne
 8018a68:	2300      	movne	r3, #0
 8018a6a:	eba6 0807 	sub.w	r8, r6, r7
 8018a6e:	608b      	str	r3, [r1, #8]
 8018a70:	f1b8 0f00 	cmp.w	r8, #0
 8018a74:	dde9      	ble.n	8018a4a <__sflush_r+0xae>
 8018a76:	6a21      	ldr	r1, [r4, #32]
 8018a78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018a7a:	4643      	mov	r3, r8
 8018a7c:	463a      	mov	r2, r7
 8018a7e:	4628      	mov	r0, r5
 8018a80:	47b0      	blx	r6
 8018a82:	2800      	cmp	r0, #0
 8018a84:	dc08      	bgt.n	8018a98 <__sflush_r+0xfc>
 8018a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a8e:	81a3      	strh	r3, [r4, #12]
 8018a90:	f04f 30ff 	mov.w	r0, #4294967295
 8018a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a98:	4407      	add	r7, r0
 8018a9a:	eba8 0800 	sub.w	r8, r8, r0
 8018a9e:	e7e7      	b.n	8018a70 <__sflush_r+0xd4>
 8018aa0:	dfbffffe 	.word	0xdfbffffe

08018aa4 <_fflush_r>:
 8018aa4:	b538      	push	{r3, r4, r5, lr}
 8018aa6:	690b      	ldr	r3, [r1, #16]
 8018aa8:	4605      	mov	r5, r0
 8018aaa:	460c      	mov	r4, r1
 8018aac:	b913      	cbnz	r3, 8018ab4 <_fflush_r+0x10>
 8018aae:	2500      	movs	r5, #0
 8018ab0:	4628      	mov	r0, r5
 8018ab2:	bd38      	pop	{r3, r4, r5, pc}
 8018ab4:	b118      	cbz	r0, 8018abe <_fflush_r+0x1a>
 8018ab6:	6a03      	ldr	r3, [r0, #32]
 8018ab8:	b90b      	cbnz	r3, 8018abe <_fflush_r+0x1a>
 8018aba:	f7fe f9e7 	bl	8016e8c <__sinit>
 8018abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d0f3      	beq.n	8018aae <_fflush_r+0xa>
 8018ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018ac8:	07d0      	lsls	r0, r2, #31
 8018aca:	d404      	bmi.n	8018ad6 <_fflush_r+0x32>
 8018acc:	0599      	lsls	r1, r3, #22
 8018ace:	d402      	bmi.n	8018ad6 <_fflush_r+0x32>
 8018ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ad2:	f7fe fb22 	bl	801711a <__retarget_lock_acquire_recursive>
 8018ad6:	4628      	mov	r0, r5
 8018ad8:	4621      	mov	r1, r4
 8018ada:	f7ff ff5f 	bl	801899c <__sflush_r>
 8018ade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018ae0:	07da      	lsls	r2, r3, #31
 8018ae2:	4605      	mov	r5, r0
 8018ae4:	d4e4      	bmi.n	8018ab0 <_fflush_r+0xc>
 8018ae6:	89a3      	ldrh	r3, [r4, #12]
 8018ae8:	059b      	lsls	r3, r3, #22
 8018aea:	d4e1      	bmi.n	8018ab0 <_fflush_r+0xc>
 8018aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018aee:	f7fe fb15 	bl	801711c <__retarget_lock_release_recursive>
 8018af2:	e7dd      	b.n	8018ab0 <_fflush_r+0xc>

08018af4 <memmove>:
 8018af4:	4288      	cmp	r0, r1
 8018af6:	b510      	push	{r4, lr}
 8018af8:	eb01 0402 	add.w	r4, r1, r2
 8018afc:	d902      	bls.n	8018b04 <memmove+0x10>
 8018afe:	4284      	cmp	r4, r0
 8018b00:	4623      	mov	r3, r4
 8018b02:	d807      	bhi.n	8018b14 <memmove+0x20>
 8018b04:	1e43      	subs	r3, r0, #1
 8018b06:	42a1      	cmp	r1, r4
 8018b08:	d008      	beq.n	8018b1c <memmove+0x28>
 8018b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018b12:	e7f8      	b.n	8018b06 <memmove+0x12>
 8018b14:	4402      	add	r2, r0
 8018b16:	4601      	mov	r1, r0
 8018b18:	428a      	cmp	r2, r1
 8018b1a:	d100      	bne.n	8018b1e <memmove+0x2a>
 8018b1c:	bd10      	pop	{r4, pc}
 8018b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018b26:	e7f7      	b.n	8018b18 <memmove+0x24>

08018b28 <_sbrk_r>:
 8018b28:	b538      	push	{r3, r4, r5, lr}
 8018b2a:	4d06      	ldr	r5, [pc, #24]	@ (8018b44 <_sbrk_r+0x1c>)
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	4604      	mov	r4, r0
 8018b30:	4608      	mov	r0, r1
 8018b32:	602b      	str	r3, [r5, #0]
 8018b34:	f7e8 fca0 	bl	8001478 <_sbrk>
 8018b38:	1c43      	adds	r3, r0, #1
 8018b3a:	d102      	bne.n	8018b42 <_sbrk_r+0x1a>
 8018b3c:	682b      	ldr	r3, [r5, #0]
 8018b3e:	b103      	cbz	r3, 8018b42 <_sbrk_r+0x1a>
 8018b40:	6023      	str	r3, [r4, #0]
 8018b42:	bd38      	pop	{r3, r4, r5, pc}
 8018b44:	20009538 	.word	0x20009538

08018b48 <__assert_func>:
 8018b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b4a:	4614      	mov	r4, r2
 8018b4c:	461a      	mov	r2, r3
 8018b4e:	4b09      	ldr	r3, [pc, #36]	@ (8018b74 <__assert_func+0x2c>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	4605      	mov	r5, r0
 8018b54:	68d8      	ldr	r0, [r3, #12]
 8018b56:	b954      	cbnz	r4, 8018b6e <__assert_func+0x26>
 8018b58:	4b07      	ldr	r3, [pc, #28]	@ (8018b78 <__assert_func+0x30>)
 8018b5a:	461c      	mov	r4, r3
 8018b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b60:	9100      	str	r1, [sp, #0]
 8018b62:	462b      	mov	r3, r5
 8018b64:	4905      	ldr	r1, [pc, #20]	@ (8018b7c <__assert_func+0x34>)
 8018b66:	f000 f86f 	bl	8018c48 <fiprintf>
 8018b6a:	f000 f87f 	bl	8018c6c <abort>
 8018b6e:	4b04      	ldr	r3, [pc, #16]	@ (8018b80 <__assert_func+0x38>)
 8018b70:	e7f4      	b.n	8018b5c <__assert_func+0x14>
 8018b72:	bf00      	nop
 8018b74:	20001204 	.word	0x20001204
 8018b78:	0801af2e 	.word	0x0801af2e
 8018b7c:	0801af00 	.word	0x0801af00
 8018b80:	0801aef3 	.word	0x0801aef3

08018b84 <_calloc_r>:
 8018b84:	b570      	push	{r4, r5, r6, lr}
 8018b86:	fba1 5402 	umull	r5, r4, r1, r2
 8018b8a:	b93c      	cbnz	r4, 8018b9c <_calloc_r+0x18>
 8018b8c:	4629      	mov	r1, r5
 8018b8e:	f7ff f99f 	bl	8017ed0 <_malloc_r>
 8018b92:	4606      	mov	r6, r0
 8018b94:	b928      	cbnz	r0, 8018ba2 <_calloc_r+0x1e>
 8018b96:	2600      	movs	r6, #0
 8018b98:	4630      	mov	r0, r6
 8018b9a:	bd70      	pop	{r4, r5, r6, pc}
 8018b9c:	220c      	movs	r2, #12
 8018b9e:	6002      	str	r2, [r0, #0]
 8018ba0:	e7f9      	b.n	8018b96 <_calloc_r+0x12>
 8018ba2:	462a      	mov	r2, r5
 8018ba4:	4621      	mov	r1, r4
 8018ba6:	f7fe fa2b 	bl	8017000 <memset>
 8018baa:	e7f5      	b.n	8018b98 <_calloc_r+0x14>

08018bac <__ascii_mbtowc>:
 8018bac:	b082      	sub	sp, #8
 8018bae:	b901      	cbnz	r1, 8018bb2 <__ascii_mbtowc+0x6>
 8018bb0:	a901      	add	r1, sp, #4
 8018bb2:	b142      	cbz	r2, 8018bc6 <__ascii_mbtowc+0x1a>
 8018bb4:	b14b      	cbz	r3, 8018bca <__ascii_mbtowc+0x1e>
 8018bb6:	7813      	ldrb	r3, [r2, #0]
 8018bb8:	600b      	str	r3, [r1, #0]
 8018bba:	7812      	ldrb	r2, [r2, #0]
 8018bbc:	1e10      	subs	r0, r2, #0
 8018bbe:	bf18      	it	ne
 8018bc0:	2001      	movne	r0, #1
 8018bc2:	b002      	add	sp, #8
 8018bc4:	4770      	bx	lr
 8018bc6:	4610      	mov	r0, r2
 8018bc8:	e7fb      	b.n	8018bc2 <__ascii_mbtowc+0x16>
 8018bca:	f06f 0001 	mvn.w	r0, #1
 8018bce:	e7f8      	b.n	8018bc2 <__ascii_mbtowc+0x16>

08018bd0 <_realloc_r>:
 8018bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd4:	4680      	mov	r8, r0
 8018bd6:	4615      	mov	r5, r2
 8018bd8:	460c      	mov	r4, r1
 8018bda:	b921      	cbnz	r1, 8018be6 <_realloc_r+0x16>
 8018bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018be0:	4611      	mov	r1, r2
 8018be2:	f7ff b975 	b.w	8017ed0 <_malloc_r>
 8018be6:	b92a      	cbnz	r2, 8018bf4 <_realloc_r+0x24>
 8018be8:	f7ff f8fe 	bl	8017de8 <_free_r>
 8018bec:	2400      	movs	r4, #0
 8018bee:	4620      	mov	r0, r4
 8018bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bf4:	f000 f841 	bl	8018c7a <_malloc_usable_size_r>
 8018bf8:	4285      	cmp	r5, r0
 8018bfa:	4606      	mov	r6, r0
 8018bfc:	d802      	bhi.n	8018c04 <_realloc_r+0x34>
 8018bfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018c02:	d8f4      	bhi.n	8018bee <_realloc_r+0x1e>
 8018c04:	4629      	mov	r1, r5
 8018c06:	4640      	mov	r0, r8
 8018c08:	f7ff f962 	bl	8017ed0 <_malloc_r>
 8018c0c:	4607      	mov	r7, r0
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d0ec      	beq.n	8018bec <_realloc_r+0x1c>
 8018c12:	42b5      	cmp	r5, r6
 8018c14:	462a      	mov	r2, r5
 8018c16:	4621      	mov	r1, r4
 8018c18:	bf28      	it	cs
 8018c1a:	4632      	movcs	r2, r6
 8018c1c:	f7fe fa87 	bl	801712e <memcpy>
 8018c20:	4621      	mov	r1, r4
 8018c22:	4640      	mov	r0, r8
 8018c24:	f7ff f8e0 	bl	8017de8 <_free_r>
 8018c28:	463c      	mov	r4, r7
 8018c2a:	e7e0      	b.n	8018bee <_realloc_r+0x1e>

08018c2c <__ascii_wctomb>:
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	4608      	mov	r0, r1
 8018c30:	b141      	cbz	r1, 8018c44 <__ascii_wctomb+0x18>
 8018c32:	2aff      	cmp	r2, #255	@ 0xff
 8018c34:	d904      	bls.n	8018c40 <__ascii_wctomb+0x14>
 8018c36:	228a      	movs	r2, #138	@ 0x8a
 8018c38:	601a      	str	r2, [r3, #0]
 8018c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c3e:	4770      	bx	lr
 8018c40:	700a      	strb	r2, [r1, #0]
 8018c42:	2001      	movs	r0, #1
 8018c44:	4770      	bx	lr
	...

08018c48 <fiprintf>:
 8018c48:	b40e      	push	{r1, r2, r3}
 8018c4a:	b503      	push	{r0, r1, lr}
 8018c4c:	4601      	mov	r1, r0
 8018c4e:	ab03      	add	r3, sp, #12
 8018c50:	4805      	ldr	r0, [pc, #20]	@ (8018c68 <fiprintf+0x20>)
 8018c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c56:	6800      	ldr	r0, [r0, #0]
 8018c58:	9301      	str	r3, [sp, #4]
 8018c5a:	f000 f83f 	bl	8018cdc <_vfiprintf_r>
 8018c5e:	b002      	add	sp, #8
 8018c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c64:	b003      	add	sp, #12
 8018c66:	4770      	bx	lr
 8018c68:	20001204 	.word	0x20001204

08018c6c <abort>:
 8018c6c:	b508      	push	{r3, lr}
 8018c6e:	2006      	movs	r0, #6
 8018c70:	f000 fa08 	bl	8019084 <raise>
 8018c74:	2001      	movs	r0, #1
 8018c76:	f7e8 fb87 	bl	8001388 <_exit>

08018c7a <_malloc_usable_size_r>:
 8018c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c7e:	1f18      	subs	r0, r3, #4
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	bfbc      	itt	lt
 8018c84:	580b      	ldrlt	r3, [r1, r0]
 8018c86:	18c0      	addlt	r0, r0, r3
 8018c88:	4770      	bx	lr

08018c8a <__sfputc_r>:
 8018c8a:	6893      	ldr	r3, [r2, #8]
 8018c8c:	3b01      	subs	r3, #1
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	b410      	push	{r4}
 8018c92:	6093      	str	r3, [r2, #8]
 8018c94:	da08      	bge.n	8018ca8 <__sfputc_r+0x1e>
 8018c96:	6994      	ldr	r4, [r2, #24]
 8018c98:	42a3      	cmp	r3, r4
 8018c9a:	db01      	blt.n	8018ca0 <__sfputc_r+0x16>
 8018c9c:	290a      	cmp	r1, #10
 8018c9e:	d103      	bne.n	8018ca8 <__sfputc_r+0x1e>
 8018ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ca4:	f000 b932 	b.w	8018f0c <__swbuf_r>
 8018ca8:	6813      	ldr	r3, [r2, #0]
 8018caa:	1c58      	adds	r0, r3, #1
 8018cac:	6010      	str	r0, [r2, #0]
 8018cae:	7019      	strb	r1, [r3, #0]
 8018cb0:	4608      	mov	r0, r1
 8018cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cb6:	4770      	bx	lr

08018cb8 <__sfputs_r>:
 8018cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cba:	4606      	mov	r6, r0
 8018cbc:	460f      	mov	r7, r1
 8018cbe:	4614      	mov	r4, r2
 8018cc0:	18d5      	adds	r5, r2, r3
 8018cc2:	42ac      	cmp	r4, r5
 8018cc4:	d101      	bne.n	8018cca <__sfputs_r+0x12>
 8018cc6:	2000      	movs	r0, #0
 8018cc8:	e007      	b.n	8018cda <__sfputs_r+0x22>
 8018cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cce:	463a      	mov	r2, r7
 8018cd0:	4630      	mov	r0, r6
 8018cd2:	f7ff ffda 	bl	8018c8a <__sfputc_r>
 8018cd6:	1c43      	adds	r3, r0, #1
 8018cd8:	d1f3      	bne.n	8018cc2 <__sfputs_r+0xa>
 8018cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018cdc <_vfiprintf_r>:
 8018cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce0:	460d      	mov	r5, r1
 8018ce2:	b09d      	sub	sp, #116	@ 0x74
 8018ce4:	4614      	mov	r4, r2
 8018ce6:	4698      	mov	r8, r3
 8018ce8:	4606      	mov	r6, r0
 8018cea:	b118      	cbz	r0, 8018cf4 <_vfiprintf_r+0x18>
 8018cec:	6a03      	ldr	r3, [r0, #32]
 8018cee:	b90b      	cbnz	r3, 8018cf4 <_vfiprintf_r+0x18>
 8018cf0:	f7fe f8cc 	bl	8016e8c <__sinit>
 8018cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018cf6:	07d9      	lsls	r1, r3, #31
 8018cf8:	d405      	bmi.n	8018d06 <_vfiprintf_r+0x2a>
 8018cfa:	89ab      	ldrh	r3, [r5, #12]
 8018cfc:	059a      	lsls	r2, r3, #22
 8018cfe:	d402      	bmi.n	8018d06 <_vfiprintf_r+0x2a>
 8018d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d02:	f7fe fa0a 	bl	801711a <__retarget_lock_acquire_recursive>
 8018d06:	89ab      	ldrh	r3, [r5, #12]
 8018d08:	071b      	lsls	r3, r3, #28
 8018d0a:	d501      	bpl.n	8018d10 <_vfiprintf_r+0x34>
 8018d0c:	692b      	ldr	r3, [r5, #16]
 8018d0e:	b99b      	cbnz	r3, 8018d38 <_vfiprintf_r+0x5c>
 8018d10:	4629      	mov	r1, r5
 8018d12:	4630      	mov	r0, r6
 8018d14:	f000 f938 	bl	8018f88 <__swsetup_r>
 8018d18:	b170      	cbz	r0, 8018d38 <_vfiprintf_r+0x5c>
 8018d1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d1c:	07dc      	lsls	r4, r3, #31
 8018d1e:	d504      	bpl.n	8018d2a <_vfiprintf_r+0x4e>
 8018d20:	f04f 30ff 	mov.w	r0, #4294967295
 8018d24:	b01d      	add	sp, #116	@ 0x74
 8018d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2a:	89ab      	ldrh	r3, [r5, #12]
 8018d2c:	0598      	lsls	r0, r3, #22
 8018d2e:	d4f7      	bmi.n	8018d20 <_vfiprintf_r+0x44>
 8018d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d32:	f7fe f9f3 	bl	801711c <__retarget_lock_release_recursive>
 8018d36:	e7f3      	b.n	8018d20 <_vfiprintf_r+0x44>
 8018d38:	2300      	movs	r3, #0
 8018d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d3c:	2320      	movs	r3, #32
 8018d3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d46:	2330      	movs	r3, #48	@ 0x30
 8018d48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018ef8 <_vfiprintf_r+0x21c>
 8018d4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018d50:	f04f 0901 	mov.w	r9, #1
 8018d54:	4623      	mov	r3, r4
 8018d56:	469a      	mov	sl, r3
 8018d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d5c:	b10a      	cbz	r2, 8018d62 <_vfiprintf_r+0x86>
 8018d5e:	2a25      	cmp	r2, #37	@ 0x25
 8018d60:	d1f9      	bne.n	8018d56 <_vfiprintf_r+0x7a>
 8018d62:	ebba 0b04 	subs.w	fp, sl, r4
 8018d66:	d00b      	beq.n	8018d80 <_vfiprintf_r+0xa4>
 8018d68:	465b      	mov	r3, fp
 8018d6a:	4622      	mov	r2, r4
 8018d6c:	4629      	mov	r1, r5
 8018d6e:	4630      	mov	r0, r6
 8018d70:	f7ff ffa2 	bl	8018cb8 <__sfputs_r>
 8018d74:	3001      	adds	r0, #1
 8018d76:	f000 80a7 	beq.w	8018ec8 <_vfiprintf_r+0x1ec>
 8018d7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d7c:	445a      	add	r2, fp
 8018d7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d80:	f89a 3000 	ldrb.w	r3, [sl]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	f000 809f 	beq.w	8018ec8 <_vfiprintf_r+0x1ec>
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8018d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d94:	f10a 0a01 	add.w	sl, sl, #1
 8018d98:	9304      	str	r3, [sp, #16]
 8018d9a:	9307      	str	r3, [sp, #28]
 8018d9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018da0:	931a      	str	r3, [sp, #104]	@ 0x68
 8018da2:	4654      	mov	r4, sl
 8018da4:	2205      	movs	r2, #5
 8018da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018daa:	4853      	ldr	r0, [pc, #332]	@ (8018ef8 <_vfiprintf_r+0x21c>)
 8018dac:	f7e7 fa30 	bl	8000210 <memchr>
 8018db0:	9a04      	ldr	r2, [sp, #16]
 8018db2:	b9d8      	cbnz	r0, 8018dec <_vfiprintf_r+0x110>
 8018db4:	06d1      	lsls	r1, r2, #27
 8018db6:	bf44      	itt	mi
 8018db8:	2320      	movmi	r3, #32
 8018dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018dbe:	0713      	lsls	r3, r2, #28
 8018dc0:	bf44      	itt	mi
 8018dc2:	232b      	movmi	r3, #43	@ 0x2b
 8018dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8018dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8018dce:	d015      	beq.n	8018dfc <_vfiprintf_r+0x120>
 8018dd0:	9a07      	ldr	r2, [sp, #28]
 8018dd2:	4654      	mov	r4, sl
 8018dd4:	2000      	movs	r0, #0
 8018dd6:	f04f 0c0a 	mov.w	ip, #10
 8018dda:	4621      	mov	r1, r4
 8018ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018de0:	3b30      	subs	r3, #48	@ 0x30
 8018de2:	2b09      	cmp	r3, #9
 8018de4:	d94b      	bls.n	8018e7e <_vfiprintf_r+0x1a2>
 8018de6:	b1b0      	cbz	r0, 8018e16 <_vfiprintf_r+0x13a>
 8018de8:	9207      	str	r2, [sp, #28]
 8018dea:	e014      	b.n	8018e16 <_vfiprintf_r+0x13a>
 8018dec:	eba0 0308 	sub.w	r3, r0, r8
 8018df0:	fa09 f303 	lsl.w	r3, r9, r3
 8018df4:	4313      	orrs	r3, r2
 8018df6:	9304      	str	r3, [sp, #16]
 8018df8:	46a2      	mov	sl, r4
 8018dfa:	e7d2      	b.n	8018da2 <_vfiprintf_r+0xc6>
 8018dfc:	9b03      	ldr	r3, [sp, #12]
 8018dfe:	1d19      	adds	r1, r3, #4
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	9103      	str	r1, [sp, #12]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	bfbb      	ittet	lt
 8018e08:	425b      	neglt	r3, r3
 8018e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8018e0e:	9307      	strge	r3, [sp, #28]
 8018e10:	9307      	strlt	r3, [sp, #28]
 8018e12:	bfb8      	it	lt
 8018e14:	9204      	strlt	r2, [sp, #16]
 8018e16:	7823      	ldrb	r3, [r4, #0]
 8018e18:	2b2e      	cmp	r3, #46	@ 0x2e
 8018e1a:	d10a      	bne.n	8018e32 <_vfiprintf_r+0x156>
 8018e1c:	7863      	ldrb	r3, [r4, #1]
 8018e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e20:	d132      	bne.n	8018e88 <_vfiprintf_r+0x1ac>
 8018e22:	9b03      	ldr	r3, [sp, #12]
 8018e24:	1d1a      	adds	r2, r3, #4
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	9203      	str	r2, [sp, #12]
 8018e2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018e2e:	3402      	adds	r4, #2
 8018e30:	9305      	str	r3, [sp, #20]
 8018e32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018f08 <_vfiprintf_r+0x22c>
 8018e36:	7821      	ldrb	r1, [r4, #0]
 8018e38:	2203      	movs	r2, #3
 8018e3a:	4650      	mov	r0, sl
 8018e3c:	f7e7 f9e8 	bl	8000210 <memchr>
 8018e40:	b138      	cbz	r0, 8018e52 <_vfiprintf_r+0x176>
 8018e42:	9b04      	ldr	r3, [sp, #16]
 8018e44:	eba0 000a 	sub.w	r0, r0, sl
 8018e48:	2240      	movs	r2, #64	@ 0x40
 8018e4a:	4082      	lsls	r2, r0
 8018e4c:	4313      	orrs	r3, r2
 8018e4e:	3401      	adds	r4, #1
 8018e50:	9304      	str	r3, [sp, #16]
 8018e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e56:	4829      	ldr	r0, [pc, #164]	@ (8018efc <_vfiprintf_r+0x220>)
 8018e58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018e5c:	2206      	movs	r2, #6
 8018e5e:	f7e7 f9d7 	bl	8000210 <memchr>
 8018e62:	2800      	cmp	r0, #0
 8018e64:	d03f      	beq.n	8018ee6 <_vfiprintf_r+0x20a>
 8018e66:	4b26      	ldr	r3, [pc, #152]	@ (8018f00 <_vfiprintf_r+0x224>)
 8018e68:	bb1b      	cbnz	r3, 8018eb2 <_vfiprintf_r+0x1d6>
 8018e6a:	9b03      	ldr	r3, [sp, #12]
 8018e6c:	3307      	adds	r3, #7
 8018e6e:	f023 0307 	bic.w	r3, r3, #7
 8018e72:	3308      	adds	r3, #8
 8018e74:	9303      	str	r3, [sp, #12]
 8018e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e78:	443b      	add	r3, r7
 8018e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e7c:	e76a      	b.n	8018d54 <_vfiprintf_r+0x78>
 8018e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e82:	460c      	mov	r4, r1
 8018e84:	2001      	movs	r0, #1
 8018e86:	e7a8      	b.n	8018dda <_vfiprintf_r+0xfe>
 8018e88:	2300      	movs	r3, #0
 8018e8a:	3401      	adds	r4, #1
 8018e8c:	9305      	str	r3, [sp, #20]
 8018e8e:	4619      	mov	r1, r3
 8018e90:	f04f 0c0a 	mov.w	ip, #10
 8018e94:	4620      	mov	r0, r4
 8018e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e9a:	3a30      	subs	r2, #48	@ 0x30
 8018e9c:	2a09      	cmp	r2, #9
 8018e9e:	d903      	bls.n	8018ea8 <_vfiprintf_r+0x1cc>
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d0c6      	beq.n	8018e32 <_vfiprintf_r+0x156>
 8018ea4:	9105      	str	r1, [sp, #20]
 8018ea6:	e7c4      	b.n	8018e32 <_vfiprintf_r+0x156>
 8018ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018eac:	4604      	mov	r4, r0
 8018eae:	2301      	movs	r3, #1
 8018eb0:	e7f0      	b.n	8018e94 <_vfiprintf_r+0x1b8>
 8018eb2:	ab03      	add	r3, sp, #12
 8018eb4:	9300      	str	r3, [sp, #0]
 8018eb6:	462a      	mov	r2, r5
 8018eb8:	4b12      	ldr	r3, [pc, #72]	@ (8018f04 <_vfiprintf_r+0x228>)
 8018eba:	a904      	add	r1, sp, #16
 8018ebc:	4630      	mov	r0, r6
 8018ebe:	f7fd fba1 	bl	8016604 <_printf_float>
 8018ec2:	4607      	mov	r7, r0
 8018ec4:	1c78      	adds	r0, r7, #1
 8018ec6:	d1d6      	bne.n	8018e76 <_vfiprintf_r+0x19a>
 8018ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018eca:	07d9      	lsls	r1, r3, #31
 8018ecc:	d405      	bmi.n	8018eda <_vfiprintf_r+0x1fe>
 8018ece:	89ab      	ldrh	r3, [r5, #12]
 8018ed0:	059a      	lsls	r2, r3, #22
 8018ed2:	d402      	bmi.n	8018eda <_vfiprintf_r+0x1fe>
 8018ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ed6:	f7fe f921 	bl	801711c <__retarget_lock_release_recursive>
 8018eda:	89ab      	ldrh	r3, [r5, #12]
 8018edc:	065b      	lsls	r3, r3, #25
 8018ede:	f53f af1f 	bmi.w	8018d20 <_vfiprintf_r+0x44>
 8018ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ee4:	e71e      	b.n	8018d24 <_vfiprintf_r+0x48>
 8018ee6:	ab03      	add	r3, sp, #12
 8018ee8:	9300      	str	r3, [sp, #0]
 8018eea:	462a      	mov	r2, r5
 8018eec:	4b05      	ldr	r3, [pc, #20]	@ (8018f04 <_vfiprintf_r+0x228>)
 8018eee:	a904      	add	r1, sp, #16
 8018ef0:	4630      	mov	r0, r6
 8018ef2:	f7fd fe1f 	bl	8016b34 <_printf_i>
 8018ef6:	e7e4      	b.n	8018ec2 <_vfiprintf_r+0x1e6>
 8018ef8:	0801aed8 	.word	0x0801aed8
 8018efc:	0801aee2 	.word	0x0801aee2
 8018f00:	08016605 	.word	0x08016605
 8018f04:	08018cb9 	.word	0x08018cb9
 8018f08:	0801aede 	.word	0x0801aede

08018f0c <__swbuf_r>:
 8018f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f0e:	460e      	mov	r6, r1
 8018f10:	4614      	mov	r4, r2
 8018f12:	4605      	mov	r5, r0
 8018f14:	b118      	cbz	r0, 8018f1e <__swbuf_r+0x12>
 8018f16:	6a03      	ldr	r3, [r0, #32]
 8018f18:	b90b      	cbnz	r3, 8018f1e <__swbuf_r+0x12>
 8018f1a:	f7fd ffb7 	bl	8016e8c <__sinit>
 8018f1e:	69a3      	ldr	r3, [r4, #24]
 8018f20:	60a3      	str	r3, [r4, #8]
 8018f22:	89a3      	ldrh	r3, [r4, #12]
 8018f24:	071a      	lsls	r2, r3, #28
 8018f26:	d501      	bpl.n	8018f2c <__swbuf_r+0x20>
 8018f28:	6923      	ldr	r3, [r4, #16]
 8018f2a:	b943      	cbnz	r3, 8018f3e <__swbuf_r+0x32>
 8018f2c:	4621      	mov	r1, r4
 8018f2e:	4628      	mov	r0, r5
 8018f30:	f000 f82a 	bl	8018f88 <__swsetup_r>
 8018f34:	b118      	cbz	r0, 8018f3e <__swbuf_r+0x32>
 8018f36:	f04f 37ff 	mov.w	r7, #4294967295
 8018f3a:	4638      	mov	r0, r7
 8018f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f3e:	6823      	ldr	r3, [r4, #0]
 8018f40:	6922      	ldr	r2, [r4, #16]
 8018f42:	1a98      	subs	r0, r3, r2
 8018f44:	6963      	ldr	r3, [r4, #20]
 8018f46:	b2f6      	uxtb	r6, r6
 8018f48:	4283      	cmp	r3, r0
 8018f4a:	4637      	mov	r7, r6
 8018f4c:	dc05      	bgt.n	8018f5a <__swbuf_r+0x4e>
 8018f4e:	4621      	mov	r1, r4
 8018f50:	4628      	mov	r0, r5
 8018f52:	f7ff fda7 	bl	8018aa4 <_fflush_r>
 8018f56:	2800      	cmp	r0, #0
 8018f58:	d1ed      	bne.n	8018f36 <__swbuf_r+0x2a>
 8018f5a:	68a3      	ldr	r3, [r4, #8]
 8018f5c:	3b01      	subs	r3, #1
 8018f5e:	60a3      	str	r3, [r4, #8]
 8018f60:	6823      	ldr	r3, [r4, #0]
 8018f62:	1c5a      	adds	r2, r3, #1
 8018f64:	6022      	str	r2, [r4, #0]
 8018f66:	701e      	strb	r6, [r3, #0]
 8018f68:	6962      	ldr	r2, [r4, #20]
 8018f6a:	1c43      	adds	r3, r0, #1
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d004      	beq.n	8018f7a <__swbuf_r+0x6e>
 8018f70:	89a3      	ldrh	r3, [r4, #12]
 8018f72:	07db      	lsls	r3, r3, #31
 8018f74:	d5e1      	bpl.n	8018f3a <__swbuf_r+0x2e>
 8018f76:	2e0a      	cmp	r6, #10
 8018f78:	d1df      	bne.n	8018f3a <__swbuf_r+0x2e>
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	4628      	mov	r0, r5
 8018f7e:	f7ff fd91 	bl	8018aa4 <_fflush_r>
 8018f82:	2800      	cmp	r0, #0
 8018f84:	d0d9      	beq.n	8018f3a <__swbuf_r+0x2e>
 8018f86:	e7d6      	b.n	8018f36 <__swbuf_r+0x2a>

08018f88 <__swsetup_r>:
 8018f88:	b538      	push	{r3, r4, r5, lr}
 8018f8a:	4b29      	ldr	r3, [pc, #164]	@ (8019030 <__swsetup_r+0xa8>)
 8018f8c:	4605      	mov	r5, r0
 8018f8e:	6818      	ldr	r0, [r3, #0]
 8018f90:	460c      	mov	r4, r1
 8018f92:	b118      	cbz	r0, 8018f9c <__swsetup_r+0x14>
 8018f94:	6a03      	ldr	r3, [r0, #32]
 8018f96:	b90b      	cbnz	r3, 8018f9c <__swsetup_r+0x14>
 8018f98:	f7fd ff78 	bl	8016e8c <__sinit>
 8018f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fa0:	0719      	lsls	r1, r3, #28
 8018fa2:	d422      	bmi.n	8018fea <__swsetup_r+0x62>
 8018fa4:	06da      	lsls	r2, r3, #27
 8018fa6:	d407      	bmi.n	8018fb8 <__swsetup_r+0x30>
 8018fa8:	2209      	movs	r2, #9
 8018faa:	602a      	str	r2, [r5, #0]
 8018fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018fb0:	81a3      	strh	r3, [r4, #12]
 8018fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8018fb6:	e033      	b.n	8019020 <__swsetup_r+0x98>
 8018fb8:	0758      	lsls	r0, r3, #29
 8018fba:	d512      	bpl.n	8018fe2 <__swsetup_r+0x5a>
 8018fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018fbe:	b141      	cbz	r1, 8018fd2 <__swsetup_r+0x4a>
 8018fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018fc4:	4299      	cmp	r1, r3
 8018fc6:	d002      	beq.n	8018fce <__swsetup_r+0x46>
 8018fc8:	4628      	mov	r0, r5
 8018fca:	f7fe ff0d 	bl	8017de8 <_free_r>
 8018fce:	2300      	movs	r3, #0
 8018fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8018fd2:	89a3      	ldrh	r3, [r4, #12]
 8018fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018fd8:	81a3      	strh	r3, [r4, #12]
 8018fda:	2300      	movs	r3, #0
 8018fdc:	6063      	str	r3, [r4, #4]
 8018fde:	6923      	ldr	r3, [r4, #16]
 8018fe0:	6023      	str	r3, [r4, #0]
 8018fe2:	89a3      	ldrh	r3, [r4, #12]
 8018fe4:	f043 0308 	orr.w	r3, r3, #8
 8018fe8:	81a3      	strh	r3, [r4, #12]
 8018fea:	6923      	ldr	r3, [r4, #16]
 8018fec:	b94b      	cbnz	r3, 8019002 <__swsetup_r+0x7a>
 8018fee:	89a3      	ldrh	r3, [r4, #12]
 8018ff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018ff8:	d003      	beq.n	8019002 <__swsetup_r+0x7a>
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	4628      	mov	r0, r5
 8018ffe:	f000 f883 	bl	8019108 <__smakebuf_r>
 8019002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019006:	f013 0201 	ands.w	r2, r3, #1
 801900a:	d00a      	beq.n	8019022 <__swsetup_r+0x9a>
 801900c:	2200      	movs	r2, #0
 801900e:	60a2      	str	r2, [r4, #8]
 8019010:	6962      	ldr	r2, [r4, #20]
 8019012:	4252      	negs	r2, r2
 8019014:	61a2      	str	r2, [r4, #24]
 8019016:	6922      	ldr	r2, [r4, #16]
 8019018:	b942      	cbnz	r2, 801902c <__swsetup_r+0xa4>
 801901a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801901e:	d1c5      	bne.n	8018fac <__swsetup_r+0x24>
 8019020:	bd38      	pop	{r3, r4, r5, pc}
 8019022:	0799      	lsls	r1, r3, #30
 8019024:	bf58      	it	pl
 8019026:	6962      	ldrpl	r2, [r4, #20]
 8019028:	60a2      	str	r2, [r4, #8]
 801902a:	e7f4      	b.n	8019016 <__swsetup_r+0x8e>
 801902c:	2000      	movs	r0, #0
 801902e:	e7f7      	b.n	8019020 <__swsetup_r+0x98>
 8019030:	20001204 	.word	0x20001204

08019034 <_raise_r>:
 8019034:	291f      	cmp	r1, #31
 8019036:	b538      	push	{r3, r4, r5, lr}
 8019038:	4605      	mov	r5, r0
 801903a:	460c      	mov	r4, r1
 801903c:	d904      	bls.n	8019048 <_raise_r+0x14>
 801903e:	2316      	movs	r3, #22
 8019040:	6003      	str	r3, [r0, #0]
 8019042:	f04f 30ff 	mov.w	r0, #4294967295
 8019046:	bd38      	pop	{r3, r4, r5, pc}
 8019048:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801904a:	b112      	cbz	r2, 8019052 <_raise_r+0x1e>
 801904c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019050:	b94b      	cbnz	r3, 8019066 <_raise_r+0x32>
 8019052:	4628      	mov	r0, r5
 8019054:	f000 f830 	bl	80190b8 <_getpid_r>
 8019058:	4622      	mov	r2, r4
 801905a:	4601      	mov	r1, r0
 801905c:	4628      	mov	r0, r5
 801905e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019062:	f000 b817 	b.w	8019094 <_kill_r>
 8019066:	2b01      	cmp	r3, #1
 8019068:	d00a      	beq.n	8019080 <_raise_r+0x4c>
 801906a:	1c59      	adds	r1, r3, #1
 801906c:	d103      	bne.n	8019076 <_raise_r+0x42>
 801906e:	2316      	movs	r3, #22
 8019070:	6003      	str	r3, [r0, #0]
 8019072:	2001      	movs	r0, #1
 8019074:	e7e7      	b.n	8019046 <_raise_r+0x12>
 8019076:	2100      	movs	r1, #0
 8019078:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801907c:	4620      	mov	r0, r4
 801907e:	4798      	blx	r3
 8019080:	2000      	movs	r0, #0
 8019082:	e7e0      	b.n	8019046 <_raise_r+0x12>

08019084 <raise>:
 8019084:	4b02      	ldr	r3, [pc, #8]	@ (8019090 <raise+0xc>)
 8019086:	4601      	mov	r1, r0
 8019088:	6818      	ldr	r0, [r3, #0]
 801908a:	f7ff bfd3 	b.w	8019034 <_raise_r>
 801908e:	bf00      	nop
 8019090:	20001204 	.word	0x20001204

08019094 <_kill_r>:
 8019094:	b538      	push	{r3, r4, r5, lr}
 8019096:	4d07      	ldr	r5, [pc, #28]	@ (80190b4 <_kill_r+0x20>)
 8019098:	2300      	movs	r3, #0
 801909a:	4604      	mov	r4, r0
 801909c:	4608      	mov	r0, r1
 801909e:	4611      	mov	r1, r2
 80190a0:	602b      	str	r3, [r5, #0]
 80190a2:	f7e8 f961 	bl	8001368 <_kill>
 80190a6:	1c43      	adds	r3, r0, #1
 80190a8:	d102      	bne.n	80190b0 <_kill_r+0x1c>
 80190aa:	682b      	ldr	r3, [r5, #0]
 80190ac:	b103      	cbz	r3, 80190b0 <_kill_r+0x1c>
 80190ae:	6023      	str	r3, [r4, #0]
 80190b0:	bd38      	pop	{r3, r4, r5, pc}
 80190b2:	bf00      	nop
 80190b4:	20009538 	.word	0x20009538

080190b8 <_getpid_r>:
 80190b8:	f7e8 b94e 	b.w	8001358 <_getpid>

080190bc <__swhatbuf_r>:
 80190bc:	b570      	push	{r4, r5, r6, lr}
 80190be:	460c      	mov	r4, r1
 80190c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c4:	2900      	cmp	r1, #0
 80190c6:	b096      	sub	sp, #88	@ 0x58
 80190c8:	4615      	mov	r5, r2
 80190ca:	461e      	mov	r6, r3
 80190cc:	da0d      	bge.n	80190ea <__swhatbuf_r+0x2e>
 80190ce:	89a3      	ldrh	r3, [r4, #12]
 80190d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80190d4:	f04f 0100 	mov.w	r1, #0
 80190d8:	bf14      	ite	ne
 80190da:	2340      	movne	r3, #64	@ 0x40
 80190dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80190e0:	2000      	movs	r0, #0
 80190e2:	6031      	str	r1, [r6, #0]
 80190e4:	602b      	str	r3, [r5, #0]
 80190e6:	b016      	add	sp, #88	@ 0x58
 80190e8:	bd70      	pop	{r4, r5, r6, pc}
 80190ea:	466a      	mov	r2, sp
 80190ec:	f000 f848 	bl	8019180 <_fstat_r>
 80190f0:	2800      	cmp	r0, #0
 80190f2:	dbec      	blt.n	80190ce <__swhatbuf_r+0x12>
 80190f4:	9901      	ldr	r1, [sp, #4]
 80190f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80190fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80190fe:	4259      	negs	r1, r3
 8019100:	4159      	adcs	r1, r3
 8019102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019106:	e7eb      	b.n	80190e0 <__swhatbuf_r+0x24>

08019108 <__smakebuf_r>:
 8019108:	898b      	ldrh	r3, [r1, #12]
 801910a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801910c:	079d      	lsls	r5, r3, #30
 801910e:	4606      	mov	r6, r0
 8019110:	460c      	mov	r4, r1
 8019112:	d507      	bpl.n	8019124 <__smakebuf_r+0x1c>
 8019114:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019118:	6023      	str	r3, [r4, #0]
 801911a:	6123      	str	r3, [r4, #16]
 801911c:	2301      	movs	r3, #1
 801911e:	6163      	str	r3, [r4, #20]
 8019120:	b003      	add	sp, #12
 8019122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019124:	ab01      	add	r3, sp, #4
 8019126:	466a      	mov	r2, sp
 8019128:	f7ff ffc8 	bl	80190bc <__swhatbuf_r>
 801912c:	9f00      	ldr	r7, [sp, #0]
 801912e:	4605      	mov	r5, r0
 8019130:	4639      	mov	r1, r7
 8019132:	4630      	mov	r0, r6
 8019134:	f7fe fecc 	bl	8017ed0 <_malloc_r>
 8019138:	b948      	cbnz	r0, 801914e <__smakebuf_r+0x46>
 801913a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801913e:	059a      	lsls	r2, r3, #22
 8019140:	d4ee      	bmi.n	8019120 <__smakebuf_r+0x18>
 8019142:	f023 0303 	bic.w	r3, r3, #3
 8019146:	f043 0302 	orr.w	r3, r3, #2
 801914a:	81a3      	strh	r3, [r4, #12]
 801914c:	e7e2      	b.n	8019114 <__smakebuf_r+0xc>
 801914e:	89a3      	ldrh	r3, [r4, #12]
 8019150:	6020      	str	r0, [r4, #0]
 8019152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019156:	81a3      	strh	r3, [r4, #12]
 8019158:	9b01      	ldr	r3, [sp, #4]
 801915a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801915e:	b15b      	cbz	r3, 8019178 <__smakebuf_r+0x70>
 8019160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019164:	4630      	mov	r0, r6
 8019166:	f000 f81d 	bl	80191a4 <_isatty_r>
 801916a:	b128      	cbz	r0, 8019178 <__smakebuf_r+0x70>
 801916c:	89a3      	ldrh	r3, [r4, #12]
 801916e:	f023 0303 	bic.w	r3, r3, #3
 8019172:	f043 0301 	orr.w	r3, r3, #1
 8019176:	81a3      	strh	r3, [r4, #12]
 8019178:	89a3      	ldrh	r3, [r4, #12]
 801917a:	431d      	orrs	r5, r3
 801917c:	81a5      	strh	r5, [r4, #12]
 801917e:	e7cf      	b.n	8019120 <__smakebuf_r+0x18>

08019180 <_fstat_r>:
 8019180:	b538      	push	{r3, r4, r5, lr}
 8019182:	4d07      	ldr	r5, [pc, #28]	@ (80191a0 <_fstat_r+0x20>)
 8019184:	2300      	movs	r3, #0
 8019186:	4604      	mov	r4, r0
 8019188:	4608      	mov	r0, r1
 801918a:	4611      	mov	r1, r2
 801918c:	602b      	str	r3, [r5, #0]
 801918e:	f7e8 f94b 	bl	8001428 <_fstat>
 8019192:	1c43      	adds	r3, r0, #1
 8019194:	d102      	bne.n	801919c <_fstat_r+0x1c>
 8019196:	682b      	ldr	r3, [r5, #0]
 8019198:	b103      	cbz	r3, 801919c <_fstat_r+0x1c>
 801919a:	6023      	str	r3, [r4, #0]
 801919c:	bd38      	pop	{r3, r4, r5, pc}
 801919e:	bf00      	nop
 80191a0:	20009538 	.word	0x20009538

080191a4 <_isatty_r>:
 80191a4:	b538      	push	{r3, r4, r5, lr}
 80191a6:	4d06      	ldr	r5, [pc, #24]	@ (80191c0 <_isatty_r+0x1c>)
 80191a8:	2300      	movs	r3, #0
 80191aa:	4604      	mov	r4, r0
 80191ac:	4608      	mov	r0, r1
 80191ae:	602b      	str	r3, [r5, #0]
 80191b0:	f7e8 f94a 	bl	8001448 <_isatty>
 80191b4:	1c43      	adds	r3, r0, #1
 80191b6:	d102      	bne.n	80191be <_isatty_r+0x1a>
 80191b8:	682b      	ldr	r3, [r5, #0]
 80191ba:	b103      	cbz	r3, 80191be <_isatty_r+0x1a>
 80191bc:	6023      	str	r3, [r4, #0]
 80191be:	bd38      	pop	{r3, r4, r5, pc}
 80191c0:	20009538 	.word	0x20009538

080191c4 <_init>:
 80191c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191c6:	bf00      	nop
 80191c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191ca:	bc08      	pop	{r3}
 80191cc:	469e      	mov	lr, r3
 80191ce:	4770      	bx	lr

080191d0 <_fini>:
 80191d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191d2:	bf00      	nop
 80191d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191d6:	bc08      	pop	{r3}
 80191d8:	469e      	mov	lr, r3
 80191da:	4770      	bx	lr
