
GOS2022_bootloader2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017454  08004000  08004000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002000  0801b458  0801b458  00019458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d458  0801d458  0001d534  2**0
                  CONTENTS
  4 .ARM          00000008  0801d458  0801d458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d460  0801d460  0001d534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d460  0801d460  0001b460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d464  0801d464  0001b464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001534  20000000  0801d468  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008790  20001534  0801e99c  0001d534  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20009cc4  0801e99c  0001dcc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d534  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ebb  00000000  00000000  0001d564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081c6  00000000  00000000  0004541f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002048  00000000  00000000  0004d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017c3  00000000  00000000  0004f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004d8a7  00000000  00000000  00050df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a8b9  00000000  00000000  0009e69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef093  00000000  00000000  000d8f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bf0  00000000  00000000  001c802c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001d0c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <__do_global_dtors_aux>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4c05      	ldr	r4, [pc, #20]	@ (8004018 <__do_global_dtors_aux+0x18>)
 8004004:	7823      	ldrb	r3, [r4, #0]
 8004006:	b933      	cbnz	r3, 8004016 <__do_global_dtors_aux+0x16>
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__do_global_dtors_aux+0x1c>)
 800400a:	b113      	cbz	r3, 8004012 <__do_global_dtors_aux+0x12>
 800400c:	4804      	ldr	r0, [pc, #16]	@ (8004020 <__do_global_dtors_aux+0x20>)
 800400e:	f3af 8000 	nop.w
 8004012:	2301      	movs	r3, #1
 8004014:	7023      	strb	r3, [r4, #0]
 8004016:	bd10      	pop	{r4, pc}
 8004018:	20001534 	.word	0x20001534
 800401c:	00000000 	.word	0x00000000
 8004020:	0801b43c 	.word	0x0801b43c

08004024 <frame_dummy>:
 8004024:	b508      	push	{r3, lr}
 8004026:	4b03      	ldr	r3, [pc, #12]	@ (8004034 <frame_dummy+0x10>)
 8004028:	b11b      	cbz	r3, 8004032 <frame_dummy+0xe>
 800402a:	4903      	ldr	r1, [pc, #12]	@ (8004038 <frame_dummy+0x14>)
 800402c:	4803      	ldr	r0, [pc, #12]	@ (800403c <frame_dummy+0x18>)
 800402e:	f3af 8000 	nop.w
 8004032:	bd08      	pop	{r3, pc}
 8004034:	00000000 	.word	0x00000000
 8004038:	20001538 	.word	0x20001538
 800403c:	0801b43c 	.word	0x0801b43c

08004040 <memchr>:
 8004040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8004044:	2a10      	cmp	r2, #16
 8004046:	db2b      	blt.n	80040a0 <memchr+0x60>
 8004048:	f010 0f07 	tst.w	r0, #7
 800404c:	d008      	beq.n	8004060 <memchr+0x20>
 800404e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004052:	3a01      	subs	r2, #1
 8004054:	428b      	cmp	r3, r1
 8004056:	d02d      	beq.n	80040b4 <memchr+0x74>
 8004058:	f010 0f07 	tst.w	r0, #7
 800405c:	b342      	cbz	r2, 80040b0 <memchr+0x70>
 800405e:	d1f6      	bne.n	800404e <memchr+0xe>
 8004060:	b4f0      	push	{r4, r5, r6, r7}
 8004062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800406a:	f022 0407 	bic.w	r4, r2, #7
 800406e:	f07f 0700 	mvns.w	r7, #0
 8004072:	2300      	movs	r3, #0
 8004074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004078:	3c08      	subs	r4, #8
 800407a:	ea85 0501 	eor.w	r5, r5, r1
 800407e:	ea86 0601 	eor.w	r6, r6, r1
 8004082:	fa85 f547 	uadd8	r5, r5, r7
 8004086:	faa3 f587 	sel	r5, r3, r7
 800408a:	fa86 f647 	uadd8	r6, r6, r7
 800408e:	faa5 f687 	sel	r6, r5, r7
 8004092:	b98e      	cbnz	r6, 80040b8 <memchr+0x78>
 8004094:	d1ee      	bne.n	8004074 <memchr+0x34>
 8004096:	bcf0      	pop	{r4, r5, r6, r7}
 8004098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800409c:	f002 0207 	and.w	r2, r2, #7
 80040a0:	b132      	cbz	r2, 80040b0 <memchr+0x70>
 80040a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80040a6:	3a01      	subs	r2, #1
 80040a8:	ea83 0301 	eor.w	r3, r3, r1
 80040ac:	b113      	cbz	r3, 80040b4 <memchr+0x74>
 80040ae:	d1f8      	bne.n	80040a2 <memchr+0x62>
 80040b0:	2000      	movs	r0, #0
 80040b2:	4770      	bx	lr
 80040b4:	3801      	subs	r0, #1
 80040b6:	4770      	bx	lr
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	bf06      	itte	eq
 80040bc:	4635      	moveq	r5, r6
 80040be:	3803      	subeq	r0, #3
 80040c0:	3807      	subne	r0, #7
 80040c2:	f015 0f01 	tst.w	r5, #1
 80040c6:	d107      	bne.n	80040d8 <memchr+0x98>
 80040c8:	3001      	adds	r0, #1
 80040ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80040ce:	bf02      	ittt	eq
 80040d0:	3001      	addeq	r0, #1
 80040d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80040d6:	3001      	addeq	r0, #1
 80040d8:	bcf0      	pop	{r4, r5, r6, r7}
 80040da:	3801      	subs	r0, #1
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <strlen>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	d1fb      	bne.n	80040e2 <strlen+0x2>
 80040ea:	1a18      	subs	r0, r3, r0
 80040ec:	3801      	subs	r0, #1
 80040ee:	4770      	bx	lr

080040f0 <__aeabi_drsub>:
 80040f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80040f4:	e002      	b.n	80040fc <__adddf3>
 80040f6:	bf00      	nop

080040f8 <__aeabi_dsub>:
 80040f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080040fc <__adddf3>:
 80040fc:	b530      	push	{r4, r5, lr}
 80040fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004106:	ea94 0f05 	teq	r4, r5
 800410a:	bf08      	it	eq
 800410c:	ea90 0f02 	teqeq	r0, r2
 8004110:	bf1f      	itttt	ne
 8004112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800411a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800411e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004122:	f000 80e2 	beq.w	80042ea <__adddf3+0x1ee>
 8004126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800412a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800412e:	bfb8      	it	lt
 8004130:	426d      	neglt	r5, r5
 8004132:	dd0c      	ble.n	800414e <__adddf3+0x52>
 8004134:	442c      	add	r4, r5
 8004136:	ea80 0202 	eor.w	r2, r0, r2
 800413a:	ea81 0303 	eor.w	r3, r1, r3
 800413e:	ea82 0000 	eor.w	r0, r2, r0
 8004142:	ea83 0101 	eor.w	r1, r3, r1
 8004146:	ea80 0202 	eor.w	r2, r0, r2
 800414a:	ea81 0303 	eor.w	r3, r1, r3
 800414e:	2d36      	cmp	r5, #54	@ 0x36
 8004150:	bf88      	it	hi
 8004152:	bd30      	pophi	{r4, r5, pc}
 8004154:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800415c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8004160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004164:	d002      	beq.n	800416c <__adddf3+0x70>
 8004166:	4240      	negs	r0, r0
 8004168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800416c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8004170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004178:	d002      	beq.n	8004180 <__adddf3+0x84>
 800417a:	4252      	negs	r2, r2
 800417c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004180:	ea94 0f05 	teq	r4, r5
 8004184:	f000 80a7 	beq.w	80042d6 <__adddf3+0x1da>
 8004188:	f1a4 0401 	sub.w	r4, r4, #1
 800418c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004190:	db0d      	blt.n	80041ae <__adddf3+0xb2>
 8004192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004196:	fa22 f205 	lsr.w	r2, r2, r5
 800419a:	1880      	adds	r0, r0, r2
 800419c:	f141 0100 	adc.w	r1, r1, #0
 80041a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80041a4:	1880      	adds	r0, r0, r2
 80041a6:	fa43 f305 	asr.w	r3, r3, r5
 80041aa:	4159      	adcs	r1, r3
 80041ac:	e00e      	b.n	80041cc <__adddf3+0xd0>
 80041ae:	f1a5 0520 	sub.w	r5, r5, #32
 80041b2:	f10e 0e20 	add.w	lr, lr, #32
 80041b6:	2a01      	cmp	r2, #1
 80041b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80041bc:	bf28      	it	cs
 80041be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80041c2:	fa43 f305 	asr.w	r3, r3, r5
 80041c6:	18c0      	adds	r0, r0, r3
 80041c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80041cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80041d0:	d507      	bpl.n	80041e2 <__adddf3+0xe6>
 80041d2:	f04f 0e00 	mov.w	lr, #0
 80041d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80041da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80041de:	eb6e 0101 	sbc.w	r1, lr, r1
 80041e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80041e6:	d31b      	bcc.n	8004220 <__adddf3+0x124>
 80041e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80041ec:	d30c      	bcc.n	8004208 <__adddf3+0x10c>
 80041ee:	0849      	lsrs	r1, r1, #1
 80041f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80041f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80041f8:	f104 0401 	add.w	r4, r4, #1
 80041fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004200:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004204:	f080 809a 	bcs.w	800433c <__adddf3+0x240>
 8004208:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800420c:	bf08      	it	eq
 800420e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004212:	f150 0000 	adcs.w	r0, r0, #0
 8004216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800421a:	ea41 0105 	orr.w	r1, r1, r5
 800421e:	bd30      	pop	{r4, r5, pc}
 8004220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004224:	4140      	adcs	r0, r0
 8004226:	eb41 0101 	adc.w	r1, r1, r1
 800422a:	3c01      	subs	r4, #1
 800422c:	bf28      	it	cs
 800422e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8004232:	d2e9      	bcs.n	8004208 <__adddf3+0x10c>
 8004234:	f091 0f00 	teq	r1, #0
 8004238:	bf04      	itt	eq
 800423a:	4601      	moveq	r1, r0
 800423c:	2000      	moveq	r0, #0
 800423e:	fab1 f381 	clz	r3, r1
 8004242:	bf08      	it	eq
 8004244:	3320      	addeq	r3, #32
 8004246:	f1a3 030b 	sub.w	r3, r3, #11
 800424a:	f1b3 0220 	subs.w	r2, r3, #32
 800424e:	da0c      	bge.n	800426a <__adddf3+0x16e>
 8004250:	320c      	adds	r2, #12
 8004252:	dd08      	ble.n	8004266 <__adddf3+0x16a>
 8004254:	f102 0c14 	add.w	ip, r2, #20
 8004258:	f1c2 020c 	rsb	r2, r2, #12
 800425c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004260:	fa21 f102 	lsr.w	r1, r1, r2
 8004264:	e00c      	b.n	8004280 <__adddf3+0x184>
 8004266:	f102 0214 	add.w	r2, r2, #20
 800426a:	bfd8      	it	le
 800426c:	f1c2 0c20 	rsble	ip, r2, #32
 8004270:	fa01 f102 	lsl.w	r1, r1, r2
 8004274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004278:	bfdc      	itt	le
 800427a:	ea41 010c 	orrle.w	r1, r1, ip
 800427e:	4090      	lslle	r0, r2
 8004280:	1ae4      	subs	r4, r4, r3
 8004282:	bfa2      	ittt	ge
 8004284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004288:	4329      	orrge	r1, r5
 800428a:	bd30      	popge	{r4, r5, pc}
 800428c:	ea6f 0404 	mvn.w	r4, r4
 8004290:	3c1f      	subs	r4, #31
 8004292:	da1c      	bge.n	80042ce <__adddf3+0x1d2>
 8004294:	340c      	adds	r4, #12
 8004296:	dc0e      	bgt.n	80042b6 <__adddf3+0x1ba>
 8004298:	f104 0414 	add.w	r4, r4, #20
 800429c:	f1c4 0220 	rsb	r2, r4, #32
 80042a0:	fa20 f004 	lsr.w	r0, r0, r4
 80042a4:	fa01 f302 	lsl.w	r3, r1, r2
 80042a8:	ea40 0003 	orr.w	r0, r0, r3
 80042ac:	fa21 f304 	lsr.w	r3, r1, r4
 80042b0:	ea45 0103 	orr.w	r1, r5, r3
 80042b4:	bd30      	pop	{r4, r5, pc}
 80042b6:	f1c4 040c 	rsb	r4, r4, #12
 80042ba:	f1c4 0220 	rsb	r2, r4, #32
 80042be:	fa20 f002 	lsr.w	r0, r0, r2
 80042c2:	fa01 f304 	lsl.w	r3, r1, r4
 80042c6:	ea40 0003 	orr.w	r0, r0, r3
 80042ca:	4629      	mov	r1, r5
 80042cc:	bd30      	pop	{r4, r5, pc}
 80042ce:	fa21 f004 	lsr.w	r0, r1, r4
 80042d2:	4629      	mov	r1, r5
 80042d4:	bd30      	pop	{r4, r5, pc}
 80042d6:	f094 0f00 	teq	r4, #0
 80042da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80042de:	bf06      	itte	eq
 80042e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80042e4:	3401      	addeq	r4, #1
 80042e6:	3d01      	subne	r5, #1
 80042e8:	e74e      	b.n	8004188 <__adddf3+0x8c>
 80042ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80042ee:	bf18      	it	ne
 80042f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042f4:	d029      	beq.n	800434a <__adddf3+0x24e>
 80042f6:	ea94 0f05 	teq	r4, r5
 80042fa:	bf08      	it	eq
 80042fc:	ea90 0f02 	teqeq	r0, r2
 8004300:	d005      	beq.n	800430e <__adddf3+0x212>
 8004302:	ea54 0c00 	orrs.w	ip, r4, r0
 8004306:	bf04      	itt	eq
 8004308:	4619      	moveq	r1, r3
 800430a:	4610      	moveq	r0, r2
 800430c:	bd30      	pop	{r4, r5, pc}
 800430e:	ea91 0f03 	teq	r1, r3
 8004312:	bf1e      	ittt	ne
 8004314:	2100      	movne	r1, #0
 8004316:	2000      	movne	r0, #0
 8004318:	bd30      	popne	{r4, r5, pc}
 800431a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800431e:	d105      	bne.n	800432c <__adddf3+0x230>
 8004320:	0040      	lsls	r0, r0, #1
 8004322:	4149      	adcs	r1, r1
 8004324:	bf28      	it	cs
 8004326:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800432a:	bd30      	pop	{r4, r5, pc}
 800432c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8004330:	bf3c      	itt	cc
 8004332:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8004336:	bd30      	popcc	{r4, r5, pc}
 8004338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800433c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8004340:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	bd30      	pop	{r4, r5, pc}
 800434a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800434e:	bf1a      	itte	ne
 8004350:	4619      	movne	r1, r3
 8004352:	4610      	movne	r0, r2
 8004354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004358:	bf1c      	itt	ne
 800435a:	460b      	movne	r3, r1
 800435c:	4602      	movne	r2, r0
 800435e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004362:	bf06      	itte	eq
 8004364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004368:	ea91 0f03 	teqeq	r1, r3
 800436c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8004370:	bd30      	pop	{r4, r5, pc}
 8004372:	bf00      	nop

08004374 <__aeabi_ui2d>:
 8004374:	f090 0f00 	teq	r0, #0
 8004378:	bf04      	itt	eq
 800437a:	2100      	moveq	r1, #0
 800437c:	4770      	bxeq	lr
 800437e:	b530      	push	{r4, r5, lr}
 8004380:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004384:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004388:	f04f 0500 	mov.w	r5, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	e750      	b.n	8004234 <__adddf3+0x138>
 8004392:	bf00      	nop

08004394 <__aeabi_i2d>:
 8004394:	f090 0f00 	teq	r0, #0
 8004398:	bf04      	itt	eq
 800439a:	2100      	moveq	r1, #0
 800439c:	4770      	bxeq	lr
 800439e:	b530      	push	{r4, r5, lr}
 80043a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80043a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80043a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80043ac:	bf48      	it	mi
 80043ae:	4240      	negmi	r0, r0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	e73e      	b.n	8004234 <__adddf3+0x138>
 80043b6:	bf00      	nop

080043b8 <__aeabi_f2d>:
 80043b8:	0042      	lsls	r2, r0, #1
 80043ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80043be:	ea4f 0131 	mov.w	r1, r1, rrx
 80043c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80043c6:	bf1f      	itttt	ne
 80043c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80043cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80043d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80043d4:	4770      	bxne	lr
 80043d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80043da:	bf08      	it	eq
 80043dc:	4770      	bxeq	lr
 80043de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80043e2:	bf04      	itt	eq
 80043e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80043e8:	4770      	bxeq	lr
 80043ea:	b530      	push	{r4, r5, lr}
 80043ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80043f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80043f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80043f8:	e71c      	b.n	8004234 <__adddf3+0x138>
 80043fa:	bf00      	nop

080043fc <__aeabi_ul2d>:
 80043fc:	ea50 0201 	orrs.w	r2, r0, r1
 8004400:	bf08      	it	eq
 8004402:	4770      	bxeq	lr
 8004404:	b530      	push	{r4, r5, lr}
 8004406:	f04f 0500 	mov.w	r5, #0
 800440a:	e00a      	b.n	8004422 <__aeabi_l2d+0x16>

0800440c <__aeabi_l2d>:
 800440c:	ea50 0201 	orrs.w	r2, r0, r1
 8004410:	bf08      	it	eq
 8004412:	4770      	bxeq	lr
 8004414:	b530      	push	{r4, r5, lr}
 8004416:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800441a:	d502      	bpl.n	8004422 <__aeabi_l2d+0x16>
 800441c:	4240      	negs	r0, r0
 800441e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004422:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004426:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800442a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800442e:	f43f aed8 	beq.w	80041e2 <__adddf3+0xe6>
 8004432:	f04f 0203 	mov.w	r2, #3
 8004436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800443a:	bf18      	it	ne
 800443c:	3203      	addne	r2, #3
 800443e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004442:	bf18      	it	ne
 8004444:	3203      	addne	r2, #3
 8004446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800444a:	f1c2 0320 	rsb	r3, r2, #32
 800444e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004452:	fa20 f002 	lsr.w	r0, r0, r2
 8004456:	fa01 fe03 	lsl.w	lr, r1, r3
 800445a:	ea40 000e 	orr.w	r0, r0, lr
 800445e:	fa21 f102 	lsr.w	r1, r1, r2
 8004462:	4414      	add	r4, r2
 8004464:	e6bd      	b.n	80041e2 <__adddf3+0xe6>
 8004466:	bf00      	nop

08004468 <__aeabi_dmul>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800446e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004476:	bf1d      	ittte	ne
 8004478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800447c:	ea94 0f0c 	teqne	r4, ip
 8004480:	ea95 0f0c 	teqne	r5, ip
 8004484:	f000 f8de 	bleq	8004644 <__aeabi_dmul+0x1dc>
 8004488:	442c      	add	r4, r5
 800448a:	ea81 0603 	eor.w	r6, r1, r3
 800448e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800449a:	bf18      	it	ne
 800449c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80044a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80044a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044a8:	d038      	beq.n	800451c <__aeabi_dmul+0xb4>
 80044aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80044ae:	f04f 0500 	mov.w	r5, #0
 80044b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80044b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80044ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80044be:	f04f 0600 	mov.w	r6, #0
 80044c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80044c6:	f09c 0f00 	teq	ip, #0
 80044ca:	bf18      	it	ne
 80044cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80044d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80044d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80044d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80044dc:	d204      	bcs.n	80044e8 <__aeabi_dmul+0x80>
 80044de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80044e2:	416d      	adcs	r5, r5
 80044e4:	eb46 0606 	adc.w	r6, r6, r6
 80044e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80044ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80044f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80044f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80044f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80044fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004500:	bf88      	it	hi
 8004502:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004506:	d81e      	bhi.n	8004546 <__aeabi_dmul+0xde>
 8004508:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800450c:	bf08      	it	eq
 800450e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004512:	f150 0000 	adcs.w	r0, r0, #0
 8004516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004520:	ea46 0101 	orr.w	r1, r6, r1
 8004524:	ea40 0002 	orr.w	r0, r0, r2
 8004528:	ea81 0103 	eor.w	r1, r1, r3
 800452c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004530:	bfc2      	ittt	gt
 8004532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800453a:	bd70      	popgt	{r4, r5, r6, pc}
 800453c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004540:	f04f 0e00 	mov.w	lr, #0
 8004544:	3c01      	subs	r4, #1
 8004546:	f300 80ab 	bgt.w	80046a0 <__aeabi_dmul+0x238>
 800454a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800454e:	bfde      	ittt	le
 8004550:	2000      	movle	r0, #0
 8004552:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8004556:	bd70      	pople	{r4, r5, r6, pc}
 8004558:	f1c4 0400 	rsb	r4, r4, #0
 800455c:	3c20      	subs	r4, #32
 800455e:	da35      	bge.n	80045cc <__aeabi_dmul+0x164>
 8004560:	340c      	adds	r4, #12
 8004562:	dc1b      	bgt.n	800459c <__aeabi_dmul+0x134>
 8004564:	f104 0414 	add.w	r4, r4, #20
 8004568:	f1c4 0520 	rsb	r5, r4, #32
 800456c:	fa00 f305 	lsl.w	r3, r0, r5
 8004570:	fa20 f004 	lsr.w	r0, r0, r4
 8004574:	fa01 f205 	lsl.w	r2, r1, r5
 8004578:	ea40 0002 	orr.w	r0, r0, r2
 800457c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8004580:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004588:	fa21 f604 	lsr.w	r6, r1, r4
 800458c:	eb42 0106 	adc.w	r1, r2, r6
 8004590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004594:	bf08      	it	eq
 8004596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f1c4 040c 	rsb	r4, r4, #12
 80045a0:	f1c4 0520 	rsb	r5, r4, #32
 80045a4:	fa00 f304 	lsl.w	r3, r0, r4
 80045a8:	fa20 f005 	lsr.w	r0, r0, r5
 80045ac:	fa01 f204 	lsl.w	r2, r1, r4
 80045b0:	ea40 0002 	orr.w	r0, r0, r2
 80045b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80045b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80045bc:	f141 0100 	adc.w	r1, r1, #0
 80045c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80045c4:	bf08      	it	eq
 80045c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f1c4 0520 	rsb	r5, r4, #32
 80045d0:	fa00 f205 	lsl.w	r2, r0, r5
 80045d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80045d8:	fa20 f304 	lsr.w	r3, r0, r4
 80045dc:	fa01 f205 	lsl.w	r2, r1, r5
 80045e0:	ea43 0302 	orr.w	r3, r3, r2
 80045e4:	fa21 f004 	lsr.w	r0, r1, r4
 80045e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80045ec:	fa21 f204 	lsr.w	r2, r1, r4
 80045f0:	ea20 0002 	bic.w	r0, r0, r2
 80045f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80045f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80045fc:	bf08      	it	eq
 80045fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	f094 0f00 	teq	r4, #0
 8004608:	d10f      	bne.n	800462a <__aeabi_dmul+0x1c2>
 800460a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800460e:	0040      	lsls	r0, r0, #1
 8004610:	eb41 0101 	adc.w	r1, r1, r1
 8004614:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004618:	bf08      	it	eq
 800461a:	3c01      	subeq	r4, #1
 800461c:	d0f7      	beq.n	800460e <__aeabi_dmul+0x1a6>
 800461e:	ea41 0106 	orr.w	r1, r1, r6
 8004622:	f095 0f00 	teq	r5, #0
 8004626:	bf18      	it	ne
 8004628:	4770      	bxne	lr
 800462a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800462e:	0052      	lsls	r2, r2, #1
 8004630:	eb43 0303 	adc.w	r3, r3, r3
 8004634:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004638:	bf08      	it	eq
 800463a:	3d01      	subeq	r5, #1
 800463c:	d0f7      	beq.n	800462e <__aeabi_dmul+0x1c6>
 800463e:	ea43 0306 	orr.w	r3, r3, r6
 8004642:	4770      	bx	lr
 8004644:	ea94 0f0c 	teq	r4, ip
 8004648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800464c:	bf18      	it	ne
 800464e:	ea95 0f0c 	teqne	r5, ip
 8004652:	d00c      	beq.n	800466e <__aeabi_dmul+0x206>
 8004654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004658:	bf18      	it	ne
 800465a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800465e:	d1d1      	bne.n	8004604 <__aeabi_dmul+0x19c>
 8004660:	ea81 0103 	eor.w	r1, r1, r3
 8004664:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	bd70      	pop	{r4, r5, r6, pc}
 800466e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004672:	bf06      	itte	eq
 8004674:	4610      	moveq	r0, r2
 8004676:	4619      	moveq	r1, r3
 8004678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800467c:	d019      	beq.n	80046b2 <__aeabi_dmul+0x24a>
 800467e:	ea94 0f0c 	teq	r4, ip
 8004682:	d102      	bne.n	800468a <__aeabi_dmul+0x222>
 8004684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004688:	d113      	bne.n	80046b2 <__aeabi_dmul+0x24a>
 800468a:	ea95 0f0c 	teq	r5, ip
 800468e:	d105      	bne.n	800469c <__aeabi_dmul+0x234>
 8004690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004694:	bf1c      	itt	ne
 8004696:	4610      	movne	r0, r2
 8004698:	4619      	movne	r1, r3
 800469a:	d10a      	bne.n	80046b2 <__aeabi_dmul+0x24a>
 800469c:	ea81 0103 	eor.w	r1, r1, r3
 80046a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80046a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80046a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046ac:	f04f 0000 	mov.w	r0, #0
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80046b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80046ba:	bd70      	pop	{r4, r5, r6, pc}

080046bc <__aeabi_ddiv>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80046c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80046c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80046ca:	bf1d      	ittte	ne
 80046cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80046d0:	ea94 0f0c 	teqne	r4, ip
 80046d4:	ea95 0f0c 	teqne	r5, ip
 80046d8:	f000 f8a7 	bleq	800482a <__aeabi_ddiv+0x16e>
 80046dc:	eba4 0405 	sub.w	r4, r4, r5
 80046e0:	ea81 0e03 	eor.w	lr, r1, r3
 80046e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80046e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80046ec:	f000 8088 	beq.w	8004800 <__aeabi_ddiv+0x144>
 80046f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80046f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80046f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80046fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800470c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004710:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004714:	429d      	cmp	r5, r3
 8004716:	bf08      	it	eq
 8004718:	4296      	cmpeq	r6, r2
 800471a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800471e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004722:	d202      	bcs.n	800472a <__aeabi_ddiv+0x6e>
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	ea4f 0232 	mov.w	r2, r2, rrx
 800472a:	1ab6      	subs	r6, r6, r2
 800472c:	eb65 0503 	sbc.w	r5, r5, r3
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	ea4f 0232 	mov.w	r2, r2, rrx
 8004736:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800473a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800473e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004746:	bf22      	ittt	cs
 8004748:	1ab6      	subcs	r6, r6, r2
 800474a:	4675      	movcs	r5, lr
 800474c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	ea4f 0232 	mov.w	r2, r2, rrx
 8004756:	ebb6 0e02 	subs.w	lr, r6, r2
 800475a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800475e:	bf22      	ittt	cs
 8004760:	1ab6      	subcs	r6, r6, r2
 8004762:	4675      	movcs	r5, lr
 8004764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	ea4f 0232 	mov.w	r2, r2, rrx
 800476e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004776:	bf22      	ittt	cs
 8004778:	1ab6      	subcs	r6, r6, r2
 800477a:	4675      	movcs	r5, lr
 800477c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	ea4f 0232 	mov.w	r2, r2, rrx
 8004786:	ebb6 0e02 	subs.w	lr, r6, r2
 800478a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800478e:	bf22      	ittt	cs
 8004790:	1ab6      	subcs	r6, r6, r2
 8004792:	4675      	movcs	r5, lr
 8004794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004798:	ea55 0e06 	orrs.w	lr, r5, r6
 800479c:	d018      	beq.n	80047d0 <__aeabi_ddiv+0x114>
 800479e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80047a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80047a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80047aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80047ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80047b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80047b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80047ba:	d1c0      	bne.n	800473e <__aeabi_ddiv+0x82>
 80047bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80047c0:	d10b      	bne.n	80047da <__aeabi_ddiv+0x11e>
 80047c2:	ea41 0100 	orr.w	r1, r1, r0
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80047ce:	e7b6      	b.n	800473e <__aeabi_ddiv+0x82>
 80047d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80047d4:	bf04      	itt	eq
 80047d6:	4301      	orreq	r1, r0
 80047d8:	2000      	moveq	r0, #0
 80047da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80047de:	bf88      	it	hi
 80047e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80047e4:	f63f aeaf 	bhi.w	8004546 <__aeabi_dmul+0xde>
 80047e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80047ec:	bf04      	itt	eq
 80047ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80047f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80047f6:	f150 0000 	adcs.w	r0, r0, #0
 80047fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800480c:	bfc2      	ittt	gt
 800480e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004816:	bd70      	popgt	{r4, r5, r6, pc}
 8004818:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800481c:	f04f 0e00 	mov.w	lr, #0
 8004820:	3c01      	subs	r4, #1
 8004822:	e690      	b.n	8004546 <__aeabi_dmul+0xde>
 8004824:	ea45 0e06 	orr.w	lr, r5, r6
 8004828:	e68d      	b.n	8004546 <__aeabi_dmul+0xde>
 800482a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800482e:	ea94 0f0c 	teq	r4, ip
 8004832:	bf08      	it	eq
 8004834:	ea95 0f0c 	teqeq	r5, ip
 8004838:	f43f af3b 	beq.w	80046b2 <__aeabi_dmul+0x24a>
 800483c:	ea94 0f0c 	teq	r4, ip
 8004840:	d10a      	bne.n	8004858 <__aeabi_ddiv+0x19c>
 8004842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004846:	f47f af34 	bne.w	80046b2 <__aeabi_dmul+0x24a>
 800484a:	ea95 0f0c 	teq	r5, ip
 800484e:	f47f af25 	bne.w	800469c <__aeabi_dmul+0x234>
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	e72c      	b.n	80046b2 <__aeabi_dmul+0x24a>
 8004858:	ea95 0f0c 	teq	r5, ip
 800485c:	d106      	bne.n	800486c <__aeabi_ddiv+0x1b0>
 800485e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004862:	f43f aefd 	beq.w	8004660 <__aeabi_dmul+0x1f8>
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	e722      	b.n	80046b2 <__aeabi_dmul+0x24a>
 800486c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004870:	bf18      	it	ne
 8004872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004876:	f47f aec5 	bne.w	8004604 <__aeabi_dmul+0x19c>
 800487a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800487e:	f47f af0d 	bne.w	800469c <__aeabi_dmul+0x234>
 8004882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004886:	f47f aeeb 	bne.w	8004660 <__aeabi_dmul+0x1f8>
 800488a:	e712      	b.n	80046b2 <__aeabi_dmul+0x24a>

0800488c <__gedf2>:
 800488c:	f04f 3cff 	mov.w	ip, #4294967295
 8004890:	e006      	b.n	80048a0 <__cmpdf2+0x4>
 8004892:	bf00      	nop

08004894 <__ledf2>:
 8004894:	f04f 0c01 	mov.w	ip, #1
 8004898:	e002      	b.n	80048a0 <__cmpdf2+0x4>
 800489a:	bf00      	nop

0800489c <__cmpdf2>:
 800489c:	f04f 0c01 	mov.w	ip, #1
 80048a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80048a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80048a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80048ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80048b0:	bf18      	it	ne
 80048b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80048b6:	d01b      	beq.n	80048f0 <__cmpdf2+0x54>
 80048b8:	b001      	add	sp, #4
 80048ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80048be:	bf0c      	ite	eq
 80048c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80048c4:	ea91 0f03 	teqne	r1, r3
 80048c8:	bf02      	ittt	eq
 80048ca:	ea90 0f02 	teqeq	r0, r2
 80048ce:	2000      	moveq	r0, #0
 80048d0:	4770      	bxeq	lr
 80048d2:	f110 0f00 	cmn.w	r0, #0
 80048d6:	ea91 0f03 	teq	r1, r3
 80048da:	bf58      	it	pl
 80048dc:	4299      	cmppl	r1, r3
 80048de:	bf08      	it	eq
 80048e0:	4290      	cmpeq	r0, r2
 80048e2:	bf2c      	ite	cs
 80048e4:	17d8      	asrcs	r0, r3, #31
 80048e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80048ea:	f040 0001 	orr.w	r0, r0, #1
 80048ee:	4770      	bx	lr
 80048f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80048f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80048f8:	d102      	bne.n	8004900 <__cmpdf2+0x64>
 80048fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80048fe:	d107      	bne.n	8004910 <__cmpdf2+0x74>
 8004900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004908:	d1d6      	bne.n	80048b8 <__cmpdf2+0x1c>
 800490a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800490e:	d0d3      	beq.n	80048b8 <__cmpdf2+0x1c>
 8004910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <__aeabi_cdrcmple>:
 8004918:	4684      	mov	ip, r0
 800491a:	4610      	mov	r0, r2
 800491c:	4662      	mov	r2, ip
 800491e:	468c      	mov	ip, r1
 8004920:	4619      	mov	r1, r3
 8004922:	4663      	mov	r3, ip
 8004924:	e000      	b.n	8004928 <__aeabi_cdcmpeq>
 8004926:	bf00      	nop

08004928 <__aeabi_cdcmpeq>:
 8004928:	b501      	push	{r0, lr}
 800492a:	f7ff ffb7 	bl	800489c <__cmpdf2>
 800492e:	2800      	cmp	r0, #0
 8004930:	bf48      	it	mi
 8004932:	f110 0f00 	cmnmi.w	r0, #0
 8004936:	bd01      	pop	{r0, pc}

08004938 <__aeabi_dcmpeq>:
 8004938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800493c:	f7ff fff4 	bl	8004928 <__aeabi_cdcmpeq>
 8004940:	bf0c      	ite	eq
 8004942:	2001      	moveq	r0, #1
 8004944:	2000      	movne	r0, #0
 8004946:	f85d fb08 	ldr.w	pc, [sp], #8
 800494a:	bf00      	nop

0800494c <__aeabi_dcmplt>:
 800494c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004950:	f7ff ffea 	bl	8004928 <__aeabi_cdcmpeq>
 8004954:	bf34      	ite	cc
 8004956:	2001      	movcc	r0, #1
 8004958:	2000      	movcs	r0, #0
 800495a:	f85d fb08 	ldr.w	pc, [sp], #8
 800495e:	bf00      	nop

08004960 <__aeabi_dcmple>:
 8004960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004964:	f7ff ffe0 	bl	8004928 <__aeabi_cdcmpeq>
 8004968:	bf94      	ite	ls
 800496a:	2001      	movls	r0, #1
 800496c:	2000      	movhi	r0, #0
 800496e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004972:	bf00      	nop

08004974 <__aeabi_dcmpge>:
 8004974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004978:	f7ff ffce 	bl	8004918 <__aeabi_cdrcmple>
 800497c:	bf94      	ite	ls
 800497e:	2001      	movls	r0, #1
 8004980:	2000      	movhi	r0, #0
 8004982:	f85d fb08 	ldr.w	pc, [sp], #8
 8004986:	bf00      	nop

08004988 <__aeabi_dcmpgt>:
 8004988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800498c:	f7ff ffc4 	bl	8004918 <__aeabi_cdrcmple>
 8004990:	bf34      	ite	cc
 8004992:	2001      	movcc	r0, #1
 8004994:	2000      	movcs	r0, #0
 8004996:	f85d fb08 	ldr.w	pc, [sp], #8
 800499a:	bf00      	nop

0800499c <__aeabi_dcmpun>:
 800499c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80049a4:	d102      	bne.n	80049ac <__aeabi_dcmpun+0x10>
 80049a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80049aa:	d10a      	bne.n	80049c2 <__aeabi_dcmpun+0x26>
 80049ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80049b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80049b4:	d102      	bne.n	80049bc <__aeabi_dcmpun+0x20>
 80049b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80049ba:	d102      	bne.n	80049c2 <__aeabi_dcmpun+0x26>
 80049bc:	f04f 0000 	mov.w	r0, #0
 80049c0:	4770      	bx	lr
 80049c2:	f04f 0001 	mov.w	r0, #1
 80049c6:	4770      	bx	lr

080049c8 <__aeabi_d2iz>:
 80049c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80049cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80049d0:	d215      	bcs.n	80049fe <__aeabi_d2iz+0x36>
 80049d2:	d511      	bpl.n	80049f8 <__aeabi_d2iz+0x30>
 80049d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80049d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80049dc:	d912      	bls.n	8004a04 <__aeabi_d2iz+0x3c>
 80049de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80049e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80049ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80049ee:	fa23 f002 	lsr.w	r0, r3, r2
 80049f2:	bf18      	it	ne
 80049f4:	4240      	negne	r0, r0
 80049f6:	4770      	bx	lr
 80049f8:	f04f 0000 	mov.w	r0, #0
 80049fc:	4770      	bx	lr
 80049fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004a02:	d105      	bne.n	8004a10 <__aeabi_d2iz+0x48>
 8004a04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004a08:	bf08      	it	eq
 8004a0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004a0e:	4770      	bx	lr
 8004a10:	f04f 0000 	mov.w	r0, #0
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop

08004a18 <__aeabi_uldivmod>:
 8004a18:	b953      	cbnz	r3, 8004a30 <__aeabi_uldivmod+0x18>
 8004a1a:	b94a      	cbnz	r2, 8004a30 <__aeabi_uldivmod+0x18>
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	bf08      	it	eq
 8004a20:	2800      	cmpeq	r0, #0
 8004a22:	bf1c      	itt	ne
 8004a24:	f04f 31ff 	movne.w	r1, #4294967295
 8004a28:	f04f 30ff 	movne.w	r0, #4294967295
 8004a2c:	f000 b96a 	b.w	8004d04 <__aeabi_idiv0>
 8004a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8004a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004a38:	f000 f806 	bl	8004a48 <__udivmoddi4>
 8004a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr

08004a48 <__udivmoddi4>:
 8004a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	9d08      	ldr	r5, [sp, #32]
 8004a4e:	460c      	mov	r4, r1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d14e      	bne.n	8004af2 <__udivmoddi4+0xaa>
 8004a54:	4694      	mov	ip, r2
 8004a56:	458c      	cmp	ip, r1
 8004a58:	4686      	mov	lr, r0
 8004a5a:	fab2 f282 	clz	r2, r2
 8004a5e:	d962      	bls.n	8004b26 <__udivmoddi4+0xde>
 8004a60:	b14a      	cbz	r2, 8004a76 <__udivmoddi4+0x2e>
 8004a62:	f1c2 0320 	rsb	r3, r2, #32
 8004a66:	4091      	lsls	r1, r2
 8004a68:	fa20 f303 	lsr.w	r3, r0, r3
 8004a6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004a70:	4319      	orrs	r1, r3
 8004a72:	fa00 fe02 	lsl.w	lr, r0, r2
 8004a76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004a7a:	fa1f f68c 	uxth.w	r6, ip
 8004a7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8004a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004a86:	fb07 1114 	mls	r1, r7, r4, r1
 8004a8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004a8e:	fb04 f106 	mul.w	r1, r4, r6
 8004a92:	4299      	cmp	r1, r3
 8004a94:	d90a      	bls.n	8004aac <__udivmoddi4+0x64>
 8004a96:	eb1c 0303 	adds.w	r3, ip, r3
 8004a9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8004a9e:	f080 8112 	bcs.w	8004cc6 <__udivmoddi4+0x27e>
 8004aa2:	4299      	cmp	r1, r3
 8004aa4:	f240 810f 	bls.w	8004cc6 <__udivmoddi4+0x27e>
 8004aa8:	3c02      	subs	r4, #2
 8004aaa:	4463      	add	r3, ip
 8004aac:	1a59      	subs	r1, r3, r1
 8004aae:	fa1f f38e 	uxth.w	r3, lr
 8004ab2:	fbb1 f0f7 	udiv	r0, r1, r7
 8004ab6:	fb07 1110 	mls	r1, r7, r0, r1
 8004aba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004abe:	fb00 f606 	mul.w	r6, r0, r6
 8004ac2:	429e      	cmp	r6, r3
 8004ac4:	d90a      	bls.n	8004adc <__udivmoddi4+0x94>
 8004ac6:	eb1c 0303 	adds.w	r3, ip, r3
 8004aca:	f100 31ff 	add.w	r1, r0, #4294967295
 8004ace:	f080 80fc 	bcs.w	8004cca <__udivmoddi4+0x282>
 8004ad2:	429e      	cmp	r6, r3
 8004ad4:	f240 80f9 	bls.w	8004cca <__udivmoddi4+0x282>
 8004ad8:	4463      	add	r3, ip
 8004ada:	3802      	subs	r0, #2
 8004adc:	1b9b      	subs	r3, r3, r6
 8004ade:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	b11d      	cbz	r5, 8004aee <__udivmoddi4+0xa6>
 8004ae6:	40d3      	lsrs	r3, r2
 8004ae8:	2200      	movs	r2, #0
 8004aea:	e9c5 3200 	strd	r3, r2, [r5]
 8004aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af2:	428b      	cmp	r3, r1
 8004af4:	d905      	bls.n	8004b02 <__udivmoddi4+0xba>
 8004af6:	b10d      	cbz	r5, 8004afc <__udivmoddi4+0xb4>
 8004af8:	e9c5 0100 	strd	r0, r1, [r5]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4608      	mov	r0, r1
 8004b00:	e7f5      	b.n	8004aee <__udivmoddi4+0xa6>
 8004b02:	fab3 f183 	clz	r1, r3
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d146      	bne.n	8004b98 <__udivmoddi4+0x150>
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	d302      	bcc.n	8004b14 <__udivmoddi4+0xcc>
 8004b0e:	4290      	cmp	r0, r2
 8004b10:	f0c0 80f0 	bcc.w	8004cf4 <__udivmoddi4+0x2ac>
 8004b14:	1a86      	subs	r6, r0, r2
 8004b16:	eb64 0303 	sbc.w	r3, r4, r3
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	2d00      	cmp	r5, #0
 8004b1e:	d0e6      	beq.n	8004aee <__udivmoddi4+0xa6>
 8004b20:	e9c5 6300 	strd	r6, r3, [r5]
 8004b24:	e7e3      	b.n	8004aee <__udivmoddi4+0xa6>
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	f040 8090 	bne.w	8004c4c <__udivmoddi4+0x204>
 8004b2c:	eba1 040c 	sub.w	r4, r1, ip
 8004b30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004b34:	fa1f f78c 	uxth.w	r7, ip
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8004b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004b42:	fb08 4416 	mls	r4, r8, r6, r4
 8004b46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b4a:	fb07 f006 	mul.w	r0, r7, r6
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	d908      	bls.n	8004b64 <__udivmoddi4+0x11c>
 8004b52:	eb1c 0303 	adds.w	r3, ip, r3
 8004b56:	f106 34ff 	add.w	r4, r6, #4294967295
 8004b5a:	d202      	bcs.n	8004b62 <__udivmoddi4+0x11a>
 8004b5c:	4298      	cmp	r0, r3
 8004b5e:	f200 80cd 	bhi.w	8004cfc <__udivmoddi4+0x2b4>
 8004b62:	4626      	mov	r6, r4
 8004b64:	1a1c      	subs	r4, r3, r0
 8004b66:	fa1f f38e 	uxth.w	r3, lr
 8004b6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8004b6e:	fb08 4410 	mls	r4, r8, r0, r4
 8004b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b76:	fb00 f707 	mul.w	r7, r0, r7
 8004b7a:	429f      	cmp	r7, r3
 8004b7c:	d908      	bls.n	8004b90 <__udivmoddi4+0x148>
 8004b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8004b82:	f100 34ff 	add.w	r4, r0, #4294967295
 8004b86:	d202      	bcs.n	8004b8e <__udivmoddi4+0x146>
 8004b88:	429f      	cmp	r7, r3
 8004b8a:	f200 80b0 	bhi.w	8004cee <__udivmoddi4+0x2a6>
 8004b8e:	4620      	mov	r0, r4
 8004b90:	1bdb      	subs	r3, r3, r7
 8004b92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004b96:	e7a5      	b.n	8004ae4 <__udivmoddi4+0x9c>
 8004b98:	f1c1 0620 	rsb	r6, r1, #32
 8004b9c:	408b      	lsls	r3, r1
 8004b9e:	fa22 f706 	lsr.w	r7, r2, r6
 8004ba2:	431f      	orrs	r7, r3
 8004ba4:	fa20 fc06 	lsr.w	ip, r0, r6
 8004ba8:	fa04 f301 	lsl.w	r3, r4, r1
 8004bac:	ea43 030c 	orr.w	r3, r3, ip
 8004bb0:	40f4      	lsrs	r4, r6
 8004bb2:	fa00 f801 	lsl.w	r8, r0, r1
 8004bb6:	0c38      	lsrs	r0, r7, #16
 8004bb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8004bbc:	fbb4 fef0 	udiv	lr, r4, r0
 8004bc0:	fa1f fc87 	uxth.w	ip, r7
 8004bc4:	fb00 441e 	mls	r4, r0, lr, r4
 8004bc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004bcc:	fb0e f90c 	mul.w	r9, lr, ip
 8004bd0:	45a1      	cmp	r9, r4
 8004bd2:	fa02 f201 	lsl.w	r2, r2, r1
 8004bd6:	d90a      	bls.n	8004bee <__udivmoddi4+0x1a6>
 8004bd8:	193c      	adds	r4, r7, r4
 8004bda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8004bde:	f080 8084 	bcs.w	8004cea <__udivmoddi4+0x2a2>
 8004be2:	45a1      	cmp	r9, r4
 8004be4:	f240 8081 	bls.w	8004cea <__udivmoddi4+0x2a2>
 8004be8:	f1ae 0e02 	sub.w	lr, lr, #2
 8004bec:	443c      	add	r4, r7
 8004bee:	eba4 0409 	sub.w	r4, r4, r9
 8004bf2:	fa1f f983 	uxth.w	r9, r3
 8004bf6:	fbb4 f3f0 	udiv	r3, r4, r0
 8004bfa:	fb00 4413 	mls	r4, r0, r3, r4
 8004bfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004c02:	fb03 fc0c 	mul.w	ip, r3, ip
 8004c06:	45a4      	cmp	ip, r4
 8004c08:	d907      	bls.n	8004c1a <__udivmoddi4+0x1d2>
 8004c0a:	193c      	adds	r4, r7, r4
 8004c0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8004c10:	d267      	bcs.n	8004ce2 <__udivmoddi4+0x29a>
 8004c12:	45a4      	cmp	ip, r4
 8004c14:	d965      	bls.n	8004ce2 <__udivmoddi4+0x29a>
 8004c16:	3b02      	subs	r3, #2
 8004c18:	443c      	add	r4, r7
 8004c1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8004c1e:	fba0 9302 	umull	r9, r3, r0, r2
 8004c22:	eba4 040c 	sub.w	r4, r4, ip
 8004c26:	429c      	cmp	r4, r3
 8004c28:	46ce      	mov	lr, r9
 8004c2a:	469c      	mov	ip, r3
 8004c2c:	d351      	bcc.n	8004cd2 <__udivmoddi4+0x28a>
 8004c2e:	d04e      	beq.n	8004cce <__udivmoddi4+0x286>
 8004c30:	b155      	cbz	r5, 8004c48 <__udivmoddi4+0x200>
 8004c32:	ebb8 030e 	subs.w	r3, r8, lr
 8004c36:	eb64 040c 	sbc.w	r4, r4, ip
 8004c3a:	fa04 f606 	lsl.w	r6, r4, r6
 8004c3e:	40cb      	lsrs	r3, r1
 8004c40:	431e      	orrs	r6, r3
 8004c42:	40cc      	lsrs	r4, r1
 8004c44:	e9c5 6400 	strd	r6, r4, [r5]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	e750      	b.n	8004aee <__udivmoddi4+0xa6>
 8004c4c:	f1c2 0320 	rsb	r3, r2, #32
 8004c50:	fa20 f103 	lsr.w	r1, r0, r3
 8004c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8004c58:	fa24 f303 	lsr.w	r3, r4, r3
 8004c5c:	4094      	lsls	r4, r2
 8004c5e:	430c      	orrs	r4, r1
 8004c60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004c64:	fa00 fe02 	lsl.w	lr, r0, r2
 8004c68:	fa1f f78c 	uxth.w	r7, ip
 8004c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8004c70:	fb08 3110 	mls	r1, r8, r0, r3
 8004c74:	0c23      	lsrs	r3, r4, #16
 8004c76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004c7a:	fb00 f107 	mul.w	r1, r0, r7
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	d908      	bls.n	8004c94 <__udivmoddi4+0x24c>
 8004c82:	eb1c 0303 	adds.w	r3, ip, r3
 8004c86:	f100 36ff 	add.w	r6, r0, #4294967295
 8004c8a:	d22c      	bcs.n	8004ce6 <__udivmoddi4+0x29e>
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d92a      	bls.n	8004ce6 <__udivmoddi4+0x29e>
 8004c90:	3802      	subs	r0, #2
 8004c92:	4463      	add	r3, ip
 8004c94:	1a5b      	subs	r3, r3, r1
 8004c96:	b2a4      	uxth	r4, r4
 8004c98:	fbb3 f1f8 	udiv	r1, r3, r8
 8004c9c:	fb08 3311 	mls	r3, r8, r1, r3
 8004ca0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004ca4:	fb01 f307 	mul.w	r3, r1, r7
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	d908      	bls.n	8004cbe <__udivmoddi4+0x276>
 8004cac:	eb1c 0404 	adds.w	r4, ip, r4
 8004cb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8004cb4:	d213      	bcs.n	8004cde <__udivmoddi4+0x296>
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	d911      	bls.n	8004cde <__udivmoddi4+0x296>
 8004cba:	3902      	subs	r1, #2
 8004cbc:	4464      	add	r4, ip
 8004cbe:	1ae4      	subs	r4, r4, r3
 8004cc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004cc4:	e739      	b.n	8004b3a <__udivmoddi4+0xf2>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	e6f0      	b.n	8004aac <__udivmoddi4+0x64>
 8004cca:	4608      	mov	r0, r1
 8004ccc:	e706      	b.n	8004adc <__udivmoddi4+0x94>
 8004cce:	45c8      	cmp	r8, r9
 8004cd0:	d2ae      	bcs.n	8004c30 <__udivmoddi4+0x1e8>
 8004cd2:	ebb9 0e02 	subs.w	lr, r9, r2
 8004cd6:	eb63 0c07 	sbc.w	ip, r3, r7
 8004cda:	3801      	subs	r0, #1
 8004cdc:	e7a8      	b.n	8004c30 <__udivmoddi4+0x1e8>
 8004cde:	4631      	mov	r1, r6
 8004ce0:	e7ed      	b.n	8004cbe <__udivmoddi4+0x276>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	e799      	b.n	8004c1a <__udivmoddi4+0x1d2>
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	e7d4      	b.n	8004c94 <__udivmoddi4+0x24c>
 8004cea:	46d6      	mov	lr, sl
 8004cec:	e77f      	b.n	8004bee <__udivmoddi4+0x1a6>
 8004cee:	4463      	add	r3, ip
 8004cf0:	3802      	subs	r0, #2
 8004cf2:	e74d      	b.n	8004b90 <__udivmoddi4+0x148>
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	e70f      	b.n	8004b1c <__udivmoddi4+0xd4>
 8004cfc:	3e02      	subs	r6, #2
 8004cfe:	4463      	add	r3, ip
 8004d00:	e730      	b.n	8004b64 <__udivmoddi4+0x11c>
 8004d02:	bf00      	nop

08004d04 <__aeabi_idiv0>:
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8004d0e:	2355      	movs	r3, #85	@ 0x55
 8004d10:	71fb      	strb	r3, [r7, #7]
     * Function code.
     */
    // Low-level initialization.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
    		"HAL library initialization",
			HAL_Init() == HAL_OK ? GOS_SUCCESS : GOS_ERROR
 8004d12:	f000 fd95 	bl	8005840 <HAL_Init>
 8004d16:	4603      	mov	r3, r0
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <gos_platformDriverInit+0x18>
 8004d1c:	2355      	movs	r3, #85	@ 0x55
 8004d1e:	e000      	b.n	8004d22 <gos_platformDriverInit+0x1a>
 8004d20:	23ae      	movs	r3, #174	@ 0xae
 8004d22:	4619      	mov	r1, r3
 8004d24:	4825      	ldr	r0, [pc, #148]	@ (8004dbc <gos_platformDriverInit+0xb4>)
 8004d26:	f000 fd27 	bl	8005778 <trace_driverEnqueueTraceMessage>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	4013      	ands	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
    );

    // Driver initialization.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("Driver initialization", driver_init());
 8004d34:	f000 fb24 	bl	8005380 <driver_init>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4820      	ldr	r0, [pc, #128]	@ (8004dc0 <gos_platformDriverInit+0xb8>)
 8004d3e:	f000 fd1b 	bl	8005778 <trace_driverEnqueueTraceMessage>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]

    // Register kernel drivers.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("Kernel driver registration", gos_driverInit(&driverFunctions));
 8004d4c:	481d      	ldr	r0, [pc, #116]	@ (8004dc4 <gos_platformDriverInit+0xbc>)
 8004d4e:	f00d facd 	bl	80122ec <gos_driverInit>
 8004d52:	4603      	mov	r3, r0
 8004d54:	4619      	mov	r1, r3
 8004d56:	481c      	ldr	r0, [pc, #112]	@ (8004dc8 <gos_platformDriverInit+0xc0>)
 8004d58:	f000 fd0e 	bl	8005778 <trace_driverEnqueueTraceMessage>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	4013      	ands	r3, r2
 8004d64:	71fb      	strb	r3, [r7, #7]

    SysTick->VAL = 0;
 8004d66:	4b19      	ldr	r3, [pc, #100]	@ (8004dcc <gos_platformDriverInit+0xc4>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <gos_platformDriverInit+0xc4>)
 8004d6e:	2207      	movs	r2, #7
 8004d70:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004d72:	b662      	cpsie	i
}
 8004d74:	bf00      	nop

    __enable_irq();

    // Initialize bootloader.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("PDH board-specific initialization", app_pdhBdSpecInit());
 8004d76:	f000 f93f 	bl	8004ff8 <app_pdhBdSpecInit>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4814      	ldr	r0, [pc, #80]	@ (8004dd0 <gos_platformDriverInit+0xc8>)
 8004d80:	f000 fcfa 	bl	8005778 <trace_driverEnqueueTraceMessage>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	71fb      	strb	r3, [r7, #7]
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("APP bootloader initialization", app_bld_init());
 8004d8e:	f000 f83b 	bl	8004e08 <app_bld_init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4619      	mov	r1, r3
 8004d96:	480f      	ldr	r0, [pc, #60]	@ (8004dd4 <gos_platformDriverInit+0xcc>)
 8004d98:	f000 fcee 	bl	8005778 <trace_driverEnqueueTraceMessage>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	4013      	ands	r3, r2
 8004da4:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	2b55      	cmp	r3, #85	@ 0x55
 8004daa:	d001      	beq.n	8004db0 <gos_platformDriverInit+0xa8>
	{
    	platformDriverInitResult = GOS_ERROR;
 8004dac:	23ae      	movs	r3, #174	@ 0xae
 8004dae:	71fb      	strb	r3, [r7, #7]
	}

	return platformDriverInitResult;
 8004db0:	79fb      	ldrb	r3, [r7, #7]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	0801b458 	.word	0x0801b458
 8004dc0:	0801b474 	.word	0x0801b474
 8004dc4:	20000000 	.word	0x20000000
 8004dc8:	0801b48c 	.word	0x0801b48c
 8004dcc:	e000e010 	.word	0xe000e010
 8004dd0:	0801b4a8 	.word	0x0801b4a8
 8004dd4:	0801b4cc 	.word	0x0801b4cc

08004dd8 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t appInitResult = GOS_SUCCESS;
 8004dde:	2355      	movs	r3, #85	@ 0x55
 8004de0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Flush trace entries.
    trace_driverFlushTraceEntries();
 8004de2:	f000 fcfd 	bl	80057e0 <trace_driverFlushTraceEntries>

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8004de6:	f00a fb83 	bl	800f4f0 <svl_dsmInit>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	4013      	ands	r3, r2
 8004df2:	71fb      	strb	r3, [r7, #7]

	if (appInitResult != GOS_SUCCESS)
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	2b55      	cmp	r3, #85	@ 0x55
 8004df8:	d001      	beq.n	8004dfe <gos_userApplicationInit+0x26>
	{
		appInitResult = GOS_ERROR;
 8004dfa:	23ae      	movs	r3, #174	@ 0xae
 8004dfc:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <app_bld_init>:

/*
 * Function: app_bld_init
 */
gos_result_t app_bld_init (void_t)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8004e0e:	2355      	movs	r3, #85	@ 0x55
 8004e10:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	if (bld_initData(&bldVerInfo) == GOS_SUCCESS)
 8004e12:	4829      	ldr	r0, [pc, #164]	@ (8004eb8 <app_bld_init+0xb0>)
 8004e14:	f006 fd74 	bl	800b900 <bld_initData>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b55      	cmp	r3, #85	@ 0x55
 8004e1c:	d145      	bne.n	8004eaa <app_bld_init+0xa2>
	{
		(void_t) bld_initConfig();
 8004e1e:	f006 fe45 	bl	800baac <bld_initConfig>
		(void_t) svl_pdhGetBldCfg(&bldCfg);
 8004e22:	4826      	ldr	r0, [pc, #152]	@ (8004ebc <app_bld_init+0xb4>)
 8004e24:	f00b fd8c 	bl	8010940 <svl_pdhGetBldCfg>
		(void_t) svl_pdhGetSwInfo(&swInfo);
 8004e28:	4825      	ldr	r0, [pc, #148]	@ (8004ec0 <app_bld_init+0xb8>)
 8004e2a:	f00b fd19 	bl	8010860 <svl_pdhGetSwInfo>
		(void_t) bld_printConfig();
 8004e2e:	f006 fe8f 	bl	800bb50 <bld_printConfig>

		if ((bldCfg.updateMode == GOS_TRUE) || (bldCfg.installRequested == GOS_TRUE) ||
 8004e32:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <app_bld_init+0xb4>)
 8004e34:	791b      	ldrb	r3, [r3, #4]
 8004e36:	2b36      	cmp	r3, #54	@ 0x36
 8004e38:	d00b      	beq.n	8004e52 <app_bld_init+0x4a>
 8004e3a:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <app_bld_init+0xb4>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b36      	cmp	r3, #54	@ 0x36
 8004e40:	d007      	beq.n	8004e52 <app_bld_init+0x4a>
			(bldCfg.waitForConnectionOnStartup == GOS_TRUE && bldCfg.startupCounter == 0u))
 8004e42:	4b1e      	ldr	r3, [pc, #120]	@ (8004ebc <app_bld_init+0xb4>)
 8004e44:	799b      	ldrb	r3, [r3, #6]
		if ((bldCfg.updateMode == GOS_TRUE) || (bldCfg.installRequested == GOS_TRUE) ||
 8004e46:	2b36      	cmp	r3, #54	@ 0x36
 8004e48:	d113      	bne.n	8004e72 <app_bld_init+0x6a>
			(bldCfg.waitForConnectionOnStartup == GOS_TRUE && bldCfg.startupCounter == 0u))
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <app_bld_init+0xb4>)
 8004e4c:	79db      	ldrb	r3, [r3, #7]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <app_bld_init+0x6a>
		{
			// Increase startup counter (so next startup will skip boot mode enter).
			bldCfg.startupCounter++;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <app_bld_init+0xb4>)
 8004e54:	79db      	ldrb	r3, [r3, #7]
 8004e56:	3301      	adds	r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <app_bld_init+0xb4>)
 8004e5c:	71da      	strb	r2, [r3, #7]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 8004e5e:	4817      	ldr	r0, [pc, #92]	@ (8004ebc <app_bld_init+0xb4>)
 8004e60:	f00b fe4e 	bl	8010b00 <svl_pdhSetBldCfg>

			// IPL shall only be initialized if wireless update is requested.
			if (bldCfg.wirelessUpdate == GOS_TRUE)
 8004e64:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <app_bld_init+0xb4>)
 8004e66:	795b      	ldrb	r3, [r3, #5]
 8004e68:	2b36      	cmp	r3, #54	@ 0x36
 8004e6a:	d120      	bne.n	8004eae <app_bld_init+0xa6>
			{
				(void_t) svl_iplInit();
 8004e6c:	f00a feb6 	bl	800fbdc <svl_iplInit>
			if (bldCfg.wirelessUpdate == GOS_TRUE)
 8004e70:	e01d      	b.n	8004eae <app_bld_init+0xa6>
		}
		else
		{
			// Reset startup counter so next startup will enter boot mode if startup connection wait
			// flag is set.
			bldCfg.startupCounter = 0u;
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <app_bld_init+0xb4>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	71da      	strb	r2, [r3, #7]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 8004e78:	4810      	ldr	r0, [pc, #64]	@ (8004ebc <app_bld_init+0xb4>)
 8004e7a:	f00b fe41 	bl	8010b00 <svl_pdhSetBldCfg>

			// Check and jump to application.
			if (bld_checkApplication(&swInfo.appBinaryInfo, GOS_FALSE) == GOS_SUCCESS)
 8004e7e:	2149      	movs	r1, #73	@ 0x49
 8004e80:	4810      	ldr	r0, [pc, #64]	@ (8004ec4 <app_bld_init+0xbc>)
 8004e82:	f006 fc49 	bl	800b718 <bld_checkApplication>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b55      	cmp	r3, #85	@ 0x55
 8004e8a:	d104      	bne.n	8004e96 <app_bld_init+0x8e>
			{
				initResult = bld_jumpToApplication();
 8004e8c:	f006 fc86 	bl	800b79c <bld_jumpToApplication>
 8004e90:	4603      	mov	r3, r0
 8004e92:	71fb      	strb	r3, [r7, #7]
 8004e94:	e00b      	b.n	8004eae <app_bld_init+0xa6>
			}
			else
			{
				// Application is corrupted or missing.
				// Switch to boot update mode.
				(void_t) gos_traceTraceFormattedUnsafe("Switching to update mode...\r\n\r\n");
 8004e96:	480c      	ldr	r0, [pc, #48]	@ (8004ec8 <app_bld_init+0xc0>)
 8004e98:	f013 f996 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
				bldCfg.updateMode = GOS_TRUE;
 8004e9c:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <app_bld_init+0xb4>)
 8004e9e:	2236      	movs	r2, #54	@ 0x36
 8004ea0:	711a      	strb	r2, [r3, #4]
				(void_t) svl_pdhSetBldCfg(&bldCfg);
 8004ea2:	4806      	ldr	r0, [pc, #24]	@ (8004ebc <app_bld_init+0xb4>)
 8004ea4:	f00b fe2c 	bl	8010b00 <svl_pdhSetBldCfg>
 8004ea8:	e001      	b.n	8004eae <app_bld_init+0xa6>
		}
	}
	else
	{
		// Flash read error.
		initResult = GOS_ERROR;
 8004eaa:	23ae      	movs	r3, #174	@ 0xae
 8004eac:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 8004eae:	79fb      	ldrb	r3, [r7, #7]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	2000001c 	.word	0x2000001c
 8004ebc:	20001550 	.word	0x20001550
 8004ec0:	20001564 	.word	0x20001564
 8004ec4:	200017f8 	.word	0x200017f8
 8004ec8:	0801b4ec 	.word	0x0801b4ec

08004ecc <app_iplBdSpecInit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout);
GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout);

gos_result_t app_iplBdSpecInit (void_t)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	return svl_iplConfigure(app_iplBdSpecTransmit, app_iplBdSpecReceive);
 8004ed0:	4903      	ldr	r1, [pc, #12]	@ (8004ee0 <app_iplBdSpecInit+0x14>)
 8004ed2:	4804      	ldr	r0, [pc, #16]	@ (8004ee4 <app_iplBdSpecInit+0x18>)
 8004ed4:	f00a fec2 	bl	800fc5c <svl_iplConfigure>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	08004f11 	.word	0x08004f11
 8004ee4:	08004ee9 	.word	0x08004ee9

08004ee8 <app_iplBdSpecTransmit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
	return drv_uartTransmitIT(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	2003      	movs	r0, #3
 8004f02:	f009 fcf1 	bl	800e8e8 <drv_uartTransmitIT>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <app_iplBdSpecReceive>:

GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
	if (timeout < 0xFFFFFFFFu)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d008      	beq.n	8004f36 <app_iplBdSpecReceive+0x26>
	{
		return drv_uartReceiveBlocking(DRV_UART_INSTANCE_4, pData, dataSize, timeout);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	2003      	movs	r0, #3
 8004f2e:	f009 fbaf 	bl	800e690 <drv_uartReceiveBlocking>
 8004f32:	4603      	mov	r3, r0
 8004f34:	e009      	b.n	8004f4a <app_iplBdSpecReceive+0x3a>
	}
	else
	{
		return drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	2003      	movs	r0, #3
 8004f44:	f009 fc60 	bl	800e808 <drv_uartReceiveDMA>
 8004f48:	4603      	mov	r3, r0
	}
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <app_ledInit>:

/*
 * Function: app_ledInit
 */
gos_result_t app_ledInit (void_t)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t ledInitResult = GOS_SUCCESS;
 8004f5a:	2355      	movs	r3, #85	@ 0x55
 8004f5c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	ledInitResult &= gos_taskRegister(&ledTaskDesc, NULL);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4808      	ldr	r0, [pc, #32]	@ (8004f84 <app_ledInit+0x30>)
 8004f62:	f00e fbb1 	bl	80136c8 <gos_taskRegister>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]

	if (ledInitResult != GOS_SUCCESS)
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	2b55      	cmp	r3, #85	@ 0x55
 8004f74:	d001      	beq.n	8004f7a <app_ledInit+0x26>
	{
		ledInitResult = GOS_ERROR;
 8004f76:	23ae      	movs	r3, #174	@ 0xae
 8004f78:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Initialization OK.
	}

	return ledInitResult;
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	200000bc 	.word	0x200000bc

08004f88 <app_ledTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t app_ledTask (void_t)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	bld_state_t bldState;
	bool_t iplInited = GOS_FALSE;
 8004f8e:	2349      	movs	r3, #73	@ 0x49
 8004f90:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    for (;;)
    {
    	(void_t) bld_stateMachineGetState(&bldState);
 8004f92:	1dbb      	adds	r3, r7, #6
 8004f94:	4618      	mov	r0, r3
 8004f96:	f006 f931 	bl	800b1fc <bld_stateMachineGetState>

    	switch (bldState)
 8004f9a:	79bb      	ldrb	r3, [r7, #6]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d00d      	beq.n	8004fbc <app_ledTask+0x34>
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	dc21      	bgt.n	8004fe8 <app_ledTask+0x60>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d018      	beq.n	8004fda <app_ledTask+0x52>
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d11d      	bne.n	8004fe8 <app_ledTask+0x60>
    	{
    		case BLD_STATE_CONNECT_WAIT:
    		{
    	        drv_gpioTgglePin(IO_USER_LED);
 8004fac:	2000      	movs	r0, #0
 8004fae:	f007 ffe7 	bl	800cf80 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(1000);
 8004fb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fb6:	f00e fd19 	bl	80139ec <gos_taskSleep>
    			break;
 8004fba:	e01c      	b.n	8004ff6 <app_ledTask+0x6e>
    		}
    		case BLD_STATE_WAIT:
    		{
    			if (iplInited == GOS_FALSE)
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	2b49      	cmp	r3, #73	@ 0x49
 8004fc0:	d103      	bne.n	8004fca <app_ledTask+0x42>
    			{
    				(void_t) svl_iplInit();
 8004fc2:	f00a fe0b 	bl	800fbdc <svl_iplInit>
    				iplInited = GOS_TRUE;
 8004fc6:	2336      	movs	r3, #54	@ 0x36
 8004fc8:	71fb      	strb	r3, [r7, #7]
    			else
    			{
    				// IPL running.
    			}

    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f007 ffd8 	bl	800cf80 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(500);
 8004fd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004fd4:	f00e fd0a 	bl	80139ec <gos_taskSleep>
    			break;
 8004fd8:	e00d      	b.n	8004ff6 <app_ledTask+0x6e>
    		}
    		case BLD_STATE_INSTALL:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f007 ffd0 	bl	800cf80 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(250);
 8004fe0:	20fa      	movs	r0, #250	@ 0xfa
 8004fe2:	f00e fd03 	bl	80139ec <gos_taskSleep>
    	        break;
 8004fe6:	e006      	b.n	8004ff6 <app_ledTask+0x6e>
    		}
    		default:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f007 ffc9 	bl	800cf80 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(100);
 8004fee:	2064      	movs	r0, #100	@ 0x64
 8004ff0:	f00e fcfc 	bl	80139ec <gos_taskSleep>
    	        break;
 8004ff4:	bf00      	nop
    	(void_t) bld_stateMachineGetState(&bldState);
 8004ff6:	e7cc      	b.n	8004f92 <app_ledTask+0xa>

08004ff8 <app_pdhBdSpecInit>:
	.taskPriority 	= 10,
	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER
};

gos_result_t app_pdhBdSpecInit (void_t)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	gos_result_t pdhBdSpecInitRes = GOS_SUCCESS;
 8004ffe:	2355      	movs	r3, #85	@ 0x55
 8005000:	71fb      	strb	r3, [r7, #7]

	pdhBdSpecInitRes &= drv_25lc640Init((void_t*)&mem01a1_eeprom2);
 8005002:	4811      	ldr	r0, [pc, #68]	@ (8005048 <app_pdhBdSpecInit+0x50>)
 8005004:	f006 fddc 	bl	800bbc0 <drv_25lc640Init>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	4013      	ands	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= svl_pdhConfigure(&pdhCfg);
 8005012:	480e      	ldr	r0, [pc, #56]	@ (800504c <app_pdhBdSpecInit+0x54>)
 8005014:	f00b fb76 	bl	8010704 <svl_pdhConfigure>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	4013      	ands	r3, r2
 8005020:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= gos_taskRegister(&pdhTestTask, NULL);
 8005022:	2100      	movs	r1, #0
 8005024:	480a      	ldr	r0, [pc, #40]	@ (8005050 <app_pdhBdSpecInit+0x58>)
 8005026:	f00e fb4f 	bl	80136c8 <gos_taskRegister>
 800502a:	4603      	mov	r3, r0
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	4013      	ands	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]

	if (pdhBdSpecInitRes != GOS_SUCCESS)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2b55      	cmp	r3, #85	@ 0x55
 8005038:	d001      	beq.n	800503e <app_pdhBdSpecInit+0x46>
		pdhBdSpecInitRes = GOS_ERROR;
 800503a:	23ae      	movs	r3, #174	@ 0xae
 800503c:	71fb      	strb	r3, [r7, #7]

	return pdhBdSpecInitRes;
 800503e:	79fb      	ldrb	r3, [r7, #7]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000128 	.word	0x20000128
 800504c:	20000144 	.word	0x20000144
 8005050:	2000014c 	.word	0x2000014c

08005054 <app_pdhTask>:

GOS_STATIC void_t app_pdhTask (void_t)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	//(void_t) bld_initData(&bldVerInfo);

	for (;;)
	{
		(void_t) gos_taskDelete(pdhTestTask.taskId);
 8005058:	4b03      	ldr	r3, [pc, #12]	@ (8005068 <app_pdhTask+0x14>)
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	4618      	mov	r0, r3
 800505e:	f00f f9e9 	bl	8014434 <gos_taskDelete>
 8005062:	bf00      	nop
 8005064:	e7f8      	b.n	8005058 <app_pdhTask+0x4>
 8005066:	bf00      	nop
 8005068:	2000014c 	.word	0x2000014c

0800506c <app_pdhBdSpecRead>:
	}
}

GOS_STATIC gos_result_t app_pdhBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Read((void_t*)&mem01a1_eeprom2, address, pData, size);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	b299      	uxth	r1, r3
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	4804      	ldr	r0, [pc, #16]	@ (8005094 <app_pdhBdSpecRead+0x28>)
 8005084:	f006 fdca 	bl	800bc1c <drv_25lc640Read>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000128 	.word	0x20000128

08005098 <app_pdhBdSpecWrite>:

GOS_STATIC gos_result_t app_pdhBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Write((void_t*)&mem01a1_eeprom2, address, pData, size);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	b299      	uxth	r1, r3
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	4804      	ldr	r0, [pc, #16]	@ (80050c0 <app_pdhBdSpecWrite+0x28>)
 80050b0:	f006 fec9 	bl	800be46 <drv_25lc640Write>
 80050b4:	4603      	mov	r3, r0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000128 	.word	0x20000128

080050c4 <app_sdhBdSpecInit>:
	.readFunction  = app_sdhBdSpecRead,
	.writeFunction = app_sdhBdSpecWrite
};

gos_result_t app_sdhBdSpecInit (void_t)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
	gos_result_t sdhBdSpecInitRes = GOS_SUCCESS;
 80050ca:	2355      	movs	r3, #85	@ 0x55
 80050cc:	71fb      	strb	r3, [r7, #7]

	sdhBdSpecInitRes &= drv_w25q64Init((void_t*)&mem01a1flash);
 80050ce:	480d      	ldr	r0, [pc, #52]	@ (8005104 <app_sdhBdSpecInit+0x40>)
 80050d0:	f009 ff0c 	bl	800eeec <drv_w25q64Init>
 80050d4:	4603      	mov	r3, r0
 80050d6:	461a      	mov	r2, r3
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	4013      	ands	r3, r2
 80050dc:	71fb      	strb	r3, [r7, #7]
	sdhBdSpecInitRes &= svl_sdhConfigure(&sdhCfg);
 80050de:	480a      	ldr	r0, [pc, #40]	@ (8005108 <app_sdhBdSpecInit+0x44>)
 80050e0:	f00c f8bc 	bl	801125c <svl_sdhConfigure>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	4013      	ands	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]

	if (sdhBdSpecInitRes != GOS_SUCCESS)
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b55      	cmp	r3, #85	@ 0x55
 80050f2:	d001      	beq.n	80050f8 <app_sdhBdSpecInit+0x34>
		sdhBdSpecInitRes = GOS_ERROR;
 80050f4:	23ae      	movs	r3, #174	@ 0xae
 80050f6:	71fb      	strb	r3, [r7, #7]

	return sdhBdSpecInitRes;
 80050f8:	79fb      	ldrb	r3, [r7, #7]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200001b8 	.word	0x200001b8
 8005108:	200001d4 	.word	0x200001d4

0800510c <app_sdhBdSpecRead>:

GOS_STATIC gos_result_t app_sdhBdSpecRead (u32_t address, u8_t* pData, u32_t size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
	drv_w25q64ReadData((void_t*)&mem01a1flash, address, pData, size);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	4808      	ldr	r0, [pc, #32]	@ (8005140 <app_sdhBdSpecRead+0x34>)
 8005120:	f009 ff12 	bl	800ef48 <drv_w25q64ReadData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_READ) == 0u)
 8005124:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <app_sdhBdSpecRead+0x34>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <app_sdhBdSpecRead+0x28>
	{
		return GOS_SUCCESS;
 8005130:	2355      	movs	r3, #85	@ 0x55
 8005132:	e000      	b.n	8005136 <app_sdhBdSpecRead+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8005134:	23ae      	movs	r3, #174	@ 0xae
	}
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200001b8 	.word	0x200001b8

08005144 <app_sdhBdSpecWrite>:

GOS_STATIC gos_result_t app_sdhBdSpecWrite (u32_t address, u8_t* pData, u32_t size)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
	drv_w25q64WriteData((void_t*)&mem01a1flash, address, pData, size);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	4808      	ldr	r0, [pc, #32]	@ (8005178 <app_sdhBdSpecWrite+0x34>)
 8005158:	f009 ff4c 	bl	800eff4 <drv_w25q64WriteData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_WRITE) == 0u)
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <app_sdhBdSpecWrite+0x34>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <app_sdhBdSpecWrite+0x28>
	{
		return GOS_SUCCESS;
 8005168:	2355      	movs	r3, #85	@ 0x55
 800516a:	e000      	b.n	800516e <app_sdhBdSpecWrite+0x2a>
	}
	else
	{
		return GOS_ERROR;
 800516c:	23ae      	movs	r3, #174	@ 0xae
	}
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200001b8 	.word	0x200001b8

0800517c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
	return 1;
 8005180:	2301      	movs	r3, #1
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <_kill>:

int _kill(int pid, int sig)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005196:	f014 f8d3 	bl	8019340 <__errno>
 800519a:	4603      	mov	r3, r0
 800519c:	2216      	movs	r2, #22
 800519e:	601a      	str	r2, [r3, #0]
	return -1;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_exit>:

void _exit (int status)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051b4:	f04f 31ff 	mov.w	r1, #4294967295
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff ffe7 	bl	800518c <_kill>
	while (1) {}		/* Make sure we hang here */
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <_exit+0x12>

080051c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e00a      	b.n	80051ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051d4:	f3af 8000 	nop.w
 80051d8:	4601      	mov	r1, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	60ba      	str	r2, [r7, #8]
 80051e0:	b2ca      	uxtb	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3301      	adds	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	dbf0      	blt.n	80051d4 <_read+0x12>
	}

return len;
 80051f2:	687b      	ldr	r3, [r7, #4]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e009      	b.n	8005222 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	60ba      	str	r2, [r7, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3301      	adds	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	dbf1      	blt.n	800520e <_write+0x12>
	}
	return len;
 800522a:	687b      	ldr	r3, [r7, #4]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_close>:

int _close(int file)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	return -1;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800525c:	605a      	str	r2, [r3, #4]
	return 0;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <_isatty>:

int _isatty(int file)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	return 1;
 8005274:	2301      	movs	r3, #1
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
	return 0;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052a4:	4a14      	ldr	r2, [pc, #80]	@ (80052f8 <_sbrk+0x5c>)
 80052a6:	4b15      	ldr	r3, [pc, #84]	@ (80052fc <_sbrk+0x60>)
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052b0:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <_sbrk+0x64>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <_sbrk+0x64>)
 80052ba:	4a12      	ldr	r2, [pc, #72]	@ (8005304 <_sbrk+0x68>)
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052cc:	f014 f838 	bl	8019340 <__errno>
 80052d0:	4603      	mov	r3, r0
 80052d2:	220c      	movs	r2, #12
 80052d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	e009      	b.n	80052f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052dc:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <_sbrk+0x64>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052e2:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <_sbrk+0x64>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	4a05      	ldr	r2, [pc, #20]	@ (8005300 <_sbrk+0x64>)
 80052ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20020000 	.word	0x20020000
 80052fc:	00000400 	.word	0x00000400
 8005300:	20001804 	.word	0x20001804
 8005304:	20009cc8 	.word	0x20009cc8

08005308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <SystemInit+0x20>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	4a05      	ldr	r2, [pc, #20]	@ (8005328 <SystemInit+0x20>)
 8005314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800532c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005332:	e003      	b.n	800533c <LoopCopyDataInit>

08005334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005334:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800533a:	3104      	adds	r1, #4

0800533c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800533c:	480b      	ldr	r0, [pc, #44]	@ (800536c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800533e:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005344:	d3f6      	bcc.n	8005334 <CopyDataInit>
  ldr  r2, =_sbss
 8005346:	4a0b      	ldr	r2, [pc, #44]	@ (8005374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005348:	e002      	b.n	8005350 <LoopFillZerobss>

0800534a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800534a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800534c:	f842 3b04 	str.w	r3, [r2], #4

08005350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005354:	d3f9      	bcc.n	800534a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005356:	f7ff ffd7 	bl	8005308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800535a:	f013 fff7 	bl	801934c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800535e:	f00f ff23 	bl	80151a8 <main>
  bx  lr    
 8005362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005364:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005368:	0801d468 	.word	0x0801d468
  ldr  r0, =_sdata
 800536c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005370:	20001534 	.word	0x20001534
  ldr  r2, =_sbss
 8005374:	20001534 	.word	0x20001534
  ldr  r3, = _ebss
 8005378:	20009cc4 	.word	0x20009cc4

0800537c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800537c:	e7fe      	b.n	800537c <ADC_IRQHandler>
	...

08005380 <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8005386:	2355      	movs	r3, #85	@ 0x55
 8005388:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 800538a:	f000 f847 	bl	800541c <rcc_driver_init>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	4013      	ands	r3, r2
 8005396:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 8005398:	f008 fc66 	bl	800dc68 <drv_tmrInit>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	4013      	ands	r3, r2
 80053a4:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 80053a6:	f008 fc21 	bl	800dbec <drv_systimerStart>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	4013      	ands	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 80053b4:	f007 fce8 	bl	800cd88 <drv_gpioInit>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	4013      	ands	r3, r2
 80053c0:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= drv_i2cInit();
	driverInitResult &= drv_spiInit();
 80053c2:	f007 ff8f 	bl	800d2e4 <drv_spiInit>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	4013      	ands	r3, r2
 80053ce:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_dmaInit();
 80053d0:	f006 fef4 	bl	800c1bc <drv_dmaInit>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4013      	ands	r3, r2
 80053dc:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 80053de:	f008 ffbb 	bl	800e358 <drv_uartInit>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	4013      	ands	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 80053ec:	f007 fee0 	bl	800d1b0 <drv_itInit>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	4013      	ands	r3, r2
 80053f8:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 80053fa:	4804      	ldr	r0, [pc, #16]	@ (800540c <driver_init+0x8c>)
 80053fc:	f00d f8ec 	bl	80125d8 <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 8005400:	79fb      	ldrb	r3, [r7, #7]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	08005411 	.word	0x08005411

08005410 <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8005414:	f000 faa0 	bl	8005958 <HAL_IncTick>
}
 8005418:	bf00      	nop
 800541a:	bd80      	pop	{r7, pc}

0800541c <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0ac      	sub	sp, #176	@ 0xb0
 8005420:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8005422:	23ae      	movs	r3, #174	@ 0xae
 8005424:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005428:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800542c:	2234      	movs	r2, #52	@ 0x34
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f013 ff23 	bl	801927c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005436:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	609a      	str	r2, [r3, #8]
 8005442:	60da      	str	r2, [r3, #12]
 8005444:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	663b      	str	r3, [r7, #96]	@ 0x60
 800544a:	4ba3      	ldr	r3, [pc, #652]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	4aa2      	ldr	r2, [pc, #648]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005454:	6413      	str	r3, [r2, #64]	@ 0x40
 8005456:	4ba0      	ldr	r3, [pc, #640]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005462:	2300      	movs	r3, #0
 8005464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005466:	4b9d      	ldr	r3, [pc, #628]	@ (80056dc <rcc_driver_init+0x2c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800546e:	4a9b      	ldr	r2, [pc, #620]	@ (80056dc <rcc_driver_init+0x2c0>)
 8005470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b99      	ldr	r3, [pc, #612]	@ (80056dc <rcc_driver_init+0x2c0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800547e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005482:	2301      	movs	r3, #1
 8005484:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800548a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800548c:	2302      	movs	r3, #2
 800548e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005492:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_OscInitStruct.PLL.PLLM = 4;
 800549a:	2304      	movs	r3, #4
 800549c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_OscInitStruct.PLL.PLLN = 50;
 80054a0:	2332      	movs	r3, #50	@ 0x32
 80054a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054a6:	2302      	movs	r3, #2
 80054a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80054ac:	2302      	movs	r3, #2
 80054ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLR = 2;
 80054b2:	2302      	movs	r3, #2
 80054b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 80054b8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 f895 	bl	80075ec <HAL_RCC_OscConfig>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054c8:	230f      	movs	r3, #15
 80054ca:	667b      	str	r3, [r7, #100]	@ 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054cc:	2302      	movs	r3, #2
 80054ce:	66bb      	str	r3, [r7, #104]	@ 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054d0:	2300      	movs	r3, #0
 80054d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80054d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054d8:	673b      	str	r3, [r7, #112]	@ 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80054da:	2300      	movs	r3, #0
 80054dc:	677b      	str	r3, [r7, #116]	@ 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 80054de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80054e2:	2101      	movs	r1, #1
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fc3f 	bl	8006d68 <HAL_RCC_ClockConfig>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 80054f0:	2355      	movs	r3, #85	@ 0x55
 80054f2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054fa:	4b77      	ldr	r3, [pc, #476]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	4a76      	ldr	r2, [pc, #472]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	6313      	str	r3, [r2, #48]	@ 0x30
 8005506:	4b74      	ldr	r3, [pc, #464]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	657b      	str	r3, [r7, #84]	@ 0x54
 8005516:	4b70      	ldr	r3, [pc, #448]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	4a6f      	ldr	r2, [pc, #444]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	6313      	str	r3, [r2, #48]	@ 0x30
 8005522:	4b6d      	ldr	r3, [pc, #436]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	657b      	str	r3, [r7, #84]	@ 0x54
 800552c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	653b      	str	r3, [r7, #80]	@ 0x50
 8005532:	4b69      	ldr	r3, [pc, #420]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	4a68      	ldr	r2, [pc, #416]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	6313      	str	r3, [r2, #48]	@ 0x30
 800553e:	4b66      	ldr	r3, [pc, #408]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	653b      	str	r3, [r7, #80]	@ 0x50
 8005548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554e:	4b62      	ldr	r3, [pc, #392]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	4a61      	ldr	r2, [pc, #388]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005554:	f043 0308 	orr.w	r3, r3, #8
 8005558:	6313      	str	r3, [r2, #48]	@ 0x30
 800555a:	4b5f      	ldr	r3, [pc, #380]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800556a:	4b5b      	ldr	r3, [pc, #364]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556e:	4a5a      	ldr	r2, [pc, #360]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005574:	6313      	str	r3, [r2, #48]	@ 0x30
 8005576:	4b58      	ldr	r3, [pc, #352]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	647b      	str	r3, [r7, #68]	@ 0x44
 8005586:	4b54      	ldr	r3, [pc, #336]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	4a53      	ldr	r2, [pc, #332]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005590:	6453      	str	r3, [r2, #68]	@ 0x44
 8005592:	4b51      	ldr	r3, [pc, #324]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559a:	647b      	str	r3, [r7, #68]	@ 0x44
 800559c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a2:	4b4d      	ldr	r3, [pc, #308]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	4a4c      	ldr	r2, [pc, #304]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80055ae:	4b4a      	ldr	r3, [pc, #296]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80055b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055be:	4b46      	ldr	r3, [pc, #280]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	4a45      	ldr	r2, [pc, #276]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055ca:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055da:	4b3f      	ldr	r3, [pc, #252]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	4a3e      	ldr	r2, [pc, #248]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055e6:	4b3c      	ldr	r3, [pc, #240]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f6:	4b38      	ldr	r3, [pc, #224]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	4a37      	ldr	r2, [pc, #220]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80055fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005600:	6413      	str	r3, [r2, #64]	@ 0x40
 8005602:	4b35      	ldr	r3, [pc, #212]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
 800560c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	633b      	str	r3, [r7, #48]	@ 0x30
 8005612:	4b31      	ldr	r3, [pc, #196]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	4a30      	ldr	r2, [pc, #192]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800561c:	6413      	str	r3, [r2, #64]	@ 0x40
 800561e:	4b2e      	ldr	r3, [pc, #184]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005626:	633b      	str	r3, [r7, #48]	@ 0x30
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800562e:	4b2a      	ldr	r3, [pc, #168]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	4a29      	ldr	r2, [pc, #164]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005638:	6413      	str	r3, [r2, #64]	@ 0x40
 800563a:	4b27      	ldr	r3, [pc, #156]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800564a:	4b23      	ldr	r3, [pc, #140]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	4a22      	ldr	r2, [pc, #136]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6413      	str	r3, [r2, #64]	@ 0x40
 8005656:	4b20      	ldr	r3, [pc, #128]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
 8005666:	4b1c      	ldr	r3, [pc, #112]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	4a1b      	ldr	r2, [pc, #108]	@ (80056d8 <rcc_driver_init+0x2bc>)
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	6413      	str	r3, [r2, #64]	@ 0x40
 8005672:	4b19      	ldr	r3, [pc, #100]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	4a14      	ldr	r2, [pc, #80]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568c:	6413      	str	r3, [r2, #64]	@ 0x40
 800568e:	4b12      	ldr	r3, [pc, #72]	@ (80056d8 <rcc_driver_init+0x2bc>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	4b0e      	ldr	r3, [pc, #56]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	4a0d      	ldr	r2, [pc, #52]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80056a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	4a06      	ldr	r2, [pc, #24]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80056c0:	f043 0310 	orr.w	r3, r3, #16
 80056c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80056c6:	4b04      	ldr	r3, [pc, #16]	@ (80056d8 <rcc_driver_init+0x2bc>)
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e003      	b.n	80056e0 <rcc_driver_init+0x2c4>
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40007000 	.word	0x40007000
 80056e0:	4b24      	ldr	r3, [pc, #144]	@ (8005774 <rcc_driver_init+0x358>)
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	4a23      	ldr	r2, [pc, #140]	@ (8005774 <rcc_driver_init+0x358>)
 80056e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ec:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <rcc_driver_init+0x358>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <rcc_driver_init+0x358>)
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <rcc_driver_init+0x358>)
 8005702:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005706:	6413      	str	r3, [r2, #64]	@ 0x40
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <rcc_driver_init+0x358>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <rcc_driver_init+0x358>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <rcc_driver_init+0x358>)
 800571e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005722:	6413      	str	r3, [r2, #64]	@ 0x40
 8005724:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <rcc_driver_init+0x358>)
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 8005730:	2300      	movs	r3, #0
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <rcc_driver_init+0x358>)
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	4a0e      	ldr	r2, [pc, #56]	@ (8005774 <rcc_driver_init+0x358>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800573e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <rcc_driver_init+0x358>)
 8005742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 800574c:	2300      	movs	r3, #0
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	4b08      	ldr	r3, [pc, #32]	@ (8005774 <rcc_driver_init+0x358>)
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <rcc_driver_init+0x358>)
 8005756:	f043 0320 	orr.w	r3, r3, #32
 800575a:	6453      	str	r3, [r2, #68]	@ 0x44
 800575c:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <rcc_driver_init+0x358>)
 800575e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	687b      	ldr	r3, [r7, #4]

	return initResult;
 8005768:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800576c:	4618      	mov	r0, r3
 800576e:	37b0      	adds	r7, #176	@ 0xb0
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40023800 	.word	0x40023800

08005778 <trace_driverEnqueueTraceMessage>:

GOS_STATIC trace_entry_t traceEntries [TRACE_ENTRY_MAX_NUM];
GOS_STATIC u8_t          nextEntryIndex = 0u;

gos_result_t trace_driverEnqueueTraceMessage (const char_t* message, gos_result_t result)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
	if (nextEntryIndex < TRACE_ENTRY_MAX_NUM)
 8005784:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <trace_driverEnqueueTraceMessage+0x60>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b17      	cmp	r3, #23
 800578a:	d820      	bhi.n	80057ce <trace_driverEnqueueTraceMessage+0x56>
	{
		(void_t) strcpy(traceEntries[nextEntryIndex].message, message);
 800578c:	4b12      	ldr	r3, [pc, #72]	@ (80057d8 <trace_driverEnqueueTraceMessage+0x60>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	00da      	lsls	r2, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	4a0f      	ldr	r2, [pc, #60]	@ (80057dc <trace_driverEnqueueTraceMessage+0x64>)
 800579e:	4413      	add	r3, r2
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f013 fdf9 	bl	801939a <strcpy>
		traceEntries[nextEntryIndex].result = result;
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <trace_driverEnqueueTraceMessage+0x60>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	490b      	ldr	r1, [pc, #44]	@ (80057dc <trace_driverEnqueueTraceMessage+0x64>)
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	00da      	lsls	r2, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	3350      	adds	r3, #80	@ 0x50
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	701a      	strb	r2, [r3, #0]
		nextEntryIndex++;
 80057c2:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <trace_driverEnqueueTraceMessage+0x60>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	3301      	adds	r3, #1
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4b03      	ldr	r3, [pc, #12]	@ (80057d8 <trace_driverEnqueueTraceMessage+0x60>)
 80057cc:	701a      	strb	r2, [r3, #0]
	else
	{
		// Trace queue full.
	}

	return result;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20001fa8 	.word	0x20001fa8
 80057dc:	20001810 	.word	0x20001810

080057e0 <trace_driverFlushTraceEntries>:

void_t trace_driverFlushTraceEntries (void_t)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
	u8_t traceIndex = 0u;
 80057e6:	2300      	movs	r3, #0
 80057e8:	71fb      	strb	r3, [r7, #7]

	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	e017      	b.n	8005820 <trace_driverFlushTraceEntries+0x40>
	{
		(void_t) gos_errorTraceInit(traceEntries[traceIndex].message, traceEntries[traceIndex].result);
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	00da      	lsls	r2, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005838 <trace_driverFlushTraceEntries+0x58>)
 80057fe:	1898      	adds	r0, r3, r2
 8005800:	79fa      	ldrb	r2, [r7, #7]
 8005802:	490d      	ldr	r1, [pc, #52]	@ (8005838 <trace_driverFlushTraceEntries+0x58>)
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4413      	add	r3, r2
 800580a:	00da      	lsls	r2, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	440b      	add	r3, r1
 8005810:	3350      	adds	r3, #80	@ 0x50
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4619      	mov	r1, r3
 8005816:	f00f fe77 	bl	8015508 <gos_errorTraceInit>
	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	3301      	adds	r3, #1
 800581e:	71fb      	strb	r3, [r7, #7]
 8005820:	4b06      	ldr	r3, [pc, #24]	@ (800583c <trace_driverFlushTraceEntries+0x5c>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d3e2      	bcc.n	80057f0 <trace_driverFlushTraceEntries+0x10>
	}

	nextEntryIndex = 0u;
 800582a:	4b04      	ldr	r3, [pc, #16]	@ (800583c <trace_driverFlushTraceEntries+0x5c>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20001810 	.word	0x20001810
 800583c:	20001fa8 	.word	0x20001fa8

08005840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005844:	4b0e      	ldr	r3, [pc, #56]	@ (8005880 <HAL_Init+0x40>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0d      	ldr	r2, [pc, #52]	@ (8005880 <HAL_Init+0x40>)
 800584a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800584e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005850:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <HAL_Init+0x40>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0a      	ldr	r2, [pc, #40]	@ (8005880 <HAL_Init+0x40>)
 8005856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800585a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <HAL_Init+0x40>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a07      	ldr	r2, [pc, #28]	@ (8005880 <HAL_Init+0x40>)
 8005862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005868:	2003      	movs	r0, #3
 800586a:	f000 f965 	bl	8005b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800586e:	2000      	movs	r0, #0
 8005870:	f000 f842 	bl	80058f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005874:	f000 f832 	bl	80058dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023c00 	.word	0x40023c00

08005884 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8005888:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <HAL_DeInit+0x54>)
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8005890:	4b11      	ldr	r3, [pc, #68]	@ (80058d8 <HAL_DeInit+0x54>)
 8005892:	2200      	movs	r2, #0
 8005894:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8005896:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <HAL_DeInit+0x54>)
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800589e:	4b0e      	ldr	r3, [pc, #56]	@ (80058d8 <HAL_DeInit+0x54>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80058a4:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <HAL_DeInit+0x54>)
 80058a6:	f04f 32ff 	mov.w	r2, #4294967295
 80058aa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80058ac:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <HAL_DeInit+0x54>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80058b2:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <HAL_DeInit+0x54>)
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80058ba:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <HAL_DeInit+0x54>)
 80058bc:	2200      	movs	r2, #0
 80058be:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80058c0:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <HAL_DeInit+0x54>)
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80058c8:	4b03      	ldr	r3, [pc, #12]	@ (80058d8 <HAL_DeInit+0x54>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80058ce:	f000 f80c 	bl	80058ea <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40023800 	.word	0x40023800

080058dc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80058ea:	b480      	push	{r7}
 80058ec:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80058ee:	bf00      	nop
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005900:	4b12      	ldr	r3, [pc, #72]	@ (800594c <HAL_InitTick+0x54>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <HAL_InitTick+0x58>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800590e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f943 	bl	8005ba2 <HAL_SYSTICK_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e00e      	b.n	8005944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d80a      	bhi.n	8005942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800592c:	2200      	movs	r2, #0
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	f000 f90b 	bl	8005b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005938:	4a06      	ldr	r2, [pc, #24]	@ (8005954 <HAL_InitTick+0x5c>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200001dc 	.word	0x200001dc
 8005950:	2000046c 	.word	0x2000046c
 8005954:	20000468 	.word	0x20000468

08005958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <HAL_IncTick+0x20>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	4b06      	ldr	r3, [pc, #24]	@ (800597c <HAL_IncTick+0x24>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4413      	add	r3, r2
 8005968:	4a04      	ldr	r2, [pc, #16]	@ (800597c <HAL_IncTick+0x24>)
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	2000046c 	.word	0x2000046c
 800597c:	20001fac 	.word	0x20001fac

08005980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return uwTick;
 8005984:	4b03      	ldr	r3, [pc, #12]	@ (8005994 <HAL_GetTick+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20001fac 	.word	0x20001fac

08005998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059a8:	4b0c      	ldr	r3, [pc, #48]	@ (80059dc <__NVIC_SetPriorityGrouping+0x44>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059b4:	4013      	ands	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ca:	4a04      	ldr	r2, [pc, #16]	@ (80059dc <__NVIC_SetPriorityGrouping+0x44>)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	60d3      	str	r3, [r2, #12]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	e000ed00 	.word	0xe000ed00

080059e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <__NVIC_GetPriorityGrouping+0x18>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	f003 0307 	and.w	r3, r3, #7
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db0b      	blt.n	8005a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	f003 021f 	and.w	r2, r3, #31
 8005a14:	4907      	ldr	r1, [pc, #28]	@ (8005a34 <__NVIC_EnableIRQ+0x38>)
 8005a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	e000e100 	.word	0xe000e100

08005a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db0a      	blt.n	8005a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	490c      	ldr	r1, [pc, #48]	@ (8005a84 <__NVIC_SetPriority+0x4c>)
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	0112      	lsls	r2, r2, #4
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a60:	e00a      	b.n	8005a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4908      	ldr	r1, [pc, #32]	@ (8005a88 <__NVIC_SetPriority+0x50>)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3b04      	subs	r3, #4
 8005a70:	0112      	lsls	r2, r2, #4
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	440b      	add	r3, r1
 8005a76:	761a      	strb	r2, [r3, #24]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e000e100 	.word	0xe000e100
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f1c3 0307 	rsb	r3, r3, #7
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	bf28      	it	cs
 8005aaa:	2304      	movcs	r3, #4
 8005aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d902      	bls.n	8005abc <NVIC_EncodePriority+0x30>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3b03      	subs	r3, #3
 8005aba:	e000      	b.n	8005abe <NVIC_EncodePriority+0x32>
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43da      	mvns	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	401a      	ands	r2, r3
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	43d9      	mvns	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae4:	4313      	orrs	r3, r2
         );
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3724      	adds	r7, #36	@ 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b04:	d301      	bcc.n	8005b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b06:	2301      	movs	r3, #1
 8005b08:	e00f      	b.n	8005b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <SysTick_Config+0x40>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b12:	210f      	movs	r1, #15
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	f7ff ff8e 	bl	8005a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <SysTick_Config+0x40>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b22:	4b04      	ldr	r3, [pc, #16]	@ (8005b34 <SysTick_Config+0x40>)
 8005b24:	2207      	movs	r2, #7
 8005b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000e010 	.word	0xe000e010

08005b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff ff29 	bl	8005998 <__NVIC_SetPriorityGrouping>
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b60:	f7ff ff3e 	bl	80059e0 <__NVIC_GetPriorityGrouping>
 8005b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f7ff ff8e 	bl	8005a8c <NVIC_EncodePriority>
 8005b70:	4602      	mov	r2, r0
 8005b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff5d 	bl	8005a38 <__NVIC_SetPriority>
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff ff31 	bl	80059fc <__NVIC_EnableIRQ>
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff ffa2 	bl	8005af4 <SysTick_Config>
 8005bb0:	4603      	mov	r3, r0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bc8:	f7ff feda 	bl	8005980 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e099      	b.n	8005d0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bf8:	e00f      	b.n	8005c1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bfa:	f7ff fec1 	bl	8005980 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d908      	bls.n	8005c1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2203      	movs	r2, #3
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e078      	b.n	8005d0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e8      	bne.n	8005bfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4b38      	ldr	r3, [pc, #224]	@ (8005d14 <HAL_DMA_Init+0x158>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d107      	bne.n	8005c84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0307 	bic.w	r3, r3, #7
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d117      	bne.n	8005cde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb0d 	bl	80062e0 <DMA_CheckFifoParam>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2240      	movs	r2, #64	@ 0x40
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e016      	b.n	8005d0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fac4 	bl	8006274 <DMA_CalcBaseAndBitshift>
 8005cec:	4603      	mov	r3, r0
 8005cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	223f      	movs	r2, #63	@ 0x3f
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	f010803f 	.word	0xf010803f

08005d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_DMA_Start_IT+0x26>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e040      	b.n	8005dc0 <HAL_DMA_Start_IT+0xa8>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d12f      	bne.n	8005db2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fa56 	bl	8006218 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d70:	223f      	movs	r2, #63	@ 0x3f
 8005d72:	409a      	lsls	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0216 	orr.w	r2, r2, #22
 8005d86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e005      	b.n	8005dbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dd6:	f7ff fdd3 	bl	8005980 <HAL_GetTick>
 8005dda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d008      	beq.n	8005dfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2280      	movs	r2, #128	@ 0x80
 8005dec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e052      	b.n	8005ea0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0216 	bic.w	r2, r2, #22
 8005e08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <HAL_DMA_Abort+0x62>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0208 	bic.w	r2, r2, #8
 8005e38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e4a:	e013      	b.n	8005e74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e4c:	f7ff fd98 	bl	8005980 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b05      	cmp	r3, #5
 8005e58:	d90c      	bls.n	8005e74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e015      	b.n	8005ea0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e4      	bne.n	8005e4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e86:	223f      	movs	r2, #63	@ 0x3f
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d004      	beq.n	8005ec6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e00c      	b.n	8005ee0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2205      	movs	r2, #5
 8005eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ef8:	4b8e      	ldr	r3, [pc, #568]	@ (8006134 <HAL_DMA_IRQHandler+0x248>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a8e      	ldr	r2, [pc, #568]	@ (8006138 <HAL_DMA_IRQHandler+0x24c>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	0a9b      	lsrs	r3, r3, #10
 8005f04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f16:	2208      	movs	r2, #8
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01a      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d013      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0204 	bic.w	r2, r2, #4
 8005f3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	2208      	movs	r2, #8
 8005f46:	409a      	lsls	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f50:	f043 0201 	orr.w	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d012      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	2204      	movs	r2, #4
 8005f94:	409a      	lsls	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d012      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbc:	f043 0204 	orr.w	r2, r3, #4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc8:	2210      	movs	r2, #16
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d043      	beq.n	800605c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d03c      	beq.n	800605c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d018      	beq.n	800602e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d108      	bne.n	800601c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d024      	beq.n	800605c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
 800601a:	e01f      	b.n	800605c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
 800602c:	e016      	b.n	800605c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d107      	bne.n	800604c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0208 	bic.w	r2, r2, #8
 800604a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006060:	2220      	movs	r2, #32
 8006062:	409a      	lsls	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4013      	ands	r3, r2
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 808f 	beq.w	800618c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8087 	beq.w	800618c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006082:	2220      	movs	r2, #32
 8006084:	409a      	lsls	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b05      	cmp	r3, #5
 8006094:	d136      	bne.n	8006104 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0216 	bic.w	r2, r2, #22
 80060a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695a      	ldr	r2, [r3, #20]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <HAL_DMA_IRQHandler+0x1da>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0208 	bic.w	r2, r2, #8
 80060d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060da:	223f      	movs	r2, #63	@ 0x3f
 80060dc:	409a      	lsls	r2, r3
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d07e      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
        }
        return;
 8006102:	e079      	b.n	80061f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01d      	beq.n	800614e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10d      	bne.n	800613c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006124:	2b00      	cmp	r3, #0
 8006126:	d031      	beq.n	800618c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
 8006130:	e02c      	b.n	800618c <HAL_DMA_IRQHandler+0x2a0>
 8006132:	bf00      	nop
 8006134:	200001dc 	.word	0x200001dc
 8006138:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d023      	beq.n	800618c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
 800614c:	e01e      	b.n	800618c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0210 	bic.w	r2, r2, #16
 800616a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006190:	2b00      	cmp	r3, #0
 8006192:	d032      	beq.n	80061fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d022      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2205      	movs	r2, #5
 80061a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d307      	bcc.n	80061d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f2      	bne.n	80061b8 <HAL_DMA_IRQHandler+0x2cc>
 80061d2:	e000      	b.n	80061d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061d4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
 80061f6:	e000      	b.n	80061fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80061f8:	bf00      	nop
    }
  }
}
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006234:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b40      	cmp	r3, #64	@ 0x40
 8006244:	d108      	bne.n	8006258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006256:	e007      	b.n	8006268 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	3b10      	subs	r3, #16
 8006284:	4a14      	ldr	r2, [pc, #80]	@ (80062d8 <DMA_CalcBaseAndBitshift+0x64>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800628e:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <DMA_CalcBaseAndBitshift+0x68>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d909      	bls.n	80062b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80062b4:	e007      	b.n	80062c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	aaaaaaab 	.word	0xaaaaaaab
 80062dc:	0801cf1c 	.word	0x0801cf1c

080062e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11f      	bne.n	800633a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d856      	bhi.n	80063ae <DMA_CheckFifoParam+0xce>
 8006300:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <DMA_CheckFifoParam+0x28>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	0800632b 	.word	0x0800632b
 8006310:	08006319 	.word	0x08006319
 8006314:	080063af 	.word	0x080063af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d046      	beq.n	80063b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006328:	e043      	b.n	80063b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006332:	d140      	bne.n	80063b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006338:	e03d      	b.n	80063b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006342:	d121      	bne.n	8006388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d837      	bhi.n	80063ba <DMA_CheckFifoParam+0xda>
 800634a:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <DMA_CheckFifoParam+0x70>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	08006367 	.word	0x08006367
 8006358:	08006361 	.word	0x08006361
 800635c:	08006379 	.word	0x08006379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e030      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d025      	beq.n	80063be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006376:	e022      	b.n	80063be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006380:	d11f      	bne.n	80063c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006386:	e01c      	b.n	80063c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d903      	bls.n	8006396 <DMA_CheckFifoParam+0xb6>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d003      	beq.n	800639c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006394:	e018      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
      break;
 800639a:	e015      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00e      	beq.n	80063c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      break;
 80063ac:	e00b      	b.n	80063c6 <DMA_CheckFifoParam+0xe6>
      break;
 80063ae:	bf00      	nop
 80063b0:	e00a      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063b2:	bf00      	nop
 80063b4:	e008      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063b6:	bf00      	nop
 80063b8:	e006      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063ba:	bf00      	nop
 80063bc:	e004      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063c6:	bf00      	nop
    }
  } 
  
  return status; 
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop

080063d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063ea:	4b23      	ldr	r3, [pc, #140]	@ (8006478 <HAL_FLASH_Program+0xa0>)
 80063ec:	7e1b      	ldrb	r3, [r3, #24]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_FLASH_Program+0x1e>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e03b      	b.n	800646e <HAL_FLASH_Program+0x96>
 80063f6:	4b20      	ldr	r3, [pc, #128]	@ (8006478 <HAL_FLASH_Program+0xa0>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006400:	f000 f870 	bl	80064e4 <FLASH_WaitForLastOperation>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d12b      	bne.n	8006466 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006414:	783b      	ldrb	r3, [r7, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f000 f91b 	bl	8006654 <FLASH_Program_Byte>
 800641e:	e016      	b.n	800644e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d105      	bne.n	8006432 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006426:	883b      	ldrh	r3, [r7, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f000 f8ee 	bl	800660c <FLASH_Program_HalfWord>
 8006430:	e00d      	b.n	800644e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d105      	bne.n	8006444 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	68b8      	ldr	r0, [r7, #8]
 800643e:	f000 f8c3 	bl	80065c8 <FLASH_Program_Word>
 8006442:	e004      	b.n	800644e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006448:	68b8      	ldr	r0, [r7, #8]
 800644a:	f000 f88b 	bl	8006564 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800644e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006452:	f000 f847 	bl	80064e4 <FLASH_WaitForLastOperation>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800645a:	4b08      	ldr	r3, [pc, #32]	@ (800647c <HAL_FLASH_Program+0xa4>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4a07      	ldr	r2, [pc, #28]	@ (800647c <HAL_FLASH_Program+0xa4>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006466:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <HAL_FLASH_Program+0xa0>)
 8006468:	2200      	movs	r2, #0
 800646a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20001fb0 	.word	0x20001fb0
 800647c:	40023c00 	.word	0x40023c00

08006480 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <HAL_FLASH_Unlock+0x38>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	da0b      	bge.n	80064aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006492:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <HAL_FLASH_Unlock+0x38>)
 8006494:	4a09      	ldr	r2, [pc, #36]	@ (80064bc <HAL_FLASH_Unlock+0x3c>)
 8006496:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006498:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <HAL_FLASH_Unlock+0x38>)
 800649a:	4a09      	ldr	r2, [pc, #36]	@ (80064c0 <HAL_FLASH_Unlock+0x40>)
 800649c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800649e:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <HAL_FLASH_Unlock+0x38>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da01      	bge.n	80064aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80064aa:	79fb      	ldrb	r3, [r7, #7]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40023c00 	.word	0x40023c00
 80064bc:	45670123 	.word	0x45670123
 80064c0:	cdef89ab 	.word	0xcdef89ab

080064c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80064c8:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <HAL_FLASH_Lock+0x1c>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	4a04      	ldr	r2, [pc, #16]	@ (80064e0 <HAL_FLASH_Lock+0x1c>)
 80064ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40023c00 	.word	0x40023c00

080064e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80064f0:	4b1a      	ldr	r3, [pc, #104]	@ (800655c <FLASH_WaitForLastOperation+0x78>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80064f6:	f7ff fa43 	bl	8005980 <HAL_GetTick>
 80064fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80064fc:	e010      	b.n	8006520 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d00c      	beq.n	8006520 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <FLASH_WaitForLastOperation+0x38>
 800650c:	f7ff fa38 	bl	8005980 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d201      	bcs.n	8006520 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e019      	b.n	8006554 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006520:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <FLASH_WaitForLastOperation+0x7c>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e8      	bne.n	80064fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800652c:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <FLASH_WaitForLastOperation+0x7c>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <FLASH_WaitForLastOperation+0x7c>)
 800653a:	2201      	movs	r2, #1
 800653c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800653e:	4b08      	ldr	r3, [pc, #32]	@ (8006560 <FLASH_WaitForLastOperation+0x7c>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800654a:	f000 f8a5 	bl	8006698 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
  
}  
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20001fb0 	.word	0x20001fb0
 8006560:	40023c00 	.word	0x40023c00

08006564 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006570:	4b14      	ldr	r3, [pc, #80]	@ (80065c4 <FLASH_Program_DoubleWord+0x60>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4a13      	ldr	r2, [pc, #76]	@ (80065c4 <FLASH_Program_DoubleWord+0x60>)
 8006576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800657a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800657c:	4b11      	ldr	r3, [pc, #68]	@ (80065c4 <FLASH_Program_DoubleWord+0x60>)
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4a10      	ldr	r2, [pc, #64]	@ (80065c4 <FLASH_Program_DoubleWord+0x60>)
 8006582:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006586:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006588:	4b0e      	ldr	r3, [pc, #56]	@ (80065c4 <FLASH_Program_DoubleWord+0x60>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	4a0d      	ldr	r2, [pc, #52]	@ (80065c4 <FLASH_Program_DoubleWord+0x60>)
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800659a:	f3bf 8f6f 	isb	sy
}
 800659e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80065a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	000a      	movs	r2, r1
 80065ae:	2300      	movs	r3, #0
 80065b0:	68f9      	ldr	r1, [r7, #12]
 80065b2:	3104      	adds	r1, #4
 80065b4:	4613      	mov	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40023c00 	.word	0x40023c00

080065c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <FLASH_Program_Word+0x40>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006608 <FLASH_Program_Word+0x40>)
 80065d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80065de:	4b0a      	ldr	r3, [pc, #40]	@ (8006608 <FLASH_Program_Word+0x40>)
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	4a09      	ldr	r2, [pc, #36]	@ (8006608 <FLASH_Program_Word+0x40>)
 80065e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80065ea:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <FLASH_Program_Word+0x40>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	4a06      	ldr	r2, [pc, #24]	@ (8006608 <FLASH_Program_Word+0x40>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	601a      	str	r2, [r3, #0]
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40023c00 	.word	0x40023c00

0800660c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006618:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <FLASH_Program_HalfWord+0x44>)
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	4a0c      	ldr	r2, [pc, #48]	@ (8006650 <FLASH_Program_HalfWord+0x44>)
 800661e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006624:	4b0a      	ldr	r3, [pc, #40]	@ (8006650 <FLASH_Program_HalfWord+0x44>)
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	4a09      	ldr	r2, [pc, #36]	@ (8006650 <FLASH_Program_HalfWord+0x44>)
 800662a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800662e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006630:	4b07      	ldr	r3, [pc, #28]	@ (8006650 <FLASH_Program_HalfWord+0x44>)
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	4a06      	ldr	r2, [pc, #24]	@ (8006650 <FLASH_Program_HalfWord+0x44>)
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	887a      	ldrh	r2, [r7, #2]
 8006640:	801a      	strh	r2, [r3, #0]
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40023c00 	.word	0x40023c00

08006654 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006660:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <FLASH_Program_Byte+0x40>)
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	4a0b      	ldr	r2, [pc, #44]	@ (8006694 <FLASH_Program_Byte+0x40>)
 8006666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800666c:	4b09      	ldr	r3, [pc, #36]	@ (8006694 <FLASH_Program_Byte+0x40>)
 800666e:	4a09      	ldr	r2, [pc, #36]	@ (8006694 <FLASH_Program_Byte+0x40>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006674:	4b07      	ldr	r3, [pc, #28]	@ (8006694 <FLASH_Program_Byte+0x40>)
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	4a06      	ldr	r2, [pc, #24]	@ (8006694 <FLASH_Program_Byte+0x40>)
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	701a      	strb	r2, [r3, #0]
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40023c00 	.word	0x40023c00

08006698 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800669c:	4b2f      	ldr	r3, [pc, #188]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80066a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f043 0310 	orr.w	r3, r3, #16
 80066b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 80066b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80066b4:	4b29      	ldr	r3, [pc, #164]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 80066b6:	2210      	movs	r2, #16
 80066b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80066ba:	4b28      	ldr	r3, [pc, #160]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80066c6:	4b26      	ldr	r3, [pc, #152]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f043 0308 	orr.w	r3, r3, #8
 80066ce:	4a24      	ldr	r2, [pc, #144]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 80066d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80066d2:	4b22      	ldr	r3, [pc, #136]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 80066d4:	2220      	movs	r2, #32
 80066d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80066d8:	4b20      	ldr	r3, [pc, #128]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80066e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f043 0304 	orr.w	r3, r3, #4
 80066ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 80066ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80066f0:	4b1a      	ldr	r3, [pc, #104]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 80066f2:	2240      	movs	r2, #64	@ 0x40
 80066f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80066f6:	4b19      	ldr	r3, [pc, #100]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006702:	4b17      	ldr	r3, [pc, #92]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f043 0302 	orr.w	r3, r3, #2
 800670a:	4a15      	ldr	r2, [pc, #84]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 800670c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800670e:	4b13      	ldr	r3, [pc, #76]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 8006710:	2280      	movs	r2, #128	@ 0x80
 8006712:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006714:	4b11      	ldr	r3, [pc, #68]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006720:	4b0f      	ldr	r3, [pc, #60]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	4a0d      	ldr	r2, [pc, #52]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 800672a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800672c:	4b0b      	ldr	r3, [pc, #44]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 800672e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006732:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006734:	4b09      	ldr	r3, [pc, #36]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006740:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	4a05      	ldr	r2, [pc, #20]	@ (8006760 <FLASH_SetErrorCode+0xc8>)
 800674a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800674c:	4b03      	ldr	r3, [pc, #12]	@ (800675c <FLASH_SetErrorCode+0xc4>)
 800674e:	2202      	movs	r2, #2
 8006750:	60da      	str	r2, [r3, #12]
  }
}
 8006752:	bf00      	nop
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40023c00 	.word	0x40023c00
 8006760:	20001fb0 	.word	0x20001fb0

08006764 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006776:	4b31      	ldr	r3, [pc, #196]	@ (800683c <HAL_FLASHEx_Erase+0xd8>)
 8006778:	7e1b      	ldrb	r3, [r3, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_FLASHEx_Erase+0x1e>
 800677e:	2302      	movs	r3, #2
 8006780:	e058      	b.n	8006834 <HAL_FLASHEx_Erase+0xd0>
 8006782:	4b2e      	ldr	r3, [pc, #184]	@ (800683c <HAL_FLASHEx_Erase+0xd8>)
 8006784:	2201      	movs	r2, #1
 8006786:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006788:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800678c:	f7ff feaa 	bl	80064e4 <FLASH_WaitForLastOperation>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d148      	bne.n	800682c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d115      	bne.n	80067d6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f000 f844 	bl	8006844 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80067c0:	f7ff fe90 	bl	80064e4 <FLASH_WaitForLastOperation>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80067c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006840 <HAL_FLASHEx_Erase+0xdc>)
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006840 <HAL_FLASHEx_Erase+0xdc>)
 80067ce:	f023 0304 	bic.w	r3, r3, #4
 80067d2:	6113      	str	r3, [r2, #16]
 80067d4:	e028      	b.n	8006828 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	e01c      	b.n	8006818 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	68b8      	ldr	r0, [r7, #8]
 80067e8:	f000 f850 	bl	800688c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80067f0:	f7ff fe78 	bl	80064e4 <FLASH_WaitForLastOperation>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80067f8:	4b11      	ldr	r3, [pc, #68]	@ (8006840 <HAL_FLASHEx_Erase+0xdc>)
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	4a10      	ldr	r2, [pc, #64]	@ (8006840 <HAL_FLASHEx_Erase+0xdc>)
 80067fe:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8006802:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	601a      	str	r2, [r3, #0]
          break;
 8006810:	e00a      	b.n	8006828 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	3301      	adds	r3, #1
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4413      	add	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d3da      	bcc.n	80067de <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8006828:	f000 f878 	bl	800691c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800682c:	4b03      	ldr	r3, [pc, #12]	@ (800683c <HAL_FLASHEx_Erase+0xd8>)
 800682e:	2200      	movs	r2, #0
 8006830:	761a      	strb	r2, [r3, #24]

  return status;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20001fb0 	.word	0x20001fb0
 8006840:	40023c00 	.word	0x40023c00

08006844 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006850:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <FLASH_MassErase+0x44>)
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	4a0c      	ldr	r2, [pc, #48]	@ (8006888 <FLASH_MassErase+0x44>)
 8006856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <FLASH_MassErase+0x44>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <FLASH_MassErase+0x44>)
 8006862:	f043 0304 	orr.w	r3, r3, #4
 8006866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006868:	4b07      	ldr	r3, [pc, #28]	@ (8006888 <FLASH_MassErase+0x44>)
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	4313      	orrs	r3, r2
 8006872:	4a05      	ldr	r2, [pc, #20]	@ (8006888 <FLASH_MassErase+0x44>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006878:	6113      	str	r3, [r2, #16]
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40023c00 	.word	0x40023c00

0800688c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	e010      	b.n	80068ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d103      	bne.n	80068b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80068ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e009      	b.n	80068ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d103      	bne.n	80068c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80068bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e002      	b.n	80068ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80068c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068ca:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	4a12      	ldr	r2, [pc, #72]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80068d6:	4b10      	ldr	r3, [pc, #64]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	490f      	ldr	r1, [pc, #60]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80068e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80068ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80068ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4313      	orrs	r3, r2
 80068f8:	4a07      	ldr	r2, [pc, #28]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006900:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	4a04      	ldr	r2, [pc, #16]	@ (8006918 <FLASH_Erase_Sector+0x8c>)
 8006906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800690a:	6113      	str	r3, [r2, #16]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40023c00 	.word	0x40023c00

0800691c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006920:	4b20      	ldr	r3, [pc, #128]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006928:	2b00      	cmp	r3, #0
 800692a:	d017      	beq.n	800695c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800692c:	4b1d      	ldr	r3, [pc, #116]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1c      	ldr	r2, [pc, #112]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006932:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006936:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006938:	4b1a      	ldr	r3, [pc, #104]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a19      	ldr	r2, [pc, #100]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800693e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	4b17      	ldr	r3, [pc, #92]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a16      	ldr	r2, [pc, #88]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800694a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800694e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006950:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a13      	ldr	r2, [pc, #76]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800695a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800695c:	4b11      	ldr	r3, [pc, #68]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006968:	4b0e      	ldr	r3, [pc, #56]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a0d      	ldr	r2, [pc, #52]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800696e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006972:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0a      	ldr	r2, [pc, #40]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800697a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b08      	ldr	r3, [pc, #32]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a07      	ldr	r2, [pc, #28]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800698a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800698c:	4b05      	ldr	r3, [pc, #20]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a04      	ldr	r2, [pc, #16]	@ (80069a4 <FLASH_FlushCaches+0x88>)
 8006992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006996:	6013      	str	r3, [r2, #0]
  }
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40023c00 	.word	0x40023c00

080069a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b089      	sub	sp, #36	@ 0x24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	e165      	b.n	8006c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069c4:	2201      	movs	r2, #1
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4013      	ands	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	429a      	cmp	r2, r3
 80069de:	f040 8154 	bne.w	8006c8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d00b      	beq.n	8006a02 <HAL_GPIO_Init+0x5a>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d007      	beq.n	8006a02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069f6:	2b11      	cmp	r3, #17
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b12      	cmp	r3, #18
 8006a00:	d130      	bne.n	8006a64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4013      	ands	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a38:	2201      	movs	r2, #1
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	4013      	ands	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f003 0201 	and.w	r2, r3, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	2203      	movs	r2, #3
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	43db      	mvns	r3, r3
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d003      	beq.n	8006aa4 <HAL_GPIO_Init+0xfc>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b12      	cmp	r3, #18
 8006aa2:	d123      	bne.n	8006aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	08da      	lsrs	r2, r3, #3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3208      	adds	r2, #8
 8006aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	220f      	movs	r2, #15
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	08da      	lsrs	r2, r3, #3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3208      	adds	r2, #8
 8006ae6:	69b9      	ldr	r1, [r7, #24]
 8006ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	2203      	movs	r2, #3
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	43db      	mvns	r3, r3
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	4013      	ands	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 0203 	and.w	r2, r3, #3
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80ae 	beq.w	8006c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	4b5d      	ldr	r3, [pc, #372]	@ (8006ca8 <HAL_GPIO_Init+0x300>)
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	4a5c      	ldr	r2, [pc, #368]	@ (8006ca8 <HAL_GPIO_Init+0x300>)
 8006b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ca8 <HAL_GPIO_Init+0x300>)
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b4a:	4a58      	ldr	r2, [pc, #352]	@ (8006cac <HAL_GPIO_Init+0x304>)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	089b      	lsrs	r3, r3, #2
 8006b50:	3302      	adds	r3, #2
 8006b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	220f      	movs	r2, #15
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a4f      	ldr	r2, [pc, #316]	@ (8006cb0 <HAL_GPIO_Init+0x308>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d025      	beq.n	8006bc2 <HAL_GPIO_Init+0x21a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4e      	ldr	r2, [pc, #312]	@ (8006cb4 <HAL_GPIO_Init+0x30c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01f      	beq.n	8006bbe <HAL_GPIO_Init+0x216>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a4d      	ldr	r2, [pc, #308]	@ (8006cb8 <HAL_GPIO_Init+0x310>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d019      	beq.n	8006bba <HAL_GPIO_Init+0x212>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a4c      	ldr	r2, [pc, #304]	@ (8006cbc <HAL_GPIO_Init+0x314>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_GPIO_Init+0x20e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a4b      	ldr	r2, [pc, #300]	@ (8006cc0 <HAL_GPIO_Init+0x318>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00d      	beq.n	8006bb2 <HAL_GPIO_Init+0x20a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc4 <HAL_GPIO_Init+0x31c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d007      	beq.n	8006bae <HAL_GPIO_Init+0x206>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a49      	ldr	r2, [pc, #292]	@ (8006cc8 <HAL_GPIO_Init+0x320>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d101      	bne.n	8006baa <HAL_GPIO_Init+0x202>
 8006ba6:	2306      	movs	r3, #6
 8006ba8:	e00c      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006baa:	2307      	movs	r3, #7
 8006bac:	e00a      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006bae:	2305      	movs	r3, #5
 8006bb0:	e008      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e006      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e004      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e002      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_GPIO_Init+0x21c>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	f002 0203 	and.w	r2, r2, #3
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bd4:	4935      	ldr	r1, [pc, #212]	@ (8006cac <HAL_GPIO_Init+0x304>)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	3302      	adds	r3, #2
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006be2:	4b3a      	ldr	r3, [pc, #232]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c06:	4a31      	ldr	r2, [pc, #196]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c30:	4a26      	ldr	r2, [pc, #152]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c36:	4b25      	ldr	r3, [pc, #148]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c60:	4b1a      	ldr	r3, [pc, #104]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c84:	4a11      	ldr	r2, [pc, #68]	@ (8006ccc <HAL_GPIO_Init+0x324>)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	f67f ae96 	bls.w	80069c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3724      	adds	r7, #36	@ 0x24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40013800 	.word	0x40013800
 8006cb0:	40020000 	.word	0x40020000
 8006cb4:	40020400 	.word	0x40020400
 8006cb8:	40020800 	.word	0x40020800
 8006cbc:	40020c00 	.word	0x40020c00
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40021400 	.word	0x40021400
 8006cc8:	40021800 	.word	0x40021800
 8006ccc:	40013c00 	.word	0x40013c00

08006cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	807b      	strh	r3, [r7, #2]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ce0:	787b      	ldrb	r3, [r7, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006cec:	e003      	b.n	8006cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cee:	887b      	ldrh	r3, [r7, #2]
 8006cf0:	041a      	lsls	r2, r3, #16
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	619a      	str	r2, [r3, #24]
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	401a      	ands	r2, r3
 8006d16:	887b      	ldrh	r3, [r7, #2]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d104      	bne.n	8006d26 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d1c:	887b      	ldrh	r3, [r7, #2]
 8006d1e:	041a      	lsls	r2, r3, #16
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006d24:	e002      	b.n	8006d2c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006d26:	887a      	ldrh	r2, [r7, #2]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	619a      	str	r2, [r3, #24]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d42:	4b08      	ldr	r3, [pc, #32]	@ (8006d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d4e:	4a05      	ldr	r2, [pc, #20]	@ (8006d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d50:	88fb      	ldrh	r3, [r7, #6]
 8006d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f006 f9ce 	bl	800d0f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40013c00 	.word	0x40013c00

08006d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0cc      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d7c:	4b68      	ldr	r3, [pc, #416]	@ (8006f20 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d90c      	bls.n	8006da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8a:	4b65      	ldr	r3, [pc, #404]	@ (8006f20 <HAL_RCC_ClockConfig+0x1b8>)
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d92:	4b63      	ldr	r3, [pc, #396]	@ (8006f20 <HAL_RCC_ClockConfig+0x1b8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0b8      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d020      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dbc:	4b59      	ldr	r3, [pc, #356]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4a58      	ldr	r2, [pc, #352]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dd4:	4b53      	ldr	r3, [pc, #332]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	4a52      	ldr	r2, [pc, #328]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de0:	4b50      	ldr	r3, [pc, #320]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	494d      	ldr	r1, [pc, #308]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d044      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e06:	4b47      	ldr	r3, [pc, #284]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d119      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07f      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d003      	beq.n	8006e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e26:	4b3f      	ldr	r3, [pc, #252]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e06f      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e36:	4b3b      	ldr	r3, [pc, #236]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e067      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e46:	4b37      	ldr	r3, [pc, #220]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f023 0203 	bic.w	r2, r3, #3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	4934      	ldr	r1, [pc, #208]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e58:	f7fe fd92 	bl	8005980 <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5e:	e00a      	b.n	8006e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e60:	f7fe fd8e 	bl	8005980 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e04f      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e76:	4b2b      	ldr	r3, [pc, #172]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 020c 	and.w	r2, r3, #12
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d1eb      	bne.n	8006e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e88:	4b25      	ldr	r3, [pc, #148]	@ (8006f20 <HAL_RCC_ClockConfig+0x1b8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d20c      	bcs.n	8006eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e96:	4b22      	ldr	r3, [pc, #136]	@ (8006f20 <HAL_RCC_ClockConfig+0x1b8>)
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9e:	4b20      	ldr	r3, [pc, #128]	@ (8006f20 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d001      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e032      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ebc:	4b19      	ldr	r3, [pc, #100]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	4916      	ldr	r1, [pc, #88]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eda:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	490e      	ldr	r1, [pc, #56]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006eee:	f000 f855 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	091b      	lsrs	r3, r3, #4
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	490a      	ldr	r1, [pc, #40]	@ (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006f00:	5ccb      	ldrb	r3, [r1, r3]
 8006f02:	fa22 f303 	lsr.w	r3, r2, r3
 8006f06:	4a09      	ldr	r2, [pc, #36]	@ (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f0a:	4b09      	ldr	r3, [pc, #36]	@ (8006f30 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fcf2 	bl	80058f8 <HAL_InitTick>

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023c00 	.word	0x40023c00
 8006f24:	40023800 	.word	0x40023800
 8006f28:	0801ca78 	.word	0x0801ca78
 8006f2c:	200001dc 	.word	0x200001dc
 8006f30:	20000468 	.word	0x20000468

08006f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f38:	4b03      	ldr	r3, [pc, #12]	@ (8006f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	200001dc 	.word	0x200001dc

08006f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f50:	f7ff fff0 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8006f54:	4602      	mov	r2, r0
 8006f56:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	0a9b      	lsrs	r3, r3, #10
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	4903      	ldr	r1, [pc, #12]	@ (8006f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f62:	5ccb      	ldrb	r3, [r1, r3]
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	0801ca88 	.word	0x0801ca88

08006f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f78:	f7ff ffdc 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	0b5b      	lsrs	r3, r3, #13
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	4903      	ldr	r1, [pc, #12]	@ (8006f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f8a:	5ccb      	ldrb	r3, [r1, r3]
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40023800 	.word	0x40023800
 8006f98:	0801ca88 	.word	0x0801ca88

08006f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b0ae      	sub	sp, #184	@ 0xb8
 8006fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fc2:	4bcb      	ldr	r3, [pc, #812]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	f200 8206 	bhi.w	80073dc <HAL_RCC_GetSysClockFreq+0x440>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	080073dd 	.word	0x080073dd
 8006fe0:	080073dd 	.word	0x080073dd
 8006fe4:	080073dd 	.word	0x080073dd
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	080073dd 	.word	0x080073dd
 8006ff0:	080073dd 	.word	0x080073dd
 8006ff4:	080073dd 	.word	0x080073dd
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	080073dd 	.word	0x080073dd
 8007000:	080073dd 	.word	0x080073dd
 8007004:	080073dd 	.word	0x080073dd
 8007008:	0800720d 	.word	0x0800720d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800700c:	4bb9      	ldr	r3, [pc, #740]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800700e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8007012:	e1e7      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007014:	4bb8      	ldr	r3, [pc, #736]	@ (80072f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800701a:	e1e3      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800701c:	4bb4      	ldr	r3, [pc, #720]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007028:	4bb1      	ldr	r3, [pc, #708]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d071      	beq.n	8007118 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007034:	4bae      	ldr	r3, [pc, #696]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007040:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007050:	2300      	movs	r3, #0
 8007052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800705a:	4622      	mov	r2, r4
 800705c:	462b      	mov	r3, r5
 800705e:	f04f 0000 	mov.w	r0, #0
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	0159      	lsls	r1, r3, #5
 8007068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800706c:	0150      	lsls	r0, r2, #5
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4621      	mov	r1, r4
 8007074:	1a51      	subs	r1, r2, r1
 8007076:	6439      	str	r1, [r7, #64]	@ 0x40
 8007078:	4629      	mov	r1, r5
 800707a:	eb63 0301 	sbc.w	r3, r3, r1
 800707e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800708c:	4649      	mov	r1, r9
 800708e:	018b      	lsls	r3, r1, #6
 8007090:	4641      	mov	r1, r8
 8007092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007096:	4641      	mov	r1, r8
 8007098:	018a      	lsls	r2, r1, #6
 800709a:	4641      	mov	r1, r8
 800709c:	1a51      	subs	r1, r2, r1
 800709e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070a0:	4649      	mov	r1, r9
 80070a2:	eb63 0301 	sbc.w	r3, r3, r1
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80070b4:	4649      	mov	r1, r9
 80070b6:	00cb      	lsls	r3, r1, #3
 80070b8:	4641      	mov	r1, r8
 80070ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070be:	4641      	mov	r1, r8
 80070c0:	00ca      	lsls	r2, r1, #3
 80070c2:	4610      	mov	r0, r2
 80070c4:	4619      	mov	r1, r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	4622      	mov	r2, r4
 80070ca:	189b      	adds	r3, r3, r2
 80070cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ce:	462b      	mov	r3, r5
 80070d0:	460a      	mov	r2, r1
 80070d2:	eb42 0303 	adc.w	r3, r2, r3
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80070e4:	4629      	mov	r1, r5
 80070e6:	024b      	lsls	r3, r1, #9
 80070e8:	4621      	mov	r1, r4
 80070ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070ee:	4621      	mov	r1, r4
 80070f0:	024a      	lsls	r2, r1, #9
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007100:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007104:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007108:	f7fd fc86 	bl	8004a18 <__aeabi_uldivmod>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4613      	mov	r3, r2
 8007112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007116:	e067      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007118:	4b75      	ldr	r3, [pc, #468]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	099b      	lsrs	r3, r3, #6
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007124:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800712c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007132:	2300      	movs	r3, #0
 8007134:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007136:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800713a:	4622      	mov	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	f04f 0000 	mov.w	r0, #0
 8007142:	f04f 0100 	mov.w	r1, #0
 8007146:	0159      	lsls	r1, r3, #5
 8007148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800714c:	0150      	lsls	r0, r2, #5
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4621      	mov	r1, r4
 8007154:	1a51      	subs	r1, r2, r1
 8007156:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007158:	4629      	mov	r1, r5
 800715a:	eb63 0301 	sbc.w	r3, r3, r1
 800715e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800716c:	4649      	mov	r1, r9
 800716e:	018b      	lsls	r3, r1, #6
 8007170:	4641      	mov	r1, r8
 8007172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007176:	4641      	mov	r1, r8
 8007178:	018a      	lsls	r2, r1, #6
 800717a:	4641      	mov	r1, r8
 800717c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007180:	4649      	mov	r1, r9
 8007182:	eb63 0b01 	sbc.w	fp, r3, r1
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007192:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007196:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800719a:	4692      	mov	sl, r2
 800719c:	469b      	mov	fp, r3
 800719e:	4623      	mov	r3, r4
 80071a0:	eb1a 0303 	adds.w	r3, sl, r3
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	462b      	mov	r3, r5
 80071a8:	eb4b 0303 	adc.w	r3, fp, r3
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80071ba:	4629      	mov	r1, r5
 80071bc:	028b      	lsls	r3, r1, #10
 80071be:	4621      	mov	r1, r4
 80071c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071c4:	4621      	mov	r1, r4
 80071c6:	028a      	lsls	r2, r1, #10
 80071c8:	4610      	mov	r0, r2
 80071ca:	4619      	mov	r1, r3
 80071cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d0:	2200      	movs	r2, #0
 80071d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80071d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80071d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80071da:	f7fd fc1d 	bl	8004a18 <__aeabi_uldivmod>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4613      	mov	r3, r2
 80071e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071e8:	4b41      	ldr	r3, [pc, #260]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	0c1b      	lsrs	r3, r3, #16
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	3301      	adds	r3, #1
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80071fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007202:	fbb2 f3f3 	udiv	r3, r2, r3
 8007206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800720a:	e0eb      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800720c:	4b38      	ldr	r3, [pc, #224]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007218:	4b35      	ldr	r3, [pc, #212]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d06b      	beq.n	80072fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007224:	4b32      	ldr	r3, [pc, #200]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	099b      	lsrs	r3, r3, #6
 800722a:	2200      	movs	r2, #0
 800722c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800722e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	663b      	str	r3, [r7, #96]	@ 0x60
 8007238:	2300      	movs	r3, #0
 800723a:	667b      	str	r3, [r7, #100]	@ 0x64
 800723c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007240:	4622      	mov	r2, r4
 8007242:	462b      	mov	r3, r5
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f04f 0100 	mov.w	r1, #0
 800724c:	0159      	lsls	r1, r3, #5
 800724e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007252:	0150      	lsls	r0, r2, #5
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4621      	mov	r1, r4
 800725a:	1a51      	subs	r1, r2, r1
 800725c:	61b9      	str	r1, [r7, #24]
 800725e:	4629      	mov	r1, r5
 8007260:	eb63 0301 	sbc.w	r3, r3, r1
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007272:	4659      	mov	r1, fp
 8007274:	018b      	lsls	r3, r1, #6
 8007276:	4651      	mov	r1, sl
 8007278:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800727c:	4651      	mov	r1, sl
 800727e:	018a      	lsls	r2, r1, #6
 8007280:	4651      	mov	r1, sl
 8007282:	ebb2 0801 	subs.w	r8, r2, r1
 8007286:	4659      	mov	r1, fp
 8007288:	eb63 0901 	sbc.w	r9, r3, r1
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007298:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800729c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072a0:	4690      	mov	r8, r2
 80072a2:	4699      	mov	r9, r3
 80072a4:	4623      	mov	r3, r4
 80072a6:	eb18 0303 	adds.w	r3, r8, r3
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	462b      	mov	r3, r5
 80072ae:	eb49 0303 	adc.w	r3, r9, r3
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80072c0:	4629      	mov	r1, r5
 80072c2:	024b      	lsls	r3, r1, #9
 80072c4:	4621      	mov	r1, r4
 80072c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072ca:	4621      	mov	r1, r4
 80072cc:	024a      	lsls	r2, r1, #9
 80072ce:	4610      	mov	r0, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072d6:	2200      	movs	r2, #0
 80072d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80072dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072e0:	f7fd fb9a 	bl	8004a18 <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4613      	mov	r3, r2
 80072ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072ee:	e065      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x420>
 80072f0:	40023800 	.word	0x40023800
 80072f4:	00f42400 	.word	0x00f42400
 80072f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072fc:	4b3d      	ldr	r3, [pc, #244]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	099b      	lsrs	r3, r3, #6
 8007302:	2200      	movs	r2, #0
 8007304:	4618      	mov	r0, r3
 8007306:	4611      	mov	r1, r2
 8007308:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800730c:	653b      	str	r3, [r7, #80]	@ 0x50
 800730e:	2300      	movs	r3, #0
 8007310:	657b      	str	r3, [r7, #84]	@ 0x54
 8007312:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007316:	4642      	mov	r2, r8
 8007318:	464b      	mov	r3, r9
 800731a:	f04f 0000 	mov.w	r0, #0
 800731e:	f04f 0100 	mov.w	r1, #0
 8007322:	0159      	lsls	r1, r3, #5
 8007324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007328:	0150      	lsls	r0, r2, #5
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4641      	mov	r1, r8
 8007330:	1a51      	subs	r1, r2, r1
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	4649      	mov	r1, r9
 8007336:	eb63 0301 	sbc.w	r3, r3, r1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007348:	4659      	mov	r1, fp
 800734a:	018b      	lsls	r3, r1, #6
 800734c:	4651      	mov	r1, sl
 800734e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007352:	4651      	mov	r1, sl
 8007354:	018a      	lsls	r2, r1, #6
 8007356:	4651      	mov	r1, sl
 8007358:	1a54      	subs	r4, r2, r1
 800735a:	4659      	mov	r1, fp
 800735c:	eb63 0501 	sbc.w	r5, r3, r1
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	00eb      	lsls	r3, r5, #3
 800736a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800736e:	00e2      	lsls	r2, r4, #3
 8007370:	4614      	mov	r4, r2
 8007372:	461d      	mov	r5, r3
 8007374:	4643      	mov	r3, r8
 8007376:	18e3      	adds	r3, r4, r3
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	464b      	mov	r3, r9
 800737c:	eb45 0303 	adc.w	r3, r5, r3
 8007380:	607b      	str	r3, [r7, #4]
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800738e:	4629      	mov	r1, r5
 8007390:	028b      	lsls	r3, r1, #10
 8007392:	4621      	mov	r1, r4
 8007394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007398:	4621      	mov	r1, r4
 800739a:	028a      	lsls	r2, r1, #10
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a4:	2200      	movs	r2, #0
 80073a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80073aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073ae:	f7fd fb33 	bl	8004a18 <__aeabi_uldivmod>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4613      	mov	r3, r2
 80073b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	0f1b      	lsrs	r3, r3, #28
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80073ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80073da:	e003      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073dc:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80073de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80073e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	37b8      	adds	r7, #184	@ 0xb8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	40023800 	.word	0x40023800
 80073f8:	00f42400 	.word	0x00f42400

080073fc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8007402:	f7fe fabd 	bl	8005980 <HAL_GetTick>
 8007406:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007408:	4b72      	ldr	r3, [pc, #456]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a71      	ldr	r2, [pc, #452]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007414:	e008      	b.n	8007428 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007416:	f7fe fab3 	bl	8005980 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0d0      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007428:	4b6a      	ldr	r3, [pc, #424]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0f0      	beq.n	8007416 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8007434:	4b67      	ldr	r3, [pc, #412]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a66      	ldr	r2, [pc, #408]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800743a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8007440:	f7fe fa9e 	bl	8005980 <HAL_GetTick>
 8007444:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8007446:	4b63      	ldr	r3, [pc, #396]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007448:	2200      	movs	r2, #0
 800744a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800744c:	e00a      	b.n	8007464 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744e:	f7fe fa97 	bl	8005980 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745c:	4293      	cmp	r3, r2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e0b2      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8007464:	4b5b      	ldr	r3, [pc, #364]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ee      	bne.n	800744e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8007470:	f7fe fa86 	bl	8005980 <HAL_GetTick>
 8007474:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8007476:	4b57      	ldr	r3, [pc, #348]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a56      	ldr	r2, [pc, #344]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800747c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8007480:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007484:	f7fe fa7c 	bl	8005980 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b64      	cmp	r3, #100	@ 0x64
 8007490:	d901      	bls.n	8007496 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e099      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8007496:	4b4f      	ldr	r3, [pc, #316]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80074a2:	f7fe fa6d 	bl	8005980 <HAL_GetTick>
 80074a6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80074a8:	4b4a      	ldr	r3, [pc, #296]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a49      	ldr	r2, [pc, #292]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80074ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074b2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b6:	f7fe fa63 	bl	8005980 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e080      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80074c8:	4b42      	ldr	r3, [pc, #264]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80074d4:	f7fe fa54 	bl	8005980 <HAL_GetTick>
 80074d8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80074da:	4b3e      	ldr	r3, [pc, #248]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a3d      	ldr	r2, [pc, #244]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80074e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074e4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074e8:	f7fe fa4a 	bl	8005980 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e067      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80074fa:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8007506:	f7fe fa3b 	bl	8005980 <HAL_GetTick>
 800750a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800750c:	4b31      	ldr	r3, [pc, #196]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a30      	ldr	r2, [pc, #192]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007516:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8007518:	e008      	b.n	800752c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800751a:	f7fe fa31 	bl	8005980 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e04e      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800752c:	4b29      	ldr	r3, [pc, #164]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8007538:	4b26      	ldr	r3, [pc, #152]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800753a:	4a27      	ldr	r2, [pc, #156]	@ (80075d8 <HAL_RCC_DeInit+0x1dc>)
 800753c:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800753e:	4b25      	ldr	r3, [pc, #148]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007540:	4a25      	ldr	r2, [pc, #148]	@ (80075d8 <HAL_RCC_DeInit+0x1dc>)
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8007546:	4b23      	ldr	r3, [pc, #140]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007548:	4a24      	ldr	r2, [pc, #144]	@ (80075dc <HAL_RCC_DeInit+0x1e0>)
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800754e:	4b21      	ldr	r3, [pc, #132]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	4a20      	ldr	r2, [pc, #128]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007554:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8007558:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800755a:	4b1e      	ldr	r3, [pc, #120]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	4a1d      	ldr	r2, [pc, #116]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007564:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8007566:	4b1b      	ldr	r3, [pc, #108]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	4a1a      	ldr	r2, [pc, #104]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800756c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8007572:	4b18      	ldr	r3, [pc, #96]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007578:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800757c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800757e:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	4a14      	ldr	r2, [pc, #80]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007588:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800758a:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	4a11      	ldr	r2, [pc, #68]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007594:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 8007598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759a:	4a0e      	ldr	r2, [pc, #56]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80075a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a6:	4a0b      	ldr	r2, [pc, #44]	@ (80075d4 <HAL_RCC_DeInit+0x1d8>)
 80075a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075ac:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80075ae:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <HAL_RCC_DeInit+0x1e4>)
 80075b0:	4a0c      	ldr	r2, [pc, #48]	@ (80075e4 <HAL_RCC_DeInit+0x1e8>)
 80075b2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80075b4:	4b0c      	ldr	r3, [pc, #48]	@ (80075e8 <HAL_RCC_DeInit+0x1ec>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe f99d 	bl	80058f8 <HAL_InitTick>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80075c8:	2300      	movs	r3, #0
  }
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	24003010 	.word	0x24003010
 80075dc:	04003010 	.word	0x04003010
 80075e0:	200001dc 	.word	0x200001dc
 80075e4:	00f42400 	.word	0x00f42400
 80075e8:	20000468 	.word	0x20000468

080075ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8083 	beq.w	800770c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007606:	4b95      	ldr	r3, [pc, #596]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 030c 	and.w	r3, r3, #12
 800760e:	2b04      	cmp	r3, #4
 8007610:	d019      	beq.n	8007646 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007612:	4b92      	ldr	r3, [pc, #584]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800761a:	2b08      	cmp	r3, #8
 800761c:	d106      	bne.n	800762c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800761e:	4b8f      	ldr	r3, [pc, #572]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800762a:	d00c      	beq.n	8007646 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800762c:	4b8b      	ldr	r3, [pc, #556]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d112      	bne.n	800765e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007638:	4b88      	ldr	r3, [pc, #544]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007644:	d10b      	bne.n	800765e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007646:	4b85      	ldr	r3, [pc, #532]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d05b      	beq.n	800770a <HAL_RCC_OscConfig+0x11e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d157      	bne.n	800770a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e216      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007666:	d106      	bne.n	8007676 <HAL_RCC_OscConfig+0x8a>
 8007668:	4b7c      	ldr	r3, [pc, #496]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a7b      	ldr	r2, [pc, #492]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800766e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e01d      	b.n	80076b2 <HAL_RCC_OscConfig+0xc6>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800767e:	d10c      	bne.n	800769a <HAL_RCC_OscConfig+0xae>
 8007680:	4b76      	ldr	r3, [pc, #472]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a75      	ldr	r2, [pc, #468]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	4b73      	ldr	r3, [pc, #460]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a72      	ldr	r2, [pc, #456]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	e00b      	b.n	80076b2 <HAL_RCC_OscConfig+0xc6>
 800769a:	4b70      	ldr	r3, [pc, #448]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a6f      	ldr	r2, [pc, #444]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80076a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	4b6d      	ldr	r3, [pc, #436]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6c      	ldr	r2, [pc, #432]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80076ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d013      	beq.n	80076e2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ba:	f7fe f961 	bl	8005980 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c2:	f7fe f95d 	bl	8005980 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b64      	cmp	r3, #100	@ 0x64
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e1db      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d4:	4b61      	ldr	r3, [pc, #388]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCC_OscConfig+0xd6>
 80076e0:	e014      	b.n	800770c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e2:	f7fe f94d 	bl	8005980 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076ea:	f7fe f949 	bl	8005980 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b64      	cmp	r3, #100	@ 0x64
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e1c7      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076fc:	4b57      	ldr	r3, [pc, #348]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f0      	bne.n	80076ea <HAL_RCC_OscConfig+0xfe>
 8007708:	e000      	b.n	800770c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800770a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d06f      	beq.n	80077f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007718:	4b50      	ldr	r3, [pc, #320]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007724:	4b4d      	ldr	r3, [pc, #308]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800772c:	2b08      	cmp	r3, #8
 800772e:	d105      	bne.n	800773c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007730:	4b4a      	ldr	r3, [pc, #296]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800773c:	4b47      	ldr	r3, [pc, #284]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007744:	2b0c      	cmp	r3, #12
 8007746:	d11c      	bne.n	8007782 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007748:	4b44      	ldr	r3, [pc, #272]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d116      	bne.n	8007782 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007754:	4b41      	ldr	r3, [pc, #260]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <HAL_RCC_OscConfig+0x180>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d001      	beq.n	800776c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e18f      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776c:	4b3b      	ldr	r3, [pc, #236]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4938      	ldr	r1, [pc, #224]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800777c:	4313      	orrs	r3, r2
 800777e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007780:	e03a      	b.n	80077f8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d020      	beq.n	80077cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800778a:	4b35      	ldr	r3, [pc, #212]	@ (8007860 <HAL_RCC_OscConfig+0x274>)
 800778c:	2201      	movs	r2, #1
 800778e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007790:	f7fe f8f6 	bl	8005980 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007798:	f7fe f8f2 	bl	8005980 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e170      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077aa:	4b2c      	ldr	r3, [pc, #176]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0f0      	beq.n	8007798 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b6:	4b29      	ldr	r3, [pc, #164]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4925      	ldr	r1, [pc, #148]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
 80077ca:	e015      	b.n	80077f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077cc:	4b24      	ldr	r3, [pc, #144]	@ (8007860 <HAL_RCC_OscConfig+0x274>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d2:	f7fe f8d5 	bl	8005980 <HAL_GetTick>
 80077d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077d8:	e008      	b.n	80077ec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077da:	f7fe f8d1 	bl	8005980 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e14f      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ec:	4b1b      	ldr	r3, [pc, #108]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f0      	bne.n	80077da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d037      	beq.n	8007874 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d016      	beq.n	800783a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800780c:	4b15      	ldr	r3, [pc, #84]	@ (8007864 <HAL_RCC_OscConfig+0x278>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007812:	f7fe f8b5 	bl	8005980 <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007818:	e008      	b.n	800782c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800781a:	f7fe f8b1 	bl	8005980 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e12f      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782c:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <HAL_RCC_OscConfig+0x270>)
 800782e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0f0      	beq.n	800781a <HAL_RCC_OscConfig+0x22e>
 8007838:	e01c      	b.n	8007874 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800783a:	4b0a      	ldr	r3, [pc, #40]	@ (8007864 <HAL_RCC_OscConfig+0x278>)
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007840:	f7fe f89e 	bl	8005980 <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007846:	e00f      	b.n	8007868 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007848:	f7fe f89a 	bl	8005980 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d908      	bls.n	8007868 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e118      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800
 8007860:	42470000 	.word	0x42470000
 8007864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007868:	4b8a      	ldr	r3, [pc, #552]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 800786a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e9      	bne.n	8007848 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8097 	beq.w	80079b0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007886:	4b83      	ldr	r3, [pc, #524]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10f      	bne.n	80078b2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	4b7f      	ldr	r3, [pc, #508]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80078a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b79      	ldr	r3, [pc, #484]	@ (8007a98 <HAL_RCC_OscConfig+0x4ac>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d118      	bne.n	80078f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078be:	4b76      	ldr	r3, [pc, #472]	@ (8007a98 <HAL_RCC_OscConfig+0x4ac>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a75      	ldr	r2, [pc, #468]	@ (8007a98 <HAL_RCC_OscConfig+0x4ac>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ca:	f7fe f859 	bl	8005980 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d2:	f7fe f855 	bl	8005980 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e0d3      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a98 <HAL_RCC_OscConfig+0x4ac>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <HAL_RCC_OscConfig+0x31a>
 80078f8:	4b66      	ldr	r3, [pc, #408]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80078fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fc:	4a65      	ldr	r2, [pc, #404]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	6713      	str	r3, [r2, #112]	@ 0x70
 8007904:	e01c      	b.n	8007940 <HAL_RCC_OscConfig+0x354>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	2b05      	cmp	r3, #5
 800790c:	d10c      	bne.n	8007928 <HAL_RCC_OscConfig+0x33c>
 800790e:	4b61      	ldr	r3, [pc, #388]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007912:	4a60      	ldr	r2, [pc, #384]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007914:	f043 0304 	orr.w	r3, r3, #4
 8007918:	6713      	str	r3, [r2, #112]	@ 0x70
 800791a:	4b5e      	ldr	r3, [pc, #376]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791e:	4a5d      	ldr	r2, [pc, #372]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	6713      	str	r3, [r2, #112]	@ 0x70
 8007926:	e00b      	b.n	8007940 <HAL_RCC_OscConfig+0x354>
 8007928:	4b5a      	ldr	r3, [pc, #360]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800792c:	4a59      	ldr	r2, [pc, #356]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	6713      	str	r3, [r2, #112]	@ 0x70
 8007934:	4b57      	ldr	r3, [pc, #348]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007938:	4a56      	ldr	r2, [pc, #344]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 800793a:	f023 0304 	bic.w	r3, r3, #4
 800793e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d015      	beq.n	8007974 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007948:	f7fe f81a 	bl	8005980 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800794e:	e00a      	b.n	8007966 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007950:	f7fe f816 	bl	8005980 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800795e:	4293      	cmp	r3, r2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e092      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007966:	4b4b      	ldr	r3, [pc, #300]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0ee      	beq.n	8007950 <HAL_RCC_OscConfig+0x364>
 8007972:	e014      	b.n	800799e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007974:	f7fe f804 	bl	8005980 <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800797a:	e00a      	b.n	8007992 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800797c:	f7fe f800 	bl	8005980 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798a:	4293      	cmp	r3, r2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e07c      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007992:	4b40      	ldr	r3, [pc, #256]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1ee      	bne.n	800797c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d105      	bne.n	80079b0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80079a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a8:	4a3a      	ldr	r2, [pc, #232]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80079aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d068      	beq.n	8007a8a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079b8:	4b36      	ldr	r3, [pc, #216]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 030c 	and.w	r3, r3, #12
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d060      	beq.n	8007a86 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d145      	bne.n	8007a58 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079cc:	4b33      	ldr	r3, [pc, #204]	@ (8007a9c <HAL_RCC_OscConfig+0x4b0>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d2:	f7fd ffd5 	bl	8005980 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079da:	f7fd ffd1 	bl	8005980 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e04f      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ec:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f0      	bne.n	80079da <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	019b      	lsls	r3, r3, #6
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	3b01      	subs	r3, #1
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1a:	061b      	lsls	r3, r3, #24
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	071b      	lsls	r3, r3, #28
 8007a24:	491b      	ldr	r1, [pc, #108]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007a9c <HAL_RCC_OscConfig+0x4b0>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fd ffa6 	bl	8005980 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a38:	f7fd ffa2 	bl	8005980 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e020      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4a:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f0      	beq.n	8007a38 <HAL_RCC_OscConfig+0x44c>
 8007a56:	e018      	b.n	8007a8a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a58:	4b10      	ldr	r3, [pc, #64]	@ (8007a9c <HAL_RCC_OscConfig+0x4b0>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5e:	f7fd ff8f 	bl	8005980 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a64:	e008      	b.n	8007a78 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a66:	f7fd ff8b 	bl	8005980 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e009      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a78:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <HAL_RCC_OscConfig+0x4a8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <HAL_RCC_OscConfig+0x47a>
 8007a84:	e001      	b.n	8007a8a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40023800 	.word	0x40023800
 8007a98:	40007000 	.word	0x40007000
 8007a9c:	42470060 	.word	0x42470060

08007aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e056      	b.n	8007b60 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f005 ffbf 	bl	800da50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ae8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	ea42 0103 	orr.w	r1, r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	f003 0104 	and.w	r1, r3, #4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4613      	mov	r3, r2
 8007b74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_SPI_Transmit_IT+0x20>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e067      	b.n	8007c58 <HAL_SPI_Transmit_IT+0xf0>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_SPI_Transmit_IT+0x34>
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ba0:	e055      	b.n	8007c4e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d002      	beq.n	8007bb4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bb2:	e04c      	b.n	8007c4e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	88fa      	ldrh	r2, [r7, #6]
 8007bd2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c64 <HAL_SPI_Transmit_IT+0xfc>)
 8007bf8:	645a      	str	r2, [r3, #68]	@ 0x44
 8007bfa:	e002      	b.n	8007c02 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007c68 <HAL_SPI_Transmit_IT+0x100>)
 8007c00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c0a:	d107      	bne.n	8007c1c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8007c2a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c36:	2b40      	cmp	r3, #64	@ 0x40
 8007c38:	d008      	beq.n	8007c4c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e000      	b.n	8007c4e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8007c4c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	080086d9 	.word	0x080086d9
 8007c68:	08008693 	.word	0x08008693

08007c6c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d110      	bne.n	8007ca8 <HAL_SPI_Receive_IT+0x3c>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c8e:	d10b      	bne.n	8007ca8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2204      	movs	r2, #4
 8007c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f87a 	bl	8007d98 <HAL_SPI_TransmitReceive_IT>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	e06e      	b.n	8007d86 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_SPI_Receive_IT+0x4a>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e067      	b.n	8007d86 <HAL_SPI_Receive_IT+0x11a>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d002      	beq.n	8007cd0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cce:	e055      	b.n	8007d7c <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_SPI_Receive_IT+0x70>
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ce0:	e04c      	b.n	8007d7c <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4a1a      	ldr	r2, [pc, #104]	@ (8007d90 <HAL_SPI_Receive_IT+0x124>)
 8007d26:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d28:	e002      	b.n	8007d30 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a19      	ldr	r2, [pc, #100]	@ (8007d94 <HAL_SPI_Receive_IT+0x128>)
 8007d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d38:	d107      	bne.n	8007d4a <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007d58:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d64:	2b40      	cmp	r3, #64	@ 0x40
 8007d66:	d008      	beq.n	8007d7a <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e000      	b.n	8007d7c <HAL_SPI_Receive_IT+0x110>
  }

error :
 8007d7a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	0800864d 	.word	0x0800864d
 8007d94:	08008603 	.word	0x08008603

08007d98 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_SPI_TransmitReceive_IT+0x20>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e075      	b.n	8007ea4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dc6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dce:	7dbb      	ldrb	r3, [r7, #22]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d00d      	beq.n	8007df0 <HAL_SPI_TransmitReceive_IT+0x58>
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dda:	d106      	bne.n	8007dea <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <HAL_SPI_TransmitReceive_IT+0x52>
 8007de4:	7dbb      	ldrb	r3, [r7, #22]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d002      	beq.n	8007df0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007dea:	2302      	movs	r3, #2
 8007dec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dee:	e054      	b.n	8007e9a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007dfc:	887b      	ldrh	r3, [r7, #2]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e06:	e048      	b.n	8007e9a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d003      	beq.n	8007e1c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2205      	movs	r2, #5
 8007e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	887a      	ldrh	r2, [r7, #2]
 8007e2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	887a      	ldrh	r2, [r7, #2]
 8007e32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	887a      	ldrh	r2, [r7, #2]
 8007e3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	887a      	ldrh	r2, [r7, #2]
 8007e44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d006      	beq.n	8007e5c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8007e52:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4a17      	ldr	r2, [pc, #92]	@ (8007eb4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8007e58:	645a      	str	r2, [r3, #68]	@ 0x44
 8007e5a:	e005      	b.n	8007e68 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	@ (8007eb8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8007e60:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <HAL_SPI_TransmitReceive_IT+0x124>)
 8007e66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8007e76:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e82:	2b40      	cmp	r3, #64	@ 0x40
 8007e84:	d008      	beq.n	8007e98 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e000      	b.n	8007e9a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007e98:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	08008545 	.word	0x08008545
 8007eb4:	080085a5 	.word	0x080085a5
 8007eb8:	08008481 	.word	0x08008481
 8007ebc:	080084e5 	.word	0x080084e5

08007ec0 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007ed0:	4b72      	ldr	r3, [pc, #456]	@ (800809c <HAL_SPI_Abort_IT+0x1dc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a72      	ldr	r2, [pc, #456]	@ (80080a0 <HAL_SPI_Abort_IT+0x1e0>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	0a5b      	lsrs	r3, r3, #9
 8007edc:	2264      	movs	r2, #100	@ 0x64
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0220 	bic.w	r2, r2, #32
 8007ef6:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f02:	2b80      	cmp	r3, #128	@ 0x80
 8007f04:	d117      	bne.n	8007f36 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a66      	ldr	r2, [pc, #408]	@ (80080a4 <HAL_SPI_Abort_IT+0x1e4>)
 8007f0a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f1e:	e008      	b.n	8007f32 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b07      	cmp	r3, #7
 8007f30:	d1ec      	bne.n	8007f0c <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b40      	cmp	r3, #64	@ 0x40
 8007f42:	d117      	bne.n	8007f74 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a58      	ldr	r2, [pc, #352]	@ (80080a8 <HAL_SPI_Abort_IT+0x1e8>)
 8007f48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d106      	bne.n	8007f5e <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f5c:	e008      	b.n	8007f70 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	d1ec      	bne.n	8007f4a <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00f      	beq.n	8007f9c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d104      	bne.n	8007f94 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f8e:	4a47      	ldr	r2, [pc, #284]	@ (80080ac <HAL_SPI_Abort_IT+0x1ec>)
 8007f90:	651a      	str	r2, [r3, #80]	@ 0x50
 8007f92:	e003      	b.n	8007f9c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f98:	2200      	movs	r2, #0
 8007f9a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d104      	bne.n	8007fbc <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb6:	4a3e      	ldr	r2, [pc, #248]	@ (80080b0 <HAL_SPI_Abort_IT+0x1f0>)
 8007fb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007fba:	e003      	b.n	8007fc4 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d115      	bne.n	8007ffe <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d011      	beq.n	8007ffe <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd ff62 	bl	8005ea8 <HAL_DMA_Abort_IT>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d007      	beq.n	8007ffa <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fee:	2200      	movs	r2, #0
 8007ff0:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2240      	movs	r2, #64	@ 0x40
 8007ff6:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ff8:	e001      	b.n	8007ffe <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b01      	cmp	r3, #1
 800800a:	d115      	bne.n	8008038 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d011      	beq.n	8008038 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd ff45 	bl	8005ea8 <HAL_DMA_Abort_IT>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008028:	2200      	movs	r2, #0
 800802a:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2240      	movs	r2, #64	@ 0x40
 8008030:	655a      	str	r2, [r3, #84]	@ 0x54
 8008032:	e001      	b.n	8008038 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d128      	bne.n	8008090 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->TxXferCount = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804e:	2b40      	cmp	r3, #64	@ 0x40
 8008050:	d102      	bne.n	8008058 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e002      	b.n	800805e <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008074:	2300      	movs	r3, #0
 8008076:	60bb      	str	r3, [r7, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	60bb      	str	r3, [r7, #8]
 8008080:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f910 	bl	80082b0 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8008090:	7ffb      	ldrb	r3, [r7, #31]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200001dc 	.word	0x200001dc
 80080a0:	057619f1 	.word	0x057619f1
 80080a4:	08008bf5 	.word	0x08008bf5
 80080a8:	08008b6d 	.word	0x08008b6d
 80080ac:	080082ed 	.word	0x080082ed
 80080b0:	080083c1 	.word	0x080083c1

080080b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10e      	bne.n	80080f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    return;
 80080f2:	e0ce      	b.n	8008292 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <HAL_SPI_IRQHandler+0x5e>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
    return;
 8008110:	e0bf      	b.n	8008292 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <HAL_SPI_IRQHandler+0x7e>
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d105      	bne.n	8008132 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80b0 	beq.w	8008292 <HAL_SPI_IRQHandler+0x1de>
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80aa 	beq.w	8008292 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d023      	beq.n	8008190 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d011      	beq.n	8008178 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008158:	f043 0204 	orr.w	r2, r3, #4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	e00b      	b.n	8008190 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
        return;
 800818e:	e080      	b.n	8008292 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	d014      	beq.n	80081c4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819e:	f043 0201 	orr.w	r2, r3, #1
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00c      	beq.n	80081e8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d2:	f043 0208 	orr.w	r2, r3, #8
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081da:	2300      	movs	r3, #0
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	60bb      	str	r3, [r7, #8]
 80081e6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d04f      	beq.n	8008290 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d104      	bne.n	800821c <HAL_SPI_IRQHandler+0x168>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d034      	beq.n	8008286 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0203 	bic.w	r2, r2, #3
 800822a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d011      	beq.n	8008258 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008238:	4a17      	ldr	r2, [pc, #92]	@ (8008298 <HAL_SPI_IRQHandler+0x1e4>)
 800823a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008240:	4618      	mov	r0, r3
 8008242:	f7fd fe31 	bl	8005ea8 <HAL_DMA_Abort_IT>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008250:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825c:	2b00      	cmp	r3, #0
 800825e:	d016      	beq.n	800828e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008264:	4a0c      	ldr	r2, [pc, #48]	@ (8008298 <HAL_SPI_IRQHandler+0x1e4>)
 8008266:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800826c:	4618      	mov	r0, r3
 800826e:	f7fd fe1b 	bl	8005ea8 <HAL_DMA_Abort_IT>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008284:	e003      	b.n	800828e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f808 	bl	800829c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800828c:	e000      	b.n	8008290 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800828e:	bf00      	nop
    return;
 8008290:	bf00      	nop
  }
}
 8008292:	3720      	adds	r7, #32
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	080082c5 	.word	0x080082c5

0800829c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff ffdc 	bl	800829c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fe:	2200      	movs	r2, #0
 8008300:	651a      	str	r2, [r3, #80]	@ 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008302:	4b2d      	ldr	r3, [pc, #180]	@ (80083b8 <SPI_DMATxAbortCallback+0xcc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a2d      	ldr	r2, [pc, #180]	@ (80083bc <SPI_DMATxAbortCallback+0xd0>)
 8008308:	fba2 2303 	umull	r2, r3, r2, r3
 800830c:	0a5b      	lsrs	r3, r3, #9
 800830e:	2264      	movs	r2, #100	@ 0x64
 8008310:	fb02 f303 	mul.w	r3, r2, r3
 8008314:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0202 	bic.w	r2, r2, #2
 8008324:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d106      	bne.n	800833a <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008330:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008338:	e009      	b.n	800834e <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	3b01      	subs	r3, #1
 800833e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0eb      	beq.n	8008326 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	2b00      	cmp	r3, #0
 800835e:	d126      	bne.n	80083ae <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2200      	movs	r2, #0
 8008364:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2200      	movs	r2, #0
 800836a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008370:	2b40      	cmp	r3, #64	@ 0x40
 8008372:	d002      	beq.n	800837a <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2200      	movs	r2, #0
 8008378:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008390:	2300      	movs	r3, #0
 8008392:	60bb      	str	r3, [r7, #8]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	60bb      	str	r3, [r7, #8]
 800839c:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80083a6:	6978      	ldr	r0, [r7, #20]
 80083a8:	f7ff ff82 	bl	80082b0 <HAL_SPI_AbortCpltCallback>
 80083ac:	e000      	b.n	80083b0 <SPI_DMATxAbortCallback+0xc4>
      return;
 80083ae:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200001dc 	.word	0x200001dc
 80083bc:	057619f1 	.word	0x057619f1

080083c0 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083cc:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083dc:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e2:	2200      	movs	r2, #0
 80083e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80083f6:	f7fd fac3 	bl	8005980 <HAL_GetTick>
 80083fa:	4603      	mov	r3, r0
 80083fc:	461a      	mov	r2, r3
 80083fe:	2164      	movs	r1, #100	@ 0x64
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f000 fa5b 	bl	80088bc <SPI_EndRxTxTransaction>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008410:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008426:	2b00      	cmp	r3, #0
 8008428:	d126      	bne.n	8008478 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2200      	movs	r2, #0
 800842e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2200      	movs	r2, #0
 8008434:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843a:	2b40      	cmp	r3, #64	@ 0x40
 800843c:	d002      	beq.n	8008444 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2200      	movs	r2, #0
 8008442:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008444:	2300      	movs	r3, #0
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8008470:	6978      	ldr	r0, [r7, #20]
 8008472:	f7ff ff1d 	bl	80082b0 <HAL_SPI_AbortCpltCallback>
 8008476:	e000      	b.n	800847a <SPI_DMARxAbortCallback+0xba>
      return;
 8008478:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f103 020c 	add.w	r2, r3, #12
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10f      	bne.n	80084dc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80084ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fa32 	bl	8008940 <SPI_CloseRxTx_ISR>
    }
  }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	7812      	ldrb	r2, [r2, #0]
 80084f8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008516:	b29b      	uxth	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10f      	bne.n	800853c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800852a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa02 	bl	8008940 <SPI_CloseRxTx_ISR>
    }
  }
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	b292      	uxth	r2, r2
 8008558:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855e:	1c9a      	adds	r2, r3, #2
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008568:	b29b      	uxth	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10f      	bne.n	800859c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800858a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d102      	bne.n	800859c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9d2 	bl	8008940 <SPI_CloseRxTx_ISR>
    }
  }
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b0:	881a      	ldrh	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085bc:	1c9a      	adds	r2, r3, #2
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10f      	bne.n	80085fa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9a3 	bl	8008940 <SPI_CloseRxTx_ISR>
    }
  }
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f103 020c 	add.w	r2, r3, #12
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008616:	7812      	ldrb	r2, [r2, #0]
 8008618:	b2d2      	uxtb	r2, r2
 800861a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d102      	bne.n	8008644 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f9f2 	bl	8008a28 <SPI_CloseRx_ISR>
  }
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865e:	b292      	uxth	r2, r2
 8008660:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	1c9a      	adds	r2, r3, #2
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f9cf 	bl	8008a28 <SPI_CloseRx_ISR>
  }
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330c      	adds	r3, #12
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f9ec 	bl	8008aa8 <SPI_CloseTx_ISR>
  }
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e4:	881a      	ldrh	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	1c9a      	adds	r2, r3, #2
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f9ca 	bl	8008aa8 <SPI_CloseTx_ISR>
  }
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800872c:	e04c      	b.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d048      	beq.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008736:	f7fd f923 	bl	8005980 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d902      	bls.n	800874c <SPI_WaitFlagStateUntilTimeout+0x30>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d13d      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800875a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008764:	d111      	bne.n	800878a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800876e:	d004      	beq.n	800877a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008778:	d107      	bne.n	800878a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008792:	d10f      	bne.n	80087b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e00f      	b.n	80087e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d1a3      	bne.n	800872e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008804:	d111      	bne.n	800882a <SPI_EndRxTransaction+0x3a>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800880e:	d004      	beq.n	800881a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008818:	d107      	bne.n	800882a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008828:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008832:	d12a      	bne.n	800888a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883c:	d012      	beq.n	8008864 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	2180      	movs	r1, #128	@ 0x80
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff ff67 	bl	800871c <SPI_WaitFlagStateUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d02d      	beq.n	80088b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e026      	b.n	80088b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2200      	movs	r2, #0
 800886c:	2101      	movs	r1, #1
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff ff54 	bl	800871c <SPI_WaitFlagStateUntilTimeout>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d01a      	beq.n	80088b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887e:	f043 0220 	orr.w	r2, r3, #32
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e013      	b.n	80088b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2200      	movs	r2, #0
 8008892:	2101      	movs	r1, #1
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff ff41 	bl	800871c <SPI_WaitFlagStateUntilTimeout>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d007      	beq.n	80088b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e000      	b.n	80088b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008938 <SPI_EndRxTxTransaction+0x7c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1b      	ldr	r2, [pc, #108]	@ (800893c <SPI_EndRxTxTransaction+0x80>)
 80088ce:	fba2 2303 	umull	r2, r3, r2, r3
 80088d2:	0d5b      	lsrs	r3, r3, #21
 80088d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088e6:	d112      	bne.n	800890e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2200      	movs	r2, #0
 80088f0:	2180      	movs	r1, #128	@ 0x80
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff ff12 	bl	800871c <SPI_WaitFlagStateUntilTimeout>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d016      	beq.n	800892c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008902:	f043 0220 	orr.w	r2, r3, #32
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e00f      	b.n	800892e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3b01      	subs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008924:	2b80      	cmp	r3, #128	@ 0x80
 8008926:	d0f2      	beq.n	800890e <SPI_EndRxTxTransaction+0x52>
 8008928:	e000      	b.n	800892c <SPI_EndRxTxTransaction+0x70>
        break;
 800892a:	bf00      	nop
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200001dc 	.word	0x200001dc
 800893c:	165e9f81 	.word	0x165e9f81

08008940 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008948:	4b35      	ldr	r3, [pc, #212]	@ (8008a20 <SPI_CloseRxTx_ISR+0xe0>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a35      	ldr	r2, [pc, #212]	@ (8008a24 <SPI_CloseRxTx_ISR+0xe4>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	0a5b      	lsrs	r3, r3, #9
 8008954:	2264      	movs	r2, #100	@ 0x64
 8008956:	fb02 f303 	mul.w	r3, r2, r3
 800895a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800895c:	f7fd f810 	bl	8005980 <HAL_GetTick>
 8008960:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0220 	bic.w	r2, r2, #32
 8008970:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897c:	f043 0220 	orr.w	r2, r3, #32
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008984:	e009      	b.n	800899a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3b01      	subs	r3, #1
 800898a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0eb      	beq.n	8008972 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	2164      	movs	r1, #100	@ 0x64
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff ff8c 	bl	80088bc <SPI_EndRxTxTransaction>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ae:	f043 0220 	orr.w	r2, r3, #32
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d115      	bne.n	8008a08 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d107      	bne.n	80089f8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f004 fef9 	bl	800d7e8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80089f6:	e00e      	b.n	8008a16 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f004 ff1f 	bl	800d844 <HAL_SPI_TxRxCpltCallback>
}
 8008a06:	e006      	b.n	8008a16 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff fc43 	bl	800829c <HAL_SPI_ErrorCallback>
}
 8008a16:	bf00      	nop
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	200001dc 	.word	0x200001dc
 8008a24:	057619f1 	.word	0x057619f1

08008a28 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008a3e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008a40:	f7fc ff9e 	bl	8005980 <HAL_GetTick>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	2164      	movs	r1, #100	@ 0x64
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fed0 	bl	80087f0 <SPI_EndRxTransaction>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a5a:	f043 0220 	orr.w	r2, r3, #32
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d103      	bne.n	8008a98 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f004 fea9 	bl	800d7e8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008a96:	e002      	b.n	8008a9e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff fbff 	bl	800829c <HAL_SPI_ErrorCallback>
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8008b64 <SPI_CloseTx_ISR+0xbc>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8008b68 <SPI_CloseTx_ISR+0xc0>)
 8008ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aba:	0a5b      	lsrs	r3, r3, #9
 8008abc:	2264      	movs	r2, #100	@ 0x64
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ac4:	f7fc ff5c 	bl	8005980 <HAL_GetTick>
 8008ac8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad4:	f043 0220 	orr.w	r2, r3, #32
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008adc:	e009      	b.n	8008af2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0eb      	beq.n	8008aca <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008b00:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	2164      	movs	r1, #100	@ 0x64
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fed8 	bl	80088bc <SPI_EndRxTxTransaction>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d005      	beq.n	8008b1e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b16:	f043 0220 	orr.w	r2, r3, #32
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff fba5 	bl	800829c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008b52:	e002      	b.n	8008b5a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f004 fe19 	bl	800d78c <HAL_SPI_TxCpltCallback>
}
 8008b5a:	bf00      	nop
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200001dc 	.word	0x200001dc
 8008b68:	057619f1 	.word	0x057619f1

08008b6c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008b74:	4b1d      	ldr	r3, [pc, #116]	@ (8008bec <SPI_AbortRx_ISR+0x80>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <SPI_AbortRx_ISR+0x84>)
 8008b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7e:	0a5b      	lsrs	r3, r3, #9
 8008b80:	2264      	movs	r2, #100	@ 0x64
 8008b82:	fb02 f303 	mul.w	r3, r2, r3
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b9a:	e009      	b.n	8008bb0 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0eb      	beq.n	8008b88 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bbe:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008bce:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2207      	movs	r2, #7
 8008bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	200001dc 	.word	0x200001dc
 8008bf0:	057619f1 	.word	0x057619f1

08008bf4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c0a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c1a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2207      	movs	r2, #7
 8008c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e01d      	b.n	8008c7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f815 	bl	8008c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f000 fa2c 	bl	80090cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b06      	cmp	r3, #6
 8008cba:	d007      	beq.n	8008ccc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d122      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d11b      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0202 	mvn.w	r2, #2
 8008d0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f9b2 	bl	800908e <HAL_TIM_IC_CaptureCallback>
 8008d2a:	e005      	b.n	8008d38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f9a4 	bl	800907a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f9b5 	bl	80090a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d122      	bne.n	8008d92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d11b      	bne.n	8008d92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f06f 0204 	mvn.w	r2, #4
 8008d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f988 	bl	800908e <HAL_TIM_IC_CaptureCallback>
 8008d7e:	e005      	b.n	8008d8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f97a 	bl	800907a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f98b 	bl	80090a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f003 0308 	and.w	r3, r3, #8
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d122      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d11b      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f06f 0208 	mvn.w	r2, #8
 8008db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f95e 	bl	800908e <HAL_TIM_IC_CaptureCallback>
 8008dd2:	e005      	b.n	8008de0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f950 	bl	800907a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f961 	bl	80090a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0310 	and.w	r3, r3, #16
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d122      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d11b      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f06f 0210 	mvn.w	r2, #16
 8008e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2208      	movs	r2, #8
 8008e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f934 	bl	800908e <HAL_TIM_IC_CaptureCallback>
 8008e26:	e005      	b.n	8008e34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f926 	bl	800907a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f937 	bl	80090a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10e      	bne.n	8008e66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d107      	bne.n	8008e66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f06f 0201 	mvn.w	r2, #1
 8008e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f005 f8c9 	bl	800dff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e70:	2b80      	cmp	r3, #128	@ 0x80
 8008e72:	d10e      	bne.n	8008e92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e7e:	2b80      	cmp	r3, #128	@ 0x80
 8008e80:	d107      	bne.n	8008e92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fadd 	bl	800944c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e9c:	2b40      	cmp	r3, #64	@ 0x40
 8008e9e:	d10e      	bne.n	8008ebe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eaa:	2b40      	cmp	r3, #64	@ 0x40
 8008eac:	d107      	bne.n	8008ebe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f8fc 	bl	80090b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b20      	cmp	r3, #32
 8008eca:	d10e      	bne.n	8008eea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d107      	bne.n	8008eea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f06f 0220 	mvn.w	r2, #32
 8008ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 faa7 	bl	8009438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_TIM_ConfigClockSource+0x18>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e0b3      	b.n	8009072 <HAL_TIM_ConfigClockSource+0x180>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2202      	movs	r2, #2
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f42:	d03e      	beq.n	8008fc2 <HAL_TIM_ConfigClockSource+0xd0>
 8008f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f48:	f200 8087 	bhi.w	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f50:	f000 8085 	beq.w	800905e <HAL_TIM_ConfigClockSource+0x16c>
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f58:	d87f      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f5a:	2b70      	cmp	r3, #112	@ 0x70
 8008f5c:	d01a      	beq.n	8008f94 <HAL_TIM_ConfigClockSource+0xa2>
 8008f5e:	2b70      	cmp	r3, #112	@ 0x70
 8008f60:	d87b      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f62:	2b60      	cmp	r3, #96	@ 0x60
 8008f64:	d050      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0x116>
 8008f66:	2b60      	cmp	r3, #96	@ 0x60
 8008f68:	d877      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f6a:	2b50      	cmp	r3, #80	@ 0x50
 8008f6c:	d03c      	beq.n	8008fe8 <HAL_TIM_ConfigClockSource+0xf6>
 8008f6e:	2b50      	cmp	r3, #80	@ 0x50
 8008f70:	d873      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f72:	2b40      	cmp	r3, #64	@ 0x40
 8008f74:	d058      	beq.n	8009028 <HAL_TIM_ConfigClockSource+0x136>
 8008f76:	2b40      	cmp	r3, #64	@ 0x40
 8008f78:	d86f      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f7a:	2b30      	cmp	r3, #48	@ 0x30
 8008f7c:	d064      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0x156>
 8008f7e:	2b30      	cmp	r3, #48	@ 0x30
 8008f80:	d86b      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d060      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0x156>
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d867      	bhi.n	800905a <HAL_TIM_ConfigClockSource+0x168>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d05c      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0x156>
 8008f8e:	2b10      	cmp	r3, #16
 8008f90:	d05a      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008f92:	e062      	b.n	800905a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6899      	ldr	r1, [r3, #8]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f000 f9ac 	bl	8009300 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008fb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	609a      	str	r2, [r3, #8]
      break;
 8008fc0:	e04e      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6899      	ldr	r1, [r3, #8]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f000 f995 	bl	8009300 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008fe4:	609a      	str	r2, [r3, #8]
      break;
 8008fe6:	e03b      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	6859      	ldr	r1, [r3, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f000 f909 	bl	800920c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2150      	movs	r1, #80	@ 0x50
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f962 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8009006:	e02b      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	6859      	ldr	r1, [r3, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	461a      	mov	r2, r3
 8009016:	f000 f928 	bl	800926a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2160      	movs	r1, #96	@ 0x60
 8009020:	4618      	mov	r0, r3
 8009022:	f000 f952 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8009026:	e01b      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	6859      	ldr	r1, [r3, #4]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	461a      	mov	r2, r3
 8009036:	f000 f8e9 	bl	800920c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2140      	movs	r1, #64	@ 0x40
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f942 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8009046:	e00b      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f000 f939 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8009058:	e002      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800905a:	bf00      	nop
 800905c:	e000      	b.n	8009060 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800905e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
	...

080090cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a40      	ldr	r2, [pc, #256]	@ (80091e0 <TIM_Base_SetConfig+0x114>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d013      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ea:	d00f      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a3d      	ldr	r2, [pc, #244]	@ (80091e4 <TIM_Base_SetConfig+0x118>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00b      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a3c      	ldr	r2, [pc, #240]	@ (80091e8 <TIM_Base_SetConfig+0x11c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a3b      	ldr	r2, [pc, #236]	@ (80091ec <TIM_Base_SetConfig+0x120>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a3a      	ldr	r2, [pc, #232]	@ (80091f0 <TIM_Base_SetConfig+0x124>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d108      	bne.n	800911e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a2f      	ldr	r2, [pc, #188]	@ (80091e0 <TIM_Base_SetConfig+0x114>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d02b      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912c:	d027      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a2c      	ldr	r2, [pc, #176]	@ (80091e4 <TIM_Base_SetConfig+0x118>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d023      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a2b      	ldr	r2, [pc, #172]	@ (80091e8 <TIM_Base_SetConfig+0x11c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d01f      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a2a      	ldr	r2, [pc, #168]	@ (80091ec <TIM_Base_SetConfig+0x120>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d01b      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a29      	ldr	r2, [pc, #164]	@ (80091f0 <TIM_Base_SetConfig+0x124>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d017      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a28      	ldr	r2, [pc, #160]	@ (80091f4 <TIM_Base_SetConfig+0x128>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a27      	ldr	r2, [pc, #156]	@ (80091f8 <TIM_Base_SetConfig+0x12c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00f      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a26      	ldr	r2, [pc, #152]	@ (80091fc <TIM_Base_SetConfig+0x130>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d00b      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a25      	ldr	r2, [pc, #148]	@ (8009200 <TIM_Base_SetConfig+0x134>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d007      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a24      	ldr	r2, [pc, #144]	@ (8009204 <TIM_Base_SetConfig+0x138>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d003      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a23      	ldr	r2, [pc, #140]	@ (8009208 <TIM_Base_SetConfig+0x13c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d108      	bne.n	8009190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a0a      	ldr	r2, [pc, #40]	@ (80091e0 <TIM_Base_SetConfig+0x114>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d003      	beq.n	80091c4 <TIM_Base_SetConfig+0xf8>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a0c      	ldr	r2, [pc, #48]	@ (80091f0 <TIM_Base_SetConfig+0x124>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d103      	bne.n	80091cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	615a      	str	r2, [r3, #20]
}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40010400 	.word	0x40010400
 80091f4:	40014000 	.word	0x40014000
 80091f8:	40014400 	.word	0x40014400
 80091fc:	40014800 	.word	0x40014800
 8009200:	40001800 	.word	0x40001800
 8009204:	40001c00 	.word	0x40001c00
 8009208:	40002000 	.word	0x40002000

0800920c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	f023 0201 	bic.w	r2, r3, #1
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f023 030a 	bic.w	r3, r3, #10
 8009248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	621a      	str	r2, [r3, #32]
}
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800926a:	b480      	push	{r7}
 800926c:	b087      	sub	sp, #28
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f023 0210 	bic.w	r2, r3, #16
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	031b      	lsls	r3, r3, #12
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	621a      	str	r2, [r3, #32]
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f043 0307 	orr.w	r3, r3, #7
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800931a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	021a      	lsls	r2, r3, #8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	431a      	orrs	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4313      	orrs	r3, r2
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009354:	2302      	movs	r3, #2
 8009356:	e05a      	b.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a21      	ldr	r2, [pc, #132]	@ (800941c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d022      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a4:	d01d      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d018      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d013      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a1a      	ldr	r2, [pc, #104]	@ (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d00e      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a18      	ldr	r2, [pc, #96]	@ (800942c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d009      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a17      	ldr	r2, [pc, #92]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d004      	beq.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a15      	ldr	r2, [pc, #84]	@ (8009434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d10c      	bne.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	40010000 	.word	0x40010000
 8009420:	40000400 	.word	0x40000400
 8009424:	40000800 	.word	0x40000800
 8009428:	40000c00 	.word	0x40000c00
 800942c:	40010400 	.word	0x40010400
 8009430:	40014000 	.word	0x40014000
 8009434:	40001800 	.word	0x40001800

08009438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e03f      	b.n	80094f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f005 fcaa 	bl	800ede0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2224      	movs	r2, #36	@ 0x24
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 fc01 	bl	800acac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	691a      	ldr	r2, [r3, #16]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	695a      	ldr	r2, [r3, #20]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b08a      	sub	sp, #40	@ 0x28
 80094fe:	af02      	add	r7, sp, #8
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b20      	cmp	r3, #32
 8009518:	d17c      	bne.n	8009614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <HAL_UART_Transmit+0x2c>
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e075      	b.n	8009616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_UART_Transmit+0x3e>
 8009534:	2302      	movs	r3, #2
 8009536:	e06e      	b.n	8009616 <HAL_UART_Transmit+0x11c>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2221      	movs	r2, #33	@ 0x21
 800954a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800954e:	f7fc fa17 	bl	8005980 <HAL_GetTick>
 8009552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	88fa      	ldrh	r2, [r7, #6]
 800955e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009568:	d108      	bne.n	800957c <HAL_UART_Transmit+0x82>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d104      	bne.n	800957c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	e003      	b.n	8009584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800958c:	e02a      	b.n	80095e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2200      	movs	r2, #0
 8009596:	2180      	movs	r1, #128	@ 0x80
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f001 f81a 	bl	800a5d2 <UART_WaitOnFlagUntilTimeout>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e036      	b.n	8009616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	3302      	adds	r3, #2
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	e007      	b.n	80095d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	781a      	ldrb	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	3301      	adds	r3, #1
 80095d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095da:	b29b      	uxth	r3, r3
 80095dc:	3b01      	subs	r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1cf      	bne.n	800958e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2200      	movs	r2, #0
 80095f6:	2140      	movs	r1, #64	@ 0x40
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 ffea 	bl	800a5d2 <UART_WaitOnFlagUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e006      	b.n	8009616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	e000      	b.n	8009616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009614:	2302      	movs	r3, #2
  }
}
 8009616:	4618      	mov	r0, r3
 8009618:	3720      	adds	r7, #32
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b08a      	sub	sp, #40	@ 0x28
 8009622:	af02      	add	r7, sp, #8
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	603b      	str	r3, [r7, #0]
 800962a:	4613      	mov	r3, r2
 800962c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b20      	cmp	r3, #32
 800963c:	f040 808c 	bne.w	8009758 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <HAL_UART_Receive+0x2e>
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e084      	b.n	800975a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UART_Receive+0x40>
 800965a:	2302      	movs	r3, #2
 800965c:	e07d      	b.n	800975a <HAL_UART_Receive+0x13c>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2222      	movs	r2, #34	@ 0x22
 8009670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800967a:	f7fc f981 	bl	8005980 <HAL_GetTick>
 800967e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	88fa      	ldrh	r2, [r7, #6]
 8009684:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	88fa      	ldrh	r2, [r7, #6]
 800968a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009694:	d108      	bne.n	80096a8 <HAL_UART_Receive+0x8a>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d104      	bne.n	80096a8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	61bb      	str	r3, [r7, #24]
 80096a6:	e003      	b.n	80096b0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80096b8:	e043      	b.n	8009742 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2120      	movs	r1, #32
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 ff84 	bl	800a5d2 <UART_WaitOnFlagUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e042      	b.n	800975a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10c      	bne.n	80096f4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	3302      	adds	r3, #2
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	e01f      	b.n	8009734 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096fc:	d007      	beq.n	800970e <HAL_UART_Receive+0xf0>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <HAL_UART_Receive+0xfe>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	b2da      	uxtb	r2, r3
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	e008      	b.n	800972e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009728:	b2da      	uxtb	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	3301      	adds	r3, #1
 8009732:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29a      	uxth	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1b6      	bne.n	80096ba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e000      	b.n	800975a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009758:	2302      	movs	r3, #2
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	3720      	adds	r7, #32
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	4613      	mov	r3, r2
 800976e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b20      	cmp	r3, #32
 800977a:	d130      	bne.n	80097de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_UART_Transmit_IT+0x26>
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e029      	b.n	80097e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009792:	2b01      	cmp	r3, #1
 8009794:	d101      	bne.n	800979a <HAL_UART_Transmit_IT+0x38>
 8009796:	2302      	movs	r3, #2
 8009798:	e022      	b.n	80097e0 <HAL_UART_Transmit_IT+0x7e>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	88fa      	ldrh	r2, [r7, #6]
 80097b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2221      	movs	r2, #33	@ 0x21
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80097d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	e000      	b.n	80097e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80097de:	2302      	movs	r3, #2
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b20      	cmp	r3, #32
 8009804:	d11d      	bne.n	8009842 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <HAL_UART_Receive_IT+0x26>
 800980c:	88fb      	ldrh	r3, [r7, #6]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e016      	b.n	8009844 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_UART_Receive_IT+0x38>
 8009820:	2302      	movs	r3, #2
 8009822:	e00f      	b.n	8009844 <HAL_UART_Receive_IT+0x58>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	461a      	mov	r2, r3
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 ff38 	bl	800a6ae <UART_Start_Receive_IT>
 800983e:	4603      	mov	r3, r0
 8009840:	e000      	b.n	8009844 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009842:	2302      	movs	r3, #2
  }
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08c      	sub	sp, #48	@ 0x30
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b20      	cmp	r3, #32
 8009864:	d165      	bne.n	8009932 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_UART_Transmit_DMA+0x26>
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e05e      	b.n	8009934 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_UART_Transmit_DMA+0x38>
 8009880:	2302      	movs	r3, #2
 8009882:	e057      	b.n	8009934 <HAL_UART_Transmit_DMA+0xe8>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	88fa      	ldrh	r2, [r7, #6]
 800989c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2221      	movs	r2, #33	@ 0x21
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b0:	4a22      	ldr	r2, [pc, #136]	@ (800993c <HAL_UART_Transmit_DMA+0xf0>)
 80098b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b8:	4a21      	ldr	r2, [pc, #132]	@ (8009940 <HAL_UART_Transmit_DMA+0xf4>)
 80098ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c0:	4a20      	ldr	r2, [pc, #128]	@ (8009944 <HAL_UART_Transmit_DMA+0xf8>)
 80098c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c8:	2200      	movs	r2, #0
 80098ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80098cc:	f107 0308 	add.w	r3, r7, #8
 80098d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80098d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d8:	6819      	ldr	r1, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3304      	adds	r3, #4
 80098e0:	461a      	mov	r2, r3
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	f7fc fa18 	bl	8005d18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3314      	adds	r3, #20
 8009900:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	617b      	str	r3, [r7, #20]
   return(result);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3314      	adds	r3, #20
 8009918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800991a:	627a      	str	r2, [r7, #36]	@ 0x24
 800991c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6a39      	ldr	r1, [r7, #32]
 8009920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	61fb      	str	r3, [r7, #28]
   return(result);
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e5      	bne.n	80098fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e000      	b.n	8009934 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3730      	adds	r7, #48	@ 0x30
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	0800a32d 	.word	0x0800a32d
 8009940:	0800a3c7 	.word	0x0800a3c7
 8009944:	0800a53f 	.word	0x0800a53f

08009948 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b20      	cmp	r3, #32
 8009960:	d11d      	bne.n	800999e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <HAL_UART_Receive_DMA+0x26>
 8009968:	88fb      	ldrh	r3, [r7, #6]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e016      	b.n	80099a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_UART_Receive_DMA+0x38>
 800997c:	2302      	movs	r3, #2
 800997e:	e00f      	b.n	80099a0 <HAL_UART_Receive_DMA+0x58>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800998e:	88fb      	ldrh	r3, [r7, #6]
 8009990:	461a      	mov	r2, r3
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fec9 	bl	800a72c <UART_Start_Receive_DMA>
 800999a:	4603      	mov	r3, r0
 800999c:	e000      	b.n	80099a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800999e:	2302      	movs	r3, #2
  }
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b0a0      	sub	sp, #128	@ 0x80
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	330c      	adds	r3, #12
 80099b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80099c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80099c2:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80099c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	330c      	adds	r3, #12
 80099ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80099d0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80099d2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80099d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80099de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e5      	bne.n	80099b0 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3314      	adds	r3, #20
 80099ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3314      	adds	r3, #20
 8009a02:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009a04:	657a      	str	r2, [r7, #84]	@ 0x54
 8009a06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e5      	bne.n	80099e4 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d119      	bne.n	8009a54 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	330c      	adds	r3, #12
 8009a26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	f023 0310 	bic.w	r3, r3, #16
 8009a36:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009a40:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e5      	bne.n	8009a20 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a5e:	2b80      	cmp	r3, #128	@ 0x80
 8009a60:	d136      	bne.n	8009ad0 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3314      	adds	r3, #20
 8009a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3314      	adds	r3, #20
 8009a80:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e5      	bne.n	8009a62 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d018      	beq.n	8009ad0 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fc f98c 	bl	8005dc8 <HAL_DMA_Abort>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00c      	beq.n	8009ad0 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fc fba0 	bl	8006200 <HAL_DMA_GetError>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d104      	bne.n	8009ad0 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2210      	movs	r2, #16
 8009aca:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e052      	b.n	8009b76 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d136      	bne.n	8009b4c <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3314      	adds	r3, #20
 8009ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009af4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3314      	adds	r3, #20
 8009afc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009afe:	61ba      	str	r2, [r7, #24]
 8009b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6979      	ldr	r1, [r7, #20]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e5      	bne.n	8009ade <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d018      	beq.n	8009b4c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1e:	2200      	movs	r2, #0
 8009b20:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fc f94e 	bl	8005dc8 <HAL_DMA_Abort>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00c      	beq.n	8009b4c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fc fb62 	bl	8006200 <HAL_DMA_GetError>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d104      	bne.n	8009b4c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2210      	movs	r2, #16
 8009b46:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e014      	b.n	8009b76 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3780      	adds	r7, #128	@ 0x80
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b0a2      	sub	sp, #136	@ 0x88
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	330c      	adds	r3, #12
 8009b94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	330c      	adds	r3, #12
 8009bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e3      	bne.n	8009b8e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bd8:	f023 0301 	bic.w	r3, r3, #1
 8009bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3314      	adds	r3, #20
 8009be4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009be6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009be8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e5      	bne.n	8009bc6 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d119      	bne.n	8009c36 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	330c      	adds	r3, #12
 8009c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c14:	f023 0310 	bic.w	r3, r3, #16
 8009c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	330c      	adds	r3, #12
 8009c20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009c22:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e5      	bne.n	8009c02 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00f      	beq.n	8009c5e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c48:	2b80      	cmp	r3, #128	@ 0x80
 8009c4a:	d104      	bne.n	8009c56 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c50:	4a53      	ldr	r2, [pc, #332]	@ (8009da0 <HAL_UART_Abort_IT+0x220>)
 8009c52:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c54:	e003      	b.n	8009c5e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00f      	beq.n	8009c86 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c70:	2b40      	cmp	r3, #64	@ 0x40
 8009c72:	d104      	bne.n	8009c7e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	4a4a      	ldr	r2, [pc, #296]	@ (8009da4 <HAL_UART_Abort_IT+0x224>)
 8009c7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c7c:	e003      	b.n	8009c86 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c82:	2200      	movs	r2, #0
 8009c84:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c90:	2b80      	cmp	r3, #128	@ 0x80
 8009c92:	d12d      	bne.n	8009cf0 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3314      	adds	r3, #20
 8009c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	e853 3f00 	ldrex	r3, [r3]
 8009ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009caa:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3314      	adds	r3, #20
 8009cb2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009cb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cbc:	e841 2300 	strex	r3, r2, [r1]
 8009cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e5      	bne.n	8009c94 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00f      	beq.n	8009cf0 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fc f8e7 	bl	8005ea8 <HAL_DMA_Abort_IT>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d004      	beq.n	8009cea <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	651a      	str	r2, [r3, #80]	@ 0x50
 8009ce8:	e002      	b.n	8009cf0 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfa:	2b40      	cmp	r3, #64	@ 0x40
 8009cfc:	d130      	bne.n	8009d60 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3314      	adds	r3, #20
 8009d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d14:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3314      	adds	r3, #20
 8009d1c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d1e:	61fa      	str	r2, [r7, #28]
 8009d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	69b9      	ldr	r1, [r7, #24]
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e5      	bne.n	8009cfe <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d012      	beq.n	8009d60 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fc f8b2 	bl	8005ea8 <HAL_DMA_Abort_IT>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4e:	2200      	movs	r2, #0
 8009d50:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8009d52:	2301      	movs	r3, #1
 8009d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d58:	e002      	b.n	8009d60 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8009d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d116      	bne.n	8009d96 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2220      	movs	r2, #32
 8009d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fab5 	bl	800a300 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3788      	adds	r7, #136	@ 0x88
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	0800a9a7 	.word	0x0800a9a7
 8009da4:	0800aa07 	.word	0x0800aa07

08009da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b0ba      	sub	sp, #232	@ 0xe8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10f      	bne.n	8009e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <HAL_UART_IRQHandler+0x66>
 8009dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fe95 	bl	800ab36 <UART_Receive_IT>
      return;
 8009e0c:	e256      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 80de 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x22c>
 8009e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80d1 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <HAL_UART_IRQHandler+0xae>
 8009e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4e:	f043 0201 	orr.w	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <HAL_UART_IRQHandler+0xd2>
 8009e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e72:	f043 0202 	orr.w	r2, r3, #2
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00b      	beq.n	8009e9e <HAL_UART_IRQHandler+0xf6>
 8009e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d005      	beq.n	8009e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e96:	f043 0204 	orr.w	r2, r3, #4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d011      	beq.n	8009ece <HAL_UART_IRQHandler+0x126>
 8009eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d005      	beq.n	8009ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec6:	f043 0208 	orr.w	r2, r3, #8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 81ed 	beq.w	800a2b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x14e>
 8009ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fe20 	bl	800ab36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f00:	2b40      	cmp	r3, #64	@ 0x40
 8009f02:	bf0c      	ite	eq
 8009f04:	2301      	moveq	r3, #1
 8009f06:	2300      	movne	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d103      	bne.n	8009f22 <HAL_UART_IRQHandler+0x17a>
 8009f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d04f      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fcc8 	bl	800a8b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f32:	2b40      	cmp	r3, #64	@ 0x40
 8009f34:	d141      	bne.n	8009fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3314      	adds	r3, #20
 8009f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1d9      	bne.n	8009f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d013      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8e:	4a7d      	ldr	r2, [pc, #500]	@ (800a184 <HAL_UART_IRQHandler+0x3dc>)
 8009f90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fb ff86 	bl	8005ea8 <HAL_DMA_Abort_IT>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d016      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009fac:	4610      	mov	r0, r2
 8009fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb0:	e00e      	b.n	8009fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f99a 	bl	800a2ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb8:	e00a      	b.n	8009fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f996 	bl	800a2ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc0:	e006      	b.n	8009fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f992 	bl	800a2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009fce:	e170      	b.n	800a2b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd0:	bf00      	nop
    return;
 8009fd2:	e16e      	b.n	800a2b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	f040 814a 	bne.w	800a272 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 8143 	beq.w	800a272 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 813c 	beq.w	800a272 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60bb      	str	r3, [r7, #8]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60bb      	str	r3, [r7, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	60bb      	str	r3, [r7, #8]
 800a00e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a01a:	2b40      	cmp	r3, #64	@ 0x40
 800a01c:	f040 80b4 	bne.w	800a188 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a02c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 8140 	beq.w	800a2b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a03a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a03e:	429a      	cmp	r2, r3
 800a040:	f080 8139 	bcs.w	800a2b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a04a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a056:	f000 8088 	beq.w	800a16a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	330c      	adds	r3, #12
 800a060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a070:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	330c      	adds	r3, #12
 800a082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a08a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a09e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1d9      	bne.n	800a05a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3314      	adds	r3, #20
 800a0ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a0b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0b8:	f023 0301 	bic.w	r3, r3, #1
 800a0bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3314      	adds	r3, #20
 800a0c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a0ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a0ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a0d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a0dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e1      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3314      	adds	r3, #20
 800a102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a10c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e3      	bne.n	800a0e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	330c      	adds	r3, #12
 800a12e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a13a:	f023 0310 	bic.w	r3, r3, #16
 800a13e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	330c      	adds	r3, #12
 800a148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a14c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a14e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a15a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e3      	bne.n	800a128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a164:	4618      	mov	r0, r3
 800a166:	f7fb fe2f 	bl	8005dc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a172:	b29b      	uxth	r3, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f8ca 	bl	800a314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a180:	e099      	b.n	800a2b6 <HAL_UART_IRQHandler+0x50e>
 800a182:	bf00      	nop
 800a184:	0800a97f 	.word	0x0800a97f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a190:	b29b      	uxth	r3, r3
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 808b 	beq.w	800a2ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 8086 	beq.w	800a2ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	330c      	adds	r3, #12
 800a1ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a1d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a1d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e3      	bne.n	800a1ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3314      	adds	r3, #20
 800a1ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f023 0301 	bic.w	r3, r3, #1
 800a1fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3314      	adds	r3, #20
 800a206:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a20a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e3      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0310 	bic.w	r3, r3, #16
 800a242:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	330c      	adds	r3, #12
 800a24c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a250:	61fa      	str	r2, [r7, #28]
 800a252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	617b      	str	r3, [r7, #20]
   return(result);
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e3      	bne.n	800a22c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f852 	bl	800a314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a270:	e023      	b.n	800a2ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <HAL_UART_IRQHandler+0x4ea>
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fbeb 	bl	800aa66 <UART_Transmit_IT>
    return;
 800a290:	e014      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <HAL_UART_IRQHandler+0x514>
 800a29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d008      	beq.n	800a2bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fc2b 	bl	800ab06 <UART_EndTransmit_IT>
    return;
 800a2b0:	e004      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
    return;
 800a2b2:	bf00      	nop
 800a2b4:	e002      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
      return;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
      return;
 800a2ba:	bf00      	nop
  }
}
 800a2bc:	37e8      	adds	r7, #232	@ 0xe8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	460b      	mov	r3, r1
 800a31e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b090      	sub	sp, #64	@ 0x40
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a344:	2b00      	cmp	r3, #0
 800a346:	d137      	bne.n	800a3b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34a:	2200      	movs	r2, #0
 800a34c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3314      	adds	r3, #20
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	623b      	str	r3, [r7, #32]
   return(result);
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a364:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3314      	adds	r3, #20
 800a36c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a36e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e5      	bne.n	800a34e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	330c      	adds	r3, #12
 800a388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	60fb      	str	r3, [r7, #12]
   return(result);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3a2:	61fa      	str	r2, [r7, #28]
 800a3a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	69b9      	ldr	r1, [r7, #24]
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	617b      	str	r3, [r7, #20]
   return(result);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3b6:	e002      	b.n	800a3be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a3b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3ba:	f004 fcb9 	bl	800ed30 <HAL_UART_TxCpltCallback>
}
 800a3be:	bf00      	nop
 800a3c0:	3740      	adds	r7, #64	@ 0x40
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff ff75 	bl	800a2c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b09c      	sub	sp, #112	@ 0x70
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d172      	bne.n	800a4e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a3fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a400:	2200      	movs	r2, #0
 800a402:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	330c      	adds	r3, #12
 800a40a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a41a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a41c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a424:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a426:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a42a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e5      	bne.n	800a404 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3314      	adds	r3, #20
 800a43e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3314      	adds	r3, #20
 800a456:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a458:	647a      	str	r2, [r7, #68]	@ 0x44
 800a45a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a45e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e5      	bne.n	800a438 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a46c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3314      	adds	r3, #20
 800a472:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	623b      	str	r3, [r7, #32]
   return(result);
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a482:	663b      	str	r3, [r7, #96]	@ 0x60
 800a484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3314      	adds	r3, #20
 800a48a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a48c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e5      	bne.n	800a46c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d119      	bne.n	800a4e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	330c      	adds	r3, #12
 800a4b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	e853 3f00 	ldrex	r3, [r3]
 800a4be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f023 0310 	bic.w	r3, r3, #16
 800a4c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a4d0:	61fa      	str	r2, [r7, #28]
 800a4d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d4:	69b9      	ldr	r1, [r7, #24]
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	e841 2300 	strex	r3, r2, [r1]
 800a4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e5      	bne.n	800a4b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d106      	bne.n	800a4fa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4f4:	f7ff ff0e 	bl	800a314 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4f8:	e002      	b.n	800a500 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a4fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4fc:	f004 fc44 	bl	800ed88 <HAL_UART_RxCpltCallback>
}
 800a500:	bf00      	nop
 800a502:	3770      	adds	r7, #112	@ 0x70
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a514:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d108      	bne.n	800a530 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a522:	085b      	lsrs	r3, r3, #1
 800a524:	b29b      	uxth	r3, r3
 800a526:	4619      	mov	r1, r3
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fef3 	bl	800a314 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a52e:	e002      	b.n	800a536 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f7ff fed1 	bl	800a2d8 <HAL_UART_RxHalfCpltCallback>
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a55a:	2b80      	cmp	r3, #128	@ 0x80
 800a55c:	bf0c      	ite	eq
 800a55e:	2301      	moveq	r3, #1
 800a560:	2300      	movne	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b21      	cmp	r3, #33	@ 0x21
 800a570:	d108      	bne.n	800a584 <UART_DMAError+0x46>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2200      	movs	r2, #0
 800a57c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a57e:	68b8      	ldr	r0, [r7, #8]
 800a580:	f000 f972 	bl	800a868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a58e:	2b40      	cmp	r3, #64	@ 0x40
 800a590:	bf0c      	ite	eq
 800a592:	2301      	moveq	r3, #1
 800a594:	2300      	movne	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b22      	cmp	r3, #34	@ 0x22
 800a5a4:	d108      	bne.n	800a5b8 <UART_DMAError+0x7a>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a5b2:	68b8      	ldr	r0, [r7, #8]
 800a5b4:	f000 f980 	bl	800a8b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5bc:	f043 0210 	orr.w	r2, r3, #16
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5c4:	68b8      	ldr	r0, [r7, #8]
 800a5c6:	f7ff fe91 	bl	800a2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b090      	sub	sp, #64	@ 0x40
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	603b      	str	r3, [r7, #0]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5e2:	e050      	b.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d04c      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a5ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d007      	beq.n	800a602 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5f2:	f7fb f9c5 	bl	8005980 <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d241      	bcs.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	330c      	adds	r3, #12
 800a608:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	330c      	adds	r3, #12
 800a620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a622:	637a      	str	r2, [r7, #52]	@ 0x34
 800a624:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3314      	adds	r3, #20
 800a63c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	613b      	str	r3, [r7, #16]
   return(result);
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f023 0301 	bic.w	r3, r3, #1
 800a64c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3314      	adds	r3, #20
 800a654:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a656:	623a      	str	r2, [r7, #32]
 800a658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	69f9      	ldr	r1, [r7, #28]
 800a65c:	6a3a      	ldr	r2, [r7, #32]
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	61bb      	str	r3, [r7, #24]
   return(result);
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e5      	bne.n	800a636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e00f      	b.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4013      	ands	r3, r2
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	bf0c      	ite	eq
 800a696:	2301      	moveq	r3, #1
 800a698:	2300      	movne	r3, #0
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d09f      	beq.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3740      	adds	r7, #64	@ 0x40
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	88fa      	ldrh	r2, [r7, #6]
 800a6c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2222      	movs	r2, #34	@ 0x22
 800a6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d007      	beq.n	800a6fc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	695a      	ldr	r2, [r3, #20]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0201 	orr.w	r2, r2, #1
 800a70a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0220 	orr.w	r2, r2, #32
 800a71a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
	...

0800a72c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b098      	sub	sp, #96	@ 0x60
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	88fa      	ldrh	r2, [r7, #6]
 800a744:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2222      	movs	r2, #34	@ 0x22
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a758:	4a40      	ldr	r2, [pc, #256]	@ (800a85c <UART_Start_Receive_DMA+0x130>)
 800a75a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a760:	4a3f      	ldr	r2, [pc, #252]	@ (800a860 <UART_Start_Receive_DMA+0x134>)
 800a762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a768:	4a3e      	ldr	r2, [pc, #248]	@ (800a864 <UART_Start_Receive_DMA+0x138>)
 800a76a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a770:	2200      	movs	r2, #0
 800a772:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a774:	f107 0308 	add.w	r3, r7, #8
 800a778:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3304      	adds	r3, #4
 800a784:	4619      	mov	r1, r3
 800a786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	f7fb fac4 	bl	8005d18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a790:	2300      	movs	r3, #0
 800a792:	613b      	str	r3, [r7, #16]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	613b      	str	r3, [r7, #16]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d019      	beq.n	800a7ea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	330c      	adds	r3, #12
 800a7d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a7d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a7dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e5      	bne.n	800a7b6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3314      	adds	r3, #20
 800a7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f4:	e853 3f00 	ldrex	r3, [r3]
 800a7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fc:	f043 0301 	orr.w	r3, r3, #1
 800a800:	657b      	str	r3, [r7, #84]	@ 0x54
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3314      	adds	r3, #20
 800a808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a80a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a80c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a812:	e841 2300 	strex	r3, r2, [r1]
 800a816:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1e5      	bne.n	800a7ea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3314      	adds	r3, #20
 800a824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	617b      	str	r3, [r7, #20]
   return(result);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a834:	653b      	str	r3, [r7, #80]	@ 0x50
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3314      	adds	r3, #20
 800a83c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a83e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6a39      	ldr	r1, [r7, #32]
 800a844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e5      	bne.n	800a81e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3760      	adds	r7, #96	@ 0x60
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	0800a3e3 	.word	0x0800a3e3
 800a860:	0800a509 	.word	0x0800a509
 800a864:	0800a53f 	.word	0x0800a53f

0800a868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b089      	sub	sp, #36	@ 0x24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	330c      	adds	r3, #12
 800a876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	330c      	adds	r3, #12
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	61ba      	str	r2, [r7, #24]
 800a892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a894:	6979      	ldr	r1, [r7, #20]
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	e841 2300 	strex	r3, r2, [r1]
 800a89c:	613b      	str	r3, [r7, #16]
   return(result);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1e5      	bne.n	800a870 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800a8ac:	bf00      	nop
 800a8ae:	3724      	adds	r7, #36	@ 0x24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b095      	sub	sp, #84	@ 0x54
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	330c      	adds	r3, #12
 800a8c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ca:	e853 3f00 	ldrex	r3, [r3]
 800a8ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a8e0:	643a      	str	r2, [r7, #64]	@ 0x40
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e5      	bne.n	800a8c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3314      	adds	r3, #20
 800a8fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	61fb      	str	r3, [r7, #28]
   return(result);
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	f023 0301 	bic.w	r3, r3, #1
 800a90a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3314      	adds	r3, #20
 800a912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a91a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e5      	bne.n	800a8f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d119      	bne.n	800a964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	330c      	adds	r3, #12
 800a936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f023 0310 	bic.w	r3, r3, #16
 800a946:	647b      	str	r3, [r7, #68]	@ 0x44
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	330c      	adds	r3, #12
 800a94e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a950:	61ba      	str	r2, [r7, #24]
 800a952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6979      	ldr	r1, [r7, #20]
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	613b      	str	r3, [r7, #16]
   return(result);
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2220      	movs	r2, #32
 800a968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a972:	bf00      	nop
 800a974:	3754      	adds	r7, #84	@ 0x54
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fca7 	bl	800a2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d004      	beq.n	800a9ce <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d117      	bne.n	800a9fe <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fc82 	bl	800a300 <HAL_UART_AbortCpltCallback>
 800a9fc:	e000      	b.n	800aa00 <UART_DMATxAbortCallback+0x5a>
      return;
 800a9fe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa12:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa18:	2200      	movs	r2, #0
 800aa1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d004      	beq.n	800aa2e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d117      	bne.n	800aa5e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7ff fc52 	bl	800a300 <HAL_UART_AbortCpltCallback>
 800aa5c:	e000      	b.n	800aa60 <UART_DMARxAbortCallback+0x5a>
      return;
 800aa5e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b21      	cmp	r3, #33	@ 0x21
 800aa78:	d13e      	bne.n	800aaf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa82:	d114      	bne.n	800aaae <UART_Transmit_IT+0x48>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d110      	bne.n	800aaae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	881b      	ldrh	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	1c9a      	adds	r2, r3, #2
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	621a      	str	r2, [r3, #32]
 800aaac:	e008      	b.n	800aac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	1c59      	adds	r1, r3, #1
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	6211      	str	r1, [r2, #32]
 800aab8:	781a      	ldrb	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	3b01      	subs	r3, #1
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	4619      	mov	r1, r3
 800aace:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10f      	bne.n	800aaf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e000      	b.n	800aafa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aaf8:	2302      	movs	r3, #2
  }
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b082      	sub	sp, #8
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f004 f902 	bl	800ed30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b08c      	sub	sp, #48	@ 0x30
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b22      	cmp	r3, #34	@ 0x22
 800ab48:	f040 80ab 	bne.w	800aca2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab54:	d117      	bne.n	800ab86 <UART_Receive_IT+0x50>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d113      	bne.n	800ab86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab66:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7e:	1c9a      	adds	r2, r3, #2
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab84:	e026      	b.n	800abd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab98:	d007      	beq.n	800abaa <UART_Receive_IT+0x74>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <UART_Receive_IT+0x82>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e008      	b.n	800abca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b01      	subs	r3, #1
 800abdc:	b29b      	uxth	r3, r3
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4619      	mov	r1, r3
 800abe2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d15a      	bne.n	800ac9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0220 	bic.w	r2, r2, #32
 800abf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68da      	ldr	r2, [r3, #12]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	695a      	ldr	r2, [r3, #20]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 0201 	bic.w	r2, r2, #1
 800ac16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d135      	bne.n	800ac94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	330c      	adds	r3, #12
 800ac34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	e853 3f00 	ldrex	r3, [r3]
 800ac3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	f023 0310 	bic.w	r3, r3, #16
 800ac44:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	330c      	adds	r3, #12
 800ac4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac4e:	623a      	str	r2, [r7, #32]
 800ac50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	69f9      	ldr	r1, [r7, #28]
 800ac54:	6a3a      	ldr	r2, [r7, #32]
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e5      	bne.n	800ac2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0310 	and.w	r3, r3, #16
 800ac6c:	2b10      	cmp	r3, #16
 800ac6e:	d10a      	bne.n	800ac86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fb41 	bl	800a314 <HAL_UARTEx_RxEventCallback>
 800ac92:	e002      	b.n	800ac9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f004 f877 	bl	800ed88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e002      	b.n	800aca4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e000      	b.n	800aca4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aca2:	2302      	movs	r3, #2
  }
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3730      	adds	r7, #48	@ 0x30
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acb0:	b0c0      	sub	sp, #256	@ 0x100
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800acc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acc8:	68d9      	ldr	r1, [r3, #12]
 800acca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	ea40 0301 	orr.w	r3, r0, r1
 800acd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acda:	689a      	ldr	r2, [r3, #8]
 800acdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	431a      	orrs	r2, r3
 800ace4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	431a      	orrs	r2, r3
 800acec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800acf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ad04:	f021 010c 	bic.w	r1, r1, #12
 800ad08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ad12:	430b      	orrs	r3, r1
 800ad14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ad22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad26:	6999      	ldr	r1, [r3, #24]
 800ad28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	ea40 0301 	orr.w	r3, r0, r1
 800ad32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	4b8f      	ldr	r3, [pc, #572]	@ (800af78 <UART_SetConfig+0x2cc>)
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d005      	beq.n	800ad4c <UART_SetConfig+0xa0>
 800ad40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b8d      	ldr	r3, [pc, #564]	@ (800af7c <UART_SetConfig+0x2d0>)
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d104      	bne.n	800ad56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad4c:	f7fc f912 	bl	8006f74 <HAL_RCC_GetPCLK2Freq>
 800ad50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ad54:	e003      	b.n	800ad5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad56:	f7fc f8f9 	bl	8006f4c <HAL_RCC_GetPCLK1Freq>
 800ad5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad68:	f040 810c 	bne.w	800af84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ad76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ad7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ad7e:	4622      	mov	r2, r4
 800ad80:	462b      	mov	r3, r5
 800ad82:	1891      	adds	r1, r2, r2
 800ad84:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ad86:	415b      	adcs	r3, r3
 800ad88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ad8e:	4621      	mov	r1, r4
 800ad90:	eb12 0801 	adds.w	r8, r2, r1
 800ad94:	4629      	mov	r1, r5
 800ad96:	eb43 0901 	adc.w	r9, r3, r1
 800ad9a:	f04f 0200 	mov.w	r2, #0
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ada6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800adaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800adae:	4690      	mov	r8, r2
 800adb0:	4699      	mov	r9, r3
 800adb2:	4623      	mov	r3, r4
 800adb4:	eb18 0303 	adds.w	r3, r8, r3
 800adb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800adbc:	462b      	mov	r3, r5
 800adbe:	eb49 0303 	adc.w	r3, r9, r3
 800adc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800adc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800add2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800add6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800adda:	460b      	mov	r3, r1
 800addc:	18db      	adds	r3, r3, r3
 800adde:	653b      	str	r3, [r7, #80]	@ 0x50
 800ade0:	4613      	mov	r3, r2
 800ade2:	eb42 0303 	adc.w	r3, r2, r3
 800ade6:	657b      	str	r3, [r7, #84]	@ 0x54
 800ade8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800adec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800adf0:	f7f9 fe12 	bl	8004a18 <__aeabi_uldivmod>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4b61      	ldr	r3, [pc, #388]	@ (800af80 <UART_SetConfig+0x2d4>)
 800adfa:	fba3 2302 	umull	r2, r3, r3, r2
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	011c      	lsls	r4, r3, #4
 800ae02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae06:	2200      	movs	r2, #0
 800ae08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ae10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ae14:	4642      	mov	r2, r8
 800ae16:	464b      	mov	r3, r9
 800ae18:	1891      	adds	r1, r2, r2
 800ae1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ae1c:	415b      	adcs	r3, r3
 800ae1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ae24:	4641      	mov	r1, r8
 800ae26:	eb12 0a01 	adds.w	sl, r2, r1
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	eb43 0b01 	adc.w	fp, r3, r1
 800ae30:	f04f 0200 	mov.w	r2, #0
 800ae34:	f04f 0300 	mov.w	r3, #0
 800ae38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ae3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ae40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae44:	4692      	mov	sl, r2
 800ae46:	469b      	mov	fp, r3
 800ae48:	4643      	mov	r3, r8
 800ae4a:	eb1a 0303 	adds.w	r3, sl, r3
 800ae4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae52:	464b      	mov	r3, r9
 800ae54:	eb4b 0303 	adc.w	r3, fp, r3
 800ae58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ae5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ae6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ae70:	460b      	mov	r3, r1
 800ae72:	18db      	adds	r3, r3, r3
 800ae74:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae76:	4613      	mov	r3, r2
 800ae78:	eb42 0303 	adc.w	r3, r2, r3
 800ae7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ae82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ae86:	f7f9 fdc7 	bl	8004a18 <__aeabi_uldivmod>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4b3b      	ldr	r3, [pc, #236]	@ (800af80 <UART_SetConfig+0x2d4>)
 800ae92:	fba3 2301 	umull	r2, r3, r3, r1
 800ae96:	095b      	lsrs	r3, r3, #5
 800ae98:	2264      	movs	r2, #100	@ 0x64
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	1acb      	subs	r3, r1, r3
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aea6:	4b36      	ldr	r3, [pc, #216]	@ (800af80 <UART_SetConfig+0x2d4>)
 800aea8:	fba3 2302 	umull	r2, r3, r3, r2
 800aeac:	095b      	lsrs	r3, r3, #5
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aeb4:	441c      	add	r4, r3
 800aeb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aec0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	1891      	adds	r1, r2, r2
 800aece:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aed0:	415b      	adcs	r3, r3
 800aed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aed8:	4641      	mov	r1, r8
 800aeda:	1851      	adds	r1, r2, r1
 800aedc:	6339      	str	r1, [r7, #48]	@ 0x30
 800aede:	4649      	mov	r1, r9
 800aee0:	414b      	adcs	r3, r1
 800aee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee4:	f04f 0200 	mov.w	r2, #0
 800aee8:	f04f 0300 	mov.w	r3, #0
 800aeec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aef0:	4659      	mov	r1, fp
 800aef2:	00cb      	lsls	r3, r1, #3
 800aef4:	4651      	mov	r1, sl
 800aef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aefa:	4651      	mov	r1, sl
 800aefc:	00ca      	lsls	r2, r1, #3
 800aefe:	4610      	mov	r0, r2
 800af00:	4619      	mov	r1, r3
 800af02:	4603      	mov	r3, r0
 800af04:	4642      	mov	r2, r8
 800af06:	189b      	adds	r3, r3, r2
 800af08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af0c:	464b      	mov	r3, r9
 800af0e:	460a      	mov	r2, r1
 800af10:	eb42 0303 	adc.w	r3, r2, r3
 800af14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800af28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800af2c:	460b      	mov	r3, r1
 800af2e:	18db      	adds	r3, r3, r3
 800af30:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af32:	4613      	mov	r3, r2
 800af34:	eb42 0303 	adc.w	r3, r2, r3
 800af38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800af3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800af42:	f7f9 fd69 	bl	8004a18 <__aeabi_uldivmod>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4b0d      	ldr	r3, [pc, #52]	@ (800af80 <UART_SetConfig+0x2d4>)
 800af4c:	fba3 1302 	umull	r1, r3, r3, r2
 800af50:	095b      	lsrs	r3, r3, #5
 800af52:	2164      	movs	r1, #100	@ 0x64
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	3332      	adds	r3, #50	@ 0x32
 800af5e:	4a08      	ldr	r2, [pc, #32]	@ (800af80 <UART_SetConfig+0x2d4>)
 800af60:	fba2 2303 	umull	r2, r3, r2, r3
 800af64:	095b      	lsrs	r3, r3, #5
 800af66:	f003 0207 	and.w	r2, r3, #7
 800af6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4422      	add	r2, r4
 800af72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af74:	e106      	b.n	800b184 <UART_SetConfig+0x4d8>
 800af76:	bf00      	nop
 800af78:	40011000 	.word	0x40011000
 800af7c:	40011400 	.word	0x40011400
 800af80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800af8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800af92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800af96:	4642      	mov	r2, r8
 800af98:	464b      	mov	r3, r9
 800af9a:	1891      	adds	r1, r2, r2
 800af9c:	6239      	str	r1, [r7, #32]
 800af9e:	415b      	adcs	r3, r3
 800afa0:	627b      	str	r3, [r7, #36]	@ 0x24
 800afa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afa6:	4641      	mov	r1, r8
 800afa8:	1854      	adds	r4, r2, r1
 800afaa:	4649      	mov	r1, r9
 800afac:	eb43 0501 	adc.w	r5, r3, r1
 800afb0:	f04f 0200 	mov.w	r2, #0
 800afb4:	f04f 0300 	mov.w	r3, #0
 800afb8:	00eb      	lsls	r3, r5, #3
 800afba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afbe:	00e2      	lsls	r2, r4, #3
 800afc0:	4614      	mov	r4, r2
 800afc2:	461d      	mov	r5, r3
 800afc4:	4643      	mov	r3, r8
 800afc6:	18e3      	adds	r3, r4, r3
 800afc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afcc:	464b      	mov	r3, r9
 800afce:	eb45 0303 	adc.w	r3, r5, r3
 800afd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800afd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	f04f 0300 	mov.w	r3, #0
 800afee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aff2:	4629      	mov	r1, r5
 800aff4:	008b      	lsls	r3, r1, #2
 800aff6:	4621      	mov	r1, r4
 800aff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800affc:	4621      	mov	r1, r4
 800affe:	008a      	lsls	r2, r1, #2
 800b000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b004:	f7f9 fd08 	bl	8004a18 <__aeabi_uldivmod>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4b60      	ldr	r3, [pc, #384]	@ (800b190 <UART_SetConfig+0x4e4>)
 800b00e:	fba3 2302 	umull	r2, r3, r3, r2
 800b012:	095b      	lsrs	r3, r3, #5
 800b014:	011c      	lsls	r4, r3, #4
 800b016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b020:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b028:	4642      	mov	r2, r8
 800b02a:	464b      	mov	r3, r9
 800b02c:	1891      	adds	r1, r2, r2
 800b02e:	61b9      	str	r1, [r7, #24]
 800b030:	415b      	adcs	r3, r3
 800b032:	61fb      	str	r3, [r7, #28]
 800b034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b038:	4641      	mov	r1, r8
 800b03a:	1851      	adds	r1, r2, r1
 800b03c:	6139      	str	r1, [r7, #16]
 800b03e:	4649      	mov	r1, r9
 800b040:	414b      	adcs	r3, r1
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b050:	4659      	mov	r1, fp
 800b052:	00cb      	lsls	r3, r1, #3
 800b054:	4651      	mov	r1, sl
 800b056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b05a:	4651      	mov	r1, sl
 800b05c:	00ca      	lsls	r2, r1, #3
 800b05e:	4610      	mov	r0, r2
 800b060:	4619      	mov	r1, r3
 800b062:	4603      	mov	r3, r0
 800b064:	4642      	mov	r2, r8
 800b066:	189b      	adds	r3, r3, r2
 800b068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b06c:	464b      	mov	r3, r9
 800b06e:	460a      	mov	r2, r1
 800b070:	eb42 0303 	adc.w	r3, r2, r3
 800b074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b082:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b090:	4649      	mov	r1, r9
 800b092:	008b      	lsls	r3, r1, #2
 800b094:	4641      	mov	r1, r8
 800b096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b09a:	4641      	mov	r1, r8
 800b09c:	008a      	lsls	r2, r1, #2
 800b09e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b0a2:	f7f9 fcb9 	bl	8004a18 <__aeabi_uldivmod>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4b38      	ldr	r3, [pc, #224]	@ (800b190 <UART_SetConfig+0x4e4>)
 800b0ae:	fba3 2301 	umull	r2, r3, r3, r1
 800b0b2:	095b      	lsrs	r3, r3, #5
 800b0b4:	2264      	movs	r2, #100	@ 0x64
 800b0b6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ba:	1acb      	subs	r3, r1, r3
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	3332      	adds	r3, #50	@ 0x32
 800b0c0:	4a33      	ldr	r2, [pc, #204]	@ (800b190 <UART_SetConfig+0x4e4>)
 800b0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c6:	095b      	lsrs	r3, r3, #5
 800b0c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0cc:	441c      	add	r4, r3
 800b0ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b0d6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b0d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b0dc:	4642      	mov	r2, r8
 800b0de:	464b      	mov	r3, r9
 800b0e0:	1891      	adds	r1, r2, r2
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	415b      	adcs	r3, r3
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	1851      	adds	r1, r2, r1
 800b0f0:	6039      	str	r1, [r7, #0]
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	414b      	adcs	r3, r1
 800b0f6:	607b      	str	r3, [r7, #4]
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	f04f 0300 	mov.w	r3, #0
 800b100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b104:	4659      	mov	r1, fp
 800b106:	00cb      	lsls	r3, r1, #3
 800b108:	4651      	mov	r1, sl
 800b10a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b10e:	4651      	mov	r1, sl
 800b110:	00ca      	lsls	r2, r1, #3
 800b112:	4610      	mov	r0, r2
 800b114:	4619      	mov	r1, r3
 800b116:	4603      	mov	r3, r0
 800b118:	4642      	mov	r2, r8
 800b11a:	189b      	adds	r3, r3, r2
 800b11c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b11e:	464b      	mov	r3, r9
 800b120:	460a      	mov	r2, r1
 800b122:	eb42 0303 	adc.w	r3, r2, r3
 800b126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	663b      	str	r3, [r7, #96]	@ 0x60
 800b132:	667a      	str	r2, [r7, #100]	@ 0x64
 800b134:	f04f 0200 	mov.w	r2, #0
 800b138:	f04f 0300 	mov.w	r3, #0
 800b13c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b140:	4649      	mov	r1, r9
 800b142:	008b      	lsls	r3, r1, #2
 800b144:	4641      	mov	r1, r8
 800b146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b14a:	4641      	mov	r1, r8
 800b14c:	008a      	lsls	r2, r1, #2
 800b14e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b152:	f7f9 fc61 	bl	8004a18 <__aeabi_uldivmod>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <UART_SetConfig+0x4e4>)
 800b15c:	fba3 1302 	umull	r1, r3, r3, r2
 800b160:	095b      	lsrs	r3, r3, #5
 800b162:	2164      	movs	r1, #100	@ 0x64
 800b164:	fb01 f303 	mul.w	r3, r1, r3
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	011b      	lsls	r3, r3, #4
 800b16c:	3332      	adds	r3, #50	@ 0x32
 800b16e:	4a08      	ldr	r2, [pc, #32]	@ (800b190 <UART_SetConfig+0x4e4>)
 800b170:	fba2 2303 	umull	r2, r3, r2, r3
 800b174:	095b      	lsrs	r3, r3, #5
 800b176:	f003 020f 	and.w	r2, r3, #15
 800b17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4422      	add	r2, r4
 800b182:	609a      	str	r2, [r3, #8]
}
 800b184:	bf00      	nop
 800b186:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b18a:	46bd      	mov	sp, r7
 800b18c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b190:	51eb851f 	.word	0x51eb851f

0800b194 <bld_init>:

/*
 * Function: bld_init
 */
gos_result_t bld_init (void_t)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800b19a:	2355      	movs	r3, #85	@ 0x55
 800b19c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800b19e:	4814      	ldr	r0, [pc, #80]	@ (800b1f0 <bld_init+0x5c>)
 800b1a0:	f005 fbce 	bl	8010940 <svl_pdhGetBldCfg>

    if (bldConfig.installRequested == GOS_TRUE)
 800b1a4:	4b12      	ldr	r3, [pc, #72]	@ (800b1f0 <bld_init+0x5c>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b36      	cmp	r3, #54	@ 0x36
 800b1aa:	d103      	bne.n	800b1b4 <bld_init+0x20>
    {
        bldState = BLD_STATE_INSTALL;
 800b1ac:	4b11      	ldr	r3, [pc, #68]	@ (800b1f4 <bld_init+0x60>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	701a      	strb	r2, [r3, #0]
 800b1b2:	e012      	b.n	800b1da <bld_init+0x46>
    }
    else if (bldConfig.waitForConnectionOnStartup == GOS_TRUE)
 800b1b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f0 <bld_init+0x5c>)
 800b1b6:	799b      	ldrb	r3, [r3, #6]
 800b1b8:	2b36      	cmp	r3, #54	@ 0x36
 800b1ba:	d103      	bne.n	800b1c4 <bld_init+0x30>
    {
        bldState = BLD_STATE_CONNECT_WAIT;
 800b1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f4 <bld_init+0x60>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	e00a      	b.n	800b1da <bld_init+0x46>
    }
    else if (bldConfig.updateMode == GOS_TRUE)
 800b1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f0 <bld_init+0x5c>)
 800b1c6:	791b      	ldrb	r3, [r3, #4]
 800b1c8:	2b36      	cmp	r3, #54	@ 0x36
 800b1ca:	d103      	bne.n	800b1d4 <bld_init+0x40>
    {
        bldState = BLD_STATE_WAIT;
 800b1cc:	4b09      	ldr	r3, [pc, #36]	@ (800b1f4 <bld_init+0x60>)
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	701a      	strb	r2, [r3, #0]
 800b1d2:	e002      	b.n	800b1da <bld_init+0x46>
    }
    else
    {
    	bldState = BLD_STATE_APP_CHECK;
 800b1d4:	4b07      	ldr	r3, [pc, #28]	@ (800b1f4 <bld_init+0x60>)
 800b1d6:	2203      	movs	r2, #3
 800b1d8:	701a      	strb	r2, [r3, #0]
    }

    initResult = gos_taskRegister(&bldTaskDesc, NULL);
 800b1da:	2100      	movs	r1, #0
 800b1dc:	4806      	ldr	r0, [pc, #24]	@ (800b1f8 <bld_init+0x64>)
 800b1de:	f008 fa73 	bl	80136c8 <gos_taskRegister>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20001fd0 	.word	0x20001fd0
 800b1f4:	20002284 	.word	0x20002284
 800b1f8:	20000470 	.word	0x20000470

0800b1fc <bld_stateMachineGetState>:

/*
 * Function: bld_stateMachineGetState
 */
gos_result_t bld_stateMachineGetState (bld_state_t* pState)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t getStateResult = GOS_ERROR;
 800b204:	23ae      	movs	r3, #174	@ 0xae
 800b206:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pState != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <bld_stateMachineGetState+0x1e>
    {
        *pState = bldState;
 800b20e:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <bld_stateMachineGetState+0x2c>)
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	701a      	strb	r2, [r3, #0]
        getStateResult = GOS_SUCCESS;
 800b216:	2355      	movs	r3, #85	@ 0x55
 800b218:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return getStateResult;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	20002284 	.word	0x20002284

0800b22c <bld_task>:

GOS_STATIC void_t bld_task (void_t)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b0aa      	sub	sp, #168	@ 0xa8
 800b230:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    svl_sdhBinaryDesc_t binaryDescriptor = {0};
 800b232:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800b236:	2230      	movs	r2, #48	@ 0x30
 800b238:	2100      	movs	r1, #0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f00e f81e 	bl	801927c <memset>
    u32_t               installChunkNum  = 0u;
 800b240:	2300      	movs	r3, #0
 800b242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    u32_t               installChunkCntr = 0u;
 800b246:	2300      	movs	r3, #0
 800b248:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    u32_t               perc             = 0u;
 800b24c:	2300      	movs	r3, #0
 800b24e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    u32_t               startTick        = 0u;
 800b252:	2300      	movs	r3, #0
 800b254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    bool_t              connectTmo       = GOS_FALSE;
 800b258:	2349      	movs	r3, #73	@ 0x49
 800b25a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    gos_message_t       gosMsg           = {0};
 800b25e:	1d3b      	adds	r3, r7, #4
 800b260:	2254      	movs	r2, #84	@ 0x54
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f00e f809 	bl	801927c <memset>
    //gos_message_t       gosRespMsg       = {0};
    //svl_sdhControlMsg_t controlMsg = {0}; TODO
    gos_messageId_t     msgIds []        = { BLD_STATE_CONT_MSG_ID, 0 };
 800b26a:	f24b 43ed 	movw	r3, #46317	@ 0xb4ed
 800b26e:	803b      	strh	r3, [r7, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	807b      	strh	r3, [r7, #2]
    u32_t               byteCounter      = 0u;
 800b274:	2300      	movs	r3, #0
 800b276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    /*
     * Function code.
     */
    // Startup delay (for printing).
    (void_t) gos_taskSleep(500);
 800b27a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b27e:	f008 fbb5 	bl	80139ec <gos_taskSleep>

    (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 800b282:	48c6      	ldr	r0, [pc, #792]	@ (800b59c <bld_task+0x370>)
 800b284:	f005 faec 	bl	8010860 <svl_pdhGetSwInfo>
    (void_t) memcpy((void_t*)&binaryDescriptor.binaryInfo, (void_t*)&currentSwInfo.appBinaryInfo, sizeof(binaryDescriptor));
 800b288:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800b28c:	3324      	adds	r3, #36	@ 0x24
 800b28e:	2230      	movs	r2, #48	@ 0x30
 800b290:	49c3      	ldr	r1, [pc, #780]	@ (800b5a0 <bld_task+0x374>)
 800b292:	4618      	mov	r0, r3
 800b294:	f00e f889 	bl	80193aa <memcpy>

    for (;;)
    {
        switch (bldState)
 800b298:	4bc2      	ldr	r3, [pc, #776]	@ (800b5a4 <bld_task+0x378>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	f200 8226 	bhi.w	800b6ee <bld_task+0x4c2>
 800b2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a8 <bld_task+0x7c>)
 800b2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a8:	0800b2b9 	.word	0x0800b2b9
 800b2ac:	0800b505 	.word	0x0800b505
 800b2b0:	0800b583 	.word	0x0800b583
 800b2b4:	0800b667 	.word	0x0800b667
        {
            case BLD_STATE_INSTALL:
            {
                // Install file is marked in configuration.
                // Try to copy it to application FLASH area.
                byteCounter = 0u;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

                // Get data from external flash.
                (void_t) svl_sdhGetBinaryData(bldConfig.binaryIndex, &binaryDescriptor);
 800b2be:	4bba      	ldr	r3, [pc, #744]	@ (800b5a8 <bld_task+0x37c>)
 800b2c0:	885b      	ldrh	r3, [r3, #2]
 800b2c2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f005 ffed 	bl	80112a8 <svl_sdhGetBinaryData>

                // Check start address.
                if (binaryDescriptor.binaryInfo.startAddress < BLD_APP_ROM_START_ADDRESS)
 800b2ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2d0:	4ab6      	ldr	r2, [pc, #728]	@ (800b5ac <bld_task+0x380>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d803      	bhi.n	800b2de <bld_task+0xb2>
                {
                    bldState = BLD_STATE_WAIT;
 800b2d6:	4bb3      	ldr	r3, [pc, #716]	@ (800b5a4 <bld_task+0x378>)
 800b2d8:	2202      	movs	r2, #2
 800b2da:	701a      	strb	r2, [r3, #0]
                    break;
 800b2dc:	e207      	b.n	800b6ee <bld_task+0x4c2>
                else
                {
                    // Start address OK.
                }

                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 800b2de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b2e2:	0a5b      	lsrs	r3, r3, #9
                                  (binaryDescriptor.binaryInfo.size % BLD_INSTALL_CHUNK_SIZE == 0 ? 0 : 1);
 800b2e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	bf14      	ite	ne
 800b2f0:	2201      	movne	r2, #1
 800b2f2:	2200      	moveq	r2, #0
 800b2f4:	b2d2      	uxtb	r2, r2
                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                // Erase application area.
                (void_t) drv_flashErase(binaryDescriptor.binaryInfo.startAddress, binaryDescriptor.binaryInfo.size);
 800b2fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f001 fc29 	bl	800cb5c <drv_flashErase>

                // Write to internal flash by chunks.
                (void_t) drv_flashUnlock();
 800b30a:	f001 fca6 	bl	800cc5a <drv_flashUnlock>

                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 800b30e:	2300      	movs	r3, #0
 800b310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b314:	e0e5      	b.n	800b4e2 <bld_task+0x2b6>
                {
                    // Read chunk from external flash.
                    (void_t) svl_sdhReadBytesFromMemory(
                            binaryDescriptor.binaryLocation + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE),
 800b316:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b31c:	025b      	lsls	r3, r3, #9
                    (void_t) svl_sdhReadBytesFromMemory(
 800b31e:	4413      	add	r3, r2
 800b320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b324:	49a2      	ldr	r1, [pc, #648]	@ (800b5b0 <bld_task+0x384>)
 800b326:	4618      	mov	r0, r3
 800b328:	f006 f830 	bl	801138c <svl_sdhReadBytesFromMemory>
                            bldInstallBuffer,
                            BLD_INSTALL_CHUNK_SIZE);

                    // Program chunk in internal flash.
                    if (((installChunkCntr + 1) * BLD_INSTALL_CHUNK_SIZE) < binaryDescriptor.binaryInfo.size)
 800b32c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b330:	3301      	adds	r3, #1
 800b332:	025a      	lsls	r2, r3, #9
 800b334:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b338:	429a      	cmp	r2, r3
 800b33a:	d211      	bcs.n	800b360 <bld_task+0x134>
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800b33c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b33e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b342:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800b344:	4413      	add	r3, r2
 800b346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b34a:	4999      	ldr	r1, [pc, #612]	@ (800b5b0 <bld_task+0x384>)
 800b34c:	4618      	mov	r0, r3
 800b34e:	f001 fc4d 	bl	800cbec <drv_flashWriteWithoutLock>
                                 (void_t*)bldInstallBuffer,
                                 BLD_INSTALL_CHUNK_SIZE);

                        byteCounter += BLD_INSTALL_CHUNK_SIZE;
 800b352:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b356:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b35a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b35e:	e019      	b.n	800b394 <bld_task+0x168>
                    }
                    else
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800b360:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b366:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800b368:	18d0      	adds	r0, r2, r3
                                 (void_t*)bldInstallBuffer,
                                 binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE));
 800b36a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b36e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b372:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	461a      	mov	r2, r3
 800b378:	498d      	ldr	r1, [pc, #564]	@ (800b5b0 <bld_task+0x384>)
 800b37a:	f001 fc37 	bl	800cbec <drv_flashWriteWithoutLock>

                        byteCounter += binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE);
 800b37e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b386:	025b      	lsls	r3, r3, #9
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800b38e:	4413      	add	r3, r2
 800b390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    }

                    // Display progress.
                    perc = 100 * 100 * byteCounter / binaryDescriptor.binaryInfo.size;
 800b394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b398:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b39c:	fb03 f202 	mul.w	r2, r3, r2
 800b3a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                    (void_t) sprintf(progressBuffer, "\rProgress: [ "TRACE_FG_YELLOW_START);
 800b3ac:	4981      	ldr	r1, [pc, #516]	@ (800b5b4 <bld_task+0x388>)
 800b3ae:	4882      	ldr	r0, [pc, #520]	@ (800b5b8 <bld_task+0x38c>)
 800b3b0:	f00d fee0 	bl	8019174 <siprintf>

                    for (int i = 1; i <= 25; i++)
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b3ba:	e029      	b.n	800b410 <bld_task+0x1e4>
                    {
                        if (i * 2 <= (perc / 100))
 800b3bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3c8:	4a7c      	ldr	r2, [pc, #496]	@ (800b5bc <bld_task+0x390>)
 800b3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ce:	095b      	lsrs	r3, r3, #5
 800b3d0:	4299      	cmp	r1, r3
 800b3d2:	d80c      	bhi.n	800b3ee <bld_task+0x1c2>
                        {
                            (void_t) strcat(progressBuffer, "=");
 800b3d4:	4878      	ldr	r0, [pc, #480]	@ (800b5b8 <bld_task+0x38c>)
 800b3d6:	f7f8 fe83 	bl	80040e0 <strlen>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	461a      	mov	r2, r3
 800b3de:	4b76      	ldr	r3, [pc, #472]	@ (800b5b8 <bld_task+0x38c>)
 800b3e0:	4413      	add	r3, r2
 800b3e2:	4977      	ldr	r1, [pc, #476]	@ (800b5c0 <bld_task+0x394>)
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	8013      	strh	r3, [r2, #0]
 800b3ec:	e00b      	b.n	800b406 <bld_task+0x1da>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 800b3ee:	4872      	ldr	r0, [pc, #456]	@ (800b5b8 <bld_task+0x38c>)
 800b3f0:	f7f8 fe76 	bl	80040e0 <strlen>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	4b6f      	ldr	r3, [pc, #444]	@ (800b5b8 <bld_task+0x38c>)
 800b3fa:	4413      	add	r3, r2
 800b3fc:	4971      	ldr	r1, [pc, #452]	@ (800b5c4 <bld_task+0x398>)
 800b3fe:	461a      	mov	r2, r3
 800b400:	460b      	mov	r3, r1
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	8013      	strh	r3, [r2, #0]
                    for (int i = 1; i <= 25; i++)
 800b406:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b40a:	3301      	adds	r3, #1
 800b40c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b410:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b414:	2b19      	cmp	r3, #25
 800b416:	ddd1      	ble.n	800b3bc <bld_task+0x190>
                        }
                    }

                    (void_t) sprintf(percentageBuffer, "%3u.%02u%% ", (u8_t)(perc / 100), (u8_t)(perc % 100));
 800b418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b41c:	4a67      	ldr	r2, [pc, #412]	@ (800b5bc <bld_task+0x390>)
 800b41e:	fba2 2303 	umull	r2, r3, r2, r3
 800b422:	095b      	lsrs	r3, r3, #5
 800b424:	b2db      	uxtb	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800b42c:	4b63      	ldr	r3, [pc, #396]	@ (800b5bc <bld_task+0x390>)
 800b42e:	fba3 1302 	umull	r1, r3, r3, r2
 800b432:	095b      	lsrs	r3, r3, #5
 800b434:	2164      	movs	r1, #100	@ 0x64
 800b436:	fb01 f303 	mul.w	r3, r1, r3
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	4602      	mov	r2, r0
 800b440:	4961      	ldr	r1, [pc, #388]	@ (800b5c8 <bld_task+0x39c>)
 800b442:	4862      	ldr	r0, [pc, #392]	@ (800b5cc <bld_task+0x3a0>)
 800b444:	f00d fe96 	bl	8019174 <siprintf>
                    (void_t) strcat(progressBuffer, percentageBuffer);
 800b448:	4960      	ldr	r1, [pc, #384]	@ (800b5cc <bld_task+0x3a0>)
 800b44a:	485b      	ldr	r0, [pc, #364]	@ (800b5b8 <bld_task+0x38c>)
 800b44c:	f00d ff1e 	bl	801928c <strcat>

                    for (int i = 26; i <= 50; i++)
 800b450:	231a      	movs	r3, #26
 800b452:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b456:	e029      	b.n	800b4ac <bld_task+0x280>
                    {
                        if (i * 2 <= (perc / 100))
 800b458:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4619      	mov	r1, r3
 800b460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b464:	4a55      	ldr	r2, [pc, #340]	@ (800b5bc <bld_task+0x390>)
 800b466:	fba2 2303 	umull	r2, r3, r2, r3
 800b46a:	095b      	lsrs	r3, r3, #5
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d80c      	bhi.n	800b48a <bld_task+0x25e>
                        {
                            (void_t) strcat(progressBuffer, "=");
 800b470:	4851      	ldr	r0, [pc, #324]	@ (800b5b8 <bld_task+0x38c>)
 800b472:	f7f8 fe35 	bl	80040e0 <strlen>
 800b476:	4603      	mov	r3, r0
 800b478:	461a      	mov	r2, r3
 800b47a:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b8 <bld_task+0x38c>)
 800b47c:	4413      	add	r3, r2
 800b47e:	4950      	ldr	r1, [pc, #320]	@ (800b5c0 <bld_task+0x394>)
 800b480:	461a      	mov	r2, r3
 800b482:	460b      	mov	r3, r1
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	8013      	strh	r3, [r2, #0]
 800b488:	e00b      	b.n	800b4a2 <bld_task+0x276>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 800b48a:	484b      	ldr	r0, [pc, #300]	@ (800b5b8 <bld_task+0x38c>)
 800b48c:	f7f8 fe28 	bl	80040e0 <strlen>
 800b490:	4603      	mov	r3, r0
 800b492:	461a      	mov	r2, r3
 800b494:	4b48      	ldr	r3, [pc, #288]	@ (800b5b8 <bld_task+0x38c>)
 800b496:	4413      	add	r3, r2
 800b498:	494a      	ldr	r1, [pc, #296]	@ (800b5c4 <bld_task+0x398>)
 800b49a:	461a      	mov	r2, r3
 800b49c:	460b      	mov	r3, r1
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	8013      	strh	r3, [r2, #0]
                    for (int i = 26; i <= 50; i++)
 800b4a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b4b0:	2b32      	cmp	r3, #50	@ 0x32
 800b4b2:	ddd1      	ble.n	800b458 <bld_task+0x22c>
                        }
                    }

                    (void_t) strcat(progressBuffer, TRACE_FORMAT_RESET" ]");
 800b4b4:	4840      	ldr	r0, [pc, #256]	@ (800b5b8 <bld_task+0x38c>)
 800b4b6:	f7f8 fe13 	bl	80040e0 <strlen>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4b3e      	ldr	r3, [pc, #248]	@ (800b5b8 <bld_task+0x38c>)
 800b4c0:	4413      	add	r3, r2
 800b4c2:	4a43      	ldr	r2, [pc, #268]	@ (800b5d0 <bld_task+0x3a4>)
 800b4c4:	6810      	ldr	r0, [r2, #0]
 800b4c6:	6018      	str	r0, [r3, #0]
 800b4c8:	8891      	ldrh	r1, [r2, #4]
 800b4ca:	7992      	ldrb	r2, [r2, #6]
 800b4cc:	8099      	strh	r1, [r3, #4]
 800b4ce:	719a      	strb	r2, [r3, #6]
                    (void_t) gos_traceTrace(GOS_FALSE, progressBuffer);
 800b4d0:	4939      	ldr	r1, [pc, #228]	@ (800b5b8 <bld_task+0x38c>)
 800b4d2:	2049      	movs	r0, #73	@ 0x49
 800b4d4:	f00c fc30 	bl	8017d38 <gos_traceTrace>
                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 800b4d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b4dc:	3301      	adds	r3, #1
 800b4de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b4e2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b4e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	f4ff af13 	bcc.w	800b316 <bld_task+0xea>
                }

                (void_t) drv_flashLock();
 800b4f0:	f001 fbc4 	bl	800cc7c <drv_flashLock>

                (void_t) gos_traceTrace(GOS_FALSE, "\r\nInstall finished.\r\n");
 800b4f4:	4937      	ldr	r1, [pc, #220]	@ (800b5d4 <bld_task+0x3a8>)
 800b4f6:	2049      	movs	r0, #73	@ 0x49
 800b4f8:	f00c fc1e 	bl	8017d38 <gos_traceTrace>

                // Check newly installed application integrity.
                bldState = BLD_STATE_APP_CHECK;
 800b4fc:	4b29      	ldr	r3, [pc, #164]	@ (800b5a4 <bld_task+0x378>)
 800b4fe:	2203      	movs	r2, #3
 800b500:	701a      	strb	r2, [r3, #0]

                break;
 800b502:	e0f4      	b.n	800b6ee <bld_task+0x4c2>
            }
            case BLD_STATE_CONNECT_WAIT:
            {
                // In this state, bootloader is waiting for a connection
                // request.
                (void_t) gos_traceTrace(GOS_TRUE, "Waiting for bootloader connection");
 800b504:	4934      	ldr	r1, [pc, #208]	@ (800b5d8 <bld_task+0x3ac>)
 800b506:	2036      	movs	r0, #54	@ 0x36
 800b508:	f00c fc16 	bl	8017d38 <gos_traceTrace>

                connectTmo = GOS_TRUE;
 800b50c:	2336      	movs	r3, #54	@ 0x36
 800b50e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
                startTick  = gos_kernelGetSysTicks();
 800b512:	f007 f8b5 	bl	8012680 <gos_kernelGetSysTicks>
 800b516:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.connectionTimeout)
 800b51a:	e010      	b.n	800b53e <bld_task+0x312>
                {
                    (void_t) gos_traceTrace(GOS_FALSE, ".");
 800b51c:	492f      	ldr	r1, [pc, #188]	@ (800b5dc <bld_task+0x3b0>)
 800b51e:	2049      	movs	r0, #73	@ 0x49
 800b520:	f00c fc0a 	bl	8017d38 <gos_traceTrace>

                    if (gos_messageRx(msgIds, &gosMsg, 250u) == GOS_SUCCESS)
 800b524:	1d39      	adds	r1, r7, #4
 800b526:	463b      	mov	r3, r7
 800b528:	22fa      	movs	r2, #250	@ 0xfa
 800b52a:	4618      	mov	r0, r3
 800b52c:	f00a fbae 	bl	8015c8c <gos_messageRx>
 800b530:	4603      	mov	r3, r0
 800b532:	2b55      	cmp	r3, #85	@ 0x55
 800b534:	d103      	bne.n	800b53e <bld_task+0x312>
                    {
                        // TODO: if connected
                        connectTmo = GOS_FALSE;
 800b536:	2349      	movs	r3, #73	@ 0x49
 800b538:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
                        break;
 800b53c:	e009      	b.n	800b552 <bld_task+0x326>
                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.connectionTimeout)
 800b53e:	f007 f89f 	bl	8012680 <gos_kernelGetSysTicks>
 800b542:	4602      	mov	r2, r0
 800b544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b548:	1ad2      	subs	r2, r2, r3
 800b54a:	4b17      	ldr	r3, [pc, #92]	@ (800b5a8 <bld_task+0x37c>)
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d9e4      	bls.n	800b51c <bld_task+0x2f0>
                    {
                        // RX timeout.
                    }
                }

                (void_t) gos_traceTrace(GOS_FALSE, "\r\n");
 800b552:	4923      	ldr	r1, [pc, #140]	@ (800b5e0 <bld_task+0x3b4>)
 800b554:	2049      	movs	r0, #73	@ 0x49
 800b556:	f00c fbef 	bl	8017d38 <gos_traceTrace>

                if (connectTmo == GOS_TRUE)
 800b55a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800b55e:	2b36      	cmp	r3, #54	@ 0x36
 800b560:	d107      	bne.n	800b572 <bld_task+0x346>
                {
                    (void_t) gos_traceTrace(GOS_TRUE, "Connection timed out.\r\n");
 800b562:	4920      	ldr	r1, [pc, #128]	@ (800b5e4 <bld_task+0x3b8>)
 800b564:	2036      	movs	r0, #54	@ 0x36
 800b566:	f00c fbe7 	bl	8017d38 <gos_traceTrace>
                    bldState = BLD_STATE_APP_CHECK;
 800b56a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a4 <bld_task+0x378>)
 800b56c:	2203      	movs	r2, #3
 800b56e:	701a      	strb	r2, [r3, #0]
                {
                    (void_t) gos_traceTrace(GOS_TRUE, "Connection successful.\r\n");
                    bldState = BLD_STATE_WAIT;
                }

                break;
 800b570:	e0bd      	b.n	800b6ee <bld_task+0x4c2>
                    (void_t) gos_traceTrace(GOS_TRUE, "Connection successful.\r\n");
 800b572:	491d      	ldr	r1, [pc, #116]	@ (800b5e8 <bld_task+0x3bc>)
 800b574:	2036      	movs	r0, #54	@ 0x36
 800b576:	f00c fbdf 	bl	8017d38 <gos_traceTrace>
                    bldState = BLD_STATE_WAIT;
 800b57a:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a4 <bld_task+0x378>)
 800b57c:	2202      	movs	r2, #2
 800b57e:	701a      	strb	r2, [r3, #0]
                break;
 800b580:	e0b5      	b.n	800b6ee <bld_task+0x4c2>
            }
            case BLD_STATE_WAIT:
            {
                // In this state, bootloader is waiting for a software install
                // request or other requests.
                (void_t) gos_traceTrace(GOS_TRUE, "Waiting for requests");
 800b582:	491a      	ldr	r1, [pc, #104]	@ (800b5ec <bld_task+0x3c0>)
 800b584:	2036      	movs	r0, #54	@ 0x36
 800b586:	f00c fbd7 	bl	8017d38 <gos_traceTrace>

                connectTmo = GOS_TRUE;
 800b58a:	2336      	movs	r3, #54	@ 0x36
 800b58c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
                startTick = gos_kernelGetSysTicks();
 800b590:	f007 f876 	bl	8012680 <gos_kernelGetSysTicks>
 800b594:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 800b598:	e04b      	b.n	800b632 <bld_task+0x406>
 800b59a:	bf00      	nop
 800b59c:	20001fe4 	.word	0x20001fe4
 800b5a0:	20002278 	.word	0x20002278
 800b5a4:	20002284 	.word	0x20002284
 800b5a8:	20001fd0 	.word	0x20001fd0
 800b5ac:	0801ffff 	.word	0x0801ffff
 800b5b0:	20002288 	.word	0x20002288
 800b5b4:	0801b5d8 	.word	0x0801b5d8
 800b5b8:	20002488 	.word	0x20002488
 800b5bc:	51eb851f 	.word	0x51eb851f
 800b5c0:	0801b5ec 	.word	0x0801b5ec
 800b5c4:	0801b5f0 	.word	0x0801b5f0
 800b5c8:	0801b5f4 	.word	0x0801b5f4
 800b5cc:	200024d8 	.word	0x200024d8
 800b5d0:	0801b600 	.word	0x0801b600
 800b5d4:	0801b608 	.word	0x0801b608
 800b5d8:	0801b620 	.word	0x0801b620
 800b5dc:	0801b644 	.word	0x0801b644
 800b5e0:	0801b648 	.word	0x0801b648
 800b5e4:	0801b64c 	.word	0x0801b64c
 800b5e8:	0801b664 	.word	0x0801b664
 800b5ec:	0801b680 	.word	0x0801b680
                {
                    (void_t) gos_traceTrace(GOS_FALSE, ".");
 800b5f0:	4941      	ldr	r1, [pc, #260]	@ (800b6f8 <bld_task+0x4cc>)
 800b5f2:	2049      	movs	r0, #73	@ 0x49
 800b5f4:	f00c fba0 	bl	8017d38 <gos_traceTrace>

                    if (gos_messageRx(msgIds, &gosMsg, 1000u) == GOS_SUCCESS)
 800b5f8:	1d39      	adds	r1, r7, #4
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b600:	4618      	mov	r0, r3
 800b602:	f00a fb43 	bl	8015c8c <gos_messageRx>
 800b606:	4603      	mov	r3, r0
 800b608:	2b55      	cmp	r3, #85	@ 0x55
 800b60a:	d104      	bne.n	800b616 <bld_task+0x3ea>
                    {
                        // TODO: if connected
                        //connectTmo = GOS_FALSE;

                        // Update start tick to restart timeout.
                        startTick = gos_kernelGetSysTicks();
 800b60c:	f007 f838 	bl	8012680 <gos_kernelGetSysTicks>
 800b610:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                        break;
 800b614:	e017      	b.n	800b646 <bld_task+0x41a>
                    }
                    else
                    {
                        // RX timeout.
                        // Check install request.
                        (void_t) svl_pdhGetBldCfg(&bldConfig);
 800b616:	4839      	ldr	r0, [pc, #228]	@ (800b6fc <bld_task+0x4d0>)
 800b618:	f005 f992 	bl	8010940 <svl_pdhGetBldCfg>

                        if (bldConfig.installRequested == GOS_TRUE)
 800b61c:	4b37      	ldr	r3, [pc, #220]	@ (800b6fc <bld_task+0x4d0>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b36      	cmp	r3, #54	@ 0x36
 800b622:	d106      	bne.n	800b632 <bld_task+0x406>
                        {
                            connectTmo = GOS_FALSE;
 800b624:	2349      	movs	r3, #73	@ 0x49
 800b626:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
                            bldState   = BLD_STATE_INSTALL;
 800b62a:	4b35      	ldr	r3, [pc, #212]	@ (800b700 <bld_task+0x4d4>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	701a      	strb	r2, [r3, #0]
                            break;
 800b630:	e009      	b.n	800b646 <bld_task+0x41a>
                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 800b632:	f007 f825 	bl	8012680 <gos_kernelGetSysTicks>
 800b636:	4602      	mov	r2, r0
 800b638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b63c:	1ad2      	subs	r2, r2, r3
 800b63e:	4b2f      	ldr	r3, [pc, #188]	@ (800b6fc <bld_task+0x4d0>)
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	429a      	cmp	r2, r3
 800b644:	d9d4      	bls.n	800b5f0 <bld_task+0x3c4>
                        	// Nothing to do.
                        }
                    }
                }

                (void_t) gos_traceTrace(GOS_FALSE, "\r\n");
 800b646:	492f      	ldr	r1, [pc, #188]	@ (800b704 <bld_task+0x4d8>)
 800b648:	2049      	movs	r0, #73	@ 0x49
 800b64a:	f00c fb75 	bl	8017d38 <gos_traceTrace>

                if (connectTmo == GOS_TRUE)
 800b64e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800b652:	2b36      	cmp	r3, #54	@ 0x36
 800b654:	d14a      	bne.n	800b6ec <bld_task+0x4c0>
                {
                    (void_t) gos_traceTrace(GOS_TRUE, "Request timed out.\r\n");
 800b656:	492c      	ldr	r1, [pc, #176]	@ (800b708 <bld_task+0x4dc>)
 800b658:	2036      	movs	r0, #54	@ 0x36
 800b65a:	f00c fb6d 	bl	8017d38 <gos_traceTrace>
                    bldState = BLD_STATE_APP_CHECK;
 800b65e:	4b28      	ldr	r3, [pc, #160]	@ (800b700 <bld_task+0x4d4>)
 800b660:	2203      	movs	r2, #3
 800b662:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Request served.
                }

                break;
 800b664:	e042      	b.n	800b6ec <bld_task+0x4c0>
            }
            case BLD_STATE_APP_CHECK:
            {
                if (bld_checkApplication(&binaryDescriptor.binaryInfo, GOS_TRUE) == GOS_SUCCESS)
 800b666:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800b66a:	3324      	adds	r3, #36	@ 0x24
 800b66c:	2136      	movs	r1, #54	@ 0x36
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 f852 	bl	800b718 <bld_checkApplication>
 800b674:	4603      	mov	r3, r0
 800b676:	2b55      	cmp	r3, #85	@ 0x55
 800b678:	d124      	bne.n	800b6c4 <bld_task+0x498>
                {
                    // Application OK.
                    bldConfig.installRequested = GOS_FALSE;
 800b67a:	4b20      	ldr	r3, [pc, #128]	@ (800b6fc <bld_task+0x4d0>)
 800b67c:	2249      	movs	r2, #73	@ 0x49
 800b67e:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 800b680:	4b1e      	ldr	r3, [pc, #120]	@ (800b6fc <bld_task+0x4d0>)
 800b682:	2200      	movs	r2, #0
 800b684:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_FALSE;
 800b686:	4b1d      	ldr	r3, [pc, #116]	@ (800b6fc <bld_task+0x4d0>)
 800b688:	2249      	movs	r2, #73	@ 0x49
 800b68a:	711a      	strb	r2, [r3, #4]
                    bldConfig.startupCounter   = 1u;
 800b68c:	4b1b      	ldr	r3, [pc, #108]	@ (800b6fc <bld_task+0x4d0>)
 800b68e:	2201      	movs	r2, #1
 800b690:	71da      	strb	r2, [r3, #7]

                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 800b692:	481a      	ldr	r0, [pc, #104]	@ (800b6fc <bld_task+0x4d0>)
 800b694:	f005 fa34 	bl	8010b00 <svl_pdhSetBldCfg>

                    (void_t) memcpy((void_t*)&currentSwInfo.appBinaryInfo, (void_t*)&binaryDescriptor.binaryInfo, sizeof(currentSwInfo.appBinaryInfo));
 800b698:	4b1c      	ldr	r3, [pc, #112]	@ (800b70c <bld_task+0x4e0>)
 800b69a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800b69e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800b6a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b6a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                    (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 800b6a8:	4818      	ldr	r0, [pc, #96]	@ (800b70c <bld_task+0x4e0>)
 800b6aa:	f005 f9b9 	bl	8010a20 <svl_pdhSetSwInfo>

                    (void_t) gos_traceTrace(GOS_TRUE, "Exiting update mode...\r\n");
 800b6ae:	4918      	ldr	r1, [pc, #96]	@ (800b710 <bld_task+0x4e4>)
 800b6b0:	2036      	movs	r0, #54	@ 0x36
 800b6b2:	f00c fb41 	bl	8017d38 <gos_traceTrace>
                    (void_t) gos_taskSleep(300);
 800b6b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b6ba:	f008 f997 	bl	80139ec <gos_taskSleep>
                    gos_kernelReset();
 800b6be:	f006 fffd 	bl	80126bc <gos_kernelReset>

                    bldState = BLD_STATE_WAIT;

                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
                }
                break;
 800b6c2:	e014      	b.n	800b6ee <bld_task+0x4c2>
                    bldConfig.installRequested = GOS_FALSE;
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b6fc <bld_task+0x4d0>)
 800b6c6:	2249      	movs	r2, #73	@ 0x49
 800b6c8:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b6fc <bld_task+0x4d0>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_TRUE;
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6fc <bld_task+0x4d0>)
 800b6d2:	2236      	movs	r2, #54	@ 0x36
 800b6d4:	711a      	strb	r2, [r3, #4]
                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 800b6d6:	4809      	ldr	r0, [pc, #36]	@ (800b6fc <bld_task+0x4d0>)
 800b6d8:	f005 fa12 	bl	8010b00 <svl_pdhSetBldCfg>
                    bldState = BLD_STATE_WAIT;
 800b6dc:	4b08      	ldr	r3, [pc, #32]	@ (800b700 <bld_task+0x4d4>)
 800b6de:	2202      	movs	r2, #2
 800b6e0:	701a      	strb	r2, [r3, #0]
                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
 800b6e2:	490c      	ldr	r1, [pc, #48]	@ (800b714 <bld_task+0x4e8>)
 800b6e4:	2036      	movs	r0, #54	@ 0x36
 800b6e6:	f00c fb27 	bl	8017d38 <gos_traceTrace>
                break;
 800b6ea:	e000      	b.n	800b6ee <bld_task+0x4c2>
                break;
 800b6ec:	bf00      	nop
            }
        }
        (void_t) gos_taskSleep(20);
 800b6ee:	2014      	movs	r0, #20
 800b6f0:	f008 f97c 	bl	80139ec <gos_taskSleep>
        switch (bldState)
 800b6f4:	e5d0      	b.n	800b298 <bld_task+0x6c>
 800b6f6:	bf00      	nop
 800b6f8:	0801b644 	.word	0x0801b644
 800b6fc:	20001fd0 	.word	0x20001fd0
 800b700:	20002284 	.word	0x20002284
 800b704:	0801b648 	.word	0x0801b648
 800b708:	0801b698 	.word	0x0801b698
 800b70c:	20001fe4 	.word	0x20001fe4
 800b710:	0801b6b0 	.word	0x0801b6b0
 800b714:	0801b6cc 	.word	0x0801b6cc

0800b718 <bld_checkApplication>:

/*
 * Function: bld_checkApplication
 */
gos_result_t bld_checkApplication (svl_pdhBinaryInfo_t* pAppData, bool_t bootMode)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
    /*
     * Local variables.
     */
    gos_result_t appCheckResult = GOS_ERROR;
 800b724:	23ae      	movs	r3, #174	@ 0xae
 800b726:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check application size.
    if (pAppData->size > 0u && pAppData->size <= BLD_APP_ROM_SIZE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d020      	beq.n	800b772 <bld_checkApplication+0x5a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b738:	d81b      	bhi.n	800b772 <bld_checkApplication+0x5a>
    {
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6859      	ldr	r1, [r3, #4]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	2300      	movs	r3, #0
 800b74a:	f000 fd0d 	bl	800c168 <drv_crcCheckCrc32>
 800b74e:	4603      	mov	r3, r0
 800b750:	2bca      	cmp	r3, #202	@ 0xca
 800b752:	d102      	bne.n	800b75a <bld_checkApplication+0x42>
        {
            appCheckResult = GOS_SUCCESS;
 800b754:	2355      	movs	r3, #85	@ 0x55
 800b756:	73fb      	strb	r3, [r7, #15]
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800b758:	e016      	b.n	800b788 <bld_checkApplication+0x70>
        }
        else
        {
            // Application check fail.
            if (bootMode == GOS_TRUE)
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	2b36      	cmp	r3, #54	@ 0x36
 800b75e:	d104      	bne.n	800b76a <bld_checkApplication+0x52>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "Application CRC error.\r\n");
 800b760:	490c      	ldr	r1, [pc, #48]	@ (800b794 <bld_checkApplication+0x7c>)
 800b762:	2036      	movs	r0, #54	@ 0x36
 800b764:	f00c fae8 	bl	8017d38 <gos_traceTrace>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800b768:	e00e      	b.n	800b788 <bld_checkApplication+0x70>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Application CRC error.\r\n");
 800b76a:	480a      	ldr	r0, [pc, #40]	@ (800b794 <bld_checkApplication+0x7c>)
 800b76c:	f00c fd2c 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800b770:	e00a      	b.n	800b788 <bld_checkApplication+0x70>
            }
        }
    }
    else
    {
        if (bootMode == GOS_TRUE)
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	2b36      	cmp	r3, #54	@ 0x36
 800b776:	d104      	bne.n	800b782 <bld_checkApplication+0x6a>
        {
            (void_t) gos_traceTrace(GOS_TRUE, "Application size error.\r\n");
 800b778:	4907      	ldr	r1, [pc, #28]	@ (800b798 <bld_checkApplication+0x80>)
 800b77a:	2036      	movs	r0, #54	@ 0x36
 800b77c:	f00c fadc 	bl	8017d38 <gos_traceTrace>
 800b780:	e002      	b.n	800b788 <bld_checkApplication+0x70>
        }
        else
        {
            (void_t) gos_traceTraceFormattedUnsafe("Application size error.\r\n");
 800b782:	4805      	ldr	r0, [pc, #20]	@ (800b798 <bld_checkApplication+0x80>)
 800b784:	f00c fd20 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
        }
    }

    return appCheckResult;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	0801b6e8 	.word	0x0801b6e8
 800b798:	0801b704 	.word	0x0801b704

0800b79c <bld_jumpToApplication>:

/*
 * Function: bld_jumpToApplication
 */
gos_result_t bld_jumpToApplication (void_t)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t jumpResult = GOS_ERROR;
 800b7a2:	23ae      	movs	r3, #174	@ 0xae
 800b7a4:	717b      	strb	r3, [r7, #5]
    u16_t        irqIdx     = 0u;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    if (currentSwInfo.appBinaryInfo.startAddress % 0x200 == 0u)
 800b7aa:	4b21      	ldr	r3, [pc, #132]	@ (800b830 <bld_jumpToApplication+0x94>)
 800b7ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d135      	bne.n	800b824 <bld_jumpToApplication+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b7b8:	b672      	cpsid	i
}
 800b7ba:	bf00      	nop
    {
        /* Disable all interrupts */
        __disable_irq();

        /* Disable Systick timer */
        SysTick->CTRL = 0;
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b834 <bld_jumpToApplication+0x98>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]

        /* Set the clock to the default state */
        HAL_RCC_DeInit();
 800b7c2:	f7fb fe1b 	bl	80073fc <HAL_RCC_DeInit>
        HAL_DeInit();
 800b7c6:	f7fa f85d 	bl	8005884 <HAL_DeInit>

        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	80fb      	strh	r3, [r7, #6]
 800b7ce:	e010      	b.n	800b7f2 <bld_jumpToApplication+0x56>
        {
            NVIC->ICER[irqIdx] = 0xFFFFFFFF;
 800b7d0:	4a19      	ldr	r2, [pc, #100]	@ (800b838 <bld_jumpToApplication+0x9c>)
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	3320      	adds	r3, #32
 800b7d6:	f04f 31ff 	mov.w	r1, #4294967295
 800b7da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[irqIdx] = 0xFFFFFFFF;
 800b7de:	4a16      	ldr	r2, [pc, #88]	@ (800b838 <bld_jumpToApplication+0x9c>)
 800b7e0:	88fb      	ldrh	r3, [r7, #6]
 800b7e2:	3360      	adds	r3, #96	@ 0x60
 800b7e4:	f04f 31ff 	mov.w	r1, #4294967295
 800b7e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 800b7ec:	88fb      	ldrh	r3, [r7, #6]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	80fb      	strh	r3, [r7, #6]
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	2b07      	cmp	r3, #7
 800b7f6:	d9eb      	bls.n	800b7d0 <bld_jumpToApplication+0x34>
        }

        SYSCFG->MEMRMP = 0x01;
 800b7f8:	4b10      	ldr	r3, [pc, #64]	@ (800b83c <bld_jumpToApplication+0xa0>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]

        SCB->VTOR = currentSwInfo.appBinaryInfo.startAddress;
 800b7fe:	4a10      	ldr	r2, [pc, #64]	@ (800b840 <bld_jumpToApplication+0xa4>)
 800b800:	4b0b      	ldr	r3, [pc, #44]	@ (800b830 <bld_jumpToApplication+0x94>)
 800b802:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b806:	6093      	str	r3, [r2, #8]

        // Set the MSP
        __set_MSP(((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->initSp);
 800b808:	4b09      	ldr	r3, [pc, #36]	@ (800b830 <bld_jumpToApplication+0x94>)
 800b80a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	f383 8808 	msr	MSP, r3
}
 800b818:	bf00      	nop

        // Jump to app firmware
        ((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->resetHandler();
 800b81a:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <bld_jumpToApplication+0x94>)
 800b81c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	4798      	blx	r3
    else
    {
        // Address is incorrect.
    }

    return jumpResult;
 800b824:	797b      	ldrb	r3, [r7, #5]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20001fe4 	.word	0x20001fe4
 800b834:	e000e010 	.word	0xe000e010
 800b838:	e000e100 	.word	0xe000e100
 800b83c:	40013800 	.word	0x40013800
 800b840:	e000ed00 	.word	0xe000ed00

0800b844 <bld_getBootloaderSize>:

/*
 * Function: bld_getBootloaderSize
 */
gos_result_t bld_getBootloaderSize (u32_t* pSize)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t sizeGetResult = GOS_SUCCESS;
 800b84c:	2355      	movs	r3, #85	@ 0x55
 800b84e:	73fb      	strb	r3, [r7, #15]
    u32_t        address       = BLD_ROM_END_ADDRESS;
 800b850:	4b13      	ldr	r3, [pc, #76]	@ (800b8a0 <bld_getBootloaderSize+0x5c>)
 800b852:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pSize != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d017      	beq.n	800b88a <bld_getBootloaderSize+0x46>
    {
        *pSize = (BLD_ROM_END_ADDRESS - BLD_ROM_START_ADDRESS);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a11      	ldr	r2, [pc, #68]	@ (800b8a4 <bld_getBootloaderSize+0x60>)
 800b85e:	601a      	str	r2, [r3, #0]

        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 800b860:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a0 <bld_getBootloaderSize+0x5c>)
 800b862:	60bb      	str	r3, [r7, #8]
 800b864:	e00c      	b.n	800b880 <bld_getBootloaderSize+0x3c>
        {
            if ((u8_t)(*((u32_t*)address)) != 0xFFu)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	2bff      	cmp	r3, #255	@ 0xff
 800b86e:	d10f      	bne.n	800b890 <bld_getBootloaderSize+0x4c>
            {
                break;
            }
            else
            {
                (*pSize)--;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	1e5a      	subs	r2, r3, #1
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	601a      	str	r2, [r3, #0]
        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	60bb      	str	r3, [r7, #8]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4a09      	ldr	r2, [pc, #36]	@ (800b8a8 <bld_getBootloaderSize+0x64>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d2ee      	bcs.n	800b866 <bld_getBootloaderSize+0x22>
 800b888:	e003      	b.n	800b892 <bld_getBootloaderSize+0x4e>
        }
    }
    else
    {
        // NULL pointer error.
        sizeGetResult = GOS_ERROR;
 800b88a:	23ae      	movs	r3, #174	@ 0xae
 800b88c:	73fb      	strb	r3, [r7, #15]
 800b88e:	e000      	b.n	800b892 <bld_getBootloaderSize+0x4e>
                break;
 800b890:	bf00      	nop
    }

    return sizeGetResult;
 800b892:	7bfb      	ldrb	r3, [r7, #15]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	0801ffff 	.word	0x0801ffff
 800b8a4:	0001bfff 	.word	0x0001bfff
 800b8a8:	08004000 	.word	0x08004000

0800b8ac <bld_getBootloaderCrc>:

/*
 * Function: bld_getBootloaderCrc
 */
gos_result_t bld_getBootloaderCrc (u32_t* pCrc)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 800b8b4:	23ae      	movs	r3, #174	@ 0xae
 800b8b6:	73fb      	strb	r3, [r7, #15]
    u32_t        bldSize      = 0u;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pCrc != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d011      	beq.n	800b8e6 <bld_getBootloaderCrc+0x3a>
    {
        crcGetResult = bld_getBootloaderSize(&bldSize);
 800b8c2:	f107 0308 	add.w	r3, r7, #8
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff ffbc 	bl	800b844 <bld_getBootloaderSize>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
        crcGetResult &= drv_crcGetCrc32((u8_t*)BLD_ROM_START_ADDRESS, bldSize, pCrc);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4809      	ldr	r0, [pc, #36]	@ (800b8fc <bld_getBootloaderCrc+0x50>)
 800b8d8:	f000 fbfa 	bl	800c0d0 <drv_crcGetCrc32>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer error.
    }

    if (crcGetResult != GOS_SUCCESS)
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	2b55      	cmp	r3, #85	@ 0x55
 800b8ea:	d001      	beq.n	800b8f0 <bld_getBootloaderCrc+0x44>
    {
        crcGetResult = GOS_ERROR;
 800b8ec:	23ae      	movs	r3, #174	@ 0xae
 800b8ee:	73fb      	strb	r3, [r7, #15]
    else
    {
        // OK.
    }

    return crcGetResult;
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	08004000 	.word	0x08004000

0800b900 <bld_initData>:

/*
 * Function: bld_initData
 */
gos_result_t bld_initData (svl_pdhSwVerInfo_t* pBldSwVer)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b0b0      	sub	sp, #192	@ 0xc0
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       initDataResult     = GOS_SUCCESS;
 800b908:	2355      	movs	r3, #85	@ 0x55
 800b90a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    u32_t              currentBldSwVerCrc = 0u;
 800b90e:	2300      	movs	r3, #0
 800b910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    u32_t              desiredBldSwVerCrc = 0u;
 800b914:	2300      	movs	r3, #0
 800b916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	u32_t              libVerCrc          = 0u;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	u32_t              testLibVerCrc      = 0u;
 800b920:	2300      	movs	r3, #0
 800b922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	svl_pdhSwVerInfo_t libVerInfo         = {0};
 800b926:	f107 030c 	add.w	r3, r7, #12
 800b92a:	22a0      	movs	r2, #160	@ 0xa0
 800b92c:	2100      	movs	r1, #0
 800b92e:	4618      	mov	r0, r3
 800b930:	f00d fca4 	bl	801927c <memset>

    /*
     * Function code.
     */
    if (pBldSwVer != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 80a1 	beq.w	800ba7e <bld_initData+0x17e>
    {
        // Get current software info.
        (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 800b93c:	4854      	ldr	r0, [pc, #336]	@ (800ba90 <bld_initData+0x190>)
 800b93e:	f004 ff8f 	bl	8010860 <svl_pdhGetSwInfo>
    	(void_t) svl_pdhGetLibVersion(&libVerInfo);
 800b942:	f107 030c 	add.w	r3, r7, #12
 800b946:	4618      	mov	r0, r3
 800b948:	f004 ff02 	bl	8010750 <svl_pdhGetLibVersion>

        // Calculate CRC of current and desired bootloader software info.
        initDataResult &= drv_crcGetCrc32((u8_t*)&currentSwInfo.bldSwVerInfo, sizeof(currentSwInfo.bldSwVerInfo), &currentBldSwVerCrc);
 800b94c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800b950:	461a      	mov	r2, r3
 800b952:	21a0      	movs	r1, #160	@ 0xa0
 800b954:	484f      	ldr	r0, [pc, #316]	@ (800ba94 <bld_initData+0x194>)
 800b956:	f000 fbbb 	bl	800c0d0 <drv_crcGetCrc32>
 800b95a:	4603      	mov	r3, r0
 800b95c:	461a      	mov	r2, r3
 800b95e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b962:	4013      	ands	r3, r2
 800b964:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        initDataResult &= drv_crcGetCrc32((u8_t*)pBldSwVer, sizeof(*pBldSwVer), &desiredBldSwVerCrc);
 800b968:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800b96c:	461a      	mov	r2, r3
 800b96e:	21a0      	movs	r1, #160	@ 0xa0
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fbad 	bl	800c0d0 <drv_crcGetCrc32>
 800b976:	4603      	mov	r3, r0
 800b978:	461a      	mov	r2, r3
 800b97a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b97e:	4013      	ands	r3, r2
 800b980:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

        initDataResult &= drv_crcGetCrc32((u8_t*)&libVerInfo, sizeof(libVerInfo), &libVerCrc);
 800b984:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800b988:	f107 030c 	add.w	r3, r7, #12
 800b98c:	21a0      	movs	r1, #160	@ 0xa0
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fb9e 	bl	800c0d0 <drv_crcGetCrc32>
 800b994:	4603      	mov	r3, r0
 800b996:	461a      	mov	r2, r3
 800b998:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b99c:	4013      	ands	r3, r2
 800b99e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        initDataResult &= drv_crcGetCrc32((u8_t*)&(currentSwInfo.bldLibVerInfo), sizeof(currentSwInfo.bldLibVerInfo), &testLibVerCrc);
 800b9a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	21a0      	movs	r1, #160	@ 0xa0
 800b9aa:	4839      	ldr	r0, [pc, #228]	@ (800ba90 <bld_initData+0x190>)
 800b9ac:	f000 fb90 	bl	800c0d0 <drv_crcGetCrc32>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

        // Check if reset is needed.
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 800b9be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b9c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d10f      	bne.n	800b9ea <bld_initData+0xea>
 800b9ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b9ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d109      	bne.n	800b9ea <bld_initData+0xea>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 800b9d6:	4b2e      	ldr	r3, [pc, #184]	@ (800ba90 <bld_initData+0x190>)
 800b9d8:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d104      	bne.n	800b9ea <bld_initData+0xea>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 800b9e0:	4b2b      	ldr	r3, [pc, #172]	@ (800ba90 <bld_initData+0x190>)
 800b9e2:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d04c      	beq.n	800ba84 <bld_initData+0x184>
        {
            // Copy desired data.
            (void_t) memcpy((void_t*)&currentSwInfo.bldSwVerInfo, (void_t*)pBldSwVer, sizeof(svl_pdhSwVerInfo_t));
 800b9ea:	4b29      	ldr	r3, [pc, #164]	@ (800ba90 <bld_initData+0x190>)
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	33a0      	adds	r3, #160	@ 0xa0
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	22a0      	movs	r2, #160	@ 0xa0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f00d fcd8 	bl	80193aa <memcpy>

            // Fill out OS info.
            currentSwInfo.bldOsInfo.major = GOS_VERSION_MAJOR;
 800b9fa:	4b25      	ldr	r3, [pc, #148]	@ (800ba90 <bld_initData+0x190>)
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
            currentSwInfo.bldOsInfo.minor = GOS_VERSION_MINOR;
 800ba02:	4b23      	ldr	r3, [pc, #140]	@ (800ba90 <bld_initData+0x190>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

            // Fill out binary data.
            currentSwInfo.bldBinaryInfo.startAddress = BLD_ROM_START_ADDRESS;
 800ba0a:	4b21      	ldr	r3, [pc, #132]	@ (800ba90 <bld_initData+0x190>)
 800ba0c:	4a22      	ldr	r2, [pc, #136]	@ (800ba98 <bld_initData+0x198>)
 800ba0e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
            initDataResult &= bld_getBootloaderSize(&currentSwInfo.bldBinaryInfo.size);
 800ba12:	4822      	ldr	r0, [pc, #136]	@ (800ba9c <bld_initData+0x19c>)
 800ba14:	f7ff ff16 	bl	800b844 <bld_getBootloaderSize>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800ba20:	4013      	ands	r3, r2
 800ba22:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
            initDataResult &= bld_getBootloaderCrc(&currentSwInfo.bldBinaryInfo.crc);
 800ba26:	481e      	ldr	r0, [pc, #120]	@ (800baa0 <bld_initData+0x1a0>)
 800ba28:	f7ff ff40 	bl	800b8ac <bld_getBootloaderCrc>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800ba34:	4013      	ands	r3, r2
 800ba36:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

            // Fill out library info.
            initDataResult &= svl_pdhGetLibVersion(&currentSwInfo.bldLibVerInfo);
 800ba3a:	4815      	ldr	r0, [pc, #84]	@ (800ba90 <bld_initData+0x190>)
 800ba3c:	f004 fe88 	bl	8010750 <svl_pdhGetLibVersion>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800ba48:	4013      	ands	r3, r2
 800ba4a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

            (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 800ba4e:	4810      	ldr	r0, [pc, #64]	@ (800ba90 <bld_initData+0x190>)
 800ba50:	f004 ffe6 	bl	8010a20 <svl_pdhSetSwInfo>

            if (initDataResult == GOS_SUCCESS)
 800ba54:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800ba58:	2b55      	cmp	r3, #85	@ 0x55
 800ba5a:	d109      	bne.n	800ba70 <bld_initData+0x170>
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data updated. Restarting device...\r\n");
 800ba5c:	4811      	ldr	r0, [pc, #68]	@ (800baa4 <bld_initData+0x1a4>)
 800ba5e:	f00c fbb3 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
                (void_t) gos_taskSleep(1000);
 800ba62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ba66:	f007 ffc1 	bl	80139ec <gos_taskSleep>
                gos_kernelReset();
 800ba6a:	f006 fe27 	bl	80126bc <gos_kernelReset>
 800ba6e:	e009      	b.n	800ba84 <bld_initData+0x184>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data initialization failed.\r\n");
 800ba70:	480d      	ldr	r0, [pc, #52]	@ (800baa8 <bld_initData+0x1a8>)
 800ba72:	f00c fba9 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
                initDataResult = GOS_ERROR;
 800ba76:	23ae      	movs	r3, #174	@ 0xae
 800ba78:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800ba7c:	e002      	b.n	800ba84 <bld_initData+0x184>
            // Version info is up-to-date.
        }
    }
    else
    {
        initDataResult = GOS_ERROR;
 800ba7e:	23ae      	movs	r3, #174	@ 0xae
 800ba80:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    }

    return initDataResult;
 800ba84:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	37c0      	adds	r7, #192	@ 0xc0
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	20001fe4 	.word	0x20001fe4
 800ba94:	20002084 	.word	0x20002084
 800ba98:	08004000 	.word	0x08004000
 800ba9c:	2000212c 	.word	0x2000212c
 800baa0:	20002130 	.word	0x20002130
 800baa4:	0801b720 	.word	0x0801b720
 800baa8:	0801b750 	.word	0x0801b750

0800baac <bld_initConfig>:

/*
 * Function: bld_initConfig
 */
gos_result_t bld_initConfig (void_t)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initCfgResult = GOS_SUCCESS;
 800bab2:	2355      	movs	r3, #85	@ 0x55
 800bab4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800bab6:	4824      	ldr	r0, [pc, #144]	@ (800bb48 <bld_initConfig+0x9c>)
 800bab8:	f004 ff42 	bl	8010940 <svl_pdhGetBldCfg>

    // If boolean values are incorrect, it indicates an uninitialized
    // bootloader configuration.
    if ((bldConfig.updateMode       != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 800babc:	4b22      	ldr	r3, [pc, #136]	@ (800bb48 <bld_initConfig+0x9c>)
 800babe:	791b      	ldrb	r3, [r3, #4]
 800bac0:	2b36      	cmp	r3, #54	@ 0x36
 800bac2:	d013      	beq.n	800baec <bld_initConfig+0x40>
 800bac4:	4b20      	ldr	r3, [pc, #128]	@ (800bb48 <bld_initConfig+0x9c>)
 800bac6:	791b      	ldrb	r3, [r3, #4]
 800bac8:	2b49      	cmp	r3, #73	@ 0x49
 800baca:	d00f      	beq.n	800baec <bld_initConfig+0x40>
        bldConfig.wirelessUpdate   != GOS_TRUE && bldConfig.wirelessUpdate   != GOS_FALSE &&
 800bacc:	4b1e      	ldr	r3, [pc, #120]	@ (800bb48 <bld_initConfig+0x9c>)
 800bace:	795b      	ldrb	r3, [r3, #5]
    if ((bldConfig.updateMode       != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 800bad0:	2b36      	cmp	r3, #54	@ 0x36
 800bad2:	d00b      	beq.n	800baec <bld_initConfig+0x40>
        bldConfig.wirelessUpdate   != GOS_TRUE && bldConfig.wirelessUpdate   != GOS_FALSE &&
 800bad4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb48 <bld_initConfig+0x9c>)
 800bad6:	795b      	ldrb	r3, [r3, #5]
 800bad8:	2b49      	cmp	r3, #73	@ 0x49
 800bada:	d007      	beq.n	800baec <bld_initConfig+0x40>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800badc:	4b1a      	ldr	r3, [pc, #104]	@ (800bb48 <bld_initConfig+0x9c>)
 800bade:	781b      	ldrb	r3, [r3, #0]
        bldConfig.wirelessUpdate   != GOS_TRUE && bldConfig.wirelessUpdate   != GOS_FALSE &&
 800bae0:	2b36      	cmp	r3, #54	@ 0x36
 800bae2:	d003      	beq.n	800baec <bld_initConfig+0x40>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800bae4:	4b18      	ldr	r3, [pc, #96]	@ (800bb48 <bld_initConfig+0x9c>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b49      	cmp	r3, #73	@ 0x49
 800baea:	d10b      	bne.n	800bb04 <bld_initConfig+0x58>
    	bldConfig.connectionTimeout == 0 || bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 800baec:	4b16      	ldr	r3, [pc, #88]	@ (800bb48 <bld_initConfig+0x9c>)
 800baee:	689b      	ldr	r3, [r3, #8]
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <bld_initConfig+0x58>
    	bldConfig.connectionTimeout == 0 || bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 800baf4:	4b14      	ldr	r3, [pc, #80]	@ (800bb48 <bld_initConfig+0x9c>)
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <bld_initConfig+0x58>
 800bafc:	4b12      	ldr	r3, [pc, #72]	@ (800bb48 <bld_initConfig+0x9c>)
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d11c      	bne.n	800bb3e <bld_initConfig+0x92>
    {
        bldConfig.connectionTimeout          = BLD_DEFAULT_CONN_TMO_MS;
 800bb04:	4b10      	ldr	r3, [pc, #64]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb06:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800bb0a:	609a      	str	r2, [r3, #8]
        bldConfig.waitForConnectionOnStartup = BLD_DEFAULT_CONN_ON_STARTUP;
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb0e:	2236      	movs	r2, #54	@ 0x36
 800bb10:	719a      	strb	r2, [r3, #6]
        bldConfig.requestTimeout             = BLD_DEFAULT_REQ_TMO_MS;
 800bb12:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb14:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800bb18:	60da      	str	r2, [r3, #12]
        bldConfig.installTimeout             = BLD_DEFAULT_INSTALL_TMO_MS;
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb1c:	4a0b      	ldr	r2, [pc, #44]	@ (800bb4c <bld_initConfig+0xa0>)
 800bb1e:	611a      	str	r2, [r3, #16]
        bldConfig.startupCounter             = 0u;
 800bb20:	4b09      	ldr	r3, [pc, #36]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	71da      	strb	r2, [r3, #7]
        bldConfig.updateMode                 = GOS_FALSE;
 800bb26:	4b08      	ldr	r3, [pc, #32]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb28:	2249      	movs	r2, #73	@ 0x49
 800bb2a:	711a      	strb	r2, [r3, #4]
        bldConfig.wirelessUpdate             = GOS_FALSE;
 800bb2c:	4b06      	ldr	r3, [pc, #24]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb2e:	2249      	movs	r2, #73	@ 0x49
 800bb30:	715a      	strb	r2, [r3, #5]
        bldConfig.installRequested           = GOS_FALSE;
 800bb32:	4b05      	ldr	r3, [pc, #20]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb34:	2249      	movs	r2, #73	@ 0x49
 800bb36:	701a      	strb	r2, [r3, #0]

        (void_t) svl_pdhSetBldCfg(&bldConfig);
 800bb38:	4803      	ldr	r0, [pc, #12]	@ (800bb48 <bld_initConfig+0x9c>)
 800bb3a:	f004 ffe1 	bl	8010b00 <svl_pdhSetBldCfg>
    else
    {
        // Configuration is initialized.
    }

    return initCfgResult;
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20001fd0 	.word	0x20001fd0
 800bb4c:	0001d4c0 	.word	0x0001d4c0

0800bb50 <bld_printConfig>:

/*
 * Function: bld_printConfig
 */
gos_result_t bld_printConfig (void_t)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800bb54:	4812      	ldr	r0, [pc, #72]	@ (800bba0 <bld_printConfig+0x50>)
 800bb56:	f004 fef3 	bl	8010940 <svl_pdhGetBldCfg>

    (void_t) gos_traceTraceFormattedUnsafe(TRACE_BG_BLUE_START "BOOTLOADER CONFIGURATION" TRACE_FORMAT_RESET "\r\n");
 800bb5a:	4812      	ldr	r0, [pc, #72]	@ (800bba4 <bld_printConfig+0x54>)
 800bb5c:	f00c fb34 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Connection on startup:\t%s\r\n", bldConfig.waitForConnectionOnStartup == GOS_TRUE ? "yes" : "no");
 800bb60:	4b0f      	ldr	r3, [pc, #60]	@ (800bba0 <bld_printConfig+0x50>)
 800bb62:	799b      	ldrb	r3, [r3, #6]
 800bb64:	2b36      	cmp	r3, #54	@ 0x36
 800bb66:	d101      	bne.n	800bb6c <bld_printConfig+0x1c>
 800bb68:	4b0f      	ldr	r3, [pc, #60]	@ (800bba8 <bld_printConfig+0x58>)
 800bb6a:	e000      	b.n	800bb6e <bld_printConfig+0x1e>
 800bb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbac <bld_printConfig+0x5c>)
 800bb6e:	4619      	mov	r1, r3
 800bb70:	480f      	ldr	r0, [pc, #60]	@ (800bbb0 <bld_printConfig+0x60>)
 800bb72:	f00c fb29 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Connection timeout:   \t%u ms\r\n", bldConfig.connectionTimeout);
 800bb76:	4b0a      	ldr	r3, [pc, #40]	@ (800bba0 <bld_printConfig+0x50>)
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	480d      	ldr	r0, [pc, #52]	@ (800bbb4 <bld_printConfig+0x64>)
 800bb7e:	f00c fb23 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Request timeout:      \t%u ms\r\n", bldConfig.requestTimeout);
 800bb82:	4b07      	ldr	r3, [pc, #28]	@ (800bba0 <bld_printConfig+0x50>)
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	4619      	mov	r1, r3
 800bb88:	480b      	ldr	r0, [pc, #44]	@ (800bbb8 <bld_printConfig+0x68>)
 800bb8a:	f00c fb1d 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Install timeout:      \t%u ms\r\n\r\n", bldConfig.installTimeout);
 800bb8e:	4b04      	ldr	r3, [pc, #16]	@ (800bba0 <bld_printConfig+0x50>)
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	4619      	mov	r1, r3
 800bb94:	4809      	ldr	r0, [pc, #36]	@ (800bbbc <bld_printConfig+0x6c>)
 800bb96:	f00c fb17 	bl	80181c8 <gos_traceTraceFormattedUnsafe>

    return GOS_SUCCESS;
 800bb9a:	2355      	movs	r3, #85	@ 0x55
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20001fd0 	.word	0x20001fd0
 800bba4:	0801b77c 	.word	0x0801b77c
 800bba8:	0801b7a0 	.word	0x0801b7a0
 800bbac:	0801b7a4 	.word	0x0801b7a4
 800bbb0:	0801b7a8 	.word	0x0801b7a8
 800bbb4:	0801b7c4 	.word	0x0801b7c4
 800bbb8:	0801b7e4 	.word	0x0801b7e4
 800bbbc:	0801b804 	.word	0x0801b804

0800bbc0 <drv_25lc640Init>:

/*
 * Function: drv_25lc640Init
 */
gos_result_t drv_25lc640Init (void_t* pDevice)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800bbc8:	2355      	movs	r3, #85	@ 0x55
 800bbca:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d103      	bne.n	800bbde <drv_25lc640Init+0x1e>
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f043 0301 	orr.w	r3, r3, #1
 800bbdc:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc640Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC640_MUTEX_INIT);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10d      	bne.n	800bc02 <drv_25lc640Init+0x42>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3302      	adds	r3, #2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f00a faac 	bl	8016148 <gos_mutexInit>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b55      	cmp	r3, #85	@ 0x55
 800bbf4:	d005      	beq.n	800bc02 <drv_25lc640Init+0x42>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	f043 0208 	orr.w	r2, r3, #8
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d102      	bne.n	800bc0e <drv_25lc640Init+0x4e>
 800bc08:	2355      	movs	r3, #85	@ 0x55
 800bc0a:	73fb      	strb	r3, [r7, #15]
 800bc0c:	e001      	b.n	800bc12 <drv_25lc640Init+0x52>
 800bc0e:	23ae      	movs	r3, #174	@ 0xae
 800bc10:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <drv_25lc640Read>:

/*
 * Function: drv_25lc640Read
 */
GOS_INLINE gos_result_t drv_25lc640Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b08f      	sub	sp, #60	@ 0x3c
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	607a      	str	r2, [r7, #4]
 800bc26:	461a      	mov	r2, r3
 800bc28:	460b      	mov	r3, r1
 800bc2a:	817b      	strh	r3, [r7, #10]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 800bc30:	2355      	movs	r3, #85	@ 0x55
 800bc32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage     = 0u;
 800bc36:	2300      	movs	r3, #0
 800bc38:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage       = 0u;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 800bc42:	2300      	movs	r3, #0
 800bc44:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos           = 0u;
 800bc46:	2300      	movs	r3, #0
 800bc48:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset        = 0u;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress    = 0u;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 800bc52:	2300      	movs	r3, #0
 800bc54:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	623b      	str	r3, [r7, #32]
    u8_t         txBuffer[3];

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d103      	bne.n	800bc6c <drv_25lc640Read+0x50>
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	f043 0301 	orr.w	r3, r3, #1
 800bc6a:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC640_TARGET_NULL);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d103      	bne.n	800bc7a <drv_25lc640Read+0x5e>
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	f043 0302 	orr.w	r3, r3, #2
 800bc78:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 80cc 	bne.w	800be1a <drv_25lc640Read+0x1fe>
 800bc82:	897a      	ldrh	r2, [r7, #10]
 800bc84:	893b      	ldrh	r3, [r7, #8]
 800bc86:	4413      	add	r3, r2
 800bc88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc8c:	f080 80c5 	bcs.w	800be1a <drv_25lc640Read+0x1fe>
    {
        DRV_ERROR_CHK_SET(
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10e      	bne.n	800bcb4 <drv_25lc640Read+0x98>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	1c9a      	adds	r2, r3, #2
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f00a fa6b 	bl	801617c <gos_mutexLock>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b55      	cmp	r3, #85	@ 0x55
 800bcaa:	d003      	beq.n	800bcb4 <drv_25lc640Read+0x98>
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	f043 0310 	orr.w	r3, r3, #16
 800bcb2:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d103      	bne.n	800bcc2 <drv_25lc640Read+0xa6>
 800bcba:	2355      	movs	r3, #85	@ 0x55
 800bcbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bcc0:	e002      	b.n	800bcc8 <drv_25lc640Read+0xac>
 800bcc2:	23ae      	movs	r3, #174	@ 0xae
 800bcc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 800bcc8:	2305      	movs	r3, #5
 800bcca:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 800bccc:	897b      	ldrh	r3, [r7, #10]
 800bcce:	095b      	lsrs	r3, r3, #5
 800bcd0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 800bcd2:	893a      	ldrh	r2, [r7, #8]
 800bcd4:	897b      	ldrh	r3, [r7, #10]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	095b      	lsrs	r3, r3, #5
 800bcda:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 800bcdc:	8bfa      	ldrh	r2, [r7, #30]
 800bcde:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3301      	adds	r3, #1
 800bce6:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 800bce8:	2300      	movs	r3, #0
 800bcea:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 800bcec:	897b      	ldrh	r3, [r7, #10]
 800bcee:	f003 031f 	and.w	r3, r3, #31
 800bcf2:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bcf8:	e081      	b.n	800bdfe <drv_25lc640Read+0x1e2>
        {
            memAddress = startPage << paddrposition | offset;
 800bcfa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	fa02 f303 	lsl.w	r3, r2, r3
 800bd02:	b21a      	sxth	r2, r3
 800bd04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	b21b      	sxth	r3, r3
 800bd0c:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 800bd0e:	893a      	ldrh	r2, [r7, #8]
 800bd10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bd12:	4413      	add	r3, r2
 800bd14:	2b1f      	cmp	r3, #31
 800bd16:	d904      	bls.n	800bd22 <drv_25lc640Read+0x106>
 800bd18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bd1a:	f1c3 0320 	rsb	r3, r3, #32
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	e000      	b.n	800bd24 <drv_25lc640Read+0x108>
 800bd22:	893b      	ldrh	r3, [r7, #8]
 800bd24:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 800bd26:	2303      	movs	r3, #3
 800bd28:	743b      	strb	r3, [r7, #16]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 800bd2a:	8b7b      	ldrh	r3, [r7, #26]
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	747b      	strb	r3, [r7, #17]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 800bd34:	8b7b      	ldrh	r3, [r7, #26]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	74bb      	strb	r3, [r7, #18]

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	785b      	ldrb	r3, [r3, #1]
 800bd3e:	2100      	movs	r1, #0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f001 f8e5 	bl	800cf10 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d113      	bne.n	800bd74 <drv_25lc640Read+0x158>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	7818      	ldrb	r0, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	689a      	ldr	r2, [r3, #8]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	f107 0110 	add.w	r1, r7, #16
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	2203      	movs	r2, #3
 800bd62:	f001 fc4b 	bl	800d5fc <drv_spiTransmitIT>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b55      	cmp	r3, #85	@ 0x55
 800bd6a:	d003      	beq.n	800bd74 <drv_25lc640Read+0x158>
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	f043 0320 	orr.w	r3, r3, #32
 800bd72:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d103      	bne.n	800bd82 <drv_25lc640Read+0x166>
 800bd7a:	2355      	movs	r3, #85	@ 0x55
 800bd7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bd80:	e002      	b.n	800bd88 <drv_25lc640Read+0x16c>
 800bd82:	23ae      	movs	r3, #174	@ 0xae
 800bd84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            DRV_ERROR_CHK_SET(
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d114      	bne.n	800bdb8 <drv_25lc640Read+0x19c>
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	7818      	ldrb	r0, [r3, #0]
 800bd92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	18d1      	adds	r1, r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689c      	ldr	r4, [r3, #8]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	8b3a      	ldrh	r2, [r7, #24]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	4623      	mov	r3, r4
 800bda6:	f001 fc8d 	bl	800d6c4 <drv_spiReceiveIT>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b55      	cmp	r3, #85	@ 0x55
 800bdae:	d003      	beq.n	800bdb8 <drv_25lc640Read+0x19c>
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	f043 0320 	orr.w	r3, r3, #32
 800bdb6:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d103      	bne.n	800bdc6 <drv_25lc640Read+0x1aa>
 800bdbe:	2355      	movs	r3, #85	@ 0x55
 800bdc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bdc4:	e002      	b.n	800bdcc <drv_25lc640Read+0x1b0>
 800bdc6:	23ae      	movs	r3, #174	@ 0xae
 800bdc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	785b      	ldrb	r3, [r3, #1]
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f001 f89c 	bl	800cf10 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 800bdd8:	200a      	movs	r0, #10
 800bdda:	f007 fe07 	bl	80139ec <gos_taskSleep>

            startPage += 1;
 800bdde:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bde0:	3301      	adds	r3, #1
 800bde2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 800bde4:	2300      	movs	r3, #0
 800bde6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 800bde8:	893a      	ldrh	r2, [r7, #8]
 800bdea:	8b3b      	ldrh	r3, [r7, #24]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 800bdf0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bdf2:	8b3b      	ldrh	r3, [r7, #24]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 800bdf8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bdfe:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800be00:	8bbb      	ldrh	r3, [r7, #28]
 800be02:	429a      	cmp	r2, r3
 800be04:	d204      	bcs.n	800be10 <drv_25lc640Read+0x1f4>
 800be06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be0a:	2b55      	cmp	r3, #85	@ 0x55
 800be0c:	f43f af75 	beq.w	800bcfa <drv_25lc640Read+0xde>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3302      	adds	r3, #2
 800be14:	4618      	mov	r0, r3
 800be16:	f00a fab7 	bl	8016388 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	699a      	ldr	r2, [r3, #24]
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	431a      	orrs	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d103      	bne.n	800be34 <drv_25lc640Read+0x218>
 800be2c:	2355      	movs	r3, #85	@ 0x55
 800be2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800be32:	e002      	b.n	800be3a <drv_25lc640Read+0x21e>
 800be34:	23ae      	movs	r3, #174	@ 0xae
 800be36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return readResult;
 800be3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3734      	adds	r7, #52	@ 0x34
 800be42:	46bd      	mov	sp, r7
 800be44:	bd90      	pop	{r4, r7, pc}

0800be46 <drv_25lc640Write>:

/*
 * Function: drv_25lc640Write
 */
GOS_INLINE gos_result_t drv_25lc640Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 800be46:	b590      	push	{r4, r7, lr}
 800be48:	b097      	sub	sp, #92	@ 0x5c
 800be4a:	af02      	add	r7, sp, #8
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	461a      	mov	r2, r3
 800be52:	460b      	mov	r3, r1
 800be54:	817b      	strh	r3, [r7, #10]
 800be56:	4613      	mov	r3, r2
 800be58:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 800be5a:	2355      	movs	r3, #85	@ 0x55
 800be5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    u16_t        startPage       = 0u;
 800be60:	2300      	movs	r3, #0
 800be62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    u16_t        endPage         = 0u;
 800be66:	2300      	movs	r3, #0
 800be68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    u16_t        numofpages      = 0u;
 800be6a:	2300      	movs	r3, #0
 800be6c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    u16_t        idx             = 0u;
 800be6e:	2300      	movs	r3, #0
 800be70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    u16_t        pos             = 0u;
 800be74:	2300      	movs	r3, #0
 800be76:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    u16_t        offset          = 0u;
 800be7a:	2300      	movs	r3, #0
 800be7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    u16_t        memAddress      = 0u;
 800be80:	2300      	movs	r3, #0
 800be82:	877b      	strh	r3, [r7, #58]	@ 0x3a
    u16_t        bytesRem        = 0u;
 800be84:	2300      	movs	r3, #0
 800be86:	873b      	strh	r3, [r7, #56]	@ 0x38
    s32_t        paddrposition   = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	637b      	str	r3, [r7, #52]	@ 0x34
    u32_t        errorFlags      = 0u;
 800be8c:	2300      	movs	r3, #0
 800be8e:	643b      	str	r3, [r7, #64]	@ 0x40
    u8_t         wrenInstruction = 0x06;
 800be90:	2306      	movs	r3, #6
 800be92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    u8_t         txBuffer [PAGE_SIZE + 3];

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d103      	bne.n	800bea4 <drv_25lc640Write+0x5e>
 800be9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	643b      	str	r3, [r7, #64]	@ 0x40
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC640_DATA_NULL);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d103      	bne.n	800beb2 <drv_25lc640Write+0x6c>
 800beaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beac:	f043 0304 	orr.w	r3, r3, #4
 800beb0:	643b      	str	r3, [r7, #64]	@ 0x40

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 800beb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f040 80f4 	bne.w	800c0a2 <drv_25lc640Write+0x25c>
 800beba:	897a      	ldrh	r2, [r7, #10]
 800bebc:	893b      	ldrh	r3, [r7, #8]
 800bebe:	4413      	add	r3, r2
 800bec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bec4:	f080 80ed 	bcs.w	800c0a2 <drv_25lc640Write+0x25c>
    {
        DRV_ERROR_CHK_SET(
 800bec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10e      	bne.n	800beec <drv_25lc640Write+0xa6>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	1c9a      	adds	r2, r3, #2
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	4619      	mov	r1, r3
 800bed8:	4610      	mov	r0, r2
 800beda:	f00a f94f 	bl	801617c <gos_mutexLock>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b55      	cmp	r3, #85	@ 0x55
 800bee2:	d003      	beq.n	800beec <drv_25lc640Write+0xa6>
 800bee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bee6:	f043 0310 	orr.w	r3, r3, #16
 800beea:	643b      	str	r3, [r7, #64]	@ 0x40
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800beec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d103      	bne.n	800befa <drv_25lc640Write+0xb4>
 800bef2:	2355      	movs	r3, #85	@ 0x55
 800bef4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800bef8:	e002      	b.n	800bf00 <drv_25lc640Write+0xba>
 800befa:	23ae      	movs	r3, #174	@ 0xae
 800befc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        paddrposition = log(PAGE_SIZE)/log(2);
 800bf00:	2305      	movs	r3, #5
 800bf02:	637b      	str	r3, [r7, #52]	@ 0x34
        startPage     = address / PAGE_SIZE;
 800bf04:	897b      	ldrh	r3, [r7, #10]
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        endPage       = ((size+address)/PAGE_SIZE);
 800bf0c:	893a      	ldrh	r2, [r7, #8]
 800bf0e:	897b      	ldrh	r3, [r7, #10]
 800bf10:	4413      	add	r3, r2
 800bf12:	095b      	lsrs	r3, r3, #5
 800bf14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        numofpages    = (endPage-startPage) + 1;
 800bf16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800bf18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	3301      	adds	r3, #1
 800bf22:	87bb      	strh	r3, [r7, #60]	@ 0x3c
        pos           = 0u;
 800bf24:	2300      	movs	r3, #0
 800bf26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        offset        = address % PAGE_SIZE;
 800bf2a:	897b      	ldrh	r3, [r7, #10]
 800bf2c:	f003 031f 	and.w	r3, r3, #31
 800bf30:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800bf3a:	e0a3      	b.n	800c084 <drv_25lc640Write+0x23e>
        {
            memAddress = startPage << paddrposition | offset;
 800bf3c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf42:	fa02 f303 	lsl.w	r3, r2, r3
 800bf46:	b21a      	sxth	r2, r3
 800bf48:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	b21b      	sxth	r3, r3
 800bf50:	877b      	strh	r3, [r7, #58]	@ 0x3a
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 800bf52:	893a      	ldrh	r2, [r7, #8]
 800bf54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf58:	4413      	add	r3, r2
 800bf5a:	2b1f      	cmp	r3, #31
 800bf5c:	d905      	bls.n	800bf6a <drv_25lc640Write+0x124>
 800bf5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf62:	f1c3 0320 	rsb	r3, r3, #32
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	e000      	b.n	800bf6c <drv_25lc640Write+0x126>
 800bf6a:	893b      	ldrh	r3, [r7, #8]
 800bf6c:	873b      	strh	r3, [r7, #56]	@ 0x38

            txBuffer[0] = 0x02;
 800bf6e:	2302      	movs	r3, #2
 800bf70:	743b      	strb	r3, [r7, #16]
            txBuffer[1] = (memAddress >> 8);
 800bf72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bf74:	0a1b      	lsrs	r3, r3, #8
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	747b      	strb	r3, [r7, #17]
            txBuffer[2] = memAddress & 0xFF;
 800bf7c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	74bb      	strb	r3, [r7, #18]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 800bf82:	f107 0310 	add.w	r3, r7, #16
 800bf86:	3303      	adds	r3, #3
 800bf88:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800bf8c:	6879      	ldr	r1, [r7, #4]
 800bf8e:	4411      	add	r1, r2
 800bf90:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800bf92:	4618      	mov	r0, r3
 800bf94:	f00d fa09 	bl	80193aa <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 ffb6 	bl	800cf10 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 800bfa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d113      	bne.n	800bfd2 <drv_25lc640Write+0x18c>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	7818      	ldrb	r0, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f001 fb1c 	bl	800d5fc <drv_spiTransmitIT>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b55      	cmp	r3, #85	@ 0x55
 800bfc8:	d003      	beq.n	800bfd2 <drv_25lc640Write+0x18c>
 800bfca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd0:	643b      	str	r3, [r7, #64]	@ 0x40
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800bfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d103      	bne.n	800bfe0 <drv_25lc640Write+0x19a>
 800bfd8:	2355      	movs	r3, #85	@ 0x55
 800bfda:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800bfde:	e002      	b.n	800bfe6 <drv_25lc640Write+0x1a0>
 800bfe0:	23ae      	movs	r3, #174	@ 0xae
 800bfe2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	2101      	movs	r1, #1
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 ff8f 	bl	800cf10 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2100      	movs	r1, #0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 ff89 	bl	800cf10 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 800bffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d115      	bne.n	800c030 <drv_25lc640Write+0x1ea>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	7818      	ldrb	r0, [r3, #0]
 800c008:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c00a:	3303      	adds	r3, #3
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689c      	ldr	r4, [r3, #8]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f107 0110 	add.w	r1, r7, #16
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	4623      	mov	r3, r4
 800c01e:	f001 faed 	bl	800d5fc <drv_spiTransmitIT>
 800c022:	4603      	mov	r3, r0
 800c024:	2b55      	cmp	r3, #85	@ 0x55
 800c026:	d003      	beq.n	800c030 <drv_25lc640Write+0x1ea>
 800c028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02e:	643b      	str	r3, [r7, #64]	@ 0x40
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800c030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	d103      	bne.n	800c03e <drv_25lc640Write+0x1f8>
 800c036:	2355      	movs	r3, #85	@ 0x55
 800c038:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c03c:	e002      	b.n	800c044 <drv_25lc640Write+0x1fe>
 800c03e:	23ae      	movs	r3, #174	@ 0xae
 800c040:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	785b      	ldrb	r3, [r3, #1]
 800c048:	2101      	movs	r1, #1
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 ff60 	bl	800cf10 <drv_gpioWritePin>

            startPage += 1;
 800c050:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c054:	3301      	adds	r3, #1
 800c056:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            offset    =  0u;
 800c05a:	2300      	movs	r3, #0
 800c05c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            size      =  size - bytesRem;
 800c060:	893a      	ldrh	r2, [r7, #8]
 800c062:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 800c068:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800c06c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c06e:	4413      	add	r3, r2
 800c070:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

            (void_t) gos_taskSleep(5);
 800c074:	2005      	movs	r0, #5
 800c076:	f007 fcb9 	bl	80139ec <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 800c07a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c07e:	3301      	adds	r3, #1
 800c080:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c084:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800c088:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d204      	bcs.n	800c098 <drv_25lc640Write+0x252>
 800c08e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c092:	2b55      	cmp	r3, #85	@ 0x55
 800c094:	f43f af52 	beq.w	800bf3c <drv_25lc640Write+0xf6>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3302      	adds	r3, #2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f00a f973 	bl	8016388 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	699a      	ldr	r2, [r3, #24]
 800c0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800c0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <drv_25lc640Write+0x276>
 800c0b4:	2355      	movs	r3, #85	@ 0x55
 800c0b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c0ba:	e002      	b.n	800c0c2 <drv_25lc640Write+0x27c>
 800c0bc:	23ae      	movs	r3, #174	@ 0xae
 800c0be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    return writeResult;
 800c0c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3754      	adds	r7, #84	@ 0x54
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd90      	pop	{r4, r7, pc}
	...

0800c0d0 <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b089      	sub	sp, #36	@ 0x24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 800c0dc:	23ae      	movs	r3, #174	@ 0xae
 800c0de:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 800c0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ec:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d030      	beq.n	800c156 <drv_crcGetCrc32+0x86>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d02d      	beq.n	800c156 <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61bb      	str	r3, [r7, #24]
 800c0fe:	e021      	b.n	800c144 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	4413      	add	r3, r2
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	4053      	eors	r3, r2
 800c10e:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 800c110:	2300      	movs	r3, #0
 800c112:	75fb      	strb	r3, [r7, #23]
 800c114:	e010      	b.n	800c138 <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	da07      	bge.n	800c12c <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	005b      	lsls	r3, r3, #1
 800c120:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	4b0f      	ldr	r3, [pc, #60]	@ (800c164 <drv_crcGetCrc32+0x94>)
 800c126:	4053      	eors	r3, r2
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	e002      	b.n	800c132 <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	3301      	adds	r3, #1
 800c136:	75fb      	strb	r3, [r7, #23]
 800c138:	7dfb      	ldrb	r3, [r7, #23]
 800c13a:	2b1f      	cmp	r3, #31
 800c13c:	d9eb      	bls.n	800c116 <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	3301      	adds	r3, #1
 800c142:	61bb      	str	r3, [r7, #24]
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d3d9      	bcc.n	800c100 <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 800c152:	2355      	movs	r3, #85	@ 0x55
 800c154:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 800c156:	7ffb      	ldrb	r3, [r7, #31]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3724      	adds	r7, #36	@ 0x24
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	04c11db7 	.word	0x04c11db7

0800c168 <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 800c176:	239c      	movs	r3, #156	@ 0x9c
 800c178:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 800c17a:	2300      	movs	r3, #0
 800c17c:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d015      	beq.n	800c1b0 <drv_crcCheckCrc32+0x48>
 800c184:	f107 0310 	add.w	r3, r7, #16
 800c188:	461a      	mov	r2, r3
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7ff ff9f 	bl	800c0d0 <drv_crcGetCrc32>
 800c192:	4603      	mov	r3, r0
 800c194:	2b55      	cmp	r3, #85	@ 0x55
 800c196:	d10b      	bne.n	800c1b0 <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d101      	bne.n	800c1a4 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 800c1a0:	23ca      	movs	r3, #202	@ 0xca
 800c1a2:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 800c1aa:	693a      	ldr	r2, [r7, #16]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
	...

0800c1bc <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 800c1c2:	2355      	movs	r3, #85	@ 0x55
 800c1c4:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	71bb      	strb	r3, [r7, #6]
 800c1ce:	e0c9      	b.n	800c364 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 800c1d0:	79ba      	ldrb	r2, [r7, #6]
 800c1d2:	496c      	ldr	r1, [pc, #432]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	4413      	add	r3, r2
 800c1da:	00db      	lsls	r3, r3, #3
 800c1dc:	440b      	add	r3, r1
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	79ba      	ldrb	r2, [r7, #6]
 800c1e4:	4b68      	ldr	r3, [pc, #416]	@ (800c388 <drv_dmaInit+0x1cc>)
 800c1e6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c1ea:	4866      	ldr	r0, [pc, #408]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	4413      	add	r3, r2
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	4403      	add	r3, r0
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 800c1fa:	79b9      	ldrb	r1, [r7, #6]
 800c1fc:	79ba      	ldrb	r2, [r7, #6]
 800c1fe:	4861      	ldr	r0, [pc, #388]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c200:	460b      	mov	r3, r1
 800c202:	011b      	lsls	r3, r3, #4
 800c204:	440b      	add	r3, r1
 800c206:	00db      	lsls	r3, r3, #3
 800c208:	4403      	add	r3, r0
 800c20a:	3364      	adds	r3, #100	@ 0x64
 800c20c:	6819      	ldr	r1, [r3, #0]
 800c20e:	485d      	ldr	r0, [pc, #372]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c210:	4613      	mov	r3, r2
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	4413      	add	r3, r2
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	4403      	add	r3, r0
 800c21a:	3308      	adds	r3, #8
 800c21c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 800c21e:	79b9      	ldrb	r1, [r7, #6]
 800c220:	79ba      	ldrb	r2, [r7, #6]
 800c222:	4858      	ldr	r0, [pc, #352]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c224:	460b      	mov	r3, r1
 800c226:	011b      	lsls	r3, r3, #4
 800c228:	440b      	add	r3, r1
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	4403      	add	r3, r0
 800c22e:	3368      	adds	r3, #104	@ 0x68
 800c230:	6819      	ldr	r1, [r3, #0]
 800c232:	4854      	ldr	r0, [pc, #336]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c234:	4613      	mov	r3, r2
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	4413      	add	r3, r2
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	4403      	add	r3, r0
 800c23e:	330c      	adds	r3, #12
 800c240:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 800c242:	79b9      	ldrb	r1, [r7, #6]
 800c244:	79ba      	ldrb	r2, [r7, #6]
 800c246:	484f      	ldr	r0, [pc, #316]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c248:	460b      	mov	r3, r1
 800c24a:	011b      	lsls	r3, r3, #4
 800c24c:	440b      	add	r3, r1
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	4403      	add	r3, r0
 800c252:	336c      	adds	r3, #108	@ 0x6c
 800c254:	6819      	ldr	r1, [r3, #0]
 800c256:	484b      	ldr	r0, [pc, #300]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c258:	4613      	mov	r3, r2
 800c25a:	011b      	lsls	r3, r3, #4
 800c25c:	4413      	add	r3, r2
 800c25e:	00db      	lsls	r3, r3, #3
 800c260:	4403      	add	r3, r0
 800c262:	3310      	adds	r3, #16
 800c264:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 800c266:	79b9      	ldrb	r1, [r7, #6]
 800c268:	79ba      	ldrb	r2, [r7, #6]
 800c26a:	4846      	ldr	r0, [pc, #280]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c26c:	460b      	mov	r3, r1
 800c26e:	011b      	lsls	r3, r3, #4
 800c270:	440b      	add	r3, r1
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	4403      	add	r3, r0
 800c276:	3370      	adds	r3, #112	@ 0x70
 800c278:	6819      	ldr	r1, [r3, #0]
 800c27a:	4842      	ldr	r0, [pc, #264]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c27c:	4613      	mov	r3, r2
 800c27e:	011b      	lsls	r3, r3, #4
 800c280:	4413      	add	r3, r2
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	4403      	add	r3, r0
 800c286:	3314      	adds	r3, #20
 800c288:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 800c28a:	79b9      	ldrb	r1, [r7, #6]
 800c28c:	79ba      	ldrb	r2, [r7, #6]
 800c28e:	483d      	ldr	r0, [pc, #244]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c290:	460b      	mov	r3, r1
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	440b      	add	r3, r1
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4403      	add	r3, r0
 800c29a:	3374      	adds	r3, #116	@ 0x74
 800c29c:	6819      	ldr	r1, [r3, #0]
 800c29e:	4839      	ldr	r0, [pc, #228]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	011b      	lsls	r3, r3, #4
 800c2a4:	4413      	add	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	4403      	add	r3, r0
 800c2aa:	3318      	adds	r3, #24
 800c2ac:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 800c2ae:	79b9      	ldrb	r1, [r7, #6]
 800c2b0:	79ba      	ldrb	r2, [r7, #6]
 800c2b2:	4834      	ldr	r0, [pc, #208]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	440b      	add	r3, r1
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	4403      	add	r3, r0
 800c2be:	3378      	adds	r3, #120	@ 0x78
 800c2c0:	6819      	ldr	r1, [r3, #0]
 800c2c2:	4830      	ldr	r0, [pc, #192]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	011b      	lsls	r3, r3, #4
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	4403      	add	r3, r0
 800c2ce:	331c      	adds	r3, #28
 800c2d0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 800c2d2:	79b9      	ldrb	r1, [r7, #6]
 800c2d4:	79ba      	ldrb	r2, [r7, #6]
 800c2d6:	482b      	ldr	r0, [pc, #172]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c2d8:	460b      	mov	r3, r1
 800c2da:	011b      	lsls	r3, r3, #4
 800c2dc:	440b      	add	r3, r1
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	4403      	add	r3, r0
 800c2e2:	337c      	adds	r3, #124	@ 0x7c
 800c2e4:	6819      	ldr	r1, [r3, #0]
 800c2e6:	4827      	ldr	r0, [pc, #156]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	4413      	add	r3, r2
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	4403      	add	r3, r0
 800c2f2:	3320      	adds	r3, #32
 800c2f4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 800c2f6:	79b9      	ldrb	r1, [r7, #6]
 800c2f8:	79ba      	ldrb	r2, [r7, #6]
 800c2fa:	4822      	ldr	r0, [pc, #136]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	440b      	add	r3, r1
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	4403      	add	r3, r0
 800c306:	3380      	adds	r3, #128	@ 0x80
 800c308:	6819      	ldr	r1, [r3, #0]
 800c30a:	481e      	ldr	r0, [pc, #120]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c30c:	4613      	mov	r3, r2
 800c30e:	011b      	lsls	r3, r3, #4
 800c310:	4413      	add	r3, r2
 800c312:	00db      	lsls	r3, r3, #3
 800c314:	4403      	add	r3, r0
 800c316:	3324      	adds	r3, #36	@ 0x24
 800c318:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 800c31a:	79b9      	ldrb	r1, [r7, #6]
 800c31c:	79ba      	ldrb	r2, [r7, #6]
 800c31e:	4819      	ldr	r0, [pc, #100]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c320:	460b      	mov	r3, r1
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	440b      	add	r3, r1
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4403      	add	r3, r0
 800c32a:	3384      	adds	r3, #132	@ 0x84
 800c32c:	6819      	ldr	r1, [r3, #0]
 800c32e:	4815      	ldr	r0, [pc, #84]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c330:	4613      	mov	r3, r2
 800c332:	011b      	lsls	r3, r3, #4
 800c334:	4413      	add	r3, r2
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	4403      	add	r3, r0
 800c33a:	3328      	adds	r3, #40	@ 0x28
 800c33c:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 800c33e:	79ba      	ldrb	r2, [r7, #6]
 800c340:	4613      	mov	r3, r2
 800c342:	011b      	lsls	r3, r3, #4
 800c344:	4413      	add	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	4a0e      	ldr	r2, [pc, #56]	@ (800c384 <drv_dmaInit+0x1c8>)
 800c34a:	4413      	add	r3, r2
 800c34c:	3304      	adds	r3, #4
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f9 fc34 	bl	8005bbc <HAL_DMA_Init>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 800c35a:	23ae      	movs	r3, #174	@ 0xae
 800c35c:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800c35e:	79bb      	ldrb	r3, [r7, #6]
 800c360:	3301      	adds	r3, #1
 800c362:	71bb      	strb	r3, [r7, #6]
 800c364:	79ba      	ldrb	r2, [r7, #6]
 800c366:	4b09      	ldr	r3, [pc, #36]	@ (800c38c <drv_dmaInit+0x1d0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4909      	ldr	r1, [pc, #36]	@ (800c390 <drv_dmaInit+0x1d4>)
 800c36c:	fba1 1303 	umull	r1, r3, r1, r3
 800c370:	09db      	lsrs	r3, r3, #7
 800c372:	429a      	cmp	r2, r3
 800c374:	f4ff af2c 	bcc.w	800c1d0 <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 800c378:	79fb      	ldrb	r3, [r7, #7]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	200001e0 	.word	0x200001e0
 800c388:	200004dc 	.word	0x200004dc
 800c38c:	20000378 	.word	0x20000378
 800c390:	f0f0f0f1 	.word	0xf0f0f0f1

0800c394 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c398:	4b19      	ldr	r3, [pc, #100]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d105      	bne.n	800c3ac <DMA1_Stream0_IRQHandler+0x18>
 800c3a0:	4b18      	ldr	r3, [pc, #96]	@ (800c404 <DMA1_Stream0_IRQHandler+0x70>)
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	4b16      	ldr	r3, [pc, #88]	@ (800c404 <DMA1_Stream0_IRQHandler+0x70>)
 800c3aa:	701a      	strb	r2, [r3, #0]
 800c3ac:	4b14      	ldr	r3, [pc, #80]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	4b12      	ldr	r3, [pc, #72]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c3b6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 800c3b8:	4b13      	ldr	r3, [pc, #76]	@ (800c408 <DMA1_Stream0_IRQHandler+0x74>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 800c3c0:	4b11      	ldr	r3, [pc, #68]	@ (800c408 <DMA1_Stream0_IRQHandler+0x74>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f9 fd90 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d005      	beq.n	800c3e0 <DMA1_Stream0_IRQHandler+0x4c>
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	4b08      	ldr	r3, [pc, #32]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <DMA1_Stream0_IRQHandler+0x6c>)
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d109      	bne.n	800c3fc <DMA1_Stream0_IRQHandler+0x68>
 800c3e8:	4b06      	ldr	r3, [pc, #24]	@ (800c404 <DMA1_Stream0_IRQHandler+0x70>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <DMA1_Stream0_IRQHandler+0x68>
 800c3f0:	4b04      	ldr	r3, [pc, #16]	@ (800c404 <DMA1_Stream0_IRQHandler+0x70>)
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	4b02      	ldr	r3, [pc, #8]	@ (800c404 <DMA1_Stream0_IRQHandler+0x70>)
 800c3fa:	701a      	strb	r2, [r3, #0]
}
 800c3fc:	bf00      	nop
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	200061ba 	.word	0x200061ba
 800c404:	200061b9 	.word	0x200061b9
 800c408:	2000037c 	.word	0x2000037c

0800c40c <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c410:	4b19      	ldr	r3, [pc, #100]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d105      	bne.n	800c424 <DMA1_Stream1_IRQHandler+0x18>
 800c418:	4b18      	ldr	r3, [pc, #96]	@ (800c47c <DMA1_Stream1_IRQHandler+0x70>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	3301      	adds	r3, #1
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	4b16      	ldr	r3, [pc, #88]	@ (800c47c <DMA1_Stream1_IRQHandler+0x70>)
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	4b14      	ldr	r3, [pc, #80]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	3301      	adds	r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	4b12      	ldr	r3, [pc, #72]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c42e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 800c430:	4b13      	ldr	r3, [pc, #76]	@ (800c480 <DMA1_Stream1_IRQHandler+0x74>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d005      	beq.n	800c444 <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 800c438:	4b11      	ldr	r3, [pc, #68]	@ (800c480 <DMA1_Stream1_IRQHandler+0x74>)
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4618      	mov	r0, r3
 800c440:	f7f9 fd54 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c444:	4b0c      	ldr	r3, [pc, #48]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d005      	beq.n	800c458 <DMA1_Stream1_IRQHandler+0x4c>
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	3b01      	subs	r3, #1
 800c452:	b2da      	uxtb	r2, r3
 800c454:	4b08      	ldr	r3, [pc, #32]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	4b07      	ldr	r3, [pc, #28]	@ (800c478 <DMA1_Stream1_IRQHandler+0x6c>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d109      	bne.n	800c474 <DMA1_Stream1_IRQHandler+0x68>
 800c460:	4b06      	ldr	r3, [pc, #24]	@ (800c47c <DMA1_Stream1_IRQHandler+0x70>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d005      	beq.n	800c474 <DMA1_Stream1_IRQHandler+0x68>
 800c468:	4b04      	ldr	r3, [pc, #16]	@ (800c47c <DMA1_Stream1_IRQHandler+0x70>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	4b02      	ldr	r3, [pc, #8]	@ (800c47c <DMA1_Stream1_IRQHandler+0x70>)
 800c472:	701a      	strb	r2, [r3, #0]
}
 800c474:	bf00      	nop
 800c476:	bd80      	pop	{r7, pc}
 800c478:	200061ba 	.word	0x200061ba
 800c47c:	200061b9 	.word	0x200061b9
 800c480:	2000037c 	.word	0x2000037c

0800c484 <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c488:	4b19      	ldr	r3, [pc, #100]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <DMA1_Stream2_IRQHandler+0x18>
 800c490:	4b18      	ldr	r3, [pc, #96]	@ (800c4f4 <DMA1_Stream2_IRQHandler+0x70>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	3301      	adds	r3, #1
 800c496:	b2da      	uxtb	r2, r3
 800c498:	4b16      	ldr	r3, [pc, #88]	@ (800c4f4 <DMA1_Stream2_IRQHandler+0x70>)
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	4b14      	ldr	r3, [pc, #80]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	4b12      	ldr	r3, [pc, #72]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c4a6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 800c4a8:	4b13      	ldr	r3, [pc, #76]	@ (800c4f8 <DMA1_Stream2_IRQHandler+0x74>)
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 800c4b0:	4b11      	ldr	r3, [pc, #68]	@ (800c4f8 <DMA1_Stream2_IRQHandler+0x74>)
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f9 fd18 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d005      	beq.n	800c4d0 <DMA1_Stream2_IRQHandler+0x4c>
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	4b08      	ldr	r3, [pc, #32]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <DMA1_Stream2_IRQHandler+0x6c>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <DMA1_Stream2_IRQHandler+0x68>
 800c4d8:	4b06      	ldr	r3, [pc, #24]	@ (800c4f4 <DMA1_Stream2_IRQHandler+0x70>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d005      	beq.n	800c4ec <DMA1_Stream2_IRQHandler+0x68>
 800c4e0:	4b04      	ldr	r3, [pc, #16]	@ (800c4f4 <DMA1_Stream2_IRQHandler+0x70>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	4b02      	ldr	r3, [pc, #8]	@ (800c4f4 <DMA1_Stream2_IRQHandler+0x70>)
 800c4ea:	701a      	strb	r2, [r3, #0]
}
 800c4ec:	bf00      	nop
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	200061ba 	.word	0x200061ba
 800c4f4:	200061b9 	.word	0x200061b9
 800c4f8:	2000037c 	.word	0x2000037c

0800c4fc <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c500:	4b19      	ldr	r3, [pc, #100]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d105      	bne.n	800c514 <DMA1_Stream3_IRQHandler+0x18>
 800c508:	4b18      	ldr	r3, [pc, #96]	@ (800c56c <DMA1_Stream3_IRQHandler+0x70>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	3301      	adds	r3, #1
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	4b16      	ldr	r3, [pc, #88]	@ (800c56c <DMA1_Stream3_IRQHandler+0x70>)
 800c512:	701a      	strb	r2, [r3, #0]
 800c514:	4b14      	ldr	r3, [pc, #80]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	3301      	adds	r3, #1
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	4b12      	ldr	r3, [pc, #72]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c51e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 800c520:	4b13      	ldr	r3, [pc, #76]	@ (800c570 <DMA1_Stream3_IRQHandler+0x74>)
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d005      	beq.n	800c534 <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 800c528:	4b11      	ldr	r3, [pc, #68]	@ (800c570 <DMA1_Stream3_IRQHandler+0x74>)
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4618      	mov	r0, r3
 800c530:	f7f9 fcdc 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c534:	4b0c      	ldr	r3, [pc, #48]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d005      	beq.n	800c548 <DMA1_Stream3_IRQHandler+0x4c>
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	3b01      	subs	r3, #1
 800c542:	b2da      	uxtb	r2, r3
 800c544:	4b08      	ldr	r3, [pc, #32]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	4b07      	ldr	r3, [pc, #28]	@ (800c568 <DMA1_Stream3_IRQHandler+0x6c>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d109      	bne.n	800c564 <DMA1_Stream3_IRQHandler+0x68>
 800c550:	4b06      	ldr	r3, [pc, #24]	@ (800c56c <DMA1_Stream3_IRQHandler+0x70>)
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <DMA1_Stream3_IRQHandler+0x68>
 800c558:	4b04      	ldr	r3, [pc, #16]	@ (800c56c <DMA1_Stream3_IRQHandler+0x70>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	4b02      	ldr	r3, [pc, #8]	@ (800c56c <DMA1_Stream3_IRQHandler+0x70>)
 800c562:	701a      	strb	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	bd80      	pop	{r7, pc}
 800c568:	200061ba 	.word	0x200061ba
 800c56c:	200061b9 	.word	0x200061b9
 800c570:	2000037c 	.word	0x2000037c

0800c574 <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c578:	4b19      	ldr	r3, [pc, #100]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d105      	bne.n	800c58c <DMA1_Stream4_IRQHandler+0x18>
 800c580:	4b18      	ldr	r3, [pc, #96]	@ (800c5e4 <DMA1_Stream4_IRQHandler+0x70>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	3301      	adds	r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	4b16      	ldr	r3, [pc, #88]	@ (800c5e4 <DMA1_Stream4_IRQHandler+0x70>)
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	4b14      	ldr	r3, [pc, #80]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	b2da      	uxtb	r2, r3
 800c594:	4b12      	ldr	r3, [pc, #72]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c596:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 800c598:	4b13      	ldr	r3, [pc, #76]	@ (800c5e8 <DMA1_Stream4_IRQHandler+0x74>)
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 800c5a0:	4b11      	ldr	r3, [pc, #68]	@ (800c5e8 <DMA1_Stream4_IRQHandler+0x74>)
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7f9 fca0 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d005      	beq.n	800c5c0 <DMA1_Stream4_IRQHandler+0x4c>
 800c5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	4b08      	ldr	r3, [pc, #32]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	4b07      	ldr	r3, [pc, #28]	@ (800c5e0 <DMA1_Stream4_IRQHandler+0x6c>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d109      	bne.n	800c5dc <DMA1_Stream4_IRQHandler+0x68>
 800c5c8:	4b06      	ldr	r3, [pc, #24]	@ (800c5e4 <DMA1_Stream4_IRQHandler+0x70>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d005      	beq.n	800c5dc <DMA1_Stream4_IRQHandler+0x68>
 800c5d0:	4b04      	ldr	r3, [pc, #16]	@ (800c5e4 <DMA1_Stream4_IRQHandler+0x70>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	4b02      	ldr	r3, [pc, #8]	@ (800c5e4 <DMA1_Stream4_IRQHandler+0x70>)
 800c5da:	701a      	strb	r2, [r3, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	200061ba 	.word	0x200061ba
 800c5e4:	200061b9 	.word	0x200061b9
 800c5e8:	2000037c 	.word	0x2000037c

0800c5ec <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c5f6:	4b28      	ldr	r3, [pc, #160]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d105      	bne.n	800c60a <DMA1_Stream5_IRQHandler+0x1e>
 800c5fe:	4b27      	ldr	r3, [pc, #156]	@ (800c69c <DMA1_Stream5_IRQHandler+0xb0>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	3301      	adds	r3, #1
 800c604:	b2da      	uxtb	r2, r3
 800c606:	4b25      	ldr	r3, [pc, #148]	@ (800c69c <DMA1_Stream5_IRQHandler+0xb0>)
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	4b23      	ldr	r3, [pc, #140]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	3301      	adds	r3, #1
 800c610:	b2da      	uxtb	r2, r3
 800c612:	4b21      	ldr	r3, [pc, #132]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c614:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800c616:	2300      	movs	r3, #0
 800c618:	71fb      	strb	r3, [r7, #7]
 800c61a:	e017      	b.n	800c64c <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 800c61c:	79fa      	ldrb	r2, [r7, #7]
 800c61e:	4920      	ldr	r1, [pc, #128]	@ (800c6a0 <DMA1_Stream5_IRQHandler+0xb4>)
 800c620:	4613      	mov	r3, r2
 800c622:	011b      	lsls	r3, r3, #4
 800c624:	4413      	add	r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	440b      	add	r3, r1
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b05      	cmp	r3, #5
 800c62e:	d10a      	bne.n	800c646 <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 800c630:	79fa      	ldrb	r2, [r7, #7]
 800c632:	4613      	mov	r3, r2
 800c634:	011b      	lsls	r3, r3, #4
 800c636:	4413      	add	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	4a19      	ldr	r2, [pc, #100]	@ (800c6a0 <DMA1_Stream5_IRQHandler+0xb4>)
 800c63c:	4413      	add	r3, r2
 800c63e:	3304      	adds	r3, #4
 800c640:	4618      	mov	r0, r3
 800c642:	f7f9 fc53 	bl	8005eec <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	3301      	adds	r3, #1
 800c64a:	71fb      	strb	r3, [r7, #7]
 800c64c:	79fa      	ldrb	r2, [r7, #7]
 800c64e:	4b15      	ldr	r3, [pc, #84]	@ (800c6a4 <DMA1_Stream5_IRQHandler+0xb8>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4915      	ldr	r1, [pc, #84]	@ (800c6a8 <DMA1_Stream5_IRQHandler+0xbc>)
 800c654:	fba1 1303 	umull	r1, r3, r1, r3
 800c658:	09db      	lsrs	r3, r3, #7
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d3de      	bcc.n	800c61c <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 800c65e:	4b0e      	ldr	r3, [pc, #56]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <DMA1_Stream5_IRQHandler+0x86>
 800c666:	4b0c      	ldr	r3, [pc, #48]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	4b0a      	ldr	r3, [pc, #40]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c670:	701a      	strb	r2, [r3, #0]
 800c672:	4b09      	ldr	r3, [pc, #36]	@ (800c698 <DMA1_Stream5_IRQHandler+0xac>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d109      	bne.n	800c68e <DMA1_Stream5_IRQHandler+0xa2>
 800c67a:	4b08      	ldr	r3, [pc, #32]	@ (800c69c <DMA1_Stream5_IRQHandler+0xb0>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <DMA1_Stream5_IRQHandler+0xa2>
 800c682:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <DMA1_Stream5_IRQHandler+0xb0>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	3b01      	subs	r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	4b04      	ldr	r3, [pc, #16]	@ (800c69c <DMA1_Stream5_IRQHandler+0xb0>)
 800c68c:	701a      	strb	r2, [r3, #0]
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	200061ba 	.word	0x200061ba
 800c69c:	200061b9 	.word	0x200061b9
 800c6a0:	200001e0 	.word	0x200001e0
 800c6a4:	20000378 	.word	0x20000378
 800c6a8:	f0f0f0f1 	.word	0xf0f0f0f1

0800c6ac <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c6b0:	4b19      	ldr	r3, [pc, #100]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d105      	bne.n	800c6c4 <DMA1_Stream6_IRQHandler+0x18>
 800c6b8:	4b18      	ldr	r3, [pc, #96]	@ (800c71c <DMA1_Stream6_IRQHandler+0x70>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	4b16      	ldr	r3, [pc, #88]	@ (800c71c <DMA1_Stream6_IRQHandler+0x70>)
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	4b14      	ldr	r3, [pc, #80]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	4b12      	ldr	r3, [pc, #72]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6ce:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 800c6d0:	4b13      	ldr	r3, [pc, #76]	@ (800c720 <DMA1_Stream6_IRQHandler+0x74>)
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d005      	beq.n	800c6e4 <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 800c6d8:	4b11      	ldr	r3, [pc, #68]	@ (800c720 <DMA1_Stream6_IRQHandler+0x74>)
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f9 fc04 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <DMA1_Stream6_IRQHandler+0x4c>
 800c6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	4b08      	ldr	r3, [pc, #32]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	4b07      	ldr	r3, [pc, #28]	@ (800c718 <DMA1_Stream6_IRQHandler+0x6c>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d109      	bne.n	800c714 <DMA1_Stream6_IRQHandler+0x68>
 800c700:	4b06      	ldr	r3, [pc, #24]	@ (800c71c <DMA1_Stream6_IRQHandler+0x70>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d005      	beq.n	800c714 <DMA1_Stream6_IRQHandler+0x68>
 800c708:	4b04      	ldr	r3, [pc, #16]	@ (800c71c <DMA1_Stream6_IRQHandler+0x70>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	4b02      	ldr	r3, [pc, #8]	@ (800c71c <DMA1_Stream6_IRQHandler+0x70>)
 800c712:	701a      	strb	r2, [r3, #0]
}
 800c714:	bf00      	nop
 800c716:	bd80      	pop	{r7, pc}
 800c718:	200061ba 	.word	0x200061ba
 800c71c:	200061b9 	.word	0x200061b9
 800c720:	2000037c 	.word	0x2000037c

0800c724 <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c728:	4b19      	ldr	r3, [pc, #100]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d105      	bne.n	800c73c <DMA1_Stream7_IRQHandler+0x18>
 800c730:	4b18      	ldr	r3, [pc, #96]	@ (800c794 <DMA1_Stream7_IRQHandler+0x70>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	3301      	adds	r3, #1
 800c736:	b2da      	uxtb	r2, r3
 800c738:	4b16      	ldr	r3, [pc, #88]	@ (800c794 <DMA1_Stream7_IRQHandler+0x70>)
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	4b14      	ldr	r3, [pc, #80]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	b2da      	uxtb	r2, r3
 800c744:	4b12      	ldr	r3, [pc, #72]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c746:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 800c748:	4b13      	ldr	r3, [pc, #76]	@ (800c798 <DMA1_Stream7_IRQHandler+0x74>)
 800c74a:	69db      	ldr	r3, [r3, #28]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 800c750:	4b11      	ldr	r3, [pc, #68]	@ (800c798 <DMA1_Stream7_IRQHandler+0x74>)
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	3304      	adds	r3, #4
 800c756:	4618      	mov	r0, r3
 800c758:	f7f9 fbc8 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c75c:	4b0c      	ldr	r3, [pc, #48]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d005      	beq.n	800c770 <DMA1_Stream7_IRQHandler+0x4c>
 800c764:	4b0a      	ldr	r3, [pc, #40]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	3b01      	subs	r3, #1
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	4b08      	ldr	r3, [pc, #32]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	4b07      	ldr	r3, [pc, #28]	@ (800c790 <DMA1_Stream7_IRQHandler+0x6c>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d109      	bne.n	800c78c <DMA1_Stream7_IRQHandler+0x68>
 800c778:	4b06      	ldr	r3, [pc, #24]	@ (800c794 <DMA1_Stream7_IRQHandler+0x70>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <DMA1_Stream7_IRQHandler+0x68>
 800c780:	4b04      	ldr	r3, [pc, #16]	@ (800c794 <DMA1_Stream7_IRQHandler+0x70>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	3b01      	subs	r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	4b02      	ldr	r3, [pc, #8]	@ (800c794 <DMA1_Stream7_IRQHandler+0x70>)
 800c78a:	701a      	strb	r2, [r3, #0]
}
 800c78c:	bf00      	nop
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	200061ba 	.word	0x200061ba
 800c794:	200061b9 	.word	0x200061b9
 800c798:	2000037c 	.word	0x2000037c

0800c79c <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c7a0:	4b19      	ldr	r3, [pc, #100]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d105      	bne.n	800c7b4 <DMA2_Stream0_IRQHandler+0x18>
 800c7a8:	4b18      	ldr	r3, [pc, #96]	@ (800c80c <DMA2_Stream0_IRQHandler+0x70>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	4b16      	ldr	r3, [pc, #88]	@ (800c80c <DMA2_Stream0_IRQHandler+0x70>)
 800c7b2:	701a      	strb	r2, [r3, #0]
 800c7b4:	4b14      	ldr	r3, [pc, #80]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	4b12      	ldr	r3, [pc, #72]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7be:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 800c7c0:	4b13      	ldr	r3, [pc, #76]	@ (800c810 <DMA2_Stream0_IRQHandler+0x74>)
 800c7c2:	6a1b      	ldr	r3, [r3, #32]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d005      	beq.n	800c7d4 <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 800c7c8:	4b11      	ldr	r3, [pc, #68]	@ (800c810 <DMA2_Stream0_IRQHandler+0x74>)
 800c7ca:	6a1b      	ldr	r3, [r3, #32]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f9 fb8c 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d005      	beq.n	800c7e8 <DMA2_Stream0_IRQHandler+0x4c>
 800c7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	4b08      	ldr	r3, [pc, #32]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	4b07      	ldr	r3, [pc, #28]	@ (800c808 <DMA2_Stream0_IRQHandler+0x6c>)
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d109      	bne.n	800c804 <DMA2_Stream0_IRQHandler+0x68>
 800c7f0:	4b06      	ldr	r3, [pc, #24]	@ (800c80c <DMA2_Stream0_IRQHandler+0x70>)
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d005      	beq.n	800c804 <DMA2_Stream0_IRQHandler+0x68>
 800c7f8:	4b04      	ldr	r3, [pc, #16]	@ (800c80c <DMA2_Stream0_IRQHandler+0x70>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	4b02      	ldr	r3, [pc, #8]	@ (800c80c <DMA2_Stream0_IRQHandler+0x70>)
 800c802:	701a      	strb	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	bd80      	pop	{r7, pc}
 800c808:	200061ba 	.word	0x200061ba
 800c80c:	200061b9 	.word	0x200061b9
 800c810:	2000037c 	.word	0x2000037c

0800c814 <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c818:	4b19      	ldr	r3, [pc, #100]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d105      	bne.n	800c82c <DMA2_Stream1_IRQHandler+0x18>
 800c820:	4b18      	ldr	r3, [pc, #96]	@ (800c884 <DMA2_Stream1_IRQHandler+0x70>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	b2da      	uxtb	r2, r3
 800c828:	4b16      	ldr	r3, [pc, #88]	@ (800c884 <DMA2_Stream1_IRQHandler+0x70>)
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	4b14      	ldr	r3, [pc, #80]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	3301      	adds	r3, #1
 800c832:	b2da      	uxtb	r2, r3
 800c834:	4b12      	ldr	r3, [pc, #72]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c836:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 800c838:	4b13      	ldr	r3, [pc, #76]	@ (800c888 <DMA2_Stream1_IRQHandler+0x74>)
 800c83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d005      	beq.n	800c84c <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 800c840:	4b11      	ldr	r3, [pc, #68]	@ (800c888 <DMA2_Stream1_IRQHandler+0x74>)
 800c842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c844:	3304      	adds	r3, #4
 800c846:	4618      	mov	r0, r3
 800c848:	f7f9 fb50 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c84c:	4b0c      	ldr	r3, [pc, #48]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <DMA2_Stream1_IRQHandler+0x4c>
 800c854:	4b0a      	ldr	r3, [pc, #40]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	3b01      	subs	r3, #1
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	4b08      	ldr	r3, [pc, #32]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c85e:	701a      	strb	r2, [r3, #0]
 800c860:	4b07      	ldr	r3, [pc, #28]	@ (800c880 <DMA2_Stream1_IRQHandler+0x6c>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d109      	bne.n	800c87c <DMA2_Stream1_IRQHandler+0x68>
 800c868:	4b06      	ldr	r3, [pc, #24]	@ (800c884 <DMA2_Stream1_IRQHandler+0x70>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <DMA2_Stream1_IRQHandler+0x68>
 800c870:	4b04      	ldr	r3, [pc, #16]	@ (800c884 <DMA2_Stream1_IRQHandler+0x70>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	3b01      	subs	r3, #1
 800c876:	b2da      	uxtb	r2, r3
 800c878:	4b02      	ldr	r3, [pc, #8]	@ (800c884 <DMA2_Stream1_IRQHandler+0x70>)
 800c87a:	701a      	strb	r2, [r3, #0]
}
 800c87c:	bf00      	nop
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	200061ba 	.word	0x200061ba
 800c884:	200061b9 	.word	0x200061b9
 800c888:	2000037c 	.word	0x2000037c

0800c88c <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c890:	4b19      	ldr	r3, [pc, #100]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d105      	bne.n	800c8a4 <DMA2_Stream2_IRQHandler+0x18>
 800c898:	4b18      	ldr	r3, [pc, #96]	@ (800c8fc <DMA2_Stream2_IRQHandler+0x70>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	4b16      	ldr	r3, [pc, #88]	@ (800c8fc <DMA2_Stream2_IRQHandler+0x70>)
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	4b14      	ldr	r3, [pc, #80]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	4b12      	ldr	r3, [pc, #72]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c8ae:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 800c8b0:	4b13      	ldr	r3, [pc, #76]	@ (800c900 <DMA2_Stream2_IRQHandler+0x74>)
 800c8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d005      	beq.n	800c8c4 <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 800c8b8:	4b11      	ldr	r3, [pc, #68]	@ (800c900 <DMA2_Stream2_IRQHandler+0x74>)
 800c8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f9 fb14 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <DMA2_Stream2_IRQHandler+0x4c>
 800c8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c8d6:	701a      	strb	r2, [r3, #0]
 800c8d8:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <DMA2_Stream2_IRQHandler+0x6c>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d109      	bne.n	800c8f4 <DMA2_Stream2_IRQHandler+0x68>
 800c8e0:	4b06      	ldr	r3, [pc, #24]	@ (800c8fc <DMA2_Stream2_IRQHandler+0x70>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <DMA2_Stream2_IRQHandler+0x68>
 800c8e8:	4b04      	ldr	r3, [pc, #16]	@ (800c8fc <DMA2_Stream2_IRQHandler+0x70>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	4b02      	ldr	r3, [pc, #8]	@ (800c8fc <DMA2_Stream2_IRQHandler+0x70>)
 800c8f2:	701a      	strb	r2, [r3, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200061ba 	.word	0x200061ba
 800c8fc:	200061b9 	.word	0x200061b9
 800c900:	2000037c 	.word	0x2000037c

0800c904 <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c908:	4b19      	ldr	r3, [pc, #100]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d105      	bne.n	800c91c <DMA2_Stream3_IRQHandler+0x18>
 800c910:	4b18      	ldr	r3, [pc, #96]	@ (800c974 <DMA2_Stream3_IRQHandler+0x70>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	3301      	adds	r3, #1
 800c916:	b2da      	uxtb	r2, r3
 800c918:	4b16      	ldr	r3, [pc, #88]	@ (800c974 <DMA2_Stream3_IRQHandler+0x70>)
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	4b14      	ldr	r3, [pc, #80]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	3301      	adds	r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	4b12      	ldr	r3, [pc, #72]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c926:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 800c928:	4b13      	ldr	r3, [pc, #76]	@ (800c978 <DMA2_Stream3_IRQHandler+0x74>)
 800c92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d005      	beq.n	800c93c <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 800c930:	4b11      	ldr	r3, [pc, #68]	@ (800c978 <DMA2_Stream3_IRQHandler+0x74>)
 800c932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c934:	3304      	adds	r3, #4
 800c936:	4618      	mov	r0, r3
 800c938:	f7f9 fad8 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c93c:	4b0c      	ldr	r3, [pc, #48]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d005      	beq.n	800c950 <DMA2_Stream3_IRQHandler+0x4c>
 800c944:	4b0a      	ldr	r3, [pc, #40]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	3b01      	subs	r3, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	4b08      	ldr	r3, [pc, #32]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	4b07      	ldr	r3, [pc, #28]	@ (800c970 <DMA2_Stream3_IRQHandler+0x6c>)
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d109      	bne.n	800c96c <DMA2_Stream3_IRQHandler+0x68>
 800c958:	4b06      	ldr	r3, [pc, #24]	@ (800c974 <DMA2_Stream3_IRQHandler+0x70>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <DMA2_Stream3_IRQHandler+0x68>
 800c960:	4b04      	ldr	r3, [pc, #16]	@ (800c974 <DMA2_Stream3_IRQHandler+0x70>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	3b01      	subs	r3, #1
 800c966:	b2da      	uxtb	r2, r3
 800c968:	4b02      	ldr	r3, [pc, #8]	@ (800c974 <DMA2_Stream3_IRQHandler+0x70>)
 800c96a:	701a      	strb	r2, [r3, #0]
}
 800c96c:	bf00      	nop
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	200061ba 	.word	0x200061ba
 800c974:	200061b9 	.word	0x200061b9
 800c978:	2000037c 	.word	0x2000037c

0800c97c <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c980:	4b19      	ldr	r3, [pc, #100]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d105      	bne.n	800c994 <DMA2_Stream4_IRQHandler+0x18>
 800c988:	4b18      	ldr	r3, [pc, #96]	@ (800c9ec <DMA2_Stream4_IRQHandler+0x70>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	4b16      	ldr	r3, [pc, #88]	@ (800c9ec <DMA2_Stream4_IRQHandler+0x70>)
 800c992:	701a      	strb	r2, [r3, #0]
 800c994:	4b14      	ldr	r3, [pc, #80]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	3301      	adds	r3, #1
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	4b12      	ldr	r3, [pc, #72]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c99e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 800c9a0:	4b13      	ldr	r3, [pc, #76]	@ (800c9f0 <DMA2_Stream4_IRQHandler+0x74>)
 800c9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d005      	beq.n	800c9b4 <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 800c9a8:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <DMA2_Stream4_IRQHandler+0x74>)
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7f9 fa9c 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800c9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d005      	beq.n	800c9c8 <DMA2_Stream4_IRQHandler+0x4c>
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	4b08      	ldr	r3, [pc, #32]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	4b07      	ldr	r3, [pc, #28]	@ (800c9e8 <DMA2_Stream4_IRQHandler+0x6c>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d109      	bne.n	800c9e4 <DMA2_Stream4_IRQHandler+0x68>
 800c9d0:	4b06      	ldr	r3, [pc, #24]	@ (800c9ec <DMA2_Stream4_IRQHandler+0x70>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <DMA2_Stream4_IRQHandler+0x68>
 800c9d8:	4b04      	ldr	r3, [pc, #16]	@ (800c9ec <DMA2_Stream4_IRQHandler+0x70>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	4b02      	ldr	r3, [pc, #8]	@ (800c9ec <DMA2_Stream4_IRQHandler+0x70>)
 800c9e2:	701a      	strb	r2, [r3, #0]
}
 800c9e4:	bf00      	nop
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200061ba 	.word	0x200061ba
 800c9ec:	200061b9 	.word	0x200061b9
 800c9f0:	2000037c 	.word	0x2000037c

0800c9f4 <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c9f8:	4b19      	ldr	r3, [pc, #100]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d105      	bne.n	800ca0c <DMA2_Stream5_IRQHandler+0x18>
 800ca00:	4b18      	ldr	r3, [pc, #96]	@ (800ca64 <DMA2_Stream5_IRQHandler+0x70>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	4b16      	ldr	r3, [pc, #88]	@ (800ca64 <DMA2_Stream5_IRQHandler+0x70>)
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	4b14      	ldr	r3, [pc, #80]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	3301      	adds	r3, #1
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	4b12      	ldr	r3, [pc, #72]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800ca16:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 800ca18:	4b13      	ldr	r3, [pc, #76]	@ (800ca68 <DMA2_Stream5_IRQHandler+0x74>)
 800ca1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d005      	beq.n	800ca2c <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 800ca20:	4b11      	ldr	r3, [pc, #68]	@ (800ca68 <DMA2_Stream5_IRQHandler+0x74>)
 800ca22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca24:	3304      	adds	r3, #4
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f9 fa60 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800ca2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <DMA2_Stream5_IRQHandler+0x4c>
 800ca34:	4b0a      	ldr	r3, [pc, #40]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	4b08      	ldr	r3, [pc, #32]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800ca3e:	701a      	strb	r2, [r3, #0]
 800ca40:	4b07      	ldr	r3, [pc, #28]	@ (800ca60 <DMA2_Stream5_IRQHandler+0x6c>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d109      	bne.n	800ca5c <DMA2_Stream5_IRQHandler+0x68>
 800ca48:	4b06      	ldr	r3, [pc, #24]	@ (800ca64 <DMA2_Stream5_IRQHandler+0x70>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <DMA2_Stream5_IRQHandler+0x68>
 800ca50:	4b04      	ldr	r3, [pc, #16]	@ (800ca64 <DMA2_Stream5_IRQHandler+0x70>)
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	4b02      	ldr	r3, [pc, #8]	@ (800ca64 <DMA2_Stream5_IRQHandler+0x70>)
 800ca5a:	701a      	strb	r2, [r3, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	200061ba 	.word	0x200061ba
 800ca64:	200061b9 	.word	0x200061b9
 800ca68:	2000037c 	.word	0x2000037c

0800ca6c <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800ca70:	4b19      	ldr	r3, [pc, #100]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d105      	bne.n	800ca84 <DMA2_Stream6_IRQHandler+0x18>
 800ca78:	4b18      	ldr	r3, [pc, #96]	@ (800cadc <DMA2_Stream6_IRQHandler+0x70>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	4b16      	ldr	r3, [pc, #88]	@ (800cadc <DMA2_Stream6_IRQHandler+0x70>)
 800ca82:	701a      	strb	r2, [r3, #0]
 800ca84:	4b14      	ldr	r3, [pc, #80]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	4b12      	ldr	r3, [pc, #72]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800ca8e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 800ca90:	4b13      	ldr	r3, [pc, #76]	@ (800cae0 <DMA2_Stream6_IRQHandler+0x74>)
 800ca92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 800ca98:	4b11      	ldr	r3, [pc, #68]	@ (800cae0 <DMA2_Stream6_IRQHandler+0x74>)
 800ca9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7f9 fa24 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800caa4:	4b0c      	ldr	r3, [pc, #48]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <DMA2_Stream6_IRQHandler+0x4c>
 800caac:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	4b08      	ldr	r3, [pc, #32]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	4b07      	ldr	r3, [pc, #28]	@ (800cad8 <DMA2_Stream6_IRQHandler+0x6c>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d109      	bne.n	800cad4 <DMA2_Stream6_IRQHandler+0x68>
 800cac0:	4b06      	ldr	r3, [pc, #24]	@ (800cadc <DMA2_Stream6_IRQHandler+0x70>)
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d005      	beq.n	800cad4 <DMA2_Stream6_IRQHandler+0x68>
 800cac8:	4b04      	ldr	r3, [pc, #16]	@ (800cadc <DMA2_Stream6_IRQHandler+0x70>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	3b01      	subs	r3, #1
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	4b02      	ldr	r3, [pc, #8]	@ (800cadc <DMA2_Stream6_IRQHandler+0x70>)
 800cad2:	701a      	strb	r2, [r3, #0]
}
 800cad4:	bf00      	nop
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	200061ba 	.word	0x200061ba
 800cadc:	200061b9 	.word	0x200061b9
 800cae0:	2000037c 	.word	0x2000037c

0800cae4 <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800cae8:	4b19      	ldr	r3, [pc, #100]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <DMA2_Stream7_IRQHandler+0x18>
 800caf0:	4b18      	ldr	r3, [pc, #96]	@ (800cb54 <DMA2_Stream7_IRQHandler+0x70>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	3301      	adds	r3, #1
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	4b16      	ldr	r3, [pc, #88]	@ (800cb54 <DMA2_Stream7_IRQHandler+0x70>)
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	4b14      	ldr	r3, [pc, #80]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	4b12      	ldr	r3, [pc, #72]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800cb06:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 800cb08:	4b13      	ldr	r3, [pc, #76]	@ (800cb58 <DMA2_Stream7_IRQHandler+0x74>)
 800cb0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d005      	beq.n	800cb1c <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 800cb10:	4b11      	ldr	r3, [pc, #68]	@ (800cb58 <DMA2_Stream7_IRQHandler+0x74>)
 800cb12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb14:	3304      	adds	r3, #4
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f9 f9e8 	bl	8005eec <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800cb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d005      	beq.n	800cb30 <DMA2_Stream7_IRQHandler+0x4c>
 800cb24:	4b0a      	ldr	r3, [pc, #40]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	4b08      	ldr	r3, [pc, #32]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	4b07      	ldr	r3, [pc, #28]	@ (800cb50 <DMA2_Stream7_IRQHandler+0x6c>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d109      	bne.n	800cb4c <DMA2_Stream7_IRQHandler+0x68>
 800cb38:	4b06      	ldr	r3, [pc, #24]	@ (800cb54 <DMA2_Stream7_IRQHandler+0x70>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d005      	beq.n	800cb4c <DMA2_Stream7_IRQHandler+0x68>
 800cb40:	4b04      	ldr	r3, [pc, #16]	@ (800cb54 <DMA2_Stream7_IRQHandler+0x70>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	4b02      	ldr	r3, [pc, #8]	@ (800cb54 <DMA2_Stream7_IRQHandler+0x70>)
 800cb4a:	701a      	strb	r2, [r3, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200061ba 	.word	0x200061ba
 800cb54:	200061b9 	.word	0x200061b9
 800cb58:	2000037c 	.word	0x2000037c

0800cb5c <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08c      	sub	sp, #48	@ 0x30
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 800cb66:	23ae      	movs	r3, #174	@ 0xae
 800cb68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    FLASH_EraseInitTypeDef eraseInitStruct  = {0};
 800cb6c:	f107 030c 	add.w	r3, r7, #12
 800cb70:	2200      	movs	r2, #0
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	605a      	str	r2, [r3, #4]
 800cb76:	609a      	str	r2, [r3, #8]
 800cb78:	60da      	str	r2, [r3, #12]
 800cb7a:	611a      	str	r2, [r3, #16]
    u32_t                  startSector      = 0u;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    u32_t                  endSector        = 0u;
 800cb80:	2300      	movs	r3, #0
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
    u32_t                  endSectorAddress = 0u;
 800cb84:	2300      	movs	r3, #0
 800cb86:	623b      	str	r3, [r7, #32]
    u32_t                  sectorError      = 0u;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 800cb8c:	f7f9 fc78 	bl	8006480 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f885 	bl	800cca0 <drv_flashGetSector>
 800cb96:	62b8      	str	r0, [r7, #40]	@ 0x28
    endSectorAddress = address + requiredSize - 1;
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	623b      	str	r3, [r7, #32]
    endSector = drv_flashGetSector(endSectorAddress);
 800cba2:	6a38      	ldr	r0, [r7, #32]
 800cba4:	f000 f87c 	bl	800cca0 <drv_flashGetSector>
 800cba8:	6278      	str	r0, [r7, #36]	@ 0x24

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800cbae:	2302      	movs	r3, #2
 800cbb0:	61fb      	str	r3, [r7, #28]
    eraseInitStruct.Sector        = startSector;
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 800cbb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 800cbc0:	f107 0208 	add.w	r2, r7, #8
 800cbc4:	f107 030c 	add.w	r3, r7, #12
 800cbc8:	4611      	mov	r1, r2
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f9 fdca 	bl	8006764 <HAL_FLASHEx_Erase>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <drv_flashErase+0x80>
    {
        flashEraseResult = GOS_SUCCESS;
 800cbd6:	2355      	movs	r3, #85	@ 0x55
 800cbd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 800cbdc:	f7f9 fc72 	bl	80064c4 <HAL_FLASH_Lock>

    return flashEraseResult;
 800cbe0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3730      	adds	r7, #48	@ 0x30
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <drv_flashWriteWithoutLock>:

/*
 * Function: drv_flashWriteWithoutLock
 */
gos_result_t drv_flashWriteWithoutLock (u32_t address, void_t* pData, u32_t size)
{
 800cbec:	b5b0      	push	{r4, r5, r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 800cbf8:	23ae      	movs	r3, #174	@ 0xae
 800cbfa:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 800cc00:	2300      	movs	r3, #0
 800cc02:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 800cc04:	2355      	movs	r3, #85	@ 0x55
 800cc06:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	61bb      	str	r3, [r7, #24]
 800cc0c:	e01c      	b.n	800cc48 <drv_flashWriteWithoutLock+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	617a      	str	r2, [r7, #20]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	4413      	add	r3, r2
 800cc20:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800cc22:	2200      	movs	r2, #0
 800cc24:	461c      	mov	r4, r3
 800cc26:	4615      	mov	r5, r2
 800cc28:	4622      	mov	r2, r4
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	2002      	movs	r0, #2
 800cc2e:	f7f9 fbd3 	bl	80063d8 <HAL_FLASH_Program>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d101      	bne.n	800cc3c <drv_flashWriteWithoutLock+0x50>
        {
            // Programming OK, continue.
            GOS_NOP;
 800cc38:	bf00      	nop
 800cc3a:	e002      	b.n	800cc42 <drv_flashWriteWithoutLock+0x56>
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 800cc3c:	23ae      	movs	r3, #174	@ 0xae
 800cc3e:	77fb      	strb	r3, [r7, #31]
            break;
 800cc40:	e006      	b.n	800cc50 <drv_flashWriteWithoutLock+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	3304      	adds	r3, #4
 800cc46:	61bb      	str	r3, [r7, #24]
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d3de      	bcc.n	800cc0e <drv_flashWriteWithoutLock+0x22>
        }
    }

    return flashWriteResult;
 800cc50:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bdb0      	pop	{r4, r5, r7, pc}

0800cc5a <drv_flashUnlock>:

/*
 * Function: drv_flashUnlock
 */
gos_result_t drv_flashUnlock (void_t)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 800cc60:	23ae      	movs	r3, #174	@ 0xae
 800cc62:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800cc64:	f7f9 fc0c 	bl	8006480 <HAL_FLASH_Unlock>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d101      	bne.n	800cc72 <drv_flashUnlock+0x18>
    {
        unlockResult = GOS_SUCCESS;
 800cc6e:	2355      	movs	r3, #85	@ 0x55
 800cc70:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return unlockResult;
 800cc72:	79fb      	ldrb	r3, [r7, #7]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <drv_flashLock>:

/*
 * Function: drv_flashLock
 */
gos_result_t drv_flashLock (void_t)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t lockResult = GOS_ERROR;
 800cc82:	23ae      	movs	r3, #174	@ 0xae
 800cc84:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Lock() == HAL_OK)
 800cc86:	f7f9 fc1d 	bl	80064c4 <HAL_FLASH_Lock>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d101      	bne.n	800cc94 <drv_flashLock+0x18>
    {
        lockResult = GOS_SUCCESS;
 800cc90:	2355      	movs	r3, #85	@ 0x55
 800cc92:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return lockResult;
 800cc94:	79fb      	ldrb	r3, [r7, #7]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
	...

0800cca0 <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a2e      	ldr	r2, [pc, #184]	@ (800cd68 <drv_flashGetSector+0xc8>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d206      	bcs.n	800ccc2 <drv_flashGetSector+0x22>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ccba:	d302      	bcc.n	800ccc2 <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	e04b      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a29      	ldr	r2, [pc, #164]	@ (800cd6c <drv_flashGetSector+0xcc>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d206      	bcs.n	800ccd8 <drv_flashGetSector+0x38>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a26      	ldr	r2, [pc, #152]	@ (800cd68 <drv_flashGetSector+0xc8>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d302      	bcc.n	800ccd8 <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	60fb      	str	r3, [r7, #12]
 800ccd6:	e040      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a25      	ldr	r2, [pc, #148]	@ (800cd70 <drv_flashGetSector+0xd0>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d206      	bcs.n	800ccee <drv_flashGetSector+0x4e>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a22      	ldr	r2, [pc, #136]	@ (800cd6c <drv_flashGetSector+0xcc>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d302      	bcc.n	800ccee <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 800cce8:	2302      	movs	r3, #2
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	e035      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a20      	ldr	r2, [pc, #128]	@ (800cd74 <drv_flashGetSector+0xd4>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d806      	bhi.n	800cd04 <drv_flashGetSector+0x64>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd70 <drv_flashGetSector+0xd0>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d302      	bcc.n	800cd04 <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	e02a      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a1c      	ldr	r2, [pc, #112]	@ (800cd78 <drv_flashGetSector+0xd8>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d806      	bhi.n	800cd1a <drv_flashGetSector+0x7a>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a19      	ldr	r2, [pc, #100]	@ (800cd74 <drv_flashGetSector+0xd4>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d902      	bls.n	800cd1a <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 800cd14:	2304      	movs	r3, #4
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e01f      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a17      	ldr	r2, [pc, #92]	@ (800cd7c <drv_flashGetSector+0xdc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d806      	bhi.n	800cd30 <drv_flashGetSector+0x90>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a14      	ldr	r2, [pc, #80]	@ (800cd78 <drv_flashGetSector+0xd8>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d902      	bls.n	800cd30 <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 800cd2a:	2305      	movs	r3, #5
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	e014      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a13      	ldr	r2, [pc, #76]	@ (800cd80 <drv_flashGetSector+0xe0>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d806      	bhi.n	800cd46 <drv_flashGetSector+0xa6>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a10      	ldr	r2, [pc, #64]	@ (800cd7c <drv_flashGetSector+0xdc>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d902      	bls.n	800cd46 <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 800cd40:	2306      	movs	r3, #6
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e009      	b.n	800cd5a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a0e      	ldr	r2, [pc, #56]	@ (800cd84 <drv_flashGetSector+0xe4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d805      	bhi.n	800cd5a <drv_flashGetSector+0xba>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a0b      	ldr	r2, [pc, #44]	@ (800cd80 <drv_flashGetSector+0xe0>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d901      	bls.n	800cd5a <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 800cd56:	2307      	movs	r3, #7
 800cd58:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	08004000 	.word	0x08004000
 800cd6c:	08008000 	.word	0x08008000
 800cd70:	0800c000 	.word	0x0800c000
 800cd74:	0800ffff 	.word	0x0800ffff
 800cd78:	0801ffff 	.word	0x0801ffff
 800cd7c:	0803ffff 	.word	0x0803ffff
 800cd80:	0805ffff 	.word	0x0805ffff
 800cd84:	0807ffff 	.word	0x0807ffff

0800cd88 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 800cd8e:	2355      	movs	r3, #85	@ 0x55
 800cd90:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 800cd92:	2300      	movs	r3, #0
 800cd94:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800cd96:	2300      	movs	r3, #0
 800cd98:	71bb      	strb	r3, [r7, #6]
 800cd9a:	e00e      	b.n	800cdba <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	2b55      	cmp	r3, #85	@ 0x55
 800cda0:	d106      	bne.n	800cdb0 <drv_gpioInit+0x28>
 800cda2:	79bb      	ldrb	r3, [r7, #6]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 f81b 	bl	800cde0 <drv_gpioInitPin>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	71fb      	strb	r3, [r7, #7]
 800cdae:	e001      	b.n	800cdb4 <drv_gpioInit+0x2c>
 800cdb0:	23ae      	movs	r3, #174	@ 0xae
 800cdb2:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800cdb4:	79bb      	ldrb	r3, [r7, #6]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	71bb      	strb	r3, [r7, #6]
 800cdba:	79bb      	ldrb	r3, [r7, #6]
 800cdbc:	4a06      	ldr	r2, [pc, #24]	@ (800cdd8 <drv_gpioInit+0x50>)
 800cdbe:	6812      	ldr	r2, [r2, #0]
 800cdc0:	0892      	lsrs	r2, r2, #2
 800cdc2:	4906      	ldr	r1, [pc, #24]	@ (800cddc <drv_gpioInit+0x54>)
 800cdc4:	fba1 1202 	umull	r1, r2, r1, r2
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d3e7      	bcc.n	800cd9c <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	200003c0 	.word	0x200003c0
 800cddc:	24924925 	.word	0x24924925

0800cde0 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b089      	sub	sp, #36	@ 0x24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	4603      	mov	r3, r0
 800cde8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 800cdea:	23ae      	movs	r3, #174	@ 0xae
 800cdec:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 800cdee:	f107 0308 	add.w	r3, r7, #8
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]
 800cdf6:	605a      	str	r2, [r3, #4]
 800cdf8:	609a      	str	r2, [r3, #8]
 800cdfa:	60da      	str	r2, [r3, #12]
 800cdfc:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 800cdfe:	79fb      	ldrb	r3, [r7, #7]
 800ce00:	4a40      	ldr	r2, [pc, #256]	@ (800cf04 <drv_gpioInitPin+0x124>)
 800ce02:	6812      	ldr	r2, [r2, #0]
 800ce04:	0892      	lsrs	r2, r2, #2
 800ce06:	4940      	ldr	r1, [pc, #256]	@ (800cf08 <drv_gpioInitPin+0x128>)
 800ce08:	fba1 1202 	umull	r1, r2, r1, r2
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d274      	bcs.n	800cefa <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 800ce10:	79fa      	ldrb	r2, [r7, #7]
 800ce12:	493e      	ldr	r1, [pc, #248]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce14:	4613      	mov	r3, r2
 800ce16:	00db      	lsls	r3, r3, #3
 800ce18:	1a9b      	subs	r3, r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	440b      	add	r3, r1
 800ce1e:	3304      	adds	r3, #4
 800ce20:	881b      	ldrh	r3, [r3, #0]
 800ce22:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 800ce24:	79fa      	ldrb	r2, [r7, #7]
 800ce26:	4939      	ldr	r1, [pc, #228]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce28:	4613      	mov	r3, r2
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	440b      	add	r3, r1
 800ce32:	3308      	adds	r3, #8
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 800ce38:	79fa      	ldrb	r2, [r7, #7]
 800ce3a:	4934      	ldr	r1, [pc, #208]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	1a9b      	subs	r3, r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	440b      	add	r3, r1
 800ce46:	3310      	adds	r3, #16
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 800ce4c:	79fa      	ldrb	r2, [r7, #7]
 800ce4e:	492f      	ldr	r1, [pc, #188]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce50:	4613      	mov	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	440b      	add	r3, r1
 800ce5a:	330c      	adds	r3, #12
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 800ce60:	79fa      	ldrb	r2, [r7, #7]
 800ce62:	492a      	ldr	r1, [pc, #168]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce64:	4613      	mov	r3, r2
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	1a9b      	subs	r3, r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3314      	adds	r3, #20
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 800ce74:	79fa      	ldrb	r2, [r7, #7]
 800ce76:	4925      	ldr	r1, [pc, #148]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce78:	4613      	mov	r3, r2
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	1a9b      	subs	r3, r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	440b      	add	r3, r1
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f107 0208 	add.w	r2, r7, #8
 800ce88:	4611      	mov	r1, r2
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7f9 fd8c 	bl	80069a8 <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 800ce90:	79fa      	ldrb	r2, [r7, #7]
 800ce92:	491e      	ldr	r1, [pc, #120]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ce94:	4613      	mov	r3, r2
 800ce96:	00db      	lsls	r3, r3, #3
 800ce98:	1a9b      	subs	r3, r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	440b      	add	r3, r1
 800ce9e:	3318      	adds	r3, #24
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d00a      	beq.n	800cebc <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 800cea6:	79fa      	ldrb	r2, [r7, #7]
 800cea8:	4918      	ldr	r1, [pc, #96]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ceaa:	4613      	mov	r3, r2
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	1a9b      	subs	r3, r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	3318      	adds	r3, #24
 800ceb6:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11c      	bne.n	800cef6 <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 800cebc:	79fa      	ldrb	r2, [r7, #7]
 800cebe:	4913      	ldr	r1, [pc, #76]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800cec0:	4613      	mov	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	1a9b      	subs	r3, r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	440b      	add	r3, r1
 800ceca:	6818      	ldr	r0, [r3, #0]
 800cecc:	79fa      	ldrb	r2, [r7, #7]
 800cece:	490f      	ldr	r1, [pc, #60]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800ced0:	4613      	mov	r3, r2
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	1a9b      	subs	r3, r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	440b      	add	r3, r1
 800ceda:	3304      	adds	r3, #4
 800cedc:	8819      	ldrh	r1, [r3, #0]
 800cede:	79fa      	ldrb	r2, [r7, #7]
 800cee0:	4c0a      	ldr	r4, [pc, #40]	@ (800cf0c <drv_gpioInitPin+0x12c>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	00db      	lsls	r3, r3, #3
 800cee6:	1a9b      	subs	r3, r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4423      	add	r3, r4
 800ceec:	3318      	adds	r3, #24
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	f7f9 feed 	bl	8006cd0 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 800cef6:	2355      	movs	r3, #85	@ 0x55
 800cef8:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 800cefa:	7ffb      	ldrb	r3, [r7, #31]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3724      	adds	r7, #36	@ 0x24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd90      	pop	{r4, r7, pc}
 800cf04:	200003c0 	.word	0x200003c0
 800cf08:	24924925 	.word	0x24924925
 800cf0c:	0801cc98 	.word	0x0801cc98

0800cf10 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	460a      	mov	r2, r1
 800cf1a:	71fb      	strb	r3, [r7, #7]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 800cf20:	23ae      	movs	r3, #174	@ 0xae
 800cf22:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	4a13      	ldr	r2, [pc, #76]	@ (800cf74 <drv_gpioWritePin+0x64>)
 800cf28:	6812      	ldr	r2, [r2, #0]
 800cf2a:	0892      	lsrs	r2, r2, #2
 800cf2c:	4912      	ldr	r1, [pc, #72]	@ (800cf78 <drv_gpioWritePin+0x68>)
 800cf2e:	fba1 1202 	umull	r1, r2, r1, r2
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d219      	bcs.n	800cf6a <drv_gpioWritePin+0x5a>
 800cf36:	79bb      	ldrb	r3, [r7, #6]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d816      	bhi.n	800cf6a <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 800cf3c:	79fa      	ldrb	r2, [r7, #7]
 800cf3e:	490f      	ldr	r1, [pc, #60]	@ (800cf7c <drv_gpioWritePin+0x6c>)
 800cf40:	4613      	mov	r3, r2
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	1a9b      	subs	r3, r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	6818      	ldr	r0, [r3, #0]
 800cf4c:	79fa      	ldrb	r2, [r7, #7]
 800cf4e:	490b      	ldr	r1, [pc, #44]	@ (800cf7c <drv_gpioWritePin+0x6c>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	1a9b      	subs	r3, r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	79ba      	ldrb	r2, [r7, #6]
 800cf60:	4619      	mov	r1, r3
 800cf62:	f7f9 feb5 	bl	8006cd0 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 800cf66:	2355      	movs	r3, #85	@ 0x55
 800cf68:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	200003c0 	.word	0x200003c0
 800cf78:	24924925 	.word	0x24924925
 800cf7c:	0801cc98 	.word	0x0801cc98

0800cf80 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 800cf8a:	23ae      	movs	r3, #174	@ 0xae
 800cf8c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	4a11      	ldr	r2, [pc, #68]	@ (800cfd8 <drv_gpioTgglePin+0x58>)
 800cf92:	6812      	ldr	r2, [r2, #0]
 800cf94:	0892      	lsrs	r2, r2, #2
 800cf96:	4911      	ldr	r1, [pc, #68]	@ (800cfdc <drv_gpioTgglePin+0x5c>)
 800cf98:	fba1 1202 	umull	r1, r2, r1, r2
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d215      	bcs.n	800cfcc <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	490f      	ldr	r1, [pc, #60]	@ (800cfe0 <drv_gpioTgglePin+0x60>)
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	1a9b      	subs	r3, r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	79fa      	ldrb	r2, [r7, #7]
 800cfb2:	490b      	ldr	r1, [pc, #44]	@ (800cfe0 <drv_gpioTgglePin+0x60>)
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	00db      	lsls	r3, r3, #3
 800cfb8:	1a9b      	subs	r3, r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	440b      	add	r3, r1
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	f7f9 fe9d 	bl	8006d02 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 800cfc8:	2355      	movs	r3, #85	@ 0x55
 800cfca:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 800cfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	200003c0 	.word	0x200003c0
 800cfdc:	24924925 	.word	0x24924925
 800cfe0:	0801cc98 	.word	0x0801cc98

0800cfe4 <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800cfe8:	4b1d      	ldr	r3, [pc, #116]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d105      	bne.n	800cffc <EXTI9_5_IRQHandler+0x18>
 800cff0:	4b1c      	ldr	r3, [pc, #112]	@ (800d064 <EXTI9_5_IRQHandler+0x80>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	4b1a      	ldr	r3, [pc, #104]	@ (800d064 <EXTI9_5_IRQHandler+0x80>)
 800cffa:	701a      	strb	r2, [r3, #0]
 800cffc:	4b18      	ldr	r3, [pc, #96]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	4b16      	ldr	r3, [pc, #88]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800d006:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800d008:	2020      	movs	r0, #32
 800d00a:	f7f9 fe95 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800d00e:	2040      	movs	r0, #64	@ 0x40
 800d010:	f7f9 fe92 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800d014:	2080      	movs	r0, #128	@ 0x80
 800d016:	f7f9 fe8f 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d01a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d01e:	f7f9 fe8b 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800d022:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d026:	f7f9 fe87 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 800d02a:	4b0d      	ldr	r3, [pc, #52]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d005      	beq.n	800d03e <EXTI9_5_IRQHandler+0x5a>
 800d032:	4b0b      	ldr	r3, [pc, #44]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	3b01      	subs	r3, #1
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b09      	ldr	r3, [pc, #36]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800d03c:	701a      	strb	r2, [r3, #0]
 800d03e:	4b08      	ldr	r3, [pc, #32]	@ (800d060 <EXTI9_5_IRQHandler+0x7c>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d109      	bne.n	800d05a <EXTI9_5_IRQHandler+0x76>
 800d046:	4b07      	ldr	r3, [pc, #28]	@ (800d064 <EXTI9_5_IRQHandler+0x80>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <EXTI9_5_IRQHandler+0x76>
 800d04e:	4b05      	ldr	r3, [pc, #20]	@ (800d064 <EXTI9_5_IRQHandler+0x80>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	3b01      	subs	r3, #1
 800d054:	b2da      	uxtb	r2, r3
 800d056:	4b03      	ldr	r3, [pc, #12]	@ (800d064 <EXTI9_5_IRQHandler+0x80>)
 800d058:	701a      	strb	r2, [r3, #0]
}
 800d05a:	bf00      	nop
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	200061ba 	.word	0x200061ba
 800d064:	200061b9 	.word	0x200061b9

0800d068 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800d06c:	4b20      	ldr	r3, [pc, #128]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d105      	bne.n	800d080 <EXTI15_10_IRQHandler+0x18>
 800d074:	4b1f      	ldr	r3, [pc, #124]	@ (800d0f4 <EXTI15_10_IRQHandler+0x8c>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	3301      	adds	r3, #1
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	4b1d      	ldr	r3, [pc, #116]	@ (800d0f4 <EXTI15_10_IRQHandler+0x8c>)
 800d07e:	701a      	strb	r2, [r3, #0]
 800d080:	4b1b      	ldr	r3, [pc, #108]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	3301      	adds	r3, #1
 800d086:	b2da      	uxtb	r2, r3
 800d088:	4b19      	ldr	r3, [pc, #100]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d08a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800d08c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d090:	f7f9 fe52 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800d094:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d098:	f7f9 fe4e 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800d09c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d0a0:	f7f9 fe4a 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800d0a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d0a8:	f7f9 fe46 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800d0ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d0b0:	f7f9 fe42 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800d0b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d0b8:	f7f9 fe3e 	bl	8006d38 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 800d0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d005      	beq.n	800d0d0 <EXTI15_10_IRQHandler+0x68>
 800d0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	4b08      	ldr	r3, [pc, #32]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	4b07      	ldr	r3, [pc, #28]	@ (800d0f0 <EXTI15_10_IRQHandler+0x88>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d109      	bne.n	800d0ec <EXTI15_10_IRQHandler+0x84>
 800d0d8:	4b06      	ldr	r3, [pc, #24]	@ (800d0f4 <EXTI15_10_IRQHandler+0x8c>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d005      	beq.n	800d0ec <EXTI15_10_IRQHandler+0x84>
 800d0e0:	4b04      	ldr	r3, [pc, #16]	@ (800d0f4 <EXTI15_10_IRQHandler+0x8c>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	4b02      	ldr	r3, [pc, #8]	@ (800d0f4 <EXTI15_10_IRQHandler+0x8c>)
 800d0ea:	701a      	strb	r2, [r3, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	200061ba 	.word	0x200061ba
 800d0f4:	200061b9 	.word	0x200061b9

0800d0f8 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 800d102:	4b27      	ldr	r3, [pc, #156]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d105      	bne.n	800d116 <HAL_GPIO_EXTI_Callback+0x1e>
 800d10a:	4b26      	ldr	r3, [pc, #152]	@ (800d1a4 <HAL_GPIO_EXTI_Callback+0xac>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	3301      	adds	r3, #1
 800d110:	b2da      	uxtb	r2, r3
 800d112:	4b24      	ldr	r3, [pc, #144]	@ (800d1a4 <HAL_GPIO_EXTI_Callback+0xac>)
 800d114:	701a      	strb	r2, [r3, #0]
 800d116:	4b22      	ldr	r3, [pc, #136]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	3301      	adds	r3, #1
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	4b20      	ldr	r3, [pc, #128]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d120:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 800d122:	2300      	movs	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800d126:	2300      	movs	r3, #0
 800d128:	73fb      	strb	r3, [r7, #15]
 800d12a:	e016      	b.n	800d15a <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	4a1e      	ldr	r2, [pc, #120]	@ (800d1a8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	4413      	add	r3, r2
 800d134:	889b      	ldrh	r3, [r3, #4]
 800d136:	88fa      	ldrh	r2, [r7, #6]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d10b      	bne.n	800d154 <HAL_GPIO_EXTI_Callback+0x5c>
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	4a1a      	ldr	r2, [pc, #104]	@ (800d1a8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800d140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d005      	beq.n	800d154 <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	4a17      	ldr	r2, [pc, #92]	@ (800d1a8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800d14c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d150:	4798      	blx	r3
                break;
 800d152:	e008      	b.n	800d166 <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	3301      	adds	r3, #1
 800d158:	73fb      	strb	r3, [r7, #15]
 800d15a:	7bfa      	ldrb	r2, [r7, #15]
 800d15c:	4b13      	ldr	r3, [pc, #76]	@ (800d1ac <HAL_GPIO_EXTI_Callback+0xb4>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	08db      	lsrs	r3, r3, #3
 800d162:	429a      	cmp	r2, r3
 800d164:	d3e2      	bcc.n	800d12c <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 800d166:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <HAL_GPIO_EXTI_Callback+0x82>
 800d16e:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	3b01      	subs	r3, #1
 800d174:	b2da      	uxtb	r2, r3
 800d176:	4b0a      	ldr	r3, [pc, #40]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	4b09      	ldr	r3, [pc, #36]	@ (800d1a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <HAL_GPIO_EXTI_Callback+0x9e>
 800d182:	4b08      	ldr	r3, [pc, #32]	@ (800d1a4 <HAL_GPIO_EXTI_Callback+0xac>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d005      	beq.n	800d196 <HAL_GPIO_EXTI_Callback+0x9e>
 800d18a:	4b06      	ldr	r3, [pc, #24]	@ (800d1a4 <HAL_GPIO_EXTI_Callback+0xac>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	3b01      	subs	r3, #1
 800d190:	b2da      	uxtb	r2, r3
 800d192:	4b04      	ldr	r3, [pc, #16]	@ (800d1a4 <HAL_GPIO_EXTI_Callback+0xac>)
 800d194:	701a      	strb	r2, [r3, #0]
}
 800d196:	bf00      	nop
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	200061ba 	.word	0x200061ba
 800d1a4:	200061b9 	.word	0x200061b9
 800d1a8:	0801ce04 	.word	0x0801ce04
 800d1ac:	2000180c 	.word	0x2000180c

0800d1b0 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 800d1b6:	23ae      	movs	r3, #174	@ 0xae
 800d1b8:	71fb      	strb	r3, [r7, #7]
    u8_t         itIdx              = 0u;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800d1be:	2300      	movs	r3, #0
 800d1c0:	71bb      	strb	r3, [r7, #6]
 800d1c2:	e02c      	b.n	800d21e <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 800d1c4:	79ba      	ldrb	r2, [r7, #6]
 800d1c6:	491e      	ldr	r1, [pc, #120]	@ (800d240 <drv_itInit+0x90>)
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	f993 0000 	ldrsb.w	r0, [r3]
 800d1d6:	79ba      	ldrb	r2, [r7, #6]
 800d1d8:	4919      	ldr	r1, [pc, #100]	@ (800d240 <drv_itInit+0x90>)
 800d1da:	4613      	mov	r3, r2
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	6819      	ldr	r1, [r3, #0]
 800d1e8:	79ba      	ldrb	r2, [r7, #6]
 800d1ea:	4c15      	ldr	r4, [pc, #84]	@ (800d240 <drv_itInit+0x90>)
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4423      	add	r3, r4
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7f8 fca7 	bl	8005b4e <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 800d200:	79ba      	ldrb	r2, [r7, #6]
 800d202:	490f      	ldr	r1, [pc, #60]	@ (800d240 <drv_itInit+0x90>)
 800d204:	4613      	mov	r3, r2
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	440b      	add	r3, r1
 800d20e:	f993 3000 	ldrsb.w	r3, [r3]
 800d212:	4618      	mov	r0, r3
 800d214:	f7f8 fcb7 	bl	8005b86 <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800d218:	79bb      	ldrb	r3, [r7, #6]
 800d21a:	3301      	adds	r3, #1
 800d21c:	71bb      	strb	r3, [r7, #6]
 800d21e:	79ba      	ldrb	r2, [r7, #6]
 800d220:	4b08      	ldr	r3, [pc, #32]	@ (800d244 <drv_itInit+0x94>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4908      	ldr	r1, [pc, #32]	@ (800d248 <drv_itInit+0x98>)
 800d226:	fba1 1303 	umull	r1, r3, r1, r3
 800d22a:	08db      	lsrs	r3, r3, #3
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d3c9      	bcc.n	800d1c4 <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 800d230:	2355      	movs	r3, #85	@ 0x55
 800d232:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 800d234:	79fb      	ldrb	r3, [r7, #7]
}
 800d236:	4618      	mov	r0, r3
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd90      	pop	{r4, r7, pc}
 800d23e:	bf00      	nop
 800d240:	0801ce04 	.word	0x0801ce04
 800d244:	200003c4 	.word	0x200003c4
 800d248:	aaaaaaab 	.word	0xaaaaaaab

0800d24c <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af02      	add	r7, sp, #8
 800d252:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800d254:	23ae      	movs	r3, #174	@ 0xae
 800d256:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800d258:	2300      	movs	r3, #0
 800d25a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800d25c:	4b0d      	ldr	r3, [pc, #52]	@ (800d294 <drv_shellTransmitString+0x48>)
 800d25e:	785b      	ldrb	r3, [r3, #1]
 800d260:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800d262:	7bbb      	ldrb	r3, [r7, #14]
 800d264:	2b05      	cmp	r3, #5
 800d266:	d810      	bhi.n	800d28a <drv_shellTransmitString+0x3e>
        {
            uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7f6 ff39 	bl	80040e0 <strlen>
 800d26e:	4603      	mov	r3, r0
 800d270:	b29a      	uxth	r2, r3
 800d272:	4b09      	ldr	r3, [pc, #36]	@ (800d298 <drv_shellTransmitString+0x4c>)
 800d274:	6959      	ldr	r1, [r3, #20]
 800d276:	4b08      	ldr	r3, [pc, #32]	@ (800d298 <drv_shellTransmitString+0x4c>)
 800d278:	699b      	ldr	r3, [r3, #24]
 800d27a:	7bb8      	ldrb	r0, [r7, #14]
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	460b      	mov	r3, r1
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	f001 fb31 	bl	800e8e8 <drv_uartTransmitIT>
 800d286:	4603      	mov	r3, r0
 800d288:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	0801cf18 	.word	0x0801cf18
 800d298:	20000438 	.word	0x20000438

0800d29c <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af02      	add	r7, sp, #8
 800d2a2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800d2a4:	23ae      	movs	r3, #174	@ 0xae
 800d2a6:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800d2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d2dc <drv_shellReceiveChar+0x40>)
 800d2ae:	785b      	ldrb	r3, [r3, #1]
 800d2b0:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800d2b2:	7bbb      	ldrb	r3, [r7, #14]
 800d2b4:	2b05      	cmp	r3, #5
 800d2b6:	d80c      	bhi.n	800d2d2 <drv_shellReceiveChar+0x36>
        {
            uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 800d2b8:	4b09      	ldr	r3, [pc, #36]	@ (800d2e0 <drv_shellReceiveChar+0x44>)
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	4b08      	ldr	r3, [pc, #32]	@ (800d2e0 <drv_shellReceiveChar+0x44>)
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	7bb8      	ldrb	r0, [r7, #14]
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	f001 fb7d 	bl	800e9c8 <drv_uartReceiveIT>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	0801cf18 	.word	0x0801cf18
 800d2e0:	20000438 	.word	0x20000438

0800d2e4 <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 800d2ea:	2355      	movs	r3, #85	@ 0x55
 800d2ec:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	71bb      	strb	r3, [r7, #6]
 800d2f6:	e00e      	b.n	800d316 <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	2b55      	cmp	r3, #85	@ 0x55
 800d2fc:	d106      	bne.n	800d30c <drv_spiInit+0x28>
 800d2fe:	79bb      	ldrb	r3, [r7, #6]
 800d300:	4618      	mov	r0, r3
 800d302:	f000 f81b 	bl	800d33c <drv_spiInitInstance>
 800d306:	4603      	mov	r3, r0
 800d308:	71fb      	strb	r3, [r7, #7]
 800d30a:	e001      	b.n	800d310 <drv_spiInit+0x2c>
 800d30c:	23ae      	movs	r3, #174	@ 0xae
 800d30e:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800d310:	79bb      	ldrb	r3, [r7, #6]
 800d312:	3301      	adds	r3, #1
 800d314:	71bb      	strb	r3, [r7, #6]
 800d316:	79bb      	ldrb	r3, [r7, #6]
 800d318:	4a06      	ldr	r2, [pc, #24]	@ (800d334 <drv_spiInit+0x50>)
 800d31a:	6812      	ldr	r2, [r2, #0]
 800d31c:	08d2      	lsrs	r2, r2, #3
 800d31e:	4906      	ldr	r1, [pc, #24]	@ (800d338 <drv_spiInit+0x54>)
 800d320:	fba1 1202 	umull	r1, r2, r1, r2
 800d324:	4293      	cmp	r3, r2
 800d326:	d3e7      	bcc.n	800d2f8 <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 800d328:	79fb      	ldrb	r3, [r7, #7]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	200003c8 	.word	0x200003c8
 800d338:	24924925 	.word	0x24924925

0800d33c <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 800d346:	23ae      	movs	r3, #174	@ 0xae
 800d348:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 800d34a:	2300      	movs	r3, #0
 800d34c:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 800d34e:	79fb      	ldrb	r3, [r7, #7]
 800d350:	4aa1      	ldr	r2, [pc, #644]	@ (800d5d8 <drv_spiInitInstance+0x29c>)
 800d352:	6812      	ldr	r2, [r2, #0]
 800d354:	08d2      	lsrs	r2, r2, #3
 800d356:	49a1      	ldr	r1, [pc, #644]	@ (800d5dc <drv_spiInitInstance+0x2a0>)
 800d358:	fba1 1202 	umull	r1, r2, r1, r2
 800d35c:	4293      	cmp	r3, r2
 800d35e:	f080 8135 	bcs.w	800d5cc <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 800d362:	79fa      	ldrb	r2, [r7, #7]
 800d364:	499e      	ldr	r1, [pc, #632]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d366:	4613      	mov	r3, r2
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	1a9b      	subs	r3, r3, r2
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	440b      	add	r3, r1
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 800d374:	7bba      	ldrb	r2, [r7, #14]
 800d376:	7bbb      	ldrb	r3, [r7, #14]
 800d378:	499a      	ldr	r1, [pc, #616]	@ (800d5e4 <drv_spiInitInstance+0x2a8>)
 800d37a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d37e:	499a      	ldr	r1, [pc, #616]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d380:	2058      	movs	r0, #88	@ 0x58
 800d382:	fb00 f303 	mul.w	r3, r0, r3
 800d386:	440b      	add	r3, r1
 800d388:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 800d38a:	79fa      	ldrb	r2, [r7, #7]
 800d38c:	7bb9      	ldrb	r1, [r7, #14]
 800d38e:	4894      	ldr	r0, [pc, #592]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d390:	4613      	mov	r3, r2
 800d392:	00db      	lsls	r3, r3, #3
 800d394:	1a9b      	subs	r3, r3, r2
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	4403      	add	r3, r0
 800d39a:	3304      	adds	r3, #4
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4892      	ldr	r0, [pc, #584]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d3a0:	2358      	movs	r3, #88	@ 0x58
 800d3a2:	fb01 f303 	mul.w	r3, r1, r3
 800d3a6:	4403      	add	r3, r0
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 800d3ac:	79fa      	ldrb	r2, [r7, #7]
 800d3ae:	7bb9      	ldrb	r1, [r7, #14]
 800d3b0:	488b      	ldr	r0, [pc, #556]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	4403      	add	r3, r0
 800d3bc:	3308      	adds	r3, #8
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	4889      	ldr	r0, [pc, #548]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d3c2:	2358      	movs	r3, #88	@ 0x58
 800d3c4:	fb01 f303 	mul.w	r3, r1, r3
 800d3c8:	4403      	add	r3, r0
 800d3ca:	3308      	adds	r3, #8
 800d3cc:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 800d3ce:	79fa      	ldrb	r2, [r7, #7]
 800d3d0:	7bb9      	ldrb	r1, [r7, #14]
 800d3d2:	4883      	ldr	r0, [pc, #524]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	1a9b      	subs	r3, r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	4403      	add	r3, r0
 800d3de:	330c      	adds	r3, #12
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	4881      	ldr	r0, [pc, #516]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d3e4:	2358      	movs	r3, #88	@ 0x58
 800d3e6:	fb01 f303 	mul.w	r3, r1, r3
 800d3ea:	4403      	add	r3, r0
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 800d3f0:	79fa      	ldrb	r2, [r7, #7]
 800d3f2:	7bb9      	ldrb	r1, [r7, #14]
 800d3f4:	487a      	ldr	r0, [pc, #488]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	1a9b      	subs	r3, r3, r2
 800d3fc:	00db      	lsls	r3, r3, #3
 800d3fe:	4403      	add	r3, r0
 800d400:	3310      	adds	r3, #16
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	4878      	ldr	r0, [pc, #480]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d406:	2358      	movs	r3, #88	@ 0x58
 800d408:	fb01 f303 	mul.w	r3, r1, r3
 800d40c:	4403      	add	r3, r0
 800d40e:	3310      	adds	r3, #16
 800d410:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 800d412:	79fa      	ldrb	r2, [r7, #7]
 800d414:	7bb9      	ldrb	r1, [r7, #14]
 800d416:	4872      	ldr	r0, [pc, #456]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d418:	4613      	mov	r3, r2
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	1a9b      	subs	r3, r3, r2
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	4403      	add	r3, r0
 800d422:	3314      	adds	r3, #20
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	4870      	ldr	r0, [pc, #448]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d428:	2358      	movs	r3, #88	@ 0x58
 800d42a:	fb01 f303 	mul.w	r3, r1, r3
 800d42e:	4403      	add	r3, r0
 800d430:	3314      	adds	r3, #20
 800d432:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 800d434:	79fa      	ldrb	r2, [r7, #7]
 800d436:	7bb9      	ldrb	r1, [r7, #14]
 800d438:	4869      	ldr	r0, [pc, #420]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d43a:	4613      	mov	r3, r2
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	1a9b      	subs	r3, r3, r2
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	4403      	add	r3, r0
 800d444:	3318      	adds	r3, #24
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	4867      	ldr	r0, [pc, #412]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d44a:	2358      	movs	r3, #88	@ 0x58
 800d44c:	fb01 f303 	mul.w	r3, r1, r3
 800d450:	4403      	add	r3, r0
 800d452:	3318      	adds	r3, #24
 800d454:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 800d456:	79fa      	ldrb	r2, [r7, #7]
 800d458:	7bb9      	ldrb	r1, [r7, #14]
 800d45a:	4861      	ldr	r0, [pc, #388]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d45c:	4613      	mov	r3, r2
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	1a9b      	subs	r3, r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	4403      	add	r3, r0
 800d466:	331c      	adds	r3, #28
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	485f      	ldr	r0, [pc, #380]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d46c:	2358      	movs	r3, #88	@ 0x58
 800d46e:	fb01 f303 	mul.w	r3, r1, r3
 800d472:	4403      	add	r3, r0
 800d474:	331c      	adds	r3, #28
 800d476:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 800d478:	79fa      	ldrb	r2, [r7, #7]
 800d47a:	7bb9      	ldrb	r1, [r7, #14]
 800d47c:	4858      	ldr	r0, [pc, #352]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d47e:	4613      	mov	r3, r2
 800d480:	00db      	lsls	r3, r3, #3
 800d482:	1a9b      	subs	r3, r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	4403      	add	r3, r0
 800d488:	3320      	adds	r3, #32
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	4856      	ldr	r0, [pc, #344]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d48e:	2358      	movs	r3, #88	@ 0x58
 800d490:	fb01 f303 	mul.w	r3, r1, r3
 800d494:	4403      	add	r3, r0
 800d496:	3320      	adds	r3, #32
 800d498:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 800d49a:	79fa      	ldrb	r2, [r7, #7]
 800d49c:	7bb9      	ldrb	r1, [r7, #14]
 800d49e:	4850      	ldr	r0, [pc, #320]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	1a9b      	subs	r3, r3, r2
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	4403      	add	r3, r0
 800d4aa:	3324      	adds	r3, #36	@ 0x24
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	484e      	ldr	r0, [pc, #312]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d4b0:	2358      	movs	r3, #88	@ 0x58
 800d4b2:	fb01 f303 	mul.w	r3, r1, r3
 800d4b6:	4403      	add	r3, r0
 800d4b8:	3324      	adds	r3, #36	@ 0x24
 800d4ba:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 800d4bc:	79fa      	ldrb	r2, [r7, #7]
 800d4be:	7bb9      	ldrb	r1, [r7, #14]
 800d4c0:	4847      	ldr	r0, [pc, #284]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	1a9b      	subs	r3, r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	4403      	add	r3, r0
 800d4cc:	3328      	adds	r3, #40	@ 0x28
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	4845      	ldr	r0, [pc, #276]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d4d2:	2358      	movs	r3, #88	@ 0x58
 800d4d4:	fb01 f303 	mul.w	r3, r1, r3
 800d4d8:	4403      	add	r3, r0
 800d4da:	3328      	adds	r3, #40	@ 0x28
 800d4dc:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 800d4de:	79fa      	ldrb	r2, [r7, #7]
 800d4e0:	7bb9      	ldrb	r1, [r7, #14]
 800d4e2:	483f      	ldr	r0, [pc, #252]	@ (800d5e0 <drv_spiInitInstance+0x2a4>)
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	4403      	add	r3, r0
 800d4ee:	332c      	adds	r3, #44	@ 0x2c
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	483d      	ldr	r0, [pc, #244]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d4f4:	2358      	movs	r3, #88	@ 0x58
 800d4f6:	fb01 f303 	mul.w	r3, r1, r3
 800d4fa:	4403      	add	r3, r0
 800d4fc:	332c      	adds	r3, #44	@ 0x2c
 800d4fe:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800d500:	7bbb      	ldrb	r3, [r7, #14]
 800d502:	2258      	movs	r2, #88	@ 0x58
 800d504:	fb02 f303 	mul.w	r3, r2, r3
 800d508:	4a37      	ldr	r2, [pc, #220]	@ (800d5e8 <drv_spiInitInstance+0x2ac>)
 800d50a:	4413      	add	r3, r2
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fa fac7 	bl	8007aa0 <HAL_SPI_Init>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d159      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4a33      	ldr	r2, [pc, #204]	@ (800d5ec <drv_spiInitInstance+0x2b0>)
 800d51e:	4413      	add	r3, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f008 fe11 	bl	8016148 <gos_mutexInit>
 800d526:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800d528:	2b55      	cmp	r3, #85	@ 0x55
 800d52a:	d14f      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d52c:	7bba      	ldrb	r2, [r7, #14]
 800d52e:	4613      	mov	r3, r2
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	4413      	add	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4a2e      	ldr	r2, [pc, #184]	@ (800d5f0 <drv_spiInitInstance+0x2b4>)
 800d538:	4413      	add	r3, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	f00a fea0 	bl	8018280 <gos_triggerInit>
 800d540:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800d542:	2b55      	cmp	r3, #85	@ 0x55
 800d544:	d142      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d546:	7bba      	ldrb	r2, [r7, #14]
 800d548:	4613      	mov	r3, r2
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4a28      	ldr	r2, [pc, #160]	@ (800d5f4 <drv_spiInitInstance+0x2b8>)
 800d552:	4413      	add	r3, r2
 800d554:	4618      	mov	r0, r3
 800d556:	f00a fe93 	bl	8018280 <gos_triggerInit>
 800d55a:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d55c:	2b55      	cmp	r3, #85	@ 0x55
 800d55e:	d135      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800d560:	7bba      	ldrb	r2, [r7, #14]
 800d562:	4613      	mov	r3, r2
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	4413      	add	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	4a23      	ldr	r2, [pc, #140]	@ (800d5f8 <drv_spiInitInstance+0x2bc>)
 800d56c:	4413      	add	r3, r2
 800d56e:	4618      	mov	r0, r3
 800d570:	f00a fe86 	bl	8018280 <gos_triggerInit>
 800d574:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d576:	2b55      	cmp	r3, #85	@ 0x55
 800d578:	d128      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d57a:	7bba      	ldrb	r2, [r7, #14]
 800d57c:	4613      	mov	r3, r2
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	4413      	add	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4a1a      	ldr	r2, [pc, #104]	@ (800d5f0 <drv_spiInitInstance+0x2b4>)
 800d586:	4413      	add	r3, r2
 800d588:	4618      	mov	r0, r3
 800d58a:	f00a fe95 	bl	80182b8 <gos_triggerReset>
 800d58e:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800d590:	2b55      	cmp	r3, #85	@ 0x55
 800d592:	d11b      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d594:	7bba      	ldrb	r2, [r7, #14]
 800d596:	4613      	mov	r3, r2
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4a15      	ldr	r2, [pc, #84]	@ (800d5f4 <drv_spiInitInstance+0x2b8>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f00a fe88 	bl	80182b8 <gos_triggerReset>
 800d5a8:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d5aa:	2b55      	cmp	r3, #85	@ 0x55
 800d5ac:	d10e      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 800d5ae:	7bba      	ldrb	r2, [r7, #14]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	4413      	add	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4a0f      	ldr	r2, [pc, #60]	@ (800d5f8 <drv_spiInitInstance+0x2bc>)
 800d5ba:	4413      	add	r3, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f00a fe7b 	bl	80182b8 <gos_triggerReset>
 800d5c2:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800d5c4:	2b55      	cmp	r3, #85	@ 0x55
 800d5c6:	d101      	bne.n	800d5cc <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 800d5c8:	2355      	movs	r3, #85	@ 0x55
 800d5ca:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 800d5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	200003c8 	.word	0x200003c8
 800d5dc:	24924925 	.word	0x24924925
 800d5e0:	0801ce64 	.word	0x0801ce64
 800d5e4:	2000051c 	.word	0x2000051c
 800d5e8:	200024e8 	.word	0x200024e8
 800d5ec:	20002648 	.word	0x20002648
 800d5f0:	20002658 	.word	0x20002658
 800d5f4:	20002688 	.word	0x20002688
 800d5f8:	200026b8 	.word	0x200026b8

0800d5fc <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	607b      	str	r3, [r7, #4]
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]
 800d60a:	4613      	mov	r3, r2
 800d60c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 800d60e:	23ae      	movs	r3, #174	@ 0xae
 800d610:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4a28      	ldr	r2, [pc, #160]	@ (800d6b8 <drv_spiTransmitIT+0xbc>)
 800d618:	4413      	add	r3, r2
 800d61a:	6879      	ldr	r1, [r7, #4]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f008 fdad 	bl	801617c <gos_mutexLock>
 800d622:	4603      	mov	r3, r0
 800d624:	2b55      	cmp	r3, #85	@ 0x55
 800d626:	d13a      	bne.n	800d69e <drv_spiTransmitIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	2258      	movs	r2, #88	@ 0x58
 800d62c:	fb02 f303 	mul.w	r3, r2, r3
 800d630:	4a22      	ldr	r2, [pc, #136]	@ (800d6bc <drv_spiTransmitIT+0xc0>)
 800d632:	4413      	add	r3, r2
 800d634:	4618      	mov	r0, r3
 800d636:	f7fa fc43 	bl	8007ec0 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
 800d63c:	2258      	movs	r2, #88	@ 0x58
 800d63e:	fb02 f303 	mul.w	r3, r2, r3
 800d642:	4a1e      	ldr	r2, [pc, #120]	@ (800d6bc <drv_spiTransmitIT+0xc0>)
 800d644:	4413      	add	r3, r2
 800d646:	89ba      	ldrh	r2, [r7, #12]
 800d648:	68b9      	ldr	r1, [r7, #8]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fa fa8c 	bl	8007b68 <HAL_SPI_Transmit_IT>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d123      	bne.n	800d69e <drv_spiTransmitIT+0xa2>
        {
            if (triggerTmo > 0u)
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01e      	beq.n	800d69a <drv_spiTransmitIT+0x9e>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800d65c:	7bfa      	ldrb	r2, [r7, #15]
 800d65e:	4613      	mov	r3, r2
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4a16      	ldr	r2, [pc, #88]	@ (800d6c0 <drv_spiTransmitIT+0xc4>)
 800d668:	4413      	add	r3, r2
 800d66a:	6a3a      	ldr	r2, [r7, #32]
 800d66c:	2101      	movs	r1, #1
 800d66e:	4618      	mov	r0, r3
 800d670:	f00a fe7a 	bl	8018368 <gos_triggerWait>
 800d674:	4603      	mov	r3, r0
 800d676:	2b55      	cmp	r3, #85	@ 0x55
 800d678:	d111      	bne.n	800d69e <drv_spiTransmitIT+0xa2>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 800d67a:	7bfa      	ldrb	r2, [r7, #15]
 800d67c:	4613      	mov	r3, r2
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	4413      	add	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4a0e      	ldr	r2, [pc, #56]	@ (800d6c0 <drv_spiTransmitIT+0xc4>)
 800d686:	4413      	add	r3, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f00a fe15 	bl	80182b8 <gos_triggerReset>
 800d68e:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800d690:	2b55      	cmp	r3, #85	@ 0x55
 800d692:	d104      	bne.n	800d69e <drv_spiTransmitIT+0xa2>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 800d694:	2355      	movs	r3, #85	@ 0x55
 800d696:	75fb      	strb	r3, [r7, #23]
 800d698:	e001      	b.n	800d69e <drv_spiTransmitIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 800d69a:	2355      	movs	r3, #85	@ 0x55
 800d69c:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800d69e:	7bfb      	ldrb	r3, [r7, #15]
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4a05      	ldr	r2, [pc, #20]	@ (800d6b8 <drv_spiTransmitIT+0xbc>)
 800d6a4:	4413      	add	r3, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f008 fe6e 	bl	8016388 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20002648 	.word	0x20002648
 800d6bc:	200024e8 	.word	0x200024e8
 800d6c0:	20002688 	.word	0x20002688

0800d6c4 <drv_spiReceiveIT>:
 */
gos_result_t drv_spiReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607b      	str	r3, [r7, #4]
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverReceiveResult = GOS_ERROR;
 800d6d6:	23ae      	movs	r3, #174	@ 0xae
 800d6d8:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	4a28      	ldr	r2, [pc, #160]	@ (800d780 <drv_spiReceiveIT+0xbc>)
 800d6e0:	4413      	add	r3, r2
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f008 fd49 	bl	801617c <gos_mutexLock>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b55      	cmp	r3, #85	@ 0x55
 800d6ee:	d13a      	bne.n	800d766 <drv_spiReceiveIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2258      	movs	r2, #88	@ 0x58
 800d6f4:	fb02 f303 	mul.w	r3, r2, r3
 800d6f8:	4a22      	ldr	r2, [pc, #136]	@ (800d784 <drv_spiReceiveIT+0xc0>)
 800d6fa:	4413      	add	r3, r2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fa fbdf 	bl	8007ec0 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Receive_IT(&hspis[instance], pBuffer, size) == HAL_OK)
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	2258      	movs	r2, #88	@ 0x58
 800d706:	fb02 f303 	mul.w	r3, r2, r3
 800d70a:	4a1e      	ldr	r2, [pc, #120]	@ (800d784 <drv_spiReceiveIT+0xc0>)
 800d70c:	4413      	add	r3, r2
 800d70e:	89ba      	ldrh	r2, [r7, #12]
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	4618      	mov	r0, r3
 800d714:	f7fa faaa 	bl	8007c6c <HAL_SPI_Receive_IT>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d123      	bne.n	800d766 <drv_spiReceiveIT+0xa2>
        {
            if (triggerTmo > 0u)
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01e      	beq.n	800d762 <drv_spiReceiveIT+0x9e>
            {
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800d724:	7bfa      	ldrb	r2, [r7, #15]
 800d726:	4613      	mov	r3, r2
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4a16      	ldr	r2, [pc, #88]	@ (800d788 <drv_spiReceiveIT+0xc4>)
 800d730:	4413      	add	r3, r2
 800d732:	6a3a      	ldr	r2, [r7, #32]
 800d734:	2101      	movs	r1, #1
 800d736:	4618      	mov	r0, r3
 800d738:	f00a fe16 	bl	8018368 <gos_triggerWait>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b55      	cmp	r3, #85	@ 0x55
 800d740:	d111      	bne.n	800d766 <drv_spiReceiveIT+0xa2>
                    gos_triggerReset(&spiRxReadyTriggers[instance])                == GOS_SUCCESS)
 800d742:	7bfa      	ldrb	r2, [r7, #15]
 800d744:	4613      	mov	r3, r2
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	4413      	add	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4a0e      	ldr	r2, [pc, #56]	@ (800d788 <drv_spiReceiveIT+0xc4>)
 800d74e:	4413      	add	r3, r2
 800d750:	4618      	mov	r0, r3
 800d752:	f00a fdb1 	bl	80182b8 <gos_triggerReset>
 800d756:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800d758:	2b55      	cmp	r3, #85	@ 0x55
 800d75a:	d104      	bne.n	800d766 <drv_spiReceiveIT+0xa2>
                {
                    spiDriverReceiveResult = GOS_SUCCESS;
 800d75c:	2355      	movs	r3, #85	@ 0x55
 800d75e:	75fb      	strb	r3, [r7, #23]
 800d760:	e001      	b.n	800d766 <drv_spiReceiveIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverReceiveResult = GOS_SUCCESS;
 800d762:	2355      	movs	r3, #85	@ 0x55
 800d764:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800d766:	7bfb      	ldrb	r3, [r7, #15]
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4a05      	ldr	r2, [pc, #20]	@ (800d780 <drv_spiReceiveIT+0xbc>)
 800d76c:	4413      	add	r3, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f008 fe0a 	bl	8016388 <gos_mutexUnlock>

    return spiDriverReceiveResult;
 800d774:	7dfb      	ldrb	r3, [r7, #23]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3718      	adds	r7, #24
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20002648 	.word	0x20002648
 800d784:	200024e8 	.word	0x200024e8
 800d788:	20002658 	.word	0x20002658

0800d78c <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d8 <HAL_SPI_TxCpltCallback+0x4c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d103      	bne.n	800d7a8 <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800d7a0:	480e      	ldr	r0, [pc, #56]	@ (800d7dc <HAL_SPI_TxCpltCallback+0x50>)
 800d7a2:	f00a fe91 	bl	80184c8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800d7a6:	e012      	b.n	800d7ce <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <HAL_SPI_TxCpltCallback+0x4c>)
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d103      	bne.n	800d7bc <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800d7b4:	480a      	ldr	r0, [pc, #40]	@ (800d7e0 <HAL_SPI_TxCpltCallback+0x54>)
 800d7b6:	f00a fe87 	bl	80184c8 <gos_triggerIncrement>
}
 800d7ba:	e008      	b.n	800d7ce <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	4b05      	ldr	r3, [pc, #20]	@ (800d7d8 <HAL_SPI_TxCpltCallback+0x4c>)
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d102      	bne.n	800d7ce <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800d7c8:	4806      	ldr	r0, [pc, #24]	@ (800d7e4 <HAL_SPI_TxCpltCallback+0x58>)
 800d7ca:	f00a fe7d 	bl	80184c8 <gos_triggerIncrement>
}
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	2000051c 	.word	0x2000051c
 800d7dc:	20002688 	.word	0x20002688
 800d7e0:	20002694 	.word	0x20002694
 800d7e4:	200026a0 	.word	0x200026a0

0800d7e8 <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d834 <HAL_SPI_RxCpltCallback+0x4c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d103      	bne.n	800d804 <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800d7fc:	480e      	ldr	r0, [pc, #56]	@ (800d838 <HAL_SPI_RxCpltCallback+0x50>)
 800d7fe:	f00a fe63 	bl	80184c8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800d802:	e012      	b.n	800d82a <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	4b0a      	ldr	r3, [pc, #40]	@ (800d834 <HAL_SPI_RxCpltCallback+0x4c>)
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d103      	bne.n	800d818 <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800d810:	480a      	ldr	r0, [pc, #40]	@ (800d83c <HAL_SPI_RxCpltCallback+0x54>)
 800d812:	f00a fe59 	bl	80184c8 <gos_triggerIncrement>
}
 800d816:	e008      	b.n	800d82a <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	4b05      	ldr	r3, [pc, #20]	@ (800d834 <HAL_SPI_RxCpltCallback+0x4c>)
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	429a      	cmp	r2, r3
 800d822:	d102      	bne.n	800d82a <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800d824:	4806      	ldr	r0, [pc, #24]	@ (800d840 <HAL_SPI_RxCpltCallback+0x58>)
 800d826:	f00a fe4f 	bl	80184c8 <gos_triggerIncrement>
}
 800d82a:	bf00      	nop
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2000051c 	.word	0x2000051c
 800d838:	20002658 	.word	0x20002658
 800d83c:	20002664 	.word	0x20002664
 800d840:	20002670 	.word	0x20002670

0800d844 <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	4b0f      	ldr	r3, [pc, #60]	@ (800d890 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d103      	bne.n	800d860 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800d858:	480e      	ldr	r0, [pc, #56]	@ (800d894 <HAL_SPI_TxRxCpltCallback+0x50>)
 800d85a:	f00a fe35 	bl	80184c8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800d85e:	e012      	b.n	800d886 <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	4b0a      	ldr	r3, [pc, #40]	@ (800d890 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d103      	bne.n	800d874 <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800d86c:	480a      	ldr	r0, [pc, #40]	@ (800d898 <HAL_SPI_TxRxCpltCallback+0x54>)
 800d86e:	f00a fe2b 	bl	80184c8 <gos_triggerIncrement>
}
 800d872:	e008      	b.n	800d886 <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	4b05      	ldr	r3, [pc, #20]	@ (800d890 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d102      	bne.n	800d886 <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800d880:	4806      	ldr	r0, [pc, #24]	@ (800d89c <HAL_SPI_TxRxCpltCallback+0x58>)
 800d882:	f00a fe21 	bl	80184c8 <gos_triggerIncrement>
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	2000051c 	.word	0x2000051c
 800d894:	200026b8 	.word	0x200026b8
 800d898:	200026c4 	.word	0x200026c4
 800d89c:	200026d0 	.word	0x200026d0

0800d8a0 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800d8a4:	4b16      	ldr	r3, [pc, #88]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d105      	bne.n	800d8b8 <SPI1_IRQHandler+0x18>
 800d8ac:	4b15      	ldr	r3, [pc, #84]	@ (800d904 <SPI1_IRQHandler+0x64>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	4b13      	ldr	r3, [pc, #76]	@ (800d904 <SPI1_IRQHandler+0x64>)
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	4b11      	ldr	r3, [pc, #68]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8c2:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 800d8c4:	4810      	ldr	r0, [pc, #64]	@ (800d908 <SPI1_IRQHandler+0x68>)
 800d8c6:	f7fa fbf5 	bl	80080b4 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800d8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d005      	beq.n	800d8de <SPI1_IRQHandler+0x3e>
 800d8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	4b09      	ldr	r3, [pc, #36]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8dc:	701a      	strb	r2, [r3, #0]
 800d8de:	4b08      	ldr	r3, [pc, #32]	@ (800d900 <SPI1_IRQHandler+0x60>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d109      	bne.n	800d8fa <SPI1_IRQHandler+0x5a>
 800d8e6:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <SPI1_IRQHandler+0x64>)
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d005      	beq.n	800d8fa <SPI1_IRQHandler+0x5a>
 800d8ee:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <SPI1_IRQHandler+0x64>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	4b03      	ldr	r3, [pc, #12]	@ (800d904 <SPI1_IRQHandler+0x64>)
 800d8f8:	701a      	strb	r2, [r3, #0]
}
 800d8fa:	bf00      	nop
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	200061ba 	.word	0x200061ba
 800d904:	200061b9 	.word	0x200061b9
 800d908:	200024e8 	.word	0x200024e8

0800d90c <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800d910:	4b16      	ldr	r3, [pc, #88]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d105      	bne.n	800d924 <SPI2_IRQHandler+0x18>
 800d918:	4b15      	ldr	r3, [pc, #84]	@ (800d970 <SPI2_IRQHandler+0x64>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	3301      	adds	r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	4b13      	ldr	r3, [pc, #76]	@ (800d970 <SPI2_IRQHandler+0x64>)
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	4b11      	ldr	r3, [pc, #68]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	3301      	adds	r3, #1
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	4b0f      	ldr	r3, [pc, #60]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d92e:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 800d930:	4810      	ldr	r0, [pc, #64]	@ (800d974 <SPI2_IRQHandler+0x68>)
 800d932:	f7fa fbbf 	bl	80080b4 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800d936:	4b0d      	ldr	r3, [pc, #52]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d005      	beq.n	800d94a <SPI2_IRQHandler+0x3e>
 800d93e:	4b0b      	ldr	r3, [pc, #44]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	3b01      	subs	r3, #1
 800d944:	b2da      	uxtb	r2, r3
 800d946:	4b09      	ldr	r3, [pc, #36]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d948:	701a      	strb	r2, [r3, #0]
 800d94a:	4b08      	ldr	r3, [pc, #32]	@ (800d96c <SPI2_IRQHandler+0x60>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d109      	bne.n	800d966 <SPI2_IRQHandler+0x5a>
 800d952:	4b07      	ldr	r3, [pc, #28]	@ (800d970 <SPI2_IRQHandler+0x64>)
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d005      	beq.n	800d966 <SPI2_IRQHandler+0x5a>
 800d95a:	4b05      	ldr	r3, [pc, #20]	@ (800d970 <SPI2_IRQHandler+0x64>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	3b01      	subs	r3, #1
 800d960:	b2da      	uxtb	r2, r3
 800d962:	4b03      	ldr	r3, [pc, #12]	@ (800d970 <SPI2_IRQHandler+0x64>)
 800d964:	701a      	strb	r2, [r3, #0]
}
 800d966:	bf00      	nop
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	200061ba 	.word	0x200061ba
 800d970:	200061b9 	.word	0x200061b9
 800d974:	20002540 	.word	0x20002540

0800d978 <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800d97c:	4b16      	ldr	r3, [pc, #88]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d105      	bne.n	800d990 <SPI3_IRQHandler+0x18>
 800d984:	4b15      	ldr	r3, [pc, #84]	@ (800d9dc <SPI3_IRQHandler+0x64>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	3301      	adds	r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	4b13      	ldr	r3, [pc, #76]	@ (800d9dc <SPI3_IRQHandler+0x64>)
 800d98e:	701a      	strb	r2, [r3, #0]
 800d990:	4b11      	ldr	r3, [pc, #68]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	3301      	adds	r3, #1
 800d996:	b2da      	uxtb	r2, r3
 800d998:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d99a:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 800d99c:	4810      	ldr	r0, [pc, #64]	@ (800d9e0 <SPI3_IRQHandler+0x68>)
 800d99e:	f7fa fb89 	bl	80080b4 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d005      	beq.n	800d9b6 <SPI3_IRQHandler+0x3e>
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	4b09      	ldr	r3, [pc, #36]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	4b08      	ldr	r3, [pc, #32]	@ (800d9d8 <SPI3_IRQHandler+0x60>)
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d109      	bne.n	800d9d2 <SPI3_IRQHandler+0x5a>
 800d9be:	4b07      	ldr	r3, [pc, #28]	@ (800d9dc <SPI3_IRQHandler+0x64>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d005      	beq.n	800d9d2 <SPI3_IRQHandler+0x5a>
 800d9c6:	4b05      	ldr	r3, [pc, #20]	@ (800d9dc <SPI3_IRQHandler+0x64>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	4b03      	ldr	r3, [pc, #12]	@ (800d9dc <SPI3_IRQHandler+0x64>)
 800d9d0:	701a      	strb	r2, [r3, #0]
}
 800d9d2:	bf00      	nop
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	200061ba 	.word	0x200061ba
 800d9dc:	200061b9 	.word	0x200061b9
 800d9e0:	20002598 	.word	0x20002598

0800d9e4 <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800d9e8:	4b16      	ldr	r3, [pc, #88]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d105      	bne.n	800d9fc <SPI4_IRQHandler+0x18>
 800d9f0:	4b15      	ldr	r3, [pc, #84]	@ (800da48 <SPI4_IRQHandler+0x64>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	4b13      	ldr	r3, [pc, #76]	@ (800da48 <SPI4_IRQHandler+0x64>)
 800d9fa:	701a      	strb	r2, [r3, #0]
 800d9fc:	4b11      	ldr	r3, [pc, #68]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	3301      	adds	r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	4b0f      	ldr	r3, [pc, #60]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800da06:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 800da08:	4810      	ldr	r0, [pc, #64]	@ (800da4c <SPI4_IRQHandler+0x68>)
 800da0a:	f7fa fb53 	bl	80080b4 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800da0e:	4b0d      	ldr	r3, [pc, #52]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <SPI4_IRQHandler+0x3e>
 800da16:	4b0b      	ldr	r3, [pc, #44]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	3b01      	subs	r3, #1
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	4b09      	ldr	r3, [pc, #36]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800da20:	701a      	strb	r2, [r3, #0]
 800da22:	4b08      	ldr	r3, [pc, #32]	@ (800da44 <SPI4_IRQHandler+0x60>)
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d109      	bne.n	800da3e <SPI4_IRQHandler+0x5a>
 800da2a:	4b07      	ldr	r3, [pc, #28]	@ (800da48 <SPI4_IRQHandler+0x64>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d005      	beq.n	800da3e <SPI4_IRQHandler+0x5a>
 800da32:	4b05      	ldr	r3, [pc, #20]	@ (800da48 <SPI4_IRQHandler+0x64>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	3b01      	subs	r3, #1
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	4b03      	ldr	r3, [pc, #12]	@ (800da48 <SPI4_IRQHandler+0x64>)
 800da3c:	701a      	strb	r2, [r3, #0]
}
 800da3e:	bf00      	nop
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	200061ba 	.word	0x200061ba
 800da48:	200061b9 	.word	0x200061b9
 800da4c:	200025f0 	.word	0x200025f0

0800da50 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800da60:	2300      	movs	r3, #0
 800da62:	73fb      	strb	r3, [r7, #15]
 800da64:	e068      	b.n	800db38 <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	4a38      	ldr	r2, [pc, #224]	@ (800db4c <HAL_SPI_MspInit+0xfc>)
 800da6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d15d      	bne.n	800db32 <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800da76:	2300      	movs	r3, #0
 800da78:	73bb      	strb	r3, [r7, #14]
 800da7a:	e051      	b.n	800db20 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 800da7c:	7bba      	ldrb	r2, [r7, #14]
 800da7e:	4934      	ldr	r1, [pc, #208]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800da80:	4613      	mov	r3, r2
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	1a9b      	subs	r3, r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	440b      	add	r3, r1
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	7bfa      	ldrb	r2, [r7, #15]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d143      	bne.n	800db1a <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 800da92:	7bba      	ldrb	r2, [r7, #14]
 800da94:	492e      	ldr	r1, [pc, #184]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800da96:	4613      	mov	r3, r2
 800da98:	00db      	lsls	r3, r3, #3
 800da9a:	1a9b      	subs	r3, r3, r2
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	440b      	add	r3, r1
 800daa0:	3330      	adds	r3, #48	@ 0x30
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d016      	beq.n	800dad6 <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 800daa8:	7bba      	ldrb	r2, [r7, #14]
 800daaa:	4929      	ldr	r1, [pc, #164]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800daac:	4613      	mov	r3, r2
 800daae:	00db      	lsls	r3, r3, #3
 800dab0:	1a9b      	subs	r3, r3, r2
 800dab2:	00db      	lsls	r3, r3, #3
 800dab4:	440b      	add	r3, r1
 800dab6:	3330      	adds	r3, #48	@ 0x30
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	1d1a      	adds	r2, r3, #4
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	64da      	str	r2, [r3, #76]	@ 0x4c
 800dac0:	7bba      	ldrb	r2, [r7, #14]
 800dac2:	4923      	ldr	r1, [pc, #140]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	1a9b      	subs	r3, r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	3330      	adds	r3, #48	@ 0x30
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 800dad6:	7bba      	ldrb	r2, [r7, #14]
 800dad8:	491d      	ldr	r1, [pc, #116]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800dada:	4613      	mov	r3, r2
 800dadc:	00db      	lsls	r3, r3, #3
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	440b      	add	r3, r1
 800dae4:	3334      	adds	r3, #52	@ 0x34
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d016      	beq.n	800db1a <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 800daec:	7bba      	ldrb	r2, [r7, #14]
 800daee:	4918      	ldr	r1, [pc, #96]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800daf0:	4613      	mov	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	1a9b      	subs	r3, r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	440b      	add	r3, r1
 800dafa:	3334      	adds	r3, #52	@ 0x34
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	1d1a      	adds	r2, r3, #4
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	649a      	str	r2, [r3, #72]	@ 0x48
 800db04:	7bba      	ldrb	r2, [r7, #14]
 800db06:	4912      	ldr	r1, [pc, #72]	@ (800db50 <HAL_SPI_MspInit+0x100>)
 800db08:	4613      	mov	r3, r2
 800db0a:	00db      	lsls	r3, r3, #3
 800db0c:	1a9b      	subs	r3, r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	440b      	add	r3, r1
 800db12:	3334      	adds	r3, #52	@ 0x34
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
 800db1c:	3301      	adds	r3, #1
 800db1e:	73bb      	strb	r3, [r7, #14]
 800db20:	7bbb      	ldrb	r3, [r7, #14]
 800db22:	4a0c      	ldr	r2, [pc, #48]	@ (800db54 <HAL_SPI_MspInit+0x104>)
 800db24:	6812      	ldr	r2, [r2, #0]
 800db26:	08d2      	lsrs	r2, r2, #3
 800db28:	490b      	ldr	r1, [pc, #44]	@ (800db58 <HAL_SPI_MspInit+0x108>)
 800db2a:	fba1 1202 	umull	r1, r2, r1, r2
 800db2e:	4293      	cmp	r3, r2
 800db30:	d3a4      	bcc.n	800da7c <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800db32:	7bfb      	ldrb	r3, [r7, #15]
 800db34:	3301      	adds	r3, #1
 800db36:	73fb      	strb	r3, [r7, #15]
 800db38:	7bfb      	ldrb	r3, [r7, #15]
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d993      	bls.n	800da66 <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	2000051c 	.word	0x2000051c
 800db50:	0801ce64 	.word	0x0801ce64
 800db54:	200003c8 	.word	0x200003c8
 800db58:	24924925 	.word	0x24924925

0800db5c <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af02      	add	r7, sp, #8
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800db68:	23ae      	movs	r3, #174	@ 0xae
 800db6a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800db6c:	2300      	movs	r3, #0
 800db6e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800db70:	4b0a      	ldr	r3, [pc, #40]	@ (800db9c <drv_sysmonTransmit+0x40>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 800db76:	4b0a      	ldr	r3, [pc, #40]	@ (800dba0 <drv_sysmonTransmit+0x44>)
 800db78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800db7a:	4b09      	ldr	r3, [pc, #36]	@ (800dba0 <drv_sysmonTransmit+0x44>)
 800db7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db7e:	887a      	ldrh	r2, [r7, #2]
 800db80:	7bb8      	ldrb	r0, [r7, #14]
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	460b      	mov	r3, r1
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	f000 feae 	bl	800e8e8 <drv_uartTransmitIT>
 800db8c:	4603      	mov	r3, r0
 800db8e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800db90:	7bfb      	ldrb	r3, [r7, #15]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	0801cf18 	.word	0x0801cf18
 800dba0:	20000438 	.word	0x20000438

0800dba4 <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	460b      	mov	r3, r1
 800dbae:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800dbb0:	23ae      	movs	r3, #174	@ 0xae
 800dbb2:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe4 <drv_sysmonReceive+0x40>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 800dbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe8 <drv_sysmonReceive+0x44>)
 800dbc0:	69d9      	ldr	r1, [r3, #28]
 800dbc2:	4b09      	ldr	r3, [pc, #36]	@ (800dbe8 <drv_sysmonReceive+0x44>)
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	887a      	ldrh	r2, [r7, #2]
 800dbc8:	7bb8      	ldrb	r0, [r7, #14]
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	f000 fe1a 	bl	800e808 <drv_uartReceiveDMA>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	0801cf18 	.word	0x0801cf18
 800dbe8:	20000438 	.word	0x20000438

0800dbec <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 800dbf2:	23ae      	movs	r3, #174	@ 0xae
 800dbf4:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800dbfa:	4b08      	ldr	r3, [pc, #32]	@ (800dc1c <drv_systimerStart+0x30>)
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 800dc00:	79bb      	ldrb	r3, [r7, #6]
 800dc02:	f04f 31ff 	mov.w	r1, #4294967295
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 f9a2 	bl	800df50 <drv_tmrStart>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 800dc10:	79fb      	ldrb	r3, [r7, #7]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0801ce9c 	.word	0x0801ce9c

0800dc20 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 800dc28:	23ae      	movs	r3, #174	@ 0xae
 800dc2a:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00f      	beq.n	800dc5a <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800dc3a:	4b0a      	ldr	r3, [pc, #40]	@ (800dc64 <drv_systimerGetValue+0x44>)
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 800dc40:	f107 0208 	add.w	r2, r7, #8
 800dc44:	7bbb      	ldrb	r3, [r7, #14]
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 f9b3 	bl	800dfb4 <drv_tmrGetValue>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	0801ce9c 	.word	0x0801ce9c

0800dc68 <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 800dc6e:	2355      	movs	r3, #85	@ 0x55
 800dc70:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 800dc72:	2300      	movs	r3, #0
 800dc74:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800dc76:	2300      	movs	r3, #0
 800dc78:	71bb      	strb	r3, [r7, #6]
 800dc7a:	e00e      	b.n	800dc9a <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 800dc7c:	79fb      	ldrb	r3, [r7, #7]
 800dc7e:	2b55      	cmp	r3, #85	@ 0x55
 800dc80:	d106      	bne.n	800dc90 <drv_tmrInit+0x28>
 800dc82:	79bb      	ldrb	r3, [r7, #6]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 f81b 	bl	800dcc0 <drv_tmrInitInstance>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	71fb      	strb	r3, [r7, #7]
 800dc8e:	e001      	b.n	800dc94 <drv_tmrInit+0x2c>
 800dc90:	23ae      	movs	r3, #174	@ 0xae
 800dc92:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800dc94:	79bb      	ldrb	r3, [r7, #6]
 800dc96:	3301      	adds	r3, #1
 800dc98:	71bb      	strb	r3, [r7, #6]
 800dc9a:	79ba      	ldrb	r2, [r7, #6]
 800dc9c:	4b06      	ldr	r3, [pc, #24]	@ (800dcb8 <drv_tmrInit+0x50>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4906      	ldr	r1, [pc, #24]	@ (800dcbc <drv_tmrInit+0x54>)
 800dca2:	fba1 1303 	umull	r1, r3, r1, r3
 800dca6:	091b      	lsrs	r3, r3, #4
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d3e7      	bcc.n	800dc7c <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 800dcac:	79fb      	ldrb	r3, [r7, #7]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20000434 	.word	0x20000434
 800dcbc:	4ec4ec4f 	.word	0x4ec4ec4f

0800dcc0 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08a      	sub	sp, #40	@ 0x28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 800dcca:	23ae      	movs	r3, #174	@ 0xae
 800dccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 800dcd6:	f107 031c 	add.w	r3, r7, #28
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 800dce0:	f107 030c 	add.w	r3, r7, #12
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
 800dce8:	605a      	str	r2, [r3, #4]
 800dcea:	609a      	str	r2, [r3, #8]
 800dcec:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 800dcee:	79fa      	ldrb	r2, [r7, #7]
 800dcf0:	4b90      	ldr	r3, [pc, #576]	@ (800df34 <drv_tmrInitInstance+0x274>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4990      	ldr	r1, [pc, #576]	@ (800df38 <drv_tmrInitInstance+0x278>)
 800dcf6:	fba1 1303 	umull	r1, r3, r1, r3
 800dcfa:	091b      	lsrs	r3, r3, #4
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	f080 8112 	bcs.w	800df26 <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	4a8d      	ldr	r2, [pc, #564]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800dd06:	2134      	movs	r1, #52	@ 0x34
 800dd08:	fb01 f303 	mul.w	r3, r1, r3
 800dd0c:	4413      	add	r3, r2
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 800dd14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd18:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dd1c:	4988      	ldr	r1, [pc, #544]	@ (800df40 <drv_tmrInitInstance+0x280>)
 800dd1e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dd22:	4888      	ldr	r0, [pc, #544]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800dd24:	4613      	mov	r3, r2
 800dd26:	00db      	lsls	r3, r3, #3
 800dd28:	4413      	add	r3, r2
 800dd2a:	00db      	lsls	r3, r3, #3
 800dd2c:	4403      	add	r3, r0
 800dd2e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dd36:	4981      	ldr	r1, [pc, #516]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800dd38:	2034      	movs	r0, #52	@ 0x34
 800dd3a:	fb00 f303 	mul.w	r3, r0, r3
 800dd3e:	440b      	add	r3, r1
 800dd40:	3318      	adds	r3, #24
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	487f      	ldr	r0, [pc, #508]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800dd46:	4613      	mov	r3, r2
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	4413      	add	r3, r2
 800dd4c:	00db      	lsls	r3, r3, #3
 800dd4e:	4403      	add	r3, r0
 800dd50:	3318      	adds	r3, #24
 800dd52:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dd5a:	4978      	ldr	r1, [pc, #480]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800dd5c:	2034      	movs	r0, #52	@ 0x34
 800dd5e:	fb00 f303 	mul.w	r3, r0, r3
 800dd62:	440b      	add	r3, r1
 800dd64:	3314      	adds	r3, #20
 800dd66:	6819      	ldr	r1, [r3, #0]
 800dd68:	4876      	ldr	r0, [pc, #472]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	4413      	add	r3, r2
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	4403      	add	r3, r0
 800dd74:	3310      	adds	r3, #16
 800dd76:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 800dd78:	79fb      	ldrb	r3, [r7, #7]
 800dd7a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dd7e:	496f      	ldr	r1, [pc, #444]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800dd80:	2034      	movs	r0, #52	@ 0x34
 800dd82:	fb00 f303 	mul.w	r3, r0, r3
 800dd86:	440b      	add	r3, r1
 800dd88:	330c      	adds	r3, #12
 800dd8a:	6819      	ldr	r1, [r3, #0]
 800dd8c:	486d      	ldr	r0, [pc, #436]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800dd8e:	4613      	mov	r3, r2
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	4413      	add	r3, r2
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	4403      	add	r3, r0
 800dd98:	3308      	adds	r3, #8
 800dd9a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 800dd9c:	79fb      	ldrb	r3, [r7, #7]
 800dd9e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dda2:	4966      	ldr	r1, [pc, #408]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800dda4:	2034      	movs	r0, #52	@ 0x34
 800dda6:	fb00 f303 	mul.w	r3, r0, r3
 800ddaa:	440b      	add	r3, r1
 800ddac:	3310      	adds	r3, #16
 800ddae:	6819      	ldr	r1, [r3, #0]
 800ddb0:	4864      	ldr	r0, [pc, #400]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	00db      	lsls	r3, r3, #3
 800ddb6:	4413      	add	r3, r2
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	4403      	add	r3, r0
 800ddbc:	330c      	adds	r3, #12
 800ddbe:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 800ddc0:	79fb      	ldrb	r3, [r7, #7]
 800ddc2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ddc6:	495d      	ldr	r1, [pc, #372]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800ddc8:	2034      	movs	r0, #52	@ 0x34
 800ddca:	fb00 f303 	mul.w	r3, r0, r3
 800ddce:	440b      	add	r3, r1
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	6819      	ldr	r1, [r3, #0]
 800ddd4:	485b      	ldr	r0, [pc, #364]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	00db      	lsls	r3, r3, #3
 800ddda:	4413      	add	r3, r2
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	4403      	add	r3, r0
 800dde0:	3304      	adds	r3, #4
 800dde2:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ddea:	4954      	ldr	r1, [pc, #336]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800ddec:	2034      	movs	r0, #52	@ 0x34
 800ddee:	fb00 f303 	mul.w	r3, r0, r3
 800ddf2:	440b      	add	r3, r1
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	6819      	ldr	r1, [r3, #0]
 800ddf8:	4852      	ldr	r0, [pc, #328]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	4413      	add	r3, r2
 800de00:	00db      	lsls	r3, r3, #3
 800de02:	4403      	add	r3, r0
 800de04:	3314      	adds	r3, #20
 800de06:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	4a4c      	ldr	r2, [pc, #304]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800de0c:	2134      	movs	r1, #52	@ 0x34
 800de0e:	fb01 f303 	mul.w	r3, r1, r3
 800de12:	4413      	add	r3, r2
 800de14:	3328      	adds	r3, #40	@ 0x28
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 800de1a:	79fb      	ldrb	r3, [r7, #7]
 800de1c:	4a47      	ldr	r2, [pc, #284]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800de1e:	2134      	movs	r1, #52	@ 0x34
 800de20:	fb01 f303 	mul.w	r3, r1, r3
 800de24:	4413      	add	r3, r2
 800de26:	332c      	adds	r3, #44	@ 0x2c
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	4a43      	ldr	r2, [pc, #268]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800de30:	2134      	movs	r1, #52	@ 0x34
 800de32:	fb01 f303 	mul.w	r3, r1, r3
 800de36:	4413      	add	r3, r2
 800de38:	3320      	adds	r3, #32
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800de3e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de42:	4613      	mov	r3, r2
 800de44:	00db      	lsls	r3, r3, #3
 800de46:	4413      	add	r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	4a3e      	ldr	r2, [pc, #248]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800de4c:	4413      	add	r3, r2
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fa feee 	bl	8008c30 <HAL_TIM_Base_Init>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d165      	bne.n	800df26 <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800de5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	4a39      	ldr	r2, [pc, #228]	@ (800df48 <drv_tmrInitInstance+0x288>)
 800de62:	4413      	add	r3, r2
 800de64:	4618      	mov	r0, r3
 800de66:	f008 f96f 	bl	8016148 <gos_mutexInit>
 800de6a:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800de6c:	2b55      	cmp	r3, #85	@ 0x55
 800de6e:	d15a      	bne.n	800df26 <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800de70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4a33      	ldr	r2, [pc, #204]	@ (800df4c <drv_tmrInitInstance+0x28c>)
 800de7e:	4413      	add	r3, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f00a f9fd 	bl	8018280 <gos_triggerInit>
 800de86:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800de88:	2b55      	cmp	r3, #85	@ 0x55
 800de8a:	d14c      	bne.n	800df26 <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 800de8c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de90:	4613      	mov	r3, r2
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	4413      	add	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4a2c      	ldr	r2, [pc, #176]	@ (800df4c <drv_tmrInitInstance+0x28c>)
 800de9a:	4413      	add	r3, r2
 800de9c:	4618      	mov	r0, r3
 800de9e:	f00a fa0b 	bl	80182b8 <gos_triggerReset>
 800dea2:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800dea4:	2b55      	cmp	r3, #85	@ 0x55
 800dea6:	d13e      	bne.n	800df26 <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 800dea8:	2355      	movs	r3, #85	@ 0x55
 800deaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	4a22      	ldr	r2, [pc, #136]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800deb2:	2134      	movs	r1, #52	@ 0x34
 800deb4:	fb01 f303 	mul.w	r3, r1, r3
 800deb8:	4413      	add	r3, r2
 800deba:	331c      	adds	r3, #28
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b36      	cmp	r3, #54	@ 0x36
 800dec0:	d113      	bne.n	800deea <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 800dec2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dec6:	4613      	mov	r3, r2
 800dec8:	00db      	lsls	r3, r3, #3
 800deca:	4413      	add	r3, r2
 800decc:	00db      	lsls	r3, r3, #3
 800dece:	4a1d      	ldr	r2, [pc, #116]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800ded0:	4413      	add	r3, r2
 800ded2:	f107 020c 	add.w	r2, r7, #12
 800ded6:	4611      	mov	r1, r2
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fb f80a 	bl	8008ef2 <HAL_TIM_ConfigClockSource>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 800dee4:	23ae      	movs	r3, #174	@ 0xae
 800dee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	4a13      	ldr	r2, [pc, #76]	@ (800df3c <drv_tmrInitInstance+0x27c>)
 800deee:	2134      	movs	r1, #52	@ 0x34
 800def0:	fb01 f303 	mul.w	r3, r1, r3
 800def4:	4413      	add	r3, r2
 800def6:	3324      	adds	r3, #36	@ 0x24
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b36      	cmp	r3, #54	@ 0x36
 800defc:	d113      	bne.n	800df26 <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 800defe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800df02:	4613      	mov	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	4413      	add	r3, r2
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	4a0e      	ldr	r2, [pc, #56]	@ (800df44 <drv_tmrInitInstance+0x284>)
 800df0c:	4413      	add	r3, r2
 800df0e:	f107 021c 	add.w	r2, r7, #28
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f7fb fa13 	bl	8009340 <HAL_TIMEx_MasterConfigSynchronization>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 800df20:	23ae      	movs	r3, #174	@ 0xae
 800df22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 800df26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3728      	adds	r7, #40	@ 0x28
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20000434 	.word	0x20000434
 800df38:	4ec4ec4f 	.word	0x4ec4ec4f
 800df3c:	200003cc 	.word	0x200003cc
 800df40:	2000052c 	.word	0x2000052c
 800df44:	200026e8 	.word	0x200026e8
 800df48:	20002ad8 	.word	0x20002ad8
 800df4c:	20002b10 	.word	0x20002b10

0800df50 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	4603      	mov	r3, r0
 800df58:	6039      	str	r1, [r7, #0]
 800df5a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 800df5c:	23ae      	movs	r3, #174	@ 0xae
 800df5e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4a11      	ldr	r2, [pc, #68]	@ (800dfac <drv_tmrStart+0x5c>)
 800df66:	4413      	add	r3, r2
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f008 f906 	bl	801617c <gos_mutexLock>
 800df70:	4603      	mov	r3, r0
 800df72:	2b55      	cmp	r3, #85	@ 0x55
 800df74:	d10e      	bne.n	800df94 <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 800df76:	79fa      	ldrb	r2, [r7, #7]
 800df78:	4613      	mov	r3, r2
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	4413      	add	r3, r2
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	4a0b      	ldr	r2, [pc, #44]	@ (800dfb0 <drv_tmrStart+0x60>)
 800df82:	4413      	add	r3, r2
 800df84:	4618      	mov	r0, r3
 800df86:	f7fa fe88 	bl	8008c9a <HAL_TIM_Base_Start>
 800df8a:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 800df90:	2355      	movs	r3, #85	@ 0x55
 800df92:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 800df94:	79fb      	ldrb	r3, [r7, #7]
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4a04      	ldr	r2, [pc, #16]	@ (800dfac <drv_tmrStart+0x5c>)
 800df9a:	4413      	add	r3, r2
 800df9c:	4618      	mov	r0, r3
 800df9e:	f008 f9f3 	bl	8016388 <gos_mutexUnlock>

    return tmrStartResult;
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	20002ad8 	.word	0x20002ad8
 800dfb0:	200026e8 	.word	0x200026e8

0800dfb4 <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	4603      	mov	r3, r0
 800dfbc:	6039      	str	r1, [r7, #0]
 800dfbe:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 800dfc0:	23ae      	movs	r3, #174	@ 0xae
 800dfc2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00c      	beq.n	800dfe4 <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 800dfca:	79fa      	ldrb	r2, [r7, #7]
 800dfcc:	4909      	ldr	r1, [pc, #36]	@ (800dff4 <drv_tmrGetValue+0x40>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	00db      	lsls	r3, r3, #3
 800dfd2:	4413      	add	r3, r2
 800dfd4:	00db      	lsls	r3, r3, #3
 800dfd6:	440b      	add	r3, r1
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 800dfe0:	2355      	movs	r3, #85	@ 0x55
 800dfe2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	200026e8 	.word	0x200026e8

0800dff8 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 800e000:	2300      	movs	r3, #0
 800e002:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800e004:	2300      	movs	r3, #0
 800e006:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d041      	beq.n	800e092 <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800e00e:	2300      	movs	r3, #0
 800e010:	73fb      	strb	r3, [r7, #15]
 800e012:	e03a      	b.n	800e08a <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 800e014:	7bfb      	ldrb	r3, [r7, #15]
 800e016:	4a21      	ldr	r2, [pc, #132]	@ (800e09c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800e018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	429a      	cmp	r2, r3
 800e022:	d12f      	bne.n	800e084 <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800e024:	2300      	movs	r3, #0
 800e026:	73bb      	strb	r3, [r7, #14]
 800e028:	e020      	b.n	800e06c <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
 800e02c:	4a1c      	ldr	r2, [pc, #112]	@ (800e0a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800e02e:	2134      	movs	r1, #52	@ 0x34
 800e030:	fb01 f303 	mul.w	r3, r1, r3
 800e034:	4413      	add	r3, r2
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	7bfa      	ldrb	r2, [r7, #15]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d113      	bne.n	800e066 <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	4a17      	ldr	r2, [pc, #92]	@ (800e0a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800e042:	2134      	movs	r1, #52	@ 0x34
 800e044:	fb01 f303 	mul.w	r3, r1, r3
 800e048:	4413      	add	r3, r2
 800e04a:	3330      	adds	r3, #48	@ 0x30
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d016      	beq.n	800e080 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 800e052:	7bbb      	ldrb	r3, [r7, #14]
 800e054:	4a12      	ldr	r2, [pc, #72]	@ (800e0a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800e056:	2134      	movs	r1, #52	@ 0x34
 800e058:	fb01 f303 	mul.w	r3, r1, r3
 800e05c:	4413      	add	r3, r2
 800e05e:	3330      	adds	r3, #48	@ 0x30
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 800e064:	e00c      	b.n	800e080 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800e066:	7bbb      	ldrb	r3, [r7, #14]
 800e068:	3301      	adds	r3, #1
 800e06a:	73bb      	strb	r3, [r7, #14]
 800e06c:	7bba      	ldrb	r2, [r7, #14]
 800e06e:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	490d      	ldr	r1, [pc, #52]	@ (800e0a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800e074:	fba1 1303 	umull	r1, r3, r1, r3
 800e078:	091b      	lsrs	r3, r3, #4
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d3d5      	bcc.n	800e02a <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 800e07e:	e008      	b.n	800e092 <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 800e080:	bf00      	nop
                break;
 800e082:	e006      	b.n	800e092 <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800e084:	7bfb      	ldrb	r3, [r7, #15]
 800e086:	3301      	adds	r3, #1
 800e088:	73fb      	strb	r3, [r7, #15]
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
 800e08c:	2b0d      	cmp	r3, #13
 800e08e:	d9c1      	bls.n	800e014 <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 800e090:	e7ff      	b.n	800e092 <HAL_TIM_PeriodElapsedCallback+0x9a>
 800e092:	bf00      	nop
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	2000052c 	.word	0x2000052c
 800e0a0:	200003cc 	.word	0x200003cc
 800e0a4:	20000434 	.word	0x20000434
 800e0a8:	4ec4ec4f 	.word	0x4ec4ec4f

0800e0ac <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800e0b0:	4b16      	ldr	r3, [pc, #88]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d105      	bne.n	800e0c4 <TIM2_IRQHandler+0x18>
 800e0b8:	4b15      	ldr	r3, [pc, #84]	@ (800e110 <TIM2_IRQHandler+0x64>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	4b13      	ldr	r3, [pc, #76]	@ (800e110 <TIM2_IRQHandler+0x64>)
 800e0c2:	701a      	strb	r2, [r3, #0]
 800e0c4:	4b11      	ldr	r3, [pc, #68]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0ce:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 800e0d0:	4810      	ldr	r0, [pc, #64]	@ (800e114 <TIM2_IRQHandler+0x68>)
 800e0d2:	f7fa fe06 	bl	8008ce2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800e0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d005      	beq.n	800e0ea <TIM2_IRQHandler+0x3e>
 800e0de:	4b0b      	ldr	r3, [pc, #44]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	4b09      	ldr	r3, [pc, #36]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0e8:	701a      	strb	r2, [r3, #0]
 800e0ea:	4b08      	ldr	r3, [pc, #32]	@ (800e10c <TIM2_IRQHandler+0x60>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d109      	bne.n	800e106 <TIM2_IRQHandler+0x5a>
 800e0f2:	4b07      	ldr	r3, [pc, #28]	@ (800e110 <TIM2_IRQHandler+0x64>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d005      	beq.n	800e106 <TIM2_IRQHandler+0x5a>
 800e0fa:	4b05      	ldr	r3, [pc, #20]	@ (800e110 <TIM2_IRQHandler+0x64>)
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	b2da      	uxtb	r2, r3
 800e102:	4b03      	ldr	r3, [pc, #12]	@ (800e110 <TIM2_IRQHandler+0x64>)
 800e104:	701a      	strb	r2, [r3, #0]
}
 800e106:	bf00      	nop
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	200061ba 	.word	0x200061ba
 800e110:	200061b9 	.word	0x200061b9
 800e114:	20002730 	.word	0x20002730

0800e118 <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800e11c:	4b16      	ldr	r3, [pc, #88]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d105      	bne.n	800e130 <TIM3_IRQHandler+0x18>
 800e124:	4b15      	ldr	r3, [pc, #84]	@ (800e17c <TIM3_IRQHandler+0x64>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	3301      	adds	r3, #1
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	4b13      	ldr	r3, [pc, #76]	@ (800e17c <TIM3_IRQHandler+0x64>)
 800e12e:	701a      	strb	r2, [r3, #0]
 800e130:	4b11      	ldr	r3, [pc, #68]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	3301      	adds	r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	4b0f      	ldr	r3, [pc, #60]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e13a:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 800e13c:	4810      	ldr	r0, [pc, #64]	@ (800e180 <TIM3_IRQHandler+0x68>)
 800e13e:	f7fa fdd0 	bl	8008ce2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800e142:	4b0d      	ldr	r3, [pc, #52]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d005      	beq.n	800e156 <TIM3_IRQHandler+0x3e>
 800e14a:	4b0b      	ldr	r3, [pc, #44]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	3b01      	subs	r3, #1
 800e150:	b2da      	uxtb	r2, r3
 800e152:	4b09      	ldr	r3, [pc, #36]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e154:	701a      	strb	r2, [r3, #0]
 800e156:	4b08      	ldr	r3, [pc, #32]	@ (800e178 <TIM3_IRQHandler+0x60>)
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d109      	bne.n	800e172 <TIM3_IRQHandler+0x5a>
 800e15e:	4b07      	ldr	r3, [pc, #28]	@ (800e17c <TIM3_IRQHandler+0x64>)
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d005      	beq.n	800e172 <TIM3_IRQHandler+0x5a>
 800e166:	4b05      	ldr	r3, [pc, #20]	@ (800e17c <TIM3_IRQHandler+0x64>)
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	b2da      	uxtb	r2, r3
 800e16e:	4b03      	ldr	r3, [pc, #12]	@ (800e17c <TIM3_IRQHandler+0x64>)
 800e170:	701a      	strb	r2, [r3, #0]
}
 800e172:	bf00      	nop
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	200061ba 	.word	0x200061ba
 800e17c:	200061b9 	.word	0x200061b9
 800e180:	20002778 	.word	0x20002778

0800e184 <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800e188:	4b16      	ldr	r3, [pc, #88]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d105      	bne.n	800e19c <TIM4_IRQHandler+0x18>
 800e190:	4b15      	ldr	r3, [pc, #84]	@ (800e1e8 <TIM4_IRQHandler+0x64>)
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	3301      	adds	r3, #1
 800e196:	b2da      	uxtb	r2, r3
 800e198:	4b13      	ldr	r3, [pc, #76]	@ (800e1e8 <TIM4_IRQHandler+0x64>)
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	4b11      	ldr	r3, [pc, #68]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e1a6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 800e1a8:	4810      	ldr	r0, [pc, #64]	@ (800e1ec <TIM4_IRQHandler+0x68>)
 800e1aa:	f7fa fd9a 	bl	8008ce2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800e1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d005      	beq.n	800e1c2 <TIM4_IRQHandler+0x3e>
 800e1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	4b09      	ldr	r3, [pc, #36]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e1c0:	701a      	strb	r2, [r3, #0]
 800e1c2:	4b08      	ldr	r3, [pc, #32]	@ (800e1e4 <TIM4_IRQHandler+0x60>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d109      	bne.n	800e1de <TIM4_IRQHandler+0x5a>
 800e1ca:	4b07      	ldr	r3, [pc, #28]	@ (800e1e8 <TIM4_IRQHandler+0x64>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d005      	beq.n	800e1de <TIM4_IRQHandler+0x5a>
 800e1d2:	4b05      	ldr	r3, [pc, #20]	@ (800e1e8 <TIM4_IRQHandler+0x64>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	4b03      	ldr	r3, [pc, #12]	@ (800e1e8 <TIM4_IRQHandler+0x64>)
 800e1dc:	701a      	strb	r2, [r3, #0]
}
 800e1de:	bf00      	nop
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	200061ba 	.word	0x200061ba
 800e1e8:	200061b9 	.word	0x200061b9
 800e1ec:	200027c0 	.word	0x200027c0

0800e1f0 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800e1f4:	4b16      	ldr	r3, [pc, #88]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d105      	bne.n	800e208 <TIM5_IRQHandler+0x18>
 800e1fc:	4b15      	ldr	r3, [pc, #84]	@ (800e254 <TIM5_IRQHandler+0x64>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	3301      	adds	r3, #1
 800e202:	b2da      	uxtb	r2, r3
 800e204:	4b13      	ldr	r3, [pc, #76]	@ (800e254 <TIM5_IRQHandler+0x64>)
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	4b11      	ldr	r3, [pc, #68]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	3301      	adds	r3, #1
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	4b0f      	ldr	r3, [pc, #60]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e212:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 800e214:	4810      	ldr	r0, [pc, #64]	@ (800e258 <TIM5_IRQHandler+0x68>)
 800e216:	f7fa fd64 	bl	8008ce2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800e21a:	4b0d      	ldr	r3, [pc, #52]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d005      	beq.n	800e22e <TIM5_IRQHandler+0x3e>
 800e222:	4b0b      	ldr	r3, [pc, #44]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	3b01      	subs	r3, #1
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b09      	ldr	r3, [pc, #36]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	4b08      	ldr	r3, [pc, #32]	@ (800e250 <TIM5_IRQHandler+0x60>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <TIM5_IRQHandler+0x5a>
 800e236:	4b07      	ldr	r3, [pc, #28]	@ (800e254 <TIM5_IRQHandler+0x64>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d005      	beq.n	800e24a <TIM5_IRQHandler+0x5a>
 800e23e:	4b05      	ldr	r3, [pc, #20]	@ (800e254 <TIM5_IRQHandler+0x64>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	3b01      	subs	r3, #1
 800e244:	b2da      	uxtb	r2, r3
 800e246:	4b03      	ldr	r3, [pc, #12]	@ (800e254 <TIM5_IRQHandler+0x64>)
 800e248:	701a      	strb	r2, [r3, #0]
}
 800e24a:	bf00      	nop
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	200061ba 	.word	0x200061ba
 800e254:	200061b9 	.word	0x200061b9
 800e258:	20002808 	.word	0x20002808

0800e25c <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800e260:	4b16      	ldr	r3, [pc, #88]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d105      	bne.n	800e274 <TIM7_IRQHandler+0x18>
 800e268:	4b15      	ldr	r3, [pc, #84]	@ (800e2c0 <TIM7_IRQHandler+0x64>)
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	3301      	adds	r3, #1
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	4b13      	ldr	r3, [pc, #76]	@ (800e2c0 <TIM7_IRQHandler+0x64>)
 800e272:	701a      	strb	r2, [r3, #0]
 800e274:	4b11      	ldr	r3, [pc, #68]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	3301      	adds	r3, #1
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	4b0f      	ldr	r3, [pc, #60]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e27e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 800e280:	4810      	ldr	r0, [pc, #64]	@ (800e2c4 <TIM7_IRQHandler+0x68>)
 800e282:	f7fa fd2e 	bl	8008ce2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800e286:	4b0d      	ldr	r3, [pc, #52]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d005      	beq.n	800e29a <TIM7_IRQHandler+0x3e>
 800e28e:	4b0b      	ldr	r3, [pc, #44]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	3b01      	subs	r3, #1
 800e294:	b2da      	uxtb	r2, r3
 800e296:	4b09      	ldr	r3, [pc, #36]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e298:	701a      	strb	r2, [r3, #0]
 800e29a:	4b08      	ldr	r3, [pc, #32]	@ (800e2bc <TIM7_IRQHandler+0x60>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d109      	bne.n	800e2b6 <TIM7_IRQHandler+0x5a>
 800e2a2:	4b07      	ldr	r3, [pc, #28]	@ (800e2c0 <TIM7_IRQHandler+0x64>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d005      	beq.n	800e2b6 <TIM7_IRQHandler+0x5a>
 800e2aa:	4b05      	ldr	r3, [pc, #20]	@ (800e2c0 <TIM7_IRQHandler+0x64>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	4b03      	ldr	r3, [pc, #12]	@ (800e2c0 <TIM7_IRQHandler+0x64>)
 800e2b4:	701a      	strb	r2, [r3, #0]
}
 800e2b6:	bf00      	nop
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	200061ba 	.word	0x200061ba
 800e2c0:	200061b9 	.word	0x200061b9
 800e2c4:	20002898 	.word	0x20002898

0800e2c8 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800e2d0:	23ae      	movs	r3, #174	@ 0xae
 800e2d2:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e304 <drv_traceTransmitUnsafe+0x3c>)
 800e2da:	789b      	ldrb	r3, [r3, #2]
 800e2dc:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7f5 fefe 	bl	80040e0 <strlen>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	4b07      	ldr	r3, [pc, #28]	@ (800e308 <drv_traceTransmitUnsafe+0x40>)
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	7bb8      	ldrb	r0, [r7, #14]
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	f000 f982 	bl	800e5f8 <drv_uartTransmitBlocking>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	0801cf18 	.word	0x0801cf18
 800e308:	20000438 	.word	0x20000438

0800e30c <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af02      	add	r7, sp, #8
 800e312:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800e314:	23ae      	movs	r3, #174	@ 0xae
 800e316:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800e318:	2300      	movs	r3, #0
 800e31a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800e31c:	4b0c      	ldr	r3, [pc, #48]	@ (800e350 <drv_traceTransmit+0x44>)
 800e31e:	789b      	ldrb	r3, [r3, #2]
 800e320:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7f5 fedc 	bl	80040e0 <strlen>
 800e328:	4603      	mov	r3, r0
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	4b09      	ldr	r3, [pc, #36]	@ (800e354 <drv_traceTransmit+0x48>)
 800e32e:	6819      	ldr	r1, [r3, #0]
 800e330:	4b08      	ldr	r3, [pc, #32]	@ (800e354 <drv_traceTransmit+0x48>)
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	7bb8      	ldrb	r0, [r7, #14]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	460b      	mov	r3, r1
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	f000 f9f4 	bl	800e728 <drv_uartTransmitDMA>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800e344:	7bfb      	ldrb	r3, [r7, #15]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	0801cf18 	.word	0x0801cf18
 800e354:	20000438 	.word	0x20000438

0800e358 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 800e35e:	2355      	movs	r3, #85	@ 0x55
 800e360:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 800e362:	2300      	movs	r3, #0
 800e364:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800e366:	2300      	movs	r3, #0
 800e368:	71bb      	strb	r3, [r7, #6]
 800e36a:	e00e      	b.n	800e38a <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	2b55      	cmp	r3, #85	@ 0x55
 800e370:	d106      	bne.n	800e380 <drv_uartInit+0x28>
 800e372:	79bb      	ldrb	r3, [r7, #6]
 800e374:	4618      	mov	r0, r3
 800e376:	f000 f81b 	bl	800e3b0 <drv_uartInitInstance>
 800e37a:	4603      	mov	r3, r0
 800e37c:	71fb      	strb	r3, [r7, #7]
 800e37e:	e001      	b.n	800e384 <drv_uartInit+0x2c>
 800e380:	23ae      	movs	r3, #174	@ 0xae
 800e382:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800e384:	79bb      	ldrb	r3, [r7, #6]
 800e386:	3301      	adds	r3, #1
 800e388:	71bb      	strb	r3, [r7, #6]
 800e38a:	79ba      	ldrb	r2, [r7, #6]
 800e38c:	4b06      	ldr	r3, [pc, #24]	@ (800e3a8 <drv_uartInit+0x50>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4906      	ldr	r1, [pc, #24]	@ (800e3ac <drv_uartInit+0x54>)
 800e392:	fba1 1303 	umull	r1, r3, r1, r3
 800e396:	095b      	lsrs	r3, r3, #5
 800e398:	429a      	cmp	r2, r3
 800e39a:	d3e7      	bcc.n	800e36c <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 800e39c:	79fb      	ldrb	r3, [r7, #7]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	20000464 	.word	0x20000464
 800e3ac:	cccccccd 	.word	0xcccccccd

0800e3b0 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 800e3ba:	23ae      	movs	r3, #174	@ 0xae
 800e3bc:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 800e3c2:	79fa      	ldrb	r2, [r7, #7]
 800e3c4:	4b82      	ldr	r3, [pc, #520]	@ (800e5d0 <drv_uartInitInstance+0x220>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4982      	ldr	r1, [pc, #520]	@ (800e5d4 <drv_uartInitInstance+0x224>)
 800e3ca:	fba1 1303 	umull	r1, r3, r1, r3
 800e3ce:	095b      	lsrs	r3, r3, #5
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	f080 80f2 	bcs.w	800e5ba <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 800e3d6:	79fa      	ldrb	r2, [r7, #7]
 800e3d8:	497f      	ldr	r1, [pc, #508]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	00db      	lsls	r3, r3, #3
 800e3e2:	440b      	add	r3, r1
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 800e3e8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ea:	7bba      	ldrb	r2, [r7, #14]
 800e3ec:	497b      	ldr	r1, [pc, #492]	@ (800e5dc <drv_uartInitInstance+0x22c>)
 800e3ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3f2:	487b      	ldr	r0, [pc, #492]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	011b      	lsls	r3, r3, #4
 800e3f8:	4413      	add	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4403      	add	r3, r0
 800e3fe:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 800e400:	79f9      	ldrb	r1, [r7, #7]
 800e402:	7bba      	ldrb	r2, [r7, #14]
 800e404:	4874      	ldr	r0, [pc, #464]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e406:	460b      	mov	r3, r1
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	440b      	add	r3, r1
 800e40c:	00db      	lsls	r3, r3, #3
 800e40e:	4403      	add	r3, r0
 800e410:	3304      	adds	r3, #4
 800e412:	6819      	ldr	r1, [r3, #0]
 800e414:	4872      	ldr	r0, [pc, #456]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e416:	4613      	mov	r3, r2
 800e418:	011b      	lsls	r3, r3, #4
 800e41a:	4413      	add	r3, r2
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4403      	add	r3, r0
 800e420:	3304      	adds	r3, #4
 800e422:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 800e424:	79f9      	ldrb	r1, [r7, #7]
 800e426:	7bba      	ldrb	r2, [r7, #14]
 800e428:	486b      	ldr	r0, [pc, #428]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e42a:	460b      	mov	r3, r1
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	440b      	add	r3, r1
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	4403      	add	r3, r0
 800e434:	3308      	adds	r3, #8
 800e436:	6819      	ldr	r1, [r3, #0]
 800e438:	4869      	ldr	r0, [pc, #420]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e43a:	4613      	mov	r3, r2
 800e43c:	011b      	lsls	r3, r3, #4
 800e43e:	4413      	add	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4403      	add	r3, r0
 800e444:	3308      	adds	r3, #8
 800e446:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 800e448:	79f9      	ldrb	r1, [r7, #7]
 800e44a:	7bba      	ldrb	r2, [r7, #14]
 800e44c:	4862      	ldr	r0, [pc, #392]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e44e:	460b      	mov	r3, r1
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	440b      	add	r3, r1
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	4403      	add	r3, r0
 800e458:	330c      	adds	r3, #12
 800e45a:	6819      	ldr	r1, [r3, #0]
 800e45c:	4860      	ldr	r0, [pc, #384]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e45e:	4613      	mov	r3, r2
 800e460:	011b      	lsls	r3, r3, #4
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4403      	add	r3, r0
 800e468:	330c      	adds	r3, #12
 800e46a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 800e46c:	79f9      	ldrb	r1, [r7, #7]
 800e46e:	7bba      	ldrb	r2, [r7, #14]
 800e470:	4859      	ldr	r0, [pc, #356]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e472:	460b      	mov	r3, r1
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	440b      	add	r3, r1
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	4403      	add	r3, r0
 800e47c:	3310      	adds	r3, #16
 800e47e:	6819      	ldr	r1, [r3, #0]
 800e480:	4857      	ldr	r0, [pc, #348]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e482:	4613      	mov	r3, r2
 800e484:	011b      	lsls	r3, r3, #4
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4403      	add	r3, r0
 800e48c:	3310      	adds	r3, #16
 800e48e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 800e490:	79f9      	ldrb	r1, [r7, #7]
 800e492:	7bba      	ldrb	r2, [r7, #14]
 800e494:	4850      	ldr	r0, [pc, #320]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e496:	460b      	mov	r3, r1
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	440b      	add	r3, r1
 800e49c:	00db      	lsls	r3, r3, #3
 800e49e:	4403      	add	r3, r0
 800e4a0:	3314      	adds	r3, #20
 800e4a2:	6819      	ldr	r1, [r3, #0]
 800e4a4:	484e      	ldr	r0, [pc, #312]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	011b      	lsls	r3, r3, #4
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	4403      	add	r3, r0
 800e4b0:	3314      	adds	r3, #20
 800e4b2:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 800e4b4:	79f9      	ldrb	r1, [r7, #7]
 800e4b6:	7bba      	ldrb	r2, [r7, #14]
 800e4b8:	4847      	ldr	r0, [pc, #284]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	440b      	add	r3, r1
 800e4c0:	00db      	lsls	r3, r3, #3
 800e4c2:	4403      	add	r3, r0
 800e4c4:	3318      	adds	r3, #24
 800e4c6:	6819      	ldr	r1, [r3, #0]
 800e4c8:	4845      	ldr	r0, [pc, #276]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	011b      	lsls	r3, r3, #4
 800e4ce:	4413      	add	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4403      	add	r3, r0
 800e4d4:	3318      	adds	r3, #24
 800e4d6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 800e4d8:	79f9      	ldrb	r1, [r7, #7]
 800e4da:	7bba      	ldrb	r2, [r7, #14]
 800e4dc:	483e      	ldr	r0, [pc, #248]	@ (800e5d8 <drv_uartInitInstance+0x228>)
 800e4de:	460b      	mov	r3, r1
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	440b      	add	r3, r1
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	4403      	add	r3, r0
 800e4e8:	331c      	adds	r3, #28
 800e4ea:	6819      	ldr	r1, [r3, #0]
 800e4ec:	483c      	ldr	r0, [pc, #240]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	011b      	lsls	r3, r3, #4
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	4403      	add	r3, r0
 800e4f8:	331c      	adds	r3, #28
 800e4fa:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800e4fc:	7bba      	ldrb	r2, [r7, #14]
 800e4fe:	4613      	mov	r3, r2
 800e500:	011b      	lsls	r3, r3, #4
 800e502:	4413      	add	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4a36      	ldr	r2, [pc, #216]	@ (800e5e0 <drv_uartInitInstance+0x230>)
 800e508:	4413      	add	r3, r2
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fa ffa8 	bl	8009460 <HAL_UART_Init>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d14a      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800e516:	7bbb      	ldrb	r3, [r7, #14]
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4a32      	ldr	r2, [pc, #200]	@ (800e5e4 <drv_uartInitInstance+0x234>)
 800e51c:	4413      	add	r3, r2
 800e51e:	4618      	mov	r0, r3
 800e520:	f007 fe12 	bl	8016148 <gos_mutexInit>
 800e524:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800e526:	2b55      	cmp	r3, #85	@ 0x55
 800e528:	d140      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800e52a:	7bbb      	ldrb	r3, [r7, #14]
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4a2e      	ldr	r2, [pc, #184]	@ (800e5e8 <drv_uartInitInstance+0x238>)
 800e530:	4413      	add	r3, r2
 800e532:	4618      	mov	r0, r3
 800e534:	f007 fe08 	bl	8016148 <gos_mutexInit>
 800e538:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800e53a:	2b55      	cmp	r3, #85	@ 0x55
 800e53c:	d136      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800e53e:	7bba      	ldrb	r2, [r7, #14]
 800e540:	4613      	mov	r3, r2
 800e542:	005b      	lsls	r3, r3, #1
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4a28      	ldr	r2, [pc, #160]	@ (800e5ec <drv_uartInitInstance+0x23c>)
 800e54a:	4413      	add	r3, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f009 fe97 	bl	8018280 <gos_triggerInit>
 800e552:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800e554:	2b55      	cmp	r3, #85	@ 0x55
 800e556:	d129      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800e558:	7bba      	ldrb	r2, [r7, #14]
 800e55a:	4613      	mov	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	4413      	add	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4a23      	ldr	r2, [pc, #140]	@ (800e5f0 <drv_uartInitInstance+0x240>)
 800e564:	4413      	add	r3, r2
 800e566:	4618      	mov	r0, r3
 800e568:	f009 fe8a 	bl	8018280 <gos_triggerInit>
 800e56c:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800e56e:	2b55      	cmp	r3, #85	@ 0x55
 800e570:	d11c      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800e572:	7bba      	ldrb	r2, [r7, #14]
 800e574:	4613      	mov	r3, r2
 800e576:	005b      	lsls	r3, r3, #1
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4a1b      	ldr	r2, [pc, #108]	@ (800e5ec <drv_uartInitInstance+0x23c>)
 800e57e:	4413      	add	r3, r2
 800e580:	4618      	mov	r0, r3
 800e582:	f009 fe99 	bl	80182b8 <gos_triggerReset>
 800e586:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800e588:	2b55      	cmp	r3, #85	@ 0x55
 800e58a:	d10f      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 800e58c:	7bba      	ldrb	r2, [r7, #14]
 800e58e:	4613      	mov	r3, r2
 800e590:	005b      	lsls	r3, r3, #1
 800e592:	4413      	add	r3, r2
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	4a16      	ldr	r2, [pc, #88]	@ (800e5f0 <drv_uartInitInstance+0x240>)
 800e598:	4413      	add	r3, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f009 fe8c 	bl	80182b8 <gos_triggerReset>
 800e5a0:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800e5a2:	2b55      	cmp	r3, #85	@ 0x55
 800e5a4:	d102      	bne.n	800e5ac <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 800e5a6:	2355      	movs	r3, #85	@ 0x55
 800e5a8:	73fb      	strb	r3, [r7, #15]
 800e5aa:	e00c      	b.n	800e5c6 <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 800e5ac:	4b11      	ldr	r3, [pc, #68]	@ (800e5f4 <drv_uartInitInstance+0x244>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f043 0304 	orr.w	r3, r3, #4
 800e5b4:	4a0f      	ldr	r2, [pc, #60]	@ (800e5f4 <drv_uartInitInstance+0x244>)
 800e5b6:	6013      	str	r3, [r2, #0]
 800e5b8:	e005      	b.n	800e5c6 <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 800e5ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e5f4 <drv_uartInitInstance+0x244>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f043 0302 	orr.w	r3, r3, #2
 800e5c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e5f4 <drv_uartInitInstance+0x244>)
 800e5c4:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	20000464 	.word	0x20000464
 800e5d4:	cccccccd 	.word	0xcccccccd
 800e5d8:	0801cea0 	.word	0x0801cea0
 800e5dc:	20000564 	.word	0x20000564
 800e5e0:	20002bbc 	.word	0x20002bbc
 800e5e4:	20002d54 	.word	0x20002d54
 800e5e8:	20002d6c 	.word	0x20002d6c
 800e5ec:	20002d84 	.word	0x20002d84
 800e5f0:	20002dcc 	.word	0x20002dcc
 800e5f4:	20002bb8 	.word	0x20002bb8

0800e5f8 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b086      	sub	sp, #24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60b9      	str	r1, [r7, #8]
 800e600:	607b      	str	r3, [r7, #4]
 800e602:	4603      	mov	r3, r0
 800e604:	73fb      	strb	r3, [r7, #15]
 800e606:	4613      	mov	r3, r2
 800e608:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800e60a:	23ae      	movs	r3, #174	@ 0xae
 800e60c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800e60e:	4b1d      	ldr	r3, [pc, #116]	@ (800e684 <drv_uartTransmitBlocking+0x8c>)
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	3301      	adds	r3, #1
 800e614:	b2da      	uxtb	r2, r3
 800e616:	4b1b      	ldr	r3, [pc, #108]	@ (800e684 <drv_uartTransmitBlocking+0x8c>)
 800e618:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800e61a:	7bfa      	ldrb	r2, [r7, #15]
 800e61c:	4613      	mov	r3, r2
 800e61e:	011b      	lsls	r3, r3, #4
 800e620:	4413      	add	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4a18      	ldr	r2, [pc, #96]	@ (800e688 <drv_uartTransmitBlocking+0x90>)
 800e626:	4413      	add	r3, r2
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fb f9bd 	bl	80099a8 <HAL_UART_Abort>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d111      	bne.n	800e658 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 800e634:	7bfa      	ldrb	r2, [r7, #15]
 800e636:	4613      	mov	r3, r2
 800e638:	011b      	lsls	r3, r3, #4
 800e63a:	4413      	add	r3, r2
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4a12      	ldr	r2, [pc, #72]	@ (800e688 <drv_uartTransmitBlocking+0x90>)
 800e640:	1898      	adds	r0, r3, r2
 800e642:	89ba      	ldrh	r2, [r7, #12]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68b9      	ldr	r1, [r7, #8]
 800e648:	f7fa ff57 	bl	80094fa <HAL_UART_Transmit>
 800e64c:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d102      	bne.n	800e658 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 800e652:	2355      	movs	r3, #85	@ 0x55
 800e654:	75fb      	strb	r3, [r7, #23]
 800e656:	e005      	b.n	800e664 <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 800e658:	4b0c      	ldr	r3, [pc, #48]	@ (800e68c <drv_uartTransmitBlocking+0x94>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f043 0310 	orr.w	r3, r3, #16
 800e660:	4a0a      	ldr	r2, [pc, #40]	@ (800e68c <drv_uartTransmitBlocking+0x94>)
 800e662:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800e664:	4b07      	ldr	r3, [pc, #28]	@ (800e684 <drv_uartTransmitBlocking+0x8c>)
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d005      	beq.n	800e678 <drv_uartTransmitBlocking+0x80>
 800e66c:	4b05      	ldr	r3, [pc, #20]	@ (800e684 <drv_uartTransmitBlocking+0x8c>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	3b01      	subs	r3, #1
 800e672:	b2da      	uxtb	r2, r3
 800e674:	4b03      	ldr	r3, [pc, #12]	@ (800e684 <drv_uartTransmitBlocking+0x8c>)
 800e676:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 800e678:	7dfb      	ldrb	r3, [r7, #23]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	200061b9 	.word	0x200061b9
 800e688:	20002bbc 	.word	0x20002bbc
 800e68c:	20002bb8 	.word	0x20002bb8

0800e690 <drv_uartReceiveBlocking>:
 */
GOS_INLINE gos_result_t drv_uartReceiveBlocking (
        drv_uartPeriphInstance_t instance, u8_t* pData,
        u16_t                    size,     u32_t timeout
        )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	60b9      	str	r1, [r7, #8]
 800e698:	607b      	str	r3, [r7, #4]
 800e69a:	4603      	mov	r3, r0
 800e69c:	73fb      	strb	r3, [r7, #15]
 800e69e:	4613      	mov	r3, r2
 800e6a0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800e6a2:	23ae      	movs	r3, #174	@ 0xae
 800e6a4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800e6a6:	4b1d      	ldr	r3, [pc, #116]	@ (800e71c <drv_uartReceiveBlocking+0x8c>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	b2da      	uxtb	r2, r3
 800e6ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e71c <drv_uartReceiveBlocking+0x8c>)
 800e6b0:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800e6b2:	7bfa      	ldrb	r2, [r7, #15]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	4413      	add	r3, r2
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4a18      	ldr	r2, [pc, #96]	@ (800e720 <drv_uartReceiveBlocking+0x90>)
 800e6be:	4413      	add	r3, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fb f971 	bl	80099a8 <HAL_UART_Abort>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d111      	bne.n	800e6f0 <drv_uartReceiveBlocking+0x60>
    	HAL_UART_Receive(&huarts[instance], pData, size, timeout) == HAL_OK)
 800e6cc:	7bfa      	ldrb	r2, [r7, #15]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	011b      	lsls	r3, r3, #4
 800e6d2:	4413      	add	r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4a12      	ldr	r2, [pc, #72]	@ (800e720 <drv_uartReceiveBlocking+0x90>)
 800e6d8:	1898      	adds	r0, r3, r2
 800e6da:	89ba      	ldrh	r2, [r7, #12]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68b9      	ldr	r1, [r7, #8]
 800e6e0:	f7fa ff9d 	bl	800961e <HAL_UART_Receive>
 800e6e4:	4603      	mov	r3, r0
    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d102      	bne.n	800e6f0 <drv_uartReceiveBlocking+0x60>
    {
    	uartReceiveResult = GOS_SUCCESS;
 800e6ea:	2355      	movs	r3, #85	@ 0x55
 800e6ec:	75fb      	strb	r3, [r7, #23]
 800e6ee:	e005      	b.n	800e6fc <drv_uartReceiveBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_BLOCKING);
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e724 <drv_uartReceiveBlocking+0x94>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6f8:	4a0a      	ldr	r2, [pc, #40]	@ (800e724 <drv_uartReceiveBlocking+0x94>)
 800e6fa:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800e6fc:	4b07      	ldr	r3, [pc, #28]	@ (800e71c <drv_uartReceiveBlocking+0x8c>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d005      	beq.n	800e710 <drv_uartReceiveBlocking+0x80>
 800e704:	4b05      	ldr	r3, [pc, #20]	@ (800e71c <drv_uartReceiveBlocking+0x8c>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	3b01      	subs	r3, #1
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	4b03      	ldr	r3, [pc, #12]	@ (800e71c <drv_uartReceiveBlocking+0x8c>)
 800e70e:	701a      	strb	r2, [r3, #0]

    return uartReceiveResult;
 800e710:	7dfb      	ldrb	r3, [r7, #23]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3718      	adds	r7, #24
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	200061b9 	.word	0x200061b9
 800e720:	20002bbc 	.word	0x20002bbc
 800e724:	20002bb8 	.word	0x20002bb8

0800e728 <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60b9      	str	r1, [r7, #8]
 800e730:	607b      	str	r3, [r7, #4]
 800e732:	4603      	mov	r3, r0
 800e734:	73fb      	strb	r3, [r7, #15]
 800e736:	4613      	mov	r3, r2
 800e738:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800e73a:	23ae      	movs	r3, #174	@ 0xae
 800e73c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4a2d      	ldr	r2, [pc, #180]	@ (800e7f8 <drv_uartTransmitDMA+0xd0>)
 800e744:	4413      	add	r3, r2
 800e746:	6879      	ldr	r1, [r7, #4]
 800e748:	4618      	mov	r0, r3
 800e74a:	f007 fd17 	bl	801617c <gos_mutexLock>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b55      	cmp	r3, #85	@ 0x55
 800e752:	d13e      	bne.n	800e7d2 <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800e754:	7bfa      	ldrb	r2, [r7, #15]
 800e756:	4613      	mov	r3, r2
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	4413      	add	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4a27      	ldr	r2, [pc, #156]	@ (800e7fc <drv_uartTransmitDMA+0xd4>)
 800e760:	4413      	add	r3, r2
 800e762:	89ba      	ldrh	r2, [r7, #12]
 800e764:	68b9      	ldr	r1, [r7, #8]
 800e766:	4618      	mov	r0, r3
 800e768:	f7fb f870 	bl	800984c <HAL_UART_Transmit_DMA>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d11e      	bne.n	800e7b0 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800e772:	7bfa      	ldrb	r2, [r7, #15]
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4a20      	ldr	r2, [pc, #128]	@ (800e800 <drv_uartTransmitDMA+0xd8>)
 800e77e:	4413      	add	r3, r2
 800e780:	6a3a      	ldr	r2, [r7, #32]
 800e782:	2101      	movs	r1, #1
 800e784:	4618      	mov	r0, r3
 800e786:	f009 fdef 	bl	8018368 <gos_triggerWait>
 800e78a:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800e78c:	2b55      	cmp	r3, #85	@ 0x55
 800e78e:	d10f      	bne.n	800e7b0 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800e790:	7bfa      	ldrb	r2, [r7, #15]
 800e792:	4613      	mov	r3, r2
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	4413      	add	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4a19      	ldr	r2, [pc, #100]	@ (800e800 <drv_uartTransmitDMA+0xd8>)
 800e79c:	4413      	add	r3, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f009 fd8a 	bl	80182b8 <gos_triggerReset>
 800e7a4:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800e7a6:	2b55      	cmp	r3, #85	@ 0x55
 800e7a8:	d102      	bne.n	800e7b0 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800e7aa:	2355      	movs	r3, #85	@ 0x55
 800e7ac:	75fb      	strb	r3, [r7, #23]
 800e7ae:	e016      	b.n	800e7de <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800e7b0:	7bfa      	ldrb	r2, [r7, #15]
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	011b      	lsls	r3, r3, #4
 800e7b6:	4413      	add	r3, r2
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	4a10      	ldr	r2, [pc, #64]	@ (800e7fc <drv_uartTransmitDMA+0xd4>)
 800e7bc:	4413      	add	r3, r2
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fb f9de 	bl	8009b80 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 800e7c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e804 <drv_uartTransmitDMA+0xdc>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7cc:	4a0d      	ldr	r2, [pc, #52]	@ (800e804 <drv_uartTransmitDMA+0xdc>)
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	e005      	b.n	800e7de <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 800e7d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e804 <drv_uartTransmitDMA+0xdc>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f043 0320 	orr.w	r3, r3, #32
 800e7da:	4a0a      	ldr	r2, [pc, #40]	@ (800e804 <drv_uartTransmitDMA+0xdc>)
 800e7dc:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800e7de:	7bfb      	ldrb	r3, [r7, #15]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4a05      	ldr	r2, [pc, #20]	@ (800e7f8 <drv_uartTransmitDMA+0xd0>)
 800e7e4:	4413      	add	r3, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f007 fdce 	bl	8016388 <gos_mutexUnlock>

    return uartTransmitResult;
 800e7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20002d6c 	.word	0x20002d6c
 800e7fc:	20002bbc 	.word	0x20002bbc
 800e800:	20002dcc 	.word	0x20002dcc
 800e804:	20002bb8 	.word	0x20002bb8

0800e808 <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60b9      	str	r1, [r7, #8]
 800e810:	607b      	str	r3, [r7, #4]
 800e812:	4603      	mov	r3, r0
 800e814:	73fb      	strb	r3, [r7, #15]
 800e816:	4613      	mov	r3, r2
 800e818:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800e81a:	23ae      	movs	r3, #174	@ 0xae
 800e81c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	4a2d      	ldr	r2, [pc, #180]	@ (800e8d8 <drv_uartReceiveDMA+0xd0>)
 800e824:	4413      	add	r3, r2
 800e826:	6879      	ldr	r1, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	f007 fca7 	bl	801617c <gos_mutexLock>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b55      	cmp	r3, #85	@ 0x55
 800e832:	d13e      	bne.n	800e8b2 <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800e834:	7bfa      	ldrb	r2, [r7, #15]
 800e836:	4613      	mov	r3, r2
 800e838:	011b      	lsls	r3, r3, #4
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4a27      	ldr	r2, [pc, #156]	@ (800e8dc <drv_uartReceiveDMA+0xd4>)
 800e840:	4413      	add	r3, r2
 800e842:	89ba      	ldrh	r2, [r7, #12]
 800e844:	68b9      	ldr	r1, [r7, #8]
 800e846:	4618      	mov	r0, r3
 800e848:	f7fb f87e 	bl	8009948 <HAL_UART_Receive_DMA>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d11e      	bne.n	800e890 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800e852:	7bfa      	ldrb	r2, [r7, #15]
 800e854:	4613      	mov	r3, r2
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4a20      	ldr	r2, [pc, #128]	@ (800e8e0 <drv_uartReceiveDMA+0xd8>)
 800e85e:	4413      	add	r3, r2
 800e860:	6a3a      	ldr	r2, [r7, #32]
 800e862:	2101      	movs	r1, #1
 800e864:	4618      	mov	r0, r3
 800e866:	f009 fd7f 	bl	8018368 <gos_triggerWait>
 800e86a:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800e86c:	2b55      	cmp	r3, #85	@ 0x55
 800e86e:	d10f      	bne.n	800e890 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800e870:	7bfa      	ldrb	r2, [r7, #15]
 800e872:	4613      	mov	r3, r2
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4a19      	ldr	r2, [pc, #100]	@ (800e8e0 <drv_uartReceiveDMA+0xd8>)
 800e87c:	4413      	add	r3, r2
 800e87e:	4618      	mov	r0, r3
 800e880:	f009 fd1a 	bl	80182b8 <gos_triggerReset>
 800e884:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800e886:	2b55      	cmp	r3, #85	@ 0x55
 800e888:	d102      	bne.n	800e890 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 800e88a:	2355      	movs	r3, #85	@ 0x55
 800e88c:	75fb      	strb	r3, [r7, #23]
 800e88e:	e016      	b.n	800e8be <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800e890:	7bfa      	ldrb	r2, [r7, #15]
 800e892:	4613      	mov	r3, r2
 800e894:	011b      	lsls	r3, r3, #4
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4a10      	ldr	r2, [pc, #64]	@ (800e8dc <drv_uartReceiveDMA+0xd4>)
 800e89c:	4413      	add	r3, r2
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fb f96e 	bl	8009b80 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 800e8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e8e4 <drv_uartReceiveDMA+0xdc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e8ac:	4a0d      	ldr	r2, [pc, #52]	@ (800e8e4 <drv_uartReceiveDMA+0xdc>)
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	e005      	b.n	800e8be <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 800e8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e4 <drv_uartReceiveDMA+0xdc>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8ba:	4a0a      	ldr	r2, [pc, #40]	@ (800e8e4 <drv_uartReceiveDMA+0xdc>)
 800e8bc:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4a05      	ldr	r2, [pc, #20]	@ (800e8d8 <drv_uartReceiveDMA+0xd0>)
 800e8c4:	4413      	add	r3, r2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f007 fd5e 	bl	8016388 <gos_mutexUnlock>

    return uartReceiveResult;
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20002d54 	.word	0x20002d54
 800e8dc:	20002bbc 	.word	0x20002bbc
 800e8e0:	20002d84 	.word	0x20002d84
 800e8e4:	20002bb8 	.word	0x20002bb8

0800e8e8 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60b9      	str	r1, [r7, #8]
 800e8f0:	607b      	str	r3, [r7, #4]
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	73fb      	strb	r3, [r7, #15]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800e8fa:	23ae      	movs	r3, #174	@ 0xae
 800e8fc:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4a2d      	ldr	r2, [pc, #180]	@ (800e9b8 <drv_uartTransmitIT+0xd0>)
 800e904:	4413      	add	r3, r2
 800e906:	6879      	ldr	r1, [r7, #4]
 800e908:	4618      	mov	r0, r3
 800e90a:	f007 fc37 	bl	801617c <gos_mutexLock>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b55      	cmp	r3, #85	@ 0x55
 800e912:	d13e      	bne.n	800e992 <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800e914:	7bfa      	ldrb	r2, [r7, #15]
 800e916:	4613      	mov	r3, r2
 800e918:	011b      	lsls	r3, r3, #4
 800e91a:	4413      	add	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4a27      	ldr	r2, [pc, #156]	@ (800e9bc <drv_uartTransmitIT+0xd4>)
 800e920:	4413      	add	r3, r2
 800e922:	89ba      	ldrh	r2, [r7, #12]
 800e924:	68b9      	ldr	r1, [r7, #8]
 800e926:	4618      	mov	r0, r3
 800e928:	f7fa ff1b 	bl	8009762 <HAL_UART_Transmit_IT>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d11e      	bne.n	800e970 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800e932:	7bfa      	ldrb	r2, [r7, #15]
 800e934:	4613      	mov	r3, r2
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	4413      	add	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	4a20      	ldr	r2, [pc, #128]	@ (800e9c0 <drv_uartTransmitIT+0xd8>)
 800e93e:	4413      	add	r3, r2
 800e940:	6a3a      	ldr	r2, [r7, #32]
 800e942:	2101      	movs	r1, #1
 800e944:	4618      	mov	r0, r3
 800e946:	f009 fd0f 	bl	8018368 <gos_triggerWait>
 800e94a:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800e94c:	2b55      	cmp	r3, #85	@ 0x55
 800e94e:	d10f      	bne.n	800e970 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800e950:	7bfa      	ldrb	r2, [r7, #15]
 800e952:	4613      	mov	r3, r2
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	4413      	add	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4a19      	ldr	r2, [pc, #100]	@ (800e9c0 <drv_uartTransmitIT+0xd8>)
 800e95c:	4413      	add	r3, r2
 800e95e:	4618      	mov	r0, r3
 800e960:	f009 fcaa 	bl	80182b8 <gos_triggerReset>
 800e964:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800e966:	2b55      	cmp	r3, #85	@ 0x55
 800e968:	d102      	bne.n	800e970 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800e96a:	2355      	movs	r3, #85	@ 0x55
 800e96c:	75fb      	strb	r3, [r7, #23]
 800e96e:	e016      	b.n	800e99e <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800e970:	7bfa      	ldrb	r2, [r7, #15]
 800e972:	4613      	mov	r3, r2
 800e974:	011b      	lsls	r3, r3, #4
 800e976:	4413      	add	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	4a10      	ldr	r2, [pc, #64]	@ (800e9bc <drv_uartTransmitIT+0xd4>)
 800e97c:	4413      	add	r3, r2
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fb f8fe 	bl	8009b80 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 800e984:	4b0f      	ldr	r3, [pc, #60]	@ (800e9c4 <drv_uartTransmitIT+0xdc>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e98c:	4a0d      	ldr	r2, [pc, #52]	@ (800e9c4 <drv_uartTransmitIT+0xdc>)
 800e98e:	6013      	str	r3, [r2, #0]
 800e990:	e005      	b.n	800e99e <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 800e992:	4b0c      	ldr	r3, [pc, #48]	@ (800e9c4 <drv_uartTransmitIT+0xdc>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e99a:	4a0a      	ldr	r2, [pc, #40]	@ (800e9c4 <drv_uartTransmitIT+0xdc>)
 800e99c:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800e99e:	7bfb      	ldrb	r3, [r7, #15]
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4a05      	ldr	r2, [pc, #20]	@ (800e9b8 <drv_uartTransmitIT+0xd0>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f007 fcee 	bl	8016388 <gos_mutexUnlock>

    return uartTransmitResult;
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3718      	adds	r7, #24
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20002d6c 	.word	0x20002d6c
 800e9bc:	20002bbc 	.word	0x20002bbc
 800e9c0:	20002dcc 	.word	0x20002dcc
 800e9c4:	20002bb8 	.word	0x20002bb8

0800e9c8 <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b086      	sub	sp, #24
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60b9      	str	r1, [r7, #8]
 800e9d0:	607b      	str	r3, [r7, #4]
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73fb      	strb	r3, [r7, #15]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 800e9da:	23ae      	movs	r3, #174	@ 0xae
 800e9dc:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4a2d      	ldr	r2, [pc, #180]	@ (800ea98 <drv_uartReceiveIT+0xd0>)
 800e9e4:	4413      	add	r3, r2
 800e9e6:	6879      	ldr	r1, [r7, #4]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f007 fbc7 	bl	801617c <gos_mutexLock>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b55      	cmp	r3, #85	@ 0x55
 800e9f2:	d13e      	bne.n	800ea72 <drv_uartReceiveIT+0xaa>
    {
    	//__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800e9f4:	7bfa      	ldrb	r2, [r7, #15]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	4413      	add	r3, r2
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4a27      	ldr	r2, [pc, #156]	@ (800ea9c <drv_uartReceiveIT+0xd4>)
 800ea00:	4413      	add	r3, r2
 800ea02:	89ba      	ldrh	r2, [r7, #12]
 800ea04:	68b9      	ldr	r1, [r7, #8]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fa fef0 	bl	80097ec <HAL_UART_Receive_IT>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d11e      	bne.n	800ea50 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ea12:	7bfa      	ldrb	r2, [r7, #15]
 800ea14:	4613      	mov	r3, r2
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	4413      	add	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4a20      	ldr	r2, [pc, #128]	@ (800eaa0 <drv_uartReceiveIT+0xd8>)
 800ea1e:	4413      	add	r3, r2
 800ea20:	6a3a      	ldr	r2, [r7, #32]
 800ea22:	2101      	movs	r1, #1
 800ea24:	4618      	mov	r0, r3
 800ea26:	f009 fc9f 	bl	8018368 <gos_triggerWait>
 800ea2a:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800ea2c:	2b55      	cmp	r3, #85	@ 0x55
 800ea2e:	d10f      	bne.n	800ea50 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800ea30:	7bfa      	ldrb	r2, [r7, #15]
 800ea32:	4613      	mov	r3, r2
 800ea34:	005b      	lsls	r3, r3, #1
 800ea36:	4413      	add	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4a19      	ldr	r2, [pc, #100]	@ (800eaa0 <drv_uartReceiveIT+0xd8>)
 800ea3c:	4413      	add	r3, r2
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f009 fc3a 	bl	80182b8 <gos_triggerReset>
 800ea44:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ea46:	2b55      	cmp	r3, #85	@ 0x55
 800ea48:	d102      	bne.n	800ea50 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 800ea4a:	2355      	movs	r3, #85	@ 0x55
 800ea4c:	75fb      	strb	r3, [r7, #23]
 800ea4e:	e016      	b.n	800ea7e <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800ea50:	7bfa      	ldrb	r2, [r7, #15]
 800ea52:	4613      	mov	r3, r2
 800ea54:	011b      	lsls	r3, r3, #4
 800ea56:	4413      	add	r3, r2
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4a10      	ldr	r2, [pc, #64]	@ (800ea9c <drv_uartReceiveIT+0xd4>)
 800ea5c:	4413      	add	r3, r2
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fb f88e 	bl	8009b80 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 800ea64:	4b0f      	ldr	r3, [pc, #60]	@ (800eaa4 <drv_uartReceiveIT+0xdc>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ea6c:	4a0d      	ldr	r2, [pc, #52]	@ (800eaa4 <drv_uartReceiveIT+0xdc>)
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	e005      	b.n	800ea7e <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 800ea72:	4b0c      	ldr	r3, [pc, #48]	@ (800eaa4 <drv_uartReceiveIT+0xdc>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ea7a:	4a0a      	ldr	r2, [pc, #40]	@ (800eaa4 <drv_uartReceiveIT+0xdc>)
 800ea7c:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4a05      	ldr	r2, [pc, #20]	@ (800ea98 <drv_uartReceiveIT+0xd0>)
 800ea84:	4413      	add	r3, r2
 800ea86:	4618      	mov	r0, r3
 800ea88:	f007 fc7e 	bl	8016388 <gos_mutexUnlock>

    return uartReceiveResult;
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3718      	adds	r7, #24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	20002d54 	.word	0x20002d54
 800ea9c:	20002bbc 	.word	0x20002bbc
 800eaa0:	20002d84 	.word	0x20002d84
 800eaa4:	20002bb8 	.word	0x20002bb8

0800eaa8 <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800eaac:	4b16      	ldr	r3, [pc, #88]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <USART1_IRQHandler+0x18>
 800eab4:	4b15      	ldr	r3, [pc, #84]	@ (800eb0c <USART1_IRQHandler+0x64>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	4b13      	ldr	r3, [pc, #76]	@ (800eb0c <USART1_IRQHandler+0x64>)
 800eabe:	701a      	strb	r2, [r3, #0]
 800eac0:	4b11      	ldr	r3, [pc, #68]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	3301      	adds	r3, #1
 800eac6:	b2da      	uxtb	r2, r3
 800eac8:	4b0f      	ldr	r3, [pc, #60]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800eaca:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 800eacc:	4810      	ldr	r0, [pc, #64]	@ (800eb10 <USART1_IRQHandler+0x68>)
 800eace:	f7fb f96b 	bl	8009da8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ead2:	4b0d      	ldr	r3, [pc, #52]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <USART1_IRQHandler+0x3e>
 800eada:	4b0b      	ldr	r3, [pc, #44]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	3b01      	subs	r3, #1
 800eae0:	b2da      	uxtb	r2, r3
 800eae2:	4b09      	ldr	r3, [pc, #36]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	4b08      	ldr	r3, [pc, #32]	@ (800eb08 <USART1_IRQHandler+0x60>)
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d109      	bne.n	800eb02 <USART1_IRQHandler+0x5a>
 800eaee:	4b07      	ldr	r3, [pc, #28]	@ (800eb0c <USART1_IRQHandler+0x64>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d005      	beq.n	800eb02 <USART1_IRQHandler+0x5a>
 800eaf6:	4b05      	ldr	r3, [pc, #20]	@ (800eb0c <USART1_IRQHandler+0x64>)
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	3b01      	subs	r3, #1
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	4b03      	ldr	r3, [pc, #12]	@ (800eb0c <USART1_IRQHandler+0x64>)
 800eb00:	701a      	strb	r2, [r3, #0]
}
 800eb02:	bf00      	nop
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	200061ba 	.word	0x200061ba
 800eb0c:	200061b9 	.word	0x200061b9
 800eb10:	20002bbc 	.word	0x20002bbc

0800eb14 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800eb18:	4b16      	ldr	r3, [pc, #88]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d105      	bne.n	800eb2c <USART2_IRQHandler+0x18>
 800eb20:	4b15      	ldr	r3, [pc, #84]	@ (800eb78 <USART2_IRQHandler+0x64>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	3301      	adds	r3, #1
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	4b13      	ldr	r3, [pc, #76]	@ (800eb78 <USART2_IRQHandler+0x64>)
 800eb2a:	701a      	strb	r2, [r3, #0]
 800eb2c:	4b11      	ldr	r3, [pc, #68]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	3301      	adds	r3, #1
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	4b0f      	ldr	r3, [pc, #60]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb36:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 800eb38:	4810      	ldr	r0, [pc, #64]	@ (800eb7c <USART2_IRQHandler+0x68>)
 800eb3a:	f7fb f935 	bl	8009da8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800eb3e:	4b0d      	ldr	r3, [pc, #52]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d005      	beq.n	800eb52 <USART2_IRQHandler+0x3e>
 800eb46:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	b2da      	uxtb	r2, r3
 800eb4e:	4b09      	ldr	r3, [pc, #36]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb50:	701a      	strb	r2, [r3, #0]
 800eb52:	4b08      	ldr	r3, [pc, #32]	@ (800eb74 <USART2_IRQHandler+0x60>)
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d109      	bne.n	800eb6e <USART2_IRQHandler+0x5a>
 800eb5a:	4b07      	ldr	r3, [pc, #28]	@ (800eb78 <USART2_IRQHandler+0x64>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d005      	beq.n	800eb6e <USART2_IRQHandler+0x5a>
 800eb62:	4b05      	ldr	r3, [pc, #20]	@ (800eb78 <USART2_IRQHandler+0x64>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	4b03      	ldr	r3, [pc, #12]	@ (800eb78 <USART2_IRQHandler+0x64>)
 800eb6c:	701a      	strb	r2, [r3, #0]
}
 800eb6e:	bf00      	nop
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	200061ba 	.word	0x200061ba
 800eb78:	200061b9 	.word	0x200061b9
 800eb7c:	20002c00 	.word	0x20002c00

0800eb80 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800eb84:	4b16      	ldr	r3, [pc, #88]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d105      	bne.n	800eb98 <USART3_IRQHandler+0x18>
 800eb8c:	4b15      	ldr	r3, [pc, #84]	@ (800ebe4 <USART3_IRQHandler+0x64>)
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	3301      	adds	r3, #1
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	4b13      	ldr	r3, [pc, #76]	@ (800ebe4 <USART3_IRQHandler+0x64>)
 800eb96:	701a      	strb	r2, [r3, #0]
 800eb98:	4b11      	ldr	r3, [pc, #68]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	4b0f      	ldr	r3, [pc, #60]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800eba2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 800eba4:	4810      	ldr	r0, [pc, #64]	@ (800ebe8 <USART3_IRQHandler+0x68>)
 800eba6:	f7fb f8ff 	bl	8009da8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ebaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d005      	beq.n	800ebbe <USART3_IRQHandler+0x3e>
 800ebb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	4b09      	ldr	r3, [pc, #36]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800ebbc:	701a      	strb	r2, [r3, #0]
 800ebbe:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <USART3_IRQHandler+0x60>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d109      	bne.n	800ebda <USART3_IRQHandler+0x5a>
 800ebc6:	4b07      	ldr	r3, [pc, #28]	@ (800ebe4 <USART3_IRQHandler+0x64>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d005      	beq.n	800ebda <USART3_IRQHandler+0x5a>
 800ebce:	4b05      	ldr	r3, [pc, #20]	@ (800ebe4 <USART3_IRQHandler+0x64>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	4b03      	ldr	r3, [pc, #12]	@ (800ebe4 <USART3_IRQHandler+0x64>)
 800ebd8:	701a      	strb	r2, [r3, #0]
}
 800ebda:	bf00      	nop
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	200061ba 	.word	0x200061ba
 800ebe4:	200061b9 	.word	0x200061b9
 800ebe8:	20002c44 	.word	0x20002c44

0800ebec <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800ebf0:	4b16      	ldr	r3, [pc, #88]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d105      	bne.n	800ec04 <UART4_IRQHandler+0x18>
 800ebf8:	4b15      	ldr	r3, [pc, #84]	@ (800ec50 <UART4_IRQHandler+0x64>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	b2da      	uxtb	r2, r3
 800ec00:	4b13      	ldr	r3, [pc, #76]	@ (800ec50 <UART4_IRQHandler+0x64>)
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	4b11      	ldr	r3, [pc, #68]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ec0e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 800ec10:	4810      	ldr	r0, [pc, #64]	@ (800ec54 <UART4_IRQHandler+0x68>)
 800ec12:	f7fb f8c9 	bl	8009da8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ec16:	4b0d      	ldr	r3, [pc, #52]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d005      	beq.n	800ec2a <UART4_IRQHandler+0x3e>
 800ec1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	3b01      	subs	r3, #1
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	4b09      	ldr	r3, [pc, #36]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ec28:	701a      	strb	r2, [r3, #0]
 800ec2a:	4b08      	ldr	r3, [pc, #32]	@ (800ec4c <UART4_IRQHandler+0x60>)
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d109      	bne.n	800ec46 <UART4_IRQHandler+0x5a>
 800ec32:	4b07      	ldr	r3, [pc, #28]	@ (800ec50 <UART4_IRQHandler+0x64>)
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d005      	beq.n	800ec46 <UART4_IRQHandler+0x5a>
 800ec3a:	4b05      	ldr	r3, [pc, #20]	@ (800ec50 <UART4_IRQHandler+0x64>)
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	4b03      	ldr	r3, [pc, #12]	@ (800ec50 <UART4_IRQHandler+0x64>)
 800ec44:	701a      	strb	r2, [r3, #0]
}
 800ec46:	bf00      	nop
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	200061ba 	.word	0x200061ba
 800ec50:	200061b9 	.word	0x200061b9
 800ec54:	20002c88 	.word	0x20002c88

0800ec58 <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800ec5c:	4b16      	ldr	r3, [pc, #88]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d105      	bne.n	800ec70 <UART5_IRQHandler+0x18>
 800ec64:	4b15      	ldr	r3, [pc, #84]	@ (800ecbc <UART5_IRQHandler+0x64>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	4b13      	ldr	r3, [pc, #76]	@ (800ecbc <UART5_IRQHandler+0x64>)
 800ec6e:	701a      	strb	r2, [r3, #0]
 800ec70:	4b11      	ldr	r3, [pc, #68]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	3301      	adds	r3, #1
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	4b0f      	ldr	r3, [pc, #60]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec7a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 800ec7c:	4810      	ldr	r0, [pc, #64]	@ (800ecc0 <UART5_IRQHandler+0x68>)
 800ec7e:	f7fb f893 	bl	8009da8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ec82:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d005      	beq.n	800ec96 <UART5_IRQHandler+0x3e>
 800ec8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	4b08      	ldr	r3, [pc, #32]	@ (800ecb8 <UART5_IRQHandler+0x60>)
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d109      	bne.n	800ecb2 <UART5_IRQHandler+0x5a>
 800ec9e:	4b07      	ldr	r3, [pc, #28]	@ (800ecbc <UART5_IRQHandler+0x64>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <UART5_IRQHandler+0x5a>
 800eca6:	4b05      	ldr	r3, [pc, #20]	@ (800ecbc <UART5_IRQHandler+0x64>)
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	b2da      	uxtb	r2, r3
 800ecae:	4b03      	ldr	r3, [pc, #12]	@ (800ecbc <UART5_IRQHandler+0x64>)
 800ecb0:	701a      	strb	r2, [r3, #0]
}
 800ecb2:	bf00      	nop
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	200061ba 	.word	0x200061ba
 800ecbc:	200061b9 	.word	0x200061b9
 800ecc0:	20002ccc 	.word	0x20002ccc

0800ecc4 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800ecc8:	4b16      	ldr	r3, [pc, #88]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d105      	bne.n	800ecdc <USART6_IRQHandler+0x18>
 800ecd0:	4b15      	ldr	r3, [pc, #84]	@ (800ed28 <USART6_IRQHandler+0x64>)
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	4b13      	ldr	r3, [pc, #76]	@ (800ed28 <USART6_IRQHandler+0x64>)
 800ecda:	701a      	strb	r2, [r3, #0]
 800ecdc:	4b11      	ldr	r3, [pc, #68]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	3301      	adds	r3, #1
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	4b0f      	ldr	r3, [pc, #60]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ece6:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 800ece8:	4810      	ldr	r0, [pc, #64]	@ (800ed2c <USART6_IRQHandler+0x68>)
 800ecea:	f7fb f85d 	bl	8009da8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ecee:	4b0d      	ldr	r3, [pc, #52]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d005      	beq.n	800ed02 <USART6_IRQHandler+0x3e>
 800ecf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	4b09      	ldr	r3, [pc, #36]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ed00:	701a      	strb	r2, [r3, #0]
 800ed02:	4b08      	ldr	r3, [pc, #32]	@ (800ed24 <USART6_IRQHandler+0x60>)
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d109      	bne.n	800ed1e <USART6_IRQHandler+0x5a>
 800ed0a:	4b07      	ldr	r3, [pc, #28]	@ (800ed28 <USART6_IRQHandler+0x64>)
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d005      	beq.n	800ed1e <USART6_IRQHandler+0x5a>
 800ed12:	4b05      	ldr	r3, [pc, #20]	@ (800ed28 <USART6_IRQHandler+0x64>)
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	4b03      	ldr	r3, [pc, #12]	@ (800ed28 <USART6_IRQHandler+0x64>)
 800ed1c:	701a      	strb	r2, [r3, #0]
}
 800ed1e:	bf00      	nop
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	200061ba 	.word	0x200061ba
 800ed28:	200061b9 	.word	0x200061b9
 800ed2c:	20002d10 	.word	0x20002d10

0800ed30 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	73fb      	strb	r3, [r7, #15]
 800ed40:	e015      	b.n	800ed6e <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
 800ed44:	4a0e      	ldr	r2, [pc, #56]	@ (800ed80 <HAL_UART_TxCpltCallback+0x50>)
 800ed46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d10a      	bne.n	800ed68 <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 800ed52:	7bfa      	ldrb	r2, [r7, #15]
 800ed54:	4613      	mov	r3, r2
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	4413      	add	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4a09      	ldr	r2, [pc, #36]	@ (800ed84 <HAL_UART_TxCpltCallback+0x54>)
 800ed5e:	4413      	add	r3, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f009 fbb1 	bl	80184c8 <gos_triggerIncrement>
            break;
 800ed66:	e006      	b.n	800ed76 <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	73fb      	strb	r3, [r7, #15]
 800ed6e:	7bfb      	ldrb	r3, [r7, #15]
 800ed70:	2b05      	cmp	r3, #5
 800ed72:	d9e6      	bls.n	800ed42 <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800ed74:	bf00      	nop
 800ed76:	bf00      	nop
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	20000564 	.word	0x20000564
 800ed84:	20002dcc 	.word	0x20002dcc

0800ed88 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800ed90:	2300      	movs	r3, #0
 800ed92:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800ed94:	2300      	movs	r3, #0
 800ed96:	73fb      	strb	r3, [r7, #15]
 800ed98:	e015      	b.n	800edc6 <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800ed9a:	7bfb      	ldrb	r3, [r7, #15]
 800ed9c:	4a0e      	ldr	r2, [pc, #56]	@ (800edd8 <HAL_UART_RxCpltCallback+0x50>)
 800ed9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d10a      	bne.n	800edc0 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 800edaa:	7bfa      	ldrb	r2, [r7, #15]
 800edac:	4613      	mov	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	4413      	add	r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	4a09      	ldr	r2, [pc, #36]	@ (800eddc <HAL_UART_RxCpltCallback+0x54>)
 800edb6:	4413      	add	r3, r2
 800edb8:	4618      	mov	r0, r3
 800edba:	f009 fb85 	bl	80184c8 <gos_triggerIncrement>
            break;
 800edbe:	e006      	b.n	800edce <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
 800edc2:	3301      	adds	r3, #1
 800edc4:	73fb      	strb	r3, [r7, #15]
 800edc6:	7bfb      	ldrb	r3, [r7, #15]
 800edc8:	2b05      	cmp	r3, #5
 800edca:	d9e6      	bls.n	800ed9a <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800edcc:	bf00      	nop
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20000564 	.word	0x20000564
 800eddc:	20002d84 	.word	0x20002d84

0800ede0 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 800ede8:	2300      	movs	r3, #0
 800edea:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 800edec:	2300      	movs	r3, #0
 800edee:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
 800edf4:	e068      	b.n	800eec8 <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	4a38      	ldr	r2, [pc, #224]	@ (800eedc <HAL_UART_MspInit+0xfc>)
 800edfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d15d      	bne.n	800eec2 <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	73bb      	strb	r3, [r7, #14]
 800ee0a:	e051      	b.n	800eeb0 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 800ee0c:	7bba      	ldrb	r2, [r7, #14]
 800ee0e:	4934      	ldr	r1, [pc, #208]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee10:	4613      	mov	r3, r2
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	4413      	add	r3, r2
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	440b      	add	r3, r1
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	7bfa      	ldrb	r2, [r7, #15]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d143      	bne.n	800eeaa <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 800ee22:	7bba      	ldrb	r2, [r7, #14]
 800ee24:	492e      	ldr	r1, [pc, #184]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	00db      	lsls	r3, r3, #3
 800ee2e:	440b      	add	r3, r1
 800ee30:	3320      	adds	r3, #32
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d016      	beq.n	800ee66 <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 800ee38:	7bba      	ldrb	r2, [r7, #14]
 800ee3a:	4929      	ldr	r1, [pc, #164]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	00db      	lsls	r3, r3, #3
 800ee44:	440b      	add	r3, r1
 800ee46:	3320      	adds	r3, #32
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	1d1a      	adds	r2, r3, #4
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ee50:	7bba      	ldrb	r2, [r7, #14]
 800ee52:	4923      	ldr	r1, [pc, #140]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee54:	4613      	mov	r3, r2
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	440b      	add	r3, r1
 800ee5e:	3320      	adds	r3, #32
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 800ee66:	7bba      	ldrb	r2, [r7, #14]
 800ee68:	491d      	ldr	r1, [pc, #116]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	440b      	add	r3, r1
 800ee74:	3324      	adds	r3, #36	@ 0x24
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d016      	beq.n	800eeaa <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 800ee7c:	7bba      	ldrb	r2, [r7, #14]
 800ee7e:	4918      	ldr	r1, [pc, #96]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee80:	4613      	mov	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	440b      	add	r3, r1
 800ee8a:	3324      	adds	r3, #36	@ 0x24
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	1d1a      	adds	r2, r3, #4
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	635a      	str	r2, [r3, #52]	@ 0x34
 800ee94:	7bba      	ldrb	r2, [r7, #14]
 800ee96:	4912      	ldr	r1, [pc, #72]	@ (800eee0 <HAL_UART_MspInit+0x100>)
 800ee98:	4613      	mov	r3, r2
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	4413      	add	r3, r2
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	440b      	add	r3, r1
 800eea2:	3324      	adds	r3, #36	@ 0x24
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800eeaa:	7bbb      	ldrb	r3, [r7, #14]
 800eeac:	3301      	adds	r3, #1
 800eeae:	73bb      	strb	r3, [r7, #14]
 800eeb0:	7bba      	ldrb	r2, [r7, #14]
 800eeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800eee4 <HAL_UART_MspInit+0x104>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	490c      	ldr	r1, [pc, #48]	@ (800eee8 <HAL_UART_MspInit+0x108>)
 800eeb8:	fba1 1303 	umull	r1, r3, r1, r3
 800eebc:	095b      	lsrs	r3, r3, #5
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d3a4      	bcc.n	800ee0c <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	3301      	adds	r3, #1
 800eec6:	73fb      	strb	r3, [r7, #15]
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	2b05      	cmp	r3, #5
 800eecc:	d993      	bls.n	800edf6 <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr
 800eedc:	20000564 	.word	0x20000564
 800eee0:	0801cea0 	.word	0x0801cea0
 800eee4:	20000464 	.word	0x20000464
 800eee8:	cccccccd 	.word	0xcccccccd

0800eeec <drv_w25q64Init>:

/*
 * Function: drv_w25q64Init
 */
gos_result_t drv_w25q64Init (void_t* pDevice)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800eef4:	2355      	movs	r3, #85	@ 0x55
 800eef6:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800eef8:	2300      	movs	r3, #0
 800eefa:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_W25Q64_DEVICE_NULL);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d103      	bne.n	800ef0a <drv_w25q64Init+0x1e>
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f043 0301 	orr.w	r3, r3, #1
 800ef08:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex), ((drv_w25q64Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_W25Q64_MUTEX_INIT);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10d      	bne.n	800ef2e <drv_w25q64Init+0x42>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	3302      	adds	r3, #2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f007 f916 	bl	8016148 <gos_mutexInit>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b55      	cmp	r3, #85	@ 0x55
 800ef20:	d005      	beq.n	800ef2e <drv_w25q64Init+0x42>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	699b      	ldr	r3, [r3, #24]
 800ef26:	f043 0202 	orr.w	r2, r3, #2
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d102      	bne.n	800ef3a <drv_w25q64Init+0x4e>
 800ef34:	2355      	movs	r3, #85	@ 0x55
 800ef36:	73fb      	strb	r3, [r7, #15]
 800ef38:	e001      	b.n	800ef3e <drv_w25q64Init+0x52>
 800ef3a:	23ae      	movs	r3, #174	@ 0xae
 800ef3c:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3710      	adds	r7, #16
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <drv_w25q64ReadData>:

/*
 * Function: drv_w25q64ReadData
 */
GOS_INLINE void_t drv_w25q64ReadData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b088      	sub	sp, #32
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage  = address / W25Q64_PAGE_SIZE;
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	0a1b      	lsrs	r3, r3, #8
 800ef5a:	61fb      	str	r3, [r7, #28]
    u8_t  offset     = address % W25Q64_PAGE_SIZE;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	76fb      	strb	r3, [r7, #27]
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	021a      	lsls	r2, r3, #8
 800ef64:	7efb      	ldrb	r3, [r7, #27]
 800ef66:	4413      	add	r3, r2
 800ef68:	617b      	str	r3, [r7, #20]
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	743b      	strb	r3, [r7, #16]
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	0c1b      	lsrs	r3, r3, #16
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	747b      	strb	r3, [r7, #17]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	0a1b      	lsrs	r3, r3, #8
 800ef7a:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800ef7c:	74bb      	strb	r3, [r7, #18]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800ef82:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d030      	beq.n	800efec <drv_w25q64ReadData+0xa4>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d02d      	beq.n	800efec <drv_w25q64ReadData+0xa4>
	{
        DRV_ERROR_CHK_SET(
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d110      	bne.n	800efba <drv_w25q64ReadData+0x72>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	1c9a      	adds	r2, r3, #2
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	4619      	mov	r1, r3
 800efa2:	4610      	mov	r0, r2
 800efa4:	f007 f8ea 	bl	801617c <gos_mutexLock>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b55      	cmp	r3, #85	@ 0x55
 800efac:	d005      	beq.n	800efba <drv_w25q64ReadData+0x72>
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	699b      	ldr	r3, [r3, #24]
 800efb2:	f043 0204 	orr.w	r2, r3, #4
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		drv_w25q64ChipSelectLow(pDevice);
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f000 f9cf 	bl	800f35e <drv_w25q64ChipSelectLow>
		drv_w25q64Write(pDevice, command, 4);
 800efc0:	f107 0310 	add.w	r3, r7, #16
 800efc4:	2204      	movs	r2, #4
 800efc6:	4619      	mov	r1, r3
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f000 fa18 	bl	800f3fe <drv_w25q64Write>
		drv_w25q64Read(pDevice, pData, size);
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	461a      	mov	r2, r3
 800efd4:	6879      	ldr	r1, [r7, #4]
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f000 fa35 	bl	800f446 <drv_w25q64Read>
		drv_w25q64ChipSelectHigh(pDevice);
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 f9cc 	bl	800f37a <drv_w25q64ChipSelectHigh>

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3302      	adds	r3, #2
 800efe6:	4618      	mov	r0, r3
 800efe8:	f007 f9ce 	bl	8016388 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800efec:	bf00      	nop
 800efee:	3720      	adds	r7, #32
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <drv_w25q64WriteData>:

/*
 * Function: drv_w25q64WriteData
 */
GOS_INLINE void_t drv_w25q64WriteData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b090      	sub	sp, #64	@ 0x40
 800eff8:	af02      	add	r7, sp, #8
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
 800f000:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage    = address / W25Q64_PAGE_SIZE;
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	0a1b      	lsrs	r3, r3, #8
 800f006:	627b      	str	r3, [r7, #36]	@ 0x24
    u8_t  offset       = address % W25Q64_PAGE_SIZE;
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	u16_t startSector  = startPage / 16;
 800f00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f010:	091b      	lsrs	r3, r3, #4
 800f012:	86fb      	strh	r3, [r7, #54]	@ 0x36
	u16_t endSector    = (startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE)) / 16;
 800f014:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	4413      	add	r3, r2
 800f01c:	3b01      	subs	r3, #1
 800f01e:	0a1a      	lsrs	r2, r3, #8
 800f020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f022:	4413      	add	r3, r2
 800f024:	091b      	lsrs	r3, r3, #4
 800f026:	843b      	strh	r3, [r7, #32]
	u16_t numOfSectors = endSector - startSector + 1;
 800f028:	8c3a      	ldrh	r2, [r7, #32]
 800f02a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	b29b      	uxth	r3, r3
 800f030:	3301      	adds	r3, #1
 800f032:	83fb      	strh	r3, [r7, #30]
	u32_t sectorOffset = ((startPage % 16) * W25Q64_PAGE_SIZE) + offset;
 800f034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f036:	f003 030f 	and.w	r3, r3, #15
 800f03a:	021a      	lsls	r2, r3, #8
 800f03c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f040:	4413      	add	r3, r2
 800f042:	633b      	str	r3, [r7, #48]	@ 0x30
	u32_t dataIndx     = 0u;
 800f044:	2300      	movs	r3, #0
 800f046:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d06b      	beq.n	800f126 <drv_w25q64WriteData+0x132>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d068      	beq.n	800f126 <drv_w25q64WriteData+0x132>
	{
        DRV_ERROR_CHK_SET(
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d110      	bne.n	800f07e <drv_w25q64WriteData+0x8a>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	1c9a      	adds	r2, r3, #2
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	4619      	mov	r1, r3
 800f066:	4610      	mov	r0, r2
 800f068:	f007 f888 	bl	801617c <gos_mutexLock>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b55      	cmp	r3, #85	@ 0x55
 800f070:	d005      	beq.n	800f07e <drv_w25q64WriteData+0x8a>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	f043 0204 	orr.w	r2, r3, #4
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		for (u16_t i = 0u; i < numOfSectors; i++)
 800f07e:	2300      	movs	r3, #0
 800f080:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f082:	e047      	b.n	800f114 <drv_w25q64WriteData+0x120>
		{
			u32_t _startPage = startSector * 16;
 800f084:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f086:	011b      	lsls	r3, r3, #4
 800f088:	61bb      	str	r3, [r7, #24]

			(void_t) memset(sectorBuffer, 0, SECTOR_SIZE);
 800f08a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f08e:	2100      	movs	r1, #0
 800f090:	4827      	ldr	r0, [pc, #156]	@ (800f130 <drv_w25q64WriteData+0x13c>)
 800f092:	f00a f8f3 	bl	801927c <memset>

			drv_w25q64ReadDataFast(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800f096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	4b24      	ldr	r3, [pc, #144]	@ (800f130 <drv_w25q64WriteData+0x13c>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	69b9      	ldr	r1, [r7, #24]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 f846 	bl	800f134 <drv_w25q64ReadDataFast>

			u16_t bytesRem = drv_w25q64BytesToModify(size, sectorOffset);
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	6838      	ldr	r0, [r7, #0]
 800f0b0:	f000 f939 	bl	800f326 <drv_w25q64BytesToModify>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	82fb      	strh	r3, [r7, #22]

			for (u16_t j = 0u; j < bytesRem; j++)
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f0bc:	e00d      	b.n	800f0da <drv_w25q64WriteData+0xe6>
			{
				sectorBuffer[j + sectorOffset] = pData[j + dataIndx];
 800f0be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c2:	4413      	add	r3, r2
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	441a      	add	r2, r3
 800f0c8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0cc:	440b      	add	r3, r1
 800f0ce:	7811      	ldrb	r1, [r2, #0]
 800f0d0:	4a17      	ldr	r2, [pc, #92]	@ (800f130 <drv_w25q64WriteData+0x13c>)
 800f0d2:	54d1      	strb	r1, [r2, r3]
			for (u16_t j = 0u; j < bytesRem; j++)
 800f0d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f0da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f0dc:	8afb      	ldrh	r3, [r7, #22]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d3ed      	bcc.n	800f0be <drv_w25q64WriteData+0xca>
			}

			drv_w25q64WriteDataClean(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800f0e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	4b11      	ldr	r3, [pc, #68]	@ (800f130 <drv_w25q64WriteData+0x13c>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	69b9      	ldr	r1, [r7, #24]
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f000 f854 	bl	800f19c <drv_w25q64WriteDataClean>

			startSector++;
 800f0f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
			sectorOffset = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	633b      	str	r3, [r7, #48]	@ 0x30
			dataIndx = dataIndx + bytesRem;
 800f0fe:	8afb      	ldrh	r3, [r7, #22]
 800f100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f102:	4413      	add	r3, r2
 800f104:	62fb      	str	r3, [r7, #44]	@ 0x2c
			size = size - bytesRem;
 800f106:	8afb      	ldrh	r3, [r7, #22]
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	1ad3      	subs	r3, r2, r3
 800f10c:	603b      	str	r3, [r7, #0]
		for (u16_t i = 0u; i < numOfSectors; i++)
 800f10e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f110:	3301      	adds	r3, #1
 800f112:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f114:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800f116:	8bfb      	ldrh	r3, [r7, #30]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d3b3      	bcc.n	800f084 <drv_w25q64WriteData+0x90>
		}

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	3302      	adds	r3, #2
 800f120:	4618      	mov	r0, r3
 800f122:	f007 f931 	bl	8016388 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800f126:	bf00      	nop
 800f128:	3738      	adds	r7, #56	@ 0x38
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20002e14 	.word	0x20002e14

0800f134 <drv_w25q64ReadDataFast>:
 * @param   size      : Size of data to be read.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ReadDataFast (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	603b      	str	r3, [r7, #0]
 800f140:	4613      	mov	r3, r2
 800f142:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	021a      	lsls	r2, r3, #8
 800f148:	79fb      	ldrb	r3, [r7, #7]
 800f14a:	4413      	add	r3, r2
 800f14c:	61fb      	str	r3, [r7, #28]
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800f14e:	230b      	movs	r3, #11
 800f150:	753b      	strb	r3, [r7, #20]
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	0c1b      	lsrs	r3, r3, #16
 800f156:	b2db      	uxtb	r3, r3
 800f158:	757b      	strb	r3, [r7, #21]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	0a1b      	lsrs	r3, r3, #8
 800f15e:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800f160:	75bb      	strb	r3, [r7, #22]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800f166:	75fb      	strb	r3, [r7, #23]
 800f168:	2300      	movs	r3, #0
 800f16a:	763b      	strb	r3, [r7, #24]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 f8f6 	bl	800f35e <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 5);
 800f172:	f107 0314 	add.w	r3, r7, #20
 800f176:	2205      	movs	r2, #5
 800f178:	4619      	mov	r1, r3
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f000 f93f 	bl	800f3fe <drv_w25q64Write>
	drv_w25q64Read(pDevice, pData, size);
 800f180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f182:	b29b      	uxth	r3, r3
 800f184:	461a      	mov	r2, r3
 800f186:	6839      	ldr	r1, [r7, #0]
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f000 f95c 	bl	800f446 <drv_w25q64Read>
	drv_w25q64ChipSelectHigh(pDevice);
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f000 f8f3 	bl	800f37a <drv_w25q64ChipSelectHigh>
}
 800f194:	bf00      	nop
 800f196:	3720      	adds	r7, #32
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <drv_w25q64WriteDataClean>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64WriteDataClean (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b090      	sub	sp, #64	@ 0x40
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t endPage      = startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE);
 800f1ac:	79fa      	ldrb	r2, [r7, #7]
 800f1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1b0:	4413      	add	r3, r2
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	0a1b      	lsrs	r3, r3, #8
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	u32_t numOfPages   = endPage - startPage + 1;
 800f1bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	u16_t startSector  = startPage / 16;
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	091b      	lsrs	r3, r3, #4
 800f1ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
	u16_t endSector    = endPage / 16;
 800f1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ce:	091b      	lsrs	r3, r3, #4
 800f1d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	u16_t numOfSectors = endSector - startSector + 1;
 800f1d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f1d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	3301      	adds	r3, #1
 800f1dc:	847b      	strh	r3, [r7, #34]	@ 0x22
	u32_t dataPosition = 0u;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u32_t idx;

    /*
     * Function code.
     */
	for (idx = 0u; idx < numOfSectors; idx++)
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1e6:	e00b      	b.n	800f200 <drv_w25q64WriteDataClean+0x64>
	{
		drv_w25q64EraseSector(pDevice, (startSector + idx));
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f000 f94a 	bl	800f48e <drv_w25q64EraseSector>
	for (idx = 0u; idx < numOfSectors; idx++)
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f200:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f204:	429a      	cmp	r2, r3
 800f206:	d3ef      	bcc.n	800f1e8 <drv_w25q64WriteDataClean+0x4c>
	}

	(void_t) memset(pageWriteBuffer, 0, 266);
 800f208:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 800f20c:	2100      	movs	r1, #0
 800f20e:	4837      	ldr	r0, [pc, #220]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f210:	f00a f834 	bl	801927c <memset>

	for (idx = 0; idx < numOfPages; idx++)
 800f214:	2300      	movs	r3, #0
 800f216:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f218:	e05e      	b.n	800f2d8 <drv_w25q64WriteDataClean+0x13c>
	{
		u32_t memAddress = (startPage * W25Q64_PAGE_SIZE) + offset;
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	021a      	lsls	r2, r3, #8
 800f21e:	79fb      	ldrb	r3, [r7, #7]
 800f220:	4413      	add	r3, r2
 800f222:	61fb      	str	r3, [r7, #28]
		u32_t bytesRem = drv_w25q64BytesToWrite(size, offset);
 800f224:	79fb      	ldrb	r3, [r7, #7]
 800f226:	b29b      	uxth	r3, r3
 800f228:	4619      	mov	r1, r3
 800f22a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800f22c:	f000 f860 	bl	800f2f0 <drv_w25q64BytesToWrite>
 800f230:	61b8      	str	r0, [r7, #24]
		u32_t indx = 4;
 800f232:	2304      	movs	r3, #4
 800f234:	637b      	str	r3, [r7, #52]	@ 0x34

		drv_w25q64WriteEnable(pDevice);
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f000 f8ad 	bl	800f396 <drv_w25q64WriteEnable>

		pageWriteBuffer[0] = 0x02;
 800f23c:	4b2b      	ldr	r3, [pc, #172]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f23e:	2202      	movs	r2, #2
 800f240:	701a      	strb	r2, [r3, #0]
		pageWriteBuffer[1] = (u8_t)((memAddress >> 16) & 0xFF);
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	0c1b      	lsrs	r3, r3, #16
 800f246:	b2da      	uxtb	r2, r3
 800f248:	4b28      	ldr	r3, [pc, #160]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f24a:	705a      	strb	r2, [r3, #1]
		pageWriteBuffer[2] = (u8_t)((memAddress >> 8) & 0xFF);
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	0a1b      	lsrs	r3, r3, #8
 800f250:	b2da      	uxtb	r2, r3
 800f252:	4b26      	ldr	r3, [pc, #152]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f254:	709a      	strb	r2, [r3, #2]
		pageWriteBuffer[3] = (u8_t)(memAddress & 0xFF);
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	4b24      	ldr	r3, [pc, #144]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f25c:	70da      	strb	r2, [r3, #3]

		u16_t bytesToSend = bytesRem + indx;
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	b29a      	uxth	r2, r3
 800f262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f264:	b29b      	uxth	r3, r3
 800f266:	4413      	add	r3, r2
 800f268:	82fb      	strh	r3, [r7, #22]

		for (u16_t i = 0; i < bytesRem; i++)
 800f26a:	2300      	movs	r3, #0
 800f26c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800f26e:	e00d      	b.n	800f28c <drv_w25q64WriteDataClean+0xf0>
		{
			pageWriteBuffer[indx++] = pData[ i + dataPosition];
 800f270:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800f272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f274:	4413      	add	r3, r2
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	441a      	add	r2, r3
 800f27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f27c:	1c59      	adds	r1, r3, #1
 800f27e:	6379      	str	r1, [r7, #52]	@ 0x34
 800f280:	7811      	ldrb	r1, [r2, #0]
 800f282:	4a1a      	ldr	r2, [pc, #104]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f284:	54d1      	strb	r1, [r2, r3]
		for (u16_t i = 0; i < bytesRem; i++)
 800f286:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800f288:	3301      	adds	r3, #1
 800f28a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800f28c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800f28e:	69ba      	ldr	r2, [r7, #24]
 800f290:	429a      	cmp	r2, r3
 800f292:	d8ed      	bhi.n	800f270 <drv_w25q64WriteDataClean+0xd4>
		}

		drv_w25q64ChipSelectLow(pDevice);
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f000 f862 	bl	800f35e <drv_w25q64ChipSelectLow>

		drv_w25q64Write(pDevice, pageWriteBuffer, bytesToSend);
 800f29a:	8afb      	ldrh	r3, [r7, #22]
 800f29c:	461a      	mov	r2, r3
 800f29e:	4913      	ldr	r1, [pc, #76]	@ (800f2ec <drv_w25q64WriteDataClean+0x150>)
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f000 f8ac 	bl	800f3fe <drv_w25q64Write>

		drv_w25q64ChipSelectHigh(pDevice);
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f000 f867 	bl	800f37a <drv_w25q64ChipSelectHigh>

		startPage++;
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	60bb      	str	r3, [r7, #8]
		offset = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	71fb      	strb	r3, [r7, #7]
		size = size - bytesRem;
 800f2b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	64bb      	str	r3, [r7, #72]	@ 0x48
		dataPosition = dataPosition + bytesRem;
 800f2be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		(void_t) gos_taskSleep(5);
 800f2c6:	2005      	movs	r0, #5
 800f2c8:	f004 fb90 	bl	80139ec <gos_taskSleep>

		drv_w25q64WriteDisable(pDevice);
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f000 f87c 	bl	800f3ca <drv_w25q64WriteDisable>
	for (idx = 0; idx < numOfPages; idx++)
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d39c      	bcc.n	800f21a <drv_w25q64WriteDataClean+0x7e>
	}
}
 800f2e0:	bf00      	nop
 800f2e2:	bf00      	nop
 800f2e4:	3740      	adds	r7, #64	@ 0x40
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20003e14 	.word	0x20003e14

0800f2f0 <drv_w25q64BytesToWrite>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to write.
 */
GOS_STATIC u32_t drv_w25q64BytesToWrite (u32_t size, u16_t offset)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < W25Q64_PAGE_SIZE)
 800f300:	887a      	ldrh	r2, [r7, #2]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4413      	add	r3, r2
 800f306:	2bff      	cmp	r3, #255	@ 0xff
 800f308:	d802      	bhi.n	800f310 <drv_w25q64BytesToWrite+0x20>
	{
		bytesToWrite = size;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	e003      	b.n	800f318 <drv_w25q64BytesToWrite+0x28>
	}
	else
	{
		bytesToWrite = W25Q64_PAGE_SIZE - offset;
 800f310:	887b      	ldrh	r3, [r7, #2]
 800f312:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800f316:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800f318:	68fb      	ldr	r3, [r7, #12]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <drv_w25q64BytesToModify>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to modify.
 */
GOS_STATIC u32_t drv_w25q64BytesToModify (u32_t size, u16_t offset)
{
 800f326:	b480      	push	{r7}
 800f328:	b085      	sub	sp, #20
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	460b      	mov	r3, r1
 800f330:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800f332:	2300      	movs	r3, #0
 800f334:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < SECTOR_SIZE)
 800f336:	887a      	ldrh	r2, [r7, #2]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4413      	add	r3, r2
 800f33c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f340:	d202      	bcs.n	800f348 <drv_w25q64BytesToModify+0x22>
	{
		bytesToWrite = size;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	60fb      	str	r3, [r7, #12]
 800f346:	e003      	b.n	800f350 <drv_w25q64BytesToModify+0x2a>
	}
	else
	{
		bytesToWrite = SECTOR_SIZE - offset;
 800f348:	887b      	ldrh	r3, [r7, #2]
 800f34a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800f34e:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800f350:	68fb      	ldr	r3, [r7, #12]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3714      	adds	r7, #20
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <drv_w25q64ChipSelectLow>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectLow (void_t* pDevice)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	785b      	ldrb	r3, [r3, #1]
 800f36a:	2100      	movs	r1, #0
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fd fdcf 	bl	800cf10 <drv_gpioWritePin>
}
 800f372:	bf00      	nop
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <drv_w25q64ChipSelectHigh>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectHigh (void_t* pDevice)
{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b082      	sub	sp, #8
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	785b      	ldrb	r3, [r3, #1]
 800f386:	2101      	movs	r1, #1
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fd fdc1 	bl	800cf10 <drv_gpioWritePin>
}
 800f38e:	bf00      	nop
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <drv_w25q64WriteEnable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteEnable (void_t* pDevice)
{
 800f396:	b580      	push	{r7, lr}
 800f398:	b084      	sub	sp, #16
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x06;
 800f39e:	2306      	movs	r3, #6
 800f3a0:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7ff ffdb 	bl	800f35e <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800f3a8:	f107 030f 	add.w	r3, r7, #15
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f824 	bl	800f3fe <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7ff ffdf 	bl	800f37a <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800f3bc:	2005      	movs	r0, #5
 800f3be:	f004 fb15 	bl	80139ec <gos_taskSleep>
}
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <drv_w25q64WriteDisable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteDisable (void_t* pDevice)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b084      	sub	sp, #16
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x04;
 800f3d2:	2304      	movs	r3, #4
 800f3d4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff ffc1 	bl	800f35e <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800f3dc:	f107 030f 	add.w	r3, r7, #15
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 f80a 	bl	800f3fe <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff ffc5 	bl	800f37a <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800f3f0:	2005      	movs	r0, #5
 800f3f2:	f004 fafb 	bl	80139ec <gos_taskSleep>
}
 800f3f6:	bf00      	nop
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <drv_w25q64Write>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Write (void_t* pDevice, u8_t* pData, u16_t size)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b086      	sub	sp, #24
 800f402:	af02      	add	r7, sp, #8
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	4613      	mov	r3, r2
 800f40a:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	699b      	ldr	r3, [r3, #24]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d114      	bne.n	800f43e <drv_w25q64Write+0x40>
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	7818      	ldrb	r0, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6919      	ldr	r1, [r3, #16]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	88fa      	ldrh	r2, [r7, #6]
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	460b      	mov	r3, r1
 800f426:	68b9      	ldr	r1, [r7, #8]
 800f428:	f7fe f8e8 	bl	800d5fc <drv_spiTransmitIT>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b55      	cmp	r3, #85	@ 0x55
 800f430:	d005      	beq.n	800f43e <drv_w25q64Write+0x40>
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	699b      	ldr	r3, [r3, #24]
 800f436:	f043 0210 	orr.w	r2, r3, #16
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->writeTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_WRITE
            );
}
 800f43e:	bf00      	nop
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <drv_w25q64Read>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Read (void_t* pDevice, u8_t* pData, u16_t size)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b086      	sub	sp, #24
 800f44a:	af02      	add	r7, sp, #8
 800f44c:	60f8      	str	r0, [r7, #12]
 800f44e:	60b9      	str	r1, [r7, #8]
 800f450:	4613      	mov	r3, r2
 800f452:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	699b      	ldr	r3, [r3, #24]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d114      	bne.n	800f486 <drv_w25q64Read+0x40>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	7818      	ldrb	r0, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6899      	ldr	r1, [r3, #8]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	88fa      	ldrh	r2, [r7, #6]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	460b      	mov	r3, r1
 800f46e:	68b9      	ldr	r1, [r7, #8]
 800f470:	f7fe f928 	bl	800d6c4 <drv_spiReceiveIT>
 800f474:	4603      	mov	r3, r0
 800f476:	2b55      	cmp	r3, #85	@ 0x55
 800f478:	d005      	beq.n	800f486 <drv_w25q64Read+0x40>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	699b      	ldr	r3, [r3, #24]
 800f47e:	f043 0208 	orr.w	r2, r3, #8
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->readTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_READ
            );
}
 800f486:	bf00      	nop
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <drv_w25q64EraseSector>:
 * @param pDevice
 * @param sector
 * @return
 */
GOS_STATIC void_t drv_w25q64EraseSector (void_t* pDevice, u16_t sector)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	460b      	mov	r3, r1
 800f498:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t memAddress = sector * 16 * W25Q64_PAGE_SIZE;
 800f49a:	887b      	ldrh	r3, [r7, #2]
 800f49c:	031b      	lsls	r3, r3, #12
 800f49e:	60fb      	str	r3, [r7, #12]
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800f4a0:	2320      	movs	r3, #32
 800f4a2:	723b      	strb	r3, [r7, #8]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	0c1b      	lsrs	r3, r3, #16
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	727b      	strb	r3, [r7, #9]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	0a1b      	lsrs	r3, r3, #8
 800f4b0:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800f4b2:	72bb      	strb	r3, [r7, #10]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800f4b8:	72fb      	strb	r3, [r7, #11]

    /*
     * Function code.
     */
	drv_w25q64WriteEnable(pDevice);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff ff6b 	bl	800f396 <drv_w25q64WriteEnable>
	drv_w25q64ChipSelectLow(pDevice);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ff4c 	bl	800f35e <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 4);
 800f4c6:	f107 0308 	add.w	r3, r7, #8
 800f4ca:	2204      	movs	r2, #4
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff ff95 	bl	800f3fe <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7ff ff50 	bl	800f37a <drv_w25q64ChipSelectHigh>

	(void_t) gos_taskSleep(450);
 800f4da:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800f4de:	f004 fa85 	bl	80139ec <gos_taskSleep>

	drv_w25q64WriteDisable(pDevice);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7ff ff71 	bl	800f3ca <drv_w25q64WriteDisable>
}
 800f4e8:	bf00      	nop
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 800f4f0:	b590      	push	{r4, r7, lr}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 800f4f6:	2355      	movs	r3, #85	@ 0x55
 800f4f8:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 800f4fe:	2300      	movs	r3, #0
 800f500:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 800f502:	4b39      	ldr	r3, [pc, #228]	@ (800f5e8 <svl_dsmInit+0xf8>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d064      	beq.n	800f5d4 <svl_dsmInit+0xe4>
	{
		// Register DSM task.
		dsmInitResult &= gos_taskRegister(&svlDsmDaemonDesc, NULL);
 800f50a:	2100      	movs	r1, #0
 800f50c:	4837      	ldr	r0, [pc, #220]	@ (800f5ec <svl_dsmInit+0xfc>)
 800f50e:	f004 f8db 	bl	80136c8 <gos_taskRegister>
 800f512:	4603      	mov	r3, r0
 800f514:	461a      	mov	r2, r3
 800f516:	79fb      	ldrb	r3, [r7, #7]
 800f518:	4013      	ands	r3, r2
 800f51a:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800f51c:	2300      	movs	r3, #0
 800f51e:	71bb      	strb	r3, [r7, #6]
 800f520:	e04f      	b.n	800f5c2 <svl_dsmInit+0xd2>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800f522:	4833      	ldr	r0, [pc, #204]	@ (800f5f0 <svl_dsmInit+0x100>)
 800f524:	f002 ff12 	bl	801234c <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 800f528:	79ba      	ldrb	r2, [r7, #6]
 800f52a:	4932      	ldr	r1, [pc, #200]	@ (800f5f4 <svl_dsmInit+0x104>)
 800f52c:	4613      	mov	r3, r2
 800f52e:	019b      	lsls	r3, r3, #6
 800f530:	4413      	add	r3, r2
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	440b      	add	r3, r1
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4618      	mov	r0, r3
 800f53a:	f002 ff07 	bl	801234c <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800f53e:	482c      	ldr	r0, [pc, #176]	@ (800f5f0 <svl_dsmInit+0x100>)
 800f540:	f002 ff04 	bl	801234c <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800f544:	2300      	movs	r3, #0
 800f546:	717b      	strb	r3, [r7, #5]
 800f548:	e033      	b.n	800f5b2 <svl_dsmInit+0xc2>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 800f54a:	79ba      	ldrb	r2, [r7, #6]
 800f54c:	797b      	ldrb	r3, [r7, #5]
 800f54e:	4829      	ldr	r0, [pc, #164]	@ (800f5f4 <svl_dsmInit+0x104>)
 800f550:	00d9      	lsls	r1, r3, #3
 800f552:	4613      	mov	r3, r2
 800f554:	019b      	lsls	r3, r3, #6
 800f556:	4413      	add	r3, r2
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	440b      	add	r3, r1
 800f55c:	4403      	add	r3, r0
 800f55e:	3308      	adds	r3, #8
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d029      	beq.n	800f5ba <svl_dsmInit+0xca>
				{
					dsmInitResult &= gos_errorTraceInit(
 800f566:	79ba      	ldrb	r2, [r7, #6]
 800f568:	797b      	ldrb	r3, [r7, #5]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 800f56a:	4822      	ldr	r0, [pc, #136]	@ (800f5f4 <svl_dsmInit+0x104>)
 800f56c:	00d9      	lsls	r1, r3, #3
 800f56e:	4613      	mov	r3, r2
 800f570:	019b      	lsls	r3, r3, #6
 800f572:	4413      	add	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	440b      	add	r3, r1
 800f578:	4403      	add	r3, r0
 800f57a:	3304      	adds	r3, #4
 800f57c:	681c      	ldr	r4, [r3, #0]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 800f57e:	79ba      	ldrb	r2, [r7, #6]
 800f580:	797b      	ldrb	r3, [r7, #5]
 800f582:	481c      	ldr	r0, [pc, #112]	@ (800f5f4 <svl_dsmInit+0x104>)
 800f584:	00d9      	lsls	r1, r3, #3
 800f586:	4613      	mov	r3, r2
 800f588:	019b      	lsls	r3, r3, #6
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	440b      	add	r3, r1
 800f590:	4403      	add	r3, r0
 800f592:	3308      	adds	r3, #8
 800f594:	681b      	ldr	r3, [r3, #0]
					dsmInitResult &= gos_errorTraceInit(
 800f596:	4798      	blx	r3
 800f598:	4603      	mov	r3, r0
 800f59a:	4619      	mov	r1, r3
 800f59c:	4620      	mov	r0, r4
 800f59e:	f005 ffb3 	bl	8015508 <gos_errorTraceInit>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800f5ac:	797b      	ldrb	r3, [r7, #5]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	717b      	strb	r3, [r7, #5]
 800f5b2:	797b      	ldrb	r3, [r7, #5]
 800f5b4:	2b1f      	cmp	r3, #31
 800f5b6:	d9c8      	bls.n	800f54a <svl_dsmInit+0x5a>
 800f5b8:	e000      	b.n	800f5bc <svl_dsmInit+0xcc>
				}
				else
				{
					// End of initializers.
					break;
 800f5ba:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800f5bc:	79bb      	ldrb	r3, [r7, #6]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	71bb      	strb	r3, [r7, #6]
 800f5c2:	79ba      	ldrb	r2, [r7, #6]
 800f5c4:	4b08      	ldr	r3, [pc, #32]	@ (800f5e8 <svl_dsmInit+0xf8>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	490b      	ldr	r1, [pc, #44]	@ (800f5f8 <svl_dsmInit+0x108>)
 800f5ca:	fba1 1303 	umull	r1, r3, r1, r3
 800f5ce:	0a1b      	lsrs	r3, r3, #8
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d3a6      	bcc.n	800f522 <svl_dsmInit+0x32>
	else
	{
		// Configuration is empty.
	}

	if (dsmInitResult != GOS_SUCCESS)
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	2b55      	cmp	r3, #85	@ 0x55
 800f5d8:	d001      	beq.n	800f5de <svl_dsmInit+0xee>
	{
		dsmInitResult = GOS_ERROR;
 800f5da:	23ae      	movs	r3, #174	@ 0xae
 800f5dc:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return dsmInitResult;
 800f5de:	79fb      	ldrb	r3, [r7, #7]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd90      	pop	{r4, r7, pc}
 800f5e8:	200003bc 	.word	0x200003bc
 800f5ec:	2000057c 	.word	0x2000057c
 800f5f0:	0801b828 	.word	0x0801b828
 800f5f4:	0801ca90 	.word	0x0801ca90
 800f5f8:	fc0fc0fd 	.word	0xfc0fc0fd

0800f5fc <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 800f602:	2355      	movs	r3, #85	@ 0x55
 800f604:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n");
 800f606:	490f      	ldr	r1, [pc, #60]	@ (800f644 <svl_dsmPrintOSInfo+0x48>)
 800f608:	2049      	movs	r0, #73	@ 0x49
 800f60a:	f008 fcb1 	bl	8017f70 <gos_traceTraceFormatted>
 800f60e:	4603      	mov	r3, r0
 800f610:	461a      	mov	r2, r3
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	4013      	ands	r3, r2
 800f616:	71fb      	strb	r3, [r7, #7]
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR);
 800f618:	2301      	movs	r3, #1
 800f61a:	2201      	movs	r2, #1
 800f61c:	490a      	ldr	r1, [pc, #40]	@ (800f648 <svl_dsmPrintOSInfo+0x4c>)
 800f61e:	2049      	movs	r0, #73	@ 0x49
 800f620:	f008 fca6 	bl	8017f70 <gos_traceTraceFormatted>
 800f624:	4603      	mov	r3, r0
 800f626:	461a      	mov	r2, r3
 800f628:	79fb      	ldrb	r3, [r7, #7]
 800f62a:	4013      	ands	r3, r2
 800f62c:	71fb      	strb	r3, [r7, #7]

	if (printResult != GOS_SUCCESS)
 800f62e:	79fb      	ldrb	r3, [r7, #7]
 800f630:	2b55      	cmp	r3, #85	@ 0x55
 800f632:	d001      	beq.n	800f638 <svl_dsmPrintOSInfo+0x3c>
	{
		printResult = GOS_ERROR;
 800f634:	23ae      	movs	r3, #174	@ 0xae
 800f636:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return printResult;
 800f638:	79fb      	ldrb	r3, [r7, #7]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	0801b82c 	.word	0x0801b82c
 800f648:	0801b844 	.word	0x0801b844

0800f64c <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b0ac      	sub	sp, #176	@ 0xb0
 800f650:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 800f652:	2355      	movs	r3, #85	@ 0x55
 800f654:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 800f658:	1d3b      	adds	r3, r7, #4
 800f65a:	22a0      	movs	r2, #160	@ 0xa0
 800f65c:	2100      	movs	r1, #0
 800f65e:	4618      	mov	r0, r3
 800f660:	f009 fe0c 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetLibVersion(&libVer);
 800f664:	1d3b      	adds	r3, r7, #4
 800f666:	4618      	mov	r0, r3
 800f668:	f001 f872 	bl	8010750 <svl_pdhGetLibVersion>
 800f66c:	4603      	mov	r3, r0
 800f66e:	461a      	mov	r2, r3
 800f670:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f674:	4013      	ands	r3, r2
 800f676:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n");
 800f67a:	4934      	ldr	r1, [pc, #208]	@ (800f74c <svl_dsmPrintLibInfo+0x100>)
 800f67c:	2049      	movs	r0, #73	@ 0x49
 800f67e:	f008 fc77 	bl	8017f70 <gos_traceTraceFormatted>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f68a:	4013      	ands	r3, r2
 800f68c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name);
 800f690:	1d3b      	adds	r3, r7, #4
 800f692:	3310      	adds	r3, #16
 800f694:	461a      	mov	r2, r3
 800f696:	492e      	ldr	r1, [pc, #184]	@ (800f750 <svl_dsmPrintLibInfo+0x104>)
 800f698:	2049      	movs	r0, #73	@ 0x49
 800f69a:	f008 fc69 	bl	8017f70 <gos_traceTraceFormatted>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description);
 800f6ac:	1d3b      	adds	r3, r7, #4
 800f6ae:	3340      	adds	r3, #64	@ 0x40
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	4928      	ldr	r1, [pc, #160]	@ (800f754 <svl_dsmPrintLibInfo+0x108>)
 800f6b4:	2049      	movs	r0, #73	@ 0x49
 800f6b6:	f008 fc5b 	bl	8017f70 <gos_traceTraceFormatted>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	461a      	mov	r2, r3
 800f6be:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build);
 800f6c8:	88bb      	ldrh	r3, [r7, #4]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	88fb      	ldrh	r3, [r7, #6]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	893b      	ldrh	r3, [r7, #8]
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4920      	ldr	r1, [pc, #128]	@ (800f758 <svl_dsmPrintLibInfo+0x10c>)
 800f6d8:	2049      	movs	r0, #73	@ 0x49
 800f6da:	f008 fc49 	bl	8017f70 <gos_traceTraceFormatted>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f6e6:	4013      	ands	r3, r2
 800f6e8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days);
 800f6ec:	8a7b      	ldrh	r3, [r7, #18]
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	7c7b      	ldrb	r3, [r7, #17]
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4917      	ldr	r1, [pc, #92]	@ (800f75c <svl_dsmPrintLibInfo+0x110>)
 800f700:	2049      	movs	r0, #73	@ 0x49
 800f702:	f008 fc35 	bl	8017f70 <gos_traceTraceFormatted>
 800f706:	4603      	mov	r3, r0
 800f708:	461a      	mov	r2, r3
 800f70a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f70e:	4013      	ands	r3, r2
 800f710:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author);
 800f714:	1d3b      	adds	r3, r7, #4
 800f716:	3370      	adds	r3, #112	@ 0x70
 800f718:	461a      	mov	r2, r3
 800f71a:	4911      	ldr	r1, [pc, #68]	@ (800f760 <svl_dsmPrintLibInfo+0x114>)
 800f71c:	2049      	movs	r0, #73	@ 0x49
 800f71e:	f008 fc27 	bl	8017f70 <gos_traceTraceFormatted>
 800f722:	4603      	mov	r3, r0
 800f724:	461a      	mov	r2, r3
 800f726:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f72a:	4013      	ands	r3, r2
 800f72c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	if (printResult != GOS_SUCCESS)
 800f730:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f734:	2b55      	cmp	r3, #85	@ 0x55
 800f736:	d002      	beq.n	800f73e <svl_dsmPrintLibInfo+0xf2>
	{
		printResult = GOS_ERROR;
 800f738:	23ae      	movs	r3, #174	@ 0xae
 800f73a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	else
	{
		// Success.
	}

	return printResult;
 800f73e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800f742:	4618      	mov	r0, r3
 800f744:	37a8      	adds	r7, #168	@ 0xa8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	0801b85c 	.word	0x0801b85c
 800f750:	0801b878 	.word	0x0801b878
 800f754:	0801b88c 	.word	0x0801b88c
 800f758:	0801b8a0 	.word	0x0801b8a0
 800f75c:	0801b8c0 	.word	0x0801b8c0
 800f760:	0801b8e0 	.word	0x0801b8e0

0800f764 <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b0c2      	sub	sp, #264	@ 0x108
 800f768:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800f76a:	2355      	movs	r3, #85	@ 0x55
 800f76c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 800f770:	1d3b      	adds	r3, r7, #4
 800f772:	22fa      	movs	r2, #250	@ 0xfa
 800f774:	2100      	movs	r1, #0
 800f776:	4618      	mov	r0, r3
 800f778:	f009 fd80 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetHwInfo(&hwInfo);
 800f77c:	1d3b      	adds	r3, r7, #4
 800f77e:	4618      	mov	r0, r3
 800f780:	f001 f8a6 	bl	80108d0 <svl_pdhGetHwInfo>
 800f784:	4603      	mov	r3, r0
 800f786:	461a      	mov	r2, r3
 800f788:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f78c:	4013      	ands	r3, r2
 800f78e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n");
 800f792:	493a      	ldr	r1, [pc, #232]	@ (800f87c <svl_dsmPrintHwInfo+0x118>)
 800f794:	2049      	movs	r0, #73	@ 0x49
 800f796:	f008 fbeb 	bl	8017f70 <gos_traceTraceFormatted>
 800f79a:	4603      	mov	r3, r0
 800f79c:	461a      	mov	r2, r3
 800f79e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f7a2:	4013      	ands	r3, r2
 800f7a4:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Board name:    \t%s\r\n", hwInfo.boardName);
 800f7a8:	1d3b      	adds	r3, r7, #4
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	4934      	ldr	r1, [pc, #208]	@ (800f880 <svl_dsmPrintHwInfo+0x11c>)
 800f7ae:	2049      	movs	r0, #73	@ 0x49
 800f7b0:	f008 fbde 	bl	8017f70 <gos_traceTraceFormatted>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f7bc:	4013      	ands	r3, r2
 800f7be:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:        \t%s\r\n", hwInfo.author);
 800f7c2:	1d3b      	adds	r3, r7, #4
 800f7c4:	3360      	adds	r3, #96	@ 0x60
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	492e      	ldr	r1, [pc, #184]	@ (800f884 <svl_dsmPrintHwInfo+0x120>)
 800f7ca:	2049      	movs	r0, #73	@ 0x49
 800f7cc:	f008 fbd0 	bl	8017f70 <gos_traceTraceFormatted>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f7d8:	4013      	ands	r3, r2
 800f7da:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description:   \t%s\r\n", hwInfo.description);
 800f7de:	1d3b      	adds	r3, r7, #4
 800f7e0:	3390      	adds	r3, #144	@ 0x90
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	4928      	ldr	r1, [pc, #160]	@ (800f888 <svl_dsmPrintHwInfo+0x124>)
 800f7e6:	2049      	movs	r0, #73	@ 0x49
 800f7e8:	f008 fbc2 	bl	8017f70 <gos_traceTraceFormatted>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Revision:      \t%s\r\n", hwInfo.revision);
 800f7fa:	1d3b      	adds	r3, r7, #4
 800f7fc:	3330      	adds	r3, #48	@ 0x30
 800f7fe:	461a      	mov	r2, r3
 800f800:	4922      	ldr	r1, [pc, #136]	@ (800f88c <svl_dsmPrintHwInfo+0x128>)
 800f802:	2049      	movs	r0, #73	@ 0x49
 800f804:	f008 fbb4 	bl	8017f70 <gos_traceTraceFormatted>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
 800f80c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f810:	4013      	ands	r3, r2
 800f812:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Serial number: \t%s\r\n", hwInfo.serialNumber);
 800f816:	1d3b      	adds	r3, r7, #4
 800f818:	33ca      	adds	r3, #202	@ 0xca
 800f81a:	461a      	mov	r2, r3
 800f81c:	491c      	ldr	r1, [pc, #112]	@ (800f890 <svl_dsmPrintHwInfo+0x12c>)
 800f81e:	2049      	movs	r0, #73	@ 0x49
 800f820:	f008 fba6 	bl	8017f70 <gos_traceTraceFormatted>
 800f824:	4603      	mov	r3, r0
 800f826:	461a      	mov	r2, r3
 800f828:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f82c:	4013      	ands	r3, r2
 800f82e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
			hwInfo.date.years,
 800f832:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 800f836:	461a      	mov	r2, r3
			hwInfo.date.months,
 800f838:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 800f83c:	4619      	mov	r1, r3
			hwInfo.date.days
 800f83e:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	@ 0xc9
 800f842:	b29b      	uxth	r3, r3
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	460b      	mov	r3, r1
 800f848:	4912      	ldr	r1, [pc, #72]	@ (800f894 <svl_dsmPrintHwInfo+0x130>)
 800f84a:	2049      	movs	r0, #73	@ 0x49
 800f84c:	f008 fb90 	bl	8017f70 <gos_traceTraceFormatted>
 800f850:	4603      	mov	r3, r0
 800f852:	461a      	mov	r2, r3
 800f854:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f858:	4013      	ands	r3, r2
 800f85a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			);

	if (printResult != GOS_SUCCESS)
 800f85e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800f862:	2b55      	cmp	r3, #85	@ 0x55
 800f864:	d002      	beq.n	800f86c <svl_dsmPrintHwInfo+0x108>
	{
		printResult = GOS_ERROR;
 800f866:	23ae      	movs	r3, #174	@ 0xae
 800f868:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	else
	{
		// Success.
	}

	return printResult;
 800f86c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 800f870:	4618      	mov	r0, r3
 800f872:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	0801b8f4 	.word	0x0801b8f4
 800f880:	0801b910 	.word	0x0801b910
 800f884:	0801b928 	.word	0x0801b928
 800f888:	0801b940 	.word	0x0801b940
 800f88c:	0801b958 	.word	0x0801b958
 800f890:	0801b970 	.word	0x0801b970
 800f894:	0801b988 	.word	0x0801b988

0800f898 <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 800f89e:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800f8a0:	2355      	movs	r3, #85	@ 0x55
 800f8a2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 800f8a6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f8aa:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	f009 fce0 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetSwInfo(&swInfo);
 800f8bc:	1d3b      	adds	r3, r7, #4
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 ffce 	bl	8010860 <svl_pdhGetSwInfo>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	if (strcmp(swInfo.bldSwVerInfo.name, "") != 0)
 800f8d2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f8d6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f8da:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d078      	beq.n	800f9d4 <svl_dsmPrintAppInfo+0x13c>
	{
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Bootloader Info"TRACE_FORMAT_RESET"\r\n");
 800f8e2:	4985      	ldr	r1, [pc, #532]	@ (800faf8 <svl_dsmPrintAppInfo+0x260>)
 800f8e4:	2049      	movs	r0, #73	@ 0x49
 800f8e6:	f008 fb43 	bl	8017f70 <gos_traceTraceFormatted>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f8f2:	4013      	ands	r3, r2
 800f8f4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.bldSwVerInfo.name);
 800f8f8:	1d3b      	adds	r3, r7, #4
 800f8fa:	33b0      	adds	r3, #176	@ 0xb0
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	497f      	ldr	r1, [pc, #508]	@ (800fafc <svl_dsmPrintAppInfo+0x264>)
 800f900:	2049      	movs	r0, #73	@ 0x49
 800f902:	f008 fb35 	bl	8017f70 <gos_traceTraceFormatted>
 800f906:	4603      	mov	r3, r0
 800f908:	461a      	mov	r2, r3
 800f90a:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f90e:	4013      	ands	r3, r2
 800f910:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.bldSwVerInfo.description);
 800f914:	1d3b      	adds	r3, r7, #4
 800f916:	33e0      	adds	r3, #224	@ 0xe0
 800f918:	461a      	mov	r2, r3
 800f91a:	4979      	ldr	r1, [pc, #484]	@ (800fb00 <svl_dsmPrintAppInfo+0x268>)
 800f91c:	2049      	movs	r0, #73	@ 0x49
 800f91e:	f008 fb27 	bl	8017f70 <gos_traceTraceFormatted>
 800f922:	4603      	mov	r3, r0
 800f924:	461a      	mov	r2, r3
 800f926:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f92a:	4013      	ands	r3, r2
 800f92c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.bldSwVerInfo.major, swInfo.bldSwVerInfo.minor, swInfo.bldSwVerInfo.build);
 800f930:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f934:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f938:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800f93c:	461a      	mov	r2, r3
 800f93e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f942:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f946:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800f94a:	4619      	mov	r1, r3
 800f94c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f950:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f954:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	460b      	mov	r3, r1
 800f95c:	4969      	ldr	r1, [pc, #420]	@ (800fb04 <svl_dsmPrintAppInfo+0x26c>)
 800f95e:	2049      	movs	r0, #73	@ 0x49
 800f960:	f008 fb06 	bl	8017f70 <gos_traceTraceFormatted>
 800f964:	4603      	mov	r3, r0
 800f966:	461a      	mov	r2, r3
 800f968:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f96c:	4013      	ands	r3, r2
 800f96e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.bldSwVerInfo.date.years, swInfo.bldSwVerInfo.date.months, swInfo.bldSwVerInfo.date.days);
 800f972:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f976:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f97a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800f97e:	461a      	mov	r2, r3
 800f980:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f984:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f988:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f98c:	4619      	mov	r1, r3
 800f98e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f992:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f996:	f8b3 30ab 	ldrh.w	r3, [r3, #171]	@ 0xab
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4959      	ldr	r1, [pc, #356]	@ (800fb08 <svl_dsmPrintAppInfo+0x270>)
 800f9a2:	2049      	movs	r0, #73	@ 0x49
 800f9a4:	f008 fae4 	bl	8017f70 <gos_traceTraceFormatted>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.bldSwVerInfo.author);
 800f9b6:	1d3b      	adds	r3, r7, #4
 800f9b8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4953      	ldr	r1, [pc, #332]	@ (800fb0c <svl_dsmPrintAppInfo+0x274>)
 800f9c0:	2049      	movs	r0, #73	@ 0x49
 800f9c2:	f008 fad5 	bl	8017f70 <gos_traceTraceFormatted>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Bootloader does not exist.
	}

	if (strcmp(swInfo.appSwVerInfo.name, "") != 0)
 800f9d4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800f9d8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800f9dc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d07a      	beq.n	800fada <svl_dsmPrintAppInfo+0x242>
	{
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n");
 800f9e4:	494a      	ldr	r1, [pc, #296]	@ (800fb10 <svl_dsmPrintAppInfo+0x278>)
 800f9e6:	2049      	movs	r0, #73	@ 0x49
 800f9e8:	f008 fac2 	bl	8017f70 <gos_traceTraceFormatted>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800f9f4:	4013      	ands	r3, r2
 800f9f6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name);
 800f9fa:	1d3b      	adds	r3, r7, #4
 800f9fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fa00:	461a      	mov	r2, r3
 800fa02:	493e      	ldr	r1, [pc, #248]	@ (800fafc <svl_dsmPrintAppInfo+0x264>)
 800fa04:	2049      	movs	r0, #73	@ 0x49
 800fa06:	f008 fab3 	bl	8017f70 <gos_traceTraceFormatted>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800fa12:	4013      	ands	r3, r2
 800fa14:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description);
 800fa18:	1d3b      	adds	r3, r7, #4
 800fa1a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4937      	ldr	r1, [pc, #220]	@ (800fb00 <svl_dsmPrintAppInfo+0x268>)
 800fa22:	2049      	movs	r0, #73	@ 0x49
 800fa24:	f008 faa4 	bl	8017f70 <gos_traceTraceFormatted>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800fa30:	4013      	ands	r3, r2
 800fa32:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build);
 800fa36:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800fa3a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800fa3e:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
 800fa42:	461a      	mov	r2, r3
 800fa44:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800fa48:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800fa4c:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
 800fa50:	4619      	mov	r1, r3
 800fa52:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800fa56:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800fa5a:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	460b      	mov	r3, r1
 800fa62:	4928      	ldr	r1, [pc, #160]	@ (800fb04 <svl_dsmPrintAppInfo+0x26c>)
 800fa64:	2049      	movs	r0, #73	@ 0x49
 800fa66:	f008 fa83 	bl	8017f70 <gos_traceTraceFormatted>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800fa72:	4013      	ands	r3, r2
 800fa74:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days);
 800fa78:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800fa7c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800fa80:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 800fa84:	461a      	mov	r2, r3
 800fa86:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800fa8a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800fa8e:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 800fa92:	4619      	mov	r1, r3
 800fa94:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800fa98:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800fa9c:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	460b      	mov	r3, r1
 800faa6:	4918      	ldr	r1, [pc, #96]	@ (800fb08 <svl_dsmPrintAppInfo+0x270>)
 800faa8:	2049      	movs	r0, #73	@ 0x49
 800faaa:	f008 fa61 	bl	8017f70 <gos_traceTraceFormatted>
 800faae:	4603      	mov	r3, r0
 800fab0:	461a      	mov	r2, r3
 800fab2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800fab6:	4013      	ands	r3, r2
 800fab8:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author);
 800fabc:	1d3b      	adds	r3, r7, #4
 800fabe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fac2:	461a      	mov	r2, r3
 800fac4:	4911      	ldr	r1, [pc, #68]	@ (800fb0c <svl_dsmPrintAppInfo+0x274>)
 800fac6:	2049      	movs	r0, #73	@ 0x49
 800fac8:	f008 fa52 	bl	8017f70 <gos_traceTraceFormatted>
 800facc:	4603      	mov	r3, r0
 800face:	461a      	mov	r2, r3
 800fad0:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800fad4:	4013      	ands	r3, r2
 800fad6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Application does not exist.
	}

	if (printResult != GOS_SUCCESS)
 800fada:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800fade:	2b55      	cmp	r3, #85	@ 0x55
 800fae0:	d002      	beq.n	800fae8 <svl_dsmPrintAppInfo+0x250>
	{
		printResult = GOS_ERROR;
 800fae2:	23ae      	movs	r3, #174	@ 0xae
 800fae4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Success.
	}

	return printResult;
 800fae8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
}
 800faec:	4618      	mov	r0, r3
 800faee:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	0801b9ac 	.word	0x0801b9ac
 800fafc:	0801b878 	.word	0x0801b878
 800fb00:	0801b88c 	.word	0x0801b88c
 800fb04:	0801b8a0 	.word	0x0801b8a0
 800fb08:	0801b8c0 	.word	0x0801b8c0
 800fb0c:	0801b8e0 	.word	0x0801b8e0
 800fb10:	0801b9cc 	.word	0x0801b9cc

0800fb14 <svl_dsmTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t svl_dsmTask (void_t)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 800fb1e:	f7ff fd6d 	bl	800f5fc <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 800fb22:	f7ff fd93 	bl	800f64c <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 800fb26:	f7ff fe1d 	bl	800f764 <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 800fb2a:	f7ff feb5 	bl	800f898 <svl_dsmPrintAppInfo>

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 800fb2e:	4b26      	ldr	r3, [pc, #152]	@ (800fbc8 <svl_dsmTask+0xb4>)
 800fb30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb32:	21c8      	movs	r1, #200	@ 0xc8
 800fb34:	4618      	mov	r0, r3
 800fb36:	f004 fda1 	bl	801467c <gos_taskSetPriority>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 800fb3e:	4b23      	ldr	r3, [pc, #140]	@ (800fbcc <svl_dsmTask+0xb8>)
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	4b23      	ldr	r3, [pc, #140]	@ (800fbd0 <svl_dsmTask+0xbc>)
 800fb44:	701a      	strb	r2, [r3, #0]
	deviceState     = requiredState;
 800fb46:	4a21      	ldr	r2, [pc, #132]	@ (800fbcc <svl_dsmTask+0xb8>)
 800fb48:	79bb      	ldrb	r3, [r7, #6]
 800fb4a:	7013      	strb	r3, [r2, #0]
}
 800fb4c:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800fb4e:	4b20      	ldr	r3, [pc, #128]	@ (800fbd0 <svl_dsmTask+0xbc>)
 800fb50:	781a      	ldrb	r2, [r3, #0]
 800fb52:	4b1e      	ldr	r3, [pc, #120]	@ (800fbcc <svl_dsmTask+0xb8>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d031      	beq.n	800fbbe <svl_dsmTask+0xaa>
 800fb5a:	4b1e      	ldr	r3, [pc, #120]	@ (800fbd4 <svl_dsmTask+0xc0>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d02d      	beq.n	800fbbe <svl_dsmTask+0xaa>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800fb62:	2300      	movs	r3, #0
 800fb64:	71fb      	strb	r3, [r7, #7]
 800fb66:	e020      	b.n	800fbaa <svl_dsmTask+0x96>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800fb68:	79fb      	ldrb	r3, [r7, #7]
 800fb6a:	4a1b      	ldr	r2, [pc, #108]	@ (800fbd8 <svl_dsmTask+0xc4>)
 800fb6c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800fb70:	4b17      	ldr	r3, [pc, #92]	@ (800fbd0 <svl_dsmTask+0xbc>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d115      	bne.n	800fba4 <svl_dsmTask+0x90>
					reactionConfig[reactionIdx].currState == deviceState &&
 800fb78:	79fb      	ldrb	r3, [r7, #7]
 800fb7a:	4a17      	ldr	r2, [pc, #92]	@ (800fbd8 <svl_dsmTask+0xc4>)
 800fb7c:	00db      	lsls	r3, r3, #3
 800fb7e:	4413      	add	r3, r2
 800fb80:	785a      	ldrb	r2, [r3, #1]
 800fb82:	4b12      	ldr	r3, [pc, #72]	@ (800fbcc <svl_dsmTask+0xb8>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d10c      	bne.n	800fba4 <svl_dsmTask+0x90>
					reactionConfig[reactionIdx].pReaction != NULL)
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	4a12      	ldr	r2, [pc, #72]	@ (800fbd8 <svl_dsmTask+0xc4>)
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	4413      	add	r3, r2
 800fb92:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d005      	beq.n	800fba4 <svl_dsmTask+0x90>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	4a0f      	ldr	r2, [pc, #60]	@ (800fbd8 <svl_dsmTask+0xc4>)
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	4413      	add	r3, r2
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800fba4:	79fb      	ldrb	r3, [r7, #7]
 800fba6:	3301      	adds	r3, #1
 800fba8:	71fb      	strb	r3, [r7, #7]
 800fbaa:	79fa      	ldrb	r2, [r7, #7]
 800fbac:	4b09      	ldr	r3, [pc, #36]	@ (800fbd4 <svl_dsmTask+0xc0>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	08db      	lsrs	r3, r3, #3
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d3d8      	bcc.n	800fb68 <svl_dsmTask+0x54>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 800fbb6:	4b05      	ldr	r3, [pc, #20]	@ (800fbcc <svl_dsmTask+0xb8>)
 800fbb8:	781a      	ldrb	r2, [r3, #0]
 800fbba:	4b05      	ldr	r3, [pc, #20]	@ (800fbd0 <svl_dsmTask+0xbc>)
 800fbbc:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 800fbbe:	2014      	movs	r0, #20
 800fbc0:	f003 ff14 	bl	80139ec <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800fbc4:	e7c3      	b.n	800fb4e <svl_dsmTask+0x3a>
 800fbc6:	bf00      	nop
 800fbc8:	2000057c 	.word	0x2000057c
 800fbcc:	20003f1e 	.word	0x20003f1e
 800fbd0:	20003f1f 	.word	0x20003f1f
 800fbd4:	20001808 	.word	0x20001808
 800fbd8:	0801cc98 	.word	0x0801cc98

0800fbdc <svl_iplInit>:

/*
 * Function: svl_iplInit
 */
gos_result_t svl_iplInit (void_t)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 800fbe2:	23ae      	movs	r3, #174	@ 0xae
 800fbe4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIplTaskDesc, NULL);
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	4804      	ldr	r0, [pc, #16]	@ (800fbfc <svl_iplInit+0x20>)
 800fbea:	f003 fd6d 	bl	80136c8 <gos_taskRegister>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	200005e8 	.word	0x200005e8

0800fc00 <svl_iplRegisterUserMsg>:

/*
 * Function: svl_iplRegisterUserMsg
 */
gos_result_t svl_iplRegisterUserMsg (svl_iplUserMsgDesc_t* pUserMsgDesc)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t registerResult = GOS_ERROR;
 800fc08:	23ae      	movs	r3, #174	@ 0xae
 800fc0a:	73fb      	strb	r3, [r7, #15]
	u8_t         lutIndex       = 0u;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73bb      	strb	r3, [r7, #14]

	/*
	 * Function code.
	 */
	if (pUserMsgDesc != NULL)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d01b      	beq.n	800fc4e <svl_iplRegisterUserMsg+0x4e>
	{
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800fc16:	2300      	movs	r3, #0
 800fc18:	73bb      	strb	r3, [r7, #14]
 800fc1a:	e015      	b.n	800fc48 <svl_iplRegisterUserMsg+0x48>
		{
			if (userMsgLut[lutIndex].callback == NULL)
 800fc1c:	7bbb      	ldrb	r3, [r7, #14]
 800fc1e:	4a0e      	ldr	r2, [pc, #56]	@ (800fc58 <svl_iplRegisterUserMsg+0x58>)
 800fc20:	00db      	lsls	r3, r3, #3
 800fc22:	4413      	add	r3, r2
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10b      	bne.n	800fc42 <svl_iplRegisterUserMsg+0x42>
			{
				(void_t) memcpy((void_t*)&userMsgLut[lutIndex], (void_t*)pUserMsgDesc, sizeof(*pUserMsgDesc));
 800fc2a:	7bbb      	ldrb	r3, [r7, #14]
 800fc2c:	00db      	lsls	r3, r3, #3
 800fc2e:	4a0a      	ldr	r2, [pc, #40]	@ (800fc58 <svl_iplRegisterUserMsg+0x58>)
 800fc30:	4413      	add	r3, r2
 800fc32:	2208      	movs	r2, #8
 800fc34:	6879      	ldr	r1, [r7, #4]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f009 fbb7 	bl	80193aa <memcpy>
				registerResult = GOS_SUCCESS;
 800fc3c:	2355      	movs	r3, #85	@ 0x55
 800fc3e:	73fb      	strb	r3, [r7, #15]
				break;
 800fc40:	e005      	b.n	800fc4e <svl_iplRegisterUserMsg+0x4e>
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800fc42:	7bbb      	ldrb	r3, [r7, #14]
 800fc44:	3301      	adds	r3, #1
 800fc46:	73bb      	strb	r3, [r7, #14]
 800fc48:	7bbb      	ldrb	r3, [r7, #14]
 800fc4a:	2b0f      	cmp	r3, #15
 800fc4c:	d9e6      	bls.n	800fc1c <svl_iplRegisterUserMsg+0x1c>
	else
	{
		// NULL pointer.
	}

	return registerResult;
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	200054e8 	.word	0x200054e8

0800fc5c <svl_iplConfigure>:

/*
 * Function: svl_iplConfigure
 */
gos_result_t svl_iplConfigure (svl_iplTransmitFunction transmitFunc, svl_iplReceiveFunction receiveFunc)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_SUCCESS;
 800fc66:	2355      	movs	r3, #85	@ 0x55
 800fc68:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	svl_iplTransmit = transmitFunc;
 800fc6a:	4a0e      	ldr	r2, [pc, #56]	@ (800fca4 <svl_iplConfigure+0x48>)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6013      	str	r3, [r2, #0]
	svl_iplReceive  = receiveFunc;
 800fc70:	4a0d      	ldr	r2, [pc, #52]	@ (800fca8 <svl_iplConfigure+0x4c>)
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	6013      	str	r3, [r2, #0]

	// Set IPL state machine based on NULL pointer check.
	if (svl_iplTransmit != NULL && svl_iplReceive != NULL)
 800fc76:	4b0b      	ldr	r3, [pc, #44]	@ (800fca4 <svl_iplConfigure+0x48>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d007      	beq.n	800fc8e <svl_iplConfigure+0x32>
 800fc7e:	4b0a      	ldr	r3, [pc, #40]	@ (800fca8 <svl_iplConfigure+0x4c>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <svl_iplConfigure+0x32>
	{
		iplState = SVL_IPL_STATE_DISCOVER_START;
 800fc86:	4b09      	ldr	r3, [pc, #36]	@ (800fcac <svl_iplConfigure+0x50>)
 800fc88:	2201      	movs	r2, #1
 800fc8a:	701a      	strb	r2, [r3, #0]
 800fc8c:	e002      	b.n	800fc94 <svl_iplConfigure+0x38>
	}
	else
	{
		iplState = SVL_IPL_STATE_NOT_CONFIGURED;
 800fc8e:	4b07      	ldr	r3, [pc, #28]	@ (800fcac <svl_iplConfigure+0x50>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	701a      	strb	r2, [r3, #0]
	}

	return configureResult;
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	20005568 	.word	0x20005568
 800fca8:	2000556c 	.word	0x2000556c
 800fcac:	20003f20 	.word	0x20003f20

0800fcb0 <svl_iplSendMessage>:

/*
 * Function: svl_iplSendMessage
 */
gos_result_t svl_iplSendMessage (u32_t msgId, u8_t* pData, u32_t dataLength)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08a      	sub	sp, #40	@ 0x28
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t       sendResult = GOS_ERROR;
 800fcbc:	23ae      	movs	r3, #174	@ 0xae
 800fcbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	svl_iplMsgHeader_t header;

	/*
	 * Function code.
	 */
	header.messageId     = msgId;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	617b      	str	r3, [r7, #20]
	header.messageLength = dataLength;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	61bb      	str	r3, [r7, #24]

	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800fcca:	f107 0314 	add.w	r3, r7, #20
 800fcce:	330c      	adds	r3, #12
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	68b8      	ldr	r0, [r7, #8]
 800fcd6:	f7fc f9fb 	bl	800c0d0 <drv_crcGetCrc32>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b55      	cmp	r3, #85	@ 0x55
 800fcde:	d117      	bne.n	800fd10 <svl_iplSendMessage+0x60>
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800fce0:	4b0e      	ldr	r3, [pc, #56]	@ (800fd1c <svl_iplSendMessage+0x6c>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f107 0014 	add.w	r0, r7, #20
 800fce8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fcec:	2110      	movs	r1, #16
 800fcee:	4798      	blx	r3
 800fcf0:	4603      	mov	r3, r0
	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800fcf2:	2b55      	cmp	r3, #85	@ 0x55
 800fcf4:	d10c      	bne.n	800fd10 <svl_iplSendMessage+0x60>
		svl_iplTransmit(pData, dataLength, 1000u) == GOS_SUCCESS)
 800fcf6:	4b09      	ldr	r3, [pc, #36]	@ (800fd1c <svl_iplSendMessage+0x6c>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fcfe:	6879      	ldr	r1, [r7, #4]
 800fd00:	68b8      	ldr	r0, [r7, #8]
 800fd02:	4798      	blx	r3
 800fd04:	4603      	mov	r3, r0
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800fd06:	2b55      	cmp	r3, #85	@ 0x55
 800fd08:	d102      	bne.n	800fd10 <svl_iplSendMessage+0x60>
	{
		sendResult = GOS_SUCCESS;
 800fd0a:	2355      	movs	r3, #85	@ 0x55
 800fd0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	else
	{
		// Error.
	}

	return sendResult;
 800fd10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3728      	adds	r7, #40	@ 0x28
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20005568 	.word	0x20005568

0800fd20 <svl_iplDaemon>:
 * @details Handles IPL state machine and incoming IPL messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_iplDaemon (void_t)
{
 800fd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd22:	b097      	sub	sp, #92	@ 0x5c
 800fd24:	af0e      	add	r7, sp, #56	@ 0x38
	/*
	 * Local variables.
	 */
	u8_t lutIndex = 0u;
 800fd26:	2300      	movs	r3, #0
 800fd28:	77fb      	strb	r3, [r7, #31]

	/*
	 * Function code.
	 */
	// Delay service start.
	(void_t) gos_taskSleep(2000);
 800fd2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800fd2e:	f003 fe5d 	bl	80139ec <gos_taskSleep>

	for (;;)
	{
		switch (iplState)
 800fd32:	4ba6      	ldr	r3, [pc, #664]	@ (800ffcc <svl_iplDaemon+0x2ac>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b07      	cmp	r3, #7
 800fd38:	f200 8467 	bhi.w	801060a <svl_iplDaemon+0x8ea>
 800fd3c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd44 <svl_iplDaemon+0x24>)
 800fd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd42:	bf00      	nop
 800fd44:	0801060b 	.word	0x0801060b
 800fd48:	0800fd65 	.word	0x0800fd65
 800fd4c:	0800fd9f 	.word	0x0800fd9f
 800fd50:	0800fe73 	.word	0x0800fe73
 800fd54:	0800fe83 	.word	0x0800fe83
 800fd58:	08010031 	.word	0x08010031
 800fd5c:	08010041 	.word	0x08010041
 800fd60:	08010113 	.word	0x08010113
				// Wait until transmit and receive functions are registered.
				break;
			}
			case SVL_IPL_STATE_DISCOVER_START:
			{
				attemptCount++;
 800fd64:	4b9a      	ldr	r3, [pc, #616]	@ (800ffd0 <svl_iplDaemon+0x2b0>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	4b98      	ldr	r3, [pc, #608]	@ (800ffd0 <svl_iplDaemon+0x2b0>)
 800fd6e:	701a      	strb	r2, [r3, #0]

				if (attemptCount <= SVL_IPL_MAX_ATTEMPTS)
 800fd70:	4b97      	ldr	r3, [pc, #604]	@ (800ffd0 <svl_iplDaemon+0x2b0>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	2b05      	cmp	r3, #5
 800fd76:	d808      	bhi.n	800fd8a <svl_iplDaemon+0x6a>
				{
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery start...\r\n");
 800fd78:	4996      	ldr	r1, [pc, #600]	@ (800ffd4 <svl_iplDaemon+0x2b4>)
 800fd7a:	2036      	movs	r0, #54	@ 0x36
 800fd7c:	f007 ffdc 	bl	8017d38 <gos_traceTrace>
#endif
					iplState = SVL_IPL_STATE_DISCOVER;
 800fd80:	4b92      	ldr	r3, [pc, #584]	@ (800ffcc <svl_iplDaemon+0x2ac>)
 800fd82:	2202      	movs	r2, #2
 800fd84:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);

					// If task gets resumed externally, restart state-machine.
					attemptCount = 0u;
				}
				break;
 800fd86:	f000 bc40 	b.w	801060a <svl_iplDaemon+0x8ea>
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);
 800fd8a:	4b93      	ldr	r3, [pc, #588]	@ (800ffd8 <svl_iplDaemon+0x2b8>)
 800fd8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f003 ff84 	bl	8013c9c <gos_taskSuspend>
					attemptCount = 0u;
 800fd94:	4b8e      	ldr	r3, [pc, #568]	@ (800ffd0 <svl_iplDaemon+0x2b0>)
 800fd96:	2200      	movs	r2, #0
 800fd98:	701a      	strb	r2, [r3, #0]
				break;
 800fd9a:	f000 bc36 	b.w	801060a <svl_iplDaemon+0x8ea>
			}
			case SVL_IPL_STATE_DISCOVER:
			{
				msgHeader.messageId     = IPL_MSG_ID_DISCOVERY;
 800fd9e:	4b8f      	ldr	r3, [pc, #572]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fda0:	2201      	movs	r2, #1
 800fda2:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(discoveryMsg);
 800fda4:	4b8d      	ldr	r3, [pc, #564]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fda6:	2240      	movs	r2, #64	@ 0x40
 800fda8:	605a      	str	r2, [r3, #4]

				(void_t) strcpy(discoveryMsg.masterDeviceId, "STM32F446-0001");
 800fdaa:	4a8d      	ldr	r2, [pc, #564]	@ (800ffe0 <svl_iplDaemon+0x2c0>)
 800fdac:	4b8d      	ldr	r3, [pc, #564]	@ (800ffe4 <svl_iplDaemon+0x2c4>)
 800fdae:	4614      	mov	r4, r2
 800fdb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdb2:	c407      	stmia	r4!, {r0, r1, r2}
 800fdb4:	8023      	strh	r3, [r4, #0]
 800fdb6:	3402      	adds	r4, #2
 800fdb8:	0c1b      	lsrs	r3, r3, #16
 800fdba:	7023      	strb	r3, [r4, #0]
				(void_t) drv_crcGetCrc32((u8_t*)&discoveryMsg, sizeof(discoveryMsg), &msgHeader.messageCrc);
 800fdbc:	4a8a      	ldr	r2, [pc, #552]	@ (800ffe8 <svl_iplDaemon+0x2c8>)
 800fdbe:	2140      	movs	r1, #64	@ 0x40
 800fdc0:	4887      	ldr	r0, [pc, #540]	@ (800ffe0 <svl_iplDaemon+0x2c0>)
 800fdc2:	f7fc f985 	bl	800c0d0 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 500u) == GOS_SUCCESS &&
 800fdc6:	4b89      	ldr	r3, [pc, #548]	@ (800ffec <svl_iplDaemon+0x2cc>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800fdce:	2110      	movs	r1, #16
 800fdd0:	4882      	ldr	r0, [pc, #520]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fdd2:	4798      	blx	r3
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b55      	cmp	r3, #85	@ 0x55
 800fdd8:	d13f      	bne.n	800fe5a <svl_iplDaemon+0x13a>
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       500u) == GOS_SUCCESS &&
 800fdda:	4b84      	ldr	r3, [pc, #528]	@ (800ffec <svl_iplDaemon+0x2cc>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800fde2:	2140      	movs	r1, #64	@ 0x40
 800fde4:	487e      	ldr	r0, [pc, #504]	@ (800ffe0 <svl_iplDaemon+0x2c0>)
 800fde6:	4798      	blx	r3
 800fde8:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 500u) == GOS_SUCCESS &&
 800fdea:	2b55      	cmp	r3, #85	@ 0x55
 800fdec:	d135      	bne.n	800fe5a <svl_iplDaemon+0x13a>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          500u) == GOS_SUCCESS &&
 800fdee:	4b80      	ldr	r3, [pc, #512]	@ (800fff0 <svl_iplDaemon+0x2d0>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800fdf6:	2110      	movs	r1, #16
 800fdf8:	4878      	ldr	r0, [pc, #480]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fdfa:	4798      	blx	r3
 800fdfc:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       500u) == GOS_SUCCESS &&
 800fdfe:	2b55      	cmp	r3, #85	@ 0x55
 800fe00:	d12b      	bne.n	800fe5a <svl_iplDaemon+0x13a>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    500u) == GOS_SUCCESS &&
 800fe02:	4b7b      	ldr	r3, [pc, #492]	@ (800fff0 <svl_iplDaemon+0x2d0>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a75      	ldr	r2, [pc, #468]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe08:	6851      	ldr	r1, [r2, #4]
 800fe0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800fe0e:	4879      	ldr	r0, [pc, #484]	@ (800fff4 <svl_iplDaemon+0x2d4>)
 800fe10:	4798      	blx	r3
 800fe12:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          500u) == GOS_SUCCESS &&
 800fe14:	2b55      	cmp	r3, #85	@ 0x55
 800fe16:	d120      	bne.n	800fe5a <svl_iplDaemon+0x13a>
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800fe18:	4b70      	ldr	r3, [pc, #448]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    500u) == GOS_SUCCESS &&
 800fe1c:	f640 2201 	movw	r2, #2561	@ 0xa01
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d11a      	bne.n	800fe5a <svl_iplDaemon+0x13a>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800fe24:	4b6d      	ldr	r3, [pc, #436]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe26:	6859      	ldr	r1, [r3, #4]
 800fe28:	4b6c      	ldr	r3, [pc, #432]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe2a:	68da      	ldr	r2, [r3, #12]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4871      	ldr	r0, [pc, #452]	@ (800fff4 <svl_iplDaemon+0x2d4>)
 800fe30:	f7fc f99a 	bl	800c168 <drv_crcCheckCrc32>
 800fe34:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800fe36:	2bca      	cmp	r3, #202	@ 0xca
 800fe38:	d10f      	bne.n	800fe5a <svl_iplDaemon+0x13a>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&discoveryMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800fe3a:	4b68      	ldr	r3, [pc, #416]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	496c      	ldr	r1, [pc, #432]	@ (800fff4 <svl_iplDaemon+0x2d4>)
 800fe42:	4867      	ldr	r0, [pc, #412]	@ (800ffe0 <svl_iplDaemon+0x2c0>)
 800fe44:	f009 fab1 	bl	80193aa <memcpy>
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL device discovered: %s\r\n", discoveryMsg.slaveDeviceId);
 800fe48:	4a6b      	ldr	r2, [pc, #428]	@ (800fff8 <svl_iplDaemon+0x2d8>)
 800fe4a:	496c      	ldr	r1, [pc, #432]	@ (800fffc <svl_iplDaemon+0x2dc>)
 800fe4c:	2036      	movs	r0, #54	@ 0x36
 800fe4e:	f008 f88f 	bl	8017f70 <gos_traceTraceFormatted>
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
 800fe52:	4b5e      	ldr	r3, [pc, #376]	@ (800ffcc <svl_iplDaemon+0x2ac>)
 800fe54:	2203      	movs	r2, #3
 800fe56:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(5000);
				}
				break;
 800fe58:	e3d7      	b.n	801060a <svl_iplDaemon+0x8ea>
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
 800fe5a:	4969      	ldr	r1, [pc, #420]	@ (8010000 <svl_iplDaemon+0x2e0>)
 800fe5c:	2036      	movs	r0, #54	@ 0x36
 800fe5e:	f007 ff6b 	bl	8017d38 <gos_traceTrace>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800fe62:	4b5a      	ldr	r3, [pc, #360]	@ (800ffcc <svl_iplDaemon+0x2ac>)
 800fe64:	2201      	movs	r2, #1
 800fe66:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(5000);
 800fe68:	f241 3088 	movw	r0, #5000	@ 0x1388
 800fe6c:	f003 fdbe 	bl	80139ec <gos_taskSleep>
				break;
 800fe70:	e3cb      	b.n	801060a <svl_iplDaemon+0x8ea>
			}
			case SVL_IPL_STATE_CONFIG_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Configuring device...\r\n");
 800fe72:	4964      	ldr	r1, [pc, #400]	@ (8010004 <svl_iplDaemon+0x2e4>)
 800fe74:	2036      	movs	r0, #54	@ 0x36
 800fe76:	f007 ff5f 	bl	8017d38 <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_CONFIG;
 800fe7a:	4b54      	ldr	r3, [pc, #336]	@ (800ffcc <svl_iplDaemon+0x2ac>)
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	701a      	strb	r2, [r3, #0]
				break;
 800fe80:	e3c3      	b.n	801060a <svl_iplDaemon+0x8ea>
			}
			case SVL_IPL_STATE_CONFIG:
			{
				(void_t) svl_pdhGetWifiCfg(&devConfigMsg);
 800fe82:	4861      	ldr	r0, [pc, #388]	@ (8010008 <svl_iplDaemon+0x2e8>)
 800fe84:	f000 fd94 	bl	80109b0 <svl_pdhGetWifiCfg>

				msgHeader.messageId     = IPL_MSG_ID_CONFIG;
 800fe88:	4b54      	ldr	r3, [pc, #336]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe8a:	2211      	movs	r2, #17
 800fe8c:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(devConfigMsg);
 800fe8e:	4b53      	ldr	r3, [pc, #332]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fe90:	226e      	movs	r2, #110	@ 0x6e
 800fe92:	605a      	str	r2, [r3, #4]

				(void_t) drv_crcGetCrc32((u8_t*)&devConfigMsg, sizeof(devConfigMsg), &msgHeader.messageCrc);
 800fe94:	4a54      	ldr	r2, [pc, #336]	@ (800ffe8 <svl_iplDaemon+0x2c8>)
 800fe96:	216e      	movs	r1, #110	@ 0x6e
 800fe98:	485b      	ldr	r0, [pc, #364]	@ (8010008 <svl_iplDaemon+0x2e8>)
 800fe9a:	f7fc f919 	bl	800c0d0 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800fe9e:	4b53      	ldr	r3, [pc, #332]	@ (800ffec <svl_iplDaemon+0x2cc>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fea6:	2110      	movs	r1, #16
 800fea8:	484c      	ldr	r0, [pc, #304]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800feaa:	4798      	blx	r3
 800feac:	4603      	mov	r3, r0
 800feae:	2b55      	cmp	r3, #85	@ 0x55
 800feb0:	f040 80b2 	bne.w	8010018 <svl_iplDaemon+0x2f8>
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       1000u) == GOS_SUCCESS &&
 800feb4:	4b4d      	ldr	r3, [pc, #308]	@ (800ffec <svl_iplDaemon+0x2cc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800febc:	216e      	movs	r1, #110	@ 0x6e
 800febe:	4852      	ldr	r0, [pc, #328]	@ (8010008 <svl_iplDaemon+0x2e8>)
 800fec0:	4798      	blx	r3
 800fec2:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800fec4:	2b55      	cmp	r3, #85	@ 0x55
 800fec6:	f040 80a7 	bne.w	8010018 <svl_iplDaemon+0x2f8>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          2000u) == GOS_SUCCESS &&
 800feca:	4b49      	ldr	r3, [pc, #292]	@ (800fff0 <svl_iplDaemon+0x2d0>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800fed2:	2110      	movs	r1, #16
 800fed4:	4841      	ldr	r0, [pc, #260]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fed6:	4798      	blx	r3
 800fed8:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       1000u) == GOS_SUCCESS &&
 800feda:	2b55      	cmp	r3, #85	@ 0x55
 800fedc:	f040 809c 	bne.w	8010018 <svl_iplDaemon+0x2f8>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 800fee0:	4b43      	ldr	r3, [pc, #268]	@ (800fff0 <svl_iplDaemon+0x2d0>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a3d      	ldr	r2, [pc, #244]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fee6:	6851      	ldr	r1, [r2, #4]
 800fee8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800feec:	4841      	ldr	r0, [pc, #260]	@ (800fff4 <svl_iplDaemon+0x2d4>)
 800feee:	4798      	blx	r3
 800fef0:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          2000u) == GOS_SUCCESS &&
 800fef2:	2b55      	cmp	r3, #85	@ 0x55
 800fef4:	f040 8090 	bne.w	8010018 <svl_iplDaemon+0x2f8>
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800fef8:	4b38      	ldr	r3, [pc, #224]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800fefa:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 800fefc:	f640 2211 	movw	r2, #2577	@ 0xa11
 800ff00:	4293      	cmp	r3, r2
 800ff02:	f040 8089 	bne.w	8010018 <svl_iplDaemon+0x2f8>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800ff06:	4b35      	ldr	r3, [pc, #212]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800ff08:	6859      	ldr	r1, [r3, #4]
 800ff0a:	4b34      	ldr	r3, [pc, #208]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800ff0c:	68da      	ldr	r2, [r3, #12]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	4838      	ldr	r0, [pc, #224]	@ (800fff4 <svl_iplDaemon+0x2d4>)
 800ff12:	f7fc f929 	bl	800c168 <drv_crcCheckCrc32>
 800ff16:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800ff18:	2bca      	cmp	r3, #202	@ 0xca
 800ff1a:	d17d      	bne.n	8010018 <svl_iplDaemon+0x2f8>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&receivedDevConfigMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800ff1c:	4b2f      	ldr	r3, [pc, #188]	@ (800ffdc <svl_iplDaemon+0x2bc>)
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	461a      	mov	r2, r3
 800ff22:	4934      	ldr	r1, [pc, #208]	@ (800fff4 <svl_iplDaemon+0x2d4>)
 800ff24:	4839      	ldr	r0, [pc, #228]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff26:	f009 fa40 	bl	80193aa <memcpy>
							"Port:      \t%u\r\n"
							"Subnet:    \t%u.%u.%u.%u\r\n"
							"Gateway:   \t%u.%u.%u.%u\r\n",
							receivedDevConfigMsg.ssid,
							receivedDevConfigMsg.pwd,
							receivedDevConfigMsg.ipAddress[0], receivedDevConfigMsg.ipAddress[1],
 800ff2a:	4b38      	ldr	r3, [pc, #224]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff2c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
					(void_t) gos_traceTraceFormatted(
 800ff30:	461a      	mov	r2, r3
							receivedDevConfigMsg.ipAddress[0], receivedDevConfigMsg.ipAddress[1],
 800ff32:	4b36      	ldr	r3, [pc, #216]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff34:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
					(void_t) gos_traceTraceFormatted(
 800ff38:	4619      	mov	r1, r3
							receivedDevConfigMsg.ipAddress[2], receivedDevConfigMsg.ipAddress[3],
 800ff3a:	4b34      	ldr	r3, [pc, #208]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff3c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
					(void_t) gos_traceTraceFormatted(
 800ff40:	4618      	mov	r0, r3
							receivedDevConfigMsg.ipAddress[2], receivedDevConfigMsg.ipAddress[3],
 800ff42:	4b32      	ldr	r3, [pc, #200]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff44:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
					(void_t) gos_traceTraceFormatted(
 800ff48:	461c      	mov	r4, r3
							receivedDevConfigMsg.port,
 800ff4a:	4b30      	ldr	r3, [pc, #192]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff4c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
					(void_t) gos_traceTraceFormatted(
 800ff50:	461d      	mov	r5, r3
							receivedDevConfigMsg.subnet[0],  receivedDevConfigMsg.subnet[1],
 800ff52:	4b2e      	ldr	r3, [pc, #184]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff54:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
					(void_t) gos_traceTraceFormatted(
 800ff58:	461e      	mov	r6, r3
							receivedDevConfigMsg.subnet[0],  receivedDevConfigMsg.subnet[1],
 800ff5a:	4b2c      	ldr	r3, [pc, #176]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff5c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
					(void_t) gos_traceTraceFormatted(
 800ff60:	617b      	str	r3, [r7, #20]
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
 800ff62:	4b2a      	ldr	r3, [pc, #168]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff64:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
					(void_t) gos_traceTraceFormatted(
 800ff68:	613b      	str	r3, [r7, #16]
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
 800ff6a:	4b28      	ldr	r3, [pc, #160]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff6c:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
					(void_t) gos_traceTraceFormatted(
 800ff70:	60fb      	str	r3, [r7, #12]
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
 800ff72:	4b26      	ldr	r3, [pc, #152]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff74:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
					(void_t) gos_traceTraceFormatted(
 800ff78:	60bb      	str	r3, [r7, #8]
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
 800ff7a:	4b24      	ldr	r3, [pc, #144]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff7c:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
					(void_t) gos_traceTraceFormatted(
 800ff80:	607b      	str	r3, [r7, #4]
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
 800ff82:	4b22      	ldr	r3, [pc, #136]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff84:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
					(void_t) gos_traceTraceFormatted(
 800ff88:	603b      	str	r3, [r7, #0]
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
 800ff8a:	4b20      	ldr	r3, [pc, #128]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ff8c:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
					(void_t) gos_traceTraceFormatted(
 800ff90:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	9308      	str	r3, [sp, #32]
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	9307      	str	r3, [sp, #28]
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	9306      	str	r3, [sp, #24]
 800ffaa:	9605      	str	r6, [sp, #20]
 800ffac:	9504      	str	r5, [sp, #16]
 800ffae:	9403      	str	r4, [sp, #12]
 800ffb0:	9002      	str	r0, [sp, #8]
 800ffb2:	9101      	str	r1, [sp, #4]
 800ffb4:	9200      	str	r2, [sp, #0]
 800ffb6:	4b16      	ldr	r3, [pc, #88]	@ (8010010 <svl_iplDaemon+0x2f0>)
 800ffb8:	4a14      	ldr	r2, [pc, #80]	@ (801000c <svl_iplDaemon+0x2ec>)
 800ffba:	4916      	ldr	r1, [pc, #88]	@ (8010014 <svl_iplDaemon+0x2f4>)
 800ffbc:	2036      	movs	r0, #54	@ 0x36
 800ffbe:	f007 ffd7 	bl	8017f70 <gos_traceTraceFormatted>
						);
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 800ffc2:	4b02      	ldr	r3, [pc, #8]	@ (800ffcc <svl_iplDaemon+0x2ac>)
 800ffc4:	2205      	movs	r2, #5
 800ffc6:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800ffc8:	e31f      	b.n	801060a <svl_iplDaemon+0x8ea>
 800ffca:	bf00      	nop
 800ffcc:	20003f20 	.word	0x20003f20
 800ffd0:	20005570 	.word	0x20005570
 800ffd4:	0801b9ec 	.word	0x0801b9ec
 800ffd8:	200005e8 	.word	0x200005e8
 800ffdc:	20004ffc 	.word	0x20004ffc
 800ffe0:	200050fc 	.word	0x200050fc
 800ffe4:	0801ba08 	.word	0x0801ba08
 800ffe8:	20005008 	.word	0x20005008
 800ffec:	20005568 	.word	0x20005568
 800fff0:	2000556c 	.word	0x2000556c
 800fff4:	20003f24 	.word	0x20003f24
 800fff8:	2000511c 	.word	0x2000511c
 800fffc:	0801ba18 	.word	0x0801ba18
 8010000:	0801ba34 	.word	0x0801ba34
 8010004:	0801ba4c 	.word	0x0801ba4c
 8010008:	2000501c 	.word	0x2000501c
 801000c:	2000508c 	.word	0x2000508c
 8010010:	200050bc 	.word	0x200050bc
 8010014:	0801ba64 	.word	0x0801ba64
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
 8010018:	4988      	ldr	r1, [pc, #544]	@ (801023c <svl_iplDaemon+0x51c>)
 801001a:	2036      	movs	r0, #54	@ 0x36
 801001c:	f007 fe8c 	bl	8017d38 <gos_traceTrace>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 8010020:	4b87      	ldr	r3, [pc, #540]	@ (8010240 <svl_iplDaemon+0x520>)
 8010022:	2201      	movs	r2, #1
 8010024:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 8010026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801002a:	f003 fcdf 	bl	80139ec <gos_taskSleep>
				break;
 801002e:	e2ec      	b.n	801060a <svl_iplDaemon+0x8ea>
			}
			case SVL_IPL_STATE_CONNECT_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Connecting to network...\r\n");
 8010030:	4984      	ldr	r1, [pc, #528]	@ (8010244 <svl_iplDaemon+0x524>)
 8010032:	2036      	movs	r0, #54	@ 0x36
 8010034:	f007 fe80 	bl	8017d38 <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_CONNECT;
 8010038:	4b81      	ldr	r3, [pc, #516]	@ (8010240 <svl_iplDaemon+0x520>)
 801003a:	2206      	movs	r2, #6
 801003c:	701a      	strb	r2, [r3, #0]
				break;
 801003e:	e2e4      	b.n	801060a <svl_iplDaemon+0x8ea>
			}
			case SVL_IPL_STATE_CONNECT:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONNECT;
 8010040:	4b81      	ldr	r3, [pc, #516]	@ (8010248 <svl_iplDaemon+0x528>)
 8010042:	2221      	movs	r2, #33	@ 0x21
 8010044:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(connectMsg);
 8010046:	4b80      	ldr	r3, [pc, #512]	@ (8010248 <svl_iplDaemon+0x528>)
 8010048:	2201      	movs	r2, #1
 801004a:	605a      	str	r2, [r3, #4]

				(void_t) drv_crcGetCrc32((u8_t*)&connectMsg, sizeof(connectMsg), &msgHeader.messageCrc);
 801004c:	4a7f      	ldr	r2, [pc, #508]	@ (801024c <svl_iplDaemon+0x52c>)
 801004e:	2101      	movs	r1, #1
 8010050:	487f      	ldr	r0, [pc, #508]	@ (8010250 <svl_iplDaemon+0x530>)
 8010052:	f7fc f83d 	bl	800c0d0 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 8010056:	4b7f      	ldr	r3, [pc, #508]	@ (8010254 <svl_iplDaemon+0x534>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801005e:	2110      	movs	r1, #16
 8010060:	4879      	ldr	r0, [pc, #484]	@ (8010248 <svl_iplDaemon+0x528>)
 8010062:	4798      	blx	r3
 8010064:	4603      	mov	r3, r0
 8010066:	2b55      	cmp	r3, #85	@ 0x55
 8010068:	d14a      	bne.n	8010100 <svl_iplDaemon+0x3e0>
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         1000u) == GOS_SUCCESS &&
 801006a:	4b7a      	ldr	r3, [pc, #488]	@ (8010254 <svl_iplDaemon+0x534>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010072:	2101      	movs	r1, #1
 8010074:	4876      	ldr	r0, [pc, #472]	@ (8010250 <svl_iplDaemon+0x530>)
 8010076:	4798      	blx	r3
 8010078:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 801007a:	2b55      	cmp	r3, #85	@ 0x55
 801007c:	d140      	bne.n	8010100 <svl_iplDaemon+0x3e0>
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),         10000u) == GOS_SUCCESS &&
 801007e:	4b76      	ldr	r3, [pc, #472]	@ (8010258 <svl_iplDaemon+0x538>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010086:	2110      	movs	r1, #16
 8010088:	486f      	ldr	r0, [pc, #444]	@ (8010248 <svl_iplDaemon+0x528>)
 801008a:	4798      	blx	r3
 801008c:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         1000u) == GOS_SUCCESS &&
 801008e:	2b55      	cmp	r3, #85	@ 0x55
 8010090:	d136      	bne.n	8010100 <svl_iplDaemon+0x3e0>
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 8010092:	4b71      	ldr	r3, [pc, #452]	@ (8010258 <svl_iplDaemon+0x538>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a6c      	ldr	r2, [pc, #432]	@ (8010248 <svl_iplDaemon+0x528>)
 8010098:	6851      	ldr	r1, [r2, #4]
 801009a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801009e:	486f      	ldr	r0, [pc, #444]	@ (801025c <svl_iplDaemon+0x53c>)
 80100a0:	4798      	blx	r3
 80100a2:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),         10000u) == GOS_SUCCESS &&
 80100a4:	2b55      	cmp	r3, #85	@ 0x55
 80100a6:	d12b      	bne.n	8010100 <svl_iplDaemon+0x3e0>
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 80100a8:	4b67      	ldr	r3, [pc, #412]	@ (8010248 <svl_iplDaemon+0x528>)
 80100aa:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 80100ac:	f640 2221 	movw	r2, #2593	@ 0xa21
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d125      	bne.n	8010100 <svl_iplDaemon+0x3e0>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 80100b4:	4b64      	ldr	r3, [pc, #400]	@ (8010248 <svl_iplDaemon+0x528>)
 80100b6:	6859      	ldr	r1, [r3, #4]
 80100b8:	4b63      	ldr	r3, [pc, #396]	@ (8010248 <svl_iplDaemon+0x528>)
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	2300      	movs	r3, #0
 80100be:	4867      	ldr	r0, [pc, #412]	@ (801025c <svl_iplDaemon+0x53c>)
 80100c0:	f7fc f852 	bl	800c168 <drv_crcCheckCrc32>
 80100c4:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 80100c6:	2bca      	cmp	r3, #202	@ 0xca
 80100c8:	d11a      	bne.n	8010100 <svl_iplDaemon+0x3e0>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&connectResultMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 80100ca:	4b5f      	ldr	r3, [pc, #380]	@ (8010248 <svl_iplDaemon+0x528>)
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	461a      	mov	r2, r3
 80100d0:	4962      	ldr	r1, [pc, #392]	@ (801025c <svl_iplDaemon+0x53c>)
 80100d2:	4863      	ldr	r0, [pc, #396]	@ (8010260 <svl_iplDaemon+0x540>)
 80100d4:	f009 f969 	bl	80193aa <memcpy>

					if (connectResultMsg.connectSuccess == GOS_TRUE)
 80100d8:	4b61      	ldr	r3, [pc, #388]	@ (8010260 <svl_iplDaemon+0x540>)
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	2b36      	cmp	r3, #54	@ 0x36
 80100de:	d107      	bne.n	80100f0 <svl_iplDaemon+0x3d0>
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Successfully connected to the network.\r\n");
 80100e0:	4960      	ldr	r1, [pc, #384]	@ (8010264 <svl_iplDaemon+0x544>)
 80100e2:	2036      	movs	r0, #54	@ 0x36
 80100e4:	f007 fe28 	bl	8017d38 <gos_traceTrace>
#endif
						iplState = SVL_IPL_STATE_CONNECTED;
 80100e8:	4b55      	ldr	r3, [pc, #340]	@ (8010240 <svl_iplDaemon+0x520>)
 80100ea:	2207      	movs	r2, #7
 80100ec:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 80100ee:	e00f      	b.n	8010110 <svl_iplDaemon+0x3f0>
					}
					else
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Network connection failed.\r\n");
 80100f0:	495d      	ldr	r1, [pc, #372]	@ (8010268 <svl_iplDaemon+0x548>)
 80100f2:	2036      	movs	r0, #54	@ 0x36
 80100f4:	f007 fe20 	bl	8017d38 <gos_traceTrace>
#endif
						iplState = SVL_IPL_STATE_DISCOVER_START;
 80100f8:	4b51      	ldr	r3, [pc, #324]	@ (8010240 <svl_iplDaemon+0x520>)
 80100fa:	2201      	movs	r2, #1
 80100fc:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 80100fe:	e007      	b.n	8010110 <svl_iplDaemon+0x3f0>
				}
				else
				{
					// No response.
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "No response was received.\r\n");
 8010100:	495a      	ldr	r1, [pc, #360]	@ (801026c <svl_iplDaemon+0x54c>)
 8010102:	2036      	movs	r0, #54	@ 0x36
 8010104:	f007 fe18 	bl	8017d38 <gos_traceTrace>
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
 8010108:	4b4d      	ldr	r3, [pc, #308]	@ (8010240 <svl_iplDaemon+0x520>)
 801010a:	2201      	movs	r2, #1
 801010c:	701a      	strb	r2, [r3, #0]
				}

				break;
 801010e:	e27c      	b.n	801060a <svl_iplDaemon+0x8ea>
 8010110:	e27b      	b.n	801060a <svl_iplDaemon+0x8ea>
			}
			case SVL_IPL_STATE_CONNECTED:
			{
				// Check if there is an incoming request.
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 8010112:	4b51      	ldr	r3, [pc, #324]	@ (8010258 <svl_iplDaemon+0x538>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f04f 32ff 	mov.w	r2, #4294967295
 801011a:	2110      	movs	r1, #16
 801011c:	484a      	ldr	r0, [pc, #296]	@ (8010248 <svl_iplDaemon+0x528>)
 801011e:	4798      	blx	r3
 8010120:	4603      	mov	r3, r0
 8010122:	2b55      	cmp	r3, #85	@ 0x55
 8010124:	f040 8270 	bne.w	8010608 <svl_iplDaemon+0x8e8>
					svl_iplReceive(iplRxBuffer,       msgHeader.messageLength, 0xFFFFFFFFu) == GOS_SUCCESS)
 8010128:	4b4b      	ldr	r3, [pc, #300]	@ (8010258 <svl_iplDaemon+0x538>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a46      	ldr	r2, [pc, #280]	@ (8010248 <svl_iplDaemon+0x528>)
 801012e:	6851      	ldr	r1, [r2, #4]
 8010130:	f04f 32ff 	mov.w	r2, #4294967295
 8010134:	4849      	ldr	r0, [pc, #292]	@ (801025c <svl_iplDaemon+0x53c>)
 8010136:	4798      	blx	r3
 8010138:	4603      	mov	r3, r0
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 801013a:	2b55      	cmp	r3, #85	@ 0x55
 801013c:	f040 8264 	bne.w	8010608 <svl_iplDaemon+0x8e8>
				{
					if (drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8010140:	4b41      	ldr	r3, [pc, #260]	@ (8010248 <svl_iplDaemon+0x528>)
 8010142:	6859      	ldr	r1, [r3, #4]
 8010144:	4b40      	ldr	r3, [pc, #256]	@ (8010248 <svl_iplDaemon+0x528>)
 8010146:	68da      	ldr	r2, [r3, #12]
 8010148:	2300      	movs	r3, #0
 801014a:	4844      	ldr	r0, [pc, #272]	@ (801025c <svl_iplDaemon+0x53c>)
 801014c:	f7fc f80c 	bl	800c168 <drv_crcCheckCrc32>
 8010150:	4603      	mov	r3, r0
 8010152:	2bca      	cmp	r3, #202	@ 0xca
 8010154:	f040 8253 	bne.w	80105fe <svl_iplDaemon+0x8de>
					{
						switch (msgHeader.messageId)
 8010158:	4b3b      	ldr	r3, [pc, #236]	@ (8010248 <svl_iplDaemon+0x528>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2bd1      	cmp	r3, #209	@ 0xd1
 801015e:	f000 815a 	beq.w	8010416 <svl_iplDaemon+0x6f6>
 8010162:	2bd1      	cmp	r3, #209	@ 0xd1
 8010164:	f200 8220 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 8010168:	2bc1      	cmp	r3, #193	@ 0xc1
 801016a:	f000 8137 	beq.w	80103dc <svl_iplDaemon+0x6bc>
 801016e:	2bc1      	cmp	r3, #193	@ 0xc1
 8010170:	f200 821a 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 8010174:	2bb1      	cmp	r3, #177	@ 0xb1
 8010176:	f000 8161 	beq.w	801043c <svl_iplDaemon+0x71c>
 801017a:	2bb1      	cmp	r3, #177	@ 0xb1
 801017c:	f200 8214 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 8010180:	2ba1      	cmp	r3, #161	@ 0xa1
 8010182:	f000 8139 	beq.w	80103f8 <svl_iplDaemon+0x6d8>
 8010186:	2ba1      	cmp	r3, #161	@ 0xa1
 8010188:	f200 820e 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 801018c:	2b91      	cmp	r3, #145	@ 0x91
 801018e:	f000 8117 	beq.w	80103c0 <svl_iplDaemon+0x6a0>
 8010192:	2b91      	cmp	r3, #145	@ 0x91
 8010194:	f200 8208 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 8010198:	2b81      	cmp	r3, #129	@ 0x81
 801019a:	f000 80d1 	beq.w	8010340 <svl_iplDaemon+0x620>
 801019e:	2b81      	cmp	r3, #129	@ 0x81
 80101a0:	f200 8202 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 80101a4:	2b71      	cmp	r3, #113	@ 0x71
 80101a6:	d071      	beq.n	801028c <svl_iplDaemon+0x56c>
 80101a8:	2b71      	cmp	r3, #113	@ 0x71
 80101aa:	f200 81fd 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 80101ae:	2b61      	cmp	r3, #97	@ 0x61
 80101b0:	d036      	beq.n	8010220 <svl_iplDaemon+0x500>
 80101b2:	2b61      	cmp	r3, #97	@ 0x61
 80101b4:	f200 81f8 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 80101b8:	2b51      	cmp	r3, #81	@ 0x51
 80101ba:	d023      	beq.n	8010204 <svl_iplDaemon+0x4e4>
 80101bc:	2b51      	cmp	r3, #81	@ 0x51
 80101be:	f200 81f3 	bhi.w	80105a8 <svl_iplDaemon+0x888>
 80101c2:	2b31      	cmp	r3, #49	@ 0x31
 80101c4:	d002      	beq.n	80101cc <svl_iplDaemon+0x4ac>
 80101c6:	2b41      	cmp	r3, #65	@ 0x41
 80101c8:	d011      	beq.n	80101ee <svl_iplDaemon+0x4ce>
 80101ca:	e1ed      	b.n	80105a8 <svl_iplDaemon+0x888>
						{
							case IPL_MSG_ID_CPU_LOAD:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL CPU load request received.\r\n");
 80101cc:	4928      	ldr	r1, [pc, #160]	@ (8010270 <svl_iplDaemon+0x550>)
 80101ce:	2036      	movs	r0, #54	@ 0x36
 80101d0:	f007 fdb2 	bl	8017d38 <gos_traceTrace>
#endif
								cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 80101d4:	f002 fa60 	bl	8012698 <gos_kernelGetCpuUsage>
 80101d8:	4603      	mov	r3, r0
 80101da:	461a      	mov	r2, r3
 80101dc:	4b25      	ldr	r3, [pc, #148]	@ (8010274 <svl_iplDaemon+0x554>)
 80101de:	801a      	strh	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_CPU_LOAD_ACK, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 80101e0:	2202      	movs	r2, #2
 80101e2:	4924      	ldr	r1, [pc, #144]	@ (8010274 <svl_iplDaemon+0x554>)
 80101e4:	f640 2031 	movw	r0, #2609	@ 0xa31
 80101e8:	f7ff fd62 	bl	800fcb0 <svl_iplSendMessage>
								break;
 80101ec:	e20c      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_RESET:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL reset request received.\r\n");
 80101ee:	4922      	ldr	r1, [pc, #136]	@ (8010278 <svl_iplDaemon+0x558>)
 80101f0:	2036      	movs	r0, #54	@ 0x36
 80101f2:	f007 fda1 	bl	8017d38 <gos_traceTrace>
#endif
								(void_t) gos_taskSleep(2000);
 80101f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80101fa:	f003 fbf7 	bl	80139ec <gos_taskSleep>
								gos_kernelReset();
 80101fe:	f002 fa5d 	bl	80126bc <gos_kernelReset>
								break;
 8010202:	e201      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_PING:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL ping request received.\r\n");
 8010204:	491d      	ldr	r1, [pc, #116]	@ (801027c <svl_iplDaemon+0x55c>)
 8010206:	2036      	movs	r0, #54	@ 0x36
 8010208:	f007 fd96 	bl	8017d38 <gos_traceTrace>
#endif
								pingMsg.pingResult = SVL_IPL_PING_OK;
 801020c:	4b1c      	ldr	r3, [pc, #112]	@ (8010280 <svl_iplDaemon+0x560>)
 801020e:	2228      	movs	r2, #40	@ 0x28
 8010210:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_PING_ACK, (u8_t*)&pingMsg, sizeof(pingMsg));
 8010212:	2201      	movs	r2, #1
 8010214:	491a      	ldr	r1, [pc, #104]	@ (8010280 <svl_iplDaemon+0x560>)
 8010216:	f640 2051 	movw	r0, #2641	@ 0xa51
 801021a:	f7ff fd49 	bl	800fcb0 <svl_iplSendMessage>
								break;
 801021e:	e1f3      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_TASK_NUM:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL task number request received.\r\n");
 8010220:	4918      	ldr	r1, [pc, #96]	@ (8010284 <svl_iplDaemon+0x564>)
 8010222:	2036      	movs	r0, #54	@ 0x36
 8010224:	f007 fd88 	bl	8017d38 <gos_traceTrace>
#endif
								(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 8010228:	4817      	ldr	r0, [pc, #92]	@ (8010288 <svl_iplDaemon+0x568>)
 801022a:	f004 ff2f 	bl	801508c <gos_taskGetNumber>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_NUM_ACK, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 801022e:	2202      	movs	r2, #2
 8010230:	4915      	ldr	r1, [pc, #84]	@ (8010288 <svl_iplDaemon+0x568>)
 8010232:	f640 2061 	movw	r0, #2657	@ 0xa61
 8010236:	f7ff fd3b 	bl	800fcb0 <svl_iplSendMessage>
								break;
 801023a:	e1e5      	b.n	8010608 <svl_iplDaemon+0x8e8>
 801023c:	0801bb04 	.word	0x0801bb04
 8010240:	20003f20 	.word	0x20003f20
 8010244:	0801bb20 	.word	0x0801bb20
 8010248:	20004ffc 	.word	0x20004ffc
 801024c:	20005008 	.word	0x20005008
 8010250:	2000500c 	.word	0x2000500c
 8010254:	20005568 	.word	0x20005568
 8010258:	2000556c 	.word	0x2000556c
 801025c:	20003f24 	.word	0x20003f24
 8010260:	20005010 	.word	0x20005010
 8010264:	0801bb3c 	.word	0x0801bb3c
 8010268:	0801bb68 	.word	0x0801bb68
 801026c:	0801bb88 	.word	0x0801bb88
 8010270:	0801bba4 	.word	0x0801bba4
 8010274:	20004ff8 	.word	0x20004ff8
 8010278:	0801bbc8 	.word	0x0801bbc8
 801027c:	0801bbe8 	.word	0x0801bbe8
 8010280:	20005014 	.word	0x20005014
 8010284:	0801bc08 	.word	0x0801bc08
 8010288:	20005018 	.word	0x20005018
							}
							case IPL_MSG_ID_TASK_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 801028c:	4ba6      	ldr	r3, [pc, #664]	@ (8010528 <svl_iplDaemon+0x808>)
 801028e:	881a      	ldrh	r2, [r3, #0]
 8010290:	4ba6      	ldr	r3, [pc, #664]	@ (801052c <svl_iplDaemon+0x80c>)
 8010292:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8010294:	4ba5      	ldr	r3, [pc, #660]	@ (801052c <svl_iplDaemon+0x80c>)
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	49a5      	ldr	r1, [pc, #660]	@ (8010530 <svl_iplDaemon+0x810>)
 801029a:	4618      	mov	r0, r3
 801029c:	f004 fe84 	bl	8014fa8 <gos_taskGetDataByIndex>
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(
										GOS_TRUE,
										"IPL task data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
 80102a0:	4ba2      	ldr	r3, [pc, #648]	@ (801052c <svl_iplDaemon+0x80c>)
 80102a2:	881b      	ldrh	r3, [r3, #0]
								(void_t) gos_traceTraceFormatted(
 80102a4:	461a      	mov	r2, r3
 80102a6:	49a3      	ldr	r1, [pc, #652]	@ (8010534 <svl_iplDaemon+0x814>)
 80102a8:	2036      	movs	r0, #54	@ 0x36
 80102aa:	f007 fe61 	bl	8017f70 <gos_traceTraceFormatted>
#endif
								// Fill out message.
								taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 80102ae:	4ba0      	ldr	r3, [pc, #640]	@ (8010530 <svl_iplDaemon+0x810>)
 80102b0:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80102b4:	4ba0      	ldr	r3, [pc, #640]	@ (8010538 <svl_iplDaemon+0x818>)
 80102b6:	875a      	strh	r2, [r3, #58]	@ 0x3a
								taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 80102b8:	4b9d      	ldr	r3, [pc, #628]	@ (8010530 <svl_iplDaemon+0x810>)
 80102ba:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 80102be:	4b9e      	ldr	r3, [pc, #632]	@ (8010538 <svl_iplDaemon+0x818>)
 80102c0:	86da      	strh	r2, [r3, #54]	@ 0x36
								taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 80102c2:	4b9b      	ldr	r3, [pc, #620]	@ (8010530 <svl_iplDaemon+0x810>)
 80102c4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80102c8:	4b9b      	ldr	r3, [pc, #620]	@ (8010538 <svl_iplDaemon+0x818>)
 80102ca:	871a      	strh	r2, [r3, #56]	@ 0x38
								taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 80102cc:	4b98      	ldr	r3, [pc, #608]	@ (8010530 <svl_iplDaemon+0x810>)
 80102ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102d0:	4a99      	ldr	r2, [pc, #612]	@ (8010538 <svl_iplDaemon+0x818>)
 80102d2:	f8c2 3027 	str.w	r3, [r2, #39]	@ 0x27
								taskDataMsg.taskId               = taskData.taskId;
 80102d6:	4b96      	ldr	r3, [pc, #600]	@ (8010530 <svl_iplDaemon+0x810>)
 80102d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80102da:	4b97      	ldr	r3, [pc, #604]	@ (8010538 <svl_iplDaemon+0x818>)
 80102dc:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
								(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 80102e0:	4996      	ldr	r1, [pc, #600]	@ (801053c <svl_iplDaemon+0x81c>)
 80102e2:	4897      	ldr	r0, [pc, #604]	@ (8010540 <svl_iplDaemon+0x820>)
 80102e4:	f009 f859 	bl	801939a <strcpy>
								taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 80102e8:	4b91      	ldr	r3, [pc, #580]	@ (8010530 <svl_iplDaemon+0x810>)
 80102ea:	79da      	ldrb	r2, [r3, #7]
 80102ec:	4b92      	ldr	r3, [pc, #584]	@ (8010538 <svl_iplDaemon+0x818>)
 80102ee:	709a      	strb	r2, [r3, #2]
								taskDataMsg.taskPriority         = taskData.taskPriority;
 80102f0:	4b8f      	ldr	r3, [pc, #572]	@ (8010530 <svl_iplDaemon+0x810>)
 80102f2:	799a      	ldrb	r2, [r3, #6]
 80102f4:	4b90      	ldr	r3, [pc, #576]	@ (8010538 <svl_iplDaemon+0x818>)
 80102f6:	705a      	strb	r2, [r3, #1]
								taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 80102f8:	4b8d      	ldr	r3, [pc, #564]	@ (8010530 <svl_iplDaemon+0x810>)
 80102fa:	891a      	ldrh	r2, [r3, #8]
 80102fc:	4b8e      	ldr	r3, [pc, #568]	@ (8010538 <svl_iplDaemon+0x818>)
 80102fe:	f8a3 2003 	strh.w	r2, [r3, #3]
								(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 8010302:	4a8d      	ldr	r2, [pc, #564]	@ (8010538 <svl_iplDaemon+0x818>)
 8010304:	4b8a      	ldr	r3, [pc, #552]	@ (8010530 <svl_iplDaemon+0x810>)
 8010306:	322d      	adds	r2, #45	@ 0x2d
 8010308:	334c      	adds	r3, #76	@ 0x4c
 801030a:	cb03      	ldmia	r3!, {r0, r1}
 801030c:	6010      	str	r0, [r2, #0]
 801030e:	6051      	str	r1, [r2, #4]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	7213      	strb	r3, [r2, #8]
								taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 8010314:	4b86      	ldr	r3, [pc, #536]	@ (8010530 <svl_iplDaemon+0x810>)
 8010316:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801031a:	4b87      	ldr	r3, [pc, #540]	@ (8010538 <svl_iplDaemon+0x818>)
 801031c:	879a      	strh	r2, [r3, #60]	@ 0x3c
								taskDataMsg.taskStackSize        = taskData.taskStackSize;
 801031e:	4b84      	ldr	r3, [pc, #528]	@ (8010530 <svl_iplDaemon+0x810>)
 8010320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010324:	4b84      	ldr	r3, [pc, #528]	@ (8010538 <svl_iplDaemon+0x818>)
 8010326:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
								taskDataMsg.taskState            = taskData.taskState;
 801032a:	4b81      	ldr	r3, [pc, #516]	@ (8010530 <svl_iplDaemon+0x810>)
 801032c:	791a      	ldrb	r2, [r3, #4]
 801032e:	4b82      	ldr	r3, [pc, #520]	@ (8010538 <svl_iplDaemon+0x818>)
 8010330:	701a      	strb	r2, [r3, #0]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_DATA_ACK, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 8010332:	223e      	movs	r2, #62	@ 0x3e
 8010334:	4980      	ldr	r1, [pc, #512]	@ (8010538 <svl_iplDaemon+0x818>)
 8010336:	f640 2071 	movw	r0, #2673	@ 0xa71
 801033a:	f7ff fcb9 	bl	800fcb0 <svl_iplSendMessage>
								break;
 801033e:	e163      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_TASK_VAR_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 8010340:	4b79      	ldr	r3, [pc, #484]	@ (8010528 <svl_iplDaemon+0x808>)
 8010342:	881a      	ldrh	r2, [r3, #0]
 8010344:	4b79      	ldr	r3, [pc, #484]	@ (801052c <svl_iplDaemon+0x80c>)
 8010346:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8010348:	4b78      	ldr	r3, [pc, #480]	@ (801052c <svl_iplDaemon+0x80c>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	4978      	ldr	r1, [pc, #480]	@ (8010530 <svl_iplDaemon+0x810>)
 801034e:	4618      	mov	r0, r3
 8010350:	f004 fe2a 	bl	8014fa8 <gos_taskGetDataByIndex>
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(
										GOS_TRUE,
										"IPL task variable data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
 8010354:	4b75      	ldr	r3, [pc, #468]	@ (801052c <svl_iplDaemon+0x80c>)
 8010356:	881b      	ldrh	r3, [r3, #0]
								(void_t) gos_traceTraceFormatted(
 8010358:	461a      	mov	r2, r3
 801035a:	497a      	ldr	r1, [pc, #488]	@ (8010544 <svl_iplDaemon+0x824>)
 801035c:	2036      	movs	r0, #54	@ 0x36
 801035e:	f007 fe07 	bl	8017f70 <gos_traceTraceFormatted>
#endif
								taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 8010362:	4b73      	ldr	r3, [pc, #460]	@ (8010530 <svl_iplDaemon+0x810>)
 8010364:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010368:	4b77      	ldr	r3, [pc, #476]	@ (8010548 <svl_iplDaemon+0x828>)
 801036a:	f8a3 2013 	strh.w	r2, [r3, #19]
								taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 801036e:	4b70      	ldr	r3, [pc, #448]	@ (8010530 <svl_iplDaemon+0x810>)
 8010370:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010374:	4b74      	ldr	r3, [pc, #464]	@ (8010548 <svl_iplDaemon+0x828>)
 8010376:	f8a3 2011 	strh.w	r2, [r3, #17]
								taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 801037a:	4b6d      	ldr	r3, [pc, #436]	@ (8010530 <svl_iplDaemon+0x810>)
 801037c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010380:	4b71      	ldr	r3, [pc, #452]	@ (8010548 <svl_iplDaemon+0x828>)
 8010382:	f8a3 200f 	strh.w	r2, [r3, #15]
								taskVarDataMsg.taskPriority      = taskData.taskPriority;
 8010386:	4b6a      	ldr	r3, [pc, #424]	@ (8010530 <svl_iplDaemon+0x810>)
 8010388:	799a      	ldrb	r2, [r3, #6]
 801038a:	4b6f      	ldr	r3, [pc, #444]	@ (8010548 <svl_iplDaemon+0x828>)
 801038c:	705a      	strb	r2, [r3, #1]
								taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 801038e:	4b68      	ldr	r3, [pc, #416]	@ (8010530 <svl_iplDaemon+0x810>)
 8010390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010392:	4a6d      	ldr	r2, [pc, #436]	@ (8010548 <svl_iplDaemon+0x828>)
 8010394:	f8c2 3002 	str.w	r3, [r2, #2]
			                    taskVarDataMsg.taskState         = taskData.taskState;
 8010398:	4b65      	ldr	r3, [pc, #404]	@ (8010530 <svl_iplDaemon+0x810>)
 801039a:	791a      	ldrb	r2, [r3, #4]
 801039c:	4b6a      	ldr	r3, [pc, #424]	@ (8010548 <svl_iplDaemon+0x828>)
 801039e:	701a      	strb	r2, [r3, #0]

			                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 80103a0:	4a69      	ldr	r2, [pc, #420]	@ (8010548 <svl_iplDaemon+0x828>)
 80103a2:	4b63      	ldr	r3, [pc, #396]	@ (8010530 <svl_iplDaemon+0x810>)
 80103a4:	3206      	adds	r2, #6
 80103a6:	334c      	adds	r3, #76	@ 0x4c
 80103a8:	cb03      	ldmia	r3!, {r0, r1}
 80103aa:	6010      	str	r0, [r2, #0]
 80103ac:	6051      	str	r1, [r2, #4]
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	7213      	strb	r3, [r2, #8]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_VAR_DATA_ACK, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 80103b2:	2215      	movs	r2, #21
 80103b4:	4964      	ldr	r1, [pc, #400]	@ (8010548 <svl_iplDaemon+0x828>)
 80103b6:	f640 2081 	movw	r0, #2689	@ 0xa81
 80103ba:	f7ff fc79 	bl	800fcb0 <svl_iplSendMessage>

								break;
 80103be:	e123      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_RUNTIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL runtime request received.\r\n");
 80103c0:	4962      	ldr	r1, [pc, #392]	@ (801054c <svl_iplDaemon+0x82c>)
 80103c2:	2036      	movs	r0, #54	@ 0x36
 80103c4:	f007 fcb8 	bl	8017d38 <gos_traceTrace>
#endif
								(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 80103c8:	4861      	ldr	r0, [pc, #388]	@ (8010550 <svl_iplDaemon+0x830>)
 80103ca:	f007 f96b 	bl	80176a4 <gos_runTimeGet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_RUNTIME_ACK, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 80103ce:	2209      	movs	r2, #9
 80103d0:	495f      	ldr	r1, [pc, #380]	@ (8010550 <svl_iplDaemon+0x830>)
 80103d2:	f640 2091 	movw	r0, #2705	@ 0xa91
 80103d6:	f7ff fc6b 	bl	800fcb0 <svl_iplSendMessage>
								break;
 80103da:	e115      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_HWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL hardware info request received.\r\n");
 80103dc:	495d      	ldr	r1, [pc, #372]	@ (8010554 <svl_iplDaemon+0x834>)
 80103de:	2036      	movs	r0, #54	@ 0x36
 80103e0:	f007 fcaa 	bl	8017d38 <gos_traceTrace>
#endif
								(void_t) svl_pdhGetHwInfo(&hwInfoMsg);
 80103e4:	485c      	ldr	r0, [pc, #368]	@ (8010558 <svl_iplDaemon+0x838>)
 80103e6:	f000 fa73 	bl	80108d0 <svl_pdhGetHwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_HWINFO_ACK, (u8_t*)&hwInfoMsg, sizeof(hwInfoMsg));
 80103ea:	22fa      	movs	r2, #250	@ 0xfa
 80103ec:	495a      	ldr	r1, [pc, #360]	@ (8010558 <svl_iplDaemon+0x838>)
 80103ee:	f640 20c1 	movw	r0, #2753	@ 0xac1
 80103f2:	f7ff fc5d 	bl	800fcb0 <svl_iplSendMessage>
								break;
 80103f6:	e107      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_SWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL software info request received.\r\n");
 80103f8:	4958      	ldr	r1, [pc, #352]	@ (801055c <svl_iplDaemon+0x83c>)
 80103fa:	2036      	movs	r0, #54	@ 0x36
 80103fc:	f007 fc9c 	bl	8017d38 <gos_traceTrace>
#endif
								(void_t) svl_pdhGetSwInfo(&swInfoMsg);
 8010400:	4857      	ldr	r0, [pc, #348]	@ (8010560 <svl_iplDaemon+0x840>)
 8010402:	f000 fa2d 	bl	8010860 <svl_pdhGetSwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SWINFO_ACK, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 8010406:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 801040a:	4955      	ldr	r1, [pc, #340]	@ (8010560 <svl_iplDaemon+0x840>)
 801040c:	f640 20a1 	movw	r0, #2721	@ 0xaa1
 8010410:	f7ff fc4e 	bl	800fcb0 <svl_iplSendMessage>
								break;
 8010414:	e0f8      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_SYNC_TIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL system time synchronization request received.\r\n");
 8010416:	4953      	ldr	r1, [pc, #332]	@ (8010564 <svl_iplDaemon+0x844>)
 8010418:	2036      	movs	r0, #54	@ 0x36
 801041a:	f007 fc8d 	bl	8017d38 <gos_traceTrace>
#endif
								(void_t) memcpy((void_t*)&sysTimeSetMsg, (void_t*)iplRxBuffer, sizeof(sysTimeSetMsg));
 801041e:	4b52      	ldr	r3, [pc, #328]	@ (8010568 <svl_iplDaemon+0x848>)
 8010420:	4a41      	ldr	r2, [pc, #260]	@ (8010528 <svl_iplDaemon+0x808>)
 8010422:	ca07      	ldmia	r2, {r0, r1, r2}
 8010424:	c303      	stmia	r3!, {r0, r1}
 8010426:	801a      	strh	r2, [r3, #0]
								(void_t) gos_timeSet(&sysTimeSetMsg.desiredSystemTime);
 8010428:	484f      	ldr	r0, [pc, #316]	@ (8010568 <svl_iplDaemon+0x848>)
 801042a:	f007 f91f 	bl	801766c <gos_timeSet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SYNC_TIME_ACK, (u8_t*)&sysTimeSetMsg, sizeof(sysTimeSetMsg));
 801042e:	220a      	movs	r2, #10
 8010430:	494d      	ldr	r1, [pc, #308]	@ (8010568 <svl_iplDaemon+0x848>)
 8010432:	f640 20d1 	movw	r0, #2769	@ 0xad1
 8010436:	f7ff fc3b 	bl	800fcb0 <svl_iplSendMessage>
								break;
 801043a:	e0e5      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							case IPL_MSG_ID_TASK_MODIFY:
							{
								// Get parameters.
								(void_t) memcpy((void_t*)&taskModifyMsg, (void_t*)iplRxBuffer, sizeof(taskModifyMsg));
 801043c:	4b3a      	ldr	r3, [pc, #232]	@ (8010528 <svl_iplDaemon+0x808>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a4a      	ldr	r2, [pc, #296]	@ (801056c <svl_iplDaemon+0x84c>)
 8010442:	6013      	str	r3, [r2, #0]
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(
										GOS_TRUE,
										"IPL task modification request received. Idx: %u Type: %u.\r\n",
										taskModifyMsg.taskIdx,
 8010444:	4b49      	ldr	r3, [pc, #292]	@ (801056c <svl_iplDaemon+0x84c>)
 8010446:	881b      	ldrh	r3, [r3, #0]
								(void_t) gos_traceTraceFormatted(
 8010448:	461a      	mov	r2, r3
										taskModifyMsg.modificationType);
 801044a:	4b48      	ldr	r3, [pc, #288]	@ (801056c <svl_iplDaemon+0x84c>)
 801044c:	789b      	ldrb	r3, [r3, #2]
								(void_t) gos_traceTraceFormatted(
 801044e:	4948      	ldr	r1, [pc, #288]	@ (8010570 <svl_iplDaemon+0x850>)
 8010450:	2036      	movs	r0, #54	@ 0x36
 8010452:	f007 fd8d 	bl	8017f70 <gos_traceTraceFormatted>
#endif

								(void_t) gos_taskGetDataByIndex(taskModifyMsg.taskIdx, &taskData);
 8010456:	4b45      	ldr	r3, [pc, #276]	@ (801056c <svl_iplDaemon+0x84c>)
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	4935      	ldr	r1, [pc, #212]	@ (8010530 <svl_iplDaemon+0x810>)
 801045c:	4618      	mov	r0, r3
 801045e:	f004 fda3 	bl	8014fa8 <gos_taskGetDataByIndex>

								switch (taskModifyMsg.modificationType)
 8010462:	4b42      	ldr	r3, [pc, #264]	@ (801056c <svl_iplDaemon+0x84c>)
 8010464:	789b      	ldrb	r3, [r3, #2]
 8010466:	2b05      	cmp	r3, #5
 8010468:	f200 8093 	bhi.w	8010592 <svl_iplDaemon+0x872>
 801046c:	a201      	add	r2, pc, #4	@ (adr r2, 8010474 <svl_iplDaemon+0x754>)
 801046e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010472:	bf00      	nop
 8010474:	0801048d 	.word	0x0801048d
 8010478:	080104ab 	.word	0x080104ab
 801047c:	080104c9 	.word	0x080104c9
 8010480:	080104e7 	.word	0x080104e7
 8010484:	08010509 	.word	0x08010509
 8010488:	08010575 	.word	0x08010575
								{
									case IPL_TASK_MODIFY_SUSPEND:
									{
										taskModifyMsg.result = gos_taskSuspend(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 801048c:	4b28      	ldr	r3, [pc, #160]	@ (8010530 <svl_iplDaemon+0x810>)
 801048e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010490:	4618      	mov	r0, r3
 8010492:	f003 fc03 	bl	8013c9c <gos_taskSuspend>
 8010496:	4603      	mov	r3, r0
 8010498:	2b55      	cmp	r3, #85	@ 0x55
 801049a:	bf0c      	ite	eq
 801049c:	2301      	moveq	r3, #1
 801049e:	2300      	movne	r3, #0
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	461a      	mov	r2, r3
 80104a4:	4b31      	ldr	r3, [pc, #196]	@ (801056c <svl_iplDaemon+0x84c>)
 80104a6:	70da      	strb	r2, [r3, #3]
										break;
 80104a8:	e077      	b.n	801059a <svl_iplDaemon+0x87a>
									}
									case IPL_TASK_MODIFY_RESUME:
									{
										taskModifyMsg.result = gos_taskResume(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 80104aa:	4b21      	ldr	r3, [pc, #132]	@ (8010530 <svl_iplDaemon+0x810>)
 80104ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ae:	4618      	mov	r0, r3
 80104b0:	f003 fd16 	bl	8013ee0 <gos_taskResume>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b55      	cmp	r3, #85	@ 0x55
 80104b8:	bf0c      	ite	eq
 80104ba:	2301      	moveq	r3, #1
 80104bc:	2300      	movne	r3, #0
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	461a      	mov	r2, r3
 80104c2:	4b2a      	ldr	r3, [pc, #168]	@ (801056c <svl_iplDaemon+0x84c>)
 80104c4:	70da      	strb	r2, [r3, #3]
										break;
 80104c6:	e068      	b.n	801059a <svl_iplDaemon+0x87a>
									}
									case IPL_TASK_MODIFY_DELETE:
									{
										taskModifyMsg.result = gos_taskDelete(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 80104c8:	4b19      	ldr	r3, [pc, #100]	@ (8010530 <svl_iplDaemon+0x810>)
 80104ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104cc:	4618      	mov	r0, r3
 80104ce:	f003 ffb1 	bl	8014434 <gos_taskDelete>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b55      	cmp	r3, #85	@ 0x55
 80104d6:	bf0c      	ite	eq
 80104d8:	2301      	moveq	r3, #1
 80104da:	2300      	movne	r3, #0
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	461a      	mov	r2, r3
 80104e0:	4b22      	ldr	r3, [pc, #136]	@ (801056c <svl_iplDaemon+0x84c>)
 80104e2:	70da      	strb	r2, [r3, #3]
										break;
 80104e4:	e059      	b.n	801059a <svl_iplDaemon+0x87a>
									}
									case IPL_TASK_MODIFY_BLOCK:
									{
										taskModifyMsg.result = gos_taskBlock(taskData.taskId, GOS_TASK_MAX_BLOCK_TIME_MS) == GOS_SUCCESS ? 1 : 0;
 80104e6:	4b12      	ldr	r3, [pc, #72]	@ (8010530 <svl_iplDaemon+0x810>)
 80104e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ea:	f04f 31ff 	mov.w	r1, #4294967295
 80104ee:	4618      	mov	r0, r3
 80104f0:	f003 fda4 	bl	801403c <gos_taskBlock>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b55      	cmp	r3, #85	@ 0x55
 80104f8:	bf0c      	ite	eq
 80104fa:	2301      	moveq	r3, #1
 80104fc:	2300      	movne	r3, #0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	461a      	mov	r2, r3
 8010502:	4b1a      	ldr	r3, [pc, #104]	@ (801056c <svl_iplDaemon+0x84c>)
 8010504:	70da      	strb	r2, [r3, #3]
										break;
 8010506:	e048      	b.n	801059a <svl_iplDaemon+0x87a>
									}
									case IPL_TASK_MODIFY_UNBLOCK:
									{
										taskModifyMsg.result = gos_taskUnblock(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8010508:	4b09      	ldr	r3, [pc, #36]	@ (8010530 <svl_iplDaemon+0x810>)
 801050a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801050c:	4618      	mov	r0, r3
 801050e:	f003 fea7 	bl	8014260 <gos_taskUnblock>
 8010512:	4603      	mov	r3, r0
 8010514:	2b55      	cmp	r3, #85	@ 0x55
 8010516:	bf0c      	ite	eq
 8010518:	2301      	moveq	r3, #1
 801051a:	2300      	movne	r3, #0
 801051c:	b2db      	uxtb	r3, r3
 801051e:	461a      	mov	r2, r3
 8010520:	4b12      	ldr	r3, [pc, #72]	@ (801056c <svl_iplDaemon+0x84c>)
 8010522:	70da      	strb	r2, [r3, #3]
										break;
 8010524:	e039      	b.n	801059a <svl_iplDaemon+0x87a>
 8010526:	bf00      	nop
 8010528:	20003f24 	.word	0x20003f24
 801052c:	20004f90 	.word	0x20004f90
 8010530:	20004f24 	.word	0x20004f24
 8010534:	0801bc2c 	.word	0x0801bc2c
 8010538:	20004fb8 	.word	0x20004fb8
 801053c:	20004f2e 	.word	0x20004f2e
 8010540:	20004fbd 	.word	0x20004fbd
 8010544:	0801bc58 	.word	0x0801bc58
 8010548:	20004f94 	.word	0x20004f94
 801054c:	0801bc8c 	.word	0x0801bc8c
 8010550:	20004fac 	.word	0x20004fac
 8010554:	0801bcac 	.word	0x0801bcac
 8010558:	2000513c 	.word	0x2000513c
 801055c:	0801bcd4 	.word	0x0801bcd4
 8010560:	20005238 	.word	0x20005238
 8010564:	0801bcfc 	.word	0x0801bcfc
 8010568:	200054dc 	.word	0x200054dc
 801056c:	200054d8 	.word	0x200054d8
 8010570:	0801bd30 	.word	0x0801bd30
									}
									case IPL_TASK_MODIFY_WAKEUP:
									{
										taskModifyMsg.result = gos_taskWakeup(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8010574:	4b27      	ldr	r3, [pc, #156]	@ (8010614 <svl_iplDaemon+0x8f4>)
 8010576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010578:	4618      	mov	r0, r3
 801057a:	f003 fac9 	bl	8013b10 <gos_taskWakeup>
 801057e:	4603      	mov	r3, r0
 8010580:	2b55      	cmp	r3, #85	@ 0x55
 8010582:	bf0c      	ite	eq
 8010584:	2301      	moveq	r3, #1
 8010586:	2300      	movne	r3, #0
 8010588:	b2db      	uxtb	r3, r3
 801058a:	461a      	mov	r2, r3
 801058c:	4b22      	ldr	r3, [pc, #136]	@ (8010618 <svl_iplDaemon+0x8f8>)
 801058e:	70da      	strb	r2, [r3, #3]
										break;
 8010590:	e003      	b.n	801059a <svl_iplDaemon+0x87a>
									}
									default:
									{
										taskModifyMsg.result = 0;
 8010592:	4b21      	ldr	r3, [pc, #132]	@ (8010618 <svl_iplDaemon+0x8f8>)
 8010594:	2200      	movs	r2, #0
 8010596:	70da      	strb	r2, [r3, #3]
										break;
 8010598:	bf00      	nop
									}
								}

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
 801059a:	2204      	movs	r2, #4
 801059c:	491e      	ldr	r1, [pc, #120]	@ (8010618 <svl_iplDaemon+0x8f8>)
 801059e:	f640 20b1 	movw	r0, #2737	@ 0xab1
 80105a2:	f7ff fb85 	bl	800fcb0 <svl_iplSendMessage>
								break;
 80105a6:	e02f      	b.n	8010608 <svl_iplDaemon+0x8e8>
							}
							default:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL request received with ID: %u.\r\n", msgHeader.messageId);
 80105a8:	4b1c      	ldr	r3, [pc, #112]	@ (801061c <svl_iplDaemon+0x8fc>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	461a      	mov	r2, r3
 80105ae:	491c      	ldr	r1, [pc, #112]	@ (8010620 <svl_iplDaemon+0x900>)
 80105b0:	2036      	movs	r0, #54	@ 0x36
 80105b2:	f007 fcdd 	bl	8017f70 <gos_traceTraceFormatted>
#endif
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 80105b6:	2300      	movs	r3, #0
 80105b8:	77fb      	strb	r3, [r7, #31]
 80105ba:	e01c      	b.n	80105f6 <svl_iplDaemon+0x8d6>
								{
									if (userMsgLut[lutIndex].callback == NULL)
 80105bc:	7ffb      	ldrb	r3, [r7, #31]
 80105be:	4a19      	ldr	r2, [pc, #100]	@ (8010624 <svl_iplDaemon+0x904>)
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	4413      	add	r3, r2
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d01d      	beq.n	8010606 <svl_iplDaemon+0x8e6>
										// Last registered message found, break loop.
										break;
									}
									else
									{
										if (userMsgLut[lutIndex].msgId == msgHeader.messageId)
 80105ca:	7ffb      	ldrb	r3, [r7, #31]
 80105cc:	4a15      	ldr	r2, [pc, #84]	@ (8010624 <svl_iplDaemon+0x904>)
 80105ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80105d2:	4b12      	ldr	r3, [pc, #72]	@ (801061c <svl_iplDaemon+0x8fc>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d10a      	bne.n	80105f0 <svl_iplDaemon+0x8d0>
										{
											userMsgLut[lutIndex].callback(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc);
 80105da:	7ffb      	ldrb	r3, [r7, #31]
 80105dc:	4a11      	ldr	r2, [pc, #68]	@ (8010624 <svl_iplDaemon+0x904>)
 80105de:	00db      	lsls	r3, r3, #3
 80105e0:	4413      	add	r3, r2
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	4a0d      	ldr	r2, [pc, #52]	@ (801061c <svl_iplDaemon+0x8fc>)
 80105e6:	6851      	ldr	r1, [r2, #4]
 80105e8:	4a0c      	ldr	r2, [pc, #48]	@ (801061c <svl_iplDaemon+0x8fc>)
 80105ea:	68d2      	ldr	r2, [r2, #12]
 80105ec:	480e      	ldr	r0, [pc, #56]	@ (8010628 <svl_iplDaemon+0x908>)
 80105ee:	4798      	blx	r3
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 80105f0:	7ffb      	ldrb	r3, [r7, #31]
 80105f2:	3301      	adds	r3, #1
 80105f4:	77fb      	strb	r3, [r7, #31]
 80105f6:	7ffb      	ldrb	r3, [r7, #31]
 80105f8:	2b0f      	cmp	r3, #15
 80105fa:	d9df      	bls.n	80105bc <svl_iplDaemon+0x89c>
					else
					{
						(void_t) gos_taskSleep(10);
					}
				}
				break;
 80105fc:	e004      	b.n	8010608 <svl_iplDaemon+0x8e8>
						(void_t) gos_taskSleep(10);
 80105fe:	200a      	movs	r0, #10
 8010600:	f003 f9f4 	bl	80139ec <gos_taskSleep>
				break;
 8010604:	e000      	b.n	8010608 <svl_iplDaemon+0x8e8>
										break;
 8010606:	bf00      	nop
				break;
 8010608:	bf00      	nop
			}
		}
		(void_t) gos_taskSleep(10);
 801060a:	200a      	movs	r0, #10
 801060c:	f003 f9ee 	bl	80139ec <gos_taskSleep>
		switch (iplState)
 8010610:	f7ff bb8f 	b.w	800fd32 <svl_iplDaemon+0x12>
 8010614:	20004f24 	.word	0x20004f24
 8010618:	200054d8 	.word	0x200054d8
 801061c:	20004ffc 	.word	0x20004ffc
 8010620:	0801bd6c 	.word	0x0801bd6c
 8010624:	200054e8 	.word	0x200054e8
 8010628:	20003f24 	.word	0x20003f24

0801062c <svl_pdhInit>:

/*
 * Function: svl_pdhInit
 */
gos_result_t svl_pdhInit (void_t)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8010632:	23ae      	movs	r3, #174	@ 0xae
 8010634:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	initResult = gos_sysmonRegisterUserMessage(&softwareInfoReqMsg);
 8010636:	4829      	ldr	r0, [pc, #164]	@ (80106dc <svl_pdhInit+0xb0>)
 8010638:	f006 fba6 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 801063c:	4603      	mov	r3, r0
 801063e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&hardwareInfoReqMsg);
 8010640:	4827      	ldr	r0, [pc, #156]	@ (80106e0 <svl_pdhInit+0xb4>)
 8010642:	f006 fba1 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8010646:	4603      	mov	r3, r0
 8010648:	461a      	mov	r2, r3
 801064a:	79fb      	ldrb	r3, [r7, #7]
 801064c:	4013      	ands	r3, r2
 801064e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&wifiCfgReqMsg);
 8010650:	4824      	ldr	r0, [pc, #144]	@ (80106e4 <svl_pdhInit+0xb8>)
 8010652:	f006 fb99 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8010656:	4603      	mov	r3, r0
 8010658:	461a      	mov	r2, r3
 801065a:	79fb      	ldrb	r3, [r7, #7]
 801065c:	4013      	ands	r3, r2
 801065e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&bldCfgReqMsg);
 8010660:	4821      	ldr	r0, [pc, #132]	@ (80106e8 <svl_pdhInit+0xbc>)
 8010662:	f006 fb91 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8010666:	4603      	mov	r3, r0
 8010668:	461a      	mov	r2, r3
 801066a:	79fb      	ldrb	r3, [r7, #7]
 801066c:	4013      	ands	r3, r2
 801066e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&softwareInfoSetMsg);
 8010670:	481e      	ldr	r0, [pc, #120]	@ (80106ec <svl_pdhInit+0xc0>)
 8010672:	f006 fb89 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8010676:	4603      	mov	r3, r0
 8010678:	461a      	mov	r2, r3
 801067a:	79fb      	ldrb	r3, [r7, #7]
 801067c:	4013      	ands	r3, r2
 801067e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&hardwareInfoSetMsg);
 8010680:	481b      	ldr	r0, [pc, #108]	@ (80106f0 <svl_pdhInit+0xc4>)
 8010682:	f006 fb81 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8010686:	4603      	mov	r3, r0
 8010688:	461a      	mov	r2, r3
 801068a:	79fb      	ldrb	r3, [r7, #7]
 801068c:	4013      	ands	r3, r2
 801068e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&wifiCfgSetMsg);
 8010690:	4818      	ldr	r0, [pc, #96]	@ (80106f4 <svl_pdhInit+0xc8>)
 8010692:	f006 fb79 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8010696:	4603      	mov	r3, r0
 8010698:	461a      	mov	r2, r3
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	4013      	ands	r3, r2
 801069e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&bldCfgSetMsg);
 80106a0:	4815      	ldr	r0, [pc, #84]	@ (80106f8 <svl_pdhInit+0xcc>)
 80106a2:	f006 fb71 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 80106a6:	4603      	mov	r3, r0
 80106a8:	461a      	mov	r2, r3
 80106aa:	79fb      	ldrb	r3, [r7, #7]
 80106ac:	4013      	ands	r3, r2
 80106ae:	71fb      	strb	r3, [r7, #7]

	initResult &= gos_mutexInit(&pdhMutex);
 80106b0:	4812      	ldr	r0, [pc, #72]	@ (80106fc <svl_pdhInit+0xd0>)
 80106b2:	f005 fd49 	bl	8016148 <gos_mutexInit>
 80106b6:	4603      	mov	r3, r0
 80106b8:	461a      	mov	r2, r3
 80106ba:	79fb      	ldrb	r3, [r7, #7]
 80106bc:	4013      	ands	r3, r2
 80106be:	71fb      	strb	r3, [r7, #7]

	pdhInited = GOS_TRUE;
 80106c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010700 <svl_pdhInit+0xd4>)
 80106c2:	2236      	movs	r2, #54	@ 0x36
 80106c4:	701a      	strb	r2, [r3, #0]

	if (initResult != GOS_SUCCESS)
 80106c6:	79fb      	ldrb	r3, [r7, #7]
 80106c8:	2b55      	cmp	r3, #85	@ 0x55
 80106ca:	d001      	beq.n	80106d0 <svl_pdhInit+0xa4>
	{
		initResult = GOS_ERROR;
 80106cc:	23ae      	movs	r3, #174	@ 0xae
 80106ce:	71fb      	strb	r3, [r7, #7]
	else
	{
		// OK.
	}

	return initResult;
 80106d0:	79fb      	ldrb	r3, [r7, #7]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3708      	adds	r7, #8
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	20000654 	.word	0x20000654
 80106e0:	20000664 	.word	0x20000664
 80106e4:	20000674 	.word	0x20000674
 80106e8:	20000684 	.word	0x20000684
 80106ec:	20000694 	.word	0x20000694
 80106f0:	200006a4 	.word	0x200006a4
 80106f4:	200006b4 	.word	0x200006b4
 80106f8:	200006c4 	.word	0x200006c4
 80106fc:	2000557c 	.word	0x2000557c
 8010700:	20000652 	.word	0x20000652

08010704 <svl_pdhConfigure>:

/*
 * Function: svl_pdhConfigure
 */
gos_result_t svl_pdhConfigure (svl_pdhCfg_t* pCfg)
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 801070c:	23ae      	movs	r3, #174	@ 0xae
 801070e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d011      	beq.n	801073a <svl_pdhConfigure+0x36>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d00d      	beq.n	801073a <svl_pdhConfigure+0x36>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d009      	beq.n	801073a <svl_pdhConfigure+0x36>
	{
		pdhReadFunction  = pCfg->readFunction;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a07      	ldr	r2, [pc, #28]	@ (8010748 <svl_pdhConfigure+0x44>)
 801072c:	6013      	str	r3, [r2, #0]
		pdhWriteFunction = pCfg->writeFunction;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	4a06      	ldr	r2, [pc, #24]	@ (801074c <svl_pdhConfigure+0x48>)
 8010734:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 8010736:	2355      	movs	r3, #85	@ 0x55
 8010738:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 801073a:	7bfb      	ldrb	r3, [r7, #15]
}
 801073c:	4618      	mov	r0, r3
 801073e:	3714      	adds	r7, #20
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	20005574 	.word	0x20005574
 801074c:	20005578 	.word	0x20005578

08010750 <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 8010750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8010758:	23ae      	movs	r3, #174	@ 0xae
 801075a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d06e      	beq.n	8010840 <svl_pdhGetLibVersion+0xf0>
 8010762:	4b3b      	ldr	r3, [pc, #236]	@ (8010850 <svl_pdhGetLibVersion+0x100>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d06a      	beq.n	8010840 <svl_pdhGetLibVersion+0xf0>
	{
		(void_t) memset((void_t*)pLibVer, 0, sizeof(*pLibVer));
 801076a:	22a0      	movs	r2, #160	@ 0xa0
 801076c:	2100      	movs	r1, #0
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f008 fd84 	bl	801927c <memset>

		pLibVer->major             = PDH_LIBVER_VERSION_MAJOR;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2200      	movs	r2, #0
 8010778:	701a      	strb	r2, [r3, #0]
 801077a:	2200      	movs	r2, #0
 801077c:	705a      	strb	r2, [r3, #1]
		pLibVer->minor             = PDH_LIBVER_VERSION_MINOR;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	f042 0213 	orr.w	r2, r2, #19
 8010786:	709a      	strb	r2, [r3, #2]
 8010788:	2200      	movs	r2, #0
 801078a:	70da      	strb	r2, [r3, #3]
		pLibVer->build             = PDH_LIBVER_VERSION_BUILD;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	711a      	strb	r2, [r3, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years        = PDH_LIBVER_VERSION_DATE_YEAR;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2200      	movs	r2, #0
 801079a:	f062 0216 	orn	r2, r2, #22
 801079e:	739a      	strb	r2, [r3, #14]
 80107a0:	2200      	movs	r2, #0
 80107a2:	f042 0207 	orr.w	r2, r2, #7
 80107a6:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months       = PDH_LIBVER_VERSION_DATE_MONTH;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2201      	movs	r2, #1
 80107ac:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days         = PDH_LIBVER_VERSION_DATE_DAY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	f042 021e 	orr.w	r2, r2, #30
 80107b6:	72da      	strb	r2, [r3, #11]
 80107b8:	2200      	movs	r2, #0
 80107ba:	731a      	strb	r2, [r3, #12]
		pLibVer->date.hours        = 0u;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	729a      	strb	r2, [r3, #10]
		pLibVer->date.minutes      = 0u;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	725a      	strb	r2, [r3, #9]
		pLibVer->date.seconds      = 0u;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	721a      	strb	r2, [r3, #8]
		pLibVer->date.milliseconds = 0u;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	719a      	strb	r2, [r3, #6]
 80107d4:	2200      	movs	r2, #0
 80107d6:	71da      	strb	r2, [r3, #7]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	3310      	adds	r3, #16
 80107dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010854 <svl_pdhGetLibVersion+0x104>)
 80107de:	461c      	mov	r4, r3
 80107e0:	4613      	mov	r3, r2
 80107e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107e4:	6020      	str	r0, [r4, #0]
 80107e6:	6061      	str	r1, [r4, #4]
 80107e8:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	3370      	adds	r3, #112	@ 0x70
 80107ee:	4a1a      	ldr	r2, [pc, #104]	@ (8010858 <svl_pdhGetLibVersion+0x108>)
 80107f0:	461d      	mov	r5, r3
 80107f2:	4614      	mov	r4, r2
 80107f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107f6:	6028      	str	r0, [r5, #0]
 80107f8:	6069      	str	r1, [r5, #4]
 80107fa:	60aa      	str	r2, [r5, #8]
 80107fc:	60eb      	str	r3, [r5, #12]
 80107fe:	6820      	ldr	r0, [r4, #0]
 8010800:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	3340      	adds	r3, #64	@ 0x40
 8010806:	4a15      	ldr	r2, [pc, #84]	@ (801085c <svl_pdhGetLibVersion+0x10c>)
 8010808:	4614      	mov	r4, r2
 801080a:	469c      	mov	ip, r3
 801080c:	f104 0e20 	add.w	lr, r4, #32
 8010810:	4665      	mov	r5, ip
 8010812:	4626      	mov	r6, r4
 8010814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010816:	6028      	str	r0, [r5, #0]
 8010818:	6069      	str	r1, [r5, #4]
 801081a:	60aa      	str	r2, [r5, #8]
 801081c:	60eb      	str	r3, [r5, #12]
 801081e:	3410      	adds	r4, #16
 8010820:	f10c 0c10 	add.w	ip, ip, #16
 8010824:	4574      	cmp	r4, lr
 8010826:	d1f3      	bne.n	8010810 <svl_pdhGetLibVersion+0xc0>
 8010828:	4662      	mov	r2, ip
 801082a:	4623      	mov	r3, r4
 801082c:	cb03      	ldmia	r3!, {r0, r1}
 801082e:	6010      	str	r0, [r2, #0]
 8010830:	6051      	str	r1, [r2, #4]
 8010832:	8819      	ldrh	r1, [r3, #0]
 8010834:	789b      	ldrb	r3, [r3, #2]
 8010836:	8111      	strh	r1, [r2, #8]
 8010838:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 801083a:	2355      	movs	r3, #85	@ 0x55
 801083c:	73fb      	strb	r3, [r7, #15]
 801083e:	e001      	b.n	8010844 <svl_pdhGetLibVersion+0xf4>
	}
	else
	{
		getResult = GOS_ERROR;
 8010840:	23ae      	movs	r3, #174	@ 0xae
 8010842:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8010844:	7bfb      	ldrb	r3, [r7, #15]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3714      	adds	r7, #20
 801084a:	46bd      	mov	sp, r7
 801084c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801084e:	bf00      	nop
 8010850:	20005574 	.word	0x20005574
 8010854:	0801bd90 	.word	0x0801bd90
 8010858:	0801bd9c 	.word	0x0801bd9c
 801085c:	0801bdb0 	.word	0x0801bdb0

08010860 <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8010868:	23ae      	movs	r3, #174	@ 0xae
 801086a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d020      	beq.n	80108b4 <svl_pdhGetSwInfo+0x54>
 8010872:	4b14      	ldr	r3, [pc, #80]	@ (80108c4 <svl_pdhGetSwInfo+0x64>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d01c      	beq.n	80108b4 <svl_pdhGetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801087a:	4b13      	ldr	r3, [pc, #76]	@ (80108c8 <svl_pdhGetSwInfo+0x68>)
 801087c:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 801087e:	2b49      	cmp	r3, #73	@ 0x49
 8010880:	d00b      	beq.n	801089a <svl_pdhGetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010882:	4b11      	ldr	r3, [pc, #68]	@ (80108c8 <svl_pdhGetSwInfo+0x68>)
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	2b36      	cmp	r3, #54	@ 0x36
 8010888:	d114      	bne.n	80108b4 <svl_pdhGetSwInfo+0x54>
 801088a:	f241 3188 	movw	r1, #5000	@ 0x1388
 801088e:	480f      	ldr	r0, [pc, #60]	@ (80108cc <svl_pdhGetSwInfo+0x6c>)
 8010890:	f005 fc74 	bl	801617c <gos_mutexLock>
 8010894:	4603      	mov	r3, r0
 8010896:	2b55      	cmp	r3, #85	@ 0x55
 8010898:	d10c      	bne.n	80108b4 <svl_pdhGetSwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 801089a:	4b0a      	ldr	r3, [pc, #40]	@ (80108c4 <svl_pdhGetSwInfo+0x64>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80108a2:	6879      	ldr	r1, [r7, #4]
 80108a4:	2000      	movs	r0, #0
 80108a6:	4798      	blx	r3
 80108a8:	4603      	mov	r3, r0
 80108aa:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80108ac:	4807      	ldr	r0, [pc, #28]	@ (80108cc <svl_pdhGetSwInfo+0x6c>)
 80108ae:	f005 fd6b 	bl	8016388 <gos_mutexUnlock>
 80108b2:	e001      	b.n	80108b8 <svl_pdhGetSwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 80108b4:	23ae      	movs	r3, #174	@ 0xae
 80108b6:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 80108b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	20005574 	.word	0x20005574
 80108c8:	20000652 	.word	0x20000652
 80108cc:	2000557c 	.word	0x2000557c

080108d0 <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 80108d8:	23ae      	movs	r3, #174	@ 0xae
 80108da:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d020      	beq.n	8010924 <svl_pdhGetHwInfo+0x54>
 80108e2:	4b14      	ldr	r3, [pc, #80]	@ (8010934 <svl_pdhGetHwInfo+0x64>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d01c      	beq.n	8010924 <svl_pdhGetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80108ea:	4b13      	ldr	r3, [pc, #76]	@ (8010938 <svl_pdhGetHwInfo+0x68>)
 80108ec:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80108ee:	2b49      	cmp	r3, #73	@ 0x49
 80108f0:	d00b      	beq.n	801090a <svl_pdhGetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80108f2:	4b11      	ldr	r3, [pc, #68]	@ (8010938 <svl_pdhGetHwInfo+0x68>)
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	2b36      	cmp	r3, #54	@ 0x36
 80108f8:	d114      	bne.n	8010924 <svl_pdhGetHwInfo+0x54>
 80108fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80108fe:	480f      	ldr	r0, [pc, #60]	@ (801093c <svl_pdhGetHwInfo+0x6c>)
 8010900:	f005 fc3c 	bl	801617c <gos_mutexLock>
 8010904:	4603      	mov	r3, r0
 8010906:	2b55      	cmp	r3, #85	@ 0x55
 8010908:	d10c      	bne.n	8010924 <svl_pdhGetHwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 801090a:	4b0a      	ldr	r3, [pc, #40]	@ (8010934 <svl_pdhGetHwInfo+0x64>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	22fa      	movs	r2, #250	@ 0xfa
 8010910:	6879      	ldr	r1, [r7, #4]
 8010912:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8010916:	4798      	blx	r3
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 801091c:	4807      	ldr	r0, [pc, #28]	@ (801093c <svl_pdhGetHwInfo+0x6c>)
 801091e:	f005 fd33 	bl	8016388 <gos_mutexUnlock>
 8010922:	e001      	b.n	8010928 <svl_pdhGetHwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 8010924:	23ae      	movs	r3, #174	@ 0xae
 8010926:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8010928:	7bfb      	ldrb	r3, [r7, #15]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	20005574 	.word	0x20005574
 8010938:	20000652 	.word	0x20000652
 801093c:	2000557c 	.word	0x2000557c

08010940 <svl_pdhGetBldCfg>:

/*
 * Function: svl_pdhGetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhGetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8010948:	23ae      	movs	r3, #174	@ 0xae
 801094a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d020      	beq.n	8010994 <svl_pdhGetBldCfg+0x54>
 8010952:	4b14      	ldr	r3, [pc, #80]	@ (80109a4 <svl_pdhGetBldCfg+0x64>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d01c      	beq.n	8010994 <svl_pdhGetBldCfg+0x54>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801095a:	4b13      	ldr	r3, [pc, #76]	@ (80109a8 <svl_pdhGetBldCfg+0x68>)
 801095c:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 801095e:	2b49      	cmp	r3, #73	@ 0x49
 8010960:	d00b      	beq.n	801097a <svl_pdhGetBldCfg+0x3a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010962:	4b11      	ldr	r3, [pc, #68]	@ (80109a8 <svl_pdhGetBldCfg+0x68>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b36      	cmp	r3, #54	@ 0x36
 8010968:	d114      	bne.n	8010994 <svl_pdhGetBldCfg+0x54>
 801096a:	f241 3188 	movw	r1, #5000	@ 0x1388
 801096e:	480f      	ldr	r0, [pc, #60]	@ (80109ac <svl_pdhGetBldCfg+0x6c>)
 8010970:	f005 fc04 	bl	801617c <gos_mutexLock>
 8010974:	4603      	mov	r3, r0
 8010976:	2b55      	cmp	r3, #85	@ 0x55
 8010978:	d10c      	bne.n	8010994 <svl_pdhGetBldCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 801097a:	4b0a      	ldr	r3, [pc, #40]	@ (80109a4 <svl_pdhGetBldCfg+0x64>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2214      	movs	r2, #20
 8010980:	6879      	ldr	r1, [r7, #4]
 8010982:	f240 309a 	movw	r0, #922	@ 0x39a
 8010986:	4798      	blx	r3
 8010988:	4603      	mov	r3, r0
 801098a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 801098c:	4807      	ldr	r0, [pc, #28]	@ (80109ac <svl_pdhGetBldCfg+0x6c>)
 801098e:	f005 fcfb 	bl	8016388 <gos_mutexUnlock>
 8010992:	e001      	b.n	8010998 <svl_pdhGetBldCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 8010994:	23ae      	movs	r3, #174	@ 0xae
 8010996:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8010998:	7bfb      	ldrb	r3, [r7, #15]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	20005574 	.word	0x20005574
 80109a8:	20000652 	.word	0x20000652
 80109ac:	2000557c 	.word	0x2000557c

080109b0 <svl_pdhGetWifiCfg>:

/*
 * Function: svl_pdhGetWifiCfg
 */
gos_result_t svl_pdhGetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 80109b8:	23ae      	movs	r3, #174	@ 0xae
 80109ba:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d020      	beq.n	8010a04 <svl_pdhGetWifiCfg+0x54>
 80109c2:	4b14      	ldr	r3, [pc, #80]	@ (8010a14 <svl_pdhGetWifiCfg+0x64>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d01c      	beq.n	8010a04 <svl_pdhGetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80109ca:	4b13      	ldr	r3, [pc, #76]	@ (8010a18 <svl_pdhGetWifiCfg+0x68>)
 80109cc:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 80109ce:	2b49      	cmp	r3, #73	@ 0x49
 80109d0:	d00b      	beq.n	80109ea <svl_pdhGetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80109d2:	4b11      	ldr	r3, [pc, #68]	@ (8010a18 <svl_pdhGetWifiCfg+0x68>)
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	2b36      	cmp	r3, #54	@ 0x36
 80109d8:	d114      	bne.n	8010a04 <svl_pdhGetWifiCfg+0x54>
 80109da:	f241 3188 	movw	r1, #5000	@ 0x1388
 80109de:	480f      	ldr	r0, [pc, #60]	@ (8010a1c <svl_pdhGetWifiCfg+0x6c>)
 80109e0:	f005 fbcc 	bl	801617c <gos_mutexLock>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b55      	cmp	r3, #85	@ 0x55
 80109e8:	d10c      	bne.n	8010a04 <svl_pdhGetWifiCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 80109ea:	4b0a      	ldr	r3, [pc, #40]	@ (8010a14 <svl_pdhGetWifiCfg+0x64>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	226e      	movs	r2, #110	@ 0x6e
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 80109f6:	4798      	blx	r3
 80109f8:	4603      	mov	r3, r0
 80109fa:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80109fc:	4807      	ldr	r0, [pc, #28]	@ (8010a1c <svl_pdhGetWifiCfg+0x6c>)
 80109fe:	f005 fcc3 	bl	8016388 <gos_mutexUnlock>
 8010a02:	e001      	b.n	8010a08 <svl_pdhGetWifiCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 8010a04:	23ae      	movs	r3, #174	@ 0xae
 8010a06:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	20005574 	.word	0x20005574
 8010a18:	20000652 	.word	0x20000652
 8010a1c:	2000557c 	.word	0x2000557c

08010a20 <svl_pdhSetSwInfo>:

/*
 * Function: svl_pdhSetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhSetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 8010a28:	23ae      	movs	r3, #174	@ 0xae
 8010a2a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d020      	beq.n	8010a74 <svl_pdhSetSwInfo+0x54>
 8010a32:	4b14      	ldr	r3, [pc, #80]	@ (8010a84 <svl_pdhSetSwInfo+0x64>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d01c      	beq.n	8010a74 <svl_pdhSetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010a3a:	4b13      	ldr	r3, [pc, #76]	@ (8010a88 <svl_pdhSetSwInfo+0x68>)
 8010a3c:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8010a3e:	2b49      	cmp	r3, #73	@ 0x49
 8010a40:	d00b      	beq.n	8010a5a <svl_pdhSetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010a42:	4b11      	ldr	r3, [pc, #68]	@ (8010a88 <svl_pdhSetSwInfo+0x68>)
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	2b36      	cmp	r3, #54	@ 0x36
 8010a48:	d114      	bne.n	8010a74 <svl_pdhSetSwInfo+0x54>
 8010a4a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010a4e:	480f      	ldr	r0, [pc, #60]	@ (8010a8c <svl_pdhSetSwInfo+0x6c>)
 8010a50:	f005 fb94 	bl	801617c <gos_mutexLock>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b55      	cmp	r3, #85	@ 0x55
 8010a58:	d10c      	bne.n	8010a74 <svl_pdhSetSwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8010a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a84 <svl_pdhSetSwInfo+0x64>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8010a62:	6879      	ldr	r1, [r7, #4]
 8010a64:	2000      	movs	r0, #0
 8010a66:	4798      	blx	r3
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010a6c:	4807      	ldr	r0, [pc, #28]	@ (8010a8c <svl_pdhSetSwInfo+0x6c>)
 8010a6e:	f005 fc8b 	bl	8016388 <gos_mutexUnlock>
 8010a72:	e001      	b.n	8010a78 <svl_pdhSetSwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 8010a74:	23ae      	movs	r3, #174	@ 0xae
 8010a76:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 8010a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	20005578 	.word	0x20005578
 8010a88:	20000652 	.word	0x20000652
 8010a8c:	2000557c 	.word	0x2000557c

08010a90 <svl_pdhSetHwInfo>:

/*
 * Function: svl_pdhSetHwInfo
 */
gos_result_t svl_pdhSetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 8010a98:	23ae      	movs	r3, #174	@ 0xae
 8010a9a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d020      	beq.n	8010ae4 <svl_pdhSetHwInfo+0x54>
 8010aa2:	4b14      	ldr	r3, [pc, #80]	@ (8010af4 <svl_pdhSetHwInfo+0x64>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d01c      	beq.n	8010ae4 <svl_pdhSetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010aaa:	4b13      	ldr	r3, [pc, #76]	@ (8010af8 <svl_pdhSetHwInfo+0x68>)
 8010aac:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8010aae:	2b49      	cmp	r3, #73	@ 0x49
 8010ab0:	d00b      	beq.n	8010aca <svl_pdhSetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010ab2:	4b11      	ldr	r3, [pc, #68]	@ (8010af8 <svl_pdhSetHwInfo+0x68>)
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b36      	cmp	r3, #54	@ 0x36
 8010ab8:	d114      	bne.n	8010ae4 <svl_pdhSetHwInfo+0x54>
 8010aba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010abe:	480f      	ldr	r0, [pc, #60]	@ (8010afc <svl_pdhSetHwInfo+0x6c>)
 8010ac0:	f005 fb5c 	bl	801617c <gos_mutexLock>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b55      	cmp	r3, #85	@ 0x55
 8010ac8:	d10c      	bne.n	8010ae4 <svl_pdhSetHwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8010aca:	4b0a      	ldr	r3, [pc, #40]	@ (8010af4 <svl_pdhSetHwInfo+0x64>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	22fa      	movs	r2, #250	@ 0xfa
 8010ad0:	6879      	ldr	r1, [r7, #4]
 8010ad2:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8010ad6:	4798      	blx	r3
 8010ad8:	4603      	mov	r3, r0
 8010ada:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010adc:	4807      	ldr	r0, [pc, #28]	@ (8010afc <svl_pdhSetHwInfo+0x6c>)
 8010ade:	f005 fc53 	bl	8016388 <gos_mutexUnlock>
 8010ae2:	e001      	b.n	8010ae8 <svl_pdhSetHwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 8010ae4:	23ae      	movs	r3, #174	@ 0xae
 8010ae6:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 8010ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	20005578 	.word	0x20005578
 8010af8:	20000652 	.word	0x20000652
 8010afc:	2000557c 	.word	0x2000557c

08010b00 <svl_pdhSetBldCfg>:

/*
 * Function: svl_pdhSetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhSetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 8010b08:	23ae      	movs	r3, #174	@ 0xae
 8010b0a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d020      	beq.n	8010b54 <svl_pdhSetBldCfg+0x54>
 8010b12:	4b14      	ldr	r3, [pc, #80]	@ (8010b64 <svl_pdhSetBldCfg+0x64>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d01c      	beq.n	8010b54 <svl_pdhSetBldCfg+0x54>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010b1a:	4b13      	ldr	r3, [pc, #76]	@ (8010b68 <svl_pdhSetBldCfg+0x68>)
 8010b1c:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8010b1e:	2b49      	cmp	r3, #73	@ 0x49
 8010b20:	d00b      	beq.n	8010b3a <svl_pdhSetBldCfg+0x3a>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010b22:	4b11      	ldr	r3, [pc, #68]	@ (8010b68 <svl_pdhSetBldCfg+0x68>)
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	2b36      	cmp	r3, #54	@ 0x36
 8010b28:	d114      	bne.n	8010b54 <svl_pdhSetBldCfg+0x54>
 8010b2a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010b2e:	480f      	ldr	r0, [pc, #60]	@ (8010b6c <svl_pdhSetBldCfg+0x6c>)
 8010b30:	f005 fb24 	bl	801617c <gos_mutexLock>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b55      	cmp	r3, #85	@ 0x55
 8010b38:	d10c      	bne.n	8010b54 <svl_pdhSetBldCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8010b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8010b64 <svl_pdhSetBldCfg+0x64>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2214      	movs	r2, #20
 8010b40:	6879      	ldr	r1, [r7, #4]
 8010b42:	f240 309a 	movw	r0, #922	@ 0x39a
 8010b46:	4798      	blx	r3
 8010b48:	4603      	mov	r3, r0
 8010b4a:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010b4c:	4807      	ldr	r0, [pc, #28]	@ (8010b6c <svl_pdhSetBldCfg+0x6c>)
 8010b4e:	f005 fc1b 	bl	8016388 <gos_mutexUnlock>
 8010b52:	e001      	b.n	8010b58 <svl_pdhSetBldCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 8010b54:	23ae      	movs	r3, #174	@ 0xae
 8010b56:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 8010b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20005578 	.word	0x20005578
 8010b68:	20000652 	.word	0x20000652
 8010b6c:	2000557c 	.word	0x2000557c

08010b70 <svl_pdhSetWifiCfg>:

/*
 * Function: svl_pdhSetWifiCfg
 */
gos_result_t svl_pdhSetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 8010b78:	23ae      	movs	r3, #174	@ 0xae
 8010b7a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d020      	beq.n	8010bc4 <svl_pdhSetWifiCfg+0x54>
 8010b82:	4b14      	ldr	r3, [pc, #80]	@ (8010bd4 <svl_pdhSetWifiCfg+0x64>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d01c      	beq.n	8010bc4 <svl_pdhSetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010b8a:	4b13      	ldr	r3, [pc, #76]	@ (8010bd8 <svl_pdhSetWifiCfg+0x68>)
 8010b8c:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 8010b8e:	2b49      	cmp	r3, #73	@ 0x49
 8010b90:	d00b      	beq.n	8010baa <svl_pdhSetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010b92:	4b11      	ldr	r3, [pc, #68]	@ (8010bd8 <svl_pdhSetWifiCfg+0x68>)
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	2b36      	cmp	r3, #54	@ 0x36
 8010b98:	d114      	bne.n	8010bc4 <svl_pdhSetWifiCfg+0x54>
 8010b9a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010b9e:	480f      	ldr	r0, [pc, #60]	@ (8010bdc <svl_pdhSetWifiCfg+0x6c>)
 8010ba0:	f005 faec 	bl	801617c <gos_mutexLock>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b55      	cmp	r3, #85	@ 0x55
 8010ba8:	d10c      	bne.n	8010bc4 <svl_pdhSetWifiCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 8010baa:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd4 <svl_pdhSetWifiCfg+0x64>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	226e      	movs	r2, #110	@ 0x6e
 8010bb0:	6879      	ldr	r1, [r7, #4]
 8010bb2:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 8010bb6:	4798      	blx	r3
 8010bb8:	4603      	mov	r3, r0
 8010bba:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010bbc:	4807      	ldr	r0, [pc, #28]	@ (8010bdc <svl_pdhSetWifiCfg+0x6c>)
 8010bbe:	f005 fbe3 	bl	8016388 <gos_mutexUnlock>
 8010bc2:	e001      	b.n	8010bc8 <svl_pdhSetWifiCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 8010bc4:	23ae      	movs	r3, #174	@ 0xae
 8010bc6:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20005578 	.word	0x20005578
 8010bd8:	20000652 	.word	0x20000652
 8010bdc:	2000557c 	.word	0x2000557c

08010be0 <svl_pdhSoftwareInfoReqMsgReceived>:
 * @details Sends out the software info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhSoftwareInfoReqMsgReceived (void_t)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 8010be6:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhSwInfo_t swInfoMsg = {0};
 8010be8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8010bec:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	f008 fb3f 	bl	801927c <memset>
 8010bfe:	463b      	mov	r3, r7
 8010c00:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
	gos_result_t getResult = GOS_ERROR;
 8010c04:	23ae      	movs	r3, #174	@ 0xae
 8010c06:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010c0a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d022      	beq.n	8010c58 <svl_pdhSoftwareInfoReqMsgReceived+0x78>
 8010c12:	4b1b      	ldr	r3, [pc, #108]	@ (8010c80 <svl_pdhSoftwareInfoReqMsgReceived+0xa0>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d01e      	beq.n	8010c58 <svl_pdhSoftwareInfoReqMsgReceived+0x78>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8010c84 <svl_pdhSoftwareInfoReqMsgReceived+0xa4>)
 8010c1c:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010c1e:	2b49      	cmp	r3, #73	@ 0x49
 8010c20:	d00b      	beq.n	8010c3a <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010c22:	4b18      	ldr	r3, [pc, #96]	@ (8010c84 <svl_pdhSoftwareInfoReqMsgReceived+0xa4>)
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	2b36      	cmp	r3, #54	@ 0x36
 8010c28:	d116      	bne.n	8010c58 <svl_pdhSoftwareInfoReqMsgReceived+0x78>
 8010c2a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010c2e:	4816      	ldr	r0, [pc, #88]	@ (8010c88 <svl_pdhSoftwareInfoReqMsgReceived+0xa8>)
 8010c30:	f005 faa4 	bl	801617c <gos_mutexLock>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b55      	cmp	r3, #85	@ 0x55
 8010c38:	d10e      	bne.n	8010c58 <svl_pdhSoftwareInfoReqMsgReceived+0x78>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8010c3a:	4b11      	ldr	r3, [pc, #68]	@ (8010c80 <svl_pdhSoftwareInfoReqMsgReceived+0xa0>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8010c42:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 8010c46:	2000      	movs	r0, #0
 8010c48:	4798      	blx	r3
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010c50:	480d      	ldr	r0, [pc, #52]	@ (8010c88 <svl_pdhSoftwareInfoReqMsgReceived+0xa8>)
 8010c52:	f005 fb99 	bl	8016388 <gos_mutexUnlock>
 8010c56:	e002      	b.n	8010c5e <svl_pdhSoftwareInfoReqMsgReceived+0x7e>
		getResult = GOS_ERROR;
 8010c58:	23ae      	movs	r3, #174	@ 0xae
 8010c5a:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8010c5e:	463a      	mov	r2, r7
 8010c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010c64:	9300      	str	r3, [sp, #0]
 8010c66:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8010c6a:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8010c6e:	2000      	movs	r0, #0
 8010c70:	f004 fcde 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB000,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 8010c74:	bf00      	nop
 8010c76:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	20005574 	.word	0x20005574
 8010c84:	20000652 	.word	0x20000652
 8010c88:	2000557c 	.word	0x2000557c

08010c8c <svl_pdhHardwareInfoReqMsgReceived>:
 * @details Sends out the hardware info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhHardwareInfoReqMsgReceived (void_t)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b0c2      	sub	sp, #264	@ 0x108
 8010c90:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhHwInfo_t hwInfoMsg = {0};
 8010c92:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010c96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	23fa      	movs	r3, #250	@ 0xfa
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	f008 faeb 	bl	801927c <memset>
 8010ca6:	463b      	mov	r3, r7
 8010ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	gos_result_t getResult = GOS_ERROR;
 8010cac:	23ae      	movs	r3, #174	@ 0xae
 8010cae:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d022      	beq.n	8010d00 <svl_pdhHardwareInfoReqMsgReceived+0x74>
 8010cba:	4b1a      	ldr	r3, [pc, #104]	@ (8010d24 <svl_pdhHardwareInfoReqMsgReceived+0x98>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d01e      	beq.n	8010d00 <svl_pdhHardwareInfoReqMsgReceived+0x74>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010cc2:	4b19      	ldr	r3, [pc, #100]	@ (8010d28 <svl_pdhHardwareInfoReqMsgReceived+0x9c>)
 8010cc4:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010cc6:	2b49      	cmp	r3, #73	@ 0x49
 8010cc8:	d00b      	beq.n	8010ce2 <svl_pdhHardwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010cca:	4b17      	ldr	r3, [pc, #92]	@ (8010d28 <svl_pdhHardwareInfoReqMsgReceived+0x9c>)
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	2b36      	cmp	r3, #54	@ 0x36
 8010cd0:	d116      	bne.n	8010d00 <svl_pdhHardwareInfoReqMsgReceived+0x74>
 8010cd2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010cd6:	4815      	ldr	r0, [pc, #84]	@ (8010d2c <svl_pdhHardwareInfoReqMsgReceived+0xa0>)
 8010cd8:	f005 fa50 	bl	801617c <gos_mutexLock>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b55      	cmp	r3, #85	@ 0x55
 8010ce0:	d10e      	bne.n	8010d00 <svl_pdhHardwareInfoReqMsgReceived+0x74>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8010ce2:	4b10      	ldr	r3, [pc, #64]	@ (8010d24 <svl_pdhHardwareInfoReqMsgReceived+0x98>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	22fa      	movs	r2, #250	@ 0xfa
 8010ce8:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 8010cec:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8010cf0:	4798      	blx	r3
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010cf8:	480c      	ldr	r0, [pc, #48]	@ (8010d2c <svl_pdhHardwareInfoReqMsgReceived+0xa0>)
 8010cfa:	f005 fb45 	bl	8016388 <gos_mutexUnlock>
 8010cfe:	e002      	b.n	8010d06 <svl_pdhHardwareInfoReqMsgReceived+0x7a>
		getResult = GOS_ERROR;
 8010d00:	23ae      	movs	r3, #174	@ 0xae
 8010d02:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8010d06:	463a      	mov	r2, r7
 8010d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	23fa      	movs	r3, #250	@ 0xfa
 8010d10:	f24b 0101 	movw	r1, #45057	@ 0xb001
 8010d14:	2000      	movs	r0, #0
 8010d16:	f004 fc8b 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB001,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 8010d1a:	bf00      	nop
 8010d1c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	20005574 	.word	0x20005574
 8010d28:	20000652 	.word	0x20000652
 8010d2c:	2000557c 	.word	0x2000557c

08010d30 <svl_pdhWifiCfgReqMsgReceived>:

GOS_STATIC void_t svl_pdhWifiCfgReqMsgReceived (void_t)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b09e      	sub	sp, #120	@ 0x78
 8010d34:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhWifiCfg_t wifiCfgMsg = {0};
 8010d36:	463b      	mov	r3, r7
 8010d38:	226e      	movs	r2, #110	@ 0x6e
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f008 fa9d 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 8010d42:	463b      	mov	r3, r7
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7ff fe33 	bl	80109b0 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 8010d4a:	463a      	mov	r2, r7
 8010d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	236e      	movs	r3, #110	@ 0x6e
 8010d54:	f24b 0102 	movw	r1, #45058	@ 0xb002
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f004 fc69 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB002,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 8010d5e:	bf00      	nop
 8010d60:	3770      	adds	r7, #112	@ 0x70
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
	...

08010d68 <svl_pdhBldCfgReqMsgReceived>:

GOS_STATIC void_t svl_pdhBldCfgReqMsgReceived (void_t)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08a      	sub	sp, #40	@ 0x28
 8010d6c:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhBldCfg_t bldCfgMsg = {0};
 8010d6e:	1d3b      	adds	r3, r7, #4
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]
 8010d74:	605a      	str	r2, [r3, #4]
 8010d76:	609a      	str	r2, [r3, #8]
 8010d78:	60da      	str	r2, [r3, #12]
 8010d7a:	611a      	str	r2, [r3, #16]
 8010d7c:	1d3b      	adds	r3, r7, #4
 8010d7e:	61fb      	str	r3, [r7, #28]
	gos_result_t getResult = GOS_ERROR;
 8010d80:	23ae      	movs	r3, #174	@ 0xae
 8010d82:	76fb      	strb	r3, [r7, #27]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d020      	beq.n	8010dcc <svl_pdhBldCfgReqMsgReceived+0x64>
 8010d8a:	4b18      	ldr	r3, [pc, #96]	@ (8010dec <svl_pdhBldCfgReqMsgReceived+0x84>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d01c      	beq.n	8010dcc <svl_pdhBldCfgReqMsgReceived+0x64>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010d92:	4b17      	ldr	r3, [pc, #92]	@ (8010df0 <svl_pdhBldCfgReqMsgReceived+0x88>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8010d96:	2b49      	cmp	r3, #73	@ 0x49
 8010d98:	d00b      	beq.n	8010db2 <svl_pdhBldCfgReqMsgReceived+0x4a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010d9a:	4b15      	ldr	r3, [pc, #84]	@ (8010df0 <svl_pdhBldCfgReqMsgReceived+0x88>)
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	2b36      	cmp	r3, #54	@ 0x36
 8010da0:	d114      	bne.n	8010dcc <svl_pdhBldCfgReqMsgReceived+0x64>
 8010da2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010da6:	4813      	ldr	r0, [pc, #76]	@ (8010df4 <svl_pdhBldCfgReqMsgReceived+0x8c>)
 8010da8:	f005 f9e8 	bl	801617c <gos_mutexLock>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b55      	cmp	r3, #85	@ 0x55
 8010db0:	d10c      	bne.n	8010dcc <svl_pdhBldCfgReqMsgReceived+0x64>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8010db2:	4b0e      	ldr	r3, [pc, #56]	@ (8010dec <svl_pdhBldCfgReqMsgReceived+0x84>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2214      	movs	r2, #20
 8010db8:	69f9      	ldr	r1, [r7, #28]
 8010dba:	f240 309a 	movw	r0, #922	@ 0x39a
 8010dbe:	4798      	blx	r3
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	76fb      	strb	r3, [r7, #27]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010dc4:	480b      	ldr	r0, [pc, #44]	@ (8010df4 <svl_pdhBldCfgReqMsgReceived+0x8c>)
 8010dc6:	f005 fadf 	bl	8016388 <gos_mutexUnlock>
 8010dca:	e001      	b.n	8010dd0 <svl_pdhBldCfgReqMsgReceived+0x68>
		getResult = GOS_ERROR;
 8010dcc:	23ae      	movs	r3, #174	@ 0xae
 8010dce:	76fb      	strb	r3, [r7, #27]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 8010dd0:	1d3a      	adds	r2, r7, #4
 8010dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	2314      	movs	r3, #20
 8010dda:	f24b 0102 	movw	r1, #45058	@ 0xb002
 8010dde:	2000      	movs	r0, #0
 8010de0:	f004 fc26 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB002,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 8010de4:	bf00      	nop
 8010de6:	3720      	adds	r7, #32
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20005574 	.word	0x20005574
 8010df0:	20000652 	.word	0x20000652
 8010df4:	2000557c 	.word	0x2000557c

08010df8 <svl_pdhSoftwareInfoSetMsgReceived>:

GOS_STATIC void_t svl_pdhSoftwareInfoSetMsgReceived (void_t)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	f5ad 7d2e 	sub.w	sp, sp, #696	@ 0x2b8
 8010dfe:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhSwInfo_t swInfoMsg = {0};
 8010e00:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8010e04:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	2100      	movs	r1, #0
 8010e12:	f008 fa33 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&swInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhSwInfo_t));
 8010e16:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8010e1a:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8010e1e:	4a3c      	ldr	r2, [pc, #240]	@ (8010f10 <svl_pdhSoftwareInfoSetMsgReceived+0x118>)
 8010e20:	4618      	mov	r0, r3
 8010e22:	4611      	mov	r1, r2
 8010e24:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8010e28:	461a      	mov	r2, r3
 8010e2a:	f008 fabe 	bl	80193aa <memcpy>
 8010e2e:	463b      	mov	r3, r7
 8010e30:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
	gos_result_t setResult = GOS_ERROR;
 8010e34:	23ae      	movs	r3, #174	@ 0xae
 8010e36:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8010e3a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d022      	beq.n	8010e88 <svl_pdhSoftwareInfoSetMsgReceived+0x90>
 8010e42:	4b34      	ldr	r3, [pc, #208]	@ (8010f14 <svl_pdhSoftwareInfoSetMsgReceived+0x11c>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d01e      	beq.n	8010e88 <svl_pdhSoftwareInfoSetMsgReceived+0x90>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010e4a:	4b33      	ldr	r3, [pc, #204]	@ (8010f18 <svl_pdhSoftwareInfoSetMsgReceived+0x120>)
 8010e4c:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8010e4e:	2b49      	cmp	r3, #73	@ 0x49
 8010e50:	d00b      	beq.n	8010e6a <svl_pdhSoftwareInfoSetMsgReceived+0x72>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010e52:	4b31      	ldr	r3, [pc, #196]	@ (8010f18 <svl_pdhSoftwareInfoSetMsgReceived+0x120>)
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	2b36      	cmp	r3, #54	@ 0x36
 8010e58:	d116      	bne.n	8010e88 <svl_pdhSoftwareInfoSetMsgReceived+0x90>
 8010e5a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010e5e:	482f      	ldr	r0, [pc, #188]	@ (8010f1c <svl_pdhSoftwareInfoSetMsgReceived+0x124>)
 8010e60:	f005 f98c 	bl	801617c <gos_mutexLock>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b55      	cmp	r3, #85	@ 0x55
 8010e68:	d10e      	bne.n	8010e88 <svl_pdhSoftwareInfoSetMsgReceived+0x90>
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8010e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8010f14 <svl_pdhSoftwareInfoSetMsgReceived+0x11c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8010e72:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 8010e76:	2000      	movs	r0, #0
 8010e78:	4798      	blx	r3
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010e80:	4826      	ldr	r0, [pc, #152]	@ (8010f1c <svl_pdhSoftwareInfoSetMsgReceived+0x124>)
 8010e82:	f005 fa81 	bl	8016388 <gos_mutexUnlock>
 8010e86:	e002      	b.n	8010e8e <svl_pdhSoftwareInfoSetMsgReceived+0x96>
		setResult = GOS_ERROR;
 8010e88:	23ae      	movs	r3, #174	@ 0xae
 8010e8a:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
 8010e8e:	463b      	mov	r3, r7
 8010e90:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	gos_result_t getResult = GOS_ERROR;
 8010e94:	23ae      	movs	r3, #174	@ 0xae
 8010e96:	f887 32ab 	strb.w	r3, [r7, #683]	@ 0x2ab
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010e9a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d022      	beq.n	8010ee8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>
 8010ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8010f20 <svl_pdhSoftwareInfoSetMsgReceived+0x128>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d01e      	beq.n	8010ee8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8010f18 <svl_pdhSoftwareInfoSetMsgReceived+0x120>)
 8010eac:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010eae:	2b49      	cmp	r3, #73	@ 0x49
 8010eb0:	d00b      	beq.n	8010eca <svl_pdhSoftwareInfoSetMsgReceived+0xd2>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010eb2:	4b19      	ldr	r3, [pc, #100]	@ (8010f18 <svl_pdhSoftwareInfoSetMsgReceived+0x120>)
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	2b36      	cmp	r3, #54	@ 0x36
 8010eb8:	d116      	bne.n	8010ee8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>
 8010eba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010ebe:	4817      	ldr	r0, [pc, #92]	@ (8010f1c <svl_pdhSoftwareInfoSetMsgReceived+0x124>)
 8010ec0:	f005 f95c 	bl	801617c <gos_mutexLock>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b55      	cmp	r3, #85	@ 0x55
 8010ec8:	d10e      	bne.n	8010ee8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8010eca:	4b15      	ldr	r3, [pc, #84]	@ (8010f20 <svl_pdhSoftwareInfoSetMsgReceived+0x128>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8010ed2:	f8d7 12ac 	ldr.w	r1, [r7, #684]	@ 0x2ac
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	4798      	blx	r3
 8010eda:	4603      	mov	r3, r0
 8010edc:	f887 32ab 	strb.w	r3, [r7, #683]	@ 0x2ab
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010ee0:	480e      	ldr	r0, [pc, #56]	@ (8010f1c <svl_pdhSoftwareInfoSetMsgReceived+0x124>)
 8010ee2:	f005 fa51 	bl	8016388 <gos_mutexUnlock>
 8010ee6:	e002      	b.n	8010eee <svl_pdhSoftwareInfoSetMsgReceived+0xf6>
		getResult = GOS_ERROR;
 8010ee8:	23ae      	movs	r3, #174	@ 0xae
 8010eea:	f887 32ab 	strb.w	r3, [r7, #683]	@ 0x2ab

	(void_t) svl_pdhSetSwInfo(&swInfoMsg);
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8010eee:	463a      	mov	r2, r7
 8010ef0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ef4:	9300      	str	r3, [sp, #0]
 8010ef6:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8010efa:	f24b 0111 	movw	r1, #45073	@ 0xb011
 8010efe:	2000      	movs	r0, #0
 8010f00:	f004 fb96 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB011,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 8010f04:	bf00      	nop
 8010f06:	f507 772c 	add.w	r7, r7, #688	@ 0x2b0
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20005580 	.word	0x20005580
 8010f14:	20005578 	.word	0x20005578
 8010f18:	20000652 	.word	0x20000652
 8010f1c:	2000557c 	.word	0x2000557c
 8010f20:	20005574 	.word	0x20005574

08010f24 <svl_pdhHardwareInfoSetMsgReceived>:

GOS_STATIC void_t svl_pdhHardwareInfoSetMsgReceived (void_t)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b0c2      	sub	sp, #264	@ 0x108
 8010f28:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhHwInfo_t hwInfoMsg = {0};
 8010f2a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010f2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010f32:	4618      	mov	r0, r3
 8010f34:	23fa      	movs	r3, #250	@ 0xfa
 8010f36:	461a      	mov	r2, r3
 8010f38:	2100      	movs	r1, #0
 8010f3a:	f008 f99f 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&hwInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhHwInfo_t));
 8010f3e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010f42:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010f46:	4a25      	ldr	r2, [pc, #148]	@ (8010fdc <svl_pdhHardwareInfoSetMsgReceived+0xb8>)
 8010f48:	4618      	mov	r0, r3
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	23fa      	movs	r3, #250	@ 0xfa
 8010f4e:	461a      	mov	r2, r3
 8010f50:	f008 fa2b 	bl	80193aa <memcpy>

	(void_t) svl_pdhSetHwInfo(&hwInfoMsg);
 8010f54:	463b      	mov	r3, r7
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7ff fd9a 	bl	8010a90 <svl_pdhSetHwInfo>
 8010f5c:	463b      	mov	r3, r7
 8010f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	gos_result_t getResult = GOS_ERROR;
 8010f62:	23ae      	movs	r3, #174	@ 0xae
 8010f64:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d022      	beq.n	8010fb6 <svl_pdhHardwareInfoSetMsgReceived+0x92>
 8010f70:	4b1b      	ldr	r3, [pc, #108]	@ (8010fe0 <svl_pdhHardwareInfoSetMsgReceived+0xbc>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d01e      	beq.n	8010fb6 <svl_pdhHardwareInfoSetMsgReceived+0x92>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010f78:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe4 <svl_pdhHardwareInfoSetMsgReceived+0xc0>)
 8010f7a:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8010f7c:	2b49      	cmp	r3, #73	@ 0x49
 8010f7e:	d00b      	beq.n	8010f98 <svl_pdhHardwareInfoSetMsgReceived+0x74>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8010f80:	4b18      	ldr	r3, [pc, #96]	@ (8010fe4 <svl_pdhHardwareInfoSetMsgReceived+0xc0>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	2b36      	cmp	r3, #54	@ 0x36
 8010f86:	d116      	bne.n	8010fb6 <svl_pdhHardwareInfoSetMsgReceived+0x92>
 8010f88:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010f8c:	4816      	ldr	r0, [pc, #88]	@ (8010fe8 <svl_pdhHardwareInfoSetMsgReceived+0xc4>)
 8010f8e:	f005 f8f5 	bl	801617c <gos_mutexLock>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b55      	cmp	r3, #85	@ 0x55
 8010f96:	d10e      	bne.n	8010fb6 <svl_pdhHardwareInfoSetMsgReceived+0x92>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8010f98:	4b11      	ldr	r3, [pc, #68]	@ (8010fe0 <svl_pdhHardwareInfoSetMsgReceived+0xbc>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	22fa      	movs	r2, #250	@ 0xfa
 8010f9e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 8010fa2:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8010fa6:	4798      	blx	r3
 8010fa8:	4603      	mov	r3, r0
 8010faa:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
		(void_t) gos_mutexUnlock(&pdhMutex);
 8010fae:	480e      	ldr	r0, [pc, #56]	@ (8010fe8 <svl_pdhHardwareInfoSetMsgReceived+0xc4>)
 8010fb0:	f005 f9ea 	bl	8016388 <gos_mutexUnlock>
 8010fb4:	e002      	b.n	8010fbc <svl_pdhHardwareInfoSetMsgReceived+0x98>
		getResult = GOS_ERROR;
 8010fb6:	23ae      	movs	r3, #174	@ 0xae
 8010fb8:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8010fbc:	463a      	mov	r2, r7
 8010fbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	23fa      	movs	r3, #250	@ 0xfa
 8010fc6:	f24b 0112 	movw	r1, #45074	@ 0xb012
 8010fca:	2000      	movs	r0, #0
 8010fcc:	f004 fb30 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB012,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 8010fd0:	bf00      	nop
 8010fd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	bf00      	nop
 8010fdc:	20005580 	.word	0x20005580
 8010fe0:	20005574 	.word	0x20005574
 8010fe4:	20000652 	.word	0x20000652
 8010fe8:	2000557c 	.word	0x2000557c

08010fec <svl_pdhWifiCfgSetMsgReceived>:

GOS_STATIC void_t svl_pdhWifiCfgSetMsgReceived (void_t)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b09e      	sub	sp, #120	@ 0x78
 8010ff0:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhWifiCfg_t wifiCfgMsg = {0};
 8010ff2:	463b      	mov	r3, r7
 8010ff4:	226e      	movs	r2, #110	@ 0x6e
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f008 f93f 	bl	801927c <memset>

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&wifiCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhWifiCfg_t));
 8010ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8011038 <svl_pdhWifiCfgSetMsgReceived+0x4c>)
 8011000:	463b      	mov	r3, r7
 8011002:	4611      	mov	r1, r2
 8011004:	226e      	movs	r2, #110	@ 0x6e
 8011006:	4618      	mov	r0, r3
 8011008:	f008 f9cf 	bl	80193aa <memcpy>

	(void_t) svl_pdhSetWifiCfg(&wifiCfgMsg);
 801100c:	463b      	mov	r3, r7
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff fdae 	bl	8010b70 <svl_pdhSetWifiCfg>
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 8011014:	463b      	mov	r3, r7
 8011016:	4618      	mov	r0, r3
 8011018:	f7ff fcca 	bl	80109b0 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 801101c:	463a      	mov	r2, r7
 801101e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	236e      	movs	r3, #110	@ 0x6e
 8011026:	f24b 0113 	movw	r1, #45075	@ 0xb013
 801102a:	2000      	movs	r0, #0
 801102c:	f004 fb00 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB013,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 8011030:	bf00      	nop
 8011032:	3770      	adds	r7, #112	@ 0x70
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	20005580 	.word	0x20005580

0801103c <svl_pdhBldCfgSetMsgReceived>:

GOS_STATIC void_t svl_pdhBldCfgSetMsgReceived (void_t)
{
 801103c:	b5b0      	push	{r4, r5, r7, lr}
 801103e:	b08c      	sub	sp, #48	@ 0x30
 8011040:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhBldCfg_t bldCfgMsg = {0};
 8011042:	1d3b      	adds	r3, r7, #4
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]
 8011048:	605a      	str	r2, [r3, #4]
 801104a:	609a      	str	r2, [r3, #8]
 801104c:	60da      	str	r2, [r3, #12]
 801104e:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&bldCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhBldCfg_t));
 8011050:	4b35      	ldr	r3, [pc, #212]	@ (8011128 <svl_pdhBldCfgSetMsgReceived+0xec>)
 8011052:	1d3c      	adds	r4, r7, #4
 8011054:	461d      	mov	r5, r3
 8011056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801105a:	682b      	ldr	r3, [r5, #0]
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	1d3b      	adds	r3, r7, #4
 8011060:	61fb      	str	r3, [r7, #28]
	gos_result_t setResult = GOS_ERROR;
 8011062:	23ae      	movs	r3, #174	@ 0xae
 8011064:	76fb      	strb	r3, [r7, #27]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8011066:	69fb      	ldr	r3, [r7, #28]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d020      	beq.n	80110ae <svl_pdhBldCfgSetMsgReceived+0x72>
 801106c:	4b2f      	ldr	r3, [pc, #188]	@ (801112c <svl_pdhBldCfgSetMsgReceived+0xf0>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d01c      	beq.n	80110ae <svl_pdhBldCfgSetMsgReceived+0x72>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8011074:	4b2e      	ldr	r3, [pc, #184]	@ (8011130 <svl_pdhBldCfgSetMsgReceived+0xf4>)
 8011076:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8011078:	2b49      	cmp	r3, #73	@ 0x49
 801107a:	d00b      	beq.n	8011094 <svl_pdhBldCfgSetMsgReceived+0x58>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801107c:	4b2c      	ldr	r3, [pc, #176]	@ (8011130 <svl_pdhBldCfgSetMsgReceived+0xf4>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	2b36      	cmp	r3, #54	@ 0x36
 8011082:	d114      	bne.n	80110ae <svl_pdhBldCfgSetMsgReceived+0x72>
 8011084:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011088:	482a      	ldr	r0, [pc, #168]	@ (8011134 <svl_pdhBldCfgSetMsgReceived+0xf8>)
 801108a:	f005 f877 	bl	801617c <gos_mutexLock>
 801108e:	4603      	mov	r3, r0
 8011090:	2b55      	cmp	r3, #85	@ 0x55
 8011092:	d10c      	bne.n	80110ae <svl_pdhBldCfgSetMsgReceived+0x72>
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8011094:	4b25      	ldr	r3, [pc, #148]	@ (801112c <svl_pdhBldCfgSetMsgReceived+0xf0>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2214      	movs	r2, #20
 801109a:	69f9      	ldr	r1, [r7, #28]
 801109c:	f240 309a 	movw	r0, #922	@ 0x39a
 80110a0:	4798      	blx	r3
 80110a2:	4603      	mov	r3, r0
 80110a4:	76fb      	strb	r3, [r7, #27]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80110a6:	4823      	ldr	r0, [pc, #140]	@ (8011134 <svl_pdhBldCfgSetMsgReceived+0xf8>)
 80110a8:	f005 f96e 	bl	8016388 <gos_mutexUnlock>
 80110ac:	e001      	b.n	80110b2 <svl_pdhBldCfgSetMsgReceived+0x76>
		setResult = GOS_ERROR;
 80110ae:	23ae      	movs	r3, #174	@ 0xae
 80110b0:	76fb      	strb	r3, [r7, #27]
 80110b2:	1d3b      	adds	r3, r7, #4
 80110b4:	627b      	str	r3, [r7, #36]	@ 0x24
	gos_result_t getResult = GOS_ERROR;
 80110b6:	23ae      	movs	r3, #174	@ 0xae
 80110b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 80110bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d021      	beq.n	8011106 <svl_pdhBldCfgSetMsgReceived+0xca>
 80110c2:	4b1d      	ldr	r3, [pc, #116]	@ (8011138 <svl_pdhBldCfgSetMsgReceived+0xfc>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d01d      	beq.n	8011106 <svl_pdhBldCfgSetMsgReceived+0xca>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80110ca:	4b19      	ldr	r3, [pc, #100]	@ (8011130 <svl_pdhBldCfgSetMsgReceived+0xf4>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 80110ce:	2b49      	cmp	r3, #73	@ 0x49
 80110d0:	d00b      	beq.n	80110ea <svl_pdhBldCfgSetMsgReceived+0xae>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80110d2:	4b17      	ldr	r3, [pc, #92]	@ (8011130 <svl_pdhBldCfgSetMsgReceived+0xf4>)
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	2b36      	cmp	r3, #54	@ 0x36
 80110d8:	d115      	bne.n	8011106 <svl_pdhBldCfgSetMsgReceived+0xca>
 80110da:	f241 3188 	movw	r1, #5000	@ 0x1388
 80110de:	4815      	ldr	r0, [pc, #84]	@ (8011134 <svl_pdhBldCfgSetMsgReceived+0xf8>)
 80110e0:	f005 f84c 	bl	801617c <gos_mutexLock>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b55      	cmp	r3, #85	@ 0x55
 80110e8:	d10d      	bne.n	8011106 <svl_pdhBldCfgSetMsgReceived+0xca>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 80110ea:	4b13      	ldr	r3, [pc, #76]	@ (8011138 <svl_pdhBldCfgSetMsgReceived+0xfc>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2214      	movs	r2, #20
 80110f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80110f2:	f240 309a 	movw	r0, #922	@ 0x39a
 80110f6:	4798      	blx	r3
 80110f8:	4603      	mov	r3, r0
 80110fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		(void_t) gos_mutexUnlock(&pdhMutex);
 80110fe:	480d      	ldr	r0, [pc, #52]	@ (8011134 <svl_pdhBldCfgSetMsgReceived+0xf8>)
 8011100:	f005 f942 	bl	8016388 <gos_mutexUnlock>
 8011104:	e002      	b.n	801110c <svl_pdhBldCfgSetMsgReceived+0xd0>
		getResult = GOS_ERROR;
 8011106:	23ae      	movs	r3, #174	@ 0xae
 8011108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	(void_t) svl_pdhSetBldCfg(&bldCfgMsg);
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 801110c:	1d3a      	adds	r2, r7, #4
 801110e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011112:	9300      	str	r3, [sp, #0]
 8011114:	2314      	movs	r3, #20
 8011116:	f24b 0114 	movw	r1, #45076	@ 0xb014
 801111a:	2000      	movs	r0, #0
 801111c:	f004 fa88 	bl	8015630 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB014,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 8011120:	bf00      	nop
 8011122:	3728      	adds	r7, #40	@ 0x28
 8011124:	46bd      	mov	sp, r7
 8011126:	bdb0      	pop	{r4, r5, r7, pc}
 8011128:	20005580 	.word	0x20005580
 801112c:	20005578 	.word	0x20005578
 8011130:	20000652 	.word	0x20000652
 8011134:	2000557c 	.word	0x2000557c
 8011138:	20005574 	.word	0x20005574

0801113c <svl_sdhInit>:

/*
 * Function: svl_sdhInit
 */
gos_result_t svl_sdhInit (void_t)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8011142:	23ae      	movs	r3, #174	@ 0xae
 8011144:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	initResult = gos_sysmonRegisterUserMessage(&sysmonBinaryNumReqMsg);
 8011146:	4838      	ldr	r0, [pc, #224]	@ (8011228 <svl_sdhInit+0xec>)
 8011148:	f005 fe1e 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 801114c:	4603      	mov	r3, r0
 801114e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonBinaryInfoReqMsg);
 8011150:	4836      	ldr	r0, [pc, #216]	@ (801122c <svl_sdhInit+0xf0>)
 8011152:	f005 fe19 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8011156:	4603      	mov	r3, r0
 8011158:	461a      	mov	r2, r3
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	4013      	ands	r3, r2
 801115e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonDownloadReqMsg);
 8011160:	4833      	ldr	r0, [pc, #204]	@ (8011230 <svl_sdhInit+0xf4>)
 8011162:	f005 fe11 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8011166:	4603      	mov	r3, r0
 8011168:	461a      	mov	r2, r3
 801116a:	79fb      	ldrb	r3, [r7, #7]
 801116c:	4013      	ands	r3, r2
 801116e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonBinaryChunkReqMsg);
 8011170:	4830      	ldr	r0, [pc, #192]	@ (8011234 <svl_sdhInit+0xf8>)
 8011172:	f005 fe09 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8011176:	4603      	mov	r3, r0
 8011178:	461a      	mov	r2, r3
 801117a:	79fb      	ldrb	r3, [r7, #7]
 801117c:	4013      	ands	r3, r2
 801117e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonSoftwareInstallReqMsg);
 8011180:	482d      	ldr	r0, [pc, #180]	@ (8011238 <svl_sdhInit+0xfc>)
 8011182:	f005 fe01 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8011186:	4603      	mov	r3, r0
 8011188:	461a      	mov	r2, r3
 801118a:	79fb      	ldrb	r3, [r7, #7]
 801118c:	4013      	ands	r3, r2
 801118e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonBinaryEraseReqMsg);
 8011190:	482a      	ldr	r0, [pc, #168]	@ (801123c <svl_sdhInit+0x100>)
 8011192:	f005 fdf9 	bl	8016d88 <gos_sysmonRegisterUserMessage>
 8011196:	4603      	mov	r3, r0
 8011198:	461a      	mov	r2, r3
 801119a:	79fb      	ldrb	r3, [r7, #7]
 801119c:	4013      	ands	r3, r2
 801119e:	71fb      	strb	r3, [r7, #7]

	initResult &= svl_iplRegisterUserMsg(&iplBinaryNumReqMsg);
 80111a0:	4827      	ldr	r0, [pc, #156]	@ (8011240 <svl_sdhInit+0x104>)
 80111a2:	f7fe fd2d 	bl	800fc00 <svl_iplRegisterUserMsg>
 80111a6:	4603      	mov	r3, r0
 80111a8:	461a      	mov	r2, r3
 80111aa:	79fb      	ldrb	r3, [r7, #7]
 80111ac:	4013      	ands	r3, r2
 80111ae:	71fb      	strb	r3, [r7, #7]
	initResult &= svl_iplRegisterUserMsg(&iplBinaryInfoReqMsg);
 80111b0:	4824      	ldr	r0, [pc, #144]	@ (8011244 <svl_sdhInit+0x108>)
 80111b2:	f7fe fd25 	bl	800fc00 <svl_iplRegisterUserMsg>
 80111b6:	4603      	mov	r3, r0
 80111b8:	461a      	mov	r2, r3
 80111ba:	79fb      	ldrb	r3, [r7, #7]
 80111bc:	4013      	ands	r3, r2
 80111be:	71fb      	strb	r3, [r7, #7]
	initResult &= svl_iplRegisterUserMsg(&iplDownloadReqMsg);
 80111c0:	4821      	ldr	r0, [pc, #132]	@ (8011248 <svl_sdhInit+0x10c>)
 80111c2:	f7fe fd1d 	bl	800fc00 <svl_iplRegisterUserMsg>
 80111c6:	4603      	mov	r3, r0
 80111c8:	461a      	mov	r2, r3
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	4013      	ands	r3, r2
 80111ce:	71fb      	strb	r3, [r7, #7]
	initResult &= svl_iplRegisterUserMsg(&iplBinaryChunkReqMsg);
 80111d0:	481e      	ldr	r0, [pc, #120]	@ (801124c <svl_sdhInit+0x110>)
 80111d2:	f7fe fd15 	bl	800fc00 <svl_iplRegisterUserMsg>
 80111d6:	4603      	mov	r3, r0
 80111d8:	461a      	mov	r2, r3
 80111da:	79fb      	ldrb	r3, [r7, #7]
 80111dc:	4013      	ands	r3, r2
 80111de:	71fb      	strb	r3, [r7, #7]
	initResult &= svl_iplRegisterUserMsg(&iplSoftwareInstallReqMsg);
 80111e0:	481b      	ldr	r0, [pc, #108]	@ (8011250 <svl_sdhInit+0x114>)
 80111e2:	f7fe fd0d 	bl	800fc00 <svl_iplRegisterUserMsg>
 80111e6:	4603      	mov	r3, r0
 80111e8:	461a      	mov	r2, r3
 80111ea:	79fb      	ldrb	r3, [r7, #7]
 80111ec:	4013      	ands	r3, r2
 80111ee:	71fb      	strb	r3, [r7, #7]
	initResult &= svl_iplRegisterUserMsg(&iplEraseReqMsg);
 80111f0:	4818      	ldr	r0, [pc, #96]	@ (8011254 <svl_sdhInit+0x118>)
 80111f2:	f7fe fd05 	bl	800fc00 <svl_iplRegisterUserMsg>
 80111f6:	4603      	mov	r3, r0
 80111f8:	461a      	mov	r2, r3
 80111fa:	79fb      	ldrb	r3, [r7, #7]
 80111fc:	4013      	ands	r3, r2
 80111fe:	71fb      	strb	r3, [r7, #7]

	initResult &= gos_taskRegister(&svlSdhTaskDesc, NULL);
 8011200:	2100      	movs	r1, #0
 8011202:	4815      	ldr	r0, [pc, #84]	@ (8011258 <svl_sdhInit+0x11c>)
 8011204:	f002 fa60 	bl	80136c8 <gos_taskRegister>
 8011208:	4603      	mov	r3, r0
 801120a:	461a      	mov	r2, r3
 801120c:	79fb      	ldrb	r3, [r7, #7]
 801120e:	4013      	ands	r3, r2
 8011210:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 8011212:	79fb      	ldrb	r3, [r7, #7]
 8011214:	2b55      	cmp	r3, #85	@ 0x55
 8011216:	d001      	beq.n	801121c <svl_sdhInit+0xe0>
	{
		initResult = GOS_ERROR;
 8011218:	23ae      	movs	r3, #174	@ 0xae
 801121a:	71fb      	strb	r3, [r7, #7]
	else
	{
		// OK.
	}

	return initResult;
 801121c:	79fb      	ldrb	r3, [r7, #7]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	20000728 	.word	0x20000728
 801122c:	20000738 	.word	0x20000738
 8011230:	20000748 	.word	0x20000748
 8011234:	20000758 	.word	0x20000758
 8011238:	20000768 	.word	0x20000768
 801123c:	20000778 	.word	0x20000778
 8011240:	20000788 	.word	0x20000788
 8011244:	20000790 	.word	0x20000790
 8011248:	20000798 	.word	0x20000798
 801124c:	200007a0 	.word	0x200007a0
 8011250:	200007a8 	.word	0x200007a8
 8011254:	200007b0 	.word	0x200007b0
 8011258:	200007b8 	.word	0x200007b8

0801125c <svl_sdhConfigure>:

/*
 * Function: svl_sdhConfigure
 */
gos_result_t svl_sdhConfigure (svl_sdhCfg_t* pCfg)
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 8011264:	23ae      	movs	r3, #174	@ 0xae
 8011266:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d011      	beq.n	8011292 <svl_sdhConfigure+0x36>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00d      	beq.n	8011292 <svl_sdhConfigure+0x36>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d009      	beq.n	8011292 <svl_sdhConfigure+0x36>
	{
		sdhReadFunction  = pCfg->readFunction;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4a07      	ldr	r2, [pc, #28]	@ (80112a0 <svl_sdhConfigure+0x44>)
 8011284:	6013      	str	r3, [r2, #0]
		sdhWriteFunction = pCfg->writeFunction;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	4a06      	ldr	r2, [pc, #24]	@ (80112a4 <svl_sdhConfigure+0x48>)
 801128c:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 801128e:	2355      	movs	r3, #85	@ 0x55
 8011290:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 8011292:	7bfb      	ldrb	r3, [r7, #15]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	20005980 	.word	0x20005980
 80112a4:	20005984 	.word	0x20005984

080112a8 <svl_sdhGetBinaryData>:

/*
 * Function: svl_sdhGetBinaryData
 */
gos_result_t svl_sdhGetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	4603      	mov	r3, r0
 80112b0:	6039      	str	r1, [r7, #0]
 80112b2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Local variables.
	 */
	gos_result_t dataGetResult = GOS_SUCCESS;
 80112b4:	2355      	movs	r3, #85	@ 0x55
 80112b6:	73fb      	strb	r3, [r7, #15]
	u16_t        numOfBinaries = 0u;
 80112b8:	2300      	movs	r3, #0
 80112ba:	81bb      	strh	r3, [r7, #12]

	/*
	 * Function code.
	 */
	if (pDesc != NULL && sdhReadFunction != NULL)
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d01e      	beq.n	8011300 <svl_sdhGetBinaryData+0x58>
 80112c2:	4b13      	ldr	r3, [pc, #76]	@ (8011310 <svl_sdhGetBinaryData+0x68>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d01a      	beq.n	8011300 <svl_sdhGetBinaryData+0x58>
	{
		(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80112ca:	4b11      	ldr	r3, [pc, #68]	@ (8011310 <svl_sdhGetBinaryData+0x68>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f107 010c 	add.w	r1, r7, #12
 80112d2:	2202      	movs	r2, #2
 80112d4:	2000      	movs	r0, #0
 80112d6:	4798      	blx	r3

		if (index < numOfBinaries)
 80112d8:	89bb      	ldrh	r3, [r7, #12]
 80112da:	88fa      	ldrh	r2, [r7, #6]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d20c      	bcs.n	80112fa <svl_sdhGetBinaryData+0x52>
		{
			(void_t) sdhReadFunction(
 80112e0:	4b0b      	ldr	r3, [pc, #44]	@ (8011310 <svl_sdhGetBinaryData+0x68>)
 80112e2:	681c      	ldr	r4, [r3, #0]
					SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 80112e4:	88fa      	ldrh	r2, [r7, #6]
 80112e6:	4613      	mov	r3, r2
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	4413      	add	r3, r2
 80112ec:	011b      	lsls	r3, r3, #4
 80112ee:	3302      	adds	r3, #2
			(void_t) sdhReadFunction(
 80112f0:	2230      	movs	r2, #48	@ 0x30
 80112f2:	6839      	ldr	r1, [r7, #0]
 80112f4:	4618      	mov	r0, r3
 80112f6:	47a0      	blx	r4
		if (index < numOfBinaries)
 80112f8:	e004      	b.n	8011304 <svl_sdhGetBinaryData+0x5c>
					);
		}
		else
		{
			// Invalid request.
			dataGetResult = GOS_ERROR;
 80112fa:	23ae      	movs	r3, #174	@ 0xae
 80112fc:	73fb      	strb	r3, [r7, #15]
		if (index < numOfBinaries)
 80112fe:	e001      	b.n	8011304 <svl_sdhGetBinaryData+0x5c>
		}
	}
	else
	{
		// NULL pointer error.
		dataGetResult = GOS_ERROR;
 8011300:	23ae      	movs	r3, #174	@ 0xae
 8011302:	73fb      	strb	r3, [r7, #15]
	}

	return dataGetResult;
 8011304:	7bfb      	ldrb	r3, [r7, #15]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3714      	adds	r7, #20
 801130a:	46bd      	mov	sp, r7
 801130c:	bd90      	pop	{r4, r7, pc}
 801130e:	bf00      	nop
 8011310:	20005980 	.word	0x20005980

08011314 <svl_sdhSetBinaryData>:

/*
 * Function: svl_sdhSetBinaryData
 */
gos_result_t svl_sdhSetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 8011314:	b590      	push	{r4, r7, lr}
 8011316:	b085      	sub	sp, #20
 8011318:	af00      	add	r7, sp, #0
 801131a:	4603      	mov	r3, r0
 801131c:	6039      	str	r1, [r7, #0]
 801131e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Local variables.
	 */
	gos_result_t dataSetResult = GOS_SUCCESS;
 8011320:	2355      	movs	r3, #85	@ 0x55
 8011322:	73fb      	strb	r3, [r7, #15]
	u16_t        numOfBinaries = 0u;
 8011324:	2300      	movs	r3, #0
 8011326:	81bb      	strh	r3, [r7, #12]

	/*
	 * Function code.
	 */
	if (pDesc != NULL && sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d022      	beq.n	8011374 <svl_sdhSetBinaryData+0x60>
 801132e:	4b15      	ldr	r3, [pc, #84]	@ (8011384 <svl_sdhSetBinaryData+0x70>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d01e      	beq.n	8011374 <svl_sdhSetBinaryData+0x60>
 8011336:	4b14      	ldr	r3, [pc, #80]	@ (8011388 <svl_sdhSetBinaryData+0x74>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d01a      	beq.n	8011374 <svl_sdhSetBinaryData+0x60>
	{
		(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 801133e:	4b11      	ldr	r3, [pc, #68]	@ (8011384 <svl_sdhSetBinaryData+0x70>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f107 010c 	add.w	r1, r7, #12
 8011346:	2202      	movs	r2, #2
 8011348:	2000      	movs	r0, #0
 801134a:	4798      	blx	r3

		if (index < numOfBinaries)
 801134c:	89bb      	ldrh	r3, [r7, #12]
 801134e:	88fa      	ldrh	r2, [r7, #6]
 8011350:	429a      	cmp	r2, r3
 8011352:	d20c      	bcs.n	801136e <svl_sdhSetBinaryData+0x5a>
		{
			(void_t) sdhWriteFunction(
 8011354:	4b0c      	ldr	r3, [pc, #48]	@ (8011388 <svl_sdhSetBinaryData+0x74>)
 8011356:	681c      	ldr	r4, [r3, #0]
					SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 8011358:	88fa      	ldrh	r2, [r7, #6]
 801135a:	4613      	mov	r3, r2
 801135c:	005b      	lsls	r3, r3, #1
 801135e:	4413      	add	r3, r2
 8011360:	011b      	lsls	r3, r3, #4
 8011362:	3302      	adds	r3, #2
			(void_t) sdhWriteFunction(
 8011364:	2230      	movs	r2, #48	@ 0x30
 8011366:	6839      	ldr	r1, [r7, #0]
 8011368:	4618      	mov	r0, r3
 801136a:	47a0      	blx	r4
		if (index < numOfBinaries)
 801136c:	e004      	b.n	8011378 <svl_sdhSetBinaryData+0x64>
					);
		}
		else
		{
			// Invalid request.
			dataSetResult = GOS_ERROR;
 801136e:	23ae      	movs	r3, #174	@ 0xae
 8011370:	73fb      	strb	r3, [r7, #15]
		if (index < numOfBinaries)
 8011372:	e001      	b.n	8011378 <svl_sdhSetBinaryData+0x64>
		}
	}
	else
	{
		// NULL pointer error.
		dataSetResult = GOS_ERROR;
 8011374:	23ae      	movs	r3, #174	@ 0xae
 8011376:	73fb      	strb	r3, [r7, #15]
	}

	return dataSetResult;
 8011378:	7bfb      	ldrb	r3, [r7, #15]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3714      	adds	r7, #20
 801137e:	46bd      	mov	sp, r7
 8011380:	bd90      	pop	{r4, r7, pc}
 8011382:	bf00      	nop
 8011384:	20005980 	.word	0x20005980
 8011388:	20005984 	.word	0x20005984

0801138c <svl_sdhReadBytesFromMemory>:

/*
 * Function: svl_sdhReadBytesFromMemory
 */
gos_result_t svl_sdhReadBytesFromMemory (u32_t address, u8_t* pBuffer, u32_t size)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b086      	sub	sp, #24
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t readResult = GOS_SUCCESS;
 8011398:	2355      	movs	r3, #85	@ 0x55
 801139a:	75fb      	strb	r3, [r7, #23]

	/*
	 * Function code.
	 */
	if (pBuffer != NULL && sdhReadFunction != NULL)
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00a      	beq.n	80113b8 <svl_sdhReadBytesFromMemory+0x2c>
 80113a2:	4b09      	ldr	r3, [pc, #36]	@ (80113c8 <svl_sdhReadBytesFromMemory+0x3c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d006      	beq.n	80113b8 <svl_sdhReadBytesFromMemory+0x2c>
	{
		(void_t) sdhReadFunction(address, pBuffer, size);
 80113aa:	4b07      	ldr	r3, [pc, #28]	@ (80113c8 <svl_sdhReadBytesFromMemory+0x3c>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	68b9      	ldr	r1, [r7, #8]
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	4798      	blx	r3
 80113b6:	e001      	b.n	80113bc <svl_sdhReadBytesFromMemory+0x30>
	}
	else
	{
		// NULL pointer error.
		readResult = GOS_ERROR;
 80113b8:	23ae      	movs	r3, #174	@ 0xae
 80113ba:	75fb      	strb	r3, [r7, #23]
	}

	return readResult;
 80113bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3718      	adds	r7, #24
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	20005980 	.word	0x20005980

080113cc <svl_sdhDaemon>:

GOS_STATIC void_t svl_sdhDaemon (void_t)
{
 80113cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ce:	b0d7      	sub	sp, #348	@ 0x15c
 80113d0:	af00      	add	r7, sp, #0
	gos_message_t gosMsg = {0};
 80113d2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80113d6:	2254      	movs	r2, #84	@ 0x54
 80113d8:	2100      	movs	r1, #0
 80113da:	4618      	mov	r0, r3
 80113dc:	f007 ff4e 	bl	801927c <memset>
	gos_message_t gosRespMsg = {0};
 80113e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80113e4:	2254      	movs	r2, #84	@ 0x54
 80113e6:	2100      	movs	r1, #0
 80113e8:	4618      	mov	r0, r3
 80113ea:	f007 ff47 	bl	801927c <memset>
	svl_sdhControlMsg_t controlMsg = {0};
 80113ee:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]
 80113f6:	605a      	str	r2, [r3, #4]
 80113f8:	609a      	str	r2, [r3, #8]
	gos_messageId_t msgIds [] = { SVL_SDH_STATE_CONT_MSG_ID, 0 };
 80113fa:	f24a 33ed 	movw	r3, #41965	@ 0xa3ed
 80113fe:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011402:	2300      	movs	r3, #0
 8011404:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	svl_sdhBinaryDesc_t newBinaryDescriptor = {0};
 8011408:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801140c:	2230      	movs	r2, #48	@ 0x30
 801140e:	2100      	movs	r1, #0
 8011410:	4618      	mov	r0, r3
 8011412:	f007 ff33 	bl	801927c <memset>
	u16_t numOfChunks = 0u;
 8011416:	2300      	movs	r3, #0
 8011418:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156

	for (;;)
	{
		if (gos_messageRx(msgIds, &gosMsg, 5000u) == GOS_SUCCESS)
 801141c:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8011420:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011428:	4618      	mov	r0, r3
 801142a:	f004 fc2f 	bl	8015c8c <gos_messageRx>
 801142e:	4603      	mov	r3, r0
 8011430:	2b55      	cmp	r3, #85	@ 0x55
 8011432:	f040 83bc 	bne.w	8011bae <svl_sdhDaemon+0x7e2>
		{
			(void_t) memcpy((void_t*)&controlMsg, (void_t*)gosMsg.messageBytes, sizeof(controlMsg));
 8011436:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 801143a:	1cd9      	adds	r1, r3, #3
 801143c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8011440:	220c      	movs	r2, #12
 8011442:	4618      	mov	r0, r3
 8011444:	f007 ffb1 	bl	80193aa <memcpy>

			switch (controlMsg.requiredState)
 8011448:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 801144c:	3b01      	subs	r3, #1
 801144e:	2b05      	cmp	r3, #5
 8011450:	f200 83b4 	bhi.w	8011bbc <svl_sdhDaemon+0x7f0>
 8011454:	a201      	add	r2, pc, #4	@ (adr r2, 801145c <svl_sdhDaemon+0x90>)
 8011456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801145a:	bf00      	nop
 801145c:	080117e5 	.word	0x080117e5
 8011460:	08011475 	.word	0x08011475
 8011464:	080114df 	.word	0x080114df
 8011468:	08011653 	.word	0x08011653
 801146c:	0801157b 	.word	0x0801157b
 8011470:	080118e1 	.word	0x080118e1
			{
				case SDH_STATE_BINARY_NUM_REQ:
				{
					if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8011474:	4bca      	ldr	r3, [pc, #808]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	f000 83a1 	beq.w	8011bc0 <svl_sdhDaemon+0x7f4>
 801147e:	4bc9      	ldr	r3, [pc, #804]	@ (80117a4 <svl_sdhDaemon+0x3d8>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	f000 839c 	beq.w	8011bc0 <svl_sdhDaemon+0x7f4>
					{
#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "SDH binary number request received.\r\n");
#endif
						u16_t numOfBinaries = 0u;
 8011488:	2300      	movs	r3, #0
 801148a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 801148e:	4bc4      	ldr	r3, [pc, #784]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f107 015a 	add.w	r1, r7, #90	@ 0x5a
 8011496:	2202      	movs	r2, #2
 8011498:	2000      	movs	r0, #0
 801149a:	4798      	blx	r3

						if (numOfBinaries == 0xFFFF)
 801149c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80114a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d109      	bne.n	80114bc <svl_sdhDaemon+0xf0>
						{
							numOfBinaries = 0u;
 80114a8:	2300      	movs	r3, #0
 80114aa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
							(void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80114ae:	4bbd      	ldr	r3, [pc, #756]	@ (80117a4 <svl_sdhDaemon+0x3d8>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f107 015a 	add.w	r1, r7, #90	@ 0x5a
 80114b6:	2202      	movs	r2, #2
 80114b8:	2000      	movs	r0, #0
 80114ba:	4798      	blx	r3
						else
						{
							// Number OK.
						}

						gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 80114bc:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 80114c0:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
						gosRespMsg.messageSize = sizeof(numOfBinaries);
 80114c4:	2302      	movs	r3, #2
 80114c6:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

						(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&numOfBinaries, sizeof(numOfBinaries));
 80114ca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80114ce:	f8a7 309f 	strh.w	r3, [r7, #159]	@ 0x9f
						(void_t) gos_messageTx(&gosRespMsg);
 80114d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80114d6:	4618      	mov	r0, r3
 80114d8:	f004 fcd8 	bl	8015e8c <gos_messageTx>
					}
					else
					{
						// Request cannot be served.
					}
					break;
 80114dc:	e370      	b.n	8011bc0 <svl_sdhDaemon+0x7f4>
				}
				case SDH_STATE_BINARY_INFO_REQ:
				{
					if (sdhReadFunction != NULL)
 80114de:	4bb0      	ldr	r3, [pc, #704]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 836e 	beq.w	8011bc4 <svl_sdhDaemon+0x7f8>
					{
						u16_t index = 0u;
 80114e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80114ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80114f0:	2200      	movs	r2, #0
 80114f2:	801a      	strh	r2, [r3, #0]
						svl_sdhBinaryDesc_t binaryDescriptor = {0};
 80114f4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80114f8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80114fc:	4618      	mov	r0, r3
 80114fe:	2330      	movs	r3, #48	@ 0x30
 8011500:	461a      	mov	r2, r3
 8011502:	2100      	movs	r1, #0
 8011504:	f007 feba 	bl	801927c <memset>

						(void_t) memcpy((void_t*)&index, (void_t*)controlMsg.pData, sizeof(index));
 8011508:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	b29a      	uxth	r2, r3
 8011510:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011514:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011518:	801a      	strh	r2, [r3, #0]

#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary info request received. Index: %u\r\n", index);
#endif
						if (svl_sdhGetBinaryData(index, &binaryDescriptor) == GOS_SUCCESS)
 801151a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801151e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011522:	881b      	ldrh	r3, [r3, #0]
 8011524:	463a      	mov	r2, r7
 8011526:	4611      	mov	r1, r2
 8011528:	4618      	mov	r0, r3
 801152a:	f7ff febd 	bl	80112a8 <svl_sdhGetBinaryData>
 801152e:	4603      	mov	r3, r0
 8011530:	2b55      	cmp	r3, #85	@ 0x55
 8011532:	f040 8347 	bne.w	8011bc4 <svl_sdhDaemon+0x7f8>
						{
							gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 8011536:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 801153a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
							gosRespMsg.messageSize = sizeof(binaryDescriptor);
 801153e:	2330      	movs	r3, #48	@ 0x30
 8011540:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

							(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&binaryDescriptor, sizeof(binaryDescriptor));
 8011544:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011548:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801154c:	461c      	mov	r4, r3
 801154e:	f107 0c9f 	add.w	ip, r7, #159	@ 0x9f
 8011552:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8011556:	4665      	mov	r5, ip
 8011558:	4626      	mov	r6, r4
 801155a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801155c:	6028      	str	r0, [r5, #0]
 801155e:	6069      	str	r1, [r5, #4]
 8011560:	60aa      	str	r2, [r5, #8]
 8011562:	60eb      	str	r3, [r5, #12]
 8011564:	3410      	adds	r4, #16
 8011566:	f10c 0c10 	add.w	ip, ip, #16
 801156a:	4574      	cmp	r4, lr
 801156c:	d1f3      	bne.n	8011556 <svl_sdhDaemon+0x18a>
							(void_t) gos_messageTx(&gosRespMsg);
 801156e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8011572:	4618      	mov	r0, r3
 8011574:	f004 fc8a 	bl	8015e8c <gos_messageTx>
					}
					else
					{
						// Request cannot be served.
					}
					break;
 8011578:	e324      	b.n	8011bc4 <svl_sdhDaemon+0x7f8>
				}
				case SDH_STATE_BINARY_INSTALL_REQ:
				{
					if (sdhReadFunction != NULL && sdhState == SDH_STATE_IDLE)
 801157a:	4b89      	ldr	r3, [pc, #548]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	f000 8322 	beq.w	8011bc8 <svl_sdhDaemon+0x7fc>
 8011584:	4b88      	ldr	r3, [pc, #544]	@ (80117a8 <svl_sdhDaemon+0x3dc>)
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	f040 831d 	bne.w	8011bc8 <svl_sdhDaemon+0x7fc>
					{
						u16_t index = 0u;
 801158e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011592:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8011596:	2200      	movs	r2, #0
 8011598:	801a      	strh	r2, [r3, #0]
						u16_t numOfBinaries = 0u;
 801159a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801159e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80115a2:	2200      	movs	r2, #0
 80115a4:	801a      	strh	r2, [r3, #0]
						svl_pdhBldCfg_t bldCfg = {0};
 80115a6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80115aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80115ae:	461a      	mov	r2, r3
 80115b0:	2300      	movs	r3, #0
 80115b2:	6013      	str	r3, [r2, #0]
 80115b4:	6053      	str	r3, [r2, #4]
 80115b6:	6093      	str	r3, [r2, #8]
 80115b8:	60d3      	str	r3, [r2, #12]
 80115ba:	6113      	str	r3, [r2, #16]

						(void_t) memcpy((void_t*)&index, (void_t*)controlMsg.pData, sizeof(index));
 80115bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80115c8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80115cc:	801a      	strh	r2, [r3, #0]

#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary install request received. Index: %u\r\n", index);
#endif

						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80115ce:	4b74      	ldr	r3, [pc, #464]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80115d6:	2202      	movs	r2, #2
 80115d8:	2000      	movs	r0, #0
 80115da:	4798      	blx	r3

						if (index < numOfBinaries)
 80115dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80115e0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80115e4:	881a      	ldrh	r2, [r3, #0]
 80115e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80115ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80115ee:	881b      	ldrh	r3, [r3, #0]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	f080 82e9 	bcs.w	8011bc8 <svl_sdhDaemon+0x7fc>
						{
							(void_t) svl_pdhGetBldCfg(&bldCfg);
 80115f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff f9a0 	bl	8010940 <svl_pdhGetBldCfg>

							bldCfg.installRequested = GOS_TRUE;
 8011600:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011604:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011608:	2236      	movs	r2, #54	@ 0x36
 801160a:	701a      	strb	r2, [r3, #0]
							bldCfg.binaryIndex      = index;
 801160c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011610:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8011614:	881a      	ldrh	r2, [r3, #0]
 8011616:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801161a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801161e:	805a      	strh	r2, [r3, #2]

							(void_t) svl_pdhSetBldCfg(&bldCfg);
 8011620:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011624:	4618      	mov	r0, r3
 8011626:	f7ff fa6b 	bl	8010b00 <svl_pdhSetBldCfg>

							gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 801162a:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 801162e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
							gosRespMsg.messageSize = sizeof(u16_t);
 8011632:	2302      	movs	r3, #2
 8011634:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

							(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&index, sizeof(index));
 8011638:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801163c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	f8a7 309f 	strh.w	r3, [r7, #159]	@ 0x9f
							(void_t) gos_messageTx(&gosRespMsg);
 8011646:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 801164a:	4618      	mov	r0, r3
 801164c:	f004 fc1e 	bl	8015e8c <gos_messageTx>
					}
					else
					{
						// Request cannot be served.
					}
					break;
 8011650:	e2ba      	b.n	8011bc8 <svl_sdhDaemon+0x7fc>
				}
				case SDH_STATE_BINARY_DOWNLOAD_REQ:
				{
					if (sdhReadFunction != NULL && sdhState == SDH_STATE_IDLE)
 8011652:	4b53      	ldr	r3, [pc, #332]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 82b8 	beq.w	8011bcc <svl_sdhDaemon+0x800>
 801165c:	4b52      	ldr	r3, [pc, #328]	@ (80117a8 <svl_sdhDaemon+0x3dc>)
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	f040 82b3 	bne.w	8011bcc <svl_sdhDaemon+0x800>
					{
#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "SDH binary download request received.\r\n");
#endif
						// Check if descriptor fits.
						u16_t numOfBinaries = 0u;
 8011666:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801166a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 801166e:	2200      	movs	r2, #0
 8011670:	801a      	strh	r2, [r3, #0]
						u8_t  result;
						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8011672:	4b4b      	ldr	r3, [pc, #300]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f107 013e 	add.w	r1, r7, #62	@ 0x3e
 801167a:	2202      	movs	r2, #2
 801167c:	2000      	movs	r0, #0
 801167e:	4798      	blx	r3

						if ((SVL_SDH_STORAGE_DESC_BIN_DESC_START + ((numOfBinaries + 1) * sizeof(svl_sdhBinaryDesc_t))) < SVL_SDH_STORAGE_DESC_AREA_SIZE)
 8011680:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011684:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	3301      	adds	r3, #1
 801168c:	461a      	mov	r2, r3
 801168e:	4613      	mov	r3, r2
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	4413      	add	r3, r2
 8011694:	011b      	lsls	r3, r3, #4
 8011696:	3302      	adds	r3, #2
 8011698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801169c:	f080 8088 	bcs.w	80117b0 <svl_sdhDaemon+0x3e4>
						{
							// Check if binary fits.
							svl_sdhBinaryDesc_t binaryDescriptor = {0};
 80116a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80116a4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80116a8:	4618      	mov	r0, r3
 80116aa:	2330      	movs	r3, #48	@ 0x30
 80116ac:	461a      	mov	r2, r3
 80116ae:	2100      	movs	r1, #0
 80116b0:	f007 fde4 	bl	801927c <memset>

							(void_t) memcpy((void_t*)&newBinaryDescriptor, (void_t*)controlMsg.pData, sizeof(newBinaryDescriptor));
 80116b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80116b8:	461c      	mov	r4, r3
 80116ba:	f107 065c 	add.w	r6, r7, #92	@ 0x5c
 80116be:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80116c2:	4635      	mov	r5, r6
 80116c4:	4623      	mov	r3, r4
 80116c6:	6818      	ldr	r0, [r3, #0]
 80116c8:	6859      	ldr	r1, [r3, #4]
 80116ca:	689a      	ldr	r2, [r3, #8]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80116d0:	3410      	adds	r4, #16
 80116d2:	3610      	adds	r6, #16
 80116d4:	4564      	cmp	r4, ip
 80116d6:	d1f4      	bne.n	80116c2 <svl_sdhDaemon+0x2f6>

							if (numOfBinaries > 0)
 80116d8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80116dc:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d01e      	beq.n	8011724 <svl_sdhDaemon+0x358>
							{
								(void_t) sdhReadFunction(
 80116e6:	4b2e      	ldr	r3, [pc, #184]	@ (80117a0 <svl_sdhDaemon+0x3d4>)
 80116e8:	681c      	ldr	r4, [r3, #0]
										SVL_SDH_STORAGE_DESC_BIN_DESC_START + (numOfBinaries - 1) * sizeof(svl_sdhBinaryDesc_t),
 80116ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80116ee:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80116f2:	881b      	ldrh	r3, [r3, #0]
 80116f4:	3b01      	subs	r3, #1
 80116f6:	461a      	mov	r2, r3
 80116f8:	4613      	mov	r3, r2
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	4413      	add	r3, r2
 80116fe:	011b      	lsls	r3, r3, #4
 8011700:	3302      	adds	r3, #2
								(void_t) sdhReadFunction(
 8011702:	4639      	mov	r1, r7
 8011704:	2230      	movs	r2, #48	@ 0x30
 8011706:	4618      	mov	r0, r3
 8011708:	47a0      	blx	r4
										(u8_t*)&binaryDescriptor,
										sizeof(binaryDescriptor)
										);

								newBinaryDescriptor.binaryLocation = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size;
 801170a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801170e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011712:	6a1a      	ldr	r2, [r3, #32]
 8011714:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011718:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801171e:	4413      	add	r3, r2
 8011720:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011722:	e002      	b.n	801172a <svl_sdhDaemon+0x35e>
							}
							else
							{
								newBinaryDescriptor.binaryLocation = SVL_SDH_BINARY_AREA_START;
 8011724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011728:	67fb      	str	r3, [r7, #124]	@ 0x7c
									newBinaryDescriptor.binaryInfo.size,
									newBinaryDescriptor.binaryInfo.startAddress,
									newBinaryDescriptor.binaryInfo.crc);
#endif

							if ((newBinaryDescriptor.binaryLocation + newBinaryDescriptor.binaryInfo.size) < SVL_SDH_BINARY_AREA_END)
 801172a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801172c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011730:	4413      	add	r3, r2
 8011732:	4a1e      	ldr	r2, [pc, #120]	@ (80117ac <svl_sdhDaemon+0x3e0>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d82b      	bhi.n	8011790 <svl_sdhDaemon+0x3c4>
							{
								(void_t) sdhWriteFunction(
 8011738:	4b1a      	ldr	r3, [pc, #104]	@ (80117a4 <svl_sdhDaemon+0x3d8>)
 801173a:	681c      	ldr	r4, [r3, #0]
										SVL_SDH_STORAGE_DESC_BIN_DESC_START + numOfBinaries * sizeof(svl_sdhBinaryDesc_t),
 801173c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011740:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8011744:	881b      	ldrh	r3, [r3, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	4613      	mov	r3, r2
 801174a:	005b      	lsls	r3, r3, #1
 801174c:	4413      	add	r3, r2
 801174e:	011b      	lsls	r3, r3, #4
 8011750:	3302      	adds	r3, #2
								(void_t) sdhWriteFunction(
 8011752:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8011756:	2230      	movs	r2, #48	@ 0x30
 8011758:	4618      	mov	r0, r3
 801175a:	47a0      	blx	r4
										(u8_t*)&newBinaryDescriptor,
										sizeof(newBinaryDescriptor)
								);
								result = SDH_DOWNLOAD_REQ_OK;
 801175c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011760:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8011764:	2201      	movs	r2, #1
 8011766:	701a      	strb	r2, [r3, #0]

								numOfChunks = newBinaryDescriptor.binaryInfo.size / SVL_SDH_CHUNK_SIZE + (newBinaryDescriptor.binaryInfo.size % SVL_SDH_CHUNK_SIZE == 0 ? 0 : 1);
 8011768:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801176c:	0adb      	lsrs	r3, r3, #11
 801176e:	b29b      	uxth	r3, r3
 8011770:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011774:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8011778:	2a00      	cmp	r2, #0
 801177a:	bf14      	ite	ne
 801177c:	2201      	movne	r2, #1
 801177e:	2200      	moveq	r2, #0
 8011780:	b2d2      	uxtb	r2, r2
 8011782:	4413      	add	r3, r2
 8011784:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156

								sdhState = SDH_STATE_DOWNLOADING_BINARY;
 8011788:	4b07      	ldr	r3, [pc, #28]	@ (80117a8 <svl_sdhDaemon+0x3dc>)
 801178a:	2201      	movs	r2, #1
 801178c:	701a      	strb	r2, [r3, #0]
 801178e:	e015      	b.n	80117bc <svl_sdhDaemon+0x3f0>
							}
							else
							{
								// New binary does not fit.
								result = SDH_DOWNLOAD_REQ_FILE_SIZE_ERR;
 8011790:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011794:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8011798:	2204      	movs	r2, #4
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	e00e      	b.n	80117bc <svl_sdhDaemon+0x3f0>
 801179e:	bf00      	nop
 80117a0:	20005980 	.word	0x20005980
 80117a4:	20005984 	.word	0x20005984
 80117a8:	20006198 	.word	0x20006198
 80117ac:	007ffffe 	.word	0x007ffffe
							}
						}
						else
						{
							// There is not enough size for descriptor.
							result = SDH_DOWNLOAD_REQ_DESC_SIZE_ERR;
 80117b0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80117b4:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 80117b8:	2202      	movs	r2, #2
 80117ba:	701a      	strb	r2, [r3, #0]
						}

						gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 80117bc:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 80117c0:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
						gosRespMsg.messageSize = sizeof(result);
 80117c4:	2301      	movs	r3, #1
 80117c6:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

						(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&result, sizeof(result));
 80117ca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80117ce:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						(void_t) gos_messageTx(&gosRespMsg);
 80117d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80117dc:	4618      	mov	r0, r3
 80117de:	f004 fb55 	bl	8015e8c <gos_messageTx>
					}
					else
					{
						// Request cannot be served.
					}
					break;
 80117e2:	e1f3      	b.n	8011bcc <svl_sdhDaemon+0x800>
				}
				case SDH_STATE_DOWNLOADING_BINARY:
				{
					if (sdhReadFunction != NULL && sdhWriteFunction != NULL && sdhState == SDH_STATE_DOWNLOADING_BINARY)
 80117e4:	4bc4      	ldr	r3, [pc, #784]	@ (8011af8 <svl_sdhDaemon+0x72c>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 81f1 	beq.w	8011bd0 <svl_sdhDaemon+0x804>
 80117ee:	4bc3      	ldr	r3, [pc, #780]	@ (8011afc <svl_sdhDaemon+0x730>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f000 81ec 	beq.w	8011bd0 <svl_sdhDaemon+0x804>
 80117f8:	4bc1      	ldr	r3, [pc, #772]	@ (8011b00 <svl_sdhDaemon+0x734>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	f040 81e7 	bne.w	8011bd0 <svl_sdhDaemon+0x804>
					{
						// Get chunk descriptor.
						svl_sdhChunkDesc_t chunkDesc = {0};
 8011802:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011806:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801180a:	2100      	movs	r1, #0
 801180c:	460a      	mov	r2, r1
 801180e:	801a      	strh	r2, [r3, #0]
 8011810:	460a      	mov	r2, r1
 8011812:	709a      	strb	r2, [r3, #2]
						(void_t) memcpy((void_t*)&chunkDesc, (void_t*)controlMsg.pData, sizeof(chunkDesc));
 8011814:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011818:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801181c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011820:	8811      	ldrh	r1, [r2, #0]
 8011822:	7892      	ldrb	r2, [r2, #2]
 8011824:	8019      	strh	r1, [r3, #0]
 8011826:	709a      	strb	r2, [r3, #2]
								percentage % 100
						);
#endif

						// Save chunk.
						(void_t) sdhWriteFunction(
 8011828:	4bb4      	ldr	r3, [pc, #720]	@ (8011afc <svl_sdhDaemon+0x730>)
 801182a:	681b      	ldr	r3, [r3, #0]
								newBinaryDescriptor.binaryLocation + chunkDesc.chunkIdx * SVL_SDH_CHUNK_SIZE,
 801182c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801182e:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8011832:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8011836:	8812      	ldrh	r2, [r2, #0]
 8011838:	02d2      	lsls	r2, r2, #11
						(void_t) sdhWriteFunction(
 801183a:	1888      	adds	r0, r1, r2
								(u8_t*)(controlMsg.pData + sizeof(chunkDesc)),
 801183c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
						(void_t) sdhWriteFunction(
 8011840:	1cd1      	adds	r1, r2, #3
 8011842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011846:	4798      	blx	r3
								SVL_SDH_CHUNK_SIZE
						);

						// Send response.
						chunkDesc.result = 1;
 8011848:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801184c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011850:	2201      	movs	r2, #1
 8011852:	709a      	strb	r2, [r3, #2]

						gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 8011854:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011858:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
						gosRespMsg.messageSize = sizeof(chunkDesc);
 801185c:	2303      	movs	r3, #3
 801185e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

						(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&chunkDesc, sizeof(chunkDesc));
 8011862:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011866:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 801186a:	f107 039f 	add.w	r3, r7, #159	@ 0x9f
 801186e:	8811      	ldrh	r1, [r2, #0]
 8011870:	7892      	ldrb	r2, [r2, #2]
 8011872:	8019      	strh	r1, [r3, #0]
 8011874:	709a      	strb	r2, [r3, #2]
						(void_t) gos_messageTx(&gosRespMsg);
 8011876:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 801187a:	4618      	mov	r0, r3
 801187c:	f004 fb06 	bl	8015e8c <gos_messageTx>

						// Check if all chunks have been received.
						if (chunkDesc.chunkIdx == (numOfChunks - 1))
 8011880:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011884:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	461a      	mov	r2, r3
 801188c:	f8b7 3156 	ldrh.w	r3, [r7, #342]	@ 0x156
 8011890:	3b01      	subs	r3, #1
 8011892:	429a      	cmp	r2, r3
 8011894:	f040 819c 	bne.w	8011bd0 <svl_sdhDaemon+0x804>
						{
#if SVL_SDH_TRACE_LEVEL > 0
							(void_t) gos_traceTrace(GOS_TRUE, "SDH binary download finished.\r\n");
#endif
							u16_t numOfBinaries = 0u;
 8011898:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801189c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80118a0:	2200      	movs	r2, #0
 80118a2:	801a      	strh	r2, [r3, #0]

							(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80118a4:	4b94      	ldr	r3, [pc, #592]	@ (8011af8 <svl_sdhDaemon+0x72c>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 80118ac:	2202      	movs	r2, #2
 80118ae:	2000      	movs	r0, #0
 80118b0:	4798      	blx	r3
							numOfBinaries++;
 80118b2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80118b6:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	3301      	adds	r3, #1
 80118be:	b29a      	uxth	r2, r3
 80118c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80118c4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80118c8:	801a      	strh	r2, [r3, #0]
							(void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80118ca:	4b8c      	ldr	r3, [pc, #560]	@ (8011afc <svl_sdhDaemon+0x730>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 80118d2:	2202      	movs	r2, #2
 80118d4:	2000      	movs	r0, #0
 80118d6:	4798      	blx	r3

							sdhState = SDH_STATE_IDLE;
 80118d8:	4b89      	ldr	r3, [pc, #548]	@ (8011b00 <svl_sdhDaemon+0x734>)
 80118da:	2200      	movs	r2, #0
 80118dc:	701a      	strb	r2, [r3, #0]
						else
						{
							// Continue reception.
						}
					}
					break;
 80118de:	e177      	b.n	8011bd0 <svl_sdhDaemon+0x804>
				}
				case SDH_STATE_BINARY_ERASE_REQ:
				{
					if (sdhReadFunction != NULL && sdhWriteFunction != NULL && sdhState == SDH_STATE_IDLE)
 80118e0:	4b85      	ldr	r3, [pc, #532]	@ (8011af8 <svl_sdhDaemon+0x72c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f000 8175 	beq.w	8011bd4 <svl_sdhDaemon+0x808>
 80118ea:	4b84      	ldr	r3, [pc, #528]	@ (8011afc <svl_sdhDaemon+0x730>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f000 8170 	beq.w	8011bd4 <svl_sdhDaemon+0x808>
 80118f4:	4b82      	ldr	r3, [pc, #520]	@ (8011b00 <svl_sdhDaemon+0x734>)
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f040 816b 	bne.w	8011bd4 <svl_sdhDaemon+0x808>
					{
						u16_t index = 0u;
 80118fe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011902:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011906:	2200      	movs	r2, #0
 8011908:	801a      	strh	r2, [r3, #0]
						u16_t numOfBinaries = 0u;
 801190a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801190e:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8011912:	2200      	movs	r2, #0
 8011914:	801a      	strh	r2, [r3, #0]
						svl_sdhBinaryDesc_t binaryDescriptor = {0};
 8011916:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801191a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801191e:	4618      	mov	r0, r3
 8011920:	2330      	movs	r3, #48	@ 0x30
 8011922:	461a      	mov	r2, r3
 8011924:	2100      	movs	r1, #0
 8011926:	f007 fca9 	bl	801927c <memset>
						u32_t startAddress = 0u;
 801192a:	2300      	movs	r3, #0
 801192c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
						u32_t fromAddress  = 0u;
 8011930:	2300      	movs	r3, #0
 8011932:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
						u32_t totalCopySize = 0u;
 8011936:	2300      	movs	r3, #0
 8011938:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
						bool_t defragment = GOS_FALSE;
 801193c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011940:	f2a3 1327 	subw	r3, r3, #295	@ 0x127
 8011944:	2249      	movs	r2, #73	@ 0x49
 8011946:	701a      	strb	r2, [r3, #0]

						(void_t) memcpy((void_t*)&index, (void_t*)controlMsg.pData, sizeof(index));
 8011948:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	b29a      	uxth	r2, r3
 8011950:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011954:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011958:	801a      	strh	r2, [r3, #0]
						(void_t) memcpy((void_t*)&defragment, (void_t*)controlMsg.pData + sizeof(index), sizeof(defragment));
 801195a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801195e:	3302      	adds	r3, #2
 8011960:	781a      	ldrb	r2, [r3, #0]
 8011962:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011966:	f2a3 1327 	subw	r3, r3, #295	@ 0x127
 801196a:	701a      	strb	r2, [r3, #0]
#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary erase request received. Index: %u\r\n", index);
#endif

						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 801196c:	4b62      	ldr	r3, [pc, #392]	@ (8011af8 <svl_sdhDaemon+0x72c>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 8011974:	2202      	movs	r2, #2
 8011976:	2000      	movs	r0, #0
 8011978:	4798      	blx	r3

						if (index < numOfBinaries)
 801197a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801197e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011982:	881a      	ldrh	r2, [r3, #0]
 8011984:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011988:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 801198c:	881b      	ldrh	r3, [r3, #0]
 801198e:	429a      	cmp	r2, r3
 8011990:	f080 8120 	bcs.w	8011bd4 <svl_sdhDaemon+0x808>
						{
							svl_sdhGetBinaryData(index, &binaryDescriptor);
 8011994:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011998:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	463a      	mov	r2, r7
 80119a0:	4611      	mov	r1, r2
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff fc80 	bl	80112a8 <svl_sdhGetBinaryData>

							// Start address to copy is the binary location of
							// the binary that is being deleted.
							startAddress = binaryDescriptor.binaryLocation;
 80119a8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80119ac:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80119b0:	6a1b      	ldr	r3, [r3, #32]
 80119b2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

							// Reorganize descriptors and binary.
							if (index != (numOfBinaries - 1))
 80119b6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80119ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119be:	881b      	ldrh	r3, [r3, #0]
 80119c0:	461a      	mov	r2, r3
 80119c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80119c6:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	429a      	cmp	r2, r3
 80119d0:	f000 80c6 	beq.w	8011b60 <svl_sdhDaemon+0x794>
							{
								// Move descriptors.
								for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 80119d4:	2300      	movs	r3, #0
 80119d6:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 80119da:	e022      	b.n	8011a22 <svl_sdhDaemon+0x656>
								{
									svl_sdhGetBinaryData((index + 1 + idx), &binaryDescriptor);
 80119dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80119e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119e4:	881a      	ldrh	r2, [r3, #0]
 80119e6:	f8b7 3154 	ldrh.w	r3, [r7, #340]	@ 0x154
 80119ea:	4413      	add	r3, r2
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	3301      	adds	r3, #1
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	463a      	mov	r2, r7
 80119f4:	4611      	mov	r1, r2
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fc56 	bl	80112a8 <svl_sdhGetBinaryData>
									svl_sdhSetBinaryData((index + idx), &binaryDescriptor);
 80119fc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a04:	881a      	ldrh	r2, [r3, #0]
 8011a06:	f8b7 3154 	ldrh.w	r3, [r7, #340]	@ 0x154
 8011a0a:	4413      	add	r3, r2
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	463a      	mov	r2, r7
 8011a10:	4611      	mov	r1, r2
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7ff fc7e 	bl	8011314 <svl_sdhSetBinaryData>
								for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 8011a18:	f8b7 3154 	ldrh.w	r3, [r7, #340]	@ 0x154
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 8011a22:	f8b7 2154 	ldrh.w	r2, [r7, #340]	@ 0x154
 8011a26:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a2a:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8011a2e:	881b      	ldrh	r3, [r3, #0]
 8011a30:	4619      	mov	r1, r3
 8011a32:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a36:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	1acb      	subs	r3, r1, r3
 8011a40:	429a      	cmp	r2, r3
 8011a42:	dbcb      	blt.n	80119dc <svl_sdhDaemon+0x610>
								}

								// Move binaries and update descriptor data.
								// Prepare variables.
								if (defragment == GOS_TRUE)
 8011a44:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a48:	f2a3 1327 	subw	r3, r3, #295	@ 0x127
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	2b36      	cmp	r3, #54	@ 0x36
 8011a50:	f040 8086 	bne.w	8011b60 <svl_sdhDaemon+0x794>
								{
									svl_sdhGetBinaryData(index, &binaryDescriptor);
 8011a54:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	463a      	mov	r2, r7
 8011a60:	4611      	mov	r1, r2
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7ff fc20 	bl	80112a8 <svl_sdhGetBinaryData>
									fromAddress = binaryDescriptor.binaryLocation;
 8011a68:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a6c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011a70:	6a1b      	ldr	r3, [r3, #32]
 8011a72:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

									svl_sdhGetBinaryData((numOfBinaries - 2), &binaryDescriptor);
 8011a76:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a7a:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	3b02      	subs	r3, #2
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	463a      	mov	r2, r7
 8011a86:	4611      	mov	r1, r2
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7ff fc0d 	bl	80112a8 <svl_sdhGetBinaryData>
									totalCopySize = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size - fromAddress;
 8011a8e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a92:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011a96:	6a1a      	ldr	r2, [r3, #32]
 8011a98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011a9c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aa2:	441a      	add	r2, r3
 8011aa4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

									// Move in chunks using SDH buffer.
									for (u32_t cntr = 0u; (cntr * 2048) < totalCopySize; cntr++)
 8011aae:	2300      	movs	r3, #0
 8011ab0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8011ab4:	e04d      	b.n	8011b52 <svl_sdhDaemon+0x786>
									{
										if ((cntr + 1) * 2048 < totalCopySize)
 8011ab6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011aba:	3301      	adds	r3, #1
 8011abc:	02db      	lsls	r3, r3, #11
 8011abe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d920      	bls.n	8011b08 <svl_sdhDaemon+0x73c>
										{
											(void_t) sdhReadFunction(fromAddress + (cntr * 2048), sdhBuffer, 2048);
 8011ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8011af8 <svl_sdhDaemon+0x72c>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011ace:	02d1      	lsls	r1, r2, #11
 8011ad0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011ad4:	1888      	adds	r0, r1, r2
 8011ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011ada:	490a      	ldr	r1, [pc, #40]	@ (8011b04 <svl_sdhDaemon+0x738>)
 8011adc:	4798      	blx	r3
											(void_t) sdhWriteFunction(startAddress + (cntr * 2048), sdhBuffer, 2048);
 8011ade:	4b07      	ldr	r3, [pc, #28]	@ (8011afc <svl_sdhDaemon+0x730>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011ae6:	02d1      	lsls	r1, r2, #11
 8011ae8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8011aec:	1888      	adds	r0, r1, r2
 8011aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011af2:	4904      	ldr	r1, [pc, #16]	@ (8011b04 <svl_sdhDaemon+0x738>)
 8011af4:	4798      	blx	r3
 8011af6:	e027      	b.n	8011b48 <svl_sdhDaemon+0x77c>
 8011af8:	20005980 	.word	0x20005980
 8011afc:	20005984 	.word	0x20005984
 8011b00:	20006198 	.word	0x20006198
 8011b04:	20005988 	.word	0x20005988
										}
										else
										{
											(void_t) sdhReadFunction(fromAddress + (cntr * 2048), sdhBuffer, totalCopySize - (cntr * 2048));
 8011b08:	4b33      	ldr	r3, [pc, #204]	@ (8011bd8 <svl_sdhDaemon+0x80c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011b10:	02d1      	lsls	r1, r2, #11
 8011b12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011b16:	1888      	adds	r0, r1, r2
 8011b18:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011b1c:	02d2      	lsls	r2, r2, #11
 8011b1e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8011b22:	1a8a      	subs	r2, r1, r2
 8011b24:	492d      	ldr	r1, [pc, #180]	@ (8011bdc <svl_sdhDaemon+0x810>)
 8011b26:	4798      	blx	r3
											(void_t) sdhWriteFunction(startAddress + (cntr * 2048), sdhBuffer, totalCopySize - (cntr * 2048));
 8011b28:	4b2d      	ldr	r3, [pc, #180]	@ (8011be0 <svl_sdhDaemon+0x814>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011b30:	02d1      	lsls	r1, r2, #11
 8011b32:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8011b36:	1888      	adds	r0, r1, r2
 8011b38:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011b3c:	02d2      	lsls	r2, r2, #11
 8011b3e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8011b42:	1a8a      	subs	r2, r1, r2
 8011b44:	4925      	ldr	r1, [pc, #148]	@ (8011bdc <svl_sdhDaemon+0x810>)
 8011b46:	4798      	blx	r3
									for (u32_t cntr = 0u; (cntr * 2048) < totalCopySize; cntr++)
 8011b48:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8011b52:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011b56:	02db      	lsls	r3, r3, #11
 8011b58:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d8aa      	bhi.n	8011ab6 <svl_sdhDaemon+0x6ea>
							{
								// No moving required.
							}

							// Decrease number of binaries.
							numOfBinaries--;
 8011b60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011b64:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8011b68:	881b      	ldrh	r3, [r3, #0]
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011b72:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8011b76:	801a      	strh	r2, [r3, #0]
							(void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8011b78:	4b19      	ldr	r3, [pc, #100]	@ (8011be0 <svl_sdhDaemon+0x814>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 8011b80:	2202      	movs	r2, #2
 8011b82:	2000      	movs	r0, #0
 8011b84:	4798      	blx	r3

							gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 8011b86:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011b8a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
							gosRespMsg.messageSize = sizeof(u16_t);
 8011b8e:	2302      	movs	r3, #2
 8011b90:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

							(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&index, sizeof(index));
 8011b94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8011b98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011b9c:	881b      	ldrh	r3, [r3, #0]
 8011b9e:	f8a7 309f 	strh.w	r3, [r7, #159]	@ 0x9f
							(void_t) gos_messageTx(&gosRespMsg);
 8011ba2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f004 f970 	bl	8015e8c <gos_messageTx>
					}
					else
					{
						// Request cannot be served.
					}
					break;
 8011bac:	e012      	b.n	8011bd4 <svl_sdhDaemon+0x808>
			else
			{
				// Just message RX timeout in idle state.
			}
#endif
			sdhState = SDH_STATE_IDLE;
 8011bae:	4b0d      	ldr	r3, [pc, #52]	@ (8011be4 <svl_sdhDaemon+0x818>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	701a      	strb	r2, [r3, #0]
			(void_t) gos_taskSleep(100);
 8011bb4:	2064      	movs	r0, #100	@ 0x64
 8011bb6:	f001 ff19 	bl	80139ec <gos_taskSleep>
 8011bba:	e42f      	b.n	801141c <svl_sdhDaemon+0x50>
				default: break;
 8011bbc:	bf00      	nop
 8011bbe:	e42d      	b.n	801141c <svl_sdhDaemon+0x50>
					break;
 8011bc0:	bf00      	nop
 8011bc2:	e42b      	b.n	801141c <svl_sdhDaemon+0x50>
					break;
 8011bc4:	bf00      	nop
 8011bc6:	e429      	b.n	801141c <svl_sdhDaemon+0x50>
					break;
 8011bc8:	bf00      	nop
 8011bca:	e427      	b.n	801141c <svl_sdhDaemon+0x50>
					break;
 8011bcc:	bf00      	nop
 8011bce:	e425      	b.n	801141c <svl_sdhDaemon+0x50>
					break;
 8011bd0:	bf00      	nop
 8011bd2:	e423      	b.n	801141c <svl_sdhDaemon+0x50>
					break;
 8011bd4:	bf00      	nop
		if (gos_messageRx(msgIds, &gosMsg, 5000u) == GOS_SUCCESS)
 8011bd6:	e421      	b.n	801141c <svl_sdhDaemon+0x50>
 8011bd8:	20005980 	.word	0x20005980
 8011bdc:	20005988 	.word	0x20005988
 8011be0:	20005984 	.word	0x20005984
 8011be4:	20006198 	.word	0x20006198

08011be8 <svl_sdhSysmonBinaryNumReqCallback>:
		}
	}
}

GOS_STATIC void_t svl_sdhSysmonBinaryNumReqCallback (void_t)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b09c      	sub	sp, #112	@ 0x70
 8011bec:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 8011bee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]
 8011bf6:	605a      	str	r2, [r3, #4]
 8011bf8:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011bfa:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011bfe:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8011c02:	2300      	movs	r3, #0
 8011c04:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	gos_message_t respMsg = {0};
 8011c08:	1d3b      	adds	r3, r7, #4
 8011c0a:	2254      	movs	r2, #84	@ 0x54
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f007 fb34 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_NUM_REQ;
 8011c14:	2302      	movs	r3, #2
 8011c16:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011c1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011c1e:	220c      	movs	r2, #12
 8011c20:	4619      	mov	r1, r3
 8011c22:	4810      	ldr	r0, [pc, #64]	@ (8011c64 <svl_sdhSysmonBinaryNumReqCallback+0x7c>)
 8011c24:	f007 fbc1 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011c28:	480f      	ldr	r0, [pc, #60]	@ (8011c68 <svl_sdhSysmonBinaryNumReqCallback+0x80>)
 8011c2a:	f004 f92f 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8011c2e:	1d39      	adds	r1, r7, #4
 8011c30:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011c34:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f004 f827 	bl	8015c8c <gos_messageRx>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b55      	cmp	r3, #85	@ 0x55
 8011c42:	d10a      	bne.n	8011c5a <svl_sdhSysmonBinaryNumReqCallback+0x72>
	{
		(void_t) gos_gcpTransmitMessage(
 8011c44:	1d3b      	adds	r3, r7, #4
 8011c46:	1cda      	adds	r2, r3, #3
 8011c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c4c:	9300      	str	r3, [sp, #0]
 8011c4e:	2302      	movs	r3, #2
 8011c50:	f24b 1101 	movw	r1, #45313	@ 0xb101
 8011c54:	2000      	movs	r0, #0
 8011c56:	f003 fceb 	bl	8015630 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011c5a:	bf00      	nop
 8011c5c:	3768      	adds	r7, #104	@ 0x68
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	200006d7 	.word	0x200006d7
 8011c68:	200006d4 	.word	0x200006d4

08011c6c <svl_sdhSysmonBinaryInfoReqCallback>:

GOS_STATIC void_t svl_sdhSysmonBinaryInfoReqCallback (void_t)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b09c      	sub	sp, #112	@ 0x70
 8011c70:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 8011c72:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011c76:	2200      	movs	r2, #0
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	605a      	str	r2, [r3, #4]
 8011c7c:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011c7e:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011c82:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8011c86:	2300      	movs	r3, #0
 8011c88:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	gos_message_t respMsg = {0};
 8011c8c:	1d3b      	adds	r3, r7, #4
 8011c8e:	2254      	movs	r2, #84	@ 0x54
 8011c90:	2100      	movs	r1, #0
 8011c92:	4618      	mov	r0, r3
 8011c94:	f007 faf2 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_INFO_REQ;
 8011c98:	2303      	movs	r3, #3
 8011c9a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	controlMsg.pData = sdhBuffer;
 8011c9e:	4b14      	ldr	r3, [pc, #80]	@ (8011cf0 <svl_sdhSysmonBinaryInfoReqCallback+0x84>)
 8011ca0:	663b      	str	r3, [r7, #96]	@ 0x60
	controlMsg.dataSize = sizeof(u16_t);
 8011ca2:	2302      	movs	r3, #2
 8011ca4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011ca8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011cac:	220c      	movs	r2, #12
 8011cae:	4619      	mov	r1, r3
 8011cb0:	4810      	ldr	r0, [pc, #64]	@ (8011cf4 <svl_sdhSysmonBinaryInfoReqCallback+0x88>)
 8011cb2:	f007 fb7a 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011cb6:	4810      	ldr	r0, [pc, #64]	@ (8011cf8 <svl_sdhSysmonBinaryInfoReqCallback+0x8c>)
 8011cb8:	f004 f8e8 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8011cbc:	1d39      	adds	r1, r7, #4
 8011cbe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011cc2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f003 ffe0 	bl	8015c8c <gos_messageRx>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b55      	cmp	r3, #85	@ 0x55
 8011cd0:	d10a      	bne.n	8011ce8 <svl_sdhSysmonBinaryInfoReqCallback+0x7c>
	{
		(void_t) gos_gcpTransmitMessage(
 8011cd2:	1d3b      	adds	r3, r7, #4
 8011cd4:	1cda      	adds	r2, r3, #3
 8011cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	2330      	movs	r3, #48	@ 0x30
 8011cde:	f24b 1102 	movw	r1, #45314	@ 0xb102
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	f003 fca4 	bl	8015630 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011ce8:	bf00      	nop
 8011cea:	3768      	adds	r7, #104	@ 0x68
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	20005988 	.word	0x20005988
 8011cf4:	200006d7 	.word	0x200006d7
 8011cf8:	200006d4 	.word	0x200006d4

08011cfc <svl_sdhSysmonDownloadReqCallback>:

GOS_STATIC void_t svl_sdhSysmonDownloadReqCallback (void_t)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b09c      	sub	sp, #112	@ 0x70
 8011d00:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 8011d02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011d06:	2200      	movs	r2, #0
 8011d08:	601a      	str	r2, [r3, #0]
 8011d0a:	605a      	str	r2, [r3, #4]
 8011d0c:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011d0e:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011d12:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8011d16:	2300      	movs	r3, #0
 8011d18:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	gos_message_t respMsg = {0};
 8011d1c:	1d3b      	adds	r3, r7, #4
 8011d1e:	2254      	movs	r2, #84	@ 0x54
 8011d20:	2100      	movs	r1, #0
 8011d22:	4618      	mov	r0, r3
 8011d24:	f007 faaa 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 8011d28:	2304      	movs	r3, #4
 8011d2a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	controlMsg.pData = sdhBuffer;
 8011d2e:	4b14      	ldr	r3, [pc, #80]	@ (8011d80 <svl_sdhSysmonDownloadReqCallback+0x84>)
 8011d30:	663b      	str	r3, [r7, #96]	@ 0x60
	controlMsg.dataSize = sizeof(u32_t);
 8011d32:	2304      	movs	r3, #4
 8011d34:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011d38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011d3c:	220c      	movs	r2, #12
 8011d3e:	4619      	mov	r1, r3
 8011d40:	4810      	ldr	r0, [pc, #64]	@ (8011d84 <svl_sdhSysmonDownloadReqCallback+0x88>)
 8011d42:	f007 fb32 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011d46:	4810      	ldr	r0, [pc, #64]	@ (8011d88 <svl_sdhSysmonDownloadReqCallback+0x8c>)
 8011d48:	f004 f8a0 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8011d4c:	1d39      	adds	r1, r7, #4
 8011d4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011d52:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011d56:	4618      	mov	r0, r3
 8011d58:	f003 ff98 	bl	8015c8c <gos_messageRx>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b55      	cmp	r3, #85	@ 0x55
 8011d60:	d10a      	bne.n	8011d78 <svl_sdhSysmonDownloadReqCallback+0x7c>
	{
		(void_t) gos_gcpTransmitMessage(
 8011d62:	1d3b      	adds	r3, r7, #4
 8011d64:	1cda      	adds	r2, r3, #3
 8011d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	f24b 1103 	movw	r1, #45315	@ 0xb103
 8011d72:	2000      	movs	r0, #0
 8011d74:	f003 fc5c 	bl	8015630 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011d78:	bf00      	nop
 8011d7a:	3768      	adds	r7, #104	@ 0x68
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	20005988 	.word	0x20005988
 8011d84:	200006d7 	.word	0x200006d7
 8011d88:	200006d4 	.word	0x200006d4

08011d8c <svl_sdhSysmonBinaryChunkReqCallback>:

GOS_STATIC void_t svl_sdhSysmonBinaryChunkReqCallback (void_t)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b09c      	sub	sp, #112	@ 0x70
 8011d90:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 8011d92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011d96:	2200      	movs	r2, #0
 8011d98:	601a      	str	r2, [r3, #0]
 8011d9a:	605a      	str	r2, [r3, #4]
 8011d9c:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011d9e:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011da2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8011da6:	2300      	movs	r3, #0
 8011da8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	gos_message_t respMsg = {0};
 8011dac:	1d3b      	adds	r3, r7, #4
 8011dae:	2254      	movs	r2, #84	@ 0x54
 8011db0:	2100      	movs	r1, #0
 8011db2:	4618      	mov	r0, r3
 8011db4:	f007 fa62 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_DOWNLOADING_BINARY;
 8011db8:	2301      	movs	r3, #1
 8011dba:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	controlMsg.pData = sdhBuffer;
 8011dbe:	4b15      	ldr	r3, [pc, #84]	@ (8011e14 <svl_sdhSysmonBinaryChunkReqCallback+0x88>)
 8011dc0:	663b      	str	r3, [r7, #96]	@ 0x60
	controlMsg.dataSize = sizeof(svl_sdhChunkDesc_t) + SVL_SDH_CHUNK_SIZE;
 8011dc2:	f640 0303 	movw	r3, #2051	@ 0x803
 8011dc6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011dca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011dce:	220c      	movs	r2, #12
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	4811      	ldr	r0, [pc, #68]	@ (8011e18 <svl_sdhSysmonBinaryChunkReqCallback+0x8c>)
 8011dd4:	f007 fae9 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011dd8:	4810      	ldr	r0, [pc, #64]	@ (8011e1c <svl_sdhSysmonBinaryChunkReqCallback+0x90>)
 8011dda:	f004 f857 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8011dde:	1d39      	adds	r1, r7, #4
 8011de0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011de4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011de8:	4618      	mov	r0, r3
 8011dea:	f003 ff4f 	bl	8015c8c <gos_messageRx>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b55      	cmp	r3, #85	@ 0x55
 8011df2:	d10a      	bne.n	8011e0a <svl_sdhSysmonBinaryChunkReqCallback+0x7e>
	{
		(void_t) gos_gcpTransmitMessage(
 8011df4:	1d3b      	adds	r3, r7, #4
 8011df6:	1cda      	adds	r2, r3, #3
 8011df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	2303      	movs	r3, #3
 8011e00:	f24b 1104 	movw	r1, #45316	@ 0xb104
 8011e04:	2000      	movs	r0, #0
 8011e06:	f003 fc13 	bl	8015630 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011e0a:	bf00      	nop
 8011e0c:	3768      	adds	r7, #104	@ 0x68
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	20005988 	.word	0x20005988
 8011e18:	200006d7 	.word	0x200006d7
 8011e1c:	200006d4 	.word	0x200006d4

08011e20 <svl_sdhSysmonSoftwareInstallReqCallback>:

GOS_STATIC void_t svl_sdhSysmonSoftwareInstallReqCallback (void_t)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b09c      	sub	sp, #112	@ 0x70
 8011e24:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 8011e26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	601a      	str	r2, [r3, #0]
 8011e2e:	605a      	str	r2, [r3, #4]
 8011e30:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011e32:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011e36:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	gos_message_t respMsg = {0};
 8011e40:	1d3b      	adds	r3, r7, #4
 8011e42:	2254      	movs	r2, #84	@ 0x54
 8011e44:	2100      	movs	r1, #0
 8011e46:	4618      	mov	r0, r3
 8011e48:	f007 fa18 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_INSTALL_REQ;
 8011e4c:	2305      	movs	r3, #5
 8011e4e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	controlMsg.pData = sdhBuffer;
 8011e52:	4b14      	ldr	r3, [pc, #80]	@ (8011ea4 <svl_sdhSysmonSoftwareInstallReqCallback+0x84>)
 8011e54:	663b      	str	r3, [r7, #96]	@ 0x60
	controlMsg.dataSize = sizeof(u16_t);
 8011e56:	2302      	movs	r3, #2
 8011e58:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011e5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011e60:	220c      	movs	r2, #12
 8011e62:	4619      	mov	r1, r3
 8011e64:	4810      	ldr	r0, [pc, #64]	@ (8011ea8 <svl_sdhSysmonSoftwareInstallReqCallback+0x88>)
 8011e66:	f007 faa0 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011e6a:	4810      	ldr	r0, [pc, #64]	@ (8011eac <svl_sdhSysmonSoftwareInstallReqCallback+0x8c>)
 8011e6c:	f004 f80e 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8011e70:	1d39      	adds	r1, r7, #4
 8011e72:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011e76:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f003 ff06 	bl	8015c8c <gos_messageRx>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b55      	cmp	r3, #85	@ 0x55
 8011e84:	d10a      	bne.n	8011e9c <svl_sdhSysmonSoftwareInstallReqCallback+0x7c>
	{
		(void_t) gos_gcpTransmitMessage(
 8011e86:	1d3b      	adds	r3, r7, #4
 8011e88:	1cda      	adds	r2, r3, #3
 8011e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	2302      	movs	r3, #2
 8011e92:	f24b 1105 	movw	r1, #45317	@ 0xb105
 8011e96:	2000      	movs	r0, #0
 8011e98:	f003 fbca 	bl	8015630 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011e9c:	bf00      	nop
 8011e9e:	3768      	adds	r7, #104	@ 0x68
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	20005988 	.word	0x20005988
 8011ea8:	200006d7 	.word	0x200006d7
 8011eac:	200006d4 	.word	0x200006d4

08011eb0 <svl_sdhSysmonBinaryEraseReqCallback>:

GOS_STATIC void_t svl_sdhSysmonBinaryEraseReqCallback (void_t)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b09c      	sub	sp, #112	@ 0x70
 8011eb4:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 8011eb6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011eba:	2200      	movs	r2, #0
 8011ebc:	601a      	str	r2, [r3, #0]
 8011ebe:	605a      	str	r2, [r3, #4]
 8011ec0:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011ec2:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011ec6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8011eca:	2300      	movs	r3, #0
 8011ecc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	gos_message_t respMsg = {0};
 8011ed0:	1d3b      	adds	r3, r7, #4
 8011ed2:	2254      	movs	r2, #84	@ 0x54
 8011ed4:	2100      	movs	r1, #0
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f007 f9d0 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_ERASE_REQ;
 8011edc:	2306      	movs	r3, #6
 8011ede:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	controlMsg.pData = sdhBuffer;
 8011ee2:	4b14      	ldr	r3, [pc, #80]	@ (8011f34 <svl_sdhSysmonBinaryEraseReqCallback+0x84>)
 8011ee4:	663b      	str	r3, [r7, #96]	@ 0x60
	controlMsg.dataSize = sizeof(u16_t) + sizeof(bool_t);
 8011ee6:	2303      	movs	r3, #3
 8011ee8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011eec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011ef0:	220c      	movs	r2, #12
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	4810      	ldr	r0, [pc, #64]	@ (8011f38 <svl_sdhSysmonBinaryEraseReqCallback+0x88>)
 8011ef6:	f007 fa58 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011efa:	4810      	ldr	r0, [pc, #64]	@ (8011f3c <svl_sdhSysmonBinaryEraseReqCallback+0x8c>)
 8011efc:	f003 ffc6 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 300000) == GOS_SUCCESS)
 8011f00:	1d39      	adds	r1, r7, #4
 8011f02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011f06:	f249 32e0 	movw	r2, #37856	@ 0x93e0
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f003 febe 	bl	8015c8c <gos_messageRx>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2b55      	cmp	r3, #85	@ 0x55
 8011f14:	d10a      	bne.n	8011f2c <svl_sdhSysmonBinaryEraseReqCallback+0x7c>
	{
		(void_t) gos_gcpTransmitMessage(
 8011f16:	1d3b      	adds	r3, r7, #4
 8011f18:	1cda      	adds	r2, r3, #3
 8011f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f1e:	9300      	str	r3, [sp, #0]
 8011f20:	2302      	movs	r3, #2
 8011f22:	f24b 1106 	movw	r1, #45318	@ 0xb106
 8011f26:	2000      	movs	r0, #0
 8011f28:	f003 fb82 	bl	8015630 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011f2c:	bf00      	nop
 8011f2e:	3768      	adds	r7, #104	@ 0x68
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	20005988 	.word	0x20005988
 8011f38:	200006d7 	.word	0x200006d7
 8011f3c:	200006d4 	.word	0x200006d4

08011f40 <svl_sdhIplBinaryNumReqCallback>:

GOS_STATIC void_t svl_sdhIplBinaryNumReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b09e      	sub	sp, #120	@ 0x78
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
	svl_sdhControlMsg_t controlMsg = {0};
 8011f4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]
 8011f54:	605a      	str	r2, [r3, #4]
 8011f56:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011f58:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011f5c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011f60:	2300      	movs	r3, #0
 8011f62:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	gos_message_t respMsg = {0};
 8011f66:	f107 0314 	add.w	r3, r7, #20
 8011f6a:	2254      	movs	r2, #84	@ 0x54
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f007 f984 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_NUM_REQ;
 8011f74:	2302      	movs	r3, #2
 8011f76:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8011f7a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011f7e:	220c      	movs	r2, #12
 8011f80:	4619      	mov	r1, r3
 8011f82:	480f      	ldr	r0, [pc, #60]	@ (8011fc0 <svl_sdhIplBinaryNumReqCallback+0x80>)
 8011f84:	f007 fa11 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8011f88:	480e      	ldr	r0, [pc, #56]	@ (8011fc4 <svl_sdhIplBinaryNumReqCallback+0x84>)
 8011f8a:	f003 ff7f 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8011f8e:	f107 0114 	add.w	r1, r7, #20
 8011f92:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011f96:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f003 fe76 	bl	8015c8c <gos_messageRx>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b55      	cmp	r3, #85	@ 0x55
 8011fa4:	d108      	bne.n	8011fb8 <svl_sdhIplBinaryNumReqCallback+0x78>
	{
		(void_t) svl_iplSendMessage(0xA02, (u8_t*)respMsg.messageBytes, sizeof(u16_t));
 8011fa6:	f107 0314 	add.w	r3, r7, #20
 8011faa:	3303      	adds	r3, #3
 8011fac:	2202      	movs	r2, #2
 8011fae:	4619      	mov	r1, r3
 8011fb0:	f640 2002 	movw	r0, #2562	@ 0xa02
 8011fb4:	f7fd fe7c 	bl	800fcb0 <svl_iplSendMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8011fb8:	bf00      	nop
 8011fba:	3778      	adds	r7, #120	@ 0x78
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	200006d7 	.word	0x200006d7
 8011fc4:	200006d4 	.word	0x200006d4

08011fc8 <svl_sdhIplBinaryInfoReqCallback>:

GOS_STATIC void_t svl_sdhIplBinaryInfoReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b09e      	sub	sp, #120	@ 0x78
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
	svl_sdhControlMsg_t controlMsg = {0};
 8011fd4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011fd8:	2200      	movs	r2, #0
 8011fda:	601a      	str	r2, [r3, #0]
 8011fdc:	605a      	str	r2, [r3, #4]
 8011fde:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8011fe0:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8011fe4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011fe8:	2300      	movs	r3, #0
 8011fea:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	gos_message_t respMsg = {0};
 8011fee:	f107 0314 	add.w	r3, r7, #20
 8011ff2:	2254      	movs	r2, #84	@ 0x54
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f007 f940 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_INFO_REQ;
 8011ffc:	2303      	movs	r3, #3
 8011ffe:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	controlMsg.pData = pData;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	673b      	str	r3, [r7, #112]	@ 0x70
	controlMsg.dataSize = size; //sizeof(u16_t);
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	b29b      	uxth	r3, r3
 801200a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 801200e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8012012:	220c      	movs	r2, #12
 8012014:	4619      	mov	r1, r3
 8012016:	480f      	ldr	r0, [pc, #60]	@ (8012054 <svl_sdhIplBinaryInfoReqCallback+0x8c>)
 8012018:	f007 f9c7 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 801201c:	480e      	ldr	r0, [pc, #56]	@ (8012058 <svl_sdhIplBinaryInfoReqCallback+0x90>)
 801201e:	f003 ff35 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8012022:	f107 0114 	add.w	r1, r7, #20
 8012026:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801202a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801202e:	4618      	mov	r0, r3
 8012030:	f003 fe2c 	bl	8015c8c <gos_messageRx>
 8012034:	4603      	mov	r3, r0
 8012036:	2b55      	cmp	r3, #85	@ 0x55
 8012038:	d108      	bne.n	801204c <svl_sdhIplBinaryInfoReqCallback+0x84>
	{
		(void_t) svl_iplSendMessage(0xA12, (u8_t*)respMsg.messageBytes, sizeof(svl_sdhBinaryDesc_t));
 801203a:	f107 0314 	add.w	r3, r7, #20
 801203e:	3303      	adds	r3, #3
 8012040:	2230      	movs	r2, #48	@ 0x30
 8012042:	4619      	mov	r1, r3
 8012044:	f640 2012 	movw	r0, #2578	@ 0xa12
 8012048:	f7fd fe32 	bl	800fcb0 <svl_iplSendMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 801204c:	bf00      	nop
 801204e:	3778      	adds	r7, #120	@ 0x78
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	200006d7 	.word	0x200006d7
 8012058:	200006d4 	.word	0x200006d4

0801205c <svl_sdhIplDownloadReqCallback>:

GOS_STATIC void_t svl_sdhIplDownloadReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b09e      	sub	sp, #120	@ 0x78
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
	svl_sdhControlMsg_t controlMsg = {0};
 8012068:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801206c:	2200      	movs	r2, #0
 801206e:	601a      	str	r2, [r3, #0]
 8012070:	605a      	str	r2, [r3, #4]
 8012072:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8012074:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8012078:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 801207c:	2300      	movs	r3, #0
 801207e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	gos_message_t respMsg = {0};
 8012082:	f107 0314 	add.w	r3, r7, #20
 8012086:	2254      	movs	r2, #84	@ 0x54
 8012088:	2100      	movs	r1, #0
 801208a:	4618      	mov	r0, r3
 801208c:	f007 f8f6 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 8012090:	2304      	movs	r3, #4
 8012092:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	controlMsg.pData = pData;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	673b      	str	r3, [r7, #112]	@ 0x70
	controlMsg.dataSize = size; //sizeof(u32_t);
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	b29b      	uxth	r3, r3
 801209e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 80120a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80120a6:	220c      	movs	r2, #12
 80120a8:	4619      	mov	r1, r3
 80120aa:	480f      	ldr	r0, [pc, #60]	@ (80120e8 <svl_sdhIplDownloadReqCallback+0x8c>)
 80120ac:	f007 f97d 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 80120b0:	480e      	ldr	r0, [pc, #56]	@ (80120ec <svl_sdhIplDownloadReqCallback+0x90>)
 80120b2:	f003 feeb 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 80120b6:	f107 0114 	add.w	r1, r7, #20
 80120ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80120be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80120c2:	4618      	mov	r0, r3
 80120c4:	f003 fde2 	bl	8015c8c <gos_messageRx>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b55      	cmp	r3, #85	@ 0x55
 80120cc:	d108      	bne.n	80120e0 <svl_sdhIplDownloadReqCallback+0x84>
	{
		(void_t) svl_iplSendMessage(0xA22, (u8_t*)respMsg.messageBytes, sizeof(u8_t));
 80120ce:	f107 0314 	add.w	r3, r7, #20
 80120d2:	3303      	adds	r3, #3
 80120d4:	2201      	movs	r2, #1
 80120d6:	4619      	mov	r1, r3
 80120d8:	f640 2022 	movw	r0, #2594	@ 0xa22
 80120dc:	f7fd fde8 	bl	800fcb0 <svl_iplSendMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 80120e0:	bf00      	nop
 80120e2:	3778      	adds	r7, #120	@ 0x78
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	200006d7 	.word	0x200006d7
 80120ec:	200006d4 	.word	0x200006d4

080120f0 <svl_sdhIplBinaryChunkReqCallback>:

GOS_STATIC void_t svl_sdhIplBinaryChunkReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b09e      	sub	sp, #120	@ 0x78
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
	svl_sdhControlMsg_t controlMsg = {0};
 80120fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8012100:	2200      	movs	r2, #0
 8012102:	601a      	str	r2, [r3, #0]
 8012104:	605a      	str	r2, [r3, #4]
 8012106:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8012108:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 801210c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8012110:	2300      	movs	r3, #0
 8012112:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	gos_message_t respMsg = {0};
 8012116:	f107 0314 	add.w	r3, r7, #20
 801211a:	2254      	movs	r2, #84	@ 0x54
 801211c:	2100      	movs	r1, #0
 801211e:	4618      	mov	r0, r3
 8012120:	f007 f8ac 	bl	801927c <memset>

	if (drv_crcCheckCrc32(pData, size, crc, NULL) != DRV_CRC_CHECK_OK)
 8012124:	2300      	movs	r3, #0
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	68b9      	ldr	r1, [r7, #8]
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	f7fa f81c 	bl	800c168 <drv_crcCheckCrc32>
 8012130:	4603      	mov	r3, r0
 8012132:	2bca      	cmp	r3, #202	@ 0xca
 8012134:	d00f      	beq.n	8012156 <svl_sdhIplBinaryChunkReqCallback+0x66>
	{
		svl_sdhChunkDesc_t chunkDesc = { .result = 0 };
 8012136:	f107 0310 	add.w	r3, r7, #16
 801213a:	2100      	movs	r1, #0
 801213c:	460a      	mov	r2, r1
 801213e:	801a      	strh	r2, [r3, #0]
 8012140:	460a      	mov	r2, r1
 8012142:	709a      	strb	r2, [r3, #2]
		(void_t) svl_iplSendMessage(0xA32, (u8_t*)&chunkDesc, sizeof(svl_sdhChunkDesc_t));
 8012144:	f107 0310 	add.w	r3, r7, #16
 8012148:	2203      	movs	r2, #3
 801214a:	4619      	mov	r1, r3
 801214c:	f640 2032 	movw	r0, #2610	@ 0xa32
 8012150:	f7fd fdae 	bl	800fcb0 <svl_iplSendMessage>
		else
		{
			// Nothing to do.
		}
	}
}
 8012154:	e02c      	b.n	80121b0 <svl_sdhIplBinaryChunkReqCallback+0xc0>
		(void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 8012156:	68ba      	ldr	r2, [r7, #8]
 8012158:	68f9      	ldr	r1, [r7, #12]
 801215a:	4817      	ldr	r0, [pc, #92]	@ (80121b8 <svl_sdhIplBinaryChunkReqCallback+0xc8>)
 801215c:	f007 f925 	bl	80193aa <memcpy>
		controlMsg.requiredState = SDH_STATE_DOWNLOADING_BINARY;
 8012160:	2301      	movs	r3, #1
 8012162:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		controlMsg.pData = sdhBuffer;
 8012166:	4b14      	ldr	r3, [pc, #80]	@ (80121b8 <svl_sdhIplBinaryChunkReqCallback+0xc8>)
 8012168:	673b      	str	r3, [r7, #112]	@ 0x70
		controlMsg.dataSize = size; //sizeof(svl_sdhChunkDesc_t) + SVL_SDH_CHUNK_SIZE;
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	b29b      	uxth	r3, r3
 801216e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 8012172:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8012176:	220c      	movs	r2, #12
 8012178:	4619      	mov	r1, r3
 801217a:	4810      	ldr	r0, [pc, #64]	@ (80121bc <svl_sdhIplBinaryChunkReqCallback+0xcc>)
 801217c:	f007 f915 	bl	80193aa <memcpy>
		(void_t) gos_messageTx(&sdhStateControlMsg);
 8012180:	480f      	ldr	r0, [pc, #60]	@ (80121c0 <svl_sdhIplBinaryChunkReqCallback+0xd0>)
 8012182:	f003 fe83 	bl	8015e8c <gos_messageTx>
		if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 8012186:	f107 0114 	add.w	r1, r7, #20
 801218a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801218e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8012192:	4618      	mov	r0, r3
 8012194:	f003 fd7a 	bl	8015c8c <gos_messageRx>
 8012198:	4603      	mov	r3, r0
 801219a:	2b55      	cmp	r3, #85	@ 0x55
 801219c:	d108      	bne.n	80121b0 <svl_sdhIplBinaryChunkReqCallback+0xc0>
			(void_t) svl_iplSendMessage(0xA32, (u8_t*)respMsg.messageBytes, sizeof(svl_sdhChunkDesc_t));
 801219e:	f107 0314 	add.w	r3, r7, #20
 80121a2:	3303      	adds	r3, #3
 80121a4:	2203      	movs	r2, #3
 80121a6:	4619      	mov	r1, r3
 80121a8:	f640 2032 	movw	r0, #2610	@ 0xa32
 80121ac:	f7fd fd80 	bl	800fcb0 <svl_iplSendMessage>
}
 80121b0:	bf00      	nop
 80121b2:	3778      	adds	r7, #120	@ 0x78
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	20005988 	.word	0x20005988
 80121bc:	200006d7 	.word	0x200006d7
 80121c0:	200006d4 	.word	0x200006d4

080121c4 <svl_sdhIplSoftwareInstallReqCallback>:

GOS_STATIC void_t svl_sdhIplSoftwareInstallReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b09e      	sub	sp, #120	@ 0x78
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
	svl_sdhControlMsg_t controlMsg = {0};
 80121d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80121d4:	2200      	movs	r2, #0
 80121d6:	601a      	str	r2, [r3, #0]
 80121d8:	605a      	str	r2, [r3, #4]
 80121da:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 80121dc:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 80121e0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80121e4:	2300      	movs	r3, #0
 80121e6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	gos_message_t respMsg = {0};
 80121ea:	f107 0314 	add.w	r3, r7, #20
 80121ee:	2254      	movs	r2, #84	@ 0x54
 80121f0:	2100      	movs	r1, #0
 80121f2:	4618      	mov	r0, r3
 80121f4:	f007 f842 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_INSTALL_REQ;
 80121f8:	2305      	movs	r3, #5
 80121fa:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	controlMsg.pData = pData;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	673b      	str	r3, [r7, #112]	@ 0x70
	controlMsg.dataSize = size; //sizeof(u16_t);
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	b29b      	uxth	r3, r3
 8012206:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 801220a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801220e:	220c      	movs	r2, #12
 8012210:	4619      	mov	r1, r3
 8012212:	480f      	ldr	r0, [pc, #60]	@ (8012250 <svl_sdhIplSoftwareInstallReqCallback+0x8c>)
 8012214:	f007 f8c9 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 8012218:	480e      	ldr	r0, [pc, #56]	@ (8012254 <svl_sdhIplSoftwareInstallReqCallback+0x90>)
 801221a:	f003 fe37 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 801221e:	f107 0114 	add.w	r1, r7, #20
 8012222:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012226:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801222a:	4618      	mov	r0, r3
 801222c:	f003 fd2e 	bl	8015c8c <gos_messageRx>
 8012230:	4603      	mov	r3, r0
 8012232:	2b55      	cmp	r3, #85	@ 0x55
 8012234:	d108      	bne.n	8012248 <svl_sdhIplSoftwareInstallReqCallback+0x84>
	{
		(void_t) svl_iplSendMessage(0xA42, (u8_t*)respMsg.messageBytes, sizeof(u16_t));
 8012236:	f107 0314 	add.w	r3, r7, #20
 801223a:	3303      	adds	r3, #3
 801223c:	2202      	movs	r2, #2
 801223e:	4619      	mov	r1, r3
 8012240:	f640 2042 	movw	r0, #2626	@ 0xa42
 8012244:	f7fd fd34 	bl	800fcb0 <svl_iplSendMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 8012248:	bf00      	nop
 801224a:	3778      	adds	r7, #120	@ 0x78
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	200006d7 	.word	0x200006d7
 8012254:	200006d4 	.word	0x200006d4

08012258 <svl_sdhIplBinaryEraseReqCallback>:

GOS_STATIC void_t svl_sdhIplBinaryEraseReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b09e      	sub	sp, #120	@ 0x78
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
	svl_sdhControlMsg_t controlMsg = {0};
 8012264:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8012268:	2200      	movs	r2, #0
 801226a:	601a      	str	r2, [r3, #0]
 801226c:	605a      	str	r2, [r3, #4]
 801226e:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 8012270:	f24a 33ef 	movw	r3, #41967	@ 0xa3ef
 8012274:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8012278:	2300      	movs	r3, #0
 801227a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	gos_message_t respMsg = {0};
 801227e:	f107 0314 	add.w	r3, r7, #20
 8012282:	2254      	movs	r2, #84	@ 0x54
 8012284:	2100      	movs	r1, #0
 8012286:	4618      	mov	r0, r3
 8012288:	f006 fff8 	bl	801927c <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_ERASE_REQ;
 801228c:	2306      	movs	r3, #6
 801228e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	controlMsg.pData = pData;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	673b      	str	r3, [r7, #112]	@ 0x70
	controlMsg.dataSize = size; //sizeof(u16_t) + sizeof(bool_t);
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	b29b      	uxth	r3, r3
 801229a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 801229e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80122a2:	220c      	movs	r2, #12
 80122a4:	4619      	mov	r1, r3
 80122a6:	480f      	ldr	r0, [pc, #60]	@ (80122e4 <svl_sdhIplBinaryEraseReqCallback+0x8c>)
 80122a8:	f007 f87f 	bl	80193aa <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 80122ac:	480e      	ldr	r0, [pc, #56]	@ (80122e8 <svl_sdhIplBinaryEraseReqCallback+0x90>)
 80122ae:	f003 fded 	bl	8015e8c <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 300000) == GOS_SUCCESS)
 80122b2:	f107 0114 	add.w	r1, r7, #20
 80122b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80122ba:	f249 32e0 	movw	r2, #37856	@ 0x93e0
 80122be:	4618      	mov	r0, r3
 80122c0:	f003 fce4 	bl	8015c8c <gos_messageRx>
 80122c4:	4603      	mov	r3, r0
 80122c6:	2b55      	cmp	r3, #85	@ 0x55
 80122c8:	d108      	bne.n	80122dc <svl_sdhIplBinaryEraseReqCallback+0x84>
	{
		(void_t) svl_iplSendMessage(0xA52, (u8_t*)respMsg.messageBytes, sizeof(u16_t));
 80122ca:	f107 0314 	add.w	r3, r7, #20
 80122ce:	3303      	adds	r3, #3
 80122d0:	2202      	movs	r2, #2
 80122d2:	4619      	mov	r1, r3
 80122d4:	f640 2052 	movw	r0, #2642	@ 0xa52
 80122d8:	f7fd fcea 	bl	800fcb0 <svl_iplSendMessage>
	}
	else
	{
		// Nothing to do.
	}
}
 80122dc:	bf00      	nop
 80122de:	3778      	adds	r7, #120	@ 0x78
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	200006d7 	.word	0x200006d7
 80122e8:	200006d4 	.word	0x200006d4

080122ec <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80122f4:	23ae      	movs	r3, #174	@ 0xae
 80122f6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d006      	beq.n	801230c <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80122fe:	221c      	movs	r2, #28
 8012300:	6879      	ldr	r1, [r7, #4]
 8012302:	4805      	ldr	r0, [pc, #20]	@ (8012318 <gos_driverInit+0x2c>)
 8012304:	f007 f851 	bl	80193aa <memcpy>
        driverInitResult = GOS_SUCCESS;
 8012308:	2355      	movs	r3, #85	@ 0x55
 801230a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 801230c:	7bfb      	ldrb	r3, [r7, #15]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	2000619c 	.word	0x2000619c

0801231c <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8012324:	23ae      	movs	r3, #174	@ 0xae
 8012326:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 8012328:	4b07      	ldr	r3, [pc, #28]	@ (8012348 <gos_traceDriverTransmitString+0x2c>)
 801232a:	689b      	ldr	r3, [r3, #8]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d005      	beq.n	801233c <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 8012330:	4b05      	ldr	r3, [pc, #20]	@ (8012348 <gos_traceDriverTransmitString+0x2c>)
 8012332:	689b      	ldr	r3, [r3, #8]
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	4798      	blx	r3
 8012338:	4603      	mov	r3, r0
 801233a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 801233c:	7bfb      	ldrb	r3, [r7, #15]
}
 801233e:	4618      	mov	r0, r3
 8012340:	3710      	adds	r7, #16
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	2000619c 	.word	0x2000619c

0801234c <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8012354:	23ae      	movs	r3, #174	@ 0xae
 8012356:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 8012358:	4b07      	ldr	r3, [pc, #28]	@ (8012378 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d005      	beq.n	801236c <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 8012360:	4b05      	ldr	r3, [pc, #20]	@ (8012378 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	4798      	blx	r3
 8012368:	4603      	mov	r3, r0
 801236a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 801236c:	7bfb      	ldrb	r3, [r7, #15]
}
 801236e:	4618      	mov	r0, r3
 8012370:	3710      	adds	r7, #16
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	2000619c 	.word	0x2000619c

0801237c <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 8012382:	23ae      	movs	r3, #174	@ 0xae
 8012384:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 8012386:	2301      	movs	r3, #1
 8012388:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801238a:	2301      	movs	r3, #1
 801238c:	80fb      	strh	r3, [r7, #6]
 801238e:	e038      	b.n	8012402 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 8012390:	88fb      	ldrh	r3, [r7, #6]
 8012392:	4a6b      	ldr	r2, [pc, #428]	@ (8012540 <gos_kernelInit+0x1c4>)
 8012394:	216a      	movs	r1, #106	@ 0x6a
 8012396:	fb01 f303 	mul.w	r3, r1, r3
 801239a:	4413      	add	r3, r2
 801239c:	2200      	movs	r2, #0
 801239e:	701a      	strb	r2, [r3, #0]
 80123a0:	2200      	movs	r2, #0
 80123a2:	705a      	strb	r2, [r3, #1]
 80123a4:	2200      	movs	r2, #0
 80123a6:	709a      	strb	r2, [r3, #2]
 80123a8:	2200      	movs	r2, #0
 80123aa:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 80123ac:	88fb      	ldrh	r3, [r7, #6]
 80123ae:	4a64      	ldr	r2, [pc, #400]	@ (8012540 <gos_kernelInit+0x1c4>)
 80123b0:	216a      	movs	r1, #106	@ 0x6a
 80123b2:	fb01 f303 	mul.w	r3, r1, r3
 80123b6:	4413      	add	r3, r2
 80123b8:	3306      	adds	r3, #6
 80123ba:	22ff      	movs	r2, #255	@ 0xff
 80123bc:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 80123be:	88fb      	ldrh	r3, [r7, #6]
 80123c0:	4a5f      	ldr	r2, [pc, #380]	@ (8012540 <gos_kernelInit+0x1c4>)
 80123c2:	216a      	movs	r1, #106	@ 0x6a
 80123c4:	fb01 f303 	mul.w	r3, r1, r3
 80123c8:	4413      	add	r3, r2
 80123ca:	3307      	adds	r3, #7
 80123cc:	22ff      	movs	r2, #255	@ 0xff
 80123ce:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 80123d0:	88fb      	ldrh	r3, [r7, #6]
 80123d2:	4a5b      	ldr	r2, [pc, #364]	@ (8012540 <gos_kernelInit+0x1c4>)
 80123d4:	216a      	movs	r1, #106	@ 0x6a
 80123d6:	fb01 f303 	mul.w	r3, r1, r3
 80123da:	4413      	add	r3, r2
 80123dc:	3304      	adds	r3, #4
 80123de:	2205      	movs	r2, #5
 80123e0:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 80123e2:	88fb      	ldrh	r3, [r7, #6]
 80123e4:	4a56      	ldr	r2, [pc, #344]	@ (8012540 <gos_kernelInit+0x1c4>)
 80123e6:	216a      	movs	r1, #106	@ 0x6a
 80123e8:	fb01 f303 	mul.w	r3, r1, r3
 80123ec:	4413      	add	r3, r2
 80123ee:	3328      	adds	r3, #40	@ 0x28
 80123f0:	2200      	movs	r2, #0
 80123f2:	709a      	strb	r2, [r3, #2]
 80123f4:	2200      	movs	r2, #0
 80123f6:	f042 0201 	orr.w	r2, r2, #1
 80123fa:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80123fc:	88fb      	ldrh	r3, [r7, #6]
 80123fe:	3301      	adds	r3, #1
 8012400:	80fb      	strh	r3, [r7, #6]
 8012402:	88fb      	ldrh	r3, [r7, #6]
 8012404:	2b11      	cmp	r3, #17
 8012406:	d9c3      	bls.n	8012390 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 8012408:	4b4e      	ldr	r3, [pc, #312]	@ (8012544 <gos_kernelInit+0x1c8>)
 801240a:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	3b04      	subs	r3, #4
 8012410:	603b      	str	r3, [r7, #0]
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012418:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	3b04      	subs	r3, #4
 801241e:	603b      	str	r3, [r7, #0]
 8012420:	4a49      	ldr	r2, [pc, #292]	@ (8012548 <gos_kernelInit+0x1cc>)
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	3b04      	subs	r3, #4
 801242a:	603b      	str	r3, [r7, #0]
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	f06f 0202 	mvn.w	r2, #2
 8012432:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	3b04      	subs	r3, #4
 8012438:	603b      	str	r3, [r7, #0]
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8012440:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	3b04      	subs	r3, #4
 8012446:	603b      	str	r3, [r7, #0]
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 801244e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	3b04      	subs	r3, #4
 8012454:	603b      	str	r3, [r7, #0]
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 801245c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	3b04      	subs	r3, #4
 8012462:	603b      	str	r3, [r7, #0]
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 801246a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	3b04      	subs	r3, #4
 8012470:	603b      	str	r3, [r7, #0]
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	2200      	movs	r2, #0
 8012476:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	3b04      	subs	r3, #4
 801247c:	603b      	str	r3, [r7, #0]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8012484:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	3b04      	subs	r3, #4
 801248a:	603b      	str	r3, [r7, #0]
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8012492:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	3b04      	subs	r3, #4
 8012498:	603b      	str	r3, [r7, #0]
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80124a0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	3b04      	subs	r3, #4
 80124a6:	603b      	str	r3, [r7, #0]
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80124ae:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	3b04      	subs	r3, #4
 80124b4:	603b      	str	r3, [r7, #0]
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80124bc:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	3b04      	subs	r3, #4
 80124c2:	603b      	str	r3, [r7, #0]
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80124ca:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	3b04      	subs	r3, #4
 80124d0:	603b      	str	r3, [r7, #0]
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80124d8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	3b04      	subs	r3, #4
 80124de:	603b      	str	r3, [r7, #0]
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80124e6:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	4a15      	ldr	r2, [pc, #84]	@ (8012540 <gos_kernelInit+0x1c4>)
 80124ec:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 80124ee:	4b14      	ldr	r3, [pc, #80]	@ (8012540 <gos_kernelInit+0x1c4>)
 80124f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124f2:	4a13      	ldr	r2, [pc, #76]	@ (8012540 <gos_kernelInit+0x1c4>)
 80124f4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80124f8:	b292      	uxth	r2, r2
 80124fa:	1a9b      	subs	r3, r3, r2
 80124fc:	3340      	adds	r3, #64	@ 0x40
 80124fe:	4a10      	ldr	r2, [pc, #64]	@ (8012540 <gos_kernelInit+0x1c4>)
 8012500:	f8c2 3066 	str.w	r3, [r2, #102]	@ 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 8012504:	4b11      	ldr	r3, [pc, #68]	@ (801254c <gos_kernelInit+0x1d0>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4a10      	ldr	r2, [pc, #64]	@ (801254c <gos_kernelInit+0x1d0>)
 801250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	4b0e      	ldr	r3, [pc, #56]	@ (801254c <gos_kernelInit+0x1d0>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a0d      	ldr	r2, [pc, #52]	@ (801254c <gos_kernelInit+0x1d0>)
 8012516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801251a:	6013      	str	r3, [r2, #0]
 801251c:	4b0b      	ldr	r3, [pc, #44]	@ (801254c <gos_kernelInit+0x1d0>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4a0a      	ldr	r2, [pc, #40]	@ (801254c <gos_kernelInit+0x1d0>)
 8012522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012526:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 8012528:	4b09      	ldr	r3, [pc, #36]	@ (8012550 <gos_kernelInit+0x1d4>)
 801252a:	2200      	movs	r2, #0
 801252c:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 801252e:	2355      	movs	r3, #85	@ 0x55
 8012530:	717b      	strb	r3, [r7, #5]

    return initResult;
 8012532:	797b      	ldrb	r3, [r7, #5]
}
 8012534:	4618      	mov	r0, r3
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr
 8012540:	20000828 	.word	0x20000828
 8012544:	2001ee00 	.word	0x2001ee00
 8012548:	08015161 	.word	0x08015161
 801254c:	e000ed24 	.word	0xe000ed24
 8012550:	200061b9 	.word	0x200061b9

08012554 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 801255a:	23ae      	movs	r3, #174	@ 0xae
 801255c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 801255e:	4b19      	ldr	r3, [pc, #100]	@ (80125c4 <gos_kernelStart+0x70>)
 8012560:	2200      	movs	r2, #0
 8012562:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 8012564:	f000 fea2 	bl	80132ac <gos_kernelGetCurrentPsp>
 8012568:	f380 8809 	msr	PSP, r0
 801256c:	f3ef 8014 	mrs	r0, CONTROL
 8012570:	f040 0002 	orr.w	r0, r0, #2
 8012574:	f380 8814 	msr	CONTROL, r0
 8012578:	f3ef 8014 	mrs	r0, CONTROL
 801257c:	f040 0001 	orr.w	r0, r0, #1
 8012580:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 8012584:	4b0f      	ldr	r3, [pc, #60]	@ (80125c4 <gos_kernelStart+0x70>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4a0f      	ldr	r2, [pc, #60]	@ (80125c8 <gos_kernelStart+0x74>)
 801258a:	216a      	movs	r1, #106	@ 0x6a
 801258c:	fb01 f303 	mul.w	r3, r1, r3
 8012590:	4413      	add	r3, r2
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8012596:	480d      	ldr	r0, [pc, #52]	@ (80125cc <gos_kernelStart+0x78>)
 8012598:	f006 f8ba 	bl	8018710 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 801259c:	4b0c      	ldr	r3, [pc, #48]	@ (80125d0 <gos_kernelStart+0x7c>)
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d005      	beq.n	80125b0 <gos_kernelStart+0x5c>
 80125a4:	4b0a      	ldr	r3, [pc, #40]	@ (80125d0 <gos_kernelStart+0x7c>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	3b01      	subs	r3, #1
 80125aa:	b2da      	uxtb	r2, r3
 80125ac:	4b08      	ldr	r3, [pc, #32]	@ (80125d0 <gos_kernelStart+0x7c>)
 80125ae:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 80125b0:	4b08      	ldr	r3, [pc, #32]	@ (80125d4 <gos_kernelStart+0x80>)
 80125b2:	2236      	movs	r2, #54	@ 0x36
 80125b4:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 80125ba:	79fb      	ldrb	r3, [r7, #7]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	200061c0 	.word	0x200061c0
 80125c8:	20000828 	.word	0x20000828
 80125cc:	200061c8 	.word	0x200061c8
 80125d0:	200061b9 	.word	0x200061b9
 80125d4:	20000824 	.word	0x20000824

080125d8 <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 80125e0:	23ae      	movs	r3, #174	@ 0xae
 80125e2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d008      	beq.n	80125fc <gos_kernelRegisterSysTickHook+0x24>
 80125ea:	4b08      	ldr	r3, [pc, #32]	@ (801260c <gos_kernelRegisterSysTickHook+0x34>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d104      	bne.n	80125fc <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 80125f2:	4a06      	ldr	r2, [pc, #24]	@ (801260c <gos_kernelRegisterSysTickHook+0x34>)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 80125f8:	2355      	movs	r3, #85	@ 0x55
 80125fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 80125fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	200061dc 	.word	0x200061dc

08012610 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 8012616:	4b15      	ldr	r3, [pc, #84]	@ (801266c <SysTick_Handler+0x5c>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	3301      	adds	r3, #1
 801261c:	4a13      	ldr	r2, [pc, #76]	@ (801266c <SysTick_Handler+0x5c>)
 801261e:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 8012620:	2001      	movs	r0, #1
 8012622:	f005 fae5 	bl	8017bf0 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 8012626:	4b12      	ldr	r3, [pc, #72]	@ (8012670 <SysTick_Handler+0x60>)
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	2b36      	cmp	r3, #54	@ 0x36
 801262c:	d113      	bne.n	8012656 <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 801262e:	f000 fdad 	bl	801318c <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 8012632:	4b10      	ldr	r3, [pc, #64]	@ (8012674 <SysTick_Handler+0x64>)
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d10d      	bne.n	8012656 <SysTick_Handler+0x46>
 801263a:	2316      	movs	r3, #22
 801263c:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 801263e:	79fb      	ldrb	r3, [r7, #7]
 8012640:	2b16      	cmp	r3, #22
 8012642:	d106      	bne.n	8012652 <SysTick_Handler+0x42>
 8012644:	4b0c      	ldr	r3, [pc, #48]	@ (8012678 <SysTick_Handler+0x68>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a0b      	ldr	r2, [pc, #44]	@ (8012678 <SysTick_Handler+0x68>)
 801264a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801264e:	6013      	str	r3, [r2, #0]
}
 8012650:	e000      	b.n	8012654 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 8012652:	dfff      	svc	255	@ 0xff
}
 8012654:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 8012656:	4b09      	ldr	r3, [pc, #36]	@ (801267c <SysTick_Handler+0x6c>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 801265e:	4b07      	ldr	r3, [pc, #28]	@ (801267c <SysTick_Handler+0x6c>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4798      	blx	r3
}
 8012664:	bf00      	nop
 8012666:	3708      	adds	r7, #8
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	200061c4 	.word	0x200061c4
 8012670:	20000824 	.word	0x20000824
 8012674:	200061b9 	.word	0x200061b9
 8012678:	e000ed04 	.word	0xe000ed04
 801267c:	200061dc 	.word	0x200061dc

08012680 <gos_kernelGetSysTicks>:
{
 8012680:	b480      	push	{r7}
 8012682:	af00      	add	r7, sp, #0
    return sysTicks;
 8012684:	4b03      	ldr	r3, [pc, #12]	@ (8012694 <gos_kernelGetSysTicks+0x14>)
 8012686:	681b      	ldr	r3, [r3, #0]
}
 8012688:	4618      	mov	r0, r3
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	200061c4 	.word	0x200061c4

08012698 <gos_kernelGetCpuUsage>:
{
 8012698:	b480      	push	{r7}
 801269a:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 801269c:	4b06      	ldr	r3, [pc, #24]	@ (80126b8 <gos_kernelGetCpuUsage+0x20>)
 801269e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 80126a8:	3310      	adds	r3, #16
 80126aa:	b29b      	uxth	r3, r3
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	20000828 	.word	0x20000828

080126bc <gos_kernelReset>:
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
	if (kernelPreResetHookFunction != NULL)
 80126c2:	4b0e      	ldr	r3, [pc, #56]	@ (80126fc <gos_kernelReset+0x40>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d002      	beq.n	80126d0 <gos_kernelReset+0x14>
		kernelPreResetHookFunction();
 80126ca:	4b0c      	ldr	r3, [pc, #48]	@ (80126fc <gos_kernelReset+0x40>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4798      	blx	r3
    resetRequired = GOS_TRUE;
 80126d0:	4b0b      	ldr	r3, [pc, #44]	@ (8012700 <gos_kernelReset+0x44>)
 80126d2:	2236      	movs	r2, #54	@ 0x36
 80126d4:	701a      	strb	r2, [r3, #0]
 80126d6:	2309      	movs	r3, #9
 80126d8:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 80126da:	79fb      	ldrb	r3, [r7, #7]
 80126dc:	2b16      	cmp	r3, #22
 80126de:	d106      	bne.n	80126ee <gos_kernelReset+0x32>
 80126e0:	4b08      	ldr	r3, [pc, #32]	@ (8012704 <gos_kernelReset+0x48>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a07      	ldr	r2, [pc, #28]	@ (8012704 <gos_kernelReset+0x48>)
 80126e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80126ea:	6013      	str	r3, [r2, #0]
}
 80126ec:	e000      	b.n	80126f0 <gos_kernelReset+0x34>
    gos_ported_reschedule(privilege);
 80126ee:	dfff      	svc	255	@ 0xff
}
 80126f0:	bf00      	nop
}
 80126f2:	bf00      	nop
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	200061e0 	.word	0x200061e0
 8012700:	20000825 	.word	0x20000825
 8012704:	e000ed04 	.word	0xe000ed04

08012708 <gos_kernelDelayMs>:
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 8012712:	4b0a      	ldr	r3, [pc, #40]	@ (801273c <gos_kernelDelayMs+0x34>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 8012718:	bf00      	nop
 801271a:	4b08      	ldr	r3, [pc, #32]	@ (801273c <gos_kernelDelayMs+0x34>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	b29a      	uxth	r2, r3
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	b29b      	uxth	r3, r3
 8012724:	1ad3      	subs	r3, r2, r3
 8012726:	b29b      	uxth	r3, r3
 8012728:	88fa      	ldrh	r2, [r7, #6]
 801272a:	429a      	cmp	r2, r3
 801272c:	d8f5      	bhi.n	801271a <gos_kernelDelayMs+0x12>
}
 801272e:	bf00      	nop
 8012730:	bf00      	nop
 8012732:	3714      	adds	r7, #20
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr
 801273c:	200061c4 	.word	0x200061c4

08012740 <gos_kernelCalculateTaskCpuUsages>:
{
 8012740:	b590      	push	{r4, r7, lr}
 8012742:	b087      	sub	sp, #28
 8012744:	af00      	add	r7, sp, #0
 8012746:	4603      	mov	r3, r0
 8012748:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 801274a:	2300      	movs	r3, #0
 801274c:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 801274e:	2300      	movs	r3, #0
 8012750:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 8012752:	2300      	movs	r3, #0
 8012754:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8012756:	4ba8      	ldr	r3, [pc, #672]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8012758:	795b      	ldrb	r3, [r3, #5]
 801275a:	461a      	mov	r2, r3
 801275c:	4ba7      	ldr	r3, [pc, #668]	@ (80129fc <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 801275e:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 8012762:	4ba5      	ldr	r3, [pc, #660]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8012764:	791b      	ldrb	r3, [r3, #4]
 8012766:	4619      	mov	r1, r3
 8012768:	4ba5      	ldr	r3, [pc, #660]	@ (8012a00 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 801276a:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 801276e:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8012770:	4ba1      	ldr	r3, [pc, #644]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8012772:	885b      	ldrh	r3, [r3, #2]
 8012774:	4619      	mov	r1, r3
 8012776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801277a:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 801277e:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8012780:	4a9d      	ldr	r2, [pc, #628]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8012782:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 8012784:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8012786:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012788:	2300      	movs	r3, #0
 801278a:	82fb      	strh	r3, [r7, #22]
 801278c:	e10f      	b.n	80129ae <gos_kernelCalculateTaskCpuUsages+0x26e>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 801278e:	8afb      	ldrh	r3, [r7, #22]
 8012790:	4a9c      	ldr	r2, [pc, #624]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012792:	216a      	movs	r1, #106	@ 0x6a
 8012794:	fb01 f303 	mul.w	r3, r1, r3
 8012798:	4413      	add	r3, r2
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 810b 	beq.w	80129b8 <gos_kernelCalculateTaskCpuUsages+0x278>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80127a2:	8afb      	ldrh	r3, [r7, #22]
 80127a4:	4a97      	ldr	r2, [pc, #604]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80127a6:	216a      	movs	r1, #106	@ 0x6a
 80127a8:	fb01 f303 	mul.w	r3, r1, r3
 80127ac:	4413      	add	r3, r2
 80127ae:	335a      	adds	r3, #90	@ 0x5a
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	461a      	mov	r2, r3
 80127b4:	4b91      	ldr	r3, [pc, #580]	@ (80129fc <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80127b6:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80127ba:	8afb      	ldrh	r3, [r7, #22]
 80127bc:	4991      	ldr	r1, [pc, #580]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80127be:	206a      	movs	r0, #106	@ 0x6a
 80127c0:	fb00 f303 	mul.w	r3, r0, r3
 80127c4:	440b      	add	r3, r1
 80127c6:	3359      	adds	r3, #89	@ 0x59
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	4619      	mov	r1, r3
 80127cc:	4b8c      	ldr	r3, [pc, #560]	@ (8012a00 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 80127ce:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80127d2:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80127d4:	8afb      	ldrh	r3, [r7, #22]
 80127d6:	498b      	ldr	r1, [pc, #556]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80127d8:	206a      	movs	r0, #106	@ 0x6a
 80127da:	fb00 f303 	mul.w	r3, r0, r3
 80127de:	440b      	add	r3, r1
 80127e0:	3350      	adds	r3, #80	@ 0x50
 80127e2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4619      	mov	r1, r3
 80127ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80127ee:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80127f2:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 80127f4:	8afa      	ldrh	r2, [r7, #22]
 80127f6:	4983      	ldr	r1, [pc, #524]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80127f8:	206a      	movs	r0, #106	@ 0x6a
 80127fa:	fb00 f202 	mul.w	r2, r0, r2
 80127fe:	440a      	add	r2, r1
 8012800:	3250      	adds	r2, #80	@ 0x50
 8012802:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8012806:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8012808:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 801280a:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	2b00      	cmp	r3, #0
 8012810:	f000 80ca 	beq.w	80129a8 <gos_kernelCalculateTaskCpuUsages+0x268>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f242 7210 	movw	r2, #10000	@ 0x2710
 801281a:	fb03 f202 	mul.w	r2, r3, r2
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	fbb2 f2f3 	udiv	r2, r2, r3
 8012824:	8afb      	ldrh	r3, [r7, #22]
 8012826:	b290      	uxth	r0, r2
 8012828:	4a76      	ldr	r2, [pc, #472]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801282a:	216a      	movs	r1, #106	@ 0x6a
 801282c:	fb01 f303 	mul.w	r3, r1, r3
 8012830:	4413      	add	r3, r2
 8012832:	3360      	adds	r3, #96	@ 0x60
 8012834:	4602      	mov	r2, r0
 8012836:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8012838:	79fb      	ldrb	r3, [r7, #7]
 801283a:	2b36      	cmp	r3, #54	@ 0x36
 801283c:	d004      	beq.n	8012848 <gos_kernelCalculateTaskCpuUsages+0x108>
 801283e:	4b6e      	ldr	r3, [pc, #440]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8012840:	791b      	ldrb	r3, [r3, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	f000 80b0 	beq.w	80129a8 <gos_kernelCalculateTaskCpuUsages+0x268>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801284e:	fb03 f202 	mul.w	r2, r3, r2
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	fbb2 f2f3 	udiv	r2, r2, r3
 8012858:	8afb      	ldrh	r3, [r7, #22]
 801285a:	b290      	uxth	r0, r2
 801285c:	4a69      	ldr	r2, [pc, #420]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801285e:	216a      	movs	r1, #106	@ 0x6a
 8012860:	fb01 f303 	mul.w	r3, r1, r3
 8012864:	4413      	add	r3, r2
 8012866:	3360      	adds	r3, #96	@ 0x60
 8012868:	4602      	mov	r2, r0
 801286a:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 801286c:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 801286e:	226a      	movs	r2, #106	@ 0x6a
 8012870:	fb02 f303 	mul.w	r3, r2, r3
 8012874:	3348      	adds	r3, #72	@ 0x48
 8012876:	4a63      	ldr	r2, [pc, #396]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012878:	4413      	add	r3, r2
 801287a:	1d18      	adds	r0, r3, #4
 801287c:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 801287e:	4a61      	ldr	r2, [pc, #388]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012880:	216a      	movs	r1, #106	@ 0x6a
 8012882:	fb01 f303 	mul.w	r3, r1, r3
 8012886:	4413      	add	r3, r2
 8012888:	3350      	adds	r3, #80	@ 0x50
 801288a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801288e:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 8012890:	461a      	mov	r2, r3
 8012892:	2100      	movs	r1, #0
 8012894:	f005 f824 	bl	80178e0 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8012898:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 801289a:	226a      	movs	r2, #106	@ 0x6a
 801289c:	fb02 f303 	mul.w	r3, r2, r3
 80128a0:	3348      	adds	r3, #72	@ 0x48
 80128a2:	4a58      	ldr	r2, [pc, #352]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80128a4:	4413      	add	r3, r2
 80128a6:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 80128a8:	8afb      	ldrh	r3, [r7, #22]
 80128aa:	4a56      	ldr	r2, [pc, #344]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80128ac:	216a      	movs	r1, #106	@ 0x6a
 80128ae:	fb01 f303 	mul.w	r3, r1, r3
 80128b2:	4413      	add	r3, r2
 80128b4:	3350      	adds	r3, #80	@ 0x50
 80128b6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80128ba:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 80128bc:	8afb      	ldrh	r3, [r7, #22]
 80128be:	4951      	ldr	r1, [pc, #324]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80128c0:	246a      	movs	r4, #106	@ 0x6a
 80128c2:	fb04 f303 	mul.w	r3, r4, r3
 80128c6:	440b      	add	r3, r1
 80128c8:	3359      	adds	r3, #89	@ 0x59
 80128ca:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 80128cc:	4619      	mov	r1, r3
 80128ce:	0149      	lsls	r1, r1, #5
 80128d0:	1ac9      	subs	r1, r1, r3
 80128d2:	0089      	lsls	r1, r1, #2
 80128d4:	440b      	add	r3, r1
 80128d6:	00db      	lsls	r3, r3, #3
 80128d8:	b29b      	uxth	r3, r3
 80128da:	4413      	add	r3, r2
 80128dc:	b29b      	uxth	r3, r3
 80128de:	4619      	mov	r1, r3
 80128e0:	f005 f8de 	bl	8017aa0 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 80128e4:	8afb      	ldrh	r3, [r7, #22]
 80128e6:	4a47      	ldr	r2, [pc, #284]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80128e8:	216a      	movs	r1, #106	@ 0x6a
 80128ea:	fb01 f303 	mul.w	r3, r1, r3
 80128ee:	4413      	add	r3, r2
 80128f0:	3350      	adds	r3, #80	@ 0x50
 80128f2:	2200      	movs	r2, #0
 80128f4:	731a      	strb	r2, [r3, #12]
 80128f6:	2200      	movs	r2, #0
 80128f8:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 80128fa:	8afb      	ldrh	r3, [r7, #22]
 80128fc:	4a41      	ldr	r2, [pc, #260]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80128fe:	216a      	movs	r1, #106	@ 0x6a
 8012900:	fb01 f303 	mul.w	r3, r1, r3
 8012904:	4413      	add	r3, r2
 8012906:	335b      	adds	r3, #91	@ 0x5b
 8012908:	2200      	movs	r2, #0
 801290a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 801290c:	8afb      	ldrh	r3, [r7, #22]
 801290e:	4a3d      	ldr	r2, [pc, #244]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012910:	216a      	movs	r1, #106	@ 0x6a
 8012912:	fb01 f303 	mul.w	r3, r1, r3
 8012916:	4413      	add	r3, r2
 8012918:	335a      	adds	r3, #90	@ 0x5a
 801291a:	2200      	movs	r2, #0
 801291c:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 801291e:	8afb      	ldrh	r3, [r7, #22]
 8012920:	4a38      	ldr	r2, [pc, #224]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012922:	216a      	movs	r1, #106	@ 0x6a
 8012924:	fb01 f303 	mul.w	r3, r1, r3
 8012928:	4413      	add	r3, r2
 801292a:	3359      	adds	r3, #89	@ 0x59
 801292c:	2200      	movs	r2, #0
 801292e:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8012930:	8afb      	ldrh	r3, [r7, #22]
 8012932:	4a34      	ldr	r2, [pc, #208]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012934:	216a      	movs	r1, #106	@ 0x6a
 8012936:	fb01 f303 	mul.w	r3, r1, r3
 801293a:	4413      	add	r3, r2
 801293c:	3350      	adds	r3, #80	@ 0x50
 801293e:	2200      	movs	r2, #0
 8012940:	71da      	strb	r2, [r3, #7]
 8012942:	2200      	movs	r2, #0
 8012944:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8012946:	8afb      	ldrh	r3, [r7, #22]
 8012948:	4a2e      	ldr	r2, [pc, #184]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801294a:	216a      	movs	r1, #106	@ 0x6a
 801294c:	fb01 f303 	mul.w	r3, r1, r3
 8012950:	4413      	add	r3, r2
 8012952:	3350      	adds	r3, #80	@ 0x50
 8012954:	2200      	movs	r2, #0
 8012956:	715a      	strb	r2, [r3, #5]
 8012958:	2200      	movs	r2, #0
 801295a:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 801295c:	8afb      	ldrh	r3, [r7, #22]
 801295e:	4a29      	ldr	r2, [pc, #164]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012960:	216a      	movs	r1, #106	@ 0x6a
 8012962:	fb01 f303 	mul.w	r3, r1, r3
 8012966:	4413      	add	r3, r2
 8012968:	3360      	adds	r3, #96	@ 0x60
 801296a:	885b      	ldrh	r3, [r3, #2]
 801296c:	b29a      	uxth	r2, r3
 801296e:	8afb      	ldrh	r3, [r7, #22]
 8012970:	4924      	ldr	r1, [pc, #144]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8012972:	206a      	movs	r0, #106	@ 0x6a
 8012974:	fb00 f303 	mul.w	r3, r0, r3
 8012978:	440b      	add	r3, r1
 801297a:	3360      	adds	r3, #96	@ 0x60
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	b29b      	uxth	r3, r3
 8012980:	429a      	cmp	r2, r3
 8012982:	d911      	bls.n	80129a8 <gos_kernelCalculateTaskCpuUsages+0x268>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8012984:	8afa      	ldrh	r2, [r7, #22]
 8012986:	8afb      	ldrh	r3, [r7, #22]
 8012988:	491e      	ldr	r1, [pc, #120]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801298a:	206a      	movs	r0, #106	@ 0x6a
 801298c:	fb00 f202 	mul.w	r2, r0, r2
 8012990:	440a      	add	r2, r1
 8012992:	3260      	adds	r2, #96	@ 0x60
 8012994:	8852      	ldrh	r2, [r2, #2]
 8012996:	b290      	uxth	r0, r2
 8012998:	4a1a      	ldr	r2, [pc, #104]	@ (8012a04 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801299a:	216a      	movs	r1, #106	@ 0x6a
 801299c:	fb01 f303 	mul.w	r3, r1, r3
 80129a0:	4413      	add	r3, r2
 80129a2:	3360      	adds	r3, #96	@ 0x60
 80129a4:	4602      	mov	r2, r0
 80129a6:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80129a8:	8afb      	ldrh	r3, [r7, #22]
 80129aa:	3301      	adds	r3, #1
 80129ac:	82fb      	strh	r3, [r7, #22]
 80129ae:	8afb      	ldrh	r3, [r7, #22]
 80129b0:	2b11      	cmp	r3, #17
 80129b2:	f67f aeec 	bls.w	801278e <gos_kernelCalculateTaskCpuUsages+0x4e>
 80129b6:	e000      	b.n	80129ba <gos_kernelCalculateTaskCpuUsages+0x27a>
            break;
 80129b8:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80129ba:	79fb      	ldrb	r3, [r7, #7]
 80129bc:	2b36      	cmp	r3, #54	@ 0x36
 80129be:	d003      	beq.n	80129c8 <gos_kernelCalculateTaskCpuUsages+0x288>
 80129c0:	4b0d      	ldr	r3, [pc, #52]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129c2:	791b      	ldrb	r3, [r3, #4]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d013      	beq.n	80129f0 <gos_kernelCalculateTaskCpuUsages+0x2b0>
        monitoringTime.days         = 0u;
 80129c8:	4b0b      	ldr	r3, [pc, #44]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129ca:	2200      	movs	r2, #0
 80129cc:	71da      	strb	r2, [r3, #7]
 80129ce:	2200      	movs	r2, #0
 80129d0:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 80129d2:	4b09      	ldr	r3, [pc, #36]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 80129d8:	4b07      	ldr	r3, [pc, #28]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129da:	2200      	movs	r2, #0
 80129dc:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 80129de:	4b06      	ldr	r3, [pc, #24]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129e0:	2200      	movs	r2, #0
 80129e2:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 80129e4:	4b04      	ldr	r3, [pc, #16]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129e6:	2200      	movs	r2, #0
 80129e8:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 80129ea:	4b03      	ldr	r3, [pc, #12]	@ (80129f8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80129ec:	2200      	movs	r2, #0
 80129ee:	801a      	strh	r2, [r3, #0]
}
 80129f0:	bf00      	nop
 80129f2:	371c      	adds	r7, #28
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd90      	pop	{r4, r7, pc}
 80129f8:	200061cc 	.word	0x200061cc
 80129fc:	03938700 	.word	0x03938700
 8012a00:	000f4240 	.word	0x000f4240
 8012a04:	20000828 	.word	0x20000828

08012a08 <gos_kernelDump>:
{
 8012a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a0c:	b0a6      	sub	sp, #152	@ 0x98
 8012a0e:	af14      	add	r7, sp, #80	@ 0x50
    u16_t taskIndex = 0u;
 8012a10:	2300      	movs	r3, #0
 8012a12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 8012a16:	48ae      	ldr	r0, [pc, #696]	@ (8012cd0 <gos_kernelDump+0x2c8>)
 8012a18:	f005 fe1e 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8012a1c:	48ad      	ldr	r0, [pc, #692]	@ (8012cd4 <gos_kernelDump+0x2cc>)
 8012a1e:	f005 fe1b 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8012a22:	4bad      	ldr	r3, [pc, #692]	@ (8012cd8 <gos_kernelDump+0x2d0>)
 8012a24:	9302      	str	r3, [sp, #8]
 8012a26:	4bad      	ldr	r3, [pc, #692]	@ (8012cdc <gos_kernelDump+0x2d4>)
 8012a28:	9301      	str	r3, [sp, #4]
 8012a2a:	4bad      	ldr	r3, [pc, #692]	@ (8012ce0 <gos_kernelDump+0x2d8>)
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	4bad      	ldr	r3, [pc, #692]	@ (8012ce4 <gos_kernelDump+0x2dc>)
 8012a30:	4aad      	ldr	r2, [pc, #692]	@ (8012ce8 <gos_kernelDump+0x2e0>)
 8012a32:	49ae      	ldr	r1, [pc, #696]	@ (8012cec <gos_kernelDump+0x2e4>)
 8012a34:	48ae      	ldr	r0, [pc, #696]	@ (8012cf0 <gos_kernelDump+0x2e8>)
 8012a36:	f005 fe0f 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8012a3a:	48a6      	ldr	r0, [pc, #664]	@ (8012cd4 <gos_kernelDump+0x2cc>)
 8012a3c:	f005 fe0c 	bl	8018658 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012a40:	2300      	movs	r3, #0
 8012a42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8012a46:	e1cc      	b.n	8012de2 <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8012a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a4c:	4aa9      	ldr	r2, [pc, #676]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012a4e:	216a      	movs	r1, #106	@ 0x6a
 8012a50:	fb01 f303 	mul.w	r3, r1, r3
 8012a54:	4413      	add	r3, r2
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 81c8 	beq.w	8012dee <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 8012a5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a62:	4aa4      	ldr	r2, [pc, #656]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012a64:	216a      	movs	r1, #106	@ 0x6a
 8012a66:	fb01 f303 	mul.w	r3, r1, r3
 8012a6a:	4413      	add	r3, r2
 8012a6c:	3328      	adds	r3, #40	@ 0x28
 8012a6e:	885b      	ldrh	r3, [r3, #2]
 8012a70:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012a72:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 8012a74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a78:	226a      	movs	r2, #106	@ 0x6a
 8012a7a:	fb02 f303 	mul.w	r3, r2, r3
 8012a7e:	3308      	adds	r3, #8
 8012a80:	4a9c      	ldr	r2, [pc, #624]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012a82:	4413      	add	r3, r2
 8012a84:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8012a88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a8c:	4a99      	ldr	r2, [pc, #612]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012a8e:	216a      	movs	r1, #106	@ 0x6a
 8012a90:	fb01 f303 	mul.w	r3, r1, r3
 8012a94:	4413      	add	r3, r2
 8012a96:	3306      	adds	r3, #6
 8012a98:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8012a9a:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012a9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012aa0:	4a94      	ldr	r2, [pc, #592]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012aa2:	216a      	movs	r1, #106	@ 0x6a
 8012aa4:	fb01 f303 	mul.w	r3, r1, r3
 8012aa8:	4413      	add	r3, r2
 8012aaa:	3308      	adds	r3, #8
 8012aac:	881b      	ldrh	r3, [r3, #0]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	da02      	bge.n	8012abc <gos_kernelDump+0xb4>
 8012ab6:	4b90      	ldr	r3, [pc, #576]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012aba:	e001      	b.n	8012ac0 <gos_kernelDump+0xb8>
 8012abc:	4b8f      	ldr	r3, [pc, #572]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012ac0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012ac6:	216a      	movs	r1, #106	@ 0x6a
 8012ac8:	fb01 f303 	mul.w	r3, r1, r3
 8012acc:	4413      	add	r3, r2
 8012ace:	3308      	adds	r3, #8
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            (void_t) gos_shellDriverTransmitString(
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <gos_kernelDump+0xda>
 8012adc:	4b86      	ldr	r3, [pc, #536]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012ae0:	e001      	b.n	8012ae6 <gos_kernelDump+0xde>
 8012ae2:	4b86      	ldr	r3, [pc, #536]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012ae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012aea:	4a82      	ldr	r2, [pc, #520]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012aec:	216a      	movs	r1, #106	@ 0x6a
 8012aee:	fb01 f303 	mul.w	r3, r1, r3
 8012af2:	4413      	add	r3, r2
 8012af4:	3308      	adds	r3, #8
 8012af6:	881b      	ldrh	r3, [r3, #0]
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            (void_t) gos_shellDriverTransmitString(
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d002      	beq.n	8012b08 <gos_kernelDump+0x100>
 8012b02:	4b7d      	ldr	r3, [pc, #500]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b06:	e001      	b.n	8012b0c <gos_kernelDump+0x104>
 8012b08:	4b7c      	ldr	r3, [pc, #496]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012b0a:	637b      	str	r3, [r7, #52]	@ 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012b0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b10:	4a78      	ldr	r2, [pc, #480]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012b12:	216a      	movs	r1, #106	@ 0x6a
 8012b14:	fb01 f303 	mul.w	r3, r1, r3
 8012b18:	4413      	add	r3, r2
 8012b1a:	3308      	adds	r3, #8
 8012b1c:	881b      	ldrh	r3, [r3, #0]
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
            (void_t) gos_shellDriverTransmitString(
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d002      	beq.n	8012b2e <gos_kernelDump+0x126>
 8012b28:	4b73      	ldr	r3, [pc, #460]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b2c:	e001      	b.n	8012b32 <gos_kernelDump+0x12a>
 8012b2e:	4b73      	ldr	r3, [pc, #460]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012b30:	633b      	str	r3, [r7, #48]	@ 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012b32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b36:	4a6f      	ldr	r2, [pc, #444]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012b38:	216a      	movs	r1, #106	@ 0x6a
 8012b3a:	fb01 f303 	mul.w	r3, r1, r3
 8012b3e:	4413      	add	r3, r2
 8012b40:	3308      	adds	r3, #8
 8012b42:	881b      	ldrh	r3, [r3, #0]
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            (void_t) gos_shellDriverTransmitString(
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d002      	beq.n	8012b54 <gos_kernelDump+0x14c>
 8012b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012b52:	e001      	b.n	8012b58 <gos_kernelDump+0x150>
 8012b54:	4b69      	ldr	r3, [pc, #420]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012b58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b5c:	4a65      	ldr	r2, [pc, #404]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012b5e:	216a      	movs	r1, #106	@ 0x6a
 8012b60:	fb01 f303 	mul.w	r3, r1, r3
 8012b64:	4413      	add	r3, r2
 8012b66:	3308      	adds	r3, #8
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
            (void_t) gos_shellDriverTransmitString(
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <gos_kernelDump+0x172>
 8012b74:	4b60      	ldr	r3, [pc, #384]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b78:	e001      	b.n	8012b7e <gos_kernelDump+0x176>
 8012b7a:	4b60      	ldr	r3, [pc, #384]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012b7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b82:	4a5c      	ldr	r2, [pc, #368]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012b84:	216a      	movs	r1, #106	@ 0x6a
 8012b86:	fb01 f303 	mul.w	r3, r1, r3
 8012b8a:	4413      	add	r3, r2
 8012b8c:	3308      	adds	r3, #8
 8012b8e:	881b      	ldrh	r3, [r3, #0]
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
            (void_t) gos_shellDriverTransmitString(
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d002      	beq.n	8012ba0 <gos_kernelDump+0x198>
 8012b9a:	4b57      	ldr	r3, [pc, #348]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b9e:	e001      	b.n	8012ba4 <gos_kernelDump+0x19c>
 8012ba0:	4b56      	ldr	r3, [pc, #344]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012ba2:	627b      	str	r3, [r7, #36]	@ 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012ba4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ba8:	4a52      	ldr	r2, [pc, #328]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012baa:	216a      	movs	r1, #106	@ 0x6a
 8012bac:	fb01 f303 	mul.w	r3, r1, r3
 8012bb0:	4413      	add	r3, r2
 8012bb2:	3308      	adds	r3, #8
 8012bb4:	881b      	ldrh	r3, [r3, #0]
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
            (void_t) gos_shellDriverTransmitString(
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <gos_kernelDump+0x1be>
 8012bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012bc2:	623b      	str	r3, [r7, #32]
 8012bc4:	e001      	b.n	8012bca <gos_kernelDump+0x1c2>
 8012bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012bc8:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012bca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012bce:	4a49      	ldr	r2, [pc, #292]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012bd0:	216a      	movs	r1, #106	@ 0x6a
 8012bd2:	fb01 f303 	mul.w	r3, r1, r3
 8012bd6:	4413      	add	r3, r2
 8012bd8:	3308      	adds	r3, #8
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
            (void_t) gos_shellDriverTransmitString(
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d002      	beq.n	8012bec <gos_kernelDump+0x1e4>
 8012be6:	4b44      	ldr	r3, [pc, #272]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012be8:	61fb      	str	r3, [r7, #28]
 8012bea:	e001      	b.n	8012bf0 <gos_kernelDump+0x1e8>
 8012bec:	4b43      	ldr	r3, [pc, #268]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012bee:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012bf0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012bf4:	493f      	ldr	r1, [pc, #252]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012bf6:	236a      	movs	r3, #106	@ 0x6a
 8012bf8:	fb02 f303 	mul.w	r3, r2, r3
 8012bfc:	440b      	add	r3, r1
 8012bfe:	3308      	adds	r3, #8
 8012c00:	881b      	ldrh	r3, [r3, #0]
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
            (void_t) gos_shellDriverTransmitString(
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d002      	beq.n	8012c12 <gos_kernelDump+0x20a>
 8012c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012c0e:	61bb      	str	r3, [r7, #24]
 8012c10:	e001      	b.n	8012c16 <gos_kernelDump+0x20e>
 8012c12:	4b3a      	ldr	r3, [pc, #232]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012c14:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012c16:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012c1a:	4936      	ldr	r1, [pc, #216]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012c1c:	236a      	movs	r3, #106	@ 0x6a
 8012c1e:	fb02 f303 	mul.w	r3, r2, r3
 8012c22:	440b      	add	r3, r1
 8012c24:	3308      	adds	r3, #8
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d002      	beq.n	8012c38 <gos_kernelDump+0x230>
 8012c32:	4b31      	ldr	r3, [pc, #196]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012c34:	617b      	str	r3, [r7, #20]
 8012c36:	e001      	b.n	8012c3c <gos_kernelDump+0x234>
 8012c38:	4b30      	ldr	r3, [pc, #192]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012c3a:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012c3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012c40:	492c      	ldr	r1, [pc, #176]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012c42:	236a      	movs	r3, #106	@ 0x6a
 8012c44:	fb02 f303 	mul.w	r3, r2, r3
 8012c48:	440b      	add	r3, r1
 8012c4a:	3308      	adds	r3, #8
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d002      	beq.n	8012c5e <gos_kernelDump+0x256>
 8012c58:	4b27      	ldr	r3, [pc, #156]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012c5a:	613b      	str	r3, [r7, #16]
 8012c5c:	e001      	b.n	8012c62 <gos_kernelDump+0x25a>
 8012c5e:	4b27      	ldr	r3, [pc, #156]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012c60:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012c62:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012c66:	4923      	ldr	r1, [pc, #140]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012c68:	236a      	movs	r3, #106	@ 0x6a
 8012c6a:	fb02 f303 	mul.w	r3, r2, r3
 8012c6e:	440b      	add	r3, r1
 8012c70:	3308      	adds	r3, #8
 8012c72:	881b      	ldrh	r3, [r3, #0]
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d002      	beq.n	8012c84 <gos_kernelDump+0x27c>
 8012c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012c80:	60fb      	str	r3, [r7, #12]
 8012c82:	e001      	b.n	8012c88 <gos_kernelDump+0x280>
 8012c84:	4b1d      	ldr	r3, [pc, #116]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012c86:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012c88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012c8c:	4919      	ldr	r1, [pc, #100]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012c8e:	236a      	movs	r3, #106	@ 0x6a
 8012c90:	fb02 f303 	mul.w	r3, r2, r3
 8012c94:	440b      	add	r3, r1
 8012c96:	3308      	adds	r3, #8
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d002      	beq.n	8012caa <gos_kernelDump+0x2a2>
 8012ca4:	4b14      	ldr	r3, [pc, #80]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012ca6:	60bb      	str	r3, [r7, #8]
 8012ca8:	e001      	b.n	8012cae <gos_kernelDump+0x2a6>
 8012caa:	4b14      	ldr	r3, [pc, #80]	@ (8012cfc <gos_kernelDump+0x2f4>)
 8012cac:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012cae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012cb2:	4910      	ldr	r1, [pc, #64]	@ (8012cf4 <gos_kernelDump+0x2ec>)
 8012cb4:	236a      	movs	r3, #106	@ 0x6a
 8012cb6:	fb02 f303 	mul.w	r3, r2, r3
 8012cba:	440b      	add	r3, r1
 8012cbc:	3308      	adds	r3, #8
 8012cbe:	881b      	ldrh	r3, [r3, #0]
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d01a      	beq.n	8012d00 <gos_kernelDump+0x2f8>
 8012cca:	4b0b      	ldr	r3, [pc, #44]	@ (8012cf8 <gos_kernelDump+0x2f0>)
 8012ccc:	607b      	str	r3, [r7, #4]
 8012cce:	e019      	b.n	8012d04 <gos_kernelDump+0x2fc>
 8012cd0:	0801bddc 	.word	0x0801bddc
 8012cd4:	0801bdec 	.word	0x0801bdec
 8012cd8:	0801be88 	.word	0x0801be88
 8012cdc:	0801be90 	.word	0x0801be90
 8012ce0:	0801be98 	.word	0x0801be98
 8012ce4:	0801be48 	.word	0x0801be48
 8012ce8:	0801be50 	.word	0x0801be50
 8012cec:	0801be58 	.word	0x0801be58
 8012cf0:	0801be5c 	.word	0x0801be5c
 8012cf4:	20000828 	.word	0x20000828
 8012cf8:	0801bea4 	.word	0x0801bea4
 8012cfc:	0801beac 	.word	0x0801beac
 8012d00:	4b7d      	ldr	r3, [pc, #500]	@ (8012ef8 <gos_kernelDump+0x4f0>)
 8012d02:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8012d04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012d08:	497c      	ldr	r1, [pc, #496]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012d0a:	236a      	movs	r3, #106	@ 0x6a
 8012d0c:	fb02 f303 	mul.w	r3, r2, r3
 8012d10:	440b      	add	r3, r1
 8012d12:	3308      	adds	r3, #8
 8012d14:	881b      	ldrh	r3, [r3, #0]
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d001      	beq.n	8012d24 <gos_kernelDump+0x31c>
 8012d20:	4d77      	ldr	r5, [pc, #476]	@ (8012f00 <gos_kernelDump+0x4f8>)
 8012d22:	e000      	b.n	8012d26 <gos_kernelDump+0x31e>
 8012d24:	4d74      	ldr	r5, [pc, #464]	@ (8012ef8 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 8012d26:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012d2a:	4974      	ldr	r1, [pc, #464]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012d2c:	236a      	movs	r3, #106	@ 0x6a
 8012d2e:	fb02 f303 	mul.w	r3, r2, r3
 8012d32:	440b      	add	r3, r1
 8012d34:	3360      	adds	r3, #96	@ 0x60
 8012d36:	885b      	ldrh	r3, [r3, #2]
 8012d38:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8012d3a:	4b72      	ldr	r3, [pc, #456]	@ (8012f04 <gos_kernelDump+0x4fc>)
 8012d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8012d40:	095b      	lsrs	r3, r3, #5
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 8012d46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012d4a:	496c      	ldr	r1, [pc, #432]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012d4c:	236a      	movs	r3, #106	@ 0x6a
 8012d4e:	fb02 f303 	mul.w	r3, r2, r3
 8012d52:	440b      	add	r3, r1
 8012d54:	3360      	adds	r3, #96	@ 0x60
 8012d56:	885b      	ldrh	r3, [r3, #2]
 8012d58:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8012d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8012f04 <gos_kernelDump+0x4fc>)
 8012d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8012d60:	095a      	lsrs	r2, r3, #5
 8012d62:	2364      	movs	r3, #100	@ 0x64
 8012d64:	fb02 f303 	mul.w	r3, r2, r3
 8012d68:	1acb      	subs	r3, r1, r3
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	461c      	mov	r4, r3
 8012d6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012d72:	4962      	ldr	r1, [pc, #392]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012d74:	236a      	movs	r3, #106	@ 0x6a
 8012d76:	fb02 f303 	mul.w	r3, r2, r3
 8012d7a:	440b      	add	r3, r1
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f000 fc25 	bl	80135d0 <gos_kernelGetTaskStateString>
 8012d86:	4603      	mov	r3, r0
 8012d88:	9312      	str	r3, [sp, #72]	@ 0x48
 8012d8a:	9411      	str	r4, [sp, #68]	@ 0x44
 8012d8c:	9610      	str	r6, [sp, #64]	@ 0x40
 8012d8e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	930e      	str	r3, [sp, #56]	@ 0x38
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	930d      	str	r3, [sp, #52]	@ 0x34
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	9308      	str	r3, [sp, #32]
 8012dac:	6a3b      	ldr	r3, [r7, #32]
 8012dae:	9307      	str	r3, [sp, #28]
 8012db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db2:	9306      	str	r3, [sp, #24]
 8012db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db6:	9305      	str	r3, [sp, #20]
 8012db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dba:	9304      	str	r3, [sp, #16]
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dbe:	9303      	str	r3, [sp, #12]
 8012dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dc2:	9302      	str	r3, [sp, #8]
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc6:	9301      	str	r3, [sp, #4]
 8012dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	4653      	mov	r3, sl
 8012dce:	4642      	mov	r2, r8
 8012dd0:	4649      	mov	r1, r9
 8012dd2:	484d      	ldr	r0, [pc, #308]	@ (8012f08 <gos_kernelDump+0x500>)
 8012dd4:	f005 fc40 	bl	8018658 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012dd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ddc:	3301      	adds	r3, #1
 8012dde:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8012de2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012de6:	2b11      	cmp	r3, #17
 8012de8:	f67f ae2e 	bls.w	8012a48 <gos_kernelDump+0x40>
 8012dec:	e000      	b.n	8012df0 <gos_kernelDump+0x3e8>
            break;
 8012dee:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8012df0:	4846      	ldr	r0, [pc, #280]	@ (8012f0c <gos_kernelDump+0x504>)
 8012df2:	f005 fc31 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8012df6:	4846      	ldr	r0, [pc, #280]	@ (8012f10 <gos_kernelDump+0x508>)
 8012df8:	f005 fc2e 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8012dfc:	4845      	ldr	r0, [pc, #276]	@ (8012f14 <gos_kernelDump+0x50c>)
 8012dfe:	f005 fc2b 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8012e02:	4b45      	ldr	r3, [pc, #276]	@ (8012f18 <gos_kernelDump+0x510>)
 8012e04:	4a45      	ldr	r2, [pc, #276]	@ (8012f1c <gos_kernelDump+0x514>)
 8012e06:	4946      	ldr	r1, [pc, #280]	@ (8012f20 <gos_kernelDump+0x518>)
 8012e08:	4846      	ldr	r0, [pc, #280]	@ (8012f24 <gos_kernelDump+0x51c>)
 8012e0a:	f005 fc25 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8012e0e:	4841      	ldr	r0, [pc, #260]	@ (8012f14 <gos_kernelDump+0x50c>)
 8012e10:	f005 fc22 	bl	8018658 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012e14:	2300      	movs	r3, #0
 8012e16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8012e1a:	e04c      	b.n	8012eb6 <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8012e1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012e20:	4a36      	ldr	r2, [pc, #216]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012e22:	216a      	movs	r1, #106	@ 0x6a
 8012e24:	fb01 f303 	mul.w	r3, r1, r3
 8012e28:	4413      	add	r3, r2
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d047      	beq.n	8012ec0 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8012e30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012e34:	4a31      	ldr	r2, [pc, #196]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012e36:	216a      	movs	r1, #106	@ 0x6a
 8012e38:	fb01 f303 	mul.w	r3, r1, r3
 8012e3c:	4413      	add	r3, r2
 8012e3e:	3328      	adds	r3, #40	@ 0x28
 8012e40:	885b      	ldrh	r3, [r3, #2]
 8012e42:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012e44:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 8012e46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012e4a:	226a      	movs	r2, #106	@ 0x6a
 8012e4c:	fb02 f303 	mul.w	r3, r2, r3
 8012e50:	3308      	adds	r3, #8
 8012e52:	4a2a      	ldr	r2, [pc, #168]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012e54:	4413      	add	r3, r2
 8012e56:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8012e58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012e5c:	4a27      	ldr	r2, [pc, #156]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012e5e:	206a      	movs	r0, #106	@ 0x6a
 8012e60:	fb00 f303 	mul.w	r3, r0, r3
 8012e64:	4413      	add	r3, r2
 8012e66:	3360      	adds	r3, #96	@ 0x60
 8012e68:	881b      	ldrh	r3, [r3, #0]
 8012e6a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012e6c:	4a25      	ldr	r2, [pc, #148]	@ (8012f04 <gos_kernelDump+0x4fc>)
 8012e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8012e72:	095b      	lsrs	r3, r3, #5
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8012e78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8012efc <gos_kernelDump+0x4f4>)
 8012e7e:	206a      	movs	r0, #106	@ 0x6a
 8012e80:	fb00 f303 	mul.w	r3, r0, r3
 8012e84:	4413      	add	r3, r2
 8012e86:	3360      	adds	r3, #96	@ 0x60
 8012e88:	881b      	ldrh	r3, [r3, #0]
 8012e8a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8012f04 <gos_kernelDump+0x4fc>)
 8012e8e:	fba2 0203 	umull	r0, r2, r2, r3
 8012e92:	0952      	lsrs	r2, r2, #5
 8012e94:	2064      	movs	r0, #100	@ 0x64
 8012e96:	fb00 f202 	mul.w	r2, r0, r2
 8012e9a:	1a9b      	subs	r3, r3, r2
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	462b      	mov	r3, r5
 8012ea2:	460a      	mov	r2, r1
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4820      	ldr	r0, [pc, #128]	@ (8012f28 <gos_kernelDump+0x520>)
 8012ea8:	f005 fbd6 	bl	8018658 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012eac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8012eb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012eba:	2b11      	cmp	r3, #17
 8012ebc:	d9ae      	bls.n	8012e1c <gos_kernelDump+0x414>
 8012ebe:	e000      	b.n	8012ec2 <gos_kernelDump+0x4ba>
            break;
 8012ec0:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 8012ec2:	481a      	ldr	r0, [pc, #104]	@ (8012f2c <gos_kernelDump+0x524>)
 8012ec4:	f005 fbc8 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8012ec8:	4819      	ldr	r0, [pc, #100]	@ (8012f30 <gos_kernelDump+0x528>)
 8012eca:	f005 fbc5 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8012ece:	4819      	ldr	r0, [pc, #100]	@ (8012f34 <gos_kernelDump+0x52c>)
 8012ed0:	f005 fbc2 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8012ed4:	4b18      	ldr	r3, [pc, #96]	@ (8012f38 <gos_kernelDump+0x530>)
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	4b18      	ldr	r3, [pc, #96]	@ (8012f3c <gos_kernelDump+0x534>)
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	4b18      	ldr	r3, [pc, #96]	@ (8012f40 <gos_kernelDump+0x538>)
 8012ede:	4a0f      	ldr	r2, [pc, #60]	@ (8012f1c <gos_kernelDump+0x514>)
 8012ee0:	490f      	ldr	r1, [pc, #60]	@ (8012f20 <gos_kernelDump+0x518>)
 8012ee2:	4818      	ldr	r0, [pc, #96]	@ (8012f44 <gos_kernelDump+0x53c>)
 8012ee4:	f005 fbb8 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8012ee8:	4812      	ldr	r0, [pc, #72]	@ (8012f34 <gos_kernelDump+0x52c>)
 8012eea:	f005 fbb5 	bl	8018658 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012eee:	2300      	movs	r3, #0
 8012ef0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8012ef4:	e0b1      	b.n	801305a <gos_kernelDump+0x652>
 8012ef6:	bf00      	nop
 8012ef8:	0801beac 	.word	0x0801beac
 8012efc:	20000828 	.word	0x20000828
 8012f00:	0801bea4 	.word	0x0801bea4
 8012f04:	51eb851f 	.word	0x51eb851f
 8012f08:	0801beb4 	.word	0x0801beb4
 8012f0c:	0801bf08 	.word	0x0801bf08
 8012f10:	0801bf68 	.word	0x0801bf68
 8012f14:	0801bf7c 	.word	0x0801bf7c
 8012f18:	0801bfb8 	.word	0x0801bfb8
 8012f1c:	0801be50 	.word	0x0801be50
 8012f20:	0801be58 	.word	0x0801be58
 8012f24:	0801bfc4 	.word	0x0801bfc4
 8012f28:	0801bfdc 	.word	0x0801bfdc
 8012f2c:	0801bffc 	.word	0x0801bffc
 8012f30:	0801c038 	.word	0x0801c038
 8012f34:	0801c04c 	.word	0x0801c04c
 8012f38:	0801c0cc 	.word	0x0801c0cc
 8012f3c:	0801c0d8 	.word	0x0801c0d8
 8012f40:	0801c0a0 	.word	0x0801c0a0
 8012f44:	0801c0a8 	.word	0x0801c0a8
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8012f48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8013078 <gos_kernelDump+0x670>)
 8012f4e:	216a      	movs	r1, #106	@ 0x6a
 8012f50:	fb01 f303 	mul.w	r3, r1, r3
 8012f54:	4413      	add	r3, r2
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f000 8084 	beq.w	8013066 <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8012f5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f62:	4a45      	ldr	r2, [pc, #276]	@ (8013078 <gos_kernelDump+0x670>)
 8012f64:	216a      	movs	r1, #106	@ 0x6a
 8012f66:	fb01 f303 	mul.w	r3, r1, r3
 8012f6a:	4413      	add	r3, r2
 8012f6c:	3328      	adds	r3, #40	@ 0x28
 8012f6e:	885b      	ldrh	r3, [r3, #2]
 8012f70:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012f72:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 8012f74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f78:	226a      	movs	r2, #106	@ 0x6a
 8012f7a:	fb02 f303 	mul.w	r3, r2, r3
 8012f7e:	3308      	adds	r3, #8
 8012f80:	4a3d      	ldr	r2, [pc, #244]	@ (8013078 <gos_kernelDump+0x670>)
 8012f82:	4413      	add	r3, r2
 8012f84:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 8012f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8013078 <gos_kernelDump+0x670>)
 8012f8c:	216a      	movs	r1, #106	@ 0x6a
 8012f8e:	fb01 f303 	mul.w	r3, r1, r3
 8012f92:	4413      	add	r3, r2
 8012f94:	3348      	adds	r3, #72	@ 0x48
 8012f96:	881b      	ldrh	r3, [r3, #0]
 8012f98:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012f9a:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8012f9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012fa0:	4a35      	ldr	r2, [pc, #212]	@ (8013078 <gos_kernelDump+0x670>)
 8012fa2:	216a      	movs	r1, #106	@ 0x6a
 8012fa4:	fb01 f303 	mul.w	r3, r1, r3
 8012fa8:	4413      	add	r3, r2
 8012faa:	3348      	adds	r3, #72	@ 0x48
 8012fac:	885b      	ldrh	r3, [r3, #2]
 8012fae:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8012fb0:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 8012fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012fb6:	4a30      	ldr	r2, [pc, #192]	@ (8013078 <gos_kernelDump+0x670>)
 8012fb8:	216a      	movs	r1, #106	@ 0x6a
 8012fba:	fb01 f303 	mul.w	r3, r1, r3
 8012fbe:	4413      	add	r3, r2
 8012fc0:	3348      	adds	r3, #72	@ 0x48
 8012fc2:	885b      	ldrh	r3, [r3, #2]
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012fcc:	fb02 f303 	mul.w	r3, r2, r3
 8012fd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012fd4:	4928      	ldr	r1, [pc, #160]	@ (8013078 <gos_kernelDump+0x670>)
 8012fd6:	206a      	movs	r0, #106	@ 0x6a
 8012fd8:	fb00 f202 	mul.w	r2, r0, r2
 8012fdc:	440a      	add	r2, r1
 8012fde:	3248      	adds	r2, #72	@ 0x48
 8012fe0:	8812      	ldrh	r2, [r2, #0]
 8012fe2:	b292      	uxth	r2, r2
 8012fe4:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8012fe8:	4a24      	ldr	r2, [pc, #144]	@ (801307c <gos_kernelDump+0x674>)
 8012fea:	fb82 1203 	smull	r1, r2, r2, r3
 8012fee:	1152      	asrs	r2, r2, #5
 8012ff0:	17db      	asrs	r3, r3, #31
 8012ff2:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 8012ff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8013078 <gos_kernelDump+0x670>)
 8012ffa:	206a      	movs	r0, #106	@ 0x6a
 8012ffc:	fb00 f303 	mul.w	r3, r0, r3
 8013000:	4413      	add	r3, r2
 8013002:	3348      	adds	r3, #72	@ 0x48
 8013004:	885b      	ldrh	r3, [r3, #2]
 8013006:	b29b      	uxth	r3, r3
 8013008:	461a      	mov	r2, r3
 801300a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801300e:	fb02 f303 	mul.w	r3, r2, r3
 8013012:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013016:	4818      	ldr	r0, [pc, #96]	@ (8013078 <gos_kernelDump+0x670>)
 8013018:	256a      	movs	r5, #106	@ 0x6a
 801301a:	fb05 f202 	mul.w	r2, r5, r2
 801301e:	4402      	add	r2, r0
 8013020:	3248      	adds	r2, #72	@ 0x48
 8013022:	8812      	ldrh	r2, [r2, #0]
 8013024:	b292      	uxth	r2, r2
 8013026:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 801302a:	4b14      	ldr	r3, [pc, #80]	@ (801307c <gos_kernelDump+0x674>)
 801302c:	fb83 0302 	smull	r0, r3, r3, r2
 8013030:	1158      	asrs	r0, r3, #5
 8013032:	17d3      	asrs	r3, r2, #31
 8013034:	1ac3      	subs	r3, r0, r3
 8013036:	2064      	movs	r0, #100	@ 0x64
 8013038:	fb00 f303 	mul.w	r3, r0, r3
 801303c:	1ad3      	subs	r3, r2, r3
 801303e:	9302      	str	r3, [sp, #8]
 8013040:	9101      	str	r1, [sp, #4]
 8013042:	9600      	str	r6, [sp, #0]
 8013044:	4673      	mov	r3, lr
 8013046:	4622      	mov	r2, r4
 8013048:	4661      	mov	r1, ip
 801304a:	480d      	ldr	r0, [pc, #52]	@ (8013080 <gos_kernelDump+0x678>)
 801304c:	f005 fb04 	bl	8018658 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8013050:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013054:	3301      	adds	r3, #1
 8013056:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 801305a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801305e:	2b11      	cmp	r3, #17
 8013060:	f67f af72 	bls.w	8012f48 <gos_kernelDump+0x540>
 8013064:	e000      	b.n	8013068 <gos_kernelDump+0x660>
            break;
 8013066:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 8013068:	4806      	ldr	r0, [pc, #24]	@ (8013084 <gos_kernelDump+0x67c>)
 801306a:	f005 faf5 	bl	8018658 <gos_shellDriverTransmitString>
}
 801306e:	bf00      	nop
 8013070:	3748      	adds	r7, #72	@ 0x48
 8013072:	46bd      	mov	sp, r7
 8013074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013078:	20000828 	.word	0x20000828
 801307c:	51eb851f 	.word	0x51eb851f
 8013080:	0801c0e8 	.word	0x0801c0e8
 8013084:	0801c11c 	.word	0x0801c11c

08013088 <gos_kernelIsCallerIsr>:
{
 8013088:	b480      	push	{r7}
 801308a:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 801308c:	4b05      	ldr	r3, [pc, #20]	@ (80130a4 <gos_kernelIsCallerIsr+0x1c>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d001      	beq.n	8013098 <gos_kernelIsCallerIsr+0x10>
 8013094:	2336      	movs	r3, #54	@ 0x36
 8013096:	e000      	b.n	801309a <gos_kernelIsCallerIsr+0x12>
 8013098:	2349      	movs	r3, #73	@ 0x49
}
 801309a:	4618      	mov	r0, r3
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr
 80130a4:	200061ba 	.word	0x200061ba

080130a8 <SVC_Handler>:
    gos_ported_handleSVC();
 80130a8:	f01e 0f04 	tst.w	lr, #4
 80130ac:	bf0c      	ite	eq
 80130ae:	f3ef 8008 	mrseq	r0, MSP
 80130b2:	f3ef 8009 	mrsne	r0, PSP
 80130b6:	4b06      	ldr	r3, [pc, #24]	@ (80130d0 <SVC_Handler+0x28>)
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	2b36      	cmp	r3, #54	@ 0x36
 80130bc:	d104      	bne.n	80130c8 <SVC_Handler+0x20>
 80130be:	4b04      	ldr	r3, [pc, #16]	@ (80130d0 <SVC_Handler+0x28>)
 80130c0:	2249      	movs	r2, #73	@ 0x49
 80130c2:	701a      	strb	r2, [r3, #0]
 80130c4:	f000 fad8 	bl	8013678 <gos_kernelProcessorReset>
 80130c8:	f000 b804 	b.w	80130d4 <gos_kernelSVC_HandlerMain>
}
 80130cc:	bf00      	nop
 80130ce:	bf00      	nop
 80130d0:	20000825 	.word	0x20000825

080130d4 <gos_kernelSVC_HandlerMain>:
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	3318      	adds	r3, #24
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	60fb      	str	r3, [r7, #12]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	3b02      	subs	r3, #2
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	72fb      	strb	r3, [r7, #11]
 80130f0:	7afb      	ldrb	r3, [r7, #11]
 80130f2:	2bff      	cmp	r3, #255	@ 0xff
 80130f4:	d105      	bne.n	8013102 <gos_kernelSVC_HandlerMain+0x2e>
 80130f6:	4b06      	ldr	r3, [pc, #24]	@ (8013110 <gos_kernelSVC_HandlerMain+0x3c>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4a05      	ldr	r2, [pc, #20]	@ (8013110 <gos_kernelSVC_HandlerMain+0x3c>)
 80130fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013100:	6013      	str	r3, [r2, #0]
}
 8013102:	bf00      	nop
 8013104:	3714      	adds	r7, #20
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	e000ed04 	.word	0xe000ed04

08013114 <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 8013114:	4b10      	ldr	r3, [pc, #64]	@ (8013158 <PendSV_Handler+0x44>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	2b36      	cmp	r3, #54	@ 0x36
 801311a:	d109      	bne.n	8013130 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 801311c:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8013120:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 8013124:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 8013128:	4b0b      	ldr	r3, [pc, #44]	@ (8013158 <PendSV_Handler+0x44>)
 801312a:	2249      	movs	r2, #73	@ 0x49
 801312c:	701a      	strb	r2, [r3, #0]
}
 801312e:	e011      	b.n	8013154 <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8013130:	b500      	push	{lr}
 8013132:	f3ef 8009 	mrs	r0, PSP
 8013136:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801313a:	f000 f8cb 	bl	80132d4 <gos_kernelSaveCurrentPsp>
 801313e:	f000 f8e1 	bl	8013304 <gos_kernelSelectNextTask>
 8013142:	f000 f8b3 	bl	80132ac <gos_kernelGetCurrentPsp>
 8013146:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801314a:	f380 8809 	msr	PSP, r0
 801314e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013152:	4770      	bx	lr
}
 8013154:	bf00      	nop
 8013156:	bf00      	nop
 8013158:	20000826 	.word	0x20000826

0801315c <gos_kernelReschedule>:
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	4603      	mov	r3, r0
 8013164:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8013166:	79fb      	ldrb	r3, [r7, #7]
 8013168:	2b16      	cmp	r3, #22
 801316a:	d106      	bne.n	801317a <gos_kernelReschedule+0x1e>
 801316c:	4b06      	ldr	r3, [pc, #24]	@ (8013188 <gos_kernelReschedule+0x2c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a05      	ldr	r2, [pc, #20]	@ (8013188 <gos_kernelReschedule+0x2c>)
 8013172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013176:	6013      	str	r3, [r2, #0]
}
 8013178:	e000      	b.n	801317c <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 801317a:	dfff      	svc	255	@ 0xff
}
 801317c:	bf00      	nop
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr
 8013188:	e000ed04 	.word	0xe000ed04

0801318c <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b086      	sub	sp, #24
 8013190:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 8013192:	2300      	movs	r3, #0
 8013194:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 8013196:	f3ef 8309 	mrs	r3, PSP
 801319a:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d02b      	beq.n	80131fa <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 80131a2:	4b3f      	ldr	r3, [pc, #252]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4a3f      	ldr	r2, [pc, #252]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 80131a8:	216a      	movs	r1, #106	@ 0x6a
 80131aa:	fb01 f303 	mul.w	r3, r1, r3
 80131ae:	4413      	add	r3, r2
 80131b0:	3360      	adds	r3, #96	@ 0x60
 80131b2:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d21e      	bcs.n	80131fa <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 80131bc:	4b38      	ldr	r3, [pc, #224]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	226a      	movs	r2, #106	@ 0x6a
 80131c2:	fb02 f303 	mul.w	r3, r2, r3
 80131c6:	3308      	adds	r3, #8
 80131c8:	4a36      	ldr	r2, [pc, #216]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 80131ca:	4413      	add	r3, r2
 80131cc:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 80131ce:	4a34      	ldr	r2, [pc, #208]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 80131d0:	6812      	ldr	r2, [r2, #0]
 80131d2:	4934      	ldr	r1, [pc, #208]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 80131d4:	206a      	movs	r0, #106	@ 0x6a
 80131d6:	fb00 f202 	mul.w	r2, r0, r2
 80131da:	440a      	add	r2, r1
 80131dc:	3260      	adds	r2, #96	@ 0x60
 80131de:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	1a8a      	subs	r2, r1, r2
 80131e6:	9202      	str	r2, [sp, #8]
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	9201      	str	r2, [sp, #4]
 80131ec:	9300      	str	r3, [sp, #0]
 80131ee:	4b2e      	ldr	r3, [pc, #184]	@ (80132a8 <gos_kernelCheckTaskStack+0x11c>)
 80131f0:	2200      	movs	r2, #0
 80131f2:	2100      	movs	r1, #0
 80131f4:	2034      	movs	r0, #52	@ 0x34
 80131f6:	f002 f8ef 	bl	80153d8 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d04a      	beq.n	8013296 <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8013200:	4b27      	ldr	r3, [pc, #156]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a27      	ldr	r2, [pc, #156]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 8013206:	216a      	movs	r1, #106	@ 0x6a
 8013208:	fb01 f303 	mul.w	r3, r1, r3
 801320c:	4413      	add	r3, r2
 801320e:	3360      	adds	r3, #96	@ 0x60
 8013210:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8013214:	4a22      	ldr	r2, [pc, #136]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 8013216:	6812      	ldr	r2, [r2, #0]
 8013218:	4922      	ldr	r1, [pc, #136]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 801321a:	206a      	movs	r0, #106	@ 0x6a
 801321c:	fb00 f202 	mul.w	r2, r0, r2
 8013220:	440a      	add	r2, r1
 8013222:	3248      	adds	r2, #72	@ 0x48
 8013224:	8812      	ldrh	r2, [r2, #0]
 8013226:	b292      	uxth	r2, r2
 8013228:	441a      	add	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	1ad3      	subs	r3, r2, r3
 801322e:	3b40      	subs	r3, #64	@ 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 8013230:	4a1b      	ldr	r2, [pc, #108]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 8013232:	6812      	ldr	r2, [r2, #0]
 8013234:	491b      	ldr	r1, [pc, #108]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 8013236:	206a      	movs	r0, #106	@ 0x6a
 8013238:	fb00 f202 	mul.w	r2, r0, r2
 801323c:	440a      	add	r2, r1
 801323e:	3248      	adds	r2, #72	@ 0x48
 8013240:	8852      	ldrh	r2, [r2, #2]
 8013242:	b292      	uxth	r2, r2
    if (sp != 0 &&
 8013244:	4293      	cmp	r3, r2
 8013246:	d926      	bls.n	8013296 <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8013248:	4b15      	ldr	r3, [pc, #84]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a15      	ldr	r2, [pc, #84]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 801324e:	216a      	movs	r1, #106	@ 0x6a
 8013250:	fb01 f303 	mul.w	r3, r1, r3
 8013254:	4413      	add	r3, r2
 8013256:	3360      	adds	r3, #96	@ 0x60
 8013258:	f8d3 3006 	ldr.w	r3, [r3, #6]
 801325c:	b29a      	uxth	r2, r3
 801325e:	4b10      	ldr	r3, [pc, #64]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	4910      	ldr	r1, [pc, #64]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 8013264:	206a      	movs	r0, #106	@ 0x6a
 8013266:	fb00 f303 	mul.w	r3, r0, r3
 801326a:	440b      	add	r3, r1
 801326c:	3348      	adds	r3, #72	@ 0x48
 801326e:	881b      	ldrh	r3, [r3, #0]
 8013270:	b29b      	uxth	r3, r3
 8013272:	4413      	add	r3, r2
 8013274:	b29a      	uxth	r2, r3
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	b29b      	uxth	r3, r3
 801327a:	1ad3      	subs	r3, r2, r3
 801327c:	b29a      	uxth	r2, r3
 801327e:	4b08      	ldr	r3, [pc, #32]	@ (80132a0 <gos_kernelCheckTaskStack+0x114>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	3a20      	subs	r2, #32
 8013284:	b290      	uxth	r0, r2
 8013286:	4a07      	ldr	r2, [pc, #28]	@ (80132a4 <gos_kernelCheckTaskStack+0x118>)
 8013288:	216a      	movs	r1, #106	@ 0x6a
 801328a:	fb01 f303 	mul.w	r3, r1, r3
 801328e:	4413      	add	r3, r2
 8013290:	3348      	adds	r3, #72	@ 0x48
 8013292:	4602      	mov	r2, r0
 8013294:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 8013296:	bf00      	nop
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	200061c0 	.word	0x200061c0
 80132a4:	20000828 	.word	0x20000828
 80132a8:	0801c170 	.word	0x0801c170

080132ac <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 80132ac:	b480      	push	{r7}
 80132ae:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 80132b0:	4b06      	ldr	r3, [pc, #24]	@ (80132cc <gos_kernelGetCurrentPsp+0x20>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	4a06      	ldr	r2, [pc, #24]	@ (80132d0 <gos_kernelGetCurrentPsp+0x24>)
 80132b6:	216a      	movs	r1, #106	@ 0x6a
 80132b8:	fb01 f303 	mul.w	r3, r1, r3
 80132bc:	4413      	add	r3, r2
 80132be:	3338      	adds	r3, #56	@ 0x38
 80132c0:	685b      	ldr	r3, [r3, #4]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr
 80132cc:	200061c0 	.word	0x200061c0
 80132d0:	20000828 	.word	0x20000828

080132d4 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 80132dc:	4b07      	ldr	r3, [pc, #28]	@ (80132fc <gos_kernelSaveCurrentPsp+0x28>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	4a07      	ldr	r2, [pc, #28]	@ (8013300 <gos_kernelSaveCurrentPsp+0x2c>)
 80132e2:	216a      	movs	r1, #106	@ 0x6a
 80132e4:	fb01 f303 	mul.w	r3, r1, r3
 80132e8:	4413      	add	r3, r2
 80132ea:	3338      	adds	r3, #56	@ 0x38
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	605a      	str	r2, [r3, #4]
}
 80132f0:	bf00      	nop
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr
 80132fc:	200061c0 	.word	0x200061c0
 8013300:	20000828 	.word	0x20000828

08013304 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 8013304:	b590      	push	{r4, r7, lr}
 8013306:	b085      	sub	sp, #20
 8013308:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 801330a:	2300      	movs	r3, #0
 801330c:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 801330e:	23ff      	movs	r3, #255	@ 0xff
 8013310:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 8013312:	2300      	movs	r3, #0
 8013314:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 8013316:	2300      	movs	r3, #0
 8013318:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 801331a:	2300      	movs	r3, #0
 801331c:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 801331e:	4ba3      	ldr	r3, [pc, #652]	@ (80135ac <gos_kernelSelectNextTask+0x2a8>)
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	4ba3      	ldr	r3, [pc, #652]	@ (80135b0 <gos_kernelSelectNextTask+0x2ac>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 801332a:	f7ff ff2f 	bl	801318c <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 801332e:	4ba1      	ldr	r3, [pc, #644]	@ (80135b4 <gos_kernelSelectNextTask+0x2b0>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	f040 8136 	bne.w	80135a4 <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8013338:	2300      	movs	r3, #0
 801333a:	81fb      	strh	r3, [r7, #14]
 801333c:	e0d0      	b.n	80134e0 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 801333e:	89fb      	ldrh	r3, [r7, #14]
 8013340:	4a9d      	ldr	r2, [pc, #628]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013342:	216a      	movs	r1, #106	@ 0x6a
 8013344:	fb01 f303 	mul.w	r3, r1, r3
 8013348:	4413      	add	r3, r2
 801334a:	3304      	adds	r3, #4
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	2b16      	cmp	r3, #22
 8013350:	d12c      	bne.n	80133ac <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 8013352:	89fb      	ldrh	r3, [r7, #14]
 8013354:	4a98      	ldr	r2, [pc, #608]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013356:	216a      	movs	r1, #106	@ 0x6a
 8013358:	fb01 f303 	mul.w	r3, r1, r3
 801335c:	4413      	add	r3, r2
 801335e:	3330      	adds	r3, #48	@ 0x30
 8013360:	6819      	ldr	r1, [r3, #0]
 8013362:	89fb      	ldrh	r3, [r7, #14]
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	4411      	add	r1, r2
 8013368:	4893      	ldr	r0, [pc, #588]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801336a:	226a      	movs	r2, #106	@ 0x6a
 801336c:	fb03 f202 	mul.w	r2, r3, r2
 8013370:	4402      	add	r2, r0
 8013372:	3230      	adds	r2, #48	@ 0x30
 8013374:	6011      	str	r1, [r2, #0]
 8013376:	4a90      	ldr	r2, [pc, #576]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013378:	216a      	movs	r1, #106	@ 0x6a
 801337a:	fb01 f303 	mul.w	r3, r1, r3
 801337e:	4413      	add	r3, r2
 8013380:	3330      	adds	r3, #48	@ 0x30
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	89fb      	ldrh	r3, [r7, #14]
 8013386:	498c      	ldr	r1, [pc, #560]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013388:	206a      	movs	r0, #106	@ 0x6a
 801338a:	fb00 f303 	mul.w	r3, r0, r3
 801338e:	440b      	add	r3, r1
 8013390:	3328      	adds	r3, #40	@ 0x28
 8013392:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8013394:	429a      	cmp	r2, r3
 8013396:	d309      	bcc.n	80133ac <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8013398:	89fb      	ldrh	r3, [r7, #14]
 801339a:	4a87      	ldr	r2, [pc, #540]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801339c:	216a      	movs	r1, #106	@ 0x6a
 801339e:	fb01 f303 	mul.w	r3, r1, r3
 80133a2:	4413      	add	r3, r2
 80133a4:	3304      	adds	r3, #4
 80133a6:	220a      	movs	r2, #10
 80133a8:	701a      	strb	r2, [r3, #0]
 80133aa:	e040      	b.n	801342e <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 80133ac:	89fb      	ldrh	r3, [r7, #14]
 80133ae:	4a82      	ldr	r2, [pc, #520]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80133b0:	216a      	movs	r1, #106	@ 0x6a
 80133b2:	fb01 f303 	mul.w	r3, r1, r3
 80133b6:	4413      	add	r3, r2
 80133b8:	3304      	adds	r3, #4
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	2b19      	cmp	r3, #25
 80133be:	d136      	bne.n	801342e <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 80133c0:	89fb      	ldrh	r3, [r7, #14]
 80133c2:	4a7d      	ldr	r2, [pc, #500]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80133c4:	216a      	movs	r1, #106	@ 0x6a
 80133c6:	fb01 f303 	mul.w	r3, r1, r3
 80133ca:	4413      	add	r3, r2
 80133cc:	3330      	adds	r3, #48	@ 0x30
 80133ce:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 80133d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133d4:	d02b      	beq.n	801342e <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 80133d6:	89fb      	ldrh	r3, [r7, #14]
 80133d8:	4a77      	ldr	r2, [pc, #476]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80133da:	216a      	movs	r1, #106	@ 0x6a
 80133dc:	fb01 f303 	mul.w	r3, r1, r3
 80133e0:	4413      	add	r3, r2
 80133e2:	3338      	adds	r3, #56	@ 0x38
 80133e4:	6819      	ldr	r1, [r3, #0]
 80133e6:	89fb      	ldrh	r3, [r7, #14]
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	4411      	add	r1, r2
 80133ec:	4872      	ldr	r0, [pc, #456]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80133ee:	226a      	movs	r2, #106	@ 0x6a
 80133f0:	fb03 f202 	mul.w	r2, r3, r2
 80133f4:	4402      	add	r2, r0
 80133f6:	3238      	adds	r2, #56	@ 0x38
 80133f8:	6011      	str	r1, [r2, #0]
 80133fa:	4a6f      	ldr	r2, [pc, #444]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80133fc:	216a      	movs	r1, #106	@ 0x6a
 80133fe:	fb01 f303 	mul.w	r3, r1, r3
 8013402:	4413      	add	r3, r2
 8013404:	3338      	adds	r3, #56	@ 0x38
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	89fb      	ldrh	r3, [r7, #14]
 801340a:	496b      	ldr	r1, [pc, #428]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801340c:	206a      	movs	r0, #106	@ 0x6a
 801340e:	fb00 f303 	mul.w	r3, r0, r3
 8013412:	440b      	add	r3, r1
 8013414:	3330      	adds	r3, #48	@ 0x30
 8013416:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8013418:	429a      	cmp	r2, r3
 801341a:	d308      	bcc.n	801342e <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 801341c:	89fb      	ldrh	r3, [r7, #14]
 801341e:	4a66      	ldr	r2, [pc, #408]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013420:	216a      	movs	r1, #106	@ 0x6a
 8013422:	fb01 f303 	mul.w	r3, r1, r3
 8013426:	4413      	add	r3, r2
 8013428:	3304      	adds	r3, #4
 801342a:	220a      	movs	r2, #10
 801342c:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 801342e:	89fa      	ldrh	r2, [r7, #14]
 8013430:	4b62      	ldr	r3, [pc, #392]	@ (80135bc <gos_kernelSelectNextTask+0x2b8>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	429a      	cmp	r2, r3
 8013436:	d047      	beq.n	80134c8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8013438:	89fb      	ldrh	r3, [r7, #14]
 801343a:	4a5f      	ldr	r2, [pc, #380]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801343c:	216a      	movs	r1, #106	@ 0x6a
 801343e:	fb01 f303 	mul.w	r3, r1, r3
 8013442:	4413      	add	r3, r2
 8013444:	3304      	adds	r3, #4
 8013446:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 8013448:	2b0a      	cmp	r3, #10
 801344a:	d13d      	bne.n	80134c8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 801344c:	89fb      	ldrh	r3, [r7, #14]
 801344e:	4a5a      	ldr	r2, [pc, #360]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013450:	216a      	movs	r1, #106	@ 0x6a
 8013452:	fb01 f303 	mul.w	r3, r1, r3
 8013456:	4413      	add	r3, r2
 8013458:	3306      	adds	r3, #6
 801345a:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 801345c:	7b7a      	ldrb	r2, [r7, #13]
 801345e:	429a      	cmp	r2, r3
 8013460:	d932      	bls.n	80134c8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8013462:	89fb      	ldrh	r3, [r7, #14]
 8013464:	4a54      	ldr	r2, [pc, #336]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013466:	216a      	movs	r1, #106	@ 0x6a
 8013468:	fb01 f303 	mul.w	r3, r1, r3
 801346c:	4413      	add	r3, r2
 801346e:	3360      	adds	r3, #96	@ 0x60
 8013470:	889b      	ldrh	r3, [r3, #4]
 8013472:	b29a      	uxth	r2, r3
 8013474:	89fb      	ldrh	r3, [r7, #14]
 8013476:	4950      	ldr	r1, [pc, #320]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013478:	206a      	movs	r0, #106	@ 0x6a
 801347a:	fb00 f303 	mul.w	r3, r0, r3
 801347e:	440b      	add	r3, r1
 8013480:	3358      	adds	r3, #88	@ 0x58
 8013482:	88db      	ldrh	r3, [r3, #6]
 8013484:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8013486:	429a      	cmp	r2, r3
 8013488:	d21e      	bcs.n	80134c8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 801348a:	89fb      	ldrh	r3, [r7, #14]
 801348c:	4a4a      	ldr	r2, [pc, #296]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801348e:	216a      	movs	r1, #106	@ 0x6a
 8013490:	fb01 f303 	mul.w	r3, r1, r3
 8013494:	4413      	add	r3, r2
 8013496:	3360      	adds	r3, #96	@ 0x60
 8013498:	885b      	ldrh	r3, [r3, #2]
 801349a:	b29a      	uxth	r2, r3
 801349c:	89fb      	ldrh	r3, [r7, #14]
 801349e:	4946      	ldr	r1, [pc, #280]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80134a0:	206a      	movs	r0, #106	@ 0x6a
 80134a2:	fb00 f303 	mul.w	r3, r0, r3
 80134a6:	440b      	add	r3, r1
 80134a8:	3358      	adds	r3, #88	@ 0x58
 80134aa:	88db      	ldrh	r3, [r3, #6]
 80134ac:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d20a      	bcs.n	80134c8 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 80134b2:	89fb      	ldrh	r3, [r7, #14]
 80134b4:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 80134b6:	89fb      	ldrh	r3, [r7, #14]
 80134b8:	4a3f      	ldr	r2, [pc, #252]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80134ba:	216a      	movs	r1, #106	@ 0x6a
 80134bc:	fb01 f303 	mul.w	r3, r1, r3
 80134c0:	4413      	add	r3, r2
 80134c2:	3306      	adds	r3, #6
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 80134c8:	89fb      	ldrh	r3, [r7, #14]
 80134ca:	4a3b      	ldr	r2, [pc, #236]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 80134cc:	216a      	movs	r1, #106	@ 0x6a
 80134ce:	fb01 f303 	mul.w	r3, r1, r3
 80134d2:	4413      	add	r3, r2
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d007      	beq.n	80134ea <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80134da:	89fb      	ldrh	r3, [r7, #14]
 80134dc:	3301      	adds	r3, #1
 80134de:	81fb      	strh	r3, [r7, #14]
 80134e0:	89fb      	ldrh	r3, [r7, #14]
 80134e2:	2b11      	cmp	r3, #17
 80134e4:	f67f af2b 	bls.w	801333e <gos_kernelSelectNextTask+0x3a>
 80134e8:	e000      	b.n	80134ec <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 80134ea:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 80134ec:	f7ff f8d4 	bl	8012698 <gos_kernelGetCpuUsage>
 80134f0:	4603      	mov	r3, r0
 80134f2:	461a      	mov	r2, r3
 80134f4:	4b32      	ldr	r3, [pc, #200]	@ (80135c0 <gos_kernelSelectNextTask+0x2bc>)
 80134f6:	881b      	ldrh	r3, [r3, #0]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d901      	bls.n	8013500 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 80134fc:	2300      	movs	r3, #0
 80134fe:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 8013500:	897a      	ldrh	r2, [r7, #10]
 8013502:	4b2e      	ldr	r3, [pc, #184]	@ (80135bc <gos_kernelSelectNextTask+0x2b8>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	429a      	cmp	r2, r3
 8013508:	d02b      	beq.n	8013562 <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 801350a:	4b2e      	ldr	r3, [pc, #184]	@ (80135c4 <gos_kernelSelectNextTask+0x2c0>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d016      	beq.n	8013540 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 8013512:	4b2c      	ldr	r3, [pc, #176]	@ (80135c4 <gos_kernelSelectNextTask+0x2c0>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4a29      	ldr	r2, [pc, #164]	@ (80135bc <gos_kernelSelectNextTask+0x2b8>)
 8013518:	6812      	ldr	r2, [r2, #0]
 801351a:	4927      	ldr	r1, [pc, #156]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801351c:	206a      	movs	r0, #106	@ 0x6a
 801351e:	fb00 f202 	mul.w	r2, r0, r2
 8013522:	440a      	add	r2, r1
 8013524:	3228      	adds	r2, #40	@ 0x28
 8013526:	8852      	ldrh	r2, [r2, #2]
 8013528:	b290      	uxth	r0, r2
 801352a:	897a      	ldrh	r2, [r7, #10]
 801352c:	4922      	ldr	r1, [pc, #136]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 801352e:	246a      	movs	r4, #106	@ 0x6a
 8013530:	fb04 f202 	mul.w	r2, r4, r2
 8013534:	440a      	add	r2, r1
 8013536:	3228      	adds	r2, #40	@ 0x28
 8013538:	8852      	ldrh	r2, [r2, #2]
 801353a:	b292      	uxth	r2, r2
 801353c:	4611      	mov	r1, r2
 801353e:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8013540:	4b1e      	ldr	r3, [pc, #120]	@ (80135bc <gos_kernelSelectNextTask+0x2b8>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	491c      	ldr	r1, [pc, #112]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013546:	226a      	movs	r2, #106	@ 0x6a
 8013548:	fb03 f202 	mul.w	r2, r3, r2
 801354c:	440a      	add	r2, r1
 801354e:	3240      	adds	r2, #64	@ 0x40
 8013550:	6852      	ldr	r2, [r2, #4]
 8013552:	3201      	adds	r2, #1
 8013554:	4918      	ldr	r1, [pc, #96]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013556:	206a      	movs	r0, #106	@ 0x6a
 8013558:	fb00 f303 	mul.w	r3, r0, r3
 801355c:	440b      	add	r3, r1
 801355e:	3340      	adds	r3, #64	@ 0x40
 8013560:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 8013562:	1cbb      	adds	r3, r7, #2
 8013564:	4618      	mov	r0, r3
 8013566:	f005 f8d3 	bl	8018710 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 801356a:	887a      	ldrh	r2, [r7, #2]
 801356c:	4b16      	ldr	r3, [pc, #88]	@ (80135c8 <gos_kernelSelectNextTask+0x2c4>)
 801356e:	881b      	ldrh	r3, [r3, #0]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 8013574:	4b11      	ldr	r3, [pc, #68]	@ (80135bc <gos_kernelSelectNextTask+0x2b8>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	226a      	movs	r2, #106	@ 0x6a
 801357a:	fb02 f303 	mul.w	r3, r2, r3
 801357e:	3350      	adds	r3, #80	@ 0x50
 8013580:	4a0d      	ldr	r2, [pc, #52]	@ (80135b8 <gos_kernelSelectNextTask+0x2b4>)
 8013582:	4413      	add	r3, r2
 8013584:	3305      	adds	r3, #5
 8013586:	893a      	ldrh	r2, [r7, #8]
 8013588:	4619      	mov	r1, r3
 801358a:	4810      	ldr	r0, [pc, #64]	@ (80135cc <gos_kernelSelectNextTask+0x2c8>)
 801358c:	f004 f9a8 	bl	80178e0 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8013590:	480d      	ldr	r0, [pc, #52]	@ (80135c8 <gos_kernelSelectNextTask+0x2c4>)
 8013592:	f005 f8bd 	bl	8018710 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 8013596:	897b      	ldrh	r3, [r7, #10]
 8013598:	4a08      	ldr	r2, [pc, #32]	@ (80135bc <gos_kernelSelectNextTask+0x2b8>)
 801359a:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 801359c:	4b03      	ldr	r3, [pc, #12]	@ (80135ac <gos_kernelSelectNextTask+0x2a8>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4a03      	ldr	r2, [pc, #12]	@ (80135b0 <gos_kernelSelectNextTask+0x2ac>)
 80135a2:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 80135a4:	bf00      	nop
 80135a6:	3714      	adds	r7, #20
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd90      	pop	{r4, r7, pc}
 80135ac:	200061c4 	.word	0x200061c4
 80135b0:	200061e4 	.word	0x200061e4
 80135b4:	200061b9 	.word	0x200061b9
 80135b8:	20000828 	.word	0x20000828
 80135bc:	200061c0 	.word	0x200061c0
 80135c0:	20000822 	.word	0x20000822
 80135c4:	200061d8 	.word	0x200061d8
 80135c8:	200061c8 	.word	0x200061c8
 80135cc:	200061cc 	.word	0x200061cc

080135d0 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	4603      	mov	r3, r0
 80135d8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 80135da:	79fb      	ldrb	r3, [r7, #7]
 80135dc:	3b05      	subs	r3, #5
 80135de:	2b14      	cmp	r3, #20
 80135e0:	d836      	bhi.n	8013650 <gos_kernelGetTaskStateString+0x80>
 80135e2:	a201      	add	r2, pc, #4	@ (adr r2, 80135e8 <gos_kernelGetTaskStateString+0x18>)
 80135e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e8:	08013645 	.word	0x08013645
 80135ec:	08013651 	.word	0x08013651
 80135f0:	08013651 	.word	0x08013651
 80135f4:	08013651 	.word	0x08013651
 80135f8:	08013651 	.word	0x08013651
 80135fc:	0801363d 	.word	0x0801363d
 8013600:	08013651 	.word	0x08013651
 8013604:	08013651 	.word	0x08013651
 8013608:	0801364d 	.word	0x0801364d
 801360c:	08013651 	.word	0x08013651
 8013610:	08013651 	.word	0x08013651
 8013614:	08013651 	.word	0x08013651
 8013618:	08013651 	.word	0x08013651
 801361c:	08013651 	.word	0x08013651
 8013620:	08013651 	.word	0x08013651
 8013624:	08013651 	.word	0x08013651
 8013628:	08013651 	.word	0x08013651
 801362c:	08013641 	.word	0x08013641
 8013630:	08013651 	.word	0x08013651
 8013634:	08013651 	.word	0x08013651
 8013638:	08013649 	.word	0x08013649
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 801363c:	4b08      	ldr	r3, [pc, #32]	@ (8013660 <gos_kernelGetTaskStateString+0x90>)
 801363e:	e008      	b.n	8013652 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8013640:	4b08      	ldr	r3, [pc, #32]	@ (8013664 <gos_kernelGetTaskStateString+0x94>)
 8013642:	e006      	b.n	8013652 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 8013644:	4b08      	ldr	r3, [pc, #32]	@ (8013668 <gos_kernelGetTaskStateString+0x98>)
 8013646:	e004      	b.n	8013652 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8013648:	4b08      	ldr	r3, [pc, #32]	@ (801366c <gos_kernelGetTaskStateString+0x9c>)
 801364a:	e002      	b.n	8013652 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 801364c:	4b08      	ldr	r3, [pc, #32]	@ (8013670 <gos_kernelGetTaskStateString+0xa0>)
 801364e:	e000      	b.n	8013652 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8013650:	4b08      	ldr	r3, [pc, #32]	@ (8013674 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 8013652:	4618      	mov	r0, r3
 8013654:	370c      	adds	r7, #12
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	0801c1b4 	.word	0x0801c1b4
 8013664:	0801c1c4 	.word	0x0801c1c4
 8013668:	0801c1d8 	.word	0x0801c1d8
 801366c:	0801c1ec 	.word	0x0801c1ec
 8013670:	0801c200 	.word	0x0801c200
 8013674:	0801c210 	.word	0x0801c210

08013678 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 8013678:	b480      	push	{r7}
 801367a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 801367c:	f3bf 8f4f 	dsb	sy
 8013680:	4b05      	ldr	r3, [pc, #20]	@ (8013698 <gos_kernelProcessorReset+0x20>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013688:	4903      	ldr	r1, [pc, #12]	@ (8013698 <gos_kernelProcessorReset+0x20>)
 801368a:	4b04      	ldr	r3, [pc, #16]	@ (801369c <gos_kernelProcessorReset+0x24>)
 801368c:	4313      	orrs	r3, r2
 801368e:	600b      	str	r3, [r1, #0]
 8013690:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 8013694:	bf00      	nop
 8013696:	e7fd      	b.n	8013694 <gos_kernelProcessorReset+0x1c>
 8013698:	e000ed0c 	.word	0xe000ed0c
 801369c:	05fa0004 	.word	0x05fa0004

080136a0 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 80136a0:	b480      	push	{r7}
 80136a2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80136a4:	bf00      	nop
 80136a6:	e7fd      	b.n	80136a4 <NMI_Handler+0x4>

080136a8 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 80136a8:	b480      	push	{r7}
 80136aa:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 80136ac:	bf00      	nop
 80136ae:	e7fd      	b.n	80136ac <HardFault_Handler+0x4>

080136b0 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 80136b0:	b480      	push	{r7}
 80136b2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80136b4:	bf00      	nop
 80136b6:	e7fd      	b.n	80136b4 <MemManage_Handler+0x4>

080136b8 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 80136b8:	b480      	push	{r7}
 80136ba:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80136bc:	bf00      	nop
 80136be:	e7fd      	b.n	80136bc <BusFault_Handler+0x4>

080136c0 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 80136c0:	b480      	push	{r7}
 80136c2:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 80136c4:	bf00      	nop
 80136c6:	e7fd      	b.n	80136c4 <UsageFault_Handler+0x4>

080136c8 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b086      	sub	sp, #24
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 80136d2:	2355      	movs	r3, #85	@ 0x55
 80136d4:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 80136d6:	2300      	movs	r3, #0
 80136d8:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 80136da:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80136de:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 80136e0:	2300      	movs	r3, #0
 80136e2:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f001 fd05 	bl	80150f4 <gos_taskCheckDescriptor>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2bae      	cmp	r3, #174	@ 0xae
 80136ee:	d102      	bne.n	80136f6 <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 80136f0:	23ae      	movs	r3, #174	@ 0xae
 80136f2:	75fb      	strb	r3, [r7, #23]
 80136f4:	e173      	b.n	80139de <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 80136f6:	23ae      	movs	r3, #174	@ 0xae
 80136f8:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80136fa:	2300      	movs	r3, #0
 80136fc:	82bb      	strh	r3, [r7, #20]
 80136fe:	e01a      	b.n	8013736 <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8013700:	8abb      	ldrh	r3, [r7, #20]
 8013702:	4a89      	ldr	r2, [pc, #548]	@ (8013928 <gos_taskRegister+0x260>)
 8013704:	216a      	movs	r1, #106	@ 0x6a
 8013706:	fb01 f303 	mul.w	r3, r1, r3
 801370a:	4413      	add	r3, r2
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d102      	bne.n	8013718 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 8013712:	2355      	movs	r3, #85	@ 0x55
 8013714:	75fb      	strb	r3, [r7, #23]
                break;
 8013716:	e011      	b.n	801373c <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 8013718:	8abb      	ldrh	r3, [r7, #20]
 801371a:	4a83      	ldr	r2, [pc, #524]	@ (8013928 <gos_taskRegister+0x260>)
 801371c:	216a      	movs	r1, #106	@ 0x6a
 801371e:	fb01 f303 	mul.w	r3, r1, r3
 8013722:	4413      	add	r3, r2
 8013724:	3348      	adds	r3, #72	@ 0x48
 8013726:	881b      	ldrh	r3, [r3, #0]
 8013728:	461a      	mov	r2, r3
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	4413      	add	r3, r2
 801372e:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8013730:	8abb      	ldrh	r3, [r7, #20]
 8013732:	3301      	adds	r3, #1
 8013734:	82bb      	strh	r3, [r7, #20]
 8013736:	8abb      	ldrh	r3, [r7, #20]
 8013738:	2b11      	cmp	r3, #17
 801373a:	d9e1      	bls.n	8013700 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 801373c:	8abb      	ldrh	r3, [r7, #20]
 801373e:	2b11      	cmp	r3, #17
 8013740:	d902      	bls.n	8013748 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 8013742:	23ae      	movs	r3, #174	@ 0xae
 8013744:	75fb      	strb	r3, [r7, #23]
 8013746:	e14a      	b.n	80139de <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 801374e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8013752:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	3b04      	subs	r3, #4
 8013758:	60fb      	str	r3, [r7, #12]
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013760:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	3b04      	subs	r3, #4
 801376a:	60fb      	str	r3, [r7, #12]
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	3b04      	subs	r3, #4
 8013774:	60fb      	str	r3, [r7, #12]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f06f 0202 	mvn.w	r2, #2
 801377c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	3b04      	subs	r3, #4
 8013782:	60fb      	str	r3, [r7, #12]
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 801378a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	3b04      	subs	r3, #4
 8013790:	60fb      	str	r3, [r7, #12]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8013798:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	3b04      	subs	r3, #4
 801379e:	60fb      	str	r3, [r7, #12]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80137a6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	3b04      	subs	r3, #4
 80137ac:	60fb      	str	r3, [r7, #12]
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80137b4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	3b04      	subs	r3, #4
 80137ba:	60fb      	str	r3, [r7, #12]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2200      	movs	r2, #0
 80137c0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	3b04      	subs	r3, #4
 80137c6:	60fb      	str	r3, [r7, #12]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80137ce:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	3b04      	subs	r3, #4
 80137d4:	60fb      	str	r3, [r7, #12]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80137dc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	3b04      	subs	r3, #4
 80137e2:	60fb      	str	r3, [r7, #12]
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80137ea:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	3b04      	subs	r3, #4
 80137f0:	60fb      	str	r3, [r7, #12]
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80137f8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	3b04      	subs	r3, #4
 80137fe:	60fb      	str	r3, [r7, #12]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8013806:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	3b04      	subs	r3, #4
 801380c:	60fb      	str	r3, [r7, #12]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8013814:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	3b04      	subs	r3, #4
 801381a:	60fb      	str	r3, [r7, #12]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8013822:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	3b04      	subs	r3, #4
 8013828:	60fb      	str	r3, [r7, #12]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8013830:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 8013832:	8abb      	ldrh	r3, [r7, #20]
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	493c      	ldr	r1, [pc, #240]	@ (8013928 <gos_taskRegister+0x260>)
 8013838:	206a      	movs	r0, #106	@ 0x6a
 801383a:	fb00 f303 	mul.w	r3, r0, r3
 801383e:	440b      	add	r3, r1
 8013840:	333c      	adds	r3, #60	@ 0x3c
 8013842:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 8013844:	8abb      	ldrh	r3, [r7, #20]
 8013846:	4a38      	ldr	r2, [pc, #224]	@ (8013928 <gos_taskRegister+0x260>)
 8013848:	216a      	movs	r1, #106	@ 0x6a
 801384a:	fb01 f303 	mul.w	r3, r1, r3
 801384e:	4413      	add	r3, r2
 8013850:	3304      	adds	r3, #4
 8013852:	220a      	movs	r2, #10
 8013854:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 8013856:	8abb      	ldrh	r3, [r7, #20]
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	6812      	ldr	r2, [r2, #0]
 801385c:	4932      	ldr	r1, [pc, #200]	@ (8013928 <gos_taskRegister+0x260>)
 801385e:	206a      	movs	r0, #106	@ 0x6a
 8013860:	fb00 f303 	mul.w	r3, r0, r3
 8013864:	440b      	add	r3, r1
 8013866:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 8013868:	8abb      	ldrh	r3, [r7, #20]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	7990      	ldrb	r0, [r2, #6]
 801386e:	4a2e      	ldr	r2, [pc, #184]	@ (8013928 <gos_taskRegister+0x260>)
 8013870:	216a      	movs	r1, #106	@ 0x6a
 8013872:	fb01 f303 	mul.w	r3, r1, r3
 8013876:	4413      	add	r3, r2
 8013878:	3306      	adds	r3, #6
 801387a:	4602      	mov	r2, r0
 801387c:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 801387e:	8abb      	ldrh	r3, [r7, #20]
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	7990      	ldrb	r0, [r2, #6]
 8013884:	4a28      	ldr	r2, [pc, #160]	@ (8013928 <gos_taskRegister+0x260>)
 8013886:	216a      	movs	r1, #106	@ 0x6a
 8013888:	fb01 f303 	mul.w	r3, r1, r3
 801388c:	4413      	add	r3, r2
 801388e:	3307      	adds	r3, #7
 8013890:	4602      	mov	r2, r0
 8013892:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 8013894:	8abb      	ldrh	r3, [r7, #20]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 801389c:	b290      	uxth	r0, r2
 801389e:	4a22      	ldr	r2, [pc, #136]	@ (8013928 <gos_taskRegister+0x260>)
 80138a0:	216a      	movs	r1, #106	@ 0x6a
 80138a2:	fb01 f303 	mul.w	r3, r1, r3
 80138a6:	4413      	add	r3, r2
 80138a8:	3348      	adds	r3, #72	@ 0x48
 80138aa:	4602      	mov	r2, r0
 80138ac:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 80138ae:	8abb      	ldrh	r3, [r7, #20]
 80138b0:	8aba      	ldrh	r2, [r7, #20]
 80138b2:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 80138b6:	b290      	uxth	r0, r2
 80138b8:	4a1b      	ldr	r2, [pc, #108]	@ (8013928 <gos_taskRegister+0x260>)
 80138ba:	216a      	movs	r1, #106	@ 0x6a
 80138bc:	fb01 f303 	mul.w	r3, r1, r3
 80138c0:	4413      	add	r3, r2
 80138c2:	332a      	adds	r3, #42	@ 0x2a
 80138c4:	4602      	mov	r2, r0
 80138c6:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 80138c8:	8abb      	ldrh	r3, [r7, #20]
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	8912      	ldrh	r2, [r2, #8]
 80138ce:	b290      	uxth	r0, r2
 80138d0:	4a15      	ldr	r2, [pc, #84]	@ (8013928 <gos_taskRegister+0x260>)
 80138d2:	216a      	movs	r1, #106	@ 0x6a
 80138d4:	fb01 f303 	mul.w	r3, r1, r3
 80138d8:	4413      	add	r3, r2
 80138da:	3308      	adds	r3, #8
 80138dc:	4602      	mov	r2, r0
 80138de:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10a      	bne.n	8013902 <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 80138ec:	8abb      	ldrh	r3, [r7, #20]
 80138ee:	4a0e      	ldr	r2, [pc, #56]	@ (8013928 <gos_taskRegister+0x260>)
 80138f0:	216a      	movs	r1, #106	@ 0x6a
 80138f2:	fb01 f303 	mul.w	r3, r1, r3
 80138f6:	4413      	add	r3, r2
 80138f8:	335e      	adds	r3, #94	@ 0x5e
 80138fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80138fe:	801a      	strh	r2, [r3, #0]
 8013900:	e021      	b.n	8013946 <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013908:	b29b      	uxth	r3, r3
 801390a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801390e:	4293      	cmp	r3, r2
 8013910:	d90c      	bls.n	801392c <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8013912:	8abb      	ldrh	r3, [r7, #20]
 8013914:	4a04      	ldr	r2, [pc, #16]	@ (8013928 <gos_taskRegister+0x260>)
 8013916:	216a      	movs	r1, #106	@ 0x6a
 8013918:	fb01 f303 	mul.w	r3, r1, r3
 801391c:	4413      	add	r3, r2
 801391e:	335e      	adds	r3, #94	@ 0x5e
 8013920:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013924:	801a      	strh	r2, [r3, #0]
 8013926:	e00e      	b.n	8013946 <gos_taskRegister+0x27e>
 8013928:	20000828 	.word	0x20000828
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 801392c:	8abb      	ldrh	r3, [r7, #20]
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8013934:	b290      	uxth	r0, r2
 8013936:	4a2c      	ldr	r2, [pc, #176]	@ (80139e8 <gos_taskRegister+0x320>)
 8013938:	216a      	movs	r1, #106	@ 0x6a
 801393a:	fb01 f303 	mul.w	r3, r1, r3
 801393e:	4413      	add	r3, r2
 8013940:	335e      	adds	r3, #94	@ 0x5e
 8013942:	4602      	mov	r2, r0
 8013944:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	330a      	adds	r3, #10
 801394a:	2b00      	cmp	r3, #0
 801394c:	d015      	beq.n	801397a <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	330a      	adds	r3, #10
 8013952:	4618      	mov	r0, r3
 8013954:	f7f0 fbc4 	bl	80040e0 <strlen>
 8013958:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 801395a:	2b20      	cmp	r3, #32
 801395c:	d80d      	bhi.n	801397a <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 801395e:	8abb      	ldrh	r3, [r7, #20]
 8013960:	226a      	movs	r2, #106	@ 0x6a
 8013962:	fb02 f303 	mul.w	r3, r2, r3
 8013966:	3308      	adds	r3, #8
 8013968:	4a1f      	ldr	r2, [pc, #124]	@ (80139e8 <gos_taskRegister+0x320>)
 801396a:	4413      	add	r3, r2
 801396c:	1c9a      	adds	r2, r3, #2
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	330a      	adds	r3, #10
 8013972:	4619      	mov	r1, r3
 8013974:	4610      	mov	r0, r2
 8013976:	f005 fd10 	bl	801939a <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 801397a:	8abb      	ldrh	r3, [r7, #20]
 801397c:	4a1a      	ldr	r2, [pc, #104]	@ (80139e8 <gos_taskRegister+0x320>)
 801397e:	216a      	movs	r1, #106	@ 0x6a
 8013980:	fb01 f303 	mul.w	r3, r1, r3
 8013984:	4413      	add	r3, r2
 8013986:	332a      	adds	r3, #42	@ 0x2a
 8013988:	881a      	ldrh	r2, [r3, #0]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	855a      	strh	r2, [r3, #42]	@ 0x2a
            if (taskId != NULL)
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d009      	beq.n	80139a8 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 8013994:	8abb      	ldrh	r3, [r7, #20]
 8013996:	4a14      	ldr	r2, [pc, #80]	@ (80139e8 <gos_taskRegister+0x320>)
 8013998:	216a      	movs	r1, #106	@ 0x6a
 801399a:	fb01 f303 	mul.w	r3, r1, r3
 801399e:	4413      	add	r3, r2
 80139a0:	332a      	adds	r3, #42	@ 0x2a
 80139a2:	881a      	ldrh	r2, [r3, #0]
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 80139a8:	8abb      	ldrh	r3, [r7, #20]
 80139aa:	4a0f      	ldr	r2, [pc, #60]	@ (80139e8 <gos_taskRegister+0x320>)
 80139ac:	216a      	movs	r1, #106	@ 0x6a
 80139ae:	fb01 f303 	mul.w	r3, r1, r3
 80139b2:	4413      	add	r3, r2
 80139b4:	333c      	adds	r3, #60	@ 0x3c
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	8aba      	ldrh	r2, [r7, #20]
 80139ba:	490b      	ldr	r1, [pc, #44]	@ (80139e8 <gos_taskRegister+0x320>)
 80139bc:	206a      	movs	r0, #106	@ 0x6a
 80139be:	fb00 f202 	mul.w	r2, r0, r2
 80139c2:	440a      	add	r2, r1
 80139c4:	3248      	adds	r2, #72	@ 0x48
 80139c6:	8812      	ldrh	r2, [r2, #0]
 80139c8:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 80139ca:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 80139cc:	3240      	adds	r2, #64	@ 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 80139ce:	4906      	ldr	r1, [pc, #24]	@ (80139e8 <gos_taskRegister+0x320>)
 80139d0:	206a      	movs	r0, #106	@ 0x6a
 80139d2:	fb00 f303 	mul.w	r3, r0, r3
 80139d6:	440b      	add	r3, r1
 80139d8:	3360      	adds	r3, #96	@ 0x60
 80139da:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 80139de:	7dfb      	ldrb	r3, [r7, #23]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3718      	adds	r7, #24
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	20000828 	.word	0x20000828

080139ec <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 80139f4:	23ae      	movs	r3, #174	@ 0xae
 80139f6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // TODO: support pre-os delays (?)
    if (isKernelRunning == GOS_FALSE)
 80139f8:	4b3f      	ldr	r3, [pc, #252]	@ (8013af8 <gos_taskSleep+0x10c>)
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2b49      	cmp	r3, #73	@ 0x49
 80139fe:	d105      	bne.n	8013a0c <gos_taskSleep+0x20>
    {
    	gos_kernelDelayMs(sleepTicks);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7fe fe7f 	bl	8012708 <gos_kernelDelayMs>
 8013a0a:	e070      	b.n	8013aee <gos_taskSleep+0x102>
    }
    else
    {
        if (currentTaskIndex > 0u)
 8013a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8013afc <gos_taskSleep+0x110>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d06c      	beq.n	8013aee <gos_taskSleep+0x102>
        {
            GOS_ATOMIC_ENTER
 8013a14:	4b3a      	ldr	r3, [pc, #232]	@ (8013b00 <gos_taskSleep+0x114>)
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d108      	bne.n	8013a2e <gos_taskSleep+0x42>
 8013a1c:	b672      	cpsid	i
 8013a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8013a22:	4a38      	ldr	r2, [pc, #224]	@ (8013b04 <gos_taskSleep+0x118>)
 8013a24:	6013      	str	r3, [r2, #0]
 8013a26:	f3bf 8f4f 	dsb	sy
 8013a2a:	f3bf 8f6f 	isb	sy
 8013a2e:	4b34      	ldr	r3, [pc, #208]	@ (8013b00 <gos_taskSleep+0x114>)
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	3301      	adds	r3, #1
 8013a34:	b2da      	uxtb	r2, r3
 8013a36:	4b32      	ldr	r3, [pc, #200]	@ (8013b00 <gos_taskSleep+0x114>)
 8013a38:	701a      	strb	r2, [r3, #0]
 8013a3a:	4b33      	ldr	r3, [pc, #204]	@ (8013b08 <gos_taskSleep+0x11c>)
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	b2da      	uxtb	r2, r3
 8013a42:	4b31      	ldr	r3, [pc, #196]	@ (8013b08 <gos_taskSleep+0x11c>)
 8013a44:	701a      	strb	r2, [r3, #0]
            {
                if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 8013a46:	4b2d      	ldr	r3, [pc, #180]	@ (8013afc <gos_taskSleep+0x110>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	4a30      	ldr	r2, [pc, #192]	@ (8013b0c <gos_taskSleep+0x120>)
 8013a4c:	216a      	movs	r1, #106	@ 0x6a
 8013a4e:	fb01 f303 	mul.w	r3, r1, r3
 8013a52:	4413      	add	r3, r2
 8013a54:	3304      	adds	r3, #4
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	2b0a      	cmp	r3, #10
 8013a5a:	d121      	bne.n	8013aa0 <gos_taskSleep+0xb4>
                {
                    taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 8013a5c:	4b27      	ldr	r3, [pc, #156]	@ (8013afc <gos_taskSleep+0x110>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	4a2a      	ldr	r2, [pc, #168]	@ (8013b0c <gos_taskSleep+0x120>)
 8013a62:	216a      	movs	r1, #106	@ 0x6a
 8013a64:	fb01 f303 	mul.w	r3, r1, r3
 8013a68:	4413      	add	r3, r2
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	2216      	movs	r2, #22
 8013a6e:	701a      	strb	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8013a70:	4b22      	ldr	r3, [pc, #136]	@ (8013afc <gos_taskSleep+0x110>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4a25      	ldr	r2, [pc, #148]	@ (8013b0c <gos_taskSleep+0x120>)
 8013a76:	216a      	movs	r1, #106	@ 0x6a
 8013a78:	fb01 f303 	mul.w	r3, r1, r3
 8013a7c:	4413      	add	r3, r2
 8013a7e:	332c      	adds	r3, #44	@ 0x2c
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	601a      	str	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 8013a84:	4b1d      	ldr	r3, [pc, #116]	@ (8013afc <gos_taskSleep+0x110>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	4a20      	ldr	r2, [pc, #128]	@ (8013b0c <gos_taskSleep+0x120>)
 8013a8a:	216a      	movs	r1, #106	@ 0x6a
 8013a8c:	fb01 f303 	mul.w	r3, r1, r3
 8013a90:	4413      	add	r3, r2
 8013a92:	3330      	adds	r3, #48	@ 0x30
 8013a94:	2200      	movs	r2, #0
 8013a96:	801a      	strh	r2, [r3, #0]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	805a      	strh	r2, [r3, #2]
                    taskSleepResult = GOS_SUCCESS;
 8013a9c:	2355      	movs	r3, #85	@ 0x55
 8013a9e:	73fb      	strb	r3, [r7, #15]
                else
                {
                    // Nothing to do.
                }
            }
            GOS_ATOMIC_EXIT
 8013aa0:	4b17      	ldr	r3, [pc, #92]	@ (8013b00 <gos_taskSleep+0x114>)
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d005      	beq.n	8013ab4 <gos_taskSleep+0xc8>
 8013aa8:	4b15      	ldr	r3, [pc, #84]	@ (8013b00 <gos_taskSleep+0x114>)
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	3b01      	subs	r3, #1
 8013aae:	b2da      	uxtb	r2, r3
 8013ab0:	4b13      	ldr	r3, [pc, #76]	@ (8013b00 <gos_taskSleep+0x114>)
 8013ab2:	701a      	strb	r2, [r3, #0]
 8013ab4:	4b12      	ldr	r3, [pc, #72]	@ (8013b00 <gos_taskSleep+0x114>)
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d108      	bne.n	8013ace <gos_taskSleep+0xe2>
 8013abc:	4b11      	ldr	r3, [pc, #68]	@ (8013b04 <gos_taskSleep+0x118>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f383 8810 	msr	PRIMASK, r3
 8013ac4:	b662      	cpsie	i
 8013ac6:	f3bf 8f4f 	dsb	sy
 8013aca:	f3bf 8f6f 	isb	sy
 8013ace:	4b0e      	ldr	r3, [pc, #56]	@ (8013b08 <gos_taskSleep+0x11c>)
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d005      	beq.n	8013ae2 <gos_taskSleep+0xf6>
 8013ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8013b08 <gos_taskSleep+0x11c>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	3b01      	subs	r3, #1
 8013adc:	b2da      	uxtb	r2, r3
 8013ade:	4b0a      	ldr	r3, [pc, #40]	@ (8013b08 <gos_taskSleep+0x11c>)
 8013ae0:	701a      	strb	r2, [r3, #0]

            if (taskSleepResult == GOS_SUCCESS)
 8013ae2:	7bfb      	ldrb	r3, [r7, #15]
 8013ae4:	2b55      	cmp	r3, #85	@ 0x55
 8013ae6:	d102      	bne.n	8013aee <gos_taskSleep+0x102>
            {
                // Unprivileged.
                gos_kernelReschedule(GOS_UNPRIVILEGED);
 8013ae8:	2009      	movs	r0, #9
 8013aea:	f7ff fb37 	bl	801315c <gos_kernelReschedule>
        {
            // Idle task cannot sleep.
        }
    }

    return taskSleepResult;
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	20000824 	.word	0x20000824
 8013afc:	200061c0 	.word	0x200061c0
 8013b00:	200061bb 	.word	0x200061bb
 8013b04:	200061bc 	.word	0x200061bc
 8013b08:	200061b9 	.word	0x200061b9
 8013b0c:	20000828 	.word	0x20000828

08013b10 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	4603      	mov	r3, r0
 8013b18:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 8013b1a:	23ae      	movs	r3, #174	@ 0xae
 8013b1c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8013b22:	4b56      	ldr	r3, [pc, #344]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d108      	bne.n	8013b3c <gos_taskWakeup+0x2c>
 8013b2a:	b672      	cpsid	i
 8013b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b30:	4a53      	ldr	r2, [pc, #332]	@ (8013c80 <gos_taskWakeup+0x170>)
 8013b32:	6013      	str	r3, [r2, #0]
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	3301      	adds	r3, #1
 8013b42:	b2da      	uxtb	r2, r3
 8013b44:	4b4d      	ldr	r3, [pc, #308]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013b46:	701a      	strb	r2, [r3, #0]
 8013b48:	4b4e      	ldr	r3, [pc, #312]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	b2da      	uxtb	r2, r3
 8013b50:	4b4c      	ldr	r3, [pc, #304]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013b52:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8013b54:	88fb      	ldrh	r3, [r7, #6]
 8013b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013b5a:	d969      	bls.n	8013c30 <gos_taskWakeup+0x120>
 8013b5c:	88fb      	ldrh	r3, [r7, #6]
 8013b5e:	f248 0211 	movw	r2, #32785	@ 0x8011
 8013b62:	4293      	cmp	r3, r2
 8013b64:	d864      	bhi.n	8013c30 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8013b66:	88fb      	ldrh	r3, [r7, #6]
 8013b68:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8013b6c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8013b6e:	4b46      	ldr	r3, [pc, #280]	@ (8013c88 <gos_taskWakeup+0x178>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4a46      	ldr	r2, [pc, #280]	@ (8013c8c <gos_taskWakeup+0x17c>)
 8013b74:	216a      	movs	r1, #106	@ 0x6a
 8013b76:	fb01 f303 	mul.w	r3, r1, r3
 8013b7a:	4413      	add	r3, r2
 8013b7c:	3308      	adds	r3, #8
 8013b7e:	881b      	ldrh	r3, [r3, #0]
 8013b80:	b21b      	sxth	r3, r3
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	db03      	blt.n	8013b8e <gos_taskWakeup+0x7e>
            inIsr > 0)
 8013b86:	4b42      	ldr	r3, [pc, #264]	@ (8013c90 <gos_taskWakeup+0x180>)
 8013b88:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d015      	beq.n	8013bba <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8013b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8013c8c <gos_taskWakeup+0x17c>)
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	216a      	movs	r1, #106	@ 0x6a
 8013b94:	fb01 f303 	mul.w	r3, r1, r3
 8013b98:	4413      	add	r3, r2
 8013b9a:	3304      	adds	r3, #4
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	2b16      	cmp	r3, #22
 8013ba0:	d146      	bne.n	8013c30 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8013ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8013c8c <gos_taskWakeup+0x17c>)
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	216a      	movs	r1, #106	@ 0x6a
 8013ba8:	fb01 f303 	mul.w	r3, r1, r3
 8013bac:	4413      	add	r3, r2
 8013bae:	3304      	adds	r3, #4
 8013bb0:	220a      	movs	r2, #10
 8013bb2:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 8013bb4:	2355      	movs	r3, #85	@ 0x55
 8013bb6:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8013bb8:	e03a      	b.n	8013c30 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8013bba:	4b30      	ldr	r3, [pc, #192]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d005      	beq.n	8013bce <gos_taskWakeup+0xbe>
 8013bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	3b01      	subs	r3, #1
 8013bc8:	b2da      	uxtb	r2, r3
 8013bca:	4b2c      	ldr	r3, [pc, #176]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013bcc:	701a      	strb	r2, [r3, #0]
 8013bce:	4b2b      	ldr	r3, [pc, #172]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d108      	bne.n	8013be8 <gos_taskWakeup+0xd8>
 8013bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8013c80 <gos_taskWakeup+0x170>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f383 8810 	msr	PRIMASK, r3
 8013bde:	b662      	cpsie	i
 8013be0:	f3bf 8f4f 	dsb	sy
 8013be4:	f3bf 8f6f 	isb	sy
 8013be8:	4b26      	ldr	r3, [pc, #152]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013bea:	781b      	ldrb	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d005      	beq.n	8013bfc <gos_taskWakeup+0xec>
 8013bf0:	4b24      	ldr	r3, [pc, #144]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	3b01      	subs	r3, #1
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	4b22      	ldr	r3, [pc, #136]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013bfa:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8013bfc:	4b22      	ldr	r3, [pc, #136]	@ (8013c88 <gos_taskWakeup+0x178>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	226a      	movs	r2, #106	@ 0x6a
 8013c02:	fb02 f303 	mul.w	r3, r2, r3
 8013c06:	3308      	adds	r3, #8
 8013c08:	4a20      	ldr	r2, [pc, #128]	@ (8013c8c <gos_taskWakeup+0x17c>)
 8013c0a:	4413      	add	r3, r2
 8013c0c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8013c0e:	68ba      	ldr	r2, [r7, #8]
 8013c10:	216a      	movs	r1, #106	@ 0x6a
 8013c12:	fb01 f202 	mul.w	r2, r1, r2
 8013c16:	3208      	adds	r2, #8
 8013c18:	491c      	ldr	r1, [pc, #112]	@ (8013c8c <gos_taskWakeup+0x17c>)
 8013c1a:	440a      	add	r2, r1
 8013c1c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 8013c1e:	9201      	str	r2, [sp, #4]
 8013c20:	9300      	str	r3, [sp, #0]
 8013c22:	4b1c      	ldr	r3, [pc, #112]	@ (8013c94 <gos_taskWakeup+0x184>)
 8013c24:	f240 1275 	movw	r2, #373	@ 0x175
 8013c28:	491b      	ldr	r1, [pc, #108]	@ (8013c98 <gos_taskWakeup+0x188>)
 8013c2a:	2034      	movs	r0, #52	@ 0x34
 8013c2c:	f001 fbd4 	bl	80153d8 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8013c30:	4b12      	ldr	r3, [pc, #72]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d005      	beq.n	8013c44 <gos_taskWakeup+0x134>
 8013c38:	4b10      	ldr	r3, [pc, #64]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	3b01      	subs	r3, #1
 8013c3e:	b2da      	uxtb	r2, r3
 8013c40:	4b0e      	ldr	r3, [pc, #56]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013c42:	701a      	strb	r2, [r3, #0]
 8013c44:	4b0d      	ldr	r3, [pc, #52]	@ (8013c7c <gos_taskWakeup+0x16c>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d108      	bne.n	8013c5e <gos_taskWakeup+0x14e>
 8013c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8013c80 <gos_taskWakeup+0x170>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f383 8810 	msr	PRIMASK, r3
 8013c54:	b662      	cpsie	i
 8013c56:	f3bf 8f4f 	dsb	sy
 8013c5a:	f3bf 8f6f 	isb	sy
 8013c5e:	4b09      	ldr	r3, [pc, #36]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d005      	beq.n	8013c72 <gos_taskWakeup+0x162>
 8013c66:	4b07      	ldr	r3, [pc, #28]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	3b01      	subs	r3, #1
 8013c6c:	b2da      	uxtb	r2, r3
 8013c6e:	4b05      	ldr	r3, [pc, #20]	@ (8013c84 <gos_taskWakeup+0x174>)
 8013c70:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 8013c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	200061bb 	.word	0x200061bb
 8013c80:	200061bc 	.word	0x200061bc
 8013c84:	200061b9 	.word	0x200061b9
 8013c88:	200061c0 	.word	0x200061c0
 8013c8c:	20000828 	.word	0x20000828
 8013c90:	200061ba 	.word	0x200061ba
 8013c94:	0801c214 	.word	0x0801c214
 8013c98:	0801cf24 	.word	0x0801cf24

08013c9c <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af02      	add	r7, sp, #8
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 8013ca6:	23ae      	movs	r3, #174	@ 0xae
 8013ca8:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8013caa:	2300      	movs	r3, #0
 8013cac:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8013cae:	4b84      	ldr	r3, [pc, #528]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d108      	bne.n	8013cc8 <gos_taskSuspend+0x2c>
 8013cb6:	b672      	cpsid	i
 8013cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8013cbc:	4a81      	ldr	r2, [pc, #516]	@ (8013ec4 <gos_taskSuspend+0x228>)
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	f3bf 8f4f 	dsb	sy
 8013cc4:	f3bf 8f6f 	isb	sy
 8013cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	b2da      	uxtb	r2, r3
 8013cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013cd2:	701a      	strb	r2, [r3, #0]
 8013cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	b2da      	uxtb	r2, r3
 8013cdc:	4b7a      	ldr	r3, [pc, #488]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013cde:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8013ce0:	88fb      	ldrh	r3, [r7, #6]
 8013ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013ce6:	f240 80c1 	bls.w	8013e6c <gos_taskSuspend+0x1d0>
 8013cea:	88fb      	ldrh	r3, [r7, #6]
 8013cec:	f248 0211 	movw	r2, #32785	@ 0x8011
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	f200 80bb 	bhi.w	8013e6c <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8013cf6:	88fb      	ldrh	r3, [r7, #6]
 8013cf8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8013cfc:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8013cfe:	4b73      	ldr	r3, [pc, #460]	@ (8013ecc <gos_taskSuspend+0x230>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4a73      	ldr	r2, [pc, #460]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d04:	216a      	movs	r1, #106	@ 0x6a
 8013d06:	fb01 f303 	mul.w	r3, r1, r3
 8013d0a:	4413      	add	r3, r2
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	881b      	ldrh	r3, [r3, #0]
 8013d10:	b21b      	sxth	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	db08      	blt.n	8013d28 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8013d16:	4b6d      	ldr	r3, [pc, #436]	@ (8013ecc <gos_taskSuspend+0x230>)
 8013d18:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8013d1a:	68ba      	ldr	r2, [r7, #8]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d003      	beq.n	8013d28 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8013d20:	4b6c      	ldr	r3, [pc, #432]	@ (8013ed4 <gos_taskSuspend+0x238>)
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d064      	beq.n	8013df2 <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8013d28:	4a69      	ldr	r2, [pc, #420]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	216a      	movs	r1, #106	@ 0x6a
 8013d2e:	fb01 f303 	mul.w	r3, r1, r3
 8013d32:	4413      	add	r3, r2
 8013d34:	3304      	adds	r3, #4
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	2b0a      	cmp	r3, #10
 8013d3a:	d014      	beq.n	8013d66 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8013d3c:	4a64      	ldr	r2, [pc, #400]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	216a      	movs	r1, #106	@ 0x6a
 8013d42:	fb01 f303 	mul.w	r3, r1, r3
 8013d46:	4413      	add	r3, r2
 8013d48:	3304      	adds	r3, #4
 8013d4a:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8013d4c:	2b16      	cmp	r3, #22
 8013d4e:	d00a      	beq.n	8013d66 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8013d50:	4a5f      	ldr	r2, [pc, #380]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	216a      	movs	r1, #106	@ 0x6a
 8013d56:	fb01 f303 	mul.w	r3, r1, r3
 8013d5a:	4413      	add	r3, r2
 8013d5c:	3304      	adds	r3, #4
 8013d5e:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8013d60:	2b19      	cmp	r3, #25
 8013d62:	f040 8082 	bne.w	8013e6a <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 8013d66:	4a5a      	ldr	r2, [pc, #360]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	216a      	movs	r1, #106	@ 0x6a
 8013d6c:	fb01 f303 	mul.w	r3, r1, r3
 8013d70:	4413      	add	r3, r2
 8013d72:	3304      	adds	r3, #4
 8013d74:	7818      	ldrb	r0, [r3, #0]
 8013d76:	4a56      	ldr	r2, [pc, #344]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	216a      	movs	r1, #106	@ 0x6a
 8013d7c:	fb01 f303 	mul.w	r3, r1, r3
 8013d80:	4413      	add	r3, r2
 8013d82:	3305      	adds	r3, #5
 8013d84:	4602      	mov	r2, r0
 8013d86:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 8013d88:	4a51      	ldr	r2, [pc, #324]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	216a      	movs	r1, #106	@ 0x6a
 8013d8e:	fb01 f303 	mul.w	r3, r1, r3
 8013d92:	4413      	add	r3, r2
 8013d94:	3304      	adds	r3, #4
 8013d96:	2205      	movs	r2, #5
 8013d98:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8013d9a:	2355      	movs	r3, #85	@ 0x55
 8013d9c:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8013d9e:	4b48      	ldr	r3, [pc, #288]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d005      	beq.n	8013db2 <gos_taskSuspend+0x116>
 8013da6:	4b46      	ldr	r3, [pc, #280]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	3b01      	subs	r3, #1
 8013dac:	b2da      	uxtb	r2, r3
 8013dae:	4b44      	ldr	r3, [pc, #272]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013db0:	701a      	strb	r2, [r3, #0]
 8013db2:	4b43      	ldr	r3, [pc, #268]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d108      	bne.n	8013dcc <gos_taskSuspend+0x130>
 8013dba:	4b42      	ldr	r3, [pc, #264]	@ (8013ec4 <gos_taskSuspend+0x228>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f383 8810 	msr	PRIMASK, r3
 8013dc2:	b662      	cpsie	i
 8013dc4:	f3bf 8f4f 	dsb	sy
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d005      	beq.n	8013de0 <gos_taskSuspend+0x144>
 8013dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	3b01      	subs	r3, #1
 8013dda:	b2da      	uxtb	r2, r3
 8013ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013dde:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8013de0:	4b3a      	ldr	r3, [pc, #232]	@ (8013ecc <gos_taskSuspend+0x230>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	68ba      	ldr	r2, [r7, #8]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d13f      	bne.n	8013e6a <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8013dea:	2009      	movs	r0, #9
 8013dec:	f7ff f9b6 	bl	801315c <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8013df0:	e03b      	b.n	8013e6a <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8013df2:	4b33      	ldr	r3, [pc, #204]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d005      	beq.n	8013e06 <gos_taskSuspend+0x16a>
 8013dfa:	4b31      	ldr	r3, [pc, #196]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	b2da      	uxtb	r2, r3
 8013e02:	4b2f      	ldr	r3, [pc, #188]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013e04:	701a      	strb	r2, [r3, #0]
 8013e06:	4b2e      	ldr	r3, [pc, #184]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d108      	bne.n	8013e20 <gos_taskSuspend+0x184>
 8013e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8013ec4 <gos_taskSuspend+0x228>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f383 8810 	msr	PRIMASK, r3
 8013e16:	b662      	cpsie	i
 8013e18:	f3bf 8f4f 	dsb	sy
 8013e1c:	f3bf 8f6f 	isb	sy
 8013e20:	4b29      	ldr	r3, [pc, #164]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d005      	beq.n	8013e34 <gos_taskSuspend+0x198>
 8013e28:	4b27      	ldr	r3, [pc, #156]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	b2da      	uxtb	r2, r3
 8013e30:	4b25      	ldr	r3, [pc, #148]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013e32:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8013e34:	4b25      	ldr	r3, [pc, #148]	@ (8013ecc <gos_taskSuspend+0x230>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	226a      	movs	r2, #106	@ 0x6a
 8013e3a:	fb02 f303 	mul.w	r3, r2, r3
 8013e3e:	3308      	adds	r3, #8
 8013e40:	4a23      	ldr	r2, [pc, #140]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013e42:	4413      	add	r3, r2
 8013e44:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	216a      	movs	r1, #106	@ 0x6a
 8013e4a:	fb01 f202 	mul.w	r2, r1, r2
 8013e4e:	3208      	adds	r2, #8
 8013e50:	491f      	ldr	r1, [pc, #124]	@ (8013ed0 <gos_taskSuspend+0x234>)
 8013e52:	440a      	add	r2, r1
 8013e54:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 8013e56:	9201      	str	r2, [sp, #4]
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8013ed8 <gos_taskSuspend+0x23c>)
 8013e5c:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8013e60:	491e      	ldr	r1, [pc, #120]	@ (8013edc <gos_taskSuspend+0x240>)
 8013e62:	2034      	movs	r0, #52	@ 0x34
 8013e64:	f001 fab8 	bl	80153d8 <gos_errorHandler>
 8013e68:	e000      	b.n	8013e6c <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8013e6a:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 8013e6c:	7bfb      	ldrb	r3, [r7, #15]
 8013e6e:	2b55      	cmp	r3, #85	@ 0x55
 8013e70:	d020      	beq.n	8013eb4 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 8013e72:	4b13      	ldr	r3, [pc, #76]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d005      	beq.n	8013e86 <gos_taskSuspend+0x1ea>
 8013e7a:	4b11      	ldr	r3, [pc, #68]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	3b01      	subs	r3, #1
 8013e80:	b2da      	uxtb	r2, r3
 8013e82:	4b0f      	ldr	r3, [pc, #60]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013e84:	701a      	strb	r2, [r3, #0]
 8013e86:	4b0e      	ldr	r3, [pc, #56]	@ (8013ec0 <gos_taskSuspend+0x224>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d108      	bne.n	8013ea0 <gos_taskSuspend+0x204>
 8013e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8013ec4 <gos_taskSuspend+0x228>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f383 8810 	msr	PRIMASK, r3
 8013e96:	b662      	cpsie	i
 8013e98:	f3bf 8f4f 	dsb	sy
 8013e9c:	f3bf 8f6f 	isb	sy
 8013ea0:	4b09      	ldr	r3, [pc, #36]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d005      	beq.n	8013eb4 <gos_taskSuspend+0x218>
 8013ea8:	4b07      	ldr	r3, [pc, #28]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	3b01      	subs	r3, #1
 8013eae:	b2da      	uxtb	r2, r3
 8013eb0:	4b05      	ldr	r3, [pc, #20]	@ (8013ec8 <gos_taskSuspend+0x22c>)
 8013eb2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 8013eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	200061bb 	.word	0x200061bb
 8013ec4:	200061bc 	.word	0x200061bc
 8013ec8:	200061b9 	.word	0x200061b9
 8013ecc:	200061c0 	.word	0x200061c0
 8013ed0:	20000828 	.word	0x20000828
 8013ed4:	200061ba 	.word	0x200061ba
 8013ed8:	0801c23c 	.word	0x0801c23c
 8013edc:	0801cf34 	.word	0x0801cf34

08013ee0 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b086      	sub	sp, #24
 8013ee4:	af02      	add	r7, sp, #8
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 8013eea:	23ae      	movs	r3, #174	@ 0xae
 8013eec:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8013ef2:	4b4a      	ldr	r3, [pc, #296]	@ (801401c <gos_taskResume+0x13c>)
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d108      	bne.n	8013f0c <gos_taskResume+0x2c>
 8013efa:	b672      	cpsid	i
 8013efc:	f3ef 8310 	mrs	r3, PRIMASK
 8013f00:	4a47      	ldr	r2, [pc, #284]	@ (8014020 <gos_taskResume+0x140>)
 8013f02:	6013      	str	r3, [r2, #0]
 8013f04:	f3bf 8f4f 	dsb	sy
 8013f08:	f3bf 8f6f 	isb	sy
 8013f0c:	4b43      	ldr	r3, [pc, #268]	@ (801401c <gos_taskResume+0x13c>)
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	3301      	adds	r3, #1
 8013f12:	b2da      	uxtb	r2, r3
 8013f14:	4b41      	ldr	r3, [pc, #260]	@ (801401c <gos_taskResume+0x13c>)
 8013f16:	701a      	strb	r2, [r3, #0]
 8013f18:	4b42      	ldr	r3, [pc, #264]	@ (8014024 <gos_taskResume+0x144>)
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	4b40      	ldr	r3, [pc, #256]	@ (8014024 <gos_taskResume+0x144>)
 8013f22:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8013f24:	88fb      	ldrh	r3, [r7, #6]
 8013f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013f2a:	d950      	bls.n	8013fce <gos_taskResume+0xee>
 8013f2c:	88fb      	ldrh	r3, [r7, #6]
 8013f2e:	f248 0211 	movw	r2, #32785	@ 0x8011
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d84b      	bhi.n	8013fce <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8013f36:	88fb      	ldrh	r3, [r7, #6]
 8013f38:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8013f3c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8013f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8014028 <gos_taskResume+0x148>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4a3a      	ldr	r2, [pc, #232]	@ (801402c <gos_taskResume+0x14c>)
 8013f44:	216a      	movs	r1, #106	@ 0x6a
 8013f46:	fb01 f303 	mul.w	r3, r1, r3
 8013f4a:	4413      	add	r3, r2
 8013f4c:	3308      	adds	r3, #8
 8013f4e:	881b      	ldrh	r3, [r3, #0]
 8013f50:	b21b      	sxth	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	db03      	blt.n	8013f5e <gos_taskResume+0x7e>
            inIsr > 0)
 8013f56:	4b36      	ldr	r3, [pc, #216]	@ (8014030 <gos_taskResume+0x150>)
 8013f58:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d01d      	beq.n	8013f9a <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8013f5e:	4a33      	ldr	r2, [pc, #204]	@ (801402c <gos_taskResume+0x14c>)
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	216a      	movs	r1, #106	@ 0x6a
 8013f64:	fb01 f303 	mul.w	r3, r1, r3
 8013f68:	4413      	add	r3, r2
 8013f6a:	3304      	adds	r3, #4
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	2b05      	cmp	r3, #5
 8013f70:	d12d      	bne.n	8013fce <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8013f72:	4a2e      	ldr	r2, [pc, #184]	@ (801402c <gos_taskResume+0x14c>)
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	216a      	movs	r1, #106	@ 0x6a
 8013f78:	fb01 f303 	mul.w	r3, r1, r3
 8013f7c:	4413      	add	r3, r2
 8013f7e:	3305      	adds	r3, #5
 8013f80:	7818      	ldrb	r0, [r3, #0]
 8013f82:	4a2a      	ldr	r2, [pc, #168]	@ (801402c <gos_taskResume+0x14c>)
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	216a      	movs	r1, #106	@ 0x6a
 8013f88:	fb01 f303 	mul.w	r3, r1, r3
 8013f8c:	4413      	add	r3, r2
 8013f8e:	3304      	adds	r3, #4
 8013f90:	4602      	mov	r2, r0
 8013f92:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8013f94:	2355      	movs	r3, #85	@ 0x55
 8013f96:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8013f98:	e019      	b.n	8013fce <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8013f9a:	4b23      	ldr	r3, [pc, #140]	@ (8014028 <gos_taskResume+0x148>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	226a      	movs	r2, #106	@ 0x6a
 8013fa0:	fb02 f303 	mul.w	r3, r2, r3
 8013fa4:	3308      	adds	r3, #8
 8013fa6:	4a21      	ldr	r2, [pc, #132]	@ (801402c <gos_taskResume+0x14c>)
 8013fa8:	4413      	add	r3, r2
 8013faa:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8013fac:	68ba      	ldr	r2, [r7, #8]
 8013fae:	216a      	movs	r1, #106	@ 0x6a
 8013fb0:	fb01 f202 	mul.w	r2, r1, r2
 8013fb4:	3208      	adds	r2, #8
 8013fb6:	491d      	ldr	r1, [pc, #116]	@ (801402c <gos_taskResume+0x14c>)
 8013fb8:	440a      	add	r2, r1
 8013fba:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 8013fbc:	9201      	str	r2, [sp, #4]
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8014034 <gos_taskResume+0x154>)
 8013fc2:	f240 12f1 	movw	r2, #497	@ 0x1f1
 8013fc6:	491c      	ldr	r1, [pc, #112]	@ (8014038 <gos_taskResume+0x158>)
 8013fc8:	2034      	movs	r0, #52	@ 0x34
 8013fca:	f001 fa05 	bl	80153d8 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 8013fce:	4b13      	ldr	r3, [pc, #76]	@ (801401c <gos_taskResume+0x13c>)
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d005      	beq.n	8013fe2 <gos_taskResume+0x102>
 8013fd6:	4b11      	ldr	r3, [pc, #68]	@ (801401c <gos_taskResume+0x13c>)
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	b2da      	uxtb	r2, r3
 8013fde:	4b0f      	ldr	r3, [pc, #60]	@ (801401c <gos_taskResume+0x13c>)
 8013fe0:	701a      	strb	r2, [r3, #0]
 8013fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801401c <gos_taskResume+0x13c>)
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d108      	bne.n	8013ffc <gos_taskResume+0x11c>
 8013fea:	4b0d      	ldr	r3, [pc, #52]	@ (8014020 <gos_taskResume+0x140>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	f383 8810 	msr	PRIMASK, r3
 8013ff2:	b662      	cpsie	i
 8013ff4:	f3bf 8f4f 	dsb	sy
 8013ff8:	f3bf 8f6f 	isb	sy
 8013ffc:	4b09      	ldr	r3, [pc, #36]	@ (8014024 <gos_taskResume+0x144>)
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d005      	beq.n	8014010 <gos_taskResume+0x130>
 8014004:	4b07      	ldr	r3, [pc, #28]	@ (8014024 <gos_taskResume+0x144>)
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	3b01      	subs	r3, #1
 801400a:	b2da      	uxtb	r2, r3
 801400c:	4b05      	ldr	r3, [pc, #20]	@ (8014024 <gos_taskResume+0x144>)
 801400e:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 8014010:	7bfb      	ldrb	r3, [r7, #15]
}
 8014012:	4618      	mov	r0, r3
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	200061bb 	.word	0x200061bb
 8014020:	200061bc 	.word	0x200061bc
 8014024:	200061b9 	.word	0x200061b9
 8014028:	200061c0 	.word	0x200061c0
 801402c:	20000828 	.word	0x20000828
 8014030:	200061ba 	.word	0x200061ba
 8014034:	0801c264 	.word	0x0801c264
 8014038:	0801cf44 	.word	0x0801cf44

0801403c <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b086      	sub	sp, #24
 8014040:	af02      	add	r7, sp, #8
 8014042:	4603      	mov	r3, r0
 8014044:	6039      	str	r1, [r7, #0]
 8014046:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 8014048:	23ae      	movs	r3, #174	@ 0xae
 801404a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 801404c:	2300      	movs	r3, #0
 801404e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014050:	4b7b      	ldr	r3, [pc, #492]	@ (8014240 <gos_taskBlock+0x204>)
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d108      	bne.n	801406a <gos_taskBlock+0x2e>
 8014058:	b672      	cpsid	i
 801405a:	f3ef 8310 	mrs	r3, PRIMASK
 801405e:	4a79      	ldr	r2, [pc, #484]	@ (8014244 <gos_taskBlock+0x208>)
 8014060:	6013      	str	r3, [r2, #0]
 8014062:	f3bf 8f4f 	dsb	sy
 8014066:	f3bf 8f6f 	isb	sy
 801406a:	4b75      	ldr	r3, [pc, #468]	@ (8014240 <gos_taskBlock+0x204>)
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	3301      	adds	r3, #1
 8014070:	b2da      	uxtb	r2, r3
 8014072:	4b73      	ldr	r3, [pc, #460]	@ (8014240 <gos_taskBlock+0x204>)
 8014074:	701a      	strb	r2, [r3, #0]
 8014076:	4b74      	ldr	r3, [pc, #464]	@ (8014248 <gos_taskBlock+0x20c>)
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	3301      	adds	r3, #1
 801407c:	b2da      	uxtb	r2, r3
 801407e:	4b72      	ldr	r3, [pc, #456]	@ (8014248 <gos_taskBlock+0x20c>)
 8014080:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8014082:	88fb      	ldrh	r3, [r7, #6]
 8014084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014088:	f240 80b0 	bls.w	80141ec <gos_taskBlock+0x1b0>
 801408c:	88fb      	ldrh	r3, [r7, #6]
 801408e:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014092:	4293      	cmp	r3, r2
 8014094:	f200 80aa 	bhi.w	80141ec <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014098:	88fb      	ldrh	r3, [r7, #6]
 801409a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801409e:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80140a0:	4b6a      	ldr	r3, [pc, #424]	@ (801424c <gos_taskBlock+0x210>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4a6a      	ldr	r2, [pc, #424]	@ (8014250 <gos_taskBlock+0x214>)
 80140a6:	216a      	movs	r1, #106	@ 0x6a
 80140a8:	fb01 f303 	mul.w	r3, r1, r3
 80140ac:	4413      	add	r3, r2
 80140ae:	3308      	adds	r3, #8
 80140b0:	881b      	ldrh	r3, [r3, #0]
 80140b2:	b21b      	sxth	r3, r3
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	db08      	blt.n	80140ca <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 80140b8:	4b64      	ldr	r3, [pc, #400]	@ (801424c <gos_taskBlock+0x210>)
 80140ba:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80140bc:	68ba      	ldr	r2, [r7, #8]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d003      	beq.n	80140ca <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 80140c2:	4b64      	ldr	r3, [pc, #400]	@ (8014254 <gos_taskBlock+0x218>)
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d053      	beq.n	8014172 <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80140ca:	4a61      	ldr	r2, [pc, #388]	@ (8014250 <gos_taskBlock+0x214>)
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	216a      	movs	r1, #106	@ 0x6a
 80140d0:	fb01 f303 	mul.w	r3, r1, r3
 80140d4:	4413      	add	r3, r2
 80140d6:	3304      	adds	r3, #4
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	2b0a      	cmp	r3, #10
 80140dc:	f040 8085 	bne.w	80141ea <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 80140e0:	4a5b      	ldr	r2, [pc, #364]	@ (8014250 <gos_taskBlock+0x214>)
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	216a      	movs	r1, #106	@ 0x6a
 80140e6:	fb01 f303 	mul.w	r3, r1, r3
 80140ea:	4413      	add	r3, r2
 80140ec:	3304      	adds	r3, #4
 80140ee:	2219      	movs	r2, #25
 80140f0:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 80140f2:	4a57      	ldr	r2, [pc, #348]	@ (8014250 <gos_taskBlock+0x214>)
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	216a      	movs	r1, #106	@ 0x6a
 80140f8:	fb01 f303 	mul.w	r3, r1, r3
 80140fc:	4413      	add	r3, r2
 80140fe:	3334      	adds	r3, #52	@ 0x34
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 8014104:	4a52      	ldr	r2, [pc, #328]	@ (8014250 <gos_taskBlock+0x214>)
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	216a      	movs	r1, #106	@ 0x6a
 801410a:	fb01 f303 	mul.w	r3, r1, r3
 801410e:	4413      	add	r3, r2
 8014110:	3338      	adds	r3, #56	@ 0x38
 8014112:	2200      	movs	r2, #0
 8014114:	801a      	strh	r2, [r3, #0]
 8014116:	2200      	movs	r2, #0
 8014118:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 801411a:	2355      	movs	r3, #85	@ 0x55
 801411c:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 801411e:	4b48      	ldr	r3, [pc, #288]	@ (8014240 <gos_taskBlock+0x204>)
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d005      	beq.n	8014132 <gos_taskBlock+0xf6>
 8014126:	4b46      	ldr	r3, [pc, #280]	@ (8014240 <gos_taskBlock+0x204>)
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	3b01      	subs	r3, #1
 801412c:	b2da      	uxtb	r2, r3
 801412e:	4b44      	ldr	r3, [pc, #272]	@ (8014240 <gos_taskBlock+0x204>)
 8014130:	701a      	strb	r2, [r3, #0]
 8014132:	4b43      	ldr	r3, [pc, #268]	@ (8014240 <gos_taskBlock+0x204>)
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d108      	bne.n	801414c <gos_taskBlock+0x110>
 801413a:	4b42      	ldr	r3, [pc, #264]	@ (8014244 <gos_taskBlock+0x208>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f383 8810 	msr	PRIMASK, r3
 8014142:	b662      	cpsie	i
 8014144:	f3bf 8f4f 	dsb	sy
 8014148:	f3bf 8f6f 	isb	sy
 801414c:	4b3e      	ldr	r3, [pc, #248]	@ (8014248 <gos_taskBlock+0x20c>)
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d005      	beq.n	8014160 <gos_taskBlock+0x124>
 8014154:	4b3c      	ldr	r3, [pc, #240]	@ (8014248 <gos_taskBlock+0x20c>)
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	3b01      	subs	r3, #1
 801415a:	b2da      	uxtb	r2, r3
 801415c:	4b3a      	ldr	r3, [pc, #232]	@ (8014248 <gos_taskBlock+0x20c>)
 801415e:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8014160:	4b3a      	ldr	r3, [pc, #232]	@ (801424c <gos_taskBlock+0x210>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	68ba      	ldr	r2, [r7, #8]
 8014166:	429a      	cmp	r2, r3
 8014168:	d13f      	bne.n	80141ea <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 801416a:	2009      	movs	r0, #9
 801416c:	f7fe fff6 	bl	801315c <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8014170:	e03b      	b.n	80141ea <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8014172:	4b33      	ldr	r3, [pc, #204]	@ (8014240 <gos_taskBlock+0x204>)
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d005      	beq.n	8014186 <gos_taskBlock+0x14a>
 801417a:	4b31      	ldr	r3, [pc, #196]	@ (8014240 <gos_taskBlock+0x204>)
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	3b01      	subs	r3, #1
 8014180:	b2da      	uxtb	r2, r3
 8014182:	4b2f      	ldr	r3, [pc, #188]	@ (8014240 <gos_taskBlock+0x204>)
 8014184:	701a      	strb	r2, [r3, #0]
 8014186:	4b2e      	ldr	r3, [pc, #184]	@ (8014240 <gos_taskBlock+0x204>)
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d108      	bne.n	80141a0 <gos_taskBlock+0x164>
 801418e:	4b2d      	ldr	r3, [pc, #180]	@ (8014244 <gos_taskBlock+0x208>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f383 8810 	msr	PRIMASK, r3
 8014196:	b662      	cpsie	i
 8014198:	f3bf 8f4f 	dsb	sy
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	4b29      	ldr	r3, [pc, #164]	@ (8014248 <gos_taskBlock+0x20c>)
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d005      	beq.n	80141b4 <gos_taskBlock+0x178>
 80141a8:	4b27      	ldr	r3, [pc, #156]	@ (8014248 <gos_taskBlock+0x20c>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	3b01      	subs	r3, #1
 80141ae:	b2da      	uxtb	r2, r3
 80141b0:	4b25      	ldr	r3, [pc, #148]	@ (8014248 <gos_taskBlock+0x20c>)
 80141b2:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80141b4:	4b25      	ldr	r3, [pc, #148]	@ (801424c <gos_taskBlock+0x210>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	226a      	movs	r2, #106	@ 0x6a
 80141ba:	fb02 f303 	mul.w	r3, r2, r3
 80141be:	3308      	adds	r3, #8
 80141c0:	4a23      	ldr	r2, [pc, #140]	@ (8014250 <gos_taskBlock+0x214>)
 80141c2:	4413      	add	r3, r2
 80141c4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80141c6:	68ba      	ldr	r2, [r7, #8]
 80141c8:	216a      	movs	r1, #106	@ 0x6a
 80141ca:	fb01 f202 	mul.w	r2, r1, r2
 80141ce:	3208      	adds	r2, #8
 80141d0:	491f      	ldr	r1, [pc, #124]	@ (8014250 <gos_taskBlock+0x214>)
 80141d2:	440a      	add	r2, r1
 80141d4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 80141d6:	9201      	str	r2, [sp, #4]
 80141d8:	9300      	str	r3, [sp, #0]
 80141da:	4b1f      	ldr	r3, [pc, #124]	@ (8014258 <gos_taskBlock+0x21c>)
 80141dc:	f240 2235 	movw	r2, #565	@ 0x235
 80141e0:	491e      	ldr	r1, [pc, #120]	@ (801425c <gos_taskBlock+0x220>)
 80141e2:	2034      	movs	r0, #52	@ 0x34
 80141e4:	f001 f8f8 	bl	80153d8 <gos_errorHandler>
 80141e8:	e000      	b.n	80141ec <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80141ea:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 80141ec:	7bfb      	ldrb	r3, [r7, #15]
 80141ee:	2b55      	cmp	r3, #85	@ 0x55
 80141f0:	d020      	beq.n	8014234 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 80141f2:	4b13      	ldr	r3, [pc, #76]	@ (8014240 <gos_taskBlock+0x204>)
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d005      	beq.n	8014206 <gos_taskBlock+0x1ca>
 80141fa:	4b11      	ldr	r3, [pc, #68]	@ (8014240 <gos_taskBlock+0x204>)
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	3b01      	subs	r3, #1
 8014200:	b2da      	uxtb	r2, r3
 8014202:	4b0f      	ldr	r3, [pc, #60]	@ (8014240 <gos_taskBlock+0x204>)
 8014204:	701a      	strb	r2, [r3, #0]
 8014206:	4b0e      	ldr	r3, [pc, #56]	@ (8014240 <gos_taskBlock+0x204>)
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d108      	bne.n	8014220 <gos_taskBlock+0x1e4>
 801420e:	4b0d      	ldr	r3, [pc, #52]	@ (8014244 <gos_taskBlock+0x208>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f383 8810 	msr	PRIMASK, r3
 8014216:	b662      	cpsie	i
 8014218:	f3bf 8f4f 	dsb	sy
 801421c:	f3bf 8f6f 	isb	sy
 8014220:	4b09      	ldr	r3, [pc, #36]	@ (8014248 <gos_taskBlock+0x20c>)
 8014222:	781b      	ldrb	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d005      	beq.n	8014234 <gos_taskBlock+0x1f8>
 8014228:	4b07      	ldr	r3, [pc, #28]	@ (8014248 <gos_taskBlock+0x20c>)
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	3b01      	subs	r3, #1
 801422e:	b2da      	uxtb	r2, r3
 8014230:	4b05      	ldr	r3, [pc, #20]	@ (8014248 <gos_taskBlock+0x20c>)
 8014232:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 8014234:	7bfb      	ldrb	r3, [r7, #15]
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	200061bb 	.word	0x200061bb
 8014244:	200061bc 	.word	0x200061bc
 8014248:	200061b9 	.word	0x200061b9
 801424c:	200061c0 	.word	0x200061c0
 8014250:	20000828 	.word	0x20000828
 8014254:	200061ba 	.word	0x200061ba
 8014258:	0801c28c 	.word	0x0801c28c
 801425c:	0801cf54 	.word	0x0801cf54

08014260 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b086      	sub	sp, #24
 8014264:	af02      	add	r7, sp, #8
 8014266:	4603      	mov	r3, r0
 8014268:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 801426a:	23ae      	movs	r3, #174	@ 0xae
 801426c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 801426e:	2300      	movs	r3, #0
 8014270:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014272:	4b68      	ldr	r3, [pc, #416]	@ (8014414 <gos_taskUnblock+0x1b4>)
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d108      	bne.n	801428c <gos_taskUnblock+0x2c>
 801427a:	b672      	cpsid	i
 801427c:	f3ef 8310 	mrs	r3, PRIMASK
 8014280:	4a65      	ldr	r2, [pc, #404]	@ (8014418 <gos_taskUnblock+0x1b8>)
 8014282:	6013      	str	r3, [r2, #0]
 8014284:	f3bf 8f4f 	dsb	sy
 8014288:	f3bf 8f6f 	isb	sy
 801428c:	4b61      	ldr	r3, [pc, #388]	@ (8014414 <gos_taskUnblock+0x1b4>)
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	3301      	adds	r3, #1
 8014292:	b2da      	uxtb	r2, r3
 8014294:	4b5f      	ldr	r3, [pc, #380]	@ (8014414 <gos_taskUnblock+0x1b4>)
 8014296:	701a      	strb	r2, [r3, #0]
 8014298:	4b60      	ldr	r3, [pc, #384]	@ (801441c <gos_taskUnblock+0x1bc>)
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	3301      	adds	r3, #1
 801429e:	b2da      	uxtb	r2, r3
 80142a0:	4b5e      	ldr	r3, [pc, #376]	@ (801441c <gos_taskUnblock+0x1bc>)
 80142a2:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80142a4:	88fb      	ldrh	r3, [r7, #6]
 80142a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80142aa:	f240 808d 	bls.w	80143c8 <gos_taskUnblock+0x168>
 80142ae:	88fb      	ldrh	r3, [r7, #6]
 80142b0:	f248 0211 	movw	r2, #32785	@ 0x8011
 80142b4:	4293      	cmp	r3, r2
 80142b6:	f200 8087 	bhi.w	80143c8 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80142ba:	88fb      	ldrh	r3, [r7, #6]
 80142bc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80142c0:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80142c2:	4b57      	ldr	r3, [pc, #348]	@ (8014420 <gos_taskUnblock+0x1c0>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a57      	ldr	r2, [pc, #348]	@ (8014424 <gos_taskUnblock+0x1c4>)
 80142c8:	216a      	movs	r1, #106	@ 0x6a
 80142ca:	fb01 f303 	mul.w	r3, r1, r3
 80142ce:	4413      	add	r3, r2
 80142d0:	3308      	adds	r3, #8
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	b21b      	sxth	r3, r3
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	db03      	blt.n	80142e2 <gos_taskUnblock+0x82>
            inIsr > 0)
 80142da:	4b53      	ldr	r3, [pc, #332]	@ (8014428 <gos_taskUnblock+0x1c8>)
 80142dc:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d035      	beq.n	801434e <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80142e2:	4a50      	ldr	r2, [pc, #320]	@ (8014424 <gos_taskUnblock+0x1c4>)
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	216a      	movs	r1, #106	@ 0x6a
 80142e8:	fb01 f303 	mul.w	r3, r1, r3
 80142ec:	4413      	add	r3, r2
 80142ee:	3304      	adds	r3, #4
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	2b19      	cmp	r3, #25
 80142f4:	d10b      	bne.n	801430e <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80142f6:	4a4b      	ldr	r2, [pc, #300]	@ (8014424 <gos_taskUnblock+0x1c4>)
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	216a      	movs	r1, #106	@ 0x6a
 80142fc:	fb01 f303 	mul.w	r3, r1, r3
 8014300:	4413      	add	r3, r2
 8014302:	3304      	adds	r3, #4
 8014304:	220a      	movs	r2, #10
 8014306:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8014308:	2355      	movs	r3, #85	@ 0x55
 801430a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 801430c:	e05b      	b.n	80143c6 <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 801430e:	4a45      	ldr	r2, [pc, #276]	@ (8014424 <gos_taskUnblock+0x1c4>)
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	216a      	movs	r1, #106	@ 0x6a
 8014314:	fb01 f303 	mul.w	r3, r1, r3
 8014318:	4413      	add	r3, r2
 801431a:	3304      	adds	r3, #4
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	2b05      	cmp	r3, #5
 8014320:	d151      	bne.n	80143c6 <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8014322:	4a40      	ldr	r2, [pc, #256]	@ (8014424 <gos_taskUnblock+0x1c4>)
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	216a      	movs	r1, #106	@ 0x6a
 8014328:	fb01 f303 	mul.w	r3, r1, r3
 801432c:	4413      	add	r3, r2
 801432e:	3305      	adds	r3, #5
 8014330:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8014332:	2b19      	cmp	r3, #25
 8014334:	d147      	bne.n	80143c6 <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 8014336:	4a3b      	ldr	r2, [pc, #236]	@ (8014424 <gos_taskUnblock+0x1c4>)
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	216a      	movs	r1, #106	@ 0x6a
 801433c:	fb01 f303 	mul.w	r3, r1, r3
 8014340:	4413      	add	r3, r2
 8014342:	3305      	adds	r3, #5
 8014344:	220a      	movs	r2, #10
 8014346:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8014348:	2355      	movs	r3, #85	@ 0x55
 801434a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 801434c:	e03b      	b.n	80143c6 <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 801434e:	4b31      	ldr	r3, [pc, #196]	@ (8014414 <gos_taskUnblock+0x1b4>)
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d005      	beq.n	8014362 <gos_taskUnblock+0x102>
 8014356:	4b2f      	ldr	r3, [pc, #188]	@ (8014414 <gos_taskUnblock+0x1b4>)
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	3b01      	subs	r3, #1
 801435c:	b2da      	uxtb	r2, r3
 801435e:	4b2d      	ldr	r3, [pc, #180]	@ (8014414 <gos_taskUnblock+0x1b4>)
 8014360:	701a      	strb	r2, [r3, #0]
 8014362:	4b2c      	ldr	r3, [pc, #176]	@ (8014414 <gos_taskUnblock+0x1b4>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d108      	bne.n	801437c <gos_taskUnblock+0x11c>
 801436a:	4b2b      	ldr	r3, [pc, #172]	@ (8014418 <gos_taskUnblock+0x1b8>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f383 8810 	msr	PRIMASK, r3
 8014372:	b662      	cpsie	i
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	4b27      	ldr	r3, [pc, #156]	@ (801441c <gos_taskUnblock+0x1bc>)
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d005      	beq.n	8014390 <gos_taskUnblock+0x130>
 8014384:	4b25      	ldr	r3, [pc, #148]	@ (801441c <gos_taskUnblock+0x1bc>)
 8014386:	781b      	ldrb	r3, [r3, #0]
 8014388:	3b01      	subs	r3, #1
 801438a:	b2da      	uxtb	r2, r3
 801438c:	4b23      	ldr	r3, [pc, #140]	@ (801441c <gos_taskUnblock+0x1bc>)
 801438e:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8014390:	4b23      	ldr	r3, [pc, #140]	@ (8014420 <gos_taskUnblock+0x1c0>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	226a      	movs	r2, #106	@ 0x6a
 8014396:	fb02 f303 	mul.w	r3, r2, r3
 801439a:	3308      	adds	r3, #8
 801439c:	4a21      	ldr	r2, [pc, #132]	@ (8014424 <gos_taskUnblock+0x1c4>)
 801439e:	4413      	add	r3, r2
 80143a0:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80143a2:	68ba      	ldr	r2, [r7, #8]
 80143a4:	216a      	movs	r1, #106	@ 0x6a
 80143a6:	fb01 f202 	mul.w	r2, r1, r2
 80143aa:	3208      	adds	r2, #8
 80143ac:	491d      	ldr	r1, [pc, #116]	@ (8014424 <gos_taskUnblock+0x1c4>)
 80143ae:	440a      	add	r2, r1
 80143b0:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 80143b2:	9201      	str	r2, [sp, #4]
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	4b1d      	ldr	r3, [pc, #116]	@ (801442c <gos_taskUnblock+0x1cc>)
 80143b8:	f240 2276 	movw	r2, #630	@ 0x276
 80143bc:	491c      	ldr	r1, [pc, #112]	@ (8014430 <gos_taskUnblock+0x1d0>)
 80143be:	2034      	movs	r0, #52	@ 0x34
 80143c0:	f001 f80a 	bl	80153d8 <gos_errorHandler>
 80143c4:	e000      	b.n	80143c8 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80143c6:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80143c8:	4b12      	ldr	r3, [pc, #72]	@ (8014414 <gos_taskUnblock+0x1b4>)
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d005      	beq.n	80143dc <gos_taskUnblock+0x17c>
 80143d0:	4b10      	ldr	r3, [pc, #64]	@ (8014414 <gos_taskUnblock+0x1b4>)
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	3b01      	subs	r3, #1
 80143d6:	b2da      	uxtb	r2, r3
 80143d8:	4b0e      	ldr	r3, [pc, #56]	@ (8014414 <gos_taskUnblock+0x1b4>)
 80143da:	701a      	strb	r2, [r3, #0]
 80143dc:	4b0d      	ldr	r3, [pc, #52]	@ (8014414 <gos_taskUnblock+0x1b4>)
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d108      	bne.n	80143f6 <gos_taskUnblock+0x196>
 80143e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014418 <gos_taskUnblock+0x1b8>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	f383 8810 	msr	PRIMASK, r3
 80143ec:	b662      	cpsie	i
 80143ee:	f3bf 8f4f 	dsb	sy
 80143f2:	f3bf 8f6f 	isb	sy
 80143f6:	4b09      	ldr	r3, [pc, #36]	@ (801441c <gos_taskUnblock+0x1bc>)
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d005      	beq.n	801440a <gos_taskUnblock+0x1aa>
 80143fe:	4b07      	ldr	r3, [pc, #28]	@ (801441c <gos_taskUnblock+0x1bc>)
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	3b01      	subs	r3, #1
 8014404:	b2da      	uxtb	r2, r3
 8014406:	4b05      	ldr	r3, [pc, #20]	@ (801441c <gos_taskUnblock+0x1bc>)
 8014408:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 801440a:	7bfb      	ldrb	r3, [r7, #15]
}
 801440c:	4618      	mov	r0, r3
 801440e:	3710      	adds	r7, #16
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	200061bb 	.word	0x200061bb
 8014418:	200061bc 	.word	0x200061bc
 801441c:	200061b9 	.word	0x200061b9
 8014420:	200061c0 	.word	0x200061c0
 8014424:	20000828 	.word	0x20000828
 8014428:	200061ba 	.word	0x200061ba
 801442c:	0801c2b4 	.word	0x0801c2b4
 8014430:	0801cf64 	.word	0x0801cf64

08014434 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af02      	add	r7, sp, #8
 801443a:	4603      	mov	r3, r0
 801443c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 801443e:	23ae      	movs	r3, #174	@ 0xae
 8014440:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8014442:	2300      	movs	r3, #0
 8014444:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014446:	4b84      	ldr	r3, [pc, #528]	@ (8014658 <gos_taskDelete+0x224>)
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d108      	bne.n	8014460 <gos_taskDelete+0x2c>
 801444e:	b672      	cpsid	i
 8014450:	f3ef 8310 	mrs	r3, PRIMASK
 8014454:	4a81      	ldr	r2, [pc, #516]	@ (801465c <gos_taskDelete+0x228>)
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	f3bf 8f4f 	dsb	sy
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	4b7d      	ldr	r3, [pc, #500]	@ (8014658 <gos_taskDelete+0x224>)
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	3301      	adds	r3, #1
 8014466:	b2da      	uxtb	r2, r3
 8014468:	4b7b      	ldr	r3, [pc, #492]	@ (8014658 <gos_taskDelete+0x224>)
 801446a:	701a      	strb	r2, [r3, #0]
 801446c:	4b7c      	ldr	r3, [pc, #496]	@ (8014660 <gos_taskDelete+0x22c>)
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	3301      	adds	r3, #1
 8014472:	b2da      	uxtb	r2, r3
 8014474:	4b7a      	ldr	r3, [pc, #488]	@ (8014660 <gos_taskDelete+0x22c>)
 8014476:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8014478:	88fb      	ldrh	r3, [r7, #6]
 801447a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801447e:	f240 80b9 	bls.w	80145f4 <gos_taskDelete+0x1c0>
 8014482:	88fb      	ldrh	r3, [r7, #6]
 8014484:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014488:	4293      	cmp	r3, r2
 801448a:	f200 80b3 	bhi.w	80145f4 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801448e:	88fb      	ldrh	r3, [r7, #6]
 8014490:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014494:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8014496:	4b73      	ldr	r3, [pc, #460]	@ (8014664 <gos_taskDelete+0x230>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4a73      	ldr	r2, [pc, #460]	@ (8014668 <gos_taskDelete+0x234>)
 801449c:	216a      	movs	r1, #106	@ 0x6a
 801449e:	fb01 f303 	mul.w	r3, r1, r3
 80144a2:	4413      	add	r3, r2
 80144a4:	3308      	adds	r3, #8
 80144a6:	881b      	ldrh	r3, [r3, #0]
 80144a8:	b21b      	sxth	r3, r3
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	db08      	blt.n	80144c0 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80144ae:	4b6d      	ldr	r3, [pc, #436]	@ (8014664 <gos_taskDelete+0x230>)
 80144b0:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80144b2:	68ba      	ldr	r2, [r7, #8]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d003      	beq.n	80144c0 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80144b8:	4b6c      	ldr	r3, [pc, #432]	@ (801466c <gos_taskDelete+0x238>)
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d05e      	beq.n	801457e <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80144c0:	4a69      	ldr	r2, [pc, #420]	@ (8014668 <gos_taskDelete+0x234>)
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	216a      	movs	r1, #106	@ 0x6a
 80144c6:	fb01 f303 	mul.w	r3, r1, r3
 80144ca:	4413      	add	r3, r2
 80144cc:	3304      	adds	r3, #4
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	2b0d      	cmp	r3, #13
 80144d2:	f000 808f 	beq.w	80145f4 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 80144d6:	4a64      	ldr	r2, [pc, #400]	@ (8014668 <gos_taskDelete+0x234>)
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	216a      	movs	r1, #106	@ 0x6a
 80144dc:	fb01 f303 	mul.w	r3, r1, r3
 80144e0:	4413      	add	r3, r2
 80144e2:	3304      	adds	r3, #4
 80144e4:	220d      	movs	r2, #13
 80144e6:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 80144e8:	2355      	movs	r3, #85	@ 0x55
 80144ea:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 80144ec:	4b5d      	ldr	r3, [pc, #372]	@ (8014664 <gos_taskDelete+0x230>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	4a5d      	ldr	r2, [pc, #372]	@ (8014668 <gos_taskDelete+0x234>)
 80144f2:	216a      	movs	r1, #106	@ 0x6a
 80144f4:	fb01 f303 	mul.w	r3, r1, r3
 80144f8:	4413      	add	r3, r2
 80144fa:	3308      	adds	r3, #8
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014502:	2b00      	cmp	r3, #0
 8014504:	d133      	bne.n	801456e <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 8014506:	4b57      	ldr	r3, [pc, #348]	@ (8014664 <gos_taskDelete+0x230>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4a57      	ldr	r2, [pc, #348]	@ (8014668 <gos_taskDelete+0x234>)
 801450c:	216a      	movs	r1, #106	@ 0x6a
 801450e:	fb01 f303 	mul.w	r3, r1, r3
 8014512:	4413      	add	r3, r2
 8014514:	3308      	adds	r3, #8
 8014516:	881a      	ldrh	r2, [r3, #0]
 8014518:	4b52      	ldr	r3, [pc, #328]	@ (8014664 <gos_taskDelete+0x230>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014520:	b290      	uxth	r0, r2
 8014522:	4a51      	ldr	r2, [pc, #324]	@ (8014668 <gos_taskDelete+0x234>)
 8014524:	216a      	movs	r1, #106	@ 0x6a
 8014526:	fb01 f303 	mul.w	r3, r1, r3
 801452a:	4413      	add	r3, r2
 801452c:	3308      	adds	r3, #8
 801452e:	4602      	mov	r2, r0
 8014530:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8014532:	4b4f      	ldr	r3, [pc, #316]	@ (8014670 <gos_taskDelete+0x23c>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	88fa      	ldrh	r2, [r7, #6]
 8014538:	4611      	mov	r1, r2
 801453a:	4618      	mov	r0, r3
 801453c:	f002 fae6 	bl	8016b0c <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8014540:	4b48      	ldr	r3, [pc, #288]	@ (8014664 <gos_taskDelete+0x230>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4a48      	ldr	r2, [pc, #288]	@ (8014668 <gos_taskDelete+0x234>)
 8014546:	216a      	movs	r1, #106	@ 0x6a
 8014548:	fb01 f303 	mul.w	r3, r1, r3
 801454c:	4413      	add	r3, r2
 801454e:	3308      	adds	r3, #8
 8014550:	881a      	ldrh	r2, [r3, #0]
 8014552:	4b44      	ldr	r3, [pc, #272]	@ (8014664 <gos_taskDelete+0x230>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801455a:	b290      	uxth	r0, r2
 801455c:	4a42      	ldr	r2, [pc, #264]	@ (8014668 <gos_taskDelete+0x234>)
 801455e:	216a      	movs	r1, #106	@ 0x6a
 8014560:	fb01 f303 	mul.w	r3, r1, r3
 8014564:	4413      	add	r3, r2
 8014566:	3308      	adds	r3, #8
 8014568:	4602      	mov	r2, r0
 801456a:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 801456c:	e042      	b.n	80145f4 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 801456e:	4b40      	ldr	r3, [pc, #256]	@ (8014670 <gos_taskDelete+0x23c>)
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	88fa      	ldrh	r2, [r7, #6]
 8014574:	4611      	mov	r1, r2
 8014576:	4618      	mov	r0, r3
 8014578:	f002 fac8 	bl	8016b0c <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 801457c:	e03a      	b.n	80145f4 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 801457e:	4b36      	ldr	r3, [pc, #216]	@ (8014658 <gos_taskDelete+0x224>)
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d005      	beq.n	8014592 <gos_taskDelete+0x15e>
 8014586:	4b34      	ldr	r3, [pc, #208]	@ (8014658 <gos_taskDelete+0x224>)
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	3b01      	subs	r3, #1
 801458c:	b2da      	uxtb	r2, r3
 801458e:	4b32      	ldr	r3, [pc, #200]	@ (8014658 <gos_taskDelete+0x224>)
 8014590:	701a      	strb	r2, [r3, #0]
 8014592:	4b31      	ldr	r3, [pc, #196]	@ (8014658 <gos_taskDelete+0x224>)
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d108      	bne.n	80145ac <gos_taskDelete+0x178>
 801459a:	4b30      	ldr	r3, [pc, #192]	@ (801465c <gos_taskDelete+0x228>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f383 8810 	msr	PRIMASK, r3
 80145a2:	b662      	cpsie	i
 80145a4:	f3bf 8f4f 	dsb	sy
 80145a8:	f3bf 8f6f 	isb	sy
 80145ac:	4b2c      	ldr	r3, [pc, #176]	@ (8014660 <gos_taskDelete+0x22c>)
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d005      	beq.n	80145c0 <gos_taskDelete+0x18c>
 80145b4:	4b2a      	ldr	r3, [pc, #168]	@ (8014660 <gos_taskDelete+0x22c>)
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	3b01      	subs	r3, #1
 80145ba:	b2da      	uxtb	r2, r3
 80145bc:	4b28      	ldr	r3, [pc, #160]	@ (8014660 <gos_taskDelete+0x22c>)
 80145be:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80145c0:	4b28      	ldr	r3, [pc, #160]	@ (8014664 <gos_taskDelete+0x230>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	226a      	movs	r2, #106	@ 0x6a
 80145c6:	fb02 f303 	mul.w	r3, r2, r3
 80145ca:	3308      	adds	r3, #8
 80145cc:	4a26      	ldr	r2, [pc, #152]	@ (8014668 <gos_taskDelete+0x234>)
 80145ce:	4413      	add	r3, r2
 80145d0:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80145d2:	68ba      	ldr	r2, [r7, #8]
 80145d4:	216a      	movs	r1, #106	@ 0x6a
 80145d6:	fb01 f202 	mul.w	r2, r1, r2
 80145da:	3208      	adds	r2, #8
 80145dc:	4922      	ldr	r1, [pc, #136]	@ (8014668 <gos_taskDelete+0x234>)
 80145de:	440a      	add	r2, r1
 80145e0:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 80145e2:	9201      	str	r2, [sp, #4]
 80145e4:	9300      	str	r3, [sp, #0]
 80145e6:	4b23      	ldr	r3, [pc, #140]	@ (8014674 <gos_taskDelete+0x240>)
 80145e8:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80145ec:	4922      	ldr	r1, [pc, #136]	@ (8014678 <gos_taskDelete+0x244>)
 80145ee:	2034      	movs	r0, #52	@ 0x34
 80145f0:	f000 fef2 	bl	80153d8 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80145f4:	4b18      	ldr	r3, [pc, #96]	@ (8014658 <gos_taskDelete+0x224>)
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d005      	beq.n	8014608 <gos_taskDelete+0x1d4>
 80145fc:	4b16      	ldr	r3, [pc, #88]	@ (8014658 <gos_taskDelete+0x224>)
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	3b01      	subs	r3, #1
 8014602:	b2da      	uxtb	r2, r3
 8014604:	4b14      	ldr	r3, [pc, #80]	@ (8014658 <gos_taskDelete+0x224>)
 8014606:	701a      	strb	r2, [r3, #0]
 8014608:	4b13      	ldr	r3, [pc, #76]	@ (8014658 <gos_taskDelete+0x224>)
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d108      	bne.n	8014622 <gos_taskDelete+0x1ee>
 8014610:	4b12      	ldr	r3, [pc, #72]	@ (801465c <gos_taskDelete+0x228>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f383 8810 	msr	PRIMASK, r3
 8014618:	b662      	cpsie	i
 801461a:	f3bf 8f4f 	dsb	sy
 801461e:	f3bf 8f6f 	isb	sy
 8014622:	4b0f      	ldr	r3, [pc, #60]	@ (8014660 <gos_taskDelete+0x22c>)
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d005      	beq.n	8014636 <gos_taskDelete+0x202>
 801462a:	4b0d      	ldr	r3, [pc, #52]	@ (8014660 <gos_taskDelete+0x22c>)
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	3b01      	subs	r3, #1
 8014630:	b2da      	uxtb	r2, r3
 8014632:	4b0b      	ldr	r3, [pc, #44]	@ (8014660 <gos_taskDelete+0x22c>)
 8014634:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 8014636:	7bfb      	ldrb	r3, [r7, #15]
 8014638:	2b55      	cmp	r3, #85	@ 0x55
 801463a:	d107      	bne.n	801464c <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 801463c:	4b09      	ldr	r3, [pc, #36]	@ (8014664 <gos_taskDelete+0x230>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	68ba      	ldr	r2, [r7, #8]
 8014642:	429a      	cmp	r2, r3
 8014644:	d102      	bne.n	801464c <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 8014646:	2009      	movs	r0, #9
 8014648:	f7fe fd88 	bl	801315c <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 801464c:	7bfb      	ldrb	r3, [r7, #15]
}
 801464e:	4618      	mov	r0, r3
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	200061bb 	.word	0x200061bb
 801465c:	200061bc 	.word	0x200061bc
 8014660:	200061b9 	.word	0x200061b9
 8014664:	200061c0 	.word	0x200061c0
 8014668:	20000828 	.word	0x20000828
 801466c:	200061ba 	.word	0x200061ba
 8014670:	200061e8 	.word	0x200061e8
 8014674:	0801c2dc 	.word	0x0801c2dc
 8014678:	0801cf74 	.word	0x0801cf74

0801467c <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b086      	sub	sp, #24
 8014680:	af02      	add	r7, sp, #8
 8014682:	4603      	mov	r3, r0
 8014684:	460a      	mov	r2, r1
 8014686:	80fb      	strh	r3, [r7, #6]
 8014688:	4613      	mov	r3, r2
 801468a:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 801468c:	23ae      	movs	r3, #174	@ 0xae
 801468e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8014690:	2300      	movs	r3, #0
 8014692:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014694:	4b53      	ldr	r3, [pc, #332]	@ (80147e4 <gos_taskSetPriority+0x168>)
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d108      	bne.n	80146ae <gos_taskSetPriority+0x32>
 801469c:	b672      	cpsid	i
 801469e:	f3ef 8310 	mrs	r3, PRIMASK
 80146a2:	4a51      	ldr	r2, [pc, #324]	@ (80147e8 <gos_taskSetPriority+0x16c>)
 80146a4:	6013      	str	r3, [r2, #0]
 80146a6:	f3bf 8f4f 	dsb	sy
 80146aa:	f3bf 8f6f 	isb	sy
 80146ae:	4b4d      	ldr	r3, [pc, #308]	@ (80147e4 <gos_taskSetPriority+0x168>)
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	3301      	adds	r3, #1
 80146b4:	b2da      	uxtb	r2, r3
 80146b6:	4b4b      	ldr	r3, [pc, #300]	@ (80147e4 <gos_taskSetPriority+0x168>)
 80146b8:	701a      	strb	r2, [r3, #0]
 80146ba:	4b4c      	ldr	r3, [pc, #304]	@ (80147ec <gos_taskSetPriority+0x170>)
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	3301      	adds	r3, #1
 80146c0:	b2da      	uxtb	r2, r3
 80146c2:	4b4a      	ldr	r3, [pc, #296]	@ (80147ec <gos_taskSetPriority+0x170>)
 80146c4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80146c6:	88fb      	ldrh	r3, [r7, #6]
 80146c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80146cc:	d963      	bls.n	8014796 <gos_taskSetPriority+0x11a>
 80146ce:	88fb      	ldrh	r3, [r7, #6]
 80146d0:	f248 0211 	movw	r2, #32785	@ 0x8011
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d85e      	bhi.n	8014796 <gos_taskSetPriority+0x11a>
 80146d8:	797b      	ldrb	r3, [r7, #5]
 80146da:	2bff      	cmp	r3, #255	@ 0xff
 80146dc:	d05b      	beq.n	8014796 <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80146de:	88fb      	ldrh	r3, [r7, #6]
 80146e0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80146e4:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80146e6:	4b42      	ldr	r3, [pc, #264]	@ (80147f0 <gos_taskSetPriority+0x174>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	4a42      	ldr	r2, [pc, #264]	@ (80147f4 <gos_taskSetPriority+0x178>)
 80146ec:	216a      	movs	r1, #106	@ 0x6a
 80146ee:	fb01 f303 	mul.w	r3, r1, r3
 80146f2:	4413      	add	r3, r2
 80146f4:	3308      	adds	r3, #8
 80146f6:	881b      	ldrh	r3, [r3, #0]
 80146f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d103      	bne.n	8014708 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 8014700:	4b3d      	ldr	r3, [pc, #244]	@ (80147f8 <gos_taskSetPriority+0x17c>)
 8014702:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00b      	beq.n	8014720 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 8014708:	4a3a      	ldr	r2, [pc, #232]	@ (80147f4 <gos_taskSetPriority+0x178>)
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	216a      	movs	r1, #106	@ 0x6a
 801470e:	fb01 f303 	mul.w	r3, r1, r3
 8014712:	4413      	add	r3, r2
 8014714:	3306      	adds	r3, #6
 8014716:	797a      	ldrb	r2, [r7, #5]
 8014718:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 801471a:	2355      	movs	r3, #85	@ 0x55
 801471c:	73fb      	strb	r3, [r7, #15]
 801471e:	e03a      	b.n	8014796 <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8014720:	4b30      	ldr	r3, [pc, #192]	@ (80147e4 <gos_taskSetPriority+0x168>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d005      	beq.n	8014734 <gos_taskSetPriority+0xb8>
 8014728:	4b2e      	ldr	r3, [pc, #184]	@ (80147e4 <gos_taskSetPriority+0x168>)
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	3b01      	subs	r3, #1
 801472e:	b2da      	uxtb	r2, r3
 8014730:	4b2c      	ldr	r3, [pc, #176]	@ (80147e4 <gos_taskSetPriority+0x168>)
 8014732:	701a      	strb	r2, [r3, #0]
 8014734:	4b2b      	ldr	r3, [pc, #172]	@ (80147e4 <gos_taskSetPriority+0x168>)
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d108      	bne.n	801474e <gos_taskSetPriority+0xd2>
 801473c:	4b2a      	ldr	r3, [pc, #168]	@ (80147e8 <gos_taskSetPriority+0x16c>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f383 8810 	msr	PRIMASK, r3
 8014744:	b662      	cpsie	i
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	f3bf 8f6f 	isb	sy
 801474e:	4b27      	ldr	r3, [pc, #156]	@ (80147ec <gos_taskSetPriority+0x170>)
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d005      	beq.n	8014762 <gos_taskSetPriority+0xe6>
 8014756:	4b25      	ldr	r3, [pc, #148]	@ (80147ec <gos_taskSetPriority+0x170>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	3b01      	subs	r3, #1
 801475c:	b2da      	uxtb	r2, r3
 801475e:	4b23      	ldr	r3, [pc, #140]	@ (80147ec <gos_taskSetPriority+0x170>)
 8014760:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8014762:	4b23      	ldr	r3, [pc, #140]	@ (80147f0 <gos_taskSetPriority+0x174>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	226a      	movs	r2, #106	@ 0x6a
 8014768:	fb02 f303 	mul.w	r3, r2, r3
 801476c:	3308      	adds	r3, #8
 801476e:	4a21      	ldr	r2, [pc, #132]	@ (80147f4 <gos_taskSetPriority+0x178>)
 8014770:	4413      	add	r3, r2
 8014772:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8014774:	68ba      	ldr	r2, [r7, #8]
 8014776:	216a      	movs	r1, #106	@ 0x6a
 8014778:	fb01 f202 	mul.w	r2, r1, r2
 801477c:	3208      	adds	r2, #8
 801477e:	491d      	ldr	r1, [pc, #116]	@ (80147f4 <gos_taskSetPriority+0x178>)
 8014780:	440a      	add	r2, r1
 8014782:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8014784:	9201      	str	r2, [sp, #4]
 8014786:	9300      	str	r3, [sp, #0]
 8014788:	4b1c      	ldr	r3, [pc, #112]	@ (80147fc <gos_taskSetPriority+0x180>)
 801478a:	f44f 723d 	mov.w	r2, #756	@ 0x2f4
 801478e:	491c      	ldr	r1, [pc, #112]	@ (8014800 <gos_taskSetPriority+0x184>)
 8014790:	2034      	movs	r0, #52	@ 0x34
 8014792:	f000 fe21 	bl	80153d8 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8014796:	4b13      	ldr	r3, [pc, #76]	@ (80147e4 <gos_taskSetPriority+0x168>)
 8014798:	781b      	ldrb	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d005      	beq.n	80147aa <gos_taskSetPriority+0x12e>
 801479e:	4b11      	ldr	r3, [pc, #68]	@ (80147e4 <gos_taskSetPriority+0x168>)
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	3b01      	subs	r3, #1
 80147a4:	b2da      	uxtb	r2, r3
 80147a6:	4b0f      	ldr	r3, [pc, #60]	@ (80147e4 <gos_taskSetPriority+0x168>)
 80147a8:	701a      	strb	r2, [r3, #0]
 80147aa:	4b0e      	ldr	r3, [pc, #56]	@ (80147e4 <gos_taskSetPriority+0x168>)
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d108      	bne.n	80147c4 <gos_taskSetPriority+0x148>
 80147b2:	4b0d      	ldr	r3, [pc, #52]	@ (80147e8 <gos_taskSetPriority+0x16c>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	f383 8810 	msr	PRIMASK, r3
 80147ba:	b662      	cpsie	i
 80147bc:	f3bf 8f4f 	dsb	sy
 80147c0:	f3bf 8f6f 	isb	sy
 80147c4:	4b09      	ldr	r3, [pc, #36]	@ (80147ec <gos_taskSetPriority+0x170>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d005      	beq.n	80147d8 <gos_taskSetPriority+0x15c>
 80147cc:	4b07      	ldr	r3, [pc, #28]	@ (80147ec <gos_taskSetPriority+0x170>)
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	3b01      	subs	r3, #1
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	4b05      	ldr	r3, [pc, #20]	@ (80147ec <gos_taskSetPriority+0x170>)
 80147d6:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 80147d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3710      	adds	r7, #16
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	200061bb 	.word	0x200061bb
 80147e8:	200061bc 	.word	0x200061bc
 80147ec:	200061b9 	.word	0x200061b9
 80147f0:	200061c0 	.word	0x200061c0
 80147f4:	20000828 	.word	0x20000828
 80147f8:	200061ba 	.word	0x200061ba
 80147fc:	0801c304 	.word	0x0801c304
 8014800:	0801cf84 	.word	0x0801cf84

08014804 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af02      	add	r7, sp, #8
 801480a:	4603      	mov	r3, r0
 801480c:	460a      	mov	r2, r1
 801480e:	80fb      	strh	r3, [r7, #6]
 8014810:	4613      	mov	r3, r2
 8014812:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8014814:	23ae      	movs	r3, #174	@ 0xae
 8014816:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8014818:	2300      	movs	r3, #0
 801481a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 801481c:	4b53      	ldr	r3, [pc, #332]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d108      	bne.n	8014836 <gos_taskSetOriginalPriority+0x32>
 8014824:	b672      	cpsid	i
 8014826:	f3ef 8310 	mrs	r3, PRIMASK
 801482a:	4a51      	ldr	r2, [pc, #324]	@ (8014970 <gos_taskSetOriginalPriority+0x16c>)
 801482c:	6013      	str	r3, [r2, #0]
 801482e:	f3bf 8f4f 	dsb	sy
 8014832:	f3bf 8f6f 	isb	sy
 8014836:	4b4d      	ldr	r3, [pc, #308]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	3301      	adds	r3, #1
 801483c:	b2da      	uxtb	r2, r3
 801483e:	4b4b      	ldr	r3, [pc, #300]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 8014840:	701a      	strb	r2, [r3, #0]
 8014842:	4b4c      	ldr	r3, [pc, #304]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	3301      	adds	r3, #1
 8014848:	b2da      	uxtb	r2, r3
 801484a:	4b4a      	ldr	r3, [pc, #296]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 801484c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 801484e:	88fb      	ldrh	r3, [r7, #6]
 8014850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014854:	d963      	bls.n	801491e <gos_taskSetOriginalPriority+0x11a>
 8014856:	88fb      	ldrh	r3, [r7, #6]
 8014858:	f248 0211 	movw	r2, #32785	@ 0x8011
 801485c:	4293      	cmp	r3, r2
 801485e:	d85e      	bhi.n	801491e <gos_taskSetOriginalPriority+0x11a>
 8014860:	797b      	ldrb	r3, [r7, #5]
 8014862:	2bff      	cmp	r3, #255	@ 0xff
 8014864:	d05b      	beq.n	801491e <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014866:	88fb      	ldrh	r3, [r7, #6]
 8014868:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801486c:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 801486e:	4b42      	ldr	r3, [pc, #264]	@ (8014978 <gos_taskSetOriginalPriority+0x174>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	4a42      	ldr	r2, [pc, #264]	@ (801497c <gos_taskSetOriginalPriority+0x178>)
 8014874:	216a      	movs	r1, #106	@ 0x6a
 8014876:	fb01 f303 	mul.w	r3, r1, r3
 801487a:	4413      	add	r3, r2
 801487c:	3308      	adds	r3, #8
 801487e:	881b      	ldrh	r3, [r3, #0]
 8014880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014884:	2b00      	cmp	r3, #0
 8014886:	d103      	bne.n	8014890 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 8014888:	4b3d      	ldr	r3, [pc, #244]	@ (8014980 <gos_taskSetOriginalPriority+0x17c>)
 801488a:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 801488c:	2b00      	cmp	r3, #0
 801488e:	d00b      	beq.n	80148a8 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 8014890:	4a3a      	ldr	r2, [pc, #232]	@ (801497c <gos_taskSetOriginalPriority+0x178>)
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	216a      	movs	r1, #106	@ 0x6a
 8014896:	fb01 f303 	mul.w	r3, r1, r3
 801489a:	4413      	add	r3, r2
 801489c:	3307      	adds	r3, #7
 801489e:	797a      	ldrb	r2, [r7, #5]
 80148a0:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 80148a2:	2355      	movs	r3, #85	@ 0x55
 80148a4:	73fb      	strb	r3, [r7, #15]
 80148a6:	e03a      	b.n	801491e <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 80148a8:	4b30      	ldr	r3, [pc, #192]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d005      	beq.n	80148bc <gos_taskSetOriginalPriority+0xb8>
 80148b0:	4b2e      	ldr	r3, [pc, #184]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	3b01      	subs	r3, #1
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	4b2c      	ldr	r3, [pc, #176]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 80148ba:	701a      	strb	r2, [r3, #0]
 80148bc:	4b2b      	ldr	r3, [pc, #172]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d108      	bne.n	80148d6 <gos_taskSetOriginalPriority+0xd2>
 80148c4:	4b2a      	ldr	r3, [pc, #168]	@ (8014970 <gos_taskSetOriginalPriority+0x16c>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f383 8810 	msr	PRIMASK, r3
 80148cc:	b662      	cpsie	i
 80148ce:	f3bf 8f4f 	dsb	sy
 80148d2:	f3bf 8f6f 	isb	sy
 80148d6:	4b27      	ldr	r3, [pc, #156]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d005      	beq.n	80148ea <gos_taskSetOriginalPriority+0xe6>
 80148de:	4b25      	ldr	r3, [pc, #148]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	3b01      	subs	r3, #1
 80148e4:	b2da      	uxtb	r2, r3
 80148e6:	4b23      	ldr	r3, [pc, #140]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 80148e8:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80148ea:	4b23      	ldr	r3, [pc, #140]	@ (8014978 <gos_taskSetOriginalPriority+0x174>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	226a      	movs	r2, #106	@ 0x6a
 80148f0:	fb02 f303 	mul.w	r3, r2, r3
 80148f4:	3308      	adds	r3, #8
 80148f6:	4a21      	ldr	r2, [pc, #132]	@ (801497c <gos_taskSetOriginalPriority+0x178>)
 80148f8:	4413      	add	r3, r2
 80148fa:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80148fc:	68ba      	ldr	r2, [r7, #8]
 80148fe:	216a      	movs	r1, #106	@ 0x6a
 8014900:	fb01 f202 	mul.w	r2, r1, r2
 8014904:	3208      	adds	r2, #8
 8014906:	491d      	ldr	r1, [pc, #116]	@ (801497c <gos_taskSetOriginalPriority+0x178>)
 8014908:	440a      	add	r2, r1
 801490a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 801490c:	9201      	str	r2, [sp, #4]
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	4b1c      	ldr	r3, [pc, #112]	@ (8014984 <gos_taskSetOriginalPriority+0x180>)
 8014912:	f240 3222 	movw	r2, #802	@ 0x322
 8014916:	491c      	ldr	r1, [pc, #112]	@ (8014988 <gos_taskSetOriginalPriority+0x184>)
 8014918:	2034      	movs	r0, #52	@ 0x34
 801491a:	f000 fd5d 	bl	80153d8 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 801491e:	4b13      	ldr	r3, [pc, #76]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d005      	beq.n	8014932 <gos_taskSetOriginalPriority+0x12e>
 8014926:	4b11      	ldr	r3, [pc, #68]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	3b01      	subs	r3, #1
 801492c:	b2da      	uxtb	r2, r3
 801492e:	4b0f      	ldr	r3, [pc, #60]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 8014930:	701a      	strb	r2, [r3, #0]
 8014932:	4b0e      	ldr	r3, [pc, #56]	@ (801496c <gos_taskSetOriginalPriority+0x168>)
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d108      	bne.n	801494c <gos_taskSetOriginalPriority+0x148>
 801493a:	4b0d      	ldr	r3, [pc, #52]	@ (8014970 <gos_taskSetOriginalPriority+0x16c>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	f383 8810 	msr	PRIMASK, r3
 8014942:	b662      	cpsie	i
 8014944:	f3bf 8f4f 	dsb	sy
 8014948:	f3bf 8f6f 	isb	sy
 801494c:	4b09      	ldr	r3, [pc, #36]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d005      	beq.n	8014960 <gos_taskSetOriginalPriority+0x15c>
 8014954:	4b07      	ldr	r3, [pc, #28]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	3b01      	subs	r3, #1
 801495a:	b2da      	uxtb	r2, r3
 801495c:	4b05      	ldr	r3, [pc, #20]	@ (8014974 <gos_taskSetOriginalPriority+0x170>)
 801495e:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8014960:	7bfb      	ldrb	r3, [r7, #15]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3710      	adds	r7, #16
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	200061bb 	.word	0x200061bb
 8014970:	200061bc 	.word	0x200061bc
 8014974:	200061b9 	.word	0x200061b9
 8014978:	200061c0 	.word	0x200061c0
 801497c:	20000828 	.word	0x20000828
 8014980:	200061ba 	.word	0x200061ba
 8014984:	0801c304 	.word	0x0801c304
 8014988:	0801cf98 	.word	0x0801cf98

0801498c <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
 8014992:	4603      	mov	r3, r0
 8014994:	6039      	str	r1, [r7, #0]
 8014996:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8014998:	23ae      	movs	r3, #174	@ 0xae
 801499a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 801499c:	2300      	movs	r3, #0
 801499e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80149a0:	4b2e      	ldr	r3, [pc, #184]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 80149a2:	781b      	ldrb	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d108      	bne.n	80149ba <gos_taskGetPriority+0x2e>
 80149a8:	b672      	cpsid	i
 80149aa:	f3ef 8310 	mrs	r3, PRIMASK
 80149ae:	4a2c      	ldr	r2, [pc, #176]	@ (8014a60 <gos_taskGetPriority+0xd4>)
 80149b0:	6013      	str	r3, [r2, #0]
 80149b2:	f3bf 8f4f 	dsb	sy
 80149b6:	f3bf 8f6f 	isb	sy
 80149ba:	4b28      	ldr	r3, [pc, #160]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	3301      	adds	r3, #1
 80149c0:	b2da      	uxtb	r2, r3
 80149c2:	4b26      	ldr	r3, [pc, #152]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 80149c4:	701a      	strb	r2, [r3, #0]
 80149c6:	4b27      	ldr	r3, [pc, #156]	@ (8014a64 <gos_taskGetPriority+0xd8>)
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	3301      	adds	r3, #1
 80149cc:	b2da      	uxtb	r2, r3
 80149ce:	4b25      	ldr	r3, [pc, #148]	@ (8014a64 <gos_taskGetPriority+0xd8>)
 80149d0:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80149d2:	88fb      	ldrh	r3, [r7, #6]
 80149d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80149d8:	d917      	bls.n	8014a0a <gos_taskGetPriority+0x7e>
 80149da:	88fb      	ldrh	r3, [r7, #6]
 80149dc:	f248 0211 	movw	r2, #32785	@ 0x8011
 80149e0:	4293      	cmp	r3, r2
 80149e2:	d812      	bhi.n	8014a0a <gos_taskGetPriority+0x7e>
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d00f      	beq.n	8014a0a <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80149ea:	88fb      	ldrh	r3, [r7, #6]
 80149ec:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80149f0:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 80149f2:	4a1d      	ldr	r2, [pc, #116]	@ (8014a68 <gos_taskGetPriority+0xdc>)
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	216a      	movs	r1, #106	@ 0x6a
 80149f8:	fb01 f303 	mul.w	r3, r1, r3
 80149fc:	4413      	add	r3, r2
 80149fe:	3306      	adds	r3, #6
 8014a00:	781a      	ldrb	r2, [r3, #0]
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8014a06:	2355      	movs	r3, #85	@ 0x55
 8014a08:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 8014a0a:	4b14      	ldr	r3, [pc, #80]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d005      	beq.n	8014a1e <gos_taskGetPriority+0x92>
 8014a12:	4b12      	ldr	r3, [pc, #72]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	3b01      	subs	r3, #1
 8014a18:	b2da      	uxtb	r2, r3
 8014a1a:	4b10      	ldr	r3, [pc, #64]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 8014a1c:	701a      	strb	r2, [r3, #0]
 8014a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8014a5c <gos_taskGetPriority+0xd0>)
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d108      	bne.n	8014a38 <gos_taskGetPriority+0xac>
 8014a26:	4b0e      	ldr	r3, [pc, #56]	@ (8014a60 <gos_taskGetPriority+0xd4>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	f383 8810 	msr	PRIMASK, r3
 8014a2e:	b662      	cpsie	i
 8014a30:	f3bf 8f4f 	dsb	sy
 8014a34:	f3bf 8f6f 	isb	sy
 8014a38:	4b0a      	ldr	r3, [pc, #40]	@ (8014a64 <gos_taskGetPriority+0xd8>)
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d005      	beq.n	8014a4c <gos_taskGetPriority+0xc0>
 8014a40:	4b08      	ldr	r3, [pc, #32]	@ (8014a64 <gos_taskGetPriority+0xd8>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	3b01      	subs	r3, #1
 8014a46:	b2da      	uxtb	r2, r3
 8014a48:	4b06      	ldr	r3, [pc, #24]	@ (8014a64 <gos_taskGetPriority+0xd8>)
 8014a4a:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 8014a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3714      	adds	r7, #20
 8014a52:	46bd      	mov	sp, r7
 8014a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a58:	4770      	bx	lr
 8014a5a:	bf00      	nop
 8014a5c:	200061bb 	.word	0x200061bb
 8014a60:	200061bc 	.word	0x200061bc
 8014a64:	200061b9 	.word	0x200061b9
 8014a68:	20000828 	.word	0x20000828

08014a6c <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	4603      	mov	r3, r0
 8014a74:	460a      	mov	r2, r1
 8014a76:	80fb      	strh	r3, [r7, #6]
 8014a78:	4613      	mov	r3, r2
 8014a7a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8014a7c:	23ae      	movs	r3, #174	@ 0xae
 8014a7e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8014a80:	2300      	movs	r3, #0
 8014a82:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014a84:	4b31      	ldr	r3, [pc, #196]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d108      	bne.n	8014a9e <gos_taskAddPrivilege+0x32>
 8014a8c:	b672      	cpsid	i
 8014a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8014a92:	4a2f      	ldr	r2, [pc, #188]	@ (8014b50 <gos_taskAddPrivilege+0xe4>)
 8014a94:	6013      	str	r3, [r2, #0]
 8014a96:	f3bf 8f4f 	dsb	sy
 8014a9a:	f3bf 8f6f 	isb	sy
 8014a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	b2da      	uxtb	r2, r3
 8014aa6:	4b29      	ldr	r3, [pc, #164]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014aa8:	701a      	strb	r2, [r3, #0]
 8014aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8014b54 <gos_taskAddPrivilege+0xe8>)
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	b2da      	uxtb	r2, r3
 8014ab2:	4b28      	ldr	r3, [pc, #160]	@ (8014b54 <gos_taskAddPrivilege+0xe8>)
 8014ab4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8014ab6:	88fb      	ldrh	r3, [r7, #6]
 8014ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014abc:	d91e      	bls.n	8014afc <gos_taskAddPrivilege+0x90>
 8014abe:	88fb      	ldrh	r3, [r7, #6]
 8014ac0:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d819      	bhi.n	8014afc <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014ac8:	88fb      	ldrh	r3, [r7, #6]
 8014aca:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014ace:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8014ad0:	4a21      	ldr	r2, [pc, #132]	@ (8014b58 <gos_taskAddPrivilege+0xec>)
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	216a      	movs	r1, #106	@ 0x6a
 8014ad6:	fb01 f303 	mul.w	r3, r1, r3
 8014ada:	4413      	add	r3, r2
 8014adc:	3308      	adds	r3, #8
 8014ade:	881a      	ldrh	r2, [r3, #0]
 8014ae0:	88bb      	ldrh	r3, [r7, #4]
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	b298      	uxth	r0, r3
 8014ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8014b58 <gos_taskAddPrivilege+0xec>)
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	216a      	movs	r1, #106	@ 0x6a
 8014aec:	fb01 f303 	mul.w	r3, r1, r3
 8014af0:	4413      	add	r3, r2
 8014af2:	3308      	adds	r3, #8
 8014af4:	4602      	mov	r2, r0
 8014af6:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8014af8:	2355      	movs	r3, #85	@ 0x55
 8014afa:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8014afc:	4b13      	ldr	r3, [pc, #76]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d005      	beq.n	8014b10 <gos_taskAddPrivilege+0xa4>
 8014b04:	4b11      	ldr	r3, [pc, #68]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014b06:	781b      	ldrb	r3, [r3, #0]
 8014b08:	3b01      	subs	r3, #1
 8014b0a:	b2da      	uxtb	r2, r3
 8014b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014b0e:	701a      	strb	r2, [r3, #0]
 8014b10:	4b0e      	ldr	r3, [pc, #56]	@ (8014b4c <gos_taskAddPrivilege+0xe0>)
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d108      	bne.n	8014b2a <gos_taskAddPrivilege+0xbe>
 8014b18:	4b0d      	ldr	r3, [pc, #52]	@ (8014b50 <gos_taskAddPrivilege+0xe4>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f383 8810 	msr	PRIMASK, r3
 8014b20:	b662      	cpsie	i
 8014b22:	f3bf 8f4f 	dsb	sy
 8014b26:	f3bf 8f6f 	isb	sy
 8014b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8014b54 <gos_taskAddPrivilege+0xe8>)
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d005      	beq.n	8014b3e <gos_taskAddPrivilege+0xd2>
 8014b32:	4b08      	ldr	r3, [pc, #32]	@ (8014b54 <gos_taskAddPrivilege+0xe8>)
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	3b01      	subs	r3, #1
 8014b38:	b2da      	uxtb	r2, r3
 8014b3a:	4b06      	ldr	r3, [pc, #24]	@ (8014b54 <gos_taskAddPrivilege+0xe8>)
 8014b3c:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 8014b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3714      	adds	r7, #20
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr
 8014b4c:	200061bb 	.word	0x200061bb
 8014b50:	200061bc 	.word	0x200061bc
 8014b54:	200061b9 	.word	0x200061b9
 8014b58:	20000828 	.word	0x20000828

08014b5c <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b085      	sub	sp, #20
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	4603      	mov	r3, r0
 8014b64:	460a      	mov	r2, r1
 8014b66:	80fb      	strh	r3, [r7, #6]
 8014b68:	4613      	mov	r3, r2
 8014b6a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 8014b6c:	23ae      	movs	r3, #174	@ 0xae
 8014b6e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 8014b70:	2300      	movs	r3, #0
 8014b72:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014b74:	4b34      	ldr	r3, [pc, #208]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d108      	bne.n	8014b8e <gos_taskRemovePrivilege+0x32>
 8014b7c:	b672      	cpsid	i
 8014b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8014b82:	4a32      	ldr	r2, [pc, #200]	@ (8014c4c <gos_taskRemovePrivilege+0xf0>)
 8014b84:	6013      	str	r3, [r2, #0]
 8014b86:	f3bf 8f4f 	dsb	sy
 8014b8a:	f3bf 8f6f 	isb	sy
 8014b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	3301      	adds	r3, #1
 8014b94:	b2da      	uxtb	r2, r3
 8014b96:	4b2c      	ldr	r3, [pc, #176]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014b98:	701a      	strb	r2, [r3, #0]
 8014b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8014c50 <gos_taskRemovePrivilege+0xf4>)
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	b2da      	uxtb	r2, r3
 8014ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8014c50 <gos_taskRemovePrivilege+0xf4>)
 8014ba4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8014ba6:	88fb      	ldrh	r3, [r7, #6]
 8014ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014bac:	d923      	bls.n	8014bf6 <gos_taskRemovePrivilege+0x9a>
 8014bae:	88fb      	ldrh	r3, [r7, #6]
 8014bb0:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d81e      	bhi.n	8014bf6 <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014bb8:	88fb      	ldrh	r3, [r7, #6]
 8014bba:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014bbe:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8014bc0:	4a24      	ldr	r2, [pc, #144]	@ (8014c54 <gos_taskRemovePrivilege+0xf8>)
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	216a      	movs	r1, #106	@ 0x6a
 8014bc6:	fb01 f303 	mul.w	r3, r1, r3
 8014bca:	4413      	add	r3, r2
 8014bcc:	3308      	adds	r3, #8
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	b21a      	sxth	r2, r3
 8014bd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bd6:	43db      	mvns	r3, r3
 8014bd8:	b21b      	sxth	r3, r3
 8014bda:	4013      	ands	r3, r2
 8014bdc:	b21b      	sxth	r3, r3
 8014bde:	b298      	uxth	r0, r3
 8014be0:	4a1c      	ldr	r2, [pc, #112]	@ (8014c54 <gos_taskRemovePrivilege+0xf8>)
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	216a      	movs	r1, #106	@ 0x6a
 8014be6:	fb01 f303 	mul.w	r3, r1, r3
 8014bea:	4413      	add	r3, r2
 8014bec:	3308      	adds	r3, #8
 8014bee:	4602      	mov	r2, r0
 8014bf0:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8014bf2:	2355      	movs	r3, #85	@ 0x55
 8014bf4:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8014bf6:	4b14      	ldr	r3, [pc, #80]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d005      	beq.n	8014c0a <gos_taskRemovePrivilege+0xae>
 8014bfe:	4b12      	ldr	r3, [pc, #72]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	3b01      	subs	r3, #1
 8014c04:	b2da      	uxtb	r2, r3
 8014c06:	4b10      	ldr	r3, [pc, #64]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014c08:	701a      	strb	r2, [r3, #0]
 8014c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8014c48 <gos_taskRemovePrivilege+0xec>)
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d108      	bne.n	8014c24 <gos_taskRemovePrivilege+0xc8>
 8014c12:	4b0e      	ldr	r3, [pc, #56]	@ (8014c4c <gos_taskRemovePrivilege+0xf0>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	f383 8810 	msr	PRIMASK, r3
 8014c1a:	b662      	cpsie	i
 8014c1c:	f3bf 8f4f 	dsb	sy
 8014c20:	f3bf 8f6f 	isb	sy
 8014c24:	4b0a      	ldr	r3, [pc, #40]	@ (8014c50 <gos_taskRemovePrivilege+0xf4>)
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d005      	beq.n	8014c38 <gos_taskRemovePrivilege+0xdc>
 8014c2c:	4b08      	ldr	r3, [pc, #32]	@ (8014c50 <gos_taskRemovePrivilege+0xf4>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	3b01      	subs	r3, #1
 8014c32:	b2da      	uxtb	r2, r3
 8014c34:	4b06      	ldr	r3, [pc, #24]	@ (8014c50 <gos_taskRemovePrivilege+0xf4>)
 8014c36:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 8014c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3714      	adds	r7, #20
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c44:	4770      	bx	lr
 8014c46:	bf00      	nop
 8014c48:	200061bb 	.word	0x200061bb
 8014c4c:	200061bc 	.word	0x200061bc
 8014c50:	200061b9 	.word	0x200061b9
 8014c54:	20000828 	.word	0x20000828

08014c58 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b085      	sub	sp, #20
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	4603      	mov	r3, r0
 8014c60:	460a      	mov	r2, r1
 8014c62:	80fb      	strh	r3, [r7, #6]
 8014c64:	4613      	mov	r3, r2
 8014c66:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8014c68:	23ae      	movs	r3, #174	@ 0xae
 8014c6a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014c70:	4b2c      	ldr	r3, [pc, #176]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d108      	bne.n	8014c8a <gos_taskSetPrivileges+0x32>
 8014c78:	b672      	cpsid	i
 8014c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8014d28 <gos_taskSetPrivileges+0xd0>)
 8014c80:	6013      	str	r3, [r2, #0]
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	f3bf 8f6f 	isb	sy
 8014c8a:	4b26      	ldr	r3, [pc, #152]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	4b24      	ldr	r3, [pc, #144]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014c94:	701a      	strb	r2, [r3, #0]
 8014c96:	4b25      	ldr	r3, [pc, #148]	@ (8014d2c <gos_taskSetPrivileges+0xd4>)
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	b2da      	uxtb	r2, r3
 8014c9e:	4b23      	ldr	r3, [pc, #140]	@ (8014d2c <gos_taskSetPrivileges+0xd4>)
 8014ca0:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8014ca2:	88fb      	ldrh	r3, [r7, #6]
 8014ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014ca8:	d913      	bls.n	8014cd2 <gos_taskSetPrivileges+0x7a>
 8014caa:	88fb      	ldrh	r3, [r7, #6]
 8014cac:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	d80e      	bhi.n	8014cd2 <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014cb4:	88fb      	ldrh	r3, [r7, #6]
 8014cb6:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014cba:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8014cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8014d30 <gos_taskSetPrivileges+0xd8>)
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	216a      	movs	r1, #106	@ 0x6a
 8014cc2:	fb01 f303 	mul.w	r3, r1, r3
 8014cc6:	4413      	add	r3, r2
 8014cc8:	3308      	adds	r3, #8
 8014cca:	88ba      	ldrh	r2, [r7, #4]
 8014ccc:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8014cce:	2355      	movs	r3, #85	@ 0x55
 8014cd0:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8014cd2:	4b14      	ldr	r3, [pc, #80]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d005      	beq.n	8014ce6 <gos_taskSetPrivileges+0x8e>
 8014cda:	4b12      	ldr	r3, [pc, #72]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	3b01      	subs	r3, #1
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	4b10      	ldr	r3, [pc, #64]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014ce4:	701a      	strb	r2, [r3, #0]
 8014ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8014d24 <gos_taskSetPrivileges+0xcc>)
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d108      	bne.n	8014d00 <gos_taskSetPrivileges+0xa8>
 8014cee:	4b0e      	ldr	r3, [pc, #56]	@ (8014d28 <gos_taskSetPrivileges+0xd0>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	f383 8810 	msr	PRIMASK, r3
 8014cf6:	b662      	cpsie	i
 8014cf8:	f3bf 8f4f 	dsb	sy
 8014cfc:	f3bf 8f6f 	isb	sy
 8014d00:	4b0a      	ldr	r3, [pc, #40]	@ (8014d2c <gos_taskSetPrivileges+0xd4>)
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d005      	beq.n	8014d14 <gos_taskSetPrivileges+0xbc>
 8014d08:	4b08      	ldr	r3, [pc, #32]	@ (8014d2c <gos_taskSetPrivileges+0xd4>)
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	3b01      	subs	r3, #1
 8014d0e:	b2da      	uxtb	r2, r3
 8014d10:	4b06      	ldr	r3, [pc, #24]	@ (8014d2c <gos_taskSetPrivileges+0xd4>)
 8014d12:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3714      	adds	r7, #20
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr
 8014d22:	bf00      	nop
 8014d24:	200061bb 	.word	0x200061bb
 8014d28:	200061bc 	.word	0x200061bc
 8014d2c:	200061b9 	.word	0x200061b9
 8014d30:	20000828 	.word	0x20000828

08014d34 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8014d34:	b480      	push	{r7}
 8014d36:	b085      	sub	sp, #20
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	6039      	str	r1, [r7, #0]
 8014d3e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8014d40:	23ae      	movs	r3, #174	@ 0xae
 8014d42:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8014d44:	2300      	movs	r3, #0
 8014d46:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014d48:	4b2e      	ldr	r3, [pc, #184]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d108      	bne.n	8014d62 <gos_taskGetPrivileges+0x2e>
 8014d50:	b672      	cpsid	i
 8014d52:	f3ef 8310 	mrs	r3, PRIMASK
 8014d56:	4a2c      	ldr	r2, [pc, #176]	@ (8014e08 <gos_taskGetPrivileges+0xd4>)
 8014d58:	6013      	str	r3, [r2, #0]
 8014d5a:	f3bf 8f4f 	dsb	sy
 8014d5e:	f3bf 8f6f 	isb	sy
 8014d62:	4b28      	ldr	r3, [pc, #160]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	3301      	adds	r3, #1
 8014d68:	b2da      	uxtb	r2, r3
 8014d6a:	4b26      	ldr	r3, [pc, #152]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014d6c:	701a      	strb	r2, [r3, #0]
 8014d6e:	4b27      	ldr	r3, [pc, #156]	@ (8014e0c <gos_taskGetPrivileges+0xd8>)
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	3301      	adds	r3, #1
 8014d74:	b2da      	uxtb	r2, r3
 8014d76:	4b25      	ldr	r3, [pc, #148]	@ (8014e0c <gos_taskGetPrivileges+0xd8>)
 8014d78:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8014d7a:	88fb      	ldrh	r3, [r7, #6]
 8014d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014d80:	d917      	bls.n	8014db2 <gos_taskGetPrivileges+0x7e>
 8014d82:	88fb      	ldrh	r3, [r7, #6]
 8014d84:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	d812      	bhi.n	8014db2 <gos_taskGetPrivileges+0x7e>
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d00f      	beq.n	8014db2 <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014d92:	88fb      	ldrh	r3, [r7, #6]
 8014d94:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014d98:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8014d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8014e10 <gos_taskGetPrivileges+0xdc>)
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	216a      	movs	r1, #106	@ 0x6a
 8014da0:	fb01 f303 	mul.w	r3, r1, r3
 8014da4:	4413      	add	r3, r2
 8014da6:	3308      	adds	r3, #8
 8014da8:	881a      	ldrh	r2, [r3, #0]
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8014dae:	2355      	movs	r3, #85	@ 0x55
 8014db0:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 8014db2:	4b14      	ldr	r3, [pc, #80]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d005      	beq.n	8014dc6 <gos_taskGetPrivileges+0x92>
 8014dba:	4b12      	ldr	r3, [pc, #72]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	3b01      	subs	r3, #1
 8014dc0:	b2da      	uxtb	r2, r3
 8014dc2:	4b10      	ldr	r3, [pc, #64]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014dc4:	701a      	strb	r2, [r3, #0]
 8014dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8014e04 <gos_taskGetPrivileges+0xd0>)
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d108      	bne.n	8014de0 <gos_taskGetPrivileges+0xac>
 8014dce:	4b0e      	ldr	r3, [pc, #56]	@ (8014e08 <gos_taskGetPrivileges+0xd4>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f383 8810 	msr	PRIMASK, r3
 8014dd6:	b662      	cpsie	i
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	4b0a      	ldr	r3, [pc, #40]	@ (8014e0c <gos_taskGetPrivileges+0xd8>)
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d005      	beq.n	8014df4 <gos_taskGetPrivileges+0xc0>
 8014de8:	4b08      	ldr	r3, [pc, #32]	@ (8014e0c <gos_taskGetPrivileges+0xd8>)
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	3b01      	subs	r3, #1
 8014dee:	b2da      	uxtb	r2, r3
 8014df0:	4b06      	ldr	r3, [pc, #24]	@ (8014e0c <gos_taskGetPrivileges+0xd8>)
 8014df2:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 8014df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	200061bb 	.word	0x200061bb
 8014e08:	200061bc 	.word	0x200061bc
 8014e0c:	200061b9 	.word	0x200061b9
 8014e10:	20000828 	.word	0x20000828

08014e14 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b085      	sub	sp, #20
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8014e1c:	23ae      	movs	r3, #174	@ 0xae
 8014e1e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014e20:	4b26      	ldr	r3, [pc, #152]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d108      	bne.n	8014e3a <gos_taskGetCurrentId+0x26>
 8014e28:	b672      	cpsid	i
 8014e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8014e2e:	4a24      	ldr	r2, [pc, #144]	@ (8014ec0 <gos_taskGetCurrentId+0xac>)
 8014e30:	6013      	str	r3, [r2, #0]
 8014e32:	f3bf 8f4f 	dsb	sy
 8014e36:	f3bf 8f6f 	isb	sy
 8014e3a:	4b20      	ldr	r3, [pc, #128]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	3301      	adds	r3, #1
 8014e40:	b2da      	uxtb	r2, r3
 8014e42:	4b1e      	ldr	r3, [pc, #120]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e44:	701a      	strb	r2, [r3, #0]
 8014e46:	4b1f      	ldr	r3, [pc, #124]	@ (8014ec4 <gos_taskGetCurrentId+0xb0>)
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	3301      	adds	r3, #1
 8014e4c:	b2da      	uxtb	r2, r3
 8014e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8014ec4 <gos_taskGetCurrentId+0xb0>)
 8014e50:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d009      	beq.n	8014e6c <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8014e58:	4b1b      	ldr	r3, [pc, #108]	@ (8014ec8 <gos_taskGetCurrentId+0xb4>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	b29b      	uxth	r3, r3
 8014e5e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014e62:	b29a      	uxth	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8014e68:	2355      	movs	r3, #85	@ 0x55
 8014e6a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 8014e6c:	4b13      	ldr	r3, [pc, #76]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d005      	beq.n	8014e80 <gos_taskGetCurrentId+0x6c>
 8014e74:	4b11      	ldr	r3, [pc, #68]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	b2da      	uxtb	r2, r3
 8014e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e7e:	701a      	strb	r2, [r3, #0]
 8014e80:	4b0e      	ldr	r3, [pc, #56]	@ (8014ebc <gos_taskGetCurrentId+0xa8>)
 8014e82:	781b      	ldrb	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d108      	bne.n	8014e9a <gos_taskGetCurrentId+0x86>
 8014e88:	4b0d      	ldr	r3, [pc, #52]	@ (8014ec0 <gos_taskGetCurrentId+0xac>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f383 8810 	msr	PRIMASK, r3
 8014e90:	b662      	cpsie	i
 8014e92:	f3bf 8f4f 	dsb	sy
 8014e96:	f3bf 8f6f 	isb	sy
 8014e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8014ec4 <gos_taskGetCurrentId+0xb0>)
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d005      	beq.n	8014eae <gos_taskGetCurrentId+0x9a>
 8014ea2:	4b08      	ldr	r3, [pc, #32]	@ (8014ec4 <gos_taskGetCurrentId+0xb0>)
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	b2da      	uxtb	r2, r3
 8014eaa:	4b06      	ldr	r3, [pc, #24]	@ (8014ec4 <gos_taskGetCurrentId+0xb0>)
 8014eac:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 8014eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3714      	adds	r7, #20
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	200061bb 	.word	0x200061bb
 8014ec0:	200061bc 	.word	0x200061bc
 8014ec4:	200061b9 	.word	0x200061b9
 8014ec8:	200061c0 	.word	0x200061c0

08014ecc <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b084      	sub	sp, #16
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	6039      	str	r1, [r7, #0]
 8014ed6:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8014ed8:	23ae      	movs	r3, #174	@ 0xae
 8014eda:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8014edc:	2300      	movs	r3, #0
 8014ede:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d108      	bne.n	8014efa <gos_taskGetData+0x2e>
 8014ee8:	b672      	cpsid	i
 8014eea:	f3ef 8310 	mrs	r3, PRIMASK
 8014eee:	4a2b      	ldr	r2, [pc, #172]	@ (8014f9c <gos_taskGetData+0xd0>)
 8014ef0:	6013      	str	r3, [r2, #0]
 8014ef2:	f3bf 8f4f 	dsb	sy
 8014ef6:	f3bf 8f6f 	isb	sy
 8014efa:	4b27      	ldr	r3, [pc, #156]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014efc:	781b      	ldrb	r3, [r3, #0]
 8014efe:	3301      	adds	r3, #1
 8014f00:	b2da      	uxtb	r2, r3
 8014f02:	4b25      	ldr	r3, [pc, #148]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014f04:	701a      	strb	r2, [r3, #0]
 8014f06:	4b26      	ldr	r3, [pc, #152]	@ (8014fa0 <gos_taskGetData+0xd4>)
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	b2da      	uxtb	r2, r3
 8014f0e:	4b24      	ldr	r3, [pc, #144]	@ (8014fa0 <gos_taskGetData+0xd4>)
 8014f10:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8014f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	da18      	bge.n	8014f4c <gos_taskGetData+0x80>
 8014f1a:	88fb      	ldrh	r3, [r7, #6]
 8014f1c:	f248 0211 	movw	r2, #32785	@ 0x8011
 8014f20:	4293      	cmp	r3, r2
 8014f22:	d813      	bhi.n	8014f4c <gos_taskGetData+0x80>
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d010      	beq.n	8014f4c <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8014f2a:	88fb      	ldrh	r3, [r7, #6]
 8014f2c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8014f30:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	226a      	movs	r2, #106	@ 0x6a
 8014f36:	fb02 f303 	mul.w	r3, r2, r3
 8014f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8014fa4 <gos_taskGetData+0xd8>)
 8014f3c:	4413      	add	r3, r2
 8014f3e:	226a      	movs	r2, #106	@ 0x6a
 8014f40:	4619      	mov	r1, r3
 8014f42:	6838      	ldr	r0, [r7, #0]
 8014f44:	f004 fa31 	bl	80193aa <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8014f48:	2355      	movs	r3, #85	@ 0x55
 8014f4a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8014f4c:	4b12      	ldr	r3, [pc, #72]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d005      	beq.n	8014f60 <gos_taskGetData+0x94>
 8014f54:	4b10      	ldr	r3, [pc, #64]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	b2da      	uxtb	r2, r3
 8014f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014f5e:	701a      	strb	r2, [r3, #0]
 8014f60:	4b0d      	ldr	r3, [pc, #52]	@ (8014f98 <gos_taskGetData+0xcc>)
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d108      	bne.n	8014f7a <gos_taskGetData+0xae>
 8014f68:	4b0c      	ldr	r3, [pc, #48]	@ (8014f9c <gos_taskGetData+0xd0>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f383 8810 	msr	PRIMASK, r3
 8014f70:	b662      	cpsie	i
 8014f72:	f3bf 8f4f 	dsb	sy
 8014f76:	f3bf 8f6f 	isb	sy
 8014f7a:	4b09      	ldr	r3, [pc, #36]	@ (8014fa0 <gos_taskGetData+0xd4>)
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d005      	beq.n	8014f8e <gos_taskGetData+0xc2>
 8014f82:	4b07      	ldr	r3, [pc, #28]	@ (8014fa0 <gos_taskGetData+0xd4>)
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	3b01      	subs	r3, #1
 8014f88:	b2da      	uxtb	r2, r3
 8014f8a:	4b05      	ldr	r3, [pc, #20]	@ (8014fa0 <gos_taskGetData+0xd4>)
 8014f8c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 8014f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	200061bb 	.word	0x200061bb
 8014f9c:	200061bc 	.word	0x200061bc
 8014fa0:	200061b9 	.word	0x200061b9
 8014fa4:	20000828 	.word	0x20000828

08014fa8 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	4603      	mov	r3, r0
 8014fb0:	6039      	str	r1, [r7, #0]
 8014fb2:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8014fb4:	23ae      	movs	r3, #174	@ 0xae
 8014fb6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8014fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d108      	bne.n	8014fd2 <gos_taskGetDataByIndex+0x2a>
 8014fc0:	b672      	cpsid	i
 8014fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8014fc6:	4a2d      	ldr	r2, [pc, #180]	@ (801507c <gos_taskGetDataByIndex+0xd4>)
 8014fc8:	6013      	str	r3, [r2, #0]
 8014fca:	f3bf 8f4f 	dsb	sy
 8014fce:	f3bf 8f6f 	isb	sy
 8014fd2:	4b29      	ldr	r3, [pc, #164]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	b2da      	uxtb	r2, r3
 8014fda:	4b27      	ldr	r3, [pc, #156]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 8014fdc:	701a      	strb	r2, [r3, #0]
 8014fde:	4b28      	ldr	r3, [pc, #160]	@ (8015080 <gos_taskGetDataByIndex+0xd8>)
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	b2da      	uxtb	r2, r3
 8014fe6:	4b26      	ldr	r3, [pc, #152]	@ (8015080 <gos_taskGetDataByIndex+0xd8>)
 8014fe8:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 8014fea:	88fb      	ldrh	r3, [r7, #6]
 8014fec:	2b11      	cmp	r3, #17
 8014fee:	d81d      	bhi.n	801502c <gos_taskGetDataByIndex+0x84>
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d01a      	beq.n	801502c <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 8014ff6:	4b23      	ldr	r3, [pc, #140]	@ (8015084 <gos_taskGetDataByIndex+0xdc>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4a23      	ldr	r2, [pc, #140]	@ (8015088 <gos_taskGetDataByIndex+0xe0>)
 8014ffc:	216a      	movs	r1, #106	@ 0x6a
 8014ffe:	fb01 f303 	mul.w	r3, r1, r3
 8015002:	4413      	add	r3, r2
 8015004:	3308      	adds	r3, #8
 8015006:	881b      	ldrh	r3, [r3, #0]
 8015008:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        taskData != NULL &&
 801500c:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8015010:	d10c      	bne.n	801502c <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8015012:	88fb      	ldrh	r3, [r7, #6]
 8015014:	226a      	movs	r2, #106	@ 0x6a
 8015016:	fb02 f303 	mul.w	r3, r2, r3
 801501a:	4a1b      	ldr	r2, [pc, #108]	@ (8015088 <gos_taskGetDataByIndex+0xe0>)
 801501c:	4413      	add	r3, r2
 801501e:	226a      	movs	r2, #106	@ 0x6a
 8015020:	4619      	mov	r1, r3
 8015022:	6838      	ldr	r0, [r7, #0]
 8015024:	f004 f9c1 	bl	80193aa <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8015028:	2355      	movs	r3, #85	@ 0x55
 801502a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 801502c:	4b12      	ldr	r3, [pc, #72]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d005      	beq.n	8015040 <gos_taskGetDataByIndex+0x98>
 8015034:	4b10      	ldr	r3, [pc, #64]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 8015036:	781b      	ldrb	r3, [r3, #0]
 8015038:	3b01      	subs	r3, #1
 801503a:	b2da      	uxtb	r2, r3
 801503c:	4b0e      	ldr	r3, [pc, #56]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 801503e:	701a      	strb	r2, [r3, #0]
 8015040:	4b0d      	ldr	r3, [pc, #52]	@ (8015078 <gos_taskGetDataByIndex+0xd0>)
 8015042:	781b      	ldrb	r3, [r3, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d108      	bne.n	801505a <gos_taskGetDataByIndex+0xb2>
 8015048:	4b0c      	ldr	r3, [pc, #48]	@ (801507c <gos_taskGetDataByIndex+0xd4>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f383 8810 	msr	PRIMASK, r3
 8015050:	b662      	cpsie	i
 8015052:	f3bf 8f4f 	dsb	sy
 8015056:	f3bf 8f6f 	isb	sy
 801505a:	4b09      	ldr	r3, [pc, #36]	@ (8015080 <gos_taskGetDataByIndex+0xd8>)
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d005      	beq.n	801506e <gos_taskGetDataByIndex+0xc6>
 8015062:	4b07      	ldr	r3, [pc, #28]	@ (8015080 <gos_taskGetDataByIndex+0xd8>)
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	3b01      	subs	r3, #1
 8015068:	b2da      	uxtb	r2, r3
 801506a:	4b05      	ldr	r3, [pc, #20]	@ (8015080 <gos_taskGetDataByIndex+0xd8>)
 801506c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 801506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015070:	4618      	mov	r0, r3
 8015072:	3710      	adds	r7, #16
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	200061bb 	.word	0x200061bb
 801507c:	200061bc 	.word	0x200061bc
 8015080:	200061b9 	.word	0x200061b9
 8015084:	200061c0 	.word	0x200061c0
 8015088:	20000828 	.word	0x20000828

0801508c <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 801508c:	b480      	push	{r7}
 801508e:	b085      	sub	sp, #20
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 8015094:	23ae      	movs	r3, #174	@ 0xae
 8015096:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 8015098:	2300      	movs	r3, #0
 801509a:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d01e      	beq.n	80150e0 <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80150a8:	2300      	movs	r3, #0
 80150aa:	81bb      	strh	r3, [r7, #12]
 80150ac:	e011      	b.n	80150d2 <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 80150ae:	89bb      	ldrh	r3, [r7, #12]
 80150b0:	4a0f      	ldr	r2, [pc, #60]	@ (80150f0 <gos_taskGetNumber+0x64>)
 80150b2:	216a      	movs	r1, #106	@ 0x6a
 80150b4:	fb01 f303 	mul.w	r3, r1, r3
 80150b8:	4413      	add	r3, r2
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d00c      	beq.n	80150da <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	881b      	ldrh	r3, [r3, #0]
 80150c4:	3301      	adds	r3, #1
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80150cc:	89bb      	ldrh	r3, [r7, #12]
 80150ce:	3301      	adds	r3, #1
 80150d0:	81bb      	strh	r3, [r7, #12]
 80150d2:	89bb      	ldrh	r3, [r7, #12]
 80150d4:	2b11      	cmp	r3, #17
 80150d6:	d9ea      	bls.n	80150ae <gos_taskGetNumber+0x22>
 80150d8:	e000      	b.n	80150dc <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 80150da:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 80150dc:	2355      	movs	r3, #85	@ 0x55
 80150de:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 80150e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3714      	adds	r7, #20
 80150e6:	46bd      	mov	sp, r7
 80150e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop
 80150f0:	20000828 	.word	0x20000828

080150f4 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 80150f4:	b480      	push	{r7}
 80150f6:	b085      	sub	sp, #20
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 80150fc:	2355      	movs	r3, #85	@ 0x55
 80150fe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction == NULL                    ||
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d020      	beq.n	801514a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	891b      	ldrh	r3, [r3, #8]
 801510c:	b29b      	uxth	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d01b      	beq.n	801514a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
        taskDescriptor->taskFunction == gos_idleTask      ||
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 8015116:	4a11      	ldr	r2, [pc, #68]	@ (801515c <gos_taskCheckDescriptor+0x68>)
 8015118:	4293      	cmp	r3, r2
 801511a:	d016      	beq.n	801514a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015122:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_idleTask      ||
 8015124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015128:	d80f      	bhi.n	801514a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015130:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 8015132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015136:	d308      	bcc.n	801514a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801513e:	b29b      	uxth	r3, r3
 8015140:	f003 0303 	and.w	r3, r3, #3
 8015144:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 8015146:	2b00      	cmp	r3, #0
 8015148:	d001      	beq.n	801514e <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_ERROR;
 801514a:	23ae      	movs	r3, #174	@ 0xae
 801514c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 801514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015150:	4618      	mov	r0, r3
 8015152:	3714      	adds	r7, #20
 8015154:	46bd      	mov	sp, r7
 8015156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515a:	4770      	bx	lr
 801515c:	08015161 	.word	0x08015161

08015160 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8015166:	2155      	movs	r1, #85	@ 0x55
 8015168:	480c      	ldr	r0, [pc, #48]	@ (801519c <gos_idleTask+0x3c>)
 801516a:	f000 f9cd 	bl	8015508 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 801516e:	4b0c      	ldr	r3, [pc, #48]	@ (80151a0 <gos_idleTask+0x40>)
 8015170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015172:	3301      	adds	r3, #1
 8015174:	4a0a      	ldr	r2, [pc, #40]	@ (80151a0 <gos_idleTask+0x40>)
 8015176:	6413      	str	r3, [r2, #64]	@ 0x40

        if (kernelIdleHookFunction != NULL)
 8015178:	4b0a      	ldr	r3, [pc, #40]	@ (80151a4 <gos_idleTask+0x44>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d002      	beq.n	8015186 <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 8015180:	4b08      	ldr	r3, [pc, #32]	@ (80151a4 <gos_idleTask+0x44>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 8015186:	2049      	movs	r0, #73	@ 0x49
 8015188:	f7fd fada 	bl	8012740 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 801518c:	2355      	movs	r3, #85	@ 0x55
 801518e:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8015190:	2009      	movs	r0, #9
 8015192:	f7fd ffe3 	bl	801315c <gos_kernelReschedule>
    return taskYieldResult;
 8015196:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8015198:	e7e9      	b.n	801516e <gos_idleTask+0xe>
 801519a:	bf00      	nop
 801519c:	0801c338 	.word	0x0801c338
 80151a0:	20000828 	.word	0x20000828
 80151a4:	200061ec 	.word	0x200061ec

080151a8 <main>:

/*
 * Main
 */
int main (void_t)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 80151ae:	4b1d      	ldr	r3, [pc, #116]	@ (8015224 <main+0x7c>)
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	3301      	adds	r3, #1
 80151b4:	b2da      	uxtb	r2, r3
 80151b6:	4b1b      	ldr	r3, [pc, #108]	@ (8015224 <main+0x7c>)
 80151b8:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 80151ba:	f7ef fda5 	bl	8004d08 <gos_platformDriverInit>
 80151be:	4603      	mov	r3, r0
 80151c0:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 80151c2:	f000 f8cf 	bl	8015364 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 80151c6:	79fb      	ldrb	r3, [r7, #7]
 80151c8:	4619      	mov	r1, r3
 80151ca:	4817      	ldr	r0, [pc, #92]	@ (8015228 <main+0x80>)
 80151cc:	f000 f99c 	bl	8015508 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 80151d0:	f7fd f8d4 	bl	801237c <gos_kernelInit>
 80151d4:	4603      	mov	r3, r0
 80151d6:	4619      	mov	r1, r3
 80151d8:	4814      	ldr	r0, [pc, #80]	@ (801522c <main+0x84>)
 80151da:	f000 f995 	bl	8015508 <gos_errorTraceInit>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b55      	cmp	r3, #85	@ 0x55
 80151e2:	d109      	bne.n	80151f8 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 80151e4:	4912      	ldr	r1, [pc, #72]	@ (8015230 <main+0x88>)
 80151e6:	4813      	ldr	r0, [pc, #76]	@ (8015234 <main+0x8c>)
 80151e8:	f7fe fa6e 	bl	80136c8 <gos_taskRegister>
 80151ec:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 80151ee:	2b55      	cmp	r3, #85	@ 0x55
 80151f0:	d102      	bne.n	80151f8 <main+0x50>
    {
        initError = GOS_FALSE;
 80151f2:	4b11      	ldr	r3, [pc, #68]	@ (8015238 <main+0x90>)
 80151f4:	2249      	movs	r2, #73	@ 0x49
 80151f6:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 80151f8:	f000 f826 	bl	8015248 <gos_Start>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2bae      	cmp	r3, #174	@ 0xae
 8015200:	d106      	bne.n	8015210 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8015202:	4b0e      	ldr	r3, [pc, #56]	@ (801523c <main+0x94>)
 8015204:	22c0      	movs	r2, #192	@ 0xc0
 8015206:	490e      	ldr	r1, [pc, #56]	@ (8015240 <main+0x98>)
 8015208:	2034      	movs	r0, #52	@ 0x34
 801520a:	f000 f8e5 	bl	80153d8 <gos_errorHandler>
 801520e:	e006      	b.n	801521e <main+0x76>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8015210:	4b0c      	ldr	r3, [pc, #48]	@ (8015244 <main+0x9c>)
 8015212:	22c4      	movs	r2, #196	@ 0xc4
 8015214:	490a      	ldr	r1, [pc, #40]	@ (8015240 <main+0x98>)
 8015216:	2034      	movs	r0, #52	@ 0x34
 8015218:	f000 f8de 	bl	80153d8 <gos_errorHandler>
    }

    for (;;);
 801521c:	bf00      	nop
 801521e:	bf00      	nop
 8015220:	e7fd      	b.n	801521e <main+0x76>
 8015222:	bf00      	nop
 8015224:	200061b9 	.word	0x200061b9
 8015228:	0801c348 	.word	0x0801c348
 801522c:	0801c368 	.word	0x0801c368
 8015230:	200061f2 	.word	0x200061f2
 8015234:	200010bc 	.word	0x200010bc
 8015238:	200061f0 	.word	0x200061f0
 801523c:	0801c380 	.word	0x0801c380
 8015240:	0801cfb4 	.word	0x0801cfb4
 8015244:	0801c3a0 	.word	0x0801c3a0

08015248 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 801524e:	23b1      	movs	r3, #177	@ 0xb1
 8015250:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8015252:	4b06      	ldr	r3, [pc, #24]	@ (801526c <gos_Start+0x24>)
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	2b49      	cmp	r3, #73	@ 0x49
 8015258:	d103      	bne.n	8015262 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 801525a:	f7fd f97b 	bl	8012554 <gos_kernelStart>
 801525e:	4603      	mov	r3, r0
 8015260:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 8015262:	79fb      	ldrb	r3, [r7, #7]
}
 8015264:	4618      	mov	r0, r3
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	200061f0 	.word	0x200061f0

08015270 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8015270:	b590      	push	{r4, r7, lr}
 8015272:	b083      	sub	sp, #12
 8015274:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 8015276:	2355      	movs	r3, #85	@ 0x55
 8015278:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 801527a:	2300      	movs	r3, #0
 801527c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 801527e:	4b33      	ldr	r3, [pc, #204]	@ (801534c <gos_systemTask+0xdc>)
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	3301      	adds	r3, #1
 8015284:	b2da      	uxtb	r2, r3
 8015286:	4b31      	ldr	r3, [pc, #196]	@ (801534c <gos_systemTask+0xdc>)
 8015288:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 801528a:	2300      	movs	r3, #0
 801528c:	71bb      	strb	r3, [r7, #6]
 801528e:	e01d      	b.n	80152cc <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 8015290:	79ba      	ldrb	r2, [r7, #6]
 8015292:	4613      	mov	r3, r2
 8015294:	00db      	lsls	r3, r3, #3
 8015296:	4413      	add	r3, r2
 8015298:	009b      	lsls	r3, r3, #2
 801529a:	4a2d      	ldr	r2, [pc, #180]	@ (8015350 <gos_systemTask+0xe0>)
 801529c:	189c      	adds	r4, r3, r2
 801529e:	79ba      	ldrb	r2, [r7, #6]
 80152a0:	492b      	ldr	r1, [pc, #172]	@ (8015350 <gos_systemTask+0xe0>)
 80152a2:	4613      	mov	r3, r2
 80152a4:	00db      	lsls	r3, r3, #3
 80152a6:	4413      	add	r3, r2
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	440b      	add	r3, r1
 80152ac:	3320      	adds	r3, #32
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	4798      	blx	r3
 80152b2:	4603      	mov	r3, r0
 80152b4:	4619      	mov	r1, r3
 80152b6:	4620      	mov	r0, r4
 80152b8:	f000 f926 	bl	8015508 <gos_errorTraceInit>
 80152bc:	4603      	mov	r3, r0
 80152be:	461a      	mov	r2, r3
 80152c0:	79fb      	ldrb	r3, [r7, #7]
 80152c2:	4013      	ands	r3, r2
 80152c4:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 80152c6:	79bb      	ldrb	r3, [r7, #6]
 80152c8:	3301      	adds	r3, #1
 80152ca:	71bb      	strb	r3, [r7, #6]
 80152cc:	79bb      	ldrb	r3, [r7, #6]
 80152ce:	2b07      	cmp	r3, #7
 80152d0:	d9de      	bls.n	8015290 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 80152d2:	79fb      	ldrb	r3, [r7, #7]
 80152d4:	2b55      	cmp	r3, #85	@ 0x55
 80152d6:	d001      	beq.n	80152dc <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 80152d8:	23ae      	movs	r3, #174	@ 0xae
 80152da:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 80152dc:	79fb      	ldrb	r3, [r7, #7]
 80152de:	4619      	mov	r1, r3
 80152e0:	481c      	ldr	r0, [pc, #112]	@ (8015354 <gos_systemTask+0xe4>)
 80152e2:	f000 f911 	bl	8015508 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 80152e6:	4b19      	ldr	r3, [pc, #100]	@ (801534c <gos_systemTask+0xdc>)
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d005      	beq.n	80152fa <gos_systemTask+0x8a>
 80152ee:	4b17      	ldr	r3, [pc, #92]	@ (801534c <gos_systemTask+0xdc>)
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	3b01      	subs	r3, #1
 80152f4:	b2da      	uxtb	r2, r3
 80152f6:	4b15      	ldr	r3, [pc, #84]	@ (801534c <gos_systemTask+0xdc>)
 80152f8:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80152fa:	4b17      	ldr	r3, [pc, #92]	@ (8015358 <gos_systemTask+0xe8>)
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	21c3      	movs	r1, #195	@ 0xc3
 8015300:	4618      	mov	r0, r3
 8015302:	f7ff fa7f 	bl	8014804 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 8015306:	4b14      	ldr	r3, [pc, #80]	@ (8015358 <gos_systemTask+0xe8>)
 8015308:	881b      	ldrh	r3, [r3, #0]
 801530a:	21c3      	movs	r1, #195	@ 0xc3
 801530c:	4618      	mov	r0, r3
 801530e:	f7ff f9b5 	bl	801467c <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8015312:	2036      	movs	r0, #54	@ 0x36
 8015314:	f7fd fa14 	bl	8012740 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 8015318:	4b10      	ldr	r3, [pc, #64]	@ (801535c <gos_systemTask+0xec>)
 801531a:	781b      	ldrb	r3, [r3, #0]
 801531c:	2b36      	cmp	r3, #54	@ 0x36
 801531e:	d111      	bne.n	8015344 <gos_systemTask+0xd4>
        {
            (void_t) gos_taskSleep(100);
 8015320:	2064      	movs	r0, #100	@ 0x64
 8015322:	f7fe fb63 	bl	80139ec <gos_taskSleep>
            gos_kernelDump();
 8015326:	f7fd fb6f 	bl	8012a08 <gos_kernelDump>
            gos_queueDump();
 801532a:	f001 faf7 	bl	801691c <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 801532e:	4b0c      	ldr	r3, [pc, #48]	@ (8015360 <gos_systemTask+0xf0>)
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	2100      	movs	r1, #0
 8015334:	4618      	mov	r0, r3
 8015336:	f001 fbe9 	bl	8016b0c <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 801533a:	4b08      	ldr	r3, [pc, #32]	@ (801535c <gos_systemTask+0xec>)
 801533c:	2249      	movs	r2, #73	@ 0x49
 801533e:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 8015340:	f001 fb50 	bl	80169e4 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8015344:	2064      	movs	r0, #100	@ 0x64
 8015346:	f7fe fb51 	bl	80139ec <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 801534a:	e7e2      	b.n	8015312 <gos_systemTask+0xa2>
 801534c:	200061b9 	.word	0x200061b9
 8015350:	20000f9c 	.word	0x20000f9c
 8015354:	0801c41c 	.word	0x0801c41c
 8015358:	200061f2 	.word	0x200061f2
 801535c:	200061f1 	.word	0x200061f1
 8015360:	200061b8 	.word	0x200061b8

08015364 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 8015368:	4811      	ldr	r0, [pc, #68]	@ (80153b0 <gos_printStartupLogo+0x4c>)
 801536a:	f002 ff2d 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 801536e:	4811      	ldr	r0, [pc, #68]	@ (80153b4 <gos_printStartupLogo+0x50>)
 8015370:	f002 ff2a 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8015374:	4810      	ldr	r0, [pc, #64]	@ (80153b8 <gos_printStartupLogo+0x54>)
 8015376:	f002 ff27 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 801537a:	4810      	ldr	r0, [pc, #64]	@ (80153bc <gos_printStartupLogo+0x58>)
 801537c:	f002 ff24 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 8015380:	480f      	ldr	r0, [pc, #60]	@ (80153c0 <gos_printStartupLogo+0x5c>)
 8015382:	f002 ff21 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 8015386:	480f      	ldr	r0, [pc, #60]	@ (80153c4 <gos_printStartupLogo+0x60>)
 8015388:	f002 ff1e 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 801538c:	480e      	ldr	r0, [pc, #56]	@ (80153c8 <gos_printStartupLogo+0x64>)
 801538e:	f002 ff1b 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8015392:	4809      	ldr	r0, [pc, #36]	@ (80153b8 <gos_printStartupLogo+0x54>)
 8015394:	f002 ff18 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 8015398:	480c      	ldr	r0, [pc, #48]	@ (80153cc <gos_printStartupLogo+0x68>)
 801539a:	f002 ff15 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2024                        \r\n\r\n");
 801539e:	480c      	ldr	r0, [pc, #48]	@ (80153d0 <gos_printStartupLogo+0x6c>)
 80153a0:	f002 ff12 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 80153a4:	480b      	ldr	r0, [pc, #44]	@ (80153d4 <gos_printStartupLogo+0x70>)
 80153a6:	f002 ff0f 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
}
 80153aa:	bf00      	nop
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	0801c434 	.word	0x0801c434
 80153b4:	0801c484 	.word	0x0801c484
 80153b8:	0801c4d4 	.word	0x0801c4d4
 80153bc:	0801c524 	.word	0x0801c524
 80153c0:	0801c574 	.word	0x0801c574
 80153c4:	0801c5c4 	.word	0x0801c5c4
 80153c8:	0801c614 	.word	0x0801c614
 80153cc:	0801c664 	.word	0x0801c664
 80153d0:	0801c6b4 	.word	0x0801c6b4
 80153d4:	0801c704 	.word	0x0801c704

080153d8 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 80153d8:	b408      	push	{r3}
 80153da:	b580      	push	{r7, lr}
 80153dc:	b087      	sub	sp, #28
 80153de:	af00      	add	r7, sp, #0
 80153e0:	4603      	mov	r3, r0
 80153e2:	60b9      	str	r1, [r7, #8]
 80153e4:	607a      	str	r2, [r7, #4]
 80153e6:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 80153e8:	483a      	ldr	r0, [pc, #232]	@ (80154d4 <gos_errorHandler+0xfc>)
 80153ea:	f002 feed 	bl	80181c8 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 80153ee:	7bfb      	ldrb	r3, [r7, #15]
 80153f0:	2b34      	cmp	r3, #52	@ 0x34
 80153f2:	d103      	bne.n	80153fc <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80153f4:	4838      	ldr	r0, [pc, #224]	@ (80154d8 <gos_errorHandler+0x100>)
 80153f6:	f002 fee7 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
 80153fa:	e013      	b.n	8015424 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 80153fc:	7bfb      	ldrb	r3, [r7, #15]
 80153fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8015400:	d103      	bne.n	801540a <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8015402:	4836      	ldr	r0, [pc, #216]	@ (80154dc <gos_errorHandler+0x104>)
 8015404:	f002 fee0 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
 8015408:	e00c      	b.n	8015424 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 801540a:	7bfb      	ldrb	r3, [r7, #15]
 801540c:	2b1a      	cmp	r3, #26
 801540e:	d103      	bne.n	8015418 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8015410:	4833      	ldr	r0, [pc, #204]	@ (80154e0 <gos_errorHandler+0x108>)
 8015412:	f002 fed9 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
 8015416:	e005      	b.n	8015424 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 8015418:	7bfb      	ldrb	r3, [r7, #15]
 801541a:	2b3a      	cmp	r3, #58	@ 0x3a
 801541c:	d102      	bne.n	8015424 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 801541e:	4831      	ldr	r0, [pc, #196]	@ (80154e4 <gos_errorHandler+0x10c>)
 8015420:	f002 fed2 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d005      	beq.n	8015436 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	68b9      	ldr	r1, [r7, #8]
 801542e:	482e      	ldr	r0, [pc, #184]	@ (80154e8 <gos_errorHandler+0x110>)
 8015430:	f002 feca 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
 8015434:	e006      	b.n	8015444 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d003      	beq.n	8015444 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 801543c:	6879      	ldr	r1, [r7, #4]
 801543e:	482b      	ldr	r0, [pc, #172]	@ (80154ec <gos_errorHandler+0x114>)
 8015440:	f002 fec2 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8015444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015446:	2b00      	cmp	r3, #0
 8015448:	d00b      	beq.n	8015462 <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 801544a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801544e:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 8015450:	697a      	ldr	r2, [r7, #20]
 8015452:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015454:	4826      	ldr	r0, [pc, #152]	@ (80154f0 <gos_errorHandler+0x118>)
 8015456:	f003 ff07 	bl	8019268 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 801545a:	4925      	ldr	r1, [pc, #148]	@ (80154f0 <gos_errorHandler+0x118>)
 801545c:	4825      	ldr	r0, [pc, #148]	@ (80154f4 <gos_errorHandler+0x11c>)
 801545e:	f002 feb3 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 8015462:	4825      	ldr	r0, [pc, #148]	@ (80154f8 <gos_errorHandler+0x120>)
 8015464:	f002 feb0 	bl	80181c8 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8015468:	7bfb      	ldrb	r3, [r7, #15]
 801546a:	2b34      	cmp	r3, #52	@ 0x34
 801546c:	d002      	beq.n	8015474 <gos_errorHandler+0x9c>
 801546e:	7bfb      	ldrb	r3, [r7, #15]
 8015470:	2b1a      	cmp	r3, #26
 8015472:	d127      	bne.n	80154c4 <gos_errorHandler+0xec>
    {
        GOS_DISABLE_SCHED
 8015474:	4b21      	ldr	r3, [pc, #132]	@ (80154fc <gos_errorHandler+0x124>)
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	3301      	adds	r3, #1
 801547a:	b2da      	uxtb	r2, r3
 801547c:	4b1f      	ldr	r3, [pc, #124]	@ (80154fc <gos_errorHandler+0x124>)
 801547e:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 8015480:	4b1f      	ldr	r3, [pc, #124]	@ (8015500 <gos_errorHandler+0x128>)
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d108      	bne.n	801549a <gos_errorHandler+0xc2>
 8015488:	b672      	cpsid	i
 801548a:	f3ef 8310 	mrs	r3, PRIMASK
 801548e:	4a1d      	ldr	r2, [pc, #116]	@ (8015504 <gos_errorHandler+0x12c>)
 8015490:	6013      	str	r3, [r2, #0]
 8015492:	f3bf 8f4f 	dsb	sy
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	4b19      	ldr	r3, [pc, #100]	@ (8015500 <gos_errorHandler+0x128>)
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	3301      	adds	r3, #1
 80154a0:	b2da      	uxtb	r2, r3
 80154a2:	4b17      	ldr	r3, [pc, #92]	@ (8015500 <gos_errorHandler+0x128>)
 80154a4:	701a      	strb	r2, [r3, #0]
 80154a6:	4b15      	ldr	r3, [pc, #84]	@ (80154fc <gos_errorHandler+0x124>)
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	3301      	adds	r3, #1
 80154ac:	b2da      	uxtb	r2, r3
 80154ae:	4b13      	ldr	r3, [pc, #76]	@ (80154fc <gos_errorHandler+0x124>)
 80154b0:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 80154b2:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 80154b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80154b8:	f7fd f926 	bl	8012708 <gos_kernelDelayMs>
            gos_kernelReset();
 80154bc:	f7fd f8fe 	bl	80126bc <gos_kernelReset>
            GOS_NOP;
 80154c0:	bf00      	nop
 80154c2:	e7f6      	b.n	80154b2 <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 80154c4:	bf00      	nop
 80154c6:	371c      	adds	r7, #28
 80154c8:	46bd      	mov	sp, r7
 80154ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80154ce:	b001      	add	sp, #4
 80154d0:	4770      	bx	lr
 80154d2:	bf00      	nop
 80154d4:	0801c754 	.word	0x0801c754
 80154d8:	0801c7a8 	.word	0x0801c7a8
 80154dc:	0801c7d4 	.word	0x0801c7d4
 80154e0:	0801c7f4 	.word	0x0801c7f4
 80154e4:	0801c824 	.word	0x0801c824
 80154e8:	0801c844 	.word	0x0801c844
 80154ec:	0801c868 	.word	0x0801c868
 80154f0:	200061f4 	.word	0x200061f4
 80154f4:	0801c894 	.word	0x0801c894
 80154f8:	0801c89c 	.word	0x0801c89c
 80154fc:	200061b9 	.word	0x200061b9
 8015500:	200061bb 	.word	0x200061bb
 8015504:	200061bc 	.word	0x200061bc

08015508 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 8015508:	b590      	push	{r4, r7, lr}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	460b      	mov	r3, r1
 8015512:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 8015514:	f7fd f8b4 	bl	8012680 <gos_kernelGetSysTicks>
 8015518:	4604      	mov	r4, r0
 801551a:	1cfb      	adds	r3, r7, #3
 801551c:	4618      	mov	r0, r3
 801551e:	f000 f80d 	bl	801553c <gos_traceResultToString>
 8015522:	4603      	mov	r3, r0
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	4621      	mov	r1, r4
 8015528:	4803      	ldr	r0, [pc, #12]	@ (8015538 <gos_errorTraceInit+0x30>)
 801552a:	f002 fe4d 	bl	80181c8 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 801552e:	78fb      	ldrb	r3, [r7, #3]
}
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	bd90      	pop	{r4, r7, pc}
 8015538:	0801c8ec 	.word	0x0801c8ec

0801553c <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 801553c:	b480      	push	{r7}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	2b55      	cmp	r3, #85	@ 0x55
 801554a:	d002      	beq.n	8015552 <gos_traceResultToString+0x16>
 801554c:	2bae      	cmp	r3, #174	@ 0xae
 801554e:	d002      	beq.n	8015556 <gos_traceResultToString+0x1a>
 8015550:	e003      	b.n	801555a <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 8015552:	4b05      	ldr	r3, [pc, #20]	@ (8015568 <gos_traceResultToString+0x2c>)
 8015554:	e002      	b.n	801555c <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 8015556:	4b05      	ldr	r3, [pc, #20]	@ (801556c <gos_traceResultToString+0x30>)
 8015558:	e000      	b.n	801555c <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 801555a:	4b05      	ldr	r3, [pc, #20]	@ (8015570 <gos_traceResultToString+0x34>)
        }
    }
}
 801555c:	4618      	mov	r0, r3
 801555e:	370c      	adds	r7, #12
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr
 8015568:	0801c908 	.word	0x0801c908
 801556c:	0801c91c 	.word	0x0801c91c
 8015570:	0801c930 	.word	0x0801c930

08015574 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 801557a:	2355      	movs	r3, #85	@ 0x55
 801557c:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 801557e:	2300      	movs	r3, #0
 8015580:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8015582:	2300      	movs	r3, #0
 8015584:	80bb      	strh	r3, [r7, #4]
 8015586:	e01a      	b.n	80155be <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 8015588:	88bb      	ldrh	r3, [r7, #4]
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	4a12      	ldr	r2, [pc, #72]	@ (80155d8 <gos_gcpInit+0x64>)
 801558e:	4413      	add	r3, r2
 8015590:	4618      	mov	r0, r3
 8015592:	f000 fdd9 	bl	8016148 <gos_mutexInit>
 8015596:	4603      	mov	r3, r0
 8015598:	461a      	mov	r2, r3
 801559a:	79fb      	ldrb	r3, [r7, #7]
 801559c:	4013      	ands	r3, r2
 801559e:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 80155a0:	88bb      	ldrh	r3, [r7, #4]
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	4a0d      	ldr	r2, [pc, #52]	@ (80155dc <gos_gcpInit+0x68>)
 80155a6:	4413      	add	r3, r2
 80155a8:	4618      	mov	r0, r3
 80155aa:	f000 fdcd 	bl	8016148 <gos_mutexInit>
 80155ae:	4603      	mov	r3, r0
 80155b0:	461a      	mov	r2, r3
 80155b2:	79fb      	ldrb	r3, [r7, #7]
 80155b4:	4013      	ands	r3, r2
 80155b6:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 80155b8:	88bb      	ldrh	r3, [r7, #4]
 80155ba:	3301      	adds	r3, #1
 80155bc:	80bb      	strh	r3, [r7, #4]
 80155be:	88bb      	ldrh	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d0e1      	beq.n	8015588 <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 80155c4:	79fb      	ldrb	r3, [r7, #7]
 80155c6:	2b55      	cmp	r3, #85	@ 0x55
 80155c8:	d001      	beq.n	80155ce <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 80155ca:	23ae      	movs	r3, #174	@ 0xae
 80155cc:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return gcpInitResult;
 80155ce:	79fb      	ldrb	r3, [r7, #7]
}
 80155d0:	4618      	mov	r0, r3
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}
 80155d8:	2000624c 	.word	0x2000624c
 80155dc:	20006250 	.word	0x20006250

080155e0 <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 80155e0:	b480      	push	{r7}
 80155e2:	b087      	sub	sp, #28
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	4603      	mov	r3, r0
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
 80155ec:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 80155ee:	23ae      	movs	r3, #174	@ 0xae
 80155f0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 80155f2:	7bfb      	ldrb	r3, [r7, #15]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d112      	bne.n	801561e <gos_gcpRegisterPhysicalDriver+0x3e>
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00f      	beq.n	801561e <gos_gcpRegisterPhysicalDriver+0x3e>
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d00c      	beq.n	801561e <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 8015604:	7bfb      	ldrb	r3, [r7, #15]
 8015606:	4a09      	ldr	r2, [pc, #36]	@ (801562c <gos_gcpRegisterPhysicalDriver+0x4c>)
 8015608:	00db      	lsls	r3, r3, #3
 801560a:	4413      	add	r3, r2
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 8015610:	7bfb      	ldrb	r3, [r7, #15]
 8015612:	4906      	ldr	r1, [pc, #24]	@ (801562c <gos_gcpRegisterPhysicalDriver+0x4c>)
 8015614:	68ba      	ldr	r2, [r7, #8]
 8015616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 801561a:	2355      	movs	r3, #85	@ 0x55
 801561c:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 801561e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015620:	4618      	mov	r0, r3
 8015622:	371c      	adds	r7, #28
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr
 801562c:	20006244 	.word	0x20006244

08015630 <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b092      	sub	sp, #72	@ 0x48
 8015634:	af00      	add	r7, sp, #0
 8015636:	60ba      	str	r2, [r7, #8]
 8015638:	461a      	mov	r2, r3
 801563a:	4603      	mov	r3, r0
 801563c:	73fb      	strb	r3, [r7, #15]
 801563e:	460b      	mov	r3, r1
 8015640:	81bb      	strh	r3, [r7, #12]
 8015642:	4613      	mov	r3, r2
 8015644:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 8015646:	23ae      	movs	r3, #174	@ 0xae
 8015648:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 801564c:	7bfb      	ldrb	r3, [r7, #15]
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	4a8e      	ldr	r2, [pc, #568]	@ (801588c <gos_gcpTransmitMessage+0x25c>)
 8015652:	4413      	add	r3, r2
 8015654:	f04f 31ff 	mov.w	r1, #4294967295
 8015658:	4618      	mov	r0, r3
 801565a:	f000 fd8f 	bl	801617c <gos_mutexLock>
 801565e:	4603      	mov	r3, r0
 8015660:	2b55      	cmp	r3, #85	@ 0x55
 8015662:	f040 8105 	bne.w	8015870 <gos_gcpTransmitMessage+0x240>
 8015666:	7bfb      	ldrb	r3, [r7, #15]
 8015668:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 801566c:	89bb      	ldrh	r3, [r7, #12]
 801566e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	643b      	str	r3, [r7, #64]	@ 0x40
 8015676:	88fb      	ldrh	r3, [r7, #6]
 8015678:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801567a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801567e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 8015680:	23ae      	movs	r3, #174	@ 0xae
 8015682:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 8015686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801568a:	2200      	movs	r2, #0
 801568c:	601a      	str	r2, [r3, #0]
 801568e:	605a      	str	r2, [r3, #4]
 8015690:	609a      	str	r2, [r3, #8]
 8015692:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8015694:	f107 0314 	add.w	r3, r7, #20
 8015698:	2200      	movs	r2, #0
 801569a:	601a      	str	r2, [r3, #0]
 801569c:	605a      	str	r2, [r3, #4]
 801569e:	609a      	str	r2, [r3, #8]
 80156a0:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 80156a2:	2300      	movs	r3, #0
 80156a4:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 80156a6:	2300      	movs	r3, #0
 80156a8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    u8_t                 chunkIndex            = 0u;
 80156ac:	2300      	movs	r3, #0
 80156ae:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    u16_t                tempSize              = 0u;
 80156b2:	2300      	movs	r3, #0
 80156b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 80156b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d107      	bne.n	80156cc <gos_gcpTransmitMessage+0x9c>
 80156bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156be:	2b00      	cmp	r3, #0
 80156c0:	f040 80d2 	bne.w	8015868 <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 80156c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	f040 80ce 	bne.w	8015868 <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 80156cc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	f040 80c9 	bne.w	8015868 <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 80156d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80156da:	4a6d      	ldr	r2, [pc, #436]	@ (8015890 <gos_gcpTransmitMessage+0x260>)
 80156dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f000 80c1 	beq.w	8015868 <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 80156e6:	2300      	movs	r3, #0
 80156e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 80156ec:	2302      	movs	r3, #2
 80156ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 80156f2:	2300      	movs	r3, #0
 80156f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 80156f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80156fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
        requestHeaderFrame.messageId     = messageId;
 80156fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015700:	853b      	strh	r3, [r7, #40]	@ 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 8015702:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015704:	4619      	mov	r1, r3
 8015706:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015708:	f002 ff68 	bl	80185dc <gos_crcDriverGetCrc>
 801570c:	4603      	mov	r3, r0
 801570e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 8015710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015714:	210c      	movs	r1, #12
 8015716:	4618      	mov	r0, r3
 8015718:	f002 ff60 	bl	80185dc <gos_crcDriverGetCrc>
 801571c:	4603      	mov	r3, r0
 801571e:	633b      	str	r3, [r7, #48]	@ 0x30
        else
        {
            // Error.
        }*/

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 8015720:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015724:	4a5a      	ldr	r2, [pc, #360]	@ (8015890 <gos_gcpTransmitMessage+0x260>)
 8015726:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801572a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801572e:	2110      	movs	r1, #16
 8015730:	4610      	mov	r0, r2
 8015732:	4798      	blx	r3
 8015734:	4603      	mov	r3, r0
 8015736:	2b55      	cmp	r3, #85	@ 0x55
 8015738:	f040 8096 	bne.w	8015868 <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 801573c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801573e:	2b00      	cmp	r3, #0
 8015740:	d120      	bne.n	8015784 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8015742:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015746:	4a52      	ldr	r2, [pc, #328]	@ (8015890 <gos_gcpTransmitMessage+0x260>)
 8015748:	00db      	lsls	r3, r3, #3
 801574a:	4413      	add	r3, r2
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	f107 0214 	add.w	r2, r7, #20
 8015752:	2110      	movs	r1, #16
 8015754:	4610      	mov	r0, r2
 8015756:	4798      	blx	r3
 8015758:	4603      	mov	r3, r0
 801575a:	2b55      	cmp	r3, #85	@ 0x55
 801575c:	f040 8084 	bne.w	8015868 <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8015760:	f107 0213 	add.w	r2, r7, #19
 8015764:	f107 0314 	add.w	r3, r7, #20
 8015768:	4611      	mov	r1, r2
 801576a:	4618      	mov	r0, r3
 801576c:	f000 f9de 	bl	8015b2c <gos_gcpValidateHeader>
 8015770:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8015772:	2b55      	cmp	r3, #85	@ 0x55
 8015774:	d178      	bne.n	8015868 <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 8015776:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8015778:	2b01      	cmp	r3, #1
 801577a:	d175      	bne.n	8015868 <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 801577c:	2355      	movs	r3, #85	@ 0x55
 801577e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8015782:	e071      	b.n	8015868 <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8015784:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8015786:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015788:	fbb2 f3f3 	udiv	r3, r2, r3
 801578c:	b29b      	uxth	r3, r3
 801578e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 8015792:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015794:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8015796:	fbb3 f1f2 	udiv	r1, r3, r2
 801579a:	fb01 f202 	mul.w	r2, r1, r2
 801579e:	1a9b      	subs	r3, r3, r2
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d004      	beq.n	80157b0 <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 80157a6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80157aa:	3301      	adds	r3, #1
 80157ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80157b0:	2300      	movs	r3, #0
 80157b2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80157b6:	e051      	b.n	801585c <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 80157b8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80157bc:	3301      	adds	r3, #1
 80157be:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80157c0:	fb02 f303 	mul.w	r3, r2, r3
 80157c4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80157c6:	4293      	cmp	r3, r2
 80157c8:	dd0a      	ble.n	80157e0 <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 80157ca:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80157cc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80157d4:	fb11 f303 	smulbb	r3, r1, r3
 80157d8:	b29b      	uxth	r3, r3
 80157da:	1ad3      	subs	r3, r2, r3
 80157dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80157de:	e001      	b.n	80157e4 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 80157e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80157e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 80157e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80157e8:	4a29      	ldr	r2, [pc, #164]	@ (8015890 <gos_gcpTransmitMessage+0x260>)
 80157ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80157ee:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80157f2:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80157f4:	fb01 f202 	mul.w	r2, r1, r2
 80157f8:	4611      	mov	r1, r2
 80157fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80157fc:	440a      	add	r2, r1
 80157fe:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8015800:	4610      	mov	r0, r2
 8015802:	4798      	blx	r3
 8015804:	4603      	mov	r3, r0
 8015806:	2b55      	cmp	r3, #85	@ 0x55
 8015808:	d124      	bne.n	8015854 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 801580a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801580e:	4a20      	ldr	r2, [pc, #128]	@ (8015890 <gos_gcpTransmitMessage+0x260>)
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	4413      	add	r3, r2
 8015814:	685b      	ldr	r3, [r3, #4]
 8015816:	f107 0214 	add.w	r2, r7, #20
 801581a:	2110      	movs	r1, #16
 801581c:	4610      	mov	r0, r2
 801581e:	4798      	blx	r3
 8015820:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8015822:	2b55      	cmp	r3, #85	@ 0x55
 8015824:	d116      	bne.n	8015854 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8015826:	f107 0213 	add.w	r2, r7, #19
 801582a:	f107 0314 	add.w	r3, r7, #20
 801582e:	4611      	mov	r1, r2
 8015830:	4618      	mov	r0, r3
 8015832:	f000 f97b 	bl	8015b2c <gos_gcpValidateHeader>
 8015836:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8015838:	2b55      	cmp	r3, #85	@ 0x55
 801583a:	d10b      	bne.n	8015854 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 801583c:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 801583e:	2b01      	cmp	r3, #1
 8015840:	d108      	bne.n	8015854 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 8015842:	2355      	movs	r3, #85	@ 0x55
 8015844:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8015848:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801584c:	3301      	adds	r3, #1
 801584e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8015852:	e003      	b.n	801585c <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 8015854:	23ae      	movs	r3, #174	@ 0xae
 8015856:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            			break;
 801585a:	e005      	b.n	8015868 <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 801585c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8015860:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8015864:	429a      	cmp	r2, r3
 8015866:	d3a7      	bcc.n	80157b8 <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 8015868:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 801586c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 8015870:	7bfb      	ldrb	r3, [r7, #15]
 8015872:	009b      	lsls	r3, r3, #2
 8015874:	4a05      	ldr	r2, [pc, #20]	@ (801588c <gos_gcpTransmitMessage+0x25c>)
 8015876:	4413      	add	r3, r2
 8015878:	4618      	mov	r0, r3
 801587a:	f000 fd85 	bl	8016388 <gos_mutexUnlock>
    return transmitMessageResult;
 801587e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015882:	4618      	mov	r0, r3
 8015884:	3748      	adds	r7, #72	@ 0x48
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	20006250 	.word	0x20006250
 8015890:	20006244 	.word	0x20006244

08015894 <gos_gcpReceiveMessage>:
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b094      	sub	sp, #80	@ 0x50
 8015898:	af00      	add	r7, sp, #0
 801589a:	60b9      	str	r1, [r7, #8]
 801589c:	607a      	str	r2, [r7, #4]
 801589e:	461a      	mov	r2, r3
 80158a0:	4603      	mov	r3, r0
 80158a2:	73fb      	strb	r3, [r7, #15]
 80158a4:	4613      	mov	r3, r2
 80158a6:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 80158a8:	23ae      	movs	r3, #174	@ 0xae
 80158aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 80158ae:	7bfb      	ldrb	r3, [r7, #15]
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	4a9c      	ldr	r2, [pc, #624]	@ (8015b24 <gos_gcpReceiveMessage+0x290>)
 80158b4:	4413      	add	r3, r2
 80158b6:	f04f 31ff 	mov.w	r1, #4294967295
 80158ba:	4618      	mov	r0, r3
 80158bc:	f000 fc5e 	bl	801617c <gos_mutexLock>
 80158c0:	4603      	mov	r3, r0
 80158c2:	2b55      	cmp	r3, #85	@ 0x55
 80158c4:	f040 8120 	bne.w	8015b08 <gos_gcpReceiveMessage+0x274>
 80158c8:	7bfb      	ldrb	r3, [r7, #15]
 80158ca:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80158d6:	89bb      	ldrh	r3, [r7, #12]
 80158d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80158dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80158e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 80158e4:	23ae      	movs	r3, #174	@ 0xae
 80158e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 80158ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80158ee:	2200      	movs	r2, #0
 80158f0:	601a      	str	r2, [r3, #0]
 80158f2:	605a      	str	r2, [r3, #4]
 80158f4:	609a      	str	r2, [r3, #8]
 80158f6:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 80158f8:	f107 0318 	add.w	r3, r7, #24
 80158fc:	2200      	movs	r2, #0
 80158fe:	601a      	str	r2, [r3, #0]
 8015900:	605a      	str	r2, [r3, #4]
 8015902:	609a      	str	r2, [r3, #8]
 8015904:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 8015906:	2300      	movs	r3, #0
 8015908:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 801590a:	2300      	movs	r3, #0
 801590c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    u8_t                 chunkIndex            = 0u;
 8015910:	2300      	movs	r3, #0
 8015912:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    u16_t                tempSize              = 0u;
 8015916:	2300      	movs	r3, #0
 8015918:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 801591a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 80ef 	beq.w	8015b00 <gos_gcpReceiveMessage+0x26c>
 8015922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015924:	2b00      	cmp	r3, #0
 8015926:	f000 80eb 	beq.w	8015b00 <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 801592a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801592e:	2b00      	cmp	r3, #0
 8015930:	f040 80e6 	bne.w	8015b00 <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 8015934:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8015938:	4a7b      	ldr	r2, [pc, #492]	@ (8015b28 <gos_gcpReceiveMessage+0x294>)
 801593a:	00db      	lsls	r3, r3, #3
 801593c:	4413      	add	r3, r2
 801593e:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8015940:	2b00      	cmp	r3, #0
 8015942:	f000 80dd 	beq.w	8015b00 <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 8015946:	2300      	movs	r3, #0
 8015948:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 801594a:	2300      	movs	r3, #0
 801594c:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 801594e:	2302      	movs	r3, #2
 8015950:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8015952:	2300      	movs	r3, #0
 8015954:	767b      	strb	r3, [r7, #25]
            responseHeaderFrame.ackType   = (u8_t)headerAck;
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
        }*/

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8015956:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801595a:	4a73      	ldr	r2, [pc, #460]	@ (8015b28 <gos_gcpReceiveMessage+0x294>)
 801595c:	00db      	lsls	r3, r3, #3
 801595e:	4413      	add	r3, r2
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8015966:	2110      	movs	r1, #16
 8015968:	4610      	mov	r0, r2
 801596a:	4798      	blx	r3
 801596c:	4603      	mov	r3, r0
 801596e:	2b55      	cmp	r3, #85	@ 0x55
 8015970:	f040 80b0 	bne.w	8015ad4 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 8015974:	f107 0217 	add.w	r2, r7, #23
 8015978:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801597c:	4611      	mov	r1, r2
 801597e:	4618      	mov	r0, r3
 8015980:	f000 f8d4 	bl	8015b2c <gos_gcpValidateHeader>
 8015984:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8015986:	2b55      	cmp	r3, #85	@ 0x55
 8015988:	f040 80a4 	bne.w	8015ad4 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 801598c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801598e:	2b00      	cmp	r3, #0
 8015990:	d11e      	bne.n	80159d0 <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 8015992:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8015994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015996:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 8015998:	2301      	movs	r3, #1
 801599a:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 801599c:	f107 0318 	add.w	r3, r7, #24
 80159a0:	210c      	movs	r1, #12
 80159a2:	4618      	mov	r0, r3
 80159a4:	f002 fe1a 	bl	80185dc <gos_crcDriverGetCrc>
 80159a8:	4603      	mov	r3, r0
 80159aa:	627b      	str	r3, [r7, #36]	@ 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 80159ac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80159b0:	4a5d      	ldr	r2, [pc, #372]	@ (8015b28 <gos_gcpReceiveMessage+0x294>)
 80159b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80159b6:	f107 0218 	add.w	r2, r7, #24
 80159ba:	2110      	movs	r1, #16
 80159bc:	4610      	mov	r0, r2
 80159be:	4798      	blx	r3
 80159c0:	4603      	mov	r3, r0
 80159c2:	2b55      	cmp	r3, #85	@ 0x55
 80159c4:	f040 809b 	bne.w	8015afe <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 80159c8:	2355      	movs	r3, #85	@ 0x55
 80159ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 80159ce:	e096      	b.n	8015afe <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 80159d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80159d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80159d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80159da:	b29b      	uxth	r3, r3
 80159dc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 80159e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80159e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80159e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80159ea:	fb01 f202 	mul.w	r2, r1, r2
 80159ee:	1a9b      	subs	r3, r3, r2
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d004      	beq.n	8015a00 <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 80159f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80159fa:	3301      	adds	r3, #1
 80159fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8015a00:	2300      	movs	r3, #0
 8015a02:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8015a06:	e04c      	b.n	8015aa2 <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8015a08:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015a12:	fb02 f303 	mul.w	r3, r2, r3
 8015a16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015a18:	4293      	cmp	r3, r2
 8015a1a:	dd0b      	ble.n	8015a34 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8015a1c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015a1e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8015a28:	fb11 f303 	smulbb	r3, r1, r3
 8015a2c:	b29b      	uxth	r3, r3
 8015a2e:	1ad3      	subs	r3, r2, r3
 8015a30:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015a32:	e002      	b.n	8015a3a <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8015a34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015a38:	877b      	strh	r3, [r7, #58]	@ 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 8015a3a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8015a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8015b28 <gos_gcpReceiveMessage+0x294>)
 8015a40:	00db      	lsls	r3, r3, #3
 8015a42:	4413      	add	r3, r2
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8015a4a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8015a4e:	fb01 f202 	mul.w	r2, r1, r2
 8015a52:	4611      	mov	r1, r2
 8015a54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015a56:	440a      	add	r2, r1
 8015a58:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 8015a5a:	4610      	mov	r0, r2
 8015a5c:	4798      	blx	r3
 8015a5e:	4603      	mov	r3, r0
 8015a60:	2b55      	cmp	r3, #85	@ 0x55
 8015a62:	d125      	bne.n	8015ab0 <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 8015a64:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8015a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015a68:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8015a6e:	f107 0318 	add.w	r3, r7, #24
 8015a72:	210c      	movs	r1, #12
 8015a74:	4618      	mov	r0, r3
 8015a76:	f002 fdb1 	bl	80185dc <gos_crcDriverGetCrc>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	627b      	str	r3, [r7, #36]	@ 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8015a7e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8015a82:	4a29      	ldr	r2, [pc, #164]	@ (8015b28 <gos_gcpReceiveMessage+0x294>)
 8015a84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015a88:	f107 0218 	add.w	r2, r7, #24
 8015a8c:	2110      	movs	r1, #16
 8015a8e:	4610      	mov	r0, r2
 8015a90:	4798      	blx	r3
 8015a92:	4603      	mov	r3, r0
 8015a94:	2b55      	cmp	r3, #85	@ 0x55
 8015a96:	d10d      	bne.n	8015ab4 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8015a98:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8015aa2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8015aa6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d3ac      	bcc.n	8015a08 <gos_gcpReceiveMessage+0x174>
 8015aae:	e002      	b.n	8015ab6 <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 8015ab0:	bf00      	nop
 8015ab2:	e000      	b.n	8015ab6 <gos_gcpReceiveMessage+0x222>
                        	break;
 8015ab4:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 8015ab6:	f107 0217 	add.w	r2, r7, #23
 8015aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015abe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f000 f860 	bl	8015b86 <gos_gcpValidateData>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	2b55      	cmp	r3, #85	@ 0x55
 8015aca:	d118      	bne.n	8015afe <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 8015acc:	2355      	movs	r3, #85	@ 0x55
 8015ace:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8015ad2:	e014      	b.n	8015afe <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 8015ad4:	7dfb      	ldrb	r3, [r7, #23]
 8015ad6:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8015ad8:	f107 0318 	add.w	r3, r7, #24
 8015adc:	210c      	movs	r1, #12
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f002 fd7c 	bl	80185dc <gos_crcDriverGetCrc>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 8015ae8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8015aec:	4a0e      	ldr	r2, [pc, #56]	@ (8015b28 <gos_gcpReceiveMessage+0x294>)
 8015aee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015af2:	f107 0218 	add.w	r2, r7, #24
 8015af6:	2110      	movs	r1, #16
 8015af8:	4610      	mov	r0, r2
 8015afa:	4798      	blx	r3
 8015afc:	e000      	b.n	8015b00 <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 8015afe:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 8015b00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 8015b04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 8015b08:	7bfb      	ldrb	r3, [r7, #15]
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	4a05      	ldr	r2, [pc, #20]	@ (8015b24 <gos_gcpReceiveMessage+0x290>)
 8015b0e:	4413      	add	r3, r2
 8015b10:	4618      	mov	r0, r3
 8015b12:	f000 fc39 	bl	8016388 <gos_mutexUnlock>
    return receiveMessageResult;
 8015b16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3750      	adds	r7, #80	@ 0x50
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	2000624c 	.word	0x2000624c
 8015b28:	20006244 	.word	0x20006244

08015b2c <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8015b36:	23ae      	movs	r3, #174	@ 0xae
 8015b38:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d01d      	beq.n	8015b7c <gos_gcpValidateHeader+0x50>
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d01a      	beq.n	8015b7c <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 8015b46:	210c      	movs	r1, #12
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f002 fd47 	bl	80185dc <gos_crcDriverGetCrc>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	68db      	ldr	r3, [r3, #12]
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d10e      	bne.n	8015b76 <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	2b02      	cmp	r3, #2
 8015b5e:	d106      	bne.n	8015b6e <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d102      	bne.n	8015b6e <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 8015b68:	2355      	movs	r3, #85	@ 0x55
 8015b6a:	73fb      	strb	r3, [r7, #15]
 8015b6c:	e006      	b.n	8015b7c <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	2205      	movs	r2, #5
 8015b72:	701a      	strb	r2, [r3, #0]
 8015b74:	e002      	b.n	8015b7c <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	2202      	movs	r2, #2
 8015b7a:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8015b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b086      	sub	sp, #24
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	60f8      	str	r0, [r7, #12]
 8015b8e:	60b9      	str	r1, [r7, #8]
 8015b90:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8015b92:	23ae      	movs	r3, #174	@ 0xae
 8015b94:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d016      	beq.n	8015bca <gos_gcpValidateData+0x44>
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d013      	beq.n	8015bca <gos_gcpValidateData+0x44>
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d010      	beq.n	8015bca <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	88db      	ldrh	r3, [r3, #6]
 8015bac:	4619      	mov	r1, r3
 8015bae:	68b8      	ldr	r0, [r7, #8]
 8015bb0:	f002 fd14 	bl	80185dc <gos_crcDriverGetCrc>
 8015bb4:	4602      	mov	r2, r0
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	689b      	ldr	r3, [r3, #8]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d102      	bne.n	8015bc4 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 8015bbe:	2355      	movs	r3, #85	@ 0x55
 8015bc0:	75fb      	strb	r3, [r7, #23]
 8015bc2:	e002      	b.n	8015bca <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2202      	movs	r2, #2
 8015bc8:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8015bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3718      	adds	r7, #24
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 8015bda:	2355      	movs	r3, #85	@ 0x55
 8015bdc:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 8015bde:	2300      	movs	r3, #0
 8015be0:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8015be2:	2300      	movs	r3, #0
 8015be4:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 8015be6:	4b22      	ldr	r3, [pc, #136]	@ (8015c70 <gos_messageInit+0x9c>)
 8015be8:	2200      	movs	r2, #0
 8015bea:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 8015bec:	4b21      	ldr	r3, [pc, #132]	@ (8015c74 <gos_messageInit+0xa0>)
 8015bee:	2200      	movs	r2, #0
 8015bf0:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	71bb      	strb	r3, [r7, #6]
 8015bf6:	e014      	b.n	8015c22 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 8015bf8:	79bb      	ldrb	r3, [r7, #6]
 8015bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8015c78 <gos_messageInit+0xa4>)
 8015bfc:	2154      	movs	r1, #84	@ 0x54
 8015bfe:	fb01 f303 	mul.w	r3, r1, r3
 8015c02:	4413      	add	r3, r2
 8015c04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c08:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 8015c0a:	79bb      	ldrb	r3, [r7, #6]
 8015c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8015c78 <gos_messageInit+0xa4>)
 8015c0e:	2154      	movs	r1, #84	@ 0x54
 8015c10:	fb01 f303 	mul.w	r3, r1, r3
 8015c14:	4413      	add	r3, r2
 8015c16:	3302      	adds	r3, #2
 8015c18:	2200      	movs	r2, #0
 8015c1a:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8015c1c:	79bb      	ldrb	r3, [r7, #6]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	71bb      	strb	r3, [r7, #6]
 8015c22:	79bb      	ldrb	r3, [r7, #6]
 8015c24:	2b07      	cmp	r3, #7
 8015c26:	d9e7      	bls.n	8015bf8 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8015c28:	2300      	movs	r3, #0
 8015c2a:	717b      	strb	r3, [r7, #5]
 8015c2c:	e009      	b.n	8015c42 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8015c2e:	797b      	ldrb	r3, [r7, #5]
 8015c30:	4a12      	ldr	r2, [pc, #72]	@ (8015c7c <gos_messageInit+0xa8>)
 8015c32:	015b      	lsls	r3, r3, #5
 8015c34:	4413      	add	r3, r2
 8015c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015c3a:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8015c3c:	797b      	ldrb	r3, [r7, #5]
 8015c3e:	3301      	adds	r3, #1
 8015c40:	717b      	strb	r3, [r7, #5]
 8015c42:	797b      	ldrb	r3, [r7, #5]
 8015c44:	2b09      	cmp	r3, #9
 8015c46:	d9f2      	bls.n	8015c2e <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8015c48:	480d      	ldr	r0, [pc, #52]	@ (8015c80 <gos_messageInit+0xac>)
 8015c4a:	f000 fa7d 	bl	8016148 <gos_mutexInit>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b55      	cmp	r3, #85	@ 0x55
 8015c52:	d106      	bne.n	8015c62 <gos_messageInit+0x8e>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 8015c54:	490b      	ldr	r1, [pc, #44]	@ (8015c84 <gos_messageInit+0xb0>)
 8015c56:	480c      	ldr	r0, [pc, #48]	@ (8015c88 <gos_messageInit+0xb4>)
 8015c58:	f7fd fd36 	bl	80136c8 <gos_taskRegister>
 8015c5c:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8015c5e:	2b55      	cmp	r3, #85	@ 0x55
 8015c60:	d001      	beq.n	8015c66 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 8015c62:	23ae      	movs	r3, #174	@ 0xae
 8015c64:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 8015c66:	79fb      	ldrb	r3, [r7, #7]
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	20006636 	.word	0x20006636
 8015c74:	20006637 	.word	0x20006637
 8015c78:	20006254 	.word	0x20006254
 8015c7c:	200064f4 	.word	0x200064f4
 8015c80:	20006638 	.word	0x20006638
 8015c84:	20006634 	.word	0x20006634
 8015c88:	20001128 	.word	0x20001128

08015c8c <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 8015c8c:	b590      	push	{r4, r7, lr}
 8015c8e:	b087      	sub	sp, #28
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	60b9      	str	r1, [r7, #8]
 8015c96:	4613      	mov	r3, r2
 8015c98:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 8015c9a:	23ae      	movs	r3, #174	@ 0xae
 8015c9c:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 8015c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ca2:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8015cac:	2300      	movs	r3, #0
 8015cae:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	f000 80d9 	beq.w	8015e6e <gos_messageRx+0x1e2>
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	f000 80d5 	beq.w	8015e6e <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8015cc8:	486d      	ldr	r0, [pc, #436]	@ (8015e80 <gos_messageRx+0x1f4>)
 8015cca:	f000 fa57 	bl	801617c <gos_mutexLock>
 8015cce:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 8015cd0:	2b55      	cmp	r3, #85	@ 0x55
 8015cd2:	f040 80cc 	bne.w	8015e6e <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8015cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	4a6b      	ldr	r2, [pc, #428]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015cdc:	015b      	lsls	r3, r3, #5
 8015cde:	4413      	add	r3, r2
 8015ce0:	881b      	ldrh	r3, [r3, #0]
 8015ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ce6:	f040 80c2 	bne.w	8015e6e <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 8015cea:	f107 0312 	add.w	r3, r7, #18
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7ff f890 	bl	8014e14 <gos_taskGetCurrentId>
 8015cf4:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8015cf6:	2b55      	cmp	r3, #85	@ 0x55
 8015cf8:	f040 80b9 	bne.w	8015e6e <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 8015cfc:	4b61      	ldr	r3, [pc, #388]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	8a79      	ldrh	r1, [r7, #18]
 8015d02:	4a61      	ldr	r2, [pc, #388]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d04:	015b      	lsls	r3, r3, #5
 8015d06:	4413      	add	r3, r2
 8015d08:	460a      	mov	r2, r1
 8015d0a:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 8015d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	4a5d      	ldr	r2, [pc, #372]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d12:	015b      	lsls	r3, r3, #5
 8015d14:	4413      	add	r3, r2
 8015d16:	3302      	adds	r3, #2
 8015d18:	88fa      	ldrh	r2, [r7, #6]
 8015d1a:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 8015d1c:	4b59      	ldr	r3, [pc, #356]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	4a59      	ldr	r2, [pc, #356]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d22:	015b      	lsls	r3, r3, #5
 8015d24:	4413      	add	r3, r2
 8015d26:	3304      	adds	r3, #4
 8015d28:	2200      	movs	r2, #0
 8015d2a:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 8015d2c:	4b55      	ldr	r3, [pc, #340]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	4a55      	ldr	r2, [pc, #340]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d32:	015b      	lsls	r3, r3, #5
 8015d34:	4413      	add	r3, r2
 8015d36:	3318      	adds	r3, #24
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 8015d3c:	4b51      	ldr	r3, [pc, #324]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	4a51      	ldr	r2, [pc, #324]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d42:	015b      	lsls	r3, r3, #5
 8015d44:	4413      	add	r3, r2
 8015d46:	331c      	adds	r3, #28
 8015d48:	2249      	movs	r2, #73	@ 0x49
 8015d4a:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 8015d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015d4e:	781b      	ldrb	r3, [r3, #0]
 8015d50:	015b      	lsls	r3, r3, #5
 8015d52:	4a4d      	ldr	r2, [pc, #308]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d54:	4413      	add	r3, r2
 8015d56:	3306      	adds	r3, #6
 8015d58:	2210      	movs	r2, #16
 8015d5a:	2100      	movs	r1, #0
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f003 fa8d 	bl	801927c <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8015d62:	2300      	movs	r3, #0
 8015d64:	757b      	strb	r3, [r7, #21]
 8015d66:	e019      	b.n	8015d9c <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 8015d68:	7d7b      	ldrb	r3, [r7, #21]
 8015d6a:	005b      	lsls	r3, r3, #1
 8015d6c:	68fa      	ldr	r2, [r7, #12]
 8015d6e:	4413      	add	r3, r2
 8015d70:	881b      	ldrh	r3, [r3, #0]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d016      	beq.n	8015da4 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 8015d76:	7d7b      	ldrb	r3, [r7, #21]
 8015d78:	005b      	lsls	r3, r3, #1
 8015d7a:	68fa      	ldr	r2, [r7, #12]
 8015d7c:	441a      	add	r2, r3
 8015d7e:	4b41      	ldr	r3, [pc, #260]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	461c      	mov	r4, r3
 8015d84:	7d7b      	ldrb	r3, [r7, #21]
 8015d86:	8810      	ldrh	r0, [r2, #0]
 8015d88:	493f      	ldr	r1, [pc, #252]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015d8a:	0122      	lsls	r2, r4, #4
 8015d8c:	4413      	add	r3, r2
 8015d8e:	005b      	lsls	r3, r3, #1
 8015d90:	440b      	add	r3, r1
 8015d92:	4602      	mov	r2, r0
 8015d94:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8015d96:	7d7b      	ldrb	r3, [r7, #21]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	757b      	strb	r3, [r7, #21]
 8015d9c:	7d7b      	ldrb	r3, [r7, #21]
 8015d9e:	2b07      	cmp	r3, #7
 8015da0:	d9e2      	bls.n	8015d68 <gos_messageRx+0xdc>
 8015da2:	e000      	b.n	8015da6 <gos_messageRx+0x11a>
                    break;
 8015da4:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 8015da6:	4b37      	ldr	r3, [pc, #220]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8015dac:	2300      	movs	r3, #0
 8015dae:	75bb      	strb	r3, [r7, #22]
 8015db0:	e018      	b.n	8015de4 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 8015db2:	4b34      	ldr	r3, [pc, #208]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015db4:	781b      	ldrb	r3, [r3, #0]
 8015db6:	3301      	adds	r3, #1
 8015db8:	b2da      	uxtb	r2, r3
 8015dba:	4b32      	ldr	r3, [pc, #200]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015dbc:	701a      	strb	r2, [r3, #0]
 8015dbe:	4b31      	ldr	r3, [pc, #196]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	2b0a      	cmp	r3, #10
 8015dc4:	d102      	bne.n	8015dcc <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 8015dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015dc8:	2200      	movs	r2, #0
 8015dca:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 8015dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8015e84 <gos_messageRx+0x1f8>)
 8015dce:	781b      	ldrb	r3, [r3, #0]
 8015dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015dd2:	015b      	lsls	r3, r3, #5
 8015dd4:	4413      	add	r3, r2
 8015dd6:	881b      	ldrh	r3, [r3, #0]
 8015dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ddc:	d006      	beq.n	8015dec <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8015dde:	7dbb      	ldrb	r3, [r7, #22]
 8015de0:	3301      	adds	r3, #1
 8015de2:	75bb      	strb	r3, [r7, #22]
 8015de4:	7dbb      	ldrb	r3, [r7, #22]
 8015de6:	2b09      	cmp	r3, #9
 8015de8:	d9e3      	bls.n	8015db2 <gos_messageRx+0x126>
 8015dea:	e000      	b.n	8015dee <gos_messageRx+0x162>
                {
                    break;
 8015dec:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8015dee:	4824      	ldr	r0, [pc, #144]	@ (8015e80 <gos_messageRx+0x1f4>)
 8015df0:	f000 faca 	bl	8016388 <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 8015df4:	8a7b      	ldrh	r3, [r7, #18]
 8015df6:	f107 0210 	add.w	r2, r7, #16
 8015dfa:	4611      	mov	r1, r2
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7fe ff99 	bl	8014d34 <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8015e02:	8a3b      	ldrh	r3, [r7, #16]
 8015e04:	b21b      	sxth	r3, r3
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	db12      	blt.n	8015e30 <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015e0a:	8a7b      	ldrh	r3, [r7, #18]
 8015e0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7fe fe2b 	bl	8014a6c <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8015e16:	8a7b      	ldrh	r3, [r7, #18]
 8015e18:	f04f 31ff 	mov.w	r1, #4294967295
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f7fe f90d 	bl	801403c <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015e22:	8a7b      	ldrh	r3, [r7, #18]
 8015e24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7fe fe97 	bl	8014b5c <gos_taskRemovePrivilege>
 8015e2e:	e005      	b.n	8015e3c <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8015e30:	8a7b      	ldrh	r3, [r7, #18]
 8015e32:	f04f 31ff 	mov.w	r1, #4294967295
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fe f900 	bl	801403c <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 8015e3c:	7d3b      	ldrb	r3, [r7, #20]
 8015e3e:	4a12      	ldr	r2, [pc, #72]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015e40:	015b      	lsls	r3, r3, #5
 8015e42:	4413      	add	r3, r2
 8015e44:	331c      	adds	r3, #28
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	2b36      	cmp	r3, #54	@ 0x36
 8015e4a:	d102      	bne.n	8015e52 <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 8015e4c:	2355      	movs	r3, #85	@ 0x55
 8015e4e:	75fb      	strb	r3, [r7, #23]
 8015e50:	e006      	b.n	8015e60 <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8015e52:	7d3b      	ldrb	r3, [r7, #20]
 8015e54:	4a0c      	ldr	r2, [pc, #48]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015e56:	015b      	lsls	r3, r3, #5
 8015e58:	4413      	add	r3, r2
 8015e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015e5e:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 8015e60:	7d3b      	ldrb	r3, [r7, #20]
 8015e62:	4a09      	ldr	r2, [pc, #36]	@ (8015e88 <gos_messageRx+0x1fc>)
 8015e64:	015b      	lsls	r3, r3, #5
 8015e66:	4413      	add	r3, r2
 8015e68:	331c      	adds	r3, #28
 8015e6a:	2249      	movs	r2, #73	@ 0x49
 8015e6c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8015e6e:	4804      	ldr	r0, [pc, #16]	@ (8015e80 <gos_messageRx+0x1f4>)
 8015e70:	f000 fa8a 	bl	8016388 <gos_mutexUnlock>

    return messageRxResult;
 8015e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	371c      	adds	r7, #28
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd90      	pop	{r4, r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	20006638 	.word	0x20006638
 8015e84:	20006637 	.word	0x20006637
 8015e88:	200064f4 	.word	0x200064f4

08015e8c <gos_messageTx>:
 * Function: gos_messageTx
 */
GOS_INLINE gos_result_t gos_messageTx (
        gos_message_t* message
        )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       messageTxResult = GOS_ERROR;
 8015e94:	23ae      	movs	r3, #174	@ 0xae
 8015e96:	73fb      	strb	r3, [r7, #15]
    gos_messageIndex_t msgIndex        = 0u;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	73bb      	strb	r3, [r7, #14]

    /**
     * Function code.
     */
    if (message                                             != NULL &&
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d052      	beq.n	8015f48 <gos_messageTx+0xbc>
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	881b      	ldrh	r3, [r3, #0]
    if (message                                             != NULL &&
 8015ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015eaa:	4293      	cmp	r3, r2
 8015eac:	d04c      	beq.n	8015f48 <gos_messageTx+0xbc>
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	789b      	ldrb	r3, [r3, #2]
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 8015eb2:	2b4f      	cmp	r3, #79	@ 0x4f
 8015eb4:	d848      	bhi.n	8015f48 <gos_messageTx+0xbc>
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8015eba:	4827      	ldr	r0, [pc, #156]	@ (8015f58 <gos_messageTx+0xcc>)
 8015ebc:	f000 f95e 	bl	801617c <gos_mutexLock>
 8015ec0:	4603      	mov	r3, r0
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 8015ec2:	2b55      	cmp	r3, #85	@ 0x55
 8015ec4:	d140      	bne.n	8015f48 <gos_messageTx+0xbc>
    {
        if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 8015ec6:	4b25      	ldr	r3, [pc, #148]	@ (8015f5c <gos_messageTx+0xd0>)
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	4619      	mov	r1, r3
 8015ecc:	4a24      	ldr	r2, [pc, #144]	@ (8015f60 <gos_messageTx+0xd4>)
 8015ece:	2354      	movs	r3, #84	@ 0x54
 8015ed0:	fb01 f303 	mul.w	r3, r1, r3
 8015ed4:	4413      	add	r3, r2
 8015ed6:	881b      	ldrh	r3, [r3, #0]
 8015ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015edc:	4293      	cmp	r3, r2
 8015ede:	d133      	bne.n	8015f48 <gos_messageTx+0xbc>
        {
            (void_t*) memcpy((void_t*)&messageArray[nextMessageIndex], (void_t*)message, sizeof(*message));
 8015ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8015f5c <gos_messageTx+0xd0>)
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	461a      	mov	r2, r3
 8015ee6:	2354      	movs	r3, #84	@ 0x54
 8015ee8:	fb02 f303 	mul.w	r3, r2, r3
 8015eec:	4a1c      	ldr	r2, [pc, #112]	@ (8015f60 <gos_messageTx+0xd4>)
 8015eee:	4413      	add	r3, r2
 8015ef0:	2254      	movs	r2, #84	@ 0x54
 8015ef2:	6879      	ldr	r1, [r7, #4]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f003 fa58 	bl	80193aa <memcpy>

            messageTxResult = GOS_SUCCESS;
 8015efa:	2355      	movs	r3, #85	@ 0x55
 8015efc:	73fb      	strb	r3, [r7, #15]

            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 8015efe:	2300      	movs	r3, #0
 8015f00:	73bb      	strb	r3, [r7, #14]
 8015f02:	e01c      	b.n	8015f3e <gos_messageTx+0xb2>
            {
                if (++nextMessageIndex == CFG_MESSAGE_MAX_NUMBER)
 8015f04:	4b15      	ldr	r3, [pc, #84]	@ (8015f5c <gos_messageTx+0xd0>)
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	3301      	adds	r3, #1
 8015f0a:	b2da      	uxtb	r2, r3
 8015f0c:	4b13      	ldr	r3, [pc, #76]	@ (8015f5c <gos_messageTx+0xd0>)
 8015f0e:	701a      	strb	r2, [r3, #0]
 8015f10:	4b12      	ldr	r3, [pc, #72]	@ (8015f5c <gos_messageTx+0xd0>)
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	2b08      	cmp	r3, #8
 8015f16:	d102      	bne.n	8015f1e <gos_messageTx+0x92>
                {
                    nextMessageIndex = 0u;
 8015f18:	4b10      	ldr	r3, [pc, #64]	@ (8015f5c <gos_messageTx+0xd0>)
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 8015f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8015f5c <gos_messageTx+0xd0>)
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	4619      	mov	r1, r3
 8015f24:	4a0e      	ldr	r2, [pc, #56]	@ (8015f60 <gos_messageTx+0xd4>)
 8015f26:	2354      	movs	r3, #84	@ 0x54
 8015f28:	fb01 f303 	mul.w	r3, r1, r3
 8015f2c:	4413      	add	r3, r2
 8015f2e:	881b      	ldrh	r3, [r3, #0]
 8015f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d006      	beq.n	8015f46 <gos_messageTx+0xba>
            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 8015f38:	7bbb      	ldrb	r3, [r7, #14]
 8015f3a:	3301      	adds	r3, #1
 8015f3c:	73bb      	strb	r3, [r7, #14]
 8015f3e:	7bbb      	ldrb	r3, [r7, #14]
 8015f40:	2b07      	cmp	r3, #7
 8015f42:	d9df      	bls.n	8015f04 <gos_messageTx+0x78>
 8015f44:	e000      	b.n	8015f48 <gos_messageTx+0xbc>
                {
                    break;
 8015f46:	bf00      	nop
    {
        // Nothing to do.
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8015f48:	4803      	ldr	r0, [pc, #12]	@ (8015f58 <gos_messageTx+0xcc>)
 8015f4a:	f000 fa1d 	bl	8016388 <gos_mutexUnlock>

    return messageTxResult;
 8015f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3710      	adds	r7, #16
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	20006638 	.word	0x20006638
 8015f5c:	20006636 	.word	0x20006636
 8015f60:	20006254 	.word	0x20006254

08015f64 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8015f64:	b590      	push	{r4, r7, lr}
 8015f66:	b083      	sub	sp, #12
 8015f68:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8015f72:	2300      	movs	r3, #0
 8015f74:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015f76:	f04f 31ff 	mov.w	r1, #4294967295
 8015f7a:	4870      	ldr	r0, [pc, #448]	@ (801613c <gos_messageDaemonTask+0x1d8>)
 8015f7c:	f000 f8fe 	bl	801617c <gos_mutexLock>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b55      	cmp	r3, #85	@ 0x55
 8015f84:	f040 80d5 	bne.w	8016132 <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8015f88:	2300      	movs	r3, #0
 8015f8a:	71bb      	strb	r3, [r7, #6]
 8015f8c:	e0ca      	b.n	8016124 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 8015f8e:	79bb      	ldrb	r3, [r7, #6]
 8015f90:	4a6b      	ldr	r2, [pc, #428]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8015f92:	015b      	lsls	r3, r3, #5
 8015f94:	4413      	add	r3, r2
 8015f96:	881b      	ldrh	r3, [r3, #0]
 8015f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015f9c:	f000 80bf 	beq.w	801611e <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	717b      	strb	r3, [r7, #5]
 8015fa4:	e077      	b.n	8016096 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	71fb      	strb	r3, [r7, #7]
 8015faa:	e06e      	b.n	801608a <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8015fac:	79ba      	ldrb	r2, [r7, #6]
 8015fae:	797b      	ldrb	r3, [r7, #5]
 8015fb0:	4963      	ldr	r1, [pc, #396]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8015fb2:	0112      	lsls	r2, r2, #4
 8015fb4:	4413      	add	r3, r2
 8015fb6:	005b      	lsls	r3, r3, #1
 8015fb8:	440b      	add	r3, r1
 8015fba:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 8015fbc:	79fb      	ldrb	r3, [r7, #7]
 8015fbe:	4961      	ldr	r1, [pc, #388]	@ (8016144 <gos_messageDaemonTask+0x1e0>)
 8015fc0:	2054      	movs	r0, #84	@ 0x54
 8015fc2:	fb00 f303 	mul.w	r3, r0, r3
 8015fc6:	440b      	add	r3, r1
 8015fc8:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d15a      	bne.n	8016084 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8015fce:	79bb      	ldrb	r3, [r7, #6]
 8015fd0:	4a5b      	ldr	r2, [pc, #364]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8015fd2:	015b      	lsls	r3, r3, #5
 8015fd4:	4413      	add	r3, r2
 8015fd6:	3318      	adds	r3, #24
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 8015fdc:	79fb      	ldrb	r3, [r7, #7]
 8015fde:	2254      	movs	r2, #84	@ 0x54
 8015fe0:	fb02 f303 	mul.w	r3, r2, r3
 8015fe4:	4a57      	ldr	r2, [pc, #348]	@ (8016144 <gos_messageDaemonTask+0x1e0>)
 8015fe6:	4413      	add	r3, r2
 8015fe8:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 8015fea:	79fb      	ldrb	r3, [r7, #7]
 8015fec:	4a55      	ldr	r2, [pc, #340]	@ (8016144 <gos_messageDaemonTask+0x1e0>)
 8015fee:	2454      	movs	r4, #84	@ 0x54
 8015ff0:	fb04 f303 	mul.w	r3, r4, r3
 8015ff4:	4413      	add	r3, r2
 8015ff6:	3302      	adds	r3, #2
 8015ff8:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	f003 f9d5 	bl	80193aa <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 8016000:	79fa      	ldrb	r2, [r7, #7]
 8016002:	79bb      	ldrb	r3, [r7, #6]
 8016004:	494e      	ldr	r1, [pc, #312]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8016006:	015b      	lsls	r3, r3, #5
 8016008:	440b      	add	r3, r1
 801600a:	3318      	adds	r3, #24
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	494d      	ldr	r1, [pc, #308]	@ (8016144 <gos_messageDaemonTask+0x1e0>)
 8016010:	2054      	movs	r0, #84	@ 0x54
 8016012:	fb00 f202 	mul.w	r2, r0, r2
 8016016:	440a      	add	r2, r1
 8016018:	3202      	adds	r2, #2
 801601a:	7812      	ldrb	r2, [r2, #0]
 801601c:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 801601e:	79fa      	ldrb	r2, [r7, #7]
 8016020:	79bb      	ldrb	r3, [r7, #6]
 8016022:	4947      	ldr	r1, [pc, #284]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8016024:	015b      	lsls	r3, r3, #5
 8016026:	440b      	add	r3, r1
 8016028:	3318      	adds	r3, #24
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4945      	ldr	r1, [pc, #276]	@ (8016144 <gos_messageDaemonTask+0x1e0>)
 801602e:	2054      	movs	r0, #84	@ 0x54
 8016030:	fb00 f202 	mul.w	r2, r0, r2
 8016034:	440a      	add	r2, r1
 8016036:	8812      	ldrh	r2, [r2, #0]
 8016038:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 801603a:	79bb      	ldrb	r3, [r7, #6]
 801603c:	4a40      	ldr	r2, [pc, #256]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 801603e:	015b      	lsls	r3, r3, #5
 8016040:	4413      	add	r3, r2
 8016042:	881b      	ldrh	r3, [r3, #0]
 8016044:	4618      	mov	r0, r3
 8016046:	f7fe f90b 	bl	8014260 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 801604a:	79fb      	ldrb	r3, [r7, #7]
 801604c:	4a3d      	ldr	r2, [pc, #244]	@ (8016144 <gos_messageDaemonTask+0x1e0>)
 801604e:	2154      	movs	r1, #84	@ 0x54
 8016050:	fb01 f303 	mul.w	r3, r1, r3
 8016054:	4413      	add	r3, r2
 8016056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801605a:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 801605c:	79bb      	ldrb	r3, [r7, #6]
 801605e:	4a38      	ldr	r2, [pc, #224]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8016060:	015b      	lsls	r3, r3, #5
 8016062:	4413      	add	r3, r2
 8016064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016068:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 801606a:	79bb      	ldrb	r3, [r7, #6]
 801606c:	4a34      	ldr	r2, [pc, #208]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 801606e:	015b      	lsls	r3, r3, #5
 8016070:	4413      	add	r3, r2
 8016072:	331c      	adds	r3, #28
 8016074:	2236      	movs	r2, #54	@ 0x36
 8016076:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 8016078:	2308      	movs	r3, #8
 801607a:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 801607c:	2308      	movs	r3, #8
 801607e:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 8016080:	230a      	movs	r3, #10
 8016082:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8016084:	79fb      	ldrb	r3, [r7, #7]
 8016086:	3301      	adds	r3, #1
 8016088:	71fb      	strb	r3, [r7, #7]
 801608a:	79fb      	ldrb	r3, [r7, #7]
 801608c:	2b07      	cmp	r3, #7
 801608e:	d98d      	bls.n	8015fac <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8016090:	797b      	ldrb	r3, [r7, #5]
 8016092:	3301      	adds	r3, #1
 8016094:	717b      	strb	r3, [r7, #5]
 8016096:	797b      	ldrb	r3, [r7, #5]
 8016098:	2b07      	cmp	r3, #7
 801609a:	d984      	bls.n	8015fa6 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 801609c:	79bb      	ldrb	r3, [r7, #6]
 801609e:	4a28      	ldr	r2, [pc, #160]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 80160a0:	015b      	lsls	r3, r3, #5
 80160a2:	4413      	add	r3, r2
 80160a4:	331c      	adds	r3, #28
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	2b49      	cmp	r3, #73	@ 0x49
 80160aa:	d138      	bne.n	801611e <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 80160ac:	79bb      	ldrb	r3, [r7, #6]
 80160ae:	4a24      	ldr	r2, [pc, #144]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 80160b0:	015b      	lsls	r3, r3, #5
 80160b2:	4413      	add	r3, r2
 80160b4:	3302      	adds	r3, #2
 80160b6:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 80160b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80160bc:	4293      	cmp	r3, r2
 80160be:	d02e      	beq.n	801611e <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 80160c0:	79bb      	ldrb	r3, [r7, #6]
 80160c2:	491f      	ldr	r1, [pc, #124]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 80160c4:	015a      	lsls	r2, r3, #5
 80160c6:	440a      	add	r2, r1
 80160c8:	3204      	adds	r2, #4
 80160ca:	8812      	ldrh	r2, [r2, #0]
 80160cc:	3201      	adds	r2, #1
 80160ce:	b291      	uxth	r1, r2
 80160d0:	4a1b      	ldr	r2, [pc, #108]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 80160d2:	015b      	lsls	r3, r3, #5
 80160d4:	4413      	add	r3, r2
 80160d6:	3304      	adds	r3, #4
 80160d8:	460a      	mov	r2, r1
 80160da:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 80160dc:	79bb      	ldrb	r3, [r7, #6]
 80160de:	4a18      	ldr	r2, [pc, #96]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 80160e0:	015b      	lsls	r3, r3, #5
 80160e2:	4413      	add	r3, r2
 80160e4:	3304      	adds	r3, #4
 80160e6:	881b      	ldrh	r3, [r3, #0]
 80160e8:	461a      	mov	r2, r3
 80160ea:	2332      	movs	r3, #50	@ 0x32
 80160ec:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 80160f0:	79ba      	ldrb	r2, [r7, #6]
 80160f2:	4913      	ldr	r1, [pc, #76]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 80160f4:	0152      	lsls	r2, r2, #5
 80160f6:	440a      	add	r2, r1
 80160f8:	3202      	adds	r2, #2
 80160fa:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 80160fc:	4293      	cmp	r3, r2
 80160fe:	d90e      	bls.n	801611e <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8016100:	79bb      	ldrb	r3, [r7, #6]
 8016102:	4a0f      	ldr	r2, [pc, #60]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8016104:	015b      	lsls	r3, r3, #5
 8016106:	4413      	add	r3, r2
 8016108:	881b      	ldrh	r3, [r3, #0]
 801610a:	4618      	mov	r0, r3
 801610c:	f7fe f8a8 	bl	8014260 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8016110:	79bb      	ldrb	r3, [r7, #6]
 8016112:	4a0b      	ldr	r2, [pc, #44]	@ (8016140 <gos_messageDaemonTask+0x1dc>)
 8016114:	015b      	lsls	r3, r3, #5
 8016116:	4413      	add	r3, r2
 8016118:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801611c:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 801611e:	79bb      	ldrb	r3, [r7, #6]
 8016120:	3301      	adds	r3, #1
 8016122:	71bb      	strb	r3, [r7, #6]
 8016124:	79bb      	ldrb	r3, [r7, #6]
 8016126:	2b09      	cmp	r3, #9
 8016128:	f67f af31 	bls.w	8015f8e <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 801612c:	4803      	ldr	r0, [pc, #12]	@ (801613c <gos_messageDaemonTask+0x1d8>)
 801612e:	f000 f92b 	bl	8016388 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 8016132:	2032      	movs	r0, #50	@ 0x32
 8016134:	f7fd fc5a 	bl	80139ec <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8016138:	e71d      	b.n	8015f76 <gos_messageDaemonTask+0x12>
 801613a:	bf00      	nop
 801613c:	20006638 	.word	0x20006638
 8016140:	200064f4 	.word	0x200064f4
 8016144:	20006254 	.word	0x20006254

08016148 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8016148:	b480      	push	{r7}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 8016150:	23ae      	movs	r3, #174	@ 0xae
 8016152:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d008      	beq.n	801616c <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	22d2      	movs	r2, #210	@ 0xd2
 801615e:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016166:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 8016168:	2355      	movs	r3, #85	@ 0x55
 801616a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 801616c:	7bfb      	ldrb	r3, [r7, #15]
}
 801616e:	4618      	mov	r0, r3
 8016170:	3714      	adds	r7, #20
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr
	...

0801617c <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b086      	sub	sp, #24
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 8016186:	23ae      	movs	r3, #174	@ 0xae
 8016188:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 801618a:	f7fc fa79 	bl	8012680 <gos_kernelGetSysTicks>
 801618e:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 8016190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016194:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 8016196:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801619a:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 801619c:	23ff      	movs	r3, #255	@ 0xff
 801619e:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 80161a0:	23ff      	movs	r3, #255	@ 0xff
 80161a2:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 80161a4:	2349      	movs	r3, #73	@ 0x49
 80161a6:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 80161a8:	e0ce      	b.n	8016348 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 80161aa:	4b73      	ldr	r3, [pc, #460]	@ (8016378 <gos_mutexLock+0x1fc>)
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d108      	bne.n	80161c4 <gos_mutexLock+0x48>
 80161b2:	b672      	cpsid	i
 80161b4:	f3ef 8310 	mrs	r3, PRIMASK
 80161b8:	4a70      	ldr	r2, [pc, #448]	@ (801637c <gos_mutexLock+0x200>)
 80161ba:	6013      	str	r3, [r2, #0]
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	f3bf 8f6f 	isb	sy
 80161c4:	4b6c      	ldr	r3, [pc, #432]	@ (8016378 <gos_mutexLock+0x1fc>)
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	3301      	adds	r3, #1
 80161ca:	b2da      	uxtb	r2, r3
 80161cc:	4b6a      	ldr	r3, [pc, #424]	@ (8016378 <gos_mutexLock+0x1fc>)
 80161ce:	701a      	strb	r2, [r3, #0]
 80161d0:	4b6b      	ldr	r3, [pc, #428]	@ (8016380 <gos_mutexLock+0x204>)
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	3301      	adds	r3, #1
 80161d6:	b2da      	uxtb	r2, r3
 80161d8:	4b69      	ldr	r3, [pc, #420]	@ (8016380 <gos_mutexLock+0x204>)
 80161da:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	781b      	ldrb	r3, [r3, #0]
 80161e0:	2bd2      	cmp	r3, #210	@ 0xd2
 80161e2:	d13b      	bne.n	801625c <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 80161e4:	7cfb      	ldrb	r3, [r7, #19]
 80161e6:	2b36      	cmp	r3, #54	@ 0x36
 80161e8:	d12d      	bne.n	8016246 <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 80161ea:	4b66      	ldr	r3, [pc, #408]	@ (8016384 <gos_mutexLock+0x208>)
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d105      	bne.n	80161fe <gos_mutexLock+0x82>
 80161f2:	4b63      	ldr	r3, [pc, #396]	@ (8016380 <gos_mutexLock+0x204>)
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	3301      	adds	r3, #1
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	4b61      	ldr	r3, [pc, #388]	@ (8016380 <gos_mutexLock+0x204>)
 80161fc:	701a      	strb	r2, [r3, #0]
 80161fe:	4b61      	ldr	r3, [pc, #388]	@ (8016384 <gos_mutexLock+0x208>)
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	3301      	adds	r3, #1
 8016204:	b2da      	uxtb	r2, r3
 8016206:	4b5f      	ldr	r3, [pc, #380]	@ (8016384 <gos_mutexLock+0x208>)
 8016208:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 801620a:	7a7a      	ldrb	r2, [r7, #9]
 801620c:	8abb      	ldrh	r3, [r7, #20]
 801620e:	4611      	mov	r1, r2
 8016210:	4618      	mov	r0, r3
 8016212:	f7fe fa33 	bl	801467c <gos_taskSetPriority>
                GOS_ISR_EXIT
 8016216:	4b5b      	ldr	r3, [pc, #364]	@ (8016384 <gos_mutexLock+0x208>)
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d005      	beq.n	801622a <gos_mutexLock+0xae>
 801621e:	4b59      	ldr	r3, [pc, #356]	@ (8016384 <gos_mutexLock+0x208>)
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	3b01      	subs	r3, #1
 8016224:	b2da      	uxtb	r2, r3
 8016226:	4b57      	ldr	r3, [pc, #348]	@ (8016384 <gos_mutexLock+0x208>)
 8016228:	701a      	strb	r2, [r3, #0]
 801622a:	4b56      	ldr	r3, [pc, #344]	@ (8016384 <gos_mutexLock+0x208>)
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d109      	bne.n	8016246 <gos_mutexLock+0xca>
 8016232:	4b53      	ldr	r3, [pc, #332]	@ (8016380 <gos_mutexLock+0x204>)
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d005      	beq.n	8016246 <gos_mutexLock+0xca>
 801623a:	4b51      	ldr	r3, [pc, #324]	@ (8016380 <gos_mutexLock+0x204>)
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	3b01      	subs	r3, #1
 8016240:	b2da      	uxtb	r2, r3
 8016242:	4b4f      	ldr	r3, [pc, #316]	@ (8016380 <gos_mutexLock+0x204>)
 8016244:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	226b      	movs	r2, #107	@ 0x6b
 801624a:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	3302      	adds	r3, #2
 8016250:	4618      	mov	r0, r3
 8016252:	f7fe fddf 	bl	8014e14 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 8016256:	2355      	movs	r3, #85	@ 0x55
 8016258:	75fb      	strb	r3, [r7, #23]
 801625a:	e04b      	b.n	80162f4 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	885b      	ldrh	r3, [r3, #2]
 8016260:	f107 0209 	add.w	r2, r7, #9
 8016264:	4611      	mov	r1, r2
 8016266:	4618      	mov	r0, r3
 8016268:	f7fe fb90 	bl	801498c <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 801626c:	f107 030a 	add.w	r3, r7, #10
 8016270:	4618      	mov	r0, r3
 8016272:	f7fe fdcf 	bl	8014e14 <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 8016276:	897b      	ldrh	r3, [r7, #10]
 8016278:	f107 0208 	add.w	r2, r7, #8
 801627c:	4611      	mov	r1, r2
 801627e:	4618      	mov	r0, r3
 8016280:	f7fe fb84 	bl	801498c <gos_taskGetPriority>
            ownerId = pMutex->owner;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	885b      	ldrh	r3, [r3, #2]
 8016288:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 801628a:	7a3a      	ldrb	r2, [r7, #8]
 801628c:	7a7b      	ldrb	r3, [r7, #9]
 801628e:	429a      	cmp	r2, r3
 8016290:	d230      	bcs.n	80162f4 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8016292:	4b3c      	ldr	r3, [pc, #240]	@ (8016384 <gos_mutexLock+0x208>)
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d105      	bne.n	80162a6 <gos_mutexLock+0x12a>
 801629a:	4b39      	ldr	r3, [pc, #228]	@ (8016380 <gos_mutexLock+0x204>)
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	3301      	adds	r3, #1
 80162a0:	b2da      	uxtb	r2, r3
 80162a2:	4b37      	ldr	r3, [pc, #220]	@ (8016380 <gos_mutexLock+0x204>)
 80162a4:	701a      	strb	r2, [r3, #0]
 80162a6:	4b37      	ldr	r3, [pc, #220]	@ (8016384 <gos_mutexLock+0x208>)
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	3301      	adds	r3, #1
 80162ac:	b2da      	uxtb	r2, r3
 80162ae:	4b35      	ldr	r3, [pc, #212]	@ (8016384 <gos_mutexLock+0x208>)
 80162b0:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	885b      	ldrh	r3, [r3, #2]
 80162b6:	7a3a      	ldrb	r2, [r7, #8]
 80162b8:	4611      	mov	r1, r2
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fe f9de 	bl	801467c <gos_taskSetPriority>
                GOS_ISR_EXIT
 80162c0:	4b30      	ldr	r3, [pc, #192]	@ (8016384 <gos_mutexLock+0x208>)
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d005      	beq.n	80162d4 <gos_mutexLock+0x158>
 80162c8:	4b2e      	ldr	r3, [pc, #184]	@ (8016384 <gos_mutexLock+0x208>)
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	3b01      	subs	r3, #1
 80162ce:	b2da      	uxtb	r2, r3
 80162d0:	4b2c      	ldr	r3, [pc, #176]	@ (8016384 <gos_mutexLock+0x208>)
 80162d2:	701a      	strb	r2, [r3, #0]
 80162d4:	4b2b      	ldr	r3, [pc, #172]	@ (8016384 <gos_mutexLock+0x208>)
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d109      	bne.n	80162f0 <gos_mutexLock+0x174>
 80162dc:	4b28      	ldr	r3, [pc, #160]	@ (8016380 <gos_mutexLock+0x204>)
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d005      	beq.n	80162f0 <gos_mutexLock+0x174>
 80162e4:	4b26      	ldr	r3, [pc, #152]	@ (8016380 <gos_mutexLock+0x204>)
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	3b01      	subs	r3, #1
 80162ea:	b2da      	uxtb	r2, r3
 80162ec:	4b24      	ldr	r3, [pc, #144]	@ (8016380 <gos_mutexLock+0x204>)
 80162ee:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 80162f0:	2336      	movs	r3, #54	@ 0x36
 80162f2:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 80162f4:	4b20      	ldr	r3, [pc, #128]	@ (8016378 <gos_mutexLock+0x1fc>)
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d005      	beq.n	8016308 <gos_mutexLock+0x18c>
 80162fc:	4b1e      	ldr	r3, [pc, #120]	@ (8016378 <gos_mutexLock+0x1fc>)
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	3b01      	subs	r3, #1
 8016302:	b2da      	uxtb	r2, r3
 8016304:	4b1c      	ldr	r3, [pc, #112]	@ (8016378 <gos_mutexLock+0x1fc>)
 8016306:	701a      	strb	r2, [r3, #0]
 8016308:	4b1b      	ldr	r3, [pc, #108]	@ (8016378 <gos_mutexLock+0x1fc>)
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d108      	bne.n	8016322 <gos_mutexLock+0x1a6>
 8016310:	4b1a      	ldr	r3, [pc, #104]	@ (801637c <gos_mutexLock+0x200>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	f383 8810 	msr	PRIMASK, r3
 8016318:	b662      	cpsie	i
 801631a:	f3bf 8f4f 	dsb	sy
 801631e:	f3bf 8f6f 	isb	sy
 8016322:	4b17      	ldr	r3, [pc, #92]	@ (8016380 <gos_mutexLock+0x204>)
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d005      	beq.n	8016336 <gos_mutexLock+0x1ba>
 801632a:	4b15      	ldr	r3, [pc, #84]	@ (8016380 <gos_mutexLock+0x204>)
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	3b01      	subs	r3, #1
 8016330:	b2da      	uxtb	r2, r3
 8016332:	4b13      	ldr	r3, [pc, #76]	@ (8016380 <gos_mutexLock+0x204>)
 8016334:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 8016336:	7dfb      	ldrb	r3, [r7, #23]
 8016338:	2b55      	cmp	r3, #85	@ 0x55
 801633a:	d017      	beq.n	801636c <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d002      	beq.n	8016348 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 8016342:	2002      	movs	r0, #2
 8016344:	f7fd fb52 	bl	80139ec <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d00f      	beq.n	801636e <gos_mutexLock+0x1f2>
 801634e:	f7fc f997 	bl	8012680 <gos_kernelGetSysTicks>
 8016352:	4602      	mov	r2, r0
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	683a      	ldr	r2, [r7, #0]
 801635a:	429a      	cmp	r2, r3
 801635c:	f4bf af25 	bcs.w	80161aa <gos_mutexLock+0x2e>
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016366:	f43f af20 	beq.w	80161aa <gos_mutexLock+0x2e>
 801636a:	e000      	b.n	801636e <gos_mutexLock+0x1f2>
            break;
 801636c:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 801636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016370:	4618      	mov	r0, r3
 8016372:	3718      	adds	r7, #24
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	200061bb 	.word	0x200061bb
 801637c:	200061bc 	.word	0x200061bc
 8016380:	200061b9 	.word	0x200061b9
 8016384:	200061ba 	.word	0x200061ba

08016388 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 8016390:	23ae      	movs	r3, #174	@ 0xae
 8016392:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 8016394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016398:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d04c      	beq.n	801643a <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 80163a0:	4b28      	ldr	r3, [pc, #160]	@ (8016444 <gos_mutexUnlock+0xbc>)
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d108      	bne.n	80163ba <gos_mutexUnlock+0x32>
 80163a8:	b672      	cpsid	i
 80163aa:	f3ef 8310 	mrs	r3, PRIMASK
 80163ae:	4a26      	ldr	r2, [pc, #152]	@ (8016448 <gos_mutexUnlock+0xc0>)
 80163b0:	6013      	str	r3, [r2, #0]
 80163b2:	f3bf 8f4f 	dsb	sy
 80163b6:	f3bf 8f6f 	isb	sy
 80163ba:	4b22      	ldr	r3, [pc, #136]	@ (8016444 <gos_mutexUnlock+0xbc>)
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	3301      	adds	r3, #1
 80163c0:	b2da      	uxtb	r2, r3
 80163c2:	4b20      	ldr	r3, [pc, #128]	@ (8016444 <gos_mutexUnlock+0xbc>)
 80163c4:	701a      	strb	r2, [r3, #0]
 80163c6:	4b21      	ldr	r3, [pc, #132]	@ (801644c <gos_mutexUnlock+0xc4>)
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	3301      	adds	r3, #1
 80163cc:	b2da      	uxtb	r2, r3
 80163ce:	4b1f      	ldr	r3, [pc, #124]	@ (801644c <gos_mutexUnlock+0xc4>)
 80163d0:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 80163d2:	f107 030c 	add.w	r3, r7, #12
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7fe fd1c 	bl	8014e14 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	885a      	ldrh	r2, [r3, #2]
 80163e0:	89bb      	ldrh	r3, [r7, #12]
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d108      	bne.n	80163f8 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	22d2      	movs	r2, #210	@ 0xd2
 80163ea:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80163f2:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 80163f4:	2355      	movs	r3, #85	@ 0x55
 80163f6:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 80163f8:	4b12      	ldr	r3, [pc, #72]	@ (8016444 <gos_mutexUnlock+0xbc>)
 80163fa:	781b      	ldrb	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d005      	beq.n	801640c <gos_mutexUnlock+0x84>
 8016400:	4b10      	ldr	r3, [pc, #64]	@ (8016444 <gos_mutexUnlock+0xbc>)
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	3b01      	subs	r3, #1
 8016406:	b2da      	uxtb	r2, r3
 8016408:	4b0e      	ldr	r3, [pc, #56]	@ (8016444 <gos_mutexUnlock+0xbc>)
 801640a:	701a      	strb	r2, [r3, #0]
 801640c:	4b0d      	ldr	r3, [pc, #52]	@ (8016444 <gos_mutexUnlock+0xbc>)
 801640e:	781b      	ldrb	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d108      	bne.n	8016426 <gos_mutexUnlock+0x9e>
 8016414:	4b0c      	ldr	r3, [pc, #48]	@ (8016448 <gos_mutexUnlock+0xc0>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	f383 8810 	msr	PRIMASK, r3
 801641c:	b662      	cpsie	i
 801641e:	f3bf 8f4f 	dsb	sy
 8016422:	f3bf 8f6f 	isb	sy
 8016426:	4b09      	ldr	r3, [pc, #36]	@ (801644c <gos_mutexUnlock+0xc4>)
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d005      	beq.n	801643a <gos_mutexUnlock+0xb2>
 801642e:	4b07      	ldr	r3, [pc, #28]	@ (801644c <gos_mutexUnlock+0xc4>)
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	3b01      	subs	r3, #1
 8016434:	b2da      	uxtb	r2, r3
 8016436:	4b05      	ldr	r3, [pc, #20]	@ (801644c <gos_mutexUnlock+0xc4>)
 8016438:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 801643a:	7bfb      	ldrb	r3, [r7, #15]
}
 801643c:	4618      	mov	r0, r3
 801643e:	3710      	adds	r7, #16
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	200061bb 	.word	0x200061bb
 8016448:	200061bc 	.word	0x200061bc
 801644c:	200061b9 	.word	0x200061b9

08016450 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 8016456:	2355      	movs	r3, #85	@ 0x55
 8016458:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 801645a:	2300      	movs	r3, #0
 801645c:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 801645e:	2300      	movs	r3, #0
 8016460:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8016462:	2300      	movs	r3, #0
 8016464:	71fb      	strb	r3, [r7, #7]
 8016466:	e038      	b.n	80164da <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 8016468:	79fb      	ldrb	r3, [r7, #7]
 801646a:	4a22      	ldr	r2, [pc, #136]	@ (80164f4 <gos_queueInit+0xa4>)
 801646c:	2100      	movs	r1, #0
 801646e:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 8016470:	79fb      	ldrb	r3, [r7, #7]
 8016472:	4a21      	ldr	r2, [pc, #132]	@ (80164f8 <gos_queueInit+0xa8>)
 8016474:	2100      	movs	r1, #0
 8016476:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 8016478:	79fb      	ldrb	r3, [r7, #7]
 801647a:	4a20      	ldr	r2, [pc, #128]	@ (80164fc <gos_queueInit+0xac>)
 801647c:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016480:	fb01 f303 	mul.w	r3, r1, r3
 8016484:	4413      	add	r3, r2
 8016486:	f44f 7240 	mov.w	r2, #768	@ 0x300
 801648a:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 801648c:	79fb      	ldrb	r3, [r7, #7]
 801648e:	4a1b      	ldr	r2, [pc, #108]	@ (80164fc <gos_queueInit+0xac>)
 8016490:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016494:	fb01 f303 	mul.w	r3, r1, r3
 8016498:	4413      	add	r3, r2
 801649a:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 801649e:	3302      	adds	r3, #2
 80164a0:	2200      	movs	r2, #0
 80164a2:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 80164a4:	2300      	movs	r3, #0
 80164a6:	71bb      	strb	r3, [r7, #6]
 80164a8:	e011      	b.n	80164ce <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 80164aa:	79fb      	ldrb	r3, [r7, #7]
 80164ac:	79ba      	ldrb	r2, [r7, #6]
 80164ae:	4913      	ldr	r1, [pc, #76]	@ (80164fc <gos_queueInit+0xac>)
 80164b0:	20c9      	movs	r0, #201	@ 0xc9
 80164b2:	fb00 f202 	mul.w	r2, r0, r2
 80164b6:	f641 7084 	movw	r0, #8068	@ 0x1f84
 80164ba:	fb00 f303 	mul.w	r3, r0, r3
 80164be:	4413      	add	r3, r2
 80164c0:	440b      	add	r3, r1
 80164c2:	33e2      	adds	r3, #226	@ 0xe2
 80164c4:	2200      	movs	r2, #0
 80164c6:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 80164c8:	79bb      	ldrb	r3, [r7, #6]
 80164ca:	3301      	adds	r3, #1
 80164cc:	71bb      	strb	r3, [r7, #6]
 80164ce:	79bb      	ldrb	r3, [r7, #6]
 80164d0:	2b27      	cmp	r3, #39	@ 0x27
 80164d2:	d9ea      	bls.n	80164aa <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80164d4:	79fb      	ldrb	r3, [r7, #7]
 80164d6:	3301      	adds	r3, #1
 80164d8:	71fb      	strb	r3, [r7, #7]
 80164da:	79fb      	ldrb	r3, [r7, #7]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d0c3      	beq.n	8016468 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 80164e0:	4807      	ldr	r0, [pc, #28]	@ (8016500 <gos_queueInit+0xb0>)
 80164e2:	f7ff fe31 	bl	8016148 <gos_mutexInit>
 80164e6:	4603      	mov	r3, r0
 80164e8:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 80164ea:	797b      	ldrb	r3, [r7, #5]
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	200085c0 	.word	0x200085c0
 80164f8:	200085c4 	.word	0x200085c4
 80164fc:	2000663c 	.word	0x2000663c
 8016500:	200085c8 	.word	0x200085c8

08016504 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 801650c:	23ae      	movs	r3, #174	@ 0xae
 801650e:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 8016510:	2300      	movs	r3, #0
 8016512:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d048      	beq.n	80165ac <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 801651a:	2300      	movs	r3, #0
 801651c:	73bb      	strb	r3, [r7, #14]
 801651e:	e042      	b.n	80165a6 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8016520:	7bbb      	ldrb	r3, [r7, #14]
 8016522:	4a25      	ldr	r2, [pc, #148]	@ (80165b8 <gos_queueCreate+0xb4>)
 8016524:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016528:	fb01 f303 	mul.w	r3, r1, r3
 801652c:	4413      	add	r3, r2
 801652e:	881b      	ldrh	r3, [r3, #0]
 8016530:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016534:	d134      	bne.n	80165a0 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 8016536:	7bbb      	ldrb	r3, [r7, #14]
 8016538:	b29a      	uxth	r2, r3
 801653a:	7bbb      	ldrb	r3, [r7, #14]
 801653c:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8016540:	b290      	uxth	r0, r2
 8016542:	4a1d      	ldr	r2, [pc, #116]	@ (80165b8 <gos_queueCreate+0xb4>)
 8016544:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016548:	fb01 f303 	mul.w	r3, r1, r3
 801654c:	4413      	add	r3, r2
 801654e:	4602      	mov	r2, r0
 8016550:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 8016552:	7bbb      	ldrb	r3, [r7, #14]
 8016554:	4a18      	ldr	r2, [pc, #96]	@ (80165b8 <gos_queueCreate+0xb4>)
 8016556:	f641 7184 	movw	r1, #8068	@ 0x1f84
 801655a:	fb01 f303 	mul.w	r3, r1, r3
 801655e:	4413      	add	r3, r2
 8016560:	881a      	ldrh	r2, [r3, #0]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	3302      	adds	r3, #2
 801656a:	2b00      	cmp	r3, #0
 801656c:	d015      	beq.n	801659a <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	3302      	adds	r3, #2
 8016572:	4618      	mov	r0, r3
 8016574:	f7ed fdb4 	bl	80040e0 <strlen>
 8016578:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 801657a:	2b18      	cmp	r3, #24
 801657c:	d80d      	bhi.n	801659a <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 801657e:	7bbb      	ldrb	r3, [r7, #14]
 8016580:	f641 7284 	movw	r2, #8068	@ 0x1f84
 8016584:	fb02 f303 	mul.w	r3, r2, r3
 8016588:	4a0b      	ldr	r2, [pc, #44]	@ (80165b8 <gos_queueCreate+0xb4>)
 801658a:	4413      	add	r3, r2
 801658c:	1c9a      	adds	r2, r3, #2
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	3302      	adds	r3, #2
 8016592:	4619      	mov	r1, r3
 8016594:	4610      	mov	r0, r2
 8016596:	f002 ff00 	bl	801939a <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 801659a:	2355      	movs	r3, #85	@ 0x55
 801659c:	73fb      	strb	r3, [r7, #15]
                break;
 801659e:	e005      	b.n	80165ac <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80165a0:	7bbb      	ldrb	r3, [r7, #14]
 80165a2:	3301      	adds	r3, #1
 80165a4:	73bb      	strb	r3, [r7, #14]
 80165a6:	7bbb      	ldrb	r3, [r7, #14]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d0b9      	beq.n	8016520 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 80165ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3710      	adds	r7, #16
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	bf00      	nop
 80165b8:	2000663c 	.word	0x2000663c

080165bc <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b086      	sub	sp, #24
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	60b9      	str	r1, [r7, #8]
 80165c4:	607b      	str	r3, [r7, #4]
 80165c6:	4603      	mov	r3, r0
 80165c8:	81fb      	strh	r3, [r7, #14]
 80165ca:	4613      	mov	r3, r2
 80165cc:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 80165ce:	23ae      	movs	r3, #174	@ 0xae
 80165d0:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 80165d2:	2300      	movs	r3, #0
 80165d4:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 80165d6:	6879      	ldr	r1, [r7, #4]
 80165d8:	485a      	ldr	r0, [pc, #360]	@ (8016744 <gos_queuePut+0x188>)
 80165da:	f7ff fdcf 	bl	801617c <gos_mutexLock>
 80165de:	4603      	mov	r3, r0
 80165e0:	2b55      	cmp	r3, #85	@ 0x55
 80165e2:	f040 80a6 	bne.w	8016732 <gos_queuePut+0x176>
 80165e6:	89fb      	ldrh	r3, [r7, #14]
 80165e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80165ec:	f0c0 80a1 	bcc.w	8016732 <gos_queuePut+0x176>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 80165f0:	89fb      	ldrh	r3, [r7, #14]
 80165f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80165f6:	f200 809c 	bhi.w	8016732 <gos_queuePut+0x176>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	f000 8098 	beq.w	8016732 <gos_queuePut+0x176>
        element                                          != NULL                 &&
 8016602:	7b7b      	ldrb	r3, [r7, #13]
 8016604:	2bc8      	cmp	r3, #200	@ 0xc8
 8016606:	f200 8094 	bhi.w	8016732 <gos_queuePut+0x176>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 801660a:	89fb      	ldrh	r3, [r7, #14]
 801660c:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8016610:	4a4d      	ldr	r2, [pc, #308]	@ (8016748 <gos_queuePut+0x18c>)
 8016612:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016616:	fb01 f303 	mul.w	r3, r1, r3
 801661a:	4413      	add	r3, r2
 801661c:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 801661e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016622:	f000 8086 	beq.w	8016732 <gos_queuePut+0x176>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8016626:	89fb      	ldrh	r3, [r7, #14]
 8016628:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 801662a:	7dbb      	ldrb	r3, [r7, #22]
 801662c:	4a47      	ldr	r2, [pc, #284]	@ (801674c <gos_queuePut+0x190>)
 801662e:	5cd3      	ldrb	r3, [r2, r3]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d009      	beq.n	8016648 <gos_queuePut+0x8c>
 8016634:	7dbb      	ldrb	r3, [r7, #22]
 8016636:	4a46      	ldr	r2, [pc, #280]	@ (8016750 <gos_queuePut+0x194>)
 8016638:	5cd3      	ldrb	r3, [r2, r3]
 801663a:	4619      	mov	r1, r3
 801663c:	7dbb      	ldrb	r3, [r7, #22]
 801663e:	4a43      	ldr	r2, [pc, #268]	@ (801674c <gos_queuePut+0x190>)
 8016640:	5cd3      	ldrb	r3, [r2, r3]
 8016642:	3b01      	subs	r3, #1
 8016644:	4299      	cmp	r1, r3
 8016646:	d109      	bne.n	801665c <gos_queuePut+0xa0>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8016648:	7dbb      	ldrb	r3, [r7, #22]
 801664a:	4a40      	ldr	r2, [pc, #256]	@ (801674c <gos_queuePut+0x190>)
 801664c:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 801664e:	2b00      	cmp	r3, #0
 8016650:	d16f      	bne.n	8016732 <gos_queuePut+0x176>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8016652:	7dbb      	ldrb	r3, [r7, #22]
 8016654:	4a3e      	ldr	r2, [pc, #248]	@ (8016750 <gos_queuePut+0x194>)
 8016656:	5cd3      	ldrb	r3, [r2, r3]
 8016658:	2b27      	cmp	r3, #39	@ 0x27
 801665a:	d06a      	beq.n	8016732 <gos_queuePut+0x176>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 801665c:	7dbb      	ldrb	r3, [r7, #22]
 801665e:	7dba      	ldrb	r2, [r7, #22]
 8016660:	493b      	ldr	r1, [pc, #236]	@ (8016750 <gos_queuePut+0x194>)
 8016662:	5c8a      	ldrb	r2, [r1, r2]
 8016664:	4611      	mov	r1, r2
 8016666:	22c9      	movs	r2, #201	@ 0xc9
 8016668:	fb01 f202 	mul.w	r2, r1, r2
 801666c:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016670:	fb01 f303 	mul.w	r3, r1, r3
 8016674:	4413      	add	r3, r2
 8016676:	3318      	adds	r3, #24
 8016678:	4a33      	ldr	r2, [pc, #204]	@ (8016748 <gos_queuePut+0x18c>)
 801667a:	4413      	add	r3, r2
 801667c:	3302      	adds	r3, #2
            (void_t) memcpy(
 801667e:	7b7a      	ldrb	r2, [r7, #13]
 8016680:	68b9      	ldr	r1, [r7, #8]
 8016682:	4618      	mov	r0, r3
 8016684:	f002 fe91 	bl	80193aa <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 8016688:	7dbb      	ldrb	r3, [r7, #22]
 801668a:	7dba      	ldrb	r2, [r7, #22]
 801668c:	4930      	ldr	r1, [pc, #192]	@ (8016750 <gos_queuePut+0x194>)
 801668e:	5c8a      	ldrb	r2, [r1, r2]
 8016690:	4610      	mov	r0, r2
 8016692:	492d      	ldr	r1, [pc, #180]	@ (8016748 <gos_queuePut+0x18c>)
 8016694:	22c9      	movs	r2, #201	@ 0xc9
 8016696:	fb00 f202 	mul.w	r2, r0, r2
 801669a:	f641 7084 	movw	r0, #8068	@ 0x1f84
 801669e:	fb00 f303 	mul.w	r3, r0, r3
 80166a2:	4413      	add	r3, r2
 80166a4:	440b      	add	r3, r1
 80166a6:	33e2      	adds	r3, #226	@ 0xe2
 80166a8:	7b7a      	ldrb	r2, [r7, #13]
 80166aa:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 80166ac:	7dbb      	ldrb	r3, [r7, #22]
 80166ae:	4a28      	ldr	r2, [pc, #160]	@ (8016750 <gos_queuePut+0x194>)
 80166b0:	5cd2      	ldrb	r2, [r2, r3]
 80166b2:	3201      	adds	r2, #1
 80166b4:	b2d1      	uxtb	r1, r2
 80166b6:	4a26      	ldr	r2, [pc, #152]	@ (8016750 <gos_queuePut+0x194>)
 80166b8:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 80166ba:	7dba      	ldrb	r2, [r7, #22]
 80166bc:	4922      	ldr	r1, [pc, #136]	@ (8016748 <gos_queuePut+0x18c>)
 80166be:	f641 7384 	movw	r3, #8068	@ 0x1f84
 80166c2:	fb02 f303 	mul.w	r3, r2, r3
 80166c6:	440b      	add	r3, r1
 80166c8:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 80166cc:	3302      	adds	r3, #2
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	3301      	adds	r3, #1
 80166d2:	b2d8      	uxtb	r0, r3
 80166d4:	491c      	ldr	r1, [pc, #112]	@ (8016748 <gos_queuePut+0x18c>)
 80166d6:	f641 7384 	movw	r3, #8068	@ 0x1f84
 80166da:	fb02 f303 	mul.w	r3, r2, r3
 80166de:	440b      	add	r3, r1
 80166e0:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 80166e4:	3302      	adds	r3, #2
 80166e6:	4602      	mov	r2, r0
 80166e8:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 80166ea:	7dbb      	ldrb	r3, [r7, #22]
 80166ec:	4a18      	ldr	r2, [pc, #96]	@ (8016750 <gos_queuePut+0x194>)
 80166ee:	5cd3      	ldrb	r3, [r2, r3]
 80166f0:	2b27      	cmp	r3, #39	@ 0x27
 80166f2:	d903      	bls.n	80166fc <gos_queuePut+0x140>
            {
                writeCounters[queueIndex] = 0u;
 80166f4:	7dbb      	ldrb	r3, [r7, #22]
 80166f6:	4a16      	ldr	r2, [pc, #88]	@ (8016750 <gos_queuePut+0x194>)
 80166f8:	2100      	movs	r1, #0
 80166fa:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 80166fc:	7dbb      	ldrb	r3, [r7, #22]
 80166fe:	4a12      	ldr	r2, [pc, #72]	@ (8016748 <gos_queuePut+0x18c>)
 8016700:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016704:	fb01 f303 	mul.w	r3, r1, r3
 8016708:	4413      	add	r3, r2
 801670a:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 801670e:	3302      	adds	r3, #2
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	2b27      	cmp	r3, #39	@ 0x27
 8016714:	d10b      	bne.n	801672e <gos_queuePut+0x172>
                queueFullHook != NULL)
 8016716:	4b0f      	ldr	r3, [pc, #60]	@ (8016754 <gos_queuePut+0x198>)
 8016718:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 801671a:	2b00      	cmp	r3, #0
 801671c:	d007      	beq.n	801672e <gos_queuePut+0x172>
            {
                gos_mutexUnlock(&queueMutex);
 801671e:	4809      	ldr	r0, [pc, #36]	@ (8016744 <gos_queuePut+0x188>)
 8016720:	f7ff fe32 	bl	8016388 <gos_mutexUnlock>
                queueFullHook(queueId);
 8016724:	4b0b      	ldr	r3, [pc, #44]	@ (8016754 <gos_queuePut+0x198>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	89fa      	ldrh	r2, [r7, #14]
 801672a:	4610      	mov	r0, r2
 801672c:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 801672e:	2355      	movs	r3, #85	@ 0x55
 8016730:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8016732:	4804      	ldr	r0, [pc, #16]	@ (8016744 <gos_queuePut+0x188>)
 8016734:	f7ff fe28 	bl	8016388 <gos_mutexUnlock>

    return queuePutResult;
 8016738:	7dfb      	ldrb	r3, [r7, #23]
}
 801673a:	4618      	mov	r0, r3
 801673c:	3718      	adds	r7, #24
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	200085c8 	.word	0x200085c8
 8016748:	2000663c 	.word	0x2000663c
 801674c:	200085c0 	.word	0x200085c0
 8016750:	200085c4 	.word	0x200085c4
 8016754:	200085cc 	.word	0x200085cc

08016758 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 8016758:	b590      	push	{r4, r7, lr}
 801675a:	b087      	sub	sp, #28
 801675c:	af00      	add	r7, sp, #0
 801675e:	60b9      	str	r1, [r7, #8]
 8016760:	607b      	str	r3, [r7, #4]
 8016762:	4603      	mov	r3, r0
 8016764:	81fb      	strh	r3, [r7, #14]
 8016766:	4613      	mov	r3, r2
 8016768:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 801676a:	23ae      	movs	r3, #174	@ 0xae
 801676c:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 801676e:	2300      	movs	r3, #0
 8016770:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8016772:	6879      	ldr	r1, [r7, #4]
 8016774:	4864      	ldr	r0, [pc, #400]	@ (8016908 <gos_queueGet+0x1b0>)
 8016776:	f7ff fd01 	bl	801617c <gos_mutexLock>
 801677a:	4603      	mov	r3, r0
 801677c:	2b55      	cmp	r3, #85	@ 0x55
 801677e:	f040 80ba 	bne.w	80168f6 <gos_queueGet+0x19e>
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	2b00      	cmp	r3, #0
 8016786:	f000 80b6 	beq.w	80168f6 <gos_queueGet+0x19e>
        target                                           != NULL                 &&
 801678a:	89fb      	ldrh	r3, [r7, #14]
 801678c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016790:	f0c0 80b1 	bcc.w	80168f6 <gos_queueGet+0x19e>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8016794:	89fb      	ldrh	r3, [r7, #14]
 8016796:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801679a:	f200 80ac 	bhi.w	80168f6 <gos_queueGet+0x19e>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 801679e:	89fb      	ldrh	r3, [r7, #14]
 80167a0:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 80167a4:	4a59      	ldr	r2, [pc, #356]	@ (801690c <gos_queueGet+0x1b4>)
 80167a6:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80167aa:	fb01 f303 	mul.w	r3, r1, r3
 80167ae:	4413      	add	r3, r2
 80167b0:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 80167b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80167b6:	f000 809e 	beq.w	80168f6 <gos_queueGet+0x19e>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 80167ba:	89fb      	ldrh	r3, [r7, #14]
 80167bc:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 80167c0:	89fa      	ldrh	r2, [r7, #14]
 80167c2:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 80167c6:	4952      	ldr	r1, [pc, #328]	@ (8016910 <gos_queueGet+0x1b8>)
 80167c8:	5c8a      	ldrb	r2, [r1, r2]
 80167ca:	4610      	mov	r0, r2
 80167cc:	494f      	ldr	r1, [pc, #316]	@ (801690c <gos_queueGet+0x1b4>)
 80167ce:	22c9      	movs	r2, #201	@ 0xc9
 80167d0:	fb00 f202 	mul.w	r2, r0, r2
 80167d4:	f641 7084 	movw	r0, #8068	@ 0x1f84
 80167d8:	fb00 f303 	mul.w	r3, r0, r3
 80167dc:	4413      	add	r3, r2
 80167de:	440b      	add	r3, r1
 80167e0:	33e2      	adds	r3, #226	@ 0xe2
 80167e2:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 80167e4:	7b7a      	ldrb	r2, [r7, #13]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	f0c0 8085 	bcc.w	80168f6 <gos_queueGet+0x19e>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 80167ec:	89fb      	ldrh	r3, [r7, #14]
 80167ee:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 80167f0:	7dbb      	ldrb	r3, [r7, #22]
 80167f2:	4a47      	ldr	r2, [pc, #284]	@ (8016910 <gos_queueGet+0x1b8>)
 80167f4:	5cd2      	ldrb	r2, [r2, r3]
 80167f6:	7dbb      	ldrb	r3, [r7, #22]
 80167f8:	4946      	ldr	r1, [pc, #280]	@ (8016914 <gos_queueGet+0x1bc>)
 80167fa:	5ccb      	ldrb	r3, [r1, r3]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d07a      	beq.n	80168f6 <gos_queueGet+0x19e>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 8016800:	7dbb      	ldrb	r3, [r7, #22]
 8016802:	7dba      	ldrb	r2, [r7, #22]
 8016804:	4942      	ldr	r1, [pc, #264]	@ (8016910 <gos_queueGet+0x1b8>)
 8016806:	5c8a      	ldrb	r2, [r1, r2]
 8016808:	4611      	mov	r1, r2
 801680a:	22c9      	movs	r2, #201	@ 0xc9
 801680c:	fb01 f202 	mul.w	r2, r1, r2
 8016810:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016814:	fb01 f303 	mul.w	r3, r1, r3
 8016818:	4413      	add	r3, r2
 801681a:	3318      	adds	r3, #24
 801681c:	4a3b      	ldr	r2, [pc, #236]	@ (801690c <gos_queueGet+0x1b4>)
 801681e:	4413      	add	r3, r2
 8016820:	1c99      	adds	r1, r3, #2
 8016822:	7dbb      	ldrb	r3, [r7, #22]
 8016824:	7dba      	ldrb	r2, [r7, #22]
 8016826:	483a      	ldr	r0, [pc, #232]	@ (8016910 <gos_queueGet+0x1b8>)
 8016828:	5c82      	ldrb	r2, [r0, r2]
 801682a:	4614      	mov	r4, r2
 801682c:	4837      	ldr	r0, [pc, #220]	@ (801690c <gos_queueGet+0x1b4>)
 801682e:	22c9      	movs	r2, #201	@ 0xc9
 8016830:	fb04 f202 	mul.w	r2, r4, r2
 8016834:	f641 7484 	movw	r4, #8068	@ 0x1f84
 8016838:	fb04 f303 	mul.w	r3, r4, r3
 801683c:	4413      	add	r3, r2
 801683e:	4403      	add	r3, r0
 8016840:	33e2      	adds	r3, #226	@ 0xe2
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	461a      	mov	r2, r3
 8016846:	68b8      	ldr	r0, [r7, #8]
 8016848:	f002 fdaf 	bl	80193aa <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 801684c:	7dbb      	ldrb	r3, [r7, #22]
 801684e:	7dba      	ldrb	r2, [r7, #22]
 8016850:	492f      	ldr	r1, [pc, #188]	@ (8016910 <gos_queueGet+0x1b8>)
 8016852:	5c8a      	ldrb	r2, [r1, r2]
 8016854:	4610      	mov	r0, r2
 8016856:	492d      	ldr	r1, [pc, #180]	@ (801690c <gos_queueGet+0x1b4>)
 8016858:	22c9      	movs	r2, #201	@ 0xc9
 801685a:	fb00 f202 	mul.w	r2, r0, r2
 801685e:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8016862:	fb00 f303 	mul.w	r3, r0, r3
 8016866:	4413      	add	r3, r2
 8016868:	440b      	add	r3, r1
 801686a:	33e2      	adds	r3, #226	@ 0xe2
 801686c:	2200      	movs	r2, #0
 801686e:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 8016870:	7dbb      	ldrb	r3, [r7, #22]
 8016872:	4a27      	ldr	r2, [pc, #156]	@ (8016910 <gos_queueGet+0x1b8>)
 8016874:	5cd2      	ldrb	r2, [r2, r3]
 8016876:	3201      	adds	r2, #1
 8016878:	b2d1      	uxtb	r1, r2
 801687a:	4a25      	ldr	r2, [pc, #148]	@ (8016910 <gos_queueGet+0x1b8>)
 801687c:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 801687e:	7dba      	ldrb	r2, [r7, #22]
 8016880:	4922      	ldr	r1, [pc, #136]	@ (801690c <gos_queueGet+0x1b4>)
 8016882:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8016886:	fb02 f303 	mul.w	r3, r2, r3
 801688a:	440b      	add	r3, r1
 801688c:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8016890:	3302      	adds	r3, #2
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	3b01      	subs	r3, #1
 8016896:	b2d8      	uxtb	r0, r3
 8016898:	491c      	ldr	r1, [pc, #112]	@ (801690c <gos_queueGet+0x1b4>)
 801689a:	f641 7384 	movw	r3, #8068	@ 0x1f84
 801689e:	fb02 f303 	mul.w	r3, r2, r3
 80168a2:	440b      	add	r3, r1
 80168a4:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 80168a8:	3302      	adds	r3, #2
 80168aa:	4602      	mov	r2, r0
 80168ac:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 80168ae:	7dbb      	ldrb	r3, [r7, #22]
 80168b0:	4a17      	ldr	r2, [pc, #92]	@ (8016910 <gos_queueGet+0x1b8>)
 80168b2:	5cd3      	ldrb	r3, [r2, r3]
 80168b4:	2b27      	cmp	r3, #39	@ 0x27
 80168b6:	d903      	bls.n	80168c0 <gos_queueGet+0x168>
            {
                readCounters[queueIndex] = 0u;
 80168b8:	7dbb      	ldrb	r3, [r7, #22]
 80168ba:	4a15      	ldr	r2, [pc, #84]	@ (8016910 <gos_queueGet+0x1b8>)
 80168bc:	2100      	movs	r1, #0
 80168be:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 80168c0:	7dbb      	ldrb	r3, [r7, #22]
 80168c2:	4a12      	ldr	r2, [pc, #72]	@ (801690c <gos_queueGet+0x1b4>)
 80168c4:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80168c8:	fb01 f303 	mul.w	r3, r1, r3
 80168cc:	4413      	add	r3, r2
 80168ce:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 80168d2:	3302      	adds	r3, #2
 80168d4:	781b      	ldrb	r3, [r3, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d10b      	bne.n	80168f2 <gos_queueGet+0x19a>
                queueEmptyHook != NULL)
 80168da:	4b0f      	ldr	r3, [pc, #60]	@ (8016918 <gos_queueGet+0x1c0>)
 80168dc:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d007      	beq.n	80168f2 <gos_queueGet+0x19a>
            {
                gos_mutexUnlock(&queueMutex);
 80168e2:	4809      	ldr	r0, [pc, #36]	@ (8016908 <gos_queueGet+0x1b0>)
 80168e4:	f7ff fd50 	bl	8016388 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 80168e8:	4b0b      	ldr	r3, [pc, #44]	@ (8016918 <gos_queueGet+0x1c0>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	89fa      	ldrh	r2, [r7, #14]
 80168ee:	4610      	mov	r0, r2
 80168f0:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 80168f2:	2355      	movs	r3, #85	@ 0x55
 80168f4:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 80168f6:	4804      	ldr	r0, [pc, #16]	@ (8016908 <gos_queueGet+0x1b0>)
 80168f8:	f7ff fd46 	bl	8016388 <gos_mutexUnlock>

    return queueGetResult;
 80168fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80168fe:	4618      	mov	r0, r3
 8016900:	371c      	adds	r7, #28
 8016902:	46bd      	mov	sp, r7
 8016904:	bd90      	pop	{r4, r7, pc}
 8016906:	bf00      	nop
 8016908:	200085c8 	.word	0x200085c8
 801690c:	2000663c 	.word	0x2000663c
 8016910:	200085c0 	.word	0x200085c0
 8016914:	200085c4 	.word	0x200085c4
 8016918:	200085d0 	.word	0x200085d0

0801691c <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 801691c:	b590      	push	{r4, r7, lr}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 8016922:	2300      	movs	r3, #0
 8016924:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 8016926:	4826      	ldr	r0, [pc, #152]	@ (80169c0 <gos_queueDump+0xa4>)
 8016928:	f001 fe96 	bl	8018658 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 801692c:	4825      	ldr	r0, [pc, #148]	@ (80169c4 <gos_queueDump+0xa8>)
 801692e:	f001 fe93 	bl	8018658 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 8016932:	4b25      	ldr	r3, [pc, #148]	@ (80169c8 <gos_queueDump+0xac>)
 8016934:	4a25      	ldr	r2, [pc, #148]	@ (80169cc <gos_queueDump+0xb0>)
 8016936:	4926      	ldr	r1, [pc, #152]	@ (80169d0 <gos_queueDump+0xb4>)
 8016938:	4826      	ldr	r0, [pc, #152]	@ (80169d4 <gos_queueDump+0xb8>)
 801693a:	f001 fe8d 	bl	8018658 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 801693e:	4821      	ldr	r0, [pc, #132]	@ (80169c4 <gos_queueDump+0xa8>)
 8016940:	f001 fe8a 	bl	8018658 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8016944:	2300      	movs	r3, #0
 8016946:	71fb      	strb	r3, [r7, #7]
 8016948:	e02d      	b.n	80169a6 <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 801694a:	79fb      	ldrb	r3, [r7, #7]
 801694c:	4a22      	ldr	r2, [pc, #136]	@ (80169d8 <gos_queueDump+0xbc>)
 801694e:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016952:	fb01 f303 	mul.w	r3, r1, r3
 8016956:	4413      	add	r3, r2
 8016958:	881b      	ldrh	r3, [r3, #0]
 801695a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801695e:	d026      	beq.n	80169ae <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 8016960:	79fb      	ldrb	r3, [r7, #7]
 8016962:	4a1d      	ldr	r2, [pc, #116]	@ (80169d8 <gos_queueDump+0xbc>)
 8016964:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8016968:	fb01 f303 	mul.w	r3, r1, r3
 801696c:	4413      	add	r3, r2
 801696e:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8016970:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 8016972:	79fb      	ldrb	r3, [r7, #7]
 8016974:	f641 7284 	movw	r2, #8068	@ 0x1f84
 8016978:	fb02 f303 	mul.w	r3, r2, r3
 801697c:	4a16      	ldr	r2, [pc, #88]	@ (80169d8 <gos_queueDump+0xbc>)
 801697e:	4413      	add	r3, r2
 8016980:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 8016982:	79fb      	ldrb	r3, [r7, #7]
 8016984:	4914      	ldr	r1, [pc, #80]	@ (80169d8 <gos_queueDump+0xbc>)
 8016986:	f641 7084 	movw	r0, #8068	@ 0x1f84
 801698a:	fb00 f303 	mul.w	r3, r0, r3
 801698e:	440b      	add	r3, r1
 8016990:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8016994:	3302      	adds	r3, #2
 8016996:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8016998:	4621      	mov	r1, r4
 801699a:	4810      	ldr	r0, [pc, #64]	@ (80169dc <gos_queueDump+0xc0>)
 801699c:	f001 fe5c 	bl	8018658 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80169a0:	79fb      	ldrb	r3, [r7, #7]
 80169a2:	3301      	adds	r3, #1
 80169a4:	71fb      	strb	r3, [r7, #7]
 80169a6:	79fb      	ldrb	r3, [r7, #7]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d0ce      	beq.n	801694a <gos_queueDump+0x2e>
 80169ac:	e000      	b.n	80169b0 <gos_queueDump+0x94>
            break;
 80169ae:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 80169b0:	480b      	ldr	r0, [pc, #44]	@ (80169e0 <gos_queueDump+0xc4>)
 80169b2:	f001 fe51 	bl	8018658 <gos_shellDriverTransmitString>
}
 80169b6:	bf00      	nop
 80169b8:	370c      	adds	r7, #12
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd90      	pop	{r4, r7, pc}
 80169be:	bf00      	nop
 80169c0:	0801c944 	.word	0x0801c944
 80169c4:	0801c954 	.word	0x0801c954
 80169c8:	0801c990 	.word	0x0801c990
 80169cc:	0801c99c 	.word	0x0801c99c
 80169d0:	0801c9a4 	.word	0x0801c9a4
 80169d4:	0801c9a8 	.word	0x0801c9a8
 80169d8:	2000663c 	.word	0x2000663c
 80169dc:	0801c9c0 	.word	0x0801c9c0
 80169e0:	0801c9dc 	.word	0x0801c9dc

080169e4 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 80169ea:	23ae      	movs	r3, #174	@ 0xae
 80169ec:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 80169ee:	4b06      	ldr	r3, [pc, #24]	@ (8016a08 <gos_shellResume+0x24>)
 80169f0:	881b      	ldrh	r3, [r3, #0]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7fd fa74 	bl	8013ee0 <gos_taskResume>
 80169f8:	4603      	mov	r3, r0
 80169fa:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 80169fc:	79fb      	ldrb	r3, [r7, #7]
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	3708      	adds	r7, #8
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	200085d4 	.word	0x200085d4

08016a0c <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 8016a12:	2355      	movs	r3, #85	@ 0x55
 8016a14:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 8016a16:	2300      	movs	r3, #0
 8016a18:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	71bb      	strb	r3, [r7, #6]
 8016a1e:	e00a      	b.n	8016a36 <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 8016a20:	79bb      	ldrb	r3, [r7, #6]
 8016a22:	4a16      	ldr	r2, [pc, #88]	@ (8016a7c <gos_signalInit+0x70>)
 8016a24:	212c      	movs	r1, #44	@ 0x2c
 8016a26:	fb01 f303 	mul.w	r3, r1, r3
 8016a2a:	4413      	add	r3, r2
 8016a2c:	2249      	movs	r2, #73	@ 0x49
 8016a2e:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8016a30:	79bb      	ldrb	r3, [r7, #6]
 8016a32:	3301      	adds	r3, #1
 8016a34:	71bb      	strb	r3, [r7, #6]
 8016a36:	79bb      	ldrb	r3, [r7, #6]
 8016a38:	2b02      	cmp	r3, #2
 8016a3a:	d9f1      	bls.n	8016a20 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 8016a3c:	2100      	movs	r1, #0
 8016a3e:	4810      	ldr	r0, [pc, #64]	@ (8016a80 <gos_signalInit+0x74>)
 8016a40:	f7fc fe42 	bl	80136c8 <gos_taskRegister>
 8016a44:	4603      	mov	r3, r0
 8016a46:	2b55      	cmp	r3, #85	@ 0x55
 8016a48:	d111      	bne.n	8016a6e <gos_signalInit+0x62>
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 8016a4a:	480e      	ldr	r0, [pc, #56]	@ (8016a84 <gos_signalInit+0x78>)
 8016a4c:	f000 f820 	bl	8016a90 <gos_signalCreate>
 8016a50:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 8016a52:	2b55      	cmp	r3, #85	@ 0x55
 8016a54:	d10b      	bne.n	8016a6e <gos_signalInit+0x62>
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 8016a56:	480c      	ldr	r0, [pc, #48]	@ (8016a88 <gos_signalInit+0x7c>)
 8016a58:	f000 f81a 	bl	8016a90 <gos_signalCreate>
 8016a5c:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 8016a5e:	2b55      	cmp	r3, #85	@ 0x55
 8016a60:	d105      	bne.n	8016a6e <gos_signalInit+0x62>
        gos_triggerInit(&signalInvokeTrigger)               != GOS_SUCCESS
 8016a62:	480a      	ldr	r0, [pc, #40]	@ (8016a8c <gos_signalInit+0x80>)
 8016a64:	f001 fc0c 	bl	8018280 <gos_triggerInit>
 8016a68:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 8016a6a:	2b55      	cmp	r3, #85	@ 0x55
 8016a6c:	d001      	beq.n	8016a72 <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_ERROR;
 8016a6e:	23ae      	movs	r3, #174	@ 0xae
 8016a70:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 8016a72:	79fb      	ldrb	r3, [r7, #7]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}
 8016a7c:	200085d8 	.word	0x200085d8
 8016a80:	20001194 	.word	0x20001194
 8016a84:	200061e8 	.word	0x200061e8
 8016a88:	200061b8 	.word	0x200061b8
 8016a8c:	2000865c 	.word	0x2000865c

08016a90 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 8016a90:	b480      	push	{r7}
 8016a92:	b085      	sub	sp, #20
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 8016a98:	23ae      	movs	r3, #174	@ 0xae
 8016a9a:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	73bb      	strb	r3, [r7, #14]
 8016aa4:	e025      	b.n	8016af2 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 8016aa6:	7bbb      	ldrb	r3, [r7, #14]
 8016aa8:	4a17      	ldr	r2, [pc, #92]	@ (8016b08 <gos_signalCreate+0x78>)
 8016aaa:	212c      	movs	r1, #44	@ 0x2c
 8016aac:	fb01 f303 	mul.w	r3, r1, r3
 8016ab0:	4413      	add	r3, r2
 8016ab2:	781b      	ldrb	r3, [r3, #0]
 8016ab4:	2b49      	cmp	r3, #73	@ 0x49
 8016ab6:	d119      	bne.n	8016aec <gos_signalCreate+0x5c>
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d016      	beq.n	8016aec <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	7bba      	ldrb	r2, [r7, #14]
 8016ac2:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 8016ac4:	7bbb      	ldrb	r3, [r7, #14]
 8016ac6:	4a10      	ldr	r2, [pc, #64]	@ (8016b08 <gos_signalCreate+0x78>)
 8016ac8:	212c      	movs	r1, #44	@ 0x2c
 8016aca:	fb01 f303 	mul.w	r3, r1, r3
 8016ace:	4413      	add	r3, r2
 8016ad0:	2236      	movs	r2, #54	@ 0x36
 8016ad2:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8016ad4:	7bbb      	ldrb	r3, [r7, #14]
 8016ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8016b08 <gos_signalCreate+0x78>)
 8016ad8:	212c      	movs	r1, #44	@ 0x2c
 8016ada:	fb01 f303 	mul.w	r3, r1, r3
 8016ade:	4413      	add	r3, r2
 8016ae0:	3328      	adds	r3, #40	@ 0x28
 8016ae2:	2249      	movs	r2, #73	@ 0x49
 8016ae4:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 8016ae6:	2355      	movs	r3, #85	@ 0x55
 8016ae8:	73fb      	strb	r3, [r7, #15]
            break;
 8016aea:	e005      	b.n	8016af8 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8016aec:	7bbb      	ldrb	r3, [r7, #14]
 8016aee:	3301      	adds	r3, #1
 8016af0:	73bb      	strb	r3, [r7, #14]
 8016af2:	7bbb      	ldrb	r3, [r7, #14]
 8016af4:	2b02      	cmp	r3, #2
 8016af6:	d9d6      	bls.n	8016aa6 <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 8016af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3714      	adds	r7, #20
 8016afe:	46bd      	mov	sp, r7
 8016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	200085d8 	.word	0x200085d8

08016b0c <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b0a0      	sub	sp, #128	@ 0x80
 8016b10:	af02      	add	r7, sp, #8
 8016b12:	4603      	mov	r3, r0
 8016b14:	460a      	mov	r2, r1
 8016b16:	71fb      	strb	r3, [r7, #7]
 8016b18:	4613      	mov	r3, r2
 8016b1a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 8016b1c:	23ae      	movs	r3, #174	@ 0xae
 8016b1e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 8016b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b26:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    gos_taskDescriptor_t callerTaskDesc     = {0};
 8016b2a:	f107 0308 	add.w	r3, r7, #8
 8016b2e:	226a      	movs	r2, #106	@ 0x6a
 8016b30:	2100      	movs	r1, #0
 8016b32:	4618      	mov	r0, r3
 8016b34:	f002 fba2 	bl	801927c <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	2b02      	cmp	r3, #2
 8016b3c:	d849      	bhi.n	8016bd2 <gos_signalInvoke+0xc6>
 8016b3e:	79fb      	ldrb	r3, [r7, #7]
 8016b40:	4a27      	ldr	r2, [pc, #156]	@ (8016be0 <gos_signalInvoke+0xd4>)
 8016b42:	212c      	movs	r1, #44	@ 0x2c
 8016b44:	fb01 f303 	mul.w	r3, r1, r3
 8016b48:	4413      	add	r3, r2
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	2b36      	cmp	r3, #54	@ 0x36
 8016b4e:	d140      	bne.n	8016bd2 <gos_signalInvoke+0xc6>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8016b50:	f7fc fa9a 	bl	8013088 <gos_kernelIsCallerIsr>
 8016b54:	4603      	mov	r3, r0
 8016b56:	2b36      	cmp	r3, #54	@ 0x36
 8016b58:	d017      	beq.n	8016b8a <gos_signalInvoke+0x7e>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 8016b5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7fe f958 	bl	8014e14 <gos_taskGetCurrentId>
 8016b64:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8016b66:	2b55      	cmp	r3, #85	@ 0x55
 8016b68:	d128      	bne.n	8016bbc <gos_signalInvoke+0xb0>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 8016b6a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8016b6e:	f107 0208 	add.w	r2, r7, #8
 8016b72:	4611      	mov	r1, r2
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7fe f9a9 	bl	8014ecc <gos_taskGetData>
 8016b7a:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 8016b7c:	2b55      	cmp	r3, #85	@ 0x55
 8016b7e:	d11d      	bne.n	8016bbc <gos_signalInvoke+0xb0>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 8016b80:	8a3b      	ldrh	r3, [r7, #16]
 8016b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d018      	beq.n	8016bbc <gos_signalInvoke+0xb0>
            )
        {
            signalArray[signalId].senderId       = senderId;
 8016b8a:	79fb      	ldrb	r3, [r7, #7]
 8016b8c:	4a14      	ldr	r2, [pc, #80]	@ (8016be0 <gos_signalInvoke+0xd4>)
 8016b8e:	212c      	movs	r1, #44	@ 0x2c
 8016b90:	fb01 f303 	mul.w	r3, r1, r3
 8016b94:	4413      	add	r3, r2
 8016b96:	332a      	adds	r3, #42	@ 0x2a
 8016b98:	88ba      	ldrh	r2, [r7, #4]
 8016b9a:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 8016b9c:	79fb      	ldrb	r3, [r7, #7]
 8016b9e:	4a10      	ldr	r2, [pc, #64]	@ (8016be0 <gos_signalInvoke+0xd4>)
 8016ba0:	212c      	movs	r1, #44	@ 0x2c
 8016ba2:	fb01 f303 	mul.w	r3, r1, r3
 8016ba6:	4413      	add	r3, r2
 8016ba8:	3328      	adds	r3, #40	@ 0x28
 8016baa:	2236      	movs	r2, #54	@ 0x36
 8016bac:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 8016bae:	2355      	movs	r3, #85	@ 0x55
 8016bb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 8016bb4:	480b      	ldr	r0, [pc, #44]	@ (8016be4 <gos_signalInvoke+0xd8>)
 8016bb6:	f001 fc87 	bl	80184c8 <gos_triggerIncrement>
 8016bba:	e00a      	b.n	8016bd2 <gos_signalInvoke+0xc6>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 8016bbc:	f107 0308 	add.w	r3, r7, #8
 8016bc0:	330a      	adds	r3, #10
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	4b08      	ldr	r3, [pc, #32]	@ (8016be8 <gos_signalInvoke+0xdc>)
 8016bc6:	f240 1213 	movw	r2, #275	@ 0x113
 8016bca:	4908      	ldr	r1, [pc, #32]	@ (8016bec <gos_signalInvoke+0xe0>)
 8016bcc:	202e      	movs	r0, #46	@ 0x2e
 8016bce:	f7fe fc03 	bl	80153d8 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 8016bd2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3778      	adds	r7, #120	@ 0x78
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}
 8016bde:	bf00      	nop
 8016be0:	200085d8 	.word	0x200085d8
 8016be4:	2000865c 	.word	0x2000865c
 8016be8:	0801ca1c 	.word	0x0801ca1c
 8016bec:	0801cfbc 	.word	0x0801cfbc

08016bf0 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 8016bf0:	b590      	push	{r4, r7, lr}
 8016bf2:	b083      	sub	sp, #12
 8016bf4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8016bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8016c02:	2101      	movs	r1, #1
 8016c04:	4835      	ldr	r0, [pc, #212]	@ (8016cdc <gos_signalDaemonTask+0xec>)
 8016c06:	f001 fbaf 	bl	8018368 <gos_triggerWait>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b55      	cmp	r3, #85	@ 0x55
 8016c0e:	d1f6      	bne.n	8016bfe <gos_signalDaemonTask+0xe>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 8016c10:	4832      	ldr	r0, [pc, #200]	@ (8016cdc <gos_signalDaemonTask+0xec>)
 8016c12:	f001 fb51 	bl	80182b8 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8016c16:	2300      	movs	r3, #0
 8016c18:	71bb      	strb	r3, [r7, #6]
 8016c1a:	e05b      	b.n	8016cd4 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 8016c1c:	79bb      	ldrb	r3, [r7, #6]
 8016c1e:	4a30      	ldr	r2, [pc, #192]	@ (8016ce0 <gos_signalDaemonTask+0xf0>)
 8016c20:	212c      	movs	r1, #44	@ 0x2c
 8016c22:	fb01 f303 	mul.w	r3, r1, r3
 8016c26:	4413      	add	r3, r2
 8016c28:	3328      	adds	r3, #40	@ 0x28
 8016c2a:	781b      	ldrb	r3, [r3, #0]
 8016c2c:	2b36      	cmp	r3, #54	@ 0x36
 8016c2e:	d14e      	bne.n	8016cce <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8016c30:	2300      	movs	r3, #0
 8016c32:	71fb      	strb	r3, [r7, #7]
 8016c34:	e03d      	b.n	8016cb2 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 8016c36:	79ba      	ldrb	r2, [r7, #6]
 8016c38:	79f9      	ldrb	r1, [r7, #7]
 8016c3a:	4829      	ldr	r0, [pc, #164]	@ (8016ce0 <gos_signalDaemonTask+0xf0>)
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	009b      	lsls	r3, r3, #2
 8016c40:	4413      	add	r3, r2
 8016c42:	005b      	lsls	r3, r3, #1
 8016c44:	4413      	add	r3, r2
 8016c46:	440b      	add	r3, r1
 8016c48:	009b      	lsls	r3, r3, #2
 8016c4a:	4403      	add	r3, r0
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d033      	beq.n	8016cba <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 8016c52:	4b24      	ldr	r3, [pc, #144]	@ (8016ce4 <gos_signalDaemonTask+0xf4>)
 8016c54:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 8016c56:	79ba      	ldrb	r2, [r7, #6]
 8016c58:	79fb      	ldrb	r3, [r7, #7]
 8016c5a:	4921      	ldr	r1, [pc, #132]	@ (8016ce0 <gos_signalDaemonTask+0xf0>)
 8016c5c:	2416      	movs	r4, #22
 8016c5e:	fb04 f202 	mul.w	r2, r4, r2
 8016c62:	4413      	add	r3, r2
 8016c64:	330c      	adds	r3, #12
 8016c66:	005b      	lsls	r3, r3, #1
 8016c68:	440b      	add	r3, r1
 8016c6a:	889b      	ldrh	r3, [r3, #4]
 8016c6c:	4619      	mov	r1, r3
 8016c6e:	f7fd fff3 	bl	8014c58 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 8016c72:	79ba      	ldrb	r2, [r7, #6]
 8016c74:	79f9      	ldrb	r1, [r7, #7]
 8016c76:	481a      	ldr	r0, [pc, #104]	@ (8016ce0 <gos_signalDaemonTask+0xf0>)
 8016c78:	4613      	mov	r3, r2
 8016c7a:	009b      	lsls	r3, r3, #2
 8016c7c:	4413      	add	r3, r2
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	440b      	add	r3, r1
 8016c84:	009b      	lsls	r3, r3, #2
 8016c86:	4403      	add	r3, r0
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	79ba      	ldrb	r2, [r7, #6]
 8016c8c:	4914      	ldr	r1, [pc, #80]	@ (8016ce0 <gos_signalDaemonTask+0xf0>)
 8016c8e:	202c      	movs	r0, #44	@ 0x2c
 8016c90:	fb00 f202 	mul.w	r2, r0, r2
 8016c94:	440a      	add	r2, r1
 8016c96:	322a      	adds	r2, #42	@ 0x2a
 8016c98:	8812      	ldrh	r2, [r2, #0]
 8016c9a:	4610      	mov	r0, r2
 8016c9c:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 8016c9e:	4b11      	ldr	r3, [pc, #68]	@ (8016ce4 <gos_signalDaemonTask+0xf4>)
 8016ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ca2:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7fd ffd6 	bl	8014c58 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8016cac:	79fb      	ldrb	r3, [r7, #7]
 8016cae:	3301      	adds	r3, #1
 8016cb0:	71fb      	strb	r3, [r7, #7]
 8016cb2:	79fb      	ldrb	r3, [r7, #7]
 8016cb4:	2b05      	cmp	r3, #5
 8016cb6:	d9be      	bls.n	8016c36 <gos_signalDaemonTask+0x46>
 8016cb8:	e000      	b.n	8016cbc <gos_signalDaemonTask+0xcc>
                            break;
 8016cba:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8016cbc:	79bb      	ldrb	r3, [r7, #6]
 8016cbe:	4a08      	ldr	r2, [pc, #32]	@ (8016ce0 <gos_signalDaemonTask+0xf0>)
 8016cc0:	212c      	movs	r1, #44	@ 0x2c
 8016cc2:	fb01 f303 	mul.w	r3, r1, r3
 8016cc6:	4413      	add	r3, r2
 8016cc8:	3328      	adds	r3, #40	@ 0x28
 8016cca:	2249      	movs	r2, #73	@ 0x49
 8016ccc:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8016cce:	79bb      	ldrb	r3, [r7, #6]
 8016cd0:	3301      	adds	r3, #1
 8016cd2:	71bb      	strb	r3, [r7, #6]
 8016cd4:	79bb      	ldrb	r3, [r7, #6]
 8016cd6:	2b02      	cmp	r3, #2
 8016cd8:	d9a0      	bls.n	8016c1c <gos_signalDaemonTask+0x2c>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8016cda:	e790      	b.n	8016bfe <gos_signalDaemonTask+0xe>
 8016cdc:	2000865c 	.word	0x2000865c
 8016ce0:	200085d8 	.word	0x200085d8
 8016ce4:	20001194 	.word	0x20001194

08016ce8 <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 8016cee:	23ae      	movs	r3, #174	@ 0xae
 8016cf0:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	71bb      	strb	r3, [r7, #6]
 8016cfa:	e024      	b.n	8016d46 <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 8016cfc:	79bb      	ldrb	r3, [r7, #6]
 8016cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8016d78 <gos_sysmonInit+0x90>)
 8016d00:	011b      	lsls	r3, r3, #4
 8016d02:	4413      	add	r3, r2
 8016d04:	330c      	adds	r3, #12
 8016d06:	2200      	movs	r2, #0
 8016d08:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 8016d0a:	79bb      	ldrb	r3, [r7, #6]
 8016d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8016d78 <gos_sysmonInit+0x90>)
 8016d0e:	011b      	lsls	r3, r3, #4
 8016d10:	4413      	add	r3, r2
 8016d12:	3304      	adds	r3, #4
 8016d14:	2200      	movs	r2, #0
 8016d16:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 8016d18:	79bb      	ldrb	r3, [r7, #6]
 8016d1a:	4a17      	ldr	r2, [pc, #92]	@ (8016d78 <gos_sysmonInit+0x90>)
 8016d1c:	011b      	lsls	r3, r3, #4
 8016d1e:	4413      	add	r3, r2
 8016d20:	3308      	adds	r3, #8
 8016d22:	2200      	movs	r2, #0
 8016d24:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 8016d26:	79bb      	ldrb	r3, [r7, #6]
 8016d28:	4a13      	ldr	r2, [pc, #76]	@ (8016d78 <gos_sysmonInit+0x90>)
 8016d2a:	011b      	lsls	r3, r3, #4
 8016d2c:	4413      	add	r3, r2
 8016d2e:	3302      	adds	r3, #2
 8016d30:	2200      	movs	r2, #0
 8016d32:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 8016d34:	79bb      	ldrb	r3, [r7, #6]
 8016d36:	4a10      	ldr	r2, [pc, #64]	@ (8016d78 <gos_sysmonInit+0x90>)
 8016d38:	011b      	lsls	r3, r3, #4
 8016d3a:	4413      	add	r3, r2
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8016d40:	79bb      	ldrb	r3, [r7, #6]
 8016d42:	3301      	adds	r3, #1
 8016d44:	71bb      	strb	r3, [r7, #6]
 8016d46:	79bb      	ldrb	r3, [r7, #6]
 8016d48:	2b17      	cmp	r3, #23
 8016d4a:	d9d7      	bls.n	8016cfc <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 8016d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8016d7c <gos_sysmonInit+0x94>)
 8016d4e:	490c      	ldr	r1, [pc, #48]	@ (8016d80 <gos_sysmonInit+0x98>)
 8016d50:	2000      	movs	r0, #0
 8016d52:	f7fe fc45 	bl	80155e0 <gos_gcpRegisterPhysicalDriver>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b55      	cmp	r3, #85	@ 0x55
 8016d5a:	d108      	bne.n	8016d6e <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	4809      	ldr	r0, [pc, #36]	@ (8016d84 <gos_sysmonInit+0x9c>)
 8016d60:	f7fc fcb2 	bl	80136c8 <gos_taskRegister>
 8016d64:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 8016d66:	2b55      	cmp	r3, #85	@ 0x55
 8016d68:	d101      	bne.n	8016d6e <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 8016d6a:	2355      	movs	r3, #85	@ 0x55
 8016d6c:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 8016d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3708      	adds	r7, #8
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	20009760 	.word	0x20009760
 8016d7c:	080186a1 	.word	0x080186a1
 8016d80:	080186d9 	.word	0x080186d9
 8016d84:	20001200 	.word	0x20001200

08016d88 <gos_sysmonRegisterUserMessage>:

/*
 * Function: gos_sysmonRegisterUserMessage
 */
gos_result_t gos_sysmonRegisterUserMessage (gos_sysmonUserMessageDescriptor_t* pDesc)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b084      	sub	sp, #16
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 8016d90:	23ae      	movs	r3, #174	@ 0xae
 8016d92:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 8016d94:	2300      	movs	r3, #0
 8016d96:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d027      	beq.n	8016dee <gos_sysmonRegisterUserMessage+0x66>
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	68db      	ldr	r3, [r3, #12]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d023      	beq.n	8016dee <gos_sysmonRegisterUserMessage+0x66>
    {
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8016da6:	2300      	movs	r3, #0
 8016da8:	73bb      	strb	r3, [r7, #14]
 8016daa:	e01d      	b.n	8016de8 <gos_sysmonRegisterUserMessage+0x60>
        {
            if (userMessages[userMessageIndex].messageId == 0u &&
 8016dac:	7bbb      	ldrb	r3, [r7, #14]
 8016dae:	4a12      	ldr	r2, [pc, #72]	@ (8016df8 <gos_sysmonRegisterUserMessage+0x70>)
 8016db0:	011b      	lsls	r3, r3, #4
 8016db2:	4413      	add	r3, r2
 8016db4:	881b      	ldrh	r3, [r3, #0]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d113      	bne.n	8016de2 <gos_sysmonRegisterUserMessage+0x5a>
                userMessages[userMessageIndex].callback == NULL)
 8016dba:	7bbb      	ldrb	r3, [r7, #14]
 8016dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8016df8 <gos_sysmonRegisterUserMessage+0x70>)
 8016dbe:	011b      	lsls	r3, r3, #4
 8016dc0:	4413      	add	r3, r2
 8016dc2:	330c      	adds	r3, #12
 8016dc4:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == 0u &&
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d10b      	bne.n	8016de2 <gos_sysmonRegisterUserMessage+0x5a>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 8016dca:	7bbb      	ldrb	r3, [r7, #14]
 8016dcc:	011b      	lsls	r3, r3, #4
 8016dce:	4a0a      	ldr	r2, [pc, #40]	@ (8016df8 <gos_sysmonRegisterUserMessage+0x70>)
 8016dd0:	4413      	add	r3, r2
 8016dd2:	2210      	movs	r2, #16
 8016dd4:	6879      	ldr	r1, [r7, #4]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f002 fae7 	bl	80193aa <memcpy>
                registerResult = GOS_SUCCESS;
 8016ddc:	2355      	movs	r3, #85	@ 0x55
 8016dde:	73fb      	strb	r3, [r7, #15]
                break;
 8016de0:	e005      	b.n	8016dee <gos_sysmonRegisterUserMessage+0x66>
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8016de2:	7bbb      	ldrb	r3, [r7, #14]
 8016de4:	3301      	adds	r3, #1
 8016de6:	73bb      	strb	r3, [r7, #14]
 8016de8:	7bbb      	ldrb	r3, [r7, #14]
 8016dea:	2b17      	cmp	r3, #23
 8016dec:	d9de      	bls.n	8016dac <gos_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 8016dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8016df0:	4618      	mov	r0, r3
 8016df2:	3710      	adds	r7, #16
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}
 8016df8:	20009760 	.word	0x20009760

08016dfc <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b084      	sub	sp, #16
 8016e00:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 8016e02:	2300      	movs	r3, #0
 8016e04:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 8016e06:	2300      	movs	r3, #0
 8016e08:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 8016e12:	1d39      	adds	r1, r7, #4
 8016e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e18:	9300      	str	r3, [sp, #0]
 8016e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016e1e:	4a33      	ldr	r2, [pc, #204]	@ (8016eec <gos_sysmonDaemonTask+0xf0>)
 8016e20:	2000      	movs	r0, #0
 8016e22:	f7fe fd37 	bl	8015894 <gos_gcpReceiveMessage>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b55      	cmp	r3, #85	@ 0x55
 8016e2a:	d15a      	bne.n	8016ee2 <gos_sysmonDaemonTask+0xe6>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 8016e2c:	88bb      	ldrh	r3, [r7, #4]
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f000 f862 	bl	8016ef8 <gos_sysmonGetLutIndex>
 8016e34:	4603      	mov	r3, r0
 8016e36:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8016e38:	79bb      	ldrb	r3, [r7, #6]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d002      	beq.n	8016e44 <gos_sysmonDaemonTask+0x48>
 8016e3e:	79bb      	ldrb	r3, [r7, #6]
 8016e40:	2b10      	cmp	r3, #16
 8016e42:	d138      	bne.n	8016eb6 <gos_sysmonDaemonTask+0xba>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8016e44:	2300      	movs	r3, #0
 8016e46:	71fb      	strb	r3, [r7, #7]
 8016e48:	e031      	b.n	8016eae <gos_sysmonDaemonTask+0xb2>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 8016e4a:	79fb      	ldrb	r3, [r7, #7]
 8016e4c:	4a28      	ldr	r2, [pc, #160]	@ (8016ef0 <gos_sysmonDaemonTask+0xf4>)
 8016e4e:	011b      	lsls	r3, r3, #4
 8016e50:	4413      	add	r3, r2
 8016e52:	881a      	ldrh	r2, [r3, #0]
 8016e54:	88bb      	ldrh	r3, [r7, #4]
 8016e56:	429a      	cmp	r2, r3
 8016e58:	d126      	bne.n	8016ea8 <gos_sysmonDaemonTask+0xac>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 8016e5a:	79fb      	ldrb	r3, [r7, #7]
 8016e5c:	4a24      	ldr	r2, [pc, #144]	@ (8016ef0 <gos_sysmonDaemonTask+0xf4>)
 8016e5e:	011b      	lsls	r3, r3, #4
 8016e60:	4413      	add	r3, r2
 8016e62:	3304      	adds	r3, #4
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00f      	beq.n	8016e8a <gos_sysmonDaemonTask+0x8e>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 8016e6a:	79fb      	ldrb	r3, [r7, #7]
 8016e6c:	4a20      	ldr	r2, [pc, #128]	@ (8016ef0 <gos_sysmonDaemonTask+0xf4>)
 8016e6e:	011b      	lsls	r3, r3, #4
 8016e70:	4413      	add	r3, r2
 8016e72:	3304      	adds	r3, #4
 8016e74:	6818      	ldr	r0, [r3, #0]
 8016e76:	79fb      	ldrb	r3, [r7, #7]
 8016e78:	4a1d      	ldr	r2, [pc, #116]	@ (8016ef0 <gos_sysmonDaemonTask+0xf4>)
 8016e7a:	011b      	lsls	r3, r3, #4
 8016e7c:	4413      	add	r3, r2
 8016e7e:	3308      	adds	r3, #8
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	461a      	mov	r2, r3
 8016e84:	4919      	ldr	r1, [pc, #100]	@ (8016eec <gos_sysmonDaemonTask+0xf0>)
 8016e86:	f002 fa90 	bl	80193aa <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 8016e8a:	79fb      	ldrb	r3, [r7, #7]
 8016e8c:	4a18      	ldr	r2, [pc, #96]	@ (8016ef0 <gos_sysmonDaemonTask+0xf4>)
 8016e8e:	011b      	lsls	r3, r3, #4
 8016e90:	4413      	add	r3, r2
 8016e92:	330c      	adds	r3, #12
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d006      	beq.n	8016ea8 <gos_sysmonDaemonTask+0xac>
                        {
                        	userMessages[userMessageIndex].callback();
 8016e9a:	79fb      	ldrb	r3, [r7, #7]
 8016e9c:	4a14      	ldr	r2, [pc, #80]	@ (8016ef0 <gos_sysmonDaemonTask+0xf4>)
 8016e9e:	011b      	lsls	r3, r3, #4
 8016ea0:	4413      	add	r3, r2
 8016ea2:	330c      	adds	r3, #12
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8016ea8:	79fb      	ldrb	r3, [r7, #7]
 8016eaa:	3301      	adds	r3, #1
 8016eac:	71fb      	strb	r3, [r7, #7]
 8016eae:	79fb      	ldrb	r3, [r7, #7]
 8016eb0:	2b17      	cmp	r3, #23
 8016eb2:	d9ca      	bls.n	8016e4a <gos_sysmonDaemonTask+0x4e>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8016eb4:	e018      	b.n	8016ee8 <gos_sysmonDaemonTask+0xec>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 8016eb6:	79bb      	ldrb	r3, [r7, #6]
 8016eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8016ef4 <gos_sysmonDaemonTask+0xf8>)
 8016eba:	011b      	lsls	r3, r3, #4
 8016ebc:	4413      	add	r3, r2
 8016ebe:	330c      	adds	r3, #12
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d009      	beq.n	8016eda <gos_sysmonDaemonTask+0xde>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 8016ec6:	79bb      	ldrb	r3, [r7, #6]
 8016ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8016ef4 <gos_sysmonDaemonTask+0xf8>)
 8016eca:	011b      	lsls	r3, r3, #4
 8016ecc:	4413      	add	r3, r2
 8016ece:	330c      	adds	r3, #12
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	79ba      	ldrb	r2, [r7, #6]
 8016ed4:	4610      	mov	r0, r2
 8016ed6:	4798      	blx	r3
 8016ed8:	e799      	b.n	8016e0e <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 8016eda:	2000      	movs	r0, #0
 8016edc:	f000 f830 	bl	8016f40 <gos_sysmonSendResponse>
 8016ee0:	e795      	b.n	8016e0e <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 8016ee2:	200a      	movs	r0, #10
 8016ee4:	f7fc fd82 	bl	80139ec <gos_taskSleep>
        messageId = 0u;
 8016ee8:	e791      	b.n	8016e0e <gos_sysmonDaemonTask+0x12>
 8016eea:	bf00      	nop
 8016eec:	20008668 	.word	0x20008668
 8016ef0:	20009760 	.word	0x20009760
 8016ef4:	0801cfd0 	.word	0x0801cfd0

08016ef8 <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b085      	sub	sp, #20
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	4603      	mov	r3, r0
 8016f00:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 8016f02:	2300      	movs	r3, #0
 8016f04:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8016f06:	2300      	movs	r3, #0
 8016f08:	73fb      	strb	r3, [r7, #15]
 8016f0a:	e00a      	b.n	8016f22 <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 8016f0c:	7bfb      	ldrb	r3, [r7, #15]
 8016f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8016f3c <gos_sysmonGetLutIndex+0x44>)
 8016f10:	011b      	lsls	r3, r3, #4
 8016f12:	4413      	add	r3, r2
 8016f14:	881b      	ldrh	r3, [r3, #0]
 8016f16:	88fa      	ldrh	r2, [r7, #6]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d006      	beq.n	8016f2a <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8016f1c:	7bfb      	ldrb	r3, [r7, #15]
 8016f1e:	3301      	adds	r3, #1
 8016f20:	73fb      	strb	r3, [r7, #15]
 8016f22:	7bfb      	ldrb	r3, [r7, #15]
 8016f24:	2b0f      	cmp	r3, #15
 8016f26:	d9f1      	bls.n	8016f0c <gos_sysmonGetLutIndex+0x14>
 8016f28:	e000      	b.n	8016f2c <gos_sysmonGetLutIndex+0x34>
        {
            break;
 8016f2a:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 8016f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3714      	adds	r7, #20
 8016f32:	46bd      	mov	sp, r7
 8016f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f38:	4770      	bx	lr
 8016f3a:	bf00      	nop
 8016f3c:	0801cfd0 	.word	0x0801cfd0

08016f40 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af02      	add	r7, sp, #8
 8016f46:	4603      	mov	r3, r0
 8016f48:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 8016f4a:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 8016f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8016f80 <gos_sysmonSendResponse+0x40>)
 8016f4e:	011b      	lsls	r3, r3, #4
 8016f50:	4413      	add	r3, r2
 8016f52:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8016f54:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8016f56:	4a0a      	ldr	r2, [pc, #40]	@ (8016f80 <gos_sysmonSendResponse+0x40>)
 8016f58:	011b      	lsls	r3, r3, #4
 8016f5a:	4413      	add	r3, r2
 8016f5c:	3304      	adds	r3, #4
 8016f5e:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8016f60:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8016f62:	4807      	ldr	r0, [pc, #28]	@ (8016f80 <gos_sysmonSendResponse+0x40>)
 8016f64:	011b      	lsls	r3, r3, #4
 8016f66:	4403      	add	r3, r0
 8016f68:	3308      	adds	r3, #8
 8016f6a:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8016f6c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016f70:	9000      	str	r0, [sp, #0]
 8016f72:	2000      	movs	r0, #0
 8016f74:	f7fe fb5c 	bl	8015630 <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 8016f78:	bf00      	nop
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	0801cfd0 	.word	0x0801cfd0

08016f84 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8016f8e:	79fb      	ldrb	r3, [r7, #7]
 8016f90:	4618      	mov	r0, r3
 8016f92:	f000 fb05 	bl	80175a0 <gos_sysmonCheckMessage>
 8016f96:	4603      	mov	r3, r0
 8016f98:	461a      	mov	r2, r3
 8016f9a:	4b06      	ldr	r3, [pc, #24]	@ (8016fb4 <gos_sysmonHandlePingRequest+0x30>)
 8016f9c:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 8016f9e:	79fb      	ldrb	r3, [r7, #7]
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7ff ffcb 	bl	8016f40 <gos_sysmonSendResponse>
}
 8016faa:	bf00      	nop
 8016fac:	3708      	adds	r7, #8
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20009668 	.word	0x20009668

08016fb8 <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b082      	sub	sp, #8
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8016fc2:	79fb      	ldrb	r3, [r7, #7]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f000 faeb 	bl	80175a0 <gos_sysmonCheckMessage>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	461a      	mov	r2, r3
 8016fce:	4b0b      	ldr	r3, [pc, #44]	@ (8016ffc <gos_sysmonHandleCpuUsageGet+0x44>)
 8016fd0:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8016fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8016ffc <gos_sysmonHandleCpuUsageGet+0x44>)
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	2b28      	cmp	r3, #40	@ 0x28
 8016fd8:	d106      	bne.n	8016fe8 <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 8016fda:	f7fb fb5d 	bl	8012698 <gos_kernelGetCpuUsage>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	4b06      	ldr	r3, [pc, #24]	@ (8016ffc <gos_sysmonHandleCpuUsageGet+0x44>)
 8016fe4:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8016fe8:	79fb      	ldrb	r3, [r7, #7]
 8016fea:	3301      	adds	r3, #1
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7ff ffa6 	bl	8016f40 <gos_sysmonSendResponse>
}
 8016ff4:	bf00      	nop
 8016ff6:	3708      	adds	r7, #8
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}
 8016ffc:	2000966c 	.word	0x2000966c

08017000 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b084      	sub	sp, #16
 8017004:	af00      	add	r7, sp, #0
 8017006:	4603      	mov	r3, r0
 8017008:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 801700a:	2300      	movs	r3, #0
 801700c:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 801700e:	2349      	movs	r3, #73	@ 0x49
 8017010:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8017012:	79fb      	ldrb	r3, [r7, #7]
 8017014:	4618      	mov	r0, r3
 8017016:	f000 fac3 	bl	80175a0 <gos_sysmonCheckMessage>
 801701a:	4603      	mov	r3, r0
 801701c:	461a      	mov	r2, r3
 801701e:	4b66      	ldr	r3, [pc, #408]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017020:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8017022:	4b65      	ldr	r3, [pc, #404]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	2b28      	cmp	r3, #40	@ 0x28
 8017028:	f040 80c2 	bne.w	80171b0 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 801702c:	4b63      	ldr	r3, [pc, #396]	@ (80171bc <gos_sysmonHandleTaskDataGet+0x1bc>)
 801702e:	881b      	ldrh	r3, [r3, #0]
 8017030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017034:	4293      	cmp	r3, r2
 8017036:	d168      	bne.n	801710a <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8017038:	2300      	movs	r3, #0
 801703a:	81fb      	strh	r3, [r7, #14]
 801703c:	e061      	b.n	8017102 <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 801703e:	7b7b      	ldrb	r3, [r7, #13]
 8017040:	2b36      	cmp	r3, #54	@ 0x36
 8017042:	f000 80b4 	beq.w	80171ae <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8017046:	89fb      	ldrh	r3, [r7, #14]
 8017048:	495d      	ldr	r1, [pc, #372]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801704a:	4618      	mov	r0, r3
 801704c:	f7fd ffac 	bl	8014fa8 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8017050:	4b5b      	ldr	r3, [pc, #364]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017058:	d045      	beq.n	80170e6 <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 801705a:	4b59      	ldr	r3, [pc, #356]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801705c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801705e:	4b56      	ldr	r3, [pc, #344]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017060:	84da      	strh	r2, [r3, #38]	@ 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8017062:	4b57      	ldr	r3, [pc, #348]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017064:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017068:	4b53      	ldr	r3, [pc, #332]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801706a:	859a      	strh	r2, [r3, #44]	@ 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 801706c:	4b54      	ldr	r3, [pc, #336]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801706e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017072:	4b51      	ldr	r3, [pc, #324]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017074:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8017078:	4b51      	ldr	r3, [pc, #324]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801707a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 801707e:	4b4e      	ldr	r3, [pc, #312]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017080:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8017084:	4b4e      	ldr	r3, [pc, #312]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017086:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801708a:	4b4b      	ldr	r3, [pc, #300]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801708c:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8017090:	4b4b      	ldr	r3, [pc, #300]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017092:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017096:	4b48      	ldr	r3, [pc, #288]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017098:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 801709c:	4b48      	ldr	r3, [pc, #288]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801709e:	79da      	ldrb	r2, [r3, #7]
 80170a0:	4b45      	ldr	r3, [pc, #276]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170a2:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 80170a4:	4b46      	ldr	r3, [pc, #280]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80170a6:	799a      	ldrb	r2, [r3, #6]
 80170a8:	4b43      	ldr	r3, [pc, #268]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170aa:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 80170ac:	4b44      	ldr	r3, [pc, #272]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80170ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170b0:	4a41      	ldr	r2, [pc, #260]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170b2:	6293      	str	r3, [r2, #40]	@ 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 80170b4:	4b42      	ldr	r3, [pc, #264]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80170b6:	891a      	ldrh	r2, [r3, #8]
 80170b8:	4b3f      	ldr	r3, [pc, #252]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170ba:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 80170bc:	4b40      	ldr	r3, [pc, #256]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80170be:	791a      	ldrb	r2, [r3, #4]
 80170c0:	4b3d      	ldr	r3, [pc, #244]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170c2:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 80170c4:	4a3c      	ldr	r2, [pc, #240]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170c6:	4b3e      	ldr	r3, [pc, #248]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80170c8:	322e      	adds	r2, #46	@ 0x2e
 80170ca:	334c      	adds	r3, #76	@ 0x4c
 80170cc:	cb03      	ldmia	r3!, {r0, r1}
 80170ce:	6010      	str	r0, [r2, #0]
 80170d0:	6051      	str	r1, [r2, #4]
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 80170d6:	493b      	ldr	r1, [pc, #236]	@ (80171c4 <gos_sysmonHandleTaskDataGet+0x1c4>)
 80170d8:	483b      	ldr	r0, [pc, #236]	@ (80171c8 <gos_sysmonHandleTaskDataGet+0x1c8>)
 80170da:	f002 f95e 	bl	801939a <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 80170de:	4b36      	ldr	r3, [pc, #216]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170e0:	2228      	movs	r2, #40	@ 0x28
 80170e2:	701a      	strb	r2, [r3, #0]
 80170e4:	e004      	b.n	80170f0 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80170e6:	4b34      	ldr	r3, [pc, #208]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 80170e8:	2263      	movs	r2, #99	@ 0x63
 80170ea:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 80170ec:	2336      	movs	r3, #54	@ 0x36
 80170ee:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 80170f0:	79fb      	ldrb	r3, [r7, #7]
 80170f2:	3301      	adds	r3, #1
 80170f4:	b2db      	uxtb	r3, r3
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7ff ff22 	bl	8016f40 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80170fc:	89fb      	ldrh	r3, [r7, #14]
 80170fe:	3301      	adds	r3, #1
 8017100:	81fb      	strh	r3, [r7, #14]
 8017102:	89fb      	ldrh	r3, [r7, #14]
 8017104:	2b11      	cmp	r3, #17
 8017106:	d99a      	bls.n	801703e <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8017108:	e052      	b.n	80171b0 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 801710a:	4b2c      	ldr	r3, [pc, #176]	@ (80171bc <gos_sysmonHandleTaskDataGet+0x1bc>)
 801710c:	881b      	ldrh	r3, [r3, #0]
 801710e:	492c      	ldr	r1, [pc, #176]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017110:	4618      	mov	r0, r3
 8017112:	f7fd ff49 	bl	8014fa8 <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8017116:	4b2a      	ldr	r3, [pc, #168]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017118:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801711a:	4b27      	ldr	r3, [pc, #156]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801711c:	84da      	strh	r2, [r3, #38]	@ 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 801711e:	4b28      	ldr	r3, [pc, #160]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017124:	4b24      	ldr	r3, [pc, #144]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017126:	859a      	strh	r2, [r3, #44]	@ 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8017128:	4b25      	ldr	r3, [pc, #148]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801712a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801712e:	4b22      	ldr	r3, [pc, #136]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017130:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8017134:	4b22      	ldr	r3, [pc, #136]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017136:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 801713a:	4b1f      	ldr	r3, [pc, #124]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801713c:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8017140:	4b1f      	ldr	r3, [pc, #124]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017142:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017146:	4b1c      	ldr	r3, [pc, #112]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017148:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 801714c:	4b1c      	ldr	r3, [pc, #112]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801714e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017152:	4b19      	ldr	r3, [pc, #100]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017154:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8017158:	4b19      	ldr	r3, [pc, #100]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801715a:	79da      	ldrb	r2, [r3, #7]
 801715c:	4b16      	ldr	r3, [pc, #88]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801715e:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8017160:	4b17      	ldr	r3, [pc, #92]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017162:	799a      	ldrb	r2, [r3, #6]
 8017164:	4b14      	ldr	r3, [pc, #80]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017166:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8017168:	4b15      	ldr	r3, [pc, #84]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801716a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801716c:	4a12      	ldr	r2, [pc, #72]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801716e:	6293      	str	r3, [r2, #40]	@ 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8017170:	4b13      	ldr	r3, [pc, #76]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017172:	891a      	ldrh	r2, [r3, #8]
 8017174:	4b10      	ldr	r3, [pc, #64]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017176:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8017178:	4b11      	ldr	r3, [pc, #68]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 801717a:	791a      	ldrb	r2, [r3, #4]
 801717c:	4b0e      	ldr	r3, [pc, #56]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801717e:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8017180:	4a0d      	ldr	r2, [pc, #52]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8017182:	4b0f      	ldr	r3, [pc, #60]	@ (80171c0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8017184:	322e      	adds	r2, #46	@ 0x2e
 8017186:	334c      	adds	r3, #76	@ 0x4c
 8017188:	cb03      	ldmia	r3!, {r0, r1}
 801718a:	6010      	str	r0, [r2, #0]
 801718c:	6051      	str	r1, [r2, #4]
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8017192:	490c      	ldr	r1, [pc, #48]	@ (80171c4 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8017194:	480c      	ldr	r0, [pc, #48]	@ (80171c8 <gos_sysmonHandleTaskDataGet+0x1c8>)
 8017196:	f002 f900 	bl	801939a <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 801719a:	4b07      	ldr	r3, [pc, #28]	@ (80171b8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 801719c:	2228      	movs	r2, #40	@ 0x28
 801719e:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 80171a0:	79fb      	ldrb	r3, [r7, #7]
 80171a2:	3301      	adds	r3, #1
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	4618      	mov	r0, r3
 80171a8:	f7ff feca 	bl	8016f40 <gos_sysmonSendResponse>
}
 80171ac:	e000      	b.n	80171b0 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 80171ae:	bf00      	nop
}
 80171b0:	bf00      	nop
 80171b2:	3710      	adds	r7, #16
 80171b4:	46bd      	mov	sp, r7
 80171b6:	bd80      	pop	{r7, pc}
 80171b8:	20009674 	.word	0x20009674
 80171bc:	20009670 	.word	0x20009670
 80171c0:	200096cc 	.word	0x200096cc
 80171c4:	200096d6 	.word	0x200096d6
 80171c8:	2000967a 	.word	0x2000967a

080171cc <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b084      	sub	sp, #16
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	4603      	mov	r3, r0
 80171d4:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 80171d6:	2300      	movs	r3, #0
 80171d8:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 80171da:	2349      	movs	r3, #73	@ 0x49
 80171dc:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 80171de:	79fb      	ldrb	r3, [r7, #7]
 80171e0:	4618      	mov	r0, r3
 80171e2:	f000 f9dd 	bl	80175a0 <gos_sysmonCheckMessage>
 80171e6:	4603      	mov	r3, r0
 80171e8:	461a      	mov	r2, r3
 80171ea:	4b49      	ldr	r3, [pc, #292]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80171ec:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 80171ee:	4b48      	ldr	r3, [pc, #288]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	2b28      	cmp	r3, #40	@ 0x28
 80171f4:	f040 8087 	bne.w	8017306 <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 80171f8:	4b46      	ldr	r3, [pc, #280]	@ (8017314 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 80171fa:	881b      	ldrh	r3, [r3, #0]
 80171fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017200:	4293      	cmp	r3, r2
 8017202:	d14a      	bne.n	801729a <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8017204:	2300      	movs	r3, #0
 8017206:	81fb      	strh	r3, [r7, #14]
 8017208:	e043      	b.n	8017292 <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 801720a:	7b7b      	ldrb	r3, [r7, #13]
 801720c:	2b36      	cmp	r3, #54	@ 0x36
 801720e:	d079      	beq.n	8017304 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8017210:	89fb      	ldrh	r3, [r7, #14]
 8017212:	4941      	ldr	r1, [pc, #260]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8017214:	4618      	mov	r0, r3
 8017216:	f7fd fec7 	bl	8014fa8 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 801721a:	4b3f      	ldr	r3, [pc, #252]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 801721c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801721e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017222:	d028      	beq.n	8017276 <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8017224:	4b3c      	ldr	r3, [pc, #240]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8017226:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801722a:	4b39      	ldr	r3, [pc, #228]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 801722c:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 801722e:	4b3a      	ldr	r3, [pc, #232]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8017230:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017234:	4b36      	ldr	r3, [pc, #216]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8017236:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8017238:	4b37      	ldr	r3, [pc, #220]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 801723a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801723e:	4b34      	ldr	r3, [pc, #208]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8017240:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8017242:	4b35      	ldr	r3, [pc, #212]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8017244:	799a      	ldrb	r2, [r3, #6]
 8017246:	4b32      	ldr	r3, [pc, #200]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8017248:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 801724a:	4b33      	ldr	r3, [pc, #204]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 801724c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801724e:	4a30      	ldr	r2, [pc, #192]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8017250:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8017254:	4b30      	ldr	r3, [pc, #192]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8017256:	791a      	ldrb	r2, [r3, #4]
 8017258:	4b2d      	ldr	r3, [pc, #180]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 801725a:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 801725c:	4a2c      	ldr	r2, [pc, #176]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 801725e:	4b2e      	ldr	r3, [pc, #184]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8017260:	3207      	adds	r2, #7
 8017262:	334c      	adds	r3, #76	@ 0x4c
 8017264:	cb03      	ldmia	r3!, {r0, r1}
 8017266:	6010      	str	r0, [r2, #0]
 8017268:	6051      	str	r1, [r2, #4]
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 801726e:	4b28      	ldr	r3, [pc, #160]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8017270:	2228      	movs	r2, #40	@ 0x28
 8017272:	701a      	strb	r2, [r3, #0]
 8017274:	e004      	b.n	8017280 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8017276:	4b26      	ldr	r3, [pc, #152]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8017278:	2263      	movs	r2, #99	@ 0x63
 801727a:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 801727c:	2336      	movs	r3, #54	@ 0x36
 801727e:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8017280:	79fb      	ldrb	r3, [r7, #7]
 8017282:	3301      	adds	r3, #1
 8017284:	b2db      	uxtb	r3, r3
 8017286:	4618      	mov	r0, r3
 8017288:	f7ff fe5a 	bl	8016f40 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801728c:	89fb      	ldrh	r3, [r7, #14]
 801728e:	3301      	adds	r3, #1
 8017290:	81fb      	strh	r3, [r7, #14]
 8017292:	89fb      	ldrh	r3, [r7, #14]
 8017294:	2b11      	cmp	r3, #17
 8017296:	d9b8      	bls.n	801720a <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8017298:	e035      	b.n	8017306 <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 801729a:	4b1e      	ldr	r3, [pc, #120]	@ (8017314 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 801729c:	881b      	ldrh	r3, [r3, #0]
 801729e:	491e      	ldr	r1, [pc, #120]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172a0:	4618      	mov	r0, r3
 80172a2:	f7fd fe81 	bl	8014fa8 <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 80172a6:	4b1c      	ldr	r3, [pc, #112]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80172ac:	4b18      	ldr	r3, [pc, #96]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172ae:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 80172b0:	4b19      	ldr	r3, [pc, #100]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80172b6:	4b16      	ldr	r3, [pc, #88]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172b8:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 80172ba:	4b17      	ldr	r3, [pc, #92]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172bc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80172c0:	4b13      	ldr	r3, [pc, #76]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172c2:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 80172c4:	4b14      	ldr	r3, [pc, #80]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172c6:	799a      	ldrb	r2, [r3, #6]
 80172c8:	4b11      	ldr	r3, [pc, #68]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172ca:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 80172cc:	4b12      	ldr	r3, [pc, #72]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80172d0:	4a0f      	ldr	r2, [pc, #60]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172d2:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 80172d6:	4b10      	ldr	r3, [pc, #64]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172d8:	791a      	ldrb	r2, [r3, #4]
 80172da:	4b0d      	ldr	r3, [pc, #52]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172dc:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 80172de:	4a0c      	ldr	r2, [pc, #48]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172e0:	4b0d      	ldr	r3, [pc, #52]	@ (8017318 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 80172e2:	3207      	adds	r2, #7
 80172e4:	334c      	adds	r3, #76	@ 0x4c
 80172e6:	cb03      	ldmia	r3!, {r0, r1}
 80172e8:	6010      	str	r0, [r2, #0]
 80172ea:	6051      	str	r1, [r2, #4]
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 80172f0:	4b07      	ldr	r3, [pc, #28]	@ (8017310 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 80172f2:	2228      	movs	r2, #40	@ 0x28
 80172f4:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 80172f6:	79fb      	ldrb	r3, [r7, #7]
 80172f8:	3301      	adds	r3, #1
 80172fa:	b2db      	uxtb	r3, r3
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7ff fe1f 	bl	8016f40 <gos_sysmonSendResponse>
}
 8017302:	e000      	b.n	8017306 <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 8017304:	bf00      	nop
}
 8017306:	bf00      	nop
 8017308:	3710      	adds	r7, #16
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
 801730e:	bf00      	nop
 8017310:	200096b4 	.word	0x200096b4
 8017314:	20009670 	.word	0x20009670
 8017318:	200096cc 	.word	0x200096cc

0801731c <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
 8017322:	4603      	mov	r3, r0
 8017324:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8017326:	79fb      	ldrb	r3, [r7, #7]
 8017328:	4618      	mov	r0, r3
 801732a:	f000 f939 	bl	80175a0 <gos_sysmonCheckMessage>
 801732e:	4603      	mov	r3, r0
 8017330:	461a      	mov	r2, r3
 8017332:	4b63      	ldr	r3, [pc, #396]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017334:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8017336:	4b62      	ldr	r3, [pc, #392]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	2b28      	cmp	r3, #40	@ 0x28
 801733c:	f040 80b5 	bne.w	80174aa <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 8017340:	4b60      	ldr	r3, [pc, #384]	@ (80174c4 <gos_sysmonHandleTaskModification+0x1a8>)
 8017342:	881b      	ldrh	r3, [r3, #0]
 8017344:	4960      	ldr	r1, [pc, #384]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 8017346:	4618      	mov	r0, r3
 8017348:	f7fd fe2e 	bl	8014fa8 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 801734c:	4b5d      	ldr	r3, [pc, #372]	@ (80174c4 <gos_sysmonHandleTaskModification+0x1a8>)
 801734e:	789b      	ldrb	r3, [r3, #2]
 8017350:	2b4a      	cmp	r3, #74	@ 0x4a
 8017352:	f300 80a7 	bgt.w	80174a4 <gos_sysmonHandleTaskModification+0x188>
 8017356:	2b31      	cmp	r3, #49	@ 0x31
 8017358:	da04      	bge.n	8017364 <gos_sysmonHandleTaskModification+0x48>
 801735a:	2b0c      	cmp	r3, #12
 801735c:	d03e      	beq.n	80173dc <gos_sysmonHandleTaskModification+0xc0>
 801735e:	2b22      	cmp	r3, #34	@ 0x22
 8017360:	d04c      	beq.n	80173fc <gos_sysmonHandleTaskModification+0xe0>
 8017362:	e09f      	b.n	80174a4 <gos_sysmonHandleTaskModification+0x188>
 8017364:	3b31      	subs	r3, #49	@ 0x31
 8017366:	2b19      	cmp	r3, #25
 8017368:	f200 809c 	bhi.w	80174a4 <gos_sysmonHandleTaskModification+0x188>
 801736c:	a201      	add	r2, pc, #4	@ (adr r2, 8017374 <gos_sysmonHandleTaskModification+0x58>)
 801736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017372:	bf00      	nop
 8017374:	0801741d 	.word	0x0801741d
 8017378:	080174a5 	.word	0x080174a5
 801737c:	080174a5 	.word	0x080174a5
 8017380:	0801743d 	.word	0x0801743d
 8017384:	080174a5 	.word	0x080174a5
 8017388:	080174a5 	.word	0x080174a5
 801738c:	080174a5 	.word	0x080174a5
 8017390:	080174a5 	.word	0x080174a5
 8017394:	080174a5 	.word	0x080174a5
 8017398:	080174a5 	.word	0x080174a5
 801739c:	080174a5 	.word	0x080174a5
 80173a0:	080174a5 	.word	0x080174a5
 80173a4:	080174a5 	.word	0x080174a5
 80173a8:	080174a5 	.word	0x080174a5
 80173ac:	08017465 	.word	0x08017465
 80173b0:	080174a5 	.word	0x080174a5
 80173b4:	080174a5 	.word	0x080174a5
 80173b8:	080174a5 	.word	0x080174a5
 80173bc:	080174a5 	.word	0x080174a5
 80173c0:	080174a5 	.word	0x080174a5
 80173c4:	080174a5 	.word	0x080174a5
 80173c8:	080174a5 	.word	0x080174a5
 80173cc:	080174a5 	.word	0x080174a5
 80173d0:	080174a5 	.word	0x080174a5
 80173d4:	080174a5 	.word	0x080174a5
 80173d8:	08017485 	.word	0x08017485
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 80173dc:	4b3a      	ldr	r3, [pc, #232]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 80173de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7fc fc5b 	bl	8013c9c <gos_taskSuspend>
 80173e6:	4603      	mov	r3, r0
 80173e8:	2b55      	cmp	r3, #85	@ 0x55
 80173ea:	d103      	bne.n	80173f4 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80173ec:	4b34      	ldr	r3, [pc, #208]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 80173ee:	2228      	movs	r2, #40	@ 0x28
 80173f0:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80173f2:	e05a      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80173f4:	4b32      	ldr	r3, [pc, #200]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 80173f6:	2263      	movs	r2, #99	@ 0x63
 80173f8:	701a      	strb	r2, [r3, #0]
                 break;
 80173fa:	e056      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 80173fc:	4b32      	ldr	r3, [pc, #200]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 80173fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017400:	4618      	mov	r0, r3
 8017402:	f7fc fd6d 	bl	8013ee0 <gos_taskResume>
 8017406:	4603      	mov	r3, r0
 8017408:	2b55      	cmp	r3, #85	@ 0x55
 801740a:	d103      	bne.n	8017414 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 801740c:	4b2c      	ldr	r3, [pc, #176]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 801740e:	2228      	movs	r2, #40	@ 0x28
 8017410:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8017412:	e04a      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8017414:	4b2a      	ldr	r3, [pc, #168]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017416:	2263      	movs	r2, #99	@ 0x63
 8017418:	701a      	strb	r2, [r3, #0]
                 break;
 801741a:	e046      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 801741c:	4b2a      	ldr	r3, [pc, #168]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 801741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017420:	4618      	mov	r0, r3
 8017422:	f7fd f807 	bl	8014434 <gos_taskDelete>
 8017426:	4603      	mov	r3, r0
 8017428:	2b55      	cmp	r3, #85	@ 0x55
 801742a:	d103      	bne.n	8017434 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 801742c:	4b24      	ldr	r3, [pc, #144]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 801742e:	2228      	movs	r2, #40	@ 0x28
 8017430:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8017432:	e03a      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8017434:	4b22      	ldr	r3, [pc, #136]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017436:	2263      	movs	r2, #99	@ 0x63
 8017438:	701a      	strb	r2, [r3, #0]
                 break;
 801743a:	e036      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 801743c:	4b22      	ldr	r3, [pc, #136]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 801743e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017440:	4a20      	ldr	r2, [pc, #128]	@ (80174c4 <gos_sysmonHandleTaskModification+0x1a8>)
 8017442:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8017446:	4611      	mov	r1, r2
 8017448:	4618      	mov	r0, r3
 801744a:	f7fc fdf7 	bl	801403c <gos_taskBlock>
 801744e:	4603      	mov	r3, r0
 8017450:	2b55      	cmp	r3, #85	@ 0x55
 8017452:	d103      	bne.n	801745c <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8017454:	4b1a      	ldr	r3, [pc, #104]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017456:	2228      	movs	r2, #40	@ 0x28
 8017458:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801745a:	e026      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801745c:	4b18      	ldr	r3, [pc, #96]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 801745e:	2263      	movs	r2, #99	@ 0x63
 8017460:	701a      	strb	r2, [r3, #0]
                 break;
 8017462:	e022      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 8017464:	4b18      	ldr	r3, [pc, #96]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 8017466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017468:	4618      	mov	r0, r3
 801746a:	f7fc fef9 	bl	8014260 <gos_taskUnblock>
 801746e:	4603      	mov	r3, r0
 8017470:	2b55      	cmp	r3, #85	@ 0x55
 8017472:	d103      	bne.n	801747c <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8017474:	4b12      	ldr	r3, [pc, #72]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017476:	2228      	movs	r2, #40	@ 0x28
 8017478:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801747a:	e016      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801747c:	4b10      	ldr	r3, [pc, #64]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 801747e:	2263      	movs	r2, #99	@ 0x63
 8017480:	701a      	strb	r2, [r3, #0]
                 break;
 8017482:	e012      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 8017484:	4b10      	ldr	r3, [pc, #64]	@ (80174c8 <gos_sysmonHandleTaskModification+0x1ac>)
 8017486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017488:	4618      	mov	r0, r3
 801748a:	f7fc fb41 	bl	8013b10 <gos_taskWakeup>
 801748e:	4603      	mov	r3, r0
 8017490:	2b55      	cmp	r3, #85	@ 0x55
 8017492:	d103      	bne.n	801749c <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8017494:	4b0a      	ldr	r3, [pc, #40]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 8017496:	2228      	movs	r2, #40	@ 0x28
 8017498:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801749a:	e006      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801749c:	4b08      	ldr	r3, [pc, #32]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 801749e:	2263      	movs	r2, #99	@ 0x63
 80174a0:	701a      	strb	r2, [r3, #0]
                 break;
 80174a2:	e002      	b.n	80174aa <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80174a4:	4b06      	ldr	r3, [pc, #24]	@ (80174c0 <gos_sysmonHandleTaskModification+0x1a4>)
 80174a6:	2263      	movs	r2, #99	@ 0x63
 80174a8:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 80174aa:	79fb      	ldrb	r3, [r7, #7]
 80174ac:	3301      	adds	r3, #1
 80174ae:	b2db      	uxtb	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7ff fd45 	bl	8016f40 <gos_sysmonSendResponse>
}
 80174b6:	bf00      	nop
 80174b8:	3708      	adds	r7, #8
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}
 80174be:	bf00      	nop
 80174c0:	20009740 	.word	0x20009740
 80174c4:	20009738 	.word	0x20009738
 80174c8:	200096cc 	.word	0x200096cc

080174cc <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 80174d6:	79fb      	ldrb	r3, [r7, #7]
 80174d8:	4618      	mov	r0, r3
 80174da:	f000 f861 	bl	80175a0 <gos_sysmonCheckMessage>
 80174de:	4603      	mov	r3, r0
 80174e0:	461a      	mov	r2, r3
 80174e2:	4b0e      	ldr	r3, [pc, #56]	@ (801751c <gos_sysmonHandleSysRuntimeGet+0x50>)
 80174e4:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 80174e6:	4b0d      	ldr	r3, [pc, #52]	@ (801751c <gos_sysmonHandleSysRuntimeGet+0x50>)
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	2b28      	cmp	r3, #40	@ 0x28
 80174ec:	d10c      	bne.n	8017508 <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 80174ee:	480c      	ldr	r0, [pc, #48]	@ (8017520 <gos_sysmonHandleSysRuntimeGet+0x54>)
 80174f0:	f000 f8d8 	bl	80176a4 <gos_runTimeGet>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b55      	cmp	r3, #85	@ 0x55
 80174f8:	d103      	bne.n	8017502 <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80174fa:	4b08      	ldr	r3, [pc, #32]	@ (801751c <gos_sysmonHandleSysRuntimeGet+0x50>)
 80174fc:	2228      	movs	r2, #40	@ 0x28
 80174fe:	701a      	strb	r2, [r3, #0]
 8017500:	e002      	b.n	8017508 <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8017502:	4b06      	ldr	r3, [pc, #24]	@ (801751c <gos_sysmonHandleSysRuntimeGet+0x50>)
 8017504:	2263      	movs	r2, #99	@ 0x63
 8017506:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8017508:	79fb      	ldrb	r3, [r7, #7]
 801750a:	3301      	adds	r3, #1
 801750c:	b2db      	uxtb	r3, r3
 801750e:	4618      	mov	r0, r3
 8017510:	f7ff fd16 	bl	8016f40 <gos_sysmonSendResponse>
}
 8017514:	bf00      	nop
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	20009744 	.word	0x20009744
 8017520:	20009745 	.word	0x20009745

08017524 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b082      	sub	sp, #8
 8017528:	af00      	add	r7, sp, #0
 801752a:	4603      	mov	r3, r0
 801752c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 801752e:	79fb      	ldrb	r3, [r7, #7]
 8017530:	4618      	mov	r0, r3
 8017532:	f000 f835 	bl	80175a0 <gos_sysmonCheckMessage>
 8017536:	4603      	mov	r3, r0
 8017538:	461a      	mov	r2, r3
 801753a:	4b0e      	ldr	r3, [pc, #56]	@ (8017574 <gos_sysmonHandleSystimeSet+0x50>)
 801753c:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 801753e:	4b0d      	ldr	r3, [pc, #52]	@ (8017574 <gos_sysmonHandleSystimeSet+0x50>)
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	2b28      	cmp	r3, #40	@ 0x28
 8017544:	d10c      	bne.n	8017560 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 8017546:	480c      	ldr	r0, [pc, #48]	@ (8017578 <gos_sysmonHandleSystimeSet+0x54>)
 8017548:	f000 f890 	bl	801766c <gos_timeSet>
 801754c:	4603      	mov	r3, r0
 801754e:	2b55      	cmp	r3, #85	@ 0x55
 8017550:	d103      	bne.n	801755a <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8017552:	4b08      	ldr	r3, [pc, #32]	@ (8017574 <gos_sysmonHandleSystimeSet+0x50>)
 8017554:	2228      	movs	r2, #40	@ 0x28
 8017556:	701a      	strb	r2, [r3, #0]
 8017558:	e002      	b.n	8017560 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801755a:	4b06      	ldr	r3, [pc, #24]	@ (8017574 <gos_sysmonHandleSystimeSet+0x50>)
 801755c:	2263      	movs	r2, #99	@ 0x63
 801755e:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8017560:	79fb      	ldrb	r3, [r7, #7]
 8017562:	3301      	adds	r3, #1
 8017564:	b2db      	uxtb	r3, r3
 8017566:	4618      	mov	r0, r3
 8017568:	f7ff fcea 	bl	8016f40 <gos_sysmonSendResponse>
}
 801756c:	bf00      	nop
 801756e:	3708      	adds	r7, #8
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}
 8017574:	2000975c 	.word	0x2000975c
 8017578:	20009750 	.word	0x20009750

0801757c <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	4603      	mov	r3, r0
 8017584:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 8017586:	79fb      	ldrb	r3, [r7, #7]
 8017588:	4618      	mov	r0, r3
 801758a:	f000 f809 	bl	80175a0 <gos_sysmonCheckMessage>
 801758e:	4603      	mov	r3, r0
 8017590:	2b28      	cmp	r3, #40	@ 0x28
 8017592:	d101      	bne.n	8017598 <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 8017594:	f7fb f892 	bl	80126bc <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 8017598:	bf00      	nop
 801759a:	3708      	adds	r7, #8
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	4603      	mov	r3, r0
 80175a8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 80175aa:	2328      	movs	r3, #40	@ 0x28
 80175ac:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 80175ae:	79fb      	ldrb	r3, [r7, #7]
 80175b0:	4a0d      	ldr	r2, [pc, #52]	@ (80175e8 <gos_sysmonCheckMessage+0x48>)
 80175b2:	011b      	lsls	r3, r3, #4
 80175b4:	4413      	add	r3, r2
 80175b6:	3304      	adds	r3, #4
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d00f      	beq.n	80175de <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 80175be:	79fb      	ldrb	r3, [r7, #7]
 80175c0:	4a09      	ldr	r2, [pc, #36]	@ (80175e8 <gos_sysmonCheckMessage+0x48>)
 80175c2:	011b      	lsls	r3, r3, #4
 80175c4:	4413      	add	r3, r2
 80175c6:	3304      	adds	r3, #4
 80175c8:	6818      	ldr	r0, [r3, #0]
 80175ca:	79fb      	ldrb	r3, [r7, #7]
 80175cc:	4a06      	ldr	r2, [pc, #24]	@ (80175e8 <gos_sysmonCheckMessage+0x48>)
 80175ce:	011b      	lsls	r3, r3, #4
 80175d0:	4413      	add	r3, r2
 80175d2:	3308      	adds	r3, #8
 80175d4:	881b      	ldrh	r3, [r3, #0]
 80175d6:	461a      	mov	r2, r3
 80175d8:	4904      	ldr	r1, [pc, #16]	@ (80175ec <gos_sysmonCheckMessage+0x4c>)
 80175da:	f001 fee6 	bl	80193aa <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 80175de:	7bfb      	ldrb	r3, [r7, #15]
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3710      	adds	r7, #16
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	0801cfd0 	.word	0x0801cfd0
 80175ec:	20008668 	.word	0x20008668

080175f0 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 80175f6:	2355      	movs	r3, #85	@ 0x55
 80175f8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 80175fa:	480a      	ldr	r0, [pc, #40]	@ (8017624 <gos_timeInit+0x34>)
 80175fc:	f7ff fa48 	bl	8016a90 <gos_signalCreate>
 8017600:	4603      	mov	r3, r0
 8017602:	2b55      	cmp	r3, #85	@ 0x55
 8017604:	d106      	bne.n	8017614 <gos_timeInit+0x24>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 8017606:	4908      	ldr	r1, [pc, #32]	@ (8017628 <gos_timeInit+0x38>)
 8017608:	4808      	ldr	r0, [pc, #32]	@ (801762c <gos_timeInit+0x3c>)
 801760a:	f7fc f85d 	bl	80136c8 <gos_taskRegister>
 801760e:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 8017610:	2b55      	cmp	r3, #85	@ 0x55
 8017612:	d001      	beq.n	8017618 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 8017614:	23ae      	movs	r3, #174	@ 0xae
 8017616:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 8017618:	79fb      	ldrb	r3, [r7, #7]
}
 801761a:	4618      	mov	r0, r3
 801761c:	3708      	adds	r7, #8
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
 8017622:	bf00      	nop
 8017624:	200098ec 	.word	0x200098ec
 8017628:	200098ea 	.word	0x200098ea
 801762c:	20001278 	.word	0x20001278

08017630 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8017630:	b480      	push	{r7}
 8017632:	b085      	sub	sp, #20
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 8017638:	23ae      	movs	r3, #174	@ 0xae
 801763a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d00a      	beq.n	8017658 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	4908      	ldr	r1, [pc, #32]	@ (8017668 <gos_timeGet+0x38>)
 8017646:	461a      	mov	r2, r3
 8017648:	460b      	mov	r3, r1
 801764a:	cb03      	ldmia	r3!, {r0, r1}
 801764c:	6010      	str	r0, [r2, #0]
 801764e:	6051      	str	r1, [r2, #4]
 8017650:	881b      	ldrh	r3, [r3, #0]
 8017652:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 8017654:	2355      	movs	r3, #85	@ 0x55
 8017656:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 8017658:	7bfb      	ldrb	r3, [r7, #15]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3714      	adds	r7, #20
 801765e:	46bd      	mov	sp, r7
 8017660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017664:	4770      	bx	lr
 8017666:	bf00      	nop
 8017668:	2000126c 	.word	0x2000126c

0801766c <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 801766c:	b480      	push	{r7}
 801766e:	b085      	sub	sp, #20
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 8017674:	23ae      	movs	r3, #174	@ 0xae
 8017676:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d008      	beq.n	8017690 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 801767e:	4b08      	ldr	r3, [pc, #32]	@ (80176a0 <gos_timeSet+0x34>)
 8017680:	687a      	ldr	r2, [r7, #4]
 8017682:	6810      	ldr	r0, [r2, #0]
 8017684:	6851      	ldr	r1, [r2, #4]
 8017686:	c303      	stmia	r3!, {r0, r1}
 8017688:	8912      	ldrh	r2, [r2, #8]
 801768a:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 801768c:	2355      	movs	r3, #85	@ 0x55
 801768e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 8017690:	7bfb      	ldrb	r3, [r7, #15]
}
 8017692:	4618      	mov	r0, r3
 8017694:	3714      	adds	r7, #20
 8017696:	46bd      	mov	sp, r7
 8017698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop
 80176a0:	2000126c 	.word	0x2000126c

080176a4 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 80176a4:	b480      	push	{r7}
 80176a6:	b085      	sub	sp, #20
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 80176ac:	23ae      	movs	r3, #174	@ 0xae
 80176ae:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d00a      	beq.n	80176cc <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	4908      	ldr	r1, [pc, #32]	@ (80176dc <gos_runTimeGet+0x38>)
 80176ba:	461a      	mov	r2, r3
 80176bc:	460b      	mov	r3, r1
 80176be:	cb03      	ldmia	r3!, {r0, r1}
 80176c0:	6010      	str	r0, [r2, #0]
 80176c2:	6051      	str	r1, [r2, #4]
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 80176c8:	2355      	movs	r3, #85	@ 0x55
 80176ca:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 80176cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3714      	adds	r7, #20
 80176d2:	46bd      	mov	sp, r7
 80176d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop
 80176dc:	200098e0 	.word	0x200098e0

080176e0 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 80176e0:	b480      	push	{r7}
 80176e2:	b085      	sub	sp, #20
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	460b      	mov	r3, r1
 80176ea:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 80176ec:	23ae      	movs	r3, #174	@ 0xae
 80176ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	f000 80e4 	beq.w	80178c0 <gos_timeAddMilliseconds+0x1e0>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	881b      	ldrh	r3, [r3, #0]
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	887b      	ldrh	r3, [r7, #2]
 8017700:	4413      	add	r3, r2
 8017702:	b29a      	uxth	r2, r3
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	881b      	ldrh	r3, [r3, #0]
 801770c:	b29b      	uxth	r3, r3
 801770e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017712:	f0c0 80d3 	bcc.w	80178bc <gos_timeAddMilliseconds+0x1dc>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	789a      	ldrb	r2, [r3, #2]
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	b29b      	uxth	r3, r3
 8017720:	496b      	ldr	r1, [pc, #428]	@ (80178d0 <gos_timeAddMilliseconds+0x1f0>)
 8017722:	fba1 1303 	umull	r1, r3, r1, r3
 8017726:	099b      	lsrs	r3, r3, #6
 8017728:	b29b      	uxth	r3, r3
 801772a:	b2db      	uxtb	r3, r3
 801772c:	4413      	add	r3, r2
 801772e:	b2da      	uxtb	r2, r3
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	881b      	ldrh	r3, [r3, #0]
 8017738:	b29b      	uxth	r3, r3
 801773a:	4a65      	ldr	r2, [pc, #404]	@ (80178d0 <gos_timeAddMilliseconds+0x1f0>)
 801773c:	fba2 1203 	umull	r1, r2, r2, r3
 8017740:	0992      	lsrs	r2, r2, #6
 8017742:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017746:	fb01 f202 	mul.w	r2, r1, r2
 801774a:	1a9b      	subs	r3, r3, r2
 801774c:	b29a      	uxth	r2, r3
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	789b      	ldrb	r3, [r3, #2]
 8017756:	2b3b      	cmp	r3, #59	@ 0x3b
 8017758:	f240 80b0 	bls.w	80178bc <gos_timeAddMilliseconds+0x1dc>
            {
                pTime->minutes += pTime->seconds / 60u;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	78da      	ldrb	r2, [r3, #3]
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	789b      	ldrb	r3, [r3, #2]
 8017764:	495b      	ldr	r1, [pc, #364]	@ (80178d4 <gos_timeAddMilliseconds+0x1f4>)
 8017766:	fba1 1303 	umull	r1, r3, r1, r3
 801776a:	095b      	lsrs	r3, r3, #5
 801776c:	b2db      	uxtb	r3, r3
 801776e:	4413      	add	r3, r2
 8017770:	b2da      	uxtb	r2, r3
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	789a      	ldrb	r2, [r3, #2]
 801777a:	4b56      	ldr	r3, [pc, #344]	@ (80178d4 <gos_timeAddMilliseconds+0x1f4>)
 801777c:	fba3 1302 	umull	r1, r3, r3, r2
 8017780:	0959      	lsrs	r1, r3, #5
 8017782:	460b      	mov	r3, r1
 8017784:	011b      	lsls	r3, r3, #4
 8017786:	1a5b      	subs	r3, r3, r1
 8017788:	009b      	lsls	r3, r3, #2
 801778a:	1ad3      	subs	r3, r2, r3
 801778c:	b2da      	uxtb	r2, r3
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	78db      	ldrb	r3, [r3, #3]
 8017796:	2b3b      	cmp	r3, #59	@ 0x3b
 8017798:	f240 8090 	bls.w	80178bc <gos_timeAddMilliseconds+0x1dc>
                {
                    pTime->hours += pTime->minutes / 60u;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	791a      	ldrb	r2, [r3, #4]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	78db      	ldrb	r3, [r3, #3]
 80177a4:	494b      	ldr	r1, [pc, #300]	@ (80178d4 <gos_timeAddMilliseconds+0x1f4>)
 80177a6:	fba1 1303 	umull	r1, r3, r1, r3
 80177aa:	095b      	lsrs	r3, r3, #5
 80177ac:	b2db      	uxtb	r3, r3
 80177ae:	4413      	add	r3, r2
 80177b0:	b2da      	uxtb	r2, r3
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	78da      	ldrb	r2, [r3, #3]
 80177ba:	4b46      	ldr	r3, [pc, #280]	@ (80178d4 <gos_timeAddMilliseconds+0x1f4>)
 80177bc:	fba3 1302 	umull	r1, r3, r3, r2
 80177c0:	0959      	lsrs	r1, r3, #5
 80177c2:	460b      	mov	r3, r1
 80177c4:	011b      	lsls	r3, r3, #4
 80177c6:	1a5b      	subs	r3, r3, r1
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	1ad3      	subs	r3, r2, r3
 80177cc:	b2da      	uxtb	r2, r3
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	791b      	ldrb	r3, [r3, #4]
 80177d6:	2b17      	cmp	r3, #23
 80177d8:	d970      	bls.n	80178bc <gos_timeAddMilliseconds+0x1dc>
                    {
                        pTime->days += pTime->hours / 24u;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	687a      	ldr	r2, [r7, #4]
 80177e4:	7912      	ldrb	r2, [r2, #4]
 80177e6:	493c      	ldr	r1, [pc, #240]	@ (80178d8 <gos_timeAddMilliseconds+0x1f8>)
 80177e8:	fba1 1202 	umull	r1, r2, r1, r2
 80177ec:	0912      	lsrs	r2, r2, #4
 80177ee:	b2d2      	uxtb	r2, r2
 80177f0:	4413      	add	r3, r2
 80177f2:	b29a      	uxth	r2, r3
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	791a      	ldrb	r2, [r3, #4]
 80177fe:	4b36      	ldr	r3, [pc, #216]	@ (80178d8 <gos_timeAddMilliseconds+0x1f8>)
 8017800:	fba3 1302 	umull	r1, r3, r3, r2
 8017804:	0919      	lsrs	r1, r3, #4
 8017806:	460b      	mov	r3, r1
 8017808:	005b      	lsls	r3, r3, #1
 801780a:	440b      	add	r3, r1
 801780c:	00db      	lsls	r3, r3, #3
 801780e:	1ad3      	subs	r3, r2, r3
 8017810:	b2da      	uxtb	r2, r3
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	891b      	ldrh	r3, [r3, #8]
 801781a:	b29b      	uxth	r3, r3
 801781c:	f003 0303 	and.w	r3, r3, #3
 8017820:	b29b      	uxth	r3, r3
 8017822:	2b00      	cmp	r3, #0
 8017824:	d117      	bne.n	8017856 <gos_timeAddMilliseconds+0x176>
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	79db      	ldrb	r3, [r3, #7]
 801782a:	2b02      	cmp	r3, #2
 801782c:	d113      	bne.n	8017856 <gos_timeAddMilliseconds+0x176>
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8017834:	b29b      	uxth	r3, r3
 8017836:	2b1d      	cmp	r3, #29
 8017838:	d90d      	bls.n	8017856 <gos_timeAddMilliseconds+0x176>
                        {
                            pTime->days = 1u;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	2200      	movs	r2, #0
 801783e:	f042 0201 	orr.w	r2, r2, #1
 8017842:	715a      	strb	r2, [r3, #5]
 8017844:	2200      	movs	r2, #0
 8017846:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	79db      	ldrb	r3, [r3, #7]
 801784c:	3301      	adds	r3, #1
 801784e:	b2da      	uxtb	r2, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	71da      	strb	r2, [r3, #7]
 8017854:	e024      	b.n	80178a0 <gos_timeAddMilliseconds+0x1c0>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	891b      	ldrh	r3, [r3, #8]
 801785a:	b29b      	uxth	r3, r3
 801785c:	f003 0303 	and.w	r3, r3, #3
 8017860:	b29b      	uxth	r3, r3
 8017862:	2b00      	cmp	r3, #0
 8017864:	d103      	bne.n	801786e <gos_timeAddMilliseconds+0x18e>
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	79db      	ldrb	r3, [r3, #7]
 801786a:	2b02      	cmp	r3, #2
 801786c:	d018      	beq.n	80178a0 <gos_timeAddMilliseconds+0x1c0>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	79db      	ldrb	r3, [r3, #7]
 8017872:	3b01      	subs	r3, #1
 8017874:	4a19      	ldr	r2, [pc, #100]	@ (80178dc <gos_timeAddMilliseconds+0x1fc>)
 8017876:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8017880:	b29b      	uxth	r3, r3
 8017882:	429a      	cmp	r2, r3
 8017884:	d20c      	bcs.n	80178a0 <gos_timeAddMilliseconds+0x1c0>
                        {
                            pTime->days = 1u;
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	2200      	movs	r2, #0
 801788a:	f042 0201 	orr.w	r2, r2, #1
 801788e:	715a      	strb	r2, [r3, #5]
 8017890:	2200      	movs	r2, #0
 8017892:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	79db      	ldrb	r3, [r3, #7]
 8017898:	3301      	adds	r3, #1
 801789a:	b2da      	uxtb	r2, r3
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	79db      	ldrb	r3, [r3, #7]
 80178a4:	2b0d      	cmp	r3, #13
 80178a6:	d109      	bne.n	80178bc <gos_timeAddMilliseconds+0x1dc>
                        {
                            pTime->months = 1;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	2201      	movs	r2, #1
 80178ac:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	891b      	ldrh	r3, [r3, #8]
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	3301      	adds	r3, #1
 80178b6:	b29a      	uxth	r2, r3
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 80178bc:	2355      	movs	r3, #85	@ 0x55
 80178be:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 80178c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80178c2:	4618      	mov	r0, r3
 80178c4:	3714      	adds	r7, #20
 80178c6:	46bd      	mov	sp, r7
 80178c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178cc:	4770      	bx	lr
 80178ce:	bf00      	nop
 80178d0:	10624dd3 	.word	0x10624dd3
 80178d4:	88888889 	.word	0x88888889
 80178d8:	aaaaaaab 	.word	0xaaaaaaab
 80178dc:	0801d0d0 	.word	0x0801d0d0

080178e0 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 80178e0:	b480      	push	{r7}
 80178e2:	b087      	sub	sp, #28
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	60b9      	str	r1, [r7, #8]
 80178ea:	4613      	mov	r3, r2
 80178ec:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 80178ee:	23ae      	movs	r3, #174	@ 0xae
 80178f0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d063      	beq.n	80179c0 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	881b      	ldrh	r3, [r3, #0]
 80178fc:	b29a      	uxth	r2, r3
 80178fe:	88fb      	ldrh	r3, [r7, #6]
 8017900:	4413      	add	r3, r2
 8017902:	b29a      	uxth	r2, r3
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	881b      	ldrh	r3, [r3, #0]
 801790c:	b29b      	uxth	r3, r3
 801790e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017912:	d355      	bcc.n	80179c0 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	881b      	ldrh	r3, [r3, #0]
 8017918:	b29b      	uxth	r3, r3
 801791a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801791e:	b29a      	uxth	r2, r3
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	885b      	ldrh	r3, [r3, #2]
 8017928:	b29b      	uxth	r3, r3
 801792a:	3301      	adds	r3, #1
 801792c:	b29a      	uxth	r2, r3
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	885b      	ldrh	r3, [r3, #2]
 8017936:	b29b      	uxth	r3, r3
 8017938:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801793c:	d340      	bcc.n	80179c0 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	885b      	ldrh	r3, [r3, #2]
 8017942:	b29b      	uxth	r3, r3
 8017944:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8017948:	b29a      	uxth	r2, r3
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	791b      	ldrb	r3, [r3, #4]
 8017952:	3301      	adds	r3, #1
 8017954:	b2da      	uxtb	r2, r3
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	791b      	ldrb	r3, [r3, #4]
 801795e:	2b3b      	cmp	r3, #59	@ 0x3b
 8017960:	d92e      	bls.n	80179c0 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	791b      	ldrb	r3, [r3, #4]
 8017966:	3b3c      	subs	r3, #60	@ 0x3c
 8017968:	b2da      	uxtb	r2, r3
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	795b      	ldrb	r3, [r3, #5]
 8017972:	3301      	adds	r3, #1
 8017974:	b2da      	uxtb	r2, r3
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	795b      	ldrb	r3, [r3, #5]
 801797e:	2b3b      	cmp	r3, #59	@ 0x3b
 8017980:	d91e      	bls.n	80179c0 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	795b      	ldrb	r3, [r3, #5]
 8017986:	3b3c      	subs	r3, #60	@ 0x3c
 8017988:	b2da      	uxtb	r2, r3
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	799b      	ldrb	r3, [r3, #6]
 8017992:	3301      	adds	r3, #1
 8017994:	b2da      	uxtb	r2, r3
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	799b      	ldrb	r3, [r3, #6]
 801799e:	2b17      	cmp	r3, #23
 80179a0:	d90e      	bls.n	80179c0 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	799b      	ldrb	r3, [r3, #6]
 80179a6:	3b18      	subs	r3, #24
 80179a8:	b2da      	uxtb	r2, r3
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	3301      	adds	r3, #1
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d063      	beq.n	8017a8e <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 80179c6:	68bb      	ldr	r3, [r7, #8]
 80179c8:	881b      	ldrh	r3, [r3, #0]
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	88fb      	ldrh	r3, [r7, #6]
 80179ce:	4413      	add	r3, r2
 80179d0:	b29a      	uxth	r2, r3
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	881b      	ldrh	r3, [r3, #0]
 80179da:	b29b      	uxth	r3, r3
 80179dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80179e0:	d355      	bcc.n	8017a8e <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	881b      	ldrh	r3, [r3, #0]
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80179ec:	b29a      	uxth	r2, r3
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 80179f2:	68bb      	ldr	r3, [r7, #8]
 80179f4:	885b      	ldrh	r3, [r3, #2]
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	3301      	adds	r3, #1
 80179fa:	b29a      	uxth	r2, r3
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	885b      	ldrh	r3, [r3, #2]
 8017a04:	b29b      	uxth	r3, r3
 8017a06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017a0a:	d340      	bcc.n	8017a8e <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	885b      	ldrh	r3, [r3, #2]
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8017a16:	b29a      	uxth	r2, r3
 8017a18:	68bb      	ldr	r3, [r7, #8]
 8017a1a:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	791b      	ldrb	r3, [r3, #4]
 8017a20:	3301      	adds	r3, #1
 8017a22:	b2da      	uxtb	r2, r3
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	791b      	ldrb	r3, [r3, #4]
 8017a2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8017a2e:	d92e      	bls.n	8017a8e <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 8017a30:	68bb      	ldr	r3, [r7, #8]
 8017a32:	791b      	ldrb	r3, [r3, #4]
 8017a34:	3b3c      	subs	r3, #60	@ 0x3c
 8017a36:	b2da      	uxtb	r2, r3
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	795b      	ldrb	r3, [r3, #5]
 8017a40:	3301      	adds	r3, #1
 8017a42:	b2da      	uxtb	r2, r3
 8017a44:	68bb      	ldr	r3, [r7, #8]
 8017a46:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	795b      	ldrb	r3, [r3, #5]
 8017a4c:	2b3b      	cmp	r3, #59	@ 0x3b
 8017a4e:	d91e      	bls.n	8017a8e <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	795b      	ldrb	r3, [r3, #5]
 8017a54:	3b3c      	subs	r3, #60	@ 0x3c
 8017a56:	b2da      	uxtb	r2, r3
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	799b      	ldrb	r3, [r3, #6]
 8017a60:	3301      	adds	r3, #1
 8017a62:	b2da      	uxtb	r2, r3
 8017a64:	68bb      	ldr	r3, [r7, #8]
 8017a66:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	799b      	ldrb	r3, [r3, #6]
 8017a6c:	2b17      	cmp	r3, #23
 8017a6e:	d90e      	bls.n	8017a8e <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 8017a70:	68bb      	ldr	r3, [r7, #8]
 8017a72:	799b      	ldrb	r3, [r3, #6]
 8017a74:	3b18      	subs	r3, #24
 8017a76:	b2da      	uxtb	r2, r3
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 8017a7c:	68bb      	ldr	r3, [r7, #8]
 8017a7e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8017a82:	b29b      	uxth	r3, r3
 8017a84:	3301      	adds	r3, #1
 8017a86:	b29a      	uxth	r2, r3
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 8017a8e:	2355      	movs	r3, #85	@ 0x55
 8017a90:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 8017a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	371c      	adds	r7, #28
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9e:	4770      	bx	lr

08017aa0 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	460b      	mov	r3, r1
 8017aaa:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 8017aac:	23ae      	movs	r3, #174	@ 0xae
 8017aae:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	f000 808e 	beq.w	8017bd4 <gos_runTimeAddMilliseconds+0x134>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	885b      	ldrh	r3, [r3, #2]
 8017abc:	b29a      	uxth	r2, r3
 8017abe:	887b      	ldrh	r3, [r7, #2]
 8017ac0:	4413      	add	r3, r2
 8017ac2:	b29a      	uxth	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	885b      	ldrh	r3, [r3, #2]
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017ad2:	d37d      	bcc.n	8017bd0 <gos_runTimeAddMilliseconds+0x130>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	791a      	ldrb	r2, [r3, #4]
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	885b      	ldrh	r3, [r3, #2]
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	4941      	ldr	r1, [pc, #260]	@ (8017be4 <gos_runTimeAddMilliseconds+0x144>)
 8017ae0:	fba1 1303 	umull	r1, r3, r1, r3
 8017ae4:	099b      	lsrs	r3, r3, #6
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	b2db      	uxtb	r3, r3
 8017aea:	4413      	add	r3, r2
 8017aec:	b2da      	uxtb	r2, r3
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	885b      	ldrh	r3, [r3, #2]
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	4a3a      	ldr	r2, [pc, #232]	@ (8017be4 <gos_runTimeAddMilliseconds+0x144>)
 8017afa:	fba2 1203 	umull	r1, r2, r2, r3
 8017afe:	0992      	lsrs	r2, r2, #6
 8017b00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017b04:	fb01 f202 	mul.w	r2, r1, r2
 8017b08:	1a9b      	subs	r3, r3, r2
 8017b0a:	b29a      	uxth	r2, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	791b      	ldrb	r3, [r3, #4]
 8017b14:	2b3b      	cmp	r3, #59	@ 0x3b
 8017b16:	d95b      	bls.n	8017bd0 <gos_runTimeAddMilliseconds+0x130>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	795a      	ldrb	r2, [r3, #5]
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	791b      	ldrb	r3, [r3, #4]
 8017b20:	4931      	ldr	r1, [pc, #196]	@ (8017be8 <gos_runTimeAddMilliseconds+0x148>)
 8017b22:	fba1 1303 	umull	r1, r3, r1, r3
 8017b26:	095b      	lsrs	r3, r3, #5
 8017b28:	b2db      	uxtb	r3, r3
 8017b2a:	4413      	add	r3, r2
 8017b2c:	b2da      	uxtb	r2, r3
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	791a      	ldrb	r2, [r3, #4]
 8017b36:	4b2c      	ldr	r3, [pc, #176]	@ (8017be8 <gos_runTimeAddMilliseconds+0x148>)
 8017b38:	fba3 1302 	umull	r1, r3, r3, r2
 8017b3c:	0959      	lsrs	r1, r3, #5
 8017b3e:	460b      	mov	r3, r1
 8017b40:	011b      	lsls	r3, r3, #4
 8017b42:	1a5b      	subs	r3, r3, r1
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	1ad3      	subs	r3, r2, r3
 8017b48:	b2da      	uxtb	r2, r3
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	795b      	ldrb	r3, [r3, #5]
 8017b52:	2b3b      	cmp	r3, #59	@ 0x3b
 8017b54:	d93c      	bls.n	8017bd0 <gos_runTimeAddMilliseconds+0x130>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	799a      	ldrb	r2, [r3, #6]
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	795b      	ldrb	r3, [r3, #5]
 8017b5e:	4922      	ldr	r1, [pc, #136]	@ (8017be8 <gos_runTimeAddMilliseconds+0x148>)
 8017b60:	fba1 1303 	umull	r1, r3, r1, r3
 8017b64:	095b      	lsrs	r3, r3, #5
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	4413      	add	r3, r2
 8017b6a:	b2da      	uxtb	r2, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	795a      	ldrb	r2, [r3, #5]
 8017b74:	4b1c      	ldr	r3, [pc, #112]	@ (8017be8 <gos_runTimeAddMilliseconds+0x148>)
 8017b76:	fba3 1302 	umull	r1, r3, r3, r2
 8017b7a:	0959      	lsrs	r1, r3, #5
 8017b7c:	460b      	mov	r3, r1
 8017b7e:	011b      	lsls	r3, r3, #4
 8017b80:	1a5b      	subs	r3, r3, r1
 8017b82:	009b      	lsls	r3, r3, #2
 8017b84:	1ad3      	subs	r3, r2, r3
 8017b86:	b2da      	uxtb	r2, r3
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	799b      	ldrb	r3, [r3, #6]
 8017b90:	2b17      	cmp	r3, #23
 8017b92:	d91d      	bls.n	8017bd0 <gos_runTimeAddMilliseconds+0x130>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	687a      	ldr	r2, [r7, #4]
 8017b9e:	7992      	ldrb	r2, [r2, #6]
 8017ba0:	4912      	ldr	r1, [pc, #72]	@ (8017bec <gos_runTimeAddMilliseconds+0x14c>)
 8017ba2:	fba1 1202 	umull	r1, r2, r1, r2
 8017ba6:	0912      	lsrs	r2, r2, #4
 8017ba8:	b2d2      	uxtb	r2, r2
 8017baa:	4413      	add	r3, r2
 8017bac:	b29a      	uxth	r2, r3
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	799a      	ldrb	r2, [r3, #6]
 8017bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8017bec <gos_runTimeAddMilliseconds+0x14c>)
 8017bba:	fba3 1302 	umull	r1, r3, r3, r2
 8017bbe:	0919      	lsrs	r1, r3, #4
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	005b      	lsls	r3, r3, #1
 8017bc4:	440b      	add	r3, r1
 8017bc6:	00db      	lsls	r3, r3, #3
 8017bc8:	1ad3      	subs	r3, r2, r3
 8017bca:	b2da      	uxtb	r2, r3
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 8017bd0:	2355      	movs	r3, #85	@ 0x55
 8017bd2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 8017bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3714      	adds	r7, #20
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be0:	4770      	bx	lr
 8017be2:	bf00      	nop
 8017be4:	10624dd3 	.word	0x10624dd3
 8017be8:	88888889 	.word	0x88888889
 8017bec:	aaaaaaab 	.word	0xaaaaaaab

08017bf0 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b084      	sub	sp, #16
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 8017bfa:	23ae      	movs	r3, #174	@ 0xae
 8017bfc:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 8017bfe:	88fb      	ldrh	r3, [r7, #6]
 8017c00:	4619      	mov	r1, r3
 8017c02:	480a      	ldr	r0, [pc, #40]	@ (8017c2c <gos_timeIncreaseSystemTime+0x3c>)
 8017c04:	f7ff ff4c 	bl	8017aa0 <gos_runTimeAddMilliseconds>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	2b55      	cmp	r3, #85	@ 0x55
 8017c0c:	d109      	bne.n	8017c22 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 8017c0e:	88fb      	ldrh	r3, [r7, #6]
 8017c10:	4619      	mov	r1, r3
 8017c12:	4807      	ldr	r0, [pc, #28]	@ (8017c30 <gos_timeIncreaseSystemTime+0x40>)
 8017c14:	f7ff fd64 	bl	80176e0 <gos_timeAddMilliseconds>
 8017c18:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 8017c1a:	2b55      	cmp	r3, #85	@ 0x55
 8017c1c:	d101      	bne.n	8017c22 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 8017c1e:	2355      	movs	r3, #85	@ 0x55
 8017c20:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 8017c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3710      	adds	r7, #16
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	200098e0 	.word	0x200098e0
 8017c30:	2000126c 	.word	0x2000126c

08017c34 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b084      	sub	sp, #16
 8017c38:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 8017c3a:	1d3b      	adds	r3, r7, #4
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	601a      	str	r2, [r3, #0]
 8017c40:	605a      	str	r2, [r3, #4]
 8017c42:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 8017c44:	4b27      	ldr	r3, [pc, #156]	@ (8017ce4 <gos_timeDaemonTask+0xb0>)
 8017c46:	789a      	ldrb	r2, [r3, #2]
 8017c48:	79bb      	ldrb	r3, [r7, #6]
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	d905      	bls.n	8017c5a <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 8017c4e:	4b26      	ldr	r3, [pc, #152]	@ (8017ce8 <gos_timeDaemonTask+0xb4>)
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	2100      	movs	r1, #0
 8017c54:	4618      	mov	r0, r3
 8017c56:	f7fe ff59 	bl	8016b0c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 8017c5a:	4b22      	ldr	r3, [pc, #136]	@ (8017ce4 <gos_timeDaemonTask+0xb0>)
 8017c5c:	78da      	ldrb	r2, [r3, #3]
 8017c5e:	79fb      	ldrb	r3, [r7, #7]
 8017c60:	429a      	cmp	r2, r3
 8017c62:	d905      	bls.n	8017c70 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 8017c64:	4b20      	ldr	r3, [pc, #128]	@ (8017ce8 <gos_timeDaemonTask+0xb4>)
 8017c66:	781b      	ldrb	r3, [r3, #0]
 8017c68:	2101      	movs	r1, #1
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7fe ff4e 	bl	8016b0c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 8017c70:	4b1c      	ldr	r3, [pc, #112]	@ (8017ce4 <gos_timeDaemonTask+0xb0>)
 8017c72:	791a      	ldrb	r2, [r3, #4]
 8017c74:	7a3b      	ldrb	r3, [r7, #8]
 8017c76:	429a      	cmp	r2, r3
 8017c78:	d905      	bls.n	8017c86 <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 8017c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8017ce8 <gos_timeDaemonTask+0xb4>)
 8017c7c:	781b      	ldrb	r3, [r3, #0]
 8017c7e:	2102      	movs	r1, #2
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7fe ff43 	bl	8016b0c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 8017c86:	4b17      	ldr	r3, [pc, #92]	@ (8017ce4 <gos_timeDaemonTask+0xb0>)
 8017c88:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d905      	bls.n	8017ca4 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 8017c98:	4b13      	ldr	r3, [pc, #76]	@ (8017ce8 <gos_timeDaemonTask+0xb4>)
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	2103      	movs	r1, #3
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fe ff34 	bl	8016b0c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 8017ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8017ce4 <gos_timeDaemonTask+0xb0>)
 8017ca6:	79da      	ldrb	r2, [r3, #7]
 8017ca8:	7afb      	ldrb	r3, [r7, #11]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d905      	bls.n	8017cba <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 8017cae:	4b0e      	ldr	r3, [pc, #56]	@ (8017ce8 <gos_timeDaemonTask+0xb4>)
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	2104      	movs	r1, #4
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f7fe ff29 	bl	8016b0c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 8017cba:	4b0a      	ldr	r3, [pc, #40]	@ (8017ce4 <gos_timeDaemonTask+0xb0>)
 8017cbc:	891a      	ldrh	r2, [r3, #8]
 8017cbe:	89bb      	ldrh	r3, [r7, #12]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d905      	bls.n	8017cd0 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 8017cc4:	4b08      	ldr	r3, [pc, #32]	@ (8017ce8 <gos_timeDaemonTask+0xb4>)
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	2105      	movs	r1, #5
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7fe ff1e 	bl	8016b0c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 8017cd0:	1d3b      	adds	r3, r7, #4
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f7ff fcac 	bl	8017630 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 8017cd8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8017cdc:	f7fb fe86 	bl	80139ec <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 8017ce0:	e7b0      	b.n	8017c44 <gos_timeDaemonTask+0x10>
 8017ce2:	bf00      	nop
 8017ce4:	2000126c 	.word	0x2000126c
 8017ce8:	200098ec 	.word	0x200098ec

08017cec <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 8017cf2:	2355      	movs	r3, #85	@ 0x55
 8017cf4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 8017cf6:	480d      	ldr	r0, [pc, #52]	@ (8017d2c <gos_traceInit+0x40>)
 8017cf8:	f7fe fc04 	bl	8016504 <gos_queueCreate>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b55      	cmp	r3, #85	@ 0x55
 8017d00:	d10c      	bne.n	8017d1c <gos_traceInit+0x30>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8017d02:	2100      	movs	r1, #0
 8017d04:	480a      	ldr	r0, [pc, #40]	@ (8017d30 <gos_traceInit+0x44>)
 8017d06:	f7fb fcdf 	bl	80136c8 <gos_taskRegister>
 8017d0a:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 8017d0c:	2b55      	cmp	r3, #85	@ 0x55
 8017d0e:	d105      	bne.n	8017d1c <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 8017d10:	4808      	ldr	r0, [pc, #32]	@ (8017d34 <gos_traceInit+0x48>)
 8017d12:	f7fe fa19 	bl	8016148 <gos_mutexInit>
 8017d16:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8017d18:	2b55      	cmp	r3, #85	@ 0x55
 8017d1a:	d001      	beq.n	8017d20 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 8017d1c:	23ae      	movs	r3, #174	@ 0xae
 8017d1e:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 8017d20:	79fb      	ldrb	r3, [r7, #7]
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3708      	adds	r7, #8
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	200012e4 	.word	0x200012e4
 8017d30:	20001300 	.word	0x20001300
 8017d34:	20009aac 	.word	0x20009aac

08017d38 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 8017d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d3a:	b0a9      	sub	sp, #164	@ 0xa4
 8017d3c:	af06      	add	r7, sp, #24
 8017d3e:	4603      	mov	r3, r0
 8017d40:	6039      	str	r1, [r7, #0]
 8017d42:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 8017d44:	23ae      	movs	r3, #174	@ 0xae
 8017d46:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8017d4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017d4e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8017d52:	f107 0318 	add.w	r3, r7, #24
 8017d56:	226a      	movs	r2, #106	@ 0x6a
 8017d58:	2100      	movs	r1, #0
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f001 fa8e 	bl	801927c <memset>
    gos_time_t               sysTime        = {0};
 8017d60:	f107 030c 	add.w	r3, r7, #12
 8017d64:	2200      	movs	r2, #0
 8017d66:	601a      	str	r2, [r3, #0]
 8017d68:	605a      	str	r2, [r3, #4]
 8017d6a:	811a      	strh	r2, [r3, #8]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	f000 80e6 	beq.w	8017f44 <gos_traceTrace+0x20c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8017d78:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fd f849 	bl	8014e14 <gos_taskGetCurrentId>
 8017d82:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 8017d84:	2b55      	cmp	r3, #85	@ 0x55
 8017d86:	f040 80dd 	bne.w	8017f44 <gos_traceTrace+0x20c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8017d8a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8017d8e:	f107 0218 	add.w	r2, r7, #24
 8017d92:	4611      	mov	r1, r2
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7fd f899 	bl	8014ecc <gos_taskGetData>
 8017d9a:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8017d9c:	2b55      	cmp	r3, #85	@ 0x55
 8017d9e:	f040 80d1 	bne.w	8017f44 <gos_traceTrace+0x20c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8017da2:	8c3b      	ldrh	r3, [r7, #32]
 8017da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d105      	bne.n	8017db8 <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8017dac:	f7fb f96c 	bl	8013088 <gos_kernelIsCallerIsr>
 8017db0:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8017db2:	2b36      	cmp	r3, #54	@ 0x36
 8017db4:	f040 80c6 	bne.w	8017f44 <gos_traceTrace+0x20c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8017db8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8017dbc:	4864      	ldr	r0, [pc, #400]	@ (8017f50 <gos_traceTrace+0x218>)
 8017dbe:	f7fe f9dd 	bl	801617c <gos_mutexLock>
 8017dc2:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8017dc4:	2b55      	cmp	r3, #85	@ 0x55
 8017dc6:	f040 80bd 	bne.w	8017f44 <gos_traceTrace+0x20c>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 8017dca:	2355      	movs	r3, #85	@ 0x55
 8017dcc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        if (addTimeStamp == GOS_TRUE)
 8017dd0:	79fb      	ldrb	r3, [r7, #7]
 8017dd2:	2b36      	cmp	r3, #54	@ 0x36
 8017dd4:	d137      	bne.n	8017e46 <gos_traceTrace+0x10e>
        {
            traceResult &= gos_timeGet(&sysTime);
 8017dd6:	f107 030c 	add.w	r3, r7, #12
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f7ff fc28 	bl	8017630 <gos_timeGet>
 8017de0:	4603      	mov	r3, r0
 8017de2:	461a      	mov	r2, r3
 8017de4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017de8:	4013      	ands	r3, r2
 8017dea:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8017dee:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8017df0:	461d      	mov	r5, r3
                    sysTime.months,
 8017df2:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8017df4:	461e      	mov	r6, r3
                    sysTime.days,
 8017df6:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8017dfa:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8017dfc:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 8017dfe:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 8017e00:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 8017e02:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8017e04:	9404      	str	r4, [sp, #16]
 8017e06:	9003      	str	r0, [sp, #12]
 8017e08:	9102      	str	r1, [sp, #8]
 8017e0a:	9201      	str	r2, [sp, #4]
 8017e0c:	9300      	str	r3, [sp, #0]
 8017e0e:	4633      	mov	r3, r6
 8017e10:	462a      	mov	r2, r5
 8017e12:	4950      	ldr	r1, [pc, #320]	@ (8017f54 <gos_traceTrace+0x21c>)
 8017e14:	4850      	ldr	r0, [pc, #320]	@ (8017f58 <gos_traceTrace+0x220>)
 8017e16:	f001 f9ad 	bl	8019174 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 8017e1a:	4b50      	ldr	r3, [pc, #320]	@ (8017f5c <gos_traceTrace+0x224>)
 8017e1c:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8017e1e:	484e      	ldr	r0, [pc, #312]	@ (8017f58 <gos_traceTrace+0x220>)
 8017e20:	f7ec f95e 	bl	80040e0 <strlen>
 8017e24:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	3301      	adds	r3, #1
 8017e2a:	b2da      	uxtb	r2, r3
 8017e2c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017e30:	4949      	ldr	r1, [pc, #292]	@ (8017f58 <gos_traceTrace+0x220>)
 8017e32:	4620      	mov	r0, r4
 8017e34:	f7fe fbc2 	bl	80165bc <gos_queuePut>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	461a      	mov	r2, r3
 8017e3c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017e40:	4013      	ands	r3, r2
 8017e42:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 8017e46:	4b45      	ldr	r3, [pc, #276]	@ (8017f5c <gos_traceTrace+0x224>)
 8017e48:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 8017e4a:	6838      	ldr	r0, [r7, #0]
 8017e4c:	f7ec f948 	bl	80040e0 <strlen>
 8017e50:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8017e52:	b2db      	uxtb	r3, r3
 8017e54:	3301      	adds	r3, #1
 8017e56:	b2da      	uxtb	r2, r3
 8017e58:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017e5c:	6839      	ldr	r1, [r7, #0]
 8017e5e:	4620      	mov	r0, r4
 8017e60:	f7fe fbac 	bl	80165bc <gos_queuePut>
 8017e64:	4603      	mov	r3, r0
 8017e66:	461a      	mov	r2, r3
 8017e68:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017e6c:	4013      	ands	r3, r2
 8017e6e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8017e72:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017e76:	2b55      	cmp	r3, #85	@ 0x55
 8017e78:	d002      	beq.n	8017e80 <gos_traceTrace+0x148>
        {
            traceResult = GOS_ERROR;
 8017e7a:	23ae      	movs	r3, #174	@ 0xae
 8017e7c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 8017e80:	4b37      	ldr	r3, [pc, #220]	@ (8017f60 <gos_traceTrace+0x228>)
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d108      	bne.n	8017e9a <gos_traceTrace+0x162>
 8017e88:	b672      	cpsid	i
 8017e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8017e8e:	4a35      	ldr	r2, [pc, #212]	@ (8017f64 <gos_traceTrace+0x22c>)
 8017e90:	6013      	str	r3, [r2, #0]
 8017e92:	f3bf 8f4f 	dsb	sy
 8017e96:	f3bf 8f6f 	isb	sy
 8017e9a:	4b31      	ldr	r3, [pc, #196]	@ (8017f60 <gos_traceTrace+0x228>)
 8017e9c:	781b      	ldrb	r3, [r3, #0]
 8017e9e:	3301      	adds	r3, #1
 8017ea0:	b2da      	uxtb	r2, r3
 8017ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8017f60 <gos_traceTrace+0x228>)
 8017ea4:	701a      	strb	r2, [r3, #0]
 8017ea6:	4b30      	ldr	r3, [pc, #192]	@ (8017f68 <gos_traceTrace+0x230>)
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	3301      	adds	r3, #1
 8017eac:	b2da      	uxtb	r2, r3
 8017eae:	4b2e      	ldr	r3, [pc, #184]	@ (8017f68 <gos_traceTrace+0x230>)
 8017eb0:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8017eb2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8017eb6:	f107 020a 	add.w	r2, r7, #10
 8017eba:	4611      	mov	r1, r2
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f7fc ff39 	bl	8014d34 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8017ec2:	897b      	ldrh	r3, [r7, #10]
 8017ec4:	b21b      	sxth	r3, r3
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	db13      	blt.n	8017ef2 <gos_traceTrace+0x1ba>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8017eca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8017ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7fc fdca 	bl	8014a6c <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8017ed8:	4b24      	ldr	r3, [pc, #144]	@ (8017f6c <gos_traceTrace+0x234>)
 8017eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017edc:	4618      	mov	r0, r3
 8017ede:	f7fb ffff 	bl	8013ee0 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8017ee2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8017ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7fc fe36 	bl	8014b5c <gos_taskRemovePrivilege>
 8017ef0:	e004      	b.n	8017efc <gos_traceTrace+0x1c4>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8017ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8017f6c <gos_traceTrace+0x234>)
 8017ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7fb fff2 	bl	8013ee0 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8017efc:	4b18      	ldr	r3, [pc, #96]	@ (8017f60 <gos_traceTrace+0x228>)
 8017efe:	781b      	ldrb	r3, [r3, #0]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d005      	beq.n	8017f10 <gos_traceTrace+0x1d8>
 8017f04:	4b16      	ldr	r3, [pc, #88]	@ (8017f60 <gos_traceTrace+0x228>)
 8017f06:	781b      	ldrb	r3, [r3, #0]
 8017f08:	3b01      	subs	r3, #1
 8017f0a:	b2da      	uxtb	r2, r3
 8017f0c:	4b14      	ldr	r3, [pc, #80]	@ (8017f60 <gos_traceTrace+0x228>)
 8017f0e:	701a      	strb	r2, [r3, #0]
 8017f10:	4b13      	ldr	r3, [pc, #76]	@ (8017f60 <gos_traceTrace+0x228>)
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d108      	bne.n	8017f2a <gos_traceTrace+0x1f2>
 8017f18:	4b12      	ldr	r3, [pc, #72]	@ (8017f64 <gos_traceTrace+0x22c>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f383 8810 	msr	PRIMASK, r3
 8017f20:	b662      	cpsie	i
 8017f22:	f3bf 8f4f 	dsb	sy
 8017f26:	f3bf 8f6f 	isb	sy
 8017f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8017f68 <gos_traceTrace+0x230>)
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d005      	beq.n	8017f3e <gos_traceTrace+0x206>
 8017f32:	4b0d      	ldr	r3, [pc, #52]	@ (8017f68 <gos_traceTrace+0x230>)
 8017f34:	781b      	ldrb	r3, [r3, #0]
 8017f36:	3b01      	subs	r3, #1
 8017f38:	b2da      	uxtb	r2, r3
 8017f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8017f68 <gos_traceTrace+0x230>)
 8017f3c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8017f3e:	4804      	ldr	r0, [pc, #16]	@ (8017f50 <gos_traceTrace+0x218>)
 8017f40:	f7fe fa22 	bl	8016388 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8017f44:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	378c      	adds	r7, #140	@ 0x8c
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f50:	20009aac 	.word	0x20009aac
 8017f54:	0801ca48 	.word	0x0801ca48
 8017f58:	20009a80 	.word	0x20009a80
 8017f5c:	200012e4 	.word	0x200012e4
 8017f60:	200061bb 	.word	0x200061bb
 8017f64:	200061bc 	.word	0x200061bc
 8017f68:	200061b9 	.word	0x200061b9
 8017f6c:	20001300 	.word	0x20001300

08017f70 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 8017f70:	b40e      	push	{r1, r2, r3}
 8017f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f74:	b0aa      	sub	sp, #168	@ 0xa8
 8017f76:	af06      	add	r7, sp, #24
 8017f78:	4603      	mov	r3, r0
 8017f7a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8017f7c:	2355      	movs	r3, #85	@ 0x55
 8017f7e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8017f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017f86:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8017f8a:	f107 0320 	add.w	r3, r7, #32
 8017f8e:	226a      	movs	r2, #106	@ 0x6a
 8017f90:	2100      	movs	r1, #0
 8017f92:	4618      	mov	r0, r3
 8017f94:	f001 f972 	bl	801927c <memset>
    gos_time_t               sysTime        = {0};
 8017f98:	f107 0314 	add.w	r3, r7, #20
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	601a      	str	r2, [r3, #0]
 8017fa0:	605a      	str	r2, [r3, #4]
 8017fa2:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 8017fa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	f000 80ed 	beq.w	801818c <gos_traceTraceFormatted+0x21c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8017fb2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7fc ff2c 	bl	8014e14 <gos_taskGetCurrentId>
 8017fbc:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 8017fbe:	2b55      	cmp	r3, #85	@ 0x55
 8017fc0:	f040 80e4 	bne.w	801818c <gos_traceTraceFormatted+0x21c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8017fc4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8017fc8:	f107 0220 	add.w	r2, r7, #32
 8017fcc:	4611      	mov	r1, r2
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fc ff7c 	bl	8014ecc <gos_taskGetData>
 8017fd4:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8017fd6:	2b55      	cmp	r3, #85	@ 0x55
 8017fd8:	f040 80d8 	bne.w	801818c <gos_traceTraceFormatted+0x21c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8017fdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d105      	bne.n	8017ff2 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8017fe6:	f7fb f84f 	bl	8013088 <gos_kernelIsCallerIsr>
 8017fea:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8017fec:	2b36      	cmp	r3, #54	@ 0x36
 8017fee:	f040 80cd 	bne.w	801818c <gos_traceTraceFormatted+0x21c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8017ff2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8017ff6:	486b      	ldr	r0, [pc, #428]	@ (80181a4 <gos_traceTraceFormatted+0x234>)
 8017ff8:	f7fe f8c0 	bl	801617c <gos_mutexLock>
 8017ffc:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8017ffe:	2b55      	cmp	r3, #85	@ 0x55
 8018000:	f040 80c4 	bne.w	801818c <gos_traceTraceFormatted+0x21c>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8018004:	79fb      	ldrb	r3, [r7, #7]
 8018006:	2b36      	cmp	r3, #54	@ 0x36
 8018008:	d137      	bne.n	801807a <gos_traceTraceFormatted+0x10a>
        {
            traceResult &= gos_timeGet(&sysTime);
 801800a:	f107 0314 	add.w	r3, r7, #20
 801800e:	4618      	mov	r0, r3
 8018010:	f7ff fb0e 	bl	8017630 <gos_timeGet>
 8018014:	4603      	mov	r3, r0
 8018016:	461a      	mov	r2, r3
 8018018:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801801c:	4013      	ands	r3, r2
 801801e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8018022:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8018024:	461d      	mov	r5, r3
                    sysTime.months,
 8018026:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8018028:	461e      	mov	r6, r3
                    sysTime.days,
 801802a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 801802e:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8018030:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 8018032:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 8018034:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 8018036:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8018038:	9404      	str	r4, [sp, #16]
 801803a:	9003      	str	r0, [sp, #12]
 801803c:	9102      	str	r1, [sp, #8]
 801803e:	9201      	str	r2, [sp, #4]
 8018040:	9300      	str	r3, [sp, #0]
 8018042:	4633      	mov	r3, r6
 8018044:	462a      	mov	r2, r5
 8018046:	4958      	ldr	r1, [pc, #352]	@ (80181a8 <gos_traceTraceFormatted+0x238>)
 8018048:	4858      	ldr	r0, [pc, #352]	@ (80181ac <gos_traceTraceFormatted+0x23c>)
 801804a:	f001 f893 	bl	8019174 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 801804e:	4b58      	ldr	r3, [pc, #352]	@ (80181b0 <gos_traceTraceFormatted+0x240>)
 8018050:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8018052:	4856      	ldr	r0, [pc, #344]	@ (80181ac <gos_traceTraceFormatted+0x23c>)
 8018054:	f7ec f844 	bl	80040e0 <strlen>
 8018058:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 801805a:	b2db      	uxtb	r3, r3
 801805c:	3301      	adds	r3, #1
 801805e:	b2da      	uxtb	r2, r3
 8018060:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018064:	4951      	ldr	r1, [pc, #324]	@ (80181ac <gos_traceTraceFormatted+0x23c>)
 8018066:	4620      	mov	r0, r4
 8018068:	f7fe faa8 	bl	80165bc <gos_queuePut>
 801806c:	4603      	mov	r3, r0
 801806e:	461a      	mov	r2, r3
 8018070:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8018074:	4013      	ands	r3, r2
 8018076:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 801807a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801807e:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8018080:	693a      	ldr	r2, [r7, #16]
 8018082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018086:	484b      	ldr	r0, [pc, #300]	@ (80181b4 <gos_traceTraceFormatted+0x244>)
 8018088:	f001 f8ee 	bl	8019268 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 801808c:	4b48      	ldr	r3, [pc, #288]	@ (80181b0 <gos_traceTraceFormatted+0x240>)
 801808e:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 8018090:	4848      	ldr	r0, [pc, #288]	@ (80181b4 <gos_traceTraceFormatted+0x244>)
 8018092:	f7ec f825 	bl	80040e0 <strlen>
 8018096:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8018098:	b2db      	uxtb	r3, r3
 801809a:	3301      	adds	r3, #1
 801809c:	b2da      	uxtb	r2, r3
 801809e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80180a2:	4944      	ldr	r1, [pc, #272]	@ (80181b4 <gos_traceTraceFormatted+0x244>)
 80180a4:	4620      	mov	r0, r4
 80180a6:	f7fe fa89 	bl	80165bc <gos_queuePut>
 80180aa:	4603      	mov	r3, r0
 80180ac:	461a      	mov	r2, r3
 80180ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80180b2:	4013      	ands	r3, r2
 80180b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 80180b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80180bc:	2b55      	cmp	r3, #85	@ 0x55
 80180be:	d002      	beq.n	80180c6 <gos_traceTraceFormatted+0x156>
        {
            traceResult = GOS_ERROR;
 80180c0:	23ae      	movs	r3, #174	@ 0xae
 80180c2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 80180c6:	4b3c      	ldr	r3, [pc, #240]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 80180c8:	781b      	ldrb	r3, [r3, #0]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d108      	bne.n	80180e0 <gos_traceTraceFormatted+0x170>
 80180ce:	b672      	cpsid	i
 80180d0:	f3ef 8310 	mrs	r3, PRIMASK
 80180d4:	4a39      	ldr	r2, [pc, #228]	@ (80181bc <gos_traceTraceFormatted+0x24c>)
 80180d6:	6013      	str	r3, [r2, #0]
 80180d8:	f3bf 8f4f 	dsb	sy
 80180dc:	f3bf 8f6f 	isb	sy
 80180e0:	4b35      	ldr	r3, [pc, #212]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 80180e2:	781b      	ldrb	r3, [r3, #0]
 80180e4:	3301      	adds	r3, #1
 80180e6:	b2da      	uxtb	r2, r3
 80180e8:	4b33      	ldr	r3, [pc, #204]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 80180ea:	701a      	strb	r2, [r3, #0]
 80180ec:	4b34      	ldr	r3, [pc, #208]	@ (80181c0 <gos_traceTraceFormatted+0x250>)
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	3301      	adds	r3, #1
 80180f2:	b2da      	uxtb	r2, r3
 80180f4:	4b32      	ldr	r3, [pc, #200]	@ (80181c0 <gos_traceTraceFormatted+0x250>)
 80180f6:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 80180f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80180fc:	f107 020e 	add.w	r2, r7, #14
 8018100:	4611      	mov	r1, r2
 8018102:	4618      	mov	r0, r3
 8018104:	f7fc fe16 	bl	8014d34 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8018108:	89fb      	ldrh	r3, [r7, #14]
 801810a:	b21b      	sxth	r3, r3
 801810c:	2b00      	cmp	r3, #0
 801810e:	db13      	blt.n	8018138 <gos_traceTraceFormatted+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8018110:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8018114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8018118:	4618      	mov	r0, r3
 801811a:	f7fc fca7 	bl	8014a6c <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 801811e:	4b29      	ldr	r3, [pc, #164]	@ (80181c4 <gos_traceTraceFormatted+0x254>)
 8018120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018122:	4618      	mov	r0, r3
 8018124:	f7fb fedc 	bl	8013ee0 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8018128:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 801812c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8018130:	4618      	mov	r0, r3
 8018132:	f7fc fd13 	bl	8014b5c <gos_taskRemovePrivilege>
 8018136:	e004      	b.n	8018142 <gos_traceTraceFormatted+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8018138:	4b22      	ldr	r3, [pc, #136]	@ (80181c4 <gos_traceTraceFormatted+0x254>)
 801813a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801813c:	4618      	mov	r0, r3
 801813e:	f7fb fecf 	bl	8013ee0 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8018142:	4b1d      	ldr	r3, [pc, #116]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 8018144:	781b      	ldrb	r3, [r3, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d005      	beq.n	8018156 <gos_traceTraceFormatted+0x1e6>
 801814a:	4b1b      	ldr	r3, [pc, #108]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	3b01      	subs	r3, #1
 8018150:	b2da      	uxtb	r2, r3
 8018152:	4b19      	ldr	r3, [pc, #100]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 8018154:	701a      	strb	r2, [r3, #0]
 8018156:	4b18      	ldr	r3, [pc, #96]	@ (80181b8 <gos_traceTraceFormatted+0x248>)
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d108      	bne.n	8018170 <gos_traceTraceFormatted+0x200>
 801815e:	4b17      	ldr	r3, [pc, #92]	@ (80181bc <gos_traceTraceFormatted+0x24c>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	f383 8810 	msr	PRIMASK, r3
 8018166:	b662      	cpsie	i
 8018168:	f3bf 8f4f 	dsb	sy
 801816c:	f3bf 8f6f 	isb	sy
 8018170:	4b13      	ldr	r3, [pc, #76]	@ (80181c0 <gos_traceTraceFormatted+0x250>)
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d005      	beq.n	8018184 <gos_traceTraceFormatted+0x214>
 8018178:	4b11      	ldr	r3, [pc, #68]	@ (80181c0 <gos_traceTraceFormatted+0x250>)
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	3b01      	subs	r3, #1
 801817e:	b2da      	uxtb	r2, r3
 8018180:	4b0f      	ldr	r3, [pc, #60]	@ (80181c0 <gos_traceTraceFormatted+0x250>)
 8018182:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8018184:	4807      	ldr	r0, [pc, #28]	@ (80181a4 <gos_traceTraceFormatted+0x234>)
 8018186:	f7fe f8ff 	bl	8016388 <gos_mutexUnlock>
 801818a:	e002      	b.n	8018192 <gos_traceTraceFormatted+0x222>
    }
    else
    {
        traceResult = GOS_ERROR;
 801818c:	23ae      	movs	r3, #174	@ 0xae
 801818e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return traceResult;
 8018192:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8018196:	4618      	mov	r0, r3
 8018198:	3790      	adds	r7, #144	@ 0x90
 801819a:	46bd      	mov	sp, r7
 801819c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80181a0:	b003      	add	sp, #12
 80181a2:	4770      	bx	lr
 80181a4:	20009aac 	.word	0x20009aac
 80181a8:	0801ca48 	.word	0x0801ca48
 80181ac:	20009a80 	.word	0x20009a80
 80181b0:	200012e4 	.word	0x200012e4
 80181b4:	200099b8 	.word	0x200099b8
 80181b8:	200061bb 	.word	0x200061bb
 80181bc:	200061bc 	.word	0x200061bc
 80181c0:	200061b9 	.word	0x200061b9
 80181c4:	20001300 	.word	0x20001300

080181c8 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 80181c8:	b40f      	push	{r0, r1, r2, r3}
 80181ca:	b580      	push	{r7, lr}
 80181cc:	b082      	sub	sp, #8
 80181ce:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 80181d0:	23ae      	movs	r3, #174	@ 0xae
 80181d2:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d01c      	beq.n	8018214 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 80181da:	4b12      	ldr	r3, [pc, #72]	@ (8018224 <gos_traceTraceFormattedUnsafe+0x5c>)
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	3301      	adds	r3, #1
 80181e0:	b2da      	uxtb	r2, r3
 80181e2:	4b10      	ldr	r3, [pc, #64]	@ (8018224 <gos_traceTraceFormattedUnsafe+0x5c>)
 80181e4:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 80181e6:	f107 0314 	add.w	r3, r7, #20
 80181ea:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 80181ec:	683a      	ldr	r2, [r7, #0]
 80181ee:	6939      	ldr	r1, [r7, #16]
 80181f0:	480d      	ldr	r0, [pc, #52]	@ (8018228 <gos_traceTraceFormattedUnsafe+0x60>)
 80181f2:	f001 f839 	bl	8019268 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 80181f6:	480c      	ldr	r0, [pc, #48]	@ (8018228 <gos_traceTraceFormattedUnsafe+0x60>)
 80181f8:	f7fa f8a8 	bl	801234c <gos_traceDriverTransmitString_Unsafe>
 80181fc:	4603      	mov	r3, r0
 80181fe:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8018200:	4b08      	ldr	r3, [pc, #32]	@ (8018224 <gos_traceTraceFormattedUnsafe+0x5c>)
 8018202:	781b      	ldrb	r3, [r3, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d005      	beq.n	8018214 <gos_traceTraceFormattedUnsafe+0x4c>
 8018208:	4b06      	ldr	r3, [pc, #24]	@ (8018224 <gos_traceTraceFormattedUnsafe+0x5c>)
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	3b01      	subs	r3, #1
 801820e:	b2da      	uxtb	r2, r3
 8018210:	4b04      	ldr	r3, [pc, #16]	@ (8018224 <gos_traceTraceFormattedUnsafe+0x5c>)
 8018212:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8018214:	79fb      	ldrb	r3, [r7, #7]
}
 8018216:	4618      	mov	r0, r3
 8018218:	3708      	adds	r7, #8
 801821a:	46bd      	mov	sp, r7
 801821c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018220:	b004      	add	sp, #16
 8018222:	4770      	bx	lr
 8018224:	200061b9 	.word	0x200061b9
 8018228:	200099b8 	.word	0x200099b8

0801822c <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8018230:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8018234:	480e      	ldr	r0, [pc, #56]	@ (8018270 <gos_traceDaemonTask+0x44>)
 8018236:	f7fd ffa1 	bl	801617c <gos_mutexLock>
 801823a:	4603      	mov	r3, r0
 801823c:	2b55      	cmp	r3, #85	@ 0x55
 801823e:	d10e      	bne.n	801825e <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8018240:	e002      	b.n	8018248 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 8018242:	480c      	ldr	r0, [pc, #48]	@ (8018274 <gos_traceDaemonTask+0x48>)
 8018244:	f7fa f86a 	bl	801231c <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8018248:	4b0b      	ldr	r3, [pc, #44]	@ (8018278 <gos_traceDaemonTask+0x4c>)
 801824a:	8818      	ldrh	r0, [r3, #0]
 801824c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018250:	22c8      	movs	r2, #200	@ 0xc8
 8018252:	4908      	ldr	r1, [pc, #32]	@ (8018274 <gos_traceDaemonTask+0x48>)
 8018254:	f7fe fa80 	bl	8016758 <gos_queueGet>
 8018258:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 801825a:	2b55      	cmp	r3, #85	@ 0x55
 801825c:	d0f1      	beq.n	8018242 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 801825e:	4804      	ldr	r0, [pc, #16]	@ (8018270 <gos_traceDaemonTask+0x44>)
 8018260:	f7fe f892 	bl	8016388 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 8018264:	4b05      	ldr	r3, [pc, #20]	@ (801827c <gos_traceDaemonTask+0x50>)
 8018266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018268:	4618      	mov	r0, r3
 801826a:	f7fb fd17 	bl	8013c9c <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 801826e:	e7df      	b.n	8018230 <gos_traceDaemonTask+0x4>
 8018270:	20009aac 	.word	0x20009aac
 8018274:	200098f0 	.word	0x200098f0
 8018278:	200012e4 	.word	0x200012e4
 801827c:	20001300 	.word	0x20001300

08018280 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 8018280:	b480      	push	{r7}
 8018282:	b085      	sub	sp, #20
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 8018288:	23ae      	movs	r3, #174	@ 0xae
 801828a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d00b      	beq.n	80182aa <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2200      	movs	r2, #0
 8018296:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	2200      	movs	r2, #0
 801829c:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80182a4:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 80182a6:	2355      	movs	r3, #85	@ 0x55
 80182a8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 80182aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3714      	adds	r7, #20
 80182b0:	46bd      	mov	sp, r7
 80182b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b6:	4770      	bx	lr

080182b8 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 80182b8:	b480      	push	{r7}
 80182ba:	b085      	sub	sp, #20
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 80182c0:	23ae      	movs	r3, #174	@ 0xae
 80182c2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d041      	beq.n	801834e <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 80182ca:	4b24      	ldr	r3, [pc, #144]	@ (801835c <gos_triggerReset+0xa4>)
 80182cc:	781b      	ldrb	r3, [r3, #0]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d108      	bne.n	80182e4 <gos_triggerReset+0x2c>
 80182d2:	b672      	cpsid	i
 80182d4:	f3ef 8310 	mrs	r3, PRIMASK
 80182d8:	4a21      	ldr	r2, [pc, #132]	@ (8018360 <gos_triggerReset+0xa8>)
 80182da:	6013      	str	r3, [r2, #0]
 80182dc:	f3bf 8f4f 	dsb	sy
 80182e0:	f3bf 8f6f 	isb	sy
 80182e4:	4b1d      	ldr	r3, [pc, #116]	@ (801835c <gos_triggerReset+0xa4>)
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	3301      	adds	r3, #1
 80182ea:	b2da      	uxtb	r2, r3
 80182ec:	4b1b      	ldr	r3, [pc, #108]	@ (801835c <gos_triggerReset+0xa4>)
 80182ee:	701a      	strb	r2, [r3, #0]
 80182f0:	4b1c      	ldr	r3, [pc, #112]	@ (8018364 <gos_triggerReset+0xac>)
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	3301      	adds	r3, #1
 80182f6:	b2da      	uxtb	r2, r3
 80182f8:	4b1a      	ldr	r3, [pc, #104]	@ (8018364 <gos_triggerReset+0xac>)
 80182fa:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2200      	movs	r2, #0
 8018300:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2200      	movs	r2, #0
 8018306:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 8018308:	2355      	movs	r3, #85	@ 0x55
 801830a:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 801830c:	4b13      	ldr	r3, [pc, #76]	@ (801835c <gos_triggerReset+0xa4>)
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d005      	beq.n	8018320 <gos_triggerReset+0x68>
 8018314:	4b11      	ldr	r3, [pc, #68]	@ (801835c <gos_triggerReset+0xa4>)
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	3b01      	subs	r3, #1
 801831a:	b2da      	uxtb	r2, r3
 801831c:	4b0f      	ldr	r3, [pc, #60]	@ (801835c <gos_triggerReset+0xa4>)
 801831e:	701a      	strb	r2, [r3, #0]
 8018320:	4b0e      	ldr	r3, [pc, #56]	@ (801835c <gos_triggerReset+0xa4>)
 8018322:	781b      	ldrb	r3, [r3, #0]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d108      	bne.n	801833a <gos_triggerReset+0x82>
 8018328:	4b0d      	ldr	r3, [pc, #52]	@ (8018360 <gos_triggerReset+0xa8>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	f383 8810 	msr	PRIMASK, r3
 8018330:	b662      	cpsie	i
 8018332:	f3bf 8f4f 	dsb	sy
 8018336:	f3bf 8f6f 	isb	sy
 801833a:	4b0a      	ldr	r3, [pc, #40]	@ (8018364 <gos_triggerReset+0xac>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d005      	beq.n	801834e <gos_triggerReset+0x96>
 8018342:	4b08      	ldr	r3, [pc, #32]	@ (8018364 <gos_triggerReset+0xac>)
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	3b01      	subs	r3, #1
 8018348:	b2da      	uxtb	r2, r3
 801834a:	4b06      	ldr	r3, [pc, #24]	@ (8018364 <gos_triggerReset+0xac>)
 801834c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 801834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018350:	4618      	mov	r0, r3
 8018352:	3714      	adds	r7, #20
 8018354:	46bd      	mov	sp, r7
 8018356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835a:	4770      	bx	lr
 801835c:	200061bb 	.word	0x200061bb
 8018360:	200061bc 	.word	0x200061bc
 8018364:	200061b9 	.word	0x200061b9

08018368 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b086      	sub	sp, #24
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 8018374:	23ae      	movs	r3, #174	@ 0xae
 8018376:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 8018378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801837c:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2b00      	cmp	r3, #0
 8018382:	f000 8096 	beq.w	80184b2 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 8018386:	4b4d      	ldr	r3, [pc, #308]	@ (80184bc <gos_triggerWait+0x154>)
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d108      	bne.n	80183a0 <gos_triggerWait+0x38>
 801838e:	b672      	cpsid	i
 8018390:	f3ef 8310 	mrs	r3, PRIMASK
 8018394:	4a4a      	ldr	r2, [pc, #296]	@ (80184c0 <gos_triggerWait+0x158>)
 8018396:	6013      	str	r3, [r2, #0]
 8018398:	f3bf 8f4f 	dsb	sy
 801839c:	f3bf 8f6f 	isb	sy
 80183a0:	4b46      	ldr	r3, [pc, #280]	@ (80184bc <gos_triggerWait+0x154>)
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	3301      	adds	r3, #1
 80183a6:	b2da      	uxtb	r2, r3
 80183a8:	4b44      	ldr	r3, [pc, #272]	@ (80184bc <gos_triggerWait+0x154>)
 80183aa:	701a      	strb	r2, [r3, #0]
 80183ac:	4b45      	ldr	r3, [pc, #276]	@ (80184c4 <gos_triggerWait+0x15c>)
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	3301      	adds	r3, #1
 80183b2:	b2da      	uxtb	r2, r3
 80183b4:	4b43      	ldr	r3, [pc, #268]	@ (80184c4 <gos_triggerWait+0x15c>)
 80183b6:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 80183b8:	f107 0314 	add.w	r3, r7, #20
 80183bc:	4618      	mov	r0, r3
 80183be:	f7fc fd29 	bl	8014e14 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 80183c2:	8aba      	ldrh	r2, [r7, #20]
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	68ba      	ldr	r2, [r7, #8]
 80183cc:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 80183ce:	4b3b      	ldr	r3, [pc, #236]	@ (80184bc <gos_triggerWait+0x154>)
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d005      	beq.n	80183e2 <gos_triggerWait+0x7a>
 80183d6:	4b39      	ldr	r3, [pc, #228]	@ (80184bc <gos_triggerWait+0x154>)
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	3b01      	subs	r3, #1
 80183dc:	b2da      	uxtb	r2, r3
 80183de:	4b37      	ldr	r3, [pc, #220]	@ (80184bc <gos_triggerWait+0x154>)
 80183e0:	701a      	strb	r2, [r3, #0]
 80183e2:	4b36      	ldr	r3, [pc, #216]	@ (80184bc <gos_triggerWait+0x154>)
 80183e4:	781b      	ldrb	r3, [r3, #0]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d108      	bne.n	80183fc <gos_triggerWait+0x94>
 80183ea:	4b35      	ldr	r3, [pc, #212]	@ (80184c0 <gos_triggerWait+0x158>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f383 8810 	msr	PRIMASK, r3
 80183f2:	b662      	cpsie	i
 80183f4:	f3bf 8f4f 	dsb	sy
 80183f8:	f3bf 8f6f 	isb	sy
 80183fc:	4b31      	ldr	r3, [pc, #196]	@ (80184c4 <gos_triggerWait+0x15c>)
 80183fe:	781b      	ldrb	r3, [r3, #0]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d005      	beq.n	8018410 <gos_triggerWait+0xa8>
 8018404:	4b2f      	ldr	r3, [pc, #188]	@ (80184c4 <gos_triggerWait+0x15c>)
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	3b01      	subs	r3, #1
 801840a:	b2da      	uxtb	r2, r3
 801840c:	4b2d      	ldr	r3, [pc, #180]	@ (80184c4 <gos_triggerWait+0x15c>)
 801840e:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	681a      	ldr	r2, [r3, #0]
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	685b      	ldr	r3, [r3, #4]
 8018418:	429a      	cmp	r2, r3
 801841a:	d204      	bcs.n	8018426 <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 801841c:	8abb      	ldrh	r3, [r7, #20]
 801841e:	6879      	ldr	r1, [r7, #4]
 8018420:	4618      	mov	r0, r3
 8018422:	f7fb fe0b 	bl	801403c <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 8018426:	4b25      	ldr	r3, [pc, #148]	@ (80184bc <gos_triggerWait+0x154>)
 8018428:	781b      	ldrb	r3, [r3, #0]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d108      	bne.n	8018440 <gos_triggerWait+0xd8>
 801842e:	b672      	cpsid	i
 8018430:	f3ef 8310 	mrs	r3, PRIMASK
 8018434:	4a22      	ldr	r2, [pc, #136]	@ (80184c0 <gos_triggerWait+0x158>)
 8018436:	6013      	str	r3, [r2, #0]
 8018438:	f3bf 8f4f 	dsb	sy
 801843c:	f3bf 8f6f 	isb	sy
 8018440:	4b1e      	ldr	r3, [pc, #120]	@ (80184bc <gos_triggerWait+0x154>)
 8018442:	781b      	ldrb	r3, [r3, #0]
 8018444:	3301      	adds	r3, #1
 8018446:	b2da      	uxtb	r2, r3
 8018448:	4b1c      	ldr	r3, [pc, #112]	@ (80184bc <gos_triggerWait+0x154>)
 801844a:	701a      	strb	r2, [r3, #0]
 801844c:	4b1d      	ldr	r3, [pc, #116]	@ (80184c4 <gos_triggerWait+0x15c>)
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	3301      	adds	r3, #1
 8018452:	b2da      	uxtb	r2, r3
 8018454:	4b1b      	ldr	r3, [pc, #108]	@ (80184c4 <gos_triggerWait+0x15c>)
 8018456:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	685b      	ldr	r3, [r3, #4]
 8018460:	429a      	cmp	r2, r3
 8018462:	d305      	bcc.n	8018470 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 8018464:	2355      	movs	r3, #85	@ 0x55
 8018466:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801846e:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 8018470:	4b12      	ldr	r3, [pc, #72]	@ (80184bc <gos_triggerWait+0x154>)
 8018472:	781b      	ldrb	r3, [r3, #0]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d005      	beq.n	8018484 <gos_triggerWait+0x11c>
 8018478:	4b10      	ldr	r3, [pc, #64]	@ (80184bc <gos_triggerWait+0x154>)
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	3b01      	subs	r3, #1
 801847e:	b2da      	uxtb	r2, r3
 8018480:	4b0e      	ldr	r3, [pc, #56]	@ (80184bc <gos_triggerWait+0x154>)
 8018482:	701a      	strb	r2, [r3, #0]
 8018484:	4b0d      	ldr	r3, [pc, #52]	@ (80184bc <gos_triggerWait+0x154>)
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d108      	bne.n	801849e <gos_triggerWait+0x136>
 801848c:	4b0c      	ldr	r3, [pc, #48]	@ (80184c0 <gos_triggerWait+0x158>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	f383 8810 	msr	PRIMASK, r3
 8018494:	b662      	cpsie	i
 8018496:	f3bf 8f4f 	dsb	sy
 801849a:	f3bf 8f6f 	isb	sy
 801849e:	4b09      	ldr	r3, [pc, #36]	@ (80184c4 <gos_triggerWait+0x15c>)
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d005      	beq.n	80184b2 <gos_triggerWait+0x14a>
 80184a6:	4b07      	ldr	r3, [pc, #28]	@ (80184c4 <gos_triggerWait+0x15c>)
 80184a8:	781b      	ldrb	r3, [r3, #0]
 80184aa:	3b01      	subs	r3, #1
 80184ac:	b2da      	uxtb	r2, r3
 80184ae:	4b05      	ldr	r3, [pc, #20]	@ (80184c4 <gos_triggerWait+0x15c>)
 80184b0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 80184b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3718      	adds	r7, #24
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}
 80184bc:	200061bb 	.word	0x200061bb
 80184c0:	200061bc 	.word	0x200061bc
 80184c4:	200061b9 	.word	0x200061b9

080184c8 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b084      	sub	sp, #16
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 80184d0:	23ae      	movs	r3, #174	@ 0xae
 80184d2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d073      	beq.n	80185c2 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 80184da:	4b3c      	ldr	r3, [pc, #240]	@ (80185cc <gos_triggerIncrement+0x104>)
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d108      	bne.n	80184f4 <gos_triggerIncrement+0x2c>
 80184e2:	b672      	cpsid	i
 80184e4:	f3ef 8310 	mrs	r3, PRIMASK
 80184e8:	4a39      	ldr	r2, [pc, #228]	@ (80185d0 <gos_triggerIncrement+0x108>)
 80184ea:	6013      	str	r3, [r2, #0]
 80184ec:	f3bf 8f4f 	dsb	sy
 80184f0:	f3bf 8f6f 	isb	sy
 80184f4:	4b35      	ldr	r3, [pc, #212]	@ (80185cc <gos_triggerIncrement+0x104>)
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	3301      	adds	r3, #1
 80184fa:	b2da      	uxtb	r2, r3
 80184fc:	4b33      	ldr	r3, [pc, #204]	@ (80185cc <gos_triggerIncrement+0x104>)
 80184fe:	701a      	strb	r2, [r3, #0]
 8018500:	4b34      	ldr	r3, [pc, #208]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	3301      	adds	r3, #1
 8018506:	b2da      	uxtb	r2, r3
 8018508:	4b32      	ldr	r3, [pc, #200]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 801850a:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	1c5a      	adds	r2, r3, #1
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	681a      	ldr	r2, [r3, #0]
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	685b      	ldr	r3, [r3, #4]
 801851e:	429a      	cmp	r2, r3
 8018520:	d12c      	bne.n	801857c <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 8018522:	4b2d      	ldr	r3, [pc, #180]	@ (80185d8 <gos_triggerIncrement+0x110>)
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d105      	bne.n	8018536 <gos_triggerIncrement+0x6e>
 801852a:	4b2a      	ldr	r3, [pc, #168]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	3301      	adds	r3, #1
 8018530:	b2da      	uxtb	r2, r3
 8018532:	4b28      	ldr	r3, [pc, #160]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 8018534:	701a      	strb	r2, [r3, #0]
 8018536:	4b28      	ldr	r3, [pc, #160]	@ (80185d8 <gos_triggerIncrement+0x110>)
 8018538:	781b      	ldrb	r3, [r3, #0]
 801853a:	3301      	adds	r3, #1
 801853c:	b2da      	uxtb	r2, r3
 801853e:	4b26      	ldr	r3, [pc, #152]	@ (80185d8 <gos_triggerIncrement+0x110>)
 8018540:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	891b      	ldrh	r3, [r3, #8]
 8018546:	4618      	mov	r0, r3
 8018548:	f7fb fe8a 	bl	8014260 <gos_taskUnblock>

            GOS_ISR_EXIT
 801854c:	4b22      	ldr	r3, [pc, #136]	@ (80185d8 <gos_triggerIncrement+0x110>)
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d005      	beq.n	8018560 <gos_triggerIncrement+0x98>
 8018554:	4b20      	ldr	r3, [pc, #128]	@ (80185d8 <gos_triggerIncrement+0x110>)
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	3b01      	subs	r3, #1
 801855a:	b2da      	uxtb	r2, r3
 801855c:	4b1e      	ldr	r3, [pc, #120]	@ (80185d8 <gos_triggerIncrement+0x110>)
 801855e:	701a      	strb	r2, [r3, #0]
 8018560:	4b1d      	ldr	r3, [pc, #116]	@ (80185d8 <gos_triggerIncrement+0x110>)
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d109      	bne.n	801857c <gos_triggerIncrement+0xb4>
 8018568:	4b1a      	ldr	r3, [pc, #104]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d005      	beq.n	801857c <gos_triggerIncrement+0xb4>
 8018570:	4b18      	ldr	r3, [pc, #96]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	3b01      	subs	r3, #1
 8018576:	b2da      	uxtb	r2, r3
 8018578:	4b16      	ldr	r3, [pc, #88]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 801857a:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 801857c:	2355      	movs	r3, #85	@ 0x55
 801857e:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8018580:	4b12      	ldr	r3, [pc, #72]	@ (80185cc <gos_triggerIncrement+0x104>)
 8018582:	781b      	ldrb	r3, [r3, #0]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d005      	beq.n	8018594 <gos_triggerIncrement+0xcc>
 8018588:	4b10      	ldr	r3, [pc, #64]	@ (80185cc <gos_triggerIncrement+0x104>)
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	3b01      	subs	r3, #1
 801858e:	b2da      	uxtb	r2, r3
 8018590:	4b0e      	ldr	r3, [pc, #56]	@ (80185cc <gos_triggerIncrement+0x104>)
 8018592:	701a      	strb	r2, [r3, #0]
 8018594:	4b0d      	ldr	r3, [pc, #52]	@ (80185cc <gos_triggerIncrement+0x104>)
 8018596:	781b      	ldrb	r3, [r3, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d108      	bne.n	80185ae <gos_triggerIncrement+0xe6>
 801859c:	4b0c      	ldr	r3, [pc, #48]	@ (80185d0 <gos_triggerIncrement+0x108>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	f383 8810 	msr	PRIMASK, r3
 80185a4:	b662      	cpsie	i
 80185a6:	f3bf 8f4f 	dsb	sy
 80185aa:	f3bf 8f6f 	isb	sy
 80185ae:	4b09      	ldr	r3, [pc, #36]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d005      	beq.n	80185c2 <gos_triggerIncrement+0xfa>
 80185b6:	4b07      	ldr	r3, [pc, #28]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 80185b8:	781b      	ldrb	r3, [r3, #0]
 80185ba:	3b01      	subs	r3, #1
 80185bc:	b2da      	uxtb	r2, r3
 80185be:	4b05      	ldr	r3, [pc, #20]	@ (80185d4 <gos_triggerIncrement+0x10c>)
 80185c0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 80185c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80185c4:	4618      	mov	r0, r3
 80185c6:	3710      	adds	r7, #16
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}
 80185cc:	200061bb 	.word	0x200061bb
 80185d0:	200061bc 	.word	0x200061bc
 80185d4:	200061b9 	.word	0x200061b9
 80185d8:	200061ba 	.word	0x200061ba

080185dc <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 80185dc:	b480      	push	{r7}
 80185de:	b087      	sub	sp, #28
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
 80185e4:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 80185e6:	f04f 33ff 	mov.w	r3, #4294967295
 80185ea:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 80185ec:	2300      	movs	r3, #0
 80185ee:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 80185f0:	2300      	movs	r3, #0
 80185f2:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 80185f4:	2300      	movs	r3, #0
 80185f6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 80185f8:	2300      	movs	r3, #0
 80185fa:	613b      	str	r3, [r7, #16]
 80185fc:	e01e      	b.n	801863c <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	4413      	add	r3, r2
 8018604:	781b      	ldrb	r3, [r3, #0]
 8018606:	461a      	mov	r2, r3
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	4053      	eors	r3, r2
 801860c:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 801860e:	2308      	movs	r3, #8
 8018610:	73fb      	strb	r3, [r7, #15]
 8018612:	e00d      	b.n	8018630 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 8018614:	697b      	ldr	r3, [r7, #20]
 8018616:	f003 0301 	and.w	r3, r3, #1
 801861a:	425b      	negs	r3, r3
 801861c:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 801861e:	68ba      	ldr	r2, [r7, #8]
 8018620:	4b0c      	ldr	r3, [pc, #48]	@ (8018654 <gos_crcDriverGetCrc+0x78>)
 8018622:	4013      	ands	r3, r2
 8018624:	697a      	ldr	r2, [r7, #20]
 8018626:	4053      	eors	r3, r2
 8018628:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 801862a:	7bfb      	ldrb	r3, [r7, #15]
 801862c:	3b01      	subs	r3, #1
 801862e:	73fb      	strb	r3, [r7, #15]
 8018630:	7bfb      	ldrb	r3, [r7, #15]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d1ee      	bne.n	8018614 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	3301      	adds	r3, #1
 801863a:	613b      	str	r3, [r7, #16]
 801863c:	693a      	ldr	r2, [r7, #16]
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	429a      	cmp	r2, r3
 8018642:	d3dc      	bcc.n	80185fe <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	43db      	mvns	r3, r3
}
 8018648:	4618      	mov	r0, r3
 801864a:	371c      	adds	r7, #28
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr
 8018654:	edb88320 	.word	0xedb88320

08018658 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 8018658:	b40f      	push	{r0, r1, r2, r3}
 801865a:	b580      	push	{r7, lr}
 801865c:	b082      	sub	sp, #8
 801865e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 8018660:	23ae      	movs	r3, #174	@ 0xae
 8018662:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 8018664:	f107 0314 	add.w	r3, r7, #20
 8018668:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 801866a:	683a      	ldr	r2, [r7, #0]
 801866c:	6939      	ldr	r1, [r7, #16]
 801866e:	480a      	ldr	r0, [pc, #40]	@ (8018698 <gos_shellDriverTransmitString+0x40>)
 8018670:	f000 fdfa 	bl	8019268 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 8018674:	4b09      	ldr	r3, [pc, #36]	@ (801869c <gos_shellDriverTransmitString+0x44>)
 8018676:	685b      	ldr	r3, [r3, #4]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d005      	beq.n	8018688 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 801867c:	4b07      	ldr	r3, [pc, #28]	@ (801869c <gos_shellDriverTransmitString+0x44>)
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	4805      	ldr	r0, [pc, #20]	@ (8018698 <gos_shellDriverTransmitString+0x40>)
 8018682:	4798      	blx	r3
 8018684:	4603      	mov	r3, r0
 8018686:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 8018688:	79fb      	ldrb	r3, [r7, #7]
}
 801868a:	4618      	mov	r0, r3
 801868c:	3708      	adds	r7, #8
 801868e:	46bd      	mov	sp, r7
 8018690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018694:	b004      	add	sp, #16
 8018696:	4770      	bx	lr
 8018698:	20009ab0 	.word	0x20009ab0
 801869c:	2000619c 	.word	0x2000619c

080186a0 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	460b      	mov	r3, r1
 80186aa:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 80186ac:	23ae      	movs	r3, #174	@ 0xae
 80186ae:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 80186b0:	4b08      	ldr	r3, [pc, #32]	@ (80186d4 <gos_sysmonDriverReceive+0x34>)
 80186b2:	699b      	ldr	r3, [r3, #24]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d007      	beq.n	80186c8 <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 80186b8:	4b06      	ldr	r3, [pc, #24]	@ (80186d4 <gos_sysmonDriverReceive+0x34>)
 80186ba:	699b      	ldr	r3, [r3, #24]
 80186bc:	887a      	ldrh	r2, [r7, #2]
 80186be:	4611      	mov	r1, r2
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	4798      	blx	r3
 80186c4:	4603      	mov	r3, r0
 80186c6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 80186c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80186ca:	4618      	mov	r0, r3
 80186cc:	3710      	adds	r7, #16
 80186ce:	46bd      	mov	sp, r7
 80186d0:	bd80      	pop	{r7, pc}
 80186d2:	bf00      	nop
 80186d4:	2000619c 	.word	0x2000619c

080186d8 <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	460b      	mov	r3, r1
 80186e2:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 80186e4:	23ae      	movs	r3, #174	@ 0xae
 80186e6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 80186e8:	4b08      	ldr	r3, [pc, #32]	@ (801870c <gos_sysmonDriverTransmit+0x34>)
 80186ea:	695b      	ldr	r3, [r3, #20]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d007      	beq.n	8018700 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 80186f0:	4b06      	ldr	r3, [pc, #24]	@ (801870c <gos_sysmonDriverTransmit+0x34>)
 80186f2:	695b      	ldr	r3, [r3, #20]
 80186f4:	887a      	ldrh	r2, [r7, #2]
 80186f6:	4611      	mov	r1, r2
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	4798      	blx	r3
 80186fc:	4603      	mov	r3, r0
 80186fe:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 8018700:	7bfb      	ldrb	r3, [r7, #15]
}
 8018702:	4618      	mov	r0, r3
 8018704:	3710      	adds	r7, #16
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
 801870a:	bf00      	nop
 801870c:	2000619c 	.word	0x2000619c

08018710 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b084      	sub	sp, #16
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 8018718:	23ae      	movs	r3, #174	@ 0xae
 801871a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 801871c:	4b07      	ldr	r3, [pc, #28]	@ (801873c <gos_timerDriverSysTimerGet+0x2c>)
 801871e:	691b      	ldr	r3, [r3, #16]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d005      	beq.n	8018730 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 8018724:	4b05      	ldr	r3, [pc, #20]	@ (801873c <gos_timerDriverSysTimerGet+0x2c>)
 8018726:	691b      	ldr	r3, [r3, #16]
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	4798      	blx	r3
 801872c:	4603      	mov	r3, r0
 801872e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 8018730:	7bfb      	ldrb	r3, [r7, #15]
}
 8018732:	4618      	mov	r0, r3
 8018734:	3710      	adds	r7, #16
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	2000619c 	.word	0x2000619c

08018740 <__cvt>:
 8018740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018744:	ec57 6b10 	vmov	r6, r7, d0
 8018748:	2f00      	cmp	r7, #0
 801874a:	460c      	mov	r4, r1
 801874c:	4619      	mov	r1, r3
 801874e:	463b      	mov	r3, r7
 8018750:	bfbb      	ittet	lt
 8018752:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8018756:	461f      	movlt	r7, r3
 8018758:	2300      	movge	r3, #0
 801875a:	232d      	movlt	r3, #45	@ 0x2d
 801875c:	700b      	strb	r3, [r1, #0]
 801875e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018760:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8018764:	4691      	mov	r9, r2
 8018766:	f023 0820 	bic.w	r8, r3, #32
 801876a:	bfbc      	itt	lt
 801876c:	4632      	movlt	r2, r6
 801876e:	4616      	movlt	r6, r2
 8018770:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018774:	d005      	beq.n	8018782 <__cvt+0x42>
 8018776:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801877a:	d100      	bne.n	801877e <__cvt+0x3e>
 801877c:	3401      	adds	r4, #1
 801877e:	2102      	movs	r1, #2
 8018780:	e000      	b.n	8018784 <__cvt+0x44>
 8018782:	2103      	movs	r1, #3
 8018784:	ab03      	add	r3, sp, #12
 8018786:	9301      	str	r3, [sp, #4]
 8018788:	ab02      	add	r3, sp, #8
 801878a:	9300      	str	r3, [sp, #0]
 801878c:	ec47 6b10 	vmov	d0, r6, r7
 8018790:	4653      	mov	r3, sl
 8018792:	4622      	mov	r2, r4
 8018794:	f000 fea0 	bl	80194d8 <_dtoa_r>
 8018798:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801879c:	4605      	mov	r5, r0
 801879e:	d119      	bne.n	80187d4 <__cvt+0x94>
 80187a0:	f019 0f01 	tst.w	r9, #1
 80187a4:	d00e      	beq.n	80187c4 <__cvt+0x84>
 80187a6:	eb00 0904 	add.w	r9, r0, r4
 80187aa:	2200      	movs	r2, #0
 80187ac:	2300      	movs	r3, #0
 80187ae:	4630      	mov	r0, r6
 80187b0:	4639      	mov	r1, r7
 80187b2:	f7ec f8c1 	bl	8004938 <__aeabi_dcmpeq>
 80187b6:	b108      	cbz	r0, 80187bc <__cvt+0x7c>
 80187b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80187bc:	2230      	movs	r2, #48	@ 0x30
 80187be:	9b03      	ldr	r3, [sp, #12]
 80187c0:	454b      	cmp	r3, r9
 80187c2:	d31e      	bcc.n	8018802 <__cvt+0xc2>
 80187c4:	9b03      	ldr	r3, [sp, #12]
 80187c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80187c8:	1b5b      	subs	r3, r3, r5
 80187ca:	4628      	mov	r0, r5
 80187cc:	6013      	str	r3, [r2, #0]
 80187ce:	b004      	add	sp, #16
 80187d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80187d8:	eb00 0904 	add.w	r9, r0, r4
 80187dc:	d1e5      	bne.n	80187aa <__cvt+0x6a>
 80187de:	7803      	ldrb	r3, [r0, #0]
 80187e0:	2b30      	cmp	r3, #48	@ 0x30
 80187e2:	d10a      	bne.n	80187fa <__cvt+0xba>
 80187e4:	2200      	movs	r2, #0
 80187e6:	2300      	movs	r3, #0
 80187e8:	4630      	mov	r0, r6
 80187ea:	4639      	mov	r1, r7
 80187ec:	f7ec f8a4 	bl	8004938 <__aeabi_dcmpeq>
 80187f0:	b918      	cbnz	r0, 80187fa <__cvt+0xba>
 80187f2:	f1c4 0401 	rsb	r4, r4, #1
 80187f6:	f8ca 4000 	str.w	r4, [sl]
 80187fa:	f8da 3000 	ldr.w	r3, [sl]
 80187fe:	4499      	add	r9, r3
 8018800:	e7d3      	b.n	80187aa <__cvt+0x6a>
 8018802:	1c59      	adds	r1, r3, #1
 8018804:	9103      	str	r1, [sp, #12]
 8018806:	701a      	strb	r2, [r3, #0]
 8018808:	e7d9      	b.n	80187be <__cvt+0x7e>

0801880a <__exponent>:
 801880a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801880c:	2900      	cmp	r1, #0
 801880e:	bfba      	itte	lt
 8018810:	4249      	neglt	r1, r1
 8018812:	232d      	movlt	r3, #45	@ 0x2d
 8018814:	232b      	movge	r3, #43	@ 0x2b
 8018816:	2909      	cmp	r1, #9
 8018818:	7002      	strb	r2, [r0, #0]
 801881a:	7043      	strb	r3, [r0, #1]
 801881c:	dd29      	ble.n	8018872 <__exponent+0x68>
 801881e:	f10d 0307 	add.w	r3, sp, #7
 8018822:	461d      	mov	r5, r3
 8018824:	270a      	movs	r7, #10
 8018826:	461a      	mov	r2, r3
 8018828:	fbb1 f6f7 	udiv	r6, r1, r7
 801882c:	fb07 1416 	mls	r4, r7, r6, r1
 8018830:	3430      	adds	r4, #48	@ 0x30
 8018832:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018836:	460c      	mov	r4, r1
 8018838:	2c63      	cmp	r4, #99	@ 0x63
 801883a:	f103 33ff 	add.w	r3, r3, #4294967295
 801883e:	4631      	mov	r1, r6
 8018840:	dcf1      	bgt.n	8018826 <__exponent+0x1c>
 8018842:	3130      	adds	r1, #48	@ 0x30
 8018844:	1e94      	subs	r4, r2, #2
 8018846:	f803 1c01 	strb.w	r1, [r3, #-1]
 801884a:	1c41      	adds	r1, r0, #1
 801884c:	4623      	mov	r3, r4
 801884e:	42ab      	cmp	r3, r5
 8018850:	d30a      	bcc.n	8018868 <__exponent+0x5e>
 8018852:	f10d 0309 	add.w	r3, sp, #9
 8018856:	1a9b      	subs	r3, r3, r2
 8018858:	42ac      	cmp	r4, r5
 801885a:	bf88      	it	hi
 801885c:	2300      	movhi	r3, #0
 801885e:	3302      	adds	r3, #2
 8018860:	4403      	add	r3, r0
 8018862:	1a18      	subs	r0, r3, r0
 8018864:	b003      	add	sp, #12
 8018866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018868:	f813 6b01 	ldrb.w	r6, [r3], #1
 801886c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018870:	e7ed      	b.n	801884e <__exponent+0x44>
 8018872:	2330      	movs	r3, #48	@ 0x30
 8018874:	3130      	adds	r1, #48	@ 0x30
 8018876:	7083      	strb	r3, [r0, #2]
 8018878:	70c1      	strb	r1, [r0, #3]
 801887a:	1d03      	adds	r3, r0, #4
 801887c:	e7f1      	b.n	8018862 <__exponent+0x58>
	...

08018880 <_printf_float>:
 8018880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018884:	b08d      	sub	sp, #52	@ 0x34
 8018886:	460c      	mov	r4, r1
 8018888:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801888c:	4616      	mov	r6, r2
 801888e:	461f      	mov	r7, r3
 8018890:	4605      	mov	r5, r0
 8018892:	f000 fd0b 	bl	80192ac <_localeconv_r>
 8018896:	6803      	ldr	r3, [r0, #0]
 8018898:	9304      	str	r3, [sp, #16]
 801889a:	4618      	mov	r0, r3
 801889c:	f7eb fc20 	bl	80040e0 <strlen>
 80188a0:	2300      	movs	r3, #0
 80188a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80188a4:	f8d8 3000 	ldr.w	r3, [r8]
 80188a8:	9005      	str	r0, [sp, #20]
 80188aa:	3307      	adds	r3, #7
 80188ac:	f023 0307 	bic.w	r3, r3, #7
 80188b0:	f103 0208 	add.w	r2, r3, #8
 80188b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80188b8:	f8d4 b000 	ldr.w	fp, [r4]
 80188bc:	f8c8 2000 	str.w	r2, [r8]
 80188c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80188c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80188c8:	9307      	str	r3, [sp, #28]
 80188ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80188ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80188d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80188d6:	4b9c      	ldr	r3, [pc, #624]	@ (8018b48 <_printf_float+0x2c8>)
 80188d8:	f04f 32ff 	mov.w	r2, #4294967295
 80188dc:	f7ec f85e 	bl	800499c <__aeabi_dcmpun>
 80188e0:	bb70      	cbnz	r0, 8018940 <_printf_float+0xc0>
 80188e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80188e6:	4b98      	ldr	r3, [pc, #608]	@ (8018b48 <_printf_float+0x2c8>)
 80188e8:	f04f 32ff 	mov.w	r2, #4294967295
 80188ec:	f7ec f838 	bl	8004960 <__aeabi_dcmple>
 80188f0:	bb30      	cbnz	r0, 8018940 <_printf_float+0xc0>
 80188f2:	2200      	movs	r2, #0
 80188f4:	2300      	movs	r3, #0
 80188f6:	4640      	mov	r0, r8
 80188f8:	4649      	mov	r1, r9
 80188fa:	f7ec f827 	bl	800494c <__aeabi_dcmplt>
 80188fe:	b110      	cbz	r0, 8018906 <_printf_float+0x86>
 8018900:	232d      	movs	r3, #45	@ 0x2d
 8018902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018906:	4a91      	ldr	r2, [pc, #580]	@ (8018b4c <_printf_float+0x2cc>)
 8018908:	4b91      	ldr	r3, [pc, #580]	@ (8018b50 <_printf_float+0x2d0>)
 801890a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801890e:	bf94      	ite	ls
 8018910:	4690      	movls	r8, r2
 8018912:	4698      	movhi	r8, r3
 8018914:	2303      	movs	r3, #3
 8018916:	6123      	str	r3, [r4, #16]
 8018918:	f02b 0304 	bic.w	r3, fp, #4
 801891c:	6023      	str	r3, [r4, #0]
 801891e:	f04f 0900 	mov.w	r9, #0
 8018922:	9700      	str	r7, [sp, #0]
 8018924:	4633      	mov	r3, r6
 8018926:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018928:	4621      	mov	r1, r4
 801892a:	4628      	mov	r0, r5
 801892c:	f000 f9d2 	bl	8018cd4 <_printf_common>
 8018930:	3001      	adds	r0, #1
 8018932:	f040 808d 	bne.w	8018a50 <_printf_float+0x1d0>
 8018936:	f04f 30ff 	mov.w	r0, #4294967295
 801893a:	b00d      	add	sp, #52	@ 0x34
 801893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018940:	4642      	mov	r2, r8
 8018942:	464b      	mov	r3, r9
 8018944:	4640      	mov	r0, r8
 8018946:	4649      	mov	r1, r9
 8018948:	f7ec f828 	bl	800499c <__aeabi_dcmpun>
 801894c:	b140      	cbz	r0, 8018960 <_printf_float+0xe0>
 801894e:	464b      	mov	r3, r9
 8018950:	2b00      	cmp	r3, #0
 8018952:	bfbc      	itt	lt
 8018954:	232d      	movlt	r3, #45	@ 0x2d
 8018956:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801895a:	4a7e      	ldr	r2, [pc, #504]	@ (8018b54 <_printf_float+0x2d4>)
 801895c:	4b7e      	ldr	r3, [pc, #504]	@ (8018b58 <_printf_float+0x2d8>)
 801895e:	e7d4      	b.n	801890a <_printf_float+0x8a>
 8018960:	6863      	ldr	r3, [r4, #4]
 8018962:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8018966:	9206      	str	r2, [sp, #24]
 8018968:	1c5a      	adds	r2, r3, #1
 801896a:	d13b      	bne.n	80189e4 <_printf_float+0x164>
 801896c:	2306      	movs	r3, #6
 801896e:	6063      	str	r3, [r4, #4]
 8018970:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8018974:	2300      	movs	r3, #0
 8018976:	6022      	str	r2, [r4, #0]
 8018978:	9303      	str	r3, [sp, #12]
 801897a:	ab0a      	add	r3, sp, #40	@ 0x28
 801897c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8018980:	ab09      	add	r3, sp, #36	@ 0x24
 8018982:	9300      	str	r3, [sp, #0]
 8018984:	6861      	ldr	r1, [r4, #4]
 8018986:	ec49 8b10 	vmov	d0, r8, r9
 801898a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801898e:	4628      	mov	r0, r5
 8018990:	f7ff fed6 	bl	8018740 <__cvt>
 8018994:	9b06      	ldr	r3, [sp, #24]
 8018996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018998:	2b47      	cmp	r3, #71	@ 0x47
 801899a:	4680      	mov	r8, r0
 801899c:	d129      	bne.n	80189f2 <_printf_float+0x172>
 801899e:	1cc8      	adds	r0, r1, #3
 80189a0:	db02      	blt.n	80189a8 <_printf_float+0x128>
 80189a2:	6863      	ldr	r3, [r4, #4]
 80189a4:	4299      	cmp	r1, r3
 80189a6:	dd41      	ble.n	8018a2c <_printf_float+0x1ac>
 80189a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80189ac:	fa5f fa8a 	uxtb.w	sl, sl
 80189b0:	3901      	subs	r1, #1
 80189b2:	4652      	mov	r2, sl
 80189b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80189b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80189ba:	f7ff ff26 	bl	801880a <__exponent>
 80189be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80189c0:	1813      	adds	r3, r2, r0
 80189c2:	2a01      	cmp	r2, #1
 80189c4:	4681      	mov	r9, r0
 80189c6:	6123      	str	r3, [r4, #16]
 80189c8:	dc02      	bgt.n	80189d0 <_printf_float+0x150>
 80189ca:	6822      	ldr	r2, [r4, #0]
 80189cc:	07d2      	lsls	r2, r2, #31
 80189ce:	d501      	bpl.n	80189d4 <_printf_float+0x154>
 80189d0:	3301      	adds	r3, #1
 80189d2:	6123      	str	r3, [r4, #16]
 80189d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d0a2      	beq.n	8018922 <_printf_float+0xa2>
 80189dc:	232d      	movs	r3, #45	@ 0x2d
 80189de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80189e2:	e79e      	b.n	8018922 <_printf_float+0xa2>
 80189e4:	9a06      	ldr	r2, [sp, #24]
 80189e6:	2a47      	cmp	r2, #71	@ 0x47
 80189e8:	d1c2      	bne.n	8018970 <_printf_float+0xf0>
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d1c0      	bne.n	8018970 <_printf_float+0xf0>
 80189ee:	2301      	movs	r3, #1
 80189f0:	e7bd      	b.n	801896e <_printf_float+0xee>
 80189f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80189f6:	d9db      	bls.n	80189b0 <_printf_float+0x130>
 80189f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80189fc:	d118      	bne.n	8018a30 <_printf_float+0x1b0>
 80189fe:	2900      	cmp	r1, #0
 8018a00:	6863      	ldr	r3, [r4, #4]
 8018a02:	dd0b      	ble.n	8018a1c <_printf_float+0x19c>
 8018a04:	6121      	str	r1, [r4, #16]
 8018a06:	b913      	cbnz	r3, 8018a0e <_printf_float+0x18e>
 8018a08:	6822      	ldr	r2, [r4, #0]
 8018a0a:	07d0      	lsls	r0, r2, #31
 8018a0c:	d502      	bpl.n	8018a14 <_printf_float+0x194>
 8018a0e:	3301      	adds	r3, #1
 8018a10:	440b      	add	r3, r1
 8018a12:	6123      	str	r3, [r4, #16]
 8018a14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018a16:	f04f 0900 	mov.w	r9, #0
 8018a1a:	e7db      	b.n	80189d4 <_printf_float+0x154>
 8018a1c:	b913      	cbnz	r3, 8018a24 <_printf_float+0x1a4>
 8018a1e:	6822      	ldr	r2, [r4, #0]
 8018a20:	07d2      	lsls	r2, r2, #31
 8018a22:	d501      	bpl.n	8018a28 <_printf_float+0x1a8>
 8018a24:	3302      	adds	r3, #2
 8018a26:	e7f4      	b.n	8018a12 <_printf_float+0x192>
 8018a28:	2301      	movs	r3, #1
 8018a2a:	e7f2      	b.n	8018a12 <_printf_float+0x192>
 8018a2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8018a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a32:	4299      	cmp	r1, r3
 8018a34:	db05      	blt.n	8018a42 <_printf_float+0x1c2>
 8018a36:	6823      	ldr	r3, [r4, #0]
 8018a38:	6121      	str	r1, [r4, #16]
 8018a3a:	07d8      	lsls	r0, r3, #31
 8018a3c:	d5ea      	bpl.n	8018a14 <_printf_float+0x194>
 8018a3e:	1c4b      	adds	r3, r1, #1
 8018a40:	e7e7      	b.n	8018a12 <_printf_float+0x192>
 8018a42:	2900      	cmp	r1, #0
 8018a44:	bfd4      	ite	le
 8018a46:	f1c1 0202 	rsble	r2, r1, #2
 8018a4a:	2201      	movgt	r2, #1
 8018a4c:	4413      	add	r3, r2
 8018a4e:	e7e0      	b.n	8018a12 <_printf_float+0x192>
 8018a50:	6823      	ldr	r3, [r4, #0]
 8018a52:	055a      	lsls	r2, r3, #21
 8018a54:	d407      	bmi.n	8018a66 <_printf_float+0x1e6>
 8018a56:	6923      	ldr	r3, [r4, #16]
 8018a58:	4642      	mov	r2, r8
 8018a5a:	4631      	mov	r1, r6
 8018a5c:	4628      	mov	r0, r5
 8018a5e:	47b8      	blx	r7
 8018a60:	3001      	adds	r0, #1
 8018a62:	d12b      	bne.n	8018abc <_printf_float+0x23c>
 8018a64:	e767      	b.n	8018936 <_printf_float+0xb6>
 8018a66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018a6a:	f240 80dd 	bls.w	8018c28 <_printf_float+0x3a8>
 8018a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018a72:	2200      	movs	r2, #0
 8018a74:	2300      	movs	r3, #0
 8018a76:	f7eb ff5f 	bl	8004938 <__aeabi_dcmpeq>
 8018a7a:	2800      	cmp	r0, #0
 8018a7c:	d033      	beq.n	8018ae6 <_printf_float+0x266>
 8018a7e:	4a37      	ldr	r2, [pc, #220]	@ (8018b5c <_printf_float+0x2dc>)
 8018a80:	2301      	movs	r3, #1
 8018a82:	4631      	mov	r1, r6
 8018a84:	4628      	mov	r0, r5
 8018a86:	47b8      	blx	r7
 8018a88:	3001      	adds	r0, #1
 8018a8a:	f43f af54 	beq.w	8018936 <_printf_float+0xb6>
 8018a8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018a92:	4543      	cmp	r3, r8
 8018a94:	db02      	blt.n	8018a9c <_printf_float+0x21c>
 8018a96:	6823      	ldr	r3, [r4, #0]
 8018a98:	07d8      	lsls	r0, r3, #31
 8018a9a:	d50f      	bpl.n	8018abc <_printf_float+0x23c>
 8018a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018aa0:	4631      	mov	r1, r6
 8018aa2:	4628      	mov	r0, r5
 8018aa4:	47b8      	blx	r7
 8018aa6:	3001      	adds	r0, #1
 8018aa8:	f43f af45 	beq.w	8018936 <_printf_float+0xb6>
 8018aac:	f04f 0900 	mov.w	r9, #0
 8018ab0:	f108 38ff 	add.w	r8, r8, #4294967295
 8018ab4:	f104 0a1a 	add.w	sl, r4, #26
 8018ab8:	45c8      	cmp	r8, r9
 8018aba:	dc09      	bgt.n	8018ad0 <_printf_float+0x250>
 8018abc:	6823      	ldr	r3, [r4, #0]
 8018abe:	079b      	lsls	r3, r3, #30
 8018ac0:	f100 8103 	bmi.w	8018cca <_printf_float+0x44a>
 8018ac4:	68e0      	ldr	r0, [r4, #12]
 8018ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ac8:	4298      	cmp	r0, r3
 8018aca:	bfb8      	it	lt
 8018acc:	4618      	movlt	r0, r3
 8018ace:	e734      	b.n	801893a <_printf_float+0xba>
 8018ad0:	2301      	movs	r3, #1
 8018ad2:	4652      	mov	r2, sl
 8018ad4:	4631      	mov	r1, r6
 8018ad6:	4628      	mov	r0, r5
 8018ad8:	47b8      	blx	r7
 8018ada:	3001      	adds	r0, #1
 8018adc:	f43f af2b 	beq.w	8018936 <_printf_float+0xb6>
 8018ae0:	f109 0901 	add.w	r9, r9, #1
 8018ae4:	e7e8      	b.n	8018ab8 <_printf_float+0x238>
 8018ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	dc39      	bgt.n	8018b60 <_printf_float+0x2e0>
 8018aec:	4a1b      	ldr	r2, [pc, #108]	@ (8018b5c <_printf_float+0x2dc>)
 8018aee:	2301      	movs	r3, #1
 8018af0:	4631      	mov	r1, r6
 8018af2:	4628      	mov	r0, r5
 8018af4:	47b8      	blx	r7
 8018af6:	3001      	adds	r0, #1
 8018af8:	f43f af1d 	beq.w	8018936 <_printf_float+0xb6>
 8018afc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018b00:	ea59 0303 	orrs.w	r3, r9, r3
 8018b04:	d102      	bne.n	8018b0c <_printf_float+0x28c>
 8018b06:	6823      	ldr	r3, [r4, #0]
 8018b08:	07d9      	lsls	r1, r3, #31
 8018b0a:	d5d7      	bpl.n	8018abc <_printf_float+0x23c>
 8018b0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b10:	4631      	mov	r1, r6
 8018b12:	4628      	mov	r0, r5
 8018b14:	47b8      	blx	r7
 8018b16:	3001      	adds	r0, #1
 8018b18:	f43f af0d 	beq.w	8018936 <_printf_float+0xb6>
 8018b1c:	f04f 0a00 	mov.w	sl, #0
 8018b20:	f104 0b1a 	add.w	fp, r4, #26
 8018b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b26:	425b      	negs	r3, r3
 8018b28:	4553      	cmp	r3, sl
 8018b2a:	dc01      	bgt.n	8018b30 <_printf_float+0x2b0>
 8018b2c:	464b      	mov	r3, r9
 8018b2e:	e793      	b.n	8018a58 <_printf_float+0x1d8>
 8018b30:	2301      	movs	r3, #1
 8018b32:	465a      	mov	r2, fp
 8018b34:	4631      	mov	r1, r6
 8018b36:	4628      	mov	r0, r5
 8018b38:	47b8      	blx	r7
 8018b3a:	3001      	adds	r0, #1
 8018b3c:	f43f aefb 	beq.w	8018936 <_printf_float+0xb6>
 8018b40:	f10a 0a01 	add.w	sl, sl, #1
 8018b44:	e7ee      	b.n	8018b24 <_printf_float+0x2a4>
 8018b46:	bf00      	nop
 8018b48:	7fefffff 	.word	0x7fefffff
 8018b4c:	0801d1e9 	.word	0x0801d1e9
 8018b50:	0801d1ed 	.word	0x0801d1ed
 8018b54:	0801d1f1 	.word	0x0801d1f1
 8018b58:	0801d1f5 	.word	0x0801d1f5
 8018b5c:	0801d1f9 	.word	0x0801d1f9
 8018b60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018b66:	4553      	cmp	r3, sl
 8018b68:	bfa8      	it	ge
 8018b6a:	4653      	movge	r3, sl
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	4699      	mov	r9, r3
 8018b70:	dc36      	bgt.n	8018be0 <_printf_float+0x360>
 8018b72:	f04f 0b00 	mov.w	fp, #0
 8018b76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b7a:	f104 021a 	add.w	r2, r4, #26
 8018b7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b80:	9306      	str	r3, [sp, #24]
 8018b82:	eba3 0309 	sub.w	r3, r3, r9
 8018b86:	455b      	cmp	r3, fp
 8018b88:	dc31      	bgt.n	8018bee <_printf_float+0x36e>
 8018b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b8c:	459a      	cmp	sl, r3
 8018b8e:	dc3a      	bgt.n	8018c06 <_printf_float+0x386>
 8018b90:	6823      	ldr	r3, [r4, #0]
 8018b92:	07da      	lsls	r2, r3, #31
 8018b94:	d437      	bmi.n	8018c06 <_printf_float+0x386>
 8018b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b98:	ebaa 0903 	sub.w	r9, sl, r3
 8018b9c:	9b06      	ldr	r3, [sp, #24]
 8018b9e:	ebaa 0303 	sub.w	r3, sl, r3
 8018ba2:	4599      	cmp	r9, r3
 8018ba4:	bfa8      	it	ge
 8018ba6:	4699      	movge	r9, r3
 8018ba8:	f1b9 0f00 	cmp.w	r9, #0
 8018bac:	dc33      	bgt.n	8018c16 <_printf_float+0x396>
 8018bae:	f04f 0800 	mov.w	r8, #0
 8018bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018bb6:	f104 0b1a 	add.w	fp, r4, #26
 8018bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bbc:	ebaa 0303 	sub.w	r3, sl, r3
 8018bc0:	eba3 0309 	sub.w	r3, r3, r9
 8018bc4:	4543      	cmp	r3, r8
 8018bc6:	f77f af79 	ble.w	8018abc <_printf_float+0x23c>
 8018bca:	2301      	movs	r3, #1
 8018bcc:	465a      	mov	r2, fp
 8018bce:	4631      	mov	r1, r6
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	47b8      	blx	r7
 8018bd4:	3001      	adds	r0, #1
 8018bd6:	f43f aeae 	beq.w	8018936 <_printf_float+0xb6>
 8018bda:	f108 0801 	add.w	r8, r8, #1
 8018bde:	e7ec      	b.n	8018bba <_printf_float+0x33a>
 8018be0:	4642      	mov	r2, r8
 8018be2:	4631      	mov	r1, r6
 8018be4:	4628      	mov	r0, r5
 8018be6:	47b8      	blx	r7
 8018be8:	3001      	adds	r0, #1
 8018bea:	d1c2      	bne.n	8018b72 <_printf_float+0x2f2>
 8018bec:	e6a3      	b.n	8018936 <_printf_float+0xb6>
 8018bee:	2301      	movs	r3, #1
 8018bf0:	4631      	mov	r1, r6
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	9206      	str	r2, [sp, #24]
 8018bf6:	47b8      	blx	r7
 8018bf8:	3001      	adds	r0, #1
 8018bfa:	f43f ae9c 	beq.w	8018936 <_printf_float+0xb6>
 8018bfe:	9a06      	ldr	r2, [sp, #24]
 8018c00:	f10b 0b01 	add.w	fp, fp, #1
 8018c04:	e7bb      	b.n	8018b7e <_printf_float+0x2fe>
 8018c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c0a:	4631      	mov	r1, r6
 8018c0c:	4628      	mov	r0, r5
 8018c0e:	47b8      	blx	r7
 8018c10:	3001      	adds	r0, #1
 8018c12:	d1c0      	bne.n	8018b96 <_printf_float+0x316>
 8018c14:	e68f      	b.n	8018936 <_printf_float+0xb6>
 8018c16:	9a06      	ldr	r2, [sp, #24]
 8018c18:	464b      	mov	r3, r9
 8018c1a:	4442      	add	r2, r8
 8018c1c:	4631      	mov	r1, r6
 8018c1e:	4628      	mov	r0, r5
 8018c20:	47b8      	blx	r7
 8018c22:	3001      	adds	r0, #1
 8018c24:	d1c3      	bne.n	8018bae <_printf_float+0x32e>
 8018c26:	e686      	b.n	8018936 <_printf_float+0xb6>
 8018c28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018c2c:	f1ba 0f01 	cmp.w	sl, #1
 8018c30:	dc01      	bgt.n	8018c36 <_printf_float+0x3b6>
 8018c32:	07db      	lsls	r3, r3, #31
 8018c34:	d536      	bpl.n	8018ca4 <_printf_float+0x424>
 8018c36:	2301      	movs	r3, #1
 8018c38:	4642      	mov	r2, r8
 8018c3a:	4631      	mov	r1, r6
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	47b8      	blx	r7
 8018c40:	3001      	adds	r0, #1
 8018c42:	f43f ae78 	beq.w	8018936 <_printf_float+0xb6>
 8018c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c4a:	4631      	mov	r1, r6
 8018c4c:	4628      	mov	r0, r5
 8018c4e:	47b8      	blx	r7
 8018c50:	3001      	adds	r0, #1
 8018c52:	f43f ae70 	beq.w	8018936 <_printf_float+0xb6>
 8018c56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c62:	f7eb fe69 	bl	8004938 <__aeabi_dcmpeq>
 8018c66:	b9c0      	cbnz	r0, 8018c9a <_printf_float+0x41a>
 8018c68:	4653      	mov	r3, sl
 8018c6a:	f108 0201 	add.w	r2, r8, #1
 8018c6e:	4631      	mov	r1, r6
 8018c70:	4628      	mov	r0, r5
 8018c72:	47b8      	blx	r7
 8018c74:	3001      	adds	r0, #1
 8018c76:	d10c      	bne.n	8018c92 <_printf_float+0x412>
 8018c78:	e65d      	b.n	8018936 <_printf_float+0xb6>
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	465a      	mov	r2, fp
 8018c7e:	4631      	mov	r1, r6
 8018c80:	4628      	mov	r0, r5
 8018c82:	47b8      	blx	r7
 8018c84:	3001      	adds	r0, #1
 8018c86:	f43f ae56 	beq.w	8018936 <_printf_float+0xb6>
 8018c8a:	f108 0801 	add.w	r8, r8, #1
 8018c8e:	45d0      	cmp	r8, sl
 8018c90:	dbf3      	blt.n	8018c7a <_printf_float+0x3fa>
 8018c92:	464b      	mov	r3, r9
 8018c94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018c98:	e6df      	b.n	8018a5a <_printf_float+0x1da>
 8018c9a:	f04f 0800 	mov.w	r8, #0
 8018c9e:	f104 0b1a 	add.w	fp, r4, #26
 8018ca2:	e7f4      	b.n	8018c8e <_printf_float+0x40e>
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	4642      	mov	r2, r8
 8018ca8:	e7e1      	b.n	8018c6e <_printf_float+0x3ee>
 8018caa:	2301      	movs	r3, #1
 8018cac:	464a      	mov	r2, r9
 8018cae:	4631      	mov	r1, r6
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	47b8      	blx	r7
 8018cb4:	3001      	adds	r0, #1
 8018cb6:	f43f ae3e 	beq.w	8018936 <_printf_float+0xb6>
 8018cba:	f108 0801 	add.w	r8, r8, #1
 8018cbe:	68e3      	ldr	r3, [r4, #12]
 8018cc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018cc2:	1a5b      	subs	r3, r3, r1
 8018cc4:	4543      	cmp	r3, r8
 8018cc6:	dcf0      	bgt.n	8018caa <_printf_float+0x42a>
 8018cc8:	e6fc      	b.n	8018ac4 <_printf_float+0x244>
 8018cca:	f04f 0800 	mov.w	r8, #0
 8018cce:	f104 0919 	add.w	r9, r4, #25
 8018cd2:	e7f4      	b.n	8018cbe <_printf_float+0x43e>

08018cd4 <_printf_common>:
 8018cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd8:	4616      	mov	r6, r2
 8018cda:	4698      	mov	r8, r3
 8018cdc:	688a      	ldr	r2, [r1, #8]
 8018cde:	690b      	ldr	r3, [r1, #16]
 8018ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018ce4:	4293      	cmp	r3, r2
 8018ce6:	bfb8      	it	lt
 8018ce8:	4613      	movlt	r3, r2
 8018cea:	6033      	str	r3, [r6, #0]
 8018cec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018cf0:	4607      	mov	r7, r0
 8018cf2:	460c      	mov	r4, r1
 8018cf4:	b10a      	cbz	r2, 8018cfa <_printf_common+0x26>
 8018cf6:	3301      	adds	r3, #1
 8018cf8:	6033      	str	r3, [r6, #0]
 8018cfa:	6823      	ldr	r3, [r4, #0]
 8018cfc:	0699      	lsls	r1, r3, #26
 8018cfe:	bf42      	ittt	mi
 8018d00:	6833      	ldrmi	r3, [r6, #0]
 8018d02:	3302      	addmi	r3, #2
 8018d04:	6033      	strmi	r3, [r6, #0]
 8018d06:	6825      	ldr	r5, [r4, #0]
 8018d08:	f015 0506 	ands.w	r5, r5, #6
 8018d0c:	d106      	bne.n	8018d1c <_printf_common+0x48>
 8018d0e:	f104 0a19 	add.w	sl, r4, #25
 8018d12:	68e3      	ldr	r3, [r4, #12]
 8018d14:	6832      	ldr	r2, [r6, #0]
 8018d16:	1a9b      	subs	r3, r3, r2
 8018d18:	42ab      	cmp	r3, r5
 8018d1a:	dc26      	bgt.n	8018d6a <_printf_common+0x96>
 8018d1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018d20:	6822      	ldr	r2, [r4, #0]
 8018d22:	3b00      	subs	r3, #0
 8018d24:	bf18      	it	ne
 8018d26:	2301      	movne	r3, #1
 8018d28:	0692      	lsls	r2, r2, #26
 8018d2a:	d42b      	bmi.n	8018d84 <_printf_common+0xb0>
 8018d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018d30:	4641      	mov	r1, r8
 8018d32:	4638      	mov	r0, r7
 8018d34:	47c8      	blx	r9
 8018d36:	3001      	adds	r0, #1
 8018d38:	d01e      	beq.n	8018d78 <_printf_common+0xa4>
 8018d3a:	6823      	ldr	r3, [r4, #0]
 8018d3c:	6922      	ldr	r2, [r4, #16]
 8018d3e:	f003 0306 	and.w	r3, r3, #6
 8018d42:	2b04      	cmp	r3, #4
 8018d44:	bf02      	ittt	eq
 8018d46:	68e5      	ldreq	r5, [r4, #12]
 8018d48:	6833      	ldreq	r3, [r6, #0]
 8018d4a:	1aed      	subeq	r5, r5, r3
 8018d4c:	68a3      	ldr	r3, [r4, #8]
 8018d4e:	bf0c      	ite	eq
 8018d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d54:	2500      	movne	r5, #0
 8018d56:	4293      	cmp	r3, r2
 8018d58:	bfc4      	itt	gt
 8018d5a:	1a9b      	subgt	r3, r3, r2
 8018d5c:	18ed      	addgt	r5, r5, r3
 8018d5e:	2600      	movs	r6, #0
 8018d60:	341a      	adds	r4, #26
 8018d62:	42b5      	cmp	r5, r6
 8018d64:	d11a      	bne.n	8018d9c <_printf_common+0xc8>
 8018d66:	2000      	movs	r0, #0
 8018d68:	e008      	b.n	8018d7c <_printf_common+0xa8>
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	4652      	mov	r2, sl
 8018d6e:	4641      	mov	r1, r8
 8018d70:	4638      	mov	r0, r7
 8018d72:	47c8      	blx	r9
 8018d74:	3001      	adds	r0, #1
 8018d76:	d103      	bne.n	8018d80 <_printf_common+0xac>
 8018d78:	f04f 30ff 	mov.w	r0, #4294967295
 8018d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d80:	3501      	adds	r5, #1
 8018d82:	e7c6      	b.n	8018d12 <_printf_common+0x3e>
 8018d84:	18e1      	adds	r1, r4, r3
 8018d86:	1c5a      	adds	r2, r3, #1
 8018d88:	2030      	movs	r0, #48	@ 0x30
 8018d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018d8e:	4422      	add	r2, r4
 8018d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018d94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018d98:	3302      	adds	r3, #2
 8018d9a:	e7c7      	b.n	8018d2c <_printf_common+0x58>
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	4622      	mov	r2, r4
 8018da0:	4641      	mov	r1, r8
 8018da2:	4638      	mov	r0, r7
 8018da4:	47c8      	blx	r9
 8018da6:	3001      	adds	r0, #1
 8018da8:	d0e6      	beq.n	8018d78 <_printf_common+0xa4>
 8018daa:	3601      	adds	r6, #1
 8018dac:	e7d9      	b.n	8018d62 <_printf_common+0x8e>
	...

08018db0 <_printf_i>:
 8018db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018db4:	7e0f      	ldrb	r7, [r1, #24]
 8018db6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018db8:	2f78      	cmp	r7, #120	@ 0x78
 8018dba:	4691      	mov	r9, r2
 8018dbc:	4680      	mov	r8, r0
 8018dbe:	460c      	mov	r4, r1
 8018dc0:	469a      	mov	sl, r3
 8018dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018dc6:	d807      	bhi.n	8018dd8 <_printf_i+0x28>
 8018dc8:	2f62      	cmp	r7, #98	@ 0x62
 8018dca:	d80a      	bhi.n	8018de2 <_printf_i+0x32>
 8018dcc:	2f00      	cmp	r7, #0
 8018dce:	f000 80d2 	beq.w	8018f76 <_printf_i+0x1c6>
 8018dd2:	2f58      	cmp	r7, #88	@ 0x58
 8018dd4:	f000 80b9 	beq.w	8018f4a <_printf_i+0x19a>
 8018dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018de0:	e03a      	b.n	8018e58 <_printf_i+0xa8>
 8018de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018de6:	2b15      	cmp	r3, #21
 8018de8:	d8f6      	bhi.n	8018dd8 <_printf_i+0x28>
 8018dea:	a101      	add	r1, pc, #4	@ (adr r1, 8018df0 <_printf_i+0x40>)
 8018dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018df0:	08018e49 	.word	0x08018e49
 8018df4:	08018e5d 	.word	0x08018e5d
 8018df8:	08018dd9 	.word	0x08018dd9
 8018dfc:	08018dd9 	.word	0x08018dd9
 8018e00:	08018dd9 	.word	0x08018dd9
 8018e04:	08018dd9 	.word	0x08018dd9
 8018e08:	08018e5d 	.word	0x08018e5d
 8018e0c:	08018dd9 	.word	0x08018dd9
 8018e10:	08018dd9 	.word	0x08018dd9
 8018e14:	08018dd9 	.word	0x08018dd9
 8018e18:	08018dd9 	.word	0x08018dd9
 8018e1c:	08018f5d 	.word	0x08018f5d
 8018e20:	08018e87 	.word	0x08018e87
 8018e24:	08018f17 	.word	0x08018f17
 8018e28:	08018dd9 	.word	0x08018dd9
 8018e2c:	08018dd9 	.word	0x08018dd9
 8018e30:	08018f7f 	.word	0x08018f7f
 8018e34:	08018dd9 	.word	0x08018dd9
 8018e38:	08018e87 	.word	0x08018e87
 8018e3c:	08018dd9 	.word	0x08018dd9
 8018e40:	08018dd9 	.word	0x08018dd9
 8018e44:	08018f1f 	.word	0x08018f1f
 8018e48:	6833      	ldr	r3, [r6, #0]
 8018e4a:	1d1a      	adds	r2, r3, #4
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	6032      	str	r2, [r6, #0]
 8018e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018e58:	2301      	movs	r3, #1
 8018e5a:	e09d      	b.n	8018f98 <_printf_i+0x1e8>
 8018e5c:	6833      	ldr	r3, [r6, #0]
 8018e5e:	6820      	ldr	r0, [r4, #0]
 8018e60:	1d19      	adds	r1, r3, #4
 8018e62:	6031      	str	r1, [r6, #0]
 8018e64:	0606      	lsls	r6, r0, #24
 8018e66:	d501      	bpl.n	8018e6c <_printf_i+0xbc>
 8018e68:	681d      	ldr	r5, [r3, #0]
 8018e6a:	e003      	b.n	8018e74 <_printf_i+0xc4>
 8018e6c:	0645      	lsls	r5, r0, #25
 8018e6e:	d5fb      	bpl.n	8018e68 <_printf_i+0xb8>
 8018e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018e74:	2d00      	cmp	r5, #0
 8018e76:	da03      	bge.n	8018e80 <_printf_i+0xd0>
 8018e78:	232d      	movs	r3, #45	@ 0x2d
 8018e7a:	426d      	negs	r5, r5
 8018e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e80:	4859      	ldr	r0, [pc, #356]	@ (8018fe8 <_printf_i+0x238>)
 8018e82:	230a      	movs	r3, #10
 8018e84:	e011      	b.n	8018eaa <_printf_i+0xfa>
 8018e86:	6821      	ldr	r1, [r4, #0]
 8018e88:	6833      	ldr	r3, [r6, #0]
 8018e8a:	0608      	lsls	r0, r1, #24
 8018e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018e90:	d402      	bmi.n	8018e98 <_printf_i+0xe8>
 8018e92:	0649      	lsls	r1, r1, #25
 8018e94:	bf48      	it	mi
 8018e96:	b2ad      	uxthmi	r5, r5
 8018e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8018e9a:	4853      	ldr	r0, [pc, #332]	@ (8018fe8 <_printf_i+0x238>)
 8018e9c:	6033      	str	r3, [r6, #0]
 8018e9e:	bf14      	ite	ne
 8018ea0:	230a      	movne	r3, #10
 8018ea2:	2308      	moveq	r3, #8
 8018ea4:	2100      	movs	r1, #0
 8018ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018eaa:	6866      	ldr	r6, [r4, #4]
 8018eac:	60a6      	str	r6, [r4, #8]
 8018eae:	2e00      	cmp	r6, #0
 8018eb0:	bfa2      	ittt	ge
 8018eb2:	6821      	ldrge	r1, [r4, #0]
 8018eb4:	f021 0104 	bicge.w	r1, r1, #4
 8018eb8:	6021      	strge	r1, [r4, #0]
 8018eba:	b90d      	cbnz	r5, 8018ec0 <_printf_i+0x110>
 8018ebc:	2e00      	cmp	r6, #0
 8018ebe:	d04b      	beq.n	8018f58 <_printf_i+0x1a8>
 8018ec0:	4616      	mov	r6, r2
 8018ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8018ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8018eca:	5dc7      	ldrb	r7, [r0, r7]
 8018ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018ed0:	462f      	mov	r7, r5
 8018ed2:	42bb      	cmp	r3, r7
 8018ed4:	460d      	mov	r5, r1
 8018ed6:	d9f4      	bls.n	8018ec2 <_printf_i+0x112>
 8018ed8:	2b08      	cmp	r3, #8
 8018eda:	d10b      	bne.n	8018ef4 <_printf_i+0x144>
 8018edc:	6823      	ldr	r3, [r4, #0]
 8018ede:	07df      	lsls	r7, r3, #31
 8018ee0:	d508      	bpl.n	8018ef4 <_printf_i+0x144>
 8018ee2:	6923      	ldr	r3, [r4, #16]
 8018ee4:	6861      	ldr	r1, [r4, #4]
 8018ee6:	4299      	cmp	r1, r3
 8018ee8:	bfde      	ittt	le
 8018eea:	2330      	movle	r3, #48	@ 0x30
 8018eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018ef4:	1b92      	subs	r2, r2, r6
 8018ef6:	6122      	str	r2, [r4, #16]
 8018ef8:	f8cd a000 	str.w	sl, [sp]
 8018efc:	464b      	mov	r3, r9
 8018efe:	aa03      	add	r2, sp, #12
 8018f00:	4621      	mov	r1, r4
 8018f02:	4640      	mov	r0, r8
 8018f04:	f7ff fee6 	bl	8018cd4 <_printf_common>
 8018f08:	3001      	adds	r0, #1
 8018f0a:	d14a      	bne.n	8018fa2 <_printf_i+0x1f2>
 8018f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f10:	b004      	add	sp, #16
 8018f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f16:	6823      	ldr	r3, [r4, #0]
 8018f18:	f043 0320 	orr.w	r3, r3, #32
 8018f1c:	6023      	str	r3, [r4, #0]
 8018f1e:	4833      	ldr	r0, [pc, #204]	@ (8018fec <_printf_i+0x23c>)
 8018f20:	2778      	movs	r7, #120	@ 0x78
 8018f22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018f26:	6823      	ldr	r3, [r4, #0]
 8018f28:	6831      	ldr	r1, [r6, #0]
 8018f2a:	061f      	lsls	r7, r3, #24
 8018f2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018f30:	d402      	bmi.n	8018f38 <_printf_i+0x188>
 8018f32:	065f      	lsls	r7, r3, #25
 8018f34:	bf48      	it	mi
 8018f36:	b2ad      	uxthmi	r5, r5
 8018f38:	6031      	str	r1, [r6, #0]
 8018f3a:	07d9      	lsls	r1, r3, #31
 8018f3c:	bf44      	itt	mi
 8018f3e:	f043 0320 	orrmi.w	r3, r3, #32
 8018f42:	6023      	strmi	r3, [r4, #0]
 8018f44:	b11d      	cbz	r5, 8018f4e <_printf_i+0x19e>
 8018f46:	2310      	movs	r3, #16
 8018f48:	e7ac      	b.n	8018ea4 <_printf_i+0xf4>
 8018f4a:	4827      	ldr	r0, [pc, #156]	@ (8018fe8 <_printf_i+0x238>)
 8018f4c:	e7e9      	b.n	8018f22 <_printf_i+0x172>
 8018f4e:	6823      	ldr	r3, [r4, #0]
 8018f50:	f023 0320 	bic.w	r3, r3, #32
 8018f54:	6023      	str	r3, [r4, #0]
 8018f56:	e7f6      	b.n	8018f46 <_printf_i+0x196>
 8018f58:	4616      	mov	r6, r2
 8018f5a:	e7bd      	b.n	8018ed8 <_printf_i+0x128>
 8018f5c:	6833      	ldr	r3, [r6, #0]
 8018f5e:	6825      	ldr	r5, [r4, #0]
 8018f60:	6961      	ldr	r1, [r4, #20]
 8018f62:	1d18      	adds	r0, r3, #4
 8018f64:	6030      	str	r0, [r6, #0]
 8018f66:	062e      	lsls	r6, r5, #24
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	d501      	bpl.n	8018f70 <_printf_i+0x1c0>
 8018f6c:	6019      	str	r1, [r3, #0]
 8018f6e:	e002      	b.n	8018f76 <_printf_i+0x1c6>
 8018f70:	0668      	lsls	r0, r5, #25
 8018f72:	d5fb      	bpl.n	8018f6c <_printf_i+0x1bc>
 8018f74:	8019      	strh	r1, [r3, #0]
 8018f76:	2300      	movs	r3, #0
 8018f78:	6123      	str	r3, [r4, #16]
 8018f7a:	4616      	mov	r6, r2
 8018f7c:	e7bc      	b.n	8018ef8 <_printf_i+0x148>
 8018f7e:	6833      	ldr	r3, [r6, #0]
 8018f80:	1d1a      	adds	r2, r3, #4
 8018f82:	6032      	str	r2, [r6, #0]
 8018f84:	681e      	ldr	r6, [r3, #0]
 8018f86:	6862      	ldr	r2, [r4, #4]
 8018f88:	2100      	movs	r1, #0
 8018f8a:	4630      	mov	r0, r6
 8018f8c:	f7eb f858 	bl	8004040 <memchr>
 8018f90:	b108      	cbz	r0, 8018f96 <_printf_i+0x1e6>
 8018f92:	1b80      	subs	r0, r0, r6
 8018f94:	6060      	str	r0, [r4, #4]
 8018f96:	6863      	ldr	r3, [r4, #4]
 8018f98:	6123      	str	r3, [r4, #16]
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018fa0:	e7aa      	b.n	8018ef8 <_printf_i+0x148>
 8018fa2:	6923      	ldr	r3, [r4, #16]
 8018fa4:	4632      	mov	r2, r6
 8018fa6:	4649      	mov	r1, r9
 8018fa8:	4640      	mov	r0, r8
 8018faa:	47d0      	blx	sl
 8018fac:	3001      	adds	r0, #1
 8018fae:	d0ad      	beq.n	8018f0c <_printf_i+0x15c>
 8018fb0:	6823      	ldr	r3, [r4, #0]
 8018fb2:	079b      	lsls	r3, r3, #30
 8018fb4:	d413      	bmi.n	8018fde <_printf_i+0x22e>
 8018fb6:	68e0      	ldr	r0, [r4, #12]
 8018fb8:	9b03      	ldr	r3, [sp, #12]
 8018fba:	4298      	cmp	r0, r3
 8018fbc:	bfb8      	it	lt
 8018fbe:	4618      	movlt	r0, r3
 8018fc0:	e7a6      	b.n	8018f10 <_printf_i+0x160>
 8018fc2:	2301      	movs	r3, #1
 8018fc4:	4632      	mov	r2, r6
 8018fc6:	4649      	mov	r1, r9
 8018fc8:	4640      	mov	r0, r8
 8018fca:	47d0      	blx	sl
 8018fcc:	3001      	adds	r0, #1
 8018fce:	d09d      	beq.n	8018f0c <_printf_i+0x15c>
 8018fd0:	3501      	adds	r5, #1
 8018fd2:	68e3      	ldr	r3, [r4, #12]
 8018fd4:	9903      	ldr	r1, [sp, #12]
 8018fd6:	1a5b      	subs	r3, r3, r1
 8018fd8:	42ab      	cmp	r3, r5
 8018fda:	dcf2      	bgt.n	8018fc2 <_printf_i+0x212>
 8018fdc:	e7eb      	b.n	8018fb6 <_printf_i+0x206>
 8018fde:	2500      	movs	r5, #0
 8018fe0:	f104 0619 	add.w	r6, r4, #25
 8018fe4:	e7f5      	b.n	8018fd2 <_printf_i+0x222>
 8018fe6:	bf00      	nop
 8018fe8:	0801d1fb 	.word	0x0801d1fb
 8018fec:	0801d20c 	.word	0x0801d20c

08018ff0 <std>:
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	b510      	push	{r4, lr}
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8018ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018ffe:	6083      	str	r3, [r0, #8]
 8019000:	8181      	strh	r1, [r0, #12]
 8019002:	6643      	str	r3, [r0, #100]	@ 0x64
 8019004:	81c2      	strh	r2, [r0, #14]
 8019006:	6183      	str	r3, [r0, #24]
 8019008:	4619      	mov	r1, r3
 801900a:	2208      	movs	r2, #8
 801900c:	305c      	adds	r0, #92	@ 0x5c
 801900e:	f000 f935 	bl	801927c <memset>
 8019012:	4b0d      	ldr	r3, [pc, #52]	@ (8019048 <std+0x58>)
 8019014:	6263      	str	r3, [r4, #36]	@ 0x24
 8019016:	4b0d      	ldr	r3, [pc, #52]	@ (801904c <std+0x5c>)
 8019018:	62a3      	str	r3, [r4, #40]	@ 0x28
 801901a:	4b0d      	ldr	r3, [pc, #52]	@ (8019050 <std+0x60>)
 801901c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801901e:	4b0d      	ldr	r3, [pc, #52]	@ (8019054 <std+0x64>)
 8019020:	6323      	str	r3, [r4, #48]	@ 0x30
 8019022:	4b0d      	ldr	r3, [pc, #52]	@ (8019058 <std+0x68>)
 8019024:	6224      	str	r4, [r4, #32]
 8019026:	429c      	cmp	r4, r3
 8019028:	d006      	beq.n	8019038 <std+0x48>
 801902a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801902e:	4294      	cmp	r4, r2
 8019030:	d002      	beq.n	8019038 <std+0x48>
 8019032:	33d0      	adds	r3, #208	@ 0xd0
 8019034:	429c      	cmp	r4, r3
 8019036:	d105      	bne.n	8019044 <std+0x54>
 8019038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801903c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019040:	f000 b9a8 	b.w	8019394 <__retarget_lock_init_recursive>
 8019044:	bd10      	pop	{r4, pc}
 8019046:	bf00      	nop
 8019048:	080191b5 	.word	0x080191b5
 801904c:	080191d7 	.word	0x080191d7
 8019050:	0801920f 	.word	0x0801920f
 8019054:	08019233 	.word	0x08019233
 8019058:	20009b78 	.word	0x20009b78

0801905c <stdio_exit_handler>:
 801905c:	4a02      	ldr	r2, [pc, #8]	@ (8019068 <stdio_exit_handler+0xc>)
 801905e:	4903      	ldr	r1, [pc, #12]	@ (801906c <stdio_exit_handler+0x10>)
 8019060:	4803      	ldr	r0, [pc, #12]	@ (8019070 <stdio_exit_handler+0x14>)
 8019062:	f000 b869 	b.w	8019138 <_fwalk_sglue>
 8019066:	bf00      	nop
 8019068:	2000136c 	.word	0x2000136c
 801906c:	0801ad1d 	.word	0x0801ad1d
 8019070:	2000137c 	.word	0x2000137c

08019074 <cleanup_stdio>:
 8019074:	6841      	ldr	r1, [r0, #4]
 8019076:	4b0c      	ldr	r3, [pc, #48]	@ (80190a8 <cleanup_stdio+0x34>)
 8019078:	4299      	cmp	r1, r3
 801907a:	b510      	push	{r4, lr}
 801907c:	4604      	mov	r4, r0
 801907e:	d001      	beq.n	8019084 <cleanup_stdio+0x10>
 8019080:	f001 fe4c 	bl	801ad1c <_fflush_r>
 8019084:	68a1      	ldr	r1, [r4, #8]
 8019086:	4b09      	ldr	r3, [pc, #36]	@ (80190ac <cleanup_stdio+0x38>)
 8019088:	4299      	cmp	r1, r3
 801908a:	d002      	beq.n	8019092 <cleanup_stdio+0x1e>
 801908c:	4620      	mov	r0, r4
 801908e:	f001 fe45 	bl	801ad1c <_fflush_r>
 8019092:	68e1      	ldr	r1, [r4, #12]
 8019094:	4b06      	ldr	r3, [pc, #24]	@ (80190b0 <cleanup_stdio+0x3c>)
 8019096:	4299      	cmp	r1, r3
 8019098:	d004      	beq.n	80190a4 <cleanup_stdio+0x30>
 801909a:	4620      	mov	r0, r4
 801909c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190a0:	f001 be3c 	b.w	801ad1c <_fflush_r>
 80190a4:	bd10      	pop	{r4, pc}
 80190a6:	bf00      	nop
 80190a8:	20009b78 	.word	0x20009b78
 80190ac:	20009be0 	.word	0x20009be0
 80190b0:	20009c48 	.word	0x20009c48

080190b4 <global_stdio_init.part.0>:
 80190b4:	b510      	push	{r4, lr}
 80190b6:	4b0b      	ldr	r3, [pc, #44]	@ (80190e4 <global_stdio_init.part.0+0x30>)
 80190b8:	4c0b      	ldr	r4, [pc, #44]	@ (80190e8 <global_stdio_init.part.0+0x34>)
 80190ba:	4a0c      	ldr	r2, [pc, #48]	@ (80190ec <global_stdio_init.part.0+0x38>)
 80190bc:	601a      	str	r2, [r3, #0]
 80190be:	4620      	mov	r0, r4
 80190c0:	2200      	movs	r2, #0
 80190c2:	2104      	movs	r1, #4
 80190c4:	f7ff ff94 	bl	8018ff0 <std>
 80190c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80190cc:	2201      	movs	r2, #1
 80190ce:	2109      	movs	r1, #9
 80190d0:	f7ff ff8e 	bl	8018ff0 <std>
 80190d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80190d8:	2202      	movs	r2, #2
 80190da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190de:	2112      	movs	r1, #18
 80190e0:	f7ff bf86 	b.w	8018ff0 <std>
 80190e4:	20009cb0 	.word	0x20009cb0
 80190e8:	20009b78 	.word	0x20009b78
 80190ec:	0801905d 	.word	0x0801905d

080190f0 <__sfp_lock_acquire>:
 80190f0:	4801      	ldr	r0, [pc, #4]	@ (80190f8 <__sfp_lock_acquire+0x8>)
 80190f2:	f000 b950 	b.w	8019396 <__retarget_lock_acquire_recursive>
 80190f6:	bf00      	nop
 80190f8:	20009cb9 	.word	0x20009cb9

080190fc <__sfp_lock_release>:
 80190fc:	4801      	ldr	r0, [pc, #4]	@ (8019104 <__sfp_lock_release+0x8>)
 80190fe:	f000 b94b 	b.w	8019398 <__retarget_lock_release_recursive>
 8019102:	bf00      	nop
 8019104:	20009cb9 	.word	0x20009cb9

08019108 <__sinit>:
 8019108:	b510      	push	{r4, lr}
 801910a:	4604      	mov	r4, r0
 801910c:	f7ff fff0 	bl	80190f0 <__sfp_lock_acquire>
 8019110:	6a23      	ldr	r3, [r4, #32]
 8019112:	b11b      	cbz	r3, 801911c <__sinit+0x14>
 8019114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019118:	f7ff bff0 	b.w	80190fc <__sfp_lock_release>
 801911c:	4b04      	ldr	r3, [pc, #16]	@ (8019130 <__sinit+0x28>)
 801911e:	6223      	str	r3, [r4, #32]
 8019120:	4b04      	ldr	r3, [pc, #16]	@ (8019134 <__sinit+0x2c>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d1f5      	bne.n	8019114 <__sinit+0xc>
 8019128:	f7ff ffc4 	bl	80190b4 <global_stdio_init.part.0>
 801912c:	e7f2      	b.n	8019114 <__sinit+0xc>
 801912e:	bf00      	nop
 8019130:	08019075 	.word	0x08019075
 8019134:	20009cb0 	.word	0x20009cb0

08019138 <_fwalk_sglue>:
 8019138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801913c:	4607      	mov	r7, r0
 801913e:	4688      	mov	r8, r1
 8019140:	4614      	mov	r4, r2
 8019142:	2600      	movs	r6, #0
 8019144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019148:	f1b9 0901 	subs.w	r9, r9, #1
 801914c:	d505      	bpl.n	801915a <_fwalk_sglue+0x22>
 801914e:	6824      	ldr	r4, [r4, #0]
 8019150:	2c00      	cmp	r4, #0
 8019152:	d1f7      	bne.n	8019144 <_fwalk_sglue+0xc>
 8019154:	4630      	mov	r0, r6
 8019156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801915a:	89ab      	ldrh	r3, [r5, #12]
 801915c:	2b01      	cmp	r3, #1
 801915e:	d907      	bls.n	8019170 <_fwalk_sglue+0x38>
 8019160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019164:	3301      	adds	r3, #1
 8019166:	d003      	beq.n	8019170 <_fwalk_sglue+0x38>
 8019168:	4629      	mov	r1, r5
 801916a:	4638      	mov	r0, r7
 801916c:	47c0      	blx	r8
 801916e:	4306      	orrs	r6, r0
 8019170:	3568      	adds	r5, #104	@ 0x68
 8019172:	e7e9      	b.n	8019148 <_fwalk_sglue+0x10>

08019174 <siprintf>:
 8019174:	b40e      	push	{r1, r2, r3}
 8019176:	b500      	push	{lr}
 8019178:	b09c      	sub	sp, #112	@ 0x70
 801917a:	ab1d      	add	r3, sp, #116	@ 0x74
 801917c:	9002      	str	r0, [sp, #8]
 801917e:	9006      	str	r0, [sp, #24]
 8019180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019184:	4809      	ldr	r0, [pc, #36]	@ (80191ac <siprintf+0x38>)
 8019186:	9107      	str	r1, [sp, #28]
 8019188:	9104      	str	r1, [sp, #16]
 801918a:	4909      	ldr	r1, [pc, #36]	@ (80191b0 <siprintf+0x3c>)
 801918c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019190:	9105      	str	r1, [sp, #20]
 8019192:	6800      	ldr	r0, [r0, #0]
 8019194:	9301      	str	r3, [sp, #4]
 8019196:	a902      	add	r1, sp, #8
 8019198:	f001 fc40 	bl	801aa1c <_svfiprintf_r>
 801919c:	9b02      	ldr	r3, [sp, #8]
 801919e:	2200      	movs	r2, #0
 80191a0:	701a      	strb	r2, [r3, #0]
 80191a2:	b01c      	add	sp, #112	@ 0x70
 80191a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80191a8:	b003      	add	sp, #12
 80191aa:	4770      	bx	lr
 80191ac:	20001378 	.word	0x20001378
 80191b0:	ffff0208 	.word	0xffff0208

080191b4 <__sread>:
 80191b4:	b510      	push	{r4, lr}
 80191b6:	460c      	mov	r4, r1
 80191b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191bc:	f000 f89c 	bl	80192f8 <_read_r>
 80191c0:	2800      	cmp	r0, #0
 80191c2:	bfab      	itete	ge
 80191c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80191c6:	89a3      	ldrhlt	r3, [r4, #12]
 80191c8:	181b      	addge	r3, r3, r0
 80191ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80191ce:	bfac      	ite	ge
 80191d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80191d2:	81a3      	strhlt	r3, [r4, #12]
 80191d4:	bd10      	pop	{r4, pc}

080191d6 <__swrite>:
 80191d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191da:	461f      	mov	r7, r3
 80191dc:	898b      	ldrh	r3, [r1, #12]
 80191de:	05db      	lsls	r3, r3, #23
 80191e0:	4605      	mov	r5, r0
 80191e2:	460c      	mov	r4, r1
 80191e4:	4616      	mov	r6, r2
 80191e6:	d505      	bpl.n	80191f4 <__swrite+0x1e>
 80191e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191ec:	2302      	movs	r3, #2
 80191ee:	2200      	movs	r2, #0
 80191f0:	f000 f870 	bl	80192d4 <_lseek_r>
 80191f4:	89a3      	ldrh	r3, [r4, #12]
 80191f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80191fe:	81a3      	strh	r3, [r4, #12]
 8019200:	4632      	mov	r2, r6
 8019202:	463b      	mov	r3, r7
 8019204:	4628      	mov	r0, r5
 8019206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801920a:	f000 b887 	b.w	801931c <_write_r>

0801920e <__sseek>:
 801920e:	b510      	push	{r4, lr}
 8019210:	460c      	mov	r4, r1
 8019212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019216:	f000 f85d 	bl	80192d4 <_lseek_r>
 801921a:	1c43      	adds	r3, r0, #1
 801921c:	89a3      	ldrh	r3, [r4, #12]
 801921e:	bf15      	itete	ne
 8019220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801922a:	81a3      	strheq	r3, [r4, #12]
 801922c:	bf18      	it	ne
 801922e:	81a3      	strhne	r3, [r4, #12]
 8019230:	bd10      	pop	{r4, pc}

08019232 <__sclose>:
 8019232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019236:	f000 b83d 	b.w	80192b4 <_close_r>
	...

0801923c <_vsiprintf_r>:
 801923c:	b500      	push	{lr}
 801923e:	b09b      	sub	sp, #108	@ 0x6c
 8019240:	9100      	str	r1, [sp, #0]
 8019242:	9104      	str	r1, [sp, #16]
 8019244:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019248:	9105      	str	r1, [sp, #20]
 801924a:	9102      	str	r1, [sp, #8]
 801924c:	4905      	ldr	r1, [pc, #20]	@ (8019264 <_vsiprintf_r+0x28>)
 801924e:	9103      	str	r1, [sp, #12]
 8019250:	4669      	mov	r1, sp
 8019252:	f001 fbe3 	bl	801aa1c <_svfiprintf_r>
 8019256:	9b00      	ldr	r3, [sp, #0]
 8019258:	2200      	movs	r2, #0
 801925a:	701a      	strb	r2, [r3, #0]
 801925c:	b01b      	add	sp, #108	@ 0x6c
 801925e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019262:	bf00      	nop
 8019264:	ffff0208 	.word	0xffff0208

08019268 <vsiprintf>:
 8019268:	4613      	mov	r3, r2
 801926a:	460a      	mov	r2, r1
 801926c:	4601      	mov	r1, r0
 801926e:	4802      	ldr	r0, [pc, #8]	@ (8019278 <vsiprintf+0x10>)
 8019270:	6800      	ldr	r0, [r0, #0]
 8019272:	f7ff bfe3 	b.w	801923c <_vsiprintf_r>
 8019276:	bf00      	nop
 8019278:	20001378 	.word	0x20001378

0801927c <memset>:
 801927c:	4402      	add	r2, r0
 801927e:	4603      	mov	r3, r0
 8019280:	4293      	cmp	r3, r2
 8019282:	d100      	bne.n	8019286 <memset+0xa>
 8019284:	4770      	bx	lr
 8019286:	f803 1b01 	strb.w	r1, [r3], #1
 801928a:	e7f9      	b.n	8019280 <memset+0x4>

0801928c <strcat>:
 801928c:	b510      	push	{r4, lr}
 801928e:	4602      	mov	r2, r0
 8019290:	7814      	ldrb	r4, [r2, #0]
 8019292:	4613      	mov	r3, r2
 8019294:	3201      	adds	r2, #1
 8019296:	2c00      	cmp	r4, #0
 8019298:	d1fa      	bne.n	8019290 <strcat+0x4>
 801929a:	3b01      	subs	r3, #1
 801929c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80192a4:	2a00      	cmp	r2, #0
 80192a6:	d1f9      	bne.n	801929c <strcat+0x10>
 80192a8:	bd10      	pop	{r4, pc}
	...

080192ac <_localeconv_r>:
 80192ac:	4800      	ldr	r0, [pc, #0]	@ (80192b0 <_localeconv_r+0x4>)
 80192ae:	4770      	bx	lr
 80192b0:	200014b8 	.word	0x200014b8

080192b4 <_close_r>:
 80192b4:	b538      	push	{r3, r4, r5, lr}
 80192b6:	4d06      	ldr	r5, [pc, #24]	@ (80192d0 <_close_r+0x1c>)
 80192b8:	2300      	movs	r3, #0
 80192ba:	4604      	mov	r4, r0
 80192bc:	4608      	mov	r0, r1
 80192be:	602b      	str	r3, [r5, #0]
 80192c0:	f7eb ffb8 	bl	8005234 <_close>
 80192c4:	1c43      	adds	r3, r0, #1
 80192c6:	d102      	bne.n	80192ce <_close_r+0x1a>
 80192c8:	682b      	ldr	r3, [r5, #0]
 80192ca:	b103      	cbz	r3, 80192ce <_close_r+0x1a>
 80192cc:	6023      	str	r3, [r4, #0]
 80192ce:	bd38      	pop	{r3, r4, r5, pc}
 80192d0:	20009cb4 	.word	0x20009cb4

080192d4 <_lseek_r>:
 80192d4:	b538      	push	{r3, r4, r5, lr}
 80192d6:	4d07      	ldr	r5, [pc, #28]	@ (80192f4 <_lseek_r+0x20>)
 80192d8:	4604      	mov	r4, r0
 80192da:	4608      	mov	r0, r1
 80192dc:	4611      	mov	r1, r2
 80192de:	2200      	movs	r2, #0
 80192e0:	602a      	str	r2, [r5, #0]
 80192e2:	461a      	mov	r2, r3
 80192e4:	f7eb ffcd 	bl	8005282 <_lseek>
 80192e8:	1c43      	adds	r3, r0, #1
 80192ea:	d102      	bne.n	80192f2 <_lseek_r+0x1e>
 80192ec:	682b      	ldr	r3, [r5, #0]
 80192ee:	b103      	cbz	r3, 80192f2 <_lseek_r+0x1e>
 80192f0:	6023      	str	r3, [r4, #0]
 80192f2:	bd38      	pop	{r3, r4, r5, pc}
 80192f4:	20009cb4 	.word	0x20009cb4

080192f8 <_read_r>:
 80192f8:	b538      	push	{r3, r4, r5, lr}
 80192fa:	4d07      	ldr	r5, [pc, #28]	@ (8019318 <_read_r+0x20>)
 80192fc:	4604      	mov	r4, r0
 80192fe:	4608      	mov	r0, r1
 8019300:	4611      	mov	r1, r2
 8019302:	2200      	movs	r2, #0
 8019304:	602a      	str	r2, [r5, #0]
 8019306:	461a      	mov	r2, r3
 8019308:	f7eb ff5b 	bl	80051c2 <_read>
 801930c:	1c43      	adds	r3, r0, #1
 801930e:	d102      	bne.n	8019316 <_read_r+0x1e>
 8019310:	682b      	ldr	r3, [r5, #0]
 8019312:	b103      	cbz	r3, 8019316 <_read_r+0x1e>
 8019314:	6023      	str	r3, [r4, #0]
 8019316:	bd38      	pop	{r3, r4, r5, pc}
 8019318:	20009cb4 	.word	0x20009cb4

0801931c <_write_r>:
 801931c:	b538      	push	{r3, r4, r5, lr}
 801931e:	4d07      	ldr	r5, [pc, #28]	@ (801933c <_write_r+0x20>)
 8019320:	4604      	mov	r4, r0
 8019322:	4608      	mov	r0, r1
 8019324:	4611      	mov	r1, r2
 8019326:	2200      	movs	r2, #0
 8019328:	602a      	str	r2, [r5, #0]
 801932a:	461a      	mov	r2, r3
 801932c:	f7eb ff66 	bl	80051fc <_write>
 8019330:	1c43      	adds	r3, r0, #1
 8019332:	d102      	bne.n	801933a <_write_r+0x1e>
 8019334:	682b      	ldr	r3, [r5, #0]
 8019336:	b103      	cbz	r3, 801933a <_write_r+0x1e>
 8019338:	6023      	str	r3, [r4, #0]
 801933a:	bd38      	pop	{r3, r4, r5, pc}
 801933c:	20009cb4 	.word	0x20009cb4

08019340 <__errno>:
 8019340:	4b01      	ldr	r3, [pc, #4]	@ (8019348 <__errno+0x8>)
 8019342:	6818      	ldr	r0, [r3, #0]
 8019344:	4770      	bx	lr
 8019346:	bf00      	nop
 8019348:	20001378 	.word	0x20001378

0801934c <__libc_init_array>:
 801934c:	b570      	push	{r4, r5, r6, lr}
 801934e:	4d0d      	ldr	r5, [pc, #52]	@ (8019384 <__libc_init_array+0x38>)
 8019350:	4c0d      	ldr	r4, [pc, #52]	@ (8019388 <__libc_init_array+0x3c>)
 8019352:	1b64      	subs	r4, r4, r5
 8019354:	10a4      	asrs	r4, r4, #2
 8019356:	2600      	movs	r6, #0
 8019358:	42a6      	cmp	r6, r4
 801935a:	d109      	bne.n	8019370 <__libc_init_array+0x24>
 801935c:	4d0b      	ldr	r5, [pc, #44]	@ (801938c <__libc_init_array+0x40>)
 801935e:	4c0c      	ldr	r4, [pc, #48]	@ (8019390 <__libc_init_array+0x44>)
 8019360:	f002 f86c 	bl	801b43c <_init>
 8019364:	1b64      	subs	r4, r4, r5
 8019366:	10a4      	asrs	r4, r4, #2
 8019368:	2600      	movs	r6, #0
 801936a:	42a6      	cmp	r6, r4
 801936c:	d105      	bne.n	801937a <__libc_init_array+0x2e>
 801936e:	bd70      	pop	{r4, r5, r6, pc}
 8019370:	f855 3b04 	ldr.w	r3, [r5], #4
 8019374:	4798      	blx	r3
 8019376:	3601      	adds	r6, #1
 8019378:	e7ee      	b.n	8019358 <__libc_init_array+0xc>
 801937a:	f855 3b04 	ldr.w	r3, [r5], #4
 801937e:	4798      	blx	r3
 8019380:	3601      	adds	r6, #1
 8019382:	e7f2      	b.n	801936a <__libc_init_array+0x1e>
 8019384:	0801d460 	.word	0x0801d460
 8019388:	0801d460 	.word	0x0801d460
 801938c:	0801d460 	.word	0x0801d460
 8019390:	0801d464 	.word	0x0801d464

08019394 <__retarget_lock_init_recursive>:
 8019394:	4770      	bx	lr

08019396 <__retarget_lock_acquire_recursive>:
 8019396:	4770      	bx	lr

08019398 <__retarget_lock_release_recursive>:
 8019398:	4770      	bx	lr

0801939a <strcpy>:
 801939a:	4603      	mov	r3, r0
 801939c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193a0:	f803 2b01 	strb.w	r2, [r3], #1
 80193a4:	2a00      	cmp	r2, #0
 80193a6:	d1f9      	bne.n	801939c <strcpy+0x2>
 80193a8:	4770      	bx	lr

080193aa <memcpy>:
 80193aa:	440a      	add	r2, r1
 80193ac:	4291      	cmp	r1, r2
 80193ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80193b2:	d100      	bne.n	80193b6 <memcpy+0xc>
 80193b4:	4770      	bx	lr
 80193b6:	b510      	push	{r4, lr}
 80193b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193c0:	4291      	cmp	r1, r2
 80193c2:	d1f9      	bne.n	80193b8 <memcpy+0xe>
 80193c4:	bd10      	pop	{r4, pc}

080193c6 <quorem>:
 80193c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ca:	6903      	ldr	r3, [r0, #16]
 80193cc:	690c      	ldr	r4, [r1, #16]
 80193ce:	42a3      	cmp	r3, r4
 80193d0:	4607      	mov	r7, r0
 80193d2:	db7e      	blt.n	80194d2 <quorem+0x10c>
 80193d4:	3c01      	subs	r4, #1
 80193d6:	f101 0814 	add.w	r8, r1, #20
 80193da:	00a3      	lsls	r3, r4, #2
 80193dc:	f100 0514 	add.w	r5, r0, #20
 80193e0:	9300      	str	r3, [sp, #0]
 80193e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193e6:	9301      	str	r3, [sp, #4]
 80193e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80193f0:	3301      	adds	r3, #1
 80193f2:	429a      	cmp	r2, r3
 80193f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80193f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80193fc:	d32e      	bcc.n	801945c <quorem+0x96>
 80193fe:	f04f 0a00 	mov.w	sl, #0
 8019402:	46c4      	mov	ip, r8
 8019404:	46ae      	mov	lr, r5
 8019406:	46d3      	mov	fp, sl
 8019408:	f85c 3b04 	ldr.w	r3, [ip], #4
 801940c:	b298      	uxth	r0, r3
 801940e:	fb06 a000 	mla	r0, r6, r0, sl
 8019412:	0c02      	lsrs	r2, r0, #16
 8019414:	0c1b      	lsrs	r3, r3, #16
 8019416:	fb06 2303 	mla	r3, r6, r3, r2
 801941a:	f8de 2000 	ldr.w	r2, [lr]
 801941e:	b280      	uxth	r0, r0
 8019420:	b292      	uxth	r2, r2
 8019422:	1a12      	subs	r2, r2, r0
 8019424:	445a      	add	r2, fp
 8019426:	f8de 0000 	ldr.w	r0, [lr]
 801942a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801942e:	b29b      	uxth	r3, r3
 8019430:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019434:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019438:	b292      	uxth	r2, r2
 801943a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801943e:	45e1      	cmp	r9, ip
 8019440:	f84e 2b04 	str.w	r2, [lr], #4
 8019444:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019448:	d2de      	bcs.n	8019408 <quorem+0x42>
 801944a:	9b00      	ldr	r3, [sp, #0]
 801944c:	58eb      	ldr	r3, [r5, r3]
 801944e:	b92b      	cbnz	r3, 801945c <quorem+0x96>
 8019450:	9b01      	ldr	r3, [sp, #4]
 8019452:	3b04      	subs	r3, #4
 8019454:	429d      	cmp	r5, r3
 8019456:	461a      	mov	r2, r3
 8019458:	d32f      	bcc.n	80194ba <quorem+0xf4>
 801945a:	613c      	str	r4, [r7, #16]
 801945c:	4638      	mov	r0, r7
 801945e:	f001 f979 	bl	801a754 <__mcmp>
 8019462:	2800      	cmp	r0, #0
 8019464:	db25      	blt.n	80194b2 <quorem+0xec>
 8019466:	4629      	mov	r1, r5
 8019468:	2000      	movs	r0, #0
 801946a:	f858 2b04 	ldr.w	r2, [r8], #4
 801946e:	f8d1 c000 	ldr.w	ip, [r1]
 8019472:	fa1f fe82 	uxth.w	lr, r2
 8019476:	fa1f f38c 	uxth.w	r3, ip
 801947a:	eba3 030e 	sub.w	r3, r3, lr
 801947e:	4403      	add	r3, r0
 8019480:	0c12      	lsrs	r2, r2, #16
 8019482:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019486:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801948a:	b29b      	uxth	r3, r3
 801948c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019490:	45c1      	cmp	r9, r8
 8019492:	f841 3b04 	str.w	r3, [r1], #4
 8019496:	ea4f 4022 	mov.w	r0, r2, asr #16
 801949a:	d2e6      	bcs.n	801946a <quorem+0xa4>
 801949c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80194a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80194a4:	b922      	cbnz	r2, 80194b0 <quorem+0xea>
 80194a6:	3b04      	subs	r3, #4
 80194a8:	429d      	cmp	r5, r3
 80194aa:	461a      	mov	r2, r3
 80194ac:	d30b      	bcc.n	80194c6 <quorem+0x100>
 80194ae:	613c      	str	r4, [r7, #16]
 80194b0:	3601      	adds	r6, #1
 80194b2:	4630      	mov	r0, r6
 80194b4:	b003      	add	sp, #12
 80194b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194ba:	6812      	ldr	r2, [r2, #0]
 80194bc:	3b04      	subs	r3, #4
 80194be:	2a00      	cmp	r2, #0
 80194c0:	d1cb      	bne.n	801945a <quorem+0x94>
 80194c2:	3c01      	subs	r4, #1
 80194c4:	e7c6      	b.n	8019454 <quorem+0x8e>
 80194c6:	6812      	ldr	r2, [r2, #0]
 80194c8:	3b04      	subs	r3, #4
 80194ca:	2a00      	cmp	r2, #0
 80194cc:	d1ef      	bne.n	80194ae <quorem+0xe8>
 80194ce:	3c01      	subs	r4, #1
 80194d0:	e7ea      	b.n	80194a8 <quorem+0xe2>
 80194d2:	2000      	movs	r0, #0
 80194d4:	e7ee      	b.n	80194b4 <quorem+0xee>
	...

080194d8 <_dtoa_r>:
 80194d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194dc:	69c7      	ldr	r7, [r0, #28]
 80194de:	b099      	sub	sp, #100	@ 0x64
 80194e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80194e4:	ec55 4b10 	vmov	r4, r5, d0
 80194e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80194ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80194ec:	4683      	mov	fp, r0
 80194ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80194f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80194f2:	b97f      	cbnz	r7, 8019514 <_dtoa_r+0x3c>
 80194f4:	2010      	movs	r0, #16
 80194f6:	f000 fdfd 	bl	801a0f4 <malloc>
 80194fa:	4602      	mov	r2, r0
 80194fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8019500:	b920      	cbnz	r0, 801950c <_dtoa_r+0x34>
 8019502:	4ba7      	ldr	r3, [pc, #668]	@ (80197a0 <_dtoa_r+0x2c8>)
 8019504:	21ef      	movs	r1, #239	@ 0xef
 8019506:	48a7      	ldr	r0, [pc, #668]	@ (80197a4 <_dtoa_r+0x2cc>)
 8019508:	f001 fc5a 	bl	801adc0 <__assert_func>
 801950c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019510:	6007      	str	r7, [r0, #0]
 8019512:	60c7      	str	r7, [r0, #12]
 8019514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019518:	6819      	ldr	r1, [r3, #0]
 801951a:	b159      	cbz	r1, 8019534 <_dtoa_r+0x5c>
 801951c:	685a      	ldr	r2, [r3, #4]
 801951e:	604a      	str	r2, [r1, #4]
 8019520:	2301      	movs	r3, #1
 8019522:	4093      	lsls	r3, r2
 8019524:	608b      	str	r3, [r1, #8]
 8019526:	4658      	mov	r0, fp
 8019528:	f000 feda 	bl	801a2e0 <_Bfree>
 801952c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019530:	2200      	movs	r2, #0
 8019532:	601a      	str	r2, [r3, #0]
 8019534:	1e2b      	subs	r3, r5, #0
 8019536:	bfb9      	ittee	lt
 8019538:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801953c:	9303      	strlt	r3, [sp, #12]
 801953e:	2300      	movge	r3, #0
 8019540:	6033      	strge	r3, [r6, #0]
 8019542:	9f03      	ldr	r7, [sp, #12]
 8019544:	4b98      	ldr	r3, [pc, #608]	@ (80197a8 <_dtoa_r+0x2d0>)
 8019546:	bfbc      	itt	lt
 8019548:	2201      	movlt	r2, #1
 801954a:	6032      	strlt	r2, [r6, #0]
 801954c:	43bb      	bics	r3, r7
 801954e:	d112      	bne.n	8019576 <_dtoa_r+0x9e>
 8019550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019552:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019556:	6013      	str	r3, [r2, #0]
 8019558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801955c:	4323      	orrs	r3, r4
 801955e:	f000 854d 	beq.w	8019ffc <_dtoa_r+0xb24>
 8019562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019564:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80197bc <_dtoa_r+0x2e4>
 8019568:	2b00      	cmp	r3, #0
 801956a:	f000 854f 	beq.w	801a00c <_dtoa_r+0xb34>
 801956e:	f10a 0303 	add.w	r3, sl, #3
 8019572:	f000 bd49 	b.w	801a008 <_dtoa_r+0xb30>
 8019576:	ed9d 7b02 	vldr	d7, [sp, #8]
 801957a:	2200      	movs	r2, #0
 801957c:	ec51 0b17 	vmov	r0, r1, d7
 8019580:	2300      	movs	r3, #0
 8019582:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8019586:	f7eb f9d7 	bl	8004938 <__aeabi_dcmpeq>
 801958a:	4680      	mov	r8, r0
 801958c:	b158      	cbz	r0, 80195a6 <_dtoa_r+0xce>
 801958e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019590:	2301      	movs	r3, #1
 8019592:	6013      	str	r3, [r2, #0]
 8019594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019596:	b113      	cbz	r3, 801959e <_dtoa_r+0xc6>
 8019598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801959a:	4b84      	ldr	r3, [pc, #528]	@ (80197ac <_dtoa_r+0x2d4>)
 801959c:	6013      	str	r3, [r2, #0]
 801959e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80197c0 <_dtoa_r+0x2e8>
 80195a2:	f000 bd33 	b.w	801a00c <_dtoa_r+0xb34>
 80195a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80195aa:	aa16      	add	r2, sp, #88	@ 0x58
 80195ac:	a917      	add	r1, sp, #92	@ 0x5c
 80195ae:	4658      	mov	r0, fp
 80195b0:	f001 f980 	bl	801a8b4 <__d2b>
 80195b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80195b8:	4681      	mov	r9, r0
 80195ba:	2e00      	cmp	r6, #0
 80195bc:	d077      	beq.n	80196ae <_dtoa_r+0x1d6>
 80195be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80195c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80195c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80195c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80195cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80195d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80195d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80195d8:	4619      	mov	r1, r3
 80195da:	2200      	movs	r2, #0
 80195dc:	4b74      	ldr	r3, [pc, #464]	@ (80197b0 <_dtoa_r+0x2d8>)
 80195de:	f7ea fd8b 	bl	80040f8 <__aeabi_dsub>
 80195e2:	a369      	add	r3, pc, #420	@ (adr r3, 8019788 <_dtoa_r+0x2b0>)
 80195e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e8:	f7ea ff3e 	bl	8004468 <__aeabi_dmul>
 80195ec:	a368      	add	r3, pc, #416	@ (adr r3, 8019790 <_dtoa_r+0x2b8>)
 80195ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195f2:	f7ea fd83 	bl	80040fc <__adddf3>
 80195f6:	4604      	mov	r4, r0
 80195f8:	4630      	mov	r0, r6
 80195fa:	460d      	mov	r5, r1
 80195fc:	f7ea feca 	bl	8004394 <__aeabi_i2d>
 8019600:	a365      	add	r3, pc, #404	@ (adr r3, 8019798 <_dtoa_r+0x2c0>)
 8019602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019606:	f7ea ff2f 	bl	8004468 <__aeabi_dmul>
 801960a:	4602      	mov	r2, r0
 801960c:	460b      	mov	r3, r1
 801960e:	4620      	mov	r0, r4
 8019610:	4629      	mov	r1, r5
 8019612:	f7ea fd73 	bl	80040fc <__adddf3>
 8019616:	4604      	mov	r4, r0
 8019618:	460d      	mov	r5, r1
 801961a:	f7eb f9d5 	bl	80049c8 <__aeabi_d2iz>
 801961e:	2200      	movs	r2, #0
 8019620:	4607      	mov	r7, r0
 8019622:	2300      	movs	r3, #0
 8019624:	4620      	mov	r0, r4
 8019626:	4629      	mov	r1, r5
 8019628:	f7eb f990 	bl	800494c <__aeabi_dcmplt>
 801962c:	b140      	cbz	r0, 8019640 <_dtoa_r+0x168>
 801962e:	4638      	mov	r0, r7
 8019630:	f7ea feb0 	bl	8004394 <__aeabi_i2d>
 8019634:	4622      	mov	r2, r4
 8019636:	462b      	mov	r3, r5
 8019638:	f7eb f97e 	bl	8004938 <__aeabi_dcmpeq>
 801963c:	b900      	cbnz	r0, 8019640 <_dtoa_r+0x168>
 801963e:	3f01      	subs	r7, #1
 8019640:	2f16      	cmp	r7, #22
 8019642:	d851      	bhi.n	80196e8 <_dtoa_r+0x210>
 8019644:	4b5b      	ldr	r3, [pc, #364]	@ (80197b4 <_dtoa_r+0x2dc>)
 8019646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801964e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019652:	f7eb f97b 	bl	800494c <__aeabi_dcmplt>
 8019656:	2800      	cmp	r0, #0
 8019658:	d048      	beq.n	80196ec <_dtoa_r+0x214>
 801965a:	3f01      	subs	r7, #1
 801965c:	2300      	movs	r3, #0
 801965e:	9312      	str	r3, [sp, #72]	@ 0x48
 8019660:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019662:	1b9b      	subs	r3, r3, r6
 8019664:	1e5a      	subs	r2, r3, #1
 8019666:	bf44      	itt	mi
 8019668:	f1c3 0801 	rsbmi	r8, r3, #1
 801966c:	2300      	movmi	r3, #0
 801966e:	9208      	str	r2, [sp, #32]
 8019670:	bf54      	ite	pl
 8019672:	f04f 0800 	movpl.w	r8, #0
 8019676:	9308      	strmi	r3, [sp, #32]
 8019678:	2f00      	cmp	r7, #0
 801967a:	db39      	blt.n	80196f0 <_dtoa_r+0x218>
 801967c:	9b08      	ldr	r3, [sp, #32]
 801967e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8019680:	443b      	add	r3, r7
 8019682:	9308      	str	r3, [sp, #32]
 8019684:	2300      	movs	r3, #0
 8019686:	930a      	str	r3, [sp, #40]	@ 0x28
 8019688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801968a:	2b09      	cmp	r3, #9
 801968c:	d864      	bhi.n	8019758 <_dtoa_r+0x280>
 801968e:	2b05      	cmp	r3, #5
 8019690:	bfc4      	itt	gt
 8019692:	3b04      	subgt	r3, #4
 8019694:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8019696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019698:	f1a3 0302 	sub.w	r3, r3, #2
 801969c:	bfcc      	ite	gt
 801969e:	2400      	movgt	r4, #0
 80196a0:	2401      	movle	r4, #1
 80196a2:	2b03      	cmp	r3, #3
 80196a4:	d863      	bhi.n	801976e <_dtoa_r+0x296>
 80196a6:	e8df f003 	tbb	[pc, r3]
 80196aa:	372a      	.short	0x372a
 80196ac:	5535      	.short	0x5535
 80196ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80196b2:	441e      	add	r6, r3
 80196b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80196b8:	2b20      	cmp	r3, #32
 80196ba:	bfc1      	itttt	gt
 80196bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80196c0:	409f      	lslgt	r7, r3
 80196c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80196c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80196ca:	bfd6      	itet	le
 80196cc:	f1c3 0320 	rsble	r3, r3, #32
 80196d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80196d4:	fa04 f003 	lslle.w	r0, r4, r3
 80196d8:	f7ea fe4c 	bl	8004374 <__aeabi_ui2d>
 80196dc:	2201      	movs	r2, #1
 80196de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80196e2:	3e01      	subs	r6, #1
 80196e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80196e6:	e777      	b.n	80195d8 <_dtoa_r+0x100>
 80196e8:	2301      	movs	r3, #1
 80196ea:	e7b8      	b.n	801965e <_dtoa_r+0x186>
 80196ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80196ee:	e7b7      	b.n	8019660 <_dtoa_r+0x188>
 80196f0:	427b      	negs	r3, r7
 80196f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80196f4:	2300      	movs	r3, #0
 80196f6:	eba8 0807 	sub.w	r8, r8, r7
 80196fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80196fc:	e7c4      	b.n	8019688 <_dtoa_r+0x1b0>
 80196fe:	2300      	movs	r3, #0
 8019700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019704:	2b00      	cmp	r3, #0
 8019706:	dc35      	bgt.n	8019774 <_dtoa_r+0x29c>
 8019708:	2301      	movs	r3, #1
 801970a:	9300      	str	r3, [sp, #0]
 801970c:	9307      	str	r3, [sp, #28]
 801970e:	461a      	mov	r2, r3
 8019710:	920e      	str	r2, [sp, #56]	@ 0x38
 8019712:	e00b      	b.n	801972c <_dtoa_r+0x254>
 8019714:	2301      	movs	r3, #1
 8019716:	e7f3      	b.n	8019700 <_dtoa_r+0x228>
 8019718:	2300      	movs	r3, #0
 801971a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801971c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801971e:	18fb      	adds	r3, r7, r3
 8019720:	9300      	str	r3, [sp, #0]
 8019722:	3301      	adds	r3, #1
 8019724:	2b01      	cmp	r3, #1
 8019726:	9307      	str	r3, [sp, #28]
 8019728:	bfb8      	it	lt
 801972a:	2301      	movlt	r3, #1
 801972c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8019730:	2100      	movs	r1, #0
 8019732:	2204      	movs	r2, #4
 8019734:	f102 0514 	add.w	r5, r2, #20
 8019738:	429d      	cmp	r5, r3
 801973a:	d91f      	bls.n	801977c <_dtoa_r+0x2a4>
 801973c:	6041      	str	r1, [r0, #4]
 801973e:	4658      	mov	r0, fp
 8019740:	f000 fd8e 	bl	801a260 <_Balloc>
 8019744:	4682      	mov	sl, r0
 8019746:	2800      	cmp	r0, #0
 8019748:	d13c      	bne.n	80197c4 <_dtoa_r+0x2ec>
 801974a:	4b1b      	ldr	r3, [pc, #108]	@ (80197b8 <_dtoa_r+0x2e0>)
 801974c:	4602      	mov	r2, r0
 801974e:	f240 11af 	movw	r1, #431	@ 0x1af
 8019752:	e6d8      	b.n	8019506 <_dtoa_r+0x2e>
 8019754:	2301      	movs	r3, #1
 8019756:	e7e0      	b.n	801971a <_dtoa_r+0x242>
 8019758:	2401      	movs	r4, #1
 801975a:	2300      	movs	r3, #0
 801975c:	9309      	str	r3, [sp, #36]	@ 0x24
 801975e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019760:	f04f 33ff 	mov.w	r3, #4294967295
 8019764:	9300      	str	r3, [sp, #0]
 8019766:	9307      	str	r3, [sp, #28]
 8019768:	2200      	movs	r2, #0
 801976a:	2312      	movs	r3, #18
 801976c:	e7d0      	b.n	8019710 <_dtoa_r+0x238>
 801976e:	2301      	movs	r3, #1
 8019770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019772:	e7f5      	b.n	8019760 <_dtoa_r+0x288>
 8019774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019776:	9300      	str	r3, [sp, #0]
 8019778:	9307      	str	r3, [sp, #28]
 801977a:	e7d7      	b.n	801972c <_dtoa_r+0x254>
 801977c:	3101      	adds	r1, #1
 801977e:	0052      	lsls	r2, r2, #1
 8019780:	e7d8      	b.n	8019734 <_dtoa_r+0x25c>
 8019782:	bf00      	nop
 8019784:	f3af 8000 	nop.w
 8019788:	636f4361 	.word	0x636f4361
 801978c:	3fd287a7 	.word	0x3fd287a7
 8019790:	8b60c8b3 	.word	0x8b60c8b3
 8019794:	3fc68a28 	.word	0x3fc68a28
 8019798:	509f79fb 	.word	0x509f79fb
 801979c:	3fd34413 	.word	0x3fd34413
 80197a0:	0801d22a 	.word	0x0801d22a
 80197a4:	0801d241 	.word	0x0801d241
 80197a8:	7ff00000 	.word	0x7ff00000
 80197ac:	0801d1fa 	.word	0x0801d1fa
 80197b0:	3ff80000 	.word	0x3ff80000
 80197b4:	0801d338 	.word	0x0801d338
 80197b8:	0801d299 	.word	0x0801d299
 80197bc:	0801d226 	.word	0x0801d226
 80197c0:	0801d1f9 	.word	0x0801d1f9
 80197c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80197c8:	6018      	str	r0, [r3, #0]
 80197ca:	9b07      	ldr	r3, [sp, #28]
 80197cc:	2b0e      	cmp	r3, #14
 80197ce:	f200 80a4 	bhi.w	801991a <_dtoa_r+0x442>
 80197d2:	2c00      	cmp	r4, #0
 80197d4:	f000 80a1 	beq.w	801991a <_dtoa_r+0x442>
 80197d8:	2f00      	cmp	r7, #0
 80197da:	dd33      	ble.n	8019844 <_dtoa_r+0x36c>
 80197dc:	4bad      	ldr	r3, [pc, #692]	@ (8019a94 <_dtoa_r+0x5bc>)
 80197de:	f007 020f 	and.w	r2, r7, #15
 80197e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80197e6:	ed93 7b00 	vldr	d7, [r3]
 80197ea:	05f8      	lsls	r0, r7, #23
 80197ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80197f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80197f4:	d516      	bpl.n	8019824 <_dtoa_r+0x34c>
 80197f6:	4ba8      	ldr	r3, [pc, #672]	@ (8019a98 <_dtoa_r+0x5c0>)
 80197f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80197fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019800:	f7ea ff5c 	bl	80046bc <__aeabi_ddiv>
 8019804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019808:	f004 040f 	and.w	r4, r4, #15
 801980c:	2603      	movs	r6, #3
 801980e:	4da2      	ldr	r5, [pc, #648]	@ (8019a98 <_dtoa_r+0x5c0>)
 8019810:	b954      	cbnz	r4, 8019828 <_dtoa_r+0x350>
 8019812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801981a:	f7ea ff4f 	bl	80046bc <__aeabi_ddiv>
 801981e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019822:	e028      	b.n	8019876 <_dtoa_r+0x39e>
 8019824:	2602      	movs	r6, #2
 8019826:	e7f2      	b.n	801980e <_dtoa_r+0x336>
 8019828:	07e1      	lsls	r1, r4, #31
 801982a:	d508      	bpl.n	801983e <_dtoa_r+0x366>
 801982c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019834:	f7ea fe18 	bl	8004468 <__aeabi_dmul>
 8019838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801983c:	3601      	adds	r6, #1
 801983e:	1064      	asrs	r4, r4, #1
 8019840:	3508      	adds	r5, #8
 8019842:	e7e5      	b.n	8019810 <_dtoa_r+0x338>
 8019844:	f000 80d2 	beq.w	80199ec <_dtoa_r+0x514>
 8019848:	427c      	negs	r4, r7
 801984a:	4b92      	ldr	r3, [pc, #584]	@ (8019a94 <_dtoa_r+0x5bc>)
 801984c:	4d92      	ldr	r5, [pc, #584]	@ (8019a98 <_dtoa_r+0x5c0>)
 801984e:	f004 020f 	and.w	r2, r4, #15
 8019852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801985a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801985e:	f7ea fe03 	bl	8004468 <__aeabi_dmul>
 8019862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019866:	1124      	asrs	r4, r4, #4
 8019868:	2300      	movs	r3, #0
 801986a:	2602      	movs	r6, #2
 801986c:	2c00      	cmp	r4, #0
 801986e:	f040 80b2 	bne.w	80199d6 <_dtoa_r+0x4fe>
 8019872:	2b00      	cmp	r3, #0
 8019874:	d1d3      	bne.n	801981e <_dtoa_r+0x346>
 8019876:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019878:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801987c:	2b00      	cmp	r3, #0
 801987e:	f000 80b7 	beq.w	80199f0 <_dtoa_r+0x518>
 8019882:	4b86      	ldr	r3, [pc, #536]	@ (8019a9c <_dtoa_r+0x5c4>)
 8019884:	2200      	movs	r2, #0
 8019886:	4620      	mov	r0, r4
 8019888:	4629      	mov	r1, r5
 801988a:	f7eb f85f 	bl	800494c <__aeabi_dcmplt>
 801988e:	2800      	cmp	r0, #0
 8019890:	f000 80ae 	beq.w	80199f0 <_dtoa_r+0x518>
 8019894:	9b07      	ldr	r3, [sp, #28]
 8019896:	2b00      	cmp	r3, #0
 8019898:	f000 80aa 	beq.w	80199f0 <_dtoa_r+0x518>
 801989c:	9b00      	ldr	r3, [sp, #0]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	dd37      	ble.n	8019912 <_dtoa_r+0x43a>
 80198a2:	1e7b      	subs	r3, r7, #1
 80198a4:	9304      	str	r3, [sp, #16]
 80198a6:	4620      	mov	r0, r4
 80198a8:	4b7d      	ldr	r3, [pc, #500]	@ (8019aa0 <_dtoa_r+0x5c8>)
 80198aa:	2200      	movs	r2, #0
 80198ac:	4629      	mov	r1, r5
 80198ae:	f7ea fddb 	bl	8004468 <__aeabi_dmul>
 80198b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198b6:	9c00      	ldr	r4, [sp, #0]
 80198b8:	3601      	adds	r6, #1
 80198ba:	4630      	mov	r0, r6
 80198bc:	f7ea fd6a 	bl	8004394 <__aeabi_i2d>
 80198c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80198c4:	f7ea fdd0 	bl	8004468 <__aeabi_dmul>
 80198c8:	4b76      	ldr	r3, [pc, #472]	@ (8019aa4 <_dtoa_r+0x5cc>)
 80198ca:	2200      	movs	r2, #0
 80198cc:	f7ea fc16 	bl	80040fc <__adddf3>
 80198d0:	4605      	mov	r5, r0
 80198d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80198d6:	2c00      	cmp	r4, #0
 80198d8:	f040 808d 	bne.w	80199f6 <_dtoa_r+0x51e>
 80198dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80198e0:	4b71      	ldr	r3, [pc, #452]	@ (8019aa8 <_dtoa_r+0x5d0>)
 80198e2:	2200      	movs	r2, #0
 80198e4:	f7ea fc08 	bl	80040f8 <__aeabi_dsub>
 80198e8:	4602      	mov	r2, r0
 80198ea:	460b      	mov	r3, r1
 80198ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80198f0:	462a      	mov	r2, r5
 80198f2:	4633      	mov	r3, r6
 80198f4:	f7eb f848 	bl	8004988 <__aeabi_dcmpgt>
 80198f8:	2800      	cmp	r0, #0
 80198fa:	f040 828b 	bne.w	8019e14 <_dtoa_r+0x93c>
 80198fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019902:	462a      	mov	r2, r5
 8019904:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8019908:	f7eb f820 	bl	800494c <__aeabi_dcmplt>
 801990c:	2800      	cmp	r0, #0
 801990e:	f040 8128 	bne.w	8019b62 <_dtoa_r+0x68a>
 8019912:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8019916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801991a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801991c:	2b00      	cmp	r3, #0
 801991e:	f2c0 815a 	blt.w	8019bd6 <_dtoa_r+0x6fe>
 8019922:	2f0e      	cmp	r7, #14
 8019924:	f300 8157 	bgt.w	8019bd6 <_dtoa_r+0x6fe>
 8019928:	4b5a      	ldr	r3, [pc, #360]	@ (8019a94 <_dtoa_r+0x5bc>)
 801992a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801992e:	ed93 7b00 	vldr	d7, [r3]
 8019932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019934:	2b00      	cmp	r3, #0
 8019936:	ed8d 7b00 	vstr	d7, [sp]
 801993a:	da03      	bge.n	8019944 <_dtoa_r+0x46c>
 801993c:	9b07      	ldr	r3, [sp, #28]
 801993e:	2b00      	cmp	r3, #0
 8019940:	f340 8101 	ble.w	8019b46 <_dtoa_r+0x66e>
 8019944:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019948:	4656      	mov	r6, sl
 801994a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801994e:	4620      	mov	r0, r4
 8019950:	4629      	mov	r1, r5
 8019952:	f7ea feb3 	bl	80046bc <__aeabi_ddiv>
 8019956:	f7eb f837 	bl	80049c8 <__aeabi_d2iz>
 801995a:	4680      	mov	r8, r0
 801995c:	f7ea fd1a 	bl	8004394 <__aeabi_i2d>
 8019960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019964:	f7ea fd80 	bl	8004468 <__aeabi_dmul>
 8019968:	4602      	mov	r2, r0
 801996a:	460b      	mov	r3, r1
 801996c:	4620      	mov	r0, r4
 801996e:	4629      	mov	r1, r5
 8019970:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8019974:	f7ea fbc0 	bl	80040f8 <__aeabi_dsub>
 8019978:	f806 4b01 	strb.w	r4, [r6], #1
 801997c:	9d07      	ldr	r5, [sp, #28]
 801997e:	eba6 040a 	sub.w	r4, r6, sl
 8019982:	42a5      	cmp	r5, r4
 8019984:	4602      	mov	r2, r0
 8019986:	460b      	mov	r3, r1
 8019988:	f040 8117 	bne.w	8019bba <_dtoa_r+0x6e2>
 801998c:	f7ea fbb6 	bl	80040fc <__adddf3>
 8019990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019994:	4604      	mov	r4, r0
 8019996:	460d      	mov	r5, r1
 8019998:	f7ea fff6 	bl	8004988 <__aeabi_dcmpgt>
 801999c:	2800      	cmp	r0, #0
 801999e:	f040 80f9 	bne.w	8019b94 <_dtoa_r+0x6bc>
 80199a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80199a6:	4620      	mov	r0, r4
 80199a8:	4629      	mov	r1, r5
 80199aa:	f7ea ffc5 	bl	8004938 <__aeabi_dcmpeq>
 80199ae:	b118      	cbz	r0, 80199b8 <_dtoa_r+0x4e0>
 80199b0:	f018 0f01 	tst.w	r8, #1
 80199b4:	f040 80ee 	bne.w	8019b94 <_dtoa_r+0x6bc>
 80199b8:	4649      	mov	r1, r9
 80199ba:	4658      	mov	r0, fp
 80199bc:	f000 fc90 	bl	801a2e0 <_Bfree>
 80199c0:	2300      	movs	r3, #0
 80199c2:	7033      	strb	r3, [r6, #0]
 80199c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80199c6:	3701      	adds	r7, #1
 80199c8:	601f      	str	r7, [r3, #0]
 80199ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	f000 831d 	beq.w	801a00c <_dtoa_r+0xb34>
 80199d2:	601e      	str	r6, [r3, #0]
 80199d4:	e31a      	b.n	801a00c <_dtoa_r+0xb34>
 80199d6:	07e2      	lsls	r2, r4, #31
 80199d8:	d505      	bpl.n	80199e6 <_dtoa_r+0x50e>
 80199da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80199de:	f7ea fd43 	bl	8004468 <__aeabi_dmul>
 80199e2:	3601      	adds	r6, #1
 80199e4:	2301      	movs	r3, #1
 80199e6:	1064      	asrs	r4, r4, #1
 80199e8:	3508      	adds	r5, #8
 80199ea:	e73f      	b.n	801986c <_dtoa_r+0x394>
 80199ec:	2602      	movs	r6, #2
 80199ee:	e742      	b.n	8019876 <_dtoa_r+0x39e>
 80199f0:	9c07      	ldr	r4, [sp, #28]
 80199f2:	9704      	str	r7, [sp, #16]
 80199f4:	e761      	b.n	80198ba <_dtoa_r+0x3e2>
 80199f6:	4b27      	ldr	r3, [pc, #156]	@ (8019a94 <_dtoa_r+0x5bc>)
 80199f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80199fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80199fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019a02:	4454      	add	r4, sl
 8019a04:	2900      	cmp	r1, #0
 8019a06:	d053      	beq.n	8019ab0 <_dtoa_r+0x5d8>
 8019a08:	4928      	ldr	r1, [pc, #160]	@ (8019aac <_dtoa_r+0x5d4>)
 8019a0a:	2000      	movs	r0, #0
 8019a0c:	f7ea fe56 	bl	80046bc <__aeabi_ddiv>
 8019a10:	4633      	mov	r3, r6
 8019a12:	462a      	mov	r2, r5
 8019a14:	f7ea fb70 	bl	80040f8 <__aeabi_dsub>
 8019a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8019a1c:	4656      	mov	r6, sl
 8019a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a22:	f7ea ffd1 	bl	80049c8 <__aeabi_d2iz>
 8019a26:	4605      	mov	r5, r0
 8019a28:	f7ea fcb4 	bl	8004394 <__aeabi_i2d>
 8019a2c:	4602      	mov	r2, r0
 8019a2e:	460b      	mov	r3, r1
 8019a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a34:	f7ea fb60 	bl	80040f8 <__aeabi_dsub>
 8019a38:	3530      	adds	r5, #48	@ 0x30
 8019a3a:	4602      	mov	r2, r0
 8019a3c:	460b      	mov	r3, r1
 8019a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019a42:	f806 5b01 	strb.w	r5, [r6], #1
 8019a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8019a4a:	f7ea ff7f 	bl	800494c <__aeabi_dcmplt>
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	d171      	bne.n	8019b36 <_dtoa_r+0x65e>
 8019a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a56:	4911      	ldr	r1, [pc, #68]	@ (8019a9c <_dtoa_r+0x5c4>)
 8019a58:	2000      	movs	r0, #0
 8019a5a:	f7ea fb4d 	bl	80040f8 <__aeabi_dsub>
 8019a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8019a62:	f7ea ff73 	bl	800494c <__aeabi_dcmplt>
 8019a66:	2800      	cmp	r0, #0
 8019a68:	f040 8095 	bne.w	8019b96 <_dtoa_r+0x6be>
 8019a6c:	42a6      	cmp	r6, r4
 8019a6e:	f43f af50 	beq.w	8019912 <_dtoa_r+0x43a>
 8019a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8019a76:	4b0a      	ldr	r3, [pc, #40]	@ (8019aa0 <_dtoa_r+0x5c8>)
 8019a78:	2200      	movs	r2, #0
 8019a7a:	f7ea fcf5 	bl	8004468 <__aeabi_dmul>
 8019a7e:	4b08      	ldr	r3, [pc, #32]	@ (8019aa0 <_dtoa_r+0x5c8>)
 8019a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8019a84:	2200      	movs	r2, #0
 8019a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a8a:	f7ea fced 	bl	8004468 <__aeabi_dmul>
 8019a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a92:	e7c4      	b.n	8019a1e <_dtoa_r+0x546>
 8019a94:	0801d338 	.word	0x0801d338
 8019a98:	0801d310 	.word	0x0801d310
 8019a9c:	3ff00000 	.word	0x3ff00000
 8019aa0:	40240000 	.word	0x40240000
 8019aa4:	401c0000 	.word	0x401c0000
 8019aa8:	40140000 	.word	0x40140000
 8019aac:	3fe00000 	.word	0x3fe00000
 8019ab0:	4631      	mov	r1, r6
 8019ab2:	4628      	mov	r0, r5
 8019ab4:	f7ea fcd8 	bl	8004468 <__aeabi_dmul>
 8019ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8019abc:	9415      	str	r4, [sp, #84]	@ 0x54
 8019abe:	4656      	mov	r6, sl
 8019ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ac4:	f7ea ff80 	bl	80049c8 <__aeabi_d2iz>
 8019ac8:	4605      	mov	r5, r0
 8019aca:	f7ea fc63 	bl	8004394 <__aeabi_i2d>
 8019ace:	4602      	mov	r2, r0
 8019ad0:	460b      	mov	r3, r1
 8019ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ad6:	f7ea fb0f 	bl	80040f8 <__aeabi_dsub>
 8019ada:	3530      	adds	r5, #48	@ 0x30
 8019adc:	f806 5b01 	strb.w	r5, [r6], #1
 8019ae0:	4602      	mov	r2, r0
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	42a6      	cmp	r6, r4
 8019ae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019aea:	f04f 0200 	mov.w	r2, #0
 8019aee:	d124      	bne.n	8019b3a <_dtoa_r+0x662>
 8019af0:	4bac      	ldr	r3, [pc, #688]	@ (8019da4 <_dtoa_r+0x8cc>)
 8019af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8019af6:	f7ea fb01 	bl	80040fc <__adddf3>
 8019afa:	4602      	mov	r2, r0
 8019afc:	460b      	mov	r3, r1
 8019afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b02:	f7ea ff41 	bl	8004988 <__aeabi_dcmpgt>
 8019b06:	2800      	cmp	r0, #0
 8019b08:	d145      	bne.n	8019b96 <_dtoa_r+0x6be>
 8019b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8019b0e:	49a5      	ldr	r1, [pc, #660]	@ (8019da4 <_dtoa_r+0x8cc>)
 8019b10:	2000      	movs	r0, #0
 8019b12:	f7ea faf1 	bl	80040f8 <__aeabi_dsub>
 8019b16:	4602      	mov	r2, r0
 8019b18:	460b      	mov	r3, r1
 8019b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b1e:	f7ea ff15 	bl	800494c <__aeabi_dcmplt>
 8019b22:	2800      	cmp	r0, #0
 8019b24:	f43f aef5 	beq.w	8019912 <_dtoa_r+0x43a>
 8019b28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8019b2a:	1e73      	subs	r3, r6, #1
 8019b2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8019b2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019b32:	2b30      	cmp	r3, #48	@ 0x30
 8019b34:	d0f8      	beq.n	8019b28 <_dtoa_r+0x650>
 8019b36:	9f04      	ldr	r7, [sp, #16]
 8019b38:	e73e      	b.n	80199b8 <_dtoa_r+0x4e0>
 8019b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8019da8 <_dtoa_r+0x8d0>)
 8019b3c:	f7ea fc94 	bl	8004468 <__aeabi_dmul>
 8019b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019b44:	e7bc      	b.n	8019ac0 <_dtoa_r+0x5e8>
 8019b46:	d10c      	bne.n	8019b62 <_dtoa_r+0x68a>
 8019b48:	4b98      	ldr	r3, [pc, #608]	@ (8019dac <_dtoa_r+0x8d4>)
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b50:	f7ea fc8a 	bl	8004468 <__aeabi_dmul>
 8019b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019b58:	f7ea ff0c 	bl	8004974 <__aeabi_dcmpge>
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	f000 8157 	beq.w	8019e10 <_dtoa_r+0x938>
 8019b62:	2400      	movs	r4, #0
 8019b64:	4625      	mov	r5, r4
 8019b66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b68:	43db      	mvns	r3, r3
 8019b6a:	9304      	str	r3, [sp, #16]
 8019b6c:	4656      	mov	r6, sl
 8019b6e:	2700      	movs	r7, #0
 8019b70:	4621      	mov	r1, r4
 8019b72:	4658      	mov	r0, fp
 8019b74:	f000 fbb4 	bl	801a2e0 <_Bfree>
 8019b78:	2d00      	cmp	r5, #0
 8019b7a:	d0dc      	beq.n	8019b36 <_dtoa_r+0x65e>
 8019b7c:	b12f      	cbz	r7, 8019b8a <_dtoa_r+0x6b2>
 8019b7e:	42af      	cmp	r7, r5
 8019b80:	d003      	beq.n	8019b8a <_dtoa_r+0x6b2>
 8019b82:	4639      	mov	r1, r7
 8019b84:	4658      	mov	r0, fp
 8019b86:	f000 fbab 	bl	801a2e0 <_Bfree>
 8019b8a:	4629      	mov	r1, r5
 8019b8c:	4658      	mov	r0, fp
 8019b8e:	f000 fba7 	bl	801a2e0 <_Bfree>
 8019b92:	e7d0      	b.n	8019b36 <_dtoa_r+0x65e>
 8019b94:	9704      	str	r7, [sp, #16]
 8019b96:	4633      	mov	r3, r6
 8019b98:	461e      	mov	r6, r3
 8019b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019b9e:	2a39      	cmp	r2, #57	@ 0x39
 8019ba0:	d107      	bne.n	8019bb2 <_dtoa_r+0x6da>
 8019ba2:	459a      	cmp	sl, r3
 8019ba4:	d1f8      	bne.n	8019b98 <_dtoa_r+0x6c0>
 8019ba6:	9a04      	ldr	r2, [sp, #16]
 8019ba8:	3201      	adds	r2, #1
 8019baa:	9204      	str	r2, [sp, #16]
 8019bac:	2230      	movs	r2, #48	@ 0x30
 8019bae:	f88a 2000 	strb.w	r2, [sl]
 8019bb2:	781a      	ldrb	r2, [r3, #0]
 8019bb4:	3201      	adds	r2, #1
 8019bb6:	701a      	strb	r2, [r3, #0]
 8019bb8:	e7bd      	b.n	8019b36 <_dtoa_r+0x65e>
 8019bba:	4b7b      	ldr	r3, [pc, #492]	@ (8019da8 <_dtoa_r+0x8d0>)
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	f7ea fc53 	bl	8004468 <__aeabi_dmul>
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	460d      	mov	r5, r1
 8019bca:	f7ea feb5 	bl	8004938 <__aeabi_dcmpeq>
 8019bce:	2800      	cmp	r0, #0
 8019bd0:	f43f aebb 	beq.w	801994a <_dtoa_r+0x472>
 8019bd4:	e6f0      	b.n	80199b8 <_dtoa_r+0x4e0>
 8019bd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019bd8:	2a00      	cmp	r2, #0
 8019bda:	f000 80db 	beq.w	8019d94 <_dtoa_r+0x8bc>
 8019bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019be0:	2a01      	cmp	r2, #1
 8019be2:	f300 80bf 	bgt.w	8019d64 <_dtoa_r+0x88c>
 8019be6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019be8:	2a00      	cmp	r2, #0
 8019bea:	f000 80b7 	beq.w	8019d5c <_dtoa_r+0x884>
 8019bee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8019bf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019bf4:	4646      	mov	r6, r8
 8019bf6:	9a08      	ldr	r2, [sp, #32]
 8019bf8:	2101      	movs	r1, #1
 8019bfa:	441a      	add	r2, r3
 8019bfc:	4658      	mov	r0, fp
 8019bfe:	4498      	add	r8, r3
 8019c00:	9208      	str	r2, [sp, #32]
 8019c02:	f000 fc21 	bl	801a448 <__i2b>
 8019c06:	4605      	mov	r5, r0
 8019c08:	b15e      	cbz	r6, 8019c22 <_dtoa_r+0x74a>
 8019c0a:	9b08      	ldr	r3, [sp, #32]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	dd08      	ble.n	8019c22 <_dtoa_r+0x74a>
 8019c10:	42b3      	cmp	r3, r6
 8019c12:	9a08      	ldr	r2, [sp, #32]
 8019c14:	bfa8      	it	ge
 8019c16:	4633      	movge	r3, r6
 8019c18:	eba8 0803 	sub.w	r8, r8, r3
 8019c1c:	1af6      	subs	r6, r6, r3
 8019c1e:	1ad3      	subs	r3, r2, r3
 8019c20:	9308      	str	r3, [sp, #32]
 8019c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c24:	b1f3      	cbz	r3, 8019c64 <_dtoa_r+0x78c>
 8019c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	f000 80b7 	beq.w	8019d9c <_dtoa_r+0x8c4>
 8019c2e:	b18c      	cbz	r4, 8019c54 <_dtoa_r+0x77c>
 8019c30:	4629      	mov	r1, r5
 8019c32:	4622      	mov	r2, r4
 8019c34:	4658      	mov	r0, fp
 8019c36:	f000 fcc7 	bl	801a5c8 <__pow5mult>
 8019c3a:	464a      	mov	r2, r9
 8019c3c:	4601      	mov	r1, r0
 8019c3e:	4605      	mov	r5, r0
 8019c40:	4658      	mov	r0, fp
 8019c42:	f000 fc17 	bl	801a474 <__multiply>
 8019c46:	4649      	mov	r1, r9
 8019c48:	9004      	str	r0, [sp, #16]
 8019c4a:	4658      	mov	r0, fp
 8019c4c:	f000 fb48 	bl	801a2e0 <_Bfree>
 8019c50:	9b04      	ldr	r3, [sp, #16]
 8019c52:	4699      	mov	r9, r3
 8019c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c56:	1b1a      	subs	r2, r3, r4
 8019c58:	d004      	beq.n	8019c64 <_dtoa_r+0x78c>
 8019c5a:	4649      	mov	r1, r9
 8019c5c:	4658      	mov	r0, fp
 8019c5e:	f000 fcb3 	bl	801a5c8 <__pow5mult>
 8019c62:	4681      	mov	r9, r0
 8019c64:	2101      	movs	r1, #1
 8019c66:	4658      	mov	r0, fp
 8019c68:	f000 fbee 	bl	801a448 <__i2b>
 8019c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c6e:	4604      	mov	r4, r0
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	f000 81cf 	beq.w	801a014 <_dtoa_r+0xb3c>
 8019c76:	461a      	mov	r2, r3
 8019c78:	4601      	mov	r1, r0
 8019c7a:	4658      	mov	r0, fp
 8019c7c:	f000 fca4 	bl	801a5c8 <__pow5mult>
 8019c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c82:	2b01      	cmp	r3, #1
 8019c84:	4604      	mov	r4, r0
 8019c86:	f300 8095 	bgt.w	8019db4 <_dtoa_r+0x8dc>
 8019c8a:	9b02      	ldr	r3, [sp, #8]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	f040 8087 	bne.w	8019da0 <_dtoa_r+0x8c8>
 8019c92:	9b03      	ldr	r3, [sp, #12]
 8019c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	f040 8089 	bne.w	8019db0 <_dtoa_r+0x8d8>
 8019c9e:	9b03      	ldr	r3, [sp, #12]
 8019ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019ca4:	0d1b      	lsrs	r3, r3, #20
 8019ca6:	051b      	lsls	r3, r3, #20
 8019ca8:	b12b      	cbz	r3, 8019cb6 <_dtoa_r+0x7de>
 8019caa:	9b08      	ldr	r3, [sp, #32]
 8019cac:	3301      	adds	r3, #1
 8019cae:	9308      	str	r3, [sp, #32]
 8019cb0:	f108 0801 	add.w	r8, r8, #1
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f000 81b0 	beq.w	801a020 <_dtoa_r+0xb48>
 8019cc0:	6923      	ldr	r3, [r4, #16]
 8019cc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019cc6:	6918      	ldr	r0, [r3, #16]
 8019cc8:	f000 fb72 	bl	801a3b0 <__hi0bits>
 8019ccc:	f1c0 0020 	rsb	r0, r0, #32
 8019cd0:	9b08      	ldr	r3, [sp, #32]
 8019cd2:	4418      	add	r0, r3
 8019cd4:	f010 001f 	ands.w	r0, r0, #31
 8019cd8:	d077      	beq.n	8019dca <_dtoa_r+0x8f2>
 8019cda:	f1c0 0320 	rsb	r3, r0, #32
 8019cde:	2b04      	cmp	r3, #4
 8019ce0:	dd6b      	ble.n	8019dba <_dtoa_r+0x8e2>
 8019ce2:	9b08      	ldr	r3, [sp, #32]
 8019ce4:	f1c0 001c 	rsb	r0, r0, #28
 8019ce8:	4403      	add	r3, r0
 8019cea:	4480      	add	r8, r0
 8019cec:	4406      	add	r6, r0
 8019cee:	9308      	str	r3, [sp, #32]
 8019cf0:	f1b8 0f00 	cmp.w	r8, #0
 8019cf4:	dd05      	ble.n	8019d02 <_dtoa_r+0x82a>
 8019cf6:	4649      	mov	r1, r9
 8019cf8:	4642      	mov	r2, r8
 8019cfa:	4658      	mov	r0, fp
 8019cfc:	f000 fcbe 	bl	801a67c <__lshift>
 8019d00:	4681      	mov	r9, r0
 8019d02:	9b08      	ldr	r3, [sp, #32]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	dd05      	ble.n	8019d14 <_dtoa_r+0x83c>
 8019d08:	4621      	mov	r1, r4
 8019d0a:	461a      	mov	r2, r3
 8019d0c:	4658      	mov	r0, fp
 8019d0e:	f000 fcb5 	bl	801a67c <__lshift>
 8019d12:	4604      	mov	r4, r0
 8019d14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d059      	beq.n	8019dce <_dtoa_r+0x8f6>
 8019d1a:	4621      	mov	r1, r4
 8019d1c:	4648      	mov	r0, r9
 8019d1e:	f000 fd19 	bl	801a754 <__mcmp>
 8019d22:	2800      	cmp	r0, #0
 8019d24:	da53      	bge.n	8019dce <_dtoa_r+0x8f6>
 8019d26:	1e7b      	subs	r3, r7, #1
 8019d28:	9304      	str	r3, [sp, #16]
 8019d2a:	4649      	mov	r1, r9
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	220a      	movs	r2, #10
 8019d30:	4658      	mov	r0, fp
 8019d32:	f000 faf7 	bl	801a324 <__multadd>
 8019d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019d38:	4681      	mov	r9, r0
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	f000 8172 	beq.w	801a024 <_dtoa_r+0xb4c>
 8019d40:	2300      	movs	r3, #0
 8019d42:	4629      	mov	r1, r5
 8019d44:	220a      	movs	r2, #10
 8019d46:	4658      	mov	r0, fp
 8019d48:	f000 faec 	bl	801a324 <__multadd>
 8019d4c:	9b00      	ldr	r3, [sp, #0]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	4605      	mov	r5, r0
 8019d52:	dc67      	bgt.n	8019e24 <_dtoa_r+0x94c>
 8019d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d56:	2b02      	cmp	r3, #2
 8019d58:	dc41      	bgt.n	8019dde <_dtoa_r+0x906>
 8019d5a:	e063      	b.n	8019e24 <_dtoa_r+0x94c>
 8019d5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019d5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8019d62:	e746      	b.n	8019bf2 <_dtoa_r+0x71a>
 8019d64:	9b07      	ldr	r3, [sp, #28]
 8019d66:	1e5c      	subs	r4, r3, #1
 8019d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d6a:	42a3      	cmp	r3, r4
 8019d6c:	bfbf      	itttt	lt
 8019d6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019d70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8019d72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8019d74:	1ae3      	sublt	r3, r4, r3
 8019d76:	bfb4      	ite	lt
 8019d78:	18d2      	addlt	r2, r2, r3
 8019d7a:	1b1c      	subge	r4, r3, r4
 8019d7c:	9b07      	ldr	r3, [sp, #28]
 8019d7e:	bfbc      	itt	lt
 8019d80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8019d82:	2400      	movlt	r4, #0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	bfb5      	itete	lt
 8019d88:	eba8 0603 	sublt.w	r6, r8, r3
 8019d8c:	9b07      	ldrge	r3, [sp, #28]
 8019d8e:	2300      	movlt	r3, #0
 8019d90:	4646      	movge	r6, r8
 8019d92:	e730      	b.n	8019bf6 <_dtoa_r+0x71e>
 8019d94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019d96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8019d98:	4646      	mov	r6, r8
 8019d9a:	e735      	b.n	8019c08 <_dtoa_r+0x730>
 8019d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d9e:	e75c      	b.n	8019c5a <_dtoa_r+0x782>
 8019da0:	2300      	movs	r3, #0
 8019da2:	e788      	b.n	8019cb6 <_dtoa_r+0x7de>
 8019da4:	3fe00000 	.word	0x3fe00000
 8019da8:	40240000 	.word	0x40240000
 8019dac:	40140000 	.word	0x40140000
 8019db0:	9b02      	ldr	r3, [sp, #8]
 8019db2:	e780      	b.n	8019cb6 <_dtoa_r+0x7de>
 8019db4:	2300      	movs	r3, #0
 8019db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8019db8:	e782      	b.n	8019cc0 <_dtoa_r+0x7e8>
 8019dba:	d099      	beq.n	8019cf0 <_dtoa_r+0x818>
 8019dbc:	9a08      	ldr	r2, [sp, #32]
 8019dbe:	331c      	adds	r3, #28
 8019dc0:	441a      	add	r2, r3
 8019dc2:	4498      	add	r8, r3
 8019dc4:	441e      	add	r6, r3
 8019dc6:	9208      	str	r2, [sp, #32]
 8019dc8:	e792      	b.n	8019cf0 <_dtoa_r+0x818>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	e7f6      	b.n	8019dbc <_dtoa_r+0x8e4>
 8019dce:	9b07      	ldr	r3, [sp, #28]
 8019dd0:	9704      	str	r7, [sp, #16]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	dc20      	bgt.n	8019e18 <_dtoa_r+0x940>
 8019dd6:	9300      	str	r3, [sp, #0]
 8019dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019dda:	2b02      	cmp	r3, #2
 8019ddc:	dd1e      	ble.n	8019e1c <_dtoa_r+0x944>
 8019dde:	9b00      	ldr	r3, [sp, #0]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	f47f aec0 	bne.w	8019b66 <_dtoa_r+0x68e>
 8019de6:	4621      	mov	r1, r4
 8019de8:	2205      	movs	r2, #5
 8019dea:	4658      	mov	r0, fp
 8019dec:	f000 fa9a 	bl	801a324 <__multadd>
 8019df0:	4601      	mov	r1, r0
 8019df2:	4604      	mov	r4, r0
 8019df4:	4648      	mov	r0, r9
 8019df6:	f000 fcad 	bl	801a754 <__mcmp>
 8019dfa:	2800      	cmp	r0, #0
 8019dfc:	f77f aeb3 	ble.w	8019b66 <_dtoa_r+0x68e>
 8019e00:	4656      	mov	r6, sl
 8019e02:	2331      	movs	r3, #49	@ 0x31
 8019e04:	f806 3b01 	strb.w	r3, [r6], #1
 8019e08:	9b04      	ldr	r3, [sp, #16]
 8019e0a:	3301      	adds	r3, #1
 8019e0c:	9304      	str	r3, [sp, #16]
 8019e0e:	e6ae      	b.n	8019b6e <_dtoa_r+0x696>
 8019e10:	9c07      	ldr	r4, [sp, #28]
 8019e12:	9704      	str	r7, [sp, #16]
 8019e14:	4625      	mov	r5, r4
 8019e16:	e7f3      	b.n	8019e00 <_dtoa_r+0x928>
 8019e18:	9b07      	ldr	r3, [sp, #28]
 8019e1a:	9300      	str	r3, [sp, #0]
 8019e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	f000 8104 	beq.w	801a02c <_dtoa_r+0xb54>
 8019e24:	2e00      	cmp	r6, #0
 8019e26:	dd05      	ble.n	8019e34 <_dtoa_r+0x95c>
 8019e28:	4629      	mov	r1, r5
 8019e2a:	4632      	mov	r2, r6
 8019e2c:	4658      	mov	r0, fp
 8019e2e:	f000 fc25 	bl	801a67c <__lshift>
 8019e32:	4605      	mov	r5, r0
 8019e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d05a      	beq.n	8019ef0 <_dtoa_r+0xa18>
 8019e3a:	6869      	ldr	r1, [r5, #4]
 8019e3c:	4658      	mov	r0, fp
 8019e3e:	f000 fa0f 	bl	801a260 <_Balloc>
 8019e42:	4606      	mov	r6, r0
 8019e44:	b928      	cbnz	r0, 8019e52 <_dtoa_r+0x97a>
 8019e46:	4b84      	ldr	r3, [pc, #528]	@ (801a058 <_dtoa_r+0xb80>)
 8019e48:	4602      	mov	r2, r0
 8019e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019e4e:	f7ff bb5a 	b.w	8019506 <_dtoa_r+0x2e>
 8019e52:	692a      	ldr	r2, [r5, #16]
 8019e54:	3202      	adds	r2, #2
 8019e56:	0092      	lsls	r2, r2, #2
 8019e58:	f105 010c 	add.w	r1, r5, #12
 8019e5c:	300c      	adds	r0, #12
 8019e5e:	f7ff faa4 	bl	80193aa <memcpy>
 8019e62:	2201      	movs	r2, #1
 8019e64:	4631      	mov	r1, r6
 8019e66:	4658      	mov	r0, fp
 8019e68:	f000 fc08 	bl	801a67c <__lshift>
 8019e6c:	f10a 0301 	add.w	r3, sl, #1
 8019e70:	9307      	str	r3, [sp, #28]
 8019e72:	9b00      	ldr	r3, [sp, #0]
 8019e74:	4453      	add	r3, sl
 8019e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019e78:	9b02      	ldr	r3, [sp, #8]
 8019e7a:	f003 0301 	and.w	r3, r3, #1
 8019e7e:	462f      	mov	r7, r5
 8019e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8019e82:	4605      	mov	r5, r0
 8019e84:	9b07      	ldr	r3, [sp, #28]
 8019e86:	4621      	mov	r1, r4
 8019e88:	3b01      	subs	r3, #1
 8019e8a:	4648      	mov	r0, r9
 8019e8c:	9300      	str	r3, [sp, #0]
 8019e8e:	f7ff fa9a 	bl	80193c6 <quorem>
 8019e92:	4639      	mov	r1, r7
 8019e94:	9002      	str	r0, [sp, #8]
 8019e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8019e9a:	4648      	mov	r0, r9
 8019e9c:	f000 fc5a 	bl	801a754 <__mcmp>
 8019ea0:	462a      	mov	r2, r5
 8019ea2:	9008      	str	r0, [sp, #32]
 8019ea4:	4621      	mov	r1, r4
 8019ea6:	4658      	mov	r0, fp
 8019ea8:	f000 fc70 	bl	801a78c <__mdiff>
 8019eac:	68c2      	ldr	r2, [r0, #12]
 8019eae:	4606      	mov	r6, r0
 8019eb0:	bb02      	cbnz	r2, 8019ef4 <_dtoa_r+0xa1c>
 8019eb2:	4601      	mov	r1, r0
 8019eb4:	4648      	mov	r0, r9
 8019eb6:	f000 fc4d 	bl	801a754 <__mcmp>
 8019eba:	4602      	mov	r2, r0
 8019ebc:	4631      	mov	r1, r6
 8019ebe:	4658      	mov	r0, fp
 8019ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8019ec2:	f000 fa0d 	bl	801a2e0 <_Bfree>
 8019ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019eca:	9e07      	ldr	r6, [sp, #28]
 8019ecc:	ea43 0102 	orr.w	r1, r3, r2
 8019ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ed2:	4319      	orrs	r1, r3
 8019ed4:	d110      	bne.n	8019ef8 <_dtoa_r+0xa20>
 8019ed6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8019eda:	d029      	beq.n	8019f30 <_dtoa_r+0xa58>
 8019edc:	9b08      	ldr	r3, [sp, #32]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	dd02      	ble.n	8019ee8 <_dtoa_r+0xa10>
 8019ee2:	9b02      	ldr	r3, [sp, #8]
 8019ee4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8019ee8:	9b00      	ldr	r3, [sp, #0]
 8019eea:	f883 8000 	strb.w	r8, [r3]
 8019eee:	e63f      	b.n	8019b70 <_dtoa_r+0x698>
 8019ef0:	4628      	mov	r0, r5
 8019ef2:	e7bb      	b.n	8019e6c <_dtoa_r+0x994>
 8019ef4:	2201      	movs	r2, #1
 8019ef6:	e7e1      	b.n	8019ebc <_dtoa_r+0x9e4>
 8019ef8:	9b08      	ldr	r3, [sp, #32]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	db04      	blt.n	8019f08 <_dtoa_r+0xa30>
 8019efe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019f00:	430b      	orrs	r3, r1
 8019f02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f04:	430b      	orrs	r3, r1
 8019f06:	d120      	bne.n	8019f4a <_dtoa_r+0xa72>
 8019f08:	2a00      	cmp	r2, #0
 8019f0a:	dded      	ble.n	8019ee8 <_dtoa_r+0xa10>
 8019f0c:	4649      	mov	r1, r9
 8019f0e:	2201      	movs	r2, #1
 8019f10:	4658      	mov	r0, fp
 8019f12:	f000 fbb3 	bl	801a67c <__lshift>
 8019f16:	4621      	mov	r1, r4
 8019f18:	4681      	mov	r9, r0
 8019f1a:	f000 fc1b 	bl	801a754 <__mcmp>
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	dc03      	bgt.n	8019f2a <_dtoa_r+0xa52>
 8019f22:	d1e1      	bne.n	8019ee8 <_dtoa_r+0xa10>
 8019f24:	f018 0f01 	tst.w	r8, #1
 8019f28:	d0de      	beq.n	8019ee8 <_dtoa_r+0xa10>
 8019f2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8019f2e:	d1d8      	bne.n	8019ee2 <_dtoa_r+0xa0a>
 8019f30:	9a00      	ldr	r2, [sp, #0]
 8019f32:	2339      	movs	r3, #57	@ 0x39
 8019f34:	7013      	strb	r3, [r2, #0]
 8019f36:	4633      	mov	r3, r6
 8019f38:	461e      	mov	r6, r3
 8019f3a:	3b01      	subs	r3, #1
 8019f3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019f40:	2a39      	cmp	r2, #57	@ 0x39
 8019f42:	d052      	beq.n	8019fea <_dtoa_r+0xb12>
 8019f44:	3201      	adds	r2, #1
 8019f46:	701a      	strb	r2, [r3, #0]
 8019f48:	e612      	b.n	8019b70 <_dtoa_r+0x698>
 8019f4a:	2a00      	cmp	r2, #0
 8019f4c:	dd07      	ble.n	8019f5e <_dtoa_r+0xa86>
 8019f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8019f52:	d0ed      	beq.n	8019f30 <_dtoa_r+0xa58>
 8019f54:	9a00      	ldr	r2, [sp, #0]
 8019f56:	f108 0301 	add.w	r3, r8, #1
 8019f5a:	7013      	strb	r3, [r2, #0]
 8019f5c:	e608      	b.n	8019b70 <_dtoa_r+0x698>
 8019f5e:	9b07      	ldr	r3, [sp, #28]
 8019f60:	9a07      	ldr	r2, [sp, #28]
 8019f62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8019f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019f68:	4293      	cmp	r3, r2
 8019f6a:	d028      	beq.n	8019fbe <_dtoa_r+0xae6>
 8019f6c:	4649      	mov	r1, r9
 8019f6e:	2300      	movs	r3, #0
 8019f70:	220a      	movs	r2, #10
 8019f72:	4658      	mov	r0, fp
 8019f74:	f000 f9d6 	bl	801a324 <__multadd>
 8019f78:	42af      	cmp	r7, r5
 8019f7a:	4681      	mov	r9, r0
 8019f7c:	f04f 0300 	mov.w	r3, #0
 8019f80:	f04f 020a 	mov.w	r2, #10
 8019f84:	4639      	mov	r1, r7
 8019f86:	4658      	mov	r0, fp
 8019f88:	d107      	bne.n	8019f9a <_dtoa_r+0xac2>
 8019f8a:	f000 f9cb 	bl	801a324 <__multadd>
 8019f8e:	4607      	mov	r7, r0
 8019f90:	4605      	mov	r5, r0
 8019f92:	9b07      	ldr	r3, [sp, #28]
 8019f94:	3301      	adds	r3, #1
 8019f96:	9307      	str	r3, [sp, #28]
 8019f98:	e774      	b.n	8019e84 <_dtoa_r+0x9ac>
 8019f9a:	f000 f9c3 	bl	801a324 <__multadd>
 8019f9e:	4629      	mov	r1, r5
 8019fa0:	4607      	mov	r7, r0
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	220a      	movs	r2, #10
 8019fa6:	4658      	mov	r0, fp
 8019fa8:	f000 f9bc 	bl	801a324 <__multadd>
 8019fac:	4605      	mov	r5, r0
 8019fae:	e7f0      	b.n	8019f92 <_dtoa_r+0xaba>
 8019fb0:	9b00      	ldr	r3, [sp, #0]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	bfcc      	ite	gt
 8019fb6:	461e      	movgt	r6, r3
 8019fb8:	2601      	movle	r6, #1
 8019fba:	4456      	add	r6, sl
 8019fbc:	2700      	movs	r7, #0
 8019fbe:	4649      	mov	r1, r9
 8019fc0:	2201      	movs	r2, #1
 8019fc2:	4658      	mov	r0, fp
 8019fc4:	f000 fb5a 	bl	801a67c <__lshift>
 8019fc8:	4621      	mov	r1, r4
 8019fca:	4681      	mov	r9, r0
 8019fcc:	f000 fbc2 	bl	801a754 <__mcmp>
 8019fd0:	2800      	cmp	r0, #0
 8019fd2:	dcb0      	bgt.n	8019f36 <_dtoa_r+0xa5e>
 8019fd4:	d102      	bne.n	8019fdc <_dtoa_r+0xb04>
 8019fd6:	f018 0f01 	tst.w	r8, #1
 8019fda:	d1ac      	bne.n	8019f36 <_dtoa_r+0xa5e>
 8019fdc:	4633      	mov	r3, r6
 8019fde:	461e      	mov	r6, r3
 8019fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019fe4:	2a30      	cmp	r2, #48	@ 0x30
 8019fe6:	d0fa      	beq.n	8019fde <_dtoa_r+0xb06>
 8019fe8:	e5c2      	b.n	8019b70 <_dtoa_r+0x698>
 8019fea:	459a      	cmp	sl, r3
 8019fec:	d1a4      	bne.n	8019f38 <_dtoa_r+0xa60>
 8019fee:	9b04      	ldr	r3, [sp, #16]
 8019ff0:	3301      	adds	r3, #1
 8019ff2:	9304      	str	r3, [sp, #16]
 8019ff4:	2331      	movs	r3, #49	@ 0x31
 8019ff6:	f88a 3000 	strb.w	r3, [sl]
 8019ffa:	e5b9      	b.n	8019b70 <_dtoa_r+0x698>
 8019ffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019ffe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801a05c <_dtoa_r+0xb84>
 801a002:	b11b      	cbz	r3, 801a00c <_dtoa_r+0xb34>
 801a004:	f10a 0308 	add.w	r3, sl, #8
 801a008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a00a:	6013      	str	r3, [r2, #0]
 801a00c:	4650      	mov	r0, sl
 801a00e:	b019      	add	sp, #100	@ 0x64
 801a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a016:	2b01      	cmp	r3, #1
 801a018:	f77f ae37 	ble.w	8019c8a <_dtoa_r+0x7b2>
 801a01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a01e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a020:	2001      	movs	r0, #1
 801a022:	e655      	b.n	8019cd0 <_dtoa_r+0x7f8>
 801a024:	9b00      	ldr	r3, [sp, #0]
 801a026:	2b00      	cmp	r3, #0
 801a028:	f77f aed6 	ble.w	8019dd8 <_dtoa_r+0x900>
 801a02c:	4656      	mov	r6, sl
 801a02e:	4621      	mov	r1, r4
 801a030:	4648      	mov	r0, r9
 801a032:	f7ff f9c8 	bl	80193c6 <quorem>
 801a036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801a03a:	f806 8b01 	strb.w	r8, [r6], #1
 801a03e:	9b00      	ldr	r3, [sp, #0]
 801a040:	eba6 020a 	sub.w	r2, r6, sl
 801a044:	4293      	cmp	r3, r2
 801a046:	ddb3      	ble.n	8019fb0 <_dtoa_r+0xad8>
 801a048:	4649      	mov	r1, r9
 801a04a:	2300      	movs	r3, #0
 801a04c:	220a      	movs	r2, #10
 801a04e:	4658      	mov	r0, fp
 801a050:	f000 f968 	bl	801a324 <__multadd>
 801a054:	4681      	mov	r9, r0
 801a056:	e7ea      	b.n	801a02e <_dtoa_r+0xb56>
 801a058:	0801d299 	.word	0x0801d299
 801a05c:	0801d21d 	.word	0x0801d21d

0801a060 <_free_r>:
 801a060:	b538      	push	{r3, r4, r5, lr}
 801a062:	4605      	mov	r5, r0
 801a064:	2900      	cmp	r1, #0
 801a066:	d041      	beq.n	801a0ec <_free_r+0x8c>
 801a068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a06c:	1f0c      	subs	r4, r1, #4
 801a06e:	2b00      	cmp	r3, #0
 801a070:	bfb8      	it	lt
 801a072:	18e4      	addlt	r4, r4, r3
 801a074:	f000 f8e8 	bl	801a248 <__malloc_lock>
 801a078:	4a1d      	ldr	r2, [pc, #116]	@ (801a0f0 <_free_r+0x90>)
 801a07a:	6813      	ldr	r3, [r2, #0]
 801a07c:	b933      	cbnz	r3, 801a08c <_free_r+0x2c>
 801a07e:	6063      	str	r3, [r4, #4]
 801a080:	6014      	str	r4, [r2, #0]
 801a082:	4628      	mov	r0, r5
 801a084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a088:	f000 b8e4 	b.w	801a254 <__malloc_unlock>
 801a08c:	42a3      	cmp	r3, r4
 801a08e:	d908      	bls.n	801a0a2 <_free_r+0x42>
 801a090:	6820      	ldr	r0, [r4, #0]
 801a092:	1821      	adds	r1, r4, r0
 801a094:	428b      	cmp	r3, r1
 801a096:	bf01      	itttt	eq
 801a098:	6819      	ldreq	r1, [r3, #0]
 801a09a:	685b      	ldreq	r3, [r3, #4]
 801a09c:	1809      	addeq	r1, r1, r0
 801a09e:	6021      	streq	r1, [r4, #0]
 801a0a0:	e7ed      	b.n	801a07e <_free_r+0x1e>
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	b10b      	cbz	r3, 801a0ac <_free_r+0x4c>
 801a0a8:	42a3      	cmp	r3, r4
 801a0aa:	d9fa      	bls.n	801a0a2 <_free_r+0x42>
 801a0ac:	6811      	ldr	r1, [r2, #0]
 801a0ae:	1850      	adds	r0, r2, r1
 801a0b0:	42a0      	cmp	r0, r4
 801a0b2:	d10b      	bne.n	801a0cc <_free_r+0x6c>
 801a0b4:	6820      	ldr	r0, [r4, #0]
 801a0b6:	4401      	add	r1, r0
 801a0b8:	1850      	adds	r0, r2, r1
 801a0ba:	4283      	cmp	r3, r0
 801a0bc:	6011      	str	r1, [r2, #0]
 801a0be:	d1e0      	bne.n	801a082 <_free_r+0x22>
 801a0c0:	6818      	ldr	r0, [r3, #0]
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	6053      	str	r3, [r2, #4]
 801a0c6:	4408      	add	r0, r1
 801a0c8:	6010      	str	r0, [r2, #0]
 801a0ca:	e7da      	b.n	801a082 <_free_r+0x22>
 801a0cc:	d902      	bls.n	801a0d4 <_free_r+0x74>
 801a0ce:	230c      	movs	r3, #12
 801a0d0:	602b      	str	r3, [r5, #0]
 801a0d2:	e7d6      	b.n	801a082 <_free_r+0x22>
 801a0d4:	6820      	ldr	r0, [r4, #0]
 801a0d6:	1821      	adds	r1, r4, r0
 801a0d8:	428b      	cmp	r3, r1
 801a0da:	bf04      	itt	eq
 801a0dc:	6819      	ldreq	r1, [r3, #0]
 801a0de:	685b      	ldreq	r3, [r3, #4]
 801a0e0:	6063      	str	r3, [r4, #4]
 801a0e2:	bf04      	itt	eq
 801a0e4:	1809      	addeq	r1, r1, r0
 801a0e6:	6021      	streq	r1, [r4, #0]
 801a0e8:	6054      	str	r4, [r2, #4]
 801a0ea:	e7ca      	b.n	801a082 <_free_r+0x22>
 801a0ec:	bd38      	pop	{r3, r4, r5, pc}
 801a0ee:	bf00      	nop
 801a0f0:	20009cc0 	.word	0x20009cc0

0801a0f4 <malloc>:
 801a0f4:	4b02      	ldr	r3, [pc, #8]	@ (801a100 <malloc+0xc>)
 801a0f6:	4601      	mov	r1, r0
 801a0f8:	6818      	ldr	r0, [r3, #0]
 801a0fa:	f000 b825 	b.w	801a148 <_malloc_r>
 801a0fe:	bf00      	nop
 801a100:	20001378 	.word	0x20001378

0801a104 <sbrk_aligned>:
 801a104:	b570      	push	{r4, r5, r6, lr}
 801a106:	4e0f      	ldr	r6, [pc, #60]	@ (801a144 <sbrk_aligned+0x40>)
 801a108:	460c      	mov	r4, r1
 801a10a:	6831      	ldr	r1, [r6, #0]
 801a10c:	4605      	mov	r5, r0
 801a10e:	b911      	cbnz	r1, 801a116 <sbrk_aligned+0x12>
 801a110:	f000 fe46 	bl	801ada0 <_sbrk_r>
 801a114:	6030      	str	r0, [r6, #0]
 801a116:	4621      	mov	r1, r4
 801a118:	4628      	mov	r0, r5
 801a11a:	f000 fe41 	bl	801ada0 <_sbrk_r>
 801a11e:	1c43      	adds	r3, r0, #1
 801a120:	d103      	bne.n	801a12a <sbrk_aligned+0x26>
 801a122:	f04f 34ff 	mov.w	r4, #4294967295
 801a126:	4620      	mov	r0, r4
 801a128:	bd70      	pop	{r4, r5, r6, pc}
 801a12a:	1cc4      	adds	r4, r0, #3
 801a12c:	f024 0403 	bic.w	r4, r4, #3
 801a130:	42a0      	cmp	r0, r4
 801a132:	d0f8      	beq.n	801a126 <sbrk_aligned+0x22>
 801a134:	1a21      	subs	r1, r4, r0
 801a136:	4628      	mov	r0, r5
 801a138:	f000 fe32 	bl	801ada0 <_sbrk_r>
 801a13c:	3001      	adds	r0, #1
 801a13e:	d1f2      	bne.n	801a126 <sbrk_aligned+0x22>
 801a140:	e7ef      	b.n	801a122 <sbrk_aligned+0x1e>
 801a142:	bf00      	nop
 801a144:	20009cbc 	.word	0x20009cbc

0801a148 <_malloc_r>:
 801a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a14c:	1ccd      	adds	r5, r1, #3
 801a14e:	f025 0503 	bic.w	r5, r5, #3
 801a152:	3508      	adds	r5, #8
 801a154:	2d0c      	cmp	r5, #12
 801a156:	bf38      	it	cc
 801a158:	250c      	movcc	r5, #12
 801a15a:	2d00      	cmp	r5, #0
 801a15c:	4606      	mov	r6, r0
 801a15e:	db01      	blt.n	801a164 <_malloc_r+0x1c>
 801a160:	42a9      	cmp	r1, r5
 801a162:	d904      	bls.n	801a16e <_malloc_r+0x26>
 801a164:	230c      	movs	r3, #12
 801a166:	6033      	str	r3, [r6, #0]
 801a168:	2000      	movs	r0, #0
 801a16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a16e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a244 <_malloc_r+0xfc>
 801a172:	f000 f869 	bl	801a248 <__malloc_lock>
 801a176:	f8d8 3000 	ldr.w	r3, [r8]
 801a17a:	461c      	mov	r4, r3
 801a17c:	bb44      	cbnz	r4, 801a1d0 <_malloc_r+0x88>
 801a17e:	4629      	mov	r1, r5
 801a180:	4630      	mov	r0, r6
 801a182:	f7ff ffbf 	bl	801a104 <sbrk_aligned>
 801a186:	1c43      	adds	r3, r0, #1
 801a188:	4604      	mov	r4, r0
 801a18a:	d158      	bne.n	801a23e <_malloc_r+0xf6>
 801a18c:	f8d8 4000 	ldr.w	r4, [r8]
 801a190:	4627      	mov	r7, r4
 801a192:	2f00      	cmp	r7, #0
 801a194:	d143      	bne.n	801a21e <_malloc_r+0xd6>
 801a196:	2c00      	cmp	r4, #0
 801a198:	d04b      	beq.n	801a232 <_malloc_r+0xea>
 801a19a:	6823      	ldr	r3, [r4, #0]
 801a19c:	4639      	mov	r1, r7
 801a19e:	4630      	mov	r0, r6
 801a1a0:	eb04 0903 	add.w	r9, r4, r3
 801a1a4:	f000 fdfc 	bl	801ada0 <_sbrk_r>
 801a1a8:	4581      	cmp	r9, r0
 801a1aa:	d142      	bne.n	801a232 <_malloc_r+0xea>
 801a1ac:	6821      	ldr	r1, [r4, #0]
 801a1ae:	1a6d      	subs	r5, r5, r1
 801a1b0:	4629      	mov	r1, r5
 801a1b2:	4630      	mov	r0, r6
 801a1b4:	f7ff ffa6 	bl	801a104 <sbrk_aligned>
 801a1b8:	3001      	adds	r0, #1
 801a1ba:	d03a      	beq.n	801a232 <_malloc_r+0xea>
 801a1bc:	6823      	ldr	r3, [r4, #0]
 801a1be:	442b      	add	r3, r5
 801a1c0:	6023      	str	r3, [r4, #0]
 801a1c2:	f8d8 3000 	ldr.w	r3, [r8]
 801a1c6:	685a      	ldr	r2, [r3, #4]
 801a1c8:	bb62      	cbnz	r2, 801a224 <_malloc_r+0xdc>
 801a1ca:	f8c8 7000 	str.w	r7, [r8]
 801a1ce:	e00f      	b.n	801a1f0 <_malloc_r+0xa8>
 801a1d0:	6822      	ldr	r2, [r4, #0]
 801a1d2:	1b52      	subs	r2, r2, r5
 801a1d4:	d420      	bmi.n	801a218 <_malloc_r+0xd0>
 801a1d6:	2a0b      	cmp	r2, #11
 801a1d8:	d917      	bls.n	801a20a <_malloc_r+0xc2>
 801a1da:	1961      	adds	r1, r4, r5
 801a1dc:	42a3      	cmp	r3, r4
 801a1de:	6025      	str	r5, [r4, #0]
 801a1e0:	bf18      	it	ne
 801a1e2:	6059      	strne	r1, [r3, #4]
 801a1e4:	6863      	ldr	r3, [r4, #4]
 801a1e6:	bf08      	it	eq
 801a1e8:	f8c8 1000 	streq.w	r1, [r8]
 801a1ec:	5162      	str	r2, [r4, r5]
 801a1ee:	604b      	str	r3, [r1, #4]
 801a1f0:	4630      	mov	r0, r6
 801a1f2:	f000 f82f 	bl	801a254 <__malloc_unlock>
 801a1f6:	f104 000b 	add.w	r0, r4, #11
 801a1fa:	1d23      	adds	r3, r4, #4
 801a1fc:	f020 0007 	bic.w	r0, r0, #7
 801a200:	1ac2      	subs	r2, r0, r3
 801a202:	bf1c      	itt	ne
 801a204:	1a1b      	subne	r3, r3, r0
 801a206:	50a3      	strne	r3, [r4, r2]
 801a208:	e7af      	b.n	801a16a <_malloc_r+0x22>
 801a20a:	6862      	ldr	r2, [r4, #4]
 801a20c:	42a3      	cmp	r3, r4
 801a20e:	bf0c      	ite	eq
 801a210:	f8c8 2000 	streq.w	r2, [r8]
 801a214:	605a      	strne	r2, [r3, #4]
 801a216:	e7eb      	b.n	801a1f0 <_malloc_r+0xa8>
 801a218:	4623      	mov	r3, r4
 801a21a:	6864      	ldr	r4, [r4, #4]
 801a21c:	e7ae      	b.n	801a17c <_malloc_r+0x34>
 801a21e:	463c      	mov	r4, r7
 801a220:	687f      	ldr	r7, [r7, #4]
 801a222:	e7b6      	b.n	801a192 <_malloc_r+0x4a>
 801a224:	461a      	mov	r2, r3
 801a226:	685b      	ldr	r3, [r3, #4]
 801a228:	42a3      	cmp	r3, r4
 801a22a:	d1fb      	bne.n	801a224 <_malloc_r+0xdc>
 801a22c:	2300      	movs	r3, #0
 801a22e:	6053      	str	r3, [r2, #4]
 801a230:	e7de      	b.n	801a1f0 <_malloc_r+0xa8>
 801a232:	230c      	movs	r3, #12
 801a234:	6033      	str	r3, [r6, #0]
 801a236:	4630      	mov	r0, r6
 801a238:	f000 f80c 	bl	801a254 <__malloc_unlock>
 801a23c:	e794      	b.n	801a168 <_malloc_r+0x20>
 801a23e:	6005      	str	r5, [r0, #0]
 801a240:	e7d6      	b.n	801a1f0 <_malloc_r+0xa8>
 801a242:	bf00      	nop
 801a244:	20009cc0 	.word	0x20009cc0

0801a248 <__malloc_lock>:
 801a248:	4801      	ldr	r0, [pc, #4]	@ (801a250 <__malloc_lock+0x8>)
 801a24a:	f7ff b8a4 	b.w	8019396 <__retarget_lock_acquire_recursive>
 801a24e:	bf00      	nop
 801a250:	20009cb8 	.word	0x20009cb8

0801a254 <__malloc_unlock>:
 801a254:	4801      	ldr	r0, [pc, #4]	@ (801a25c <__malloc_unlock+0x8>)
 801a256:	f7ff b89f 	b.w	8019398 <__retarget_lock_release_recursive>
 801a25a:	bf00      	nop
 801a25c:	20009cb8 	.word	0x20009cb8

0801a260 <_Balloc>:
 801a260:	b570      	push	{r4, r5, r6, lr}
 801a262:	69c6      	ldr	r6, [r0, #28]
 801a264:	4604      	mov	r4, r0
 801a266:	460d      	mov	r5, r1
 801a268:	b976      	cbnz	r6, 801a288 <_Balloc+0x28>
 801a26a:	2010      	movs	r0, #16
 801a26c:	f7ff ff42 	bl	801a0f4 <malloc>
 801a270:	4602      	mov	r2, r0
 801a272:	61e0      	str	r0, [r4, #28]
 801a274:	b920      	cbnz	r0, 801a280 <_Balloc+0x20>
 801a276:	4b18      	ldr	r3, [pc, #96]	@ (801a2d8 <_Balloc+0x78>)
 801a278:	4818      	ldr	r0, [pc, #96]	@ (801a2dc <_Balloc+0x7c>)
 801a27a:	216b      	movs	r1, #107	@ 0x6b
 801a27c:	f000 fda0 	bl	801adc0 <__assert_func>
 801a280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a284:	6006      	str	r6, [r0, #0]
 801a286:	60c6      	str	r6, [r0, #12]
 801a288:	69e6      	ldr	r6, [r4, #28]
 801a28a:	68f3      	ldr	r3, [r6, #12]
 801a28c:	b183      	cbz	r3, 801a2b0 <_Balloc+0x50>
 801a28e:	69e3      	ldr	r3, [r4, #28]
 801a290:	68db      	ldr	r3, [r3, #12]
 801a292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a296:	b9b8      	cbnz	r0, 801a2c8 <_Balloc+0x68>
 801a298:	2101      	movs	r1, #1
 801a29a:	fa01 f605 	lsl.w	r6, r1, r5
 801a29e:	1d72      	adds	r2, r6, #5
 801a2a0:	0092      	lsls	r2, r2, #2
 801a2a2:	4620      	mov	r0, r4
 801a2a4:	f000 fdaa 	bl	801adfc <_calloc_r>
 801a2a8:	b160      	cbz	r0, 801a2c4 <_Balloc+0x64>
 801a2aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a2ae:	e00e      	b.n	801a2ce <_Balloc+0x6e>
 801a2b0:	2221      	movs	r2, #33	@ 0x21
 801a2b2:	2104      	movs	r1, #4
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	f000 fda1 	bl	801adfc <_calloc_r>
 801a2ba:	69e3      	ldr	r3, [r4, #28]
 801a2bc:	60f0      	str	r0, [r6, #12]
 801a2be:	68db      	ldr	r3, [r3, #12]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d1e4      	bne.n	801a28e <_Balloc+0x2e>
 801a2c4:	2000      	movs	r0, #0
 801a2c6:	bd70      	pop	{r4, r5, r6, pc}
 801a2c8:	6802      	ldr	r2, [r0, #0]
 801a2ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a2d4:	e7f7      	b.n	801a2c6 <_Balloc+0x66>
 801a2d6:	bf00      	nop
 801a2d8:	0801d22a 	.word	0x0801d22a
 801a2dc:	0801d2aa 	.word	0x0801d2aa

0801a2e0 <_Bfree>:
 801a2e0:	b570      	push	{r4, r5, r6, lr}
 801a2e2:	69c6      	ldr	r6, [r0, #28]
 801a2e4:	4605      	mov	r5, r0
 801a2e6:	460c      	mov	r4, r1
 801a2e8:	b976      	cbnz	r6, 801a308 <_Bfree+0x28>
 801a2ea:	2010      	movs	r0, #16
 801a2ec:	f7ff ff02 	bl	801a0f4 <malloc>
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	61e8      	str	r0, [r5, #28]
 801a2f4:	b920      	cbnz	r0, 801a300 <_Bfree+0x20>
 801a2f6:	4b09      	ldr	r3, [pc, #36]	@ (801a31c <_Bfree+0x3c>)
 801a2f8:	4809      	ldr	r0, [pc, #36]	@ (801a320 <_Bfree+0x40>)
 801a2fa:	218f      	movs	r1, #143	@ 0x8f
 801a2fc:	f000 fd60 	bl	801adc0 <__assert_func>
 801a300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a304:	6006      	str	r6, [r0, #0]
 801a306:	60c6      	str	r6, [r0, #12]
 801a308:	b13c      	cbz	r4, 801a31a <_Bfree+0x3a>
 801a30a:	69eb      	ldr	r3, [r5, #28]
 801a30c:	6862      	ldr	r2, [r4, #4]
 801a30e:	68db      	ldr	r3, [r3, #12]
 801a310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a314:	6021      	str	r1, [r4, #0]
 801a316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a31a:	bd70      	pop	{r4, r5, r6, pc}
 801a31c:	0801d22a 	.word	0x0801d22a
 801a320:	0801d2aa 	.word	0x0801d2aa

0801a324 <__multadd>:
 801a324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a328:	690d      	ldr	r5, [r1, #16]
 801a32a:	4607      	mov	r7, r0
 801a32c:	460c      	mov	r4, r1
 801a32e:	461e      	mov	r6, r3
 801a330:	f101 0c14 	add.w	ip, r1, #20
 801a334:	2000      	movs	r0, #0
 801a336:	f8dc 3000 	ldr.w	r3, [ip]
 801a33a:	b299      	uxth	r1, r3
 801a33c:	fb02 6101 	mla	r1, r2, r1, r6
 801a340:	0c1e      	lsrs	r6, r3, #16
 801a342:	0c0b      	lsrs	r3, r1, #16
 801a344:	fb02 3306 	mla	r3, r2, r6, r3
 801a348:	b289      	uxth	r1, r1
 801a34a:	3001      	adds	r0, #1
 801a34c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a350:	4285      	cmp	r5, r0
 801a352:	f84c 1b04 	str.w	r1, [ip], #4
 801a356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a35a:	dcec      	bgt.n	801a336 <__multadd+0x12>
 801a35c:	b30e      	cbz	r6, 801a3a2 <__multadd+0x7e>
 801a35e:	68a3      	ldr	r3, [r4, #8]
 801a360:	42ab      	cmp	r3, r5
 801a362:	dc19      	bgt.n	801a398 <__multadd+0x74>
 801a364:	6861      	ldr	r1, [r4, #4]
 801a366:	4638      	mov	r0, r7
 801a368:	3101      	adds	r1, #1
 801a36a:	f7ff ff79 	bl	801a260 <_Balloc>
 801a36e:	4680      	mov	r8, r0
 801a370:	b928      	cbnz	r0, 801a37e <__multadd+0x5a>
 801a372:	4602      	mov	r2, r0
 801a374:	4b0c      	ldr	r3, [pc, #48]	@ (801a3a8 <__multadd+0x84>)
 801a376:	480d      	ldr	r0, [pc, #52]	@ (801a3ac <__multadd+0x88>)
 801a378:	21ba      	movs	r1, #186	@ 0xba
 801a37a:	f000 fd21 	bl	801adc0 <__assert_func>
 801a37e:	6922      	ldr	r2, [r4, #16]
 801a380:	3202      	adds	r2, #2
 801a382:	f104 010c 	add.w	r1, r4, #12
 801a386:	0092      	lsls	r2, r2, #2
 801a388:	300c      	adds	r0, #12
 801a38a:	f7ff f80e 	bl	80193aa <memcpy>
 801a38e:	4621      	mov	r1, r4
 801a390:	4638      	mov	r0, r7
 801a392:	f7ff ffa5 	bl	801a2e0 <_Bfree>
 801a396:	4644      	mov	r4, r8
 801a398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a39c:	3501      	adds	r5, #1
 801a39e:	615e      	str	r6, [r3, #20]
 801a3a0:	6125      	str	r5, [r4, #16]
 801a3a2:	4620      	mov	r0, r4
 801a3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3a8:	0801d299 	.word	0x0801d299
 801a3ac:	0801d2aa 	.word	0x0801d2aa

0801a3b0 <__hi0bits>:
 801a3b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	bf36      	itet	cc
 801a3b8:	0403      	lslcc	r3, r0, #16
 801a3ba:	2000      	movcs	r0, #0
 801a3bc:	2010      	movcc	r0, #16
 801a3be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a3c2:	bf3c      	itt	cc
 801a3c4:	021b      	lslcc	r3, r3, #8
 801a3c6:	3008      	addcc	r0, #8
 801a3c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a3cc:	bf3c      	itt	cc
 801a3ce:	011b      	lslcc	r3, r3, #4
 801a3d0:	3004      	addcc	r0, #4
 801a3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a3d6:	bf3c      	itt	cc
 801a3d8:	009b      	lslcc	r3, r3, #2
 801a3da:	3002      	addcc	r0, #2
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	db05      	blt.n	801a3ec <__hi0bits+0x3c>
 801a3e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a3e4:	f100 0001 	add.w	r0, r0, #1
 801a3e8:	bf08      	it	eq
 801a3ea:	2020      	moveq	r0, #32
 801a3ec:	4770      	bx	lr

0801a3ee <__lo0bits>:
 801a3ee:	6803      	ldr	r3, [r0, #0]
 801a3f0:	4602      	mov	r2, r0
 801a3f2:	f013 0007 	ands.w	r0, r3, #7
 801a3f6:	d00b      	beq.n	801a410 <__lo0bits+0x22>
 801a3f8:	07d9      	lsls	r1, r3, #31
 801a3fa:	d421      	bmi.n	801a440 <__lo0bits+0x52>
 801a3fc:	0798      	lsls	r0, r3, #30
 801a3fe:	bf49      	itett	mi
 801a400:	085b      	lsrmi	r3, r3, #1
 801a402:	089b      	lsrpl	r3, r3, #2
 801a404:	2001      	movmi	r0, #1
 801a406:	6013      	strmi	r3, [r2, #0]
 801a408:	bf5c      	itt	pl
 801a40a:	6013      	strpl	r3, [r2, #0]
 801a40c:	2002      	movpl	r0, #2
 801a40e:	4770      	bx	lr
 801a410:	b299      	uxth	r1, r3
 801a412:	b909      	cbnz	r1, 801a418 <__lo0bits+0x2a>
 801a414:	0c1b      	lsrs	r3, r3, #16
 801a416:	2010      	movs	r0, #16
 801a418:	b2d9      	uxtb	r1, r3
 801a41a:	b909      	cbnz	r1, 801a420 <__lo0bits+0x32>
 801a41c:	3008      	adds	r0, #8
 801a41e:	0a1b      	lsrs	r3, r3, #8
 801a420:	0719      	lsls	r1, r3, #28
 801a422:	bf04      	itt	eq
 801a424:	091b      	lsreq	r3, r3, #4
 801a426:	3004      	addeq	r0, #4
 801a428:	0799      	lsls	r1, r3, #30
 801a42a:	bf04      	itt	eq
 801a42c:	089b      	lsreq	r3, r3, #2
 801a42e:	3002      	addeq	r0, #2
 801a430:	07d9      	lsls	r1, r3, #31
 801a432:	d403      	bmi.n	801a43c <__lo0bits+0x4e>
 801a434:	085b      	lsrs	r3, r3, #1
 801a436:	f100 0001 	add.w	r0, r0, #1
 801a43a:	d003      	beq.n	801a444 <__lo0bits+0x56>
 801a43c:	6013      	str	r3, [r2, #0]
 801a43e:	4770      	bx	lr
 801a440:	2000      	movs	r0, #0
 801a442:	4770      	bx	lr
 801a444:	2020      	movs	r0, #32
 801a446:	4770      	bx	lr

0801a448 <__i2b>:
 801a448:	b510      	push	{r4, lr}
 801a44a:	460c      	mov	r4, r1
 801a44c:	2101      	movs	r1, #1
 801a44e:	f7ff ff07 	bl	801a260 <_Balloc>
 801a452:	4602      	mov	r2, r0
 801a454:	b928      	cbnz	r0, 801a462 <__i2b+0x1a>
 801a456:	4b05      	ldr	r3, [pc, #20]	@ (801a46c <__i2b+0x24>)
 801a458:	4805      	ldr	r0, [pc, #20]	@ (801a470 <__i2b+0x28>)
 801a45a:	f240 1145 	movw	r1, #325	@ 0x145
 801a45e:	f000 fcaf 	bl	801adc0 <__assert_func>
 801a462:	2301      	movs	r3, #1
 801a464:	6144      	str	r4, [r0, #20]
 801a466:	6103      	str	r3, [r0, #16]
 801a468:	bd10      	pop	{r4, pc}
 801a46a:	bf00      	nop
 801a46c:	0801d299 	.word	0x0801d299
 801a470:	0801d2aa 	.word	0x0801d2aa

0801a474 <__multiply>:
 801a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a478:	4614      	mov	r4, r2
 801a47a:	690a      	ldr	r2, [r1, #16]
 801a47c:	6923      	ldr	r3, [r4, #16]
 801a47e:	429a      	cmp	r2, r3
 801a480:	bfa8      	it	ge
 801a482:	4623      	movge	r3, r4
 801a484:	460f      	mov	r7, r1
 801a486:	bfa4      	itt	ge
 801a488:	460c      	movge	r4, r1
 801a48a:	461f      	movge	r7, r3
 801a48c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a490:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a494:	68a3      	ldr	r3, [r4, #8]
 801a496:	6861      	ldr	r1, [r4, #4]
 801a498:	eb0a 0609 	add.w	r6, sl, r9
 801a49c:	42b3      	cmp	r3, r6
 801a49e:	b085      	sub	sp, #20
 801a4a0:	bfb8      	it	lt
 801a4a2:	3101      	addlt	r1, #1
 801a4a4:	f7ff fedc 	bl	801a260 <_Balloc>
 801a4a8:	b930      	cbnz	r0, 801a4b8 <__multiply+0x44>
 801a4aa:	4602      	mov	r2, r0
 801a4ac:	4b44      	ldr	r3, [pc, #272]	@ (801a5c0 <__multiply+0x14c>)
 801a4ae:	4845      	ldr	r0, [pc, #276]	@ (801a5c4 <__multiply+0x150>)
 801a4b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a4b4:	f000 fc84 	bl	801adc0 <__assert_func>
 801a4b8:	f100 0514 	add.w	r5, r0, #20
 801a4bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a4c0:	462b      	mov	r3, r5
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	4543      	cmp	r3, r8
 801a4c6:	d321      	bcc.n	801a50c <__multiply+0x98>
 801a4c8:	f107 0114 	add.w	r1, r7, #20
 801a4cc:	f104 0214 	add.w	r2, r4, #20
 801a4d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a4d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a4d8:	9302      	str	r3, [sp, #8]
 801a4da:	1b13      	subs	r3, r2, r4
 801a4dc:	3b15      	subs	r3, #21
 801a4de:	f023 0303 	bic.w	r3, r3, #3
 801a4e2:	3304      	adds	r3, #4
 801a4e4:	f104 0715 	add.w	r7, r4, #21
 801a4e8:	42ba      	cmp	r2, r7
 801a4ea:	bf38      	it	cc
 801a4ec:	2304      	movcc	r3, #4
 801a4ee:	9301      	str	r3, [sp, #4]
 801a4f0:	9b02      	ldr	r3, [sp, #8]
 801a4f2:	9103      	str	r1, [sp, #12]
 801a4f4:	428b      	cmp	r3, r1
 801a4f6:	d80c      	bhi.n	801a512 <__multiply+0x9e>
 801a4f8:	2e00      	cmp	r6, #0
 801a4fa:	dd03      	ble.n	801a504 <__multiply+0x90>
 801a4fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a500:	2b00      	cmp	r3, #0
 801a502:	d05b      	beq.n	801a5bc <__multiply+0x148>
 801a504:	6106      	str	r6, [r0, #16]
 801a506:	b005      	add	sp, #20
 801a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a50c:	f843 2b04 	str.w	r2, [r3], #4
 801a510:	e7d8      	b.n	801a4c4 <__multiply+0x50>
 801a512:	f8b1 a000 	ldrh.w	sl, [r1]
 801a516:	f1ba 0f00 	cmp.w	sl, #0
 801a51a:	d024      	beq.n	801a566 <__multiply+0xf2>
 801a51c:	f104 0e14 	add.w	lr, r4, #20
 801a520:	46a9      	mov	r9, r5
 801a522:	f04f 0c00 	mov.w	ip, #0
 801a526:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a52a:	f8d9 3000 	ldr.w	r3, [r9]
 801a52e:	fa1f fb87 	uxth.w	fp, r7
 801a532:	b29b      	uxth	r3, r3
 801a534:	fb0a 330b 	mla	r3, sl, fp, r3
 801a538:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a53c:	f8d9 7000 	ldr.w	r7, [r9]
 801a540:	4463      	add	r3, ip
 801a542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a546:	fb0a c70b 	mla	r7, sl, fp, ip
 801a54a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a54e:	b29b      	uxth	r3, r3
 801a550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a554:	4572      	cmp	r2, lr
 801a556:	f849 3b04 	str.w	r3, [r9], #4
 801a55a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a55e:	d8e2      	bhi.n	801a526 <__multiply+0xb2>
 801a560:	9b01      	ldr	r3, [sp, #4]
 801a562:	f845 c003 	str.w	ip, [r5, r3]
 801a566:	9b03      	ldr	r3, [sp, #12]
 801a568:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a56c:	3104      	adds	r1, #4
 801a56e:	f1b9 0f00 	cmp.w	r9, #0
 801a572:	d021      	beq.n	801a5b8 <__multiply+0x144>
 801a574:	682b      	ldr	r3, [r5, #0]
 801a576:	f104 0c14 	add.w	ip, r4, #20
 801a57a:	46ae      	mov	lr, r5
 801a57c:	f04f 0a00 	mov.w	sl, #0
 801a580:	f8bc b000 	ldrh.w	fp, [ip]
 801a584:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a588:	fb09 770b 	mla	r7, r9, fp, r7
 801a58c:	4457      	add	r7, sl
 801a58e:	b29b      	uxth	r3, r3
 801a590:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a594:	f84e 3b04 	str.w	r3, [lr], #4
 801a598:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a59c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a5a0:	f8be 3000 	ldrh.w	r3, [lr]
 801a5a4:	fb09 330a 	mla	r3, r9, sl, r3
 801a5a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a5ac:	4562      	cmp	r2, ip
 801a5ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a5b2:	d8e5      	bhi.n	801a580 <__multiply+0x10c>
 801a5b4:	9f01      	ldr	r7, [sp, #4]
 801a5b6:	51eb      	str	r3, [r5, r7]
 801a5b8:	3504      	adds	r5, #4
 801a5ba:	e799      	b.n	801a4f0 <__multiply+0x7c>
 801a5bc:	3e01      	subs	r6, #1
 801a5be:	e79b      	b.n	801a4f8 <__multiply+0x84>
 801a5c0:	0801d299 	.word	0x0801d299
 801a5c4:	0801d2aa 	.word	0x0801d2aa

0801a5c8 <__pow5mult>:
 801a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5cc:	4615      	mov	r5, r2
 801a5ce:	f012 0203 	ands.w	r2, r2, #3
 801a5d2:	4607      	mov	r7, r0
 801a5d4:	460e      	mov	r6, r1
 801a5d6:	d007      	beq.n	801a5e8 <__pow5mult+0x20>
 801a5d8:	4c25      	ldr	r4, [pc, #148]	@ (801a670 <__pow5mult+0xa8>)
 801a5da:	3a01      	subs	r2, #1
 801a5dc:	2300      	movs	r3, #0
 801a5de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a5e2:	f7ff fe9f 	bl	801a324 <__multadd>
 801a5e6:	4606      	mov	r6, r0
 801a5e8:	10ad      	asrs	r5, r5, #2
 801a5ea:	d03d      	beq.n	801a668 <__pow5mult+0xa0>
 801a5ec:	69fc      	ldr	r4, [r7, #28]
 801a5ee:	b97c      	cbnz	r4, 801a610 <__pow5mult+0x48>
 801a5f0:	2010      	movs	r0, #16
 801a5f2:	f7ff fd7f 	bl	801a0f4 <malloc>
 801a5f6:	4602      	mov	r2, r0
 801a5f8:	61f8      	str	r0, [r7, #28]
 801a5fa:	b928      	cbnz	r0, 801a608 <__pow5mult+0x40>
 801a5fc:	4b1d      	ldr	r3, [pc, #116]	@ (801a674 <__pow5mult+0xac>)
 801a5fe:	481e      	ldr	r0, [pc, #120]	@ (801a678 <__pow5mult+0xb0>)
 801a600:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a604:	f000 fbdc 	bl	801adc0 <__assert_func>
 801a608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a60c:	6004      	str	r4, [r0, #0]
 801a60e:	60c4      	str	r4, [r0, #12]
 801a610:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a618:	b94c      	cbnz	r4, 801a62e <__pow5mult+0x66>
 801a61a:	f240 2171 	movw	r1, #625	@ 0x271
 801a61e:	4638      	mov	r0, r7
 801a620:	f7ff ff12 	bl	801a448 <__i2b>
 801a624:	2300      	movs	r3, #0
 801a626:	f8c8 0008 	str.w	r0, [r8, #8]
 801a62a:	4604      	mov	r4, r0
 801a62c:	6003      	str	r3, [r0, #0]
 801a62e:	f04f 0900 	mov.w	r9, #0
 801a632:	07eb      	lsls	r3, r5, #31
 801a634:	d50a      	bpl.n	801a64c <__pow5mult+0x84>
 801a636:	4631      	mov	r1, r6
 801a638:	4622      	mov	r2, r4
 801a63a:	4638      	mov	r0, r7
 801a63c:	f7ff ff1a 	bl	801a474 <__multiply>
 801a640:	4631      	mov	r1, r6
 801a642:	4680      	mov	r8, r0
 801a644:	4638      	mov	r0, r7
 801a646:	f7ff fe4b 	bl	801a2e0 <_Bfree>
 801a64a:	4646      	mov	r6, r8
 801a64c:	106d      	asrs	r5, r5, #1
 801a64e:	d00b      	beq.n	801a668 <__pow5mult+0xa0>
 801a650:	6820      	ldr	r0, [r4, #0]
 801a652:	b938      	cbnz	r0, 801a664 <__pow5mult+0x9c>
 801a654:	4622      	mov	r2, r4
 801a656:	4621      	mov	r1, r4
 801a658:	4638      	mov	r0, r7
 801a65a:	f7ff ff0b 	bl	801a474 <__multiply>
 801a65e:	6020      	str	r0, [r4, #0]
 801a660:	f8c0 9000 	str.w	r9, [r0]
 801a664:	4604      	mov	r4, r0
 801a666:	e7e4      	b.n	801a632 <__pow5mult+0x6a>
 801a668:	4630      	mov	r0, r6
 801a66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a66e:	bf00      	nop
 801a670:	0801d304 	.word	0x0801d304
 801a674:	0801d22a 	.word	0x0801d22a
 801a678:	0801d2aa 	.word	0x0801d2aa

0801a67c <__lshift>:
 801a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a680:	460c      	mov	r4, r1
 801a682:	6849      	ldr	r1, [r1, #4]
 801a684:	6923      	ldr	r3, [r4, #16]
 801a686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a68a:	68a3      	ldr	r3, [r4, #8]
 801a68c:	4607      	mov	r7, r0
 801a68e:	4691      	mov	r9, r2
 801a690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a694:	f108 0601 	add.w	r6, r8, #1
 801a698:	42b3      	cmp	r3, r6
 801a69a:	db0b      	blt.n	801a6b4 <__lshift+0x38>
 801a69c:	4638      	mov	r0, r7
 801a69e:	f7ff fddf 	bl	801a260 <_Balloc>
 801a6a2:	4605      	mov	r5, r0
 801a6a4:	b948      	cbnz	r0, 801a6ba <__lshift+0x3e>
 801a6a6:	4602      	mov	r2, r0
 801a6a8:	4b28      	ldr	r3, [pc, #160]	@ (801a74c <__lshift+0xd0>)
 801a6aa:	4829      	ldr	r0, [pc, #164]	@ (801a750 <__lshift+0xd4>)
 801a6ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a6b0:	f000 fb86 	bl	801adc0 <__assert_func>
 801a6b4:	3101      	adds	r1, #1
 801a6b6:	005b      	lsls	r3, r3, #1
 801a6b8:	e7ee      	b.n	801a698 <__lshift+0x1c>
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	f100 0114 	add.w	r1, r0, #20
 801a6c0:	f100 0210 	add.w	r2, r0, #16
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	4553      	cmp	r3, sl
 801a6c8:	db33      	blt.n	801a732 <__lshift+0xb6>
 801a6ca:	6920      	ldr	r0, [r4, #16]
 801a6cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a6d0:	f104 0314 	add.w	r3, r4, #20
 801a6d4:	f019 091f 	ands.w	r9, r9, #31
 801a6d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a6dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a6e0:	d02b      	beq.n	801a73a <__lshift+0xbe>
 801a6e2:	f1c9 0e20 	rsb	lr, r9, #32
 801a6e6:	468a      	mov	sl, r1
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	6818      	ldr	r0, [r3, #0]
 801a6ec:	fa00 f009 	lsl.w	r0, r0, r9
 801a6f0:	4310      	orrs	r0, r2
 801a6f2:	f84a 0b04 	str.w	r0, [sl], #4
 801a6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6fa:	459c      	cmp	ip, r3
 801a6fc:	fa22 f20e 	lsr.w	r2, r2, lr
 801a700:	d8f3      	bhi.n	801a6ea <__lshift+0x6e>
 801a702:	ebac 0304 	sub.w	r3, ip, r4
 801a706:	3b15      	subs	r3, #21
 801a708:	f023 0303 	bic.w	r3, r3, #3
 801a70c:	3304      	adds	r3, #4
 801a70e:	f104 0015 	add.w	r0, r4, #21
 801a712:	4584      	cmp	ip, r0
 801a714:	bf38      	it	cc
 801a716:	2304      	movcc	r3, #4
 801a718:	50ca      	str	r2, [r1, r3]
 801a71a:	b10a      	cbz	r2, 801a720 <__lshift+0xa4>
 801a71c:	f108 0602 	add.w	r6, r8, #2
 801a720:	3e01      	subs	r6, #1
 801a722:	4638      	mov	r0, r7
 801a724:	612e      	str	r6, [r5, #16]
 801a726:	4621      	mov	r1, r4
 801a728:	f7ff fdda 	bl	801a2e0 <_Bfree>
 801a72c:	4628      	mov	r0, r5
 801a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a732:	f842 0f04 	str.w	r0, [r2, #4]!
 801a736:	3301      	adds	r3, #1
 801a738:	e7c5      	b.n	801a6c6 <__lshift+0x4a>
 801a73a:	3904      	subs	r1, #4
 801a73c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a740:	f841 2f04 	str.w	r2, [r1, #4]!
 801a744:	459c      	cmp	ip, r3
 801a746:	d8f9      	bhi.n	801a73c <__lshift+0xc0>
 801a748:	e7ea      	b.n	801a720 <__lshift+0xa4>
 801a74a:	bf00      	nop
 801a74c:	0801d299 	.word	0x0801d299
 801a750:	0801d2aa 	.word	0x0801d2aa

0801a754 <__mcmp>:
 801a754:	690a      	ldr	r2, [r1, #16]
 801a756:	4603      	mov	r3, r0
 801a758:	6900      	ldr	r0, [r0, #16]
 801a75a:	1a80      	subs	r0, r0, r2
 801a75c:	b530      	push	{r4, r5, lr}
 801a75e:	d10e      	bne.n	801a77e <__mcmp+0x2a>
 801a760:	3314      	adds	r3, #20
 801a762:	3114      	adds	r1, #20
 801a764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a76c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a774:	4295      	cmp	r5, r2
 801a776:	d003      	beq.n	801a780 <__mcmp+0x2c>
 801a778:	d205      	bcs.n	801a786 <__mcmp+0x32>
 801a77a:	f04f 30ff 	mov.w	r0, #4294967295
 801a77e:	bd30      	pop	{r4, r5, pc}
 801a780:	42a3      	cmp	r3, r4
 801a782:	d3f3      	bcc.n	801a76c <__mcmp+0x18>
 801a784:	e7fb      	b.n	801a77e <__mcmp+0x2a>
 801a786:	2001      	movs	r0, #1
 801a788:	e7f9      	b.n	801a77e <__mcmp+0x2a>
	...

0801a78c <__mdiff>:
 801a78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a790:	4689      	mov	r9, r1
 801a792:	4606      	mov	r6, r0
 801a794:	4611      	mov	r1, r2
 801a796:	4648      	mov	r0, r9
 801a798:	4614      	mov	r4, r2
 801a79a:	f7ff ffdb 	bl	801a754 <__mcmp>
 801a79e:	1e05      	subs	r5, r0, #0
 801a7a0:	d112      	bne.n	801a7c8 <__mdiff+0x3c>
 801a7a2:	4629      	mov	r1, r5
 801a7a4:	4630      	mov	r0, r6
 801a7a6:	f7ff fd5b 	bl	801a260 <_Balloc>
 801a7aa:	4602      	mov	r2, r0
 801a7ac:	b928      	cbnz	r0, 801a7ba <__mdiff+0x2e>
 801a7ae:	4b3f      	ldr	r3, [pc, #252]	@ (801a8ac <__mdiff+0x120>)
 801a7b0:	f240 2137 	movw	r1, #567	@ 0x237
 801a7b4:	483e      	ldr	r0, [pc, #248]	@ (801a8b0 <__mdiff+0x124>)
 801a7b6:	f000 fb03 	bl	801adc0 <__assert_func>
 801a7ba:	2301      	movs	r3, #1
 801a7bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a7c0:	4610      	mov	r0, r2
 801a7c2:	b003      	add	sp, #12
 801a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c8:	bfbc      	itt	lt
 801a7ca:	464b      	movlt	r3, r9
 801a7cc:	46a1      	movlt	r9, r4
 801a7ce:	4630      	mov	r0, r6
 801a7d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a7d4:	bfba      	itte	lt
 801a7d6:	461c      	movlt	r4, r3
 801a7d8:	2501      	movlt	r5, #1
 801a7da:	2500      	movge	r5, #0
 801a7dc:	f7ff fd40 	bl	801a260 <_Balloc>
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	b918      	cbnz	r0, 801a7ec <__mdiff+0x60>
 801a7e4:	4b31      	ldr	r3, [pc, #196]	@ (801a8ac <__mdiff+0x120>)
 801a7e6:	f240 2145 	movw	r1, #581	@ 0x245
 801a7ea:	e7e3      	b.n	801a7b4 <__mdiff+0x28>
 801a7ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a7f0:	6926      	ldr	r6, [r4, #16]
 801a7f2:	60c5      	str	r5, [r0, #12]
 801a7f4:	f109 0310 	add.w	r3, r9, #16
 801a7f8:	f109 0514 	add.w	r5, r9, #20
 801a7fc:	f104 0e14 	add.w	lr, r4, #20
 801a800:	f100 0b14 	add.w	fp, r0, #20
 801a804:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a808:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a80c:	9301      	str	r3, [sp, #4]
 801a80e:	46d9      	mov	r9, fp
 801a810:	f04f 0c00 	mov.w	ip, #0
 801a814:	9b01      	ldr	r3, [sp, #4]
 801a816:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a81a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a81e:	9301      	str	r3, [sp, #4]
 801a820:	fa1f f38a 	uxth.w	r3, sl
 801a824:	4619      	mov	r1, r3
 801a826:	b283      	uxth	r3, r0
 801a828:	1acb      	subs	r3, r1, r3
 801a82a:	0c00      	lsrs	r0, r0, #16
 801a82c:	4463      	add	r3, ip
 801a82e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a832:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a836:	b29b      	uxth	r3, r3
 801a838:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a83c:	4576      	cmp	r6, lr
 801a83e:	f849 3b04 	str.w	r3, [r9], #4
 801a842:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a846:	d8e5      	bhi.n	801a814 <__mdiff+0x88>
 801a848:	1b33      	subs	r3, r6, r4
 801a84a:	3b15      	subs	r3, #21
 801a84c:	f023 0303 	bic.w	r3, r3, #3
 801a850:	3415      	adds	r4, #21
 801a852:	3304      	adds	r3, #4
 801a854:	42a6      	cmp	r6, r4
 801a856:	bf38      	it	cc
 801a858:	2304      	movcc	r3, #4
 801a85a:	441d      	add	r5, r3
 801a85c:	445b      	add	r3, fp
 801a85e:	461e      	mov	r6, r3
 801a860:	462c      	mov	r4, r5
 801a862:	4544      	cmp	r4, r8
 801a864:	d30e      	bcc.n	801a884 <__mdiff+0xf8>
 801a866:	f108 0103 	add.w	r1, r8, #3
 801a86a:	1b49      	subs	r1, r1, r5
 801a86c:	f021 0103 	bic.w	r1, r1, #3
 801a870:	3d03      	subs	r5, #3
 801a872:	45a8      	cmp	r8, r5
 801a874:	bf38      	it	cc
 801a876:	2100      	movcc	r1, #0
 801a878:	440b      	add	r3, r1
 801a87a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a87e:	b191      	cbz	r1, 801a8a6 <__mdiff+0x11a>
 801a880:	6117      	str	r7, [r2, #16]
 801a882:	e79d      	b.n	801a7c0 <__mdiff+0x34>
 801a884:	f854 1b04 	ldr.w	r1, [r4], #4
 801a888:	46e6      	mov	lr, ip
 801a88a:	0c08      	lsrs	r0, r1, #16
 801a88c:	fa1c fc81 	uxtah	ip, ip, r1
 801a890:	4471      	add	r1, lr
 801a892:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a896:	b289      	uxth	r1, r1
 801a898:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a89c:	f846 1b04 	str.w	r1, [r6], #4
 801a8a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a8a4:	e7dd      	b.n	801a862 <__mdiff+0xd6>
 801a8a6:	3f01      	subs	r7, #1
 801a8a8:	e7e7      	b.n	801a87a <__mdiff+0xee>
 801a8aa:	bf00      	nop
 801a8ac:	0801d299 	.word	0x0801d299
 801a8b0:	0801d2aa 	.word	0x0801d2aa

0801a8b4 <__d2b>:
 801a8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a8b8:	460f      	mov	r7, r1
 801a8ba:	2101      	movs	r1, #1
 801a8bc:	ec59 8b10 	vmov	r8, r9, d0
 801a8c0:	4616      	mov	r6, r2
 801a8c2:	f7ff fccd 	bl	801a260 <_Balloc>
 801a8c6:	4604      	mov	r4, r0
 801a8c8:	b930      	cbnz	r0, 801a8d8 <__d2b+0x24>
 801a8ca:	4602      	mov	r2, r0
 801a8cc:	4b23      	ldr	r3, [pc, #140]	@ (801a95c <__d2b+0xa8>)
 801a8ce:	4824      	ldr	r0, [pc, #144]	@ (801a960 <__d2b+0xac>)
 801a8d0:	f240 310f 	movw	r1, #783	@ 0x30f
 801a8d4:	f000 fa74 	bl	801adc0 <__assert_func>
 801a8d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a8dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a8e0:	b10d      	cbz	r5, 801a8e6 <__d2b+0x32>
 801a8e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a8e6:	9301      	str	r3, [sp, #4]
 801a8e8:	f1b8 0300 	subs.w	r3, r8, #0
 801a8ec:	d023      	beq.n	801a936 <__d2b+0x82>
 801a8ee:	4668      	mov	r0, sp
 801a8f0:	9300      	str	r3, [sp, #0]
 801a8f2:	f7ff fd7c 	bl	801a3ee <__lo0bits>
 801a8f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a8fa:	b1d0      	cbz	r0, 801a932 <__d2b+0x7e>
 801a8fc:	f1c0 0320 	rsb	r3, r0, #32
 801a900:	fa02 f303 	lsl.w	r3, r2, r3
 801a904:	430b      	orrs	r3, r1
 801a906:	40c2      	lsrs	r2, r0
 801a908:	6163      	str	r3, [r4, #20]
 801a90a:	9201      	str	r2, [sp, #4]
 801a90c:	9b01      	ldr	r3, [sp, #4]
 801a90e:	61a3      	str	r3, [r4, #24]
 801a910:	2b00      	cmp	r3, #0
 801a912:	bf0c      	ite	eq
 801a914:	2201      	moveq	r2, #1
 801a916:	2202      	movne	r2, #2
 801a918:	6122      	str	r2, [r4, #16]
 801a91a:	b1a5      	cbz	r5, 801a946 <__d2b+0x92>
 801a91c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a920:	4405      	add	r5, r0
 801a922:	603d      	str	r5, [r7, #0]
 801a924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a928:	6030      	str	r0, [r6, #0]
 801a92a:	4620      	mov	r0, r4
 801a92c:	b003      	add	sp, #12
 801a92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a932:	6161      	str	r1, [r4, #20]
 801a934:	e7ea      	b.n	801a90c <__d2b+0x58>
 801a936:	a801      	add	r0, sp, #4
 801a938:	f7ff fd59 	bl	801a3ee <__lo0bits>
 801a93c:	9b01      	ldr	r3, [sp, #4]
 801a93e:	6163      	str	r3, [r4, #20]
 801a940:	3020      	adds	r0, #32
 801a942:	2201      	movs	r2, #1
 801a944:	e7e8      	b.n	801a918 <__d2b+0x64>
 801a946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a94a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a94e:	6038      	str	r0, [r7, #0]
 801a950:	6918      	ldr	r0, [r3, #16]
 801a952:	f7ff fd2d 	bl	801a3b0 <__hi0bits>
 801a956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a95a:	e7e5      	b.n	801a928 <__d2b+0x74>
 801a95c:	0801d299 	.word	0x0801d299
 801a960:	0801d2aa 	.word	0x0801d2aa

0801a964 <__ssputs_r>:
 801a964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a968:	688e      	ldr	r6, [r1, #8]
 801a96a:	461f      	mov	r7, r3
 801a96c:	42be      	cmp	r6, r7
 801a96e:	680b      	ldr	r3, [r1, #0]
 801a970:	4682      	mov	sl, r0
 801a972:	460c      	mov	r4, r1
 801a974:	4690      	mov	r8, r2
 801a976:	d82d      	bhi.n	801a9d4 <__ssputs_r+0x70>
 801a978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a97c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a980:	d026      	beq.n	801a9d0 <__ssputs_r+0x6c>
 801a982:	6965      	ldr	r5, [r4, #20]
 801a984:	6909      	ldr	r1, [r1, #16]
 801a986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a98a:	eba3 0901 	sub.w	r9, r3, r1
 801a98e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a992:	1c7b      	adds	r3, r7, #1
 801a994:	444b      	add	r3, r9
 801a996:	106d      	asrs	r5, r5, #1
 801a998:	429d      	cmp	r5, r3
 801a99a:	bf38      	it	cc
 801a99c:	461d      	movcc	r5, r3
 801a99e:	0553      	lsls	r3, r2, #21
 801a9a0:	d527      	bpl.n	801a9f2 <__ssputs_r+0x8e>
 801a9a2:	4629      	mov	r1, r5
 801a9a4:	f7ff fbd0 	bl	801a148 <_malloc_r>
 801a9a8:	4606      	mov	r6, r0
 801a9aa:	b360      	cbz	r0, 801aa06 <__ssputs_r+0xa2>
 801a9ac:	6921      	ldr	r1, [r4, #16]
 801a9ae:	464a      	mov	r2, r9
 801a9b0:	f7fe fcfb 	bl	80193aa <memcpy>
 801a9b4:	89a3      	ldrh	r3, [r4, #12]
 801a9b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a9be:	81a3      	strh	r3, [r4, #12]
 801a9c0:	6126      	str	r6, [r4, #16]
 801a9c2:	6165      	str	r5, [r4, #20]
 801a9c4:	444e      	add	r6, r9
 801a9c6:	eba5 0509 	sub.w	r5, r5, r9
 801a9ca:	6026      	str	r6, [r4, #0]
 801a9cc:	60a5      	str	r5, [r4, #8]
 801a9ce:	463e      	mov	r6, r7
 801a9d0:	42be      	cmp	r6, r7
 801a9d2:	d900      	bls.n	801a9d6 <__ssputs_r+0x72>
 801a9d4:	463e      	mov	r6, r7
 801a9d6:	6820      	ldr	r0, [r4, #0]
 801a9d8:	4632      	mov	r2, r6
 801a9da:	4641      	mov	r1, r8
 801a9dc:	f000 f9c6 	bl	801ad6c <memmove>
 801a9e0:	68a3      	ldr	r3, [r4, #8]
 801a9e2:	1b9b      	subs	r3, r3, r6
 801a9e4:	60a3      	str	r3, [r4, #8]
 801a9e6:	6823      	ldr	r3, [r4, #0]
 801a9e8:	4433      	add	r3, r6
 801a9ea:	6023      	str	r3, [r4, #0]
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9f2:	462a      	mov	r2, r5
 801a9f4:	f000 fa28 	bl	801ae48 <_realloc_r>
 801a9f8:	4606      	mov	r6, r0
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	d1e0      	bne.n	801a9c0 <__ssputs_r+0x5c>
 801a9fe:	6921      	ldr	r1, [r4, #16]
 801aa00:	4650      	mov	r0, sl
 801aa02:	f7ff fb2d 	bl	801a060 <_free_r>
 801aa06:	230c      	movs	r3, #12
 801aa08:	f8ca 3000 	str.w	r3, [sl]
 801aa0c:	89a3      	ldrh	r3, [r4, #12]
 801aa0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa12:	81a3      	strh	r3, [r4, #12]
 801aa14:	f04f 30ff 	mov.w	r0, #4294967295
 801aa18:	e7e9      	b.n	801a9ee <__ssputs_r+0x8a>
	...

0801aa1c <_svfiprintf_r>:
 801aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa20:	4698      	mov	r8, r3
 801aa22:	898b      	ldrh	r3, [r1, #12]
 801aa24:	061b      	lsls	r3, r3, #24
 801aa26:	b09d      	sub	sp, #116	@ 0x74
 801aa28:	4607      	mov	r7, r0
 801aa2a:	460d      	mov	r5, r1
 801aa2c:	4614      	mov	r4, r2
 801aa2e:	d510      	bpl.n	801aa52 <_svfiprintf_r+0x36>
 801aa30:	690b      	ldr	r3, [r1, #16]
 801aa32:	b973      	cbnz	r3, 801aa52 <_svfiprintf_r+0x36>
 801aa34:	2140      	movs	r1, #64	@ 0x40
 801aa36:	f7ff fb87 	bl	801a148 <_malloc_r>
 801aa3a:	6028      	str	r0, [r5, #0]
 801aa3c:	6128      	str	r0, [r5, #16]
 801aa3e:	b930      	cbnz	r0, 801aa4e <_svfiprintf_r+0x32>
 801aa40:	230c      	movs	r3, #12
 801aa42:	603b      	str	r3, [r7, #0]
 801aa44:	f04f 30ff 	mov.w	r0, #4294967295
 801aa48:	b01d      	add	sp, #116	@ 0x74
 801aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4e:	2340      	movs	r3, #64	@ 0x40
 801aa50:	616b      	str	r3, [r5, #20]
 801aa52:	2300      	movs	r3, #0
 801aa54:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa56:	2320      	movs	r3, #32
 801aa58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801aa5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa60:	2330      	movs	r3, #48	@ 0x30
 801aa62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ac00 <_svfiprintf_r+0x1e4>
 801aa66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801aa6a:	f04f 0901 	mov.w	r9, #1
 801aa6e:	4623      	mov	r3, r4
 801aa70:	469a      	mov	sl, r3
 801aa72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa76:	b10a      	cbz	r2, 801aa7c <_svfiprintf_r+0x60>
 801aa78:	2a25      	cmp	r2, #37	@ 0x25
 801aa7a:	d1f9      	bne.n	801aa70 <_svfiprintf_r+0x54>
 801aa7c:	ebba 0b04 	subs.w	fp, sl, r4
 801aa80:	d00b      	beq.n	801aa9a <_svfiprintf_r+0x7e>
 801aa82:	465b      	mov	r3, fp
 801aa84:	4622      	mov	r2, r4
 801aa86:	4629      	mov	r1, r5
 801aa88:	4638      	mov	r0, r7
 801aa8a:	f7ff ff6b 	bl	801a964 <__ssputs_r>
 801aa8e:	3001      	adds	r0, #1
 801aa90:	f000 80a7 	beq.w	801abe2 <_svfiprintf_r+0x1c6>
 801aa94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa96:	445a      	add	r2, fp
 801aa98:	9209      	str	r2, [sp, #36]	@ 0x24
 801aa9a:	f89a 3000 	ldrb.w	r3, [sl]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	f000 809f 	beq.w	801abe2 <_svfiprintf_r+0x1c6>
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	f04f 32ff 	mov.w	r2, #4294967295
 801aaaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aaae:	f10a 0a01 	add.w	sl, sl, #1
 801aab2:	9304      	str	r3, [sp, #16]
 801aab4:	9307      	str	r3, [sp, #28]
 801aab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801aaba:	931a      	str	r3, [sp, #104]	@ 0x68
 801aabc:	4654      	mov	r4, sl
 801aabe:	2205      	movs	r2, #5
 801aac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aac4:	484e      	ldr	r0, [pc, #312]	@ (801ac00 <_svfiprintf_r+0x1e4>)
 801aac6:	f7e9 fabb 	bl	8004040 <memchr>
 801aaca:	9a04      	ldr	r2, [sp, #16]
 801aacc:	b9d8      	cbnz	r0, 801ab06 <_svfiprintf_r+0xea>
 801aace:	06d0      	lsls	r0, r2, #27
 801aad0:	bf44      	itt	mi
 801aad2:	2320      	movmi	r3, #32
 801aad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aad8:	0711      	lsls	r1, r2, #28
 801aada:	bf44      	itt	mi
 801aadc:	232b      	movmi	r3, #43	@ 0x2b
 801aade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aae2:	f89a 3000 	ldrb.w	r3, [sl]
 801aae6:	2b2a      	cmp	r3, #42	@ 0x2a
 801aae8:	d015      	beq.n	801ab16 <_svfiprintf_r+0xfa>
 801aaea:	9a07      	ldr	r2, [sp, #28]
 801aaec:	4654      	mov	r4, sl
 801aaee:	2000      	movs	r0, #0
 801aaf0:	f04f 0c0a 	mov.w	ip, #10
 801aaf4:	4621      	mov	r1, r4
 801aaf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aafa:	3b30      	subs	r3, #48	@ 0x30
 801aafc:	2b09      	cmp	r3, #9
 801aafe:	d94b      	bls.n	801ab98 <_svfiprintf_r+0x17c>
 801ab00:	b1b0      	cbz	r0, 801ab30 <_svfiprintf_r+0x114>
 801ab02:	9207      	str	r2, [sp, #28]
 801ab04:	e014      	b.n	801ab30 <_svfiprintf_r+0x114>
 801ab06:	eba0 0308 	sub.w	r3, r0, r8
 801ab0a:	fa09 f303 	lsl.w	r3, r9, r3
 801ab0e:	4313      	orrs	r3, r2
 801ab10:	9304      	str	r3, [sp, #16]
 801ab12:	46a2      	mov	sl, r4
 801ab14:	e7d2      	b.n	801aabc <_svfiprintf_r+0xa0>
 801ab16:	9b03      	ldr	r3, [sp, #12]
 801ab18:	1d19      	adds	r1, r3, #4
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	9103      	str	r1, [sp, #12]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	bfbb      	ittet	lt
 801ab22:	425b      	neglt	r3, r3
 801ab24:	f042 0202 	orrlt.w	r2, r2, #2
 801ab28:	9307      	strge	r3, [sp, #28]
 801ab2a:	9307      	strlt	r3, [sp, #28]
 801ab2c:	bfb8      	it	lt
 801ab2e:	9204      	strlt	r2, [sp, #16]
 801ab30:	7823      	ldrb	r3, [r4, #0]
 801ab32:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab34:	d10a      	bne.n	801ab4c <_svfiprintf_r+0x130>
 801ab36:	7863      	ldrb	r3, [r4, #1]
 801ab38:	2b2a      	cmp	r3, #42	@ 0x2a
 801ab3a:	d132      	bne.n	801aba2 <_svfiprintf_r+0x186>
 801ab3c:	9b03      	ldr	r3, [sp, #12]
 801ab3e:	1d1a      	adds	r2, r3, #4
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	9203      	str	r2, [sp, #12]
 801ab44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ab48:	3402      	adds	r4, #2
 801ab4a:	9305      	str	r3, [sp, #20]
 801ab4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ac10 <_svfiprintf_r+0x1f4>
 801ab50:	7821      	ldrb	r1, [r4, #0]
 801ab52:	2203      	movs	r2, #3
 801ab54:	4650      	mov	r0, sl
 801ab56:	f7e9 fa73 	bl	8004040 <memchr>
 801ab5a:	b138      	cbz	r0, 801ab6c <_svfiprintf_r+0x150>
 801ab5c:	9b04      	ldr	r3, [sp, #16]
 801ab5e:	eba0 000a 	sub.w	r0, r0, sl
 801ab62:	2240      	movs	r2, #64	@ 0x40
 801ab64:	4082      	lsls	r2, r0
 801ab66:	4313      	orrs	r3, r2
 801ab68:	3401      	adds	r4, #1
 801ab6a:	9304      	str	r3, [sp, #16]
 801ab6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab70:	4824      	ldr	r0, [pc, #144]	@ (801ac04 <_svfiprintf_r+0x1e8>)
 801ab72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ab76:	2206      	movs	r2, #6
 801ab78:	f7e9 fa62 	bl	8004040 <memchr>
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	d036      	beq.n	801abee <_svfiprintf_r+0x1d2>
 801ab80:	4b21      	ldr	r3, [pc, #132]	@ (801ac08 <_svfiprintf_r+0x1ec>)
 801ab82:	bb1b      	cbnz	r3, 801abcc <_svfiprintf_r+0x1b0>
 801ab84:	9b03      	ldr	r3, [sp, #12]
 801ab86:	3307      	adds	r3, #7
 801ab88:	f023 0307 	bic.w	r3, r3, #7
 801ab8c:	3308      	adds	r3, #8
 801ab8e:	9303      	str	r3, [sp, #12]
 801ab90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab92:	4433      	add	r3, r6
 801ab94:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab96:	e76a      	b.n	801aa6e <_svfiprintf_r+0x52>
 801ab98:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab9c:	460c      	mov	r4, r1
 801ab9e:	2001      	movs	r0, #1
 801aba0:	e7a8      	b.n	801aaf4 <_svfiprintf_r+0xd8>
 801aba2:	2300      	movs	r3, #0
 801aba4:	3401      	adds	r4, #1
 801aba6:	9305      	str	r3, [sp, #20]
 801aba8:	4619      	mov	r1, r3
 801abaa:	f04f 0c0a 	mov.w	ip, #10
 801abae:	4620      	mov	r0, r4
 801abb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801abb4:	3a30      	subs	r2, #48	@ 0x30
 801abb6:	2a09      	cmp	r2, #9
 801abb8:	d903      	bls.n	801abc2 <_svfiprintf_r+0x1a6>
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d0c6      	beq.n	801ab4c <_svfiprintf_r+0x130>
 801abbe:	9105      	str	r1, [sp, #20]
 801abc0:	e7c4      	b.n	801ab4c <_svfiprintf_r+0x130>
 801abc2:	fb0c 2101 	mla	r1, ip, r1, r2
 801abc6:	4604      	mov	r4, r0
 801abc8:	2301      	movs	r3, #1
 801abca:	e7f0      	b.n	801abae <_svfiprintf_r+0x192>
 801abcc:	ab03      	add	r3, sp, #12
 801abce:	9300      	str	r3, [sp, #0]
 801abd0:	462a      	mov	r2, r5
 801abd2:	4b0e      	ldr	r3, [pc, #56]	@ (801ac0c <_svfiprintf_r+0x1f0>)
 801abd4:	a904      	add	r1, sp, #16
 801abd6:	4638      	mov	r0, r7
 801abd8:	f7fd fe52 	bl	8018880 <_printf_float>
 801abdc:	1c42      	adds	r2, r0, #1
 801abde:	4606      	mov	r6, r0
 801abe0:	d1d6      	bne.n	801ab90 <_svfiprintf_r+0x174>
 801abe2:	89ab      	ldrh	r3, [r5, #12]
 801abe4:	065b      	lsls	r3, r3, #25
 801abe6:	f53f af2d 	bmi.w	801aa44 <_svfiprintf_r+0x28>
 801abea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801abec:	e72c      	b.n	801aa48 <_svfiprintf_r+0x2c>
 801abee:	ab03      	add	r3, sp, #12
 801abf0:	9300      	str	r3, [sp, #0]
 801abf2:	462a      	mov	r2, r5
 801abf4:	4b05      	ldr	r3, [pc, #20]	@ (801ac0c <_svfiprintf_r+0x1f0>)
 801abf6:	a904      	add	r1, sp, #16
 801abf8:	4638      	mov	r0, r7
 801abfa:	f7fe f8d9 	bl	8018db0 <_printf_i>
 801abfe:	e7ed      	b.n	801abdc <_svfiprintf_r+0x1c0>
 801ac00:	0801d400 	.word	0x0801d400
 801ac04:	0801d40a 	.word	0x0801d40a
 801ac08:	08018881 	.word	0x08018881
 801ac0c:	0801a965 	.word	0x0801a965
 801ac10:	0801d406 	.word	0x0801d406

0801ac14 <__sflush_r>:
 801ac14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac1c:	0716      	lsls	r6, r2, #28
 801ac1e:	4605      	mov	r5, r0
 801ac20:	460c      	mov	r4, r1
 801ac22:	d454      	bmi.n	801acce <__sflush_r+0xba>
 801ac24:	684b      	ldr	r3, [r1, #4]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	dc02      	bgt.n	801ac30 <__sflush_r+0x1c>
 801ac2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	dd48      	ble.n	801acc2 <__sflush_r+0xae>
 801ac30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ac32:	2e00      	cmp	r6, #0
 801ac34:	d045      	beq.n	801acc2 <__sflush_r+0xae>
 801ac36:	2300      	movs	r3, #0
 801ac38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ac3c:	682f      	ldr	r7, [r5, #0]
 801ac3e:	6a21      	ldr	r1, [r4, #32]
 801ac40:	602b      	str	r3, [r5, #0]
 801ac42:	d030      	beq.n	801aca6 <__sflush_r+0x92>
 801ac44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ac46:	89a3      	ldrh	r3, [r4, #12]
 801ac48:	0759      	lsls	r1, r3, #29
 801ac4a:	d505      	bpl.n	801ac58 <__sflush_r+0x44>
 801ac4c:	6863      	ldr	r3, [r4, #4]
 801ac4e:	1ad2      	subs	r2, r2, r3
 801ac50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ac52:	b10b      	cbz	r3, 801ac58 <__sflush_r+0x44>
 801ac54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ac56:	1ad2      	subs	r2, r2, r3
 801ac58:	2300      	movs	r3, #0
 801ac5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ac5c:	6a21      	ldr	r1, [r4, #32]
 801ac5e:	4628      	mov	r0, r5
 801ac60:	47b0      	blx	r6
 801ac62:	1c43      	adds	r3, r0, #1
 801ac64:	89a3      	ldrh	r3, [r4, #12]
 801ac66:	d106      	bne.n	801ac76 <__sflush_r+0x62>
 801ac68:	6829      	ldr	r1, [r5, #0]
 801ac6a:	291d      	cmp	r1, #29
 801ac6c:	d82b      	bhi.n	801acc6 <__sflush_r+0xb2>
 801ac6e:	4a2a      	ldr	r2, [pc, #168]	@ (801ad18 <__sflush_r+0x104>)
 801ac70:	410a      	asrs	r2, r1
 801ac72:	07d6      	lsls	r6, r2, #31
 801ac74:	d427      	bmi.n	801acc6 <__sflush_r+0xb2>
 801ac76:	2200      	movs	r2, #0
 801ac78:	6062      	str	r2, [r4, #4]
 801ac7a:	04d9      	lsls	r1, r3, #19
 801ac7c:	6922      	ldr	r2, [r4, #16]
 801ac7e:	6022      	str	r2, [r4, #0]
 801ac80:	d504      	bpl.n	801ac8c <__sflush_r+0x78>
 801ac82:	1c42      	adds	r2, r0, #1
 801ac84:	d101      	bne.n	801ac8a <__sflush_r+0x76>
 801ac86:	682b      	ldr	r3, [r5, #0]
 801ac88:	b903      	cbnz	r3, 801ac8c <__sflush_r+0x78>
 801ac8a:	6560      	str	r0, [r4, #84]	@ 0x54
 801ac8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ac8e:	602f      	str	r7, [r5, #0]
 801ac90:	b1b9      	cbz	r1, 801acc2 <__sflush_r+0xae>
 801ac92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ac96:	4299      	cmp	r1, r3
 801ac98:	d002      	beq.n	801aca0 <__sflush_r+0x8c>
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	f7ff f9e0 	bl	801a060 <_free_r>
 801aca0:	2300      	movs	r3, #0
 801aca2:	6363      	str	r3, [r4, #52]	@ 0x34
 801aca4:	e00d      	b.n	801acc2 <__sflush_r+0xae>
 801aca6:	2301      	movs	r3, #1
 801aca8:	4628      	mov	r0, r5
 801acaa:	47b0      	blx	r6
 801acac:	4602      	mov	r2, r0
 801acae:	1c50      	adds	r0, r2, #1
 801acb0:	d1c9      	bne.n	801ac46 <__sflush_r+0x32>
 801acb2:	682b      	ldr	r3, [r5, #0]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d0c6      	beq.n	801ac46 <__sflush_r+0x32>
 801acb8:	2b1d      	cmp	r3, #29
 801acba:	d001      	beq.n	801acc0 <__sflush_r+0xac>
 801acbc:	2b16      	cmp	r3, #22
 801acbe:	d11e      	bne.n	801acfe <__sflush_r+0xea>
 801acc0:	602f      	str	r7, [r5, #0]
 801acc2:	2000      	movs	r0, #0
 801acc4:	e022      	b.n	801ad0c <__sflush_r+0xf8>
 801acc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801acca:	b21b      	sxth	r3, r3
 801accc:	e01b      	b.n	801ad06 <__sflush_r+0xf2>
 801acce:	690f      	ldr	r7, [r1, #16]
 801acd0:	2f00      	cmp	r7, #0
 801acd2:	d0f6      	beq.n	801acc2 <__sflush_r+0xae>
 801acd4:	0793      	lsls	r3, r2, #30
 801acd6:	680e      	ldr	r6, [r1, #0]
 801acd8:	bf08      	it	eq
 801acda:	694b      	ldreq	r3, [r1, #20]
 801acdc:	600f      	str	r7, [r1, #0]
 801acde:	bf18      	it	ne
 801ace0:	2300      	movne	r3, #0
 801ace2:	eba6 0807 	sub.w	r8, r6, r7
 801ace6:	608b      	str	r3, [r1, #8]
 801ace8:	f1b8 0f00 	cmp.w	r8, #0
 801acec:	dde9      	ble.n	801acc2 <__sflush_r+0xae>
 801acee:	6a21      	ldr	r1, [r4, #32]
 801acf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801acf2:	4643      	mov	r3, r8
 801acf4:	463a      	mov	r2, r7
 801acf6:	4628      	mov	r0, r5
 801acf8:	47b0      	blx	r6
 801acfa:	2800      	cmp	r0, #0
 801acfc:	dc08      	bgt.n	801ad10 <__sflush_r+0xfc>
 801acfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad06:	81a3      	strh	r3, [r4, #12]
 801ad08:	f04f 30ff 	mov.w	r0, #4294967295
 801ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad10:	4407      	add	r7, r0
 801ad12:	eba8 0800 	sub.w	r8, r8, r0
 801ad16:	e7e7      	b.n	801ace8 <__sflush_r+0xd4>
 801ad18:	dfbffffe 	.word	0xdfbffffe

0801ad1c <_fflush_r>:
 801ad1c:	b538      	push	{r3, r4, r5, lr}
 801ad1e:	690b      	ldr	r3, [r1, #16]
 801ad20:	4605      	mov	r5, r0
 801ad22:	460c      	mov	r4, r1
 801ad24:	b913      	cbnz	r3, 801ad2c <_fflush_r+0x10>
 801ad26:	2500      	movs	r5, #0
 801ad28:	4628      	mov	r0, r5
 801ad2a:	bd38      	pop	{r3, r4, r5, pc}
 801ad2c:	b118      	cbz	r0, 801ad36 <_fflush_r+0x1a>
 801ad2e:	6a03      	ldr	r3, [r0, #32]
 801ad30:	b90b      	cbnz	r3, 801ad36 <_fflush_r+0x1a>
 801ad32:	f7fe f9e9 	bl	8019108 <__sinit>
 801ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d0f3      	beq.n	801ad26 <_fflush_r+0xa>
 801ad3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ad40:	07d0      	lsls	r0, r2, #31
 801ad42:	d404      	bmi.n	801ad4e <_fflush_r+0x32>
 801ad44:	0599      	lsls	r1, r3, #22
 801ad46:	d402      	bmi.n	801ad4e <_fflush_r+0x32>
 801ad48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ad4a:	f7fe fb24 	bl	8019396 <__retarget_lock_acquire_recursive>
 801ad4e:	4628      	mov	r0, r5
 801ad50:	4621      	mov	r1, r4
 801ad52:	f7ff ff5f 	bl	801ac14 <__sflush_r>
 801ad56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ad58:	07da      	lsls	r2, r3, #31
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	d4e4      	bmi.n	801ad28 <_fflush_r+0xc>
 801ad5e:	89a3      	ldrh	r3, [r4, #12]
 801ad60:	059b      	lsls	r3, r3, #22
 801ad62:	d4e1      	bmi.n	801ad28 <_fflush_r+0xc>
 801ad64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ad66:	f7fe fb17 	bl	8019398 <__retarget_lock_release_recursive>
 801ad6a:	e7dd      	b.n	801ad28 <_fflush_r+0xc>

0801ad6c <memmove>:
 801ad6c:	4288      	cmp	r0, r1
 801ad6e:	b510      	push	{r4, lr}
 801ad70:	eb01 0402 	add.w	r4, r1, r2
 801ad74:	d902      	bls.n	801ad7c <memmove+0x10>
 801ad76:	4284      	cmp	r4, r0
 801ad78:	4623      	mov	r3, r4
 801ad7a:	d807      	bhi.n	801ad8c <memmove+0x20>
 801ad7c:	1e43      	subs	r3, r0, #1
 801ad7e:	42a1      	cmp	r1, r4
 801ad80:	d008      	beq.n	801ad94 <memmove+0x28>
 801ad82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad86:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad8a:	e7f8      	b.n	801ad7e <memmove+0x12>
 801ad8c:	4402      	add	r2, r0
 801ad8e:	4601      	mov	r1, r0
 801ad90:	428a      	cmp	r2, r1
 801ad92:	d100      	bne.n	801ad96 <memmove+0x2a>
 801ad94:	bd10      	pop	{r4, pc}
 801ad96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad9e:	e7f7      	b.n	801ad90 <memmove+0x24>

0801ada0 <_sbrk_r>:
 801ada0:	b538      	push	{r3, r4, r5, lr}
 801ada2:	4d06      	ldr	r5, [pc, #24]	@ (801adbc <_sbrk_r+0x1c>)
 801ada4:	2300      	movs	r3, #0
 801ada6:	4604      	mov	r4, r0
 801ada8:	4608      	mov	r0, r1
 801adaa:	602b      	str	r3, [r5, #0]
 801adac:	f7ea fa76 	bl	800529c <_sbrk>
 801adb0:	1c43      	adds	r3, r0, #1
 801adb2:	d102      	bne.n	801adba <_sbrk_r+0x1a>
 801adb4:	682b      	ldr	r3, [r5, #0]
 801adb6:	b103      	cbz	r3, 801adba <_sbrk_r+0x1a>
 801adb8:	6023      	str	r3, [r4, #0]
 801adba:	bd38      	pop	{r3, r4, r5, pc}
 801adbc:	20009cb4 	.word	0x20009cb4

0801adc0 <__assert_func>:
 801adc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801adc2:	4614      	mov	r4, r2
 801adc4:	461a      	mov	r2, r3
 801adc6:	4b09      	ldr	r3, [pc, #36]	@ (801adec <__assert_func+0x2c>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	4605      	mov	r5, r0
 801adcc:	68d8      	ldr	r0, [r3, #12]
 801adce:	b954      	cbnz	r4, 801ade6 <__assert_func+0x26>
 801add0:	4b07      	ldr	r3, [pc, #28]	@ (801adf0 <__assert_func+0x30>)
 801add2:	461c      	mov	r4, r3
 801add4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801add8:	9100      	str	r1, [sp, #0]
 801adda:	462b      	mov	r3, r5
 801addc:	4905      	ldr	r1, [pc, #20]	@ (801adf4 <__assert_func+0x34>)
 801adde:	f000 f86f 	bl	801aec0 <fiprintf>
 801ade2:	f000 f87f 	bl	801aee4 <abort>
 801ade6:	4b04      	ldr	r3, [pc, #16]	@ (801adf8 <__assert_func+0x38>)
 801ade8:	e7f4      	b.n	801add4 <__assert_func+0x14>
 801adea:	bf00      	nop
 801adec:	20001378 	.word	0x20001378
 801adf0:	0801d456 	.word	0x0801d456
 801adf4:	0801d428 	.word	0x0801d428
 801adf8:	0801d41b 	.word	0x0801d41b

0801adfc <_calloc_r>:
 801adfc:	b570      	push	{r4, r5, r6, lr}
 801adfe:	fba1 5402 	umull	r5, r4, r1, r2
 801ae02:	b93c      	cbnz	r4, 801ae14 <_calloc_r+0x18>
 801ae04:	4629      	mov	r1, r5
 801ae06:	f7ff f99f 	bl	801a148 <_malloc_r>
 801ae0a:	4606      	mov	r6, r0
 801ae0c:	b928      	cbnz	r0, 801ae1a <_calloc_r+0x1e>
 801ae0e:	2600      	movs	r6, #0
 801ae10:	4630      	mov	r0, r6
 801ae12:	bd70      	pop	{r4, r5, r6, pc}
 801ae14:	220c      	movs	r2, #12
 801ae16:	6002      	str	r2, [r0, #0]
 801ae18:	e7f9      	b.n	801ae0e <_calloc_r+0x12>
 801ae1a:	462a      	mov	r2, r5
 801ae1c:	4621      	mov	r1, r4
 801ae1e:	f7fe fa2d 	bl	801927c <memset>
 801ae22:	e7f5      	b.n	801ae10 <_calloc_r+0x14>

0801ae24 <__ascii_mbtowc>:
 801ae24:	b082      	sub	sp, #8
 801ae26:	b901      	cbnz	r1, 801ae2a <__ascii_mbtowc+0x6>
 801ae28:	a901      	add	r1, sp, #4
 801ae2a:	b142      	cbz	r2, 801ae3e <__ascii_mbtowc+0x1a>
 801ae2c:	b14b      	cbz	r3, 801ae42 <__ascii_mbtowc+0x1e>
 801ae2e:	7813      	ldrb	r3, [r2, #0]
 801ae30:	600b      	str	r3, [r1, #0]
 801ae32:	7812      	ldrb	r2, [r2, #0]
 801ae34:	1e10      	subs	r0, r2, #0
 801ae36:	bf18      	it	ne
 801ae38:	2001      	movne	r0, #1
 801ae3a:	b002      	add	sp, #8
 801ae3c:	4770      	bx	lr
 801ae3e:	4610      	mov	r0, r2
 801ae40:	e7fb      	b.n	801ae3a <__ascii_mbtowc+0x16>
 801ae42:	f06f 0001 	mvn.w	r0, #1
 801ae46:	e7f8      	b.n	801ae3a <__ascii_mbtowc+0x16>

0801ae48 <_realloc_r>:
 801ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae4c:	4680      	mov	r8, r0
 801ae4e:	4615      	mov	r5, r2
 801ae50:	460c      	mov	r4, r1
 801ae52:	b921      	cbnz	r1, 801ae5e <_realloc_r+0x16>
 801ae54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae58:	4611      	mov	r1, r2
 801ae5a:	f7ff b975 	b.w	801a148 <_malloc_r>
 801ae5e:	b92a      	cbnz	r2, 801ae6c <_realloc_r+0x24>
 801ae60:	f7ff f8fe 	bl	801a060 <_free_r>
 801ae64:	2400      	movs	r4, #0
 801ae66:	4620      	mov	r0, r4
 801ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae6c:	f000 f841 	bl	801aef2 <_malloc_usable_size_r>
 801ae70:	4285      	cmp	r5, r0
 801ae72:	4606      	mov	r6, r0
 801ae74:	d802      	bhi.n	801ae7c <_realloc_r+0x34>
 801ae76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ae7a:	d8f4      	bhi.n	801ae66 <_realloc_r+0x1e>
 801ae7c:	4629      	mov	r1, r5
 801ae7e:	4640      	mov	r0, r8
 801ae80:	f7ff f962 	bl	801a148 <_malloc_r>
 801ae84:	4607      	mov	r7, r0
 801ae86:	2800      	cmp	r0, #0
 801ae88:	d0ec      	beq.n	801ae64 <_realloc_r+0x1c>
 801ae8a:	42b5      	cmp	r5, r6
 801ae8c:	462a      	mov	r2, r5
 801ae8e:	4621      	mov	r1, r4
 801ae90:	bf28      	it	cs
 801ae92:	4632      	movcs	r2, r6
 801ae94:	f7fe fa89 	bl	80193aa <memcpy>
 801ae98:	4621      	mov	r1, r4
 801ae9a:	4640      	mov	r0, r8
 801ae9c:	f7ff f8e0 	bl	801a060 <_free_r>
 801aea0:	463c      	mov	r4, r7
 801aea2:	e7e0      	b.n	801ae66 <_realloc_r+0x1e>

0801aea4 <__ascii_wctomb>:
 801aea4:	4603      	mov	r3, r0
 801aea6:	4608      	mov	r0, r1
 801aea8:	b141      	cbz	r1, 801aebc <__ascii_wctomb+0x18>
 801aeaa:	2aff      	cmp	r2, #255	@ 0xff
 801aeac:	d904      	bls.n	801aeb8 <__ascii_wctomb+0x14>
 801aeae:	228a      	movs	r2, #138	@ 0x8a
 801aeb0:	601a      	str	r2, [r3, #0]
 801aeb2:	f04f 30ff 	mov.w	r0, #4294967295
 801aeb6:	4770      	bx	lr
 801aeb8:	700a      	strb	r2, [r1, #0]
 801aeba:	2001      	movs	r0, #1
 801aebc:	4770      	bx	lr
	...

0801aec0 <fiprintf>:
 801aec0:	b40e      	push	{r1, r2, r3}
 801aec2:	b503      	push	{r0, r1, lr}
 801aec4:	4601      	mov	r1, r0
 801aec6:	ab03      	add	r3, sp, #12
 801aec8:	4805      	ldr	r0, [pc, #20]	@ (801aee0 <fiprintf+0x20>)
 801aeca:	f853 2b04 	ldr.w	r2, [r3], #4
 801aece:	6800      	ldr	r0, [r0, #0]
 801aed0:	9301      	str	r3, [sp, #4]
 801aed2:	f000 f83f 	bl	801af54 <_vfiprintf_r>
 801aed6:	b002      	add	sp, #8
 801aed8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aedc:	b003      	add	sp, #12
 801aede:	4770      	bx	lr
 801aee0:	20001378 	.word	0x20001378

0801aee4 <abort>:
 801aee4:	b508      	push	{r3, lr}
 801aee6:	2006      	movs	r0, #6
 801aee8:	f000 fa08 	bl	801b2fc <raise>
 801aeec:	2001      	movs	r0, #1
 801aeee:	f7ea f95d 	bl	80051ac <_exit>

0801aef2 <_malloc_usable_size_r>:
 801aef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aef6:	1f18      	subs	r0, r3, #4
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	bfbc      	itt	lt
 801aefc:	580b      	ldrlt	r3, [r1, r0]
 801aefe:	18c0      	addlt	r0, r0, r3
 801af00:	4770      	bx	lr

0801af02 <__sfputc_r>:
 801af02:	6893      	ldr	r3, [r2, #8]
 801af04:	3b01      	subs	r3, #1
 801af06:	2b00      	cmp	r3, #0
 801af08:	b410      	push	{r4}
 801af0a:	6093      	str	r3, [r2, #8]
 801af0c:	da08      	bge.n	801af20 <__sfputc_r+0x1e>
 801af0e:	6994      	ldr	r4, [r2, #24]
 801af10:	42a3      	cmp	r3, r4
 801af12:	db01      	blt.n	801af18 <__sfputc_r+0x16>
 801af14:	290a      	cmp	r1, #10
 801af16:	d103      	bne.n	801af20 <__sfputc_r+0x1e>
 801af18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af1c:	f000 b932 	b.w	801b184 <__swbuf_r>
 801af20:	6813      	ldr	r3, [r2, #0]
 801af22:	1c58      	adds	r0, r3, #1
 801af24:	6010      	str	r0, [r2, #0]
 801af26:	7019      	strb	r1, [r3, #0]
 801af28:	4608      	mov	r0, r1
 801af2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af2e:	4770      	bx	lr

0801af30 <__sfputs_r>:
 801af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af32:	4606      	mov	r6, r0
 801af34:	460f      	mov	r7, r1
 801af36:	4614      	mov	r4, r2
 801af38:	18d5      	adds	r5, r2, r3
 801af3a:	42ac      	cmp	r4, r5
 801af3c:	d101      	bne.n	801af42 <__sfputs_r+0x12>
 801af3e:	2000      	movs	r0, #0
 801af40:	e007      	b.n	801af52 <__sfputs_r+0x22>
 801af42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af46:	463a      	mov	r2, r7
 801af48:	4630      	mov	r0, r6
 801af4a:	f7ff ffda 	bl	801af02 <__sfputc_r>
 801af4e:	1c43      	adds	r3, r0, #1
 801af50:	d1f3      	bne.n	801af3a <__sfputs_r+0xa>
 801af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af54 <_vfiprintf_r>:
 801af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af58:	460d      	mov	r5, r1
 801af5a:	b09d      	sub	sp, #116	@ 0x74
 801af5c:	4614      	mov	r4, r2
 801af5e:	4698      	mov	r8, r3
 801af60:	4606      	mov	r6, r0
 801af62:	b118      	cbz	r0, 801af6c <_vfiprintf_r+0x18>
 801af64:	6a03      	ldr	r3, [r0, #32]
 801af66:	b90b      	cbnz	r3, 801af6c <_vfiprintf_r+0x18>
 801af68:	f7fe f8ce 	bl	8019108 <__sinit>
 801af6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af6e:	07d9      	lsls	r1, r3, #31
 801af70:	d405      	bmi.n	801af7e <_vfiprintf_r+0x2a>
 801af72:	89ab      	ldrh	r3, [r5, #12]
 801af74:	059a      	lsls	r2, r3, #22
 801af76:	d402      	bmi.n	801af7e <_vfiprintf_r+0x2a>
 801af78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801af7a:	f7fe fa0c 	bl	8019396 <__retarget_lock_acquire_recursive>
 801af7e:	89ab      	ldrh	r3, [r5, #12]
 801af80:	071b      	lsls	r3, r3, #28
 801af82:	d501      	bpl.n	801af88 <_vfiprintf_r+0x34>
 801af84:	692b      	ldr	r3, [r5, #16]
 801af86:	b99b      	cbnz	r3, 801afb0 <_vfiprintf_r+0x5c>
 801af88:	4629      	mov	r1, r5
 801af8a:	4630      	mov	r0, r6
 801af8c:	f000 f938 	bl	801b200 <__swsetup_r>
 801af90:	b170      	cbz	r0, 801afb0 <_vfiprintf_r+0x5c>
 801af92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af94:	07dc      	lsls	r4, r3, #31
 801af96:	d504      	bpl.n	801afa2 <_vfiprintf_r+0x4e>
 801af98:	f04f 30ff 	mov.w	r0, #4294967295
 801af9c:	b01d      	add	sp, #116	@ 0x74
 801af9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afa2:	89ab      	ldrh	r3, [r5, #12]
 801afa4:	0598      	lsls	r0, r3, #22
 801afa6:	d4f7      	bmi.n	801af98 <_vfiprintf_r+0x44>
 801afa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801afaa:	f7fe f9f5 	bl	8019398 <__retarget_lock_release_recursive>
 801afae:	e7f3      	b.n	801af98 <_vfiprintf_r+0x44>
 801afb0:	2300      	movs	r3, #0
 801afb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801afb4:	2320      	movs	r3, #32
 801afb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801afba:	f8cd 800c 	str.w	r8, [sp, #12]
 801afbe:	2330      	movs	r3, #48	@ 0x30
 801afc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b170 <_vfiprintf_r+0x21c>
 801afc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801afc8:	f04f 0901 	mov.w	r9, #1
 801afcc:	4623      	mov	r3, r4
 801afce:	469a      	mov	sl, r3
 801afd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afd4:	b10a      	cbz	r2, 801afda <_vfiprintf_r+0x86>
 801afd6:	2a25      	cmp	r2, #37	@ 0x25
 801afd8:	d1f9      	bne.n	801afce <_vfiprintf_r+0x7a>
 801afda:	ebba 0b04 	subs.w	fp, sl, r4
 801afde:	d00b      	beq.n	801aff8 <_vfiprintf_r+0xa4>
 801afe0:	465b      	mov	r3, fp
 801afe2:	4622      	mov	r2, r4
 801afe4:	4629      	mov	r1, r5
 801afe6:	4630      	mov	r0, r6
 801afe8:	f7ff ffa2 	bl	801af30 <__sfputs_r>
 801afec:	3001      	adds	r0, #1
 801afee:	f000 80a7 	beq.w	801b140 <_vfiprintf_r+0x1ec>
 801aff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aff4:	445a      	add	r2, fp
 801aff6:	9209      	str	r2, [sp, #36]	@ 0x24
 801aff8:	f89a 3000 	ldrb.w	r3, [sl]
 801affc:	2b00      	cmp	r3, #0
 801affe:	f000 809f 	beq.w	801b140 <_vfiprintf_r+0x1ec>
 801b002:	2300      	movs	r3, #0
 801b004:	f04f 32ff 	mov.w	r2, #4294967295
 801b008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b00c:	f10a 0a01 	add.w	sl, sl, #1
 801b010:	9304      	str	r3, [sp, #16]
 801b012:	9307      	str	r3, [sp, #28]
 801b014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b018:	931a      	str	r3, [sp, #104]	@ 0x68
 801b01a:	4654      	mov	r4, sl
 801b01c:	2205      	movs	r2, #5
 801b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b022:	4853      	ldr	r0, [pc, #332]	@ (801b170 <_vfiprintf_r+0x21c>)
 801b024:	f7e9 f80c 	bl	8004040 <memchr>
 801b028:	9a04      	ldr	r2, [sp, #16]
 801b02a:	b9d8      	cbnz	r0, 801b064 <_vfiprintf_r+0x110>
 801b02c:	06d1      	lsls	r1, r2, #27
 801b02e:	bf44      	itt	mi
 801b030:	2320      	movmi	r3, #32
 801b032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b036:	0713      	lsls	r3, r2, #28
 801b038:	bf44      	itt	mi
 801b03a:	232b      	movmi	r3, #43	@ 0x2b
 801b03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b040:	f89a 3000 	ldrb.w	r3, [sl]
 801b044:	2b2a      	cmp	r3, #42	@ 0x2a
 801b046:	d015      	beq.n	801b074 <_vfiprintf_r+0x120>
 801b048:	9a07      	ldr	r2, [sp, #28]
 801b04a:	4654      	mov	r4, sl
 801b04c:	2000      	movs	r0, #0
 801b04e:	f04f 0c0a 	mov.w	ip, #10
 801b052:	4621      	mov	r1, r4
 801b054:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b058:	3b30      	subs	r3, #48	@ 0x30
 801b05a:	2b09      	cmp	r3, #9
 801b05c:	d94b      	bls.n	801b0f6 <_vfiprintf_r+0x1a2>
 801b05e:	b1b0      	cbz	r0, 801b08e <_vfiprintf_r+0x13a>
 801b060:	9207      	str	r2, [sp, #28]
 801b062:	e014      	b.n	801b08e <_vfiprintf_r+0x13a>
 801b064:	eba0 0308 	sub.w	r3, r0, r8
 801b068:	fa09 f303 	lsl.w	r3, r9, r3
 801b06c:	4313      	orrs	r3, r2
 801b06e:	9304      	str	r3, [sp, #16]
 801b070:	46a2      	mov	sl, r4
 801b072:	e7d2      	b.n	801b01a <_vfiprintf_r+0xc6>
 801b074:	9b03      	ldr	r3, [sp, #12]
 801b076:	1d19      	adds	r1, r3, #4
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	9103      	str	r1, [sp, #12]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	bfbb      	ittet	lt
 801b080:	425b      	neglt	r3, r3
 801b082:	f042 0202 	orrlt.w	r2, r2, #2
 801b086:	9307      	strge	r3, [sp, #28]
 801b088:	9307      	strlt	r3, [sp, #28]
 801b08a:	bfb8      	it	lt
 801b08c:	9204      	strlt	r2, [sp, #16]
 801b08e:	7823      	ldrb	r3, [r4, #0]
 801b090:	2b2e      	cmp	r3, #46	@ 0x2e
 801b092:	d10a      	bne.n	801b0aa <_vfiprintf_r+0x156>
 801b094:	7863      	ldrb	r3, [r4, #1]
 801b096:	2b2a      	cmp	r3, #42	@ 0x2a
 801b098:	d132      	bne.n	801b100 <_vfiprintf_r+0x1ac>
 801b09a:	9b03      	ldr	r3, [sp, #12]
 801b09c:	1d1a      	adds	r2, r3, #4
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	9203      	str	r2, [sp, #12]
 801b0a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b0a6:	3402      	adds	r4, #2
 801b0a8:	9305      	str	r3, [sp, #20]
 801b0aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b180 <_vfiprintf_r+0x22c>
 801b0ae:	7821      	ldrb	r1, [r4, #0]
 801b0b0:	2203      	movs	r2, #3
 801b0b2:	4650      	mov	r0, sl
 801b0b4:	f7e8 ffc4 	bl	8004040 <memchr>
 801b0b8:	b138      	cbz	r0, 801b0ca <_vfiprintf_r+0x176>
 801b0ba:	9b04      	ldr	r3, [sp, #16]
 801b0bc:	eba0 000a 	sub.w	r0, r0, sl
 801b0c0:	2240      	movs	r2, #64	@ 0x40
 801b0c2:	4082      	lsls	r2, r0
 801b0c4:	4313      	orrs	r3, r2
 801b0c6:	3401      	adds	r4, #1
 801b0c8:	9304      	str	r3, [sp, #16]
 801b0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0ce:	4829      	ldr	r0, [pc, #164]	@ (801b174 <_vfiprintf_r+0x220>)
 801b0d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b0d4:	2206      	movs	r2, #6
 801b0d6:	f7e8 ffb3 	bl	8004040 <memchr>
 801b0da:	2800      	cmp	r0, #0
 801b0dc:	d03f      	beq.n	801b15e <_vfiprintf_r+0x20a>
 801b0de:	4b26      	ldr	r3, [pc, #152]	@ (801b178 <_vfiprintf_r+0x224>)
 801b0e0:	bb1b      	cbnz	r3, 801b12a <_vfiprintf_r+0x1d6>
 801b0e2:	9b03      	ldr	r3, [sp, #12]
 801b0e4:	3307      	adds	r3, #7
 801b0e6:	f023 0307 	bic.w	r3, r3, #7
 801b0ea:	3308      	adds	r3, #8
 801b0ec:	9303      	str	r3, [sp, #12]
 801b0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0f0:	443b      	add	r3, r7
 801b0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0f4:	e76a      	b.n	801afcc <_vfiprintf_r+0x78>
 801b0f6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b0fa:	460c      	mov	r4, r1
 801b0fc:	2001      	movs	r0, #1
 801b0fe:	e7a8      	b.n	801b052 <_vfiprintf_r+0xfe>
 801b100:	2300      	movs	r3, #0
 801b102:	3401      	adds	r4, #1
 801b104:	9305      	str	r3, [sp, #20]
 801b106:	4619      	mov	r1, r3
 801b108:	f04f 0c0a 	mov.w	ip, #10
 801b10c:	4620      	mov	r0, r4
 801b10e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b112:	3a30      	subs	r2, #48	@ 0x30
 801b114:	2a09      	cmp	r2, #9
 801b116:	d903      	bls.n	801b120 <_vfiprintf_r+0x1cc>
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d0c6      	beq.n	801b0aa <_vfiprintf_r+0x156>
 801b11c:	9105      	str	r1, [sp, #20]
 801b11e:	e7c4      	b.n	801b0aa <_vfiprintf_r+0x156>
 801b120:	fb0c 2101 	mla	r1, ip, r1, r2
 801b124:	4604      	mov	r4, r0
 801b126:	2301      	movs	r3, #1
 801b128:	e7f0      	b.n	801b10c <_vfiprintf_r+0x1b8>
 801b12a:	ab03      	add	r3, sp, #12
 801b12c:	9300      	str	r3, [sp, #0]
 801b12e:	462a      	mov	r2, r5
 801b130:	4b12      	ldr	r3, [pc, #72]	@ (801b17c <_vfiprintf_r+0x228>)
 801b132:	a904      	add	r1, sp, #16
 801b134:	4630      	mov	r0, r6
 801b136:	f7fd fba3 	bl	8018880 <_printf_float>
 801b13a:	4607      	mov	r7, r0
 801b13c:	1c78      	adds	r0, r7, #1
 801b13e:	d1d6      	bne.n	801b0ee <_vfiprintf_r+0x19a>
 801b140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b142:	07d9      	lsls	r1, r3, #31
 801b144:	d405      	bmi.n	801b152 <_vfiprintf_r+0x1fe>
 801b146:	89ab      	ldrh	r3, [r5, #12]
 801b148:	059a      	lsls	r2, r3, #22
 801b14a:	d402      	bmi.n	801b152 <_vfiprintf_r+0x1fe>
 801b14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b14e:	f7fe f923 	bl	8019398 <__retarget_lock_release_recursive>
 801b152:	89ab      	ldrh	r3, [r5, #12]
 801b154:	065b      	lsls	r3, r3, #25
 801b156:	f53f af1f 	bmi.w	801af98 <_vfiprintf_r+0x44>
 801b15a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b15c:	e71e      	b.n	801af9c <_vfiprintf_r+0x48>
 801b15e:	ab03      	add	r3, sp, #12
 801b160:	9300      	str	r3, [sp, #0]
 801b162:	462a      	mov	r2, r5
 801b164:	4b05      	ldr	r3, [pc, #20]	@ (801b17c <_vfiprintf_r+0x228>)
 801b166:	a904      	add	r1, sp, #16
 801b168:	4630      	mov	r0, r6
 801b16a:	f7fd fe21 	bl	8018db0 <_printf_i>
 801b16e:	e7e4      	b.n	801b13a <_vfiprintf_r+0x1e6>
 801b170:	0801d400 	.word	0x0801d400
 801b174:	0801d40a 	.word	0x0801d40a
 801b178:	08018881 	.word	0x08018881
 801b17c:	0801af31 	.word	0x0801af31
 801b180:	0801d406 	.word	0x0801d406

0801b184 <__swbuf_r>:
 801b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b186:	460e      	mov	r6, r1
 801b188:	4614      	mov	r4, r2
 801b18a:	4605      	mov	r5, r0
 801b18c:	b118      	cbz	r0, 801b196 <__swbuf_r+0x12>
 801b18e:	6a03      	ldr	r3, [r0, #32]
 801b190:	b90b      	cbnz	r3, 801b196 <__swbuf_r+0x12>
 801b192:	f7fd ffb9 	bl	8019108 <__sinit>
 801b196:	69a3      	ldr	r3, [r4, #24]
 801b198:	60a3      	str	r3, [r4, #8]
 801b19a:	89a3      	ldrh	r3, [r4, #12]
 801b19c:	071a      	lsls	r2, r3, #28
 801b19e:	d501      	bpl.n	801b1a4 <__swbuf_r+0x20>
 801b1a0:	6923      	ldr	r3, [r4, #16]
 801b1a2:	b943      	cbnz	r3, 801b1b6 <__swbuf_r+0x32>
 801b1a4:	4621      	mov	r1, r4
 801b1a6:	4628      	mov	r0, r5
 801b1a8:	f000 f82a 	bl	801b200 <__swsetup_r>
 801b1ac:	b118      	cbz	r0, 801b1b6 <__swbuf_r+0x32>
 801b1ae:	f04f 37ff 	mov.w	r7, #4294967295
 801b1b2:	4638      	mov	r0, r7
 801b1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	6922      	ldr	r2, [r4, #16]
 801b1ba:	1a98      	subs	r0, r3, r2
 801b1bc:	6963      	ldr	r3, [r4, #20]
 801b1be:	b2f6      	uxtb	r6, r6
 801b1c0:	4283      	cmp	r3, r0
 801b1c2:	4637      	mov	r7, r6
 801b1c4:	dc05      	bgt.n	801b1d2 <__swbuf_r+0x4e>
 801b1c6:	4621      	mov	r1, r4
 801b1c8:	4628      	mov	r0, r5
 801b1ca:	f7ff fda7 	bl	801ad1c <_fflush_r>
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	d1ed      	bne.n	801b1ae <__swbuf_r+0x2a>
 801b1d2:	68a3      	ldr	r3, [r4, #8]
 801b1d4:	3b01      	subs	r3, #1
 801b1d6:	60a3      	str	r3, [r4, #8]
 801b1d8:	6823      	ldr	r3, [r4, #0]
 801b1da:	1c5a      	adds	r2, r3, #1
 801b1dc:	6022      	str	r2, [r4, #0]
 801b1de:	701e      	strb	r6, [r3, #0]
 801b1e0:	6962      	ldr	r2, [r4, #20]
 801b1e2:	1c43      	adds	r3, r0, #1
 801b1e4:	429a      	cmp	r2, r3
 801b1e6:	d004      	beq.n	801b1f2 <__swbuf_r+0x6e>
 801b1e8:	89a3      	ldrh	r3, [r4, #12]
 801b1ea:	07db      	lsls	r3, r3, #31
 801b1ec:	d5e1      	bpl.n	801b1b2 <__swbuf_r+0x2e>
 801b1ee:	2e0a      	cmp	r6, #10
 801b1f0:	d1df      	bne.n	801b1b2 <__swbuf_r+0x2e>
 801b1f2:	4621      	mov	r1, r4
 801b1f4:	4628      	mov	r0, r5
 801b1f6:	f7ff fd91 	bl	801ad1c <_fflush_r>
 801b1fa:	2800      	cmp	r0, #0
 801b1fc:	d0d9      	beq.n	801b1b2 <__swbuf_r+0x2e>
 801b1fe:	e7d6      	b.n	801b1ae <__swbuf_r+0x2a>

0801b200 <__swsetup_r>:
 801b200:	b538      	push	{r3, r4, r5, lr}
 801b202:	4b29      	ldr	r3, [pc, #164]	@ (801b2a8 <__swsetup_r+0xa8>)
 801b204:	4605      	mov	r5, r0
 801b206:	6818      	ldr	r0, [r3, #0]
 801b208:	460c      	mov	r4, r1
 801b20a:	b118      	cbz	r0, 801b214 <__swsetup_r+0x14>
 801b20c:	6a03      	ldr	r3, [r0, #32]
 801b20e:	b90b      	cbnz	r3, 801b214 <__swsetup_r+0x14>
 801b210:	f7fd ff7a 	bl	8019108 <__sinit>
 801b214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b218:	0719      	lsls	r1, r3, #28
 801b21a:	d422      	bmi.n	801b262 <__swsetup_r+0x62>
 801b21c:	06da      	lsls	r2, r3, #27
 801b21e:	d407      	bmi.n	801b230 <__swsetup_r+0x30>
 801b220:	2209      	movs	r2, #9
 801b222:	602a      	str	r2, [r5, #0]
 801b224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b228:	81a3      	strh	r3, [r4, #12]
 801b22a:	f04f 30ff 	mov.w	r0, #4294967295
 801b22e:	e033      	b.n	801b298 <__swsetup_r+0x98>
 801b230:	0758      	lsls	r0, r3, #29
 801b232:	d512      	bpl.n	801b25a <__swsetup_r+0x5a>
 801b234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b236:	b141      	cbz	r1, 801b24a <__swsetup_r+0x4a>
 801b238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b23c:	4299      	cmp	r1, r3
 801b23e:	d002      	beq.n	801b246 <__swsetup_r+0x46>
 801b240:	4628      	mov	r0, r5
 801b242:	f7fe ff0d 	bl	801a060 <_free_r>
 801b246:	2300      	movs	r3, #0
 801b248:	6363      	str	r3, [r4, #52]	@ 0x34
 801b24a:	89a3      	ldrh	r3, [r4, #12]
 801b24c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b250:	81a3      	strh	r3, [r4, #12]
 801b252:	2300      	movs	r3, #0
 801b254:	6063      	str	r3, [r4, #4]
 801b256:	6923      	ldr	r3, [r4, #16]
 801b258:	6023      	str	r3, [r4, #0]
 801b25a:	89a3      	ldrh	r3, [r4, #12]
 801b25c:	f043 0308 	orr.w	r3, r3, #8
 801b260:	81a3      	strh	r3, [r4, #12]
 801b262:	6923      	ldr	r3, [r4, #16]
 801b264:	b94b      	cbnz	r3, 801b27a <__swsetup_r+0x7a>
 801b266:	89a3      	ldrh	r3, [r4, #12]
 801b268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b26c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b270:	d003      	beq.n	801b27a <__swsetup_r+0x7a>
 801b272:	4621      	mov	r1, r4
 801b274:	4628      	mov	r0, r5
 801b276:	f000 f883 	bl	801b380 <__smakebuf_r>
 801b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b27e:	f013 0201 	ands.w	r2, r3, #1
 801b282:	d00a      	beq.n	801b29a <__swsetup_r+0x9a>
 801b284:	2200      	movs	r2, #0
 801b286:	60a2      	str	r2, [r4, #8]
 801b288:	6962      	ldr	r2, [r4, #20]
 801b28a:	4252      	negs	r2, r2
 801b28c:	61a2      	str	r2, [r4, #24]
 801b28e:	6922      	ldr	r2, [r4, #16]
 801b290:	b942      	cbnz	r2, 801b2a4 <__swsetup_r+0xa4>
 801b292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b296:	d1c5      	bne.n	801b224 <__swsetup_r+0x24>
 801b298:	bd38      	pop	{r3, r4, r5, pc}
 801b29a:	0799      	lsls	r1, r3, #30
 801b29c:	bf58      	it	pl
 801b29e:	6962      	ldrpl	r2, [r4, #20]
 801b2a0:	60a2      	str	r2, [r4, #8]
 801b2a2:	e7f4      	b.n	801b28e <__swsetup_r+0x8e>
 801b2a4:	2000      	movs	r0, #0
 801b2a6:	e7f7      	b.n	801b298 <__swsetup_r+0x98>
 801b2a8:	20001378 	.word	0x20001378

0801b2ac <_raise_r>:
 801b2ac:	291f      	cmp	r1, #31
 801b2ae:	b538      	push	{r3, r4, r5, lr}
 801b2b0:	4605      	mov	r5, r0
 801b2b2:	460c      	mov	r4, r1
 801b2b4:	d904      	bls.n	801b2c0 <_raise_r+0x14>
 801b2b6:	2316      	movs	r3, #22
 801b2b8:	6003      	str	r3, [r0, #0]
 801b2ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b2be:	bd38      	pop	{r3, r4, r5, pc}
 801b2c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b2c2:	b112      	cbz	r2, 801b2ca <_raise_r+0x1e>
 801b2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2c8:	b94b      	cbnz	r3, 801b2de <_raise_r+0x32>
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	f000 f830 	bl	801b330 <_getpid_r>
 801b2d0:	4622      	mov	r2, r4
 801b2d2:	4601      	mov	r1, r0
 801b2d4:	4628      	mov	r0, r5
 801b2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2da:	f000 b817 	b.w	801b30c <_kill_r>
 801b2de:	2b01      	cmp	r3, #1
 801b2e0:	d00a      	beq.n	801b2f8 <_raise_r+0x4c>
 801b2e2:	1c59      	adds	r1, r3, #1
 801b2e4:	d103      	bne.n	801b2ee <_raise_r+0x42>
 801b2e6:	2316      	movs	r3, #22
 801b2e8:	6003      	str	r3, [r0, #0]
 801b2ea:	2001      	movs	r0, #1
 801b2ec:	e7e7      	b.n	801b2be <_raise_r+0x12>
 801b2ee:	2100      	movs	r1, #0
 801b2f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	4798      	blx	r3
 801b2f8:	2000      	movs	r0, #0
 801b2fa:	e7e0      	b.n	801b2be <_raise_r+0x12>

0801b2fc <raise>:
 801b2fc:	4b02      	ldr	r3, [pc, #8]	@ (801b308 <raise+0xc>)
 801b2fe:	4601      	mov	r1, r0
 801b300:	6818      	ldr	r0, [r3, #0]
 801b302:	f7ff bfd3 	b.w	801b2ac <_raise_r>
 801b306:	bf00      	nop
 801b308:	20001378 	.word	0x20001378

0801b30c <_kill_r>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	4d07      	ldr	r5, [pc, #28]	@ (801b32c <_kill_r+0x20>)
 801b310:	2300      	movs	r3, #0
 801b312:	4604      	mov	r4, r0
 801b314:	4608      	mov	r0, r1
 801b316:	4611      	mov	r1, r2
 801b318:	602b      	str	r3, [r5, #0]
 801b31a:	f7e9 ff37 	bl	800518c <_kill>
 801b31e:	1c43      	adds	r3, r0, #1
 801b320:	d102      	bne.n	801b328 <_kill_r+0x1c>
 801b322:	682b      	ldr	r3, [r5, #0]
 801b324:	b103      	cbz	r3, 801b328 <_kill_r+0x1c>
 801b326:	6023      	str	r3, [r4, #0]
 801b328:	bd38      	pop	{r3, r4, r5, pc}
 801b32a:	bf00      	nop
 801b32c:	20009cb4 	.word	0x20009cb4

0801b330 <_getpid_r>:
 801b330:	f7e9 bf24 	b.w	800517c <_getpid>

0801b334 <__swhatbuf_r>:
 801b334:	b570      	push	{r4, r5, r6, lr}
 801b336:	460c      	mov	r4, r1
 801b338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b33c:	2900      	cmp	r1, #0
 801b33e:	b096      	sub	sp, #88	@ 0x58
 801b340:	4615      	mov	r5, r2
 801b342:	461e      	mov	r6, r3
 801b344:	da0d      	bge.n	801b362 <__swhatbuf_r+0x2e>
 801b346:	89a3      	ldrh	r3, [r4, #12]
 801b348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b34c:	f04f 0100 	mov.w	r1, #0
 801b350:	bf14      	ite	ne
 801b352:	2340      	movne	r3, #64	@ 0x40
 801b354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b358:	2000      	movs	r0, #0
 801b35a:	6031      	str	r1, [r6, #0]
 801b35c:	602b      	str	r3, [r5, #0]
 801b35e:	b016      	add	sp, #88	@ 0x58
 801b360:	bd70      	pop	{r4, r5, r6, pc}
 801b362:	466a      	mov	r2, sp
 801b364:	f000 f848 	bl	801b3f8 <_fstat_r>
 801b368:	2800      	cmp	r0, #0
 801b36a:	dbec      	blt.n	801b346 <__swhatbuf_r+0x12>
 801b36c:	9901      	ldr	r1, [sp, #4]
 801b36e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b376:	4259      	negs	r1, r3
 801b378:	4159      	adcs	r1, r3
 801b37a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b37e:	e7eb      	b.n	801b358 <__swhatbuf_r+0x24>

0801b380 <__smakebuf_r>:
 801b380:	898b      	ldrh	r3, [r1, #12]
 801b382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b384:	079d      	lsls	r5, r3, #30
 801b386:	4606      	mov	r6, r0
 801b388:	460c      	mov	r4, r1
 801b38a:	d507      	bpl.n	801b39c <__smakebuf_r+0x1c>
 801b38c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b390:	6023      	str	r3, [r4, #0]
 801b392:	6123      	str	r3, [r4, #16]
 801b394:	2301      	movs	r3, #1
 801b396:	6163      	str	r3, [r4, #20]
 801b398:	b003      	add	sp, #12
 801b39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b39c:	ab01      	add	r3, sp, #4
 801b39e:	466a      	mov	r2, sp
 801b3a0:	f7ff ffc8 	bl	801b334 <__swhatbuf_r>
 801b3a4:	9f00      	ldr	r7, [sp, #0]
 801b3a6:	4605      	mov	r5, r0
 801b3a8:	4639      	mov	r1, r7
 801b3aa:	4630      	mov	r0, r6
 801b3ac:	f7fe fecc 	bl	801a148 <_malloc_r>
 801b3b0:	b948      	cbnz	r0, 801b3c6 <__smakebuf_r+0x46>
 801b3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b3b6:	059a      	lsls	r2, r3, #22
 801b3b8:	d4ee      	bmi.n	801b398 <__smakebuf_r+0x18>
 801b3ba:	f023 0303 	bic.w	r3, r3, #3
 801b3be:	f043 0302 	orr.w	r3, r3, #2
 801b3c2:	81a3      	strh	r3, [r4, #12]
 801b3c4:	e7e2      	b.n	801b38c <__smakebuf_r+0xc>
 801b3c6:	89a3      	ldrh	r3, [r4, #12]
 801b3c8:	6020      	str	r0, [r4, #0]
 801b3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b3ce:	81a3      	strh	r3, [r4, #12]
 801b3d0:	9b01      	ldr	r3, [sp, #4]
 801b3d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b3d6:	b15b      	cbz	r3, 801b3f0 <__smakebuf_r+0x70>
 801b3d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3dc:	4630      	mov	r0, r6
 801b3de:	f000 f81d 	bl	801b41c <_isatty_r>
 801b3e2:	b128      	cbz	r0, 801b3f0 <__smakebuf_r+0x70>
 801b3e4:	89a3      	ldrh	r3, [r4, #12]
 801b3e6:	f023 0303 	bic.w	r3, r3, #3
 801b3ea:	f043 0301 	orr.w	r3, r3, #1
 801b3ee:	81a3      	strh	r3, [r4, #12]
 801b3f0:	89a3      	ldrh	r3, [r4, #12]
 801b3f2:	431d      	orrs	r5, r3
 801b3f4:	81a5      	strh	r5, [r4, #12]
 801b3f6:	e7cf      	b.n	801b398 <__smakebuf_r+0x18>

0801b3f8 <_fstat_r>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	4d07      	ldr	r5, [pc, #28]	@ (801b418 <_fstat_r+0x20>)
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	4604      	mov	r4, r0
 801b400:	4608      	mov	r0, r1
 801b402:	4611      	mov	r1, r2
 801b404:	602b      	str	r3, [r5, #0]
 801b406:	f7e9 ff21 	bl	800524c <_fstat>
 801b40a:	1c43      	adds	r3, r0, #1
 801b40c:	d102      	bne.n	801b414 <_fstat_r+0x1c>
 801b40e:	682b      	ldr	r3, [r5, #0]
 801b410:	b103      	cbz	r3, 801b414 <_fstat_r+0x1c>
 801b412:	6023      	str	r3, [r4, #0]
 801b414:	bd38      	pop	{r3, r4, r5, pc}
 801b416:	bf00      	nop
 801b418:	20009cb4 	.word	0x20009cb4

0801b41c <_isatty_r>:
 801b41c:	b538      	push	{r3, r4, r5, lr}
 801b41e:	4d06      	ldr	r5, [pc, #24]	@ (801b438 <_isatty_r+0x1c>)
 801b420:	2300      	movs	r3, #0
 801b422:	4604      	mov	r4, r0
 801b424:	4608      	mov	r0, r1
 801b426:	602b      	str	r3, [r5, #0]
 801b428:	f7e9 ff20 	bl	800526c <_isatty>
 801b42c:	1c43      	adds	r3, r0, #1
 801b42e:	d102      	bne.n	801b436 <_isatty_r+0x1a>
 801b430:	682b      	ldr	r3, [r5, #0]
 801b432:	b103      	cbz	r3, 801b436 <_isatty_r+0x1a>
 801b434:	6023      	str	r3, [r4, #0]
 801b436:	bd38      	pop	{r3, r4, r5, pc}
 801b438:	20009cb4 	.word	0x20009cb4

0801b43c <_init>:
 801b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b43e:	bf00      	nop
 801b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b442:	bc08      	pop	{r3}
 801b444:	469e      	mov	lr, r3
 801b446:	4770      	bx	lr

0801b448 <_fini>:
 801b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b44a:	bf00      	nop
 801b44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b44e:	bc08      	pop	{r3}
 801b450:	469e      	mov	lr, r3
 801b452:	4770      	bx	lr
