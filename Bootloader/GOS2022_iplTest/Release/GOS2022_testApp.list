
GOS2022_testApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e0f4  080201d0  080201d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a30  0803e2c8  0803e2c8  0001f2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040cf8  08040cf8  00025320  2**0
                  CONTENTS
  4 .ARM          00000008  08040cf8  08040cf8  00021cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040d00  08040d00  00025320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040d00  08040d00  00021d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040d04  08040d04  00021d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003320  20000000  08040d08  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011dcc  20003320  08044028  00025320  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200150ec  08044028  000260ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025320  2**0
                  CONTENTS, READONLY
 12 .debug_info   000367ec  00000000  00000000  00025350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ae14  00000000  00000000  0005bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002928  00000000  00000000  00066950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e60  00000000  00000000  00069278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0005426c  00000000  00000000  0006b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00051fc0  00000000  00000000  000bf344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3412  00000000  00000000  00111304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00204716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad7c  00000000  00000000  0020475c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0020f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201d0 <__do_global_dtors_aux>:
 80201d0:	b510      	push	{r4, lr}
 80201d2:	4c05      	ldr	r4, [pc, #20]	@ (80201e8 <__do_global_dtors_aux+0x18>)
 80201d4:	7823      	ldrb	r3, [r4, #0]
 80201d6:	b933      	cbnz	r3, 80201e6 <__do_global_dtors_aux+0x16>
 80201d8:	4b04      	ldr	r3, [pc, #16]	@ (80201ec <__do_global_dtors_aux+0x1c>)
 80201da:	b113      	cbz	r3, 80201e2 <__do_global_dtors_aux+0x12>
 80201dc:	4804      	ldr	r0, [pc, #16]	@ (80201f0 <__do_global_dtors_aux+0x20>)
 80201de:	f3af 8000 	nop.w
 80201e2:	2301      	movs	r3, #1
 80201e4:	7023      	strb	r3, [r4, #0]
 80201e6:	bd10      	pop	{r4, pc}
 80201e8:	20003320 	.word	0x20003320
 80201ec:	00000000 	.word	0x00000000
 80201f0:	0803e2ac 	.word	0x0803e2ac

080201f4 <frame_dummy>:
 80201f4:	b508      	push	{r3, lr}
 80201f6:	4b03      	ldr	r3, [pc, #12]	@ (8020204 <frame_dummy+0x10>)
 80201f8:	b11b      	cbz	r3, 8020202 <frame_dummy+0xe>
 80201fa:	4903      	ldr	r1, [pc, #12]	@ (8020208 <frame_dummy+0x14>)
 80201fc:	4803      	ldr	r0, [pc, #12]	@ (802020c <frame_dummy+0x18>)
 80201fe:	f3af 8000 	nop.w
 8020202:	bd08      	pop	{r3, pc}
 8020204:	00000000 	.word	0x00000000
 8020208:	20003324 	.word	0x20003324
 802020c:	0803e2ac 	.word	0x0803e2ac

08020210 <strcmp>:
 8020210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020218:	2a01      	cmp	r2, #1
 802021a:	bf28      	it	cs
 802021c:	429a      	cmpcs	r2, r3
 802021e:	d0f7      	beq.n	8020210 <strcmp>
 8020220:	1ad0      	subs	r0, r2, r3
 8020222:	4770      	bx	lr
	...

08020230 <memchr>:
 8020230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020234:	2a10      	cmp	r2, #16
 8020236:	db2b      	blt.n	8020290 <memchr+0x60>
 8020238:	f010 0f07 	tst.w	r0, #7
 802023c:	d008      	beq.n	8020250 <memchr+0x20>
 802023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020242:	3a01      	subs	r2, #1
 8020244:	428b      	cmp	r3, r1
 8020246:	d02d      	beq.n	80202a4 <memchr+0x74>
 8020248:	f010 0f07 	tst.w	r0, #7
 802024c:	b342      	cbz	r2, 80202a0 <memchr+0x70>
 802024e:	d1f6      	bne.n	802023e <memchr+0xe>
 8020250:	b4f0      	push	{r4, r5, r6, r7}
 8020252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802025a:	f022 0407 	bic.w	r4, r2, #7
 802025e:	f07f 0700 	mvns.w	r7, #0
 8020262:	2300      	movs	r3, #0
 8020264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020268:	3c08      	subs	r4, #8
 802026a:	ea85 0501 	eor.w	r5, r5, r1
 802026e:	ea86 0601 	eor.w	r6, r6, r1
 8020272:	fa85 f547 	uadd8	r5, r5, r7
 8020276:	faa3 f587 	sel	r5, r3, r7
 802027a:	fa86 f647 	uadd8	r6, r6, r7
 802027e:	faa5 f687 	sel	r6, r5, r7
 8020282:	b98e      	cbnz	r6, 80202a8 <memchr+0x78>
 8020284:	d1ee      	bne.n	8020264 <memchr+0x34>
 8020286:	bcf0      	pop	{r4, r5, r6, r7}
 8020288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802028c:	f002 0207 	and.w	r2, r2, #7
 8020290:	b132      	cbz	r2, 80202a0 <memchr+0x70>
 8020292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020296:	3a01      	subs	r2, #1
 8020298:	ea83 0301 	eor.w	r3, r3, r1
 802029c:	b113      	cbz	r3, 80202a4 <memchr+0x74>
 802029e:	d1f8      	bne.n	8020292 <memchr+0x62>
 80202a0:	2000      	movs	r0, #0
 80202a2:	4770      	bx	lr
 80202a4:	3801      	subs	r0, #1
 80202a6:	4770      	bx	lr
 80202a8:	2d00      	cmp	r5, #0
 80202aa:	bf06      	itte	eq
 80202ac:	4635      	moveq	r5, r6
 80202ae:	3803      	subeq	r0, #3
 80202b0:	3807      	subne	r0, #7
 80202b2:	f015 0f01 	tst.w	r5, #1
 80202b6:	d107      	bne.n	80202c8 <memchr+0x98>
 80202b8:	3001      	adds	r0, #1
 80202ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80202be:	bf02      	ittt	eq
 80202c0:	3001      	addeq	r0, #1
 80202c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80202c6:	3001      	addeq	r0, #1
 80202c8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ca:	3801      	subs	r0, #1
 80202cc:	4770      	bx	lr
 80202ce:	bf00      	nop

080202d0 <strlen>:
 80202d0:	4603      	mov	r3, r0
 80202d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80202d6:	2a00      	cmp	r2, #0
 80202d8:	d1fb      	bne.n	80202d2 <strlen+0x2>
 80202da:	1a18      	subs	r0, r3, r0
 80202dc:	3801      	subs	r0, #1
 80202de:	4770      	bx	lr

080202e0 <__aeabi_drsub>:
 80202e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80202e4:	e002      	b.n	80202ec <__adddf3>
 80202e6:	bf00      	nop

080202e8 <__aeabi_dsub>:
 80202e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080202ec <__adddf3>:
 80202ec:	b530      	push	{r4, r5, lr}
 80202ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202f6:	ea94 0f05 	teq	r4, r5
 80202fa:	bf08      	it	eq
 80202fc:	ea90 0f02 	teqeq	r0, r2
 8020300:	bf1f      	itttt	ne
 8020302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020306:	ea55 0c02 	orrsne.w	ip, r5, r2
 802030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020312:	f000 80e2 	beq.w	80204da <__adddf3+0x1ee>
 8020316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802031e:	bfb8      	it	lt
 8020320:	426d      	neglt	r5, r5
 8020322:	dd0c      	ble.n	802033e <__adddf3+0x52>
 8020324:	442c      	add	r4, r5
 8020326:	ea80 0202 	eor.w	r2, r0, r2
 802032a:	ea81 0303 	eor.w	r3, r1, r3
 802032e:	ea82 0000 	eor.w	r0, r2, r0
 8020332:	ea83 0101 	eor.w	r1, r3, r1
 8020336:	ea80 0202 	eor.w	r2, r0, r2
 802033a:	ea81 0303 	eor.w	r3, r1, r3
 802033e:	2d36      	cmp	r5, #54	@ 0x36
 8020340:	bf88      	it	hi
 8020342:	bd30      	pophi	{r4, r5, pc}
 8020344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8020348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8020350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020354:	d002      	beq.n	802035c <__adddf3+0x70>
 8020356:	4240      	negs	r0, r0
 8020358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8020360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020368:	d002      	beq.n	8020370 <__adddf3+0x84>
 802036a:	4252      	negs	r2, r2
 802036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020370:	ea94 0f05 	teq	r4, r5
 8020374:	f000 80a7 	beq.w	80204c6 <__adddf3+0x1da>
 8020378:	f1a4 0401 	sub.w	r4, r4, #1
 802037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020380:	db0d      	blt.n	802039e <__adddf3+0xb2>
 8020382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020386:	fa22 f205 	lsr.w	r2, r2, r5
 802038a:	1880      	adds	r0, r0, r2
 802038c:	f141 0100 	adc.w	r1, r1, #0
 8020390:	fa03 f20e 	lsl.w	r2, r3, lr
 8020394:	1880      	adds	r0, r0, r2
 8020396:	fa43 f305 	asr.w	r3, r3, r5
 802039a:	4159      	adcs	r1, r3
 802039c:	e00e      	b.n	80203bc <__adddf3+0xd0>
 802039e:	f1a5 0520 	sub.w	r5, r5, #32
 80203a2:	f10e 0e20 	add.w	lr, lr, #32
 80203a6:	2a01      	cmp	r2, #1
 80203a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80203ac:	bf28      	it	cs
 80203ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80203b2:	fa43 f305 	asr.w	r3, r3, r5
 80203b6:	18c0      	adds	r0, r0, r3
 80203b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80203bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80203c0:	d507      	bpl.n	80203d2 <__adddf3+0xe6>
 80203c2:	f04f 0e00 	mov.w	lr, #0
 80203c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80203ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80203ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80203d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80203d6:	d31b      	bcc.n	8020410 <__adddf3+0x124>
 80203d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80203dc:	d30c      	bcc.n	80203f8 <__adddf3+0x10c>
 80203de:	0849      	lsrs	r1, r1, #1
 80203e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203e8:	f104 0401 	add.w	r4, r4, #1
 80203ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80203f4:	f080 809a 	bcs.w	802052c <__adddf3+0x240>
 80203f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80203fc:	bf08      	it	eq
 80203fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020402:	f150 0000 	adcs.w	r0, r0, #0
 8020406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802040a:	ea41 0105 	orr.w	r1, r1, r5
 802040e:	bd30      	pop	{r4, r5, pc}
 8020410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020414:	4140      	adcs	r0, r0
 8020416:	eb41 0101 	adc.w	r1, r1, r1
 802041a:	3c01      	subs	r4, #1
 802041c:	bf28      	it	cs
 802041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8020422:	d2e9      	bcs.n	80203f8 <__adddf3+0x10c>
 8020424:	f091 0f00 	teq	r1, #0
 8020428:	bf04      	itt	eq
 802042a:	4601      	moveq	r1, r0
 802042c:	2000      	moveq	r0, #0
 802042e:	fab1 f381 	clz	r3, r1
 8020432:	bf08      	it	eq
 8020434:	3320      	addeq	r3, #32
 8020436:	f1a3 030b 	sub.w	r3, r3, #11
 802043a:	f1b3 0220 	subs.w	r2, r3, #32
 802043e:	da0c      	bge.n	802045a <__adddf3+0x16e>
 8020440:	320c      	adds	r2, #12
 8020442:	dd08      	ble.n	8020456 <__adddf3+0x16a>
 8020444:	f102 0c14 	add.w	ip, r2, #20
 8020448:	f1c2 020c 	rsb	r2, r2, #12
 802044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020450:	fa21 f102 	lsr.w	r1, r1, r2
 8020454:	e00c      	b.n	8020470 <__adddf3+0x184>
 8020456:	f102 0214 	add.w	r2, r2, #20
 802045a:	bfd8      	it	le
 802045c:	f1c2 0c20 	rsble	ip, r2, #32
 8020460:	fa01 f102 	lsl.w	r1, r1, r2
 8020464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020468:	bfdc      	itt	le
 802046a:	ea41 010c 	orrle.w	r1, r1, ip
 802046e:	4090      	lslle	r0, r2
 8020470:	1ae4      	subs	r4, r4, r3
 8020472:	bfa2      	ittt	ge
 8020474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020478:	4329      	orrge	r1, r5
 802047a:	bd30      	popge	{r4, r5, pc}
 802047c:	ea6f 0404 	mvn.w	r4, r4
 8020480:	3c1f      	subs	r4, #31
 8020482:	da1c      	bge.n	80204be <__adddf3+0x1d2>
 8020484:	340c      	adds	r4, #12
 8020486:	dc0e      	bgt.n	80204a6 <__adddf3+0x1ba>
 8020488:	f104 0414 	add.w	r4, r4, #20
 802048c:	f1c4 0220 	rsb	r2, r4, #32
 8020490:	fa20 f004 	lsr.w	r0, r0, r4
 8020494:	fa01 f302 	lsl.w	r3, r1, r2
 8020498:	ea40 0003 	orr.w	r0, r0, r3
 802049c:	fa21 f304 	lsr.w	r3, r1, r4
 80204a0:	ea45 0103 	orr.w	r1, r5, r3
 80204a4:	bd30      	pop	{r4, r5, pc}
 80204a6:	f1c4 040c 	rsb	r4, r4, #12
 80204aa:	f1c4 0220 	rsb	r2, r4, #32
 80204ae:	fa20 f002 	lsr.w	r0, r0, r2
 80204b2:	fa01 f304 	lsl.w	r3, r1, r4
 80204b6:	ea40 0003 	orr.w	r0, r0, r3
 80204ba:	4629      	mov	r1, r5
 80204bc:	bd30      	pop	{r4, r5, pc}
 80204be:	fa21 f004 	lsr.w	r0, r1, r4
 80204c2:	4629      	mov	r1, r5
 80204c4:	bd30      	pop	{r4, r5, pc}
 80204c6:	f094 0f00 	teq	r4, #0
 80204ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80204ce:	bf06      	itte	eq
 80204d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80204d4:	3401      	addeq	r4, #1
 80204d6:	3d01      	subne	r5, #1
 80204d8:	e74e      	b.n	8020378 <__adddf3+0x8c>
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf18      	it	ne
 80204e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204e4:	d029      	beq.n	802053a <__adddf3+0x24e>
 80204e6:	ea94 0f05 	teq	r4, r5
 80204ea:	bf08      	it	eq
 80204ec:	ea90 0f02 	teqeq	r0, r2
 80204f0:	d005      	beq.n	80204fe <__adddf3+0x212>
 80204f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204f6:	bf04      	itt	eq
 80204f8:	4619      	moveq	r1, r3
 80204fa:	4610      	moveq	r0, r2
 80204fc:	bd30      	pop	{r4, r5, pc}
 80204fe:	ea91 0f03 	teq	r1, r3
 8020502:	bf1e      	ittt	ne
 8020504:	2100      	movne	r1, #0
 8020506:	2000      	movne	r0, #0
 8020508:	bd30      	popne	{r4, r5, pc}
 802050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802050e:	d105      	bne.n	802051c <__adddf3+0x230>
 8020510:	0040      	lsls	r0, r0, #1
 8020512:	4149      	adcs	r1, r1
 8020514:	bf28      	it	cs
 8020516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 802051a:	bd30      	pop	{r4, r5, pc}
 802051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8020520:	bf3c      	itt	cc
 8020522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8020526:	bd30      	popcc	{r4, r5, pc}
 8020528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 802052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8020530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8020534:	f04f 0000 	mov.w	r0, #0
 8020538:	bd30      	pop	{r4, r5, pc}
 802053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802053e:	bf1a      	itte	ne
 8020540:	4619      	movne	r1, r3
 8020542:	4610      	movne	r0, r2
 8020544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020548:	bf1c      	itt	ne
 802054a:	460b      	movne	r3, r1
 802054c:	4602      	movne	r2, r0
 802054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020552:	bf06      	itte	eq
 8020554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020558:	ea91 0f03 	teqeq	r1, r3
 802055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8020560:	bd30      	pop	{r4, r5, pc}
 8020562:	bf00      	nop

08020564 <__aeabi_ui2d>:
 8020564:	f090 0f00 	teq	r0, #0
 8020568:	bf04      	itt	eq
 802056a:	2100      	moveq	r1, #0
 802056c:	4770      	bxeq	lr
 802056e:	b530      	push	{r4, r5, lr}
 8020570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020578:	f04f 0500 	mov.w	r5, #0
 802057c:	f04f 0100 	mov.w	r1, #0
 8020580:	e750      	b.n	8020424 <__adddf3+0x138>
 8020582:	bf00      	nop

08020584 <__aeabi_i2d>:
 8020584:	f090 0f00 	teq	r0, #0
 8020588:	bf04      	itt	eq
 802058a:	2100      	moveq	r1, #0
 802058c:	4770      	bxeq	lr
 802058e:	b530      	push	{r4, r5, lr}
 8020590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 802059c:	bf48      	it	mi
 802059e:	4240      	negmi	r0, r0
 80205a0:	f04f 0100 	mov.w	r1, #0
 80205a4:	e73e      	b.n	8020424 <__adddf3+0x138>
 80205a6:	bf00      	nop

080205a8 <__aeabi_f2d>:
 80205a8:	0042      	lsls	r2, r0, #1
 80205aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80205ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80205b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80205b6:	bf1f      	itttt	ne
 80205b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80205bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80205c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80205c4:	4770      	bxne	lr
 80205c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80205ca:	bf08      	it	eq
 80205cc:	4770      	bxeq	lr
 80205ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80205d2:	bf04      	itt	eq
 80205d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80205d8:	4770      	bxeq	lr
 80205da:	b530      	push	{r4, r5, lr}
 80205dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80205e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80205e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80205e8:	e71c      	b.n	8020424 <__adddf3+0x138>
 80205ea:	bf00      	nop

080205ec <__aeabi_ul2d>:
 80205ec:	ea50 0201 	orrs.w	r2, r0, r1
 80205f0:	bf08      	it	eq
 80205f2:	4770      	bxeq	lr
 80205f4:	b530      	push	{r4, r5, lr}
 80205f6:	f04f 0500 	mov.w	r5, #0
 80205fa:	e00a      	b.n	8020612 <__aeabi_l2d+0x16>

080205fc <__aeabi_l2d>:
 80205fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020600:	bf08      	it	eq
 8020602:	4770      	bxeq	lr
 8020604:	b530      	push	{r4, r5, lr}
 8020606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 802060a:	d502      	bpl.n	8020612 <__aeabi_l2d+0x16>
 802060c:	4240      	negs	r0, r0
 802060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 802061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802061e:	f43f aed8 	beq.w	80203d2 <__adddf3+0xe6>
 8020622:	f04f 0203 	mov.w	r2, #3
 8020626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802062a:	bf18      	it	ne
 802062c:	3203      	addne	r2, #3
 802062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020632:	bf18      	it	ne
 8020634:	3203      	addne	r2, #3
 8020636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802063a:	f1c2 0320 	rsb	r3, r2, #32
 802063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020642:	fa20 f002 	lsr.w	r0, r0, r2
 8020646:	fa01 fe03 	lsl.w	lr, r1, r3
 802064a:	ea40 000e 	orr.w	r0, r0, lr
 802064e:	fa21 f102 	lsr.w	r1, r1, r2
 8020652:	4414      	add	r4, r2
 8020654:	e6bd      	b.n	80203d2 <__adddf3+0xe6>
 8020656:	bf00      	nop

08020658 <__aeabi_dmul>:
 8020658:	b570      	push	{r4, r5, r6, lr}
 802065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 802065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020666:	bf1d      	ittte	ne
 8020668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802066c:	ea94 0f0c 	teqne	r4, ip
 8020670:	ea95 0f0c 	teqne	r5, ip
 8020674:	f000 f8de 	bleq	8020834 <__aeabi_dmul+0x1dc>
 8020678:	442c      	add	r4, r5
 802067a:	ea81 0603 	eor.w	r6, r1, r3
 802067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802068a:	bf18      	it	ne
 802068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020698:	d038      	beq.n	802070c <__aeabi_dmul+0xb4>
 802069a:	fba0 ce02 	umull	ip, lr, r0, r2
 802069e:	f04f 0500 	mov.w	r5, #0
 80206a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80206a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80206aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80206ae:	f04f 0600 	mov.w	r6, #0
 80206b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80206b6:	f09c 0f00 	teq	ip, #0
 80206ba:	bf18      	it	ne
 80206bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80206c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80206c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80206c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80206cc:	d204      	bcs.n	80206d8 <__aeabi_dmul+0x80>
 80206ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206d2:	416d      	adcs	r5, r5
 80206d4:	eb46 0606 	adc.w	r6, r6, r6
 80206d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80206f0:	bf88      	it	hi
 80206f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80206f6:	d81e      	bhi.n	8020736 <__aeabi_dmul+0xde>
 80206f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80206fc:	bf08      	it	eq
 80206fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020702:	f150 0000 	adcs.w	r0, r0, #0
 8020706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802070a:	bd70      	pop	{r4, r5, r6, pc}
 802070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8020710:	ea46 0101 	orr.w	r1, r6, r1
 8020714:	ea40 0002 	orr.w	r0, r0, r2
 8020718:	ea81 0103 	eor.w	r1, r1, r3
 802071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020720:	bfc2      	ittt	gt
 8020722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802072a:	bd70      	popgt	{r4, r5, r6, pc}
 802072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020730:	f04f 0e00 	mov.w	lr, #0
 8020734:	3c01      	subs	r4, #1
 8020736:	f300 80ab 	bgt.w	8020890 <__aeabi_dmul+0x238>
 802073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 802073e:	bfde      	ittt	le
 8020740:	2000      	movle	r0, #0
 8020742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8020746:	bd70      	pople	{r4, r5, r6, pc}
 8020748:	f1c4 0400 	rsb	r4, r4, #0
 802074c:	3c20      	subs	r4, #32
 802074e:	da35      	bge.n	80207bc <__aeabi_dmul+0x164>
 8020750:	340c      	adds	r4, #12
 8020752:	dc1b      	bgt.n	802078c <__aeabi_dmul+0x134>
 8020754:	f104 0414 	add.w	r4, r4, #20
 8020758:	f1c4 0520 	rsb	r5, r4, #32
 802075c:	fa00 f305 	lsl.w	r3, r0, r5
 8020760:	fa20 f004 	lsr.w	r0, r0, r4
 8020764:	fa01 f205 	lsl.w	r2, r1, r5
 8020768:	ea40 0002 	orr.w	r0, r0, r2
 802076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8020770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020778:	fa21 f604 	lsr.w	r6, r1, r4
 802077c:	eb42 0106 	adc.w	r1, r2, r6
 8020780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020784:	bf08      	it	eq
 8020786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802078a:	bd70      	pop	{r4, r5, r6, pc}
 802078c:	f1c4 040c 	rsb	r4, r4, #12
 8020790:	f1c4 0520 	rsb	r5, r4, #32
 8020794:	fa00 f304 	lsl.w	r3, r0, r4
 8020798:	fa20 f005 	lsr.w	r0, r0, r5
 802079c:	fa01 f204 	lsl.w	r2, r1, r4
 80207a0:	ea40 0002 	orr.w	r0, r0, r2
 80207a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80207a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80207ac:	f141 0100 	adc.w	r1, r1, #0
 80207b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207b4:	bf08      	it	eq
 80207b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207ba:	bd70      	pop	{r4, r5, r6, pc}
 80207bc:	f1c4 0520 	rsb	r5, r4, #32
 80207c0:	fa00 f205 	lsl.w	r2, r0, r5
 80207c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80207c8:	fa20 f304 	lsr.w	r3, r0, r4
 80207cc:	fa01 f205 	lsl.w	r2, r1, r5
 80207d0:	ea43 0302 	orr.w	r3, r3, r2
 80207d4:	fa21 f004 	lsr.w	r0, r1, r4
 80207d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80207dc:	fa21 f204 	lsr.w	r2, r1, r4
 80207e0:	ea20 0002 	bic.w	r0, r0, r2
 80207e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207ec:	bf08      	it	eq
 80207ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207f2:	bd70      	pop	{r4, r5, r6, pc}
 80207f4:	f094 0f00 	teq	r4, #0
 80207f8:	d10f      	bne.n	802081a <__aeabi_dmul+0x1c2>
 80207fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80207fe:	0040      	lsls	r0, r0, #1
 8020800:	eb41 0101 	adc.w	r1, r1, r1
 8020804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020808:	bf08      	it	eq
 802080a:	3c01      	subeq	r4, #1
 802080c:	d0f7      	beq.n	80207fe <__aeabi_dmul+0x1a6>
 802080e:	ea41 0106 	orr.w	r1, r1, r6
 8020812:	f095 0f00 	teq	r5, #0
 8020816:	bf18      	it	ne
 8020818:	4770      	bxne	lr
 802081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 802081e:	0052      	lsls	r2, r2, #1
 8020820:	eb43 0303 	adc.w	r3, r3, r3
 8020824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8020828:	bf08      	it	eq
 802082a:	3d01      	subeq	r5, #1
 802082c:	d0f7      	beq.n	802081e <__aeabi_dmul+0x1c6>
 802082e:	ea43 0306 	orr.w	r3, r3, r6
 8020832:	4770      	bx	lr
 8020834:	ea94 0f0c 	teq	r4, ip
 8020838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802083c:	bf18      	it	ne
 802083e:	ea95 0f0c 	teqne	r5, ip
 8020842:	d00c      	beq.n	802085e <__aeabi_dmul+0x206>
 8020844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020848:	bf18      	it	ne
 802084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802084e:	d1d1      	bne.n	80207f4 <__aeabi_dmul+0x19c>
 8020850:	ea81 0103 	eor.w	r1, r1, r3
 8020854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020858:	f04f 0000 	mov.w	r0, #0
 802085c:	bd70      	pop	{r4, r5, r6, pc}
 802085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020862:	bf06      	itte	eq
 8020864:	4610      	moveq	r0, r2
 8020866:	4619      	moveq	r1, r3
 8020868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802086c:	d019      	beq.n	80208a2 <__aeabi_dmul+0x24a>
 802086e:	ea94 0f0c 	teq	r4, ip
 8020872:	d102      	bne.n	802087a <__aeabi_dmul+0x222>
 8020874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020878:	d113      	bne.n	80208a2 <__aeabi_dmul+0x24a>
 802087a:	ea95 0f0c 	teq	r5, ip
 802087e:	d105      	bne.n	802088c <__aeabi_dmul+0x234>
 8020880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020884:	bf1c      	itt	ne
 8020886:	4610      	movne	r0, r2
 8020888:	4619      	movne	r1, r3
 802088a:	d10a      	bne.n	80208a2 <__aeabi_dmul+0x24a>
 802088c:	ea81 0103 	eor.w	r1, r1, r3
 8020890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802089c:	f04f 0000 	mov.w	r0, #0
 80208a0:	bd70      	pop	{r4, r5, r6, pc}
 80208a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80208a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80208aa:	bd70      	pop	{r4, r5, r6, pc}

080208ac <__aeabi_ddiv>:
 80208ac:	b570      	push	{r4, r5, r6, lr}
 80208ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80208b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80208b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80208ba:	bf1d      	ittte	ne
 80208bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80208c0:	ea94 0f0c 	teqne	r4, ip
 80208c4:	ea95 0f0c 	teqne	r5, ip
 80208c8:	f000 f8a7 	bleq	8020a1a <__aeabi_ddiv+0x16e>
 80208cc:	eba4 0405 	sub.w	r4, r4, r5
 80208d0:	ea81 0e03 	eor.w	lr, r1, r3
 80208d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208dc:	f000 8088 	beq.w	80209f0 <__aeabi_ddiv+0x144>
 80208e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80208e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8020904:	429d      	cmp	r5, r3
 8020906:	bf08      	it	eq
 8020908:	4296      	cmpeq	r6, r2
 802090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 802090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8020912:	d202      	bcs.n	802091a <__aeabi_ddiv+0x6e>
 8020914:	085b      	lsrs	r3, r3, #1
 8020916:	ea4f 0232 	mov.w	r2, r2, rrx
 802091a:	1ab6      	subs	r6, r6, r2
 802091c:	eb65 0503 	sbc.w	r5, r5, r3
 8020920:	085b      	lsrs	r3, r3, #1
 8020922:	ea4f 0232 	mov.w	r2, r2, rrx
 8020926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 802092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 802092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020936:	bf22      	ittt	cs
 8020938:	1ab6      	subcs	r6, r6, r2
 802093a:	4675      	movcs	r5, lr
 802093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020940:	085b      	lsrs	r3, r3, #1
 8020942:	ea4f 0232 	mov.w	r2, r2, rrx
 8020946:	ebb6 0e02 	subs.w	lr, r6, r2
 802094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802094e:	bf22      	ittt	cs
 8020950:	1ab6      	subcs	r6, r6, r2
 8020952:	4675      	movcs	r5, lr
 8020954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020958:	085b      	lsrs	r3, r3, #1
 802095a:	ea4f 0232 	mov.w	r2, r2, rrx
 802095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020966:	bf22      	ittt	cs
 8020968:	1ab6      	subcs	r6, r6, r2
 802096a:	4675      	movcs	r5, lr
 802096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020970:	085b      	lsrs	r3, r3, #1
 8020972:	ea4f 0232 	mov.w	r2, r2, rrx
 8020976:	ebb6 0e02 	subs.w	lr, r6, r2
 802097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802097e:	bf22      	ittt	cs
 8020980:	1ab6      	subcs	r6, r6, r2
 8020982:	4675      	movcs	r5, lr
 8020984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020988:	ea55 0e06 	orrs.w	lr, r5, r6
 802098c:	d018      	beq.n	80209c0 <__aeabi_ddiv+0x114>
 802098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80209a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80209a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80209aa:	d1c0      	bne.n	802092e <__aeabi_ddiv+0x82>
 80209ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80209b0:	d10b      	bne.n	80209ca <__aeabi_ddiv+0x11e>
 80209b2:	ea41 0100 	orr.w	r1, r1, r0
 80209b6:	f04f 0000 	mov.w	r0, #0
 80209ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80209be:	e7b6      	b.n	802092e <__aeabi_ddiv+0x82>
 80209c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80209c4:	bf04      	itt	eq
 80209c6:	4301      	orreq	r1, r0
 80209c8:	2000      	moveq	r0, #0
 80209ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80209ce:	bf88      	it	hi
 80209d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80209d4:	f63f aeaf 	bhi.w	8020736 <__aeabi_dmul+0xde>
 80209d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209dc:	bf04      	itt	eq
 80209de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209e6:	f150 0000 	adcs.w	r0, r0, #0
 80209ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209ee:	bd70      	pop	{r4, r5, r6, pc}
 80209f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80209f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209fc:	bfc2      	ittt	gt
 80209fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020a06:	bd70      	popgt	{r4, r5, r6, pc}
 8020a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020a0c:	f04f 0e00 	mov.w	lr, #0
 8020a10:	3c01      	subs	r4, #1
 8020a12:	e690      	b.n	8020736 <__aeabi_dmul+0xde>
 8020a14:	ea45 0e06 	orr.w	lr, r5, r6
 8020a18:	e68d      	b.n	8020736 <__aeabi_dmul+0xde>
 8020a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020a1e:	ea94 0f0c 	teq	r4, ip
 8020a22:	bf08      	it	eq
 8020a24:	ea95 0f0c 	teqeq	r5, ip
 8020a28:	f43f af3b 	beq.w	80208a2 <__aeabi_dmul+0x24a>
 8020a2c:	ea94 0f0c 	teq	r4, ip
 8020a30:	d10a      	bne.n	8020a48 <__aeabi_ddiv+0x19c>
 8020a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a36:	f47f af34 	bne.w	80208a2 <__aeabi_dmul+0x24a>
 8020a3a:	ea95 0f0c 	teq	r5, ip
 8020a3e:	f47f af25 	bne.w	802088c <__aeabi_dmul+0x234>
 8020a42:	4610      	mov	r0, r2
 8020a44:	4619      	mov	r1, r3
 8020a46:	e72c      	b.n	80208a2 <__aeabi_dmul+0x24a>
 8020a48:	ea95 0f0c 	teq	r5, ip
 8020a4c:	d106      	bne.n	8020a5c <__aeabi_ddiv+0x1b0>
 8020a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a52:	f43f aefd 	beq.w	8020850 <__aeabi_dmul+0x1f8>
 8020a56:	4610      	mov	r0, r2
 8020a58:	4619      	mov	r1, r3
 8020a5a:	e722      	b.n	80208a2 <__aeabi_dmul+0x24a>
 8020a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a60:	bf18      	it	ne
 8020a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a66:	f47f aec5 	bne.w	80207f4 <__aeabi_dmul+0x19c>
 8020a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a6e:	f47f af0d 	bne.w	802088c <__aeabi_dmul+0x234>
 8020a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a76:	f47f aeeb 	bne.w	8020850 <__aeabi_dmul+0x1f8>
 8020a7a:	e712      	b.n	80208a2 <__aeabi_dmul+0x24a>

08020a7c <__gedf2>:
 8020a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a80:	e006      	b.n	8020a90 <__cmpdf2+0x4>
 8020a82:	bf00      	nop

08020a84 <__ledf2>:
 8020a84:	f04f 0c01 	mov.w	ip, #1
 8020a88:	e002      	b.n	8020a90 <__cmpdf2+0x4>
 8020a8a:	bf00      	nop

08020a8c <__cmpdf2>:
 8020a8c:	f04f 0c01 	mov.w	ip, #1
 8020a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020aa0:	bf18      	it	ne
 8020aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020aa6:	d01b      	beq.n	8020ae0 <__cmpdf2+0x54>
 8020aa8:	b001      	add	sp, #4
 8020aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020aae:	bf0c      	ite	eq
 8020ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020ab4:	ea91 0f03 	teqne	r1, r3
 8020ab8:	bf02      	ittt	eq
 8020aba:	ea90 0f02 	teqeq	r0, r2
 8020abe:	2000      	moveq	r0, #0
 8020ac0:	4770      	bxeq	lr
 8020ac2:	f110 0f00 	cmn.w	r0, #0
 8020ac6:	ea91 0f03 	teq	r1, r3
 8020aca:	bf58      	it	pl
 8020acc:	4299      	cmppl	r1, r3
 8020ace:	bf08      	it	eq
 8020ad0:	4290      	cmpeq	r0, r2
 8020ad2:	bf2c      	ite	cs
 8020ad4:	17d8      	asrcs	r0, r3, #31
 8020ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020ada:	f040 0001 	orr.w	r0, r0, #1
 8020ade:	4770      	bx	lr
 8020ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ae8:	d102      	bne.n	8020af0 <__cmpdf2+0x64>
 8020aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020aee:	d107      	bne.n	8020b00 <__cmpdf2+0x74>
 8020af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020af8:	d1d6      	bne.n	8020aa8 <__cmpdf2+0x1c>
 8020afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020afe:	d0d3      	beq.n	8020aa8 <__cmpdf2+0x1c>
 8020b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020b04:	4770      	bx	lr
 8020b06:	bf00      	nop

08020b08 <__aeabi_cdrcmple>:
 8020b08:	4684      	mov	ip, r0
 8020b0a:	4610      	mov	r0, r2
 8020b0c:	4662      	mov	r2, ip
 8020b0e:	468c      	mov	ip, r1
 8020b10:	4619      	mov	r1, r3
 8020b12:	4663      	mov	r3, ip
 8020b14:	e000      	b.n	8020b18 <__aeabi_cdcmpeq>
 8020b16:	bf00      	nop

08020b18 <__aeabi_cdcmpeq>:
 8020b18:	b501      	push	{r0, lr}
 8020b1a:	f7ff ffb7 	bl	8020a8c <__cmpdf2>
 8020b1e:	2800      	cmp	r0, #0
 8020b20:	bf48      	it	mi
 8020b22:	f110 0f00 	cmnmi.w	r0, #0
 8020b26:	bd01      	pop	{r0, pc}

08020b28 <__aeabi_dcmpeq>:
 8020b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b2c:	f7ff fff4 	bl	8020b18 <__aeabi_cdcmpeq>
 8020b30:	bf0c      	ite	eq
 8020b32:	2001      	moveq	r0, #1
 8020b34:	2000      	movne	r0, #0
 8020b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b3a:	bf00      	nop

08020b3c <__aeabi_dcmplt>:
 8020b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b40:	f7ff ffea 	bl	8020b18 <__aeabi_cdcmpeq>
 8020b44:	bf34      	ite	cc
 8020b46:	2001      	movcc	r0, #1
 8020b48:	2000      	movcs	r0, #0
 8020b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b4e:	bf00      	nop

08020b50 <__aeabi_dcmple>:
 8020b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b54:	f7ff ffe0 	bl	8020b18 <__aeabi_cdcmpeq>
 8020b58:	bf94      	ite	ls
 8020b5a:	2001      	movls	r0, #1
 8020b5c:	2000      	movhi	r0, #0
 8020b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b62:	bf00      	nop

08020b64 <__aeabi_dcmpge>:
 8020b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b68:	f7ff ffce 	bl	8020b08 <__aeabi_cdrcmple>
 8020b6c:	bf94      	ite	ls
 8020b6e:	2001      	movls	r0, #1
 8020b70:	2000      	movhi	r0, #0
 8020b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b76:	bf00      	nop

08020b78 <__aeabi_dcmpgt>:
 8020b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b7c:	f7ff ffc4 	bl	8020b08 <__aeabi_cdrcmple>
 8020b80:	bf34      	ite	cc
 8020b82:	2001      	movcc	r0, #1
 8020b84:	2000      	movcs	r0, #0
 8020b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b8a:	bf00      	nop

08020b8c <__aeabi_dcmpun>:
 8020b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b94:	d102      	bne.n	8020b9c <__aeabi_dcmpun+0x10>
 8020b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b9a:	d10a      	bne.n	8020bb2 <__aeabi_dcmpun+0x26>
 8020b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ba4:	d102      	bne.n	8020bac <__aeabi_dcmpun+0x20>
 8020ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020baa:	d102      	bne.n	8020bb2 <__aeabi_dcmpun+0x26>
 8020bac:	f04f 0000 	mov.w	r0, #0
 8020bb0:	4770      	bx	lr
 8020bb2:	f04f 0001 	mov.w	r0, #1
 8020bb6:	4770      	bx	lr

08020bb8 <__aeabi_d2iz>:
 8020bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8020bc0:	d215      	bcs.n	8020bee <__aeabi_d2iz+0x36>
 8020bc2:	d511      	bpl.n	8020be8 <__aeabi_d2iz+0x30>
 8020bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8020bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bcc:	d912      	bls.n	8020bf4 <__aeabi_d2iz+0x3c>
 8020bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8020bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8020bde:	fa23 f002 	lsr.w	r0, r3, r2
 8020be2:	bf18      	it	ne
 8020be4:	4240      	negne	r0, r0
 8020be6:	4770      	bx	lr
 8020be8:	f04f 0000 	mov.w	r0, #0
 8020bec:	4770      	bx	lr
 8020bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bf2:	d105      	bne.n	8020c00 <__aeabi_d2iz+0x48>
 8020bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8020bf8:	bf08      	it	eq
 8020bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8020bfe:	4770      	bx	lr
 8020c00:	f04f 0000 	mov.w	r0, #0
 8020c04:	4770      	bx	lr
 8020c06:	bf00      	nop

08020c08 <__aeabi_uldivmod>:
 8020c08:	b953      	cbnz	r3, 8020c20 <__aeabi_uldivmod+0x18>
 8020c0a:	b94a      	cbnz	r2, 8020c20 <__aeabi_uldivmod+0x18>
 8020c0c:	2900      	cmp	r1, #0
 8020c0e:	bf08      	it	eq
 8020c10:	2800      	cmpeq	r0, #0
 8020c12:	bf1c      	itt	ne
 8020c14:	f04f 31ff 	movne.w	r1, #4294967295
 8020c18:	f04f 30ff 	movne.w	r0, #4294967295
 8020c1c:	f000 b96a 	b.w	8020ef4 <__aeabi_idiv0>
 8020c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8020c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020c28:	f000 f806 	bl	8020c38 <__udivmoddi4>
 8020c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020c34:	b004      	add	sp, #16
 8020c36:	4770      	bx	lr

08020c38 <__udivmoddi4>:
 8020c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c3c:	9d08      	ldr	r5, [sp, #32]
 8020c3e:	460c      	mov	r4, r1
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d14e      	bne.n	8020ce2 <__udivmoddi4+0xaa>
 8020c44:	4694      	mov	ip, r2
 8020c46:	458c      	cmp	ip, r1
 8020c48:	4686      	mov	lr, r0
 8020c4a:	fab2 f282 	clz	r2, r2
 8020c4e:	d962      	bls.n	8020d16 <__udivmoddi4+0xde>
 8020c50:	b14a      	cbz	r2, 8020c66 <__udivmoddi4+0x2e>
 8020c52:	f1c2 0320 	rsb	r3, r2, #32
 8020c56:	4091      	lsls	r1, r2
 8020c58:	fa20 f303 	lsr.w	r3, r0, r3
 8020c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8020c60:	4319      	orrs	r1, r3
 8020c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8020c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020c6a:	fa1f f68c 	uxth.w	r6, ip
 8020c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8020c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8020c76:	fb07 1114 	mls	r1, r7, r4, r1
 8020c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020c7e:	fb04 f106 	mul.w	r1, r4, r6
 8020c82:	4299      	cmp	r1, r3
 8020c84:	d90a      	bls.n	8020c9c <__udivmoddi4+0x64>
 8020c86:	eb1c 0303 	adds.w	r3, ip, r3
 8020c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8020c8e:	f080 8112 	bcs.w	8020eb6 <__udivmoddi4+0x27e>
 8020c92:	4299      	cmp	r1, r3
 8020c94:	f240 810f 	bls.w	8020eb6 <__udivmoddi4+0x27e>
 8020c98:	3c02      	subs	r4, #2
 8020c9a:	4463      	add	r3, ip
 8020c9c:	1a59      	subs	r1, r3, r1
 8020c9e:	fa1f f38e 	uxth.w	r3, lr
 8020ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8020ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8020caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020cae:	fb00 f606 	mul.w	r6, r0, r6
 8020cb2:	429e      	cmp	r6, r3
 8020cb4:	d90a      	bls.n	8020ccc <__udivmoddi4+0x94>
 8020cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8020cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8020cbe:	f080 80fc 	bcs.w	8020eba <__udivmoddi4+0x282>
 8020cc2:	429e      	cmp	r6, r3
 8020cc4:	f240 80f9 	bls.w	8020eba <__udivmoddi4+0x282>
 8020cc8:	4463      	add	r3, ip
 8020cca:	3802      	subs	r0, #2
 8020ccc:	1b9b      	subs	r3, r3, r6
 8020cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8020cd2:	2100      	movs	r1, #0
 8020cd4:	b11d      	cbz	r5, 8020cde <__udivmoddi4+0xa6>
 8020cd6:	40d3      	lsrs	r3, r2
 8020cd8:	2200      	movs	r2, #0
 8020cda:	e9c5 3200 	strd	r3, r2, [r5]
 8020cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ce2:	428b      	cmp	r3, r1
 8020ce4:	d905      	bls.n	8020cf2 <__udivmoddi4+0xba>
 8020ce6:	b10d      	cbz	r5, 8020cec <__udivmoddi4+0xb4>
 8020ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8020cec:	2100      	movs	r1, #0
 8020cee:	4608      	mov	r0, r1
 8020cf0:	e7f5      	b.n	8020cde <__udivmoddi4+0xa6>
 8020cf2:	fab3 f183 	clz	r1, r3
 8020cf6:	2900      	cmp	r1, #0
 8020cf8:	d146      	bne.n	8020d88 <__udivmoddi4+0x150>
 8020cfa:	42a3      	cmp	r3, r4
 8020cfc:	d302      	bcc.n	8020d04 <__udivmoddi4+0xcc>
 8020cfe:	4290      	cmp	r0, r2
 8020d00:	f0c0 80f0 	bcc.w	8020ee4 <__udivmoddi4+0x2ac>
 8020d04:	1a86      	subs	r6, r0, r2
 8020d06:	eb64 0303 	sbc.w	r3, r4, r3
 8020d0a:	2001      	movs	r0, #1
 8020d0c:	2d00      	cmp	r5, #0
 8020d0e:	d0e6      	beq.n	8020cde <__udivmoddi4+0xa6>
 8020d10:	e9c5 6300 	strd	r6, r3, [r5]
 8020d14:	e7e3      	b.n	8020cde <__udivmoddi4+0xa6>
 8020d16:	2a00      	cmp	r2, #0
 8020d18:	f040 8090 	bne.w	8020e3c <__udivmoddi4+0x204>
 8020d1c:	eba1 040c 	sub.w	r4, r1, ip
 8020d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020d24:	fa1f f78c 	uxth.w	r7, ip
 8020d28:	2101      	movs	r1, #1
 8020d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8020d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8020d32:	fb08 4416 	mls	r4, r8, r6, r4
 8020d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020d3a:	fb07 f006 	mul.w	r0, r7, r6
 8020d3e:	4298      	cmp	r0, r3
 8020d40:	d908      	bls.n	8020d54 <__udivmoddi4+0x11c>
 8020d42:	eb1c 0303 	adds.w	r3, ip, r3
 8020d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8020d4a:	d202      	bcs.n	8020d52 <__udivmoddi4+0x11a>
 8020d4c:	4298      	cmp	r0, r3
 8020d4e:	f200 80cd 	bhi.w	8020eec <__udivmoddi4+0x2b4>
 8020d52:	4626      	mov	r6, r4
 8020d54:	1a1c      	subs	r4, r3, r0
 8020d56:	fa1f f38e 	uxth.w	r3, lr
 8020d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8020d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8020d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020d66:	fb00 f707 	mul.w	r7, r0, r7
 8020d6a:	429f      	cmp	r7, r3
 8020d6c:	d908      	bls.n	8020d80 <__udivmoddi4+0x148>
 8020d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8020d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8020d76:	d202      	bcs.n	8020d7e <__udivmoddi4+0x146>
 8020d78:	429f      	cmp	r7, r3
 8020d7a:	f200 80b0 	bhi.w	8020ede <__udivmoddi4+0x2a6>
 8020d7e:	4620      	mov	r0, r4
 8020d80:	1bdb      	subs	r3, r3, r7
 8020d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020d86:	e7a5      	b.n	8020cd4 <__udivmoddi4+0x9c>
 8020d88:	f1c1 0620 	rsb	r6, r1, #32
 8020d8c:	408b      	lsls	r3, r1
 8020d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8020d92:	431f      	orrs	r7, r3
 8020d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8020d98:	fa04 f301 	lsl.w	r3, r4, r1
 8020d9c:	ea43 030c 	orr.w	r3, r3, ip
 8020da0:	40f4      	lsrs	r4, r6
 8020da2:	fa00 f801 	lsl.w	r8, r0, r1
 8020da6:	0c38      	lsrs	r0, r7, #16
 8020da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8020dac:	fbb4 fef0 	udiv	lr, r4, r0
 8020db0:	fa1f fc87 	uxth.w	ip, r7
 8020db4:	fb00 441e 	mls	r4, r0, lr, r4
 8020db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8020dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8020dc0:	45a1      	cmp	r9, r4
 8020dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8020dc6:	d90a      	bls.n	8020dde <__udivmoddi4+0x1a6>
 8020dc8:	193c      	adds	r4, r7, r4
 8020dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020dce:	f080 8084 	bcs.w	8020eda <__udivmoddi4+0x2a2>
 8020dd2:	45a1      	cmp	r9, r4
 8020dd4:	f240 8081 	bls.w	8020eda <__udivmoddi4+0x2a2>
 8020dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8020ddc:	443c      	add	r4, r7
 8020dde:	eba4 0409 	sub.w	r4, r4, r9
 8020de2:	fa1f f983 	uxth.w	r9, r3
 8020de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8020dea:	fb00 4413 	mls	r4, r0, r3, r4
 8020dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8020df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8020df6:	45a4      	cmp	ip, r4
 8020df8:	d907      	bls.n	8020e0a <__udivmoddi4+0x1d2>
 8020dfa:	193c      	adds	r4, r7, r4
 8020dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8020e00:	d267      	bcs.n	8020ed2 <__udivmoddi4+0x29a>
 8020e02:	45a4      	cmp	ip, r4
 8020e04:	d965      	bls.n	8020ed2 <__udivmoddi4+0x29a>
 8020e06:	3b02      	subs	r3, #2
 8020e08:	443c      	add	r4, r7
 8020e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8020e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8020e12:	eba4 040c 	sub.w	r4, r4, ip
 8020e16:	429c      	cmp	r4, r3
 8020e18:	46ce      	mov	lr, r9
 8020e1a:	469c      	mov	ip, r3
 8020e1c:	d351      	bcc.n	8020ec2 <__udivmoddi4+0x28a>
 8020e1e:	d04e      	beq.n	8020ebe <__udivmoddi4+0x286>
 8020e20:	b155      	cbz	r5, 8020e38 <__udivmoddi4+0x200>
 8020e22:	ebb8 030e 	subs.w	r3, r8, lr
 8020e26:	eb64 040c 	sbc.w	r4, r4, ip
 8020e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8020e2e:	40cb      	lsrs	r3, r1
 8020e30:	431e      	orrs	r6, r3
 8020e32:	40cc      	lsrs	r4, r1
 8020e34:	e9c5 6400 	strd	r6, r4, [r5]
 8020e38:	2100      	movs	r1, #0
 8020e3a:	e750      	b.n	8020cde <__udivmoddi4+0xa6>
 8020e3c:	f1c2 0320 	rsb	r3, r2, #32
 8020e40:	fa20 f103 	lsr.w	r1, r0, r3
 8020e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8020e48:	fa24 f303 	lsr.w	r3, r4, r3
 8020e4c:	4094      	lsls	r4, r2
 8020e4e:	430c      	orrs	r4, r1
 8020e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8020e58:	fa1f f78c 	uxth.w	r7, ip
 8020e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020e60:	fb08 3110 	mls	r1, r8, r0, r3
 8020e64:	0c23      	lsrs	r3, r4, #16
 8020e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020e6a:	fb00 f107 	mul.w	r1, r0, r7
 8020e6e:	4299      	cmp	r1, r3
 8020e70:	d908      	bls.n	8020e84 <__udivmoddi4+0x24c>
 8020e72:	eb1c 0303 	adds.w	r3, ip, r3
 8020e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8020e7a:	d22c      	bcs.n	8020ed6 <__udivmoddi4+0x29e>
 8020e7c:	4299      	cmp	r1, r3
 8020e7e:	d92a      	bls.n	8020ed6 <__udivmoddi4+0x29e>
 8020e80:	3802      	subs	r0, #2
 8020e82:	4463      	add	r3, ip
 8020e84:	1a5b      	subs	r3, r3, r1
 8020e86:	b2a4      	uxth	r4, r4
 8020e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8020e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8020e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020e94:	fb01 f307 	mul.w	r3, r1, r7
 8020e98:	42a3      	cmp	r3, r4
 8020e9a:	d908      	bls.n	8020eae <__udivmoddi4+0x276>
 8020e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8020ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8020ea4:	d213      	bcs.n	8020ece <__udivmoddi4+0x296>
 8020ea6:	42a3      	cmp	r3, r4
 8020ea8:	d911      	bls.n	8020ece <__udivmoddi4+0x296>
 8020eaa:	3902      	subs	r1, #2
 8020eac:	4464      	add	r4, ip
 8020eae:	1ae4      	subs	r4, r4, r3
 8020eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020eb4:	e739      	b.n	8020d2a <__udivmoddi4+0xf2>
 8020eb6:	4604      	mov	r4, r0
 8020eb8:	e6f0      	b.n	8020c9c <__udivmoddi4+0x64>
 8020eba:	4608      	mov	r0, r1
 8020ebc:	e706      	b.n	8020ccc <__udivmoddi4+0x94>
 8020ebe:	45c8      	cmp	r8, r9
 8020ec0:	d2ae      	bcs.n	8020e20 <__udivmoddi4+0x1e8>
 8020ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8020ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8020eca:	3801      	subs	r0, #1
 8020ecc:	e7a8      	b.n	8020e20 <__udivmoddi4+0x1e8>
 8020ece:	4631      	mov	r1, r6
 8020ed0:	e7ed      	b.n	8020eae <__udivmoddi4+0x276>
 8020ed2:	4603      	mov	r3, r0
 8020ed4:	e799      	b.n	8020e0a <__udivmoddi4+0x1d2>
 8020ed6:	4630      	mov	r0, r6
 8020ed8:	e7d4      	b.n	8020e84 <__udivmoddi4+0x24c>
 8020eda:	46d6      	mov	lr, sl
 8020edc:	e77f      	b.n	8020dde <__udivmoddi4+0x1a6>
 8020ede:	4463      	add	r3, ip
 8020ee0:	3802      	subs	r0, #2
 8020ee2:	e74d      	b.n	8020d80 <__udivmoddi4+0x148>
 8020ee4:	4606      	mov	r6, r0
 8020ee6:	4623      	mov	r3, r4
 8020ee8:	4608      	mov	r0, r1
 8020eea:	e70f      	b.n	8020d0c <__udivmoddi4+0xd4>
 8020eec:	3e02      	subs	r6, #2
 8020eee:	4463      	add	r3, ip
 8020ef0:	e730      	b.n	8020d54 <__udivmoddi4+0x11c>
 8020ef2:	bf00      	nop

08020ef4 <__aeabi_idiv0>:
 8020ef4:	4770      	bx	lr
 8020ef6:	bf00      	nop

08020ef8 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8020ef8:	b580      	push	{r7, lr}
 8020efa:	b082      	sub	sp, #8
 8020efc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8020efe:	2355      	movs	r3, #85	@ 0x55
 8020f00:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Driver init.
	if (HAL_Init() != HAL_OK)
 8020f02:	f004 f9b5 	bl	8025270 <HAL_Init>
 8020f06:	4603      	mov	r3, r0
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d001      	beq.n	8020f10 <gos_platformDriverInit+0x18>
	{
		platformDriverInitResult = GOS_ERROR;
 8020f0c:	23ae      	movs	r3, #174	@ 0xae
 8020f0e:	71fb      	strb	r3, [r7, #7]
	}

	platformDriverInitResult = driver_init();
 8020f10:	f002 f8d8 	bl	80230c4 <driver_init>
 8020f14:	4603      	mov	r3, r0
 8020f16:	71fb      	strb	r3, [r7, #7]

	// Register kernel drivers.
	platformDriverInitResult &= gos_driverInit(&driverFunctions);
 8020f18:	480c      	ldr	r0, [pc, #48]	@ (8020f4c <gos_platformDriverInit+0x54>)
 8020f1a:	f013 fbe1 	bl	80346e0 <gos_driverInit>
 8020f1e:	4603      	mov	r3, r0
 8020f20:	461a      	mov	r2, r3
 8020f22:	79fb      	ldrb	r3, [r7, #7]
 8020f24:	4013      	ands	r3, r2
 8020f26:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8020f28:	79fb      	ldrb	r3, [r7, #7]
 8020f2a:	2b55      	cmp	r3, #85	@ 0x55
 8020f2c:	d001      	beq.n	8020f32 <gos_platformDriverInit+0x3a>
	{
    	platformDriverInitResult = GOS_ERROR;
 8020f2e:	23ae      	movs	r3, #174	@ 0xae
 8020f30:	71fb      	strb	r3, [r7, #7]
	}

    SysTick->VAL = 0;
 8020f32:	4b07      	ldr	r3, [pc, #28]	@ (8020f50 <gos_platformDriverInit+0x58>)
 8020f34:	2200      	movs	r2, #0
 8020f36:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8020f38:	4b05      	ldr	r3, [pc, #20]	@ (8020f50 <gos_platformDriverInit+0x58>)
 8020f3a:	2207      	movs	r2, #7
 8020f3c:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8020f3e:	b662      	cpsie	i
}
 8020f40:	bf00      	nop

    __enable_irq();

	return platformDriverInitResult;
 8020f42:	79fb      	ldrb	r3, [r7, #7]
}
 8020f44:	4618      	mov	r0, r3
 8020f46:	3708      	adds	r7, #8
 8020f48:	46bd      	mov	sp, r7
 8020f4a:	bd80      	pop	{r7, pc}
 8020f4c:	20000000 	.word	0x20000000
 8020f50:	e000e010 	.word	0xe000e010

08020f54 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8020f54:	b580      	push	{r7, lr}
 8020f56:	b082      	sub	sp, #8
 8020f58:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t appInitResult = GOS_SUCCESS;
 8020f5a:	2355      	movs	r3, #85	@ 0x55
 8020f5c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8020f5e:	f010 fe9b 	bl	8031c98 <svl_dsmInit>
 8020f62:	4603      	mov	r3, r0
 8020f64:	461a      	mov	r2, r3
 8020f66:	79fb      	ldrb	r3, [r7, #7]
 8020f68:	4013      	ands	r3, r2
 8020f6a:	71fb      	strb	r3, [r7, #7]

	// Welcome message.
	(void_t) gos_traceTrace(GOS_FALSE, "Welcome to the GOS test application!");
 8020f6c:	4908      	ldr	r1, [pc, #32]	@ (8020f90 <gos_userApplicationInit+0x3c>)
 8020f6e:	2049      	movs	r0, #73	@ 0x49
 8020f70:	f019 fd58 	bl	803aa24 <gos_traceTrace>

	// Enable WiFi module.
	(void_t) drv_gpioWritePin(IO_WEMOS_RST, GPIO_STATE_HIGH);
 8020f74:	2101      	movs	r1, #1
 8020f76:	2010      	movs	r0, #16
 8020f78:	f00d ff2e 	bl	802edd8 <drv_gpioWritePin>

	if (appInitResult != GOS_SUCCESS)
 8020f7c:	79fb      	ldrb	r3, [r7, #7]
 8020f7e:	2b55      	cmp	r3, #85	@ 0x55
 8020f80:	d001      	beq.n	8020f86 <gos_userApplicationInit+0x32>
	{
		appInitResult = GOS_ERROR;
 8020f82:	23ae      	movs	r3, #174	@ 0xae
 8020f84:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8020f86:	79fb      	ldrb	r3, [r7, #7]
}
 8020f88:	4618      	mov	r0, r3
 8020f8a:	3708      	adds	r7, #8
 8020f8c:	46bd      	mov	sp, r7
 8020f8e:	bd80      	pop	{r7, pc}
 8020f90:	0803e2c8 	.word	0x0803e2c8

08020f94 <app_debouncerInit>:

/*
 * Function: app_debouncerInit
 */
gos_result_t app_debouncerInit (void_t)
{
 8020f94:	b580      	push	{r7, lr}
 8020f96:	b082      	sub	sp, #8
 8020f98:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t debouncerInitResult = GOS_SUCCESS;
 8020f9a:	2355      	movs	r3, #85	@ 0x55
 8020f9c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	(void_t) memset(buttonBlock.buttonXBlockCounter, 0, sizeof(buttonBlock.buttonXBlockCounter));
 8020f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8020fd0 <app_debouncerInit+0x3c>)
 8020fa0:	2200      	movs	r2, #0
 8020fa2:	805a      	strh	r2, [r3, #2]
	(void_t) memset(buttonBlock.buttonXBlocked, GOS_FALSE, sizeof(buttonBlock.buttonXBlocked));
 8020fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8020fd0 <app_debouncerInit+0x3c>)
 8020fa6:	2249      	movs	r2, #73	@ 0x49
 8020fa8:	701a      	strb	r2, [r3, #0]

	debouncerInitResult &= gos_taskRegister(&appDebouncerTaskDesc, NULL);
 8020faa:	2100      	movs	r1, #0
 8020fac:	4809      	ldr	r0, [pc, #36]	@ (8020fd4 <app_debouncerInit+0x40>)
 8020fae:	f014 fd85 	bl	8035abc <gos_taskRegister>
 8020fb2:	4603      	mov	r3, r0
 8020fb4:	461a      	mov	r2, r3
 8020fb6:	79fb      	ldrb	r3, [r7, #7]
 8020fb8:	4013      	ands	r3, r2
 8020fba:	71fb      	strb	r3, [r7, #7]

	if (debouncerInitResult != GOS_SUCCESS)
 8020fbc:	79fb      	ldrb	r3, [r7, #7]
 8020fbe:	2b55      	cmp	r3, #85	@ 0x55
 8020fc0:	d001      	beq.n	8020fc6 <app_debouncerInit+0x32>
	{
		debouncerInitResult = GOS_ERROR;
 8020fc2:	23ae      	movs	r3, #174	@ 0xae
 8020fc4:	71fb      	strb	r3, [r7, #7]
	}

	return debouncerInitResult;
 8020fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8020fc8:	4618      	mov	r0, r3
 8020fca:	3708      	adds	r7, #8
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	bd80      	pop	{r7, pc}
 8020fd0:	2000333c 	.word	0x2000333c
 8020fd4:	2000001c 	.word	0x2000001c

08020fd8 <app_debouncerActivate>:

/*
 * Function: app_debouncerActivate
 */
gos_result_t app_debouncerActivate (void_t)
{
 8020fd8:	b580      	push	{r7, lr}
 8020fda:	b082      	sub	sp, #8
 8020fdc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_taskPrivilegeLevel_t callerPrivileges;
	gos_tid_t                callerId;
	gos_result_t             activateResult = GOS_SUCCESS;
 8020fde:	2355      	movs	r3, #85	@ 0x55
 8020fe0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	activateResult &= gos_taskGetPrivileges(appDebouncerTaskDesc.taskId, &callerPrivileges);
 8020fe2:	4b27      	ldr	r3, [pc, #156]	@ (8021080 <app_debouncerActivate+0xa8>)
 8020fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8020fe6:	1d3a      	adds	r2, r7, #4
 8020fe8:	4611      	mov	r1, r2
 8020fea:	4618      	mov	r0, r3
 8020fec:	f016 f89c 	bl	8037128 <gos_taskGetPrivileges>
 8020ff0:	4603      	mov	r3, r0
 8020ff2:	461a      	mov	r2, r3
 8020ff4:	79fb      	ldrb	r3, [r7, #7]
 8020ff6:	4013      	ands	r3, r2
 8020ff8:	71fb      	strb	r3, [r7, #7]

	if ((callerPrivileges & GOS_PRIV_TASK_MANIPULATE) == 0u)
 8020ffa:	88bb      	ldrh	r3, [r7, #4]
 8020ffc:	b21b      	sxth	r3, r3
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	db29      	blt.n	8021056 <app_debouncerActivate+0x7e>
	{
		activateResult &= gos_taskGetCurrentId(&callerId);
 8021002:	1cbb      	adds	r3, r7, #2
 8021004:	4618      	mov	r0, r3
 8021006:	f016 f937 	bl	8037278 <gos_taskGetCurrentId>
 802100a:	4603      	mov	r3, r0
 802100c:	461a      	mov	r2, r3
 802100e:	79fb      	ldrb	r3, [r7, #7]
 8021010:	4013      	ands	r3, r2
 8021012:	71fb      	strb	r3, [r7, #7]
		activateResult &= gos_taskAddPrivilege(callerId, GOS_PRIV_TASK_MANIPULATE);
 8021014:	887b      	ldrh	r3, [r7, #2]
 8021016:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 802101a:	4618      	mov	r0, r3
 802101c:	f015 ff20 	bl	8036e60 <gos_taskAddPrivilege>
 8021020:	4603      	mov	r3, r0
 8021022:	461a      	mov	r2, r3
 8021024:	79fb      	ldrb	r3, [r7, #7]
 8021026:	4013      	ands	r3, r2
 8021028:	71fb      	strb	r3, [r7, #7]
		activateResult &= gos_taskResume(appDebouncerTaskDesc.taskId);
 802102a:	4b15      	ldr	r3, [pc, #84]	@ (8021080 <app_debouncerActivate+0xa8>)
 802102c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802102e:	4618      	mov	r0, r3
 8021030:	f015 f950 	bl	80362d4 <gos_taskResume>
 8021034:	4603      	mov	r3, r0
 8021036:	461a      	mov	r2, r3
 8021038:	79fb      	ldrb	r3, [r7, #7]
 802103a:	4013      	ands	r3, r2
 802103c:	71fb      	strb	r3, [r7, #7]
		activateResult &= gos_taskRemovePrivilege(callerId, GOS_PRIV_TASK_MANIPULATE);
 802103e:	887b      	ldrh	r3, [r7, #2]
 8021040:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8021044:	4618      	mov	r0, r3
 8021046:	f015 ff83 	bl	8036f50 <gos_taskRemovePrivilege>
 802104a:	4603      	mov	r3, r0
 802104c:	461a      	mov	r2, r3
 802104e:	79fb      	ldrb	r3, [r7, #7]
 8021050:	4013      	ands	r3, r2
 8021052:	71fb      	strb	r3, [r7, #7]
 8021054:	e009      	b.n	802106a <app_debouncerActivate+0x92>
	}
	else
	{
		activateResult &= gos_taskResume(appDebouncerTaskDesc.taskId);
 8021056:	4b0a      	ldr	r3, [pc, #40]	@ (8021080 <app_debouncerActivate+0xa8>)
 8021058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802105a:	4618      	mov	r0, r3
 802105c:	f015 f93a 	bl	80362d4 <gos_taskResume>
 8021060:	4603      	mov	r3, r0
 8021062:	461a      	mov	r2, r3
 8021064:	79fb      	ldrb	r3, [r7, #7]
 8021066:	4013      	ands	r3, r2
 8021068:	71fb      	strb	r3, [r7, #7]
	}

	if (activateResult != GOS_SUCCESS)
 802106a:	79fb      	ldrb	r3, [r7, #7]
 802106c:	2b55      	cmp	r3, #85	@ 0x55
 802106e:	d001      	beq.n	8021074 <app_debouncerActivate+0x9c>
	{
		activateResult = GOS_ERROR;
 8021070:	23ae      	movs	r3, #174	@ 0xae
 8021072:	71fb      	strb	r3, [r7, #7]
	}

	return activateResult;
 8021074:	79fb      	ldrb	r3, [r7, #7]
}
 8021076:	4618      	mov	r0, r3
 8021078:	3708      	adds	r7, #8
 802107a:	46bd      	mov	sp, r7
 802107c:	bd80      	pop	{r7, pc}
 802107e:	bf00      	nop
 8021080:	2000001c 	.word	0x2000001c

08021084 <app_debouncerTask>:

// TODO
GOS_STATIC void_t app_debouncerTask (void_t)
{
 8021084:	b580      	push	{r7, lr}
 8021086:	b082      	sub	sp, #8
 8021088:	af00      	add	r7, sp, #0
	 * Function code.
	 */
	/*
	 * Suspend task (will be resumed when debouncing is required.
	 */
	(void_t) gos_taskSuspend(appDebouncerTaskDesc.taskId);
 802108a:	4b23      	ldr	r3, [pc, #140]	@ (8021118 <app_debouncerTask+0x94>)
 802108c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802108e:	4618      	mov	r0, r3
 8021090:	f014 fffe 	bl	8036090 <gos_taskSuspend>
			 * Check each button whether they are blocked.
			 * If so, increase their block counter every millisecond.
			 * When the debounce time has elapsed, unblock the button, and
			 * clear the block counter.
			 */
			bool_t debounceRequired = GOS_FALSE;
 8021094:	2349      	movs	r3, #73	@ 0x49
 8021096:	71fb      	strb	r3, [r7, #7]

			for (int i = 0; i < APP_DEBOUNCE_BUTTON_NUM; i++)
 8021098:	2300      	movs	r3, #0
 802109a:	603b      	str	r3, [r7, #0]
 802109c:	e02a      	b.n	80210f4 <app_debouncerTask+0x70>
			{
				if (buttonBlock.buttonXBlocked[i] == GOS_TRUE)
 802109e:	4a1f      	ldr	r2, [pc, #124]	@ (802111c <app_debouncerTask+0x98>)
 80210a0:	683b      	ldr	r3, [r7, #0]
 80210a2:	4413      	add	r3, r2
 80210a4:	781b      	ldrb	r3, [r3, #0]
 80210a6:	2b36      	cmp	r3, #54	@ 0x36
 80210a8:	d121      	bne.n	80210ee <app_debouncerTask+0x6a>
				{
					debounceRequired = GOS_TRUE;
 80210aa:	2336      	movs	r3, #54	@ 0x36
 80210ac:	71fb      	strb	r3, [r7, #7]

					if (++buttonBlock.buttonXBlockCounter[i] == DEBOUNCE_TIME_MS)
 80210ae:	4a1b      	ldr	r2, [pc, #108]	@ (802111c <app_debouncerTask+0x98>)
 80210b0:	683b      	ldr	r3, [r7, #0]
 80210b2:	005b      	lsls	r3, r3, #1
 80210b4:	4413      	add	r3, r2
 80210b6:	885b      	ldrh	r3, [r3, #2]
 80210b8:	3301      	adds	r3, #1
 80210ba:	b299      	uxth	r1, r3
 80210bc:	4a17      	ldr	r2, [pc, #92]	@ (802111c <app_debouncerTask+0x98>)
 80210be:	683b      	ldr	r3, [r7, #0]
 80210c0:	005b      	lsls	r3, r3, #1
 80210c2:	4413      	add	r3, r2
 80210c4:	460a      	mov	r2, r1
 80210c6:	805a      	strh	r2, [r3, #2]
 80210c8:	4a14      	ldr	r2, [pc, #80]	@ (802111c <app_debouncerTask+0x98>)
 80210ca:	683b      	ldr	r3, [r7, #0]
 80210cc:	005b      	lsls	r3, r3, #1
 80210ce:	4413      	add	r3, r2
 80210d0:	885b      	ldrh	r3, [r3, #2]
 80210d2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80210d6:	d10a      	bne.n	80210ee <app_debouncerTask+0x6a>
					{
						buttonBlock.buttonXBlocked[i] = GOS_FALSE;
 80210d8:	4a10      	ldr	r2, [pc, #64]	@ (802111c <app_debouncerTask+0x98>)
 80210da:	683b      	ldr	r3, [r7, #0]
 80210dc:	4413      	add	r3, r2
 80210de:	2249      	movs	r2, #73	@ 0x49
 80210e0:	701a      	strb	r2, [r3, #0]
						buttonBlock.buttonXBlockCounter[i] = 0u;
 80210e2:	4a0e      	ldr	r2, [pc, #56]	@ (802111c <app_debouncerTask+0x98>)
 80210e4:	683b      	ldr	r3, [r7, #0]
 80210e6:	005b      	lsls	r3, r3, #1
 80210e8:	4413      	add	r3, r2
 80210ea:	2200      	movs	r2, #0
 80210ec:	805a      	strh	r2, [r3, #2]
			for (int i = 0; i < APP_DEBOUNCE_BUTTON_NUM; i++)
 80210ee:	683b      	ldr	r3, [r7, #0]
 80210f0:	3301      	adds	r3, #1
 80210f2:	603b      	str	r3, [r7, #0]
 80210f4:	683b      	ldr	r3, [r7, #0]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	ddd1      	ble.n	802109e <app_debouncerTask+0x1a>
					}
				}
			}

			if (debounceRequired == GOS_FALSE)
 80210fa:	79fb      	ldrb	r3, [r7, #7]
 80210fc:	2b49      	cmp	r3, #73	@ 0x49
 80210fe:	d003      	beq.n	8021108 <app_debouncerTask+0x84>
				break;
			}
			else
			{
				// Continue debouncing.
				(void_t) gos_taskSleep(1);
 8021100:	2001      	movs	r0, #1
 8021102:	f014 fe6d 	bl	8035de0 <gos_taskSleep>
		{
 8021106:	e7c5      	b.n	8021094 <app_debouncerTask+0x10>
				break;
 8021108:	bf00      	nop
		}

		/*
		 * No debouncing is required at this point, suspend task.
		 */
		(void_t) gos_taskSuspend(appDebouncerTaskDesc.taskId);
 802110a:	4b03      	ldr	r3, [pc, #12]	@ (8021118 <app_debouncerTask+0x94>)
 802110c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802110e:	4618      	mov	r0, r3
 8021110:	f014 ffbe 	bl	8036090 <gos_taskSuspend>
	for (;;)
 8021114:	e7be      	b.n	8021094 <app_debouncerTask+0x10>
 8021116:	bf00      	nop
 8021118:	2000001c 	.word	0x2000001c
 802111c:	2000333c 	.word	0x2000333c

08021120 <app_ersBdSpecInit>:

/*
 * Function: app_ersBdSpecInit
 */
gos_result_t app_ersBdSpecInit (void_t)
{
 8021120:	b580      	push	{r7, lr}
 8021122:	b082      	sub	sp, #8
 8021124:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t ersBdSpecInitRes = GOS_SUCCESS;
 8021126:	2355      	movs	r3, #85	@ 0x55
 8021128:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	ersBdSpecInitRes &= drv_25lc256Init((void_t*)&mem01a1_eeprom1);
 802112a:	4811      	ldr	r0, [pc, #68]	@ (8021170 <app_ersBdSpecInit+0x50>)
 802112c:	f00c f862 	bl	802d1f4 <drv_25lc256Init>
 8021130:	4603      	mov	r3, r0
 8021132:	461a      	mov	r2, r3
 8021134:	79fb      	ldrb	r3, [r7, #7]
 8021136:	4013      	ands	r3, r2
 8021138:	71fb      	strb	r3, [r7, #7]
	ersBdSpecInitRes &= svl_ersConfigure(&ersCfg);
 802113a:	480e      	ldr	r0, [pc, #56]	@ (8021174 <app_ersBdSpecInit+0x54>)
 802113c:	f011 f9b8 	bl	80324b0 <svl_ersConfigure>
 8021140:	4603      	mov	r3, r0
 8021142:	461a      	mov	r2, r3
 8021144:	79fb      	ldrb	r3, [r7, #7]
 8021146:	4013      	ands	r3, r2
 8021148:	71fb      	strb	r3, [r7, #7]
	ersBdSpecInitRes &= gos_taskRegister(&ersTaskDesc, NULL);
 802114a:	2100      	movs	r1, #0
 802114c:	480a      	ldr	r0, [pc, #40]	@ (8021178 <app_ersBdSpecInit+0x58>)
 802114e:	f014 fcb5 	bl	8035abc <gos_taskRegister>
 8021152:	4603      	mov	r3, r0
 8021154:	461a      	mov	r2, r3
 8021156:	79fb      	ldrb	r3, [r7, #7]
 8021158:	4013      	ands	r3, r2
 802115a:	71fb      	strb	r3, [r7, #7]

	if (ersBdSpecInitRes != GOS_SUCCESS)
 802115c:	79fb      	ldrb	r3, [r7, #7]
 802115e:	2b55      	cmp	r3, #85	@ 0x55
 8021160:	d001      	beq.n	8021166 <app_ersBdSpecInit+0x46>
	{
		ersBdSpecInitRes = GOS_ERROR;
 8021162:	23ae      	movs	r3, #174	@ 0xae
 8021164:	71fb      	strb	r3, [r7, #7]
	}

	return ersBdSpecInitRes;
 8021166:	79fb      	ldrb	r3, [r7, #7]
}
 8021168:	4618      	mov	r0, r3
 802116a:	3708      	adds	r7, #8
 802116c:	46bd      	mov	sp, r7
 802116e:	bd80      	pop	{r7, pc}
 8021170:	200000f4 	.word	0x200000f4
 8021174:	20000110 	.word	0x20000110
 8021178:	20000088 	.word	0x20000088

0802117c <app_ersTask>:

// TODO
GOS_STATIC void_t app_ersTask (void_t)
{
 802117c:	b580      	push	{r7, lr}
 802117e:	b084      	sub	sp, #16
 8021180:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	//u32_t numOfEntries = 0u;
	bool_t errorState = GOS_FALSE;
 8021182:	2349      	movs	r3, #73	@ 0x49
 8021184:	73fb      	strb	r3, [r7, #15]
	u8_t  eventData [SVL_ERS_DATA_SIZE];

	/*
	 * Function code.
	 */
	(void_t) gos_taskSleep(1000);
 8021186:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802118a:	f014 fe29 	bl	8035de0 <gos_taskSleep>

	// Create startup event.
	(void_t) svl_ersCreate(ERS_STARTUP_EVENT, 0, NULL);
 802118e:	2200      	movs	r2, #0
 8021190:	2100      	movs	r1, #0
 8021192:	2000      	movs	r0, #0
 8021194:	f011 f9b2 	bl	80324fc <svl_ersCreate>

	for (;;)
	{
		if (gos_mutexLock(&mdiMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8021198:	f04f 31ff 	mov.w	r1, #4294967295
 802119c:	481c      	ldr	r0, [pc, #112]	@ (8021210 <app_ersTask+0x94>)
 802119e:	f017 fa57 	bl	8038650 <gos_mutexLock>
 80211a2:	4603      	mov	r3, r0
 80211a4:	2b55      	cmp	r3, #85	@ 0x55
 80211a6:	d12e      	bne.n	8021206 <app_ersTask+0x8a>
		{
			if ((mdiVariables[MDI_CPU_TEMP].value.floatValue > 35.0) && (errorState == GOS_FALSE))
 80211a8:	4b1a      	ldr	r3, [pc, #104]	@ (8021214 <app_ersTask+0x98>)
 80211aa:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 80211ae:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8021218 <app_ersTask+0x9c>
 80211b2:	ee07 3a10 	vmov	s14, r3
 80211b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80211ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211be:	dd0e      	ble.n	80211de <app_ersTask+0x62>
 80211c0:	7bfb      	ldrb	r3, [r7, #15]
 80211c2:	2b49      	cmp	r3, #73	@ 0x49
 80211c4:	d10b      	bne.n	80211de <app_ersTask+0x62>
			{
				(void_t) memcpy(eventData, mdiVariables[MDI_CPU_TEMP].value.arrayValue, 4);
 80211c6:	4b13      	ldr	r3, [pc, #76]	@ (8021214 <app_ersTask+0x98>)
 80211c8:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 80211cc:	607b      	str	r3, [r7, #4]
				(void_t) svl_ersCreate(ERS_OVERHEAT_EVENT, 0, eventData);
 80211ce:	1d3b      	adds	r3, r7, #4
 80211d0:	461a      	mov	r2, r3
 80211d2:	2100      	movs	r1, #0
 80211d4:	2001      	movs	r0, #1
 80211d6:	f011 f991 	bl	80324fc <svl_ersCreate>
				errorState = GOS_TRUE;
 80211da:	2336      	movs	r3, #54	@ 0x36
 80211dc:	73fb      	strb	r3, [r7, #15]
			}

			if ((errorState == GOS_TRUE) && (mdiVariables[MDI_CPU_TEMP].value.floatValue < 30.0))
 80211de:	7bfb      	ldrb	r3, [r7, #15]
 80211e0:	2b36      	cmp	r3, #54	@ 0x36
 80211e2:	d10d      	bne.n	8021200 <app_ersTask+0x84>
 80211e4:	4b0b      	ldr	r3, [pc, #44]	@ (8021214 <app_ersTask+0x98>)
 80211e6:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 80211ea:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80211ee:	ee07 3a10 	vmov	s14, r3
 80211f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80211f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211fa:	d501      	bpl.n	8021200 <app_ersTask+0x84>
			{
				errorState = GOS_FALSE;
 80211fc:	2349      	movs	r3, #73	@ 0x49
 80211fe:	73fb      	strb	r3, [r7, #15]
			}

			(void_t) gos_mutexUnlock(&mdiMutex);
 8021200:	4803      	ldr	r0, [pc, #12]	@ (8021210 <app_ersTask+0x94>)
 8021202:	f017 fb2b 	bl	803885c <gos_mutexUnlock>
		}

		(void_t) gos_taskSleep(100);
 8021206:	2064      	movs	r0, #100	@ 0x64
 8021208:	f014 fdea 	bl	8035de0 <gos_taskSleep>
		if (gos_mutexLock(&mdiMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 802120c:	e7c4      	b.n	8021198 <app_ersTask+0x1c>
 802120e:	bf00      	nop
 8021210:	20003350 	.word	0x20003350
 8021214:	200013e4 	.word	0x200013e4
 8021218:	420c0000 	.word	0x420c0000

0802121c <app_ersBdSpecRead>:
	}
}

// TODO
GOS_STATIC gos_result_t app_ersBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 802121c:	b580      	push	{r7, lr}
 802121e:	b084      	sub	sp, #16
 8021220:	af00      	add	r7, sp, #0
 8021222:	60f8      	str	r0, [r7, #12]
 8021224:	60b9      	str	r1, [r7, #8]
 8021226:	4613      	mov	r3, r2
 8021228:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	return drv_25lc256Read((void_t*)&mem01a1_eeprom1, address, pData, size);
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	b299      	uxth	r1, r3
 802122e:	88fb      	ldrh	r3, [r7, #6]
 8021230:	68ba      	ldr	r2, [r7, #8]
 8021232:	4804      	ldr	r0, [pc, #16]	@ (8021244 <app_ersBdSpecRead+0x28>)
 8021234:	f00c f80c 	bl	802d250 <drv_25lc256Read>
 8021238:	4603      	mov	r3, r0
}
 802123a:	4618      	mov	r0, r3
 802123c:	3710      	adds	r7, #16
 802123e:	46bd      	mov	sp, r7
 8021240:	bd80      	pop	{r7, pc}
 8021242:	bf00      	nop
 8021244:	200000f4 	.word	0x200000f4

08021248 <app_ersBdSpecWrite>:

// TODO
GOS_STATIC gos_result_t app_ersBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 8021248:	b580      	push	{r7, lr}
 802124a:	b084      	sub	sp, #16
 802124c:	af00      	add	r7, sp, #0
 802124e:	60f8      	str	r0, [r7, #12]
 8021250:	60b9      	str	r1, [r7, #8]
 8021252:	4613      	mov	r3, r2
 8021254:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	return drv_25lc256Write((void_t*)&mem01a1_eeprom1, address, pData, size);
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	b299      	uxth	r1, r3
 802125a:	88fb      	ldrh	r3, [r7, #6]
 802125c:	68ba      	ldr	r2, [r7, #8]
 802125e:	4804      	ldr	r0, [pc, #16]	@ (8021270 <app_ersBdSpecWrite+0x28>)
 8021260:	f00c f910 	bl	802d484 <drv_25lc256Write>
 8021264:	4603      	mov	r3, r0
}
 8021266:	4618      	mov	r0, r3
 8021268:	3710      	adds	r7, #16
 802126a:	46bd      	mov	sp, r7
 802126c:	bd80      	pop	{r7, pc}
 802126e:	bf00      	nop
 8021270:	200000f4 	.word	0x200000f4

08021274 <app_iplBdSpecInit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout);
GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout);

gos_result_t app_iplBdSpecInit (void_t)
{
 8021274:	b580      	push	{r7, lr}
 8021276:	af00      	add	r7, sp, #0
	return svl_iplConfigure(app_iplBdSpecTransmit, app_iplBdSpecReceive);
 8021278:	4903      	ldr	r1, [pc, #12]	@ (8021288 <app_iplBdSpecInit+0x14>)
 802127a:	4804      	ldr	r0, [pc, #16]	@ (802128c <app_iplBdSpecInit+0x18>)
 802127c:	f011 faee 	bl	803285c <svl_iplConfigure>
 8021280:	4603      	mov	r3, r0
}
 8021282:	4618      	mov	r0, r3
 8021284:	bd80      	pop	{r7, pc}
 8021286:	bf00      	nop
 8021288:	080212b9 	.word	0x080212b9
 802128c:	08021291 	.word	0x08021291

08021290 <app_iplBdSpecTransmit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8021290:	b580      	push	{r7, lr}
 8021292:	b086      	sub	sp, #24
 8021294:	af02      	add	r7, sp, #8
 8021296:	60f8      	str	r0, [r7, #12]
 8021298:	60b9      	str	r1, [r7, #8]
 802129a:	607a      	str	r2, [r7, #4]
	return drv_uartTransmitIT(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 802129c:	68bb      	ldr	r3, [r7, #8]
 802129e:	b29a      	uxth	r2, r3
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	9300      	str	r3, [sp, #0]
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	68f9      	ldr	r1, [r7, #12]
 80212a8:	2003      	movs	r0, #3
 80212aa:	f00f fef7 	bl	803109c <drv_uartTransmitIT>
 80212ae:	4603      	mov	r3, r0
}
 80212b0:	4618      	mov	r0, r3
 80212b2:	3710      	adds	r7, #16
 80212b4:	46bd      	mov	sp, r7
 80212b6:	bd80      	pop	{r7, pc}

080212b8 <app_iplBdSpecReceive>:

GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 80212b8:	b580      	push	{r7, lr}
 80212ba:	b086      	sub	sp, #24
 80212bc:	af02      	add	r7, sp, #8
 80212be:	60f8      	str	r0, [r7, #12]
 80212c0:	60b9      	str	r1, [r7, #8]
 80212c2:	607a      	str	r2, [r7, #4]
	if (timeout < 0xFFFFFFFFu)
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212ca:	d008      	beq.n	80212de <app_iplBdSpecReceive+0x26>
	{
		return drv_uartReceiveBlocking(DRV_UART_INSTANCE_4, pData, dataSize, timeout);
 80212cc:	68bb      	ldr	r3, [r7, #8]
 80212ce:	b29a      	uxth	r2, r3
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	68f9      	ldr	r1, [r7, #12]
 80212d4:	2003      	movs	r0, #3
 80212d6:	f00f fdb5 	bl	8030e44 <drv_uartReceiveBlocking>
 80212da:	4603      	mov	r3, r0
 80212dc:	e009      	b.n	80212f2 <app_iplBdSpecReceive+0x3a>
	}
	else
	{
		return drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 80212de:	68bb      	ldr	r3, [r7, #8]
 80212e0:	b29a      	uxth	r2, r3
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	9300      	str	r3, [sp, #0]
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	68f9      	ldr	r1, [r7, #12]
 80212ea:	2003      	movs	r0, #3
 80212ec:	f00f fe66 	bl	8030fbc <drv_uartReceiveDMA>
 80212f0:	4603      	mov	r3, r0
	}
}
 80212f2:	4618      	mov	r0, r3
 80212f4:	3710      	adds	r7, #16
 80212f6:	46bd      	mov	sp, r7
 80212f8:	bd80      	pop	{r7, pc}
	...

080212fc <app_lcdInit>:
	.taskPriority 	= 14,
	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER | GOS_PRIV_TASK_MANIPULATE
};

gos_result_t app_lcdInit (void_t)
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b082      	sub	sp, #8
 8021300:	af00      	add	r7, sp, #0
	gos_result_t lcdInitResult = GOS_SUCCESS;
 8021302:	2355      	movs	r3, #85	@ 0x55
 8021304:	71fb      	strb	r3, [r7, #7]

	lcdInitResult &= gos_taskRegister(&appLcdTask, NULL);
 8021306:	2100      	movs	r1, #0
 8021308:	4808      	ldr	r0, [pc, #32]	@ (802132c <app_lcdInit+0x30>)
 802130a:	f014 fbd7 	bl	8035abc <gos_taskRegister>
 802130e:	4603      	mov	r3, r0
 8021310:	461a      	mov	r2, r3
 8021312:	79fb      	ldrb	r3, [r7, #7]
 8021314:	4013      	ands	r3, r2
 8021316:	71fb      	strb	r3, [r7, #7]

	if (lcdInitResult != GOS_SUCCESS)
 8021318:	79fb      	ldrb	r3, [r7, #7]
 802131a:	2b55      	cmp	r3, #85	@ 0x55
 802131c:	d001      	beq.n	8021322 <app_lcdInit+0x26>
	{
		lcdInitResult = GOS_ERROR;
 802131e:	23ae      	movs	r3, #174	@ 0xae
 8021320:	71fb      	strb	r3, [r7, #7]
	}

	return lcdInitResult;
 8021322:	79fb      	ldrb	r3, [r7, #7]
}
 8021324:	4618      	mov	r0, r3
 8021326:	3708      	adds	r7, #8
 8021328:	46bd      	mov	sp, r7
 802132a:	bd80      	pop	{r7, pc}
 802132c:	20000118 	.word	0x20000118

08021330 <app_lcdTask>:

GOS_STATIC void_t app_lcdTask (void_t)
{
 8021330:	b590      	push	{r4, r7, lr}
 8021332:	b095      	sub	sp, #84	@ 0x54
 8021334:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	lcd_display_cfg_t flashingConfig =
 8021336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802133a:	2200      	movs	r2, #0
 802133c:	601a      	str	r2, [r3, #0]
 802133e:	605a      	str	r2, [r3, #4]
 8021340:	609a      	str	r2, [r3, #8]
 8021342:	60da      	str	r2, [r3, #12]
 8021344:	611a      	str	r2, [r3, #16]
 8021346:	2305      	movs	r3, #5
 8021348:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 802134c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8021350:	633b      	str	r3, [r7, #48]	@ 0x30
 8021352:	230f      	movs	r3, #15
 8021354:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8021358:	2301      	movs	r3, #1
 802135a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		.blinkState      = LCD_BLINK_STATE_OFF,
		.line            = 0,
		.periodMs        = 500
	};

	lcd_display_cfg_t normalConfig =
 802135e:	f107 0318 	add.w	r3, r7, #24
 8021362:	2200      	movs	r2, #0
 8021364:	601a      	str	r2, [r3, #0]
 8021366:	605a      	str	r2, [r3, #4]
 8021368:	609a      	str	r2, [r3, #8]
 802136a:	60da      	str	r2, [r3, #12]
 802136c:	611a      	str	r2, [r3, #16]
 802136e:	230f      	movs	r3, #15
 8021370:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8021374:	2301      	movs	r3, #1
 8021376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		.blinkState      = LCD_BLINK_STATE_OFF,
		.line            = 0,
		.periodMs        = 0
	};

	lcd_display_cfg_t shiftConfig =
 802137a:	1d3b      	adds	r3, r7, #4
 802137c:	2200      	movs	r2, #0
 802137e:	601a      	str	r2, [r3, #0]
 8021380:	605a      	str	r2, [r3, #4]
 8021382:	609a      	str	r2, [r3, #8]
 8021384:	60da      	str	r2, [r3, #12]
 8021386:	611a      	str	r2, [r3, #16]
 8021388:	2302      	movs	r3, #2
 802138a:	717b      	strb	r3, [r7, #5]
 802138c:	2364      	movs	r3, #100	@ 0x64
 802138e:	60bb      	str	r3, [r7, #8]
 8021390:	230f      	movs	r3, #15
 8021392:	757b      	strb	r3, [r7, #21]
 8021394:	2301      	movs	r3, #1
 8021396:	75fb      	strb	r3, [r7, #23]
		.line            = 0,
		.periodMs        = 100
	};

	//u16_t adcValue         = 0u;
	u16_t temperatureValue = 0u;
 8021398:	2300      	movs	r3, #0
 802139a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	u16_t cpuUse           = 0u;
 802139e:	2300      	movs	r3, #0
 80213a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

	(void_t) BSP_LCD_HandlerInit();
 80213a4:	f001 f940 	bl	8022628 <BSP_LCD_HandlerInit>

	for (;;)
	{
		switch (programState)
 80213a8:	4ba2      	ldr	r3, [pc, #648]	@ (8021634 <app_lcdTask+0x304>)
 80213aa:	781b      	ldrb	r3, [r3, #0]
 80213ac:	2b08      	cmp	r3, #8
 80213ae:	f200 813e 	bhi.w	802162e <app_lcdTask+0x2fe>
 80213b2:	a201      	add	r2, pc, #4	@ (adr r2, 80213b8 <app_lcdTask+0x88>)
 80213b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80213b8:	080213dd 	.word	0x080213dd
 80213bc:	08021421 	.word	0x08021421
 80213c0:	0802144d 	.word	0x0802144d
 80213c4:	080214a3 	.word	0x080214a3
 80213c8:	080214f7 	.word	0x080214f7
 80213cc:	08021531 	.word	0x08021531
 80213d0:	08021551 	.word	0x08021551
 80213d4:	080215c7 	.word	0x080215c7
 80213d8:	080215e7 	.word	0x080215e7
		{
			case PROGRAM_INIT_LOG:
			{
				programState = PROGRAM_MAIN_IDLE;
 80213dc:	4b95      	ldr	r3, [pc, #596]	@ (8021634 <app_lcdTask+0x304>)
 80213de:	2201      	movs	r2, #1
 80213e0:	701a      	strb	r2, [r3, #0]

				BSP_LCD_HandlerDisplayText(&normalConfig, "Hello from GOS!");
 80213e2:	f107 0318 	add.w	r3, r7, #24
 80213e6:	4994      	ldr	r1, [pc, #592]	@ (8021638 <app_lcdTask+0x308>)
 80213e8:	4618      	mov	r0, r3
 80213ea:	f001 f949 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				for (u8_t i = 0; i < 16; i++)
 80213ee:	2300      	movs	r3, #0
 80213f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80213f4:	e00b      	b.n	802140e <app_lcdTask+0xde>
				{
					BSP_LCD_HandlerWriteNextString(1, "#");
 80213f6:	4991      	ldr	r1, [pc, #580]	@ (802163c <app_lcdTask+0x30c>)
 80213f8:	2001      	movs	r0, #1
 80213fa:	f001 f9b5 	bl	8022768 <BSP_LCD_HandlerWriteNextString>
					gos_taskSleep(200);
 80213fe:	20c8      	movs	r0, #200	@ 0xc8
 8021400:	f014 fcee 	bl	8035de0 <gos_taskSleep>
				for (u8_t i = 0; i < 16; i++)
 8021404:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8021408:	3301      	adds	r3, #1
 802140a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 802140e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8021412:	2b0f      	cmp	r3, #15
 8021414:	d9ef      	bls.n	80213f6 <app_lcdTask+0xc6>
				}

				gos_taskSleep(1000);
 8021416:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802141a:	f014 fce1 	bl	8035de0 <gos_taskSleep>
				break;
 802141e:	e107      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_MAIN_IDLE:
			{
				normalConfig.line = 0;
 8021420:	2300      	movs	r3, #0
 8021422:	763b      	strb	r3, [r7, #24]
				BSP_LCD_HandlerDisplayText(&normalConfig, "GOS2022 test    ");
 8021424:	f107 0318 	add.w	r3, r7, #24
 8021428:	4985      	ldr	r1, [pc, #532]	@ (8021640 <app_lcdTask+0x310>)
 802142a:	4618      	mov	r0, r3
 802142c:	f001 f928 	bl	8022680 <BSP_LCD_HandlerDisplayText>
				normalConfig.line = 1;
 8021430:	2301      	movs	r3, #1
 8021432:	763b      	strb	r3, [r7, #24]
				BSP_LCD_HandlerDisplayText(&normalConfig, "project         ");
 8021434:	f107 0318 	add.w	r3, r7, #24
 8021438:	4982      	ldr	r1, [pc, #520]	@ (8021644 <app_lcdTask+0x314>)
 802143a:	4618      	mov	r0, r3
 802143c:	f001 f920 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				gos_taskSuspend(appLcdTask.taskId);
 8021440:	4b81      	ldr	r3, [pc, #516]	@ (8021648 <app_lcdTask+0x318>)
 8021442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8021444:	4618      	mov	r0, r3
 8021446:	f014 fe23 	bl	8036090 <gos_taskSuspend>
				break;
 802144a:	e0f1      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_TIME_PRINT:
			{
				gos_timeGet(&actualTime);
 802144c:	487f      	ldr	r0, [pc, #508]	@ (802164c <app_lcdTask+0x31c>)
 802144e:	f018 ff65 	bl	803a31c <gos_timeGet>
				normalConfig.line = 0;
 8021452:	2300      	movs	r3, #0
 8021454:	763b      	strb	r3, [r7, #24]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
						actualTime.years,
 8021456:	4b7d      	ldr	r3, [pc, #500]	@ (802164c <app_lcdTask+0x31c>)
 8021458:	891b      	ldrh	r3, [r3, #8]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
 802145a:	461a      	mov	r2, r3
						actualTime.months,
 802145c:	4b7b      	ldr	r3, [pc, #492]	@ (802164c <app_lcdTask+0x31c>)
 802145e:	79db      	ldrb	r3, [r3, #7]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
 8021460:	4619      	mov	r1, r3
						actualTime.days
 8021462:	4b7a      	ldr	r3, [pc, #488]	@ (802164c <app_lcdTask+0x31c>)
 8021464:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8021468:	b29b      	uxth	r3, r3
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
 802146a:	f107 0018 	add.w	r0, r7, #24
 802146e:	9300      	str	r3, [sp, #0]
 8021470:	460b      	mov	r3, r1
 8021472:	4977      	ldr	r1, [pc, #476]	@ (8021650 <app_lcdTask+0x320>)
 8021474:	f001 f904 	bl	8022680 <BSP_LCD_HandlerDisplayText>
						);
				normalConfig.line = 1;
 8021478:	2301      	movs	r3, #1
 802147a:	763b      	strb	r3, [r7, #24]

				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
						actualTime.hours,
 802147c:	4b73      	ldr	r3, [pc, #460]	@ (802164c <app_lcdTask+0x31c>)
 802147e:	791b      	ldrb	r3, [r3, #4]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
 8021480:	461a      	mov	r2, r3
						actualTime.minutes,
 8021482:	4b72      	ldr	r3, [pc, #456]	@ (802164c <app_lcdTask+0x31c>)
 8021484:	78db      	ldrb	r3, [r3, #3]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
 8021486:	4619      	mov	r1, r3
						actualTime.seconds
 8021488:	4b70      	ldr	r3, [pc, #448]	@ (802164c <app_lcdTask+0x31c>)
 802148a:	789b      	ldrb	r3, [r3, #2]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
 802148c:	f107 0018 	add.w	r0, r7, #24
 8021490:	9300      	str	r3, [sp, #0]
 8021492:	460b      	mov	r3, r1
 8021494:	496f      	ldr	r1, [pc, #444]	@ (8021654 <app_lcdTask+0x324>)
 8021496:	f001 f8f3 	bl	8022680 <BSP_LCD_HandlerDisplayText>
						);

				gos_taskSleep(250);
 802149a:	20fa      	movs	r0, #250	@ 0xfa
 802149c:	f014 fca0 	bl	8035de0 <gos_taskSleep>
				break;
 80214a0:	e0c6      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_FLASHING_TEXT:
			{
				flashingConfig.line = 0;
 80214a2:	2300      	movs	r3, #0
 80214a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
				flashingConfig.periodMs = 500;
 80214a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80214ac:	633b      	str	r3, [r7, #48]	@ 0x30
				flashingConfig.blinkStartIndex = 1;
 80214ae:	2301      	movs	r3, #1
 80214b0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				flashingConfig.blinkEndIndex = 9;
 80214b4:	2309      	movs	r3, #9
 80214b6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

				BSP_LCD_HandlerDisplayText(&flashingConfig, " Flashing test! ");
 80214ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80214be:	4966      	ldr	r1, [pc, #408]	@ (8021658 <app_lcdTask+0x328>)
 80214c0:	4618      	mov	r0, r3
 80214c2:	f001 f8dd 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				flashingConfig.line = 1;
 80214c6:	2301      	movs	r3, #1
 80214c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
				flashingConfig.periodMs = 350;
 80214cc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80214d0:	633b      	str	r3, [r7, #48]	@ 0x30
				flashingConfig.blinkStartIndex = 0;
 80214d2:	2300      	movs	r3, #0
 80214d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				flashingConfig.blinkEndIndex = 15;
 80214d8:	230f      	movs	r3, #15
 80214da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

				BSP_LCD_HandlerDisplayText(&flashingConfig, "    GOS2022     ");
 80214de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80214e2:	495e      	ldr	r1, [pc, #376]	@ (802165c <app_lcdTask+0x32c>)
 80214e4:	4618      	mov	r0, r3
 80214e6:	f001 f8cb 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				gos_taskSuspend(appLcdTask.taskId);
 80214ea:	4b57      	ldr	r3, [pc, #348]	@ (8021648 <app_lcdTask+0x318>)
 80214ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80214ee:	4618      	mov	r0, r3
 80214f0:	f014 fdce 	bl	8036090 <gos_taskSuspend>
				break;
 80214f4:	e09c      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_SHIFTING_TEXT:
			{
				shiftConfig.line = 0;
 80214f6:	2300      	movs	r3, #0
 80214f8:	713b      	strb	r3, [r7, #4]
				shiftConfig.periodMs = 100;
 80214fa:	2364      	movs	r3, #100	@ 0x64
 80214fc:	60bb      	str	r3, [r7, #8]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 80214fe:	2302      	movs	r3, #2
 8021500:	717b      	strb	r3, [r7, #5]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "This is a normal shifting text example.");
 8021502:	1d3b      	adds	r3, r7, #4
 8021504:	4956      	ldr	r1, [pc, #344]	@ (8021660 <app_lcdTask+0x330>)
 8021506:	4618      	mov	r0, r3
 8021508:	f001 f8ba 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				shiftConfig.line = 1;
 802150c:	2301      	movs	r3, #1
 802150e:	713b      	strb	r3, [r7, #4]
				shiftConfig.periodMs = 400;
 8021510:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8021514:	60bb      	str	r3, [r7, #8]
				shiftConfig.displayMode = LCD_DISPLAY_CYCLIC_LEFT;
 8021516:	2304      	movs	r3, #4
 8021518:	717b      	strb	r3, [r7, #5]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "This is a cyclic shifting text example. The text is rotating continuously. ");
 802151a:	1d3b      	adds	r3, r7, #4
 802151c:	4951      	ldr	r1, [pc, #324]	@ (8021664 <app_lcdTask+0x334>)
 802151e:	4618      	mov	r0, r3
 8021520:	f001 f8ae 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				gos_taskSuspend(appLcdTask.taskId);
 8021524:	4b48      	ldr	r3, [pc, #288]	@ (8021648 <app_lcdTask+0x318>)
 8021526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8021528:	4618      	mov	r0, r3
 802152a:	f014 fdb1 	bl	8036090 <gos_taskSuspend>
				break;
 802152e:	e07f      	b.n	8021630 <app_lcdTask+0x300>
				gos_taskSleep(200);
				break;
			}*/
			case PROGRAM_TEMP_DISPLAY_INIT:
			{
				shiftConfig.line = 1;
 8021530:	2301      	movs	r3, #1
 8021532:	713b      	strb	r3, [r7, #4]
				shiftConfig.periodMs = 300;
 8021534:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8021538:	60bb      	str	r3, [r7, #8]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 802153a:	2302      	movs	r3, #2
 802153c:	717b      	strb	r3, [r7, #5]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "The temperature shown here is CPU temperature.");
 802153e:	1d3b      	adds	r3, r7, #4
 8021540:	4949      	ldr	r1, [pc, #292]	@ (8021668 <app_lcdTask+0x338>)
 8021542:	4618      	mov	r0, r3
 8021544:	f001 f89c 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				programState = PROGRAM_TEMP_VALUE_DISPLAY;
 8021548:	4b3a      	ldr	r3, [pc, #232]	@ (8021634 <app_lcdTask+0x304>)
 802154a:	2206      	movs	r2, #6
 802154c:	701a      	strb	r2, [r3, #0]
				break;
 802154e:	e06f      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_TEMP_VALUE_DISPLAY:
			{
				normalConfig.line = 0;
 8021550:	2300      	movs	r3, #0
 8021552:	763b      	strb	r3, [r7, #24]
				if (gos_mutexLock(&mdiMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8021554:	f04f 31ff 	mov.w	r1, #4294967295
 8021558:	4844      	ldr	r0, [pc, #272]	@ (802166c <app_lcdTask+0x33c>)
 802155a:	f017 f879 	bl	8038650 <gos_mutexLock>
 802155e:	4603      	mov	r3, r0
 8021560:	2b55      	cmp	r3, #85	@ 0x55
 8021562:	d111      	bne.n	8021588 <app_lcdTask+0x258>
				{
					temperatureValue = (u16_t)(mdiVariables[MDI_CPU_TEMP].value.floatValue * 10);
 8021564:	4b42      	ldr	r3, [pc, #264]	@ (8021670 <app_lcdTask+0x340>)
 8021566:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 802156a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 802156e:	ee07 3a10 	vmov	s14, r3
 8021572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802157a:	ee17 3a90 	vmov	r3, s15
 802157e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

					(void_t) gos_mutexUnlock(&mdiMutex);
 8021582:	483a      	ldr	r0, [pc, #232]	@ (802166c <app_lcdTask+0x33c>)
 8021584:	f017 f96a 	bl	803885c <gos_mutexUnlock>
				}
				BSP_LCD_HandlerDisplayText(&normalConfig, "Temp.: %u.%u C   ", (temperatureValue / 10), (temperatureValue % 10));
 8021588:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 802158c:	4a39      	ldr	r2, [pc, #228]	@ (8021674 <app_lcdTask+0x344>)
 802158e:	fba2 2303 	umull	r2, r3, r2, r3
 8021592:	08db      	lsrs	r3, r3, #3
 8021594:	b29b      	uxth	r3, r3
 8021596:	461c      	mov	r4, r3
 8021598:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 802159c:	4b35      	ldr	r3, [pc, #212]	@ (8021674 <app_lcdTask+0x344>)
 802159e:	fba3 1302 	umull	r1, r3, r3, r2
 80215a2:	08d9      	lsrs	r1, r3, #3
 80215a4:	460b      	mov	r3, r1
 80215a6:	009b      	lsls	r3, r3, #2
 80215a8:	440b      	add	r3, r1
 80215aa:	005b      	lsls	r3, r3, #1
 80215ac:	1ad3      	subs	r3, r2, r3
 80215ae:	b29b      	uxth	r3, r3
 80215b0:	f107 0018 	add.w	r0, r7, #24
 80215b4:	4622      	mov	r2, r4
 80215b6:	4930      	ldr	r1, [pc, #192]	@ (8021678 <app_lcdTask+0x348>)
 80215b8:	f001 f862 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				gos_taskSleep(1000);
 80215bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80215c0:	f014 fc0e 	bl	8035de0 <gos_taskSleep>
				break;
 80215c4:	e034      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_CPU_USAGE_DISPLAY_INIT:
			{
				shiftConfig.line = 1;
 80215c6:	2301      	movs	r3, #1
 80215c8:	713b      	strb	r3, [r7, #4]
				shiftConfig.periodMs = 300;
 80215ca:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80215ce:	60bb      	str	r3, [r7, #8]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 80215d0:	2302      	movs	r3, #2
 80215d2:	717b      	strb	r3, [r7, #5]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "Overall system CPU usage at the moment.");
 80215d4:	1d3b      	adds	r3, r7, #4
 80215d6:	4929      	ldr	r1, [pc, #164]	@ (802167c <app_lcdTask+0x34c>)
 80215d8:	4618      	mov	r0, r3
 80215da:	f001 f851 	bl	8022680 <BSP_LCD_HandlerDisplayText>

				programState = PROGRAM_CPU_USAGE_VALUE_DISPLAY;
 80215de:	4b15      	ldr	r3, [pc, #84]	@ (8021634 <app_lcdTask+0x304>)
 80215e0:	2208      	movs	r2, #8
 80215e2:	701a      	strb	r2, [r3, #0]
				break;
 80215e4:	e024      	b.n	8021630 <app_lcdTask+0x300>
			}
			case PROGRAM_CPU_USAGE_VALUE_DISPLAY:
			{
				normalConfig.line = 0;
 80215e6:	2300      	movs	r3, #0
 80215e8:	763b      	strb	r3, [r7, #24]
				cpuUse = gos_kernelGetCpuUsage();
 80215ea:	f013 fa4f 	bl	8034a8c <gos_kernelGetCpuUsage>
 80215ee:	4603      	mov	r3, r0
 80215f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
				BSP_LCD_HandlerDisplayText(&normalConfig, "CPU: %u.%02u %%   ", (cpuUse / 100), (cpuUse % 100));
 80215f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80215f8:	4a21      	ldr	r2, [pc, #132]	@ (8021680 <app_lcdTask+0x350>)
 80215fa:	fba2 2303 	umull	r2, r3, r2, r3
 80215fe:	095b      	lsrs	r3, r3, #5
 8021600:	b29b      	uxth	r3, r3
 8021602:	461c      	mov	r4, r3
 8021604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8021608:	4a1d      	ldr	r2, [pc, #116]	@ (8021680 <app_lcdTask+0x350>)
 802160a:	fba2 1203 	umull	r1, r2, r2, r3
 802160e:	0952      	lsrs	r2, r2, #5
 8021610:	2164      	movs	r1, #100	@ 0x64
 8021612:	fb01 f202 	mul.w	r2, r1, r2
 8021616:	1a9b      	subs	r3, r3, r2
 8021618:	b29b      	uxth	r3, r3
 802161a:	f107 0018 	add.w	r0, r7, #24
 802161e:	4622      	mov	r2, r4
 8021620:	4918      	ldr	r1, [pc, #96]	@ (8021684 <app_lcdTask+0x354>)
 8021622:	f001 f82d 	bl	8022680 <BSP_LCD_HandlerDisplayText>
				gos_taskSleep(250);
 8021626:	20fa      	movs	r0, #250	@ 0xfa
 8021628:	f014 fbda 	bl	8035de0 <gos_taskSleep>
				break;
 802162c:	e000      	b.n	8021630 <app_lcdTask+0x300>
			}
			default:
			{
				break;
 802162e:	bf00      	nop
		switch (programState)
 8021630:	e6ba      	b.n	80213a8 <app_lcdTask+0x78>
 8021632:	bf00      	nop
 8021634:	20003340 	.word	0x20003340
 8021638:	0803e2f0 	.word	0x0803e2f0
 802163c:	0803e300 	.word	0x0803e300
 8021640:	0803e304 	.word	0x0803e304
 8021644:	0803e318 	.word	0x0803e318
 8021648:	20000118 	.word	0x20000118
 802164c:	20003344 	.word	0x20003344
 8021650:	0803e32c 	.word	0x0803e32c
 8021654:	0803e340 	.word	0x0803e340
 8021658:	0803e358 	.word	0x0803e358
 802165c:	0803e36c 	.word	0x0803e36c
 8021660:	0803e380 	.word	0x0803e380
 8021664:	0803e3a8 	.word	0x0803e3a8
 8021668:	0803e3f4 	.word	0x0803e3f4
 802166c:	20003350 	.word	0x20003350
 8021670:	200013e4 	.word	0x200013e4
 8021674:	cccccccd 	.word	0xcccccccd
 8021678:	0803e424 	.word	0x0803e424
 802167c:	0803e438 	.word	0x0803e438
 8021680:	51eb851f 	.word	0x51eb851f
 8021684:	0803e460 	.word	0x0803e460

08021688 <gpio_cfgUserButtonCallback>:
		}
	}
}

void_t gpio_cfgUserButtonCallback (void_t)
{
 8021688:	b580      	push	{r7, lr}
 802168a:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	/* Interrupt is privileged */
	if (buttonBlock.buttonXBlocked[APP_USER_BUTTON] == GOS_FALSE)
 802168c:	4b13      	ldr	r3, [pc, #76]	@ (80216dc <gpio_cfgUserButtonCallback+0x54>)
 802168e:	781b      	ldrb	r3, [r3, #0]
 8021690:	2b49      	cmp	r3, #73	@ 0x49
 8021692:	d120      	bne.n	80216d6 <gpio_cfgUserButtonCallback+0x4e>
	{
		buttonBlock.buttonXBlocked[APP_USER_BUTTON] = GOS_TRUE;
 8021694:	4b11      	ldr	r3, [pc, #68]	@ (80216dc <gpio_cfgUserButtonCallback+0x54>)
 8021696:	2236      	movs	r2, #54	@ 0x36
 8021698:	701a      	strb	r2, [r3, #0]

		if (++programState == PROGRAM_STATE_MAX_NUM)
 802169a:	4b11      	ldr	r3, [pc, #68]	@ (80216e0 <gpio_cfgUserButtonCallback+0x58>)
 802169c:	781b      	ldrb	r3, [r3, #0]
 802169e:	3301      	adds	r3, #1
 80216a0:	b2da      	uxtb	r2, r3
 80216a2:	4b0f      	ldr	r3, [pc, #60]	@ (80216e0 <gpio_cfgUserButtonCallback+0x58>)
 80216a4:	701a      	strb	r2, [r3, #0]
 80216a6:	4b0e      	ldr	r3, [pc, #56]	@ (80216e0 <gpio_cfgUserButtonCallback+0x58>)
 80216a8:	781b      	ldrb	r3, [r3, #0]
 80216aa:	2b09      	cmp	r3, #9
 80216ac:	d102      	bne.n	80216b4 <gpio_cfgUserButtonCallback+0x2c>
		{
			programState = PROGRAM_MAIN_IDLE;
 80216ae:	4b0c      	ldr	r3, [pc, #48]	@ (80216e0 <gpio_cfgUserButtonCallback+0x58>)
 80216b0:	2201      	movs	r2, #1
 80216b2:	701a      	strb	r2, [r3, #0]
		}

		gos_taskUnblock(appLcdTask.taskId);
 80216b4:	4b0b      	ldr	r3, [pc, #44]	@ (80216e4 <gpio_cfgUserButtonCallback+0x5c>)
 80216b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80216b8:	4618      	mov	r0, r3
 80216ba:	f014 ffcb 	bl	8036654 <gos_taskUnblock>
		gos_taskWakeup(appLcdTask.taskId);
 80216be:	4b09      	ldr	r3, [pc, #36]	@ (80216e4 <gpio_cfgUserButtonCallback+0x5c>)
 80216c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80216c2:	4618      	mov	r0, r3
 80216c4:	f014 fc1e 	bl	8035f04 <gos_taskWakeup>
		gos_taskResume(appLcdTask.taskId);
 80216c8:	4b06      	ldr	r3, [pc, #24]	@ (80216e4 <gpio_cfgUserButtonCallback+0x5c>)
 80216ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80216cc:	4618      	mov	r0, r3
 80216ce:	f014 fe01 	bl	80362d4 <gos_taskResume>

		(void_t) app_debouncerActivate();
 80216d2:	f7ff fc81 	bl	8020fd8 <app_debouncerActivate>
		//APP_DAC_PlayBeep();
	}
}
 80216d6:	bf00      	nop
 80216d8:	bd80      	pop	{r7, pc}
 80216da:	bf00      	nop
 80216dc:	2000333c 	.word	0x2000333c
 80216e0:	20003340 	.word	0x20003340
 80216e4:	20000118 	.word	0x20000118

080216e8 <app_ledInit>:
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER,
	.taskStackSize      = 0x300
};

gos_result_t app_ledInit (void_t)
{
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b082      	sub	sp, #8
 80216ec:	af00      	add	r7, sp, #0
	gos_result_t ledInitResult = GOS_SUCCESS;
 80216ee:	2355      	movs	r3, #85	@ 0x55
 80216f0:	71fb      	strb	r3, [r7, #7]

	ledInitResult &= gos_taskRegister(&ledTaskDesc, NULL);
 80216f2:	2100      	movs	r1, #0
 80216f4:	4808      	ldr	r0, [pc, #32]	@ (8021718 <app_ledInit+0x30>)
 80216f6:	f014 f9e1 	bl	8035abc <gos_taskRegister>
 80216fa:	4603      	mov	r3, r0
 80216fc:	461a      	mov	r2, r3
 80216fe:	79fb      	ldrb	r3, [r7, #7]
 8021700:	4013      	ands	r3, r2
 8021702:	71fb      	strb	r3, [r7, #7]

	if (ledInitResult != GOS_SUCCESS)
 8021704:	79fb      	ldrb	r3, [r7, #7]
 8021706:	2b55      	cmp	r3, #85	@ 0x55
 8021708:	d001      	beq.n	802170e <app_ledInit+0x26>
	{
		ledInitResult = GOS_ERROR;
 802170a:	23ae      	movs	r3, #174	@ 0xae
 802170c:	71fb      	strb	r3, [r7, #7]
	}

	return ledInitResult;
 802170e:	79fb      	ldrb	r3, [r7, #7]
}
 8021710:	4618      	mov	r0, r3
 8021712:	3708      	adds	r7, #8
 8021714:	46bd      	mov	sp, r7
 8021716:	bd80      	pop	{r7, pc}
 8021718:	20000184 	.word	0x20000184

0802171c <app_ledTask>:

GOS_STATIC void_t app_ledTask (void_t)
{
 802171c:	b580      	push	{r7, lr}
 802171e:	af00      	add	r7, sp, #0
	for (;;)
	{
		(void_t) drv_gpioTgglePin(IO_USER_LED);
 8021720:	2000      	movs	r0, #0
 8021722:	f00d fb91 	bl	802ee48 <drv_gpioTgglePin>
		(void_t) gos_taskSleep(LED_TASK_PERIOD);
 8021726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802172a:	f014 fb59 	bl	8035de0 <gos_taskSleep>
		(void_t) drv_gpioTgglePin(IO_USER_LED);
 802172e:	bf00      	nop
 8021730:	e7f6      	b.n	8021720 <app_ledTask+0x4>
	...

08021734 <app_mdiBdSpecInit>:

/*
 * Function: app_mdiBdSpecInit
 */
gos_result_t app_mdiBdSpecInit (void_t)
{
 8021734:	b580      	push	{r7, lr}
 8021736:	b082      	sub	sp, #8
 8021738:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 802173a:	2355      	movs	r3, #85	@ 0x55
 802173c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	initResult &= gos_mutexInit(&mdiMutex);
 802173e:	480d      	ldr	r0, [pc, #52]	@ (8021774 <app_mdiBdSpecInit+0x40>)
 8021740:	f016 ff6c 	bl	803861c <gos_mutexInit>
 8021744:	4603      	mov	r3, r0
 8021746:	461a      	mov	r2, r3
 8021748:	79fb      	ldrb	r3, [r7, #7]
 802174a:	4013      	ands	r3, r2
 802174c:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_taskRegister(&mdiTaskDesc, NULL);
 802174e:	2100      	movs	r1, #0
 8021750:	4809      	ldr	r0, [pc, #36]	@ (8021778 <app_mdiBdSpecInit+0x44>)
 8021752:	f014 f9b3 	bl	8035abc <gos_taskRegister>
 8021756:	4603      	mov	r3, r0
 8021758:	461a      	mov	r2, r3
 802175a:	79fb      	ldrb	r3, [r7, #7]
 802175c:	4013      	ands	r3, r2
 802175e:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 8021760:	79fb      	ldrb	r3, [r7, #7]
 8021762:	2b55      	cmp	r3, #85	@ 0x55
 8021764:	d001      	beq.n	802176a <app_mdiBdSpecInit+0x36>
	{
		initResult = GOS_ERROR;
 8021766:	23ae      	movs	r3, #174	@ 0xae
 8021768:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 802176a:	79fb      	ldrb	r3, [r7, #7]
}
 802176c:	4618      	mov	r0, r3
 802176e:	3708      	adds	r7, #8
 8021770:	46bd      	mov	sp, r7
 8021772:	bd80      	pop	{r7, pc}
 8021774:	20003350 	.word	0x20003350
 8021778:	200001f0 	.word	0x200001f0

0802177c <app_mdiTask>:

// TODO
GOS_STATIC void_t app_mdiTask (void_t)
{
 802177c:	b580      	push	{r7, lr}
 802177e:	b08c      	sub	sp, #48	@ 0x30
 8021780:	af02      	add	r7, sp, #8
	u32_t   sum1, sum2;

	/*
	 * Function code.
	 */
	(void_t) gos_taskSleep(1500);
 8021782:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8021786:	f014 fb2b 	bl	8035de0 <gos_taskSleep>

	for (;;)
	{
		sum1 = 0;
 802178a:	2300      	movs	r3, #0
 802178c:	627b      	str	r3, [r7, #36]	@ 0x24
		sum2 = 0;
 802178e:	2300      	movs	r3, #0
 8021790:	623b      	str	r3, [r7, #32]

	    for (u16_t i = 0; i < ADC_SAMPLES; ++i)
 8021792:	2300      	movs	r3, #0
 8021794:	83fb      	strh	r3, [r7, #30]
 8021796:	e018      	b.n	80217ca <app_mdiTask+0x4e>
	    {
	    	(void_t) drv_adcGetValueDMA(DRV_ADC_INSTANCE_1, (u32_t*)adcResult, 2, 1000, 10);
 8021798:	1d39      	adds	r1, r7, #4
 802179a:	230a      	movs	r3, #10
 802179c:	9300      	str	r3, [sp, #0]
 802179e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80217a2:	2202      	movs	r2, #2
 80217a4:	2000      	movs	r0, #0
 80217a6:	f00c fbe3 	bl	802df70 <drv_adcGetValueDMA>
	        sum1 += adcResult[0];
 80217aa:	88bb      	ldrh	r3, [r7, #4]
 80217ac:	461a      	mov	r2, r3
 80217ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217b0:	4413      	add	r3, r2
 80217b2:	627b      	str	r3, [r7, #36]	@ 0x24
	        sum2 += adcResult[1];
 80217b4:	88fb      	ldrh	r3, [r7, #6]
 80217b6:	461a      	mov	r2, r3
 80217b8:	6a3b      	ldr	r3, [r7, #32]
 80217ba:	4413      	add	r3, r2
 80217bc:	623b      	str	r3, [r7, #32]
	        gos_taskSleep(1);
 80217be:	2001      	movs	r0, #1
 80217c0:	f014 fb0e 	bl	8035de0 <gos_taskSleep>
	    for (u16_t i = 0; i < ADC_SAMPLES; ++i)
 80217c4:	8bfb      	ldrh	r3, [r7, #30]
 80217c6:	3301      	adds	r3, #1
 80217c8:	83fb      	strh	r3, [r7, #30]
 80217ca:	8bfb      	ldrh	r3, [r7, #30]
 80217cc:	2b63      	cmp	r3, #99	@ 0x63
 80217ce:	d9e3      	bls.n	8021798 <app_mdiTask+0x1c>
	    }

	    vref_avg = sum2 / ADC_SAMPLES;
 80217d0:	6a3b      	ldr	r3, [r7, #32]
 80217d2:	4a51      	ldr	r2, [pc, #324]	@ (8021918 <app_mdiTask+0x19c>)
 80217d4:	fba2 2303 	umull	r2, r3, r2, r3
 80217d8:	095b      	lsrs	r3, r3, #5
 80217da:	ee07 3a90 	vmov	s15, r3
 80217de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80217e2:	edc7 7a06 	vstr	s15, [r7, #24]
	    temp_avg = sum1 / ADC_SAMPLES;
 80217e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217e8:	4a4b      	ldr	r2, [pc, #300]	@ (8021918 <app_mdiTask+0x19c>)
 80217ea:	fba2 2303 	umull	r2, r3, r2, r3
 80217ee:	095b      	lsrs	r3, r3, #5
 80217f0:	ee07 3a90 	vmov	s15, r3
 80217f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80217f8:	edc7 7a05 	vstr	s15, [r7, #20]

		vdda = (float_t) VREFINT_CAL_VREF * (float_t) *VREFINT_CAL_ADDR / vref_avg / 1000;
 80217fc:	4b47      	ldr	r3, [pc, #284]	@ (802191c <app_mdiTask+0x1a0>)
 80217fe:	881b      	ldrh	r3, [r3, #0]
 8021800:	ee07 3a90 	vmov	s15, r3
 8021804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021808:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8021920 <app_mdiTask+0x1a4>
 802180c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8021810:	edd7 7a06 	vldr	s15, [r7, #24]
 8021814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021818:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8021924 <app_mdiTask+0x1a8>
 802181c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021820:	edc7 7a04 	vstr	s15, [r7, #16]
		vref = (float_t) vdda / ADC_RESOLUTION * vref_avg;
 8021824:	ed97 7a04 	vldr	s14, [r7, #16]
 8021828:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8021928 <app_mdiTask+0x1ac>
 802182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021830:	ed97 7a06 	vldr	s14, [r7, #24]
 8021834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021838:	edc7 7a03 	vstr	s15, [r7, #12]

	    temp = (float_t) ((float_t) ((float_t) (TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)
	                           / (float_t) (*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR))
 802183c:	4b3b      	ldr	r3, [pc, #236]	@ (802192c <app_mdiTask+0x1b0>)
 802183e:	881b      	ldrh	r3, [r3, #0]
 8021840:	461a      	mov	r2, r3
 8021842:	4b3b      	ldr	r3, [pc, #236]	@ (8021930 <app_mdiTask+0x1b4>)
 8021844:	881b      	ldrh	r3, [r3, #0]
 8021846:	1ad3      	subs	r3, r2, r3
 8021848:	ee07 3a90 	vmov	s15, r3
 802184c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	    temp = (float_t) ((float_t) ((float_t) (TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)
 8021850:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8021934 <app_mdiTask+0x1b8>
 8021854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	                           * (temp_avg - *TEMPSENSOR_CAL1_ADDR) + TEMPSENSOR_CAL1_TEMP);
 8021858:	4b35      	ldr	r3, [pc, #212]	@ (8021930 <app_mdiTask+0x1b4>)
 802185a:	881b      	ldrh	r3, [r3, #0]
 802185c:	ee07 3a90 	vmov	s15, r3
 8021860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021864:	edd7 6a05 	vldr	s13, [r7, #20]
 8021868:	ee76 7ae7 	vsub.f32	s15, s13, s15
 802186c:	ee67 7a27 	vmul.f32	s15, s14, s15
	    temp = (float_t) ((float_t) ((float_t) (TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)
 8021870:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8021874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021878:	edc7 7a02 	vstr	s15, [r7, #8]

	    if (gos_mutexLock(&mdiMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 802187c:	f04f 31ff 	mov.w	r1, #4294967295
 8021880:	482d      	ldr	r0, [pc, #180]	@ (8021938 <app_mdiTask+0x1bc>)
 8021882:	f016 fee5 	bl	8038650 <gos_mutexLock>
 8021886:	4603      	mov	r3, r0
 8021888:	2b55      	cmp	r3, #85	@ 0x55
 802188a:	d141      	bne.n	8021910 <app_mdiTask+0x194>
	    {
		    mdiVariables[MDI_VDDA].value.floatValue     = roundf(vdda * 100) / 100;
 802188c:	edd7 7a04 	vldr	s15, [r7, #16]
 8021890:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 802193c <app_mdiTask+0x1c0>
 8021894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021898:	eeb0 0a67 	vmov.f32	s0, s15
 802189c:	f01c fce2 	bl	803e264 <roundf>
 80218a0:	eef0 7a40 	vmov.f32	s15, s0
 80218a4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 802193c <app_mdiTask+0x1c0>
 80218a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80218ac:	4b24      	ldr	r3, [pc, #144]	@ (8021940 <app_mdiTask+0x1c4>)
 80218ae:	3311      	adds	r3, #17
 80218b0:	ee16 2a90 	vmov	r2, s13
 80218b4:	601a      	str	r2, [r3, #0]
			mdiVariables[MDI_VREF].value.floatValue     = roundf(vref * 100) / 100;
 80218b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80218ba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 802193c <app_mdiTask+0x1c0>
 80218be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80218c2:	eeb0 0a67 	vmov.f32	s0, s15
 80218c6:	f01c fccd 	bl	803e264 <roundf>
 80218ca:	eef0 7a40 	vmov.f32	s15, s0
 80218ce:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 802193c <app_mdiTask+0x1c0>
 80218d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80218d6:	4b1a      	ldr	r3, [pc, #104]	@ (8021940 <app_mdiTask+0x1c4>)
 80218d8:	3326      	adds	r3, #38	@ 0x26
 80218da:	ee16 2a90 	vmov	r2, s13
 80218de:	601a      	str	r2, [r3, #0]
			mdiVariables[MDI_CPU_TEMP].value.floatValue = roundf(temp * 10) / 10;
 80218e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80218e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80218e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80218ec:	eeb0 0a67 	vmov.f32	s0, s15
 80218f0:	f01c fcb8 	bl	803e264 <roundf>
 80218f4:	eef0 7a40 	vmov.f32	s15, s0
 80218f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80218fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8021900:	4b0f      	ldr	r3, [pc, #60]	@ (8021940 <app_mdiTask+0x1c4>)
 8021902:	333b      	adds	r3, #59	@ 0x3b
 8021904:	ee16 2a90 	vmov	r2, s13
 8021908:	601a      	str	r2, [r3, #0]

			(void_t) gos_mutexUnlock(&mdiMutex);
 802190a:	480b      	ldr	r0, [pc, #44]	@ (8021938 <app_mdiTask+0x1bc>)
 802190c:	f016 ffa6 	bl	803885c <gos_mutexUnlock>
	    }

		(void_t) gos_taskSleep(250);
 8021910:	20fa      	movs	r0, #250	@ 0xfa
 8021912:	f014 fa65 	bl	8035de0 <gos_taskSleep>
		sum1 = 0;
 8021916:	e738      	b.n	802178a <app_mdiTask+0xe>
 8021918:	51eb851f 	.word	0x51eb851f
 802191c:	1fff7a2a 	.word	0x1fff7a2a
 8021920:	454e4000 	.word	0x454e4000
 8021924:	447a0000 	.word	0x447a0000
 8021928:	457ff000 	.word	0x457ff000
 802192c:	1fff7a2e 	.word	0x1fff7a2e
 8021930:	1fff7a2c 	.word	0x1fff7a2c
 8021934:	42a00000 	.word	0x42a00000
 8021938:	20003350 	.word	0x20003350
 802193c:	42c80000 	.word	0x42c80000
 8021940:	200013e4 	.word	0x200013e4

08021944 <app_pdhBdSpecInit>:
	.taskPriority 	= 10,
	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER
};

gos_result_t app_pdhBdSpecInit (void_t)
{
 8021944:	b580      	push	{r7, lr}
 8021946:	b082      	sub	sp, #8
 8021948:	af00      	add	r7, sp, #0
	gos_result_t pdhBdSpecInitRes = GOS_SUCCESS;
 802194a:	2355      	movs	r3, #85	@ 0x55
 802194c:	71fb      	strb	r3, [r7, #7]

	pdhBdSpecInitRes &= drv_25lc640Init((void_t*)&mem01a1_eeprom2);
 802194e:	4811      	ldr	r0, [pc, #68]	@ (8021994 <app_pdhBdSpecInit+0x50>)
 8021950:	f00b feca 	bl	802d6e8 <drv_25lc640Init>
 8021954:	4603      	mov	r3, r0
 8021956:	461a      	mov	r2, r3
 8021958:	79fb      	ldrb	r3, [r7, #7]
 802195a:	4013      	ands	r3, r2
 802195c:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= svl_pdhConfigure(&pdhCfg);
 802195e:	480e      	ldr	r0, [pc, #56]	@ (8021998 <app_pdhBdSpecInit+0x54>)
 8021960:	f011 fbf0 	bl	8033144 <svl_pdhConfigure>
 8021964:	4603      	mov	r3, r0
 8021966:	461a      	mov	r2, r3
 8021968:	79fb      	ldrb	r3, [r7, #7]
 802196a:	4013      	ands	r3, r2
 802196c:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= gos_taskRegister(&pdhTestTask, NULL);
 802196e:	2100      	movs	r1, #0
 8021970:	480a      	ldr	r0, [pc, #40]	@ (802199c <app_pdhBdSpecInit+0x58>)
 8021972:	f014 f8a3 	bl	8035abc <gos_taskRegister>
 8021976:	4603      	mov	r3, r0
 8021978:	461a      	mov	r2, r3
 802197a:	79fb      	ldrb	r3, [r7, #7]
 802197c:	4013      	ands	r3, r2
 802197e:	71fb      	strb	r3, [r7, #7]

	if (pdhBdSpecInitRes != GOS_SUCCESS)
 8021980:	79fb      	ldrb	r3, [r7, #7]
 8021982:	2b55      	cmp	r3, #85	@ 0x55
 8021984:	d001      	beq.n	802198a <app_pdhBdSpecInit+0x46>
		pdhBdSpecInitRes = GOS_ERROR;
 8021986:	23ae      	movs	r3, #174	@ 0xae
 8021988:	71fb      	strb	r3, [r7, #7]

	return pdhBdSpecInitRes;
 802198a:	79fb      	ldrb	r3, [r7, #7]
}
 802198c:	4618      	mov	r0, r3
 802198e:	3708      	adds	r7, #8
 8021990:	46bd      	mov	sp, r7
 8021992:	bd80      	pop	{r7, pc}
 8021994:	2000025c 	.word	0x2000025c
 8021998:	2000031c 	.word	0x2000031c
 802199c:	20000324 	.word	0x20000324

080219a0 <app_pdhTestTask>:

GOS_STATIC void_t app_pdhTestTask (void_t)
{
 80219a0:	b580      	push	{r7, lr}
 80219a2:	b082      	sub	sp, #8
 80219a4:	af00      	add	r7, sp, #0
	u32_t sysTicks = gos_kernelGetSysTicks();
 80219a6:	f013 f865 	bl	8034a74 <gos_kernelGetSysTicks>
 80219aa:	6078      	str	r0, [r7, #4]

	app_pdhBdSpecCheckSoftwareInfo();
 80219ac:	f000 f81c 	bl	80219e8 <app_pdhBdSpecCheckSoftwareInfo>

	for (;;)
	{
		(void_t) gos_taskSleep(50);
 80219b0:	2032      	movs	r0, #50	@ 0x32
 80219b2:	f014 fa15 	bl	8035de0 <gos_taskSleep>

		if (gos_kernelGetSysTicks() - sysTicks >= 1000)
 80219b6:	f013 f85d 	bl	8034a74 <gos_kernelGetSysTicks>
 80219ba:	4602      	mov	r2, r0
 80219bc:	687b      	ldr	r3, [r7, #4]
 80219be:	1ad3      	subs	r3, r2, r3
 80219c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80219c4:	d3f4      	bcc.n	80219b0 <app_pdhTestTask+0x10>
		{
			(void_t) gos_traceTrace(GOS_FALSE, "\r");
 80219c6:	4906      	ldr	r1, [pc, #24]	@ (80219e0 <app_pdhTestTask+0x40>)
 80219c8:	2049      	movs	r0, #73	@ 0x49
 80219ca:	f019 f82b 	bl	803aa24 <gos_traceTrace>
			(void_t) gos_traceTrace(GOS_TRUE, "");
 80219ce:	4905      	ldr	r1, [pc, #20]	@ (80219e4 <app_pdhTestTask+0x44>)
 80219d0:	2036      	movs	r0, #54	@ 0x36
 80219d2:	f019 f827 	bl	803aa24 <gos_traceTrace>
			sysTicks = gos_kernelGetSysTicks();
 80219d6:	f013 f84d 	bl	8034a74 <gos_kernelGetSysTicks>
 80219da:	6078      	str	r0, [r7, #4]
		(void_t) gos_taskSleep(50);
 80219dc:	e7e8      	b.n	80219b0 <app_pdhTestTask+0x10>
 80219de:	bf00      	nop
 80219e0:	0803e474 	.word	0x0803e474
 80219e4:	0803e478 	.word	0x0803e478

080219e8 <app_pdhBdSpecCheckSoftwareInfo>:
		}
	}
}

GOS_STATIC void_t app_pdhBdSpecCheckSoftwareInfo (void_t)
{
 80219e8:	b580      	push	{r7, lr}
 80219ea:	b0ae      	sub	sp, #184	@ 0xb8
 80219ec:	af00      	add	r7, sp, #0
	u32_t  swInfoCrc     = 0u;
 80219ee:	2300      	movs	r3, #0
 80219f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	u32_t  testSwInfoCrc = 0u;
 80219f4:	2300      	movs	r3, #0
 80219f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	u32_t  libVerCrc     = 0u;
 80219fa:	2300      	movs	r3, #0
 80219fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	u32_t  testLibVerCrc = 0u;
 8021a00:	2300      	movs	r3, #0
 8021a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	u32_t  bldCrc        = 0u;
 8021a06:	2300      	movs	r3, #0
 8021a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	bool_t forceReset    = GOS_FALSE;
 8021a0c:	2349      	movs	r3, #73	@ 0x49
 8021a0e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	svl_pdhSwVerInfo_t libVerInfo = {0};
 8021a12:	463b      	mov	r3, r7
 8021a14:	22a0      	movs	r2, #160	@ 0xa0
 8021a16:	2100      	movs	r1, #0
 8021a18:	4618      	mov	r0, r3
 8021a1a:	f01a fb53 	bl	803c0c4 <memset>

	(void_t) svl_pdhGetLibVersion(&libVerInfo);
 8021a1e:	463b      	mov	r3, r7
 8021a20:	4618      	mov	r0, r3
 8021a22:	f011 fbb5 	bl	8033190 <svl_pdhGetLibVersion>
	(void_t) svl_pdhGetSwInfo(&testSwInfo);
 8021a26:	4845      	ldr	r0, [pc, #276]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021a28:	f011 fc34 	bl	8033294 <svl_pdhGetSwInfo>

	(void_t) drv_crcGetCrc32((u8_t*)testSwInfo.bldBinaryInfo.startAddress, testSwInfo.bldBinaryInfo.size, &bldCrc);
 8021a2c:	4b43      	ldr	r3, [pc, #268]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021a2e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8021a32:	4618      	mov	r0, r3
 8021a34:	4b41      	ldr	r3, [pc, #260]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021a36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8021a3a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8021a3e:	4619      	mov	r1, r3
 8021a40:	f00c fbac 	bl	802e19c <drv_crcGetCrc32>

	if (bldCrc != testSwInfo.bldBinaryInfo.crc)
 8021a44:	4b3d      	ldr	r3, [pc, #244]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021a46:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8021a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8021a4e:	429a      	cmp	r2, r3
 8021a50:	d016      	beq.n	8021a80 <app_pdhBdSpecCheckSoftwareInfo+0x98>
	{
		(void_t) memset((void_t*)&testSwInfo.bldBinaryInfo, 0, sizeof(testSwInfo.bldBinaryInfo));
 8021a52:	220c      	movs	r2, #12
 8021a54:	2100      	movs	r1, #0
 8021a56:	483a      	ldr	r0, [pc, #232]	@ (8021b40 <app_pdhBdSpecCheckSoftwareInfo+0x158>)
 8021a58:	f01a fb34 	bl	803c0c4 <memset>
		(void_t) memset((void_t*)&testSwInfo.bldSwVerInfo, 0, sizeof(testSwInfo.bldSwVerInfo));
 8021a5c:	22a0      	movs	r2, #160	@ 0xa0
 8021a5e:	2100      	movs	r1, #0
 8021a60:	4838      	ldr	r0, [pc, #224]	@ (8021b44 <app_pdhBdSpecCheckSoftwareInfo+0x15c>)
 8021a62:	f01a fb2f 	bl	803c0c4 <memset>
		(void_t) memset((void_t*)&testSwInfo.bldLibVerInfo, 0, sizeof(testSwInfo.bldLibVerInfo));
 8021a66:	22a0      	movs	r2, #160	@ 0xa0
 8021a68:	2100      	movs	r1, #0
 8021a6a:	4834      	ldr	r0, [pc, #208]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021a6c:	f01a fb2a 	bl	803c0c4 <memset>
		(void_t) memset((void_t*)&testSwInfo.bldOsInfo, 0, sizeof(testSwInfo.bldOsInfo));
 8021a70:	2204      	movs	r2, #4
 8021a72:	2100      	movs	r1, #0
 8021a74:	4834      	ldr	r0, [pc, #208]	@ (8021b48 <app_pdhBdSpecCheckSoftwareInfo+0x160>)
 8021a76:	f01a fb25 	bl	803c0c4 <memset>
		forceReset = GOS_TRUE;
 8021a7a:	2336      	movs	r3, #54	@ 0x36
 8021a7c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	else
	{
		// Bootloader data OK.
	}

	gos_libGetBuildDate(&appSwVerInfo.date.years, &appSwVerInfo.date.months, &appSwVerInfo.date.days);
 8021a80:	4a32      	ldr	r2, [pc, #200]	@ (8021b4c <app_pdhBdSpecCheckSoftwareInfo+0x164>)
 8021a82:	4933      	ldr	r1, [pc, #204]	@ (8021b50 <app_pdhBdSpecCheckSoftwareInfo+0x168>)
 8021a84:	4833      	ldr	r0, [pc, #204]	@ (8021b54 <app_pdhBdSpecCheckSoftwareInfo+0x16c>)
 8021a86:	f00b fb8f 	bl	802d1a8 <gos_libGetBuildDate>

	(void_t) drv_crcGetCrc32((u8_t*)&appSwVerInfo, sizeof(appSwVerInfo), &swInfoCrc);
 8021a8a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8021a8e:	461a      	mov	r2, r3
 8021a90:	21a0      	movs	r1, #160	@ 0xa0
 8021a92:	4831      	ldr	r0, [pc, #196]	@ (8021b58 <app_pdhBdSpecCheckSoftwareInfo+0x170>)
 8021a94:	f00c fb82 	bl	802e19c <drv_crcGetCrc32>
	(void_t) drv_crcGetCrc32((u8_t*)&testSwInfo.appSwVerInfo, sizeof(testSwInfo.appSwVerInfo), &testSwInfoCrc);
 8021a98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8021a9c:	461a      	mov	r2, r3
 8021a9e:	21a0      	movs	r1, #160	@ 0xa0
 8021aa0:	482e      	ldr	r0, [pc, #184]	@ (8021b5c <app_pdhBdSpecCheckSoftwareInfo+0x174>)
 8021aa2:	f00c fb7b 	bl	802e19c <drv_crcGetCrc32>

	(void_t) drv_crcGetCrc32((u8_t*)&libVerInfo, sizeof(libVerInfo), &libVerCrc);
 8021aa6:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8021aaa:	463b      	mov	r3, r7
 8021aac:	21a0      	movs	r1, #160	@ 0xa0
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f00c fb74 	bl	802e19c <drv_crcGetCrc32>
	(void_t) drv_crcGetCrc32((u8_t*)&testSwInfo.appLibVerInfo, sizeof(testSwInfo.appLibVerInfo), &testLibVerCrc);
 8021ab4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8021ab8:	461a      	mov	r2, r3
 8021aba:	21a0      	movs	r1, #160	@ 0xa0
 8021abc:	4828      	ldr	r0, [pc, #160]	@ (8021b60 <app_pdhBdSpecCheckSoftwareInfo+0x178>)
 8021abe:	f00c fb6d 	bl	802e19c <drv_crcGetCrc32>

	// Check if application information has been modified.
	if (forceReset == GOS_TRUE || (swInfoCrc != testSwInfoCrc) || (libVerCrc != testLibVerCrc) ||
 8021ac2:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8021ac6:	2b36      	cmp	r3, #54	@ 0x36
 8021ac8:	d015      	beq.n	8021af6 <app_pdhBdSpecCheckSoftwareInfo+0x10e>
 8021aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8021ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8021ad2:	429a      	cmp	r2, r3
 8021ad4:	d10f      	bne.n	8021af6 <app_pdhBdSpecCheckSoftwareInfo+0x10e>
 8021ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8021ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8021ade:	429a      	cmp	r2, r3
 8021ae0:	d109      	bne.n	8021af6 <app_pdhBdSpecCheckSoftwareInfo+0x10e>
		(testSwInfo.appOsInfo.major != GOS_VERSION_MAJOR) || (testSwInfo.appOsInfo.minor != GOS_VERSION_MINOR))
 8021ae2:	4b16      	ldr	r3, [pc, #88]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021ae4:	f8b3 3290 	ldrh.w	r3, [r3, #656]	@ 0x290
	if (forceReset == GOS_TRUE || (swInfoCrc != testSwInfoCrc) || (libVerCrc != testLibVerCrc) ||
 8021ae8:	2b01      	cmp	r3, #1
 8021aea:	d104      	bne.n	8021af6 <app_pdhBdSpecCheckSoftwareInfo+0x10e>
		(testSwInfo.appOsInfo.major != GOS_VERSION_MAJOR) || (testSwInfo.appOsInfo.minor != GOS_VERSION_MINOR))
 8021aec:	4b13      	ldr	r3, [pc, #76]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021aee:	f8b3 3292 	ldrh.w	r3, [r3, #658]	@ 0x292
 8021af2:	2b01      	cmp	r3, #1
 8021af4:	d01d      	beq.n	8021b32 <app_pdhBdSpecCheckSoftwareInfo+0x14a>
	{
		(void_t) svl_pdhGetLibVersion(&testSwInfo.appLibVerInfo);
 8021af6:	481a      	ldr	r0, [pc, #104]	@ (8021b60 <app_pdhBdSpecCheckSoftwareInfo+0x178>)
 8021af8:	f011 fb4a 	bl	8033190 <svl_pdhGetLibVersion>
		(void_t) memcpy((void_t*)&testSwInfo.appOsInfo, (void_t*)&appOsInfo, sizeof(svl_pdhOsInfo_t));
 8021afc:	4b19      	ldr	r3, [pc, #100]	@ (8021b64 <app_pdhBdSpecCheckSoftwareInfo+0x17c>)
 8021afe:	681b      	ldr	r3, [r3, #0]
 8021b00:	4a0e      	ldr	r2, [pc, #56]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021b02:	f8c2 3290 	str.w	r3, [r2, #656]	@ 0x290
		(void_t) memcpy((void_t*)&testSwInfo.appSwVerInfo, (void_t*)&appSwVerInfo, sizeof(svl_pdhSwVerInfo_t));
 8021b06:	4b0d      	ldr	r3, [pc, #52]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021b08:	4a13      	ldr	r2, [pc, #76]	@ (8021b58 <app_pdhBdSpecCheckSoftwareInfo+0x170>)
 8021b0a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8021b0e:	4611      	mov	r1, r2
 8021b10:	22a0      	movs	r2, #160	@ 0xa0
 8021b12:	4618      	mov	r0, r3
 8021b14:	f01a fb5d 	bl	803c1d2 <memcpy>
		(void_t) svl_pdhSetSwInfo(&testSwInfo);
 8021b18:	4808      	ldr	r0, [pc, #32]	@ (8021b3c <app_pdhBdSpecCheckSoftwareInfo+0x154>)
 8021b1a:	f011 fc9b 	bl	8033454 <svl_pdhSetSwInfo>

		(void_t) gos_traceTrace(GOS_TRUE, "Software info updated. Restarting device...\r\n");
 8021b1e:	4912      	ldr	r1, [pc, #72]	@ (8021b68 <app_pdhBdSpecCheckSoftwareInfo+0x180>)
 8021b20:	2036      	movs	r0, #54	@ 0x36
 8021b22:	f018 ff7f 	bl	803aa24 <gos_traceTrace>
		(void_t) gos_taskSleep(1000);
 8021b26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8021b2a:	f014 f959 	bl	8035de0 <gos_taskSleep>
		gos_kernelReset();
 8021b2e:	f012 ffbf 	bl	8034ab0 <gos_kernelReset>
	}
	else
	{
		// Application information is up to date.
	}
}
 8021b32:	bf00      	nop
 8021b34:	37b8      	adds	r7, #184	@ 0xb8
 8021b36:	46bd      	mov	sp, r7
 8021b38:	bd80      	pop	{r7, pc}
 8021b3a:	bf00      	nop
 8021b3c:	20003354 	.word	0x20003354
 8021b40:	20003498 	.word	0x20003498
 8021b44:	200033f4 	.word	0x200033f4
 8021b48:	20003494 	.word	0x20003494
 8021b4c:	20000287 	.word	0x20000287
 8021b50:	20000289 	.word	0x20000289
 8021b54:	2000028a 	.word	0x2000028a
 8021b58:	2000027c 	.word	0x2000027c
 8021b5c:	20003544 	.word	0x20003544
 8021b60:	200034a4 	.word	0x200034a4
 8021b64:	20000278 	.word	0x20000278
 8021b68:	0803e47c 	.word	0x0803e47c

08021b6c <app_pdhBdSpecRead>:

GOS_STATIC gos_result_t app_pdhBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 8021b6c:	b580      	push	{r7, lr}
 8021b6e:	b084      	sub	sp, #16
 8021b70:	af00      	add	r7, sp, #0
 8021b72:	60f8      	str	r0, [r7, #12]
 8021b74:	60b9      	str	r1, [r7, #8]
 8021b76:	4613      	mov	r3, r2
 8021b78:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Read((void_t*)&mem01a1_eeprom2, address, pData, size);
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	b299      	uxth	r1, r3
 8021b7e:	88fb      	ldrh	r3, [r7, #6]
 8021b80:	68ba      	ldr	r2, [r7, #8]
 8021b82:	4804      	ldr	r0, [pc, #16]	@ (8021b94 <app_pdhBdSpecRead+0x28>)
 8021b84:	f00b fdde 	bl	802d744 <drv_25lc640Read>
 8021b88:	4603      	mov	r3, r0
}
 8021b8a:	4618      	mov	r0, r3
 8021b8c:	3710      	adds	r7, #16
 8021b8e:	46bd      	mov	sp, r7
 8021b90:	bd80      	pop	{r7, pc}
 8021b92:	bf00      	nop
 8021b94:	2000025c 	.word	0x2000025c

08021b98 <app_pdhBdSpecWrite>:

GOS_STATIC gos_result_t app_pdhBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 8021b98:	b580      	push	{r7, lr}
 8021b9a:	b084      	sub	sp, #16
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	60f8      	str	r0, [r7, #12]
 8021ba0:	60b9      	str	r1, [r7, #8]
 8021ba2:	4613      	mov	r3, r2
 8021ba4:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Write((void_t*)&mem01a1_eeprom2, address, pData, size);
 8021ba6:	68fb      	ldr	r3, [r7, #12]
 8021ba8:	b299      	uxth	r1, r3
 8021baa:	88fb      	ldrh	r3, [r7, #6]
 8021bac:	68ba      	ldr	r2, [r7, #8]
 8021bae:	4804      	ldr	r0, [pc, #16]	@ (8021bc0 <app_pdhBdSpecWrite+0x28>)
 8021bb0:	f00b fee2 	bl	802d978 <drv_25lc640Write>
 8021bb4:	4603      	mov	r3, r0
}
 8021bb6:	4618      	mov	r0, r3
 8021bb8:	3710      	adds	r7, #16
 8021bba:	46bd      	mov	sp, r7
 8021bbc:	bd80      	pop	{r7, pc}
 8021bbe:	bf00      	nop
 8021bc0:	2000025c 	.word	0x2000025c

08021bc4 <app_sdhBdSpecInit>:
	.readFunction  = app_sdhBdSpecRead,
	.writeFunction = app_sdhBdSpecWrite
};

gos_result_t app_sdhBdSpecInit (void_t)
{
 8021bc4:	b580      	push	{r7, lr}
 8021bc6:	b082      	sub	sp, #8
 8021bc8:	af00      	add	r7, sp, #0
	gos_result_t sdhBdSpecInitRes = GOS_SUCCESS;
 8021bca:	2355      	movs	r3, #85	@ 0x55
 8021bcc:	71fb      	strb	r3, [r7, #7]

	sdhBdSpecInitRes &= drv_w25q64Init((void_t*)&mem01a1flash);
 8021bce:	480d      	ldr	r0, [pc, #52]	@ (8021c04 <app_sdhBdSpecInit+0x40>)
 8021bd0:	f00f fd66 	bl	80316a0 <drv_w25q64Init>
 8021bd4:	4603      	mov	r3, r0
 8021bd6:	461a      	mov	r2, r3
 8021bd8:	79fb      	ldrb	r3, [r7, #7]
 8021bda:	4013      	ands	r3, r2
 8021bdc:	71fb      	strb	r3, [r7, #7]
	sdhBdSpecInitRes &= svl_sdhConfigure(&sdhCfg);
 8021bde:	480a      	ldr	r0, [pc, #40]	@ (8021c08 <app_sdhBdSpecInit+0x44>)
 8021be0:	f012 f82e 	bl	8033c40 <svl_sdhConfigure>
 8021be4:	4603      	mov	r3, r0
 8021be6:	461a      	mov	r2, r3
 8021be8:	79fb      	ldrb	r3, [r7, #7]
 8021bea:	4013      	ands	r3, r2
 8021bec:	71fb      	strb	r3, [r7, #7]

	if (sdhBdSpecInitRes != GOS_SUCCESS)
 8021bee:	79fb      	ldrb	r3, [r7, #7]
 8021bf0:	2b55      	cmp	r3, #85	@ 0x55
 8021bf2:	d001      	beq.n	8021bf8 <app_sdhBdSpecInit+0x34>
		sdhBdSpecInitRes = GOS_ERROR;
 8021bf4:	23ae      	movs	r3, #174	@ 0xae
 8021bf6:	71fb      	strb	r3, [r7, #7]

	return sdhBdSpecInitRes;
 8021bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8021bfa:	4618      	mov	r0, r3
 8021bfc:	3708      	adds	r7, #8
 8021bfe:	46bd      	mov	sp, r7
 8021c00:	bd80      	pop	{r7, pc}
 8021c02:	bf00      	nop
 8021c04:	20000390 	.word	0x20000390
 8021c08:	200003ac 	.word	0x200003ac

08021c0c <app_sdhBdSpecRead>:

GOS_STATIC gos_result_t app_sdhBdSpecRead (u32_t address, u8_t* pData, u32_t size)
{
 8021c0c:	b580      	push	{r7, lr}
 8021c0e:	b084      	sub	sp, #16
 8021c10:	af00      	add	r7, sp, #0
 8021c12:	60f8      	str	r0, [r7, #12]
 8021c14:	60b9      	str	r1, [r7, #8]
 8021c16:	607a      	str	r2, [r7, #4]
	drv_w25q64ReadData((void_t*)&mem01a1flash, address, pData, size);
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	68ba      	ldr	r2, [r7, #8]
 8021c1c:	68f9      	ldr	r1, [r7, #12]
 8021c1e:	4808      	ldr	r0, [pc, #32]	@ (8021c40 <app_sdhBdSpecRead+0x34>)
 8021c20:	f00f fd6c 	bl	80316fc <drv_w25q64ReadData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_READ) == 0u)
 8021c24:	4b06      	ldr	r3, [pc, #24]	@ (8021c40 <app_sdhBdSpecRead+0x34>)
 8021c26:	699b      	ldr	r3, [r3, #24]
 8021c28:	f003 0308 	and.w	r3, r3, #8
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	d101      	bne.n	8021c34 <app_sdhBdSpecRead+0x28>
	{
		return GOS_SUCCESS;
 8021c30:	2355      	movs	r3, #85	@ 0x55
 8021c32:	e000      	b.n	8021c36 <app_sdhBdSpecRead+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8021c34:	23ae      	movs	r3, #174	@ 0xae
	}
}
 8021c36:	4618      	mov	r0, r3
 8021c38:	3710      	adds	r7, #16
 8021c3a:	46bd      	mov	sp, r7
 8021c3c:	bd80      	pop	{r7, pc}
 8021c3e:	bf00      	nop
 8021c40:	20000390 	.word	0x20000390

08021c44 <app_sdhBdSpecWrite>:

GOS_STATIC gos_result_t app_sdhBdSpecWrite (u32_t address, u8_t* pData, u32_t size)
{
 8021c44:	b580      	push	{r7, lr}
 8021c46:	b084      	sub	sp, #16
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	60f8      	str	r0, [r7, #12]
 8021c4c:	60b9      	str	r1, [r7, #8]
 8021c4e:	607a      	str	r2, [r7, #4]
	drv_w25q64WriteData((void_t*)&mem01a1flash, address, pData, size);
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	68ba      	ldr	r2, [r7, #8]
 8021c54:	68f9      	ldr	r1, [r7, #12]
 8021c56:	4808      	ldr	r0, [pc, #32]	@ (8021c78 <app_sdhBdSpecWrite+0x34>)
 8021c58:	f00f fda6 	bl	80317a8 <drv_w25q64WriteData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_WRITE) == 0u)
 8021c5c:	4b06      	ldr	r3, [pc, #24]	@ (8021c78 <app_sdhBdSpecWrite+0x34>)
 8021c5e:	699b      	ldr	r3, [r3, #24]
 8021c60:	f003 0310 	and.w	r3, r3, #16
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	d101      	bne.n	8021c6c <app_sdhBdSpecWrite+0x28>
	{
		return GOS_SUCCESS;
 8021c68:	2355      	movs	r3, #85	@ 0x55
 8021c6a:	e000      	b.n	8021c6e <app_sdhBdSpecWrite+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8021c6c:	23ae      	movs	r3, #174	@ 0xae
	}
}
 8021c6e:	4618      	mov	r0, r3
 8021c70:	3710      	adds	r7, #16
 8021c72:	46bd      	mov	sp, r7
 8021c74:	bd80      	pop	{r7, pc}
 8021c76:	bf00      	nop
 8021c78:	20000390 	.word	0x20000390

08021c7c <app_tftInit>:
	.taskPriority 	    = 80,
	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER
};

gos_result_t app_tftInit (void_t)
{
 8021c7c:	b580      	push	{r7, lr}
 8021c7e:	b082      	sub	sp, #8
 8021c80:	af00      	add	r7, sp, #0
	gos_result_t tftInitResult = GOS_SUCCESS;
 8021c82:	2355      	movs	r3, #85	@ 0x55
 8021c84:	71fb      	strb	r3, [r7, #7]

	tftInitResult &= gos_taskRegister(&tftTaskDesc, NULL);
 8021c86:	2100      	movs	r1, #0
 8021c88:	4808      	ldr	r0, [pc, #32]	@ (8021cac <app_tftInit+0x30>)
 8021c8a:	f013 ff17 	bl	8035abc <gos_taskRegister>
 8021c8e:	4603      	mov	r3, r0
 8021c90:	461a      	mov	r2, r3
 8021c92:	79fb      	ldrb	r3, [r7, #7]
 8021c94:	4013      	ands	r3, r2
 8021c96:	71fb      	strb	r3, [r7, #7]

	if (tftInitResult != GOS_SUCCESS)
 8021c98:	79fb      	ldrb	r3, [r7, #7]
 8021c9a:	2b55      	cmp	r3, #85	@ 0x55
 8021c9c:	d001      	beq.n	8021ca2 <app_tftInit+0x26>
	{
		tftInitResult = GOS_ERROR;
 8021c9e:	23ae      	movs	r3, #174	@ 0xae
 8021ca0:	71fb      	strb	r3, [r7, #7]
	}

	return tftInitResult;
 8021ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8021ca4:	4618      	mov	r0, r3
 8021ca6:	3708      	adds	r7, #8
 8021ca8:	46bd      	mov	sp, r7
 8021caa:	bd80      	pop	{r7, pc}
 8021cac:	20000ed4 	.word	0x20000ed4

08021cb0 <APP_TFT_Task>:


GOS_STATIC void_t APP_TFT_Task (void_t)
{
 8021cb0:	b5b0      	push	{r4, r5, r7, lr}
 8021cb2:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8021cb6:	af04      	add	r7, sp, #16
	/*
	 * Local variables.
	 */
	u32_t           lastTempTick = 0;
 8021cb8:	2300      	movs	r3, #0
 8021cba:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
	u32_t           lastTimeTick = 0;
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
	u32_t           lastCpuTick  = 0;
 8021cc4:	2300      	movs	r3, #0
 8021cc6:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
	u32_t           lastMonitoringTick = 0;
 8021cca:	2300      	movs	r3, #0
 8021ccc:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
	svl_pdhSwInfo_t swInfo       = {0};
 8021cd0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021cd4:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021cd8:	4618      	mov	r0, r3
 8021cda:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8021cde:	461a      	mov	r2, r3
 8021ce0:	2100      	movs	r1, #0
 8021ce2:	f01a f9ef 	bl	803c0c4 <memset>

	/*
	 * Function code.
	 */
	label.backColor = ILI9341_WHITE;
 8021ce6:	4b95      	ldr	r3, [pc, #596]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021ce8:	881a      	ldrh	r2, [r3, #0]
 8021cea:	4b95      	ldr	r3, [pc, #596]	@ (8021f40 <APP_TFT_Task+0x290>)
 8021cec:	815a      	strh	r2, [r3, #10]
	label.foreColor = ILI9341_BLACK;
 8021cee:	4b95      	ldr	r3, [pc, #596]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021cf0:	881a      	ldrh	r2, [r3, #0]
 8021cf2:	4b93      	ldr	r3, [pc, #588]	@ (8021f40 <APP_TFT_Task+0x290>)
 8021cf4:	811a      	strh	r2, [r3, #8]

	okButton.backColor = ILI9341_WHITE;
 8021cf6:	4b91      	ldr	r3, [pc, #580]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021cf8:	881a      	ldrh	r2, [r3, #0]
 8021cfa:	4b93      	ldr	r3, [pc, #588]	@ (8021f48 <APP_TFT_Task+0x298>)
 8021cfc:	815a      	strh	r2, [r3, #10]
	okButton.foreColor = ILI9341_BLACK;
 8021cfe:	4b91      	ldr	r3, [pc, #580]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d00:	881a      	ldrh	r2, [r3, #0]
 8021d02:	4b91      	ldr	r3, [pc, #580]	@ (8021f48 <APP_TFT_Task+0x298>)
 8021d04:	811a      	strh	r2, [r3, #8]

	resetButton.backColor = ILI9341_WHITE;
 8021d06:	4b8d      	ldr	r3, [pc, #564]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021d08:	881a      	ldrh	r2, [r3, #0]
 8021d0a:	4b90      	ldr	r3, [pc, #576]	@ (8021f4c <APP_TFT_Task+0x29c>)
 8021d0c:	815a      	strh	r2, [r3, #10]
	resetButton.foreColor = ILI9341_BLACK;
 8021d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d10:	881a      	ldrh	r2, [r3, #0]
 8021d12:	4b8e      	ldr	r3, [pc, #568]	@ (8021f4c <APP_TFT_Task+0x29c>)
 8021d14:	811a      	strh	r2, [r3, #8]

	projVerLabel.backColor = ILI9341_OLIVE;
 8021d16:	4b8e      	ldr	r3, [pc, #568]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021d18:	881a      	ldrh	r2, [r3, #0]
 8021d1a:	4b8e      	ldr	r3, [pc, #568]	@ (8021f54 <APP_TFT_Task+0x2a4>)
 8021d1c:	815a      	strh	r2, [r3, #10]
	projVerLabel.foreColor = ILI9341_BLACK;
 8021d1e:	4b89      	ldr	r3, [pc, #548]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d20:	881a      	ldrh	r2, [r3, #0]
 8021d22:	4b8c      	ldr	r3, [pc, #560]	@ (8021f54 <APP_TFT_Task+0x2a4>)
 8021d24:	811a      	strh	r2, [r3, #8]
	projVerLabel.yTop = 20 + 10;
 8021d26:	4b8b      	ldr	r3, [pc, #556]	@ (8021f54 <APP_TFT_Task+0x2a4>)
 8021d28:	221e      	movs	r2, #30
 8021d2a:	805a      	strh	r2, [r3, #2]

	projDateLabel.backColor = ILI9341_OLIVE;
 8021d2c:	4b88      	ldr	r3, [pc, #544]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021d2e:	881a      	ldrh	r2, [r3, #0]
 8021d30:	4b89      	ldr	r3, [pc, #548]	@ (8021f58 <APP_TFT_Task+0x2a8>)
 8021d32:	815a      	strh	r2, [r3, #10]
	projDateLabel.foreColor = ILI9341_BLACK;
 8021d34:	4b83      	ldr	r3, [pc, #524]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d36:	881a      	ldrh	r2, [r3, #0]
 8021d38:	4b87      	ldr	r3, [pc, #540]	@ (8021f58 <APP_TFT_Task+0x2a8>)
 8021d3a:	811a      	strh	r2, [r3, #8]
	projDateLabel.yTop = projVerLabel.yTop + 15;
 8021d3c:	4b85      	ldr	r3, [pc, #532]	@ (8021f54 <APP_TFT_Task+0x2a4>)
 8021d3e:	885b      	ldrh	r3, [r3, #2]
 8021d40:	330f      	adds	r3, #15
 8021d42:	b29a      	uxth	r2, r3
 8021d44:	4b84      	ldr	r3, [pc, #528]	@ (8021f58 <APP_TFT_Task+0x2a8>)
 8021d46:	805a      	strh	r2, [r3, #2]

	timeLabel.backColor = ILI9341_OLIVE;
 8021d48:	4b81      	ldr	r3, [pc, #516]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021d4a:	881a      	ldrh	r2, [r3, #0]
 8021d4c:	4b83      	ldr	r3, [pc, #524]	@ (8021f5c <APP_TFT_Task+0x2ac>)
 8021d4e:	815a      	strh	r2, [r3, #10]
	timeLabel.foreColor = ILI9341_BLACK;
 8021d50:	4b7c      	ldr	r3, [pc, #496]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d52:	881a      	ldrh	r2, [r3, #0]
 8021d54:	4b81      	ldr	r3, [pc, #516]	@ (8021f5c <APP_TFT_Task+0x2ac>)
 8021d56:	811a      	strh	r2, [r3, #8]
	timeLabel.yTop = projDateLabel.yTop + 15;
 8021d58:	4b7f      	ldr	r3, [pc, #508]	@ (8021f58 <APP_TFT_Task+0x2a8>)
 8021d5a:	885b      	ldrh	r3, [r3, #2]
 8021d5c:	330f      	adds	r3, #15
 8021d5e:	b29a      	uxth	r2, r3
 8021d60:	4b7e      	ldr	r3, [pc, #504]	@ (8021f5c <APP_TFT_Task+0x2ac>)
 8021d62:	805a      	strh	r2, [r3, #2]

	upTimeLabel.backColor = ILI9341_OLIVE;
 8021d64:	4b7a      	ldr	r3, [pc, #488]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021d66:	881a      	ldrh	r2, [r3, #0]
 8021d68:	4b7d      	ldr	r3, [pc, #500]	@ (8021f60 <APP_TFT_Task+0x2b0>)
 8021d6a:	815a      	strh	r2, [r3, #10]
	upTimeLabel.foreColor = ILI9341_BLACK;
 8021d6c:	4b75      	ldr	r3, [pc, #468]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d6e:	881a      	ldrh	r2, [r3, #0]
 8021d70:	4b7b      	ldr	r3, [pc, #492]	@ (8021f60 <APP_TFT_Task+0x2b0>)
 8021d72:	811a      	strh	r2, [r3, #8]
	upTimeLabel.yTop = timeLabel.yTop + 15;
 8021d74:	4b79      	ldr	r3, [pc, #484]	@ (8021f5c <APP_TFT_Task+0x2ac>)
 8021d76:	885b      	ldrh	r3, [r3, #2]
 8021d78:	330f      	adds	r3, #15
 8021d7a:	b29a      	uxth	r2, r3
 8021d7c:	4b78      	ldr	r3, [pc, #480]	@ (8021f60 <APP_TFT_Task+0x2b0>)
 8021d7e:	805a      	strh	r2, [r3, #2]

	tempLabel.backColor = ILI9341_OLIVE;
 8021d80:	4b73      	ldr	r3, [pc, #460]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021d82:	881a      	ldrh	r2, [r3, #0]
 8021d84:	4b77      	ldr	r3, [pc, #476]	@ (8021f64 <APP_TFT_Task+0x2b4>)
 8021d86:	815a      	strh	r2, [r3, #10]
	tempLabel.foreColor = ILI9341_BLACK;
 8021d88:	4b6e      	ldr	r3, [pc, #440]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021d8a:	881a      	ldrh	r2, [r3, #0]
 8021d8c:	4b75      	ldr	r3, [pc, #468]	@ (8021f64 <APP_TFT_Task+0x2b4>)
 8021d8e:	811a      	strh	r2, [r3, #8]
	tempLabel.yTop = upTimeLabel.yTop + 15;
 8021d90:	4b73      	ldr	r3, [pc, #460]	@ (8021f60 <APP_TFT_Task+0x2b0>)
 8021d92:	885b      	ldrh	r3, [r3, #2]
 8021d94:	330f      	adds	r3, #15
 8021d96:	b29a      	uxth	r2, r3
 8021d98:	4b72      	ldr	r3, [pc, #456]	@ (8021f64 <APP_TFT_Task+0x2b4>)
 8021d9a:	805a      	strh	r2, [r3, #2]

	cpuLabel.backColor = ILI9341_OLIVE;
 8021d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021d9e:	881a      	ldrh	r2, [r3, #0]
 8021da0:	4b71      	ldr	r3, [pc, #452]	@ (8021f68 <APP_TFT_Task+0x2b8>)
 8021da2:	815a      	strh	r2, [r3, #10]
	cpuLabel.foreColor = ILI9341_BLACK;
 8021da4:	4b67      	ldr	r3, [pc, #412]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021da6:	881a      	ldrh	r2, [r3, #0]
 8021da8:	4b6f      	ldr	r3, [pc, #444]	@ (8021f68 <APP_TFT_Task+0x2b8>)
 8021daa:	811a      	strh	r2, [r3, #8]
	cpuLabel.yTop = tempLabel.yTop + 15;
 8021dac:	4b6d      	ldr	r3, [pc, #436]	@ (8021f64 <APP_TFT_Task+0x2b4>)
 8021dae:	885b      	ldrh	r3, [r3, #2]
 8021db0:	330f      	adds	r3, #15
 8021db2:	b29a      	uxth	r2, r3
 8021db4:	4b6c      	ldr	r3, [pc, #432]	@ (8021f68 <APP_TFT_Task+0x2b8>)
 8021db6:	805a      	strh	r2, [r3, #2]

	popupWindow.backColor = ILI9341_WHITE;
 8021db8:	4b60      	ldr	r3, [pc, #384]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021dba:	881a      	ldrh	r2, [r3, #0]
 8021dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8021f6c <APP_TFT_Task+0x2bc>)
 8021dbe:	815a      	strh	r2, [r3, #10]
	statusWindow.backColor = ILI9341_OLIVE;
 8021dc0:	4b63      	ldr	r3, [pc, #396]	@ (8021f50 <APP_TFT_Task+0x2a0>)
 8021dc2:	881a      	ldrh	r2, [r3, #0]
 8021dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021dc6:	815a      	strh	r2, [r3, #10]
	monitoringWindow.backColor = ILI9341_WHITE;
 8021dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021dca:	881a      	ldrh	r2, [r3, #0]
 8021dcc:	4b69      	ldr	r3, [pc, #420]	@ (8021f74 <APP_TFT_Task+0x2c4>)
 8021dce:	815a      	strh	r2, [r3, #10]

	// Low-level initializations.
	(void_t) ili9341_init(isoLandscape, itsSupported, itnNormalized);
 8021dd0:	2201      	movs	r2, #1
 8021dd2:	2101      	movs	r1, #1
 8021dd4:	2001      	movs	r0, #1
 8021dd6:	f001 fac5 	bl	8023364 <ili9341_init>
	(void_t) g_initGraphicsDriver();
 8021dda:	f002 fda1 	bl	8024920 <g_initGraphicsDriver>

	// Add buttons to popupWindow.
	g_windowAddButton(&popupWindow, &okButton);
 8021dde:	495a      	ldr	r1, [pc, #360]	@ (8021f48 <APP_TFT_Task+0x298>)
 8021de0:	4862      	ldr	r0, [pc, #392]	@ (8021f6c <APP_TFT_Task+0x2bc>)
 8021de2:	f003 f9c1 	bl	8025168 <g_windowAddButton>
	g_windowAddButton(&popupWindow, &resetButton);
 8021de6:	4959      	ldr	r1, [pc, #356]	@ (8021f4c <APP_TFT_Task+0x29c>)
 8021de8:	4860      	ldr	r0, [pc, #384]	@ (8021f6c <APP_TFT_Task+0x2bc>)
 8021dea:	f003 f9bd 	bl	8025168 <g_windowAddButton>

	// Add label to popupWindow.
	g_windowAddLabel(&popupWindow, &label);
 8021dee:	4954      	ldr	r1, [pc, #336]	@ (8021f40 <APP_TFT_Task+0x290>)
 8021df0:	485e      	ldr	r0, [pc, #376]	@ (8021f6c <APP_TFT_Task+0x2bc>)
 8021df2:	f003 f9df 	bl	80251b4 <g_windowAddLabel>

	// Register popupWindow.
	g_registerWindow(&popupWindow);
 8021df6:	485d      	ldr	r0, [pc, #372]	@ (8021f6c <APP_TFT_Task+0x2bc>)
 8021df8:	f002 fdaa 	bl	8024950 <g_registerWindow>

	// Add labels to status window.
	g_windowAddLabel(&statusWindow, &projVerLabel);
 8021dfc:	4955      	ldr	r1, [pc, #340]	@ (8021f54 <APP_TFT_Task+0x2a4>)
 8021dfe:	485c      	ldr	r0, [pc, #368]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e00:	f003 f9d8 	bl	80251b4 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &projDateLabel);
 8021e04:	4954      	ldr	r1, [pc, #336]	@ (8021f58 <APP_TFT_Task+0x2a8>)
 8021e06:	485a      	ldr	r0, [pc, #360]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e08:	f003 f9d4 	bl	80251b4 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &timeLabel);
 8021e0c:	4953      	ldr	r1, [pc, #332]	@ (8021f5c <APP_TFT_Task+0x2ac>)
 8021e0e:	4858      	ldr	r0, [pc, #352]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e10:	f003 f9d0 	bl	80251b4 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &upTimeLabel);
 8021e14:	4952      	ldr	r1, [pc, #328]	@ (8021f60 <APP_TFT_Task+0x2b0>)
 8021e16:	4856      	ldr	r0, [pc, #344]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e18:	f003 f9cc 	bl	80251b4 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &tempLabel);
 8021e1c:	4951      	ldr	r1, [pc, #324]	@ (8021f64 <APP_TFT_Task+0x2b4>)
 8021e1e:	4854      	ldr	r0, [pc, #336]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e20:	f003 f9c8 	bl	80251b4 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &cpuLabel);
 8021e24:	4950      	ldr	r1, [pc, #320]	@ (8021f68 <APP_TFT_Task+0x2b8>)
 8021e26:	4852      	ldr	r0, [pc, #328]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e28:	f003 f9c4 	bl	80251b4 <g_windowAddLabel>

	// Register status window.
	g_registerWindow(&statusWindow);
 8021e2c:	4850      	ldr	r0, [pc, #320]	@ (8021f70 <APP_TFT_Task+0x2c0>)
 8021e2e:	f002 fd8f 	bl	8024950 <g_registerWindow>

	svl_pdhGetSwInfo(&swInfo);
 8021e32:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8021e36:	4618      	mov	r0, r3
 8021e38:	f011 fa2c 	bl	8033294 <svl_pdhGetSwInfo>
	sprintf(labelText, TEXT_SW_VER"%02d.%02d.%02d",
			swInfo.appSwVerInfo.major,
 8021e3c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021e40:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021e44:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
	sprintf(labelText, TEXT_SW_VER"%02d.%02d.%02d",
 8021e48:	461a      	mov	r2, r3
			swInfo.appSwVerInfo.minor,
 8021e4a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021e4e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021e52:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
	sprintf(labelText, TEXT_SW_VER"%02d.%02d.%02d",
 8021e56:	4619      	mov	r1, r3
			swInfo.appSwVerInfo.build
 8021e58:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021e5c:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021e60:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
	sprintf(labelText, TEXT_SW_VER"%02d.%02d.%02d",
 8021e64:	9300      	str	r3, [sp, #0]
 8021e66:	460b      	mov	r3, r1
 8021e68:	4943      	ldr	r1, [pc, #268]	@ (8021f78 <APP_TFT_Task+0x2c8>)
 8021e6a:	4844      	ldr	r0, [pc, #272]	@ (8021f7c <APP_TFT_Task+0x2cc>)
 8021e6c:	f01a f8a6 	bl	803bfbc <siprintf>
		);
	g_labelSetText(&projVerLabel, labelText);
 8021e70:	4942      	ldr	r1, [pc, #264]	@ (8021f7c <APP_TFT_Task+0x2cc>)
 8021e72:	4838      	ldr	r0, [pc, #224]	@ (8021f54 <APP_TFT_Task+0x2a4>)
 8021e74:	f002 ff52 	bl	8024d1c <g_labelSetText>

	sprintf(labelText, TEXT_SW_DATE"%04d-%02d-%02d",
			swInfo.appSwVerInfo.date.years,
 8021e78:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021e7c:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021e80:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
	sprintf(labelText, TEXT_SW_DATE"%04d-%02d-%02d",
 8021e84:	461a      	mov	r2, r3
			swInfo.appSwVerInfo.date.months,
 8021e86:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021e8a:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021e8e:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
	sprintf(labelText, TEXT_SW_DATE"%04d-%02d-%02d",
 8021e92:	4619      	mov	r1, r3
			swInfo.appSwVerInfo.date.days
 8021e94:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021e98:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8021e9c:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 8021ea0:	b29b      	uxth	r3, r3
	sprintf(labelText, TEXT_SW_DATE"%04d-%02d-%02d",
 8021ea2:	9300      	str	r3, [sp, #0]
 8021ea4:	460b      	mov	r3, r1
 8021ea6:	4936      	ldr	r1, [pc, #216]	@ (8021f80 <APP_TFT_Task+0x2d0>)
 8021ea8:	4834      	ldr	r0, [pc, #208]	@ (8021f7c <APP_TFT_Task+0x2cc>)
 8021eaa:	f01a f887 	bl	803bfbc <siprintf>
		);
	g_labelSetText(&projDateLabel, labelText);
 8021eae:	4933      	ldr	r1, [pc, #204]	@ (8021f7c <APP_TFT_Task+0x2cc>)
 8021eb0:	4829      	ldr	r0, [pc, #164]	@ (8021f58 <APP_TFT_Task+0x2a8>)
 8021eb2:	f002 ff33 	bl	8024d1c <g_labelSetText>

	// Initialize monitoring window.
	gos_tid_t currentId;
	u16_t numOfTasks;
	u16_t yOffset = 20+10+15;
 8021eb6:	232d      	movs	r3, #45	@ 0x2d
 8021eb8:	f8a7 331e 	strh.w	r3, [r7, #798]	@ 0x31e
	gos_taskDescriptor_t taskData;

	monitoringHeaderLabels[0].backColor = ILI9341_WHITE;
 8021ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021ebe:	881a      	ldrh	r2, [r3, #0]
 8021ec0:	4b30      	ldr	r3, [pc, #192]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021ec2:	815a      	strh	r2, [r3, #10]
	monitoringHeaderLabels[0].foreColor = ILI9341_BLACK;
 8021ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021ec6:	881a      	ldrh	r2, [r3, #0]
 8021ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021eca:	811a      	strh	r2, [r3, #8]

	monitoringHeaderLabels[1].backColor = ILI9341_WHITE;
 8021ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021ece:	881a      	ldrh	r2, [r3, #0]
 8021ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	monitoringHeaderLabels[1].foreColor = ILI9341_BLACK;
 8021ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021ed8:	881a      	ldrh	r2, [r3, #0]
 8021eda:	4b2a      	ldr	r3, [pc, #168]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021edc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

	monitoringHeaderLabels[2].backColor = ILI9341_WHITE;
 8021ee0:	4b16      	ldr	r3, [pc, #88]	@ (8021f3c <APP_TFT_Task+0x28c>)
 8021ee2:	881a      	ldrh	r2, [r3, #0]
 8021ee4:	4b27      	ldr	r3, [pc, #156]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021ee6:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	monitoringHeaderLabels[2].foreColor = ILI9341_BLACK;
 8021eea:	4b16      	ldr	r3, [pc, #88]	@ (8021f44 <APP_TFT_Task+0x294>)
 8021eec:	881a      	ldrh	r2, [r3, #0]
 8021eee:	4b25      	ldr	r3, [pc, #148]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021ef0:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8

	(void_t) g_windowAddLabel(&monitoringWindow, &monitoringHeaderLabels[0]);
 8021ef4:	4923      	ldr	r1, [pc, #140]	@ (8021f84 <APP_TFT_Task+0x2d4>)
 8021ef6:	481f      	ldr	r0, [pc, #124]	@ (8021f74 <APP_TFT_Task+0x2c4>)
 8021ef8:	f003 f95c 	bl	80251b4 <g_windowAddLabel>
	(void_t) g_windowAddLabel(&monitoringWindow, &monitoringHeaderLabels[1]);
 8021efc:	4922      	ldr	r1, [pc, #136]	@ (8021f88 <APP_TFT_Task+0x2d8>)
 8021efe:	481d      	ldr	r0, [pc, #116]	@ (8021f74 <APP_TFT_Task+0x2c4>)
 8021f00:	f003 f958 	bl	80251b4 <g_windowAddLabel>
	(void_t) g_windowAddLabel(&monitoringWindow, &monitoringHeaderLabels[2]);
 8021f04:	4921      	ldr	r1, [pc, #132]	@ (8021f8c <APP_TFT_Task+0x2dc>)
 8021f06:	481b      	ldr	r0, [pc, #108]	@ (8021f74 <APP_TFT_Task+0x2c4>)
 8021f08:	f003 f954 	bl	80251b4 <g_windowAddLabel>

	(void_t) gos_taskGetNumber(&numOfTasks);
 8021f0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8021f10:	4618      	mov	r0, r3
 8021f12:	f015 faed 	bl	80374f0 <gos_taskGetNumber>
	(void_t) gos_taskGetCurrentId(&currentId);
 8021f16:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8021f1a:	4618      	mov	r0, r3
 8021f1c:	f015 f9ac 	bl	8037278 <gos_taskGetCurrentId>
	(void_t) gos_taskAddPrivilege(currentId, GOS_TASK_PRIVILEGE_KERNEL);
 8021f20:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8021f24:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8021f28:	881b      	ldrh	r3, [r3, #0]
 8021f2a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8021f2e:	4618      	mov	r0, r3
 8021f30:	f014 ff96 	bl	8036e60 <gos_taskAddPrivilege>

	for (u16_t i = 0; i < numOfTasks && yOffset < (320-15); i++)
 8021f34:	2300      	movs	r3, #0
 8021f36:	f8a7 331c 	strh.w	r3, [r7, #796]	@ 0x31c
 8021f3a:	e182      	b.n	8022242 <APP_TFT_Task+0x592>
 8021f3c:	080407b4 	.word	0x080407b4
 8021f40:	20000424 	.word	0x20000424
 8021f44:	080407aa 	.word	0x080407aa
 8021f48:	200003b4 	.word	0x200003b4
 8021f4c:	200003ec 	.word	0x200003ec
 8021f50:	080407ac 	.word	0x080407ac
 8021f54:	20000c00 	.word	0x20000c00
 8021f58:	20000c50 	.word	0x20000c50
 8021f5c:	20000ca0 	.word	0x20000ca0
 8021f60:	20000cf0 	.word	0x20000cf0
 8021f64:	20000d40 	.word	0x20000d40
 8021f68:	20000d90 	.word	0x20000d90
 8021f6c:	20000474 	.word	0x20000474
 8021f70:	200006f8 	.word	0x200006f8
 8021f74:	2000097c 	.word	0x2000097c
 8021f78:	0803e4ac 	.word	0x0803e4ac
 8021f7c:	2000378c 	.word	0x2000378c
 8021f80:	0803e4d0 	.word	0x0803e4d0
 8021f84:	20000de4 	.word	0x20000de4
 8021f88:	20000e34 	.word	0x20000e34
 8021f8c:	20000e84 	.word	0x20000e84
	{
		(void_t) gos_taskGetDataByIndex(i, &taskData);
 8021f90:	463a      	mov	r2, r7
 8021f92:	f8b7 331c 	ldrh.w	r3, [r7, #796]	@ 0x31c
 8021f96:	4611      	mov	r1, r2
 8021f98:	4618      	mov	r0, r3
 8021f9a:	f015 fa37 	bl	803740c <gos_taskGetDataByIndex>

		taskIdLabels[i].width = LABEL_AUTO_WIDTH;
 8021f9e:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8021fa2:	49cd      	ldr	r1, [pc, #820]	@ (80222d8 <APP_TFT_Task+0x628>)
 8021fa4:	4613      	mov	r3, r2
 8021fa6:	009b      	lsls	r3, r3, #2
 8021fa8:	4413      	add	r3, r2
 8021faa:	011b      	lsls	r3, r3, #4
 8021fac:	440b      	add	r3, r1
 8021fae:	3304      	adds	r3, #4
 8021fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021fb4:	801a      	strh	r2, [r3, #0]
		taskIdLabels[i].height = LABEL_AUTO_HEIGHT;
 8021fb6:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8021fba:	49c7      	ldr	r1, [pc, #796]	@ (80222d8 <APP_TFT_Task+0x628>)
 8021fbc:	4613      	mov	r3, r2
 8021fbe:	009b      	lsls	r3, r3, #2
 8021fc0:	4413      	add	r3, r2
 8021fc2:	011b      	lsls	r3, r3, #4
 8021fc4:	440b      	add	r3, r1
 8021fc6:	3306      	adds	r3, #6
 8021fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021fcc:	801a      	strh	r2, [r3, #0]
		taskIdLabels[i].xTop = 10;
 8021fce:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8021fd2:	49c1      	ldr	r1, [pc, #772]	@ (80222d8 <APP_TFT_Task+0x628>)
 8021fd4:	4613      	mov	r3, r2
 8021fd6:	009b      	lsls	r3, r3, #2
 8021fd8:	4413      	add	r3, r2
 8021fda:	011b      	lsls	r3, r3, #4
 8021fdc:	440b      	add	r3, r1
 8021fde:	220a      	movs	r2, #10
 8021fe0:	801a      	strh	r2, [r3, #0]
		taskIdLabels[i].yTop = yOffset;
 8021fe2:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8021fe6:	49bc      	ldr	r1, [pc, #752]	@ (80222d8 <APP_TFT_Task+0x628>)
 8021fe8:	4613      	mov	r3, r2
 8021fea:	009b      	lsls	r3, r3, #2
 8021fec:	4413      	add	r3, r2
 8021fee:	011b      	lsls	r3, r3, #4
 8021ff0:	440b      	add	r3, r1
 8021ff2:	3302      	adds	r3, #2
 8021ff4:	f8b7 231e 	ldrh.w	r2, [r7, #798]	@ 0x31e
 8021ff8:	801a      	strh	r2, [r3, #0]
		taskIdLabels[i].backColor = ILI9341_WHITE;
 8021ffa:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8021ffe:	4bb7      	ldr	r3, [pc, #732]	@ (80222dc <APP_TFT_Task+0x62c>)
 8022000:	8818      	ldrh	r0, [r3, #0]
 8022002:	49b5      	ldr	r1, [pc, #724]	@ (80222d8 <APP_TFT_Task+0x628>)
 8022004:	4613      	mov	r3, r2
 8022006:	009b      	lsls	r3, r3, #2
 8022008:	4413      	add	r3, r2
 802200a:	011b      	lsls	r3, r3, #4
 802200c:	440b      	add	r3, r1
 802200e:	330a      	adds	r3, #10
 8022010:	4602      	mov	r2, r0
 8022012:	801a      	strh	r2, [r3, #0]
		taskIdLabels[i].foreColor = ILI9341_BLACK;
 8022014:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022018:	4bb1      	ldr	r3, [pc, #708]	@ (80222e0 <APP_TFT_Task+0x630>)
 802201a:	8818      	ldrh	r0, [r3, #0]
 802201c:	49ae      	ldr	r1, [pc, #696]	@ (80222d8 <APP_TFT_Task+0x628>)
 802201e:	4613      	mov	r3, r2
 8022020:	009b      	lsls	r3, r3, #2
 8022022:	4413      	add	r3, r2
 8022024:	011b      	lsls	r3, r3, #4
 8022026:	440b      	add	r3, r1
 8022028:	3308      	adds	r3, #8
 802202a:	4602      	mov	r2, r0
 802202c:	801a      	strh	r2, [r3, #0]
		sprintf(taskIdLabels[i].text, "0x%04x", taskData.taskId);
 802202e:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022032:	4613      	mov	r3, r2
 8022034:	009b      	lsls	r3, r3, #2
 8022036:	4413      	add	r3, r2
 8022038:	011b      	lsls	r3, r3, #4
 802203a:	3308      	adds	r3, #8
 802203c:	4aa6      	ldr	r2, [pc, #664]	@ (80222d8 <APP_TFT_Task+0x628>)
 802203e:	4413      	add	r3, r2
 8022040:	1d98      	adds	r0, r3, #6
 8022042:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8022046:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 802204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802204c:	461a      	mov	r2, r3
 802204e:	49a5      	ldr	r1, [pc, #660]	@ (80222e4 <APP_TFT_Task+0x634>)
 8022050:	f019 ffb4 	bl	803bfbc <siprintf>
    	// Add label to window.
    	g_windowAddLabel(&monitoringWindow, &taskIdLabels[i]);
 8022054:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022058:	4613      	mov	r3, r2
 802205a:	009b      	lsls	r3, r3, #2
 802205c:	4413      	add	r3, r2
 802205e:	011b      	lsls	r3, r3, #4
 8022060:	4a9d      	ldr	r2, [pc, #628]	@ (80222d8 <APP_TFT_Task+0x628>)
 8022062:	4413      	add	r3, r2
 8022064:	4619      	mov	r1, r3
 8022066:	48a0      	ldr	r0, [pc, #640]	@ (80222e8 <APP_TFT_Task+0x638>)
 8022068:	f003 f8a4 	bl	80251b4 <g_windowAddLabel>

        monitoringTaskNameLabels[i].width  = LABEL_AUTO_WIDTH;
 802206c:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022070:	499e      	ldr	r1, [pc, #632]	@ (80222ec <APP_TFT_Task+0x63c>)
 8022072:	4613      	mov	r3, r2
 8022074:	009b      	lsls	r3, r3, #2
 8022076:	4413      	add	r3, r2
 8022078:	011b      	lsls	r3, r3, #4
 802207a:	440b      	add	r3, r1
 802207c:	3304      	adds	r3, #4
 802207e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022082:	801a      	strh	r2, [r3, #0]
        monitoringTaskNameLabels[i].height = LABEL_AUTO_HEIGHT;
 8022084:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022088:	4998      	ldr	r1, [pc, #608]	@ (80222ec <APP_TFT_Task+0x63c>)
 802208a:	4613      	mov	r3, r2
 802208c:	009b      	lsls	r3, r3, #2
 802208e:	4413      	add	r3, r2
 8022090:	011b      	lsls	r3, r3, #4
 8022092:	440b      	add	r3, r1
 8022094:	3306      	adds	r3, #6
 8022096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802209a:	801a      	strh	r2, [r3, #0]
        monitoringTaskNameLabels[i].xTop = 75;
 802209c:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 80220a0:	4992      	ldr	r1, [pc, #584]	@ (80222ec <APP_TFT_Task+0x63c>)
 80220a2:	4613      	mov	r3, r2
 80220a4:	009b      	lsls	r3, r3, #2
 80220a6:	4413      	add	r3, r2
 80220a8:	011b      	lsls	r3, r3, #4
 80220aa:	440b      	add	r3, r1
 80220ac:	224b      	movs	r2, #75	@ 0x4b
 80220ae:	801a      	strh	r2, [r3, #0]
        monitoringTaskNameLabels[i].yTop = yOffset;
 80220b0:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 80220b4:	498d      	ldr	r1, [pc, #564]	@ (80222ec <APP_TFT_Task+0x63c>)
 80220b6:	4613      	mov	r3, r2
 80220b8:	009b      	lsls	r3, r3, #2
 80220ba:	4413      	add	r3, r2
 80220bc:	011b      	lsls	r3, r3, #4
 80220be:	440b      	add	r3, r1
 80220c0:	3302      	adds	r3, #2
 80220c2:	f8b7 231e 	ldrh.w	r2, [r7, #798]	@ 0x31e
 80220c6:	801a      	strh	r2, [r3, #0]
        monitoringTaskNameLabels[i].backColor = ILI9341_WHITE;
 80220c8:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 80220cc:	4b83      	ldr	r3, [pc, #524]	@ (80222dc <APP_TFT_Task+0x62c>)
 80220ce:	8818      	ldrh	r0, [r3, #0]
 80220d0:	4986      	ldr	r1, [pc, #536]	@ (80222ec <APP_TFT_Task+0x63c>)
 80220d2:	4613      	mov	r3, r2
 80220d4:	009b      	lsls	r3, r3, #2
 80220d6:	4413      	add	r3, r2
 80220d8:	011b      	lsls	r3, r3, #4
 80220da:	440b      	add	r3, r1
 80220dc:	330a      	adds	r3, #10
 80220de:	4602      	mov	r2, r0
 80220e0:	801a      	strh	r2, [r3, #0]
        monitoringTaskNameLabels[i].foreColor = ILI9341_BLACK;
 80220e2:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 80220e6:	4b7e      	ldr	r3, [pc, #504]	@ (80222e0 <APP_TFT_Task+0x630>)
 80220e8:	8818      	ldrh	r0, [r3, #0]
 80220ea:	4980      	ldr	r1, [pc, #512]	@ (80222ec <APP_TFT_Task+0x63c>)
 80220ec:	4613      	mov	r3, r2
 80220ee:	009b      	lsls	r3, r3, #2
 80220f0:	4413      	add	r3, r2
 80220f2:	011b      	lsls	r3, r3, #4
 80220f4:	440b      	add	r3, r1
 80220f6:	3308      	adds	r3, #8
 80220f8:	4602      	mov	r2, r0
 80220fa:	801a      	strh	r2, [r3, #0]
        strcpy(monitoringTaskNameLabels[i].text, taskData.taskName);
 80220fc:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022100:	4613      	mov	r3, r2
 8022102:	009b      	lsls	r3, r3, #2
 8022104:	4413      	add	r3, r2
 8022106:	011b      	lsls	r3, r3, #4
 8022108:	3308      	adds	r3, #8
 802210a:	4a78      	ldr	r2, [pc, #480]	@ (80222ec <APP_TFT_Task+0x63c>)
 802210c:	4413      	add	r3, r2
 802210e:	1d9a      	adds	r2, r3, #6
 8022110:	463b      	mov	r3, r7
 8022112:	330a      	adds	r3, #10
 8022114:	4619      	mov	r1, r3
 8022116:	4610      	mov	r0, r2
 8022118:	f01a f853 	bl	803c1c2 <strcpy>
    	// Add label to window.
    	g_windowAddLabel(&monitoringWindow, &monitoringTaskNameLabels[i]);
 802211c:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022120:	4613      	mov	r3, r2
 8022122:	009b      	lsls	r3, r3, #2
 8022124:	4413      	add	r3, r2
 8022126:	011b      	lsls	r3, r3, #4
 8022128:	4a70      	ldr	r2, [pc, #448]	@ (80222ec <APP_TFT_Task+0x63c>)
 802212a:	4413      	add	r3, r2
 802212c:	4619      	mov	r1, r3
 802212e:	486e      	ldr	r0, [pc, #440]	@ (80222e8 <APP_TFT_Task+0x638>)
 8022130:	f003 f840 	bl	80251b4 <g_windowAddLabel>

    	cpuUsageLabels[i].width = LABEL_AUTO_WIDTH;
 8022134:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022138:	496d      	ldr	r1, [pc, #436]	@ (80222f0 <APP_TFT_Task+0x640>)
 802213a:	4613      	mov	r3, r2
 802213c:	009b      	lsls	r3, r3, #2
 802213e:	4413      	add	r3, r2
 8022140:	011b      	lsls	r3, r3, #4
 8022142:	440b      	add	r3, r1
 8022144:	3304      	adds	r3, #4
 8022146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802214a:	801a      	strh	r2, [r3, #0]
    	cpuUsageLabels[i].height = LABEL_AUTO_HEIGHT;
 802214c:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022150:	4967      	ldr	r1, [pc, #412]	@ (80222f0 <APP_TFT_Task+0x640>)
 8022152:	4613      	mov	r3, r2
 8022154:	009b      	lsls	r3, r3, #2
 8022156:	4413      	add	r3, r2
 8022158:	011b      	lsls	r3, r3, #4
 802215a:	440b      	add	r3, r1
 802215c:	3306      	adds	r3, #6
 802215e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022162:	801a      	strh	r2, [r3, #0]
    	cpuUsageLabels[i].xTop = 225;
 8022164:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022168:	4961      	ldr	r1, [pc, #388]	@ (80222f0 <APP_TFT_Task+0x640>)
 802216a:	4613      	mov	r3, r2
 802216c:	009b      	lsls	r3, r3, #2
 802216e:	4413      	add	r3, r2
 8022170:	011b      	lsls	r3, r3, #4
 8022172:	440b      	add	r3, r1
 8022174:	22e1      	movs	r2, #225	@ 0xe1
 8022176:	801a      	strh	r2, [r3, #0]
    	cpuUsageLabels[i].yTop = yOffset;
 8022178:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 802217c:	495c      	ldr	r1, [pc, #368]	@ (80222f0 <APP_TFT_Task+0x640>)
 802217e:	4613      	mov	r3, r2
 8022180:	009b      	lsls	r3, r3, #2
 8022182:	4413      	add	r3, r2
 8022184:	011b      	lsls	r3, r3, #4
 8022186:	440b      	add	r3, r1
 8022188:	3302      	adds	r3, #2
 802218a:	f8b7 231e 	ldrh.w	r2, [r7, #798]	@ 0x31e
 802218e:	801a      	strh	r2, [r3, #0]
    	cpuUsageLabels[i].backColor = ILI9341_WHITE;
 8022190:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022194:	4b51      	ldr	r3, [pc, #324]	@ (80222dc <APP_TFT_Task+0x62c>)
 8022196:	8818      	ldrh	r0, [r3, #0]
 8022198:	4955      	ldr	r1, [pc, #340]	@ (80222f0 <APP_TFT_Task+0x640>)
 802219a:	4613      	mov	r3, r2
 802219c:	009b      	lsls	r3, r3, #2
 802219e:	4413      	add	r3, r2
 80221a0:	011b      	lsls	r3, r3, #4
 80221a2:	440b      	add	r3, r1
 80221a4:	330a      	adds	r3, #10
 80221a6:	4602      	mov	r2, r0
 80221a8:	801a      	strh	r2, [r3, #0]
    	cpuUsageLabels[i].foreColor = ILI9341_BLACK;
 80221aa:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 80221ae:	4b4c      	ldr	r3, [pc, #304]	@ (80222e0 <APP_TFT_Task+0x630>)
 80221b0:	8818      	ldrh	r0, [r3, #0]
 80221b2:	494f      	ldr	r1, [pc, #316]	@ (80222f0 <APP_TFT_Task+0x640>)
 80221b4:	4613      	mov	r3, r2
 80221b6:	009b      	lsls	r3, r3, #2
 80221b8:	4413      	add	r3, r2
 80221ba:	011b      	lsls	r3, r3, #4
 80221bc:	440b      	add	r3, r1
 80221be:	3308      	adds	r3, #8
 80221c0:	4602      	mov	r2, r0
 80221c2:	801a      	strh	r2, [r3, #0]
		sprintf(cpuUsageLabels[i].text, "%u.%02u %%  ", taskData.taskCpuUsage / 100, taskData.taskCpuUsage % 100);
 80221c4:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 80221c8:	4613      	mov	r3, r2
 80221ca:	009b      	lsls	r3, r3, #2
 80221cc:	4413      	add	r3, r2
 80221ce:	011b      	lsls	r3, r3, #4
 80221d0:	3308      	adds	r3, #8
 80221d2:	4a47      	ldr	r2, [pc, #284]	@ (80222f0 <APP_TFT_Task+0x640>)
 80221d4:	4413      	add	r3, r2
 80221d6:	1d98      	adds	r0, r3, #6
 80221d8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80221dc:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80221e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80221e4:	4a43      	ldr	r2, [pc, #268]	@ (80222f4 <APP_TFT_Task+0x644>)
 80221e6:	fba2 2303 	umull	r2, r3, r2, r3
 80221ea:	095b      	lsrs	r3, r3, #5
 80221ec:	b29b      	uxth	r3, r3
 80221ee:	461c      	mov	r4, r3
 80221f0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80221f4:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80221f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80221fc:	4a3d      	ldr	r2, [pc, #244]	@ (80222f4 <APP_TFT_Task+0x644>)
 80221fe:	fba2 1203 	umull	r1, r2, r2, r3
 8022202:	0952      	lsrs	r2, r2, #5
 8022204:	2164      	movs	r1, #100	@ 0x64
 8022206:	fb01 f202 	mul.w	r2, r1, r2
 802220a:	1a9b      	subs	r3, r3, r2
 802220c:	b29b      	uxth	r3, r3
 802220e:	4622      	mov	r2, r4
 8022210:	4939      	ldr	r1, [pc, #228]	@ (80222f8 <APP_TFT_Task+0x648>)
 8022212:	f019 fed3 	bl	803bfbc <siprintf>
    	// Add label to window.
    	g_windowAddLabel(&monitoringWindow, &cpuUsageLabels[i]);
 8022216:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 802221a:	4613      	mov	r3, r2
 802221c:	009b      	lsls	r3, r3, #2
 802221e:	4413      	add	r3, r2
 8022220:	011b      	lsls	r3, r3, #4
 8022222:	4a33      	ldr	r2, [pc, #204]	@ (80222f0 <APP_TFT_Task+0x640>)
 8022224:	4413      	add	r3, r2
 8022226:	4619      	mov	r1, r3
 8022228:	482f      	ldr	r0, [pc, #188]	@ (80222e8 <APP_TFT_Task+0x638>)
 802222a:	f002 ffc3 	bl	80251b4 <g_windowAddLabel>

        yOffset += 15;
 802222e:	f8b7 331e 	ldrh.w	r3, [r7, #798]	@ 0x31e
 8022232:	330f      	adds	r3, #15
 8022234:	f8a7 331e 	strh.w	r3, [r7, #798]	@ 0x31e
	for (u16_t i = 0; i < numOfTasks && yOffset < (320-15); i++)
 8022238:	f8b7 331c 	ldrh.w	r3, [r7, #796]	@ 0x31c
 802223c:	3301      	adds	r3, #1
 802223e:	f8a7 331c 	strh.w	r3, [r7, #796]	@ 0x31c
 8022242:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8022246:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 802224a:	881b      	ldrh	r3, [r3, #0]
 802224c:	f8b7 231c 	ldrh.w	r2, [r7, #796]	@ 0x31c
 8022250:	429a      	cmp	r2, r3
 8022252:	d205      	bcs.n	8022260 <APP_TFT_Task+0x5b0>
 8022254:	f8b7 331e 	ldrh.w	r3, [r7, #798]	@ 0x31e
 8022258:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 802225c:	f67f ae98 	bls.w	8021f90 <APP_TFT_Task+0x2e0>
	}

	(void_t) gos_taskRemovePrivilege(currentId, GOS_TASK_PRIVILEGE_KERNEL);
 8022260:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8022264:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8022268:	881b      	ldrh	r3, [r3, #0]
 802226a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 802226e:	4618      	mov	r0, r3
 8022270:	f014 fe6e 	bl	8036f50 <gos_taskRemovePrivilege>

	// Register monitoring.
	g_registerWindow(&monitoringWindow);
 8022274:	481c      	ldr	r0, [pc, #112]	@ (80222e8 <APP_TFT_Task+0x638>)
 8022276:	f002 fb6b 	bl	8024950 <g_registerWindow>

	// Initialize windows.
	g_windowInit(&popupWindow, &popWindowCloseButton, &popWindowTitleLabel);
 802227a:	4a20      	ldr	r2, [pc, #128]	@ (80222fc <APP_TFT_Task+0x64c>)
 802227c:	4920      	ldr	r1, [pc, #128]	@ (8022300 <APP_TFT_Task+0x650>)
 802227e:	4821      	ldr	r0, [pc, #132]	@ (8022304 <APP_TFT_Task+0x654>)
 8022280:	f002 fd8a 	bl	8024d98 <g_windowInit>
	g_windowInit(&statusWindow, &statusWindowCloseButton, &statusWindowTitleLabel);
 8022284:	4a20      	ldr	r2, [pc, #128]	@ (8022308 <APP_TFT_Task+0x658>)
 8022286:	4921      	ldr	r1, [pc, #132]	@ (802230c <APP_TFT_Task+0x65c>)
 8022288:	4821      	ldr	r0, [pc, #132]	@ (8022310 <APP_TFT_Task+0x660>)
 802228a:	f002 fd85 	bl	8024d98 <g_windowInit>
	g_windowInit(&monitoringWindow, &monitoringWindowCloseButton, &monitoringWindowTitleLabel);
 802228e:	4a21      	ldr	r2, [pc, #132]	@ (8022314 <APP_TFT_Task+0x664>)
 8022290:	4921      	ldr	r1, [pc, #132]	@ (8022318 <APP_TFT_Task+0x668>)
 8022292:	4815      	ldr	r0, [pc, #84]	@ (80222e8 <APP_TFT_Task+0x638>)
 8022294:	f002 fd80 	bl	8024d98 <g_windowInit>

	for (;;)
	{
		switch(windowState)
 8022298:	4b20      	ldr	r3, [pc, #128]	@ (802231c <APP_TFT_Task+0x66c>)
 802229a:	781b      	ldrb	r3, [r3, #0]
 802229c:	2b00      	cmp	r3, #0
 802229e:	f000 808f 	beq.w	80223c0 <APP_TFT_Task+0x710>
 80222a2:	2b01      	cmp	r3, #1
 80222a4:	f040 817a 	bne.w	802259c <APP_TFT_Task+0x8ec>
		{
			case WINDOW_STATE_MONITORING:
			{
				// TODO: update values.
				if ((gos_kernelGetSysTicks() - lastMonitoringTick) > 250)
 80222a8:	f012 fbe4 	bl	8034a74 <gos_kernelGetSysTicks>
 80222ac:	4602      	mov	r2, r0
 80222ae:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80222b2:	1ad3      	subs	r3, r2, r3
 80222b4:	2bfa      	cmp	r3, #250	@ 0xfa
 80222b6:	f240 816e 	bls.w	8022596 <APP_TFT_Task+0x8e6>
				{
					(void_t) gos_taskAddPrivilege(currentId, GOS_TASK_PRIVILEGE_KERNEL);
 80222ba:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80222be:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 80222c2:	881b      	ldrh	r3, [r3, #0]
 80222c4:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80222c8:	4618      	mov	r0, r3
 80222ca:	f014 fdc9 	bl	8036e60 <gos_taskAddPrivilege>
					for (u16_t i = 0; i < numOfTasks; i++)
 80222ce:	2300      	movs	r3, #0
 80222d0:	f8a7 331a 	strh.w	r3, [r7, #794]	@ 0x31a
 80222d4:	e05c      	b.n	8022390 <APP_TFT_Task+0x6e0>
 80222d6:	bf00      	nop
 80222d8:	200047e8 	.word	0x200047e8
 80222dc:	080407b4 	.word	0x080407b4
 80222e0:	080407aa 	.word	0x080407aa
 80222e4:	0803e4f4 	.word	0x0803e4f4
 80222e8:	2000097c 	.word	0x2000097c
 80222ec:	200038e8 	.word	0x200038e8
 80222f0:	200056e8 	.word	0x200056e8
 80222f4:	51eb851f 	.word	0x51eb851f
 80222f8:	0803e4fc 	.word	0x0803e4fc
 80222fc:	200035f4 	.word	0x200035f4
 8022300:	200036e4 	.word	0x200036e4
 8022304:	20000474 	.word	0x20000474
 8022308:	20003644 	.word	0x20003644
 802230c:	2000371c 	.word	0x2000371c
 8022310:	200006f8 	.word	0x200006f8
 8022314:	20003694 	.word	0x20003694
 8022318:	20003754 	.word	0x20003754
 802231c:	20000de0 	.word	0x20000de0
					{
						(void_t) gos_taskGetDataByIndex(i, &taskData);
 8022320:	463a      	mov	r2, r7
 8022322:	f8b7 331a 	ldrh.w	r3, [r7, #794]	@ 0x31a
 8022326:	4611      	mov	r1, r2
 8022328:	4618      	mov	r0, r3
 802232a:	f015 f86f 	bl	803740c <gos_taskGetDataByIndex>

						sprintf(labelText, "%u.%02u %%  ",
								(taskData.taskCpuUsage / 100),
 802232e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8022332:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8022336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
						sprintf(labelText, "%u.%02u %%  ",
 802233a:	4a9a      	ldr	r2, [pc, #616]	@ (80225a4 <APP_TFT_Task+0x8f4>)
 802233c:	fba2 2303 	umull	r2, r3, r2, r3
 8022340:	095b      	lsrs	r3, r3, #5
 8022342:	b29b      	uxth	r3, r3
 8022344:	4618      	mov	r0, r3
								(taskData.taskCpuUsage % 100)
 8022346:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 802234a:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 802234e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
						sprintf(labelText, "%u.%02u %%  ",
 8022352:	4a94      	ldr	r2, [pc, #592]	@ (80225a4 <APP_TFT_Task+0x8f4>)
 8022354:	fba2 1203 	umull	r1, r2, r2, r3
 8022358:	0952      	lsrs	r2, r2, #5
 802235a:	2164      	movs	r1, #100	@ 0x64
 802235c:	fb01 f202 	mul.w	r2, r1, r2
 8022360:	1a9b      	subs	r3, r3, r2
 8022362:	b29b      	uxth	r3, r3
 8022364:	4602      	mov	r2, r0
 8022366:	4990      	ldr	r1, [pc, #576]	@ (80225a8 <APP_TFT_Task+0x8f8>)
 8022368:	4890      	ldr	r0, [pc, #576]	@ (80225ac <APP_TFT_Task+0x8fc>)
 802236a:	f019 fe27 	bl	803bfbc <siprintf>
							);

						g_labelSetText(&cpuUsageLabels[i], labelText);
 802236e:	f8b7 231a 	ldrh.w	r2, [r7, #794]	@ 0x31a
 8022372:	4613      	mov	r3, r2
 8022374:	009b      	lsls	r3, r3, #2
 8022376:	4413      	add	r3, r2
 8022378:	011b      	lsls	r3, r3, #4
 802237a:	4a8d      	ldr	r2, [pc, #564]	@ (80225b0 <APP_TFT_Task+0x900>)
 802237c:	4413      	add	r3, r2
 802237e:	498b      	ldr	r1, [pc, #556]	@ (80225ac <APP_TFT_Task+0x8fc>)
 8022380:	4618      	mov	r0, r3
 8022382:	f002 fccb 	bl	8024d1c <g_labelSetText>
					for (u16_t i = 0; i < numOfTasks; i++)
 8022386:	f8b7 331a 	ldrh.w	r3, [r7, #794]	@ 0x31a
 802238a:	3301      	adds	r3, #1
 802238c:	f8a7 331a 	strh.w	r3, [r7, #794]	@ 0x31a
 8022390:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8022394:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8022398:	881b      	ldrh	r3, [r3, #0]
 802239a:	f8b7 231a 	ldrh.w	r2, [r7, #794]	@ 0x31a
 802239e:	429a      	cmp	r2, r3
 80223a0:	d3be      	bcc.n	8022320 <APP_TFT_Task+0x670>
					}
					(void_t) gos_taskRemovePrivilege(currentId, GOS_TASK_PRIVILEGE_KERNEL);
 80223a2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80223a6:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 80223aa:	881b      	ldrh	r3, [r3, #0]
 80223ac:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80223b0:	4618      	mov	r0, r3
 80223b2:	f014 fdcd 	bl	8036f50 <gos_taskRemovePrivilege>
					lastMonitoringTick = gos_kernelGetSysTicks();
 80223b6:	f012 fb5d 	bl	8034a74 <gos_kernelGetSysTicks>
 80223ba:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
				}
				break;
 80223be:	e0ea      	b.n	8022596 <APP_TFT_Task+0x8e6>
			}
			case WINDOW_STATE_STATUS:
			{
				/* TIME */
				if ((gos_kernelGetSysTicks() - lastTimeTick) > 250)
 80223c0:	f012 fb58 	bl	8034a74 <gos_kernelGetSysTicks>
 80223c4:	4602      	mov	r2, r0
 80223c6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80223ca:	1ad3      	subs	r3, r2, r3
 80223cc:	2bfa      	cmp	r3, #250	@ 0xfa
 80223ce:	d943      	bls.n	8022458 <APP_TFT_Task+0x7a8>
				{
					// Update time label.
					gos_timeGet(&actualTime);
 80223d0:	4878      	ldr	r0, [pc, #480]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223d2:	f017 ffa3 	bl	803a31c <gos_timeGet>
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
							actualTime.years,
 80223d6:	4b77      	ldr	r3, [pc, #476]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223d8:	891b      	ldrh	r3, [r3, #8]
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
 80223da:	461c      	mov	r4, r3
							actualTime.months,
 80223dc:	4b75      	ldr	r3, [pc, #468]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223de:	79db      	ldrb	r3, [r3, #7]
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
 80223e0:	461d      	mov	r5, r3
							actualTime.days,
 80223e2:	4b74      	ldr	r3, [pc, #464]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80223e8:	b29b      	uxth	r3, r3
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
 80223ea:	461a      	mov	r2, r3
							actualTime.hours,
 80223ec:	4b71      	ldr	r3, [pc, #452]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223ee:	791b      	ldrb	r3, [r3, #4]
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
 80223f0:	4619      	mov	r1, r3
							actualTime.minutes,
 80223f2:	4b70      	ldr	r3, [pc, #448]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223f4:	78db      	ldrb	r3, [r3, #3]
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
 80223f6:	4618      	mov	r0, r3
							actualTime.seconds
 80223f8:	4b6e      	ldr	r3, [pc, #440]	@ (80225b4 <APP_TFT_Task+0x904>)
 80223fa:	789b      	ldrb	r3, [r3, #2]
					sprintf(labelText, TEXT_ACT_TIME"%04d-%02d-%02d %02d:%02d:%02d",
 80223fc:	9303      	str	r3, [sp, #12]
 80223fe:	9002      	str	r0, [sp, #8]
 8022400:	9101      	str	r1, [sp, #4]
 8022402:	9200      	str	r2, [sp, #0]
 8022404:	462b      	mov	r3, r5
 8022406:	4622      	mov	r2, r4
 8022408:	496b      	ldr	r1, [pc, #428]	@ (80225b8 <APP_TFT_Task+0x908>)
 802240a:	4868      	ldr	r0, [pc, #416]	@ (80225ac <APP_TFT_Task+0x8fc>)
 802240c:	f019 fdd6 	bl	803bfbc <siprintf>
						);
					g_labelSetText(&timeLabel, labelText);
 8022410:	4966      	ldr	r1, [pc, #408]	@ (80225ac <APP_TFT_Task+0x8fc>)
 8022412:	486a      	ldr	r0, [pc, #424]	@ (80225bc <APP_TFT_Task+0x90c>)
 8022414:	f002 fc82 	bl	8024d1c <g_labelSetText>

					// Update uptime label
					gos_runTimeGet(&runTime);
 8022418:	4869      	ldr	r0, [pc, #420]	@ (80225c0 <APP_TFT_Task+0x910>)
 802241a:	f017 ffb9 	bl	803a390 <gos_runTimeGet>
					sprintf(labelText, TEXT_RUNTIME"%02d days %02d:%02d:%02d",
							runTime.days,
 802241e:	4b68      	ldr	r3, [pc, #416]	@ (80225c0 <APP_TFT_Task+0x910>)
 8022420:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8022424:	b29b      	uxth	r3, r3
					sprintf(labelText, TEXT_RUNTIME"%02d days %02d:%02d:%02d",
 8022426:	4619      	mov	r1, r3
							runTime.hours,
 8022428:	4b65      	ldr	r3, [pc, #404]	@ (80225c0 <APP_TFT_Task+0x910>)
 802242a:	799b      	ldrb	r3, [r3, #6]
					sprintf(labelText, TEXT_RUNTIME"%02d days %02d:%02d:%02d",
 802242c:	4618      	mov	r0, r3
							runTime.minutes,
 802242e:	4b64      	ldr	r3, [pc, #400]	@ (80225c0 <APP_TFT_Task+0x910>)
 8022430:	795b      	ldrb	r3, [r3, #5]
					sprintf(labelText, TEXT_RUNTIME"%02d days %02d:%02d:%02d",
 8022432:	461a      	mov	r2, r3
							runTime.seconds
 8022434:	4b62      	ldr	r3, [pc, #392]	@ (80225c0 <APP_TFT_Task+0x910>)
 8022436:	791b      	ldrb	r3, [r3, #4]
					sprintf(labelText, TEXT_RUNTIME"%02d days %02d:%02d:%02d",
 8022438:	9301      	str	r3, [sp, #4]
 802243a:	9200      	str	r2, [sp, #0]
 802243c:	4603      	mov	r3, r0
 802243e:	460a      	mov	r2, r1
 8022440:	4960      	ldr	r1, [pc, #384]	@ (80225c4 <APP_TFT_Task+0x914>)
 8022442:	485a      	ldr	r0, [pc, #360]	@ (80225ac <APP_TFT_Task+0x8fc>)
 8022444:	f019 fdba 	bl	803bfbc <siprintf>
						);
					g_labelSetText(&upTimeLabel, labelText);
 8022448:	4958      	ldr	r1, [pc, #352]	@ (80225ac <APP_TFT_Task+0x8fc>)
 802244a:	485f      	ldr	r0, [pc, #380]	@ (80225c8 <APP_TFT_Task+0x918>)
 802244c:	f002 fc66 	bl	8024d1c <g_labelSetText>

					lastTimeTick = gos_kernelGetSysTicks();
 8022450:	f012 fb10 	bl	8034a74 <gos_kernelGetSysTicks>
 8022454:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
				}

				/* TEMPERATURE */
				if ((gos_kernelGetSysTicks() - lastTempTick) > 1000)
 8022458:	f012 fb0c 	bl	8034a74 <gos_kernelGetSysTicks>
 802245c:	4602      	mov	r2, r0
 802245e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8022462:	1ad3      	subs	r3, r2, r3
 8022464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8022468:	d93b      	bls.n	80224e2 <APP_TFT_Task+0x832>
				{
					// Update temperature label.
					//BSP_Temperature_HandlerGetValue(&temperatureValue);
					if (gos_mutexLock(&mdiMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 802246a:	f04f 31ff 	mov.w	r1, #4294967295
 802246e:	4857      	ldr	r0, [pc, #348]	@ (80225cc <APP_TFT_Task+0x91c>)
 8022470:	f016 f8ee 	bl	8038650 <gos_mutexLock>
 8022474:	4603      	mov	r3, r0
 8022476:	2b55      	cmp	r3, #85	@ 0x55
 8022478:	d112      	bne.n	80224a0 <APP_TFT_Task+0x7f0>
					{
						temperatureValue = (u16_t)(mdiVariables[MDI_CPU_TEMP].value.floatValue * 10);
 802247a:	4b55      	ldr	r3, [pc, #340]	@ (80225d0 <APP_TFT_Task+0x920>)
 802247c:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 8022480:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8022484:	ee07 3a10 	vmov	s14, r3
 8022488:	ee67 7a27 	vmul.f32	s15, s14, s15
 802248c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022490:	ee17 3a90 	vmov	r3, s15
 8022494:	b29a      	uxth	r2, r3
 8022496:	4b4f      	ldr	r3, [pc, #316]	@ (80225d4 <APP_TFT_Task+0x924>)
 8022498:	801a      	strh	r2, [r3, #0]

						(void_t) gos_mutexUnlock(&mdiMutex);
 802249a:	484c      	ldr	r0, [pc, #304]	@ (80225cc <APP_TFT_Task+0x91c>)
 802249c:	f016 f9de 	bl	803885c <gos_mutexUnlock>
					}

					sprintf(labelText, TEXT_TEMP"%u.%02u C  ",
 80224a0:	4b4c      	ldr	r3, [pc, #304]	@ (80225d4 <APP_TFT_Task+0x924>)
 80224a2:	881b      	ldrh	r3, [r3, #0]
 80224a4:	4a4c      	ldr	r2, [pc, #304]	@ (80225d8 <APP_TFT_Task+0x928>)
 80224a6:	fba2 2303 	umull	r2, r3, r2, r3
 80224aa:	08db      	lsrs	r3, r3, #3
 80224ac:	b29b      	uxth	r3, r3
 80224ae:	4618      	mov	r0, r3
 80224b0:	4b48      	ldr	r3, [pc, #288]	@ (80225d4 <APP_TFT_Task+0x924>)
 80224b2:	881a      	ldrh	r2, [r3, #0]
 80224b4:	4b48      	ldr	r3, [pc, #288]	@ (80225d8 <APP_TFT_Task+0x928>)
 80224b6:	fba3 1302 	umull	r1, r3, r3, r2
 80224ba:	08d9      	lsrs	r1, r3, #3
 80224bc:	460b      	mov	r3, r1
 80224be:	009b      	lsls	r3, r3, #2
 80224c0:	440b      	add	r3, r1
 80224c2:	005b      	lsls	r3, r3, #1
 80224c4:	1ad3      	subs	r3, r2, r3
 80224c6:	b29b      	uxth	r3, r3
 80224c8:	4602      	mov	r2, r0
 80224ca:	4944      	ldr	r1, [pc, #272]	@ (80225dc <APP_TFT_Task+0x92c>)
 80224cc:	4837      	ldr	r0, [pc, #220]	@ (80225ac <APP_TFT_Task+0x8fc>)
 80224ce:	f019 fd75 	bl	803bfbc <siprintf>
							(temperatureValue / 10), (temperatureValue % 10)
						);
					g_labelSetText(&tempLabel, labelText);
 80224d2:	4936      	ldr	r1, [pc, #216]	@ (80225ac <APP_TFT_Task+0x8fc>)
 80224d4:	4842      	ldr	r0, [pc, #264]	@ (80225e0 <APP_TFT_Task+0x930>)
 80224d6:	f002 fc21 	bl	8024d1c <g_labelSetText>

					lastTempTick = gos_kernelGetSysTicks();
 80224da:	f012 facb 	bl	8034a74 <gos_kernelGetSysTicks>
 80224de:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
				}

				// Update CPU load label.
				cpuLoadArray[(cpuLoadIdx++ % CPU_LOAD_AVG_SAMPLES)] = gos_kernelGetCpuUsage();
 80224e2:	4b40      	ldr	r3, [pc, #256]	@ (80225e4 <APP_TFT_Task+0x934>)
 80224e4:	881b      	ldrh	r3, [r3, #0]
 80224e6:	1c5a      	adds	r2, r3, #1
 80224e8:	b291      	uxth	r1, r2
 80224ea:	4a3e      	ldr	r2, [pc, #248]	@ (80225e4 <APP_TFT_Task+0x934>)
 80224ec:	8011      	strh	r1, [r2, #0]
 80224ee:	f003 040f 	and.w	r4, r3, #15
 80224f2:	f012 facb 	bl	8034a8c <gos_kernelGetCpuUsage>
 80224f6:	4603      	mov	r3, r0
 80224f8:	461a      	mov	r2, r3
 80224fa:	4b3b      	ldr	r3, [pc, #236]	@ (80225e8 <APP_TFT_Task+0x938>)
 80224fc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				u32_t cpuSum = 0u;
 8022500:	2300      	movs	r3, #0
 8022502:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
				for (u8_t i = 0; i < CPU_LOAD_AVG_SAMPLES; i++)
 8022506:	2300      	movs	r3, #0
 8022508:	f887 3313 	strb.w	r3, [r7, #787]	@ 0x313
 802250c:	e00f      	b.n	802252e <APP_TFT_Task+0x87e>
				{
					cpuSum += cpuLoadArray[i];
 802250e:	f897 3313 	ldrb.w	r3, [r7, #787]	@ 0x313
 8022512:	4a35      	ldr	r2, [pc, #212]	@ (80225e8 <APP_TFT_Task+0x938>)
 8022514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022518:	461a      	mov	r2, r3
 802251a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 802251e:	4413      	add	r3, r2
 8022520:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
				for (u8_t i = 0; i < CPU_LOAD_AVG_SAMPLES; i++)
 8022524:	f897 3313 	ldrb.w	r3, [r7, #787]	@ 0x313
 8022528:	3301      	adds	r3, #1
 802252a:	f887 3313 	strb.w	r3, [r7, #787]	@ 0x313
 802252e:	f897 3313 	ldrb.w	r3, [r7, #787]	@ 0x313
 8022532:	2b0f      	cmp	r3, #15
 8022534:	d9eb      	bls.n	802250e <APP_TFT_Task+0x85e>
				}
				cpuLoad = cpuSum / CPU_LOAD_AVG_SAMPLES;
 8022536:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 802253a:	091b      	lsrs	r3, r3, #4
 802253c:	b29a      	uxth	r2, r3
 802253e:	4b2b      	ldr	r3, [pc, #172]	@ (80225ec <APP_TFT_Task+0x93c>)
 8022540:	801a      	strh	r2, [r3, #0]

				if ((gos_kernelGetSysTicks() - lastCpuTick) > 500)
 8022542:	f012 fa97 	bl	8034a74 <gos_kernelGetSysTicks>
 8022546:	4602      	mov	r2, r0
 8022548:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 802254c:	1ad3      	subs	r3, r2, r3
 802254e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8022552:	d922      	bls.n	802259a <APP_TFT_Task+0x8ea>
				{
					sprintf(labelText, TEXT_CPU_LOAD"%u.%02u %%  ",
 8022554:	4b25      	ldr	r3, [pc, #148]	@ (80225ec <APP_TFT_Task+0x93c>)
 8022556:	881b      	ldrh	r3, [r3, #0]
 8022558:	4a12      	ldr	r2, [pc, #72]	@ (80225a4 <APP_TFT_Task+0x8f4>)
 802255a:	fba2 2303 	umull	r2, r3, r2, r3
 802255e:	095b      	lsrs	r3, r3, #5
 8022560:	b29b      	uxth	r3, r3
 8022562:	4618      	mov	r0, r3
 8022564:	4b21      	ldr	r3, [pc, #132]	@ (80225ec <APP_TFT_Task+0x93c>)
 8022566:	881b      	ldrh	r3, [r3, #0]
 8022568:	4a0e      	ldr	r2, [pc, #56]	@ (80225a4 <APP_TFT_Task+0x8f4>)
 802256a:	fba2 1203 	umull	r1, r2, r2, r3
 802256e:	0952      	lsrs	r2, r2, #5
 8022570:	2164      	movs	r1, #100	@ 0x64
 8022572:	fb01 f202 	mul.w	r2, r1, r2
 8022576:	1a9b      	subs	r3, r3, r2
 8022578:	b29b      	uxth	r3, r3
 802257a:	4602      	mov	r2, r0
 802257c:	491c      	ldr	r1, [pc, #112]	@ (80225f0 <APP_TFT_Task+0x940>)
 802257e:	480b      	ldr	r0, [pc, #44]	@ (80225ac <APP_TFT_Task+0x8fc>)
 8022580:	f019 fd1c 	bl	803bfbc <siprintf>
							(cpuLoad / 100), (cpuLoad % 100)
						);
					g_labelSetText(&cpuLabel, labelText);
 8022584:	4909      	ldr	r1, [pc, #36]	@ (80225ac <APP_TFT_Task+0x8fc>)
 8022586:	481b      	ldr	r0, [pc, #108]	@ (80225f4 <APP_TFT_Task+0x944>)
 8022588:	f002 fbc8 	bl	8024d1c <g_labelSetText>

					lastCpuTick = gos_kernelGetSysTicks();
 802258c:	f012 fa72 	bl	8034a74 <gos_kernelGetSysTicks>
 8022590:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324
				}
				break;
 8022594:	e001      	b.n	802259a <APP_TFT_Task+0x8ea>
				break;
 8022596:	bf00      	nop
 8022598:	e000      	b.n	802259c <APP_TFT_Task+0x8ec>
				break;
 802259a:	bf00      	nop
			}
		}

		(void_t) gos_taskSleep(100);
 802259c:	2064      	movs	r0, #100	@ 0x64
 802259e:	f013 fc1f 	bl	8035de0 <gos_taskSleep>
		switch(windowState)
 80225a2:	e679      	b.n	8022298 <APP_TFT_Task+0x5e8>
 80225a4:	51eb851f 	.word	0x51eb851f
 80225a8:	0803e4fc 	.word	0x0803e4fc
 80225ac:	2000378c 	.word	0x2000378c
 80225b0:	200056e8 	.word	0x200056e8
 80225b4:	200037c8 	.word	0x200037c8
 80225b8:	0803e50c 	.word	0x0803e50c
 80225bc:	20000ca0 	.word	0x20000ca0
 80225c0:	200037d4 	.word	0x200037d4
 80225c4:	0803e53c 	.word	0x0803e53c
 80225c8:	20000cf0 	.word	0x20000cf0
 80225cc:	20003350 	.word	0x20003350
 80225d0:	200013e4 	.word	0x200013e4
 80225d4:	200037de 	.word	0x200037de
 80225d8:	cccccccd 	.word	0xcccccccd
 80225dc:	0803e568 	.word	0x0803e568
 80225e0:	20000d40 	.word	0x20000d40
 80225e4:	200038e4 	.word	0x200038e4
 80225e8:	200037e4 	.word	0x200037e4
 80225ec:	200037e0 	.word	0x200037e0
 80225f0:	0803e588 	.word	0x0803e588
 80225f4:	20000d90 	.word	0x20000d90

080225f8 <APP_TFT_PopUpWindowOkClick>:
	}
}

GOS_STATIC void_t APP_TFT_PopUpWindowOkClick (g_button_t* pButton)
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b082      	sub	sp, #8
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	6078      	str	r0, [r7, #4]
	g_windowHide(&popupWindow);
 8022600:	4803      	ldr	r0, [pc, #12]	@ (8022610 <APP_TFT_PopUpWindowOkClick+0x18>)
 8022602:	f002 fdff 	bl	8025204 <g_windowHide>
}
 8022606:	bf00      	nop
 8022608:	3708      	adds	r7, #8
 802260a:	46bd      	mov	sp, r7
 802260c:	bd80      	pop	{r7, pc}
 802260e:	bf00      	nop
 8022610:	20000474 	.word	0x20000474

08022614 <APP_TFT_PopUpWindowResetClick>:

GOS_STATIC void_t APP_TFT_PopUpWindowResetClick (g_button_t* pButton)
{
 8022614:	b580      	push	{r7, lr}
 8022616:	b082      	sub	sp, #8
 8022618:	af00      	add	r7, sp, #0
 802261a:	6078      	str	r0, [r7, #4]
	gos_kernelReset();
 802261c:	f012 fa48 	bl	8034ab0 <gos_kernelReset>
}
 8022620:	bf00      	nop
 8022622:	3708      	adds	r7, #8
 8022624:	46bd      	mov	sp, r7
 8022626:	bd80      	pop	{r7, pc}

08022628 <BSP_LCD_HandlerInit>:
	.taskPriority = 13,
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER
};

gos_result_t BSP_LCD_HandlerInit (void_t)
{
 8022628:	b580      	push	{r7, lr}
 802262a:	b082      	sub	sp, #8
 802262c:	af00      	add	r7, sp, #0
	gos_result_t initResult = GOS_SUCCESS;
 802262e:	2355      	movs	r3, #85	@ 0x55
 8022630:	71fb      	strb	r3, [r7, #7]

	initResult &= lcd_driver_init();
 8022632:	f001 fdd7 	bl	80241e4 <lcd_driver_init>
 8022636:	4603      	mov	r3, r0
 8022638:	461a      	mov	r2, r3
 802263a:	79fb      	ldrb	r3, [r7, #7]
 802263c:	4013      	ands	r3, r2
 802263e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_mutexInit(&lcdMutex);
 8022640:	480d      	ldr	r0, [pc, #52]	@ (8022678 <BSP_LCD_HandlerInit+0x50>)
 8022642:	f015 ffeb 	bl	803861c <gos_mutexInit>
 8022646:	4603      	mov	r3, r0
 8022648:	461a      	mov	r2, r3
 802264a:	79fb      	ldrb	r3, [r7, #7]
 802264c:	4013      	ands	r3, r2
 802264e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_taskRegister(&lcdHandlerTaskDesc, NULL);
 8022650:	2100      	movs	r1, #0
 8022652:	480a      	ldr	r0, [pc, #40]	@ (802267c <BSP_LCD_HandlerInit+0x54>)
 8022654:	f013 fa32 	bl	8035abc <gos_taskRegister>
 8022658:	4603      	mov	r3, r0
 802265a:	461a      	mov	r2, r3
 802265c:	79fb      	ldrb	r3, [r7, #7]
 802265e:	4013      	ands	r3, r2
 8022660:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 8022662:	79fb      	ldrb	r3, [r7, #7]
 8022664:	2b55      	cmp	r3, #85	@ 0x55
 8022666:	d001      	beq.n	802266c <BSP_LCD_HandlerInit+0x44>
	{
		initResult = GOS_ERROR;
 8022668:	23ae      	movs	r3, #174	@ 0xae
 802266a:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 802266c:	79fb      	ldrb	r3, [r7, #7]
}
 802266e:	4618      	mov	r0, r3
 8022670:	3708      	adds	r7, #8
 8022672:	46bd      	mov	sp, r7
 8022674:	bd80      	pop	{r7, pc}
 8022676:	bf00      	nop
 8022678:	20006810 	.word	0x20006810
 802267c:	20000f40 	.word	0x20000f40

08022680 <BSP_LCD_HandlerDisplayText>:

gos_result_t BSP_LCD_HandlerDisplayText (lcd_display_cfg_t* config,  const char_t* text, ...)
{
 8022680:	b40e      	push	{r1, r2, r3}
 8022682:	b580      	push	{r7, lr}
 8022684:	b085      	sub	sp, #20
 8022686:	af00      	add	r7, sp, #0
 8022688:	6078      	str	r0, [r7, #4]
	gos_result_t displayTextResult = GOS_ERROR;
 802268a:	23ae      	movs	r3, #174	@ 0xae
 802268c:	73fb      	strb	r3, [r7, #15]
	va_list args;

	if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 802268e:	f04f 31ff 	mov.w	r1, #4294967295
 8022692:	482e      	ldr	r0, [pc, #184]	@ (802274c <BSP_LCD_HandlerDisplayText+0xcc>)
 8022694:	f015 ffdc 	bl	8038650 <gos_mutexLock>
 8022698:	4603      	mov	r3, r0
 802269a:	2b55      	cmp	r3, #85	@ 0x55
 802269c:	d14e      	bne.n	802273c <BSP_LCD_HandlerDisplayText+0xbc>
	{
		if (config != NULL && text != NULL &&
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	d048      	beq.n	8022736 <BSP_LCD_HandlerDisplayText+0xb6>
 80226a4:	69fb      	ldr	r3, [r7, #28]
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d045      	beq.n	8022736 <BSP_LCD_HandlerDisplayText+0xb6>
			config->line < 3 && config->blinkStartIndex < 16 &&
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	781b      	ldrb	r3, [r3, #0]
		if (config != NULL && text != NULL &&
 80226ae:	2b02      	cmp	r3, #2
 80226b0:	d841      	bhi.n	8022736 <BSP_LCD_HandlerDisplayText+0xb6>
			config->line < 3 && config->blinkStartIndex < 16 &&
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	7c1b      	ldrb	r3, [r3, #16]
 80226b6:	2b0f      	cmp	r3, #15
 80226b8:	d83d      	bhi.n	8022736 <BSP_LCD_HandlerDisplayText+0xb6>
			config->blinkEndIndex < 16 && config->blinkStartIndex < config->blinkEndIndex)
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	7c5b      	ldrb	r3, [r3, #17]
			config->line < 3 && config->blinkStartIndex < 16 &&
 80226be:	2b0f      	cmp	r3, #15
 80226c0:	d839      	bhi.n	8022736 <BSP_LCD_HandlerDisplayText+0xb6>
			config->blinkEndIndex < 16 && config->blinkStartIndex < config->blinkEndIndex)
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	7c1a      	ldrb	r2, [r3, #16]
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	7c5b      	ldrb	r3, [r3, #17]
 80226ca:	429a      	cmp	r2, r3
 80226cc:	d233      	bcs.n	8022736 <BSP_LCD_HandlerDisplayText+0xb6>
		{
			va_start(args, text);
 80226ce:	f107 0320 	add.w	r3, r7, #32
 80226d2:	60bb      	str	r3, [r7, #8]

			if (config->line == 0)
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	781b      	ldrb	r3, [r3, #0]
 80226d8:	2b00      	cmp	r3, #0
 80226da:	d115      	bne.n	8022708 <BSP_LCD_HandlerDisplayText+0x88>
			{
				memcpy((void*)&firstLineConfig, (const void*)config, sizeof(*config));
 80226dc:	2214      	movs	r2, #20
 80226de:	6879      	ldr	r1, [r7, #4]
 80226e0:	481b      	ldr	r0, [pc, #108]	@ (8022750 <BSP_LCD_HandlerDisplayText+0xd0>)
 80226e2:	f019 fd76 	bl	803c1d2 <memcpy>
				vsprintf(firstLine, text, args);
 80226e6:	68ba      	ldr	r2, [r7, #8]
 80226e8:	69f9      	ldr	r1, [r7, #28]
 80226ea:	481a      	ldr	r0, [pc, #104]	@ (8022754 <BSP_LCD_HandlerDisplayText+0xd4>)
 80226ec:	f019 fce0 	bl	803c0b0 <vsiprintf>
				firstLineShiftCounter = 0u;
 80226f0:	4b19      	ldr	r3, [pc, #100]	@ (8022758 <BSP_LCD_HandlerDisplayText+0xd8>)
 80226f2:	2200      	movs	r2, #0
 80226f4:	801a      	strh	r2, [r3, #0]
				if (firstLineConfig.displayMode == LCD_DISPLAY_NORMAL)
 80226f6:	4b16      	ldr	r3, [pc, #88]	@ (8022750 <BSP_LCD_HandlerDisplayText+0xd0>)
 80226f8:	785b      	ldrb	r3, [r3, #1]
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d119      	bne.n	8022732 <BSP_LCD_HandlerDisplayText+0xb2>
					lcd_driver_write_string(0, firstLine);
 80226fe:	4915      	ldr	r1, [pc, #84]	@ (8022754 <BSP_LCD_HandlerDisplayText+0xd4>)
 8022700:	2000      	movs	r0, #0
 8022702:	f001 fdaf 	bl	8024264 <lcd_driver_write_string>
 8022706:	e014      	b.n	8022732 <BSP_LCD_HandlerDisplayText+0xb2>
			}
			else
			{
				memcpy((void*)&secondLineConfig, (const void*)config, sizeof(*config));
 8022708:	2214      	movs	r2, #20
 802270a:	6879      	ldr	r1, [r7, #4]
 802270c:	4813      	ldr	r0, [pc, #76]	@ (802275c <BSP_LCD_HandlerDisplayText+0xdc>)
 802270e:	f019 fd60 	bl	803c1d2 <memcpy>
				vsprintf(secondLine, text, args);
 8022712:	68ba      	ldr	r2, [r7, #8]
 8022714:	69f9      	ldr	r1, [r7, #28]
 8022716:	4812      	ldr	r0, [pc, #72]	@ (8022760 <BSP_LCD_HandlerDisplayText+0xe0>)
 8022718:	f019 fcca 	bl	803c0b0 <vsiprintf>
				secondLineShiftCounter = 0u;
 802271c:	4b11      	ldr	r3, [pc, #68]	@ (8022764 <BSP_LCD_HandlerDisplayText+0xe4>)
 802271e:	2200      	movs	r2, #0
 8022720:	801a      	strh	r2, [r3, #0]
				if (secondLineConfig.displayMode == LCD_DISPLAY_NORMAL)
 8022722:	4b0e      	ldr	r3, [pc, #56]	@ (802275c <BSP_LCD_HandlerDisplayText+0xdc>)
 8022724:	785b      	ldrb	r3, [r3, #1]
 8022726:	2b00      	cmp	r3, #0
 8022728:	d103      	bne.n	8022732 <BSP_LCD_HandlerDisplayText+0xb2>
					lcd_driver_write_string(1, secondLine);
 802272a:	490d      	ldr	r1, [pc, #52]	@ (8022760 <BSP_LCD_HandlerDisplayText+0xe0>)
 802272c:	2001      	movs	r0, #1
 802272e:	f001 fd99 	bl	8024264 <lcd_driver_write_string>
			}
			va_end(args);

			displayTextResult = GOS_SUCCESS;
 8022732:	2355      	movs	r3, #85	@ 0x55
 8022734:	73fb      	strb	r3, [r7, #15]
		else
		{
			// Config error.
		}

		(void_t) gos_mutexUnlock(&lcdMutex);
 8022736:	4805      	ldr	r0, [pc, #20]	@ (802274c <BSP_LCD_HandlerDisplayText+0xcc>)
 8022738:	f016 f890 	bl	803885c <gos_mutexUnlock>
	else
	{
		// Error.
	}

	return displayTextResult;
 802273c:	7bfb      	ldrb	r3, [r7, #15]
}
 802273e:	4618      	mov	r0, r3
 8022740:	3714      	adds	r7, #20
 8022742:	46bd      	mov	sp, r7
 8022744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022748:	b003      	add	sp, #12
 802274a:	4770      	bx	lr
 802274c:	20006810 	.word	0x20006810
 8022750:	200067e8 	.word	0x200067e8
 8022754:	200065e8 	.word	0x200065e8
 8022758:	20006814 	.word	0x20006814
 802275c:	200067fc 	.word	0x200067fc
 8022760:	20006668 	.word	0x20006668
 8022764:	20006816 	.word	0x20006816

08022768 <BSP_LCD_HandlerWriteNextString>:

gos_result_t BSP_LCD_HandlerWriteNextString (u8_t line, char_t* str)
{
 8022768:	b580      	push	{r7, lr}
 802276a:	b084      	sub	sp, #16
 802276c:	af00      	add	r7, sp, #0
 802276e:	4603      	mov	r3, r0
 8022770:	6039      	str	r1, [r7, #0]
 8022772:	71fb      	strb	r3, [r7, #7]
	gos_result_t writeStringResult = GOS_ERROR;
 8022774:	23ae      	movs	r3, #174	@ 0xae
 8022776:	73fb      	strb	r3, [r7, #15]
	u8_t lineLength = 0u;
 8022778:	2300      	movs	r3, #0
 802277a:	73bb      	strb	r3, [r7, #14]

	if (line == 0)
 802277c:	79fb      	ldrb	r3, [r7, #7]
 802277e:	2b00      	cmp	r3, #0
 8022780:	d112      	bne.n	80227a8 <BSP_LCD_HandlerWriteNextString+0x40>
	{
		lineLength = strlen(firstLine);
 8022782:	4816      	ldr	r0, [pc, #88]	@ (80227dc <BSP_LCD_HandlerWriteNextString+0x74>)
 8022784:	f7fd fda4 	bl	80202d0 <strlen>
 8022788:	4603      	mov	r3, r0
 802278a:	73bb      	strb	r3, [r7, #14]
		strcpy((char_t*)(firstLine + lineLength), str);
 802278c:	7bbb      	ldrb	r3, [r7, #14]
 802278e:	4a13      	ldr	r2, [pc, #76]	@ (80227dc <BSP_LCD_HandlerWriteNextString+0x74>)
 8022790:	4413      	add	r3, r2
 8022792:	6839      	ldr	r1, [r7, #0]
 8022794:	4618      	mov	r0, r3
 8022796:	f019 fd14 	bl	803c1c2 <strcpy>
		writeStringResult = lcd_driver_write_string(0, firstLine);
 802279a:	4910      	ldr	r1, [pc, #64]	@ (80227dc <BSP_LCD_HandlerWriteNextString+0x74>)
 802279c:	2000      	movs	r0, #0
 802279e:	f001 fd61 	bl	8024264 <lcd_driver_write_string>
 80227a2:	4603      	mov	r3, r0
 80227a4:	73fb      	strb	r3, [r7, #15]
 80227a6:	e014      	b.n	80227d2 <BSP_LCD_HandlerWriteNextString+0x6a>
	}
	else if (line == 1)
 80227a8:	79fb      	ldrb	r3, [r7, #7]
 80227aa:	2b01      	cmp	r3, #1
 80227ac:	d111      	bne.n	80227d2 <BSP_LCD_HandlerWriteNextString+0x6a>
	{
		lineLength = strlen(secondLine);
 80227ae:	480c      	ldr	r0, [pc, #48]	@ (80227e0 <BSP_LCD_HandlerWriteNextString+0x78>)
 80227b0:	f7fd fd8e 	bl	80202d0 <strlen>
 80227b4:	4603      	mov	r3, r0
 80227b6:	73bb      	strb	r3, [r7, #14]
		strcpy((char_t*)(secondLine + lineLength), str);
 80227b8:	7bbb      	ldrb	r3, [r7, #14]
 80227ba:	4a09      	ldr	r2, [pc, #36]	@ (80227e0 <BSP_LCD_HandlerWriteNextString+0x78>)
 80227bc:	4413      	add	r3, r2
 80227be:	6839      	ldr	r1, [r7, #0]
 80227c0:	4618      	mov	r0, r3
 80227c2:	f019 fcfe 	bl	803c1c2 <strcpy>

		writeStringResult = lcd_driver_write_string(1, secondLine);
 80227c6:	4906      	ldr	r1, [pc, #24]	@ (80227e0 <BSP_LCD_HandlerWriteNextString+0x78>)
 80227c8:	2001      	movs	r0, #1
 80227ca:	f001 fd4b 	bl	8024264 <lcd_driver_write_string>
 80227ce:	4603      	mov	r3, r0
 80227d0:	73fb      	strb	r3, [r7, #15]
	}

	return writeStringResult;
 80227d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80227d4:	4618      	mov	r0, r3
 80227d6:	3710      	adds	r7, #16
 80227d8:	46bd      	mov	sp, r7
 80227da:	bd80      	pop	{r7, pc}
 80227dc:	200065e8 	.word	0x200065e8
 80227e0:	20006668 	.word	0x20006668

080227e4 <BSP_LCD_HandlerTask>:

GOS_STATIC void_t BSP_LCD_HandlerTask (void_t)
{
 80227e4:	b590      	push	{r4, r7, lr}
 80227e6:	b083      	sub	sp, #12
 80227e8:	af00      	add	r7, sp, #0
	for (;;)
	{
		switch (firstLineConfig.displayMode)
 80227ea:	4ba8      	ldr	r3, [pc, #672]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80227ec:	785b      	ldrb	r3, [r3, #1]
 80227ee:	2b07      	cmp	r3, #7
 80227f0:	f200 8102 	bhi.w	80229f8 <BSP_LCD_HandlerTask+0x214>
 80227f4:	a201      	add	r2, pc, #4	@ (adr r2, 80227fc <BSP_LCD_HandlerTask+0x18>)
 80227f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80227fa:	bf00      	nop
 80227fc:	080229f9 	.word	0x080229f9
 8022800:	08022911 	.word	0x08022911
 8022804:	08022911 	.word	0x08022911
 8022808:	080228c1 	.word	0x080228c1
 802280c:	080228c1 	.word	0x080228c1
 8022810:	0802281d 	.word	0x0802281d
 8022814:	08022981 	.word	0x08022981
 8022818:	080229d3 	.word	0x080229d3
			{
				break;
			}
			case LCD_DISPLAY_BLINK:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > firstLineConfig.periodMs)
 802281c:	f012 f92a 	bl	8034a74 <gos_kernelGetSysTicks>
 8022820:	4602      	mov	r2, r0
 8022822:	4b9a      	ldr	r3, [pc, #616]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022824:	689b      	ldr	r3, [r3, #8]
 8022826:	1ad2      	subs	r2, r2, r3
 8022828:	4b98      	ldr	r3, [pc, #608]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 802282a:	685b      	ldr	r3, [r3, #4]
 802282c:	429a      	cmp	r2, r3
 802282e:	f240 80e5 	bls.w	80229fc <BSP_LCD_HandlerTask+0x218>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 8022832:	f012 f91f 	bl	8034a74 <gos_kernelGetSysTicks>
 8022836:	4603      	mov	r3, r0
 8022838:	4a94      	ldr	r2, [pc, #592]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 802283a:	6093      	str	r3, [r2, #8]
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 802283c:	f04f 31ff 	mov.w	r1, #4294967295
 8022840:	4893      	ldr	r0, [pc, #588]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 8022842:	f015 ff05 	bl	8038650 <gos_mutexLock>
 8022846:	4603      	mov	r3, r0
 8022848:	2b55      	cmp	r3, #85	@ 0x55
 802284a:	f040 80d7 	bne.w	80229fc <BSP_LCD_HandlerTask+0x218>
					{
						if (firstLineConfig.blinkState)
 802284e:	4b8f      	ldr	r3, [pc, #572]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022850:	7cdb      	ldrb	r3, [r3, #19]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d01e      	beq.n	8022894 <BSP_LCD_HandlerTask+0xb0>
						{
							strcpy(firstLineTempBuffer, firstLine);
 8022856:	498f      	ldr	r1, [pc, #572]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 8022858:	488f      	ldr	r0, [pc, #572]	@ (8022a98 <BSP_LCD_HandlerTask+0x2b4>)
 802285a:	f019 fcb2 	bl	803c1c2 <strcpy>

							for (u8_t index = firstLineConfig.blinkStartIndex; index < firstLineConfig.blinkEndIndex; index++)
 802285e:	4b8b      	ldr	r3, [pc, #556]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022860:	7c1b      	ldrb	r3, [r3, #16]
 8022862:	71fb      	strb	r3, [r7, #7]
 8022864:	e006      	b.n	8022874 <BSP_LCD_HandlerTask+0x90>
							{
								firstLine[index] = ' ';
 8022866:	79fb      	ldrb	r3, [r7, #7]
 8022868:	4a8a      	ldr	r2, [pc, #552]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 802286a:	2120      	movs	r1, #32
 802286c:	54d1      	strb	r1, [r2, r3]
							for (u8_t index = firstLineConfig.blinkStartIndex; index < firstLineConfig.blinkEndIndex; index++)
 802286e:	79fb      	ldrb	r3, [r7, #7]
 8022870:	3301      	adds	r3, #1
 8022872:	71fb      	strb	r3, [r7, #7]
 8022874:	4b85      	ldr	r3, [pc, #532]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022876:	7c5b      	ldrb	r3, [r3, #17]
 8022878:	79fa      	ldrb	r2, [r7, #7]
 802287a:	429a      	cmp	r2, r3
 802287c:	d3f3      	bcc.n	8022866 <BSP_LCD_HandlerTask+0x82>
							}

							firstLineConfig.blinkState = !firstLineConfig.blinkState;
 802287e:	4b83      	ldr	r3, [pc, #524]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022880:	7cdb      	ldrb	r3, [r3, #19]
 8022882:	2b00      	cmp	r3, #0
 8022884:	bf0c      	ite	eq
 8022886:	2301      	moveq	r3, #1
 8022888:	2300      	movne	r3, #0
 802288a:	b2db      	uxtb	r3, r3
 802288c:	461a      	mov	r2, r3
 802288e:	4b7f      	ldr	r3, [pc, #508]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022890:	74da      	strb	r2, [r3, #19]
 8022892:	e00d      	b.n	80228b0 <BSP_LCD_HandlerTask+0xcc>
						}
						else
						{
							strcpy(firstLine, firstLineTempBuffer);
 8022894:	4980      	ldr	r1, [pc, #512]	@ (8022a98 <BSP_LCD_HandlerTask+0x2b4>)
 8022896:	487f      	ldr	r0, [pc, #508]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 8022898:	f019 fc93 	bl	803c1c2 <strcpy>
							firstLineConfig.blinkState = !firstLineConfig.blinkState;
 802289c:	4b7b      	ldr	r3, [pc, #492]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 802289e:	7cdb      	ldrb	r3, [r3, #19]
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	bf0c      	ite	eq
 80228a4:	2301      	moveq	r3, #1
 80228a6:	2300      	movne	r3, #0
 80228a8:	b2db      	uxtb	r3, r3
 80228aa:	461a      	mov	r2, r3
 80228ac:	4b77      	ldr	r3, [pc, #476]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80228ae:	74da      	strb	r2, [r3, #19]
						}

						lcd_driver_write_string(0, firstLine);
 80228b0:	4978      	ldr	r1, [pc, #480]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 80228b2:	2000      	movs	r0, #0
 80228b4:	f001 fcd6 	bl	8024264 <lcd_driver_write_string>
						(void_t) gos_mutexUnlock(&lcdMutex);
 80228b8:	4875      	ldr	r0, [pc, #468]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 80228ba:	f015 ffcf 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 80228be:	e09d      	b.n	80229fc <BSP_LCD_HandlerTask+0x218>
			}
			case LCD_DISPLAY_CYCLIC_RIGHT:
			case LCD_DISPLAY_CYCLIC_LEFT:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > firstLineConfig.periodMs)
 80228c0:	f012 f8d8 	bl	8034a74 <gos_kernelGetSysTicks>
 80228c4:	4602      	mov	r2, r0
 80228c6:	4b71      	ldr	r3, [pc, #452]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80228c8:	689b      	ldr	r3, [r3, #8]
 80228ca:	1ad2      	subs	r2, r2, r3
 80228cc:	4b6f      	ldr	r3, [pc, #444]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80228ce:	685b      	ldr	r3, [r3, #4]
 80228d0:	429a      	cmp	r2, r3
 80228d2:	f240 8095 	bls.w	8022a00 <BSP_LCD_HandlerTask+0x21c>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 80228d6:	f04f 31ff 	mov.w	r1, #4294967295
 80228da:	486d      	ldr	r0, [pc, #436]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 80228dc:	f015 feb8 	bl	8038650 <gos_mutexLock>
 80228e0:	4603      	mov	r3, r0
 80228e2:	2b55      	cmp	r3, #85	@ 0x55
 80228e4:	f040 808c 	bne.w	8022a00 <BSP_LCD_HandlerTask+0x21c>
					{
						firstLineConfig.lastTick = gos_kernelGetSysTicks();
 80228e8:	f012 f8c4 	bl	8034a74 <gos_kernelGetSysTicks>
 80228ec:	4603      	mov	r3, r0
 80228ee:	4a67      	ldr	r2, [pc, #412]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80228f0:	6093      	str	r3, [r2, #8]
						BSP_LCD_HandlerShiftBuffer(firstLine, &firstLineShiftCounter, firstLineConfig.displayMode);
 80228f2:	4b66      	ldr	r3, [pc, #408]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80228f4:	785b      	ldrb	r3, [r3, #1]
 80228f6:	461a      	mov	r2, r3
 80228f8:	4968      	ldr	r1, [pc, #416]	@ (8022a9c <BSP_LCD_HandlerTask+0x2b8>)
 80228fa:	4866      	ldr	r0, [pc, #408]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 80228fc:	f000 fa06 	bl	8022d0c <BSP_LCD_HandlerShiftBuffer>
						lcd_driver_write_string(0, firstLine);
 8022900:	4964      	ldr	r1, [pc, #400]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 8022902:	2000      	movs	r0, #0
 8022904:	f001 fcae 	bl	8024264 <lcd_driver_write_string>
						(void_t) gos_mutexUnlock(&lcdMutex);
 8022908:	4861      	ldr	r0, [pc, #388]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 802290a:	f015 ffa7 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 802290e:	e077      	b.n	8022a00 <BSP_LCD_HandlerTask+0x21c>
			}
			case LCD_DISPLAY_SHIFT_RIGHT:
			case LCD_DISPLAY_SHIFT_LEFT:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > firstLineConfig.periodMs)
 8022910:	f012 f8b0 	bl	8034a74 <gos_kernelGetSysTicks>
 8022914:	4602      	mov	r2, r0
 8022916:	4b5d      	ldr	r3, [pc, #372]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022918:	689b      	ldr	r3, [r3, #8]
 802291a:	1ad2      	subs	r2, r2, r3
 802291c:	4b5b      	ldr	r3, [pc, #364]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 802291e:	685b      	ldr	r3, [r3, #4]
 8022920:	429a      	cmp	r2, r3
 8022922:	d96f      	bls.n	8022a04 <BSP_LCD_HandlerTask+0x220>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022924:	f04f 31ff 	mov.w	r1, #4294967295
 8022928:	4859      	ldr	r0, [pc, #356]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 802292a:	f015 fe91 	bl	8038650 <gos_mutexLock>
 802292e:	4603      	mov	r3, r0
 8022930:	2b55      	cmp	r3, #85	@ 0x55
 8022932:	d167      	bne.n	8022a04 <BSP_LCD_HandlerTask+0x220>
					{
						firstLineConfig.lastTick = gos_kernelGetSysTicks();
 8022934:	f012 f89e 	bl	8034a74 <gos_kernelGetSysTicks>
 8022938:	4603      	mov	r3, r0
 802293a:	4a54      	ldr	r2, [pc, #336]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 802293c:	6093      	str	r3, [r2, #8]

						if (firstLineShiftCounter == strlen(firstLine) - 16u)
 802293e:	4b57      	ldr	r3, [pc, #348]	@ (8022a9c <BSP_LCD_HandlerTask+0x2b8>)
 8022940:	881b      	ldrh	r3, [r3, #0]
 8022942:	461c      	mov	r4, r3
 8022944:	4853      	ldr	r0, [pc, #332]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 8022946:	f7fd fcc3 	bl	80202d0 <strlen>
 802294a:	4603      	mov	r3, r0
 802294c:	3b10      	subs	r3, #16
 802294e:	429c      	cmp	r4, r3
 8022950:	d107      	bne.n	8022962 <BSP_LCD_HandlerTask+0x17e>
						{
							firstLineConfig.originalDisplayMode = firstLineConfig.displayMode;
 8022952:	4b4e      	ldr	r3, [pc, #312]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022954:	785a      	ldrb	r2, [r3, #1]
 8022956:	4b4d      	ldr	r3, [pc, #308]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022958:	709a      	strb	r2, [r3, #2]
							firstLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_1500;
 802295a:	4b4c      	ldr	r3, [pc, #304]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 802295c:	2206      	movs	r2, #6
 802295e:	705a      	strb	r2, [r3, #1]
 8022960:	e00a      	b.n	8022978 <BSP_LCD_HandlerTask+0x194>
						}
						else
						{
							BSP_LCD_HandlerShiftBuffer(firstLine, &firstLineShiftCounter, firstLineConfig.displayMode);
 8022962:	4b4a      	ldr	r3, [pc, #296]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022964:	785b      	ldrb	r3, [r3, #1]
 8022966:	461a      	mov	r2, r3
 8022968:	494c      	ldr	r1, [pc, #304]	@ (8022a9c <BSP_LCD_HandlerTask+0x2b8>)
 802296a:	484a      	ldr	r0, [pc, #296]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 802296c:	f000 f9ce 	bl	8022d0c <BSP_LCD_HandlerShiftBuffer>
							lcd_driver_write_string(0, firstLine);
 8022970:	4948      	ldr	r1, [pc, #288]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 8022972:	2000      	movs	r0, #0
 8022974:	f001 fc76 	bl	8024264 <lcd_driver_write_string>
						}
						(void_t) gos_mutexUnlock(&lcdMutex);
 8022978:	4845      	ldr	r0, [pc, #276]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 802297a:	f015 ff6f 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 802297e:	e041      	b.n	8022a04 <BSP_LCD_HandlerTask+0x220>
			}
			case LCD_DISPLAY_SHIFT_WAIT_1500:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > 1500)
 8022980:	f012 f878 	bl	8034a74 <gos_kernelGetSysTicks>
 8022984:	4602      	mov	r2, r0
 8022986:	4b41      	ldr	r3, [pc, #260]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 8022988:	689b      	ldr	r3, [r3, #8]
 802298a:	1ad3      	subs	r3, r2, r3
 802298c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8022990:	4293      	cmp	r3, r2
 8022992:	d939      	bls.n	8022a08 <BSP_LCD_HandlerTask+0x224>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022994:	f04f 31ff 	mov.w	r1, #4294967295
 8022998:	483d      	ldr	r0, [pc, #244]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 802299a:	f015 fe59 	bl	8038650 <gos_mutexLock>
 802299e:	4603      	mov	r3, r0
 80229a0:	2b55      	cmp	r3, #85	@ 0x55
 80229a2:	d131      	bne.n	8022a08 <BSP_LCD_HandlerTask+0x224>
					{
						firstLineConfig.lastTick = gos_kernelGetSysTicks();
 80229a4:	f012 f866 	bl	8034a74 <gos_kernelGetSysTicks>
 80229a8:	4603      	mov	r3, r0
 80229aa:	4a38      	ldr	r2, [pc, #224]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229ac:	6093      	str	r3, [r2, #8]
						BSP_LCD_HandlerShiftReset(firstLine, &firstLineShiftCounter, firstLineConfig.originalDisplayMode);
 80229ae:	4b37      	ldr	r3, [pc, #220]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229b0:	789b      	ldrb	r3, [r3, #2]
 80229b2:	461a      	mov	r2, r3
 80229b4:	4939      	ldr	r1, [pc, #228]	@ (8022a9c <BSP_LCD_HandlerTask+0x2b8>)
 80229b6:	4837      	ldr	r0, [pc, #220]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 80229b8:	f000 f95a 	bl	8022c70 <BSP_LCD_HandlerShiftReset>
						lcd_driver_write_string(0, firstLine);
 80229bc:	4935      	ldr	r1, [pc, #212]	@ (8022a94 <BSP_LCD_HandlerTask+0x2b0>)
 80229be:	2000      	movs	r0, #0
 80229c0:	f001 fc50 	bl	8024264 <lcd_driver_write_string>
						firstLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_500;
 80229c4:	4b31      	ldr	r3, [pc, #196]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229c6:	2207      	movs	r2, #7
 80229c8:	705a      	strb	r2, [r3, #1]
						(void_t) gos_mutexUnlock(&lcdMutex);
 80229ca:	4831      	ldr	r0, [pc, #196]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 80229cc:	f015 ff46 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 80229d0:	e01a      	b.n	8022a08 <BSP_LCD_HandlerTask+0x224>
			}
			case LCD_DISPLAY_SHIFT_WAIT_500:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > 500)
 80229d2:	f012 f84f 	bl	8034a74 <gos_kernelGetSysTicks>
 80229d6:	4602      	mov	r2, r0
 80229d8:	4b2c      	ldr	r3, [pc, #176]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229da:	689b      	ldr	r3, [r3, #8]
 80229dc:	1ad3      	subs	r3, r2, r3
 80229de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80229e2:	d913      	bls.n	8022a0c <BSP_LCD_HandlerTask+0x228>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 80229e4:	f012 f846 	bl	8034a74 <gos_kernelGetSysTicks>
 80229e8:	4603      	mov	r3, r0
 80229ea:	4a28      	ldr	r2, [pc, #160]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229ec:	6093      	str	r3, [r2, #8]
					firstLineConfig.displayMode = firstLineConfig.originalDisplayMode;
 80229ee:	4b27      	ldr	r3, [pc, #156]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229f0:	789a      	ldrb	r2, [r3, #2]
 80229f2:	4b26      	ldr	r3, [pc, #152]	@ (8022a8c <BSP_LCD_HandlerTask+0x2a8>)
 80229f4:	705a      	strb	r2, [r3, #1]
				}
				break;
 80229f6:	e009      	b.n	8022a0c <BSP_LCD_HandlerTask+0x228>
			}
			default: break;
 80229f8:	bf00      	nop
 80229fa:	e008      	b.n	8022a0e <BSP_LCD_HandlerTask+0x22a>
				break;
 80229fc:	bf00      	nop
 80229fe:	e006      	b.n	8022a0e <BSP_LCD_HandlerTask+0x22a>
				break;
 8022a00:	bf00      	nop
 8022a02:	e004      	b.n	8022a0e <BSP_LCD_HandlerTask+0x22a>
				break;
 8022a04:	bf00      	nop
 8022a06:	e002      	b.n	8022a0e <BSP_LCD_HandlerTask+0x22a>
				break;
 8022a08:	bf00      	nop
 8022a0a:	e000      	b.n	8022a0e <BSP_LCD_HandlerTask+0x22a>
				break;
 8022a0c:	bf00      	nop
		}

		switch (secondLineConfig.displayMode)
 8022a0e:	4b24      	ldr	r3, [pc, #144]	@ (8022aa0 <BSP_LCD_HandlerTask+0x2bc>)
 8022a10:	785b      	ldrb	r3, [r3, #1]
 8022a12:	2b07      	cmp	r3, #7
 8022a14:	f200 8113 	bhi.w	8022c3e <BSP_LCD_HandlerTask+0x45a>
 8022a18:	a201      	add	r2, pc, #4	@ (adr r2, 8022a20 <BSP_LCD_HandlerTask+0x23c>)
 8022a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a1e:	bf00      	nop
 8022a20:	08022c3f 	.word	0x08022c3f
 8022a24:	08022b57 	.word	0x08022b57
 8022a28:	08022b57 	.word	0x08022b57
 8022a2c:	08022b07 	.word	0x08022b07
 8022a30:	08022b07 	.word	0x08022b07
 8022a34:	08022a41 	.word	0x08022a41
 8022a38:	08022bc7 	.word	0x08022bc7
 8022a3c:	08022c19 	.word	0x08022c19
			{
				break;
			}
			case LCD_DISPLAY_BLINK:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > secondLineConfig.periodMs)
 8022a40:	f012 f818 	bl	8034a74 <gos_kernelGetSysTicks>
 8022a44:	4602      	mov	r2, r0
 8022a46:	4b16      	ldr	r3, [pc, #88]	@ (8022aa0 <BSP_LCD_HandlerTask+0x2bc>)
 8022a48:	689b      	ldr	r3, [r3, #8]
 8022a4a:	1ad2      	subs	r2, r2, r3
 8022a4c:	4b14      	ldr	r3, [pc, #80]	@ (8022aa0 <BSP_LCD_HandlerTask+0x2bc>)
 8022a4e:	685b      	ldr	r3, [r3, #4]
 8022a50:	429a      	cmp	r2, r3
 8022a52:	f240 80f6 	bls.w	8022c42 <BSP_LCD_HandlerTask+0x45e>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022a56:	f04f 31ff 	mov.w	r1, #4294967295
 8022a5a:	480d      	ldr	r0, [pc, #52]	@ (8022a90 <BSP_LCD_HandlerTask+0x2ac>)
 8022a5c:	f015 fdf8 	bl	8038650 <gos_mutexLock>
 8022a60:	4603      	mov	r3, r0
 8022a62:	2b55      	cmp	r3, #85	@ 0x55
 8022a64:	f040 80ed 	bne.w	8022c42 <BSP_LCD_HandlerTask+0x45e>
					{
						secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8022a68:	f012 f804 	bl	8034a74 <gos_kernelGetSysTicks>
 8022a6c:	4603      	mov	r3, r0
 8022a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8022aa0 <BSP_LCD_HandlerTask+0x2bc>)
 8022a70:	6093      	str	r3, [r2, #8]

						if (secondLineConfig.blinkState)
 8022a72:	4b0b      	ldr	r3, [pc, #44]	@ (8022aa0 <BSP_LCD_HandlerTask+0x2bc>)
 8022a74:	7cdb      	ldrb	r3, [r3, #19]
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	d02f      	beq.n	8022ada <BSP_LCD_HandlerTask+0x2f6>
						{
							strcpy(secondLineTempBuffer, secondLine);
 8022a7a:	490a      	ldr	r1, [pc, #40]	@ (8022aa4 <BSP_LCD_HandlerTask+0x2c0>)
 8022a7c:	480a      	ldr	r0, [pc, #40]	@ (8022aa8 <BSP_LCD_HandlerTask+0x2c4>)
 8022a7e:	f019 fba0 	bl	803c1c2 <strcpy>

							for (u8_t index = secondLineConfig.blinkStartIndex; index < secondLineConfig.blinkEndIndex; index++)
 8022a82:	4b07      	ldr	r3, [pc, #28]	@ (8022aa0 <BSP_LCD_HandlerTask+0x2bc>)
 8022a84:	7c1b      	ldrb	r3, [r3, #16]
 8022a86:	71bb      	strb	r3, [r7, #6]
 8022a88:	e017      	b.n	8022aba <BSP_LCD_HandlerTask+0x2d6>
 8022a8a:	bf00      	nop
 8022a8c:	200067e8 	.word	0x200067e8
 8022a90:	20006810 	.word	0x20006810
 8022a94:	200065e8 	.word	0x200065e8
 8022a98:	200066e8 	.word	0x200066e8
 8022a9c:	20006814 	.word	0x20006814
 8022aa0:	200067fc 	.word	0x200067fc
 8022aa4:	20006668 	.word	0x20006668
 8022aa8:	20006768 	.word	0x20006768
							{
								secondLine[index] = ' ';
 8022aac:	79bb      	ldrb	r3, [r7, #6]
 8022aae:	4a6b      	ldr	r2, [pc, #428]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022ab0:	2120      	movs	r1, #32
 8022ab2:	54d1      	strb	r1, [r2, r3]
							for (u8_t index = secondLineConfig.blinkStartIndex; index < secondLineConfig.blinkEndIndex; index++)
 8022ab4:	79bb      	ldrb	r3, [r7, #6]
 8022ab6:	3301      	adds	r3, #1
 8022ab8:	71bb      	strb	r3, [r7, #6]
 8022aba:	4b69      	ldr	r3, [pc, #420]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022abc:	7c5b      	ldrb	r3, [r3, #17]
 8022abe:	79ba      	ldrb	r2, [r7, #6]
 8022ac0:	429a      	cmp	r2, r3
 8022ac2:	d3f3      	bcc.n	8022aac <BSP_LCD_HandlerTask+0x2c8>
							}

							secondLineConfig.blinkState = !secondLineConfig.blinkState;
 8022ac4:	4b66      	ldr	r3, [pc, #408]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022ac6:	7cdb      	ldrb	r3, [r3, #19]
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	bf0c      	ite	eq
 8022acc:	2301      	moveq	r3, #1
 8022ace:	2300      	movne	r3, #0
 8022ad0:	b2db      	uxtb	r3, r3
 8022ad2:	461a      	mov	r2, r3
 8022ad4:	4b62      	ldr	r3, [pc, #392]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022ad6:	74da      	strb	r2, [r3, #19]
 8022ad8:	e00d      	b.n	8022af6 <BSP_LCD_HandlerTask+0x312>
						}
						else
						{
							strcpy(secondLine, secondLineTempBuffer);
 8022ada:	4962      	ldr	r1, [pc, #392]	@ (8022c64 <BSP_LCD_HandlerTask+0x480>)
 8022adc:	485f      	ldr	r0, [pc, #380]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022ade:	f019 fb70 	bl	803c1c2 <strcpy>
							secondLineConfig.blinkState = !secondLineConfig.blinkState;
 8022ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022ae4:	7cdb      	ldrb	r3, [r3, #19]
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	bf0c      	ite	eq
 8022aea:	2301      	moveq	r3, #1
 8022aec:	2300      	movne	r3, #0
 8022aee:	b2db      	uxtb	r3, r3
 8022af0:	461a      	mov	r2, r3
 8022af2:	4b5b      	ldr	r3, [pc, #364]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022af4:	74da      	strb	r2, [r3, #19]
						}

						lcd_driver_write_string(1, secondLine);
 8022af6:	4959      	ldr	r1, [pc, #356]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022af8:	2001      	movs	r0, #1
 8022afa:	f001 fbb3 	bl	8024264 <lcd_driver_write_string>

						(void_t) gos_mutexUnlock(&lcdMutex);
 8022afe:	485a      	ldr	r0, [pc, #360]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022b00:	f015 feac 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 8022b04:	e09d      	b.n	8022c42 <BSP_LCD_HandlerTask+0x45e>
			}
			case LCD_DISPLAY_CYCLIC_RIGHT:
			case LCD_DISPLAY_CYCLIC_LEFT:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > secondLineConfig.periodMs)
 8022b06:	f011 ffb5 	bl	8034a74 <gos_kernelGetSysTicks>
 8022b0a:	4602      	mov	r2, r0
 8022b0c:	4b54      	ldr	r3, [pc, #336]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b0e:	689b      	ldr	r3, [r3, #8]
 8022b10:	1ad2      	subs	r2, r2, r3
 8022b12:	4b53      	ldr	r3, [pc, #332]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b14:	685b      	ldr	r3, [r3, #4]
 8022b16:	429a      	cmp	r2, r3
 8022b18:	f240 8095 	bls.w	8022c46 <BSP_LCD_HandlerTask+0x462>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8022b20:	4851      	ldr	r0, [pc, #324]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022b22:	f015 fd95 	bl	8038650 <gos_mutexLock>
 8022b26:	4603      	mov	r3, r0
 8022b28:	2b55      	cmp	r3, #85	@ 0x55
 8022b2a:	f040 808c 	bne.w	8022c46 <BSP_LCD_HandlerTask+0x462>
					{
						secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8022b2e:	f011 ffa1 	bl	8034a74 <gos_kernelGetSysTicks>
 8022b32:	4603      	mov	r3, r0
 8022b34:	4a4a      	ldr	r2, [pc, #296]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b36:	6093      	str	r3, [r2, #8]
						BSP_LCD_HandlerShiftBuffer(secondLine, &secondLineShiftCounter, secondLineConfig.displayMode);
 8022b38:	4b49      	ldr	r3, [pc, #292]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b3a:	785b      	ldrb	r3, [r3, #1]
 8022b3c:	461a      	mov	r2, r3
 8022b3e:	494b      	ldr	r1, [pc, #300]	@ (8022c6c <BSP_LCD_HandlerTask+0x488>)
 8022b40:	4846      	ldr	r0, [pc, #280]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022b42:	f000 f8e3 	bl	8022d0c <BSP_LCD_HandlerShiftBuffer>
						lcd_driver_write_string(1, secondLine);
 8022b46:	4945      	ldr	r1, [pc, #276]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022b48:	2001      	movs	r0, #1
 8022b4a:	f001 fb8b 	bl	8024264 <lcd_driver_write_string>
						(void_t) gos_mutexUnlock(&lcdMutex);
 8022b4e:	4846      	ldr	r0, [pc, #280]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022b50:	f015 fe84 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 8022b54:	e077      	b.n	8022c46 <BSP_LCD_HandlerTask+0x462>
			}
			case LCD_DISPLAY_SHIFT_RIGHT:
			case LCD_DISPLAY_SHIFT_LEFT:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > secondLineConfig.periodMs)
 8022b56:	f011 ff8d 	bl	8034a74 <gos_kernelGetSysTicks>
 8022b5a:	4602      	mov	r2, r0
 8022b5c:	4b40      	ldr	r3, [pc, #256]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b5e:	689b      	ldr	r3, [r3, #8]
 8022b60:	1ad2      	subs	r2, r2, r3
 8022b62:	4b3f      	ldr	r3, [pc, #252]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b64:	685b      	ldr	r3, [r3, #4]
 8022b66:	429a      	cmp	r2, r3
 8022b68:	d96f      	bls.n	8022c4a <BSP_LCD_HandlerTask+0x466>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8022b6e:	483e      	ldr	r0, [pc, #248]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022b70:	f015 fd6e 	bl	8038650 <gos_mutexLock>
 8022b74:	4603      	mov	r3, r0
 8022b76:	2b55      	cmp	r3, #85	@ 0x55
 8022b78:	d167      	bne.n	8022c4a <BSP_LCD_HandlerTask+0x466>
					{
						secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8022b7a:	f011 ff7b 	bl	8034a74 <gos_kernelGetSysTicks>
 8022b7e:	4603      	mov	r3, r0
 8022b80:	4a37      	ldr	r2, [pc, #220]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b82:	6093      	str	r3, [r2, #8]

						if (secondLineShiftCounter == strlen(secondLine) - 16u)
 8022b84:	4b39      	ldr	r3, [pc, #228]	@ (8022c6c <BSP_LCD_HandlerTask+0x488>)
 8022b86:	881b      	ldrh	r3, [r3, #0]
 8022b88:	461c      	mov	r4, r3
 8022b8a:	4834      	ldr	r0, [pc, #208]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022b8c:	f7fd fba0 	bl	80202d0 <strlen>
 8022b90:	4603      	mov	r3, r0
 8022b92:	3b10      	subs	r3, #16
 8022b94:	429c      	cmp	r4, r3
 8022b96:	d107      	bne.n	8022ba8 <BSP_LCD_HandlerTask+0x3c4>
						{
							secondLineConfig.originalDisplayMode = secondLineConfig.displayMode;
 8022b98:	4b31      	ldr	r3, [pc, #196]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b9a:	785a      	ldrb	r2, [r3, #1]
 8022b9c:	4b30      	ldr	r3, [pc, #192]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022b9e:	709a      	strb	r2, [r3, #2]
							secondLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_1500;
 8022ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022ba2:	2206      	movs	r2, #6
 8022ba4:	705a      	strb	r2, [r3, #1]
 8022ba6:	e00a      	b.n	8022bbe <BSP_LCD_HandlerTask+0x3da>
						}
						else
						{
							BSP_LCD_HandlerShiftBuffer(secondLine, &secondLineShiftCounter, secondLineConfig.displayMode);
 8022ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022baa:	785b      	ldrb	r3, [r3, #1]
 8022bac:	461a      	mov	r2, r3
 8022bae:	492f      	ldr	r1, [pc, #188]	@ (8022c6c <BSP_LCD_HandlerTask+0x488>)
 8022bb0:	482a      	ldr	r0, [pc, #168]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022bb2:	f000 f8ab 	bl	8022d0c <BSP_LCD_HandlerShiftBuffer>
							lcd_driver_write_string(1, secondLine);
 8022bb6:	4929      	ldr	r1, [pc, #164]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022bb8:	2001      	movs	r0, #1
 8022bba:	f001 fb53 	bl	8024264 <lcd_driver_write_string>
						}
						(void_t) gos_mutexUnlock(&lcdMutex);
 8022bbe:	482a      	ldr	r0, [pc, #168]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022bc0:	f015 fe4c 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 8022bc4:	e041      	b.n	8022c4a <BSP_LCD_HandlerTask+0x466>
			}
			case LCD_DISPLAY_SHIFT_WAIT_1500:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > 1500)
 8022bc6:	f011 ff55 	bl	8034a74 <gos_kernelGetSysTicks>
 8022bca:	4602      	mov	r2, r0
 8022bcc:	4b24      	ldr	r3, [pc, #144]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022bce:	689b      	ldr	r3, [r3, #8]
 8022bd0:	1ad3      	subs	r3, r2, r3
 8022bd2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8022bd6:	4293      	cmp	r3, r2
 8022bd8:	d939      	bls.n	8022c4e <BSP_LCD_HandlerTask+0x46a>
				{
					if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022bda:	f04f 31ff 	mov.w	r1, #4294967295
 8022bde:	4822      	ldr	r0, [pc, #136]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022be0:	f015 fd36 	bl	8038650 <gos_mutexLock>
 8022be4:	4603      	mov	r3, r0
 8022be6:	2b55      	cmp	r3, #85	@ 0x55
 8022be8:	d131      	bne.n	8022c4e <BSP_LCD_HandlerTask+0x46a>
					{
						secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8022bea:	f011 ff43 	bl	8034a74 <gos_kernelGetSysTicks>
 8022bee:	4603      	mov	r3, r0
 8022bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022bf2:	6093      	str	r3, [r2, #8]
						BSP_LCD_HandlerShiftReset(secondLine, &secondLineShiftCounter, secondLineConfig.originalDisplayMode);
 8022bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022bf6:	789b      	ldrb	r3, [r3, #2]
 8022bf8:	461a      	mov	r2, r3
 8022bfa:	491c      	ldr	r1, [pc, #112]	@ (8022c6c <BSP_LCD_HandlerTask+0x488>)
 8022bfc:	4817      	ldr	r0, [pc, #92]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022bfe:	f000 f837 	bl	8022c70 <BSP_LCD_HandlerShiftReset>
						lcd_driver_write_string(1, secondLine);
 8022c02:	4916      	ldr	r1, [pc, #88]	@ (8022c5c <BSP_LCD_HandlerTask+0x478>)
 8022c04:	2001      	movs	r0, #1
 8022c06:	f001 fb2d 	bl	8024264 <lcd_driver_write_string>
						secondLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_500;
 8022c0a:	4b15      	ldr	r3, [pc, #84]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022c0c:	2207      	movs	r2, #7
 8022c0e:	705a      	strb	r2, [r3, #1]

						(void_t) gos_mutexUnlock(&lcdMutex);
 8022c10:	4815      	ldr	r0, [pc, #84]	@ (8022c68 <BSP_LCD_HandlerTask+0x484>)
 8022c12:	f015 fe23 	bl	803885c <gos_mutexUnlock>
					}
				}
				break;
 8022c16:	e01a      	b.n	8022c4e <BSP_LCD_HandlerTask+0x46a>
			}
			case LCD_DISPLAY_SHIFT_WAIT_500:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > 500)
 8022c18:	f011 ff2c 	bl	8034a74 <gos_kernelGetSysTicks>
 8022c1c:	4602      	mov	r2, r0
 8022c1e:	4b10      	ldr	r3, [pc, #64]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022c20:	689b      	ldr	r3, [r3, #8]
 8022c22:	1ad3      	subs	r3, r2, r3
 8022c24:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8022c28:	d913      	bls.n	8022c52 <BSP_LCD_HandlerTask+0x46e>
				{
					secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8022c2a:	f011 ff23 	bl	8034a74 <gos_kernelGetSysTicks>
 8022c2e:	4603      	mov	r3, r0
 8022c30:	4a0b      	ldr	r2, [pc, #44]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022c32:	6093      	str	r3, [r2, #8]
					secondLineConfig.displayMode = secondLineConfig.originalDisplayMode;
 8022c34:	4b0a      	ldr	r3, [pc, #40]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022c36:	789a      	ldrb	r2, [r3, #2]
 8022c38:	4b09      	ldr	r3, [pc, #36]	@ (8022c60 <BSP_LCD_HandlerTask+0x47c>)
 8022c3a:	705a      	strb	r2, [r3, #1]
				}
				break;
 8022c3c:	e009      	b.n	8022c52 <BSP_LCD_HandlerTask+0x46e>
			}
			default: break;
 8022c3e:	bf00      	nop
 8022c40:	e008      	b.n	8022c54 <BSP_LCD_HandlerTask+0x470>
				break;
 8022c42:	bf00      	nop
 8022c44:	e006      	b.n	8022c54 <BSP_LCD_HandlerTask+0x470>
				break;
 8022c46:	bf00      	nop
 8022c48:	e004      	b.n	8022c54 <BSP_LCD_HandlerTask+0x470>
				break;
 8022c4a:	bf00      	nop
 8022c4c:	e002      	b.n	8022c54 <BSP_LCD_HandlerTask+0x470>
				break;
 8022c4e:	bf00      	nop
 8022c50:	e000      	b.n	8022c54 <BSP_LCD_HandlerTask+0x470>
				break;
 8022c52:	bf00      	nop
		}
		gos_taskSleep(10);
 8022c54:	200a      	movs	r0, #10
 8022c56:	f013 f8c3 	bl	8035de0 <gos_taskSleep>
		switch (firstLineConfig.displayMode)
 8022c5a:	e5c6      	b.n	80227ea <BSP_LCD_HandlerTask+0x6>
 8022c5c:	20006668 	.word	0x20006668
 8022c60:	200067fc 	.word	0x200067fc
 8022c64:	20006768 	.word	0x20006768
 8022c68:	20006810 	.word	0x20006810
 8022c6c:	20006816 	.word	0x20006816

08022c70 <BSP_LCD_HandlerShiftReset>:
	}
}

GOS_STATIC void_t BSP_LCD_HandlerShiftReset (char_t* pBuffer, u16_t* pShiftCounter, lcd_display_mode_t direction)
{
 8022c70:	b580      	push	{r7, lr}
 8022c72:	b086      	sub	sp, #24
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	60f8      	str	r0, [r7, #12]
 8022c78:	60b9      	str	r1, [r7, #8]
 8022c7a:	4613      	mov	r3, r2
 8022c7c:	71fb      	strb	r3, [r7, #7]
	u16_t index = 0u;
 8022c7e:	2300      	movs	r3, #0
 8022c80:	82fb      	strh	r3, [r7, #22]
	u16_t cntr  = 0u;
 8022c82:	2300      	movs	r3, #0
 8022c84:	827b      	strh	r3, [r7, #18]
	u16_t resetCycles = *pShiftCounter;
 8022c86:	68bb      	ldr	r3, [r7, #8]
 8022c88:	881b      	ldrh	r3, [r3, #0]
 8022c8a:	82bb      	strh	r3, [r7, #20]
	switch (direction)
 8022c8c:	79fb      	ldrb	r3, [r7, #7]
 8022c8e:	3b01      	subs	r3, #1
 8022c90:	2b03      	cmp	r3, #3
 8022c92:	d835      	bhi.n	8022d00 <BSP_LCD_HandlerShiftReset+0x90>
 8022c94:	a201      	add	r2, pc, #4	@ (adr r2, 8022c9c <BSP_LCD_HandlerShiftReset+0x2c>)
 8022c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c9a:	bf00      	nop
 8022c9c:	08022cd7 	.word	0x08022cd7
 8022ca0:	08022cad 	.word	0x08022cad
 8022ca4:	08022cd7 	.word	0x08022cd7
 8022ca8:	08022cad 	.word	0x08022cad
	{
		case LCD_DISPLAY_CYCLIC_LEFT:
		case LCD_DISPLAY_SHIFT_LEFT:
		{
			for (index = 0u; index < resetCycles; index++)
 8022cac:	2300      	movs	r3, #0
 8022cae:	82fb      	strh	r3, [r7, #22]
 8022cb0:	e009      	b.n	8022cc6 <BSP_LCD_HandlerShiftReset+0x56>
			{
				BSP_LCD_HandlerShiftBuffer(pBuffer, &cntr, LCD_DISPLAY_SHIFT_RIGHT);
 8022cb2:	f107 0312 	add.w	r3, r7, #18
 8022cb6:	2201      	movs	r2, #1
 8022cb8:	4619      	mov	r1, r3
 8022cba:	68f8      	ldr	r0, [r7, #12]
 8022cbc:	f000 f826 	bl	8022d0c <BSP_LCD_HandlerShiftBuffer>
			for (index = 0u; index < resetCycles; index++)
 8022cc0:	8afb      	ldrh	r3, [r7, #22]
 8022cc2:	3301      	adds	r3, #1
 8022cc4:	82fb      	strh	r3, [r7, #22]
 8022cc6:	8afa      	ldrh	r2, [r7, #22]
 8022cc8:	8abb      	ldrh	r3, [r7, #20]
 8022cca:	429a      	cmp	r2, r3
 8022ccc:	d3f1      	bcc.n	8022cb2 <BSP_LCD_HandlerShiftReset+0x42>
			}
			*pShiftCounter = 0U;
 8022cce:	68bb      	ldr	r3, [r7, #8]
 8022cd0:	2200      	movs	r2, #0
 8022cd2:	801a      	strh	r2, [r3, #0]
			break;
 8022cd4:	e015      	b.n	8022d02 <BSP_LCD_HandlerShiftReset+0x92>
		}
		case LCD_DISPLAY_CYCLIC_RIGHT:
		case LCD_DISPLAY_SHIFT_RIGHT:
		{
			for (index = 0u; index < resetCycles; index++)
 8022cd6:	2300      	movs	r3, #0
 8022cd8:	82fb      	strh	r3, [r7, #22]
 8022cda:	e009      	b.n	8022cf0 <BSP_LCD_HandlerShiftReset+0x80>
			{
				BSP_LCD_HandlerShiftBuffer(pBuffer, &cntr, LCD_DISPLAY_SHIFT_LEFT);
 8022cdc:	f107 0312 	add.w	r3, r7, #18
 8022ce0:	2202      	movs	r2, #2
 8022ce2:	4619      	mov	r1, r3
 8022ce4:	68f8      	ldr	r0, [r7, #12]
 8022ce6:	f000 f811 	bl	8022d0c <BSP_LCD_HandlerShiftBuffer>
			for (index = 0u; index < resetCycles; index++)
 8022cea:	8afb      	ldrh	r3, [r7, #22]
 8022cec:	3301      	adds	r3, #1
 8022cee:	82fb      	strh	r3, [r7, #22]
 8022cf0:	8afa      	ldrh	r2, [r7, #22]
 8022cf2:	8abb      	ldrh	r3, [r7, #20]
 8022cf4:	429a      	cmp	r2, r3
 8022cf6:	d3f1      	bcc.n	8022cdc <BSP_LCD_HandlerShiftReset+0x6c>
			}
			*pShiftCounter = 0U;
 8022cf8:	68bb      	ldr	r3, [r7, #8]
 8022cfa:	2200      	movs	r2, #0
 8022cfc:	801a      	strh	r2, [r3, #0]
			break;
 8022cfe:	e000      	b.n	8022d02 <BSP_LCD_HandlerShiftReset+0x92>
		}
		default: break;
 8022d00:	bf00      	nop
	}
}
 8022d02:	bf00      	nop
 8022d04:	3718      	adds	r7, #24
 8022d06:	46bd      	mov	sp, r7
 8022d08:	bd80      	pop	{r7, pc}
 8022d0a:	bf00      	nop

08022d0c <BSP_LCD_HandlerShiftBuffer>:

GOS_STATIC void_t BSP_LCD_HandlerShiftBuffer (char_t* pBuffer, u16_t* pShiftCounter, lcd_display_mode_t direction)
{
 8022d0c:	b590      	push	{r4, r7, lr}
 8022d0e:	b087      	sub	sp, #28
 8022d10:	af00      	add	r7, sp, #0
 8022d12:	60f8      	str	r0, [r7, #12]
 8022d14:	60b9      	str	r1, [r7, #8]
 8022d16:	4613      	mov	r3, r2
 8022d18:	71fb      	strb	r3, [r7, #7]
	u16_t index = 0u;
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	82fb      	strh	r3, [r7, #22]

	switch (direction)
 8022d1e:	79fb      	ldrb	r3, [r7, #7]
 8022d20:	3b01      	subs	r3, #1
 8022d22:	2b03      	cmp	r3, #3
 8022d24:	d867      	bhi.n	8022df6 <BSP_LCD_HandlerShiftBuffer+0xea>
 8022d26:	a201      	add	r2, pc, #4	@ (adr r2, 8022d2c <BSP_LCD_HandlerShiftBuffer+0x20>)
 8022d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d2c:	08022d8f 	.word	0x08022d8f
 8022d30:	08022d3d 	.word	0x08022d3d
 8022d34:	08022d8f 	.word	0x08022d8f
 8022d38:	08022d3d 	.word	0x08022d3d
	{
		case LCD_DISPLAY_CYCLIC_LEFT:
		case LCD_DISPLAY_SHIFT_LEFT:
		{
			char_t firstChar = pBuffer[0];
 8022d3c:	68fb      	ldr	r3, [r7, #12]
 8022d3e:	781b      	ldrb	r3, [r3, #0]
 8022d40:	757b      	strb	r3, [r7, #21]
			for (index = 1u; index < strlen(pBuffer); index++)
 8022d42:	2301      	movs	r3, #1
 8022d44:	82fb      	strh	r3, [r7, #22]
 8022d46:	e00b      	b.n	8022d60 <BSP_LCD_HandlerShiftBuffer+0x54>
			{
				pBuffer[index - 1] = pBuffer[index];
 8022d48:	8afb      	ldrh	r3, [r7, #22]
 8022d4a:	68fa      	ldr	r2, [r7, #12]
 8022d4c:	441a      	add	r2, r3
 8022d4e:	8afb      	ldrh	r3, [r7, #22]
 8022d50:	3b01      	subs	r3, #1
 8022d52:	68f9      	ldr	r1, [r7, #12]
 8022d54:	440b      	add	r3, r1
 8022d56:	7812      	ldrb	r2, [r2, #0]
 8022d58:	701a      	strb	r2, [r3, #0]
			for (index = 1u; index < strlen(pBuffer); index++)
 8022d5a:	8afb      	ldrh	r3, [r7, #22]
 8022d5c:	3301      	adds	r3, #1
 8022d5e:	82fb      	strh	r3, [r7, #22]
 8022d60:	8afc      	ldrh	r4, [r7, #22]
 8022d62:	68f8      	ldr	r0, [r7, #12]
 8022d64:	f7fd fab4 	bl	80202d0 <strlen>
 8022d68:	4603      	mov	r3, r0
 8022d6a:	429c      	cmp	r4, r3
 8022d6c:	d3ec      	bcc.n	8022d48 <BSP_LCD_HandlerShiftBuffer+0x3c>
			}
			pBuffer[strlen(pBuffer) - 1] = firstChar;
 8022d6e:	68f8      	ldr	r0, [r7, #12]
 8022d70:	f7fd faae 	bl	80202d0 <strlen>
 8022d74:	4603      	mov	r3, r0
 8022d76:	3b01      	subs	r3, #1
 8022d78:	68fa      	ldr	r2, [r7, #12]
 8022d7a:	4413      	add	r3, r2
 8022d7c:	7d7a      	ldrb	r2, [r7, #21]
 8022d7e:	701a      	strb	r2, [r3, #0]
			(*pShiftCounter)++;
 8022d80:	68bb      	ldr	r3, [r7, #8]
 8022d82:	881b      	ldrh	r3, [r3, #0]
 8022d84:	3301      	adds	r3, #1
 8022d86:	b29a      	uxth	r2, r3
 8022d88:	68bb      	ldr	r3, [r7, #8]
 8022d8a:	801a      	strh	r2, [r3, #0]
			break;
 8022d8c:	e034      	b.n	8022df8 <BSP_LCD_HandlerShiftBuffer+0xec>
		}
		case LCD_DISPLAY_CYCLIC_RIGHT:
		case LCD_DISPLAY_SHIFT_RIGHT:
		{
			u16_t length = (u8_t)strlen(pBuffer);
 8022d8e:	68f8      	ldr	r0, [r7, #12]
 8022d90:	f7fd fa9e 	bl	80202d0 <strlen>
 8022d94:	4603      	mov	r3, r0
 8022d96:	b2db      	uxtb	r3, r3
 8022d98:	827b      	strh	r3, [r7, #18]
			char_t lastChar = pBuffer[strlen(pBuffer) - 1];
 8022d9a:	68f8      	ldr	r0, [r7, #12]
 8022d9c:	f7fd fa98 	bl	80202d0 <strlen>
 8022da0:	4603      	mov	r3, r0
 8022da2:	3b01      	subs	r3, #1
 8022da4:	68fa      	ldr	r2, [r7, #12]
 8022da6:	4413      	add	r3, r2
 8022da8:	781b      	ldrb	r3, [r3, #0]
 8022daa:	747b      	strb	r3, [r7, #17]

			for (index = 1u; index < strlen(pBuffer); index++)
 8022dac:	2301      	movs	r3, #1
 8022dae:	82fb      	strh	r3, [r7, #22]
 8022db0:	e010      	b.n	8022dd4 <BSP_LCD_HandlerShiftBuffer+0xc8>
			{
				pBuffer[length - index] = pBuffer[length - index - 1];
 8022db2:	8a7a      	ldrh	r2, [r7, #18]
 8022db4:	8afb      	ldrh	r3, [r7, #22]
 8022db6:	1ad3      	subs	r3, r2, r3
 8022db8:	3b01      	subs	r3, #1
 8022dba:	68fa      	ldr	r2, [r7, #12]
 8022dbc:	441a      	add	r2, r3
 8022dbe:	8a79      	ldrh	r1, [r7, #18]
 8022dc0:	8afb      	ldrh	r3, [r7, #22]
 8022dc2:	1acb      	subs	r3, r1, r3
 8022dc4:	4619      	mov	r1, r3
 8022dc6:	68fb      	ldr	r3, [r7, #12]
 8022dc8:	440b      	add	r3, r1
 8022dca:	7812      	ldrb	r2, [r2, #0]
 8022dcc:	701a      	strb	r2, [r3, #0]
			for (index = 1u; index < strlen(pBuffer); index++)
 8022dce:	8afb      	ldrh	r3, [r7, #22]
 8022dd0:	3301      	adds	r3, #1
 8022dd2:	82fb      	strh	r3, [r7, #22]
 8022dd4:	8afc      	ldrh	r4, [r7, #22]
 8022dd6:	68f8      	ldr	r0, [r7, #12]
 8022dd8:	f7fd fa7a 	bl	80202d0 <strlen>
 8022ddc:	4603      	mov	r3, r0
 8022dde:	429c      	cmp	r4, r3
 8022de0:	d3e7      	bcc.n	8022db2 <BSP_LCD_HandlerShiftBuffer+0xa6>
			}
			pBuffer[0] = lastChar;
 8022de2:	68fb      	ldr	r3, [r7, #12]
 8022de4:	7c7a      	ldrb	r2, [r7, #17]
 8022de6:	701a      	strb	r2, [r3, #0]
			(*pShiftCounter)++;
 8022de8:	68bb      	ldr	r3, [r7, #8]
 8022dea:	881b      	ldrh	r3, [r3, #0]
 8022dec:	3301      	adds	r3, #1
 8022dee:	b29a      	uxth	r2, r3
 8022df0:	68bb      	ldr	r3, [r7, #8]
 8022df2:	801a      	strh	r2, [r3, #0]
			break;
 8022df4:	e000      	b.n	8022df8 <BSP_LCD_HandlerShiftBuffer+0xec>
		}
		default: break;
 8022df6:	bf00      	nop
	}
}
 8022df8:	bf00      	nop
 8022dfa:	371c      	adds	r7, #28
 8022dfc:	46bd      	mov	sp, r7
 8022dfe:	bd90      	pop	{r4, r7, pc}

08022e00 <bsp_rtcHandlerInit>:

/*
 * Function: bsp_rtcHandlerInit
 */
gos_result_t bsp_rtcHandlerInit (void_t)
{
 8022e00:	b580      	push	{r7, lr}
 8022e02:	b082      	sub	sp, #8
 8022e04:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8022e06:	2355      	movs	r3, #85	@ 0x55
 8022e08:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	initResult &= gos_sysmonRegisterUserMessage(&bspRtcTimeSetMsgDesc);
 8022e0a:	480d      	ldr	r0, [pc, #52]	@ (8022e40 <bsp_rtcHandlerInit+0x40>)
 8022e0c:	f016 fe32 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8022e10:	4603      	mov	r3, r0
 8022e12:	461a      	mov	r2, r3
 8022e14:	79fb      	ldrb	r3, [r7, #7]
 8022e16:	4013      	ands	r3, r2
 8022e18:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_taskRegister(&bspRtcTask, NULL);
 8022e1a:	2100      	movs	r1, #0
 8022e1c:	4809      	ldr	r0, [pc, #36]	@ (8022e44 <bsp_rtcHandlerInit+0x44>)
 8022e1e:	f012 fe4d 	bl	8035abc <gos_taskRegister>
 8022e22:	4603      	mov	r3, r0
 8022e24:	461a      	mov	r2, r3
 8022e26:	79fb      	ldrb	r3, [r7, #7]
 8022e28:	4013      	ands	r3, r2
 8022e2a:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 8022e2c:	79fb      	ldrb	r3, [r7, #7]
 8022e2e:	2b55      	cmp	r3, #85	@ 0x55
 8022e30:	d001      	beq.n	8022e36 <bsp_rtcHandlerInit+0x36>
	{
		initResult = GOS_ERROR;
 8022e32:	23ae      	movs	r3, #174	@ 0xae
 8022e34:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Nothing to do.
	}

	return initResult;
 8022e36:	79fb      	ldrb	r3, [r7, #7]
}
 8022e38:	4618      	mov	r0, r3
 8022e3a:	3708      	adds	r7, #8
 8022e3c:	46bd      	mov	sp, r7
 8022e3e:	bd80      	pop	{r7, pc}
 8022e40:	20001018 	.word	0x20001018
 8022e44:	20000fac 	.word	0x20000fac

08022e48 <bsp_rtcHandlerTask>:

// TODO
GOS_STATIC void_t bsp_rtcHandlerTask (void_t)
{
 8022e48:	b580      	push	{r7, lr}
 8022e4a:	b084      	sub	sp, #16
 8022e4c:	af00      	add	r7, sp, #0
	 */
	for (;;)
	{
		// Periodically update system time from RTC
		// to keep it synchronized.
		(void_t) drv_rtcTimeGet(&time, NULL);
 8022e4e:	1d3b      	adds	r3, r7, #4
 8022e50:	2100      	movs	r1, #0
 8022e52:	4618      	mov	r0, r3
 8022e54:	f000 f9e9 	bl	802322a <drv_rtcTimeGet>
		(void_t) gos_timeSet(&time);
 8022e58:	1d3b      	adds	r3, r7, #4
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	f017 fa7c 	bl	803a358 <gos_timeSet>

		// This is done every 10 seconds.
		(void_t) gos_taskSleep(10000);
 8022e60:	f242 7010 	movw	r0, #10000	@ 0x2710
 8022e64:	f012 ffbc 	bl	8035de0 <gos_taskSleep>
		(void_t) drv_rtcTimeGet(&time, NULL);
 8022e68:	bf00      	nop
 8022e6a:	e7f0      	b.n	8022e4e <bsp_rtcHandlerTask+0x6>

08022e6c <bsp_rtcHandlerTimeSetReqCallback>:
	}
}

GOS_STATIC void_t bsp_rtcHandlerTimeSetReqCallback (void_t)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b086      	sub	sp, #24
 8022e70:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_time_t desiredTime = {0};
 8022e72:	1d3b      	adds	r3, r7, #4
 8022e74:	2200      	movs	r2, #0
 8022e76:	601a      	str	r2, [r3, #0]
 8022e78:	605a      	str	r2, [r3, #4]
 8022e7a:	811a      	strh	r2, [r3, #8]
	u8_t       result;

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&desiredTime, (void_t*)rtcBuffer, sizeof(desiredTime));
 8022e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8022ebc <bsp_rtcHandlerTimeSetReqCallback+0x50>)
 8022e7e:	1d3b      	adds	r3, r7, #4
 8022e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8022e82:	c303      	stmia	r3!, {r0, r1}
 8022e84:	801a      	strh	r2, [r3, #0]

	if (drv_rtcTimeSet(&desiredTime, 3) == GOS_SUCCESS)
 8022e86:	1d3b      	adds	r3, r7, #4
 8022e88:	2103      	movs	r1, #3
 8022e8a:	4618      	mov	r0, r3
 8022e8c:	f000 f976 	bl	802317c <drv_rtcTimeSet>
 8022e90:	4603      	mov	r3, r0
 8022e92:	2b55      	cmp	r3, #85	@ 0x55
 8022e94:	d102      	bne.n	8022e9c <bsp_rtcHandlerTimeSetReqCallback+0x30>
	{
		result = 40;
 8022e96:	2328      	movs	r3, #40	@ 0x28
 8022e98:	70fb      	strb	r3, [r7, #3]
 8022e9a:	e001      	b.n	8022ea0 <bsp_rtcHandlerTimeSetReqCallback+0x34>
	}
	else
	{
		result = 99;
 8022e9c:	2363      	movs	r3, #99	@ 0x63
 8022e9e:	70fb      	strb	r3, [r7, #3]
	}

	(void_t) gos_gcpTransmitMessage(
 8022ea0:	1cfa      	adds	r2, r7, #3
 8022ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022ea6:	9300      	str	r3, [sp, #0]
 8022ea8:	2301      	movs	r3, #1
 8022eaa:	f648 2101 	movw	r1, #35329	@ 0x8a01
 8022eae:	2000      	movs	r0, #0
 8022eb0:	f014 fe28 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			APP_SYSMON_MSG_RTC_SET_RESP,
			(void_t*)&result,
			sizeof(u8_t),
			0xFFFF);
}
 8022eb4:	bf00      	nop
 8022eb6:	3710      	adds	r7, #16
 8022eb8:	46bd      	mov	sp, r7
 8022eba:	bd80      	pop	{r7, pc}
 8022ebc:	20006818 	.word	0x20006818

08022ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8022ec0:	b480      	push	{r7}
 8022ec2:	af00      	add	r7, sp, #0
	return 1;
 8022ec4:	2301      	movs	r3, #1
}
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	46bd      	mov	sp, r7
 8022eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ece:	4770      	bx	lr

08022ed0 <_kill>:

int _kill(int pid, int sig)
{
 8022ed0:	b580      	push	{r7, lr}
 8022ed2:	b082      	sub	sp, #8
 8022ed4:	af00      	add	r7, sp, #0
 8022ed6:	6078      	str	r0, [r7, #4]
 8022ed8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8022eda:	f019 f945 	bl	803c168 <__errno>
 8022ede:	4603      	mov	r3, r0
 8022ee0:	2216      	movs	r2, #22
 8022ee2:	601a      	str	r2, [r3, #0]
	return -1;
 8022ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022ee8:	4618      	mov	r0, r3
 8022eea:	3708      	adds	r7, #8
 8022eec:	46bd      	mov	sp, r7
 8022eee:	bd80      	pop	{r7, pc}

08022ef0 <_exit>:

void _exit (int status)
{
 8022ef0:	b580      	push	{r7, lr}
 8022ef2:	b082      	sub	sp, #8
 8022ef4:	af00      	add	r7, sp, #0
 8022ef6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8022ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8022efc:	6878      	ldr	r0, [r7, #4]
 8022efe:	f7ff ffe7 	bl	8022ed0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8022f02:	bf00      	nop
 8022f04:	e7fd      	b.n	8022f02 <_exit+0x12>

08022f06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8022f06:	b580      	push	{r7, lr}
 8022f08:	b086      	sub	sp, #24
 8022f0a:	af00      	add	r7, sp, #0
 8022f0c:	60f8      	str	r0, [r7, #12]
 8022f0e:	60b9      	str	r1, [r7, #8]
 8022f10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022f12:	2300      	movs	r3, #0
 8022f14:	617b      	str	r3, [r7, #20]
 8022f16:	e00a      	b.n	8022f2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8022f18:	f3af 8000 	nop.w
 8022f1c:	4601      	mov	r1, r0
 8022f1e:	68bb      	ldr	r3, [r7, #8]
 8022f20:	1c5a      	adds	r2, r3, #1
 8022f22:	60ba      	str	r2, [r7, #8]
 8022f24:	b2ca      	uxtb	r2, r1
 8022f26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022f28:	697b      	ldr	r3, [r7, #20]
 8022f2a:	3301      	adds	r3, #1
 8022f2c:	617b      	str	r3, [r7, #20]
 8022f2e:	697a      	ldr	r2, [r7, #20]
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	429a      	cmp	r2, r3
 8022f34:	dbf0      	blt.n	8022f18 <_read+0x12>
	}

return len;
 8022f36:	687b      	ldr	r3, [r7, #4]
}
 8022f38:	4618      	mov	r0, r3
 8022f3a:	3718      	adds	r7, #24
 8022f3c:	46bd      	mov	sp, r7
 8022f3e:	bd80      	pop	{r7, pc}

08022f40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8022f40:	b580      	push	{r7, lr}
 8022f42:	b086      	sub	sp, #24
 8022f44:	af00      	add	r7, sp, #0
 8022f46:	60f8      	str	r0, [r7, #12]
 8022f48:	60b9      	str	r1, [r7, #8]
 8022f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022f4c:	2300      	movs	r3, #0
 8022f4e:	617b      	str	r3, [r7, #20]
 8022f50:	e009      	b.n	8022f66 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8022f52:	68bb      	ldr	r3, [r7, #8]
 8022f54:	1c5a      	adds	r2, r3, #1
 8022f56:	60ba      	str	r2, [r7, #8]
 8022f58:	781b      	ldrb	r3, [r3, #0]
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022f60:	697b      	ldr	r3, [r7, #20]
 8022f62:	3301      	adds	r3, #1
 8022f64:	617b      	str	r3, [r7, #20]
 8022f66:	697a      	ldr	r2, [r7, #20]
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	429a      	cmp	r2, r3
 8022f6c:	dbf1      	blt.n	8022f52 <_write+0x12>
	}
	return len;
 8022f6e:	687b      	ldr	r3, [r7, #4]
}
 8022f70:	4618      	mov	r0, r3
 8022f72:	3718      	adds	r7, #24
 8022f74:	46bd      	mov	sp, r7
 8022f76:	bd80      	pop	{r7, pc}

08022f78 <_close>:

int _close(int file)
{
 8022f78:	b480      	push	{r7}
 8022f7a:	b083      	sub	sp, #12
 8022f7c:	af00      	add	r7, sp, #0
 8022f7e:	6078      	str	r0, [r7, #4]
	return -1;
 8022f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022f84:	4618      	mov	r0, r3
 8022f86:	370c      	adds	r7, #12
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8e:	4770      	bx	lr

08022f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8022f90:	b480      	push	{r7}
 8022f92:	b083      	sub	sp, #12
 8022f94:	af00      	add	r7, sp, #0
 8022f96:	6078      	str	r0, [r7, #4]
 8022f98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8022f9a:	683b      	ldr	r3, [r7, #0]
 8022f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8022fa0:	605a      	str	r2, [r3, #4]
	return 0;
 8022fa2:	2300      	movs	r3, #0
}
 8022fa4:	4618      	mov	r0, r3
 8022fa6:	370c      	adds	r7, #12
 8022fa8:	46bd      	mov	sp, r7
 8022faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fae:	4770      	bx	lr

08022fb0 <_isatty>:

int _isatty(int file)
{
 8022fb0:	b480      	push	{r7}
 8022fb2:	b083      	sub	sp, #12
 8022fb4:	af00      	add	r7, sp, #0
 8022fb6:	6078      	str	r0, [r7, #4]
	return 1;
 8022fb8:	2301      	movs	r3, #1
}
 8022fba:	4618      	mov	r0, r3
 8022fbc:	370c      	adds	r7, #12
 8022fbe:	46bd      	mov	sp, r7
 8022fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fc4:	4770      	bx	lr

08022fc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8022fc6:	b480      	push	{r7}
 8022fc8:	b085      	sub	sp, #20
 8022fca:	af00      	add	r7, sp, #0
 8022fcc:	60f8      	str	r0, [r7, #12]
 8022fce:	60b9      	str	r1, [r7, #8]
 8022fd0:	607a      	str	r2, [r7, #4]
	return 0;
 8022fd2:	2300      	movs	r3, #0
}
 8022fd4:	4618      	mov	r0, r3
 8022fd6:	3714      	adds	r7, #20
 8022fd8:	46bd      	mov	sp, r7
 8022fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fde:	4770      	bx	lr

08022fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022fe0:	b580      	push	{r7, lr}
 8022fe2:	b086      	sub	sp, #24
 8022fe4:	af00      	add	r7, sp, #0
 8022fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022fe8:	4a14      	ldr	r2, [pc, #80]	@ (802303c <_sbrk+0x5c>)
 8022fea:	4b15      	ldr	r3, [pc, #84]	@ (8023040 <_sbrk+0x60>)
 8022fec:	1ad3      	subs	r3, r2, r3
 8022fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022ff0:	697b      	ldr	r3, [r7, #20]
 8022ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022ff4:	4b13      	ldr	r3, [pc, #76]	@ (8023044 <_sbrk+0x64>)
 8022ff6:	681b      	ldr	r3, [r3, #0]
 8022ff8:	2b00      	cmp	r3, #0
 8022ffa:	d102      	bne.n	8023002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022ffc:	4b11      	ldr	r3, [pc, #68]	@ (8023044 <_sbrk+0x64>)
 8022ffe:	4a12      	ldr	r2, [pc, #72]	@ (8023048 <_sbrk+0x68>)
 8023000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8023002:	4b10      	ldr	r3, [pc, #64]	@ (8023044 <_sbrk+0x64>)
 8023004:	681a      	ldr	r2, [r3, #0]
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	4413      	add	r3, r2
 802300a:	693a      	ldr	r2, [r7, #16]
 802300c:	429a      	cmp	r2, r3
 802300e:	d207      	bcs.n	8023020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8023010:	f019 f8aa 	bl	803c168 <__errno>
 8023014:	4603      	mov	r3, r0
 8023016:	220c      	movs	r2, #12
 8023018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802301a:	f04f 33ff 	mov.w	r3, #4294967295
 802301e:	e009      	b.n	8023034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8023020:	4b08      	ldr	r3, [pc, #32]	@ (8023044 <_sbrk+0x64>)
 8023022:	681b      	ldr	r3, [r3, #0]
 8023024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8023026:	4b07      	ldr	r3, [pc, #28]	@ (8023044 <_sbrk+0x64>)
 8023028:	681a      	ldr	r2, [r3, #0]
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	4413      	add	r3, r2
 802302e:	4a05      	ldr	r2, [pc, #20]	@ (8023044 <_sbrk+0x64>)
 8023030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8023032:	68fb      	ldr	r3, [r7, #12]
}
 8023034:	4618      	mov	r0, r3
 8023036:	3718      	adds	r7, #24
 8023038:	46bd      	mov	sp, r7
 802303a:	bd80      	pop	{r7, pc}
 802303c:	20020000 	.word	0x20020000
 8023040:	00000400 	.word	0x00000400
 8023044:	20006898 	.word	0x20006898
 8023048:	200150f0 	.word	0x200150f0

0802304c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802304c:	b480      	push	{r7}
 802304e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8023050:	4b06      	ldr	r3, [pc, #24]	@ (802306c <SystemInit+0x20>)
 8023052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023056:	4a05      	ldr	r2, [pc, #20]	@ (802306c <SystemInit+0x20>)
 8023058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 802305c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8023060:	bf00      	nop
 8023062:	46bd      	mov	sp, r7
 8023064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023068:	4770      	bx	lr
 802306a:	bf00      	nop
 802306c:	e000ed00 	.word	0xe000ed00

08023070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8023070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80230a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8023074:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8023076:	e003      	b.n	8023080 <LoopCopyDataInit>

08023078 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8023078:	4b0c      	ldr	r3, [pc, #48]	@ (80230ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802307a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802307c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802307e:	3104      	adds	r1, #4

08023080 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8023080:	480b      	ldr	r0, [pc, #44]	@ (80230b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8023082:	4b0c      	ldr	r3, [pc, #48]	@ (80230b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8023084:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8023086:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8023088:	d3f6      	bcc.n	8023078 <CopyDataInit>
  ldr  r2, =_sbss
 802308a:	4a0b      	ldr	r2, [pc, #44]	@ (80230b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802308c:	e002      	b.n	8023094 <LoopFillZerobss>

0802308e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802308e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8023090:	f842 3b04 	str.w	r3, [r2], #4

08023094 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8023094:	4b09      	ldr	r3, [pc, #36]	@ (80230bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8023096:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8023098:	d3f9      	bcc.n	802308e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802309a:	f7ff ffd7 	bl	802304c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802309e:	f019 f869 	bl	803c174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80230a2:	f014 fab3 	bl	803760c <main>
  bx  lr    
 80230a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80230a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80230ac:	08040d08 	.word	0x08040d08
  ldr  r0, =_sdata
 80230b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80230b4:	20003320 	.word	0x20003320
  ldr  r2, =_sbss
 80230b8:	20003320 	.word	0x20003320
  ldr  r3, = _ebss
 80230bc:	200150ec 	.word	0x200150ec

080230c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80230c0:	e7fe      	b.n	80230c0 <CAN1_RX0_IRQHandler>
	...

080230c4 <driver_init>:
#include "gos_lib.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 80230c4:	b580      	push	{r7, lr}
 80230c6:	b082      	sub	sp, #8
 80230c8:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 80230ca:	2355      	movs	r3, #85	@ 0x55
 80230cc:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 80230ce:	f001 f9b7 	bl	8024440 <rcc_driver_init>
 80230d2:	4603      	mov	r3, r0
 80230d4:	461a      	mov	r2, r3
 80230d6:	79fb      	ldrb	r3, [r7, #7]
 80230d8:	4013      	ands	r3, r2
 80230da:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 80230dc:	f00d f99e 	bl	803041c <drv_tmrInit>
 80230e0:	4603      	mov	r3, r0
 80230e2:	461a      	mov	r2, r3
 80230e4:	79fb      	ldrb	r3, [r7, #7]
 80230e6:	4013      	ands	r3, r2
 80230e8:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 80230ea:	f00d f959 	bl	80303a0 <drv_systimerStart>
 80230ee:	4603      	mov	r3, r0
 80230f0:	461a      	mov	r2, r3
 80230f2:	79fb      	ldrb	r3, [r7, #7]
 80230f4:	4013      	ands	r3, r2
 80230f6:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 80230f8:	f00b fdaa 	bl	802ec50 <drv_gpioInit>
 80230fc:	4603      	mov	r3, r0
 80230fe:	461a      	mov	r2, r3
 8023100:	79fb      	ldrb	r3, [r7, #7]
 8023102:	4013      	ands	r3, r2
 8023104:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_i2cInit();
 8023106:	f00b ffb7 	bl	802f078 <drv_i2cInit>
 802310a:	4603      	mov	r3, r0
 802310c:	461a      	mov	r2, r3
 802310e:	79fb      	ldrb	r3, [r7, #7]
 8023110:	4013      	ands	r3, r2
 8023112:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_spiInit();
 8023114:	f00c fc30 	bl	802f978 <drv_spiInit>
 8023118:	4603      	mov	r3, r0
 802311a:	461a      	mov	r2, r3
 802311c:	79fb      	ldrb	r3, [r7, #7]
 802311e:	4013      	ands	r3, r2
 8023120:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_dmaInit();
 8023122:	f00b f8b1 	bl	802e288 <drv_dmaInit>
 8023126:	4603      	mov	r3, r0
 8023128:	461a      	mov	r2, r3
 802312a:	79fb      	ldrb	r3, [r7, #7]
 802312c:	4013      	ands	r3, r2
 802312e:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 8023130:	f00d fcec 	bl	8030b0c <drv_uartInit>
 8023134:	4603      	mov	r3, r0
 8023136:	461a      	mov	r2, r3
 8023138:	79fb      	ldrb	r3, [r7, #7]
 802313a:	4013      	ands	r3, r2
 802313c:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 802313e:	f00c fb81 	bl	802f844 <drv_itInit>
 8023142:	4603      	mov	r3, r0
 8023144:	461a      	mov	r2, r3
 8023146:	79fb      	ldrb	r3, [r7, #7]
 8023148:	4013      	ands	r3, r2
 802314a:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_adcInit();
 802314c:	f00a fd46 	bl	802dbdc <drv_adcInit>
 8023150:	4603      	mov	r3, r0
 8023152:	461a      	mov	r2, r3
 8023154:	79fb      	ldrb	r3, [r7, #7]
 8023156:	4013      	ands	r3, r2
 8023158:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 802315a:	4804      	ldr	r0, [pc, #16]	@ (802316c <driver_init+0xa8>)
 802315c:	f011 fc36 	bl	80349cc <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 8023160:	79fb      	ldrb	r3, [r7, #7]
}
 8023162:	4618      	mov	r0, r3
 8023164:	3708      	adds	r7, #8
 8023166:	46bd      	mov	sp, r7
 8023168:	bd80      	pop	{r7, pc}
 802316a:	bf00      	nop
 802316c:	08023171 	.word	0x08023171

08023170 <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 8023170:	b580      	push	{r7, lr}
 8023172:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8023174:	f002 f8d6 	bl	8025324 <HAL_IncTick>
}
 8023178:	bf00      	nop
 802317a:	bd80      	pop	{r7, pc}

0802317c <drv_rtcTimeSet>:

/*
 * Function: drv_rtcTimeSet
 */
gos_result_t drv_rtcTimeSet (gos_time_t* pTime, u8_t dow)
{
 802317c:	b580      	push	{r7, lr}
 802317e:	b088      	sub	sp, #32
 8023180:	af04      	add	r7, sp, #16
 8023182:	6078      	str	r0, [r7, #4]
 8023184:	460b      	mov	r3, r1
 8023186:	70fb      	strb	r3, [r7, #3]
	/*
	 * Local variables.
	 */
	gos_result_t setTimeResult = GOS_ERROR;
 8023188:	23ae      	movs	r3, #174	@ 0xae
 802318a:	73fb      	strb	r3, [r7, #15]
	u8_t         time [7];

	/*
	 * Function code.
	 */
	if (pTime != NULL)
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	2b00      	cmp	r3, #0
 8023190:	d046      	beq.n	8023220 <drv_rtcTimeSet+0xa4>
	{
		time[0] = drv_rtcDec2bcd(pTime->seconds);
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	789b      	ldrb	r3, [r3, #2]
 8023196:	4618      	mov	r0, r3
 8023198:	f000 f8aa 	bl	80232f0 <drv_rtcDec2bcd>
 802319c:	4603      	mov	r3, r0
 802319e:	723b      	strb	r3, [r7, #8]
		time[1] = drv_rtcDec2bcd(pTime->minutes);
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	78db      	ldrb	r3, [r3, #3]
 80231a4:	4618      	mov	r0, r3
 80231a6:	f000 f8a3 	bl	80232f0 <drv_rtcDec2bcd>
 80231aa:	4603      	mov	r3, r0
 80231ac:	727b      	strb	r3, [r7, #9]
		time[2] = drv_rtcDec2bcd(pTime->hours);
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	791b      	ldrb	r3, [r3, #4]
 80231b2:	4618      	mov	r0, r3
 80231b4:	f000 f89c 	bl	80232f0 <drv_rtcDec2bcd>
 80231b8:	4603      	mov	r3, r0
 80231ba:	72bb      	strb	r3, [r7, #10]
		time[3] = drv_rtcDec2bcd(dow);
 80231bc:	78fb      	ldrb	r3, [r7, #3]
 80231be:	4618      	mov	r0, r3
 80231c0:	f000 f896 	bl	80232f0 <drv_rtcDec2bcd>
 80231c4:	4603      	mov	r3, r0
 80231c6:	72fb      	strb	r3, [r7, #11]
		time[4] = drv_rtcDec2bcd(pTime->days);
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80231ce:	b29b      	uxth	r3, r3
 80231d0:	4618      	mov	r0, r3
 80231d2:	f000 f88d 	bl	80232f0 <drv_rtcDec2bcd>
 80231d6:	4603      	mov	r3, r0
 80231d8:	733b      	strb	r3, [r7, #12]
		time[5] = drv_rtcDec2bcd(pTime->months);
 80231da:	687b      	ldr	r3, [r7, #4]
 80231dc:	79db      	ldrb	r3, [r3, #7]
 80231de:	4618      	mov	r0, r3
 80231e0:	f000 f886 	bl	80232f0 <drv_rtcDec2bcd>
 80231e4:	4603      	mov	r3, r0
 80231e6:	737b      	strb	r3, [r7, #13]
		time[6] = drv_rtcDec2bcd(pTime->years - 2000);
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	891b      	ldrh	r3, [r3, #8]
 80231ec:	b29b      	uxth	r3, r3
 80231ee:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80231f2:	4618      	mov	r0, r3
 80231f4:	f000 f87c 	bl	80232f0 <drv_rtcDec2bcd>
 80231f8:	4603      	mov	r3, r0
 80231fa:	73bb      	strb	r3, [r7, #14]

		setTimeResult = drv_i2cMemWrite(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 100);
 80231fc:	2364      	movs	r3, #100	@ 0x64
 80231fe:	9303      	str	r3, [sp, #12]
 8023200:	f04f 33ff 	mov.w	r3, #4294967295
 8023204:	9302      	str	r3, [sp, #8]
 8023206:	2307      	movs	r3, #7
 8023208:	9301      	str	r3, [sp, #4]
 802320a:	f107 0308 	add.w	r3, r7, #8
 802320e:	9300      	str	r3, [sp, #0]
 8023210:	2301      	movs	r3, #1
 8023212:	2200      	movs	r2, #0
 8023214:	21d0      	movs	r1, #208	@ 0xd0
 8023216:	2000      	movs	r0, #0
 8023218:	f00c f866 	bl	802f2e8 <drv_i2cMemWrite>
 802321c:	4603      	mov	r3, r0
 802321e:	73fb      	strb	r3, [r7, #15]
	else
	{
		// NULL pointer.
	}

	return setTimeResult;
 8023220:	7bfb      	ldrb	r3, [r7, #15]
}
 8023222:	4618      	mov	r0, r3
 8023224:	3710      	adds	r7, #16
 8023226:	46bd      	mov	sp, r7
 8023228:	bd80      	pop	{r7, pc}

0802322a <drv_rtcTimeGet>:

/*
 * Function: drv_rtcTimeGet
 */
gos_result_t drv_rtcTimeGet (gos_time_t* pTime, u8_t* dow)
{
 802322a:	b580      	push	{r7, lr}
 802322c:	b088      	sub	sp, #32
 802322e:	af04      	add	r7, sp, #16
 8023230:	6078      	str	r0, [r7, #4]
 8023232:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t getTimeResult = GOS_ERROR;
 8023234:	23ae      	movs	r3, #174	@ 0xae
 8023236:	73fb      	strb	r3, [r7, #15]
	u8_t         time [7];

	/*
	 * Function code.
	 */
	if (pTime != NULL)
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	2b00      	cmp	r3, #0
 802323c:	d053      	beq.n	80232e6 <drv_rtcTimeGet+0xbc>
	{
		getTimeResult = drv_i2cMemRead(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 100);
 802323e:	2364      	movs	r3, #100	@ 0x64
 8023240:	9303      	str	r3, [sp, #12]
 8023242:	f04f 33ff 	mov.w	r3, #4294967295
 8023246:	9302      	str	r3, [sp, #8]
 8023248:	2307      	movs	r3, #7
 802324a:	9301      	str	r3, [sp, #4]
 802324c:	f107 0308 	add.w	r3, r7, #8
 8023250:	9300      	str	r3, [sp, #0]
 8023252:	2301      	movs	r3, #1
 8023254:	2200      	movs	r2, #0
 8023256:	21d0      	movs	r1, #208	@ 0xd0
 8023258:	2000      	movs	r0, #0
 802325a:	f00c f8b1 	bl	802f3c0 <drv_i2cMemRead>
 802325e:	4603      	mov	r3, r0
 8023260:	73fb      	strb	r3, [r7, #15]

		if (getTimeResult == GOS_SUCCESS)
 8023262:	7bfb      	ldrb	r3, [r7, #15]
 8023264:	2b55      	cmp	r3, #85	@ 0x55
 8023266:	d13e      	bne.n	80232e6 <drv_rtcTimeGet+0xbc>
		{
			pTime->seconds = drv_rtcBcd2dec(time[0]);
 8023268:	7a3b      	ldrb	r3, [r7, #8]
 802326a:	4618      	mov	r0, r3
 802326c:	f000 f862 	bl	8023334 <drv_rtcBcd2dec>
 8023270:	4603      	mov	r3, r0
 8023272:	b2da      	uxtb	r2, r3
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	709a      	strb	r2, [r3, #2]
			pTime->minutes = drv_rtcBcd2dec(time[1]);
 8023278:	7a7b      	ldrb	r3, [r7, #9]
 802327a:	4618      	mov	r0, r3
 802327c:	f000 f85a 	bl	8023334 <drv_rtcBcd2dec>
 8023280:	4603      	mov	r3, r0
 8023282:	b2da      	uxtb	r2, r3
 8023284:	687b      	ldr	r3, [r7, #4]
 8023286:	70da      	strb	r2, [r3, #3]
			pTime->hours   = drv_rtcBcd2dec(time[2]);
 8023288:	7abb      	ldrb	r3, [r7, #10]
 802328a:	4618      	mov	r0, r3
 802328c:	f000 f852 	bl	8023334 <drv_rtcBcd2dec>
 8023290:	4603      	mov	r3, r0
 8023292:	b2da      	uxtb	r2, r3
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	711a      	strb	r2, [r3, #4]
			if (dow != NULL)
 8023298:	683b      	ldr	r3, [r7, #0]
 802329a:	2b00      	cmp	r3, #0
 802329c:	d007      	beq.n	80232ae <drv_rtcTimeGet+0x84>
			{
				*dow = drv_rtcBcd2dec(time[3]);
 802329e:	7afb      	ldrb	r3, [r7, #11]
 80232a0:	4618      	mov	r0, r3
 80232a2:	f000 f847 	bl	8023334 <drv_rtcBcd2dec>
 80232a6:	4603      	mov	r3, r0
 80232a8:	b2da      	uxtb	r2, r3
 80232aa:	683b      	ldr	r3, [r7, #0]
 80232ac:	701a      	strb	r2, [r3, #0]
			}
			pTime->days    = drv_rtcBcd2dec(time[4]);
 80232ae:	7b3b      	ldrb	r3, [r7, #12]
 80232b0:	4618      	mov	r0, r3
 80232b2:	f000 f83f 	bl	8023334 <drv_rtcBcd2dec>
 80232b6:	4603      	mov	r3, r0
 80232b8:	b29a      	uxth	r2, r3
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	f8a3 2005 	strh.w	r2, [r3, #5]
			pTime->months  = drv_rtcBcd2dec(time[5]);
 80232c0:	7b7b      	ldrb	r3, [r7, #13]
 80232c2:	4618      	mov	r0, r3
 80232c4:	f000 f836 	bl	8023334 <drv_rtcBcd2dec>
 80232c8:	4603      	mov	r3, r0
 80232ca:	b2da      	uxtb	r2, r3
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	71da      	strb	r2, [r3, #7]
			pTime->years   = 2000 + drv_rtcBcd2dec(time[6]);
 80232d0:	7bbb      	ldrb	r3, [r7, #14]
 80232d2:	4618      	mov	r0, r3
 80232d4:	f000 f82e 	bl	8023334 <drv_rtcBcd2dec>
 80232d8:	4603      	mov	r3, r0
 80232da:	b29b      	uxth	r3, r3
 80232dc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80232e0:	b29a      	uxth	r2, r3
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	811a      	strh	r2, [r3, #8]
	else
	{
		// NULL pointer.
	}

	return getTimeResult;
 80232e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80232e8:	4618      	mov	r0, r3
 80232ea:	3710      	adds	r7, #16
 80232ec:	46bd      	mov	sp, r7
 80232ee:	bd80      	pop	{r7, pc}

080232f0 <drv_rtcDec2bcd>:
	return getTempResult;
}

// TODO
GOS_STATIC u8_t drv_rtcDec2bcd (u32_t dec)
{
 80232f0:	b480      	push	{r7}
 80232f2:	b083      	sub	sp, #12
 80232f4:	af00      	add	r7, sp, #0
 80232f6:	6078      	str	r0, [r7, #4]
	/*
	 * Function code.
	 */
	return (u8_t)((dec / 10 * 16) + (dec % 10));
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	4a0d      	ldr	r2, [pc, #52]	@ (8023330 <drv_rtcDec2bcd+0x40>)
 80232fc:	fba2 2303 	umull	r2, r3, r2, r3
 8023300:	08db      	lsrs	r3, r3, #3
 8023302:	b2db      	uxtb	r3, r3
 8023304:	011b      	lsls	r3, r3, #4
 8023306:	b2d8      	uxtb	r0, r3
 8023308:	6879      	ldr	r1, [r7, #4]
 802330a:	4b09      	ldr	r3, [pc, #36]	@ (8023330 <drv_rtcDec2bcd+0x40>)
 802330c:	fba3 2301 	umull	r2, r3, r3, r1
 8023310:	08da      	lsrs	r2, r3, #3
 8023312:	4613      	mov	r3, r2
 8023314:	009b      	lsls	r3, r3, #2
 8023316:	4413      	add	r3, r2
 8023318:	005b      	lsls	r3, r3, #1
 802331a:	1aca      	subs	r2, r1, r3
 802331c:	b2d3      	uxtb	r3, r2
 802331e:	4403      	add	r3, r0
 8023320:	b2db      	uxtb	r3, r3
}
 8023322:	4618      	mov	r0, r3
 8023324:	370c      	adds	r7, #12
 8023326:	46bd      	mov	sp, r7
 8023328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802332c:	4770      	bx	lr
 802332e:	bf00      	nop
 8023330:	cccccccd 	.word	0xcccccccd

08023334 <drv_rtcBcd2dec>:

// TODO
GOS_STATIC u32_t drv_rtcBcd2dec (u8_t bcd)
{
 8023334:	b480      	push	{r7}
 8023336:	b083      	sub	sp, #12
 8023338:	af00      	add	r7, sp, #0
 802333a:	4603      	mov	r3, r0
 802333c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	return (u32_t)((bcd / 16 * 10) + (bcd % 16));
 802333e:	79fb      	ldrb	r3, [r7, #7]
 8023340:	091b      	lsrs	r3, r3, #4
 8023342:	b2db      	uxtb	r3, r3
 8023344:	461a      	mov	r2, r3
 8023346:	4613      	mov	r3, r2
 8023348:	009b      	lsls	r3, r3, #2
 802334a:	4413      	add	r3, r2
 802334c:	005b      	lsls	r3, r3, #1
 802334e:	461a      	mov	r2, r3
 8023350:	79fb      	ldrb	r3, [r7, #7]
 8023352:	f003 030f 	and.w	r3, r3, #15
 8023356:	4413      	add	r3, r2
}
 8023358:	4618      	mov	r0, r3
 802335a:	370c      	adds	r7, #12
 802335c:	46bd      	mov	sp, r7
 802335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023362:	4770      	bx	lr

08023364 <ili9341_init>:
#endif
void_t ili9341_init(
		ili9341_screen_orientation_t orientation,
		ili9341_touch_support_t   touch_support,
		ili9341_touch_normalize_t touch_normalize)
{
 8023364:	b590      	push	{r4, r7, lr}
 8023366:	b097      	sub	sp, #92	@ 0x5c
 8023368:	af00      	add	r7, sp, #0
 802336a:	4603      	mov	r3, r0
 802336c:	71fb      	strb	r3, [r7, #7]
 802336e:	460b      	mov	r3, r1
 8023370:	71bb      	strb	r3, [r7, #6]
 8023372:	4613      	mov	r3, r2
 8023374:	717b      	strb	r3, [r7, #5]
  //ili9341_t *lcd = NULL;
	gos_mutexInit(&ili9341Mutex);
 8023376:	483a      	ldr	r0, [pc, #232]	@ (8023460 <ili9341_init+0xfc>)
 8023378:	f015 f950 	bl	803861c <gos_mutexInit>

  //if (NULL != spi_hal) {
	{

    if ( //(NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 802337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023380:	2b00      	cmp	r3, #0
 8023382:	db69      	blt.n	8023458 <ili9341_init+0xf4>
         //(NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
         //(NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 8023384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023388:	2b03      	cmp	r3, #3
 802338a:	dc65      	bgt.n	8023458 <ili9341_init+0xf4>
          //lcd->tft_select_port      = tft_select_port;
          //lcd->tft_select_pin       = tft_select_pin;
          //lcd->data_command_port    = data_command_port;
          //lcd->data_command_pin     = data_command_pin;

          lcd.orientation          = orientation;
 802338c:	4a35      	ldr	r2, [pc, #212]	@ (8023464 <ili9341_init+0x100>)
 802338e:	79fb      	ldrb	r3, [r7, #7]
 8023390:	7013      	strb	r3, [r2, #0]
          lcd.screen_size          = ili9341_screen_size(orientation);
 8023392:	4c34      	ldr	r4, [pc, #208]	@ (8023464 <ili9341_init+0x100>)
 8023394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023398:	4618      	mov	r0, r3
 802339a:	f000 fa91 	bl	80238c0 <ili9341_screen_size>
 802339e:	4603      	mov	r3, r0
 80233a0:	461a      	mov	r2, r3
 80233a2:	8062      	strh	r2, [r4, #2]
 80233a4:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80233a8:	80a3      	strh	r3, [r4, #4]

          if (touch_support) {
 80233aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80233ae:	2b00      	cmp	r3, #0
 80233b0:	d028      	beq.n	8023404 <ili9341_init+0xa0>
            //lcd->touch_select_port    = touch_select_port;
            //lcd->touch_select_pin     = touch_select_pin;
            //lcd->touch_irq_port       = touch_irq_port;
            //lcd->touch_irq_pin        = touch_irq_pin;

            lcd.touch_support        = touch_support;
 80233b2:	4a2c      	ldr	r2, [pc, #176]	@ (8023464 <ili9341_init+0x100>)
 80233b4:	79bb      	ldrb	r3, [r7, #6]
 80233b6:	7193      	strb	r3, [r2, #6]
            lcd.touch_normalize      = touch_normalize;
 80233b8:	4a2a      	ldr	r2, [pc, #168]	@ (8023464 <ili9341_init+0x100>)
 80233ba:	797b      	ldrb	r3, [r7, #5]
 80233bc:	71d3      	strb	r3, [r2, #7]
            lcd.touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 80233be:	4b29      	ldr	r3, [pc, #164]	@ (8023464 <ili9341_init+0x100>)
 80233c0:	2200      	movs	r2, #0
 80233c2:	811a      	strh	r2, [r3, #8]
 80233c4:	4b27      	ldr	r3, [pc, #156]	@ (8023464 <ili9341_init+0x100>)
 80233c6:	2200      	movs	r2, #0
 80233c8:	815a      	strh	r2, [r3, #10]
            lcd.touch_calibration    = itcNONE;
 80233ca:	4b26      	ldr	r3, [pc, #152]	@ (8023464 <ili9341_init+0x100>)
 80233cc:	22ff      	movs	r2, #255	@ 0xff
 80233ce:	731a      	strb	r2, [r3, #12]
            lcd.touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80233d0:	4b24      	ldr	r3, [pc, #144]	@ (8023464 <ili9341_init+0x100>)
 80233d2:	330e      	adds	r3, #14
 80233d4:	2200      	movs	r2, #0
 80233d6:	601a      	str	r2, [r3, #0]
 80233d8:	605a      	str	r2, [r3, #4]
            lcd.touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80233da:	4b22      	ldr	r3, [pc, #136]	@ (8023464 <ili9341_init+0x100>)
 80233dc:	3318      	adds	r3, #24
 80233de:	2200      	movs	r2, #0
 80233e0:	601a      	str	r2, [r3, #0]
 80233e2:	605a      	str	r2, [r3, #4]
 80233e4:	609a      	str	r2, [r3, #8]
 80233e6:	60da      	str	r2, [r3, #12]
 80233e8:	611a      	str	r2, [r3, #16]
 80233ea:	615a      	str	r2, [r3, #20]
 80233ec:	619a      	str	r2, [r3, #24]

            lcd.touch_pressed        = itpNotPressed;
 80233ee:	4b1d      	ldr	r3, [pc, #116]	@ (8023464 <ili9341_init+0x100>)
 80233f0:	2200      	movs	r2, #0
 80233f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            lcd.touch_pressed_begin  = NULL;
 80233f6:	4b1b      	ldr	r3, [pc, #108]	@ (8023464 <ili9341_init+0x100>)
 80233f8:	2200      	movs	r2, #0
 80233fa:	639a      	str	r2, [r3, #56]	@ 0x38
            lcd.touch_pressed_end    = NULL;
 80233fc:	4b19      	ldr	r3, [pc, #100]	@ (8023464 <ili9341_init+0x100>)
 80233fe:	2200      	movs	r2, #0
 8023400:	63da      	str	r2, [r3, #60]	@ 0x3c
 8023402:	e027      	b.n	8023454 <ili9341_init+0xf0>
            //lcd->touch_select_port    = NULL;
            //lcd->touch_select_pin     = 0;
            //lcd->touch_irq_port       = NULL;
            //lcd->touch_irq_pin        = 0;

            lcd.touch_support        = touch_support;
 8023404:	4a17      	ldr	r2, [pc, #92]	@ (8023464 <ili9341_init+0x100>)
 8023406:	79bb      	ldrb	r3, [r7, #6]
 8023408:	7193      	strb	r3, [r2, #6]
            lcd.touch_normalize      = itnNONE;
 802340a:	4b16      	ldr	r3, [pc, #88]	@ (8023464 <ili9341_init+0x100>)
 802340c:	22ff      	movs	r2, #255	@ 0xff
 802340e:	71da      	strb	r2, [r3, #7]
            lcd.touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8023410:	4b14      	ldr	r3, [pc, #80]	@ (8023464 <ili9341_init+0x100>)
 8023412:	2200      	movs	r2, #0
 8023414:	811a      	strh	r2, [r3, #8]
 8023416:	4b13      	ldr	r3, [pc, #76]	@ (8023464 <ili9341_init+0x100>)
 8023418:	2200      	movs	r2, #0
 802341a:	815a      	strh	r2, [r3, #10]
            lcd.touch_calibration    = itcNONE;
 802341c:	4b11      	ldr	r3, [pc, #68]	@ (8023464 <ili9341_init+0x100>)
 802341e:	22ff      	movs	r2, #255	@ 0xff
 8023420:	731a      	strb	r2, [r3, #12]
            lcd.touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8023422:	4b10      	ldr	r3, [pc, #64]	@ (8023464 <ili9341_init+0x100>)
 8023424:	330e      	adds	r3, #14
 8023426:	2200      	movs	r2, #0
 8023428:	601a      	str	r2, [r3, #0]
 802342a:	605a      	str	r2, [r3, #4]
            lcd.touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 802342c:	4b0d      	ldr	r3, [pc, #52]	@ (8023464 <ili9341_init+0x100>)
 802342e:	3318      	adds	r3, #24
 8023430:	2200      	movs	r2, #0
 8023432:	601a      	str	r2, [r3, #0]
 8023434:	605a      	str	r2, [r3, #4]
 8023436:	609a      	str	r2, [r3, #8]
 8023438:	60da      	str	r2, [r3, #12]
 802343a:	611a      	str	r2, [r3, #16]
 802343c:	615a      	str	r2, [r3, #20]
 802343e:	619a      	str	r2, [r3, #24]

            lcd.touch_pressed        = itpNONE;
 8023440:	4b08      	ldr	r3, [pc, #32]	@ (8023464 <ili9341_init+0x100>)
 8023442:	22ff      	movs	r2, #255	@ 0xff
 8023444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            lcd.touch_pressed_begin  = NULL;
 8023448:	4b06      	ldr	r3, [pc, #24]	@ (8023464 <ili9341_init+0x100>)
 802344a:	2200      	movs	r2, #0
 802344c:	639a      	str	r2, [r3, #56]	@ 0x38
            lcd.touch_pressed_end    = NULL;
 802344e:	4b05      	ldr	r3, [pc, #20]	@ (8023464 <ili9341_init+0x100>)
 8023450:	2200      	movs	r2, #0
 8023452:	63da      	str	r2, [r3, #60]	@ 0x3c
          }

          ili9341_initialize();
 8023454:	f000 f902 	bl	802365c <ili9341_initialize>
      }
    }
  }

  //return lcd;
}
 8023458:	bf00      	nop
 802345a:	375c      	adds	r7, #92	@ 0x5c
 802345c:	46bd      	mov	sp, r7
 802345e:	bd90      	pop	{r4, r7, pc}
 8023460:	200068e0 	.word	0x200068e0
 8023464:	200068a0 	.word	0x200068a0

08023468 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select()
{
 8023468:	b580      	push	{r7, lr}
 802346a:	af00      	add	r7, sp, #0
  // clear bit indicates the TFT is -active- slave SPI device
  //HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_CS), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_DISPL_CS, __GPIO_PIN_CLR__);
 802346c:	2100      	movs	r1, #0
 802346e:	2014      	movs	r0, #20
 8023470:	f00b fcb2 	bl	802edd8 <drv_gpioWritePin>
}
 8023474:	bf00      	nop
 8023476:	bd80      	pop	{r7, pc}

08023478 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release()
{
 8023478:	b580      	push	{r7, lr}
 802347a:	af00      	add	r7, sp, #0
  // set bit indicates the TFT is -inactive- slave SPI device
  //HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_CS), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_CS, __GPIO_PIN_SET__);
 802347c:	2101      	movs	r1, #1
 802347e:	2014      	movs	r0, #20
 8023480:	f00b fcaa 	bl	802edd8 <drv_gpioWritePin>
}
 8023484:	bf00      	nop
 8023486:	bd80      	pop	{r7, pc}

08023488 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select()
{
 8023488:	b480      	push	{r7}
 802348a:	af00      	add	r7, sp, #0
  // clear bit indicates the touch screen is -active- slave SPI device
  //HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_TOUCH_CS), __GPIO_PIN_CLR__);
  //drv_gpioWritePin(IO_TOUCH_CS, __GPIO_PIN_CLR__); TODO
}
 802348c:	bf00      	nop
 802348e:	46bd      	mov	sp, r7
 8023490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023494:	4770      	bx	lr

08023496 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release()
{
 8023496:	b480      	push	{r7}
 8023498:	af00      	add	r7, sp, #0
  // set bit indicates the touch screen is -inactive- slave SPI device
  //HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_TOUCH_CS), __GPIO_PIN_SET__);
  //drv_gpioWritePin(IO_TOUCH_CS, __GPIO_PIN_SET__); TODO
}
 802349a:	bf00      	nop
 802349c:	46bd      	mov	sp, r7
 802349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234a2:	4770      	bx	lr

080234a4 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_spi_slave_t spi_slave)
{
 80234a4:	b580      	push	{r7, lr}
 80234a6:	b082      	sub	sp, #8
 80234a8:	af00      	add	r7, sp, #0
 80234aa:	4603      	mov	r3, r0
 80234ac:	71fb      	strb	r3, [r7, #7]
  switch (spi_slave) {
 80234ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	d002      	beq.n	80234bc <ili9341_spi_slave_select+0x18>
 80234b6:	2b01      	cmp	r3, #1
 80234b8:	d003      	beq.n	80234c2 <ili9341_spi_slave_select+0x1e>
    case issDisplayTFT:  ili9341_spi_tft_select();   break;
    case issTouchScreen: ili9341_spi_touch_select(); break;
    default: break;
 80234ba:	e005      	b.n	80234c8 <ili9341_spi_slave_select+0x24>
    case issDisplayTFT:  ili9341_spi_tft_select();   break;
 80234bc:	f7ff ffd4 	bl	8023468 <ili9341_spi_tft_select>
 80234c0:	e002      	b.n	80234c8 <ili9341_spi_slave_select+0x24>
    case issTouchScreen: ili9341_spi_touch_select(); break;
 80234c2:	f7ff ffe1 	bl	8023488 <ili9341_spi_touch_select>
 80234c6:	bf00      	nop
  }
}
 80234c8:	bf00      	nop
 80234ca:	3708      	adds	r7, #8
 80234cc:	46bd      	mov	sp, r7
 80234ce:	bd80      	pop	{r7, pc}

080234d0 <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_spi_slave_t spi_slave)
{
 80234d0:	b580      	push	{r7, lr}
 80234d2:	b082      	sub	sp, #8
 80234d4:	af00      	add	r7, sp, #0
 80234d6:	4603      	mov	r3, r0
 80234d8:	71fb      	strb	r3, [r7, #7]
  switch (spi_slave) {
 80234da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234de:	2b00      	cmp	r3, #0
 80234e0:	d002      	beq.n	80234e8 <ili9341_spi_slave_release+0x18>
 80234e2:	2b01      	cmp	r3, #1
 80234e4:	d003      	beq.n	80234ee <ili9341_spi_slave_release+0x1e>

    case issDisplayTFT:  ili9341_spi_tft_release();   break;
    case issTouchScreen: ili9341_spi_touch_release(); break;
    default: break;
 80234e6:	e005      	b.n	80234f4 <ili9341_spi_slave_release+0x24>
    case issDisplayTFT:  ili9341_spi_tft_release();   break;
 80234e8:	f7ff ffc6 	bl	8023478 <ili9341_spi_tft_release>
 80234ec:	e002      	b.n	80234f4 <ili9341_spi_slave_release+0x24>
    case issTouchScreen: ili9341_spi_touch_release(); break;
 80234ee:	f7ff ffd2 	bl	8023496 <ili9341_spi_touch_release>
 80234f2:	bf00      	nop
  }
}
 80234f4:	bf00      	nop
 80234f6:	3708      	adds	r7, #8
 80234f8:	46bd      	mov	sp, r7
 80234fa:	bd80      	pop	{r7, pc}

080234fc <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_spi_slave_t spi_slave, uint8_t command)
{
 80234fc:	b580      	push	{r7, lr}
 80234fe:	b084      	sub	sp, #16
 8023500:	af02      	add	r7, sp, #8
 8023502:	4603      	mov	r3, r0
 8023504:	460a      	mov	r2, r1
 8023506:	71fb      	strb	r3, [r7, #7]
 8023508:	4613      	mov	r3, r2
 802350a:	71bb      	strb	r3, [r7, #6]
  __SLAVE_SELECT(spi_slave);
 802350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023510:	2b00      	cmp	r3, #0
 8023512:	db08      	blt.n	8023526 <ili9341_spi_write_command+0x2a>
 8023514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023518:	2b01      	cmp	r3, #1
 802351a:	dc04      	bgt.n	8023526 <ili9341_spi_write_command+0x2a>
 802351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023520:	4618      	mov	r0, r3
 8023522:	f7ff ffbf 	bl	80234a4 <ili9341_spi_slave_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_CLR__);
 8023526:	2100      	movs	r1, #0
 8023528:	2015      	movs	r0, #21
 802352a:	f00b fc55 	bl	802edd8 <drv_gpioWritePin>
  //HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
  //spi_driver_transmit_blocking(&command, sizeof(command));
  drv_spiTransmitBlocking(DRV_SPI_INSTANCE_3, &command, sizeof(command), /*GOS_MUTEX_ENDLESS_TMO*/3000, 5000);
 802352e:	1db9      	adds	r1, r7, #6
 8023530:	f241 3388 	movw	r3, #5000	@ 0x1388
 8023534:	9300      	str	r3, [sp, #0]
 8023536:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802353a:	2201      	movs	r2, #1
 802353c:	2002      	movs	r0, #2
 802353e:	f00c fba7 	bl	802fc90 <drv_spiTransmitBlocking>
  //drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, &command, sizeof(command), GOS_MUTEX_ENDLESS_TMO, 1000);

  __SLAVE_RELEASE(spi_slave);
 8023542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023546:	2b00      	cmp	r3, #0
 8023548:	db08      	blt.n	802355c <ili9341_spi_write_command+0x60>
 802354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802354e:	2b01      	cmp	r3, #1
 8023550:	dc04      	bgt.n	802355c <ili9341_spi_write_command+0x60>
 8023552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023556:	4618      	mov	r0, r3
 8023558:	f7ff ffba 	bl	80234d0 <ili9341_spi_slave_release>
}
 802355c:	bf00      	nop
 802355e:	3708      	adds	r7, #8
 8023560:	46bd      	mov	sp, r7
 8023562:	bd80      	pop	{r7, pc}

08023564 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 8023564:	b580      	push	{r7, lr}
 8023566:	b084      	sub	sp, #16
 8023568:	af02      	add	r7, sp, #8
 802356a:	4603      	mov	r3, r0
 802356c:	603a      	str	r2, [r7, #0]
 802356e:	71fb      	strb	r3, [r7, #7]
 8023570:	460b      	mov	r3, r1
 8023572:	80bb      	strh	r3, [r7, #4]
  __SLAVE_SELECT(spi_slave);
 8023574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023578:	2b00      	cmp	r3, #0
 802357a:	db08      	blt.n	802358e <ili9341_spi_write_data+0x2a>
 802357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023580:	2b01      	cmp	r3, #1
 8023582:	dc04      	bgt.n	802358e <ili9341_spi_write_data+0x2a>
 8023584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023588:	4618      	mov	r0, r3
 802358a:	f7ff ff8b 	bl	80234a4 <ili9341_spi_slave_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 802358e:	2101      	movs	r1, #1
 8023590:	2015      	movs	r0, #21
 8023592:	f00b fc21 	bl	802edd8 <drv_gpioWritePin>
  //HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
  //spi_driver_transmit_blocking(data, data_sz);
  drv_spiTransmitBlocking(DRV_SPI_INSTANCE_3, data, data_sz, /*GOS_MUTEX_ENDLESS_TMO*/3000, 5000);
 8023596:	88ba      	ldrh	r2, [r7, #4]
 8023598:	f241 3388 	movw	r3, #5000	@ 0x1388
 802359c:	9300      	str	r3, [sp, #0]
 802359e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80235a2:	6839      	ldr	r1, [r7, #0]
 80235a4:	2002      	movs	r0, #2
 80235a6:	f00c fb73 	bl	802fc90 <drv_spiTransmitBlocking>
  //drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, data, data_sz, GOS_MUTEX_ENDLESS_TMO, 1000);


  __SLAVE_RELEASE(spi_slave);
 80235aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235ae:	2b00      	cmp	r3, #0
 80235b0:	db08      	blt.n	80235c4 <ili9341_spi_write_data+0x60>
 80235b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235b6:	2b01      	cmp	r3, #1
 80235b8:	dc04      	bgt.n	80235c4 <ili9341_spi_write_data+0x60>
 80235ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235be:	4618      	mov	r0, r3
 80235c0:	f7ff ff86 	bl	80234d0 <ili9341_spi_slave_release>
}
 80235c4:	bf00      	nop
 80235c6:	3708      	adds	r7, #8
 80235c8:	46bd      	mov	sp, r7
 80235ca:	bd80      	pop	{r7, pc}

080235cc <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(spi_slave);
}

void ili9341_spi_write_command_data(
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 80235cc:	b580      	push	{r7, lr}
 80235ce:	b082      	sub	sp, #8
 80235d0:	af00      	add	r7, sp, #0
 80235d2:	603b      	str	r3, [r7, #0]
 80235d4:	4603      	mov	r3, r0
 80235d6:	71fb      	strb	r3, [r7, #7]
 80235d8:	460b      	mov	r3, r1
 80235da:	71bb      	strb	r3, [r7, #6]
 80235dc:	4613      	mov	r3, r2
 80235de:	80bb      	strh	r3, [r7, #4]
  __SLAVE_SELECT(spi_slave);
 80235e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	db08      	blt.n	80235fa <ili9341_spi_write_command_data+0x2e>
 80235e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235ec:	2b01      	cmp	r3, #1
 80235ee:	dc04      	bgt.n	80235fa <ili9341_spi_write_command_data+0x2e>
 80235f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235f4:	4618      	mov	r0, r3
 80235f6:	f7ff ff55 	bl	80234a4 <ili9341_spi_slave_select>

  ili9341_spi_write_command(issNONE, command);
 80235fa:	79bb      	ldrb	r3, [r7, #6]
 80235fc:	4619      	mov	r1, r3
 80235fe:	f04f 30ff 	mov.w	r0, #4294967295
 8023602:	f7ff ff7b 	bl	80234fc <ili9341_spi_write_command>
  ili9341_spi_write_data(issNONE, data_sz, data);
 8023606:	88bb      	ldrh	r3, [r7, #4]
 8023608:	683a      	ldr	r2, [r7, #0]
 802360a:	4619      	mov	r1, r3
 802360c:	f04f 30ff 	mov.w	r0, #4294967295
 8023610:	f7ff ffa8 	bl	8023564 <ili9341_spi_write_data>

  __SLAVE_RELEASE(spi_slave);
 8023614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023618:	2b00      	cmp	r3, #0
 802361a:	db08      	blt.n	802362e <ili9341_spi_write_command_data+0x62>
 802361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023620:	2b01      	cmp	r3, #1
 8023622:	dc04      	bgt.n	802362e <ili9341_spi_write_command_data+0x62>
 8023624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023628:	4618      	mov	r0, r3
 802362a:	f7ff ff51 	bl	80234d0 <ili9341_spi_slave_release>
}
 802362e:	bf00      	nop
 8023630:	3708      	adds	r7, #8
 8023632:	46bd      	mov	sp, r7
 8023634:	bd80      	pop	{r7, pc}

08023636 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset()
{
 8023636:	b580      	push	{r7, lr}
 8023638:	af00      	add	r7, sp, #0
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  //HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_RST), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_DISPL_RST, __GPIO_PIN_CLR__);
 802363a:	2100      	movs	r1, #0
 802363c:	2013      	movs	r0, #19
 802363e:	f00b fbcb 	bl	802edd8 <drv_gpioWritePin>
  gos_taskSleep(200);
 8023642:	20c8      	movs	r0, #200	@ 0xc8
 8023644:	f012 fbcc 	bl	8035de0 <gos_taskSleep>
  //HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_RST), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_RST, __GPIO_PIN_SET__);
 8023648:	2101      	movs	r1, #1
 802364a:	2013      	movs	r0, #19
 802364c:	f00b fbc4 	bl	802edd8 <drv_gpioWritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release();
 8023650:	f7ff ff12 	bl	8023478 <ili9341_spi_tft_release>
  ili9341_spi_touch_release();
 8023654:	f7ff ff1f 	bl	8023496 <ili9341_spi_touch_release>
}
 8023658:	bf00      	nop
 802365a:	bd80      	pop	{r7, pc}

0802365c <ili9341_initialize>:

static void ili9341_initialize()
{
 802365c:	b590      	push	{r4, r7, lr}
 802365e:	b09b      	sub	sp, #108	@ 0x6c
 8023660:	af00      	add	r7, sp, #0
  ili9341_reset();
 8023662:	f7ff ffe8 	bl	8023636 <ili9341_reset>
  ili9341_spi_tft_select();
 8023666:	f7ff feff 	bl	8023468 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(issNONE, 0x01);
 802366a:	2101      	movs	r1, #1
 802366c:	f04f 30ff 	mov.w	r0, #4294967295
 8023670:	f7ff ff44 	bl	80234fc <ili9341_spi_write_command>
  gos_taskSleep(1000);
 8023674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8023678:	f012 fbb2 	bl	8035de0 <gos_taskSleep>

  // POWER CONTROL A
  ili9341_spi_write_command_data(issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 802367c:	4a87      	ldr	r2, [pc, #540]	@ (802389c <ili9341_initialize+0x240>)
 802367e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8023682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023686:	6018      	str	r0, [r3, #0]
 8023688:	3304      	adds	r3, #4
 802368a:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 802368c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8023690:	2205      	movs	r2, #5
 8023692:	21cb      	movs	r1, #203	@ 0xcb
 8023694:	f04f 30ff 	mov.w	r0, #4294967295
 8023698:	f7ff ff98 	bl	80235cc <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 802369c:	4a80      	ldr	r2, [pc, #512]	@ (80238a0 <ili9341_initialize+0x244>)
 802369e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80236a2:	6812      	ldr	r2, [r2, #0]
 80236a4:	4611      	mov	r1, r2
 80236a6:	8019      	strh	r1, [r3, #0]
 80236a8:	3302      	adds	r3, #2
 80236aa:	0c12      	lsrs	r2, r2, #16
 80236ac:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 80236ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80236b2:	2203      	movs	r2, #3
 80236b4:	21cf      	movs	r1, #207	@ 0xcf
 80236b6:	f04f 30ff 	mov.w	r0, #4294967295
 80236ba:	f7ff ff87 	bl	80235cc <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 80236be:	4a79      	ldr	r2, [pc, #484]	@ (80238a4 <ili9341_initialize+0x248>)
 80236c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80236c4:	6812      	ldr	r2, [r2, #0]
 80236c6:	4611      	mov	r1, r2
 80236c8:	8019      	strh	r1, [r3, #0]
 80236ca:	3302      	adds	r3, #2
 80236cc:	0c12      	lsrs	r2, r2, #16
 80236ce:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 80236d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80236d4:	2203      	movs	r2, #3
 80236d6:	21e8      	movs	r1, #232	@ 0xe8
 80236d8:	f04f 30ff 	mov.w	r0, #4294967295
 80236dc:	f7ff ff76 	bl	80235cc <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 80236e0:	2300      	movs	r3, #0
 80236e2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80236e6:	2300      	movs	r3, #0
 80236e8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  ili9341_spi_write_command_data(issNONE,
 80236ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80236f0:	2202      	movs	r2, #2
 80236f2:	21ea      	movs	r1, #234	@ 0xea
 80236f4:	f04f 30ff 	mov.w	r0, #4294967295
 80236f8:	f7ff ff68 	bl	80235cc <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 80236fc:	4b6a      	ldr	r3, [pc, #424]	@ (80238a8 <ili9341_initialize+0x24c>)
 80236fe:	681b      	ldr	r3, [r3, #0]
 8023700:	653b      	str	r3, [r7, #80]	@ 0x50
  ili9341_spi_write_command_data(issNONE,
 8023702:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023706:	2204      	movs	r2, #4
 8023708:	21ed      	movs	r1, #237	@ 0xed
 802370a:	f04f 30ff 	mov.w	r0, #4294967295
 802370e:	f7ff ff5d 	bl	80235cc <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 8023712:	2320      	movs	r3, #32
 8023714:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  ili9341_spi_write_command_data(issNONE,
 8023718:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802371c:	2201      	movs	r2, #1
 802371e:	21f7      	movs	r1, #247	@ 0xf7
 8023720:	f04f 30ff 	mov.w	r0, #4294967295
 8023724:	f7ff ff52 	bl	80235cc <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8023728:	2323      	movs	r3, #35	@ 0x23
 802372a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  ili9341_spi_write_command_data(issNONE,
 802372e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023732:	2201      	movs	r2, #1
 8023734:	21c0      	movs	r1, #192	@ 0xc0
 8023736:	f04f 30ff 	mov.w	r0, #4294967295
 802373a:	f7ff ff47 	bl	80235cc <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 802373e:	2310      	movs	r3, #16
 8023740:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  ili9341_spi_write_command_data(issNONE,
 8023744:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8023748:	2201      	movs	r2, #1
 802374a:	21c1      	movs	r1, #193	@ 0xc1
 802374c:	f04f 30ff 	mov.w	r0, #4294967295
 8023750:	f7ff ff3c 	bl	80235cc <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8023754:	4b55      	ldr	r3, [pc, #340]	@ (80238ac <ili9341_initialize+0x250>)
 8023756:	881b      	ldrh	r3, [r3, #0]
 8023758:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  ili9341_spi_write_command_data(issNONE,
 802375c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8023760:	2202      	movs	r2, #2
 8023762:	21c5      	movs	r1, #197	@ 0xc5
 8023764:	f04f 30ff 	mov.w	r0, #4294967295
 8023768:	f7ff ff30 	bl	80235cc <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 802376c:	2386      	movs	r3, #134	@ 0x86
 802376e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  ili9341_spi_write_command_data(issNONE,
 8023772:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8023776:	2201      	movs	r2, #1
 8023778:	21c7      	movs	r1, #199	@ 0xc7
 802377a:	f04f 30ff 	mov.w	r0, #4294967295
 802377e:	f7ff ff25 	bl	80235cc <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 8023782:	2348      	movs	r3, #72	@ 0x48
 8023784:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  ili9341_spi_write_command_data(issNONE,
 8023788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802378c:	2201      	movs	r2, #1
 802378e:	2136      	movs	r1, #54	@ 0x36
 8023790:	f04f 30ff 	mov.w	r0, #4294967295
 8023794:	f7ff ff1a 	bl	80235cc <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8023798:	2355      	movs	r3, #85	@ 0x55
 802379a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  ili9341_spi_write_command_data(issNONE,
 802379e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80237a2:	2201      	movs	r2, #1
 80237a4:	213a      	movs	r1, #58	@ 0x3a
 80237a6:	f04f 30ff 	mov.w	r0, #4294967295
 80237aa:	f7ff ff0f 	bl	80235cc <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 80237ae:	2300      	movs	r3, #0
 80237b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80237b4:	2318      	movs	r3, #24
 80237b6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  ili9341_spi_write_command_data(issNONE,
 80237ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80237be:	2202      	movs	r2, #2
 80237c0:	21b1      	movs	r1, #177	@ 0xb1
 80237c2:	f04f 30ff 	mov.w	r0, #4294967295
 80237c6:	f7ff ff01 	bl	80235cc <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 80237ca:	4a39      	ldr	r2, [pc, #228]	@ (80238b0 <ili9341_initialize+0x254>)
 80237cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80237d0:	6812      	ldr	r2, [r2, #0]
 80237d2:	4611      	mov	r1, r2
 80237d4:	8019      	strh	r1, [r3, #0]
 80237d6:	3302      	adds	r3, #2
 80237d8:	0c12      	lsrs	r2, r2, #16
 80237da:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 80237dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80237e0:	2203      	movs	r2, #3
 80237e2:	21b6      	movs	r1, #182	@ 0xb6
 80237e4:	f04f 30ff 	mov.w	r0, #4294967295
 80237e8:	f7ff fef0 	bl	80235cc <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 80237ec:	2300      	movs	r3, #0
 80237ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  ili9341_spi_write_command_data(issNONE,
 80237f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80237f6:	2201      	movs	r2, #1
 80237f8:	21f2      	movs	r1, #242	@ 0xf2
 80237fa:	f04f 30ff 	mov.w	r0, #4294967295
 80237fe:	f7ff fee5 	bl	80235cc <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 8023802:	2301      	movs	r3, #1
 8023804:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ili9341_spi_write_command_data(issNONE,
 8023808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802380c:	2201      	movs	r2, #1
 802380e:	2126      	movs	r1, #38	@ 0x26
 8023810:	f04f 30ff 	mov.w	r0, #4294967295
 8023814:	f7ff feda 	bl	80235cc <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8023818:	4b26      	ldr	r3, [pc, #152]	@ (80238b4 <ili9341_initialize+0x258>)
 802381a:	f107 0414 	add.w	r4, r7, #20
 802381e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023820:	c407      	stmia	r4!, {r0, r1, r2}
 8023822:	8023      	strh	r3, [r4, #0]
 8023824:	3402      	adds	r4, #2
 8023826:	0c1b      	lsrs	r3, r3, #16
 8023828:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(issNONE,
 802382a:	f107 0314 	add.w	r3, r7, #20
 802382e:	220f      	movs	r2, #15
 8023830:	21e0      	movs	r1, #224	@ 0xe0
 8023832:	f04f 30ff 	mov.w	r0, #4294967295
 8023836:	f7ff fec9 	bl	80235cc <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 802383a:	4b1f      	ldr	r3, [pc, #124]	@ (80238b8 <ili9341_initialize+0x25c>)
 802383c:	1d3c      	adds	r4, r7, #4
 802383e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023840:	c407      	stmia	r4!, {r0, r1, r2}
 8023842:	8023      	strh	r3, [r4, #0]
 8023844:	3402      	adds	r4, #2
 8023846:	0c1b      	lsrs	r3, r3, #16
 8023848:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(issNONE,
 802384a:	1d3b      	adds	r3, r7, #4
 802384c:	220f      	movs	r2, #15
 802384e:	21e1      	movs	r1, #225	@ 0xe1
 8023850:	f04f 30ff 	mov.w	r0, #4294967295
 8023854:	f7ff feba 	bl	80235cc <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(issNONE, 0x11);
 8023858:	2111      	movs	r1, #17
 802385a:	f04f 30ff 	mov.w	r0, #4294967295
 802385e:	f7ff fe4d 	bl	80234fc <ili9341_spi_write_command>
  gos_taskSleep(120);
 8023862:	2078      	movs	r0, #120	@ 0x78
 8023864:	f012 fabc 	bl	8035de0 <gos_taskSleep>

  // TURN ON DISPLAY
  ili9341_spi_write_command(issNONE, 0x29);
 8023868:	2129      	movs	r1, #41	@ 0x29
 802386a:	f04f 30ff 	mov.w	r0, #4294967295
 802386e:	f7ff fe45 	bl	80234fc <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd.orientation) });
 8023872:	4b12      	ldr	r3, [pc, #72]	@ (80238bc <ili9341_initialize+0x260>)
 8023874:	f993 3000 	ldrsb.w	r3, [r3]
 8023878:	4618      	mov	r0, r3
 802387a:	f000 f851 	bl	8023920 <ili9341_screen_rotation>
 802387e:	4603      	mov	r3, r0
 8023880:	703b      	strb	r3, [r7, #0]
  ili9341_spi_write_command_data(issNONE,
 8023882:	463b      	mov	r3, r7
 8023884:	2201      	movs	r2, #1
 8023886:	2136      	movs	r1, #54	@ 0x36
 8023888:	f04f 30ff 	mov.w	r0, #4294967295
 802388c:	f7ff fe9e 	bl	80235cc <ili9341_spi_write_command_data>

  ili9341_spi_tft_release();
 8023890:	f7ff fdf2 	bl	8023478 <ili9341_spi_tft_release>
}
 8023894:	bf00      	nop
 8023896:	376c      	adds	r7, #108	@ 0x6c
 8023898:	46bd      	mov	sp, r7
 802389a:	bd90      	pop	{r4, r7, pc}
 802389c:	0803e764 	.word	0x0803e764
 80238a0:	0803e76c 	.word	0x0803e76c
 80238a4:	0803e770 	.word	0x0803e770
 80238a8:	0803e774 	.word	0x0803e774
 80238ac:	0803e778 	.word	0x0803e778
 80238b0:	0803e77c 	.word	0x0803e77c
 80238b4:	0803e780 	.word	0x0803e780
 80238b8:	0803e790 	.word	0x0803e790
 80238bc:	200068a0 	.word	0x200068a0

080238c0 <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 80238c0:	b480      	push	{r7}
 80238c2:	b089      	sub	sp, #36	@ 0x24
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	4603      	mov	r3, r0
 80238c8:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80238ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80238ce:	2b03      	cmp	r3, #3
 80238d0:	d011      	beq.n	80238f6 <ili9341_screen_size+0x36>
 80238d2:	2b03      	cmp	r3, #3
 80238d4:	dc03      	bgt.n	80238de <ili9341_screen_size+0x1e>
 80238d6:	2b01      	cmp	r3, #1
 80238d8:	d005      	beq.n	80238e6 <ili9341_screen_size+0x26>
 80238da:	2b02      	cmp	r3, #2
 80238dc:	d007      	beq.n	80238ee <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 480U } };
 80238de:	4b0e      	ldr	r3, [pc, #56]	@ (8023918 <ili9341_screen_size+0x58>)
 80238e0:	681b      	ldr	r3, [r3, #0]
 80238e2:	61fb      	str	r3, [r7, #28]
 80238e4:	e00a      	b.n	80238fc <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 480U }, { .height = 320U } };
 80238e6:	4b0d      	ldr	r3, [pc, #52]	@ (802391c <ili9341_screen_size+0x5c>)
 80238e8:	681b      	ldr	r3, [r3, #0]
 80238ea:	61fb      	str	r3, [r7, #28]
 80238ec:	e006      	b.n	80238fc <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 480U } };
 80238ee:	4b0a      	ldr	r3, [pc, #40]	@ (8023918 <ili9341_screen_size+0x58>)
 80238f0:	681b      	ldr	r3, [r3, #0]
 80238f2:	61fb      	str	r3, [r7, #28]
 80238f4:	e002      	b.n	80238fc <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 480U }, { .height = 320U } };
 80238f6:	4b09      	ldr	r3, [pc, #36]	@ (802391c <ili9341_screen_size+0x5c>)
 80238f8:	681b      	ldr	r3, [r3, #0]
 80238fa:	61fb      	str	r3, [r7, #28]
  }
}
 80238fc:	2300      	movs	r3, #0
 80238fe:	8bba      	ldrh	r2, [r7, #28]
 8023900:	f362 030f 	bfi	r3, r2, #0, #16
 8023904:	8bfa      	ldrh	r2, [r7, #30]
 8023906:	f362 431f 	bfi	r3, r2, #16, #16
 802390a:	4618      	mov	r0, r3
 802390c:	3724      	adds	r7, #36	@ 0x24
 802390e:	46bd      	mov	sp, r7
 8023910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023914:	4770      	bx	lr
 8023916:	bf00      	nop
 8023918:	0803e7a0 	.word	0x0803e7a0
 802391c:	0803e7a4 	.word	0x0803e7a4

08023920 <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 8023920:	b480      	push	{r7}
 8023922:	b083      	sub	sp, #12
 8023924:	af00      	add	r7, sp, #0
 8023926:	4603      	mov	r3, r0
 8023928:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 802392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802392e:	2b03      	cmp	r3, #3
 8023930:	d00b      	beq.n	802394a <ili9341_screen_rotation+0x2a>
 8023932:	2b03      	cmp	r3, #3
 8023934:	dc03      	bgt.n	802393e <ili9341_screen_rotation+0x1e>
 8023936:	2b01      	cmp	r3, #1
 8023938:	d003      	beq.n	8023942 <ili9341_screen_rotation+0x22>
 802393a:	2b02      	cmp	r3, #2
 802393c:	d003      	beq.n	8023946 <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 802393e:	2348      	movs	r3, #72	@ 0x48
 8023940:	e004      	b.n	802394c <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 8023942:	23e8      	movs	r3, #232	@ 0xe8
 8023944:	e002      	b.n	802394c <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 8023946:	2388      	movs	r3, #136	@ 0x88
 8023948:	e000      	b.n	802394c <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 802394a:	2328      	movs	r3, #40	@ 0x28
  }
}
 802394c:	4618      	mov	r0, r3
 802394e:	370c      	adds	r7, #12
 8023950:	46bd      	mov	sp, r7
 8023952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023956:	4770      	bx	lr

08023958 <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 8023958:	b480      	push	{r7}
 802395a:	b083      	sub	sp, #12
 802395c:	af00      	add	r7, sp, #0
 802395e:	4603      	mov	r3, r0
 8023960:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 8023962:	79fb      	ldrb	r3, [r7, #7]
 8023964:	2b1f      	cmp	r3, #31
 8023966:	d906      	bls.n	8023976 <glyph_index+0x1e>
 8023968:	79fb      	ldrb	r3, [r7, #7]
 802396a:	2b7e      	cmp	r3, #126	@ 0x7e
 802396c:	d803      	bhi.n	8023976 <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 802396e:	79fb      	ldrb	r3, [r7, #7]
 8023970:	3b20      	subs	r3, #32
 8023972:	b2db      	uxtb	r3, r3
 8023974:	e000      	b.n	8023978 <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 8023976:	2300      	movs	r3, #0
}
 8023978:	4618      	mov	r0, r3
 802397a:	370c      	adds	r7, #12
 802397c:	46bd      	mov	sp, r7
 802397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023982:	4770      	bx	lr

08023984 <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8023984:	b590      	push	{r4, r7, lr}
 8023986:	b085      	sub	sp, #20
 8023988:	af00      	add	r7, sp, #0
 802398a:	4604      	mov	r4, r0
 802398c:	4608      	mov	r0, r1
 802398e:	4611      	mov	r1, r2
 8023990:	461a      	mov	r2, r3
 8023992:	4623      	mov	r3, r4
 8023994:	80fb      	strh	r3, [r7, #6]
 8023996:	4603      	mov	r3, r0
 8023998:	80bb      	strh	r3, [r7, #4]
 802399a:	460b      	mov	r3, r1
 802399c:	807b      	strh	r3, [r7, #2]
 802399e:	4613      	mov	r3, r2
 80239a0:	803b      	strh	r3, [r7, #0]
  ili9341_spi_tft_select();
 80239a2:	f7ff fd61 	bl	8023468 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 80239a6:	88fb      	ldrh	r3, [r7, #6]
 80239a8:	0a1b      	lsrs	r3, r3, #8
 80239aa:	b29b      	uxth	r3, r3
 80239ac:	b2db      	uxtb	r3, r3
 80239ae:	733b      	strb	r3, [r7, #12]
 80239b0:	88fb      	ldrh	r3, [r7, #6]
 80239b2:	b2db      	uxtb	r3, r3
 80239b4:	737b      	strb	r3, [r7, #13]
 80239b6:	887b      	ldrh	r3, [r7, #2]
 80239b8:	0a1b      	lsrs	r3, r3, #8
 80239ba:	b29b      	uxth	r3, r3
 80239bc:	b2db      	uxtb	r3, r3
 80239be:	73bb      	strb	r3, [r7, #14]
 80239c0:	887b      	ldrh	r3, [r7, #2]
 80239c2:	b2db      	uxtb	r3, r3
 80239c4:	73fb      	strb	r3, [r7, #15]
  ili9341_spi_write_command_data(issNONE,
 80239c6:	f107 030c 	add.w	r3, r7, #12
 80239ca:	2204      	movs	r2, #4
 80239cc:	212a      	movs	r1, #42	@ 0x2a
 80239ce:	f04f 30ff 	mov.w	r0, #4294967295
 80239d2:	f7ff fdfb 	bl	80235cc <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 80239d6:	88bb      	ldrh	r3, [r7, #4]
 80239d8:	0a1b      	lsrs	r3, r3, #8
 80239da:	b29b      	uxth	r3, r3
 80239dc:	b2db      	uxtb	r3, r3
 80239de:	723b      	strb	r3, [r7, #8]
 80239e0:	88bb      	ldrh	r3, [r7, #4]
 80239e2:	b2db      	uxtb	r3, r3
 80239e4:	727b      	strb	r3, [r7, #9]
 80239e6:	883b      	ldrh	r3, [r7, #0]
 80239e8:	0a1b      	lsrs	r3, r3, #8
 80239ea:	b29b      	uxth	r3, r3
 80239ec:	b2db      	uxtb	r3, r3
 80239ee:	72bb      	strb	r3, [r7, #10]
 80239f0:	883b      	ldrh	r3, [r7, #0]
 80239f2:	b2db      	uxtb	r3, r3
 80239f4:	72fb      	strb	r3, [r7, #11]
  ili9341_spi_write_command_data(issNONE,
 80239f6:	f107 0308 	add.w	r3, r7, #8
 80239fa:	2204      	movs	r2, #4
 80239fc:	212b      	movs	r1, #43	@ 0x2b
 80239fe:	f04f 30ff 	mov.w	r0, #4294967295
 8023a02:	f7ff fde3 	bl	80235cc <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(issNONE, 0x2C);
 8023a06:	212c      	movs	r1, #44	@ 0x2c
 8023a08:	f04f 30ff 	mov.w	r0, #4294967295
 8023a0c:	f7ff fd76 	bl	80234fc <ili9341_spi_write_command>

  ili9341_spi_tft_release();
 8023a10:	f7ff fd32 	bl	8023478 <ili9341_spi_tft_release>
}
 8023a14:	bf00      	nop
 8023a16:	3714      	adds	r7, #20
 8023a18:	46bd      	mov	sp, r7
 8023a1a:	bd90      	pop	{r4, r7, pc}

08023a1c <ili9341_transmit_wait>:

void ili9341_transmit_wait()
{
 8023a1c:	b580      	push	{r7, lr}
 8023a1e:	af00      	add	r7, sp, #0
  //  { return; }

  //while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
  //while(spi_driver_is_dma_busy() == GOS_TRUE)
  //  { continue; }
	while (drv_dmaIsBusy(spiConfig[1].dmaConfigTx) == GOS_TRUE)
 8023a20:	e000      	b.n	8023a24 <ili9341_transmit_wait+0x8>
	{
		continue;
 8023a22:	bf00      	nop
	while (drv_dmaIsBusy(spiConfig[1].dmaConfigTx) == GOS_TRUE)
 8023a24:	4b05      	ldr	r3, [pc, #20]	@ (8023a3c <ili9341_transmit_wait+0x20>)
 8023a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8023a28:	4618      	mov	r0, r3
 8023a2a:	f00a fd19 	bl	802e460 <drv_dmaIsBusy>
 8023a2e:	4603      	mov	r3, r0
 8023a30:	2b36      	cmp	r3, #54	@ 0x36
 8023a32:	d0f6      	beq.n	8023a22 <ili9341_transmit_wait+0x6>
	}
}
 8023a34:	bf00      	nop
 8023a36:	bf00      	nop
 8023a38:	bd80      	pop	{r7, pc}
 8023a3a:	bf00      	nop
 8023a3c:	0803ff4c 	.word	0x0803ff4c

08023a40 <ili9341_transmit_color>:

void ili9341_transmit_color(uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 8023a40:	b580      	push	{r7, lr}
 8023a42:	b084      	sub	sp, #16
 8023a44:	af02      	add	r7, sp, #8
 8023a46:	4603      	mov	r3, r0
 8023a48:	6039      	str	r1, [r7, #0]
 8023a4a:	80fb      	strh	r3, [r7, #6]
 8023a4c:	4613      	mov	r3, r2
 8023a4e:	717b      	strb	r3, [r7, #5]
  if (/*(NULL == lcd) ||*/ (0 == size) || (NULL == color))
 8023a50:	88fb      	ldrh	r3, [r7, #6]
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	d011      	beq.n	8023a7a <ili9341_transmit_color+0x3a>
 8023a56:	683b      	ldr	r3, [r7, #0]
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	d00e      	beq.n	8023a7a <ili9341_transmit_color+0x3a>
  //drv_spiTransmitIT(DRV_SPI_INSTANCE_3, (uint8_t *)color, size, GOS_MUTEX_ENDLESS_TMO, 1000);

  /*
   * Trigger timeout is 0 -> trigger is unused.
   */
  drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, (uint8_t *)color, size, 2000u, 0u);
 8023a5c:	88fa      	ldrh	r2, [r7, #6]
 8023a5e:	2300      	movs	r3, #0
 8023a60:	9300      	str	r3, [sp, #0]
 8023a62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8023a66:	6839      	ldr	r1, [r7, #0]
 8023a68:	2002      	movs	r0, #2
 8023a6a:	f00c fa0f 	bl	802fe8c <drv_spiTransmitDMA>


  if (ibOK(wait))
 8023a6e:	797b      	ldrb	r3, [r7, #5]
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	d003      	beq.n	8023a7c <ili9341_transmit_color+0x3c>
    { ili9341_transmit_wait(); }
 8023a74:	f7ff ffd2 	bl	8023a1c <ili9341_transmit_wait>
 8023a78:	e000      	b.n	8023a7c <ili9341_transmit_color+0x3c>
    { return; }
 8023a7a:	bf00      	nop
}
 8023a7c:	3708      	adds	r7, #8
 8023a7e:	46bd      	mov	sp, r7
 8023a80:	bd80      	pop	{r7, pc}

08023a82 <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_color_t color,
    int16_t x, int16_t y)
{
 8023a82:	b580      	push	{r7, lr}
 8023a84:	b086      	sub	sp, #24
 8023a86:	af02      	add	r7, sp, #8
 8023a88:	4603      	mov	r3, r0
 8023a8a:	80fb      	strh	r3, [r7, #6]
 8023a8c:	460b      	mov	r3, r1
 8023a8e:	80bb      	strh	r3, [r7, #4]
 8023a90:	4613      	mov	r3, r2
 8023a92:	807b      	strh	r3, [r7, #2]
//if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS)
{
  if (ibNOT(ili9341_clip_rect(&x, &y, NULL, NULL)))
 8023a94:	1cb9      	adds	r1, r7, #2
 8023a96:	1d38      	adds	r0, r7, #4
 8023a98:	2300      	movs	r3, #0
 8023a9a:	2200      	movs	r2, #0
 8023a9c:	f000 fb00 	bl	80240a0 <ili9341_clip_rect>
 8023aa0:	4603      	mov	r3, r0
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	d031      	beq.n	8023b0a <ili9341_draw_pixel+0x88>
    { return; }

  uint16_t color_le = __LEu16(&color);
 8023aa6:	1dbb      	adds	r3, r7, #6
 8023aa8:	3301      	adds	r3, #1
 8023aaa:	781b      	ldrb	r3, [r3, #0]
 8023aac:	b21a      	sxth	r2, r3
 8023aae:	1dbb      	adds	r3, r7, #6
 8023ab0:	781b      	ldrb	r3, [r3, #0]
 8023ab2:	021b      	lsls	r3, r3, #8
 8023ab4:	b21b      	sxth	r3, r3
 8023ab6:	4313      	orrs	r3, r2
 8023ab8:	b21b      	sxth	r3, r3
 8023aba:	b29b      	uxth	r3, r3
 8023abc:	81fb      	strh	r3, [r7, #14]

  // select target region
  ili9341_spi_tft_set_address_rect(x, y, x + 1, y + 1);
 8023abe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8023ac2:	b298      	uxth	r0, r3
 8023ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023ac8:	b299      	uxth	r1, r3
 8023aca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8023ace:	b29b      	uxth	r3, r3
 8023ad0:	3301      	adds	r3, #1
 8023ad2:	b29a      	uxth	r2, r3
 8023ad4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023ad8:	b29b      	uxth	r3, r3
 8023ada:	3301      	adds	r3, #1
 8023adc:	b29b      	uxth	r3, r3
 8023ade:	f7ff ff51 	bl	8023984 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select();
 8023ae2:	f7ff fcc1 	bl	8023468 <ili9341_spi_tft_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 8023ae6:	2101      	movs	r1, #1
 8023ae8:	2015      	movs	r0, #21
 8023aea:	f00b f975 	bl	802edd8 <drv_gpioWritePin>
  //HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
  //spi_driver_transmit_blocking((uint8_t *)&color_le, 2U);
  drv_spiTransmitBlocking(DRV_SPI_INSTANCE_3, (uint8_t *)&color_le, 2u, 2000, 5000);
 8023aee:	f107 010e 	add.w	r1, r7, #14
 8023af2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8023af6:	9300      	str	r3, [sp, #0]
 8023af8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8023afc:	2202      	movs	r2, #2
 8023afe:	2002      	movs	r0, #2
 8023b00:	f00c f8c6 	bl	802fc90 <drv_spiTransmitBlocking>
  //drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, (uint8_t *)&color_le, 2u, GOS_MUTEX_ENDLESS_TMO, 1000);

  ili9341_spi_tft_release();
 8023b04:	f7ff fcb8 	bl	8023478 <ili9341_spi_tft_release>
 8023b08:	e000      	b.n	8023b0c <ili9341_draw_pixel+0x8a>
    { return; }
 8023b0a:	bf00      	nop
}
//gos_mutexUnlock(&ili9341Mutex);
}
 8023b0c:	3710      	adds	r7, #16
 8023b0e:	46bd      	mov	sp, r7
 8023b10:	bd80      	pop	{r7, pc}
	...

08023b14 <ili9341_draw_line>:

void ili9341_draw_line(ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8023b14:	b590      	push	{r4, r7, lr}
 8023b16:	b08b      	sub	sp, #44	@ 0x2c
 8023b18:	af02      	add	r7, sp, #8
 8023b1a:	4604      	mov	r4, r0
 8023b1c:	4608      	mov	r0, r1
 8023b1e:	4611      	mov	r1, r2
 8023b20:	461a      	mov	r2, r3
 8023b22:	4623      	mov	r3, r4
 8023b24:	80fb      	strh	r3, [r7, #6]
 8023b26:	4603      	mov	r3, r0
 8023b28:	80bb      	strh	r3, [r7, #4]
 8023b2a:	460b      	mov	r3, r1
 8023b2c:	807b      	strh	r3, [r7, #2]
 8023b2e:	4613      	mov	r3, r2
 8023b30:	803b      	strh	r3, [r7, #0]
  int16_t dx = x1 - x0;
 8023b32:	883a      	ldrh	r2, [r7, #0]
 8023b34:	88bb      	ldrh	r3, [r7, #4]
 8023b36:	1ad3      	subs	r3, r2, r3
 8023b38:	b29b      	uxth	r3, r3
 8023b3a:	82fb      	strh	r3, [r7, #22]
  int16_t dy = y1 - y0;
 8023b3c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8023b3e:	887b      	ldrh	r3, [r7, #2]
 8023b40:	1ad3      	subs	r3, r2, r3
 8023b42:	b29b      	uxth	r3, r3
 8023b44:	82bb      	strh	r3, [r7, #20]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 8023b46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d114      	bne.n	8023b78 <ili9341_draw_line+0x64>
    // vertical line
    if (0 == dy)
 8023b4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	f000 80c1 	beq.w	8023cda <ili9341_draw_line+0x1c6>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(color, x0, y0, 1, abs(dy));
 8023b58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	bfb8      	it	lt
 8023b60:	425b      	neglt	r3, r3
 8023b62:	b29b      	uxth	r3, r3
 8023b64:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8023b68:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8023b6c:	88f8      	ldrh	r0, [r7, #6]
 8023b6e:	9300      	str	r3, [sp, #0]
 8023b70:	2301      	movs	r3, #1
 8023b72:	f000 f923 	bl	8023dbc <ili9341_fill_rect>
    return;
 8023b76:	e0b3      	b.n	8023ce0 <ili9341_draw_line+0x1cc>
  }
  else if (0 == dy) {
 8023b78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023b7c:	2b00      	cmp	r3, #0
 8023b7e:	d114      	bne.n	8023baa <ili9341_draw_line+0x96>
    // horizontal line
    if (0 == dx)
 8023b80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	f000 80aa 	beq.w	8023cde <ili9341_draw_line+0x1ca>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(color, x0, y0, abs(dx), 1);
 8023b8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	bfb8      	it	lt
 8023b92:	425b      	neglt	r3, r3
 8023b94:	b29b      	uxth	r3, r3
 8023b96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8023b9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8023b9e:	88f8      	ldrh	r0, [r7, #6]
 8023ba0:	2401      	movs	r4, #1
 8023ba2:	9400      	str	r4, [sp, #0]
 8023ba4:	f000 f90a 	bl	8023dbc <ili9341_fill_rect>
    return;
 8023ba8:	e09a      	b.n	8023ce0 <ili9341_draw_line+0x1cc>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8023baa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	bfb8      	it	lt
 8023bb2:	425b      	neglt	r3, r3
 8023bb4:	b29a      	uxth	r2, r3
 8023bb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	bfb8      	it	lt
 8023bbe:	425b      	neglt	r3, r3
 8023bc0:	b29b      	uxth	r3, r3
 8023bc2:	429a      	cmp	r2, r3
 8023bc4:	bf8c      	ite	hi
 8023bc6:	2301      	movhi	r3, #1
 8023bc8:	2300      	movls	r3, #0
 8023bca:	b2db      	uxtb	r3, r3
 8023bcc:	74fb      	strb	r3, [r7, #19]
  if (is_steep) {
 8023bce:	7cfb      	ldrb	r3, [r7, #19]
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	d00b      	beq.n	8023bec <ili9341_draw_line+0xd8>
    __SWAP(int16_t, x0, y0);
 8023bd4:	88bb      	ldrh	r3, [r7, #4]
 8023bd6:	823b      	strh	r3, [r7, #16]
 8023bd8:	887b      	ldrh	r3, [r7, #2]
 8023bda:	80bb      	strh	r3, [r7, #4]
 8023bdc:	8a3b      	ldrh	r3, [r7, #16]
 8023bde:	807b      	strh	r3, [r7, #2]
    __SWAP(int16_t, x1, y1);
 8023be0:	883b      	ldrh	r3, [r7, #0]
 8023be2:	81fb      	strh	r3, [r7, #14]
 8023be4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8023be6:	803b      	strh	r3, [r7, #0]
 8023be8:	89fb      	ldrh	r3, [r7, #14]
 8023bea:	863b      	strh	r3, [r7, #48]	@ 0x30
  }

  if (x0 > x1) {
 8023bec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8023bf0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8023bf4:	429a      	cmp	r2, r3
 8023bf6:	dd0b      	ble.n	8023c10 <ili9341_draw_line+0xfc>
    __SWAP(int16_t, x0, x1);
 8023bf8:	88bb      	ldrh	r3, [r7, #4]
 8023bfa:	81bb      	strh	r3, [r7, #12]
 8023bfc:	883b      	ldrh	r3, [r7, #0]
 8023bfe:	80bb      	strh	r3, [r7, #4]
 8023c00:	89bb      	ldrh	r3, [r7, #12]
 8023c02:	803b      	strh	r3, [r7, #0]
    __SWAP(int16_t, y0, y1);
 8023c04:	887b      	ldrh	r3, [r7, #2]
 8023c06:	817b      	strh	r3, [r7, #10]
 8023c08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8023c0a:	807b      	strh	r3, [r7, #2]
 8023c0c:	897b      	ldrh	r3, [r7, #10]
 8023c0e:	863b      	strh	r3, [r7, #48]	@ 0x30
  }

  dx = x1 - x0;
 8023c10:	883a      	ldrh	r2, [r7, #0]
 8023c12:	88bb      	ldrh	r3, [r7, #4]
 8023c14:	1ad3      	subs	r3, r2, r3
 8023c16:	b29b      	uxth	r3, r3
 8023c18:	82fb      	strh	r3, [r7, #22]
  dy = abs(y1 - y0);
 8023c1a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8023c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023c22:	1ad3      	subs	r3, r2, r3
 8023c24:	2b00      	cmp	r3, #0
 8023c26:	bfb8      	it	lt
 8023c28:	425b      	neglt	r3, r3
 8023c2a:	82bb      	strh	r3, [r7, #20]
  err = dx >> 1;
 8023c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023c30:	105b      	asrs	r3, r3, #1
 8023c32:	837b      	strh	r3, [r7, #26]

  if (y0 < y1)
 8023c34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8023c38:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8023c3c:	429a      	cmp	r2, r3
 8023c3e:	da02      	bge.n	8023c46 <ili9341_draw_line+0x132>
    { step = 1; }
 8023c40:	2301      	movs	r3, #1
 8023c42:	833b      	strh	r3, [r7, #24]
 8023c44:	e042      	b.n	8023ccc <ili9341_draw_line+0x1b8>
  else
    { step = -1; }
 8023c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023c4a:	833b      	strh	r3, [r7, #24]

  while (x0 <= x1) {
 8023c4c:	e03e      	b.n	8023ccc <ili9341_draw_line+0x1b8>

    if (is_steep)
 8023c4e:	7cfb      	ldrb	r3, [r7, #19]
 8023c50:	2b00      	cmp	r3, #0
 8023c52:	d004      	beq.n	8023c5e <ili9341_draw_line+0x14a>
      { x = y0; y = x0; }
 8023c54:	887b      	ldrh	r3, [r7, #2]
 8023c56:	83fb      	strh	r3, [r7, #30]
 8023c58:	88bb      	ldrh	r3, [r7, #4]
 8023c5a:	83bb      	strh	r3, [r7, #28]
 8023c5c:	e003      	b.n	8023c66 <ili9341_draw_line+0x152>
    else
      { x = x0; y = y0; }
 8023c5e:	88bb      	ldrh	r3, [r7, #4]
 8023c60:	83fb      	strh	r3, [r7, #30]
 8023c62:	887b      	ldrh	r3, [r7, #2]
 8023c64:	83bb      	strh	r3, [r7, #28]

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd.screen_size.width) &&
 8023c66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8023c6a:	2b00      	cmp	r3, #0
 8023c6c:	db17      	blt.n	8023c9e <ili9341_draw_line+0x18a>
 8023c6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8023c72:	4a1d      	ldr	r2, [pc, #116]	@ (8023ce8 <ili9341_draw_line+0x1d4>)
 8023c74:	8852      	ldrh	r2, [r2, #2]
 8023c76:	4293      	cmp	r3, r2
 8023c78:	dc11      	bgt.n	8023c9e <ili9341_draw_line+0x18a>
 8023c7a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8023c7e:	2b00      	cmp	r3, #0
 8023c80:	db0d      	blt.n	8023c9e <ili9341_draw_line+0x18a>
         (y >= 0) && (y <= lcd.screen_size.height) ) {
 8023c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8023c86:	4a18      	ldr	r2, [pc, #96]	@ (8023ce8 <ili9341_draw_line+0x1d4>)
 8023c88:	8892      	ldrh	r2, [r2, #4]
 8023c8a:	4293      	cmp	r3, r2
 8023c8c:	dc07      	bgt.n	8023c9e <ili9341_draw_line+0x18a>
      ili9341_draw_pixel(color, x, y);
 8023c8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8023c92:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8023c96:	88fb      	ldrh	r3, [r7, #6]
 8023c98:	4618      	mov	r0, r3
 8023c9a:	f7ff fef2 	bl	8023a82 <ili9341_draw_pixel>
    }

    err -= dy;
 8023c9e:	8b7a      	ldrh	r2, [r7, #26]
 8023ca0:	8abb      	ldrh	r3, [r7, #20]
 8023ca2:	1ad3      	subs	r3, r2, r3
 8023ca4:	b29b      	uxth	r3, r3
 8023ca6:	837b      	strh	r3, [r7, #26]
    if (err < 0) {
 8023ca8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	da09      	bge.n	8023cc4 <ili9341_draw_line+0x1b0>
      y0 += step;
 8023cb0:	887a      	ldrh	r2, [r7, #2]
 8023cb2:	8b3b      	ldrh	r3, [r7, #24]
 8023cb4:	4413      	add	r3, r2
 8023cb6:	b29b      	uxth	r3, r3
 8023cb8:	807b      	strh	r3, [r7, #2]
      err += dx;
 8023cba:	8b7a      	ldrh	r2, [r7, #26]
 8023cbc:	8afb      	ldrh	r3, [r7, #22]
 8023cbe:	4413      	add	r3, r2
 8023cc0:	b29b      	uxth	r3, r3
 8023cc2:	837b      	strh	r3, [r7, #26]
    }

    ++x0;
 8023cc4:	88bb      	ldrh	r3, [r7, #4]
 8023cc6:	3301      	adds	r3, #1
 8023cc8:	b29b      	uxth	r3, r3
 8023cca:	80bb      	strh	r3, [r7, #4]
  while (x0 <= x1) {
 8023ccc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8023cd0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8023cd4:	429a      	cmp	r2, r3
 8023cd6:	ddba      	ble.n	8023c4e <ili9341_draw_line+0x13a>
 8023cd8:	e002      	b.n	8023ce0 <ili9341_draw_line+0x1cc>
      { return; } // distance = 0, no line to draw
 8023cda:	bf00      	nop
 8023cdc:	e000      	b.n	8023ce0 <ili9341_draw_line+0x1cc>
      { return; } // distance = 0, no line to draw
 8023cde:	bf00      	nop
  }
}
 8023ce0:	3724      	adds	r7, #36	@ 0x24
 8023ce2:	46bd      	mov	sp, r7
 8023ce4:	bd90      	pop	{r4, r7, pc}
 8023ce6:	bf00      	nop
 8023ce8:	200068a0 	.word	0x200068a0

08023cec <ili9341_draw_rect>:

void ili9341_draw_rect(ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8023cec:	b5b0      	push	{r4, r5, r7, lr}
 8023cee:	b084      	sub	sp, #16
 8023cf0:	af02      	add	r7, sp, #8
 8023cf2:	4604      	mov	r4, r0
 8023cf4:	4608      	mov	r0, r1
 8023cf6:	4611      	mov	r1, r2
 8023cf8:	461a      	mov	r2, r3
 8023cfa:	4623      	mov	r3, r4
 8023cfc:	80fb      	strh	r3, [r7, #6]
 8023cfe:	4603      	mov	r3, r0
 8023d00:	80bb      	strh	r3, [r7, #4]
 8023d02:	460b      	mov	r3, r1
 8023d04:	807b      	strh	r3, [r7, #2]
 8023d06:	4613      	mov	r3, r2
 8023d08:	803b      	strh	r3, [r7, #0]
	//if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS){

  ili9341_draw_line(color,     x,     y,   x+w,     y );
 8023d0a:	88ba      	ldrh	r2, [r7, #4]
 8023d0c:	883b      	ldrh	r3, [r7, #0]
 8023d0e:	4413      	add	r3, r2
 8023d10:	b29b      	uxth	r3, r3
 8023d12:	b21c      	sxth	r4, r3
 8023d14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8023d18:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8023d1c:	88f8      	ldrh	r0, [r7, #6]
 8023d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023d22:	9300      	str	r3, [sp, #0]
 8023d24:	4623      	mov	r3, r4
 8023d26:	f7ff fef5 	bl	8023b14 <ili9341_draw_line>
  ili9341_draw_line(color,     x, y+h-1,   x+w, y+h-1 );
 8023d2a:	887a      	ldrh	r2, [r7, #2]
 8023d2c:	8b3b      	ldrh	r3, [r7, #24]
 8023d2e:	4413      	add	r3, r2
 8023d30:	b29b      	uxth	r3, r3
 8023d32:	3b01      	subs	r3, #1
 8023d34:	b29b      	uxth	r3, r3
 8023d36:	b21c      	sxth	r4, r3
 8023d38:	88ba      	ldrh	r2, [r7, #4]
 8023d3a:	883b      	ldrh	r3, [r7, #0]
 8023d3c:	4413      	add	r3, r2
 8023d3e:	b29b      	uxth	r3, r3
 8023d40:	b21d      	sxth	r5, r3
 8023d42:	887a      	ldrh	r2, [r7, #2]
 8023d44:	8b3b      	ldrh	r3, [r7, #24]
 8023d46:	4413      	add	r3, r2
 8023d48:	b29b      	uxth	r3, r3
 8023d4a:	3b01      	subs	r3, #1
 8023d4c:	b29b      	uxth	r3, r3
 8023d4e:	b21b      	sxth	r3, r3
 8023d50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8023d54:	88f8      	ldrh	r0, [r7, #6]
 8023d56:	9300      	str	r3, [sp, #0]
 8023d58:	462b      	mov	r3, r5
 8023d5a:	4622      	mov	r2, r4
 8023d5c:	f7ff feda 	bl	8023b14 <ili9341_draw_line>
  ili9341_draw_line(color,     x,     y,     x,   y+h );
 8023d60:	887a      	ldrh	r2, [r7, #2]
 8023d62:	8b3b      	ldrh	r3, [r7, #24]
 8023d64:	4413      	add	r3, r2
 8023d66:	b29b      	uxth	r3, r3
 8023d68:	b21b      	sxth	r3, r3
 8023d6a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8023d6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8023d72:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8023d76:	88f8      	ldrh	r0, [r7, #6]
 8023d78:	9300      	str	r3, [sp, #0]
 8023d7a:	4623      	mov	r3, r4
 8023d7c:	f7ff feca 	bl	8023b14 <ili9341_draw_line>
  ili9341_draw_line(color, x+w-1,     y, x+w-1,   y+h );
 8023d80:	88ba      	ldrh	r2, [r7, #4]
 8023d82:	883b      	ldrh	r3, [r7, #0]
 8023d84:	4413      	add	r3, r2
 8023d86:	b29b      	uxth	r3, r3
 8023d88:	3b01      	subs	r3, #1
 8023d8a:	b29b      	uxth	r3, r3
 8023d8c:	b219      	sxth	r1, r3
 8023d8e:	88ba      	ldrh	r2, [r7, #4]
 8023d90:	883b      	ldrh	r3, [r7, #0]
 8023d92:	4413      	add	r3, r2
 8023d94:	b29b      	uxth	r3, r3
 8023d96:	3b01      	subs	r3, #1
 8023d98:	b29b      	uxth	r3, r3
 8023d9a:	b21c      	sxth	r4, r3
 8023d9c:	887a      	ldrh	r2, [r7, #2]
 8023d9e:	8b3b      	ldrh	r3, [r7, #24]
 8023da0:	4413      	add	r3, r2
 8023da2:	b29b      	uxth	r3, r3
 8023da4:	b21b      	sxth	r3, r3
 8023da6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8023daa:	88f8      	ldrh	r0, [r7, #6]
 8023dac:	9300      	str	r3, [sp, #0]
 8023dae:	4623      	mov	r3, r4
 8023db0:	f7ff feb0 	bl	8023b14 <ili9341_draw_line>
	//}
	//gos_mutexUnlock(&ili9341Mutex);
}
 8023db4:	bf00      	nop
 8023db6:	3708      	adds	r7, #8
 8023db8:	46bd      	mov	sp, r7
 8023dba:	bdb0      	pop	{r4, r5, r7, pc}

08023dbc <ili9341_fill_rect>:

void ili9341_fill_rect(ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8023dbc:	b590      	push	{r4, r7, lr}
 8023dbe:	b089      	sub	sp, #36	@ 0x24
 8023dc0:	af00      	add	r7, sp, #0
 8023dc2:	4604      	mov	r4, r0
 8023dc4:	4608      	mov	r0, r1
 8023dc6:	4611      	mov	r1, r2
 8023dc8:	461a      	mov	r2, r3
 8023dca:	4623      	mov	r3, r4
 8023dcc:	80fb      	strh	r3, [r7, #6]
 8023dce:	4603      	mov	r3, r0
 8023dd0:	80bb      	strh	r3, [r7, #4]
 8023dd2:	460b      	mov	r3, r1
 8023dd4:	807b      	strh	r3, [r7, #2]
 8023dd6:	4613      	mov	r3, r2
 8023dd8:	803b      	strh	r3, [r7, #0]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(&x, &y, &w, &h)))
 8023dda:	463a      	mov	r2, r7
 8023ddc:	1cb9      	adds	r1, r7, #2
 8023dde:	1d38      	adds	r0, r7, #4
 8023de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8023de4:	f000 f95c 	bl	80240a0 <ili9341_clip_rect>
 8023de8:	4603      	mov	r3, r0
 8023dea:	2b00      	cmp	r3, #0
 8023dec:	d064      	beq.n	8023eb8 <ili9341_fill_rect+0xfc>
    { return; }
  //if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS){
  uint32_t num_pixels = w * h;
 8023dee:	883b      	ldrh	r3, [r7, #0]
 8023df0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8023df2:	fb02 f303 	mul.w	r3, r2, r3
 8023df6:	60fb      	str	r3, [r7, #12]
  uint32_t rect_wc    = num_pixels;
 8023df8:	68fb      	ldr	r3, [r7, #12]
 8023dfa:	61fb      	str	r3, [r7, #28]

  uint32_t block_wc = rect_wc;
 8023dfc:	69fb      	ldr	r3, [r7, #28]
 8023dfe:	61bb      	str	r3, [r7, #24]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8023e00:	69bb      	ldr	r3, [r7, #24]
 8023e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023e06:	d902      	bls.n	8023e0e <ili9341_fill_rect+0x52>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8023e08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023e0c:	61bb      	str	r3, [r7, #24]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 8023e0e:	1dbb      	adds	r3, r7, #6
 8023e10:	3301      	adds	r3, #1
 8023e12:	781b      	ldrb	r3, [r3, #0]
 8023e14:	b21a      	sxth	r2, r3
 8023e16:	1dbb      	adds	r3, r7, #6
 8023e18:	781b      	ldrb	r3, [r3, #0]
 8023e1a:	021b      	lsls	r3, r3, #8
 8023e1c:	b21b      	sxth	r3, r3
 8023e1e:	4313      	orrs	r3, r2
 8023e20:	b21b      	sxth	r3, r3
 8023e22:	817b      	strh	r3, [r7, #10]
  for (uint16_t i = 0; i < block_wc; ++i)
 8023e24:	2300      	movs	r3, #0
 8023e26:	82fb      	strh	r3, [r7, #22]
 8023e28:	e007      	b.n	8023e3a <ili9341_fill_rect+0x7e>
    { spi_tx_block[i] = color_le; }
 8023e2a:	8afb      	ldrh	r3, [r7, #22]
 8023e2c:	4924      	ldr	r1, [pc, #144]	@ (8023ec0 <ili9341_fill_rect+0x104>)
 8023e2e:	897a      	ldrh	r2, [r7, #10]
 8023e30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8023e34:	8afb      	ldrh	r3, [r7, #22]
 8023e36:	3301      	adds	r3, #1
 8023e38:	82fb      	strh	r3, [r7, #22]
 8023e3a:	8afb      	ldrh	r3, [r7, #22]
 8023e3c:	69ba      	ldr	r2, [r7, #24]
 8023e3e:	429a      	cmp	r2, r3
 8023e40:	d8f3      	bhi.n	8023e2a <ili9341_fill_rect+0x6e>

  // select target region
  ili9341_spi_tft_set_address_rect(x, y, (x + w - 1), (y + h - 1));
 8023e42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8023e46:	b298      	uxth	r0, r3
 8023e48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023e4c:	b299      	uxth	r1, r3
 8023e4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8023e52:	b29a      	uxth	r2, r3
 8023e54:	883b      	ldrh	r3, [r7, #0]
 8023e56:	4413      	add	r3, r2
 8023e58:	b29b      	uxth	r3, r3
 8023e5a:	3b01      	subs	r3, #1
 8023e5c:	b29c      	uxth	r4, r3
 8023e5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023e62:	b29a      	uxth	r2, r3
 8023e64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8023e66:	4413      	add	r3, r2
 8023e68:	b29b      	uxth	r3, r3
 8023e6a:	3b01      	subs	r3, #1
 8023e6c:	b29b      	uxth	r3, r3
 8023e6e:	4622      	mov	r2, r4
 8023e70:	f7ff fd88 	bl	8023984 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select();
 8023e74:	f7ff faf8 	bl	8023468 <ili9341_spi_tft_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 8023e78:	2101      	movs	r1, #1
 8023e7a:	2015      	movs	r0, #21
 8023e7c:	f00a ffac 	bl	802edd8 <drv_gpioWritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8023e80:	e014      	b.n	8023eac <ili9341_fill_rect+0xf0>
    curr_wc = rect_wc;
 8023e82:	69fb      	ldr	r3, [r7, #28]
 8023e84:	613b      	str	r3, [r7, #16]
    if (curr_wc > block_wc)
 8023e86:	693a      	ldr	r2, [r7, #16]
 8023e88:	69bb      	ldr	r3, [r7, #24]
 8023e8a:	429a      	cmp	r2, r3
 8023e8c:	d901      	bls.n	8023e92 <ili9341_fill_rect+0xd6>
      { curr_wc = block_wc; }
 8023e8e:	69bb      	ldr	r3, [r7, #24]
 8023e90:	613b      	str	r3, [r7, #16]
    ili9341_transmit_color(curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8023e92:	693b      	ldr	r3, [r7, #16]
 8023e94:	b29b      	uxth	r3, r3
 8023e96:	005b      	lsls	r3, r3, #1
 8023e98:	b29b      	uxth	r3, r3
 8023e9a:	2201      	movs	r2, #1
 8023e9c:	4908      	ldr	r1, [pc, #32]	@ (8023ec0 <ili9341_fill_rect+0x104>)
 8023e9e:	4618      	mov	r0, r3
 8023ea0:	f7ff fdce 	bl	8023a40 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8023ea4:	69fa      	ldr	r2, [r7, #28]
 8023ea6:	693b      	ldr	r3, [r7, #16]
 8023ea8:	1ad3      	subs	r3, r2, r3
 8023eaa:	61fb      	str	r3, [r7, #28]
  while (rect_wc > 0) {
 8023eac:	69fb      	ldr	r3, [r7, #28]
 8023eae:	2b00      	cmp	r3, #0
 8023eb0:	d1e7      	bne.n	8023e82 <ili9341_fill_rect+0xc6>
  }

  ili9341_spi_tft_release();
 8023eb2:	f7ff fae1 	bl	8023478 <ili9341_spi_tft_release>
 8023eb6:	e000      	b.n	8023eba <ili9341_fill_rect+0xfe>
    { return; }
 8023eb8:	bf00      	nop
  //}
  //gos_mutexUnlock(&ili9341Mutex);
}
 8023eba:	3724      	adds	r7, #36	@ 0x24
 8023ebc:	46bd      	mov	sp, r7
 8023ebe:	bd90      	pop	{r4, r7, pc}
 8023ec0:	200068e4 	.word	0x200068e4

08023ec4 <ili9341_fill_screen>:
  ili9341_draw_line(color, x, y - r, x, (y - r) + (2 * r) + 1);
  ili9341_fill_quarter_circle(color, x, y, r, 3, 0);
}

void ili9341_fill_screen(ili9341_color_t color)
{
 8023ec4:	b580      	push	{r7, lr}
 8023ec6:	b084      	sub	sp, #16
 8023ec8:	af02      	add	r7, sp, #8
 8023eca:	4603      	mov	r3, r0
 8023ecc:	80fb      	strh	r3, [r7, #6]
  ili9341_fill_rect(color,
 8023ece:	4b07      	ldr	r3, [pc, #28]	@ (8023eec <ili9341_fill_screen+0x28>)
 8023ed0:	885a      	ldrh	r2, [r3, #2]
 8023ed2:	4b06      	ldr	r3, [pc, #24]	@ (8023eec <ili9341_fill_screen+0x28>)
 8023ed4:	889b      	ldrh	r3, [r3, #4]
 8023ed6:	88f8      	ldrh	r0, [r7, #6]
 8023ed8:	9300      	str	r3, [sp, #0]
 8023eda:	4613      	mov	r3, r2
 8023edc:	2200      	movs	r2, #0
 8023ede:	2100      	movs	r1, #0
 8023ee0:	f7ff ff6c 	bl	8023dbc <ili9341_fill_rect>
      0, 0, lcd.screen_size.width, lcd.screen_size.height);
}
 8023ee4:	bf00      	nop
 8023ee6:	3708      	adds	r7, #8
 8023ee8:	46bd      	mov	sp, r7
 8023eea:	bd80      	pop	{r7, pc}
 8023eec:	200068a0 	.word	0x200068a0

08023ef0 <ili9341_draw_char>:
  ili9341_spi_tft_release();
  ili9341_transmit_wait();
}

void ili9341_draw_char(ili9341_text_attr_t attr, char ch)
{
 8023ef0:	b590      	push	{r4, r7, lr}
 8023ef2:	b091      	sub	sp, #68	@ 0x44
 8023ef4:	af00      	add	r7, sp, #0
 8023ef6:	1d3c      	adds	r4, r7, #4
 8023ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8023efc:	70fb      	strb	r3, [r7, #3]
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 8023efe:	89bb      	ldrh	r3, [r7, #12]
 8023f00:	b21b      	sxth	r3, r3
 8023f02:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 8023f04:	89fb      	ldrh	r3, [r7, #14]
 8023f06:	b21b      	sxth	r3, r3
 8023f08:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 8023f0a:	687b      	ldr	r3, [r7, #4]
 8023f0c:	781b      	ldrb	r3, [r3, #0]
 8023f0e:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	785b      	ldrb	r3, [r3, #1]
 8023f14:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(&_x, &_y, &_w, &_h)))
 8023f16:	f107 0314 	add.w	r3, r7, #20
 8023f1a:	f107 0216 	add.w	r2, r7, #22
 8023f1e:	f107 0118 	add.w	r1, r7, #24
 8023f22:	f107 001a 	add.w	r0, r7, #26
 8023f26:	f000 f8bb 	bl	80240a0 <ili9341_clip_rect>
 8023f2a:	4603      	mov	r3, r0
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	f000 80b0 	beq.w	8024092 <ili9341_draw_char+0x1a2>
    { return; }

  //if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS){

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	781b      	ldrb	r3, [r3, #0]
 8023f36:	461a      	mov	r2, r3
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	785b      	ldrb	r3, [r3, #1]
 8023f3c:	fb02 f303 	mul.w	r3, r2, r3
 8023f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t rect_wc    = num_pixels;
 8023f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023f44:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8023f46:	1d3b      	adds	r3, r7, #4
 8023f48:	3304      	adds	r3, #4
 8023f4a:	3301      	adds	r3, #1
 8023f4c:	781b      	ldrb	r3, [r3, #0]
 8023f4e:	b21a      	sxth	r2, r3
 8023f50:	1d3b      	adds	r3, r7, #4
 8023f52:	3304      	adds	r3, #4
 8023f54:	781b      	ldrb	r3, [r3, #0]
 8023f56:	021b      	lsls	r3, r3, #8
 8023f58:	b21b      	sxth	r3, r3
 8023f5a:	4313      	orrs	r3, r2
 8023f5c:	b21b      	sxth	r3, r3
 8023f5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 8023f60:	1d3b      	adds	r3, r7, #4
 8023f62:	3306      	adds	r3, #6
 8023f64:	3301      	adds	r3, #1
 8023f66:	781b      	ldrb	r3, [r3, #0]
 8023f68:	b21a      	sxth	r2, r3
 8023f6a:	1d3b      	adds	r3, r7, #4
 8023f6c:	3306      	adds	r3, #6
 8023f6e:	781b      	ldrb	r3, [r3, #0]
 8023f70:	021b      	lsls	r3, r3, #8
 8023f72:	b21b      	sxth	r3, r3
 8023f74:	4313      	orrs	r3, r2
 8023f76:	b21b      	sxth	r3, r3
 8023f78:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint32_t block_wc = rect_wc;
 8023f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8023f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023f84:	d902      	bls.n	8023f8c <ili9341_draw_char+0x9c>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8023f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023f8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 8023f8c:	78fb      	ldrb	r3, [r7, #3]
 8023f8e:	4618      	mov	r0, r3
 8023f90:	f7ff fce2 	bl	8023958 <glyph_index>
 8023f94:	4603      	mov	r3, r0
 8023f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8023f9a:	2300      	movs	r3, #0
 8023f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8023f9e:	e03d      	b.n	802401c <ili9341_draw_char+0x12c>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8023fa0:	687a      	ldr	r2, [r7, #4]
 8023fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8023fa6:	6879      	ldr	r1, [r7, #4]
 8023fa8:	7849      	ldrb	r1, [r1, #1]
 8023faa:	fb01 f303 	mul.w	r3, r1, r3
 8023fae:	4619      	mov	r1, r3
 8023fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fb2:	440b      	add	r3, r1
 8023fb4:	005b      	lsls	r3, r3, #1
 8023fb6:	4413      	add	r3, r2
 8023fb8:	885b      	ldrh	r3, [r3, #2]
 8023fba:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8023fbc:	2300      	movs	r3, #0
 8023fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8023fc0:	e023      	b.n	802400a <ili9341_draw_char+0x11a>
      if ((gl << xi) & 0x8000)
 8023fc2:	69fa      	ldr	r2, [r7, #28]
 8023fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8023fca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8023fce:	2b00      	cmp	r3, #0
 8023fd0:	d00c      	beq.n	8023fec <ili9341_draw_char+0xfc>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8023fd2:	687b      	ldr	r3, [r7, #4]
 8023fd4:	781b      	ldrb	r3, [r3, #0]
 8023fd6:	461a      	mov	r2, r3
 8023fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fda:	fb03 f202 	mul.w	r2, r3, r2
 8023fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fe0:	4413      	add	r3, r2
 8023fe2:	492e      	ldr	r1, [pc, #184]	@ (802409c <ili9341_draw_char+0x1ac>)
 8023fe4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8023fe6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8023fea:	e00b      	b.n	8024004 <ili9341_draw_char+0x114>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	781b      	ldrb	r3, [r3, #0]
 8023ff0:	461a      	mov	r2, r3
 8023ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023ff4:	fb03 f202 	mul.w	r2, r3, r2
 8023ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ffa:	4413      	add	r3, r2
 8023ffc:	4927      	ldr	r1, [pc, #156]	@ (802409c <ili9341_draw_char+0x1ac>)
 8023ffe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8024000:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8024004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024006:	3301      	adds	r3, #1
 8024008:	633b      	str	r3, [r7, #48]	@ 0x30
 802400a:	687b      	ldr	r3, [r7, #4]
 802400c:	781b      	ldrb	r3, [r3, #0]
 802400e:	461a      	mov	r2, r3
 8024010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024012:	4293      	cmp	r3, r2
 8024014:	d3d5      	bcc.n	8023fc2 <ili9341_draw_char+0xd2>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8024016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024018:	3301      	adds	r3, #1
 802401a:	637b      	str	r3, [r7, #52]	@ 0x34
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	785b      	ldrb	r3, [r3, #1]
 8024020:	461a      	mov	r2, r3
 8024022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024024:	4293      	cmp	r3, r2
 8024026:	d3bb      	bcc.n	8023fa0 <ili9341_draw_char+0xb0>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(
 8024028:	89b8      	ldrh	r0, [r7, #12]
 802402a:	89f9      	ldrh	r1, [r7, #14]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 802402c:	89bb      	ldrh	r3, [r7, #12]
 802402e:	687a      	ldr	r2, [r7, #4]
 8024030:	7812      	ldrb	r2, [r2, #0]
 8024032:	4413      	add	r3, r2
 8024034:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(
 8024036:	3b01      	subs	r3, #1
 8024038:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 802403a:	89fb      	ldrh	r3, [r7, #14]
 802403c:	687a      	ldr	r2, [r7, #4]
 802403e:	7852      	ldrb	r2, [r2, #1]
 8024040:	4413      	add	r3, r2
 8024042:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(
 8024044:	3b01      	subs	r3, #1
 8024046:	b29b      	uxth	r3, r3
 8024048:	4622      	mov	r2, r4
 802404a:	f7ff fc9b 	bl	8023984 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select();
 802404e:	f7ff fa0b 	bl	8023468 <ili9341_spi_tft_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 8024052:	2101      	movs	r1, #1
 8024054:	2015      	movs	r0, #21
 8024056:	f00a febf 	bl	802edd8 <drv_gpioWritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 802405a:	e014      	b.n	8024086 <ili9341_draw_char+0x196>
    curr_wc = rect_wc;
 802405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (curr_wc > block_wc)
 8024060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024064:	429a      	cmp	r2, r3
 8024066:	d901      	bls.n	802406c <ili9341_draw_char+0x17c>
      { curr_wc = block_wc; }
 8024068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ili9341_transmit_color(curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 802406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802406e:	b29b      	uxth	r3, r3
 8024070:	005b      	lsls	r3, r3, #1
 8024072:	b29b      	uxth	r3, r3
 8024074:	2201      	movs	r2, #1
 8024076:	4909      	ldr	r1, [pc, #36]	@ (802409c <ili9341_draw_char+0x1ac>)
 8024078:	4618      	mov	r0, r3
 802407a:	f7ff fce1 	bl	8023a40 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 802407e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024082:	1ad3      	subs	r3, r2, r3
 8024084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while (rect_wc > 0) {
 8024086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024088:	2b00      	cmp	r3, #0
 802408a:	d1e7      	bne.n	802405c <ili9341_draw_char+0x16c>
  }

  ili9341_spi_tft_release();
 802408c:	f7ff f9f4 	bl	8023478 <ili9341_spi_tft_release>
 8024090:	e000      	b.n	8024094 <ili9341_draw_char+0x1a4>
    { return; }
 8024092:	bf00      	nop
  //}
  //gos_mutexUnlock(&ili9341Mutex);
}
 8024094:	3744      	adds	r7, #68	@ 0x44
 8024096:	46bd      	mov	sp, r7
 8024098:	bd90      	pop	{r4, r7, pc}
 802409a:	bf00      	nop
 802409c:	200068e4 	.word	0x200068e4

080240a0 <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 80240a0:	b480      	push	{r7}
 80240a2:	b085      	sub	sp, #20
 80240a4:	af00      	add	r7, sp, #0
 80240a6:	60f8      	str	r0, [r7, #12]
 80240a8:	60b9      	str	r1, [r7, #8]
 80240aa:	607a      	str	r2, [r7, #4]
 80240ac:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 80240ae:	68fb      	ldr	r3, [r7, #12]
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	d002      	beq.n	80240ba <ili9341_clip_rect+0x1a>
 80240b4:	68bb      	ldr	r3, [r7, #8]
 80240b6:	2b00      	cmp	r3, #0
 80240b8:	d101      	bne.n	80240be <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 80240ba:	2300      	movs	r3, #0
 80240bc:	e089      	b.n	80241d2 <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd.screen_size.width) || (*y >= lcd.screen_size.height))
 80240be:	68fb      	ldr	r3, [r7, #12]
 80240c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80240c4:	461a      	mov	r2, r3
 80240c6:	4b46      	ldr	r3, [pc, #280]	@ (80241e0 <ili9341_clip_rect+0x140>)
 80240c8:	885b      	ldrh	r3, [r3, #2]
 80240ca:	429a      	cmp	r2, r3
 80240cc:	da07      	bge.n	80240de <ili9341_clip_rect+0x3e>
 80240ce:	68bb      	ldr	r3, [r7, #8]
 80240d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80240d4:	461a      	mov	r2, r3
 80240d6:	4b42      	ldr	r3, [pc, #264]	@ (80241e0 <ili9341_clip_rect+0x140>)
 80240d8:	889b      	ldrh	r3, [r3, #4]
 80240da:	429a      	cmp	r2, r3
 80240dc:	db01      	blt.n	80240e2 <ili9341_clip_rect+0x42>
    { return ibFalse; }
 80240de:	2300      	movs	r3, #0
 80240e0:	e077      	b.n	80241d2 <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	2b00      	cmp	r3, #0
 80240e6:	d00c      	beq.n	8024102 <ili9341_clip_rect+0x62>
 80240e8:	683b      	ldr	r3, [r7, #0]
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d009      	beq.n	8024102 <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	881b      	ldrh	r3, [r3, #0]
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	d003      	beq.n	80240fe <ili9341_clip_rect+0x5e>
 80240f6:	683b      	ldr	r3, [r7, #0]
 80240f8:	881b      	ldrh	r3, [r3, #0]
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	d101      	bne.n	8024102 <ili9341_clip_rect+0x62>
      { return ibFalse; }
 80240fe:	2300      	movs	r3, #0
 8024100:	e067      	b.n	80241d2 <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8024102:	68fb      	ldr	r3, [r7, #12]
 8024104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024108:	2b00      	cmp	r3, #0
 802410a:	da0f      	bge.n	802412c <ili9341_clip_rect+0x8c>
    if (NULL != w)
 802410c:	687b      	ldr	r3, [r7, #4]
 802410e:	2b00      	cmp	r3, #0
 8024110:	d009      	beq.n	8024126 <ili9341_clip_rect+0x86>
      { *w -= *x; }
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	881a      	ldrh	r2, [r3, #0]
 8024116:	68fb      	ldr	r3, [r7, #12]
 8024118:	f9b3 3000 	ldrsh.w	r3, [r3]
 802411c:	b29b      	uxth	r3, r3
 802411e:	1ad3      	subs	r3, r2, r3
 8024120:	b29a      	uxth	r2, r3
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	801a      	strh	r2, [r3, #0]
    *x = 0;
 8024126:	68fb      	ldr	r3, [r7, #12]
 8024128:	2200      	movs	r2, #0
 802412a:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 802412c:	68bb      	ldr	r3, [r7, #8]
 802412e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024132:	2b00      	cmp	r3, #0
 8024134:	da0f      	bge.n	8024156 <ili9341_clip_rect+0xb6>
    if (NULL != h)
 8024136:	683b      	ldr	r3, [r7, #0]
 8024138:	2b00      	cmp	r3, #0
 802413a:	d009      	beq.n	8024150 <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 802413c:	683b      	ldr	r3, [r7, #0]
 802413e:	881a      	ldrh	r2, [r3, #0]
 8024140:	68bb      	ldr	r3, [r7, #8]
 8024142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024146:	b29b      	uxth	r3, r3
 8024148:	1ad3      	subs	r3, r2, r3
 802414a:	b29a      	uxth	r2, r3
 802414c:	683b      	ldr	r3, [r7, #0]
 802414e:	801a      	strh	r2, [r3, #0]
    *y = 0;
 8024150:	68bb      	ldr	r3, [r7, #8]
 8024152:	2200      	movs	r2, #0
 8024154:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	2b00      	cmp	r3, #0
 802415a:	d039      	beq.n	80241d0 <ili9341_clip_rect+0x130>
 802415c:	683b      	ldr	r3, [r7, #0]
 802415e:	2b00      	cmp	r3, #0
 8024160:	d036      	beq.n	80241d0 <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd.screen_size.width)
 8024162:	68fb      	ldr	r3, [r7, #12]
 8024164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024168:	461a      	mov	r2, r3
 802416a:	687b      	ldr	r3, [r7, #4]
 802416c:	881b      	ldrh	r3, [r3, #0]
 802416e:	4413      	add	r3, r2
 8024170:	4a1b      	ldr	r2, [pc, #108]	@ (80241e0 <ili9341_clip_rect+0x140>)
 8024172:	8852      	ldrh	r2, [r2, #2]
 8024174:	4293      	cmp	r3, r2
 8024176:	dd09      	ble.n	802418c <ili9341_clip_rect+0xec>
      { *w = lcd.screen_size.width - *x; }
 8024178:	4b19      	ldr	r3, [pc, #100]	@ (80241e0 <ili9341_clip_rect+0x140>)
 802417a:	885a      	ldrh	r2, [r3, #2]
 802417c:	68fb      	ldr	r3, [r7, #12]
 802417e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024182:	b29b      	uxth	r3, r3
 8024184:	1ad3      	subs	r3, r2, r3
 8024186:	b29a      	uxth	r2, r3
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd.screen_size.height)
 802418c:	68bb      	ldr	r3, [r7, #8]
 802418e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024192:	461a      	mov	r2, r3
 8024194:	683b      	ldr	r3, [r7, #0]
 8024196:	881b      	ldrh	r3, [r3, #0]
 8024198:	4413      	add	r3, r2
 802419a:	4a11      	ldr	r2, [pc, #68]	@ (80241e0 <ili9341_clip_rect+0x140>)
 802419c:	8892      	ldrh	r2, [r2, #4]
 802419e:	4293      	cmp	r3, r2
 80241a0:	dd09      	ble.n	80241b6 <ili9341_clip_rect+0x116>
      { *h = lcd.screen_size.height - *y; }
 80241a2:	4b0f      	ldr	r3, [pc, #60]	@ (80241e0 <ili9341_clip_rect+0x140>)
 80241a4:	889a      	ldrh	r2, [r3, #4]
 80241a6:	68bb      	ldr	r3, [r7, #8]
 80241a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80241ac:	b29b      	uxth	r3, r3
 80241ae:	1ad3      	subs	r3, r2, r3
 80241b0:	b29a      	uxth	r2, r3
 80241b2:	683b      	ldr	r3, [r7, #0]
 80241b4:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 80241b6:	687b      	ldr	r3, [r7, #4]
 80241b8:	881b      	ldrh	r3, [r3, #0]
 80241ba:	2b00      	cmp	r3, #0
 80241bc:	d005      	beq.n	80241ca <ili9341_clip_rect+0x12a>
 80241be:	683b      	ldr	r3, [r7, #0]
 80241c0:	881b      	ldrh	r3, [r3, #0]
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	d001      	beq.n	80241ca <ili9341_clip_rect+0x12a>
 80241c6:	2301      	movs	r3, #1
 80241c8:	e000      	b.n	80241cc <ili9341_clip_rect+0x12c>
 80241ca:	2300      	movs	r3, #0
 80241cc:	b2db      	uxtb	r3, r3
 80241ce:	e000      	b.n	80241d2 <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 80241d0:	2301      	movs	r3, #1
}
 80241d2:	4618      	mov	r0, r3
 80241d4:	3714      	adds	r7, #20
 80241d6:	46bd      	mov	sp, r7
 80241d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241dc:	4770      	bx	lr
 80241de:	bf00      	nop
 80241e0:	200068a0 	.word	0x200068a0

080241e4 <lcd_driver_init>:

GOS_STATIC void_t clear (void_t);


gos_result_t lcd_driver_init (void_t)
{
 80241e4:	b580      	push	{r7, lr}
 80241e6:	b082      	sub	sp, #8
 80241e8:	af00      	add	r7, sp, #0
	gos_result_t lcdDriverInitResult = GOS_SUCCESS;
 80241ea:	2355      	movs	r3, #85	@ 0x55
 80241ec:	71fb      	strb	r3, [r7, #7]
	command(LCD_ENTRYMODESET | _displaymode);

	home();
#else
	//gos_kernelDelayMs(20);
	gos_taskSleep(20);
 80241ee:	2014      	movs	r0, #20
 80241f0:	f011 fdf6 	bl	8035de0 <gos_taskSleep>
	lcd_driver_send_cmd(0x3);
 80241f4:	2003      	movs	r0, #3
 80241f6:	f000 f8a9 	bl	802434c <lcd_driver_send_cmd>
	//gos_kernelDelayMs(5);
	gos_taskSleep(5);
 80241fa:	2005      	movs	r0, #5
 80241fc:	f011 fdf0 	bl	8035de0 <gos_taskSleep>
	lcd_driver_send_cmd(0x3);
 8024200:	2003      	movs	r0, #3
 8024202:	f000 f8a3 	bl	802434c <lcd_driver_send_cmd>
	//gos_kernelDelayMs(1);
	gos_taskSleep(1);
 8024206:	2001      	movs	r0, #1
 8024208:	f011 fdea 	bl	8035de0 <gos_taskSleep>
	lcd_driver_send_cmd(0x3);
 802420c:	2003      	movs	r0, #3
 802420e:	f000 f89d 	bl	802434c <lcd_driver_send_cmd>
	//gos_kernelDelayMs(1);
	gos_taskSleep(1);
 8024212:	2001      	movs	r0, #1
 8024214:	f011 fde4 	bl	8035de0 <gos_taskSleep>
	lcd_driver_send_cmd(0x2);
 8024218:	2002      	movs	r0, #2
 802421a:	f000 f897 	bl	802434c <lcd_driver_send_cmd>
	//gos_kernelDelayMs(1);
	gos_taskSleep(1);
 802421e:	2001      	movs	r0, #1
 8024220:	f011 fdde 	bl	8035de0 <gos_taskSleep>

	// set # lines, font size, etc.
	lcd_driver_send_cmd(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS | LCD_2LINE);
 8024224:	2028      	movs	r0, #40	@ 0x28
 8024226:	f000 f891 	bl	802434c <lcd_driver_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 802422a:	4b0d      	ldr	r3, [pc, #52]	@ (8024260 <lcd_driver_init+0x7c>)
 802422c:	2204      	movs	r2, #4
 802422e:	701a      	strb	r2, [r3, #0]
	lcd_driver_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 8024230:	4b0b      	ldr	r3, [pc, #44]	@ (8024260 <lcd_driver_init+0x7c>)
 8024232:	781b      	ldrb	r3, [r3, #0]
 8024234:	f043 0308 	orr.w	r3, r3, #8
 8024238:	b2db      	uxtb	r3, r3
 802423a:	4618      	mov	r0, r3
 802423c:	f000 f886 	bl	802434c <lcd_driver_send_cmd>

	// clear it off
	clear();
 8024240:	f000 f8f3 	bl	802442a <clear>

	// Initialize to default text direction (for roman languages).
	lcd_driver_send_cmd(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8024244:	2006      	movs	r0, #6
 8024246:	f000 f881 	bl	802434c <lcd_driver_send_cmd>

	lcd_driver_send_cmd(LCD_RETURNHOME);  // set cursor position to zero
 802424a:	2002      	movs	r0, #2
 802424c:	f000 f87e 	bl	802434c <lcd_driver_send_cmd>
	//gos_kernelDelayUs(2000);
	// TODO
	gos_taskSleep(2);
 8024250:	2002      	movs	r0, #2
 8024252:	f011 fdc5 	bl	8035de0 <gos_taskSleep>
#endif

	return lcdDriverInitResult;
 8024256:	79fb      	ldrb	r3, [r7, #7]
}
 8024258:	4618      	mov	r0, r3
 802425a:	3708      	adds	r7, #8
 802425c:	46bd      	mov	sp, r7
 802425e:	bd80      	pop	{r7, pc}
 8024260:	200070e4 	.word	0x200070e4

08024264 <lcd_driver_write_string>:

GOS_STATIC bool_t writeStringReady = GOS_TRUE;

GOS_INLINE gos_result_t lcd_driver_write_string (u8_t line, const char_t* str)
{
 8024264:	b580      	push	{r7, lr}
 8024266:	b084      	sub	sp, #16
 8024268:	af00      	add	r7, sp, #0
 802426a:	4603      	mov	r3, r0
 802426c:	6039      	str	r1, [r7, #0]
 802426e:	71fb      	strb	r3, [r7, #7]
	gos_result_t lcdDriverWriteStringResult = GOS_ERROR;
 8024270:	23ae      	movs	r3, #174	@ 0xae
 8024272:	73fb      	strb	r3, [r7, #15]
	u8_t index = 0u;
 8024274:	2300      	movs	r3, #0
 8024276:	73bb      	strb	r3, [r7, #14]
	writeStringReady = GOS_FALSE;
#endif

	//if (gos_mutexLock(&lcdMutex, 500) == GOS_SUCCESS)
	{
		if (line < 2)
 8024278:	79fb      	ldrb	r3, [r7, #7]
 802427a:	2b01      	cmp	r3, #1
 802427c:	d854      	bhi.n	8024328 <lcd_driver_write_string+0xc4>
		{
			lcdDriverWriteStringResult = GOS_SUCCESS;
 802427e:	2355      	movs	r3, #85	@ 0x55
 8024280:	73fb      	strb	r3, [r7, #15]
 8024282:	79fb      	ldrb	r3, [r7, #7]
 8024284:	737b      	strb	r3, [r7, #13]
 8024286:	2300      	movs	r3, #0
 8024288:	733b      	strb	r3, [r7, #12]

GOS_STATIC bool_t setCursorReady = GOS_TRUE;

GOS_INLINE gos_result_t lcd_driver_set_cursor (u8_t row, u8_t col)
{
	gos_result_t lcdDriverSetCursorResult = GOS_SUCCESS;
 802428a:	2355      	movs	r3, #85	@ 0x55
 802428c:	72fb      	strb	r3, [r7, #11]
	u8_t maskData = (col) & 0x0F;
 802428e:	7b3b      	ldrb	r3, [r7, #12]
 8024290:	f003 030f 	and.w	r3, r3, #15
 8024294:	72bb      	strb	r3, [r7, #10]
	}

	setCursorReady = GOS_FALSE;
#endif

	switch (row)
 8024296:	7b7b      	ldrb	r3, [r7, #13]
 8024298:	2b00      	cmp	r3, #0
 802429a:	d002      	beq.n	80242a2 <lcd_driver_write_string+0x3e>
 802429c:	2b01      	cmp	r3, #1
 802429e:	d00b      	beq.n	80242b8 <lcd_driver_write_string+0x54>
			lcdDriverSetCursorResult = lcd_driver_send_cmd(maskData);
			break;
		}
		default:
		{
			break;
 80242a0:	e015      	b.n	80242ce <lcd_driver_write_string+0x6a>
			maskData |= 0x80;
 80242a2:	7abb      	ldrb	r3, [r7, #10]
 80242a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80242a8:	72bb      	strb	r3, [r7, #10]
			lcdDriverSetCursorResult = lcd_driver_send_cmd(maskData);
 80242aa:	7abb      	ldrb	r3, [r7, #10]
 80242ac:	4618      	mov	r0, r3
 80242ae:	f000 f84d 	bl	802434c <lcd_driver_send_cmd>
 80242b2:	4603      	mov	r3, r0
 80242b4:	72fb      	strb	r3, [r7, #11]
			break;
 80242b6:	e00a      	b.n	80242ce <lcd_driver_write_string+0x6a>
			maskData |= 0xC0;
 80242b8:	7abb      	ldrb	r3, [r7, #10]
 80242ba:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80242be:	72bb      	strb	r3, [r7, #10]
			lcdDriverSetCursorResult = lcd_driver_send_cmd(maskData);
 80242c0:	7abb      	ldrb	r3, [r7, #10]
 80242c2:	4618      	mov	r0, r3
 80242c4:	f000 f842 	bl	802434c <lcd_driver_send_cmd>
 80242c8:	4603      	mov	r3, r0
 80242ca:	72fb      	strb	r3, [r7, #11]
			break;
 80242cc:	bf00      	nop
		}
	}

	//gos_taskSleep(1);

	actualRow = row;
 80242ce:	4a1a      	ldr	r2, [pc, #104]	@ (8024338 <lcd_driver_write_string+0xd4>)
 80242d0:	7b7b      	ldrb	r3, [r7, #13]
 80242d2:	7013      	strb	r3, [r2, #0]

	if (actualRow == 0)
 80242d4:	4b18      	ldr	r3, [pc, #96]	@ (8024338 <lcd_driver_write_string+0xd4>)
 80242d6:	781b      	ldrb	r3, [r3, #0]
 80242d8:	2b00      	cmp	r3, #0
 80242da:	d103      	bne.n	80242e4 <lcd_driver_write_string+0x80>
	{
		actualCol1 = col;
 80242dc:	4a17      	ldr	r2, [pc, #92]	@ (802433c <lcd_driver_write_string+0xd8>)
 80242de:	7b3b      	ldrb	r3, [r7, #12]
 80242e0:	7013      	strb	r3, [r2, #0]
 80242e2:	e002      	b.n	80242ea <lcd_driver_write_string+0x86>
	}
	else
	{
		actualCol2 = col;
 80242e4:	4a16      	ldr	r2, [pc, #88]	@ (8024340 <lcd_driver_write_string+0xdc>)
 80242e6:	7b3b      	ldrb	r3, [r7, #12]
 80242e8:	7013      	strb	r3, [r2, #0]
	}

	setCursorReady = GOS_TRUE;
 80242ea:	4b16      	ldr	r3, [pc, #88]	@ (8024344 <lcd_driver_write_string+0xe0>)
 80242ec:	2236      	movs	r2, #54	@ 0x36
 80242ee:	701a      	strb	r2, [r3, #0]
			for (index = 0u; index < 16u && str[index]; index++)
 80242f0:	2300      	movs	r3, #0
 80242f2:	73bb      	strb	r3, [r7, #14]
 80242f4:	e00f      	b.n	8024316 <lcd_driver_write_string+0xb2>
				if (lcd_driver_send_data((u8_t)str[index]) != GOS_SUCCESS)
 80242f6:	7bbb      	ldrb	r3, [r7, #14]
 80242f8:	683a      	ldr	r2, [r7, #0]
 80242fa:	4413      	add	r3, r2
 80242fc:	781b      	ldrb	r3, [r3, #0]
 80242fe:	4618      	mov	r0, r3
 8024300:	f000 f85a 	bl	80243b8 <lcd_driver_send_data>
 8024304:	4603      	mov	r3, r0
 8024306:	2b55      	cmp	r3, #85	@ 0x55
 8024308:	d002      	beq.n	8024310 <lcd_driver_write_string+0xac>
					lcdDriverWriteStringResult = GOS_ERROR;
 802430a:	23ae      	movs	r3, #174	@ 0xae
 802430c:	73fb      	strb	r3, [r7, #15]
					break;
 802430e:	e00b      	b.n	8024328 <lcd_driver_write_string+0xc4>
			for (index = 0u; index < 16u && str[index]; index++)
 8024310:	7bbb      	ldrb	r3, [r7, #14]
 8024312:	3301      	adds	r3, #1
 8024314:	73bb      	strb	r3, [r7, #14]
 8024316:	7bbb      	ldrb	r3, [r7, #14]
 8024318:	2b0f      	cmp	r3, #15
 802431a:	d805      	bhi.n	8024328 <lcd_driver_write_string+0xc4>
 802431c:	7bbb      	ldrb	r3, [r7, #14]
 802431e:	683a      	ldr	r2, [r7, #0]
 8024320:	4413      	add	r3, r2
 8024322:	781b      	ldrb	r3, [r3, #0]
 8024324:	2b00      	cmp	r3, #0
 8024326:	d1e6      	bne.n	80242f6 <lcd_driver_write_string+0x92>
	writeStringReady = GOS_TRUE;
 8024328:	4b07      	ldr	r3, [pc, #28]	@ (8024348 <lcd_driver_write_string+0xe4>)
 802432a:	2236      	movs	r2, #54	@ 0x36
 802432c:	701a      	strb	r2, [r3, #0]
	return lcdDriverWriteStringResult;
 802432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024330:	4618      	mov	r0, r3
 8024332:	3710      	adds	r7, #16
 8024334:	46bd      	mov	sp, r7
 8024336:	bd80      	pop	{r7, pc}
 8024338:	200070e5 	.word	0x200070e5
 802433c:	200070e6 	.word	0x200070e6
 8024340:	200070e7 	.word	0x200070e7
 8024344:	200014dd 	.word	0x200014dd
 8024348:	200014dc 	.word	0x200014dc

0802434c <lcd_driver_send_cmd>:

	return lcdDriverClearDisplayResult;
}

GOS_STATIC gos_result_t lcd_driver_send_cmd (u8_t cmd)
{
 802434c:	b580      	push	{r7, lr}
 802434e:	b086      	sub	sp, #24
 8024350:	af02      	add	r7, sp, #8
 8024352:	4603      	mov	r3, r0
 8024354:	71fb      	strb	r3, [r7, #7]
	gos_result_t lcdDriverSendCmdResult = GOS_ERROR;
 8024356:	23ae      	movs	r3, #174	@ 0xae
 8024358:	73fb      	strb	r3, [r7, #15]
	u8_t data_u, data_l;
	u8_t data_t [4];

	data_u = ( cmd & 0xF0 );
 802435a:	79fb      	ldrb	r3, [r7, #7]
 802435c:	f023 030f 	bic.w	r3, r3, #15
 8024360:	73bb      	strb	r3, [r7, #14]
	data_l = ( ( cmd << 4 ) & 0xF0 );
 8024362:	79fb      	ldrb	r3, [r7, #7]
 8024364:	011b      	lsls	r3, r3, #4
 8024366:	737b      	strb	r3, [r7, #13]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8024368:	7bbb      	ldrb	r3, [r7, #14]
 802436a:	f043 030c 	orr.w	r3, r3, #12
 802436e:	b2db      	uxtb	r3, r3
 8024370:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8024372:	7bbb      	ldrb	r3, [r7, #14]
 8024374:	f043 0308 	orr.w	r3, r3, #8
 8024378:	b2db      	uxtb	r3, r3
 802437a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 802437c:	7b7b      	ldrb	r3, [r7, #13]
 802437e:	f043 030c 	orr.w	r3, r3, #12
 8024382:	b2db      	uxtb	r3, r3
 8024384:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8024386:	7b7b      	ldrb	r3, [r7, #13]
 8024388:	f043 0308 	orr.w	r3, r3, #8
 802438c:	b2db      	uxtb	r3, r3
 802438e:	72fb      	strb	r3, [r7, #11]

	//lcdDriverSendCmdResult = i2c_driver_transmit(LCD_ADDRESS, data_t, 4);
	lcdDriverSendCmdResult = drv_i2cTransmitIT(DRV_I2C_INSTANCE_1, LCD_ADDRESS, data_t, 4, GOS_MUTEX_ENDLESS_TMO, 1000);
 8024390:	f107 0208 	add.w	r2, r7, #8
 8024394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024398:	9301      	str	r3, [sp, #4]
 802439a:	f04f 33ff 	mov.w	r3, #4294967295
 802439e:	9300      	str	r3, [sp, #0]
 80243a0:	2304      	movs	r3, #4
 80243a2:	2144      	movs	r1, #68	@ 0x44
 80243a4:	2000      	movs	r0, #0
 80243a6:	f00b f877 	bl	802f498 <drv_i2cTransmitIT>
 80243aa:	4603      	mov	r3, r0
 80243ac:	73fb      	strb	r3, [r7, #15]

	//gos_taskSleep(1);

	return lcdDriverSendCmdResult;
 80243ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80243b0:	4618      	mov	r0, r3
 80243b2:	3710      	adds	r7, #16
 80243b4:	46bd      	mov	sp, r7
 80243b6:	bd80      	pop	{r7, pc}

080243b8 <lcd_driver_send_data>:

GOS_STATIC gos_result_t lcd_driver_send_data (u8_t data)
{
 80243b8:	b580      	push	{r7, lr}
 80243ba:	b086      	sub	sp, #24
 80243bc:	af02      	add	r7, sp, #8
 80243be:	4603      	mov	r3, r0
 80243c0:	71fb      	strb	r3, [r7, #7]
	gos_result_t lcdDriverSendDataResult = GOS_ERROR;
 80243c2:	23ae      	movs	r3, #174	@ 0xae
 80243c4:	73fb      	strb	r3, [r7, #15]
	u8_t data_u, data_l;
	u8_t data_t [4];

	data_u = ( data & 0xF0 );
 80243c6:	79fb      	ldrb	r3, [r7, #7]
 80243c8:	f023 030f 	bic.w	r3, r3, #15
 80243cc:	73bb      	strb	r3, [r7, #14]
	data_l = ( ( data << 4 ) & 0xF0 );
 80243ce:	79fb      	ldrb	r3, [r7, #7]
 80243d0:	011b      	lsls	r3, r3, #4
 80243d2:	737b      	strb	r3, [r7, #13]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80243d4:	7bbb      	ldrb	r3, [r7, #14]
 80243d6:	f043 030d 	orr.w	r3, r3, #13
 80243da:	b2db      	uxtb	r3, r3
 80243dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80243de:	7bbb      	ldrb	r3, [r7, #14]
 80243e0:	f043 0309 	orr.w	r3, r3, #9
 80243e4:	b2db      	uxtb	r3, r3
 80243e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80243e8:	7b7b      	ldrb	r3, [r7, #13]
 80243ea:	f043 030d 	orr.w	r3, r3, #13
 80243ee:	b2db      	uxtb	r3, r3
 80243f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80243f2:	7b7b      	ldrb	r3, [r7, #13]
 80243f4:	f043 0309 	orr.w	r3, r3, #9
 80243f8:	b2db      	uxtb	r3, r3
 80243fa:	72fb      	strb	r3, [r7, #11]

	//lcdDriverSendDataResult = i2c_driver_transmit(LCD_ADDRESS, data_t, 4);
	//lcdDriverSendDataResult = drv_i2cTransmitBlocking(DRV_I2C_INSTANCE_1, LCD_ADDRESS, data_t, 4, GOS_MUTEX_ENDLESS_TMO, 1000);
	// TODO: check
	lcdDriverSendDataResult = drv_i2cTransmitIT(DRV_I2C_INSTANCE_1, LCD_ADDRESS, data_t, 4, GOS_MUTEX_ENDLESS_TMO, 1000);
 80243fc:	f107 0208 	add.w	r2, r7, #8
 8024400:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024404:	9301      	str	r3, [sp, #4]
 8024406:	f04f 33ff 	mov.w	r3, #4294967295
 802440a:	9300      	str	r3, [sp, #0]
 802440c:	2304      	movs	r3, #4
 802440e:	2144      	movs	r1, #68	@ 0x44
 8024410:	2000      	movs	r0, #0
 8024412:	f00b f841 	bl	802f498 <drv_i2cTransmitIT>
 8024416:	4603      	mov	r3, r0
 8024418:	73fb      	strb	r3, [r7, #15]

	gos_taskSleep(1);
 802441a:	2001      	movs	r0, #1
 802441c:	f011 fce0 	bl	8035de0 <gos_taskSleep>

	return lcdDriverSendDataResult;
 8024420:	7bfb      	ldrb	r3, [r7, #15]
}
 8024422:	4618      	mov	r0, r3
 8024424:	3710      	adds	r7, #16
 8024426:	46bd      	mov	sp, r7
 8024428:	bd80      	pop	{r7, pc}

0802442a <clear>:

/********** high level commands, for the user! */
GOS_STATIC void_t clear (void_t)
{
 802442a:	b580      	push	{r7, lr}
 802442c:	af00      	add	r7, sp, #0
	lcd_driver_send_cmd(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 802442e:	2001      	movs	r0, #1
 8024430:	f7ff ff8c 	bl	802434c <lcd_driver_send_cmd>
	//gos_kernelDelayUs(2000);
	// TODO: check
	gos_taskSleep(2);
 8024434:	2002      	movs	r0, #2
 8024436:	f011 fcd3 	bl	8035de0 <gos_taskSleep>
}
 802443a:	bf00      	nop
 802443c:	bd80      	pop	{r7, pc}
	...

08024440 <rcc_driver_init>:
 */
#include "rcc_driver.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 8024440:	b580      	push	{r7, lr}
 8024442:	b0ac      	sub	sp, #176	@ 0xb0
 8024444:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8024446:	23ae      	movs	r3, #174	@ 0xae
 8024448:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802444c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8024450:	2234      	movs	r2, #52	@ 0x34
 8024452:	2100      	movs	r1, #0
 8024454:	4618      	mov	r0, r3
 8024456:	f017 fe35 	bl	803c0c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802445a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 802445e:	2200      	movs	r2, #0
 8024460:	601a      	str	r2, [r3, #0]
 8024462:	605a      	str	r2, [r3, #4]
 8024464:	609a      	str	r2, [r3, #8]
 8024466:	60da      	str	r2, [r3, #12]
 8024468:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 802446a:	2300      	movs	r3, #0
 802446c:	663b      	str	r3, [r7, #96]	@ 0x60
 802446e:	4ba3      	ldr	r3, [pc, #652]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024472:	4aa2      	ldr	r2, [pc, #648]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8024478:	6413      	str	r3, [r2, #64]	@ 0x40
 802447a:	4ba0      	ldr	r3, [pc, #640]	@ (80246fc <rcc_driver_init+0x2bc>)
 802447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024482:	663b      	str	r3, [r7, #96]	@ 0x60
 8024484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8024486:	2300      	movs	r3, #0
 8024488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802448a:	4b9d      	ldr	r3, [pc, #628]	@ (8024700 <rcc_driver_init+0x2c0>)
 802448c:	681b      	ldr	r3, [r3, #0]
 802448e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8024492:	4a9b      	ldr	r2, [pc, #620]	@ (8024700 <rcc_driver_init+0x2c0>)
 8024494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8024498:	6013      	str	r3, [r2, #0]
 802449a:	4b99      	ldr	r3, [pc, #612]	@ (8024700 <rcc_driver_init+0x2c0>)
 802449c:	681b      	ldr	r3, [r3, #0]
 802449e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80244a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80244a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80244a6:	2301      	movs	r3, #1
 80244a8:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80244aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80244ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80244b0:	2302      	movs	r3, #2
 80244b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80244b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80244ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_OscInitStruct.PLL.PLLM = 4;
 80244be:	2304      	movs	r3, #4
 80244c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_OscInitStruct.PLL.PLLN = 50;
 80244c4:	2332      	movs	r3, #50	@ 0x32
 80244c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80244ca:	2302      	movs	r3, #2
 80244cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80244d0:	2302      	movs	r3, #2
 80244d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLR = 2;
 80244d6:	2302      	movs	r3, #2
 80244d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 80244dc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80244e0:	4618      	mov	r0, r3
 80244e2:	f004 fe1f 	bl	8029124 <HAL_RCC_OscConfig>
 80244e6:	4603      	mov	r3, r0
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	d116      	bne.n	802451a <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80244ec:	230f      	movs	r3, #15
 80244ee:	667b      	str	r3, [r7, #100]	@ 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80244f0:	2302      	movs	r3, #2
 80244f2:	66bb      	str	r3, [r7, #104]	@ 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80244f4:	2300      	movs	r3, #0
 80244f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80244f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80244fc:	673b      	str	r3, [r7, #112]	@ 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80244fe:	2300      	movs	r3, #0
 8024500:	677b      	str	r3, [r7, #116]	@ 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 8024502:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8024506:	2101      	movs	r1, #1
 8024508:	4618      	mov	r0, r3
 802450a:	f004 fac1 	bl	8028a90 <HAL_RCC_ClockConfig>
 802450e:	4603      	mov	r3, r0
 8024510:	2b00      	cmp	r3, #0
 8024512:	d102      	bne.n	802451a <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 8024514:	2355      	movs	r3, #85	@ 0x55
 8024516:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 802451a:	2300      	movs	r3, #0
 802451c:	65bb      	str	r3, [r7, #88]	@ 0x58
 802451e:	4b77      	ldr	r3, [pc, #476]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024522:	4a76      	ldr	r2, [pc, #472]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024524:	f043 0301 	orr.w	r3, r3, #1
 8024528:	6313      	str	r3, [r2, #48]	@ 0x30
 802452a:	4b74      	ldr	r3, [pc, #464]	@ (80246fc <rcc_driver_init+0x2bc>)
 802452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802452e:	f003 0301 	and.w	r3, r3, #1
 8024532:	65bb      	str	r3, [r7, #88]	@ 0x58
 8024534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8024536:	2300      	movs	r3, #0
 8024538:	657b      	str	r3, [r7, #84]	@ 0x54
 802453a:	4b70      	ldr	r3, [pc, #448]	@ (80246fc <rcc_driver_init+0x2bc>)
 802453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802453e:	4a6f      	ldr	r2, [pc, #444]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024540:	f043 0302 	orr.w	r3, r3, #2
 8024544:	6313      	str	r3, [r2, #48]	@ 0x30
 8024546:	4b6d      	ldr	r3, [pc, #436]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802454a:	f003 0302 	and.w	r3, r3, #2
 802454e:	657b      	str	r3, [r7, #84]	@ 0x54
 8024550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8024552:	2300      	movs	r3, #0
 8024554:	653b      	str	r3, [r7, #80]	@ 0x50
 8024556:	4b69      	ldr	r3, [pc, #420]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802455a:	4a68      	ldr	r2, [pc, #416]	@ (80246fc <rcc_driver_init+0x2bc>)
 802455c:	f043 0304 	orr.w	r3, r3, #4
 8024560:	6313      	str	r3, [r2, #48]	@ 0x30
 8024562:	4b66      	ldr	r3, [pc, #408]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024566:	f003 0304 	and.w	r3, r3, #4
 802456a:	653b      	str	r3, [r7, #80]	@ 0x50
 802456c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 802456e:	2300      	movs	r3, #0
 8024570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024572:	4b62      	ldr	r3, [pc, #392]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024576:	4a61      	ldr	r2, [pc, #388]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024578:	f043 0308 	orr.w	r3, r3, #8
 802457c:	6313      	str	r3, [r2, #48]	@ 0x30
 802457e:	4b5f      	ldr	r3, [pc, #380]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024582:	f003 0308 	and.w	r3, r3, #8
 8024586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 802458a:	2300      	movs	r3, #0
 802458c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802458e:	4b5b      	ldr	r3, [pc, #364]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024592:	4a5a      	ldr	r2, [pc, #360]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024598:	6313      	str	r3, [r2, #48]	@ 0x30
 802459a:	4b58      	ldr	r3, [pc, #352]	@ (80246fc <rcc_driver_init+0x2bc>)
 802459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802459e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80245a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80245a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 80245a6:	2300      	movs	r3, #0
 80245a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80245aa:	4b54      	ldr	r3, [pc, #336]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80245ae:	4a53      	ldr	r2, [pc, #332]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80245b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80245b6:	4b51      	ldr	r3, [pc, #324]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80245ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80245be:	647b      	str	r3, [r7, #68]	@ 0x44
 80245c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 80245c2:	2300      	movs	r3, #0
 80245c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80245c6:	4b4d      	ldr	r3, [pc, #308]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80245ca:	4a4c      	ldr	r2, [pc, #304]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80245d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80245d2:	4b4a      	ldr	r3, [pc, #296]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80245d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80245da:	643b      	str	r3, [r7, #64]	@ 0x40
 80245dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 80245de:	2300      	movs	r3, #0
 80245e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80245e2:	4b46      	ldr	r3, [pc, #280]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80245e6:	4a45      	ldr	r2, [pc, #276]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80245ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80245ee:	4b43      	ldr	r3, [pc, #268]	@ (80246fc <rcc_driver_init+0x2bc>)
 80245f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80245f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80245f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80245f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80245fa:	2300      	movs	r3, #0
 80245fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80245fe:	4b3f      	ldr	r3, [pc, #252]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024602:	4a3e      	ldr	r2, [pc, #248]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8024608:	6413      	str	r3, [r2, #64]	@ 0x40
 802460a:	4b3c      	ldr	r3, [pc, #240]	@ (80246fc <rcc_driver_init+0x2bc>)
 802460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802460e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8024612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8024614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 8024616:	2300      	movs	r3, #0
 8024618:	637b      	str	r3, [r7, #52]	@ 0x34
 802461a:	4b38      	ldr	r3, [pc, #224]	@ (80246fc <rcc_driver_init+0x2bc>)
 802461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802461e:	4a37      	ldr	r2, [pc, #220]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8024624:	6413      	str	r3, [r2, #64]	@ 0x40
 8024626:	4b35      	ldr	r3, [pc, #212]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802462a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802462e:	637b      	str	r3, [r7, #52]	@ 0x34
 8024630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 8024632:	2300      	movs	r3, #0
 8024634:	633b      	str	r3, [r7, #48]	@ 0x30
 8024636:	4b31      	ldr	r3, [pc, #196]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802463a:	4a30      	ldr	r2, [pc, #192]	@ (80246fc <rcc_driver_init+0x2bc>)
 802463c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8024640:	6413      	str	r3, [r2, #64]	@ 0x40
 8024642:	4b2e      	ldr	r3, [pc, #184]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802464a:	633b      	str	r3, [r7, #48]	@ 0x30
 802464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 802464e:	2300      	movs	r3, #0
 8024650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024652:	4b2a      	ldr	r3, [pc, #168]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024656:	4a29      	ldr	r2, [pc, #164]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802465c:	6413      	str	r3, [r2, #64]	@ 0x40
 802465e:	4b27      	ldr	r3, [pc, #156]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8024666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 802466a:	2300      	movs	r3, #0
 802466c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802466e:	4b23      	ldr	r3, [pc, #140]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024672:	4a22      	ldr	r2, [pc, #136]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024674:	f043 0301 	orr.w	r3, r3, #1
 8024678:	6413      	str	r3, [r2, #64]	@ 0x40
 802467a:	4b20      	ldr	r3, [pc, #128]	@ (80246fc <rcc_driver_init+0x2bc>)
 802467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802467e:	f003 0301 	and.w	r3, r3, #1
 8024682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8024684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 8024686:	2300      	movs	r3, #0
 8024688:	627b      	str	r3, [r7, #36]	@ 0x24
 802468a:	4b1c      	ldr	r3, [pc, #112]	@ (80246fc <rcc_driver_init+0x2bc>)
 802468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802468e:	4a1b      	ldr	r2, [pc, #108]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024690:	f043 0302 	orr.w	r3, r3, #2
 8024694:	6413      	str	r3, [r2, #64]	@ 0x40
 8024696:	4b19      	ldr	r3, [pc, #100]	@ (80246fc <rcc_driver_init+0x2bc>)
 8024698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802469a:	f003 0302 	and.w	r3, r3, #2
 802469e:	627b      	str	r3, [r7, #36]	@ 0x24
 80246a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 80246a2:	2300      	movs	r3, #0
 80246a4:	623b      	str	r3, [r7, #32]
 80246a6:	4b15      	ldr	r3, [pc, #84]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80246aa:	4a14      	ldr	r2, [pc, #80]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80246b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80246b2:	4b12      	ldr	r3, [pc, #72]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80246b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80246ba:	623b      	str	r3, [r7, #32]
 80246bc:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 80246be:	2300      	movs	r3, #0
 80246c0:	61fb      	str	r3, [r7, #28]
 80246c2:	4b0e      	ldr	r3, [pc, #56]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80246c6:	4a0d      	ldr	r2, [pc, #52]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80246cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80246ce:	4b0b      	ldr	r3, [pc, #44]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80246d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80246d6:	61fb      	str	r3, [r7, #28]
 80246d8:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 80246da:	2300      	movs	r3, #0
 80246dc:	61bb      	str	r3, [r7, #24]
 80246de:	4b07      	ldr	r3, [pc, #28]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80246e2:	4a06      	ldr	r2, [pc, #24]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246e4:	f043 0310 	orr.w	r3, r3, #16
 80246e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80246ea:	4b04      	ldr	r3, [pc, #16]	@ (80246fc <rcc_driver_init+0x2bc>)
 80246ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80246ee:	f003 0310 	and.w	r3, r3, #16
 80246f2:	61bb      	str	r3, [r7, #24]
 80246f4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80246f6:	2300      	movs	r3, #0
 80246f8:	617b      	str	r3, [r7, #20]
 80246fa:	e003      	b.n	8024704 <rcc_driver_init+0x2c4>
 80246fc:	40023800 	.word	0x40023800
 8024700:	40007000 	.word	0x40007000
 8024704:	4b24      	ldr	r3, [pc, #144]	@ (8024798 <rcc_driver_init+0x358>)
 8024706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024708:	4a23      	ldr	r2, [pc, #140]	@ (8024798 <rcc_driver_init+0x358>)
 802470a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802470e:	6413      	str	r3, [r2, #64]	@ 0x40
 8024710:	4b21      	ldr	r3, [pc, #132]	@ (8024798 <rcc_driver_init+0x358>)
 8024712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024718:	617b      	str	r3, [r7, #20]
 802471a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 802471c:	2300      	movs	r3, #0
 802471e:	613b      	str	r3, [r7, #16]
 8024720:	4b1d      	ldr	r3, [pc, #116]	@ (8024798 <rcc_driver_init+0x358>)
 8024722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024724:	4a1c      	ldr	r2, [pc, #112]	@ (8024798 <rcc_driver_init+0x358>)
 8024726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802472a:	6413      	str	r3, [r2, #64]	@ 0x40
 802472c:	4b1a      	ldr	r3, [pc, #104]	@ (8024798 <rcc_driver_init+0x358>)
 802472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8024734:	613b      	str	r3, [r7, #16]
 8024736:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 8024738:	2300      	movs	r3, #0
 802473a:	60fb      	str	r3, [r7, #12]
 802473c:	4b16      	ldr	r3, [pc, #88]	@ (8024798 <rcc_driver_init+0x358>)
 802473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024740:	4a15      	ldr	r2, [pc, #84]	@ (8024798 <rcc_driver_init+0x358>)
 8024742:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8024746:	6413      	str	r3, [r2, #64]	@ 0x40
 8024748:	4b13      	ldr	r3, [pc, #76]	@ (8024798 <rcc_driver_init+0x358>)
 802474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802474c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8024750:	60fb      	str	r3, [r7, #12]
 8024752:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 8024754:	2300      	movs	r3, #0
 8024756:	60bb      	str	r3, [r7, #8]
 8024758:	4b0f      	ldr	r3, [pc, #60]	@ (8024798 <rcc_driver_init+0x358>)
 802475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802475c:	4a0e      	ldr	r2, [pc, #56]	@ (8024798 <rcc_driver_init+0x358>)
 802475e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024762:	6413      	str	r3, [r2, #64]	@ 0x40
 8024764:	4b0c      	ldr	r3, [pc, #48]	@ (8024798 <rcc_driver_init+0x358>)
 8024766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802476c:	60bb      	str	r3, [r7, #8]
 802476e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 8024770:	2300      	movs	r3, #0
 8024772:	607b      	str	r3, [r7, #4]
 8024774:	4b08      	ldr	r3, [pc, #32]	@ (8024798 <rcc_driver_init+0x358>)
 8024776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024778:	4a07      	ldr	r2, [pc, #28]	@ (8024798 <rcc_driver_init+0x358>)
 802477a:	f043 0320 	orr.w	r3, r3, #32
 802477e:	6453      	str	r3, [r2, #68]	@ 0x44
 8024780:	4b05      	ldr	r3, [pc, #20]	@ (8024798 <rcc_driver_init+0x358>)
 8024782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024784:	f003 0320 	and.w	r3, r3, #32
 8024788:	607b      	str	r3, [r7, #4]
 802478a:	687b      	ldr	r3, [r7, #4]

	return initResult;
 802478c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8024790:	4618      	mov	r0, r3
 8024792:	37b0      	adds	r7, #176	@ 0xb0
 8024794:	46bd      	mov	sp, r7
 8024796:	bd80      	pop	{r7, pc}
 8024798:	40023800 	.word	0x40023800

0802479c <g_buttonDraw>:
#include "string.h"

GOS_EXTERN gos_mutex_t g_mutex;

void_t g_buttonDraw (g_button_t* pButton)
{
 802479c:	b5b0      	push	{r4, r5, r7, lr}
 802479e:	b08a      	sub	sp, #40	@ 0x28
 80247a0:	af02      	add	r7, sp, #8
 80247a2:	6078      	str	r0, [r7, #4]
	u16_t textIndex = 0u;
 80247a4:	2300      	movs	r3, #0
 80247a6:	83fb      	strh	r3, [r7, #30]
	u16_t btnWidth  = 0u;
 80247a8:	2300      	movs	r3, #0
 80247aa:	83bb      	strh	r3, [r7, #28]
	u16_t btnHeight = 0u;
 80247ac:	2300      	movs	r3, #0
 80247ae:	837b      	strh	r3, [r7, #26]

	if (pButton->width == BUTTON_AUTO_WIDTH)
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	889b      	ldrh	r3, [r3, #4]
 80247b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80247b8:	4293      	cmp	r3, r2
 80247ba:	d10e      	bne.n	80247da <g_buttonDraw+0x3e>
	{
		btnWidth = strlen(pButton->text) * ili9341_font_7x10.width + 6;
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	3312      	adds	r3, #18
 80247c0:	4618      	mov	r0, r3
 80247c2:	f7fb fd85 	bl	80202d0 <strlen>
 80247c6:	4603      	mov	r3, r0
 80247c8:	b29b      	uxth	r3, r3
 80247ca:	4a52      	ldr	r2, [pc, #328]	@ (8024914 <g_buttonDraw+0x178>)
 80247cc:	7812      	ldrb	r2, [r2, #0]
 80247ce:	fb13 f302 	smulbb	r3, r3, r2
 80247d2:	b29b      	uxth	r3, r3
 80247d4:	3306      	adds	r3, #6
 80247d6:	83bb      	strh	r3, [r7, #28]
 80247d8:	e002      	b.n	80247e0 <g_buttonDraw+0x44>
	}
	else
	{
		btnWidth = pButton->width;
 80247da:	687b      	ldr	r3, [r7, #4]
 80247dc:	889b      	ldrh	r3, [r3, #4]
 80247de:	83bb      	strh	r3, [r7, #28]
	}

	if (pButton->height == BUTTON_AUTO_HEIGHT)
 80247e0:	687b      	ldr	r3, [r7, #4]
 80247e2:	88db      	ldrh	r3, [r3, #6]
 80247e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80247e8:	4293      	cmp	r3, r2
 80247ea:	d104      	bne.n	80247f6 <g_buttonDraw+0x5a>
	{
		btnHeight = ili9341_font_7x10.height + 4;
 80247ec:	4b49      	ldr	r3, [pc, #292]	@ (8024914 <g_buttonDraw+0x178>)
 80247ee:	785b      	ldrb	r3, [r3, #1]
 80247f0:	3304      	adds	r3, #4
 80247f2:	837b      	strh	r3, [r7, #26]
 80247f4:	e002      	b.n	80247fc <g_buttonDraw+0x60>
	}
	else
	{
		btnHeight = pButton->height;
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	88db      	ldrh	r3, [r3, #6]
 80247fa:	837b      	strh	r3, [r7, #26]
	}

	ili9341_fill_rect(pButton->backColor, pButton->xTop, pButton->yTop, btnWidth, btnHeight);
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	8958      	ldrh	r0, [r3, #10]
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	881b      	ldrh	r3, [r3, #0]
 8024804:	b219      	sxth	r1, r3
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	885b      	ldrh	r3, [r3, #2]
 802480a:	b21a      	sxth	r2, r3
 802480c:	8bbc      	ldrh	r4, [r7, #28]
 802480e:	8b7b      	ldrh	r3, [r7, #26]
 8024810:	9300      	str	r3, [sp, #0]
 8024812:	4623      	mov	r3, r4
 8024814:	f7ff fad2 	bl	8023dbc <ili9341_fill_rect>
	ili9341_draw_rect(ILI9341_BLACK, pButton->xTop, pButton->yTop, btnWidth, btnHeight);
 8024818:	4b3f      	ldr	r3, [pc, #252]	@ (8024918 <g_buttonDraw+0x17c>)
 802481a:	8818      	ldrh	r0, [r3, #0]
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	881b      	ldrh	r3, [r3, #0]
 8024820:	b219      	sxth	r1, r3
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	885b      	ldrh	r3, [r3, #2]
 8024826:	b21a      	sxth	r2, r3
 8024828:	8bbc      	ldrh	r4, [r7, #28]
 802482a:	8b7b      	ldrh	r3, [r7, #26]
 802482c:	9300      	str	r3, [sp, #0]
 802482e:	4623      	mov	r3, r4
 8024830:	f7ff fa5c 	bl	8023cec <ili9341_draw_rect>

	if (pButton->isFocused == GOS_TRUE)
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	7b9b      	ldrb	r3, [r3, #14]
 8024838:	2b36      	cmp	r3, #54	@ 0x36
 802483a:	d115      	bne.n	8024868 <g_buttonDraw+0xcc>
	{
		ili9341_draw_rect(ILI9341_YELLOW, pButton->xTop + 3, pButton->yTop + 3, btnWidth - 6, btnHeight - 6);
 802483c:	4b37      	ldr	r3, [pc, #220]	@ (802491c <g_buttonDraw+0x180>)
 802483e:	8818      	ldrh	r0, [r3, #0]
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	881b      	ldrh	r3, [r3, #0]
 8024844:	3303      	adds	r3, #3
 8024846:	b29b      	uxth	r3, r3
 8024848:	b219      	sxth	r1, r3
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	885b      	ldrh	r3, [r3, #2]
 802484e:	3303      	adds	r3, #3
 8024850:	b29b      	uxth	r3, r3
 8024852:	b21a      	sxth	r2, r3
 8024854:	8bbb      	ldrh	r3, [r7, #28]
 8024856:	3b06      	subs	r3, #6
 8024858:	b29c      	uxth	r4, r3
 802485a:	8b7b      	ldrh	r3, [r7, #26]
 802485c:	3b06      	subs	r3, #6
 802485e:	b29b      	uxth	r3, r3
 8024860:	9300      	str	r3, [sp, #0]
 8024862:	4623      	mov	r3, r4
 8024864:	f7ff fa42 	bl	8023cec <ili9341_draw_rect>
	}

	ili9341_text_attr_t attr =
 8024868:	4b2a      	ldr	r3, [pc, #168]	@ (8024914 <g_buttonDraw+0x178>)
 802486a:	60fb      	str	r3, [r7, #12]
	{
		.bg_color = pButton->backColor,
		.fg_color = pButton->foreColor,
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	891b      	ldrh	r3, [r3, #8]
	ili9341_text_attr_t attr =
 8024870:	823b      	strh	r3, [r7, #16]
		.bg_color = pButton->backColor,
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	895b      	ldrh	r3, [r3, #10]
	ili9341_text_attr_t attr =
 8024876:	827b      	strh	r3, [r7, #18]
		.font = &ili9341_font_7x10,
		.origin_x = pButton->xTop + ((btnWidth - strlen(pButton->text) * ili9341_font_7x10.width) / 2),
 8024878:	687b      	ldr	r3, [r7, #4]
 802487a:	881c      	ldrh	r4, [r3, #0]
 802487c:	8bbd      	ldrh	r5, [r7, #28]
 802487e:	687b      	ldr	r3, [r7, #4]
 8024880:	3312      	adds	r3, #18
 8024882:	4618      	mov	r0, r3
 8024884:	f7fb fd24 	bl	80202d0 <strlen>
 8024888:	4603      	mov	r3, r0
 802488a:	4a22      	ldr	r2, [pc, #136]	@ (8024914 <g_buttonDraw+0x178>)
 802488c:	7812      	ldrb	r2, [r2, #0]
 802488e:	fb02 f303 	mul.w	r3, r2, r3
 8024892:	1aeb      	subs	r3, r5, r3
 8024894:	085b      	lsrs	r3, r3, #1
 8024896:	b29b      	uxth	r3, r3
 8024898:	4423      	add	r3, r4
 802489a:	b29b      	uxth	r3, r3
	ili9341_text_attr_t attr =
 802489c:	82bb      	strh	r3, [r7, #20]
		.origin_y = pButton->yTop + ((btnHeight - ili9341_font_7x10.height) / 2)
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	885a      	ldrh	r2, [r3, #2]
 80248a2:	8b7b      	ldrh	r3, [r7, #26]
 80248a4:	491b      	ldr	r1, [pc, #108]	@ (8024914 <g_buttonDraw+0x178>)
 80248a6:	7849      	ldrb	r1, [r1, #1]
 80248a8:	1a5b      	subs	r3, r3, r1
 80248aa:	0fd9      	lsrs	r1, r3, #31
 80248ac:	440b      	add	r3, r1
 80248ae:	105b      	asrs	r3, r3, #1
 80248b0:	b29b      	uxth	r3, r3
 80248b2:	4413      	add	r3, r2
 80248b4:	b29b      	uxth	r3, r3
	ili9341_text_attr_t attr =
 80248b6:	82fb      	strh	r3, [r7, #22]
	};

	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 80248b8:	e011      	b.n	80248de <g_buttonDraw+0x142>
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
			pButton->text[textIndex] != '\0')
	{
		ili9341_draw_char(attr, pButton->text[textIndex++]);
 80248ba:	8bfb      	ldrh	r3, [r7, #30]
 80248bc:	1c5a      	adds	r2, r3, #1
 80248be:	83fa      	strh	r2, [r7, #30]
 80248c0:	461a      	mov	r2, r3
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	4413      	add	r3, r2
 80248c6:	7c9b      	ldrb	r3, [r3, #18]
 80248c8:	f107 020c 	add.w	r2, r7, #12
 80248cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80248ce:	f7ff fb0f 	bl	8023ef0 <ili9341_draw_char>
		attr.origin_x += attr.font->width;
 80248d2:	8abb      	ldrh	r3, [r7, #20]
 80248d4:	68fa      	ldr	r2, [r7, #12]
 80248d6:	7812      	ldrb	r2, [r2, #0]
 80248d8:	4413      	add	r3, r2
 80248da:	b29b      	uxth	r3, r3
 80248dc:	82bb      	strh	r3, [r7, #20]
	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 80248de:	8abb      	ldrh	r3, [r7, #20]
 80248e0:	461a      	mov	r2, r3
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	781b      	ldrb	r3, [r3, #0]
 80248e6:	4413      	add	r3, r2
 80248e8:	1c5a      	adds	r2, r3, #1
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	881b      	ldrh	r3, [r3, #0]
 80248ee:	4619      	mov	r1, r3
 80248f0:	8bbb      	ldrh	r3, [r7, #28]
 80248f2:	440b      	add	r3, r1
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
 80248f4:	429a      	cmp	r2, r3
 80248f6:	da08      	bge.n	802490a <g_buttonDraw+0x16e>
	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 80248f8:	8bfb      	ldrh	r3, [r7, #30]
 80248fa:	2b17      	cmp	r3, #23
 80248fc:	d805      	bhi.n	802490a <g_buttonDraw+0x16e>
			pButton->text[textIndex] != '\0')
 80248fe:	8bfb      	ldrh	r3, [r7, #30]
 8024900:	687a      	ldr	r2, [r7, #4]
 8024902:	4413      	add	r3, r2
 8024904:	7c9b      	ldrb	r3, [r3, #18]
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
 8024906:	2b00      	cmp	r3, #0
 8024908:	d1d7      	bne.n	80248ba <g_buttonDraw+0x11e>
	}
}
 802490a:	bf00      	nop
 802490c:	3720      	adds	r7, #32
 802490e:	46bd      	mov	sp, r7
 8024910:	bdb0      	pop	{r4, r5, r7, pc}
 8024912:	bf00      	nop
 8024914:	0804003c 	.word	0x0804003c
 8024918:	080407aa 	.word	0x080407aa
 802491c:	080407b2 	.word	0x080407b2

08024920 <g_initGraphicsDriver>:
	.taskPriority = 200,//85,
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER
};

gos_result_t g_initGraphicsDriver (/*ili9341_t* lcd*/)
{
 8024920:	b580      	push	{r7, lr}
 8024922:	af00      	add	r7, sp, #0
		.callback = g_touchItCallback,
		.pin = iodef_get(IO_TOUCH_INT)->pin
	};*/

	//screen = lcd;
	numOfWindows = 0u;
 8024924:	4b06      	ldr	r3, [pc, #24]	@ (8024940 <g_initGraphicsDriver+0x20>)
 8024926:	2200      	movs	r2, #0
 8024928:	701a      	strb	r2, [r3, #0]
	gos_mutexInit(&g_mutex);
 802492a:	4806      	ldr	r0, [pc, #24]	@ (8024944 <g_initGraphicsDriver+0x24>)
 802492c:	f013 fe76 	bl	803861c <gos_mutexInit>
	//drv_gpio_registerItCallback(&touchInterruptDesc);

	//ili9341_set_touch_pressed_begin(g_screenTouchBegin);
	//ili9341_set_touch_pressed_end(g_screenTouchEnd);

	return gos_taskRegister(&g_taskDescriptor, &g_driverTaskId);
 8024930:	4905      	ldr	r1, [pc, #20]	@ (8024948 <g_initGraphicsDriver+0x28>)
 8024932:	4806      	ldr	r0, [pc, #24]	@ (802494c <g_initGraphicsDriver+0x2c>)
 8024934:	f011 f8c2 	bl	8035abc <gos_taskRegister>
 8024938:	4603      	mov	r3, r0
}
 802493a:	4618      	mov	r0, r3
 802493c:	bd80      	pop	{r7, pc}
 802493e:	bf00      	nop
 8024940:	20007110 	.word	0x20007110
 8024944:	200070ec 	.word	0x200070ec
 8024948:	200070e8 	.word	0x200070e8
 802494c:	200014e0 	.word	0x200014e0

08024950 <g_registerWindow>:

gos_result_t g_registerWindow (g_window_t* pWindow)
{
 8024950:	b480      	push	{r7}
 8024952:	b085      	sub	sp, #20
 8024954:	af00      	add	r7, sp, #0
 8024956:	6078      	str	r0, [r7, #4]
	u16_t windowIndex = 0u;
 8024958:	2300      	movs	r3, #0
 802495a:	81fb      	strh	r3, [r7, #14]

	for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 802495c:	2300      	movs	r3, #0
 802495e:	81fb      	strh	r3, [r7, #14]
 8024960:	e020      	b.n	80249a4 <g_registerWindow+0x54>
	{
		if (pWindows[windowIndex] == NULL)
 8024962:	89fb      	ldrh	r3, [r7, #14]
 8024964:	4a14      	ldr	r2, [pc, #80]	@ (80249b8 <g_registerWindow+0x68>)
 8024966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802496a:	2b00      	cmp	r3, #0
 802496c:	d10f      	bne.n	802498e <g_registerWindow+0x3e>
		{
			pWindows[windowIndex] = pWindow;
 802496e:	89fb      	ldrh	r3, [r7, #14]
 8024970:	4911      	ldr	r1, [pc, #68]	@ (80249b8 <g_registerWindow+0x68>)
 8024972:	687a      	ldr	r2, [r7, #4]
 8024974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pWindow->zIndex = 0u;
 8024978:	687b      	ldr	r3, [r7, #4]
 802497a:	2200      	movs	r2, #0
 802497c:	811a      	strh	r2, [r3, #8]
			numOfWindows++;
 802497e:	4b0f      	ldr	r3, [pc, #60]	@ (80249bc <g_registerWindow+0x6c>)
 8024980:	781b      	ldrb	r3, [r3, #0]
 8024982:	3301      	adds	r3, #1
 8024984:	b2da      	uxtb	r2, r3
 8024986:	4b0d      	ldr	r3, [pc, #52]	@ (80249bc <g_registerWindow+0x6c>)
 8024988:	701a      	strb	r2, [r3, #0]
			return GOS_SUCCESS;
 802498a:	2355      	movs	r3, #85	@ 0x55
 802498c:	e00e      	b.n	80249ac <g_registerWindow+0x5c>
		}
		else
		{
			pWindows[windowIndex]->zIndex++;
 802498e:	89fb      	ldrh	r3, [r7, #14]
 8024990:	4a09      	ldr	r2, [pc, #36]	@ (80249b8 <g_registerWindow+0x68>)
 8024992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024996:	891a      	ldrh	r2, [r3, #8]
 8024998:	3201      	adds	r2, #1
 802499a:	b292      	uxth	r2, r2
 802499c:	811a      	strh	r2, [r3, #8]
	for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 802499e:	89fb      	ldrh	r3, [r7, #14]
 80249a0:	3301      	adds	r3, #1
 80249a2:	81fb      	strh	r3, [r7, #14]
 80249a4:	89fb      	ldrh	r3, [r7, #14]
 80249a6:	2b07      	cmp	r3, #7
 80249a8:	d9db      	bls.n	8024962 <g_registerWindow+0x12>
		}
	}

	return GOS_ERROR;
 80249aa:	23ae      	movs	r3, #174	@ 0xae
}
 80249ac:	4618      	mov	r0, r3
 80249ae:	3714      	adds	r7, #20
 80249b0:	46bd      	mov	sp, r7
 80249b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249b6:	4770      	bx	lr
 80249b8:	200070f0 	.word	0x200070f0
 80249bc:	20007110 	.word	0x20007110

080249c0 <g_inactivateWindow>:

	pWindow->zIndex = 0u;
}

void_t g_inactivateWindow (g_window_t* pWindow)
{
 80249c0:	b480      	push	{r7}
 80249c2:	b085      	sub	sp, #20
 80249c4:	af00      	add	r7, sp, #0
 80249c6:	6078      	str	r0, [r7, #4]
	u16_t windowIndex = 0;
 80249c8:	2300      	movs	r3, #0
 80249ca:	81fb      	strh	r3, [r7, #14]

	if (pWindow->zIndex == 0u)
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	891b      	ldrh	r3, [r3, #8]
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d118      	bne.n	8024a06 <g_inactivateWindow+0x46>
	{
		for (windowIndex = 0; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 80249d4:	2300      	movs	r3, #0
 80249d6:	81fb      	strh	r3, [r7, #14]
 80249d8:	e010      	b.n	80249fc <g_inactivateWindow+0x3c>
		{
			if (pWindows[windowIndex] != NULL)
 80249da:	89fb      	ldrh	r3, [r7, #14]
 80249dc:	4a10      	ldr	r2, [pc, #64]	@ (8024a20 <g_inactivateWindow+0x60>)
 80249de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	d00e      	beq.n	8024a04 <g_inactivateWindow+0x44>
			{
				pWindows[windowIndex]->zIndex--;
 80249e6:	89fb      	ldrh	r3, [r7, #14]
 80249e8:	4a0d      	ldr	r2, [pc, #52]	@ (8024a20 <g_inactivateWindow+0x60>)
 80249ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80249ee:	891a      	ldrh	r2, [r3, #8]
 80249f0:	3a01      	subs	r2, #1
 80249f2:	b292      	uxth	r2, r2
 80249f4:	811a      	strh	r2, [r3, #8]
		for (windowIndex = 0; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 80249f6:	89fb      	ldrh	r3, [r7, #14]
 80249f8:	3301      	adds	r3, #1
 80249fa:	81fb      	strh	r3, [r7, #14]
 80249fc:	89fb      	ldrh	r3, [r7, #14]
 80249fe:	2b07      	cmp	r3, #7
 8024a00:	d9eb      	bls.n	80249da <g_inactivateWindow+0x1a>
 8024a02:	e000      	b.n	8024a06 <g_inactivateWindow+0x46>
			}
			else
			{
				break;
 8024a04:	bf00      	nop
			}
		}
	}

	pWindow->zIndex = numOfWindows - 1;
 8024a06:	4b07      	ldr	r3, [pc, #28]	@ (8024a24 <g_inactivateWindow+0x64>)
 8024a08:	781b      	ldrb	r3, [r3, #0]
 8024a0a:	3b01      	subs	r3, #1
 8024a0c:	b29a      	uxth	r2, r3
 8024a0e:	687b      	ldr	r3, [r7, #4]
 8024a10:	811a      	strh	r2, [r3, #8]
}
 8024a12:	bf00      	nop
 8024a14:	3714      	adds	r7, #20
 8024a16:	46bd      	mov	sp, r7
 8024a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a1c:	4770      	bx	lr
 8024a1e:	bf00      	nop
 8024a20:	200070f0 	.word	0x200070f0
 8024a24:	20007110 	.word	0x20007110

08024a28 <g_task>:

GOS_STATIC void_t g_task (void_t)
{
 8024a28:	b580      	push	{r7, lr}
 8024a2a:	b096      	sub	sp, #88	@ 0x58
 8024a2c:	af00      	add	r7, sp, #0
	gos_messageId_t selector [] = { WINDOW_EVENT_MSG_ID, 0 };
 8024a2e:	f64a 4320 	movw	r3, #44064	@ 0xac20
 8024a32:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8024a36:	2300      	movs	r3, #0
 8024a38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	gos_message_t eventMessage;
	ili9341_fill_screen(ILI9341_BLACK);
 8024a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8024a74 <g_task+0x4c>)
 8024a3e:	881b      	ldrh	r3, [r3, #0]
 8024a40:	4618      	mov	r0, r3
 8024a42:	f7ff fa3f 	bl	8023ec4 <ili9341_fill_screen>

	// Draw at startup.
	g_redrawHandler(EVENT_STARTUP, &eventMessage);
 8024a46:	463b      	mov	r3, r7
 8024a48:	4619      	mov	r1, r3
 8024a4a:	2000      	movs	r0, #0
 8024a4c:	f000 f814 	bl	8024a78 <g_redrawHandler>

	for (;;)
	{
		if (gos_messageRx(selector, &eventMessage, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 8024a50:	4639      	mov	r1, r7
 8024a52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8024a56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024a5a:	4618      	mov	r0, r3
 8024a5c:	f013 fb80 	bl	8038160 <gos_messageRx>
 8024a60:	4603      	mov	r3, r0
 8024a62:	2b55      	cmp	r3, #85	@ 0x55
 8024a64:	d1f4      	bne.n	8024a50 <g_task+0x28>
		{
			g_redrawHandler((g_windowEvent_t)eventMessage.messageBytes[0], &eventMessage);
 8024a66:	78fb      	ldrb	r3, [r7, #3]
 8024a68:	463a      	mov	r2, r7
 8024a6a:	4611      	mov	r1, r2
 8024a6c:	4618      	mov	r0, r3
 8024a6e:	f000 f803 	bl	8024a78 <g_redrawHandler>
		if (gos_messageRx(selector, &eventMessage, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 8024a72:	e7ed      	b.n	8024a50 <g_task+0x28>
 8024a74:	080407aa 	.word	0x080407aa

08024a78 <g_redrawHandler>:
		}
	}
}

GOS_STATIC void_t g_redrawHandler (g_windowEvent_t event, gos_message_t* pEventMessage)
{
 8024a78:	b590      	push	{r4, r7, lr}
 8024a7a:	b089      	sub	sp, #36	@ 0x24
 8024a7c:	af02      	add	r7, sp, #8
 8024a7e:	4603      	mov	r3, r0
 8024a80:	6039      	str	r1, [r7, #0]
 8024a82:	71fb      	strb	r3, [r7, #7]
	u16_t windowIndex = 0u;
 8024a84:	2300      	movs	r3, #0
 8024a86:	82fb      	strh	r3, [r7, #22]
	u8_t idx, zIndex;
	bool_t breakLoop = GOS_FALSE;
 8024a88:	2349      	movs	r3, #73	@ 0x49
 8024a8a:	74fb      	strb	r3, [r7, #19]

	switch (event)
 8024a8c:	79fb      	ldrb	r3, [r7, #7]
 8024a8e:	2b02      	cmp	r3, #2
 8024a90:	d046      	beq.n	8024b20 <g_redrawHandler+0xa8>
 8024a92:	2b02      	cmp	r3, #2
 8024a94:	f300 80bf 	bgt.w	8024c16 <g_redrawHandler+0x19e>
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	d003      	beq.n	8024aa4 <g_redrawHandler+0x2c>
 8024a9c:	2b01      	cmp	r3, #1
 8024a9e:	f000 808b 	beq.w	8024bb8 <g_redrawHandler+0x140>
			}
		}
		break;
	}
	}
}
 8024aa2:	e0b8      	b.n	8024c16 <g_redrawHandler+0x19e>
		zIndex = numOfWindows - 1;
 8024aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8024c20 <g_redrawHandler+0x1a8>)
 8024aa6:	781b      	ldrb	r3, [r3, #0]
 8024aa8:	3b01      	subs	r3, #1
 8024aaa:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8024aac:	2300      	movs	r3, #0
 8024aae:	757b      	strb	r3, [r7, #21]
 8024ab0:	e030      	b.n	8024b14 <g_redrawHandler+0x9c>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8024ab2:	2300      	movs	r3, #0
 8024ab4:	82fb      	strh	r3, [r7, #22]
 8024ab6:	e020      	b.n	8024afa <g_redrawHandler+0x82>
				if (pWindows[windowIndex] == NULL)
 8024ab8:	8afb      	ldrh	r3, [r7, #22]
 8024aba:	4a5a      	ldr	r2, [pc, #360]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	d01e      	beq.n	8024b02 <g_redrawHandler+0x8a>
					if (pWindows[windowIndex]->zIndex == zIndex)
 8024ac4:	8afb      	ldrh	r3, [r7, #22]
 8024ac6:	4a57      	ldr	r2, [pc, #348]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024acc:	891a      	ldrh	r2, [r3, #8]
 8024ace:	7d3b      	ldrb	r3, [r7, #20]
 8024ad0:	b29b      	uxth	r3, r3
 8024ad2:	429a      	cmp	r2, r3
 8024ad4:	d10e      	bne.n	8024af4 <g_redrawHandler+0x7c>
						if (pWindows[windowIndex]->isVisible == GOS_TRUE)
 8024ad6:	8afb      	ldrh	r3, [r7, #22]
 8024ad8:	4a52      	ldr	r2, [pc, #328]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024ade:	7b5b      	ldrb	r3, [r3, #13]
 8024ae0:	2b36      	cmp	r3, #54	@ 0x36
 8024ae2:	d110      	bne.n	8024b06 <g_redrawHandler+0x8e>
							g_windowDraw(pWindows[windowIndex]);
 8024ae4:	8afb      	ldrh	r3, [r7, #22]
 8024ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024aec:	4618      	mov	r0, r3
 8024aee:	f000 f9cf 	bl	8024e90 <g_windowDraw>
						break;
 8024af2:	e008      	b.n	8024b06 <g_redrawHandler+0x8e>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8024af4:	8afb      	ldrh	r3, [r7, #22]
 8024af6:	3301      	adds	r3, #1
 8024af8:	82fb      	strh	r3, [r7, #22]
 8024afa:	8afb      	ldrh	r3, [r7, #22]
 8024afc:	2b07      	cmp	r3, #7
 8024afe:	d9db      	bls.n	8024ab8 <g_redrawHandler+0x40>
 8024b00:	e002      	b.n	8024b08 <g_redrawHandler+0x90>
					break;
 8024b02:	bf00      	nop
 8024b04:	e000      	b.n	8024b08 <g_redrawHandler+0x90>
						break;
 8024b06:	bf00      	nop
			zIndex--;
 8024b08:	7d3b      	ldrb	r3, [r7, #20]
 8024b0a:	3b01      	subs	r3, #1
 8024b0c:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8024b0e:	7d7b      	ldrb	r3, [r7, #21]
 8024b10:	3301      	adds	r3, #1
 8024b12:	757b      	strb	r3, [r7, #21]
 8024b14:	4b42      	ldr	r3, [pc, #264]	@ (8024c20 <g_redrawHandler+0x1a8>)
 8024b16:	781b      	ldrb	r3, [r3, #0]
 8024b18:	7d7a      	ldrb	r2, [r7, #21]
 8024b1a:	429a      	cmp	r2, r3
 8024b1c:	d3c9      	bcc.n	8024ab2 <g_redrawHandler+0x3a>
		break;
 8024b1e:	e07a      	b.n	8024c16 <g_redrawHandler+0x19e>
		memcpy((void_t*)&pWindow, (void_t*)&pEventMessage->messageBytes[1], sizeof(pWindow));
 8024b20:	683b      	ldr	r3, [r7, #0]
 8024b22:	3304      	adds	r3, #4
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	60fb      	str	r3, [r7, #12]
		GOS_NOP;
 8024b28:	bf00      	nop
		zIndex = numOfWindows - 1;
 8024b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8024c20 <g_redrawHandler+0x1a8>)
 8024b2c:	781b      	ldrb	r3, [r3, #0]
 8024b2e:	3b01      	subs	r3, #1
 8024b30:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8024b32:	2300      	movs	r3, #0
 8024b34:	757b      	strb	r3, [r7, #21]
 8024b36:	e039      	b.n	8024bac <g_redrawHandler+0x134>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8024b38:	2300      	movs	r3, #0
 8024b3a:	82fb      	strh	r3, [r7, #22]
 8024b3c:	e029      	b.n	8024b92 <g_redrawHandler+0x11a>
				if (pWindows[windowIndex] == NULL)
 8024b3e:	8afb      	ldrh	r3, [r7, #22]
 8024b40:	4a38      	ldr	r2, [pc, #224]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d027      	beq.n	8024b9a <g_redrawHandler+0x122>
					if (pWindows[windowIndex]->zIndex == zIndex)
 8024b4a:	8afb      	ldrh	r3, [r7, #22]
 8024b4c:	4a35      	ldr	r2, [pc, #212]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b52:	891a      	ldrh	r2, [r3, #8]
 8024b54:	7d3b      	ldrb	r3, [r7, #20]
 8024b56:	b29b      	uxth	r3, r3
 8024b58:	429a      	cmp	r2, r3
 8024b5a:	d117      	bne.n	8024b8c <g_redrawHandler+0x114>
						if (pWindows[windowIndex]->isVisible == GOS_TRUE)
 8024b5c:	8afb      	ldrh	r3, [r7, #22]
 8024b5e:	4a31      	ldr	r2, [pc, #196]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b64:	7b5b      	ldrb	r3, [r3, #13]
 8024b66:	2b36      	cmp	r3, #54	@ 0x36
 8024b68:	d119      	bne.n	8024b9e <g_redrawHandler+0x126>
							g_windowRefreshArea(pWindows[windowIndex], pWindow->xTop, pWindow->yTop, pWindow->width, pWindow->height);
 8024b6a:	8afb      	ldrh	r3, [r7, #22]
 8024b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024b6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024b72:	68fb      	ldr	r3, [r7, #12]
 8024b74:	8819      	ldrh	r1, [r3, #0]
 8024b76:	68fb      	ldr	r3, [r7, #12]
 8024b78:	885a      	ldrh	r2, [r3, #2]
 8024b7a:	68fb      	ldr	r3, [r7, #12]
 8024b7c:	889c      	ldrh	r4, [r3, #4]
 8024b7e:	68fb      	ldr	r3, [r7, #12]
 8024b80:	88db      	ldrh	r3, [r3, #6]
 8024b82:	9300      	str	r3, [sp, #0]
 8024b84:	4623      	mov	r3, r4
 8024b86:	f000 fa15 	bl	8024fb4 <g_windowRefreshArea>
						break;
 8024b8a:	e008      	b.n	8024b9e <g_redrawHandler+0x126>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8024b8c:	8afb      	ldrh	r3, [r7, #22]
 8024b8e:	3301      	adds	r3, #1
 8024b90:	82fb      	strh	r3, [r7, #22]
 8024b92:	8afb      	ldrh	r3, [r7, #22]
 8024b94:	2b07      	cmp	r3, #7
 8024b96:	d9d2      	bls.n	8024b3e <g_redrawHandler+0xc6>
 8024b98:	e002      	b.n	8024ba0 <g_redrawHandler+0x128>
					break;
 8024b9a:	bf00      	nop
 8024b9c:	e000      	b.n	8024ba0 <g_redrawHandler+0x128>
						break;
 8024b9e:	bf00      	nop
			zIndex--;
 8024ba0:	7d3b      	ldrb	r3, [r7, #20]
 8024ba2:	3b01      	subs	r3, #1
 8024ba4:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8024ba6:	7d7b      	ldrb	r3, [r7, #21]
 8024ba8:	3301      	adds	r3, #1
 8024baa:	757b      	strb	r3, [r7, #21]
 8024bac:	4b1c      	ldr	r3, [pc, #112]	@ (8024c20 <g_redrawHandler+0x1a8>)
 8024bae:	781b      	ldrb	r3, [r3, #0]
 8024bb0:	7d7a      	ldrb	r2, [r7, #21]
 8024bb2:	429a      	cmp	r2, r3
 8024bb4:	d3c0      	bcc.n	8024b38 <g_redrawHandler+0xc0>
		break;
 8024bb6:	e02e      	b.n	8024c16 <g_redrawHandler+0x19e>
		zIndex = 0;
 8024bb8:	2300      	movs	r3, #0
 8024bba:	753b      	strb	r3, [r7, #20]
		while (zIndex < numOfWindows && breakLoop == GOS_FALSE)
 8024bbc:	e022      	b.n	8024c04 <g_redrawHandler+0x18c>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8024bbe:	2300      	movs	r3, #0
 8024bc0:	82fb      	strh	r3, [r7, #22]
 8024bc2:	e01c      	b.n	8024bfe <g_redrawHandler+0x186>
				if (pWindows[windowIndex]->zIndex == zIndex &&
 8024bc4:	8afb      	ldrh	r3, [r7, #22]
 8024bc6:	4a17      	ldr	r2, [pc, #92]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024bcc:	891a      	ldrh	r2, [r3, #8]
 8024bce:	7d3b      	ldrb	r3, [r7, #20]
 8024bd0:	b29b      	uxth	r3, r3
 8024bd2:	429a      	cmp	r2, r3
 8024bd4:	d110      	bne.n	8024bf8 <g_redrawHandler+0x180>
					pWindows[windowIndex]->isVisible == GOS_TRUE)
 8024bd6:	8afb      	ldrh	r3, [r7, #22]
 8024bd8:	4a12      	ldr	r2, [pc, #72]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024bde:	7b5b      	ldrb	r3, [r3, #13]
				if (pWindows[windowIndex]->zIndex == zIndex &&
 8024be0:	2b36      	cmp	r3, #54	@ 0x36
 8024be2:	d109      	bne.n	8024bf8 <g_redrawHandler+0x180>
					g_windowDraw(pWindows[windowIndex]);
 8024be4:	8afb      	ldrh	r3, [r7, #22]
 8024be6:	4a0f      	ldr	r2, [pc, #60]	@ (8024c24 <g_redrawHandler+0x1ac>)
 8024be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024bec:	4618      	mov	r0, r3
 8024bee:	f000 f94f 	bl	8024e90 <g_windowDraw>
					breakLoop = GOS_TRUE;
 8024bf2:	2336      	movs	r3, #54	@ 0x36
 8024bf4:	74fb      	strb	r3, [r7, #19]
					break;
 8024bf6:	e005      	b.n	8024c04 <g_redrawHandler+0x18c>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8024bf8:	8afb      	ldrh	r3, [r7, #22]
 8024bfa:	3301      	adds	r3, #1
 8024bfc:	82fb      	strh	r3, [r7, #22]
 8024bfe:	8afb      	ldrh	r3, [r7, #22]
 8024c00:	2b07      	cmp	r3, #7
 8024c02:	d9df      	bls.n	8024bc4 <g_redrawHandler+0x14c>
		while (zIndex < numOfWindows && breakLoop == GOS_FALSE)
 8024c04:	4b06      	ldr	r3, [pc, #24]	@ (8024c20 <g_redrawHandler+0x1a8>)
 8024c06:	781b      	ldrb	r3, [r3, #0]
 8024c08:	7d3a      	ldrb	r2, [r7, #20]
 8024c0a:	429a      	cmp	r2, r3
 8024c0c:	d202      	bcs.n	8024c14 <g_redrawHandler+0x19c>
 8024c0e:	7cfb      	ldrb	r3, [r7, #19]
 8024c10:	2b49      	cmp	r3, #73	@ 0x49
 8024c12:	d0d4      	beq.n	8024bbe <g_redrawHandler+0x146>
		break;
 8024c14:	bf00      	nop
}
 8024c16:	bf00      	nop
 8024c18:	371c      	adds	r7, #28
 8024c1a:	46bd      	mov	sp, r7
 8024c1c:	bd90      	pop	{r4, r7, pc}
 8024c1e:	bf00      	nop
 8024c20:	20007110 	.word	0x20007110
 8024c24:	200070f0 	.word	0x200070f0

08024c28 <g_labelDraw>:
#define LABEL_DRAW_MUTEX_TMO_MS ( 3000u )

GOS_EXTERN gos_mutex_t g_mutex;

void_t g_labelDraw (g_label_t* pLabel)
{
 8024c28:	b580      	push	{r7, lr}
 8024c2a:	b088      	sub	sp, #32
 8024c2c:	af00      	add	r7, sp, #0
 8024c2e:	6078      	str	r0, [r7, #4]
	//if (gos_mutexLock(&g_mutex, LABEL_DRAW_MUTEX_TMO_MS) == GOS_SUCCESS)
	{
		u16_t textIndex = 0u;
 8024c30:	2300      	movs	r3, #0
 8024c32:	83fb      	strh	r3, [r7, #30]
		u16_t lblWidth  = 0u;
 8024c34:	2300      	movs	r3, #0
 8024c36:	83bb      	strh	r3, [r7, #28]
		u16_t lblHeight = 0u;
 8024c38:	2300      	movs	r3, #0
 8024c3a:	837b      	strh	r3, [r7, #26]

		if (pLabel->width == LABEL_AUTO_WIDTH)
 8024c3c:	687b      	ldr	r3, [r7, #4]
 8024c3e:	889b      	ldrh	r3, [r3, #4]
 8024c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024c44:	4293      	cmp	r3, r2
 8024c46:	d10e      	bne.n	8024c66 <g_labelDraw+0x3e>
		{
			lblWidth = strlen(pLabel->text) * ili9341_font_7x10.width + 6;
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	330e      	adds	r3, #14
 8024c4c:	4618      	mov	r0, r3
 8024c4e:	f7fb fb3f 	bl	80202d0 <strlen>
 8024c52:	4603      	mov	r3, r0
 8024c54:	b29b      	uxth	r3, r3
 8024c56:	4a30      	ldr	r2, [pc, #192]	@ (8024d18 <g_labelDraw+0xf0>)
 8024c58:	7812      	ldrb	r2, [r2, #0]
 8024c5a:	fb13 f302 	smulbb	r3, r3, r2
 8024c5e:	b29b      	uxth	r3, r3
 8024c60:	3306      	adds	r3, #6
 8024c62:	83bb      	strh	r3, [r7, #28]
 8024c64:	e002      	b.n	8024c6c <g_labelDraw+0x44>
		}
		else
		{
			lblWidth = pLabel->width;
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	889b      	ldrh	r3, [r3, #4]
 8024c6a:	83bb      	strh	r3, [r7, #28]
		}

		if (pLabel->height == LABEL_AUTO_HEIGHT)
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	88db      	ldrh	r3, [r3, #6]
 8024c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024c74:	4293      	cmp	r3, r2
 8024c76:	d104      	bne.n	8024c82 <g_labelDraw+0x5a>
		{
			lblHeight = ili9341_font_7x10.height + 4;
 8024c78:	4b27      	ldr	r3, [pc, #156]	@ (8024d18 <g_labelDraw+0xf0>)
 8024c7a:	785b      	ldrb	r3, [r3, #1]
 8024c7c:	3304      	adds	r3, #4
 8024c7e:	837b      	strh	r3, [r7, #26]
 8024c80:	e002      	b.n	8024c88 <g_labelDraw+0x60>
		}
		else
		{
			lblHeight = pLabel->height;
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	88db      	ldrh	r3, [r3, #6]
 8024c86:	837b      	strh	r3, [r7, #26]
		}

		ili9341_text_attr_t attr =
 8024c88:	4b23      	ldr	r3, [pc, #140]	@ (8024d18 <g_labelDraw+0xf0>)
 8024c8a:	60fb      	str	r3, [r7, #12]
		{
			.bg_color = pLabel->backColor,
			.fg_color = pLabel->foreColor,
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	891b      	ldrh	r3, [r3, #8]
		ili9341_text_attr_t attr =
 8024c90:	823b      	strh	r3, [r7, #16]
			.bg_color = pLabel->backColor,
 8024c92:	687b      	ldr	r3, [r7, #4]
 8024c94:	895b      	ldrh	r3, [r3, #10]
		ili9341_text_attr_t attr =
 8024c96:	827b      	strh	r3, [r7, #18]
			.font = &ili9341_font_7x10,
			.origin_x = pLabel->xTop + 3,
 8024c98:	687b      	ldr	r3, [r7, #4]
 8024c9a:	881b      	ldrh	r3, [r3, #0]
 8024c9c:	3303      	adds	r3, #3
 8024c9e:	b29b      	uxth	r3, r3
		ili9341_text_attr_t attr =
 8024ca0:	82bb      	strh	r3, [r7, #20]
			.origin_y = pLabel->yTop + ((lblHeight - ili9341_font_7x10.height) / 2)
 8024ca2:	687b      	ldr	r3, [r7, #4]
 8024ca4:	885a      	ldrh	r2, [r3, #2]
 8024ca6:	8b7b      	ldrh	r3, [r7, #26]
 8024ca8:	491b      	ldr	r1, [pc, #108]	@ (8024d18 <g_labelDraw+0xf0>)
 8024caa:	7849      	ldrb	r1, [r1, #1]
 8024cac:	1a5b      	subs	r3, r3, r1
 8024cae:	0fd9      	lsrs	r1, r3, #31
 8024cb0:	440b      	add	r3, r1
 8024cb2:	105b      	asrs	r3, r3, #1
 8024cb4:	b29b      	uxth	r3, r3
 8024cb6:	4413      	add	r3, r2
 8024cb8:	b29b      	uxth	r3, r3
		ili9341_text_attr_t attr =
 8024cba:	82fb      	strh	r3, [r7, #22]
		};

		while ((attr.origin_x + attr.font->width + 1) < (pLabel->xTop + lblWidth) &&
 8024cbc:	e011      	b.n	8024ce2 <g_labelDraw+0xba>
				textIndex < LABEL_TEXT_MAX_LENGTH &&
				pLabel->text[textIndex] != '\0')
		{
			ili9341_draw_char(attr, pLabel->text[textIndex++]);
 8024cbe:	8bfb      	ldrh	r3, [r7, #30]
 8024cc0:	1c5a      	adds	r2, r3, #1
 8024cc2:	83fa      	strh	r2, [r7, #30]
 8024cc4:	461a      	mov	r2, r3
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	4413      	add	r3, r2
 8024cca:	7b9b      	ldrb	r3, [r3, #14]
 8024ccc:	f107 020c 	add.w	r2, r7, #12
 8024cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8024cd2:	f7ff f90d 	bl	8023ef0 <ili9341_draw_char>
			attr.origin_x += attr.font->width;
 8024cd6:	8abb      	ldrh	r3, [r7, #20]
 8024cd8:	68fa      	ldr	r2, [r7, #12]
 8024cda:	7812      	ldrb	r2, [r2, #0]
 8024cdc:	4413      	add	r3, r2
 8024cde:	b29b      	uxth	r3, r3
 8024ce0:	82bb      	strh	r3, [r7, #20]
		while ((attr.origin_x + attr.font->width + 1) < (pLabel->xTop + lblWidth) &&
 8024ce2:	8abb      	ldrh	r3, [r7, #20]
 8024ce4:	461a      	mov	r2, r3
 8024ce6:	68fb      	ldr	r3, [r7, #12]
 8024ce8:	781b      	ldrb	r3, [r3, #0]
 8024cea:	4413      	add	r3, r2
 8024cec:	1c5a      	adds	r2, r3, #1
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	881b      	ldrh	r3, [r3, #0]
 8024cf2:	4619      	mov	r1, r3
 8024cf4:	8bbb      	ldrh	r3, [r7, #28]
 8024cf6:	440b      	add	r3, r1
				textIndex < LABEL_TEXT_MAX_LENGTH &&
 8024cf8:	429a      	cmp	r2, r3
 8024cfa:	da08      	bge.n	8024d0e <g_labelDraw+0xe6>
		while ((attr.origin_x + attr.font->width + 1) < (pLabel->xTop + lblWidth) &&
 8024cfc:	8bfb      	ldrh	r3, [r7, #30]
 8024cfe:	2b3b      	cmp	r3, #59	@ 0x3b
 8024d00:	d805      	bhi.n	8024d0e <g_labelDraw+0xe6>
				pLabel->text[textIndex] != '\0')
 8024d02:	8bfb      	ldrh	r3, [r7, #30]
 8024d04:	687a      	ldr	r2, [r7, #4]
 8024d06:	4413      	add	r3, r2
 8024d08:	7b9b      	ldrb	r3, [r3, #14]
				textIndex < LABEL_TEXT_MAX_LENGTH &&
 8024d0a:	2b00      	cmp	r3, #0
 8024d0c:	d1d7      	bne.n	8024cbe <g_labelDraw+0x96>
		}
	}
	//(void_t) gos_mutexUnlock(&g_mutex);
}
 8024d0e:	bf00      	nop
 8024d10:	3720      	adds	r7, #32
 8024d12:	46bd      	mov	sp, r7
 8024d14:	bd80      	pop	{r7, pc}
 8024d16:	bf00      	nop
 8024d18:	0804003c 	.word	0x0804003c

08024d1c <g_labelSetText>:

void_t g_labelSetText (g_label_t* pLabel, char_t* text)
{
 8024d1c:	b580      	push	{r7, lr}
 8024d1e:	b082      	sub	sp, #8
 8024d20:	af00      	add	r7, sp, #0
 8024d22:	6078      	str	r0, [r7, #4]
 8024d24:	6039      	str	r1, [r7, #0]
	if (pLabel != NULL && text != NULL && pLabel->text != NULL)
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	d02e      	beq.n	8024d8a <g_labelSetText+0x6e>
 8024d2c:	683b      	ldr	r3, [r7, #0]
 8024d2e:	2b00      	cmp	r3, #0
 8024d30:	d02b      	beq.n	8024d8a <g_labelSetText+0x6e>
 8024d32:	687b      	ldr	r3, [r7, #4]
 8024d34:	330e      	adds	r3, #14
 8024d36:	2b00      	cmp	r3, #0
 8024d38:	d027      	beq.n	8024d8a <g_labelSetText+0x6e>
	{
		if (strcmp(text, pLabel->text) != 0)
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	330e      	adds	r3, #14
 8024d3e:	4619      	mov	r1, r3
 8024d40:	6838      	ldr	r0, [r7, #0]
 8024d42:	f7fb fa65 	bl	8020210 <strcmp>
 8024d46:	4603      	mov	r3, r0
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d01e      	beq.n	8024d8a <g_labelSetText+0x6e>
		{
			if (strlen(text) < LABEL_TEXT_MAX_LENGTH)
 8024d4c:	6838      	ldr	r0, [r7, #0]
 8024d4e:	f7fb fabf 	bl	80202d0 <strlen>
 8024d52:	4603      	mov	r3, r0
 8024d54:	2b3b      	cmp	r3, #59	@ 0x3b
 8024d56:	d818      	bhi.n	8024d8a <g_labelSetText+0x6e>
			{
				strcpy(pLabel->text, text);
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	330e      	adds	r3, #14
 8024d5c:	6839      	ldr	r1, [r7, #0]
 8024d5e:	4618      	mov	r0, r3
 8024d60:	f017 fa2f 	bl	803c1c2 <strcpy>
#include "g_window.h"
				if (((g_window_t*)(pLabel->pOwner))->zIndex == 0u)
 8024d64:	687b      	ldr	r3, [r7, #4]
 8024d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8024d68:	891b      	ldrh	r3, [r3, #8]
 8024d6a:	2b00      	cmp	r3, #0
 8024d6c:	d10d      	bne.n	8024d8a <g_labelSetText+0x6e>
				{
					if (gos_mutexLock(&g_mutex, LABEL_DRAW_MUTEX_TMO_MS) == GOS_SUCCESS)
 8024d6e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8024d72:	4808      	ldr	r0, [pc, #32]	@ (8024d94 <g_labelSetText+0x78>)
 8024d74:	f013 fc6c 	bl	8038650 <gos_mutexLock>
 8024d78:	4603      	mov	r3, r0
 8024d7a:	2b55      	cmp	r3, #85	@ 0x55
 8024d7c:	d102      	bne.n	8024d84 <g_labelSetText+0x68>
					{
						g_labelDraw(pLabel);
 8024d7e:	6878      	ldr	r0, [r7, #4]
 8024d80:	f7ff ff52 	bl	8024c28 <g_labelDraw>
					}
					(void_t) gos_mutexUnlock(&g_mutex);
 8024d84:	4803      	ldr	r0, [pc, #12]	@ (8024d94 <g_labelSetText+0x78>)
 8024d86:	f013 fd69 	bl	803885c <gos_mutexUnlock>
				}
			}
		}
	}
}
 8024d8a:	bf00      	nop
 8024d8c:	3708      	adds	r7, #8
 8024d8e:	46bd      	mov	sp, r7
 8024d90:	bd80      	pop	{r7, pc}
 8024d92:	bf00      	nop
 8024d94:	200070ec 	.word	0x200070ec

08024d98 <g_windowInit>:

GOS_STATIC void_t g_windowCloseButtonPressedCallback (g_button_t* pButton);
GOS_STATIC void_t g_windowCloseButtonReleasedCallback (g_button_t* pButton);

void_t g_windowInit (g_window_t* pWindow, g_button_t* pCloseButton, g_label_t* pTitleLabel)
{
 8024d98:	b580      	push	{r7, lr}
 8024d9a:	b084      	sub	sp, #16
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	60f8      	str	r0, [r7, #12]
 8024da0:	60b9      	str	r1, [r7, #8]
 8024da2:	607a      	str	r2, [r7, #4]
	pCloseButton->backColor = ILI9341_RED;
 8024da4:	4b34      	ldr	r3, [pc, #208]	@ (8024e78 <g_windowInit+0xe0>)
 8024da6:	881a      	ldrh	r2, [r3, #0]
 8024da8:	68bb      	ldr	r3, [r7, #8]
 8024daa:	815a      	strh	r2, [r3, #10]
	pCloseButton->foreColor = ILI9341_WHITE;
 8024dac:	4b33      	ldr	r3, [pc, #204]	@ (8024e7c <g_windowInit+0xe4>)
 8024dae:	881a      	ldrh	r2, [r3, #0]
 8024db0:	68bb      	ldr	r3, [r7, #8]
 8024db2:	811a      	strh	r2, [r3, #8]
	pCloseButton->xTop = pWindow->xTop + pWindow->width - CLOSE_BUTTON_WIDTH;
 8024db4:	68fb      	ldr	r3, [r7, #12]
 8024db6:	881a      	ldrh	r2, [r3, #0]
 8024db8:	68fb      	ldr	r3, [r7, #12]
 8024dba:	889b      	ldrh	r3, [r3, #4]
 8024dbc:	4413      	add	r3, r2
 8024dbe:	b29b      	uxth	r3, r3
 8024dc0:	3b14      	subs	r3, #20
 8024dc2:	b29a      	uxth	r2, r3
 8024dc4:	68bb      	ldr	r3, [r7, #8]
 8024dc6:	801a      	strh	r2, [r3, #0]
	pCloseButton->yTop = pWindow->yTop;
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	885a      	ldrh	r2, [r3, #2]
 8024dcc:	68bb      	ldr	r3, [r7, #8]
 8024dce:	805a      	strh	r2, [r3, #2]
	pCloseButton->height = CLOSE_BUTTON_HEIGHT;
 8024dd0:	68bb      	ldr	r3, [r7, #8]
 8024dd2:	2214      	movs	r2, #20
 8024dd4:	80da      	strh	r2, [r3, #6]
	pCloseButton->width  = CLOSE_BUTTON_WIDTH;
 8024dd6:	68bb      	ldr	r3, [r7, #8]
 8024dd8:	2214      	movs	r2, #20
 8024dda:	809a      	strh	r2, [r3, #4]
	pCloseButton->pressed = g_windowCloseButtonPressedCallback;
 8024ddc:	68bb      	ldr	r3, [r7, #8]
 8024dde:	4a28      	ldr	r2, [pc, #160]	@ (8024e80 <g_windowInit+0xe8>)
 8024de0:	631a      	str	r2, [r3, #48]	@ 0x30
	pCloseButton->released = g_windowCloseButtonReleasedCallback;
 8024de2:	68bb      	ldr	r3, [r7, #8]
 8024de4:	4a27      	ldr	r2, [pc, #156]	@ (8024e84 <g_windowInit+0xec>)
 8024de6:	635a      	str	r2, [r3, #52]	@ 0x34
	pCloseButton->tabIndex = 255;
 8024de8:	68bb      	ldr	r3, [r7, #8]
 8024dea:	22ff      	movs	r2, #255	@ 0xff
 8024dec:	821a      	strh	r2, [r3, #16]
	pCloseButton->tabStop = GOS_TRUE;
 8024dee:	68bb      	ldr	r3, [r7, #8]
 8024df0:	2236      	movs	r2, #54	@ 0x36
 8024df2:	73da      	strb	r2, [r3, #15]
	pCloseButton->isEnabled = GOS_TRUE;
 8024df4:	68bb      	ldr	r3, [r7, #8]
 8024df6:	2236      	movs	r2, #54	@ 0x36
 8024df8:	731a      	strb	r2, [r3, #12]
	pCloseButton->isFocused = GOS_FALSE;
 8024dfa:	68bb      	ldr	r3, [r7, #8]
 8024dfc:	2249      	movs	r2, #73	@ 0x49
 8024dfe:	739a      	strb	r2, [r3, #14]
	pCloseButton->isVisible = GOS_TRUE;
 8024e00:	68bb      	ldr	r3, [r7, #8]
 8024e02:	2236      	movs	r2, #54	@ 0x36
 8024e04:	735a      	strb	r2, [r3, #13]
	strcpy(pCloseButton->text, "X");
 8024e06:	68bb      	ldr	r3, [r7, #8]
 8024e08:	3312      	adds	r3, #18
 8024e0a:	491f      	ldr	r1, [pc, #124]	@ (8024e88 <g_windowInit+0xf0>)
 8024e0c:	461a      	mov	r2, r3
 8024e0e:	460b      	mov	r3, r1
 8024e10:	881b      	ldrh	r3, [r3, #0]
 8024e12:	8013      	strh	r3, [r2, #0]
	g_windowAddButton(pWindow, pCloseButton);
 8024e14:	68b9      	ldr	r1, [r7, #8]
 8024e16:	68f8      	ldr	r0, [r7, #12]
 8024e18:	f000 f9a6 	bl	8025168 <g_windowAddButton>

	pTitleLabel->foreColor = ILI9341_WHITE;
 8024e1c:	4b17      	ldr	r3, [pc, #92]	@ (8024e7c <g_windowInit+0xe4>)
 8024e1e:	881a      	ldrh	r2, [r3, #0]
 8024e20:	687b      	ldr	r3, [r7, #4]
 8024e22:	811a      	strh	r2, [r3, #8]
	pTitleLabel->backColor = ILI9341_BLUE;
 8024e24:	4b19      	ldr	r3, [pc, #100]	@ (8024e8c <g_windowInit+0xf4>)
 8024e26:	881a      	ldrh	r2, [r3, #0]
 8024e28:	687b      	ldr	r3, [r7, #4]
 8024e2a:	815a      	strh	r2, [r3, #10]
	pTitleLabel->xTop = pWindow->xTop + 3;
 8024e2c:	68fb      	ldr	r3, [r7, #12]
 8024e2e:	881b      	ldrh	r3, [r3, #0]
 8024e30:	3303      	adds	r3, #3
 8024e32:	b29a      	uxth	r2, r3
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	801a      	strh	r2, [r3, #0]
	pTitleLabel->yTop = pWindow->yTop + 3;
 8024e38:	68fb      	ldr	r3, [r7, #12]
 8024e3a:	885b      	ldrh	r3, [r3, #2]
 8024e3c:	3303      	adds	r3, #3
 8024e3e:	b29a      	uxth	r2, r3
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	805a      	strh	r2, [r3, #2]
	pTitleLabel->height = LABEL_AUTO_HEIGHT;
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024e4a:	80da      	strh	r2, [r3, #6]
	pTitleLabel->width  = LABEL_AUTO_WIDTH;
 8024e4c:	687b      	ldr	r3, [r7, #4]
 8024e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024e52:	809a      	strh	r2, [r3, #4]
	strcpy(pTitleLabel->text, pWindow->title);
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	f103 020e 	add.w	r2, r3, #14
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	330e      	adds	r3, #14
 8024e5e:	4619      	mov	r1, r3
 8024e60:	4610      	mov	r0, r2
 8024e62:	f017 f9ae 	bl	803c1c2 <strcpy>
	g_windowAddLabel(pWindow, pTitleLabel);
 8024e66:	6879      	ldr	r1, [r7, #4]
 8024e68:	68f8      	ldr	r0, [r7, #12]
 8024e6a:	f000 f9a3 	bl	80251b4 <g_windowAddLabel>
}
 8024e6e:	bf00      	nop
 8024e70:	3710      	adds	r7, #16
 8024e72:	46bd      	mov	sp, r7
 8024e74:	bd80      	pop	{r7, pc}
 8024e76:	bf00      	nop
 8024e78:	080407b0 	.word	0x080407b0
 8024e7c:	080407b4 	.word	0x080407b4
 8024e80:	08025241 	.word	0x08025241
 8024e84:	08025255 	.word	0x08025255
 8024e88:	0803e7a8 	.word	0x0803e7a8
 8024e8c:	080407ae 	.word	0x080407ae

08024e90 <g_windowDraw>:

void_t g_windowDraw (g_window_t* pWindow)
{
 8024e90:	b590      	push	{r4, r7, lr}
 8024e92:	b087      	sub	sp, #28
 8024e94:	af02      	add	r7, sp, #8
 8024e96:	6078      	str	r0, [r7, #4]
	if (gos_mutexLock(&g_mutex, G_MUTEX_TMO_MS) == GOS_SUCCESS)
 8024e98:	f241 3188 	movw	r1, #5000	@ 0x1388
 8024e9c:	4842      	ldr	r0, [pc, #264]	@ (8024fa8 <g_windowDraw+0x118>)
 8024e9e:	f013 fbd7 	bl	8038650 <gos_mutexLock>
 8024ea2:	4603      	mov	r3, r0
 8024ea4:	2b55      	cmp	r3, #85	@ 0x55
 8024ea6:	d17a      	bne.n	8024f9e <g_windowDraw+0x10e>
	{
		//u16_t textIndex = 0u;
		u8_t controlIndex = 0u;
 8024ea8:	2300      	movs	r3, #0
 8024eaa:	73fb      	strb	r3, [r7, #15]

		// Draw header line.
		ili9341_fill_rect(ILI9341_BLUE, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8024eac:	4b3f      	ldr	r3, [pc, #252]	@ (8024fac <g_windowDraw+0x11c>)
 8024eae:	8818      	ldrh	r0, [r3, #0]
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	881b      	ldrh	r3, [r3, #0]
 8024eb4:	b219      	sxth	r1, r3
 8024eb6:	687b      	ldr	r3, [r7, #4]
 8024eb8:	885b      	ldrh	r3, [r3, #2]
 8024eba:	b21a      	sxth	r2, r3
 8024ebc:	687b      	ldr	r3, [r7, #4]
 8024ebe:	889b      	ldrh	r3, [r3, #4]
 8024ec0:	2414      	movs	r4, #20
 8024ec2:	9400      	str	r4, [sp, #0]
 8024ec4:	f7fe ff7a 	bl	8023dbc <ili9341_fill_rect>
		ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8024ec8:	4b39      	ldr	r3, [pc, #228]	@ (8024fb0 <g_windowDraw+0x120>)
 8024eca:	8818      	ldrh	r0, [r3, #0]
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	881b      	ldrh	r3, [r3, #0]
 8024ed0:	b219      	sxth	r1, r3
 8024ed2:	687b      	ldr	r3, [r7, #4]
 8024ed4:	885b      	ldrh	r3, [r3, #2]
 8024ed6:	b21a      	sxth	r2, r3
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	889b      	ldrh	r3, [r3, #4]
 8024edc:	2414      	movs	r4, #20
 8024ede:	9400      	str	r4, [sp, #0]
 8024ee0:	f7fe ff04 	bl	8023cec <ili9341_draw_rect>

		// Draw window frame.
		ili9341_fill_rect(pWindow->backColor, pWindow->xTop, pWindow->yTop + CLOSE_BUTTON_HEIGHT, pWindow->width, pWindow->height);
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	8958      	ldrh	r0, [r3, #10]
 8024ee8:	687b      	ldr	r3, [r7, #4]
 8024eea:	881b      	ldrh	r3, [r3, #0]
 8024eec:	b219      	sxth	r1, r3
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	885b      	ldrh	r3, [r3, #2]
 8024ef2:	3314      	adds	r3, #20
 8024ef4:	b29b      	uxth	r3, r3
 8024ef6:	b21a      	sxth	r2, r3
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	889c      	ldrh	r4, [r3, #4]
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	88db      	ldrh	r3, [r3, #6]
 8024f00:	9300      	str	r3, [sp, #0]
 8024f02:	4623      	mov	r3, r4
 8024f04:	f7fe ff5a 	bl	8023dbc <ili9341_fill_rect>
		ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop + CLOSE_BUTTON_HEIGHT, pWindow->width, pWindow->height);
 8024f08:	4b29      	ldr	r3, [pc, #164]	@ (8024fb0 <g_windowDraw+0x120>)
 8024f0a:	8818      	ldrh	r0, [r3, #0]
 8024f0c:	687b      	ldr	r3, [r7, #4]
 8024f0e:	881b      	ldrh	r3, [r3, #0]
 8024f10:	b219      	sxth	r1, r3
 8024f12:	687b      	ldr	r3, [r7, #4]
 8024f14:	885b      	ldrh	r3, [r3, #2]
 8024f16:	3314      	adds	r3, #20
 8024f18:	b29b      	uxth	r3, r3
 8024f1a:	b21a      	sxth	r2, r3
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	889c      	ldrh	r4, [r3, #4]
 8024f20:	687b      	ldr	r3, [r7, #4]
 8024f22:	88db      	ldrh	r3, [r3, #6]
 8024f24:	9300      	str	r3, [sp, #0]
 8024f26:	4623      	mov	r3, r4
 8024f28:	f7fe fee0 	bl	8023cec <ili9341_draw_rect>

		// Draw buttons.
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 8024f2c:	2300      	movs	r3, #0
 8024f2e:	73fb      	strb	r3, [r7, #15]
 8024f30:	e011      	b.n	8024f56 <g_windowDraw+0xc6>
		{
			if (pWindow->pButtons[controlIndex] != NULL)
 8024f32:	7bfa      	ldrb	r2, [r7, #15]
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	320a      	adds	r2, #10
 8024f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024f3c:	2b00      	cmp	r3, #0
 8024f3e:	d00e      	beq.n	8024f5e <g_windowDraw+0xce>
			{
				g_buttonDraw(pWindow->pButtons[controlIndex]);
 8024f40:	7bfa      	ldrb	r2, [r7, #15]
 8024f42:	687b      	ldr	r3, [r7, #4]
 8024f44:	320a      	adds	r2, #10
 8024f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024f4a:	4618      	mov	r0, r3
 8024f4c:	f7ff fc26 	bl	802479c <g_buttonDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 8024f50:	7bfb      	ldrb	r3, [r7, #15]
 8024f52:	3301      	adds	r3, #1
 8024f54:	73fb      	strb	r3, [r7, #15]
 8024f56:	7bfb      	ldrb	r3, [r7, #15]
 8024f58:	2b04      	cmp	r3, #4
 8024f5a:	d9ea      	bls.n	8024f32 <g_windowDraw+0xa2>
 8024f5c:	e000      	b.n	8024f60 <g_windowDraw+0xd0>
			}
			else
			{
				break;
 8024f5e:	bf00      	nop
			}
		}

		// Draw labels.
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 8024f60:	2300      	movs	r3, #0
 8024f62:	73fb      	strb	r3, [r7, #15]
 8024f64:	e013      	b.n	8024f8e <g_windowDraw+0xfe>
		{
			if (pWindow->pLabels[controlIndex] != NULL)
 8024f66:	7bfb      	ldrb	r3, [r7, #15]
 8024f68:	687a      	ldr	r2, [r7, #4]
 8024f6a:	330e      	adds	r3, #14
 8024f6c:	009b      	lsls	r3, r3, #2
 8024f6e:	4413      	add	r3, r2
 8024f70:	685b      	ldr	r3, [r3, #4]
 8024f72:	2b00      	cmp	r3, #0
 8024f74:	d00f      	beq.n	8024f96 <g_windowDraw+0x106>
			{
				g_labelDraw(pWindow->pLabels[controlIndex]);
 8024f76:	7bfb      	ldrb	r3, [r7, #15]
 8024f78:	687a      	ldr	r2, [r7, #4]
 8024f7a:	330e      	adds	r3, #14
 8024f7c:	009b      	lsls	r3, r3, #2
 8024f7e:	4413      	add	r3, r2
 8024f80:	685b      	ldr	r3, [r3, #4]
 8024f82:	4618      	mov	r0, r3
 8024f84:	f7ff fe50 	bl	8024c28 <g_labelDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 8024f88:	7bfb      	ldrb	r3, [r7, #15]
 8024f8a:	3301      	adds	r3, #1
 8024f8c:	73fb      	strb	r3, [r7, #15]
 8024f8e:	7bfb      	ldrb	r3, [r7, #15]
 8024f90:	2b8f      	cmp	r3, #143	@ 0x8f
 8024f92:	d9e8      	bls.n	8024f66 <g_windowDraw+0xd6>
 8024f94:	e000      	b.n	8024f98 <g_windowDraw+0x108>
			}
			else
			{
				break;
 8024f96:	bf00      	nop
			}
		}

		(void_t) gos_mutexUnlock(&g_mutex);
 8024f98:	4803      	ldr	r0, [pc, #12]	@ (8024fa8 <g_windowDraw+0x118>)
 8024f9a:	f013 fc5f 	bl	803885c <gos_mutexUnlock>
	}
}
 8024f9e:	bf00      	nop
 8024fa0:	3714      	adds	r7, #20
 8024fa2:	46bd      	mov	sp, r7
 8024fa4:	bd90      	pop	{r4, r7, pc}
 8024fa6:	bf00      	nop
 8024fa8:	200070ec 	.word	0x200070ec
 8024fac:	080407ae 	.word	0x080407ae
 8024fb0:	080407aa 	.word	0x080407aa

08024fb4 <g_windowRefreshArea>:

void_t g_windowRefreshArea(g_window_t* pWindow, u16_t xTop, u16_t yTop, u16_t width, u16_t height)
{
 8024fb4:	b590      	push	{r4, r7, lr}
 8024fb6:	b089      	sub	sp, #36	@ 0x24
 8024fb8:	af02      	add	r7, sp, #8
 8024fba:	60f8      	str	r0, [r7, #12]
 8024fbc:	4608      	mov	r0, r1
 8024fbe:	4611      	mov	r1, r2
 8024fc0:	461a      	mov	r2, r3
 8024fc2:	4603      	mov	r3, r0
 8024fc4:	817b      	strh	r3, [r7, #10]
 8024fc6:	460b      	mov	r3, r1
 8024fc8:	813b      	strh	r3, [r7, #8]
 8024fca:	4613      	mov	r3, r2
 8024fcc:	80fb      	strh	r3, [r7, #6]
	if (gos_mutexLock(&g_mutex, G_MUTEX_TMO_MS) == GOS_SUCCESS)
 8024fce:	f241 3188 	movw	r1, #5000	@ 0x1388
 8024fd2:	4862      	ldr	r0, [pc, #392]	@ (802515c <g_windowRefreshArea+0x1a8>)
 8024fd4:	f013 fb3c 	bl	8038650 <gos_mutexLock>
 8024fd8:	4603      	mov	r3, r0
 8024fda:	2b55      	cmp	r3, #85	@ 0x55
 8024fdc:	f040 80b9 	bne.w	8025152 <g_windowRefreshArea+0x19e>
	{
		//u16_t textIndex = 0u;
		u8_t controlIndex = 0u;
 8024fe0:	2300      	movs	r3, #0
 8024fe2:	75fb      	strb	r3, [r7, #23]

		if (yTop < CLOSE_BUTTON_HEIGHT)
 8024fe4:	893b      	ldrh	r3, [r7, #8]
 8024fe6:	2b13      	cmp	r3, #19
 8024fe8:	d83e      	bhi.n	8025068 <g_windowRefreshArea+0xb4>
		{
			// Draw header line.
			ili9341_fill_rect(ILI9341_BLUE, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8024fea:	4b5d      	ldr	r3, [pc, #372]	@ (8025160 <g_windowRefreshArea+0x1ac>)
 8024fec:	8818      	ldrh	r0, [r3, #0]
 8024fee:	68fb      	ldr	r3, [r7, #12]
 8024ff0:	881b      	ldrh	r3, [r3, #0]
 8024ff2:	b219      	sxth	r1, r3
 8024ff4:	68fb      	ldr	r3, [r7, #12]
 8024ff6:	885b      	ldrh	r3, [r3, #2]
 8024ff8:	b21a      	sxth	r2, r3
 8024ffa:	68fb      	ldr	r3, [r7, #12]
 8024ffc:	889b      	ldrh	r3, [r3, #4]
 8024ffe:	2414      	movs	r4, #20
 8025000:	9400      	str	r4, [sp, #0]
 8025002:	f7fe fedb 	bl	8023dbc <ili9341_fill_rect>
			ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8025006:	4b57      	ldr	r3, [pc, #348]	@ (8025164 <g_windowRefreshArea+0x1b0>)
 8025008:	8818      	ldrh	r0, [r3, #0]
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	881b      	ldrh	r3, [r3, #0]
 802500e:	b219      	sxth	r1, r3
 8025010:	68fb      	ldr	r3, [r7, #12]
 8025012:	885b      	ldrh	r3, [r3, #2]
 8025014:	b21a      	sxth	r2, r3
 8025016:	68fb      	ldr	r3, [r7, #12]
 8025018:	889b      	ldrh	r3, [r3, #4]
 802501a:	2414      	movs	r4, #20
 802501c:	9400      	str	r4, [sp, #0]
 802501e:	f7fe fe65 	bl	8023cec <ili9341_draw_rect>

			// Draw window frame.
			ili9341_fill_rect(pWindow->backColor, xTop, CLOSE_BUTTON_HEIGHT, width, height - (CLOSE_BUTTON_HEIGHT - yTop));
 8025022:	68fb      	ldr	r3, [r7, #12]
 8025024:	8958      	ldrh	r0, [r3, #10]
 8025026:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802502a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 802502c:	893b      	ldrh	r3, [r7, #8]
 802502e:	4413      	add	r3, r2
 8025030:	b29b      	uxth	r3, r3
 8025032:	3b14      	subs	r3, #20
 8025034:	b29b      	uxth	r3, r3
 8025036:	88fa      	ldrh	r2, [r7, #6]
 8025038:	9300      	str	r3, [sp, #0]
 802503a:	4613      	mov	r3, r2
 802503c:	2214      	movs	r2, #20
 802503e:	f7fe febd 	bl	8023dbc <ili9341_fill_rect>
			ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop + CLOSE_BUTTON_HEIGHT, pWindow->width, pWindow->height);
 8025042:	4b48      	ldr	r3, [pc, #288]	@ (8025164 <g_windowRefreshArea+0x1b0>)
 8025044:	8818      	ldrh	r0, [r3, #0]
 8025046:	68fb      	ldr	r3, [r7, #12]
 8025048:	881b      	ldrh	r3, [r3, #0]
 802504a:	b219      	sxth	r1, r3
 802504c:	68fb      	ldr	r3, [r7, #12]
 802504e:	885b      	ldrh	r3, [r3, #2]
 8025050:	3314      	adds	r3, #20
 8025052:	b29b      	uxth	r3, r3
 8025054:	b21a      	sxth	r2, r3
 8025056:	68fb      	ldr	r3, [r7, #12]
 8025058:	889c      	ldrh	r4, [r3, #4]
 802505a:	68fb      	ldr	r3, [r7, #12]
 802505c:	88db      	ldrh	r3, [r3, #6]
 802505e:	9300      	str	r3, [sp, #0]
 8025060:	4623      	mov	r3, r4
 8025062:	f7fe fe43 	bl	8023cec <ili9341_draw_rect>
 8025066:	e00d      	b.n	8025084 <g_windowRefreshArea+0xd0>
			}*/
		}
		else
		{
			// Redraw background.
			ili9341_fill_rect(pWindow->backColor, xTop, yTop, width, height + CLOSE_BUTTON_HEIGHT);
 8025068:	68fb      	ldr	r3, [r7, #12]
 802506a:	8958      	ldrh	r0, [r3, #10]
 802506c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8025070:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8025074:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8025076:	3314      	adds	r3, #20
 8025078:	b29b      	uxth	r3, r3
 802507a:	88fc      	ldrh	r4, [r7, #6]
 802507c:	9300      	str	r3, [sp, #0]
 802507e:	4623      	mov	r3, r4
 8025080:	f7fe fe9c 	bl	8023dbc <ili9341_fill_rect>
		}

		// Draw buttons.
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 8025084:	2300      	movs	r3, #0
 8025086:	75fb      	strb	r3, [r7, #23]
 8025088:	e029      	b.n	80250de <g_windowRefreshArea+0x12a>
		{
			if (pWindow->pButtons[controlIndex] != NULL &&
 802508a:	7dfa      	ldrb	r2, [r7, #23]
 802508c:	68fb      	ldr	r3, [r7, #12]
 802508e:	320a      	adds	r2, #10
 8025090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025094:	2b00      	cmp	r3, #0
 8025096:	d025      	beq.n	80250e4 <g_windowRefreshArea+0x130>
			   ((pWindow->pButtons[controlIndex]->xTop < (xTop + width)) ||
 8025098:	7dfa      	ldrb	r2, [r7, #23]
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	320a      	adds	r2, #10
 802509e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80250a2:	881b      	ldrh	r3, [r3, #0]
 80250a4:	4619      	mov	r1, r3
 80250a6:	897a      	ldrh	r2, [r7, #10]
 80250a8:	88fb      	ldrh	r3, [r7, #6]
 80250aa:	4413      	add	r3, r2
			if (pWindow->pButtons[controlIndex] != NULL &&
 80250ac:	4299      	cmp	r1, r3
 80250ae:	db0b      	blt.n	80250c8 <g_windowRefreshArea+0x114>
		       ((pWindow->pButtons[controlIndex]->xTop + width) > xTop)
 80250b0:	7dfa      	ldrb	r2, [r7, #23]
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	320a      	adds	r2, #10
 80250b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80250ba:	881b      	ldrh	r3, [r3, #0]
 80250bc:	461a      	mov	r2, r3
 80250be:	88fb      	ldrh	r3, [r7, #6]
 80250c0:	441a      	add	r2, r3
 80250c2:	897b      	ldrh	r3, [r7, #10]
			   ((pWindow->pButtons[controlIndex]->xTop < (xTop + width)) ||
 80250c4:	429a      	cmp	r2, r3
 80250c6:	dd0d      	ble.n	80250e4 <g_windowRefreshArea+0x130>
			   ))
			{
				// TODO y-axis check is missing.
				g_buttonDraw(pWindow->pButtons[controlIndex]);
 80250c8:	7dfa      	ldrb	r2, [r7, #23]
 80250ca:	68fb      	ldr	r3, [r7, #12]
 80250cc:	320a      	adds	r2, #10
 80250ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80250d2:	4618      	mov	r0, r3
 80250d4:	f7ff fb62 	bl	802479c <g_buttonDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 80250d8:	7dfb      	ldrb	r3, [r7, #23]
 80250da:	3301      	adds	r3, #1
 80250dc:	75fb      	strb	r3, [r7, #23]
 80250de:	7dfb      	ldrb	r3, [r7, #23]
 80250e0:	2b04      	cmp	r3, #4
 80250e2:	d9d2      	bls.n	802508a <g_windowRefreshArea+0xd6>
				break;
			}
		}

		// Draw labels.
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 80250e4:	2300      	movs	r3, #0
 80250e6:	75fb      	strb	r3, [r7, #23]
 80250e8:	e02d      	b.n	8025146 <g_windowRefreshArea+0x192>
		{
			if (pWindow->pLabels[controlIndex] != NULL &&
 80250ea:	7dfb      	ldrb	r3, [r7, #23]
 80250ec:	68fa      	ldr	r2, [r7, #12]
 80250ee:	330e      	adds	r3, #14
 80250f0:	009b      	lsls	r3, r3, #2
 80250f2:	4413      	add	r3, r2
 80250f4:	685b      	ldr	r3, [r3, #4]
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	d028      	beq.n	802514c <g_windowRefreshArea+0x198>
		       ((pWindow->pLabels[controlIndex]->xTop < (xTop + width)) ||
 80250fa:	7dfb      	ldrb	r3, [r7, #23]
 80250fc:	68fa      	ldr	r2, [r7, #12]
 80250fe:	330e      	adds	r3, #14
 8025100:	009b      	lsls	r3, r3, #2
 8025102:	4413      	add	r3, r2
 8025104:	685b      	ldr	r3, [r3, #4]
 8025106:	881b      	ldrh	r3, [r3, #0]
 8025108:	4619      	mov	r1, r3
 802510a:	897a      	ldrh	r2, [r7, #10]
 802510c:	88fb      	ldrh	r3, [r7, #6]
 802510e:	4413      	add	r3, r2
			if (pWindow->pLabels[controlIndex] != NULL &&
 8025110:	4299      	cmp	r1, r3
 8025112:	db0c      	blt.n	802512e <g_windowRefreshArea+0x17a>
			   ((pWindow->pLabels[controlIndex]->xTop + width) > xTop)
 8025114:	7dfb      	ldrb	r3, [r7, #23]
 8025116:	68fa      	ldr	r2, [r7, #12]
 8025118:	330e      	adds	r3, #14
 802511a:	009b      	lsls	r3, r3, #2
 802511c:	4413      	add	r3, r2
 802511e:	685b      	ldr	r3, [r3, #4]
 8025120:	881b      	ldrh	r3, [r3, #0]
 8025122:	461a      	mov	r2, r3
 8025124:	88fb      	ldrh	r3, [r7, #6]
 8025126:	441a      	add	r2, r3
 8025128:	897b      	ldrh	r3, [r7, #10]
		       ((pWindow->pLabels[controlIndex]->xTop < (xTop + width)) ||
 802512a:	429a      	cmp	r2, r3
 802512c:	dd0e      	ble.n	802514c <g_windowRefreshArea+0x198>
			   ))
			{
				g_labelDraw(pWindow->pLabels[controlIndex]);
 802512e:	7dfb      	ldrb	r3, [r7, #23]
 8025130:	68fa      	ldr	r2, [r7, #12]
 8025132:	330e      	adds	r3, #14
 8025134:	009b      	lsls	r3, r3, #2
 8025136:	4413      	add	r3, r2
 8025138:	685b      	ldr	r3, [r3, #4]
 802513a:	4618      	mov	r0, r3
 802513c:	f7ff fd74 	bl	8024c28 <g_labelDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 8025140:	7dfb      	ldrb	r3, [r7, #23]
 8025142:	3301      	adds	r3, #1
 8025144:	75fb      	strb	r3, [r7, #23]
 8025146:	7dfb      	ldrb	r3, [r7, #23]
 8025148:	2b8f      	cmp	r3, #143	@ 0x8f
 802514a:	d9ce      	bls.n	80250ea <g_windowRefreshArea+0x136>
			{
				break;
			}
		}

		(void_t) gos_mutexUnlock(&g_mutex);
 802514c:	4803      	ldr	r0, [pc, #12]	@ (802515c <g_windowRefreshArea+0x1a8>)
 802514e:	f013 fb85 	bl	803885c <gos_mutexUnlock>
	}
}
 8025152:	bf00      	nop
 8025154:	371c      	adds	r7, #28
 8025156:	46bd      	mov	sp, r7
 8025158:	bd90      	pop	{r4, r7, pc}
 802515a:	bf00      	nop
 802515c:	200070ec 	.word	0x200070ec
 8025160:	080407ae 	.word	0x080407ae
 8025164:	080407aa 	.word	0x080407aa

08025168 <g_windowAddButton>:

void_t g_windowAddButton (g_window_t* pWindow, g_button_t* pButton)
{
 8025168:	b480      	push	{r7}
 802516a:	b085      	sub	sp, #20
 802516c:	af00      	add	r7, sp, #0
 802516e:	6078      	str	r0, [r7, #4]
 8025170:	6039      	str	r1, [r7, #0]
	u8_t buttonIndex = 0u;
 8025172:	2300      	movs	r3, #0
 8025174:	73fb      	strb	r3, [r7, #15]
	// TODO check if button is within window

	for (buttonIndex = 0u; buttonIndex < WINDOW_BUTTONS_MAX_NUMBER; buttonIndex++)
 8025176:	2300      	movs	r3, #0
 8025178:	73fb      	strb	r3, [r7, #15]
 802517a:	e013      	b.n	80251a4 <g_windowAddButton+0x3c>
	{
		if (pWindow->pButtons[buttonIndex] == NULL)
 802517c:	7bfa      	ldrb	r2, [r7, #15]
 802517e:	687b      	ldr	r3, [r7, #4]
 8025180:	320a      	adds	r2, #10
 8025182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025186:	2b00      	cmp	r3, #0
 8025188:	d109      	bne.n	802519e <g_windowAddButton+0x36>
		{
			pWindow->pButtons[buttonIndex] = pButton;
 802518a:	7bfa      	ldrb	r2, [r7, #15]
 802518c:	687b      	ldr	r3, [r7, #4]
 802518e:	320a      	adds	r2, #10
 8025190:	6839      	ldr	r1, [r7, #0]
 8025192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pButton->pOwner = (void_t*)pWindow;
 8025196:	683b      	ldr	r3, [r7, #0]
 8025198:	687a      	ldr	r2, [r7, #4]
 802519a:	62da      	str	r2, [r3, #44]	@ 0x2c
			return;
 802519c:	e005      	b.n	80251aa <g_windowAddButton+0x42>
	for (buttonIndex = 0u; buttonIndex < WINDOW_BUTTONS_MAX_NUMBER; buttonIndex++)
 802519e:	7bfb      	ldrb	r3, [r7, #15]
 80251a0:	3301      	adds	r3, #1
 80251a2:	73fb      	strb	r3, [r7, #15]
 80251a4:	7bfb      	ldrb	r3, [r7, #15]
 80251a6:	2b04      	cmp	r3, #4
 80251a8:	d9e8      	bls.n	802517c <g_windowAddButton+0x14>
		}
	}
}
 80251aa:	3714      	adds	r7, #20
 80251ac:	46bd      	mov	sp, r7
 80251ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251b2:	4770      	bx	lr

080251b4 <g_windowAddLabel>:

void_t g_windowAddLabel (g_window_t* pWindow, g_label_t* pLabel)
{
 80251b4:	b480      	push	{r7}
 80251b6:	b085      	sub	sp, #20
 80251b8:	af00      	add	r7, sp, #0
 80251ba:	6078      	str	r0, [r7, #4]
 80251bc:	6039      	str	r1, [r7, #0]
	u8_t labelIndex = 0u;
 80251be:	2300      	movs	r3, #0
 80251c0:	73fb      	strb	r3, [r7, #15]
	// TODO check if label is within window

	for (labelIndex = 0u; labelIndex < WINDOW_LABELS_MAX_NUMBER; labelIndex++)
 80251c2:	2300      	movs	r3, #0
 80251c4:	73fb      	strb	r3, [r7, #15]
 80251c6:	e015      	b.n	80251f4 <g_windowAddLabel+0x40>
	{
		if (pWindow->pLabels[labelIndex] == NULL)
 80251c8:	7bfb      	ldrb	r3, [r7, #15]
 80251ca:	687a      	ldr	r2, [r7, #4]
 80251cc:	330e      	adds	r3, #14
 80251ce:	009b      	lsls	r3, r3, #2
 80251d0:	4413      	add	r3, r2
 80251d2:	685b      	ldr	r3, [r3, #4]
 80251d4:	2b00      	cmp	r3, #0
 80251d6:	d10a      	bne.n	80251ee <g_windowAddLabel+0x3a>
		{
			pWindow->pLabels[labelIndex] = pLabel;
 80251d8:	7bfb      	ldrb	r3, [r7, #15]
 80251da:	687a      	ldr	r2, [r7, #4]
 80251dc:	330e      	adds	r3, #14
 80251de:	009b      	lsls	r3, r3, #2
 80251e0:	4413      	add	r3, r2
 80251e2:	683a      	ldr	r2, [r7, #0]
 80251e4:	605a      	str	r2, [r3, #4]
			pLabel->pOwner = (void_t*)pWindow;
 80251e6:	683b      	ldr	r3, [r7, #0]
 80251e8:	687a      	ldr	r2, [r7, #4]
 80251ea:	64da      	str	r2, [r3, #76]	@ 0x4c
			return;
 80251ec:	e005      	b.n	80251fa <g_windowAddLabel+0x46>
	for (labelIndex = 0u; labelIndex < WINDOW_LABELS_MAX_NUMBER; labelIndex++)
 80251ee:	7bfb      	ldrb	r3, [r7, #15]
 80251f0:	3301      	adds	r3, #1
 80251f2:	73fb      	strb	r3, [r7, #15]
 80251f4:	7bfb      	ldrb	r3, [r7, #15]
 80251f6:	2b8f      	cmp	r3, #143	@ 0x8f
 80251f8:	d9e6      	bls.n	80251c8 <g_windowAddLabel+0x14>
		}
	}
}
 80251fa:	3714      	adds	r7, #20
 80251fc:	46bd      	mov	sp, r7
 80251fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025202:	4770      	bx	lr

08025204 <g_windowHide>:
		gos_messageTx(&windowShownMessage);
	}
}

void_t g_windowHide (g_window_t* pWindow)
{
 8025204:	b580      	push	{r7, lr}
 8025206:	b082      	sub	sp, #8
 8025208:	af00      	add	r7, sp, #0
 802520a:	6078      	str	r0, [r7, #4]
	if (pWindow->isVisible == GOS_TRUE)
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	7b5b      	ldrb	r3, [r3, #13]
 8025210:	2b36      	cmp	r3, #54	@ 0x36
 8025212:	d10f      	bne.n	8025234 <g_windowHide+0x30>
	{
		pWindow->isVisible = GOS_FALSE;
 8025214:	687b      	ldr	r3, [r7, #4]
 8025216:	2249      	movs	r2, #73	@ 0x49
 8025218:	735a      	strb	r2, [r3, #13]
		g_inactivateWindow(pWindow);
 802521a:	687b      	ldr	r3, [r7, #4]
 802521c:	4618      	mov	r0, r3
 802521e:	f7ff fbcf 	bl	80249c0 <g_inactivateWindow>
		(void_t) memcpy((void_t*)&windowHiddenMessage.messageBytes[1], (void_t*)&pWindow, sizeof(pWindow));
 8025222:	687b      	ldr	r3, [r7, #4]
 8025224:	4a05      	ldr	r2, [pc, #20]	@ (802523c <g_windowHide+0x38>)
 8025226:	6053      	str	r3, [r2, #4]
		windowHiddenMessage.messageSize = 1 + sizeof(pWindow);
 8025228:	4b04      	ldr	r3, [pc, #16]	@ (802523c <g_windowHide+0x38>)
 802522a:	2205      	movs	r2, #5
 802522c:	709a      	strb	r2, [r3, #2]
		gos_messageTx(&windowHiddenMessage);
 802522e:	4803      	ldr	r0, [pc, #12]	@ (802523c <g_windowHide+0x38>)
 8025230:	f013 f896 	bl	8038360 <gos_messageTx>
	}
}
 8025234:	bf00      	nop
 8025236:	3708      	adds	r7, #8
 8025238:	46bd      	mov	sp, r7
 802523a:	bd80      	pop	{r7, pc}
 802523c:	2000154c 	.word	0x2000154c

08025240 <g_windowCloseButtonPressedCallback>:

GOS_STATIC void_t g_windowCloseButtonPressedCallback (g_button_t* pButton)
{
 8025240:	b480      	push	{r7}
 8025242:	b083      	sub	sp, #12
 8025244:	af00      	add	r7, sp, #0
 8025246:	6078      	str	r0, [r7, #4]
	//g_buttonDrawClick(pButton);
}
 8025248:	bf00      	nop
 802524a:	370c      	adds	r7, #12
 802524c:	46bd      	mov	sp, r7
 802524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025252:	4770      	bx	lr

08025254 <g_windowCloseButtonReleasedCallback>:

GOS_STATIC void_t g_windowCloseButtonReleasedCallback (g_button_t* pButton)
{
 8025254:	b580      	push	{r7, lr}
 8025256:	b082      	sub	sp, #8
 8025258:	af00      	add	r7, sp, #0
 802525a:	6078      	str	r0, [r7, #4]
	//g_buttonDraw(pButton);
	g_windowHide((g_window_t*)pButton->pOwner);
 802525c:	687b      	ldr	r3, [r7, #4]
 802525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025260:	4618      	mov	r0, r3
 8025262:	f7ff ffcf 	bl	8025204 <g_windowHide>
}
 8025266:	bf00      	nop
 8025268:	3708      	adds	r7, #8
 802526a:	46bd      	mov	sp, r7
 802526c:	bd80      	pop	{r7, pc}
	...

08025270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8025270:	b580      	push	{r7, lr}
 8025272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8025274:	4b0e      	ldr	r3, [pc, #56]	@ (80252b0 <HAL_Init+0x40>)
 8025276:	681b      	ldr	r3, [r3, #0]
 8025278:	4a0d      	ldr	r2, [pc, #52]	@ (80252b0 <HAL_Init+0x40>)
 802527a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802527e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8025280:	4b0b      	ldr	r3, [pc, #44]	@ (80252b0 <HAL_Init+0x40>)
 8025282:	681b      	ldr	r3, [r3, #0]
 8025284:	4a0a      	ldr	r2, [pc, #40]	@ (80252b0 <HAL_Init+0x40>)
 8025286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802528a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802528c:	4b08      	ldr	r3, [pc, #32]	@ (80252b0 <HAL_Init+0x40>)
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	4a07      	ldr	r2, [pc, #28]	@ (80252b0 <HAL_Init+0x40>)
 8025292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8025296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8025298:	2003      	movs	r0, #3
 802529a:	f000 fe81 	bl	8025fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802529e:	2000      	movs	r0, #0
 80252a0:	f000 f810 	bl	80252c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80252a4:	f000 f806 	bl	80252b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80252a8:	2300      	movs	r3, #0
}
 80252aa:	4618      	mov	r0, r3
 80252ac:	bd80      	pop	{r7, pc}
 80252ae:	bf00      	nop
 80252b0:	40023c00 	.word	0x40023c00

080252b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80252b4:	b480      	push	{r7}
 80252b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80252b8:	bf00      	nop
 80252ba:	46bd      	mov	sp, r7
 80252bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252c0:	4770      	bx	lr
	...

080252c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80252c4:	b580      	push	{r7, lr}
 80252c6:	b082      	sub	sp, #8
 80252c8:	af00      	add	r7, sp, #0
 80252ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80252cc:	4b12      	ldr	r3, [pc, #72]	@ (8025318 <HAL_InitTick+0x54>)
 80252ce:	681a      	ldr	r2, [r3, #0]
 80252d0:	4b12      	ldr	r3, [pc, #72]	@ (802531c <HAL_InitTick+0x58>)
 80252d2:	781b      	ldrb	r3, [r3, #0]
 80252d4:	4619      	mov	r1, r3
 80252d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80252da:	fbb3 f3f1 	udiv	r3, r3, r1
 80252de:	fbb2 f3f3 	udiv	r3, r2, r3
 80252e2:	4618      	mov	r0, r3
 80252e4:	f000 fe91 	bl	802600a <HAL_SYSTICK_Config>
 80252e8:	4603      	mov	r3, r0
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d001      	beq.n	80252f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80252ee:	2301      	movs	r3, #1
 80252f0:	e00e      	b.n	8025310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80252f2:	687b      	ldr	r3, [r7, #4]
 80252f4:	2b0f      	cmp	r3, #15
 80252f6:	d80a      	bhi.n	802530e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80252f8:	2200      	movs	r2, #0
 80252fa:	6879      	ldr	r1, [r7, #4]
 80252fc:	f04f 30ff 	mov.w	r0, #4294967295
 8025300:	f000 fe59 	bl	8025fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8025304:	4a06      	ldr	r2, [pc, #24]	@ (8025320 <HAL_InitTick+0x5c>)
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802530a:	2300      	movs	r3, #0
 802530c:	e000      	b.n	8025310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802530e:	2301      	movs	r3, #1
}
 8025310:	4618      	mov	r0, r3
 8025312:	3708      	adds	r7, #8
 8025314:	46bd      	mov	sp, r7
 8025316:	bd80      	pop	{r7, pc}
 8025318:	20001028 	.word	0x20001028
 802531c:	200015a4 	.word	0x200015a4
 8025320:	200015a0 	.word	0x200015a0

08025324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8025324:	b480      	push	{r7}
 8025326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8025328:	4b06      	ldr	r3, [pc, #24]	@ (8025344 <HAL_IncTick+0x20>)
 802532a:	781b      	ldrb	r3, [r3, #0]
 802532c:	461a      	mov	r2, r3
 802532e:	4b06      	ldr	r3, [pc, #24]	@ (8025348 <HAL_IncTick+0x24>)
 8025330:	681b      	ldr	r3, [r3, #0]
 8025332:	4413      	add	r3, r2
 8025334:	4a04      	ldr	r2, [pc, #16]	@ (8025348 <HAL_IncTick+0x24>)
 8025336:	6013      	str	r3, [r2, #0]
}
 8025338:	bf00      	nop
 802533a:	46bd      	mov	sp, r7
 802533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025340:	4770      	bx	lr
 8025342:	bf00      	nop
 8025344:	200015a4 	.word	0x200015a4
 8025348:	20007114 	.word	0x20007114

0802534c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802534c:	b480      	push	{r7}
 802534e:	af00      	add	r7, sp, #0
  return uwTick;
 8025350:	4b03      	ldr	r3, [pc, #12]	@ (8025360 <HAL_GetTick+0x14>)
 8025352:	681b      	ldr	r3, [r3, #0]
}
 8025354:	4618      	mov	r0, r3
 8025356:	46bd      	mov	sp, r7
 8025358:	f85d 7b04 	ldr.w	r7, [sp], #4
 802535c:	4770      	bx	lr
 802535e:	bf00      	nop
 8025360:	20007114 	.word	0x20007114

08025364 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8025364:	b580      	push	{r7, lr}
 8025366:	b084      	sub	sp, #16
 8025368:	af00      	add	r7, sp, #0
 802536a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802536c:	2300      	movs	r3, #0
 802536e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	2b00      	cmp	r3, #0
 8025374:	d101      	bne.n	802537a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8025376:	2301      	movs	r3, #1
 8025378:	e033      	b.n	80253e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802537e:	2b00      	cmp	r3, #0
 8025380:	d109      	bne.n	8025396 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8025382:	6878      	ldr	r0, [r7, #4]
 8025384:	f008 fea6 	bl	802e0d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8025388:	687b      	ldr	r3, [r7, #4]
 802538a:	2200      	movs	r2, #0
 802538c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802538e:	687b      	ldr	r3, [r7, #4]
 8025390:	2200      	movs	r2, #0
 8025392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8025396:	687b      	ldr	r3, [r7, #4]
 8025398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802539a:	f003 0310 	and.w	r3, r3, #16
 802539e:	2b00      	cmp	r3, #0
 80253a0:	d118      	bne.n	80253d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80253a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80253aa:	f023 0302 	bic.w	r3, r3, #2
 80253ae:	f043 0202 	orr.w	r2, r3, #2
 80253b2:	687b      	ldr	r3, [r7, #4]
 80253b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80253b6:	6878      	ldr	r0, [r7, #4]
 80253b8:	f000 fb9a 	bl	8025af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	2200      	movs	r2, #0
 80253c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80253c2:	687b      	ldr	r3, [r7, #4]
 80253c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80253c6:	f023 0303 	bic.w	r3, r3, #3
 80253ca:	f043 0201 	orr.w	r2, r3, #1
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80253d2:	e001      	b.n	80253d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80253d4:	2301      	movs	r3, #1
 80253d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	2200      	movs	r2, #0
 80253dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80253e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80253e2:	4618      	mov	r0, r3
 80253e4:	3710      	adds	r7, #16
 80253e6:	46bd      	mov	sp, r7
 80253e8:	bd80      	pop	{r7, pc}

080253ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80253ea:	b580      	push	{r7, lr}
 80253ec:	b084      	sub	sp, #16
 80253ee:	af00      	add	r7, sp, #0
 80253f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80253f2:	2300      	movs	r3, #0
 80253f4:	60fb      	str	r3, [r7, #12]
 80253f6:	2300      	movs	r3, #0
 80253f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	681b      	ldr	r3, [r3, #0]
 80253fe:	681b      	ldr	r3, [r3, #0]
 8025400:	f003 0302 	and.w	r3, r3, #2
 8025404:	2b02      	cmp	r3, #2
 8025406:	bf0c      	ite	eq
 8025408:	2301      	moveq	r3, #1
 802540a:	2300      	movne	r3, #0
 802540c:	b2db      	uxtb	r3, r3
 802540e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8025410:	687b      	ldr	r3, [r7, #4]
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	685b      	ldr	r3, [r3, #4]
 8025416:	f003 0320 	and.w	r3, r3, #32
 802541a:	2b20      	cmp	r3, #32
 802541c:	bf0c      	ite	eq
 802541e:	2301      	moveq	r3, #1
 8025420:	2300      	movne	r3, #0
 8025422:	b2db      	uxtb	r3, r3
 8025424:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8025426:	68fb      	ldr	r3, [r7, #12]
 8025428:	2b00      	cmp	r3, #0
 802542a:	d049      	beq.n	80254c0 <HAL_ADC_IRQHandler+0xd6>
 802542c:	68bb      	ldr	r3, [r7, #8]
 802542e:	2b00      	cmp	r3, #0
 8025430:	d046      	beq.n	80254c0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8025432:	687b      	ldr	r3, [r7, #4]
 8025434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025436:	f003 0310 	and.w	r3, r3, #16
 802543a:	2b00      	cmp	r3, #0
 802543c:	d105      	bne.n	802544a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025442:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8025446:	687b      	ldr	r3, [r7, #4]
 8025448:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802544a:	687b      	ldr	r3, [r7, #4]
 802544c:	681b      	ldr	r3, [r3, #0]
 802544e:	689b      	ldr	r3, [r3, #8]
 8025450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8025454:	2b00      	cmp	r3, #0
 8025456:	d12b      	bne.n	80254b0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8025458:	687b      	ldr	r3, [r7, #4]
 802545a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802545c:	2b00      	cmp	r3, #0
 802545e:	d127      	bne.n	80254b0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025466:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802546a:	2b00      	cmp	r3, #0
 802546c:	d006      	beq.n	802547c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802546e:	687b      	ldr	r3, [r7, #4]
 8025470:	681b      	ldr	r3, [r3, #0]
 8025472:	689b      	ldr	r3, [r3, #8]
 8025474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025478:	2b00      	cmp	r3, #0
 802547a:	d119      	bne.n	80254b0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	681b      	ldr	r3, [r3, #0]
 8025480:	685a      	ldr	r2, [r3, #4]
 8025482:	687b      	ldr	r3, [r7, #4]
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	f022 0220 	bic.w	r2, r2, #32
 802548a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 802548c:	687b      	ldr	r3, [r7, #4]
 802548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802549c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d105      	bne.n	80254b0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80254a4:	687b      	ldr	r3, [r7, #4]
 80254a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80254a8:	f043 0201 	orr.w	r2, r3, #1
 80254ac:	687b      	ldr	r3, [r7, #4]
 80254ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80254b0:	6878      	ldr	r0, [r7, #4]
 80254b2:	f008 fd97 	bl	802dfe4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80254b6:	687b      	ldr	r3, [r7, #4]
 80254b8:	681b      	ldr	r3, [r3, #0]
 80254ba:	f06f 0212 	mvn.w	r2, #18
 80254be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80254c0:	687b      	ldr	r3, [r7, #4]
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	681b      	ldr	r3, [r3, #0]
 80254c6:	f003 0304 	and.w	r3, r3, #4
 80254ca:	2b04      	cmp	r3, #4
 80254cc:	bf0c      	ite	eq
 80254ce:	2301      	moveq	r3, #1
 80254d0:	2300      	movne	r3, #0
 80254d2:	b2db      	uxtb	r3, r3
 80254d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80254d6:	687b      	ldr	r3, [r7, #4]
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	685b      	ldr	r3, [r3, #4]
 80254dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80254e0:	2b80      	cmp	r3, #128	@ 0x80
 80254e2:	bf0c      	ite	eq
 80254e4:	2301      	moveq	r3, #1
 80254e6:	2300      	movne	r3, #0
 80254e8:	b2db      	uxtb	r3, r3
 80254ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80254ec:	68fb      	ldr	r3, [r7, #12]
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d057      	beq.n	80255a2 <HAL_ADC_IRQHandler+0x1b8>
 80254f2:	68bb      	ldr	r3, [r7, #8]
 80254f4:	2b00      	cmp	r3, #0
 80254f6:	d054      	beq.n	80255a2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80254fc:	f003 0310 	and.w	r3, r3, #16
 8025500:	2b00      	cmp	r3, #0
 8025502:	d105      	bne.n	8025510 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8025504:	687b      	ldr	r3, [r7, #4]
 8025506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025508:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 802550c:	687b      	ldr	r3, [r7, #4]
 802550e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	681b      	ldr	r3, [r3, #0]
 8025514:	689b      	ldr	r3, [r3, #8]
 8025516:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 802551a:	2b00      	cmp	r3, #0
 802551c:	d139      	bne.n	8025592 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 802551e:	687b      	ldr	r3, [r7, #4]
 8025520:	681b      	ldr	r3, [r3, #0]
 8025522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025524:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8025528:	2b00      	cmp	r3, #0
 802552a:	d006      	beq.n	802553a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 802552c:	687b      	ldr	r3, [r7, #4]
 802552e:	681b      	ldr	r3, [r3, #0]
 8025530:	689b      	ldr	r3, [r3, #8]
 8025532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8025536:	2b00      	cmp	r3, #0
 8025538:	d12b      	bne.n	8025592 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	681b      	ldr	r3, [r3, #0]
 802553e:	685b      	ldr	r3, [r3, #4]
 8025540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8025544:	2b00      	cmp	r3, #0
 8025546:	d124      	bne.n	8025592 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8025548:	687b      	ldr	r3, [r7, #4]
 802554a:	681b      	ldr	r3, [r3, #0]
 802554c:	689b      	ldr	r3, [r3, #8]
 802554e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8025552:	2b00      	cmp	r3, #0
 8025554:	d11d      	bne.n	8025592 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 802555a:	2b00      	cmp	r3, #0
 802555c:	d119      	bne.n	8025592 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	681b      	ldr	r3, [r3, #0]
 8025562:	685a      	ldr	r2, [r3, #4]
 8025564:	687b      	ldr	r3, [r7, #4]
 8025566:	681b      	ldr	r3, [r3, #0]
 8025568:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802556c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 802556e:	687b      	ldr	r3, [r7, #4]
 8025570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025572:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8025576:	687b      	ldr	r3, [r7, #4]
 8025578:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8025582:	2b00      	cmp	r3, #0
 8025584:	d105      	bne.n	8025592 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8025586:	687b      	ldr	r3, [r7, #4]
 8025588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802558a:	f043 0201 	orr.w	r2, r3, #1
 802558e:	687b      	ldr	r3, [r7, #4]
 8025590:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8025592:	6878      	ldr	r0, [r7, #4]
 8025594:	f000 fc2a 	bl	8025dec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	681b      	ldr	r3, [r3, #0]
 802559c:	f06f 020c 	mvn.w	r2, #12
 80255a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80255a2:	687b      	ldr	r3, [r7, #4]
 80255a4:	681b      	ldr	r3, [r3, #0]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	f003 0301 	and.w	r3, r3, #1
 80255ac:	2b01      	cmp	r3, #1
 80255ae:	bf0c      	ite	eq
 80255b0:	2301      	moveq	r3, #1
 80255b2:	2300      	movne	r3, #0
 80255b4:	b2db      	uxtb	r3, r3
 80255b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80255b8:	687b      	ldr	r3, [r7, #4]
 80255ba:	681b      	ldr	r3, [r3, #0]
 80255bc:	685b      	ldr	r3, [r3, #4]
 80255be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80255c2:	2b40      	cmp	r3, #64	@ 0x40
 80255c4:	bf0c      	ite	eq
 80255c6:	2301      	moveq	r3, #1
 80255c8:	2300      	movne	r3, #0
 80255ca:	b2db      	uxtb	r3, r3
 80255cc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80255ce:	68fb      	ldr	r3, [r7, #12]
 80255d0:	2b00      	cmp	r3, #0
 80255d2:	d017      	beq.n	8025604 <HAL_ADC_IRQHandler+0x21a>
 80255d4:	68bb      	ldr	r3, [r7, #8]
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	d014      	beq.n	8025604 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80255da:	687b      	ldr	r3, [r7, #4]
 80255dc:	681b      	ldr	r3, [r3, #0]
 80255de:	681b      	ldr	r3, [r3, #0]
 80255e0:	f003 0301 	and.w	r3, r3, #1
 80255e4:	2b01      	cmp	r3, #1
 80255e6:	d10d      	bne.n	8025604 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80255e8:	687b      	ldr	r3, [r7, #4]
 80255ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80255ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80255f4:	6878      	ldr	r0, [r7, #4]
 80255f6:	f000 f935 	bl	8025864 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80255fa:	687b      	ldr	r3, [r7, #4]
 80255fc:	681b      	ldr	r3, [r3, #0]
 80255fe:	f06f 0201 	mvn.w	r2, #1
 8025602:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8025604:	687b      	ldr	r3, [r7, #4]
 8025606:	681b      	ldr	r3, [r3, #0]
 8025608:	681b      	ldr	r3, [r3, #0]
 802560a:	f003 0320 	and.w	r3, r3, #32
 802560e:	2b20      	cmp	r3, #32
 8025610:	bf0c      	ite	eq
 8025612:	2301      	moveq	r3, #1
 8025614:	2300      	movne	r3, #0
 8025616:	b2db      	uxtb	r3, r3
 8025618:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 802561a:	687b      	ldr	r3, [r7, #4]
 802561c:	681b      	ldr	r3, [r3, #0]
 802561e:	685b      	ldr	r3, [r3, #4]
 8025620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8025624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8025628:	bf0c      	ite	eq
 802562a:	2301      	moveq	r3, #1
 802562c:	2300      	movne	r3, #0
 802562e:	b2db      	uxtb	r3, r3
 8025630:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8025632:	68fb      	ldr	r3, [r7, #12]
 8025634:	2b00      	cmp	r3, #0
 8025636:	d015      	beq.n	8025664 <HAL_ADC_IRQHandler+0x27a>
 8025638:	68bb      	ldr	r3, [r7, #8]
 802563a:	2b00      	cmp	r3, #0
 802563c:	d012      	beq.n	8025664 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 802563e:	687b      	ldr	r3, [r7, #4]
 8025640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025642:	f043 0202 	orr.w	r2, r3, #2
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	f06f 0220 	mvn.w	r2, #32
 8025652:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8025654:	6878      	ldr	r0, [r7, #4]
 8025656:	f000 f90f 	bl	8025878 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 802565a:	687b      	ldr	r3, [r7, #4]
 802565c:	681b      	ldr	r3, [r3, #0]
 802565e:	f06f 0220 	mvn.w	r2, #32
 8025662:	601a      	str	r2, [r3, #0]
  }
}
 8025664:	bf00      	nop
 8025666:	3710      	adds	r7, #16
 8025668:	46bd      	mov	sp, r7
 802566a:	bd80      	pop	{r7, pc}

0802566c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802566c:	b580      	push	{r7, lr}
 802566e:	b086      	sub	sp, #24
 8025670:	af00      	add	r7, sp, #0
 8025672:	60f8      	str	r0, [r7, #12]
 8025674:	60b9      	str	r1, [r7, #8]
 8025676:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8025678:	2300      	movs	r3, #0
 802567a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802567c:	68fb      	ldr	r3, [r7, #12]
 802567e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8025682:	2b01      	cmp	r3, #1
 8025684:	d101      	bne.n	802568a <HAL_ADC_Start_DMA+0x1e>
 8025686:	2302      	movs	r3, #2
 8025688:	e0cc      	b.n	8025824 <HAL_ADC_Start_DMA+0x1b8>
 802568a:	68fb      	ldr	r3, [r7, #12]
 802568c:	2201      	movs	r2, #1
 802568e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8025692:	68fb      	ldr	r3, [r7, #12]
 8025694:	681b      	ldr	r3, [r3, #0]
 8025696:	689b      	ldr	r3, [r3, #8]
 8025698:	f003 0301 	and.w	r3, r3, #1
 802569c:	2b01      	cmp	r3, #1
 802569e:	d018      	beq.n	80256d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80256a0:	68fb      	ldr	r3, [r7, #12]
 80256a2:	681b      	ldr	r3, [r3, #0]
 80256a4:	689a      	ldr	r2, [r3, #8]
 80256a6:	68fb      	ldr	r3, [r7, #12]
 80256a8:	681b      	ldr	r3, [r3, #0]
 80256aa:	f042 0201 	orr.w	r2, r2, #1
 80256ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80256b0:	4b5e      	ldr	r3, [pc, #376]	@ (802582c <HAL_ADC_Start_DMA+0x1c0>)
 80256b2:	681b      	ldr	r3, [r3, #0]
 80256b4:	4a5e      	ldr	r2, [pc, #376]	@ (8025830 <HAL_ADC_Start_DMA+0x1c4>)
 80256b6:	fba2 2303 	umull	r2, r3, r2, r3
 80256ba:	0c9a      	lsrs	r2, r3, #18
 80256bc:	4613      	mov	r3, r2
 80256be:	005b      	lsls	r3, r3, #1
 80256c0:	4413      	add	r3, r2
 80256c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80256c4:	e002      	b.n	80256cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80256c6:	693b      	ldr	r3, [r7, #16]
 80256c8:	3b01      	subs	r3, #1
 80256ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80256cc:	693b      	ldr	r3, [r7, #16]
 80256ce:	2b00      	cmp	r3, #0
 80256d0:	d1f9      	bne.n	80256c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80256d2:	68fb      	ldr	r3, [r7, #12]
 80256d4:	681b      	ldr	r3, [r3, #0]
 80256d6:	689b      	ldr	r3, [r3, #8]
 80256d8:	f003 0301 	and.w	r3, r3, #1
 80256dc:	2b01      	cmp	r3, #1
 80256de:	f040 80a0 	bne.w	8025822 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80256e2:	68fb      	ldr	r3, [r7, #12]
 80256e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80256e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80256ea:	f023 0301 	bic.w	r3, r3, #1
 80256ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80256f2:	68fb      	ldr	r3, [r7, #12]
 80256f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80256f6:	68fb      	ldr	r3, [r7, #12]
 80256f8:	681b      	ldr	r3, [r3, #0]
 80256fa:	685b      	ldr	r3, [r3, #4]
 80256fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8025700:	2b00      	cmp	r3, #0
 8025702:	d007      	beq.n	8025714 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8025704:	68fb      	ldr	r3, [r7, #12]
 8025706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025708:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 802570c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8025710:	68fb      	ldr	r3, [r7, #12]
 8025712:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8025714:	68fb      	ldr	r3, [r7, #12]
 8025716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 802571c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8025720:	d106      	bne.n	8025730 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8025722:	68fb      	ldr	r3, [r7, #12]
 8025724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025726:	f023 0206 	bic.w	r2, r3, #6
 802572a:	68fb      	ldr	r3, [r7, #12]
 802572c:	645a      	str	r2, [r3, #68]	@ 0x44
 802572e:	e002      	b.n	8025736 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8025730:	68fb      	ldr	r3, [r7, #12]
 8025732:	2200      	movs	r2, #0
 8025734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8025736:	68fb      	ldr	r3, [r7, #12]
 8025738:	2200      	movs	r2, #0
 802573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802573e:	4b3d      	ldr	r3, [pc, #244]	@ (8025834 <HAL_ADC_Start_DMA+0x1c8>)
 8025740:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8025742:	68fb      	ldr	r3, [r7, #12]
 8025744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025746:	4a3c      	ldr	r2, [pc, #240]	@ (8025838 <HAL_ADC_Start_DMA+0x1cc>)
 8025748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802574a:	68fb      	ldr	r3, [r7, #12]
 802574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802574e:	4a3b      	ldr	r2, [pc, #236]	@ (802583c <HAL_ADC_Start_DMA+0x1d0>)
 8025750:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8025752:	68fb      	ldr	r3, [r7, #12]
 8025754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025756:	4a3a      	ldr	r2, [pc, #232]	@ (8025840 <HAL_ADC_Start_DMA+0x1d4>)
 8025758:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802575a:	68fb      	ldr	r3, [r7, #12]
 802575c:	681b      	ldr	r3, [r3, #0]
 802575e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8025762:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8025764:	68fb      	ldr	r3, [r7, #12]
 8025766:	681b      	ldr	r3, [r3, #0]
 8025768:	685a      	ldr	r2, [r3, #4]
 802576a:	68fb      	ldr	r3, [r7, #12]
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8025772:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8025774:	68fb      	ldr	r3, [r7, #12]
 8025776:	681b      	ldr	r3, [r3, #0]
 8025778:	689a      	ldr	r2, [r3, #8]
 802577a:	68fb      	ldr	r3, [r7, #12]
 802577c:	681b      	ldr	r3, [r3, #0]
 802577e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8025782:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8025784:	68fb      	ldr	r3, [r7, #12]
 8025786:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8025788:	68fb      	ldr	r3, [r7, #12]
 802578a:	681b      	ldr	r3, [r3, #0]
 802578c:	334c      	adds	r3, #76	@ 0x4c
 802578e:	4619      	mov	r1, r3
 8025790:	68ba      	ldr	r2, [r7, #8]
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	f000 fcf4 	bl	8026180 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8025798:	697b      	ldr	r3, [r7, #20]
 802579a:	685b      	ldr	r3, [r3, #4]
 802579c:	f003 031f 	and.w	r3, r3, #31
 80257a0:	2b00      	cmp	r3, #0
 80257a2:	d12a      	bne.n	80257fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80257a4:	68fb      	ldr	r3, [r7, #12]
 80257a6:	681b      	ldr	r3, [r3, #0]
 80257a8:	4a26      	ldr	r2, [pc, #152]	@ (8025844 <HAL_ADC_Start_DMA+0x1d8>)
 80257aa:	4293      	cmp	r3, r2
 80257ac:	d015      	beq.n	80257da <HAL_ADC_Start_DMA+0x16e>
 80257ae:	68fb      	ldr	r3, [r7, #12]
 80257b0:	681b      	ldr	r3, [r3, #0]
 80257b2:	4a25      	ldr	r2, [pc, #148]	@ (8025848 <HAL_ADC_Start_DMA+0x1dc>)
 80257b4:	4293      	cmp	r3, r2
 80257b6:	d105      	bne.n	80257c4 <HAL_ADC_Start_DMA+0x158>
 80257b8:	4b1e      	ldr	r3, [pc, #120]	@ (8025834 <HAL_ADC_Start_DMA+0x1c8>)
 80257ba:	685b      	ldr	r3, [r3, #4]
 80257bc:	f003 031f 	and.w	r3, r3, #31
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	d00a      	beq.n	80257da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80257c4:	68fb      	ldr	r3, [r7, #12]
 80257c6:	681b      	ldr	r3, [r3, #0]
 80257c8:	4a20      	ldr	r2, [pc, #128]	@ (802584c <HAL_ADC_Start_DMA+0x1e0>)
 80257ca:	4293      	cmp	r3, r2
 80257cc:	d129      	bne.n	8025822 <HAL_ADC_Start_DMA+0x1b6>
 80257ce:	4b19      	ldr	r3, [pc, #100]	@ (8025834 <HAL_ADC_Start_DMA+0x1c8>)
 80257d0:	685b      	ldr	r3, [r3, #4]
 80257d2:	f003 0310 	and.w	r3, r3, #16
 80257d6:	2b00      	cmp	r3, #0
 80257d8:	d123      	bne.n	8025822 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80257da:	68fb      	ldr	r3, [r7, #12]
 80257dc:	681b      	ldr	r3, [r3, #0]
 80257de:	689b      	ldr	r3, [r3, #8]
 80257e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d11c      	bne.n	8025822 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80257e8:	68fb      	ldr	r3, [r7, #12]
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	689a      	ldr	r2, [r3, #8]
 80257ee:	68fb      	ldr	r3, [r7, #12]
 80257f0:	681b      	ldr	r3, [r3, #0]
 80257f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80257f6:	609a      	str	r2, [r3, #8]
 80257f8:	e013      	b.n	8025822 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80257fa:	68fb      	ldr	r3, [r7, #12]
 80257fc:	681b      	ldr	r3, [r3, #0]
 80257fe:	4a11      	ldr	r2, [pc, #68]	@ (8025844 <HAL_ADC_Start_DMA+0x1d8>)
 8025800:	4293      	cmp	r3, r2
 8025802:	d10e      	bne.n	8025822 <HAL_ADC_Start_DMA+0x1b6>
 8025804:	68fb      	ldr	r3, [r7, #12]
 8025806:	681b      	ldr	r3, [r3, #0]
 8025808:	689b      	ldr	r3, [r3, #8]
 802580a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802580e:	2b00      	cmp	r3, #0
 8025810:	d107      	bne.n	8025822 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8025812:	68fb      	ldr	r3, [r7, #12]
 8025814:	681b      	ldr	r3, [r3, #0]
 8025816:	689a      	ldr	r2, [r3, #8]
 8025818:	68fb      	ldr	r3, [r7, #12]
 802581a:	681b      	ldr	r3, [r3, #0]
 802581c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8025820:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8025822:	2300      	movs	r3, #0
}
 8025824:	4618      	mov	r0, r3
 8025826:	3718      	adds	r7, #24
 8025828:	46bd      	mov	sp, r7
 802582a:	bd80      	pop	{r7, pc}
 802582c:	20001028 	.word	0x20001028
 8025830:	431bde83 	.word	0x431bde83
 8025834:	40012300 	.word	0x40012300
 8025838:	08025ce9 	.word	0x08025ce9
 802583c:	08025da3 	.word	0x08025da3
 8025840:	08025dbf 	.word	0x08025dbf
 8025844:	40012000 	.word	0x40012000
 8025848:	40012100 	.word	0x40012100
 802584c:	40012200 	.word	0x40012200

08025850 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8025850:	b480      	push	{r7}
 8025852:	b083      	sub	sp, #12
 8025854:	af00      	add	r7, sp, #0
 8025856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8025858:	bf00      	nop
 802585a:	370c      	adds	r7, #12
 802585c:	46bd      	mov	sp, r7
 802585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025862:	4770      	bx	lr

08025864 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8025864:	b480      	push	{r7}
 8025866:	b083      	sub	sp, #12
 8025868:	af00      	add	r7, sp, #0
 802586a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 802586c:	bf00      	nop
 802586e:	370c      	adds	r7, #12
 8025870:	46bd      	mov	sp, r7
 8025872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025876:	4770      	bx	lr

08025878 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8025878:	b480      	push	{r7}
 802587a:	b083      	sub	sp, #12
 802587c:	af00      	add	r7, sp, #0
 802587e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8025880:	bf00      	nop
 8025882:	370c      	adds	r7, #12
 8025884:	46bd      	mov	sp, r7
 8025886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802588a:	4770      	bx	lr

0802588c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 802588c:	b480      	push	{r7}
 802588e:	b085      	sub	sp, #20
 8025890:	af00      	add	r7, sp, #0
 8025892:	6078      	str	r0, [r7, #4]
 8025894:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8025896:	2300      	movs	r3, #0
 8025898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80258a0:	2b01      	cmp	r3, #1
 80258a2:	d101      	bne.n	80258a8 <HAL_ADC_ConfigChannel+0x1c>
 80258a4:	2302      	movs	r3, #2
 80258a6:	e113      	b.n	8025ad0 <HAL_ADC_ConfigChannel+0x244>
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	2201      	movs	r2, #1
 80258ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80258b0:	683b      	ldr	r3, [r7, #0]
 80258b2:	681b      	ldr	r3, [r3, #0]
 80258b4:	2b09      	cmp	r3, #9
 80258b6:	d925      	bls.n	8025904 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	681b      	ldr	r3, [r3, #0]
 80258bc:	68d9      	ldr	r1, [r3, #12]
 80258be:	683b      	ldr	r3, [r7, #0]
 80258c0:	681b      	ldr	r3, [r3, #0]
 80258c2:	b29b      	uxth	r3, r3
 80258c4:	461a      	mov	r2, r3
 80258c6:	4613      	mov	r3, r2
 80258c8:	005b      	lsls	r3, r3, #1
 80258ca:	4413      	add	r3, r2
 80258cc:	3b1e      	subs	r3, #30
 80258ce:	2207      	movs	r2, #7
 80258d0:	fa02 f303 	lsl.w	r3, r2, r3
 80258d4:	43da      	mvns	r2, r3
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	400a      	ands	r2, r1
 80258dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	681b      	ldr	r3, [r3, #0]
 80258e2:	68d9      	ldr	r1, [r3, #12]
 80258e4:	683b      	ldr	r3, [r7, #0]
 80258e6:	689a      	ldr	r2, [r3, #8]
 80258e8:	683b      	ldr	r3, [r7, #0]
 80258ea:	681b      	ldr	r3, [r3, #0]
 80258ec:	b29b      	uxth	r3, r3
 80258ee:	4618      	mov	r0, r3
 80258f0:	4603      	mov	r3, r0
 80258f2:	005b      	lsls	r3, r3, #1
 80258f4:	4403      	add	r3, r0
 80258f6:	3b1e      	subs	r3, #30
 80258f8:	409a      	lsls	r2, r3
 80258fa:	687b      	ldr	r3, [r7, #4]
 80258fc:	681b      	ldr	r3, [r3, #0]
 80258fe:	430a      	orrs	r2, r1
 8025900:	60da      	str	r2, [r3, #12]
 8025902:	e022      	b.n	802594a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	681b      	ldr	r3, [r3, #0]
 8025908:	6919      	ldr	r1, [r3, #16]
 802590a:	683b      	ldr	r3, [r7, #0]
 802590c:	681b      	ldr	r3, [r3, #0]
 802590e:	b29b      	uxth	r3, r3
 8025910:	461a      	mov	r2, r3
 8025912:	4613      	mov	r3, r2
 8025914:	005b      	lsls	r3, r3, #1
 8025916:	4413      	add	r3, r2
 8025918:	2207      	movs	r2, #7
 802591a:	fa02 f303 	lsl.w	r3, r2, r3
 802591e:	43da      	mvns	r2, r3
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	681b      	ldr	r3, [r3, #0]
 8025924:	400a      	ands	r2, r1
 8025926:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8025928:	687b      	ldr	r3, [r7, #4]
 802592a:	681b      	ldr	r3, [r3, #0]
 802592c:	6919      	ldr	r1, [r3, #16]
 802592e:	683b      	ldr	r3, [r7, #0]
 8025930:	689a      	ldr	r2, [r3, #8]
 8025932:	683b      	ldr	r3, [r7, #0]
 8025934:	681b      	ldr	r3, [r3, #0]
 8025936:	b29b      	uxth	r3, r3
 8025938:	4618      	mov	r0, r3
 802593a:	4603      	mov	r3, r0
 802593c:	005b      	lsls	r3, r3, #1
 802593e:	4403      	add	r3, r0
 8025940:	409a      	lsls	r2, r3
 8025942:	687b      	ldr	r3, [r7, #4]
 8025944:	681b      	ldr	r3, [r3, #0]
 8025946:	430a      	orrs	r2, r1
 8025948:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802594a:	683b      	ldr	r3, [r7, #0]
 802594c:	685b      	ldr	r3, [r3, #4]
 802594e:	2b06      	cmp	r3, #6
 8025950:	d824      	bhi.n	802599c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8025952:	687b      	ldr	r3, [r7, #4]
 8025954:	681b      	ldr	r3, [r3, #0]
 8025956:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8025958:	683b      	ldr	r3, [r7, #0]
 802595a:	685a      	ldr	r2, [r3, #4]
 802595c:	4613      	mov	r3, r2
 802595e:	009b      	lsls	r3, r3, #2
 8025960:	4413      	add	r3, r2
 8025962:	3b05      	subs	r3, #5
 8025964:	221f      	movs	r2, #31
 8025966:	fa02 f303 	lsl.w	r3, r2, r3
 802596a:	43da      	mvns	r2, r3
 802596c:	687b      	ldr	r3, [r7, #4]
 802596e:	681b      	ldr	r3, [r3, #0]
 8025970:	400a      	ands	r2, r1
 8025972:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8025974:	687b      	ldr	r3, [r7, #4]
 8025976:	681b      	ldr	r3, [r3, #0]
 8025978:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802597a:	683b      	ldr	r3, [r7, #0]
 802597c:	681b      	ldr	r3, [r3, #0]
 802597e:	b29b      	uxth	r3, r3
 8025980:	4618      	mov	r0, r3
 8025982:	683b      	ldr	r3, [r7, #0]
 8025984:	685a      	ldr	r2, [r3, #4]
 8025986:	4613      	mov	r3, r2
 8025988:	009b      	lsls	r3, r3, #2
 802598a:	4413      	add	r3, r2
 802598c:	3b05      	subs	r3, #5
 802598e:	fa00 f203 	lsl.w	r2, r0, r3
 8025992:	687b      	ldr	r3, [r7, #4]
 8025994:	681b      	ldr	r3, [r3, #0]
 8025996:	430a      	orrs	r2, r1
 8025998:	635a      	str	r2, [r3, #52]	@ 0x34
 802599a:	e04c      	b.n	8025a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802599c:	683b      	ldr	r3, [r7, #0]
 802599e:	685b      	ldr	r3, [r3, #4]
 80259a0:	2b0c      	cmp	r3, #12
 80259a2:	d824      	bhi.n	80259ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80259a4:	687b      	ldr	r3, [r7, #4]
 80259a6:	681b      	ldr	r3, [r3, #0]
 80259a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80259aa:	683b      	ldr	r3, [r7, #0]
 80259ac:	685a      	ldr	r2, [r3, #4]
 80259ae:	4613      	mov	r3, r2
 80259b0:	009b      	lsls	r3, r3, #2
 80259b2:	4413      	add	r3, r2
 80259b4:	3b23      	subs	r3, #35	@ 0x23
 80259b6:	221f      	movs	r2, #31
 80259b8:	fa02 f303 	lsl.w	r3, r2, r3
 80259bc:	43da      	mvns	r2, r3
 80259be:	687b      	ldr	r3, [r7, #4]
 80259c0:	681b      	ldr	r3, [r3, #0]
 80259c2:	400a      	ands	r2, r1
 80259c4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80259c6:	687b      	ldr	r3, [r7, #4]
 80259c8:	681b      	ldr	r3, [r3, #0]
 80259ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80259cc:	683b      	ldr	r3, [r7, #0]
 80259ce:	681b      	ldr	r3, [r3, #0]
 80259d0:	b29b      	uxth	r3, r3
 80259d2:	4618      	mov	r0, r3
 80259d4:	683b      	ldr	r3, [r7, #0]
 80259d6:	685a      	ldr	r2, [r3, #4]
 80259d8:	4613      	mov	r3, r2
 80259da:	009b      	lsls	r3, r3, #2
 80259dc:	4413      	add	r3, r2
 80259de:	3b23      	subs	r3, #35	@ 0x23
 80259e0:	fa00 f203 	lsl.w	r2, r0, r3
 80259e4:	687b      	ldr	r3, [r7, #4]
 80259e6:	681b      	ldr	r3, [r3, #0]
 80259e8:	430a      	orrs	r2, r1
 80259ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80259ec:	e023      	b.n	8025a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	681b      	ldr	r3, [r3, #0]
 80259f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80259f4:	683b      	ldr	r3, [r7, #0]
 80259f6:	685a      	ldr	r2, [r3, #4]
 80259f8:	4613      	mov	r3, r2
 80259fa:	009b      	lsls	r3, r3, #2
 80259fc:	4413      	add	r3, r2
 80259fe:	3b41      	subs	r3, #65	@ 0x41
 8025a00:	221f      	movs	r2, #31
 8025a02:	fa02 f303 	lsl.w	r3, r2, r3
 8025a06:	43da      	mvns	r2, r3
 8025a08:	687b      	ldr	r3, [r7, #4]
 8025a0a:	681b      	ldr	r3, [r3, #0]
 8025a0c:	400a      	ands	r2, r1
 8025a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8025a10:	687b      	ldr	r3, [r7, #4]
 8025a12:	681b      	ldr	r3, [r3, #0]
 8025a14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8025a16:	683b      	ldr	r3, [r7, #0]
 8025a18:	681b      	ldr	r3, [r3, #0]
 8025a1a:	b29b      	uxth	r3, r3
 8025a1c:	4618      	mov	r0, r3
 8025a1e:	683b      	ldr	r3, [r7, #0]
 8025a20:	685a      	ldr	r2, [r3, #4]
 8025a22:	4613      	mov	r3, r2
 8025a24:	009b      	lsls	r3, r3, #2
 8025a26:	4413      	add	r3, r2
 8025a28:	3b41      	subs	r3, #65	@ 0x41
 8025a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8025a2e:	687b      	ldr	r3, [r7, #4]
 8025a30:	681b      	ldr	r3, [r3, #0]
 8025a32:	430a      	orrs	r2, r1
 8025a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8025a36:	4b29      	ldr	r3, [pc, #164]	@ (8025adc <HAL_ADC_ConfigChannel+0x250>)
 8025a38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8025a3a:	687b      	ldr	r3, [r7, #4]
 8025a3c:	681b      	ldr	r3, [r3, #0]
 8025a3e:	4a28      	ldr	r2, [pc, #160]	@ (8025ae0 <HAL_ADC_ConfigChannel+0x254>)
 8025a40:	4293      	cmp	r3, r2
 8025a42:	d10f      	bne.n	8025a64 <HAL_ADC_ConfigChannel+0x1d8>
 8025a44:	683b      	ldr	r3, [r7, #0]
 8025a46:	681b      	ldr	r3, [r3, #0]
 8025a48:	2b12      	cmp	r3, #18
 8025a4a:	d10b      	bne.n	8025a64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8025a4c:	68fb      	ldr	r3, [r7, #12]
 8025a4e:	685b      	ldr	r3, [r3, #4]
 8025a50:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8025a54:	68fb      	ldr	r3, [r7, #12]
 8025a56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8025a58:	68fb      	ldr	r3, [r7, #12]
 8025a5a:	685b      	ldr	r3, [r3, #4]
 8025a5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8025a60:	68fb      	ldr	r3, [r7, #12]
 8025a62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8025a64:	687b      	ldr	r3, [r7, #4]
 8025a66:	681b      	ldr	r3, [r3, #0]
 8025a68:	4a1d      	ldr	r2, [pc, #116]	@ (8025ae0 <HAL_ADC_ConfigChannel+0x254>)
 8025a6a:	4293      	cmp	r3, r2
 8025a6c:	d12b      	bne.n	8025ac6 <HAL_ADC_ConfigChannel+0x23a>
 8025a6e:	683b      	ldr	r3, [r7, #0]
 8025a70:	681b      	ldr	r3, [r3, #0]
 8025a72:	4a1c      	ldr	r2, [pc, #112]	@ (8025ae4 <HAL_ADC_ConfigChannel+0x258>)
 8025a74:	4293      	cmp	r3, r2
 8025a76:	d003      	beq.n	8025a80 <HAL_ADC_ConfigChannel+0x1f4>
 8025a78:	683b      	ldr	r3, [r7, #0]
 8025a7a:	681b      	ldr	r3, [r3, #0]
 8025a7c:	2b11      	cmp	r3, #17
 8025a7e:	d122      	bne.n	8025ac6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8025a80:	68fb      	ldr	r3, [r7, #12]
 8025a82:	685b      	ldr	r3, [r3, #4]
 8025a84:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8025a88:	68fb      	ldr	r3, [r7, #12]
 8025a8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8025a8c:	68fb      	ldr	r3, [r7, #12]
 8025a8e:	685b      	ldr	r3, [r3, #4]
 8025a90:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8025a94:	68fb      	ldr	r3, [r7, #12]
 8025a96:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8025a98:	683b      	ldr	r3, [r7, #0]
 8025a9a:	681b      	ldr	r3, [r3, #0]
 8025a9c:	4a11      	ldr	r2, [pc, #68]	@ (8025ae4 <HAL_ADC_ConfigChannel+0x258>)
 8025a9e:	4293      	cmp	r3, r2
 8025aa0:	d111      	bne.n	8025ac6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8025aa2:	4b11      	ldr	r3, [pc, #68]	@ (8025ae8 <HAL_ADC_ConfigChannel+0x25c>)
 8025aa4:	681b      	ldr	r3, [r3, #0]
 8025aa6:	4a11      	ldr	r2, [pc, #68]	@ (8025aec <HAL_ADC_ConfigChannel+0x260>)
 8025aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8025aac:	0c9a      	lsrs	r2, r3, #18
 8025aae:	4613      	mov	r3, r2
 8025ab0:	009b      	lsls	r3, r3, #2
 8025ab2:	4413      	add	r3, r2
 8025ab4:	005b      	lsls	r3, r3, #1
 8025ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8025ab8:	e002      	b.n	8025ac0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8025aba:	68bb      	ldr	r3, [r7, #8]
 8025abc:	3b01      	subs	r3, #1
 8025abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8025ac0:	68bb      	ldr	r3, [r7, #8]
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	d1f9      	bne.n	8025aba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	2200      	movs	r2, #0
 8025aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8025ace:	2300      	movs	r3, #0
}
 8025ad0:	4618      	mov	r0, r3
 8025ad2:	3714      	adds	r7, #20
 8025ad4:	46bd      	mov	sp, r7
 8025ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ada:	4770      	bx	lr
 8025adc:	40012300 	.word	0x40012300
 8025ae0:	40012000 	.word	0x40012000
 8025ae4:	10000012 	.word	0x10000012
 8025ae8:	20001028 	.word	0x20001028
 8025aec:	431bde83 	.word	0x431bde83

08025af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8025af0:	b480      	push	{r7}
 8025af2:	b085      	sub	sp, #20
 8025af4:	af00      	add	r7, sp, #0
 8025af6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8025af8:	4b79      	ldr	r3, [pc, #484]	@ (8025ce0 <ADC_Init+0x1f0>)
 8025afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8025afc:	68fb      	ldr	r3, [r7, #12]
 8025afe:	685b      	ldr	r3, [r3, #4]
 8025b00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8025b04:	68fb      	ldr	r3, [r7, #12]
 8025b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8025b08:	68fb      	ldr	r3, [r7, #12]
 8025b0a:	685a      	ldr	r2, [r3, #4]
 8025b0c:	687b      	ldr	r3, [r7, #4]
 8025b0e:	685b      	ldr	r3, [r3, #4]
 8025b10:	431a      	orrs	r2, r3
 8025b12:	68fb      	ldr	r3, [r7, #12]
 8025b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8025b16:	687b      	ldr	r3, [r7, #4]
 8025b18:	681b      	ldr	r3, [r3, #0]
 8025b1a:	685a      	ldr	r2, [r3, #4]
 8025b1c:	687b      	ldr	r3, [r7, #4]
 8025b1e:	681b      	ldr	r3, [r3, #0]
 8025b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8025b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8025b26:	687b      	ldr	r3, [r7, #4]
 8025b28:	681b      	ldr	r3, [r3, #0]
 8025b2a:	6859      	ldr	r1, [r3, #4]
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	691b      	ldr	r3, [r3, #16]
 8025b30:	021a      	lsls	r2, r3, #8
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	430a      	orrs	r2, r1
 8025b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8025b3a:	687b      	ldr	r3, [r7, #4]
 8025b3c:	681b      	ldr	r3, [r3, #0]
 8025b3e:	685a      	ldr	r2, [r3, #4]
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	681b      	ldr	r3, [r3, #0]
 8025b44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8025b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8025b4a:	687b      	ldr	r3, [r7, #4]
 8025b4c:	681b      	ldr	r3, [r3, #0]
 8025b4e:	6859      	ldr	r1, [r3, #4]
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	689a      	ldr	r2, [r3, #8]
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	681b      	ldr	r3, [r3, #0]
 8025b58:	430a      	orrs	r2, r1
 8025b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8025b5c:	687b      	ldr	r3, [r7, #4]
 8025b5e:	681b      	ldr	r3, [r3, #0]
 8025b60:	689a      	ldr	r2, [r3, #8]
 8025b62:	687b      	ldr	r3, [r7, #4]
 8025b64:	681b      	ldr	r3, [r3, #0]
 8025b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8025b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8025b6c:	687b      	ldr	r3, [r7, #4]
 8025b6e:	681b      	ldr	r3, [r3, #0]
 8025b70:	6899      	ldr	r1, [r3, #8]
 8025b72:	687b      	ldr	r3, [r7, #4]
 8025b74:	68da      	ldr	r2, [r3, #12]
 8025b76:	687b      	ldr	r3, [r7, #4]
 8025b78:	681b      	ldr	r3, [r3, #0]
 8025b7a:	430a      	orrs	r2, r1
 8025b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8025b7e:	687b      	ldr	r3, [r7, #4]
 8025b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025b82:	4a58      	ldr	r2, [pc, #352]	@ (8025ce4 <ADC_Init+0x1f4>)
 8025b84:	4293      	cmp	r3, r2
 8025b86:	d022      	beq.n	8025bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8025b88:	687b      	ldr	r3, [r7, #4]
 8025b8a:	681b      	ldr	r3, [r3, #0]
 8025b8c:	689a      	ldr	r2, [r3, #8]
 8025b8e:	687b      	ldr	r3, [r7, #4]
 8025b90:	681b      	ldr	r3, [r3, #0]
 8025b92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8025b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	681b      	ldr	r3, [r3, #0]
 8025b9c:	6899      	ldr	r1, [r3, #8]
 8025b9e:	687b      	ldr	r3, [r7, #4]
 8025ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8025ba2:	687b      	ldr	r3, [r7, #4]
 8025ba4:	681b      	ldr	r3, [r3, #0]
 8025ba6:	430a      	orrs	r2, r1
 8025ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8025baa:	687b      	ldr	r3, [r7, #4]
 8025bac:	681b      	ldr	r3, [r3, #0]
 8025bae:	689a      	ldr	r2, [r3, #8]
 8025bb0:	687b      	ldr	r3, [r7, #4]
 8025bb2:	681b      	ldr	r3, [r3, #0]
 8025bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8025bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8025bba:	687b      	ldr	r3, [r7, #4]
 8025bbc:	681b      	ldr	r3, [r3, #0]
 8025bbe:	6899      	ldr	r1, [r3, #8]
 8025bc0:	687b      	ldr	r3, [r7, #4]
 8025bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8025bc4:	687b      	ldr	r3, [r7, #4]
 8025bc6:	681b      	ldr	r3, [r3, #0]
 8025bc8:	430a      	orrs	r2, r1
 8025bca:	609a      	str	r2, [r3, #8]
 8025bcc:	e00f      	b.n	8025bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	681b      	ldr	r3, [r3, #0]
 8025bd2:	689a      	ldr	r2, [r3, #8]
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	681b      	ldr	r3, [r3, #0]
 8025bd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8025bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8025bde:	687b      	ldr	r3, [r7, #4]
 8025be0:	681b      	ldr	r3, [r3, #0]
 8025be2:	689a      	ldr	r2, [r3, #8]
 8025be4:	687b      	ldr	r3, [r7, #4]
 8025be6:	681b      	ldr	r3, [r3, #0]
 8025be8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8025bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8025bee:	687b      	ldr	r3, [r7, #4]
 8025bf0:	681b      	ldr	r3, [r3, #0]
 8025bf2:	689a      	ldr	r2, [r3, #8]
 8025bf4:	687b      	ldr	r3, [r7, #4]
 8025bf6:	681b      	ldr	r3, [r3, #0]
 8025bf8:	f022 0202 	bic.w	r2, r2, #2
 8025bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	681b      	ldr	r3, [r3, #0]
 8025c02:	6899      	ldr	r1, [r3, #8]
 8025c04:	687b      	ldr	r3, [r7, #4]
 8025c06:	7e1b      	ldrb	r3, [r3, #24]
 8025c08:	005a      	lsls	r2, r3, #1
 8025c0a:	687b      	ldr	r3, [r7, #4]
 8025c0c:	681b      	ldr	r3, [r3, #0]
 8025c0e:	430a      	orrs	r2, r1
 8025c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8025c12:	687b      	ldr	r3, [r7, #4]
 8025c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025c18:	2b00      	cmp	r3, #0
 8025c1a:	d01b      	beq.n	8025c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8025c1c:	687b      	ldr	r3, [r7, #4]
 8025c1e:	681b      	ldr	r3, [r3, #0]
 8025c20:	685a      	ldr	r2, [r3, #4]
 8025c22:	687b      	ldr	r3, [r7, #4]
 8025c24:	681b      	ldr	r3, [r3, #0]
 8025c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8025c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8025c2c:	687b      	ldr	r3, [r7, #4]
 8025c2e:	681b      	ldr	r3, [r3, #0]
 8025c30:	685a      	ldr	r2, [r3, #4]
 8025c32:	687b      	ldr	r3, [r7, #4]
 8025c34:	681b      	ldr	r3, [r3, #0]
 8025c36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8025c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8025c3c:	687b      	ldr	r3, [r7, #4]
 8025c3e:	681b      	ldr	r3, [r3, #0]
 8025c40:	6859      	ldr	r1, [r3, #4]
 8025c42:	687b      	ldr	r3, [r7, #4]
 8025c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025c46:	3b01      	subs	r3, #1
 8025c48:	035a      	lsls	r2, r3, #13
 8025c4a:	687b      	ldr	r3, [r7, #4]
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	430a      	orrs	r2, r1
 8025c50:	605a      	str	r2, [r3, #4]
 8025c52:	e007      	b.n	8025c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	681b      	ldr	r3, [r3, #0]
 8025c58:	685a      	ldr	r2, [r3, #4]
 8025c5a:	687b      	ldr	r3, [r7, #4]
 8025c5c:	681b      	ldr	r3, [r3, #0]
 8025c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8025c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8025c64:	687b      	ldr	r3, [r7, #4]
 8025c66:	681b      	ldr	r3, [r3, #0]
 8025c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8025c6a:	687b      	ldr	r3, [r7, #4]
 8025c6c:	681b      	ldr	r3, [r3, #0]
 8025c6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8025c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8025c74:	687b      	ldr	r3, [r7, #4]
 8025c76:	681b      	ldr	r3, [r3, #0]
 8025c78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8025c7a:	687b      	ldr	r3, [r7, #4]
 8025c7c:	69db      	ldr	r3, [r3, #28]
 8025c7e:	3b01      	subs	r3, #1
 8025c80:	051a      	lsls	r2, r3, #20
 8025c82:	687b      	ldr	r3, [r7, #4]
 8025c84:	681b      	ldr	r3, [r3, #0]
 8025c86:	430a      	orrs	r2, r1
 8025c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	681b      	ldr	r3, [r3, #0]
 8025c8e:	689a      	ldr	r2, [r3, #8]
 8025c90:	687b      	ldr	r3, [r7, #4]
 8025c92:	681b      	ldr	r3, [r3, #0]
 8025c94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8025c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8025c9a:	687b      	ldr	r3, [r7, #4]
 8025c9c:	681b      	ldr	r3, [r3, #0]
 8025c9e:	6899      	ldr	r1, [r3, #8]
 8025ca0:	687b      	ldr	r3, [r7, #4]
 8025ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8025ca6:	025a      	lsls	r2, r3, #9
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	681b      	ldr	r3, [r3, #0]
 8025cac:	430a      	orrs	r2, r1
 8025cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	681b      	ldr	r3, [r3, #0]
 8025cb4:	689a      	ldr	r2, [r3, #8]
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	681b      	ldr	r3, [r3, #0]
 8025cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8025cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8025cc0:	687b      	ldr	r3, [r7, #4]
 8025cc2:	681b      	ldr	r3, [r3, #0]
 8025cc4:	6899      	ldr	r1, [r3, #8]
 8025cc6:	687b      	ldr	r3, [r7, #4]
 8025cc8:	695b      	ldr	r3, [r3, #20]
 8025cca:	029a      	lsls	r2, r3, #10
 8025ccc:	687b      	ldr	r3, [r7, #4]
 8025cce:	681b      	ldr	r3, [r3, #0]
 8025cd0:	430a      	orrs	r2, r1
 8025cd2:	609a      	str	r2, [r3, #8]
}
 8025cd4:	bf00      	nop
 8025cd6:	3714      	adds	r7, #20
 8025cd8:	46bd      	mov	sp, r7
 8025cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cde:	4770      	bx	lr
 8025ce0:	40012300 	.word	0x40012300
 8025ce4:	0f000001 	.word	0x0f000001

08025ce8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8025ce8:	b580      	push	{r7, lr}
 8025cea:	b084      	sub	sp, #16
 8025cec:	af00      	add	r7, sp, #0
 8025cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8025cf0:	687b      	ldr	r3, [r7, #4]
 8025cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025cf4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8025cf6:	68fb      	ldr	r3, [r7, #12]
 8025cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025cfa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d13c      	bne.n	8025d7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8025d02:	68fb      	ldr	r3, [r7, #12]
 8025d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025d06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8025d0a:	68fb      	ldr	r3, [r7, #12]
 8025d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8025d0e:	68fb      	ldr	r3, [r7, #12]
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	689b      	ldr	r3, [r3, #8]
 8025d14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8025d18:	2b00      	cmp	r3, #0
 8025d1a:	d12b      	bne.n	8025d74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8025d1c:	68fb      	ldr	r3, [r7, #12]
 8025d1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8025d20:	2b00      	cmp	r3, #0
 8025d22:	d127      	bne.n	8025d74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025d24:	68fb      	ldr	r3, [r7, #12]
 8025d26:	681b      	ldr	r3, [r3, #0]
 8025d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025d2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d006      	beq.n	8025d40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8025d32:	68fb      	ldr	r3, [r7, #12]
 8025d34:	681b      	ldr	r3, [r3, #0]
 8025d36:	689b      	ldr	r3, [r3, #8]
 8025d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d119      	bne.n	8025d74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8025d40:	68fb      	ldr	r3, [r7, #12]
 8025d42:	681b      	ldr	r3, [r3, #0]
 8025d44:	685a      	ldr	r2, [r3, #4]
 8025d46:	68fb      	ldr	r3, [r7, #12]
 8025d48:	681b      	ldr	r3, [r3, #0]
 8025d4a:	f022 0220 	bic.w	r2, r2, #32
 8025d4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8025d50:	68fb      	ldr	r3, [r7, #12]
 8025d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8025d58:	68fb      	ldr	r3, [r7, #12]
 8025d5a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8025d64:	2b00      	cmp	r3, #0
 8025d66:	d105      	bne.n	8025d74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8025d68:	68fb      	ldr	r3, [r7, #12]
 8025d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025d6c:	f043 0201 	orr.w	r2, r3, #1
 8025d70:	68fb      	ldr	r3, [r7, #12]
 8025d72:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8025d74:	68f8      	ldr	r0, [r7, #12]
 8025d76:	f008 f935 	bl	802dfe4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8025d7a:	e00e      	b.n	8025d9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8025d7c:	68fb      	ldr	r3, [r7, #12]
 8025d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025d80:	f003 0310 	and.w	r3, r3, #16
 8025d84:	2b00      	cmp	r3, #0
 8025d86:	d003      	beq.n	8025d90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8025d88:	68f8      	ldr	r0, [r7, #12]
 8025d8a:	f7ff fd75 	bl	8025878 <HAL_ADC_ErrorCallback>
}
 8025d8e:	e004      	b.n	8025d9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8025d96:	6878      	ldr	r0, [r7, #4]
 8025d98:	4798      	blx	r3
}
 8025d9a:	bf00      	nop
 8025d9c:	3710      	adds	r7, #16
 8025d9e:	46bd      	mov	sp, r7
 8025da0:	bd80      	pop	{r7, pc}

08025da2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8025da2:	b580      	push	{r7, lr}
 8025da4:	b084      	sub	sp, #16
 8025da6:	af00      	add	r7, sp, #0
 8025da8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025dae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8025db0:	68f8      	ldr	r0, [r7, #12]
 8025db2:	f7ff fd4d 	bl	8025850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8025db6:	bf00      	nop
 8025db8:	3710      	adds	r7, #16
 8025dba:	46bd      	mov	sp, r7
 8025dbc:	bd80      	pop	{r7, pc}

08025dbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8025dbe:	b580      	push	{r7, lr}
 8025dc0:	b084      	sub	sp, #16
 8025dc2:	af00      	add	r7, sp, #0
 8025dc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8025dc6:	687b      	ldr	r3, [r7, #4]
 8025dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025dca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8025dcc:	68fb      	ldr	r3, [r7, #12]
 8025dce:	2240      	movs	r2, #64	@ 0x40
 8025dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8025dd2:	68fb      	ldr	r3, [r7, #12]
 8025dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025dd6:	f043 0204 	orr.w	r2, r3, #4
 8025dda:	68fb      	ldr	r3, [r7, #12]
 8025ddc:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8025dde:	68f8      	ldr	r0, [r7, #12]
 8025de0:	f7ff fd4a 	bl	8025878 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8025de4:	bf00      	nop
 8025de6:	3710      	adds	r7, #16
 8025de8:	46bd      	mov	sp, r7
 8025dea:	bd80      	pop	{r7, pc}

08025dec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8025dec:	b480      	push	{r7}
 8025dee:	b083      	sub	sp, #12
 8025df0:	af00      	add	r7, sp, #0
 8025df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8025df4:	bf00      	nop
 8025df6:	370c      	adds	r7, #12
 8025df8:	46bd      	mov	sp, r7
 8025dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dfe:	4770      	bx	lr

08025e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8025e00:	b480      	push	{r7}
 8025e02:	b085      	sub	sp, #20
 8025e04:	af00      	add	r7, sp, #0
 8025e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8025e08:	687b      	ldr	r3, [r7, #4]
 8025e0a:	f003 0307 	and.w	r3, r3, #7
 8025e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8025e10:	4b0c      	ldr	r3, [pc, #48]	@ (8025e44 <__NVIC_SetPriorityGrouping+0x44>)
 8025e12:	68db      	ldr	r3, [r3, #12]
 8025e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8025e16:	68ba      	ldr	r2, [r7, #8]
 8025e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8025e1c:	4013      	ands	r3, r2
 8025e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8025e20:	68fb      	ldr	r3, [r7, #12]
 8025e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8025e24:	68bb      	ldr	r3, [r7, #8]
 8025e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8025e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8025e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8025e32:	4a04      	ldr	r2, [pc, #16]	@ (8025e44 <__NVIC_SetPriorityGrouping+0x44>)
 8025e34:	68bb      	ldr	r3, [r7, #8]
 8025e36:	60d3      	str	r3, [r2, #12]
}
 8025e38:	bf00      	nop
 8025e3a:	3714      	adds	r7, #20
 8025e3c:	46bd      	mov	sp, r7
 8025e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e42:	4770      	bx	lr
 8025e44:	e000ed00 	.word	0xe000ed00

08025e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8025e48:	b480      	push	{r7}
 8025e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8025e4c:	4b04      	ldr	r3, [pc, #16]	@ (8025e60 <__NVIC_GetPriorityGrouping+0x18>)
 8025e4e:	68db      	ldr	r3, [r3, #12]
 8025e50:	0a1b      	lsrs	r3, r3, #8
 8025e52:	f003 0307 	and.w	r3, r3, #7
}
 8025e56:	4618      	mov	r0, r3
 8025e58:	46bd      	mov	sp, r7
 8025e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e5e:	4770      	bx	lr
 8025e60:	e000ed00 	.word	0xe000ed00

08025e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8025e64:	b480      	push	{r7}
 8025e66:	b083      	sub	sp, #12
 8025e68:	af00      	add	r7, sp, #0
 8025e6a:	4603      	mov	r3, r0
 8025e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8025e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	db0b      	blt.n	8025e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8025e76:	79fb      	ldrb	r3, [r7, #7]
 8025e78:	f003 021f 	and.w	r2, r3, #31
 8025e7c:	4907      	ldr	r1, [pc, #28]	@ (8025e9c <__NVIC_EnableIRQ+0x38>)
 8025e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025e82:	095b      	lsrs	r3, r3, #5
 8025e84:	2001      	movs	r0, #1
 8025e86:	fa00 f202 	lsl.w	r2, r0, r2
 8025e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8025e8e:	bf00      	nop
 8025e90:	370c      	adds	r7, #12
 8025e92:	46bd      	mov	sp, r7
 8025e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e98:	4770      	bx	lr
 8025e9a:	bf00      	nop
 8025e9c:	e000e100 	.word	0xe000e100

08025ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8025ea0:	b480      	push	{r7}
 8025ea2:	b083      	sub	sp, #12
 8025ea4:	af00      	add	r7, sp, #0
 8025ea6:	4603      	mov	r3, r0
 8025ea8:	6039      	str	r1, [r7, #0]
 8025eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8025eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	db0a      	blt.n	8025eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8025eb4:	683b      	ldr	r3, [r7, #0]
 8025eb6:	b2da      	uxtb	r2, r3
 8025eb8:	490c      	ldr	r1, [pc, #48]	@ (8025eec <__NVIC_SetPriority+0x4c>)
 8025eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025ebe:	0112      	lsls	r2, r2, #4
 8025ec0:	b2d2      	uxtb	r2, r2
 8025ec2:	440b      	add	r3, r1
 8025ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8025ec8:	e00a      	b.n	8025ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8025eca:	683b      	ldr	r3, [r7, #0]
 8025ecc:	b2da      	uxtb	r2, r3
 8025ece:	4908      	ldr	r1, [pc, #32]	@ (8025ef0 <__NVIC_SetPriority+0x50>)
 8025ed0:	79fb      	ldrb	r3, [r7, #7]
 8025ed2:	f003 030f 	and.w	r3, r3, #15
 8025ed6:	3b04      	subs	r3, #4
 8025ed8:	0112      	lsls	r2, r2, #4
 8025eda:	b2d2      	uxtb	r2, r2
 8025edc:	440b      	add	r3, r1
 8025ede:	761a      	strb	r2, [r3, #24]
}
 8025ee0:	bf00      	nop
 8025ee2:	370c      	adds	r7, #12
 8025ee4:	46bd      	mov	sp, r7
 8025ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025eea:	4770      	bx	lr
 8025eec:	e000e100 	.word	0xe000e100
 8025ef0:	e000ed00 	.word	0xe000ed00

08025ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8025ef4:	b480      	push	{r7}
 8025ef6:	b089      	sub	sp, #36	@ 0x24
 8025ef8:	af00      	add	r7, sp, #0
 8025efa:	60f8      	str	r0, [r7, #12]
 8025efc:	60b9      	str	r1, [r7, #8]
 8025efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8025f00:	68fb      	ldr	r3, [r7, #12]
 8025f02:	f003 0307 	and.w	r3, r3, #7
 8025f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8025f08:	69fb      	ldr	r3, [r7, #28]
 8025f0a:	f1c3 0307 	rsb	r3, r3, #7
 8025f0e:	2b04      	cmp	r3, #4
 8025f10:	bf28      	it	cs
 8025f12:	2304      	movcs	r3, #4
 8025f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8025f16:	69fb      	ldr	r3, [r7, #28]
 8025f18:	3304      	adds	r3, #4
 8025f1a:	2b06      	cmp	r3, #6
 8025f1c:	d902      	bls.n	8025f24 <NVIC_EncodePriority+0x30>
 8025f1e:	69fb      	ldr	r3, [r7, #28]
 8025f20:	3b03      	subs	r3, #3
 8025f22:	e000      	b.n	8025f26 <NVIC_EncodePriority+0x32>
 8025f24:	2300      	movs	r3, #0
 8025f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025f28:	f04f 32ff 	mov.w	r2, #4294967295
 8025f2c:	69bb      	ldr	r3, [r7, #24]
 8025f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8025f32:	43da      	mvns	r2, r3
 8025f34:	68bb      	ldr	r3, [r7, #8]
 8025f36:	401a      	ands	r2, r3
 8025f38:	697b      	ldr	r3, [r7, #20]
 8025f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8025f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8025f40:	697b      	ldr	r3, [r7, #20]
 8025f42:	fa01 f303 	lsl.w	r3, r1, r3
 8025f46:	43d9      	mvns	r1, r3
 8025f48:	687b      	ldr	r3, [r7, #4]
 8025f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025f4c:	4313      	orrs	r3, r2
         );
}
 8025f4e:	4618      	mov	r0, r3
 8025f50:	3724      	adds	r7, #36	@ 0x24
 8025f52:	46bd      	mov	sp, r7
 8025f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f58:	4770      	bx	lr
	...

08025f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8025f5c:	b580      	push	{r7, lr}
 8025f5e:	b082      	sub	sp, #8
 8025f60:	af00      	add	r7, sp, #0
 8025f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8025f64:	687b      	ldr	r3, [r7, #4]
 8025f66:	3b01      	subs	r3, #1
 8025f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025f6c:	d301      	bcc.n	8025f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8025f6e:	2301      	movs	r3, #1
 8025f70:	e00f      	b.n	8025f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8025f72:	4a0a      	ldr	r2, [pc, #40]	@ (8025f9c <SysTick_Config+0x40>)
 8025f74:	687b      	ldr	r3, [r7, #4]
 8025f76:	3b01      	subs	r3, #1
 8025f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8025f7a:	210f      	movs	r1, #15
 8025f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8025f80:	f7ff ff8e 	bl	8025ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8025f84:	4b05      	ldr	r3, [pc, #20]	@ (8025f9c <SysTick_Config+0x40>)
 8025f86:	2200      	movs	r2, #0
 8025f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8025f8a:	4b04      	ldr	r3, [pc, #16]	@ (8025f9c <SysTick_Config+0x40>)
 8025f8c:	2207      	movs	r2, #7
 8025f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8025f90:	2300      	movs	r3, #0
}
 8025f92:	4618      	mov	r0, r3
 8025f94:	3708      	adds	r7, #8
 8025f96:	46bd      	mov	sp, r7
 8025f98:	bd80      	pop	{r7, pc}
 8025f9a:	bf00      	nop
 8025f9c:	e000e010 	.word	0xe000e010

08025fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8025fa0:	b580      	push	{r7, lr}
 8025fa2:	b082      	sub	sp, #8
 8025fa4:	af00      	add	r7, sp, #0
 8025fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8025fa8:	6878      	ldr	r0, [r7, #4]
 8025faa:	f7ff ff29 	bl	8025e00 <__NVIC_SetPriorityGrouping>
}
 8025fae:	bf00      	nop
 8025fb0:	3708      	adds	r7, #8
 8025fb2:	46bd      	mov	sp, r7
 8025fb4:	bd80      	pop	{r7, pc}

08025fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8025fb6:	b580      	push	{r7, lr}
 8025fb8:	b086      	sub	sp, #24
 8025fba:	af00      	add	r7, sp, #0
 8025fbc:	4603      	mov	r3, r0
 8025fbe:	60b9      	str	r1, [r7, #8]
 8025fc0:	607a      	str	r2, [r7, #4]
 8025fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8025fc4:	2300      	movs	r3, #0
 8025fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8025fc8:	f7ff ff3e 	bl	8025e48 <__NVIC_GetPriorityGrouping>
 8025fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8025fce:	687a      	ldr	r2, [r7, #4]
 8025fd0:	68b9      	ldr	r1, [r7, #8]
 8025fd2:	6978      	ldr	r0, [r7, #20]
 8025fd4:	f7ff ff8e 	bl	8025ef4 <NVIC_EncodePriority>
 8025fd8:	4602      	mov	r2, r0
 8025fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8025fde:	4611      	mov	r1, r2
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	f7ff ff5d 	bl	8025ea0 <__NVIC_SetPriority>
}
 8025fe6:	bf00      	nop
 8025fe8:	3718      	adds	r7, #24
 8025fea:	46bd      	mov	sp, r7
 8025fec:	bd80      	pop	{r7, pc}

08025fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8025fee:	b580      	push	{r7, lr}
 8025ff0:	b082      	sub	sp, #8
 8025ff2:	af00      	add	r7, sp, #0
 8025ff4:	4603      	mov	r3, r0
 8025ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8025ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025ffc:	4618      	mov	r0, r3
 8025ffe:	f7ff ff31 	bl	8025e64 <__NVIC_EnableIRQ>
}
 8026002:	bf00      	nop
 8026004:	3708      	adds	r7, #8
 8026006:	46bd      	mov	sp, r7
 8026008:	bd80      	pop	{r7, pc}

0802600a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802600a:	b580      	push	{r7, lr}
 802600c:	b082      	sub	sp, #8
 802600e:	af00      	add	r7, sp, #0
 8026010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026012:	6878      	ldr	r0, [r7, #4]
 8026014:	f7ff ffa2 	bl	8025f5c <SysTick_Config>
 8026018:	4603      	mov	r3, r0
}
 802601a:	4618      	mov	r0, r3
 802601c:	3708      	adds	r7, #8
 802601e:	46bd      	mov	sp, r7
 8026020:	bd80      	pop	{r7, pc}
	...

08026024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026024:	b580      	push	{r7, lr}
 8026026:	b086      	sub	sp, #24
 8026028:	af00      	add	r7, sp, #0
 802602a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802602c:	2300      	movs	r3, #0
 802602e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026030:	f7ff f98c 	bl	802534c <HAL_GetTick>
 8026034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026036:	687b      	ldr	r3, [r7, #4]
 8026038:	2b00      	cmp	r3, #0
 802603a:	d101      	bne.n	8026040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802603c:	2301      	movs	r3, #1
 802603e:	e099      	b.n	8026174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026040:	687b      	ldr	r3, [r7, #4]
 8026042:	2200      	movs	r2, #0
 8026044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026048:	687b      	ldr	r3, [r7, #4]
 802604a:	2202      	movs	r2, #2
 802604c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	681a      	ldr	r2, [r3, #0]
 8026056:	687b      	ldr	r3, [r7, #4]
 8026058:	681b      	ldr	r3, [r3, #0]
 802605a:	f022 0201 	bic.w	r2, r2, #1
 802605e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026060:	e00f      	b.n	8026082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026062:	f7ff f973 	bl	802534c <HAL_GetTick>
 8026066:	4602      	mov	r2, r0
 8026068:	693b      	ldr	r3, [r7, #16]
 802606a:	1ad3      	subs	r3, r2, r3
 802606c:	2b05      	cmp	r3, #5
 802606e:	d908      	bls.n	8026082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	2220      	movs	r2, #32
 8026074:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026076:	687b      	ldr	r3, [r7, #4]
 8026078:	2203      	movs	r2, #3
 802607a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 802607e:	2303      	movs	r3, #3
 8026080:	e078      	b.n	8026174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026082:	687b      	ldr	r3, [r7, #4]
 8026084:	681b      	ldr	r3, [r3, #0]
 8026086:	681b      	ldr	r3, [r3, #0]
 8026088:	f003 0301 	and.w	r3, r3, #1
 802608c:	2b00      	cmp	r3, #0
 802608e:	d1e8      	bne.n	8026062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026090:	687b      	ldr	r3, [r7, #4]
 8026092:	681b      	ldr	r3, [r3, #0]
 8026094:	681b      	ldr	r3, [r3, #0]
 8026096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026098:	697a      	ldr	r2, [r7, #20]
 802609a:	4b38      	ldr	r3, [pc, #224]	@ (802617c <HAL_DMA_Init+0x158>)
 802609c:	4013      	ands	r3, r2
 802609e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	685a      	ldr	r2, [r3, #4]
 80260a4:	687b      	ldr	r3, [r7, #4]
 80260a6:	689b      	ldr	r3, [r3, #8]
 80260a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80260aa:	687b      	ldr	r3, [r7, #4]
 80260ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80260ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80260b0:	687b      	ldr	r3, [r7, #4]
 80260b2:	691b      	ldr	r3, [r3, #16]
 80260b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80260b6:	687b      	ldr	r3, [r7, #4]
 80260b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80260ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80260bc:	687b      	ldr	r3, [r7, #4]
 80260be:	699b      	ldr	r3, [r3, #24]
 80260c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80260c2:	687b      	ldr	r3, [r7, #4]
 80260c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80260c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	6a1b      	ldr	r3, [r3, #32]
 80260cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80260ce:	697a      	ldr	r2, [r7, #20]
 80260d0:	4313      	orrs	r3, r2
 80260d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80260d4:	687b      	ldr	r3, [r7, #4]
 80260d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80260d8:	2b04      	cmp	r3, #4
 80260da:	d107      	bne.n	80260ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80260dc:	687b      	ldr	r3, [r7, #4]
 80260de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80260e0:	687b      	ldr	r3, [r7, #4]
 80260e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80260e4:	4313      	orrs	r3, r2
 80260e6:	697a      	ldr	r2, [r7, #20]
 80260e8:	4313      	orrs	r3, r2
 80260ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80260ec:	687b      	ldr	r3, [r7, #4]
 80260ee:	681b      	ldr	r3, [r3, #0]
 80260f0:	697a      	ldr	r2, [r7, #20]
 80260f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	681b      	ldr	r3, [r3, #0]
 80260f8:	695b      	ldr	r3, [r3, #20]
 80260fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80260fc:	697b      	ldr	r3, [r7, #20]
 80260fe:	f023 0307 	bic.w	r3, r3, #7
 8026102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026108:	697a      	ldr	r2, [r7, #20]
 802610a:	4313      	orrs	r3, r2
 802610c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026112:	2b04      	cmp	r3, #4
 8026114:	d117      	bne.n	8026146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026116:	687b      	ldr	r3, [r7, #4]
 8026118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802611a:	697a      	ldr	r2, [r7, #20]
 802611c:	4313      	orrs	r3, r2
 802611e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026124:	2b00      	cmp	r3, #0
 8026126:	d00e      	beq.n	8026146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026128:	6878      	ldr	r0, [r7, #4]
 802612a:	f000 fb1b 	bl	8026764 <DMA_CheckFifoParam>
 802612e:	4603      	mov	r3, r0
 8026130:	2b00      	cmp	r3, #0
 8026132:	d008      	beq.n	8026146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	2240      	movs	r2, #64	@ 0x40
 8026138:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802613a:	687b      	ldr	r3, [r7, #4]
 802613c:	2201      	movs	r2, #1
 802613e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8026142:	2301      	movs	r3, #1
 8026144:	e016      	b.n	8026174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	697a      	ldr	r2, [r7, #20]
 802614c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802614e:	6878      	ldr	r0, [r7, #4]
 8026150:	f000 fad2 	bl	80266f8 <DMA_CalcBaseAndBitshift>
 8026154:	4603      	mov	r3, r0
 8026156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802615c:	223f      	movs	r2, #63	@ 0x3f
 802615e:	409a      	lsls	r2, r3
 8026160:	68fb      	ldr	r3, [r7, #12]
 8026162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026164:	687b      	ldr	r3, [r7, #4]
 8026166:	2200      	movs	r2, #0
 8026168:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802616a:	687b      	ldr	r3, [r7, #4]
 802616c:	2201      	movs	r2, #1
 802616e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8026172:	2300      	movs	r3, #0
}
 8026174:	4618      	mov	r0, r3
 8026176:	3718      	adds	r7, #24
 8026178:	46bd      	mov	sp, r7
 802617a:	bd80      	pop	{r7, pc}
 802617c:	f010803f 	.word	0xf010803f

08026180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026180:	b580      	push	{r7, lr}
 8026182:	b086      	sub	sp, #24
 8026184:	af00      	add	r7, sp, #0
 8026186:	60f8      	str	r0, [r7, #12]
 8026188:	60b9      	str	r1, [r7, #8]
 802618a:	607a      	str	r2, [r7, #4]
 802618c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802618e:	2300      	movs	r3, #0
 8026190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026192:	68fb      	ldr	r3, [r7, #12]
 8026194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8026196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026198:	68fb      	ldr	r3, [r7, #12]
 802619a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 802619e:	2b01      	cmp	r3, #1
 80261a0:	d101      	bne.n	80261a6 <HAL_DMA_Start_IT+0x26>
 80261a2:	2302      	movs	r3, #2
 80261a4:	e040      	b.n	8026228 <HAL_DMA_Start_IT+0xa8>
 80261a6:	68fb      	ldr	r3, [r7, #12]
 80261a8:	2201      	movs	r2, #1
 80261aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80261ae:	68fb      	ldr	r3, [r7, #12]
 80261b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80261b4:	b2db      	uxtb	r3, r3
 80261b6:	2b01      	cmp	r3, #1
 80261b8:	d12f      	bne.n	802621a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80261ba:	68fb      	ldr	r3, [r7, #12]
 80261bc:	2202      	movs	r2, #2
 80261be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80261c2:	68fb      	ldr	r3, [r7, #12]
 80261c4:	2200      	movs	r2, #0
 80261c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80261c8:	683b      	ldr	r3, [r7, #0]
 80261ca:	687a      	ldr	r2, [r7, #4]
 80261cc:	68b9      	ldr	r1, [r7, #8]
 80261ce:	68f8      	ldr	r0, [r7, #12]
 80261d0:	f000 fa64 	bl	802669c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80261d4:	68fb      	ldr	r3, [r7, #12]
 80261d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80261d8:	223f      	movs	r2, #63	@ 0x3f
 80261da:	409a      	lsls	r2, r3
 80261dc:	693b      	ldr	r3, [r7, #16]
 80261de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80261e0:	68fb      	ldr	r3, [r7, #12]
 80261e2:	681b      	ldr	r3, [r3, #0]
 80261e4:	681a      	ldr	r2, [r3, #0]
 80261e6:	68fb      	ldr	r3, [r7, #12]
 80261e8:	681b      	ldr	r3, [r3, #0]
 80261ea:	f042 0216 	orr.w	r2, r2, #22
 80261ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80261f0:	68fb      	ldr	r3, [r7, #12]
 80261f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80261f4:	2b00      	cmp	r3, #0
 80261f6:	d007      	beq.n	8026208 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80261f8:	68fb      	ldr	r3, [r7, #12]
 80261fa:	681b      	ldr	r3, [r3, #0]
 80261fc:	681a      	ldr	r2, [r3, #0]
 80261fe:	68fb      	ldr	r3, [r7, #12]
 8026200:	681b      	ldr	r3, [r3, #0]
 8026202:	f042 0208 	orr.w	r2, r2, #8
 8026206:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8026208:	68fb      	ldr	r3, [r7, #12]
 802620a:	681b      	ldr	r3, [r3, #0]
 802620c:	681a      	ldr	r2, [r3, #0]
 802620e:	68fb      	ldr	r3, [r7, #12]
 8026210:	681b      	ldr	r3, [r3, #0]
 8026212:	f042 0201 	orr.w	r2, r2, #1
 8026216:	601a      	str	r2, [r3, #0]
 8026218:	e005      	b.n	8026226 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802621a:	68fb      	ldr	r3, [r7, #12]
 802621c:	2200      	movs	r2, #0
 802621e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8026222:	2302      	movs	r3, #2
 8026224:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8026226:	7dfb      	ldrb	r3, [r7, #23]
}
 8026228:	4618      	mov	r0, r3
 802622a:	3718      	adds	r7, #24
 802622c:	46bd      	mov	sp, r7
 802622e:	bd80      	pop	{r7, pc}

08026230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8026230:	b580      	push	{r7, lr}
 8026232:	b084      	sub	sp, #16
 8026234:	af00      	add	r7, sp, #0
 8026236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802623c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 802623e:	f7ff f885 	bl	802534c <HAL_GetTick>
 8026242:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8026244:	687b      	ldr	r3, [r7, #4]
 8026246:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802624a:	b2db      	uxtb	r3, r3
 802624c:	2b02      	cmp	r3, #2
 802624e:	d008      	beq.n	8026262 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	2280      	movs	r2, #128	@ 0x80
 8026254:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8026256:	687b      	ldr	r3, [r7, #4]
 8026258:	2200      	movs	r2, #0
 802625a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 802625e:	2301      	movs	r3, #1
 8026260:	e052      	b.n	8026308 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8026262:	687b      	ldr	r3, [r7, #4]
 8026264:	681b      	ldr	r3, [r3, #0]
 8026266:	681a      	ldr	r2, [r3, #0]
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	681b      	ldr	r3, [r3, #0]
 802626c:	f022 0216 	bic.w	r2, r2, #22
 8026270:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	681b      	ldr	r3, [r3, #0]
 8026276:	695a      	ldr	r2, [r3, #20]
 8026278:	687b      	ldr	r3, [r7, #4]
 802627a:	681b      	ldr	r3, [r3, #0]
 802627c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8026280:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8026282:	687b      	ldr	r3, [r7, #4]
 8026284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026286:	2b00      	cmp	r3, #0
 8026288:	d103      	bne.n	8026292 <HAL_DMA_Abort+0x62>
 802628a:	687b      	ldr	r3, [r7, #4]
 802628c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802628e:	2b00      	cmp	r3, #0
 8026290:	d007      	beq.n	80262a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026292:	687b      	ldr	r3, [r7, #4]
 8026294:	681b      	ldr	r3, [r3, #0]
 8026296:	681a      	ldr	r2, [r3, #0]
 8026298:	687b      	ldr	r3, [r7, #4]
 802629a:	681b      	ldr	r3, [r3, #0]
 802629c:	f022 0208 	bic.w	r2, r2, #8
 80262a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80262a2:	687b      	ldr	r3, [r7, #4]
 80262a4:	681b      	ldr	r3, [r3, #0]
 80262a6:	681a      	ldr	r2, [r3, #0]
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	f022 0201 	bic.w	r2, r2, #1
 80262b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80262b2:	e013      	b.n	80262dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80262b4:	f7ff f84a 	bl	802534c <HAL_GetTick>
 80262b8:	4602      	mov	r2, r0
 80262ba:	68bb      	ldr	r3, [r7, #8]
 80262bc:	1ad3      	subs	r3, r2, r3
 80262be:	2b05      	cmp	r3, #5
 80262c0:	d90c      	bls.n	80262dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	2220      	movs	r2, #32
 80262c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80262c8:	687b      	ldr	r3, [r7, #4]
 80262ca:	2200      	movs	r2, #0
 80262cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	2203      	movs	r2, #3
 80262d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 80262d8:	2303      	movs	r3, #3
 80262da:	e015      	b.n	8026308 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80262dc:	687b      	ldr	r3, [r7, #4]
 80262de:	681b      	ldr	r3, [r3, #0]
 80262e0:	681b      	ldr	r3, [r3, #0]
 80262e2:	f003 0301 	and.w	r3, r3, #1
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	d1e4      	bne.n	80262b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80262ea:	687b      	ldr	r3, [r7, #4]
 80262ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80262ee:	223f      	movs	r2, #63	@ 0x3f
 80262f0:	409a      	lsls	r2, r3
 80262f2:	68fb      	ldr	r3, [r7, #12]
 80262f4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80262f6:	687b      	ldr	r3, [r7, #4]
 80262f8:	2200      	movs	r2, #0
 80262fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80262fe:	687b      	ldr	r3, [r7, #4]
 8026300:	2201      	movs	r2, #1
 8026302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8026306:	2300      	movs	r3, #0
}
 8026308:	4618      	mov	r0, r3
 802630a:	3710      	adds	r7, #16
 802630c:	46bd      	mov	sp, r7
 802630e:	bd80      	pop	{r7, pc}

08026310 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8026310:	b480      	push	{r7}
 8026312:	b083      	sub	sp, #12
 8026314:	af00      	add	r7, sp, #0
 8026316:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8026318:	687b      	ldr	r3, [r7, #4]
 802631a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802631e:	b2db      	uxtb	r3, r3
 8026320:	2b02      	cmp	r3, #2
 8026322:	d004      	beq.n	802632e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	2280      	movs	r2, #128	@ 0x80
 8026328:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 802632a:	2301      	movs	r3, #1
 802632c:	e00c      	b.n	8026348 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802632e:	687b      	ldr	r3, [r7, #4]
 8026330:	2205      	movs	r2, #5
 8026332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8026336:	687b      	ldr	r3, [r7, #4]
 8026338:	681b      	ldr	r3, [r3, #0]
 802633a:	681a      	ldr	r2, [r3, #0]
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	681b      	ldr	r3, [r3, #0]
 8026340:	f022 0201 	bic.w	r2, r2, #1
 8026344:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8026346:	2300      	movs	r3, #0
}
 8026348:	4618      	mov	r0, r3
 802634a:	370c      	adds	r7, #12
 802634c:	46bd      	mov	sp, r7
 802634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026352:	4770      	bx	lr

08026354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8026354:	b580      	push	{r7, lr}
 8026356:	b086      	sub	sp, #24
 8026358:	af00      	add	r7, sp, #0
 802635a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802635c:	2300      	movs	r3, #0
 802635e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8026360:	4b8e      	ldr	r3, [pc, #568]	@ (802659c <HAL_DMA_IRQHandler+0x248>)
 8026362:	681b      	ldr	r3, [r3, #0]
 8026364:	4a8e      	ldr	r2, [pc, #568]	@ (80265a0 <HAL_DMA_IRQHandler+0x24c>)
 8026366:	fba2 2303 	umull	r2, r3, r2, r3
 802636a:	0a9b      	lsrs	r3, r3, #10
 802636c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802636e:	687b      	ldr	r3, [r7, #4]
 8026370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8026372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8026374:	693b      	ldr	r3, [r7, #16]
 8026376:	681b      	ldr	r3, [r3, #0]
 8026378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802637a:	687b      	ldr	r3, [r7, #4]
 802637c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802637e:	2208      	movs	r2, #8
 8026380:	409a      	lsls	r2, r3
 8026382:	68fb      	ldr	r3, [r7, #12]
 8026384:	4013      	ands	r3, r2
 8026386:	2b00      	cmp	r3, #0
 8026388:	d01a      	beq.n	80263c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802638a:	687b      	ldr	r3, [r7, #4]
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	681b      	ldr	r3, [r3, #0]
 8026390:	f003 0304 	and.w	r3, r3, #4
 8026394:	2b00      	cmp	r3, #0
 8026396:	d013      	beq.n	80263c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	681b      	ldr	r3, [r3, #0]
 802639c:	681a      	ldr	r2, [r3, #0]
 802639e:	687b      	ldr	r3, [r7, #4]
 80263a0:	681b      	ldr	r3, [r3, #0]
 80263a2:	f022 0204 	bic.w	r2, r2, #4
 80263a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80263a8:	687b      	ldr	r3, [r7, #4]
 80263aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80263ac:	2208      	movs	r2, #8
 80263ae:	409a      	lsls	r2, r3
 80263b0:	693b      	ldr	r3, [r7, #16]
 80263b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80263b4:	687b      	ldr	r3, [r7, #4]
 80263b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80263b8:	f043 0201 	orr.w	r2, r3, #1
 80263bc:	687b      	ldr	r3, [r7, #4]
 80263be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80263c0:	687b      	ldr	r3, [r7, #4]
 80263c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80263c4:	2201      	movs	r2, #1
 80263c6:	409a      	lsls	r2, r3
 80263c8:	68fb      	ldr	r3, [r7, #12]
 80263ca:	4013      	ands	r3, r2
 80263cc:	2b00      	cmp	r3, #0
 80263ce:	d012      	beq.n	80263f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80263d0:	687b      	ldr	r3, [r7, #4]
 80263d2:	681b      	ldr	r3, [r3, #0]
 80263d4:	695b      	ldr	r3, [r3, #20]
 80263d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d00b      	beq.n	80263f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80263de:	687b      	ldr	r3, [r7, #4]
 80263e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80263e2:	2201      	movs	r2, #1
 80263e4:	409a      	lsls	r2, r3
 80263e6:	693b      	ldr	r3, [r7, #16]
 80263e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80263ea:	687b      	ldr	r3, [r7, #4]
 80263ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80263ee:	f043 0202 	orr.w	r2, r3, #2
 80263f2:	687b      	ldr	r3, [r7, #4]
 80263f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80263fa:	2204      	movs	r2, #4
 80263fc:	409a      	lsls	r2, r3
 80263fe:	68fb      	ldr	r3, [r7, #12]
 8026400:	4013      	ands	r3, r2
 8026402:	2b00      	cmp	r3, #0
 8026404:	d012      	beq.n	802642c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8026406:	687b      	ldr	r3, [r7, #4]
 8026408:	681b      	ldr	r3, [r3, #0]
 802640a:	681b      	ldr	r3, [r3, #0]
 802640c:	f003 0302 	and.w	r3, r3, #2
 8026410:	2b00      	cmp	r3, #0
 8026412:	d00b      	beq.n	802642c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8026414:	687b      	ldr	r3, [r7, #4]
 8026416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8026418:	2204      	movs	r2, #4
 802641a:	409a      	lsls	r2, r3
 802641c:	693b      	ldr	r3, [r7, #16]
 802641e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8026420:	687b      	ldr	r3, [r7, #4]
 8026422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8026424:	f043 0204 	orr.w	r2, r3, #4
 8026428:	687b      	ldr	r3, [r7, #4]
 802642a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8026430:	2210      	movs	r2, #16
 8026432:	409a      	lsls	r2, r3
 8026434:	68fb      	ldr	r3, [r7, #12]
 8026436:	4013      	ands	r3, r2
 8026438:	2b00      	cmp	r3, #0
 802643a:	d043      	beq.n	80264c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802643c:	687b      	ldr	r3, [r7, #4]
 802643e:	681b      	ldr	r3, [r3, #0]
 8026440:	681b      	ldr	r3, [r3, #0]
 8026442:	f003 0308 	and.w	r3, r3, #8
 8026446:	2b00      	cmp	r3, #0
 8026448:	d03c      	beq.n	80264c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802644a:	687b      	ldr	r3, [r7, #4]
 802644c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802644e:	2210      	movs	r2, #16
 8026450:	409a      	lsls	r2, r3
 8026452:	693b      	ldr	r3, [r7, #16]
 8026454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8026456:	687b      	ldr	r3, [r7, #4]
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	681b      	ldr	r3, [r3, #0]
 802645c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8026460:	2b00      	cmp	r3, #0
 8026462:	d018      	beq.n	8026496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	681b      	ldr	r3, [r3, #0]
 8026468:	681b      	ldr	r3, [r3, #0]
 802646a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802646e:	2b00      	cmp	r3, #0
 8026470:	d108      	bne.n	8026484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8026472:	687b      	ldr	r3, [r7, #4]
 8026474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026476:	2b00      	cmp	r3, #0
 8026478:	d024      	beq.n	80264c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802647e:	6878      	ldr	r0, [r7, #4]
 8026480:	4798      	blx	r3
 8026482:	e01f      	b.n	80264c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8026484:	687b      	ldr	r3, [r7, #4]
 8026486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8026488:	2b00      	cmp	r3, #0
 802648a:	d01b      	beq.n	80264c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802648c:	687b      	ldr	r3, [r7, #4]
 802648e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8026490:	6878      	ldr	r0, [r7, #4]
 8026492:	4798      	blx	r3
 8026494:	e016      	b.n	80264c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	681b      	ldr	r3, [r3, #0]
 802649a:	681b      	ldr	r3, [r3, #0]
 802649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	d107      	bne.n	80264b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80264a4:	687b      	ldr	r3, [r7, #4]
 80264a6:	681b      	ldr	r3, [r3, #0]
 80264a8:	681a      	ldr	r2, [r3, #0]
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	681b      	ldr	r3, [r3, #0]
 80264ae:	f022 0208 	bic.w	r2, r2, #8
 80264b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80264b4:	687b      	ldr	r3, [r7, #4]
 80264b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80264b8:	2b00      	cmp	r3, #0
 80264ba:	d003      	beq.n	80264c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80264bc:	687b      	ldr	r3, [r7, #4]
 80264be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80264c0:	6878      	ldr	r0, [r7, #4]
 80264c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80264c8:	2220      	movs	r2, #32
 80264ca:	409a      	lsls	r2, r3
 80264cc:	68fb      	ldr	r3, [r7, #12]
 80264ce:	4013      	ands	r3, r2
 80264d0:	2b00      	cmp	r3, #0
 80264d2:	f000 808f 	beq.w	80265f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80264d6:	687b      	ldr	r3, [r7, #4]
 80264d8:	681b      	ldr	r3, [r3, #0]
 80264da:	681b      	ldr	r3, [r3, #0]
 80264dc:	f003 0310 	and.w	r3, r3, #16
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	f000 8087 	beq.w	80265f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80264e6:	687b      	ldr	r3, [r7, #4]
 80264e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80264ea:	2220      	movs	r2, #32
 80264ec:	409a      	lsls	r2, r3
 80264ee:	693b      	ldr	r3, [r7, #16]
 80264f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80264f2:	687b      	ldr	r3, [r7, #4]
 80264f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80264f8:	b2db      	uxtb	r3, r3
 80264fa:	2b05      	cmp	r3, #5
 80264fc:	d136      	bne.n	802656c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	681b      	ldr	r3, [r3, #0]
 8026502:	681a      	ldr	r2, [r3, #0]
 8026504:	687b      	ldr	r3, [r7, #4]
 8026506:	681b      	ldr	r3, [r3, #0]
 8026508:	f022 0216 	bic.w	r2, r2, #22
 802650c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	681b      	ldr	r3, [r3, #0]
 8026512:	695a      	ldr	r2, [r3, #20]
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	681b      	ldr	r3, [r3, #0]
 8026518:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802651c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802651e:	687b      	ldr	r3, [r7, #4]
 8026520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026522:	2b00      	cmp	r3, #0
 8026524:	d103      	bne.n	802652e <HAL_DMA_IRQHandler+0x1da>
 8026526:	687b      	ldr	r3, [r7, #4]
 8026528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802652a:	2b00      	cmp	r3, #0
 802652c:	d007      	beq.n	802653e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802652e:	687b      	ldr	r3, [r7, #4]
 8026530:	681b      	ldr	r3, [r3, #0]
 8026532:	681a      	ldr	r2, [r3, #0]
 8026534:	687b      	ldr	r3, [r7, #4]
 8026536:	681b      	ldr	r3, [r3, #0]
 8026538:	f022 0208 	bic.w	r2, r2, #8
 802653c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8026542:	223f      	movs	r2, #63	@ 0x3f
 8026544:	409a      	lsls	r2, r3
 8026546:	693b      	ldr	r3, [r7, #16]
 8026548:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802654a:	687b      	ldr	r3, [r7, #4]
 802654c:	2200      	movs	r2, #0
 802654e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026552:	687b      	ldr	r3, [r7, #4]
 8026554:	2201      	movs	r2, #1
 8026556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 802655a:	687b      	ldr	r3, [r7, #4]
 802655c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802655e:	2b00      	cmp	r3, #0
 8026560:	d07e      	beq.n	8026660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8026566:	6878      	ldr	r0, [r7, #4]
 8026568:	4798      	blx	r3
        }
        return;
 802656a:	e079      	b.n	8026660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802656c:	687b      	ldr	r3, [r7, #4]
 802656e:	681b      	ldr	r3, [r3, #0]
 8026570:	681b      	ldr	r3, [r3, #0]
 8026572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8026576:	2b00      	cmp	r3, #0
 8026578:	d01d      	beq.n	80265b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802657a:	687b      	ldr	r3, [r7, #4]
 802657c:	681b      	ldr	r3, [r3, #0]
 802657e:	681b      	ldr	r3, [r3, #0]
 8026580:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8026584:	2b00      	cmp	r3, #0
 8026586:	d10d      	bne.n	80265a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8026588:	687b      	ldr	r3, [r7, #4]
 802658a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802658c:	2b00      	cmp	r3, #0
 802658e:	d031      	beq.n	80265f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8026590:	687b      	ldr	r3, [r7, #4]
 8026592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026594:	6878      	ldr	r0, [r7, #4]
 8026596:	4798      	blx	r3
 8026598:	e02c      	b.n	80265f4 <HAL_DMA_IRQHandler+0x2a0>
 802659a:	bf00      	nop
 802659c:	20001028 	.word	0x20001028
 80265a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80265a4:	687b      	ldr	r3, [r7, #4]
 80265a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	d023      	beq.n	80265f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80265b0:	6878      	ldr	r0, [r7, #4]
 80265b2:	4798      	blx	r3
 80265b4:	e01e      	b.n	80265f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80265b6:	687b      	ldr	r3, [r7, #4]
 80265b8:	681b      	ldr	r3, [r3, #0]
 80265ba:	681b      	ldr	r3, [r3, #0]
 80265bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	d10f      	bne.n	80265e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80265c4:	687b      	ldr	r3, [r7, #4]
 80265c6:	681b      	ldr	r3, [r3, #0]
 80265c8:	681a      	ldr	r2, [r3, #0]
 80265ca:	687b      	ldr	r3, [r7, #4]
 80265cc:	681b      	ldr	r3, [r3, #0]
 80265ce:	f022 0210 	bic.w	r2, r2, #16
 80265d2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80265d4:	687b      	ldr	r3, [r7, #4]
 80265d6:	2200      	movs	r2, #0
 80265d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80265dc:	687b      	ldr	r3, [r7, #4]
 80265de:	2201      	movs	r2, #1
 80265e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80265e4:	687b      	ldr	r3, [r7, #4]
 80265e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80265e8:	2b00      	cmp	r3, #0
 80265ea:	d003      	beq.n	80265f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80265ec:	687b      	ldr	r3, [r7, #4]
 80265ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80265f0:	6878      	ldr	r0, [r7, #4]
 80265f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80265f4:	687b      	ldr	r3, [r7, #4]
 80265f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80265f8:	2b00      	cmp	r3, #0
 80265fa:	d032      	beq.n	8026662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8026600:	f003 0301 	and.w	r3, r3, #1
 8026604:	2b00      	cmp	r3, #0
 8026606:	d022      	beq.n	802664e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8026608:	687b      	ldr	r3, [r7, #4]
 802660a:	2205      	movs	r2, #5
 802660c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8026610:	687b      	ldr	r3, [r7, #4]
 8026612:	681b      	ldr	r3, [r3, #0]
 8026614:	681a      	ldr	r2, [r3, #0]
 8026616:	687b      	ldr	r3, [r7, #4]
 8026618:	681b      	ldr	r3, [r3, #0]
 802661a:	f022 0201 	bic.w	r2, r2, #1
 802661e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8026620:	68bb      	ldr	r3, [r7, #8]
 8026622:	3301      	adds	r3, #1
 8026624:	60bb      	str	r3, [r7, #8]
 8026626:	697a      	ldr	r2, [r7, #20]
 8026628:	429a      	cmp	r2, r3
 802662a:	d307      	bcc.n	802663c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802662c:	687b      	ldr	r3, [r7, #4]
 802662e:	681b      	ldr	r3, [r3, #0]
 8026630:	681b      	ldr	r3, [r3, #0]
 8026632:	f003 0301 	and.w	r3, r3, #1
 8026636:	2b00      	cmp	r3, #0
 8026638:	d1f2      	bne.n	8026620 <HAL_DMA_IRQHandler+0x2cc>
 802663a:	e000      	b.n	802663e <HAL_DMA_IRQHandler+0x2ea>
          break;
 802663c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802663e:	687b      	ldr	r3, [r7, #4]
 8026640:	2200      	movs	r2, #0
 8026642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	2201      	movs	r2, #1
 802664a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8026652:	2b00      	cmp	r3, #0
 8026654:	d005      	beq.n	8026662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8026656:	687b      	ldr	r3, [r7, #4]
 8026658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802665a:	6878      	ldr	r0, [r7, #4]
 802665c:	4798      	blx	r3
 802665e:	e000      	b.n	8026662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8026660:	bf00      	nop
    }
  }
}
 8026662:	3718      	adds	r7, #24
 8026664:	46bd      	mov	sp, r7
 8026666:	bd80      	pop	{r7, pc}

08026668 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8026668:	b480      	push	{r7}
 802666a:	b083      	sub	sp, #12
 802666c:	af00      	add	r7, sp, #0
 802666e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8026670:	687b      	ldr	r3, [r7, #4]
 8026672:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8026676:	b2db      	uxtb	r3, r3
}
 8026678:	4618      	mov	r0, r3
 802667a:	370c      	adds	r7, #12
 802667c:	46bd      	mov	sp, r7
 802667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026682:	4770      	bx	lr

08026684 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8026684:	b480      	push	{r7}
 8026686:	b083      	sub	sp, #12
 8026688:	af00      	add	r7, sp, #0
 802668a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802668c:	687b      	ldr	r3, [r7, #4]
 802668e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8026690:	4618      	mov	r0, r3
 8026692:	370c      	adds	r7, #12
 8026694:	46bd      	mov	sp, r7
 8026696:	f85d 7b04 	ldr.w	r7, [sp], #4
 802669a:	4770      	bx	lr

0802669c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802669c:	b480      	push	{r7}
 802669e:	b085      	sub	sp, #20
 80266a0:	af00      	add	r7, sp, #0
 80266a2:	60f8      	str	r0, [r7, #12]
 80266a4:	60b9      	str	r1, [r7, #8]
 80266a6:	607a      	str	r2, [r7, #4]
 80266a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80266aa:	68fb      	ldr	r3, [r7, #12]
 80266ac:	681b      	ldr	r3, [r3, #0]
 80266ae:	681a      	ldr	r2, [r3, #0]
 80266b0:	68fb      	ldr	r3, [r7, #12]
 80266b2:	681b      	ldr	r3, [r3, #0]
 80266b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80266b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80266ba:	68fb      	ldr	r3, [r7, #12]
 80266bc:	681b      	ldr	r3, [r3, #0]
 80266be:	683a      	ldr	r2, [r7, #0]
 80266c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80266c2:	68fb      	ldr	r3, [r7, #12]
 80266c4:	689b      	ldr	r3, [r3, #8]
 80266c6:	2b40      	cmp	r3, #64	@ 0x40
 80266c8:	d108      	bne.n	80266dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80266ca:	68fb      	ldr	r3, [r7, #12]
 80266cc:	681b      	ldr	r3, [r3, #0]
 80266ce:	687a      	ldr	r2, [r7, #4]
 80266d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80266d2:	68fb      	ldr	r3, [r7, #12]
 80266d4:	681b      	ldr	r3, [r3, #0]
 80266d6:	68ba      	ldr	r2, [r7, #8]
 80266d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80266da:	e007      	b.n	80266ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80266dc:	68fb      	ldr	r3, [r7, #12]
 80266de:	681b      	ldr	r3, [r3, #0]
 80266e0:	68ba      	ldr	r2, [r7, #8]
 80266e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	681b      	ldr	r3, [r3, #0]
 80266e8:	687a      	ldr	r2, [r7, #4]
 80266ea:	60da      	str	r2, [r3, #12]
}
 80266ec:	bf00      	nop
 80266ee:	3714      	adds	r7, #20
 80266f0:	46bd      	mov	sp, r7
 80266f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266f6:	4770      	bx	lr

080266f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80266f8:	b480      	push	{r7}
 80266fa:	b085      	sub	sp, #20
 80266fc:	af00      	add	r7, sp, #0
 80266fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	681b      	ldr	r3, [r3, #0]
 8026704:	b2db      	uxtb	r3, r3
 8026706:	3b10      	subs	r3, #16
 8026708:	4a14      	ldr	r2, [pc, #80]	@ (802675c <DMA_CalcBaseAndBitshift+0x64>)
 802670a:	fba2 2303 	umull	r2, r3, r2, r3
 802670e:	091b      	lsrs	r3, r3, #4
 8026710:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8026712:	4a13      	ldr	r2, [pc, #76]	@ (8026760 <DMA_CalcBaseAndBitshift+0x68>)
 8026714:	68fb      	ldr	r3, [r7, #12]
 8026716:	4413      	add	r3, r2
 8026718:	781b      	ldrb	r3, [r3, #0]
 802671a:	461a      	mov	r2, r3
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8026720:	68fb      	ldr	r3, [r7, #12]
 8026722:	2b03      	cmp	r3, #3
 8026724:	d909      	bls.n	802673a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802672e:	f023 0303 	bic.w	r3, r3, #3
 8026732:	1d1a      	adds	r2, r3, #4
 8026734:	687b      	ldr	r3, [r7, #4]
 8026736:	659a      	str	r2, [r3, #88]	@ 0x58
 8026738:	e007      	b.n	802674a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8026742:	f023 0303 	bic.w	r3, r3, #3
 8026746:	687a      	ldr	r2, [r7, #4]
 8026748:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 802674a:	687b      	ldr	r3, [r7, #4]
 802674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 802674e:	4618      	mov	r0, r3
 8026750:	3714      	adds	r7, #20
 8026752:	46bd      	mov	sp, r7
 8026754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026758:	4770      	bx	lr
 802675a:	bf00      	nop
 802675c:	aaaaaaab 	.word	0xaaaaaaab
 8026760:	080407b8 	.word	0x080407b8

08026764 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8026764:	b480      	push	{r7}
 8026766:	b085      	sub	sp, #20
 8026768:	af00      	add	r7, sp, #0
 802676a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802676c:	2300      	movs	r3, #0
 802676e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026774:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	699b      	ldr	r3, [r3, #24]
 802677a:	2b00      	cmp	r3, #0
 802677c:	d11f      	bne.n	80267be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802677e:	68bb      	ldr	r3, [r7, #8]
 8026780:	2b03      	cmp	r3, #3
 8026782:	d856      	bhi.n	8026832 <DMA_CheckFifoParam+0xce>
 8026784:	a201      	add	r2, pc, #4	@ (adr r2, 802678c <DMA_CheckFifoParam+0x28>)
 8026786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802678a:	bf00      	nop
 802678c:	0802679d 	.word	0x0802679d
 8026790:	080267af 	.word	0x080267af
 8026794:	0802679d 	.word	0x0802679d
 8026798:	08026833 	.word	0x08026833
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80267a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80267a4:	2b00      	cmp	r3, #0
 80267a6:	d046      	beq.n	8026836 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80267a8:	2301      	movs	r3, #1
 80267aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80267ac:	e043      	b.n	8026836 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80267b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80267b6:	d140      	bne.n	802683a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80267b8:	2301      	movs	r3, #1
 80267ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80267bc:	e03d      	b.n	802683a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	699b      	ldr	r3, [r3, #24]
 80267c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80267c6:	d121      	bne.n	802680c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80267c8:	68bb      	ldr	r3, [r7, #8]
 80267ca:	2b03      	cmp	r3, #3
 80267cc:	d837      	bhi.n	802683e <DMA_CheckFifoParam+0xda>
 80267ce:	a201      	add	r2, pc, #4	@ (adr r2, 80267d4 <DMA_CheckFifoParam+0x70>)
 80267d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80267d4:	080267e5 	.word	0x080267e5
 80267d8:	080267eb 	.word	0x080267eb
 80267dc:	080267e5 	.word	0x080267e5
 80267e0:	080267fd 	.word	0x080267fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80267e4:	2301      	movs	r3, #1
 80267e6:	73fb      	strb	r3, [r7, #15]
      break;
 80267e8:	e030      	b.n	802684c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80267ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	d025      	beq.n	8026842 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80267f6:	2301      	movs	r3, #1
 80267f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80267fa:	e022      	b.n	8026842 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026800:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8026804:	d11f      	bne.n	8026846 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8026806:	2301      	movs	r3, #1
 8026808:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802680a:	e01c      	b.n	8026846 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802680c:	68bb      	ldr	r3, [r7, #8]
 802680e:	2b02      	cmp	r3, #2
 8026810:	d903      	bls.n	802681a <DMA_CheckFifoParam+0xb6>
 8026812:	68bb      	ldr	r3, [r7, #8]
 8026814:	2b03      	cmp	r3, #3
 8026816:	d003      	beq.n	8026820 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8026818:	e018      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 802681a:	2301      	movs	r3, #1
 802681c:	73fb      	strb	r3, [r7, #15]
      break;
 802681e:	e015      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8026828:	2b00      	cmp	r3, #0
 802682a:	d00e      	beq.n	802684a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 802682c:	2301      	movs	r3, #1
 802682e:	73fb      	strb	r3, [r7, #15]
      break;
 8026830:	e00b      	b.n	802684a <DMA_CheckFifoParam+0xe6>
      break;
 8026832:	bf00      	nop
 8026834:	e00a      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      break;
 8026836:	bf00      	nop
 8026838:	e008      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      break;
 802683a:	bf00      	nop
 802683c:	e006      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      break;
 802683e:	bf00      	nop
 8026840:	e004      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      break;
 8026842:	bf00      	nop
 8026844:	e002      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      break;   
 8026846:	bf00      	nop
 8026848:	e000      	b.n	802684c <DMA_CheckFifoParam+0xe8>
      break;
 802684a:	bf00      	nop
    }
  } 
  
  return status; 
 802684c:	7bfb      	ldrb	r3, [r7, #15]
}
 802684e:	4618      	mov	r0, r3
 8026850:	3714      	adds	r7, #20
 8026852:	46bd      	mov	sp, r7
 8026854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026858:	4770      	bx	lr
 802685a:	bf00      	nop

0802685c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802685c:	b480      	push	{r7}
 802685e:	b089      	sub	sp, #36	@ 0x24
 8026860:	af00      	add	r7, sp, #0
 8026862:	6078      	str	r0, [r7, #4]
 8026864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8026866:	2300      	movs	r3, #0
 8026868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802686a:	2300      	movs	r3, #0
 802686c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802686e:	2300      	movs	r3, #0
 8026870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026872:	2300      	movs	r3, #0
 8026874:	61fb      	str	r3, [r7, #28]
 8026876:	e165      	b.n	8026b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8026878:	2201      	movs	r2, #1
 802687a:	69fb      	ldr	r3, [r7, #28]
 802687c:	fa02 f303 	lsl.w	r3, r2, r3
 8026880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8026882:	683b      	ldr	r3, [r7, #0]
 8026884:	681b      	ldr	r3, [r3, #0]
 8026886:	697a      	ldr	r2, [r7, #20]
 8026888:	4013      	ands	r3, r2
 802688a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802688c:	693a      	ldr	r2, [r7, #16]
 802688e:	697b      	ldr	r3, [r7, #20]
 8026890:	429a      	cmp	r2, r3
 8026892:	f040 8154 	bne.w	8026b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8026896:	683b      	ldr	r3, [r7, #0]
 8026898:	685b      	ldr	r3, [r3, #4]
 802689a:	2b01      	cmp	r3, #1
 802689c:	d00b      	beq.n	80268b6 <HAL_GPIO_Init+0x5a>
 802689e:	683b      	ldr	r3, [r7, #0]
 80268a0:	685b      	ldr	r3, [r3, #4]
 80268a2:	2b02      	cmp	r3, #2
 80268a4:	d007      	beq.n	80268b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80268a6:	683b      	ldr	r3, [r7, #0]
 80268a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80268aa:	2b11      	cmp	r3, #17
 80268ac:	d003      	beq.n	80268b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80268ae:	683b      	ldr	r3, [r7, #0]
 80268b0:	685b      	ldr	r3, [r3, #4]
 80268b2:	2b12      	cmp	r3, #18
 80268b4:	d130      	bne.n	8026918 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80268b6:	687b      	ldr	r3, [r7, #4]
 80268b8:	689b      	ldr	r3, [r3, #8]
 80268ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80268bc:	69fb      	ldr	r3, [r7, #28]
 80268be:	005b      	lsls	r3, r3, #1
 80268c0:	2203      	movs	r2, #3
 80268c2:	fa02 f303 	lsl.w	r3, r2, r3
 80268c6:	43db      	mvns	r3, r3
 80268c8:	69ba      	ldr	r2, [r7, #24]
 80268ca:	4013      	ands	r3, r2
 80268cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80268ce:	683b      	ldr	r3, [r7, #0]
 80268d0:	68da      	ldr	r2, [r3, #12]
 80268d2:	69fb      	ldr	r3, [r7, #28]
 80268d4:	005b      	lsls	r3, r3, #1
 80268d6:	fa02 f303 	lsl.w	r3, r2, r3
 80268da:	69ba      	ldr	r2, [r7, #24]
 80268dc:	4313      	orrs	r3, r2
 80268de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	69ba      	ldr	r2, [r7, #24]
 80268e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	685b      	ldr	r3, [r3, #4]
 80268ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80268ec:	2201      	movs	r2, #1
 80268ee:	69fb      	ldr	r3, [r7, #28]
 80268f0:	fa02 f303 	lsl.w	r3, r2, r3
 80268f4:	43db      	mvns	r3, r3
 80268f6:	69ba      	ldr	r2, [r7, #24]
 80268f8:	4013      	ands	r3, r2
 80268fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80268fc:	683b      	ldr	r3, [r7, #0]
 80268fe:	685b      	ldr	r3, [r3, #4]
 8026900:	091b      	lsrs	r3, r3, #4
 8026902:	f003 0201 	and.w	r2, r3, #1
 8026906:	69fb      	ldr	r3, [r7, #28]
 8026908:	fa02 f303 	lsl.w	r3, r2, r3
 802690c:	69ba      	ldr	r2, [r7, #24]
 802690e:	4313      	orrs	r3, r2
 8026910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	69ba      	ldr	r2, [r7, #24]
 8026916:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8026918:	687b      	ldr	r3, [r7, #4]
 802691a:	68db      	ldr	r3, [r3, #12]
 802691c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802691e:	69fb      	ldr	r3, [r7, #28]
 8026920:	005b      	lsls	r3, r3, #1
 8026922:	2203      	movs	r2, #3
 8026924:	fa02 f303 	lsl.w	r3, r2, r3
 8026928:	43db      	mvns	r3, r3
 802692a:	69ba      	ldr	r2, [r7, #24]
 802692c:	4013      	ands	r3, r2
 802692e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8026930:	683b      	ldr	r3, [r7, #0]
 8026932:	689a      	ldr	r2, [r3, #8]
 8026934:	69fb      	ldr	r3, [r7, #28]
 8026936:	005b      	lsls	r3, r3, #1
 8026938:	fa02 f303 	lsl.w	r3, r2, r3
 802693c:	69ba      	ldr	r2, [r7, #24]
 802693e:	4313      	orrs	r3, r2
 8026940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	69ba      	ldr	r2, [r7, #24]
 8026946:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8026948:	683b      	ldr	r3, [r7, #0]
 802694a:	685b      	ldr	r3, [r3, #4]
 802694c:	2b02      	cmp	r3, #2
 802694e:	d003      	beq.n	8026958 <HAL_GPIO_Init+0xfc>
 8026950:	683b      	ldr	r3, [r7, #0]
 8026952:	685b      	ldr	r3, [r3, #4]
 8026954:	2b12      	cmp	r3, #18
 8026956:	d123      	bne.n	80269a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8026958:	69fb      	ldr	r3, [r7, #28]
 802695a:	08da      	lsrs	r2, r3, #3
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	3208      	adds	r2, #8
 8026960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8026966:	69fb      	ldr	r3, [r7, #28]
 8026968:	f003 0307 	and.w	r3, r3, #7
 802696c:	009b      	lsls	r3, r3, #2
 802696e:	220f      	movs	r2, #15
 8026970:	fa02 f303 	lsl.w	r3, r2, r3
 8026974:	43db      	mvns	r3, r3
 8026976:	69ba      	ldr	r2, [r7, #24]
 8026978:	4013      	ands	r3, r2
 802697a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802697c:	683b      	ldr	r3, [r7, #0]
 802697e:	691a      	ldr	r2, [r3, #16]
 8026980:	69fb      	ldr	r3, [r7, #28]
 8026982:	f003 0307 	and.w	r3, r3, #7
 8026986:	009b      	lsls	r3, r3, #2
 8026988:	fa02 f303 	lsl.w	r3, r2, r3
 802698c:	69ba      	ldr	r2, [r7, #24]
 802698e:	4313      	orrs	r3, r2
 8026990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8026992:	69fb      	ldr	r3, [r7, #28]
 8026994:	08da      	lsrs	r2, r3, #3
 8026996:	687b      	ldr	r3, [r7, #4]
 8026998:	3208      	adds	r2, #8
 802699a:	69b9      	ldr	r1, [r7, #24]
 802699c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80269a0:	687b      	ldr	r3, [r7, #4]
 80269a2:	681b      	ldr	r3, [r3, #0]
 80269a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80269a6:	69fb      	ldr	r3, [r7, #28]
 80269a8:	005b      	lsls	r3, r3, #1
 80269aa:	2203      	movs	r2, #3
 80269ac:	fa02 f303 	lsl.w	r3, r2, r3
 80269b0:	43db      	mvns	r3, r3
 80269b2:	69ba      	ldr	r2, [r7, #24]
 80269b4:	4013      	ands	r3, r2
 80269b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80269b8:	683b      	ldr	r3, [r7, #0]
 80269ba:	685b      	ldr	r3, [r3, #4]
 80269bc:	f003 0203 	and.w	r2, r3, #3
 80269c0:	69fb      	ldr	r3, [r7, #28]
 80269c2:	005b      	lsls	r3, r3, #1
 80269c4:	fa02 f303 	lsl.w	r3, r2, r3
 80269c8:	69ba      	ldr	r2, [r7, #24]
 80269ca:	4313      	orrs	r3, r2
 80269cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80269ce:	687b      	ldr	r3, [r7, #4]
 80269d0:	69ba      	ldr	r2, [r7, #24]
 80269d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80269d4:	683b      	ldr	r3, [r7, #0]
 80269d6:	685b      	ldr	r3, [r3, #4]
 80269d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80269dc:	2b00      	cmp	r3, #0
 80269de:	f000 80ae 	beq.w	8026b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80269e2:	2300      	movs	r3, #0
 80269e4:	60fb      	str	r3, [r7, #12]
 80269e6:	4b5d      	ldr	r3, [pc, #372]	@ (8026b5c <HAL_GPIO_Init+0x300>)
 80269e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80269ea:	4a5c      	ldr	r2, [pc, #368]	@ (8026b5c <HAL_GPIO_Init+0x300>)
 80269ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80269f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80269f2:	4b5a      	ldr	r3, [pc, #360]	@ (8026b5c <HAL_GPIO_Init+0x300>)
 80269f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80269f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80269fa:	60fb      	str	r3, [r7, #12]
 80269fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80269fe:	4a58      	ldr	r2, [pc, #352]	@ (8026b60 <HAL_GPIO_Init+0x304>)
 8026a00:	69fb      	ldr	r3, [r7, #28]
 8026a02:	089b      	lsrs	r3, r3, #2
 8026a04:	3302      	adds	r3, #2
 8026a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8026a0c:	69fb      	ldr	r3, [r7, #28]
 8026a0e:	f003 0303 	and.w	r3, r3, #3
 8026a12:	009b      	lsls	r3, r3, #2
 8026a14:	220f      	movs	r2, #15
 8026a16:	fa02 f303 	lsl.w	r3, r2, r3
 8026a1a:	43db      	mvns	r3, r3
 8026a1c:	69ba      	ldr	r2, [r7, #24]
 8026a1e:	4013      	ands	r3, r2
 8026a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	4a4f      	ldr	r2, [pc, #316]	@ (8026b64 <HAL_GPIO_Init+0x308>)
 8026a26:	4293      	cmp	r3, r2
 8026a28:	d025      	beq.n	8026a76 <HAL_GPIO_Init+0x21a>
 8026a2a:	687b      	ldr	r3, [r7, #4]
 8026a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8026b68 <HAL_GPIO_Init+0x30c>)
 8026a2e:	4293      	cmp	r3, r2
 8026a30:	d01f      	beq.n	8026a72 <HAL_GPIO_Init+0x216>
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	4a4d      	ldr	r2, [pc, #308]	@ (8026b6c <HAL_GPIO_Init+0x310>)
 8026a36:	4293      	cmp	r3, r2
 8026a38:	d019      	beq.n	8026a6e <HAL_GPIO_Init+0x212>
 8026a3a:	687b      	ldr	r3, [r7, #4]
 8026a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8026b70 <HAL_GPIO_Init+0x314>)
 8026a3e:	4293      	cmp	r3, r2
 8026a40:	d013      	beq.n	8026a6a <HAL_GPIO_Init+0x20e>
 8026a42:	687b      	ldr	r3, [r7, #4]
 8026a44:	4a4b      	ldr	r2, [pc, #300]	@ (8026b74 <HAL_GPIO_Init+0x318>)
 8026a46:	4293      	cmp	r3, r2
 8026a48:	d00d      	beq.n	8026a66 <HAL_GPIO_Init+0x20a>
 8026a4a:	687b      	ldr	r3, [r7, #4]
 8026a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8026b78 <HAL_GPIO_Init+0x31c>)
 8026a4e:	4293      	cmp	r3, r2
 8026a50:	d007      	beq.n	8026a62 <HAL_GPIO_Init+0x206>
 8026a52:	687b      	ldr	r3, [r7, #4]
 8026a54:	4a49      	ldr	r2, [pc, #292]	@ (8026b7c <HAL_GPIO_Init+0x320>)
 8026a56:	4293      	cmp	r3, r2
 8026a58:	d101      	bne.n	8026a5e <HAL_GPIO_Init+0x202>
 8026a5a:	2306      	movs	r3, #6
 8026a5c:	e00c      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a5e:	2307      	movs	r3, #7
 8026a60:	e00a      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a62:	2305      	movs	r3, #5
 8026a64:	e008      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a66:	2304      	movs	r3, #4
 8026a68:	e006      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a6a:	2303      	movs	r3, #3
 8026a6c:	e004      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a6e:	2302      	movs	r3, #2
 8026a70:	e002      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a72:	2301      	movs	r3, #1
 8026a74:	e000      	b.n	8026a78 <HAL_GPIO_Init+0x21c>
 8026a76:	2300      	movs	r3, #0
 8026a78:	69fa      	ldr	r2, [r7, #28]
 8026a7a:	f002 0203 	and.w	r2, r2, #3
 8026a7e:	0092      	lsls	r2, r2, #2
 8026a80:	4093      	lsls	r3, r2
 8026a82:	69ba      	ldr	r2, [r7, #24]
 8026a84:	4313      	orrs	r3, r2
 8026a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8026a88:	4935      	ldr	r1, [pc, #212]	@ (8026b60 <HAL_GPIO_Init+0x304>)
 8026a8a:	69fb      	ldr	r3, [r7, #28]
 8026a8c:	089b      	lsrs	r3, r3, #2
 8026a8e:	3302      	adds	r3, #2
 8026a90:	69ba      	ldr	r2, [r7, #24]
 8026a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8026a96:	4b3a      	ldr	r3, [pc, #232]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026a98:	681b      	ldr	r3, [r3, #0]
 8026a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026a9c:	693b      	ldr	r3, [r7, #16]
 8026a9e:	43db      	mvns	r3, r3
 8026aa0:	69ba      	ldr	r2, [r7, #24]
 8026aa2:	4013      	ands	r3, r2
 8026aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8026aa6:	683b      	ldr	r3, [r7, #0]
 8026aa8:	685b      	ldr	r3, [r3, #4]
 8026aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8026aae:	2b00      	cmp	r3, #0
 8026ab0:	d003      	beq.n	8026aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8026ab2:	69ba      	ldr	r2, [r7, #24]
 8026ab4:	693b      	ldr	r3, [r7, #16]
 8026ab6:	4313      	orrs	r3, r2
 8026ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8026aba:	4a31      	ldr	r2, [pc, #196]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026abc:	69bb      	ldr	r3, [r7, #24]
 8026abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8026ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026ac2:	685b      	ldr	r3, [r3, #4]
 8026ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026ac6:	693b      	ldr	r3, [r7, #16]
 8026ac8:	43db      	mvns	r3, r3
 8026aca:	69ba      	ldr	r2, [r7, #24]
 8026acc:	4013      	ands	r3, r2
 8026ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8026ad0:	683b      	ldr	r3, [r7, #0]
 8026ad2:	685b      	ldr	r3, [r3, #4]
 8026ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	d003      	beq.n	8026ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8026adc:	69ba      	ldr	r2, [r7, #24]
 8026ade:	693b      	ldr	r3, [r7, #16]
 8026ae0:	4313      	orrs	r3, r2
 8026ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8026ae4:	4a26      	ldr	r2, [pc, #152]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026ae6:	69bb      	ldr	r3, [r7, #24]
 8026ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8026aea:	4b25      	ldr	r3, [pc, #148]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026aec:	689b      	ldr	r3, [r3, #8]
 8026aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026af0:	693b      	ldr	r3, [r7, #16]
 8026af2:	43db      	mvns	r3, r3
 8026af4:	69ba      	ldr	r2, [r7, #24]
 8026af6:	4013      	ands	r3, r2
 8026af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8026afa:	683b      	ldr	r3, [r7, #0]
 8026afc:	685b      	ldr	r3, [r3, #4]
 8026afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8026b02:	2b00      	cmp	r3, #0
 8026b04:	d003      	beq.n	8026b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8026b06:	69ba      	ldr	r2, [r7, #24]
 8026b08:	693b      	ldr	r3, [r7, #16]
 8026b0a:	4313      	orrs	r3, r2
 8026b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8026b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026b10:	69bb      	ldr	r3, [r7, #24]
 8026b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8026b14:	4b1a      	ldr	r3, [pc, #104]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026b16:	68db      	ldr	r3, [r3, #12]
 8026b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026b1a:	693b      	ldr	r3, [r7, #16]
 8026b1c:	43db      	mvns	r3, r3
 8026b1e:	69ba      	ldr	r2, [r7, #24]
 8026b20:	4013      	ands	r3, r2
 8026b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8026b24:	683b      	ldr	r3, [r7, #0]
 8026b26:	685b      	ldr	r3, [r3, #4]
 8026b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8026b2c:	2b00      	cmp	r3, #0
 8026b2e:	d003      	beq.n	8026b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8026b30:	69ba      	ldr	r2, [r7, #24]
 8026b32:	693b      	ldr	r3, [r7, #16]
 8026b34:	4313      	orrs	r3, r2
 8026b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8026b38:	4a11      	ldr	r2, [pc, #68]	@ (8026b80 <HAL_GPIO_Init+0x324>)
 8026b3a:	69bb      	ldr	r3, [r7, #24]
 8026b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026b3e:	69fb      	ldr	r3, [r7, #28]
 8026b40:	3301      	adds	r3, #1
 8026b42:	61fb      	str	r3, [r7, #28]
 8026b44:	69fb      	ldr	r3, [r7, #28]
 8026b46:	2b0f      	cmp	r3, #15
 8026b48:	f67f ae96 	bls.w	8026878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8026b4c:	bf00      	nop
 8026b4e:	bf00      	nop
 8026b50:	3724      	adds	r7, #36	@ 0x24
 8026b52:	46bd      	mov	sp, r7
 8026b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b58:	4770      	bx	lr
 8026b5a:	bf00      	nop
 8026b5c:	40023800 	.word	0x40023800
 8026b60:	40013800 	.word	0x40013800
 8026b64:	40020000 	.word	0x40020000
 8026b68:	40020400 	.word	0x40020400
 8026b6c:	40020800 	.word	0x40020800
 8026b70:	40020c00 	.word	0x40020c00
 8026b74:	40021000 	.word	0x40021000
 8026b78:	40021400 	.word	0x40021400
 8026b7c:	40021800 	.word	0x40021800
 8026b80:	40013c00 	.word	0x40013c00

08026b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8026b84:	b480      	push	{r7}
 8026b86:	b083      	sub	sp, #12
 8026b88:	af00      	add	r7, sp, #0
 8026b8a:	6078      	str	r0, [r7, #4]
 8026b8c:	460b      	mov	r3, r1
 8026b8e:	807b      	strh	r3, [r7, #2]
 8026b90:	4613      	mov	r3, r2
 8026b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8026b94:	787b      	ldrb	r3, [r7, #1]
 8026b96:	2b00      	cmp	r3, #0
 8026b98:	d003      	beq.n	8026ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8026b9a:	887a      	ldrh	r2, [r7, #2]
 8026b9c:	687b      	ldr	r3, [r7, #4]
 8026b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8026ba0:	e003      	b.n	8026baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8026ba2:	887b      	ldrh	r3, [r7, #2]
 8026ba4:	041a      	lsls	r2, r3, #16
 8026ba6:	687b      	ldr	r3, [r7, #4]
 8026ba8:	619a      	str	r2, [r3, #24]
}
 8026baa:	bf00      	nop
 8026bac:	370c      	adds	r7, #12
 8026bae:	46bd      	mov	sp, r7
 8026bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bb4:	4770      	bx	lr

08026bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8026bb6:	b480      	push	{r7}
 8026bb8:	b083      	sub	sp, #12
 8026bba:	af00      	add	r7, sp, #0
 8026bbc:	6078      	str	r0, [r7, #4]
 8026bbe:	460b      	mov	r3, r1
 8026bc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	695a      	ldr	r2, [r3, #20]
 8026bc6:	887b      	ldrh	r3, [r7, #2]
 8026bc8:	401a      	ands	r2, r3
 8026bca:	887b      	ldrh	r3, [r7, #2]
 8026bcc:	429a      	cmp	r2, r3
 8026bce:	d104      	bne.n	8026bda <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8026bd0:	887b      	ldrh	r3, [r7, #2]
 8026bd2:	041a      	lsls	r2, r3, #16
 8026bd4:	687b      	ldr	r3, [r7, #4]
 8026bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8026bd8:	e002      	b.n	8026be0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8026bda:	887a      	ldrh	r2, [r7, #2]
 8026bdc:	687b      	ldr	r3, [r7, #4]
 8026bde:	619a      	str	r2, [r3, #24]
}
 8026be0:	bf00      	nop
 8026be2:	370c      	adds	r7, #12
 8026be4:	46bd      	mov	sp, r7
 8026be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bea:	4770      	bx	lr

08026bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8026bec:	b580      	push	{r7, lr}
 8026bee:	b082      	sub	sp, #8
 8026bf0:	af00      	add	r7, sp, #0
 8026bf2:	4603      	mov	r3, r0
 8026bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8026bf6:	4b08      	ldr	r3, [pc, #32]	@ (8026c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026bf8:	695a      	ldr	r2, [r3, #20]
 8026bfa:	88fb      	ldrh	r3, [r7, #6]
 8026bfc:	4013      	ands	r3, r2
 8026bfe:	2b00      	cmp	r3, #0
 8026c00:	d006      	beq.n	8026c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8026c02:	4a05      	ldr	r2, [pc, #20]	@ (8026c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026c04:	88fb      	ldrh	r3, [r7, #6]
 8026c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8026c08:	88fb      	ldrh	r3, [r7, #6]
 8026c0a:	4618      	mov	r0, r3
 8026c0c:	f008 f9d8 	bl	802efc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8026c10:	bf00      	nop
 8026c12:	3708      	adds	r7, #8
 8026c14:	46bd      	mov	sp, r7
 8026c16:	bd80      	pop	{r7, pc}
 8026c18:	40013c00 	.word	0x40013c00

08026c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8026c1c:	b580      	push	{r7, lr}
 8026c1e:	b084      	sub	sp, #16
 8026c20:	af00      	add	r7, sp, #0
 8026c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d101      	bne.n	8026c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8026c2a:	2301      	movs	r3, #1
 8026c2c:	e12b      	b.n	8026e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8026c2e:	687b      	ldr	r3, [r7, #4]
 8026c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8026c34:	b2db      	uxtb	r3, r3
 8026c36:	2b00      	cmp	r3, #0
 8026c38:	d106      	bne.n	8026c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8026c3a:	687b      	ldr	r3, [r7, #4]
 8026c3c:	2200      	movs	r2, #0
 8026c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8026c42:	6878      	ldr	r0, [r7, #4]
 8026c44:	f008 fd7e 	bl	802f744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026c48:	687b      	ldr	r3, [r7, #4]
 8026c4a:	2224      	movs	r2, #36	@ 0x24
 8026c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	681b      	ldr	r3, [r3, #0]
 8026c54:	681a      	ldr	r2, [r3, #0]
 8026c56:	687b      	ldr	r3, [r7, #4]
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	f022 0201 	bic.w	r2, r2, #1
 8026c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	681b      	ldr	r3, [r3, #0]
 8026c64:	681a      	ldr	r2, [r3, #0]
 8026c66:	687b      	ldr	r3, [r7, #4]
 8026c68:	681b      	ldr	r3, [r3, #0]
 8026c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8026c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	681b      	ldr	r3, [r3, #0]
 8026c74:	681a      	ldr	r2, [r3, #0]
 8026c76:	687b      	ldr	r3, [r7, #4]
 8026c78:	681b      	ldr	r3, [r3, #0]
 8026c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8026c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026c80:	f001 fff8 	bl	8028c74 <HAL_RCC_GetPCLK1Freq>
 8026c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	685b      	ldr	r3, [r3, #4]
 8026c8a:	4a81      	ldr	r2, [pc, #516]	@ (8026e90 <HAL_I2C_Init+0x274>)
 8026c8c:	4293      	cmp	r3, r2
 8026c8e:	d807      	bhi.n	8026ca0 <HAL_I2C_Init+0x84>
 8026c90:	68fb      	ldr	r3, [r7, #12]
 8026c92:	4a80      	ldr	r2, [pc, #512]	@ (8026e94 <HAL_I2C_Init+0x278>)
 8026c94:	4293      	cmp	r3, r2
 8026c96:	bf94      	ite	ls
 8026c98:	2301      	movls	r3, #1
 8026c9a:	2300      	movhi	r3, #0
 8026c9c:	b2db      	uxtb	r3, r3
 8026c9e:	e006      	b.n	8026cae <HAL_I2C_Init+0x92>
 8026ca0:	68fb      	ldr	r3, [r7, #12]
 8026ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8026e98 <HAL_I2C_Init+0x27c>)
 8026ca4:	4293      	cmp	r3, r2
 8026ca6:	bf94      	ite	ls
 8026ca8:	2301      	movls	r3, #1
 8026caa:	2300      	movhi	r3, #0
 8026cac:	b2db      	uxtb	r3, r3
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	d001      	beq.n	8026cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8026cb2:	2301      	movs	r3, #1
 8026cb4:	e0e7      	b.n	8026e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8026cb6:	68fb      	ldr	r3, [r7, #12]
 8026cb8:	4a78      	ldr	r2, [pc, #480]	@ (8026e9c <HAL_I2C_Init+0x280>)
 8026cba:	fba2 2303 	umull	r2, r3, r2, r3
 8026cbe:	0c9b      	lsrs	r3, r3, #18
 8026cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	681b      	ldr	r3, [r3, #0]
 8026cc6:	685b      	ldr	r3, [r3, #4]
 8026cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8026ccc:	687b      	ldr	r3, [r7, #4]
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	68ba      	ldr	r2, [r7, #8]
 8026cd2:	430a      	orrs	r2, r1
 8026cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	681b      	ldr	r3, [r3, #0]
 8026cda:	6a1b      	ldr	r3, [r3, #32]
 8026cdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8026ce0:	687b      	ldr	r3, [r7, #4]
 8026ce2:	685b      	ldr	r3, [r3, #4]
 8026ce4:	4a6a      	ldr	r2, [pc, #424]	@ (8026e90 <HAL_I2C_Init+0x274>)
 8026ce6:	4293      	cmp	r3, r2
 8026ce8:	d802      	bhi.n	8026cf0 <HAL_I2C_Init+0xd4>
 8026cea:	68bb      	ldr	r3, [r7, #8]
 8026cec:	3301      	adds	r3, #1
 8026cee:	e009      	b.n	8026d04 <HAL_I2C_Init+0xe8>
 8026cf0:	68bb      	ldr	r3, [r7, #8]
 8026cf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8026cf6:	fb02 f303 	mul.w	r3, r2, r3
 8026cfa:	4a69      	ldr	r2, [pc, #420]	@ (8026ea0 <HAL_I2C_Init+0x284>)
 8026cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8026d00:	099b      	lsrs	r3, r3, #6
 8026d02:	3301      	adds	r3, #1
 8026d04:	687a      	ldr	r2, [r7, #4]
 8026d06:	6812      	ldr	r2, [r2, #0]
 8026d08:	430b      	orrs	r3, r1
 8026d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8026d0c:	687b      	ldr	r3, [r7, #4]
 8026d0e:	681b      	ldr	r3, [r3, #0]
 8026d10:	69db      	ldr	r3, [r3, #28]
 8026d12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8026d16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	685b      	ldr	r3, [r3, #4]
 8026d1e:	495c      	ldr	r1, [pc, #368]	@ (8026e90 <HAL_I2C_Init+0x274>)
 8026d20:	428b      	cmp	r3, r1
 8026d22:	d819      	bhi.n	8026d58 <HAL_I2C_Init+0x13c>
 8026d24:	68fb      	ldr	r3, [r7, #12]
 8026d26:	1e59      	subs	r1, r3, #1
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	685b      	ldr	r3, [r3, #4]
 8026d2c:	005b      	lsls	r3, r3, #1
 8026d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8026d32:	1c59      	adds	r1, r3, #1
 8026d34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8026d38:	400b      	ands	r3, r1
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	d00a      	beq.n	8026d54 <HAL_I2C_Init+0x138>
 8026d3e:	68fb      	ldr	r3, [r7, #12]
 8026d40:	1e59      	subs	r1, r3, #1
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	685b      	ldr	r3, [r3, #4]
 8026d46:	005b      	lsls	r3, r3, #1
 8026d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8026d4c:	3301      	adds	r3, #1
 8026d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026d52:	e051      	b.n	8026df8 <HAL_I2C_Init+0x1dc>
 8026d54:	2304      	movs	r3, #4
 8026d56:	e04f      	b.n	8026df8 <HAL_I2C_Init+0x1dc>
 8026d58:	687b      	ldr	r3, [r7, #4]
 8026d5a:	689b      	ldr	r3, [r3, #8]
 8026d5c:	2b00      	cmp	r3, #0
 8026d5e:	d111      	bne.n	8026d84 <HAL_I2C_Init+0x168>
 8026d60:	68fb      	ldr	r3, [r7, #12]
 8026d62:	1e58      	subs	r0, r3, #1
 8026d64:	687b      	ldr	r3, [r7, #4]
 8026d66:	6859      	ldr	r1, [r3, #4]
 8026d68:	460b      	mov	r3, r1
 8026d6a:	005b      	lsls	r3, r3, #1
 8026d6c:	440b      	add	r3, r1
 8026d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8026d72:	3301      	adds	r3, #1
 8026d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026d78:	2b00      	cmp	r3, #0
 8026d7a:	bf0c      	ite	eq
 8026d7c:	2301      	moveq	r3, #1
 8026d7e:	2300      	movne	r3, #0
 8026d80:	b2db      	uxtb	r3, r3
 8026d82:	e012      	b.n	8026daa <HAL_I2C_Init+0x18e>
 8026d84:	68fb      	ldr	r3, [r7, #12]
 8026d86:	1e58      	subs	r0, r3, #1
 8026d88:	687b      	ldr	r3, [r7, #4]
 8026d8a:	6859      	ldr	r1, [r3, #4]
 8026d8c:	460b      	mov	r3, r1
 8026d8e:	009b      	lsls	r3, r3, #2
 8026d90:	440b      	add	r3, r1
 8026d92:	0099      	lsls	r1, r3, #2
 8026d94:	440b      	add	r3, r1
 8026d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8026d9a:	3301      	adds	r3, #1
 8026d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	bf0c      	ite	eq
 8026da4:	2301      	moveq	r3, #1
 8026da6:	2300      	movne	r3, #0
 8026da8:	b2db      	uxtb	r3, r3
 8026daa:	2b00      	cmp	r3, #0
 8026dac:	d001      	beq.n	8026db2 <HAL_I2C_Init+0x196>
 8026dae:	2301      	movs	r3, #1
 8026db0:	e022      	b.n	8026df8 <HAL_I2C_Init+0x1dc>
 8026db2:	687b      	ldr	r3, [r7, #4]
 8026db4:	689b      	ldr	r3, [r3, #8]
 8026db6:	2b00      	cmp	r3, #0
 8026db8:	d10e      	bne.n	8026dd8 <HAL_I2C_Init+0x1bc>
 8026dba:	68fb      	ldr	r3, [r7, #12]
 8026dbc:	1e58      	subs	r0, r3, #1
 8026dbe:	687b      	ldr	r3, [r7, #4]
 8026dc0:	6859      	ldr	r1, [r3, #4]
 8026dc2:	460b      	mov	r3, r1
 8026dc4:	005b      	lsls	r3, r3, #1
 8026dc6:	440b      	add	r3, r1
 8026dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8026dcc:	3301      	adds	r3, #1
 8026dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8026dd6:	e00f      	b.n	8026df8 <HAL_I2C_Init+0x1dc>
 8026dd8:	68fb      	ldr	r3, [r7, #12]
 8026dda:	1e58      	subs	r0, r3, #1
 8026ddc:	687b      	ldr	r3, [r7, #4]
 8026dde:	6859      	ldr	r1, [r3, #4]
 8026de0:	460b      	mov	r3, r1
 8026de2:	009b      	lsls	r3, r3, #2
 8026de4:	440b      	add	r3, r1
 8026de6:	0099      	lsls	r1, r3, #2
 8026de8:	440b      	add	r3, r1
 8026dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8026dee:	3301      	adds	r3, #1
 8026df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8026df8:	6879      	ldr	r1, [r7, #4]
 8026dfa:	6809      	ldr	r1, [r1, #0]
 8026dfc:	4313      	orrs	r3, r2
 8026dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	681b      	ldr	r3, [r3, #0]
 8026e06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8026e0a:	687b      	ldr	r3, [r7, #4]
 8026e0c:	69da      	ldr	r2, [r3, #28]
 8026e0e:	687b      	ldr	r3, [r7, #4]
 8026e10:	6a1b      	ldr	r3, [r3, #32]
 8026e12:	431a      	orrs	r2, r3
 8026e14:	687b      	ldr	r3, [r7, #4]
 8026e16:	681b      	ldr	r3, [r3, #0]
 8026e18:	430a      	orrs	r2, r1
 8026e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026e1c:	687b      	ldr	r3, [r7, #4]
 8026e1e:	681b      	ldr	r3, [r3, #0]
 8026e20:	689b      	ldr	r3, [r3, #8]
 8026e22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8026e26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8026e2a:	687a      	ldr	r2, [r7, #4]
 8026e2c:	6911      	ldr	r1, [r2, #16]
 8026e2e:	687a      	ldr	r2, [r7, #4]
 8026e30:	68d2      	ldr	r2, [r2, #12]
 8026e32:	4311      	orrs	r1, r2
 8026e34:	687a      	ldr	r2, [r7, #4]
 8026e36:	6812      	ldr	r2, [r2, #0]
 8026e38:	430b      	orrs	r3, r1
 8026e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026e3c:	687b      	ldr	r3, [r7, #4]
 8026e3e:	681b      	ldr	r3, [r3, #0]
 8026e40:	68db      	ldr	r3, [r3, #12]
 8026e42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8026e46:	687b      	ldr	r3, [r7, #4]
 8026e48:	695a      	ldr	r2, [r3, #20]
 8026e4a:	687b      	ldr	r3, [r7, #4]
 8026e4c:	699b      	ldr	r3, [r3, #24]
 8026e4e:	431a      	orrs	r2, r3
 8026e50:	687b      	ldr	r3, [r7, #4]
 8026e52:	681b      	ldr	r3, [r3, #0]
 8026e54:	430a      	orrs	r2, r1
 8026e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026e58:	687b      	ldr	r3, [r7, #4]
 8026e5a:	681b      	ldr	r3, [r3, #0]
 8026e5c:	681a      	ldr	r2, [r3, #0]
 8026e5e:	687b      	ldr	r3, [r7, #4]
 8026e60:	681b      	ldr	r3, [r3, #0]
 8026e62:	f042 0201 	orr.w	r2, r2, #1
 8026e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026e68:	687b      	ldr	r3, [r7, #4]
 8026e6a:	2200      	movs	r2, #0
 8026e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8026e6e:	687b      	ldr	r3, [r7, #4]
 8026e70:	2220      	movs	r2, #32
 8026e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	2200      	movs	r2, #0
 8026e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026e7c:	687b      	ldr	r3, [r7, #4]
 8026e7e:	2200      	movs	r2, #0
 8026e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8026e84:	2300      	movs	r3, #0
}
 8026e86:	4618      	mov	r0, r3
 8026e88:	3710      	adds	r7, #16
 8026e8a:	46bd      	mov	sp, r7
 8026e8c:	bd80      	pop	{r7, pc}
 8026e8e:	bf00      	nop
 8026e90:	000186a0 	.word	0x000186a0
 8026e94:	001e847f 	.word	0x001e847f
 8026e98:	003d08ff 	.word	0x003d08ff
 8026e9c:	431bde83 	.word	0x431bde83
 8026ea0:	10624dd3 	.word	0x10624dd3

08026ea4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8026ea4:	b580      	push	{r7, lr}
 8026ea6:	b082      	sub	sp, #8
 8026ea8:	af00      	add	r7, sp, #0
 8026eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8026eac:	687b      	ldr	r3, [r7, #4]
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d101      	bne.n	8026eb6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8026eb2:	2301      	movs	r3, #1
 8026eb4:	e021      	b.n	8026efa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026eb6:	687b      	ldr	r3, [r7, #4]
 8026eb8:	2224      	movs	r2, #36	@ 0x24
 8026eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8026ebe:	687b      	ldr	r3, [r7, #4]
 8026ec0:	681b      	ldr	r3, [r3, #0]
 8026ec2:	681a      	ldr	r2, [r3, #0]
 8026ec4:	687b      	ldr	r3, [r7, #4]
 8026ec6:	681b      	ldr	r3, [r3, #0]
 8026ec8:	f022 0201 	bic.w	r2, r2, #1
 8026ecc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8026ece:	6878      	ldr	r0, [r7, #4]
 8026ed0:	f000 f817 	bl	8026f02 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8026ed4:	687b      	ldr	r3, [r7, #4]
 8026ed6:	2200      	movs	r2, #0
 8026ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8026eda:	687b      	ldr	r3, [r7, #4]
 8026edc:	2200      	movs	r2, #0
 8026ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8026ee2:	687b      	ldr	r3, [r7, #4]
 8026ee4:	2200      	movs	r2, #0
 8026ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	2200      	movs	r2, #0
 8026eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8026ef0:	687b      	ldr	r3, [r7, #4]
 8026ef2:	2200      	movs	r2, #0
 8026ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8026ef8:	2300      	movs	r3, #0
}
 8026efa:	4618      	mov	r0, r3
 8026efc:	3708      	adds	r7, #8
 8026efe:	46bd      	mov	sp, r7
 8026f00:	bd80      	pop	{r7, pc}

08026f02 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8026f02:	b480      	push	{r7}
 8026f04:	b083      	sub	sp, #12
 8026f06:	af00      	add	r7, sp, #0
 8026f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8026f0a:	bf00      	nop
 8026f0c:	370c      	adds	r7, #12
 8026f0e:	46bd      	mov	sp, r7
 8026f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f14:	4770      	bx	lr
	...

08026f18 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8026f18:	b480      	push	{r7}
 8026f1a:	b087      	sub	sp, #28
 8026f1c:	af00      	add	r7, sp, #0
 8026f1e:	60f8      	str	r0, [r7, #12]
 8026f20:	607a      	str	r2, [r7, #4]
 8026f22:	461a      	mov	r2, r3
 8026f24:	460b      	mov	r3, r1
 8026f26:	817b      	strh	r3, [r7, #10]
 8026f28:	4613      	mov	r3, r2
 8026f2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8026f2c:	2300      	movs	r3, #0
 8026f2e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026f30:	68fb      	ldr	r3, [r7, #12]
 8026f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8026f36:	b2db      	uxtb	r3, r3
 8026f38:	2b20      	cmp	r3, #32
 8026f3a:	f040 8085 	bne.w	8027048 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8026f3e:	4b46      	ldr	r3, [pc, #280]	@ (8027058 <HAL_I2C_Master_Transmit_IT+0x140>)
 8026f40:	681b      	ldr	r3, [r3, #0]
 8026f42:	08db      	lsrs	r3, r3, #3
 8026f44:	4a45      	ldr	r2, [pc, #276]	@ (802705c <HAL_I2C_Master_Transmit_IT+0x144>)
 8026f46:	fba2 2303 	umull	r2, r3, r2, r3
 8026f4a:	0a1a      	lsrs	r2, r3, #8
 8026f4c:	4613      	mov	r3, r2
 8026f4e:	009b      	lsls	r3, r3, #2
 8026f50:	4413      	add	r3, r2
 8026f52:	009a      	lsls	r2, r3, #2
 8026f54:	4413      	add	r3, r2
 8026f56:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8026f58:	697b      	ldr	r3, [r7, #20]
 8026f5a:	3b01      	subs	r3, #1
 8026f5c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8026f5e:	697b      	ldr	r3, [r7, #20]
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	d116      	bne.n	8026f92 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8026f64:	68fb      	ldr	r3, [r7, #12]
 8026f66:	2200      	movs	r2, #0
 8026f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8026f6a:	68fb      	ldr	r3, [r7, #12]
 8026f6c:	2220      	movs	r2, #32
 8026f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8026f72:	68fb      	ldr	r3, [r7, #12]
 8026f74:	2200      	movs	r2, #0
 8026f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8026f7a:	68fb      	ldr	r3, [r7, #12]
 8026f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026f7e:	f043 0220 	orr.w	r2, r3, #32
 8026f82:	68fb      	ldr	r3, [r7, #12]
 8026f84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8026f86:	68fb      	ldr	r3, [r7, #12]
 8026f88:	2200      	movs	r2, #0
 8026f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8026f8e:	2301      	movs	r3, #1
 8026f90:	e05b      	b.n	802704a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8026f92:	68fb      	ldr	r3, [r7, #12]
 8026f94:	681b      	ldr	r3, [r3, #0]
 8026f96:	699b      	ldr	r3, [r3, #24]
 8026f98:	f003 0302 	and.w	r3, r3, #2
 8026f9c:	2b02      	cmp	r3, #2
 8026f9e:	d0db      	beq.n	8026f58 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8026fa0:	68fb      	ldr	r3, [r7, #12]
 8026fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8026fa6:	2b01      	cmp	r3, #1
 8026fa8:	d101      	bne.n	8026fae <HAL_I2C_Master_Transmit_IT+0x96>
 8026faa:	2302      	movs	r3, #2
 8026fac:	e04d      	b.n	802704a <HAL_I2C_Master_Transmit_IT+0x132>
 8026fae:	68fb      	ldr	r3, [r7, #12]
 8026fb0:	2201      	movs	r2, #1
 8026fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8026fb6:	68fb      	ldr	r3, [r7, #12]
 8026fb8:	681b      	ldr	r3, [r3, #0]
 8026fba:	681b      	ldr	r3, [r3, #0]
 8026fbc:	f003 0301 	and.w	r3, r3, #1
 8026fc0:	2b01      	cmp	r3, #1
 8026fc2:	d007      	beq.n	8026fd4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8026fc4:	68fb      	ldr	r3, [r7, #12]
 8026fc6:	681b      	ldr	r3, [r3, #0]
 8026fc8:	681a      	ldr	r2, [r3, #0]
 8026fca:	68fb      	ldr	r3, [r7, #12]
 8026fcc:	681b      	ldr	r3, [r3, #0]
 8026fce:	f042 0201 	orr.w	r2, r2, #1
 8026fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8026fd4:	68fb      	ldr	r3, [r7, #12]
 8026fd6:	681b      	ldr	r3, [r3, #0]
 8026fd8:	681a      	ldr	r2, [r3, #0]
 8026fda:	68fb      	ldr	r3, [r7, #12]
 8026fdc:	681b      	ldr	r3, [r3, #0]
 8026fde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8026fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8026fe4:	68fb      	ldr	r3, [r7, #12]
 8026fe6:	2221      	movs	r2, #33	@ 0x21
 8026fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8026fec:	68fb      	ldr	r3, [r7, #12]
 8026fee:	2210      	movs	r2, #16
 8026ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026ff4:	68fb      	ldr	r3, [r7, #12]
 8026ff6:	2200      	movs	r2, #0
 8026ff8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8026ffa:	68fb      	ldr	r3, [r7, #12]
 8026ffc:	687a      	ldr	r2, [r7, #4]
 8026ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8027000:	68fb      	ldr	r3, [r7, #12]
 8027002:	893a      	ldrh	r2, [r7, #8]
 8027004:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8027006:	68fb      	ldr	r3, [r7, #12]
 8027008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802700a:	b29a      	uxth	r2, r3
 802700c:	68fb      	ldr	r3, [r7, #12]
 802700e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8027010:	68fb      	ldr	r3, [r7, #12]
 8027012:	4a13      	ldr	r2, [pc, #76]	@ (8027060 <HAL_I2C_Master_Transmit_IT+0x148>)
 8027014:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8027016:	897a      	ldrh	r2, [r7, #10]
 8027018:	68fb      	ldr	r3, [r7, #12]
 802701a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802701c:	68fb      	ldr	r3, [r7, #12]
 802701e:	681b      	ldr	r3, [r3, #0]
 8027020:	681a      	ldr	r2, [r3, #0]
 8027022:	68fb      	ldr	r3, [r7, #12]
 8027024:	681b      	ldr	r3, [r3, #0]
 8027026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802702a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802702c:	68fb      	ldr	r3, [r7, #12]
 802702e:	2200      	movs	r2, #0
 8027030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027034:	68fb      	ldr	r3, [r7, #12]
 8027036:	681b      	ldr	r3, [r3, #0]
 8027038:	685a      	ldr	r2, [r3, #4]
 802703a:	68fb      	ldr	r3, [r7, #12]
 802703c:	681b      	ldr	r3, [r3, #0]
 802703e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8027042:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8027044:	2300      	movs	r3, #0
 8027046:	e000      	b.n	802704a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8027048:	2302      	movs	r3, #2
  }
}
 802704a:	4618      	mov	r0, r3
 802704c:	371c      	adds	r7, #28
 802704e:	46bd      	mov	sp, r7
 8027050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027054:	4770      	bx	lr
 8027056:	bf00      	nop
 8027058:	20001028 	.word	0x20001028
 802705c:	14f8b589 	.word	0x14f8b589
 8027060:	ffff0000 	.word	0xffff0000

08027064 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8027064:	b480      	push	{r7}
 8027066:	b087      	sub	sp, #28
 8027068:	af00      	add	r7, sp, #0
 802706a:	60f8      	str	r0, [r7, #12]
 802706c:	4608      	mov	r0, r1
 802706e:	4611      	mov	r1, r2
 8027070:	461a      	mov	r2, r3
 8027072:	4603      	mov	r3, r0
 8027074:	817b      	strh	r3, [r7, #10]
 8027076:	460b      	mov	r3, r1
 8027078:	813b      	strh	r3, [r7, #8]
 802707a:	4613      	mov	r3, r2
 802707c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 802707e:	2300      	movs	r3, #0
 8027080:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8027082:	68fb      	ldr	r3, [r7, #12]
 8027084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027088:	b2db      	uxtb	r3, r3
 802708a:	2b20      	cmp	r3, #32
 802708c:	f040 808e 	bne.w	80271ac <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8027090:	4b4a      	ldr	r3, [pc, #296]	@ (80271bc <HAL_I2C_Mem_Write_IT+0x158>)
 8027092:	681b      	ldr	r3, [r3, #0]
 8027094:	08db      	lsrs	r3, r3, #3
 8027096:	4a4a      	ldr	r2, [pc, #296]	@ (80271c0 <HAL_I2C_Mem_Write_IT+0x15c>)
 8027098:	fba2 2303 	umull	r2, r3, r2, r3
 802709c:	0a1a      	lsrs	r2, r3, #8
 802709e:	4613      	mov	r3, r2
 80270a0:	009b      	lsls	r3, r3, #2
 80270a2:	4413      	add	r3, r2
 80270a4:	009a      	lsls	r2, r3, #2
 80270a6:	4413      	add	r3, r2
 80270a8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80270aa:	697b      	ldr	r3, [r7, #20]
 80270ac:	3b01      	subs	r3, #1
 80270ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80270b0:	697b      	ldr	r3, [r7, #20]
 80270b2:	2b00      	cmp	r3, #0
 80270b4:	d116      	bne.n	80270e4 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80270b6:	68fb      	ldr	r3, [r7, #12]
 80270b8:	2200      	movs	r2, #0
 80270ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80270bc:	68fb      	ldr	r3, [r7, #12]
 80270be:	2220      	movs	r2, #32
 80270c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80270c4:	68fb      	ldr	r3, [r7, #12]
 80270c6:	2200      	movs	r2, #0
 80270c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80270cc:	68fb      	ldr	r3, [r7, #12]
 80270ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80270d0:	f043 0220 	orr.w	r2, r3, #32
 80270d4:	68fb      	ldr	r3, [r7, #12]
 80270d6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80270d8:	68fb      	ldr	r3, [r7, #12]
 80270da:	2200      	movs	r2, #0
 80270dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80270e0:	2301      	movs	r3, #1
 80270e2:	e064      	b.n	80271ae <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80270e4:	68fb      	ldr	r3, [r7, #12]
 80270e6:	681b      	ldr	r3, [r3, #0]
 80270e8:	699b      	ldr	r3, [r3, #24]
 80270ea:	f003 0302 	and.w	r3, r3, #2
 80270ee:	2b02      	cmp	r3, #2
 80270f0:	d0db      	beq.n	80270aa <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80270f2:	68fb      	ldr	r3, [r7, #12]
 80270f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80270f8:	2b01      	cmp	r3, #1
 80270fa:	d101      	bne.n	8027100 <HAL_I2C_Mem_Write_IT+0x9c>
 80270fc:	2302      	movs	r3, #2
 80270fe:	e056      	b.n	80271ae <HAL_I2C_Mem_Write_IT+0x14a>
 8027100:	68fb      	ldr	r3, [r7, #12]
 8027102:	2201      	movs	r2, #1
 8027104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8027108:	68fb      	ldr	r3, [r7, #12]
 802710a:	681b      	ldr	r3, [r3, #0]
 802710c:	681b      	ldr	r3, [r3, #0]
 802710e:	f003 0301 	and.w	r3, r3, #1
 8027112:	2b01      	cmp	r3, #1
 8027114:	d007      	beq.n	8027126 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8027116:	68fb      	ldr	r3, [r7, #12]
 8027118:	681b      	ldr	r3, [r3, #0]
 802711a:	681a      	ldr	r2, [r3, #0]
 802711c:	68fb      	ldr	r3, [r7, #12]
 802711e:	681b      	ldr	r3, [r3, #0]
 8027120:	f042 0201 	orr.w	r2, r2, #1
 8027124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8027126:	68fb      	ldr	r3, [r7, #12]
 8027128:	681b      	ldr	r3, [r3, #0]
 802712a:	681a      	ldr	r2, [r3, #0]
 802712c:	68fb      	ldr	r3, [r7, #12]
 802712e:	681b      	ldr	r3, [r3, #0]
 8027130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8027134:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8027136:	68fb      	ldr	r3, [r7, #12]
 8027138:	2221      	movs	r2, #33	@ 0x21
 802713a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802713e:	68fb      	ldr	r3, [r7, #12]
 8027140:	2240      	movs	r2, #64	@ 0x40
 8027142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8027146:	68fb      	ldr	r3, [r7, #12]
 8027148:	2200      	movs	r2, #0
 802714a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802714c:	68fb      	ldr	r3, [r7, #12]
 802714e:	6a3a      	ldr	r2, [r7, #32]
 8027150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8027152:	68fb      	ldr	r3, [r7, #12]
 8027154:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8027156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8027158:	68fb      	ldr	r3, [r7, #12]
 802715a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802715c:	b29a      	uxth	r2, r3
 802715e:	68fb      	ldr	r3, [r7, #12]
 8027160:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8027162:	68fb      	ldr	r3, [r7, #12]
 8027164:	4a17      	ldr	r2, [pc, #92]	@ (80271c4 <HAL_I2C_Mem_Write_IT+0x160>)
 8027166:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8027168:	897a      	ldrh	r2, [r7, #10]
 802716a:	68fb      	ldr	r3, [r7, #12]
 802716c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 802716e:	893a      	ldrh	r2, [r7, #8]
 8027170:	68fb      	ldr	r3, [r7, #12]
 8027172:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8027174:	88fa      	ldrh	r2, [r7, #6]
 8027176:	68fb      	ldr	r3, [r7, #12]
 8027178:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 802717a:	68fb      	ldr	r3, [r7, #12]
 802717c:	2200      	movs	r2, #0
 802717e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8027180:	68fb      	ldr	r3, [r7, #12]
 8027182:	681b      	ldr	r3, [r3, #0]
 8027184:	681a      	ldr	r2, [r3, #0]
 8027186:	68fb      	ldr	r3, [r7, #12]
 8027188:	681b      	ldr	r3, [r3, #0]
 802718a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802718e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8027190:	68fb      	ldr	r3, [r7, #12]
 8027192:	2200      	movs	r2, #0
 8027194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027198:	68fb      	ldr	r3, [r7, #12]
 802719a:	681b      	ldr	r3, [r3, #0]
 802719c:	685a      	ldr	r2, [r3, #4]
 802719e:	68fb      	ldr	r3, [r7, #12]
 80271a0:	681b      	ldr	r3, [r3, #0]
 80271a2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80271a6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80271a8:	2300      	movs	r3, #0
 80271aa:	e000      	b.n	80271ae <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80271ac:	2302      	movs	r3, #2
  }
}
 80271ae:	4618      	mov	r0, r3
 80271b0:	371c      	adds	r7, #28
 80271b2:	46bd      	mov	sp, r7
 80271b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271b8:	4770      	bx	lr
 80271ba:	bf00      	nop
 80271bc:	20001028 	.word	0x20001028
 80271c0:	14f8b589 	.word	0x14f8b589
 80271c4:	ffff0000 	.word	0xffff0000

080271c8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80271c8:	b480      	push	{r7}
 80271ca:	b087      	sub	sp, #28
 80271cc:	af00      	add	r7, sp, #0
 80271ce:	60f8      	str	r0, [r7, #12]
 80271d0:	4608      	mov	r0, r1
 80271d2:	4611      	mov	r1, r2
 80271d4:	461a      	mov	r2, r3
 80271d6:	4603      	mov	r3, r0
 80271d8:	817b      	strh	r3, [r7, #10]
 80271da:	460b      	mov	r3, r1
 80271dc:	813b      	strh	r3, [r7, #8]
 80271de:	4613      	mov	r3, r2
 80271e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80271e2:	2300      	movs	r3, #0
 80271e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80271e6:	68fb      	ldr	r3, [r7, #12]
 80271e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80271ec:	b2db      	uxtb	r3, r3
 80271ee:	2b20      	cmp	r3, #32
 80271f0:	f040 809a 	bne.w	8027328 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80271f4:	4b50      	ldr	r3, [pc, #320]	@ (8027338 <HAL_I2C_Mem_Read_IT+0x170>)
 80271f6:	681b      	ldr	r3, [r3, #0]
 80271f8:	08db      	lsrs	r3, r3, #3
 80271fa:	4a50      	ldr	r2, [pc, #320]	@ (802733c <HAL_I2C_Mem_Read_IT+0x174>)
 80271fc:	fba2 2303 	umull	r2, r3, r2, r3
 8027200:	0a1a      	lsrs	r2, r3, #8
 8027202:	4613      	mov	r3, r2
 8027204:	009b      	lsls	r3, r3, #2
 8027206:	4413      	add	r3, r2
 8027208:	009a      	lsls	r2, r3, #2
 802720a:	4413      	add	r3, r2
 802720c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 802720e:	697b      	ldr	r3, [r7, #20]
 8027210:	3b01      	subs	r3, #1
 8027212:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8027214:	697b      	ldr	r3, [r7, #20]
 8027216:	2b00      	cmp	r3, #0
 8027218:	d116      	bne.n	8027248 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802721a:	68fb      	ldr	r3, [r7, #12]
 802721c:	2200      	movs	r2, #0
 802721e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8027220:	68fb      	ldr	r3, [r7, #12]
 8027222:	2220      	movs	r2, #32
 8027224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8027228:	68fb      	ldr	r3, [r7, #12]
 802722a:	2200      	movs	r2, #0
 802722c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8027230:	68fb      	ldr	r3, [r7, #12]
 8027232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027234:	f043 0220 	orr.w	r2, r3, #32
 8027238:	68fb      	ldr	r3, [r7, #12]
 802723a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802723c:	68fb      	ldr	r3, [r7, #12]
 802723e:	2200      	movs	r2, #0
 8027240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8027244:	2301      	movs	r3, #1
 8027246:	e070      	b.n	802732a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8027248:	68fb      	ldr	r3, [r7, #12]
 802724a:	681b      	ldr	r3, [r3, #0]
 802724c:	699b      	ldr	r3, [r3, #24]
 802724e:	f003 0302 	and.w	r3, r3, #2
 8027252:	2b02      	cmp	r3, #2
 8027254:	d0db      	beq.n	802720e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8027256:	68fb      	ldr	r3, [r7, #12]
 8027258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802725c:	2b01      	cmp	r3, #1
 802725e:	d101      	bne.n	8027264 <HAL_I2C_Mem_Read_IT+0x9c>
 8027260:	2302      	movs	r3, #2
 8027262:	e062      	b.n	802732a <HAL_I2C_Mem_Read_IT+0x162>
 8027264:	68fb      	ldr	r3, [r7, #12]
 8027266:	2201      	movs	r2, #1
 8027268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802726c:	68fb      	ldr	r3, [r7, #12]
 802726e:	681b      	ldr	r3, [r3, #0]
 8027270:	681b      	ldr	r3, [r3, #0]
 8027272:	f003 0301 	and.w	r3, r3, #1
 8027276:	2b01      	cmp	r3, #1
 8027278:	d007      	beq.n	802728a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802727a:	68fb      	ldr	r3, [r7, #12]
 802727c:	681b      	ldr	r3, [r3, #0]
 802727e:	681a      	ldr	r2, [r3, #0]
 8027280:	68fb      	ldr	r3, [r7, #12]
 8027282:	681b      	ldr	r3, [r3, #0]
 8027284:	f042 0201 	orr.w	r2, r2, #1
 8027288:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802728a:	68fb      	ldr	r3, [r7, #12]
 802728c:	681b      	ldr	r3, [r3, #0]
 802728e:	681a      	ldr	r2, [r3, #0]
 8027290:	68fb      	ldr	r3, [r7, #12]
 8027292:	681b      	ldr	r3, [r3, #0]
 8027294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8027298:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 802729a:	68fb      	ldr	r3, [r7, #12]
 802729c:	2222      	movs	r2, #34	@ 0x22
 802729e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80272a2:	68fb      	ldr	r3, [r7, #12]
 80272a4:	2240      	movs	r2, #64	@ 0x40
 80272a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80272aa:	68fb      	ldr	r3, [r7, #12]
 80272ac:	2200      	movs	r2, #0
 80272ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80272b0:	68fb      	ldr	r3, [r7, #12]
 80272b2:	6a3a      	ldr	r2, [r7, #32]
 80272b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80272b6:	68fb      	ldr	r3, [r7, #12]
 80272b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80272ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80272bc:	68fb      	ldr	r3, [r7, #12]
 80272be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80272c0:	b29a      	uxth	r2, r3
 80272c2:	68fb      	ldr	r3, [r7, #12]
 80272c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80272c6:	68fb      	ldr	r3, [r7, #12]
 80272c8:	4a1d      	ldr	r2, [pc, #116]	@ (8027340 <HAL_I2C_Mem_Read_IT+0x178>)
 80272ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80272cc:	897a      	ldrh	r2, [r7, #10]
 80272ce:	68fb      	ldr	r3, [r7, #12]
 80272d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80272d2:	893a      	ldrh	r2, [r7, #8]
 80272d4:	68fb      	ldr	r3, [r7, #12]
 80272d6:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80272d8:	88fa      	ldrh	r2, [r7, #6]
 80272da:	68fb      	ldr	r3, [r7, #12]
 80272dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80272de:	68fb      	ldr	r3, [r7, #12]
 80272e0:	2200      	movs	r2, #0
 80272e2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80272e4:	68fb      	ldr	r3, [r7, #12]
 80272e6:	681b      	ldr	r3, [r3, #0]
 80272e8:	681a      	ldr	r2, [r3, #0]
 80272ea:	68fb      	ldr	r3, [r7, #12]
 80272ec:	681b      	ldr	r3, [r3, #0]
 80272ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80272f2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80272f4:	68fb      	ldr	r3, [r7, #12]
 80272f6:	681b      	ldr	r3, [r3, #0]
 80272f8:	681a      	ldr	r2, [r3, #0]
 80272fa:	68fb      	ldr	r3, [r7, #12]
 80272fc:	681b      	ldr	r3, [r3, #0]
 80272fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8027302:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8027304:	68fb      	ldr	r3, [r7, #12]
 8027306:	2200      	movs	r2, #0
 8027308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 802730c:	68fb      	ldr	r3, [r7, #12]
 802730e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8027310:	2b00      	cmp	r3, #0
 8027312:	d007      	beq.n	8027324 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027314:	68fb      	ldr	r3, [r7, #12]
 8027316:	681b      	ldr	r3, [r3, #0]
 8027318:	685a      	ldr	r2, [r3, #4]
 802731a:	68fb      	ldr	r3, [r7, #12]
 802731c:	681b      	ldr	r3, [r3, #0]
 802731e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8027322:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8027324:	2300      	movs	r3, #0
 8027326:	e000      	b.n	802732a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8027328:	2302      	movs	r3, #2
  }
}
 802732a:	4618      	mov	r0, r3
 802732c:	371c      	adds	r7, #28
 802732e:	46bd      	mov	sp, r7
 8027330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027334:	4770      	bx	lr
 8027336:	bf00      	nop
 8027338:	20001028 	.word	0x20001028
 802733c:	14f8b589 	.word	0x14f8b589
 8027340:	ffff0000 	.word	0xffff0000

08027344 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8027344:	b580      	push	{r7, lr}
 8027346:	b084      	sub	sp, #16
 8027348:	af00      	add	r7, sp, #0
 802734a:	6078      	str	r0, [r7, #4]
 802734c:	460b      	mov	r3, r1
 802734e:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8027350:	687b      	ldr	r3, [r7, #4]
 8027352:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027356:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	681b      	ldr	r3, [r3, #0]
 802735c:	699b      	ldr	r3, [r3, #24]
 802735e:	f003 0302 	and.w	r3, r3, #2
 8027362:	2b02      	cmp	r3, #2
 8027364:	d138      	bne.n	80273d8 <HAL_I2C_Master_Abort_IT+0x94>
 8027366:	7bfb      	ldrb	r3, [r7, #15]
 8027368:	2b10      	cmp	r3, #16
 802736a:	d135      	bne.n	80273d8 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8027372:	2b01      	cmp	r3, #1
 8027374:	d101      	bne.n	802737a <HAL_I2C_Master_Abort_IT+0x36>
 8027376:	2302      	movs	r3, #2
 8027378:	e02f      	b.n	80273da <HAL_I2C_Master_Abort_IT+0x96>
 802737a:	687b      	ldr	r3, [r7, #4]
 802737c:	2201      	movs	r2, #1
 802737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8027382:	687b      	ldr	r3, [r7, #4]
 8027384:	2200      	movs	r2, #0
 8027386:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8027388:	687b      	ldr	r3, [r7, #4]
 802738a:	2260      	movs	r2, #96	@ 0x60
 802738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	681b      	ldr	r3, [r3, #0]
 8027394:	681a      	ldr	r2, [r3, #0]
 8027396:	687b      	ldr	r3, [r7, #4]
 8027398:	681b      	ldr	r3, [r3, #0]
 802739a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802739e:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80273a0:	687b      	ldr	r3, [r7, #4]
 80273a2:	681b      	ldr	r3, [r3, #0]
 80273a4:	681a      	ldr	r2, [r3, #0]
 80273a6:	687b      	ldr	r3, [r7, #4]
 80273a8:	681b      	ldr	r3, [r3, #0]
 80273aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80273ae:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	2200      	movs	r2, #0
 80273b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80273b6:	687b      	ldr	r3, [r7, #4]
 80273b8:	681b      	ldr	r3, [r3, #0]
 80273ba:	685a      	ldr	r2, [r3, #4]
 80273bc:	687b      	ldr	r3, [r7, #4]
 80273be:	681b      	ldr	r3, [r3, #0]
 80273c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80273c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80273c6:	687b      	ldr	r3, [r7, #4]
 80273c8:	2200      	movs	r2, #0
 80273ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80273ce:	6878      	ldr	r0, [r7, #4]
 80273d0:	f001 f936 	bl	8028640 <I2C_ITError>

    return HAL_OK;
 80273d4:	2300      	movs	r3, #0
 80273d6:	e000      	b.n	80273da <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 80273d8:	2301      	movs	r3, #1
  }
}
 80273da:	4618      	mov	r0, r3
 80273dc:	3710      	adds	r7, #16
 80273de:	46bd      	mov	sp, r7
 80273e0:	bd80      	pop	{r7, pc}

080273e2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80273e2:	b580      	push	{r7, lr}
 80273e4:	b088      	sub	sp, #32
 80273e6:	af00      	add	r7, sp, #0
 80273e8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80273ea:	2300      	movs	r3, #0
 80273ec:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80273ee:	687b      	ldr	r3, [r7, #4]
 80273f0:	681b      	ldr	r3, [r3, #0]
 80273f2:	685b      	ldr	r3, [r3, #4]
 80273f4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80273f6:	687b      	ldr	r3, [r7, #4]
 80273f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80273fa:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80273fc:	687b      	ldr	r3, [r7, #4]
 80273fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027402:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8027404:	687b      	ldr	r3, [r7, #4]
 8027406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802740a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 802740c:	7bfb      	ldrb	r3, [r7, #15]
 802740e:	2b10      	cmp	r3, #16
 8027410:	d003      	beq.n	802741a <HAL_I2C_EV_IRQHandler+0x38>
 8027412:	7bfb      	ldrb	r3, [r7, #15]
 8027414:	2b40      	cmp	r3, #64	@ 0x40
 8027416:	f040 80ad 	bne.w	8027574 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802741a:	687b      	ldr	r3, [r7, #4]
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	699b      	ldr	r3, [r3, #24]
 8027420:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	681b      	ldr	r3, [r3, #0]
 8027426:	695b      	ldr	r3, [r3, #20]
 8027428:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 802742a:	69fb      	ldr	r3, [r7, #28]
 802742c:	f003 0301 	and.w	r3, r3, #1
 8027430:	2b00      	cmp	r3, #0
 8027432:	d10d      	bne.n	8027450 <HAL_I2C_EV_IRQHandler+0x6e>
 8027434:	693b      	ldr	r3, [r7, #16]
 8027436:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 802743a:	d003      	beq.n	8027444 <HAL_I2C_EV_IRQHandler+0x62>
 802743c:	693b      	ldr	r3, [r7, #16]
 802743e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8027442:	d101      	bne.n	8027448 <HAL_I2C_EV_IRQHandler+0x66>
 8027444:	2301      	movs	r3, #1
 8027446:	e000      	b.n	802744a <HAL_I2C_EV_IRQHandler+0x68>
 8027448:	2300      	movs	r3, #0
 802744a:	2b01      	cmp	r3, #1
 802744c:	f000 8110 	beq.w	8027670 <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027450:	69fb      	ldr	r3, [r7, #28]
 8027452:	f003 0301 	and.w	r3, r3, #1
 8027456:	2b00      	cmp	r3, #0
 8027458:	d00b      	beq.n	8027472 <HAL_I2C_EV_IRQHandler+0x90>
 802745a:	697b      	ldr	r3, [r7, #20]
 802745c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8027460:	2b00      	cmp	r3, #0
 8027462:	d006      	beq.n	8027472 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8027464:	6878      	ldr	r0, [r7, #4]
 8027466:	f001 faf7 	bl	8028a58 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 802746a:	6878      	ldr	r0, [r7, #4]
 802746c:	f000 fc76 	bl	8027d5c <I2C_Master_SB>
 8027470:	e07f      	b.n	8027572 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027472:	69fb      	ldr	r3, [r7, #28]
 8027474:	f003 0308 	and.w	r3, r3, #8
 8027478:	2b00      	cmp	r3, #0
 802747a:	d008      	beq.n	802748e <HAL_I2C_EV_IRQHandler+0xac>
 802747c:	697b      	ldr	r3, [r7, #20]
 802747e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8027482:	2b00      	cmp	r3, #0
 8027484:	d003      	beq.n	802748e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8027486:	6878      	ldr	r0, [r7, #4]
 8027488:	f000 fcee 	bl	8027e68 <I2C_Master_ADD10>
 802748c:	e071      	b.n	8027572 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802748e:	69fb      	ldr	r3, [r7, #28]
 8027490:	f003 0302 	and.w	r3, r3, #2
 8027494:	2b00      	cmp	r3, #0
 8027496:	d008      	beq.n	80274aa <HAL_I2C_EV_IRQHandler+0xc8>
 8027498:	697b      	ldr	r3, [r7, #20]
 802749a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802749e:	2b00      	cmp	r3, #0
 80274a0:	d003      	beq.n	80274aa <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80274a2:	6878      	ldr	r0, [r7, #4]
 80274a4:	f000 fd0a 	bl	8027ebc <I2C_Master_ADDR>
 80274a8:	e063      	b.n	8027572 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80274aa:	69bb      	ldr	r3, [r7, #24]
 80274ac:	f003 0304 	and.w	r3, r3, #4
 80274b0:	2b00      	cmp	r3, #0
 80274b2:	d032      	beq.n	802751a <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80274b4:	687b      	ldr	r3, [r7, #4]
 80274b6:	681b      	ldr	r3, [r3, #0]
 80274b8:	685b      	ldr	r3, [r3, #4]
 80274ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80274be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80274c2:	f000 80d7 	beq.w	8027674 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80274c6:	69fb      	ldr	r3, [r7, #28]
 80274c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	d00d      	beq.n	80274ec <HAL_I2C_EV_IRQHandler+0x10a>
 80274d0:	697b      	ldr	r3, [r7, #20]
 80274d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	d008      	beq.n	80274ec <HAL_I2C_EV_IRQHandler+0x10a>
 80274da:	69fb      	ldr	r3, [r7, #28]
 80274dc:	f003 0304 	and.w	r3, r3, #4
 80274e0:	2b00      	cmp	r3, #0
 80274e2:	d103      	bne.n	80274ec <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80274e4:	6878      	ldr	r0, [r7, #4]
 80274e6:	f000 f90b 	bl	8027700 <I2C_MasterTransmit_TXE>
 80274ea:	e042      	b.n	8027572 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80274ec:	69fb      	ldr	r3, [r7, #28]
 80274ee:	f003 0304 	and.w	r3, r3, #4
 80274f2:	2b00      	cmp	r3, #0
 80274f4:	f000 80be 	beq.w	8027674 <HAL_I2C_EV_IRQHandler+0x292>
 80274f8:	697b      	ldr	r3, [r7, #20]
 80274fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80274fe:	2b00      	cmp	r3, #0
 8027500:	f000 80b8 	beq.w	8027674 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8027504:	7bfb      	ldrb	r3, [r7, #15]
 8027506:	2b10      	cmp	r3, #16
 8027508:	d103      	bne.n	8027512 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 802750a:	6878      	ldr	r0, [r7, #4]
 802750c:	f000 f994 	bl	8027838 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027510:	e0b0      	b.n	8027674 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8027512:	6878      	ldr	r0, [r7, #4]
 8027514:	f000 f9f8 	bl	8027908 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027518:	e0ac      	b.n	8027674 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 802751a:	687b      	ldr	r3, [r7, #4]
 802751c:	681b      	ldr	r3, [r3, #0]
 802751e:	685b      	ldr	r3, [r3, #4]
 8027520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8027524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8027528:	f000 80a4 	beq.w	8027674 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802752c:	69fb      	ldr	r3, [r7, #28]
 802752e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8027532:	2b00      	cmp	r3, #0
 8027534:	d00d      	beq.n	8027552 <HAL_I2C_EV_IRQHandler+0x170>
 8027536:	697b      	ldr	r3, [r7, #20]
 8027538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802753c:	2b00      	cmp	r3, #0
 802753e:	d008      	beq.n	8027552 <HAL_I2C_EV_IRQHandler+0x170>
 8027540:	69fb      	ldr	r3, [r7, #28]
 8027542:	f003 0304 	and.w	r3, r3, #4
 8027546:	2b00      	cmp	r3, #0
 8027548:	d103      	bne.n	8027552 <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 802754a:	6878      	ldr	r0, [r7, #4]
 802754c:	f000 fa6b 	bl	8027a26 <I2C_MasterReceive_RXNE>
 8027550:	e00f      	b.n	8027572 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027552:	69fb      	ldr	r3, [r7, #28]
 8027554:	f003 0304 	and.w	r3, r3, #4
 8027558:	2b00      	cmp	r3, #0
 802755a:	f000 808b 	beq.w	8027674 <HAL_I2C_EV_IRQHandler+0x292>
 802755e:	697b      	ldr	r3, [r7, #20]
 8027560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8027564:	2b00      	cmp	r3, #0
 8027566:	f000 8085 	beq.w	8027674 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 802756a:	6878      	ldr	r0, [r7, #4]
 802756c:	f000 fb0c 	bl	8027b88 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027570:	e080      	b.n	8027674 <HAL_I2C_EV_IRQHandler+0x292>
 8027572:	e07f      	b.n	8027674 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8027574:	687b      	ldr	r3, [r7, #4]
 8027576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027578:	2b00      	cmp	r3, #0
 802757a:	d004      	beq.n	8027586 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802757c:	687b      	ldr	r3, [r7, #4]
 802757e:	681b      	ldr	r3, [r3, #0]
 8027580:	695b      	ldr	r3, [r3, #20]
 8027582:	61fb      	str	r3, [r7, #28]
 8027584:	e007      	b.n	8027596 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8027586:	687b      	ldr	r3, [r7, #4]
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	699b      	ldr	r3, [r3, #24]
 802758c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802758e:	687b      	ldr	r3, [r7, #4]
 8027590:	681b      	ldr	r3, [r3, #0]
 8027592:	695b      	ldr	r3, [r3, #20]
 8027594:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027596:	69fb      	ldr	r3, [r7, #28]
 8027598:	f003 0302 	and.w	r3, r3, #2
 802759c:	2b00      	cmp	r3, #0
 802759e:	d011      	beq.n	80275c4 <HAL_I2C_EV_IRQHandler+0x1e2>
 80275a0:	697b      	ldr	r3, [r7, #20]
 80275a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80275a6:	2b00      	cmp	r3, #0
 80275a8:	d00c      	beq.n	80275c4 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80275aa:	687b      	ldr	r3, [r7, #4]
 80275ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80275ae:	2b00      	cmp	r3, #0
 80275b0:	d003      	beq.n	80275ba <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80275b2:	687b      	ldr	r3, [r7, #4]
 80275b4:	681b      	ldr	r3, [r3, #0]
 80275b6:	699b      	ldr	r3, [r3, #24]
 80275b8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80275ba:	69b9      	ldr	r1, [r7, #24]
 80275bc:	6878      	ldr	r0, [r7, #4]
 80275be:	f000 fecc 	bl	802835a <I2C_Slave_ADDR>
 80275c2:	e05a      	b.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80275c4:	69fb      	ldr	r3, [r7, #28]
 80275c6:	f003 0310 	and.w	r3, r3, #16
 80275ca:	2b00      	cmp	r3, #0
 80275cc:	d008      	beq.n	80275e0 <HAL_I2C_EV_IRQHandler+0x1fe>
 80275ce:	697b      	ldr	r3, [r7, #20]
 80275d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80275d4:	2b00      	cmp	r3, #0
 80275d6:	d003      	beq.n	80275e0 <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 80275d8:	6878      	ldr	r0, [r7, #4]
 80275da:	f000 ff01 	bl	80283e0 <I2C_Slave_STOPF>
 80275de:	e04c      	b.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80275e0:	7bbb      	ldrb	r3, [r7, #14]
 80275e2:	2b21      	cmp	r3, #33	@ 0x21
 80275e4:	d002      	beq.n	80275ec <HAL_I2C_EV_IRQHandler+0x20a>
 80275e6:	7bbb      	ldrb	r3, [r7, #14]
 80275e8:	2b29      	cmp	r3, #41	@ 0x29
 80275ea:	d120      	bne.n	802762e <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80275ec:	69fb      	ldr	r3, [r7, #28]
 80275ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d00d      	beq.n	8027612 <HAL_I2C_EV_IRQHandler+0x230>
 80275f6:	697b      	ldr	r3, [r7, #20]
 80275f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80275fc:	2b00      	cmp	r3, #0
 80275fe:	d008      	beq.n	8027612 <HAL_I2C_EV_IRQHandler+0x230>
 8027600:	69fb      	ldr	r3, [r7, #28]
 8027602:	f003 0304 	and.w	r3, r3, #4
 8027606:	2b00      	cmp	r3, #0
 8027608:	d103      	bne.n	8027612 <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 802760a:	6878      	ldr	r0, [r7, #4]
 802760c:	f000 fde7 	bl	80281de <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8027610:	e032      	b.n	8027678 <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027612:	69fb      	ldr	r3, [r7, #28]
 8027614:	f003 0304 	and.w	r3, r3, #4
 8027618:	2b00      	cmp	r3, #0
 802761a:	d02d      	beq.n	8027678 <HAL_I2C_EV_IRQHandler+0x296>
 802761c:	697b      	ldr	r3, [r7, #20]
 802761e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8027622:	2b00      	cmp	r3, #0
 8027624:	d028      	beq.n	8027678 <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8027626:	6878      	ldr	r0, [r7, #4]
 8027628:	f000 fe16 	bl	8028258 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802762c:	e024      	b.n	8027678 <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802762e:	69fb      	ldr	r3, [r7, #28]
 8027630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8027634:	2b00      	cmp	r3, #0
 8027636:	d00d      	beq.n	8027654 <HAL_I2C_EV_IRQHandler+0x272>
 8027638:	697b      	ldr	r3, [r7, #20]
 802763a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802763e:	2b00      	cmp	r3, #0
 8027640:	d008      	beq.n	8027654 <HAL_I2C_EV_IRQHandler+0x272>
 8027642:	69fb      	ldr	r3, [r7, #28]
 8027644:	f003 0304 	and.w	r3, r3, #4
 8027648:	2b00      	cmp	r3, #0
 802764a:	d103      	bne.n	8027654 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 802764c:	6878      	ldr	r0, [r7, #4]
 802764e:	f000 fe24 	bl	802829a <I2C_SlaveReceive_RXNE>
 8027652:	e012      	b.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027654:	69fb      	ldr	r3, [r7, #28]
 8027656:	f003 0304 	and.w	r3, r3, #4
 802765a:	2b00      	cmp	r3, #0
 802765c:	d00d      	beq.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
 802765e:	697b      	ldr	r3, [r7, #20]
 8027660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8027664:	2b00      	cmp	r3, #0
 8027666:	d008      	beq.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8027668:	6878      	ldr	r0, [r7, #4]
 802766a:	f000 fe54 	bl	8028316 <I2C_SlaveReceive_BTF>
 802766e:	e004      	b.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
      return;
 8027670:	bf00      	nop
 8027672:	e002      	b.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8027674:	bf00      	nop
 8027676:	e000      	b.n	802767a <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8027678:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 802767a:	3720      	adds	r7, #32
 802767c:	46bd      	mov	sp, r7
 802767e:	bd80      	pop	{r7, pc}

08027680 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8027680:	b480      	push	{r7}
 8027682:	b083      	sub	sp, #12
 8027684:	af00      	add	r7, sp, #0
 8027686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8027688:	bf00      	nop
 802768a:	370c      	adds	r7, #12
 802768c:	46bd      	mov	sp, r7
 802768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027692:	4770      	bx	lr

08027694 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8027694:	b480      	push	{r7}
 8027696:	b083      	sub	sp, #12
 8027698:	af00      	add	r7, sp, #0
 802769a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802769c:	bf00      	nop
 802769e:	370c      	adds	r7, #12
 80276a0:	46bd      	mov	sp, r7
 80276a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276a6:	4770      	bx	lr

080276a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80276a8:	b480      	push	{r7}
 80276aa:	b083      	sub	sp, #12
 80276ac:	af00      	add	r7, sp, #0
 80276ae:	6078      	str	r0, [r7, #4]
 80276b0:	460b      	mov	r3, r1
 80276b2:	70fb      	strb	r3, [r7, #3]
 80276b4:	4613      	mov	r3, r2
 80276b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80276b8:	bf00      	nop
 80276ba:	370c      	adds	r7, #12
 80276bc:	46bd      	mov	sp, r7
 80276be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276c2:	4770      	bx	lr

080276c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80276c4:	b480      	push	{r7}
 80276c6:	b083      	sub	sp, #12
 80276c8:	af00      	add	r7, sp, #0
 80276ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80276cc:	bf00      	nop
 80276ce:	370c      	adds	r7, #12
 80276d0:	46bd      	mov	sp, r7
 80276d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276d6:	4770      	bx	lr

080276d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80276d8:	b480      	push	{r7}
 80276da:	b083      	sub	sp, #12
 80276dc:	af00      	add	r7, sp, #0
 80276de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80276e0:	bf00      	nop
 80276e2:	370c      	adds	r7, #12
 80276e4:	46bd      	mov	sp, r7
 80276e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276ea:	4770      	bx	lr

080276ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80276ec:	b480      	push	{r7}
 80276ee:	b083      	sub	sp, #12
 80276f0:	af00      	add	r7, sp, #0
 80276f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80276f4:	bf00      	nop
 80276f6:	370c      	adds	r7, #12
 80276f8:	46bd      	mov	sp, r7
 80276fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276fe:	4770      	bx	lr

08027700 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8027700:	b580      	push	{r7, lr}
 8027702:	b084      	sub	sp, #16
 8027704:	af00      	add	r7, sp, #0
 8027706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8027708:	687b      	ldr	r3, [r7, #4]
 802770a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802770e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8027710:	687b      	ldr	r3, [r7, #4]
 8027712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027716:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8027718:	687b      	ldr	r3, [r7, #4]
 802771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802771c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8027722:	2b00      	cmp	r3, #0
 8027724:	d150      	bne.n	80277c8 <I2C_MasterTransmit_TXE+0xc8>
 8027726:	7bfb      	ldrb	r3, [r7, #15]
 8027728:	2b21      	cmp	r3, #33	@ 0x21
 802772a:	d14d      	bne.n	80277c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802772c:	68bb      	ldr	r3, [r7, #8]
 802772e:	2b08      	cmp	r3, #8
 8027730:	d01d      	beq.n	802776e <I2C_MasterTransmit_TXE+0x6e>
 8027732:	68bb      	ldr	r3, [r7, #8]
 8027734:	2b20      	cmp	r3, #32
 8027736:	d01a      	beq.n	802776e <I2C_MasterTransmit_TXE+0x6e>
 8027738:	68bb      	ldr	r3, [r7, #8]
 802773a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802773e:	d016      	beq.n	802776e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027740:	687b      	ldr	r3, [r7, #4]
 8027742:	681b      	ldr	r3, [r3, #0]
 8027744:	685a      	ldr	r2, [r3, #4]
 8027746:	687b      	ldr	r3, [r7, #4]
 8027748:	681b      	ldr	r3, [r3, #0]
 802774a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802774e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8027750:	687b      	ldr	r3, [r7, #4]
 8027752:	2211      	movs	r2, #17
 8027754:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8027756:	687b      	ldr	r3, [r7, #4]
 8027758:	2200      	movs	r2, #0
 802775a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 802775e:	687b      	ldr	r3, [r7, #4]
 8027760:	2220      	movs	r2, #32
 8027762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8027766:	6878      	ldr	r0, [r7, #4]
 8027768:	f007 fef8 	bl	802f55c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802776c:	e060      	b.n	8027830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802776e:	687b      	ldr	r3, [r7, #4]
 8027770:	681b      	ldr	r3, [r3, #0]
 8027772:	685a      	ldr	r2, [r3, #4]
 8027774:	687b      	ldr	r3, [r7, #4]
 8027776:	681b      	ldr	r3, [r3, #0]
 8027778:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802777c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802777e:	687b      	ldr	r3, [r7, #4]
 8027780:	681b      	ldr	r3, [r3, #0]
 8027782:	681a      	ldr	r2, [r3, #0]
 8027784:	687b      	ldr	r3, [r7, #4]
 8027786:	681b      	ldr	r3, [r3, #0]
 8027788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802778c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	2200      	movs	r2, #0
 8027792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	2220      	movs	r2, #32
 8027798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802779c:	687b      	ldr	r3, [r7, #4]
 802779e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80277a2:	b2db      	uxtb	r3, r3
 80277a4:	2b40      	cmp	r3, #64	@ 0x40
 80277a6:	d107      	bne.n	80277b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80277a8:	687b      	ldr	r3, [r7, #4]
 80277aa:	2200      	movs	r2, #0
 80277ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80277b0:	6878      	ldr	r0, [r7, #4]
 80277b2:	f007 fef5 	bl	802f5a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80277b6:	e03b      	b.n	8027830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	2200      	movs	r2, #0
 80277bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80277c0:	6878      	ldr	r0, [r7, #4]
 80277c2:	f007 fecb 	bl	802f55c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80277c6:	e033      	b.n	8027830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80277c8:	7bfb      	ldrb	r3, [r7, #15]
 80277ca:	2b21      	cmp	r3, #33	@ 0x21
 80277cc:	d005      	beq.n	80277da <I2C_MasterTransmit_TXE+0xda>
 80277ce:	7bbb      	ldrb	r3, [r7, #14]
 80277d0:	2b40      	cmp	r3, #64	@ 0x40
 80277d2:	d12d      	bne.n	8027830 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80277d4:	7bfb      	ldrb	r3, [r7, #15]
 80277d6:	2b22      	cmp	r3, #34	@ 0x22
 80277d8:	d12a      	bne.n	8027830 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80277da:	687b      	ldr	r3, [r7, #4]
 80277dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80277de:	b29b      	uxth	r3, r3
 80277e0:	2b00      	cmp	r3, #0
 80277e2:	d108      	bne.n	80277f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80277e4:	687b      	ldr	r3, [r7, #4]
 80277e6:	681b      	ldr	r3, [r3, #0]
 80277e8:	685a      	ldr	r2, [r3, #4]
 80277ea:	687b      	ldr	r3, [r7, #4]
 80277ec:	681b      	ldr	r3, [r3, #0]
 80277ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80277f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80277f4:	e01c      	b.n	8027830 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80277fc:	b2db      	uxtb	r3, r3
 80277fe:	2b40      	cmp	r3, #64	@ 0x40
 8027800:	d103      	bne.n	802780a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8027802:	6878      	ldr	r0, [r7, #4]
 8027804:	f000 f880 	bl	8027908 <I2C_MemoryTransmit_TXE_BTF>
}
 8027808:	e012      	b.n	8027830 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802780e:	781a      	ldrb	r2, [r3, #0]
 8027810:	687b      	ldr	r3, [r7, #4]
 8027812:	681b      	ldr	r3, [r3, #0]
 8027814:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8027816:	687b      	ldr	r3, [r7, #4]
 8027818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802781a:	1c5a      	adds	r2, r3, #1
 802781c:	687b      	ldr	r3, [r7, #4]
 802781e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027824:	b29b      	uxth	r3, r3
 8027826:	3b01      	subs	r3, #1
 8027828:	b29a      	uxth	r2, r3
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 802782e:	e7ff      	b.n	8027830 <I2C_MasterTransmit_TXE+0x130>
 8027830:	bf00      	nop
 8027832:	3710      	adds	r7, #16
 8027834:	46bd      	mov	sp, r7
 8027836:	bd80      	pop	{r7, pc}

08027838 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8027838:	b580      	push	{r7, lr}
 802783a:	b084      	sub	sp, #16
 802783c:	af00      	add	r7, sp, #0
 802783e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8027840:	687b      	ldr	r3, [r7, #4]
 8027842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027844:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8027846:	687b      	ldr	r3, [r7, #4]
 8027848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802784c:	b2db      	uxtb	r3, r3
 802784e:	2b21      	cmp	r3, #33	@ 0x21
 8027850:	d156      	bne.n	8027900 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027856:	b29b      	uxth	r3, r3
 8027858:	2b00      	cmp	r3, #0
 802785a:	d012      	beq.n	8027882 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027860:	781a      	ldrb	r2, [r3, #0]
 8027862:	687b      	ldr	r3, [r7, #4]
 8027864:	681b      	ldr	r3, [r3, #0]
 8027866:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802786c:	1c5a      	adds	r2, r3, #1
 802786e:	687b      	ldr	r3, [r7, #4]
 8027870:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8027872:	687b      	ldr	r3, [r7, #4]
 8027874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027876:	b29b      	uxth	r3, r3
 8027878:	3b01      	subs	r3, #1
 802787a:	b29a      	uxth	r2, r3
 802787c:	687b      	ldr	r3, [r7, #4]
 802787e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8027880:	e03e      	b.n	8027900 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8027882:	68fb      	ldr	r3, [r7, #12]
 8027884:	2b08      	cmp	r3, #8
 8027886:	d01d      	beq.n	80278c4 <I2C_MasterTransmit_BTF+0x8c>
 8027888:	68fb      	ldr	r3, [r7, #12]
 802788a:	2b20      	cmp	r3, #32
 802788c:	d01a      	beq.n	80278c4 <I2C_MasterTransmit_BTF+0x8c>
 802788e:	68fb      	ldr	r3, [r7, #12]
 8027890:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8027894:	d016      	beq.n	80278c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027896:	687b      	ldr	r3, [r7, #4]
 8027898:	681b      	ldr	r3, [r3, #0]
 802789a:	685a      	ldr	r2, [r3, #4]
 802789c:	687b      	ldr	r3, [r7, #4]
 802789e:	681b      	ldr	r3, [r3, #0]
 80278a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80278a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80278a6:	687b      	ldr	r3, [r7, #4]
 80278a8:	2211      	movs	r2, #17
 80278aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80278ac:	687b      	ldr	r3, [r7, #4]
 80278ae:	2200      	movs	r2, #0
 80278b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80278b4:	687b      	ldr	r3, [r7, #4]
 80278b6:	2220      	movs	r2, #32
 80278b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80278bc:	6878      	ldr	r0, [r7, #4]
 80278be:	f007 fe4d 	bl	802f55c <HAL_I2C_MasterTxCpltCallback>
}
 80278c2:	e01d      	b.n	8027900 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80278c4:	687b      	ldr	r3, [r7, #4]
 80278c6:	681b      	ldr	r3, [r3, #0]
 80278c8:	685a      	ldr	r2, [r3, #4]
 80278ca:	687b      	ldr	r3, [r7, #4]
 80278cc:	681b      	ldr	r3, [r3, #0]
 80278ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80278d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80278d4:	687b      	ldr	r3, [r7, #4]
 80278d6:	681b      	ldr	r3, [r3, #0]
 80278d8:	681a      	ldr	r2, [r3, #0]
 80278da:	687b      	ldr	r3, [r7, #4]
 80278dc:	681b      	ldr	r3, [r3, #0]
 80278de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80278e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80278e4:	687b      	ldr	r3, [r7, #4]
 80278e6:	2200      	movs	r2, #0
 80278e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	2220      	movs	r2, #32
 80278ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	2200      	movs	r2, #0
 80278f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80278fa:	6878      	ldr	r0, [r7, #4]
 80278fc:	f007 fe2e 	bl	802f55c <HAL_I2C_MasterTxCpltCallback>
}
 8027900:	bf00      	nop
 8027902:	3710      	adds	r7, #16
 8027904:	46bd      	mov	sp, r7
 8027906:	bd80      	pop	{r7, pc}

08027908 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8027908:	b580      	push	{r7, lr}
 802790a:	b084      	sub	sp, #16
 802790c:	af00      	add	r7, sp, #0
 802790e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8027910:	687b      	ldr	r3, [r7, #4]
 8027912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027916:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8027918:	687b      	ldr	r3, [r7, #4]
 802791a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802791c:	2b00      	cmp	r3, #0
 802791e:	d11d      	bne.n	802795c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8027924:	2b01      	cmp	r3, #1
 8027926:	d10b      	bne.n	8027940 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8027928:	687b      	ldr	r3, [r7, #4]
 802792a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802792c:	b2da      	uxtb	r2, r3
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	681b      	ldr	r3, [r3, #0]
 8027932:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8027934:	687b      	ldr	r3, [r7, #4]
 8027936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027938:	1c9a      	adds	r2, r3, #2
 802793a:	687b      	ldr	r3, [r7, #4]
 802793c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 802793e:	e06e      	b.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8027940:	687b      	ldr	r3, [r7, #4]
 8027942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8027944:	b29b      	uxth	r3, r3
 8027946:	121b      	asrs	r3, r3, #8
 8027948:	b2da      	uxtb	r2, r3
 802794a:	687b      	ldr	r3, [r7, #4]
 802794c:	681b      	ldr	r3, [r3, #0]
 802794e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8027950:	687b      	ldr	r3, [r7, #4]
 8027952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027954:	1c5a      	adds	r2, r3, #1
 8027956:	687b      	ldr	r3, [r7, #4]
 8027958:	651a      	str	r2, [r3, #80]	@ 0x50
}
 802795a:	e060      	b.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 802795c:	687b      	ldr	r3, [r7, #4]
 802795e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027960:	2b01      	cmp	r3, #1
 8027962:	d10b      	bne.n	802797c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8027964:	687b      	ldr	r3, [r7, #4]
 8027966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8027968:	b2da      	uxtb	r2, r3
 802796a:	687b      	ldr	r3, [r7, #4]
 802796c:	681b      	ldr	r3, [r3, #0]
 802796e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8027970:	687b      	ldr	r3, [r7, #4]
 8027972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027974:	1c5a      	adds	r2, r3, #1
 8027976:	687b      	ldr	r3, [r7, #4]
 8027978:	651a      	str	r2, [r3, #80]	@ 0x50
}
 802797a:	e050      	b.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 802797c:	687b      	ldr	r3, [r7, #4]
 802797e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027980:	2b02      	cmp	r3, #2
 8027982:	d14c      	bne.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8027984:	7bfb      	ldrb	r3, [r7, #15]
 8027986:	2b22      	cmp	r3, #34	@ 0x22
 8027988:	d108      	bne.n	802799c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 802798a:	687b      	ldr	r3, [r7, #4]
 802798c:	681b      	ldr	r3, [r3, #0]
 802798e:	681a      	ldr	r2, [r3, #0]
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	681b      	ldr	r3, [r3, #0]
 8027994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8027998:	601a      	str	r2, [r3, #0]
}
 802799a:	e040      	b.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802799c:	687b      	ldr	r3, [r7, #4]
 802799e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80279a0:	b29b      	uxth	r3, r3
 80279a2:	2b00      	cmp	r3, #0
 80279a4:	d015      	beq.n	80279d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80279a6:	7bfb      	ldrb	r3, [r7, #15]
 80279a8:	2b21      	cmp	r3, #33	@ 0x21
 80279aa:	d112      	bne.n	80279d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80279b0:	781a      	ldrb	r2, [r3, #0]
 80279b2:	687b      	ldr	r3, [r7, #4]
 80279b4:	681b      	ldr	r3, [r3, #0]
 80279b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80279b8:	687b      	ldr	r3, [r7, #4]
 80279ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80279bc:	1c5a      	adds	r2, r3, #1
 80279be:	687b      	ldr	r3, [r7, #4]
 80279c0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80279c2:	687b      	ldr	r3, [r7, #4]
 80279c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80279c6:	b29b      	uxth	r3, r3
 80279c8:	3b01      	subs	r3, #1
 80279ca:	b29a      	uxth	r2, r3
 80279cc:	687b      	ldr	r3, [r7, #4]
 80279ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80279d0:	e025      	b.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80279d2:	687b      	ldr	r3, [r7, #4]
 80279d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80279d6:	b29b      	uxth	r3, r3
 80279d8:	2b00      	cmp	r3, #0
 80279da:	d120      	bne.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
 80279dc:	7bfb      	ldrb	r3, [r7, #15]
 80279de:	2b21      	cmp	r3, #33	@ 0x21
 80279e0:	d11d      	bne.n	8027a1e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80279e2:	687b      	ldr	r3, [r7, #4]
 80279e4:	681b      	ldr	r3, [r3, #0]
 80279e6:	685a      	ldr	r2, [r3, #4]
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	681b      	ldr	r3, [r3, #0]
 80279ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80279f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80279f2:	687b      	ldr	r3, [r7, #4]
 80279f4:	681b      	ldr	r3, [r3, #0]
 80279f6:	681a      	ldr	r2, [r3, #0]
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	681b      	ldr	r3, [r3, #0]
 80279fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027a00:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8027a02:	687b      	ldr	r3, [r7, #4]
 8027a04:	2200      	movs	r2, #0
 8027a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8027a08:	687b      	ldr	r3, [r7, #4]
 8027a0a:	2220      	movs	r2, #32
 8027a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8027a10:	687b      	ldr	r3, [r7, #4]
 8027a12:	2200      	movs	r2, #0
 8027a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8027a18:	6878      	ldr	r0, [r7, #4]
 8027a1a:	f007 fdc1 	bl	802f5a0 <HAL_I2C_MemTxCpltCallback>
}
 8027a1e:	bf00      	nop
 8027a20:	3710      	adds	r7, #16
 8027a22:	46bd      	mov	sp, r7
 8027a24:	bd80      	pop	{r7, pc}

08027a26 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8027a26:	b580      	push	{r7, lr}
 8027a28:	b084      	sub	sp, #16
 8027a2a:	af00      	add	r7, sp, #0
 8027a2c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8027a2e:	687b      	ldr	r3, [r7, #4]
 8027a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027a34:	b2db      	uxtb	r3, r3
 8027a36:	2b22      	cmp	r3, #34	@ 0x22
 8027a38:	f040 80a2 	bne.w	8027b80 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8027a3c:	687b      	ldr	r3, [r7, #4]
 8027a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027a40:	b29b      	uxth	r3, r3
 8027a42:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8027a44:	68fb      	ldr	r3, [r7, #12]
 8027a46:	2b03      	cmp	r3, #3
 8027a48:	d921      	bls.n	8027a8e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027a4a:	687b      	ldr	r3, [r7, #4]
 8027a4c:	681b      	ldr	r3, [r3, #0]
 8027a4e:	691a      	ldr	r2, [r3, #16]
 8027a50:	687b      	ldr	r3, [r7, #4]
 8027a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027a54:	b2d2      	uxtb	r2, r2
 8027a56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8027a58:	687b      	ldr	r3, [r7, #4]
 8027a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027a5c:	1c5a      	adds	r2, r3, #1
 8027a5e:	687b      	ldr	r3, [r7, #4]
 8027a60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8027a62:	687b      	ldr	r3, [r7, #4]
 8027a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027a66:	b29b      	uxth	r3, r3
 8027a68:	3b01      	subs	r3, #1
 8027a6a:	b29a      	uxth	r2, r3
 8027a6c:	687b      	ldr	r3, [r7, #4]
 8027a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8027a70:	687b      	ldr	r3, [r7, #4]
 8027a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027a74:	b29b      	uxth	r3, r3
 8027a76:	2b03      	cmp	r3, #3
 8027a78:	f040 8082 	bne.w	8027b80 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8027a7c:	687b      	ldr	r3, [r7, #4]
 8027a7e:	681b      	ldr	r3, [r3, #0]
 8027a80:	685a      	ldr	r2, [r3, #4]
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	681b      	ldr	r3, [r3, #0]
 8027a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027a8a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8027a8c:	e078      	b.n	8027b80 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8027a8e:	687b      	ldr	r3, [r7, #4]
 8027a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027a92:	2b02      	cmp	r3, #2
 8027a94:	d074      	beq.n	8027b80 <I2C_MasterReceive_RXNE+0x15a>
 8027a96:	68fb      	ldr	r3, [r7, #12]
 8027a98:	2b01      	cmp	r3, #1
 8027a9a:	d002      	beq.n	8027aa2 <I2C_MasterReceive_RXNE+0x7c>
 8027a9c:	68fb      	ldr	r3, [r7, #12]
 8027a9e:	2b00      	cmp	r3, #0
 8027aa0:	d16e      	bne.n	8027b80 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8027aa2:	6878      	ldr	r0, [r7, #4]
 8027aa4:	f000 ffa6 	bl	80289f4 <I2C_WaitOnSTOPRequestThroughIT>
 8027aa8:	4603      	mov	r3, r0
 8027aaa:	2b00      	cmp	r3, #0
 8027aac:	d142      	bne.n	8027b34 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027aae:	687b      	ldr	r3, [r7, #4]
 8027ab0:	681b      	ldr	r3, [r3, #0]
 8027ab2:	681a      	ldr	r2, [r3, #0]
 8027ab4:	687b      	ldr	r3, [r7, #4]
 8027ab6:	681b      	ldr	r3, [r3, #0]
 8027ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027abc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	681b      	ldr	r3, [r3, #0]
 8027ac2:	685a      	ldr	r2, [r3, #4]
 8027ac4:	687b      	ldr	r3, [r7, #4]
 8027ac6:	681b      	ldr	r3, [r3, #0]
 8027ac8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8027acc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027ace:	687b      	ldr	r3, [r7, #4]
 8027ad0:	681b      	ldr	r3, [r3, #0]
 8027ad2:	691a      	ldr	r2, [r3, #16]
 8027ad4:	687b      	ldr	r3, [r7, #4]
 8027ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027ad8:	b2d2      	uxtb	r2, r2
 8027ada:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8027adc:	687b      	ldr	r3, [r7, #4]
 8027ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027ae0:	1c5a      	adds	r2, r3, #1
 8027ae2:	687b      	ldr	r3, [r7, #4]
 8027ae4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8027ae6:	687b      	ldr	r3, [r7, #4]
 8027ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027aea:	b29b      	uxth	r3, r3
 8027aec:	3b01      	subs	r3, #1
 8027aee:	b29a      	uxth	r2, r3
 8027af0:	687b      	ldr	r3, [r7, #4]
 8027af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8027af4:	687b      	ldr	r3, [r7, #4]
 8027af6:	2220      	movs	r2, #32
 8027af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8027afc:	687b      	ldr	r3, [r7, #4]
 8027afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027b02:	b2db      	uxtb	r3, r3
 8027b04:	2b40      	cmp	r3, #64	@ 0x40
 8027b06:	d10a      	bne.n	8027b1e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8027b08:	687b      	ldr	r3, [r7, #4]
 8027b0a:	2200      	movs	r2, #0
 8027b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8027b10:	687b      	ldr	r3, [r7, #4]
 8027b12:	2200      	movs	r2, #0
 8027b14:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8027b16:	6878      	ldr	r0, [r7, #4]
 8027b18:	f007 fd86 	bl	802f628 <HAL_I2C_MemRxCpltCallback>
}
 8027b1c:	e030      	b.n	8027b80 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8027b1e:	687b      	ldr	r3, [r7, #4]
 8027b20:	2200      	movs	r2, #0
 8027b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8027b26:	687b      	ldr	r3, [r7, #4]
 8027b28:	2212      	movs	r2, #18
 8027b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8027b2c:	6878      	ldr	r0, [r7, #4]
 8027b2e:	f007 fd59 	bl	802f5e4 <HAL_I2C_MasterRxCpltCallback>
}
 8027b32:	e025      	b.n	8027b80 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	681b      	ldr	r3, [r3, #0]
 8027b38:	685a      	ldr	r2, [r3, #4]
 8027b3a:	687b      	ldr	r3, [r7, #4]
 8027b3c:	681b      	ldr	r3, [r3, #0]
 8027b3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8027b42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027b44:	687b      	ldr	r3, [r7, #4]
 8027b46:	681b      	ldr	r3, [r3, #0]
 8027b48:	691a      	ldr	r2, [r3, #16]
 8027b4a:	687b      	ldr	r3, [r7, #4]
 8027b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027b4e:	b2d2      	uxtb	r2, r2
 8027b50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027b56:	1c5a      	adds	r2, r3, #1
 8027b58:	687b      	ldr	r3, [r7, #4]
 8027b5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8027b5c:	687b      	ldr	r3, [r7, #4]
 8027b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027b60:	b29b      	uxth	r3, r3
 8027b62:	3b01      	subs	r3, #1
 8027b64:	b29a      	uxth	r2, r3
 8027b66:	687b      	ldr	r3, [r7, #4]
 8027b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8027b6a:	687b      	ldr	r3, [r7, #4]
 8027b6c:	2220      	movs	r2, #32
 8027b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8027b72:	687b      	ldr	r3, [r7, #4]
 8027b74:	2200      	movs	r2, #0
 8027b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8027b7a:	6878      	ldr	r0, [r7, #4]
 8027b7c:	f7ff fdac 	bl	80276d8 <HAL_I2C_ErrorCallback>
}
 8027b80:	bf00      	nop
 8027b82:	3710      	adds	r7, #16
 8027b84:	46bd      	mov	sp, r7
 8027b86:	bd80      	pop	{r7, pc}

08027b88 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8027b88:	b580      	push	{r7, lr}
 8027b8a:	b084      	sub	sp, #16
 8027b8c:	af00      	add	r7, sp, #0
 8027b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8027b90:	687b      	ldr	r3, [r7, #4]
 8027b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027b94:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8027b96:	687b      	ldr	r3, [r7, #4]
 8027b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027b9a:	b29b      	uxth	r3, r3
 8027b9c:	2b04      	cmp	r3, #4
 8027b9e:	d11b      	bne.n	8027bd8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8027ba0:	687b      	ldr	r3, [r7, #4]
 8027ba2:	681b      	ldr	r3, [r3, #0]
 8027ba4:	685a      	ldr	r2, [r3, #4]
 8027ba6:	687b      	ldr	r3, [r7, #4]
 8027ba8:	681b      	ldr	r3, [r3, #0]
 8027baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027bae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027bb0:	687b      	ldr	r3, [r7, #4]
 8027bb2:	681b      	ldr	r3, [r3, #0]
 8027bb4:	691a      	ldr	r2, [r3, #16]
 8027bb6:	687b      	ldr	r3, [r7, #4]
 8027bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027bba:	b2d2      	uxtb	r2, r2
 8027bbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8027bbe:	687b      	ldr	r3, [r7, #4]
 8027bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027bc2:	1c5a      	adds	r2, r3, #1
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8027bc8:	687b      	ldr	r3, [r7, #4]
 8027bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027bcc:	b29b      	uxth	r3, r3
 8027bce:	3b01      	subs	r3, #1
 8027bd0:	b29a      	uxth	r2, r3
 8027bd2:	687b      	ldr	r3, [r7, #4]
 8027bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8027bd6:	e0bd      	b.n	8027d54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8027bd8:	687b      	ldr	r3, [r7, #4]
 8027bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027bdc:	b29b      	uxth	r3, r3
 8027bde:	2b03      	cmp	r3, #3
 8027be0:	d129      	bne.n	8027c36 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8027be2:	687b      	ldr	r3, [r7, #4]
 8027be4:	681b      	ldr	r3, [r3, #0]
 8027be6:	685a      	ldr	r2, [r3, #4]
 8027be8:	687b      	ldr	r3, [r7, #4]
 8027bea:	681b      	ldr	r3, [r3, #0]
 8027bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027bf0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8027bf2:	68fb      	ldr	r3, [r7, #12]
 8027bf4:	2b04      	cmp	r3, #4
 8027bf6:	d00a      	beq.n	8027c0e <I2C_MasterReceive_BTF+0x86>
 8027bf8:	68fb      	ldr	r3, [r7, #12]
 8027bfa:	2b02      	cmp	r3, #2
 8027bfc:	d007      	beq.n	8027c0e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	681b      	ldr	r3, [r3, #0]
 8027c02:	681a      	ldr	r2, [r3, #0]
 8027c04:	687b      	ldr	r3, [r7, #4]
 8027c06:	681b      	ldr	r3, [r3, #0]
 8027c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027c0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027c0e:	687b      	ldr	r3, [r7, #4]
 8027c10:	681b      	ldr	r3, [r3, #0]
 8027c12:	691a      	ldr	r2, [r3, #16]
 8027c14:	687b      	ldr	r3, [r7, #4]
 8027c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027c18:	b2d2      	uxtb	r2, r2
 8027c1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8027c1c:	687b      	ldr	r3, [r7, #4]
 8027c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027c20:	1c5a      	adds	r2, r3, #1
 8027c22:	687b      	ldr	r3, [r7, #4]
 8027c24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8027c26:	687b      	ldr	r3, [r7, #4]
 8027c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027c2a:	b29b      	uxth	r3, r3
 8027c2c:	3b01      	subs	r3, #1
 8027c2e:	b29a      	uxth	r2, r3
 8027c30:	687b      	ldr	r3, [r7, #4]
 8027c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8027c34:	e08e      	b.n	8027d54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8027c36:	687b      	ldr	r3, [r7, #4]
 8027c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027c3a:	b29b      	uxth	r3, r3
 8027c3c:	2b02      	cmp	r3, #2
 8027c3e:	d176      	bne.n	8027d2e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8027c40:	68fb      	ldr	r3, [r7, #12]
 8027c42:	2b01      	cmp	r3, #1
 8027c44:	d002      	beq.n	8027c4c <I2C_MasterReceive_BTF+0xc4>
 8027c46:	68fb      	ldr	r3, [r7, #12]
 8027c48:	2b10      	cmp	r3, #16
 8027c4a:	d108      	bne.n	8027c5e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027c4c:	687b      	ldr	r3, [r7, #4]
 8027c4e:	681b      	ldr	r3, [r3, #0]
 8027c50:	681a      	ldr	r2, [r3, #0]
 8027c52:	687b      	ldr	r3, [r7, #4]
 8027c54:	681b      	ldr	r3, [r3, #0]
 8027c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027c5a:	601a      	str	r2, [r3, #0]
 8027c5c:	e019      	b.n	8027c92 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8027c5e:	68fb      	ldr	r3, [r7, #12]
 8027c60:	2b04      	cmp	r3, #4
 8027c62:	d002      	beq.n	8027c6a <I2C_MasterReceive_BTF+0xe2>
 8027c64:	68fb      	ldr	r3, [r7, #12]
 8027c66:	2b02      	cmp	r3, #2
 8027c68:	d108      	bne.n	8027c7c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027c6a:	687b      	ldr	r3, [r7, #4]
 8027c6c:	681b      	ldr	r3, [r3, #0]
 8027c6e:	681a      	ldr	r2, [r3, #0]
 8027c70:	687b      	ldr	r3, [r7, #4]
 8027c72:	681b      	ldr	r3, [r3, #0]
 8027c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8027c78:	601a      	str	r2, [r3, #0]
 8027c7a:	e00a      	b.n	8027c92 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8027c7c:	68fb      	ldr	r3, [r7, #12]
 8027c7e:	2b10      	cmp	r3, #16
 8027c80:	d007      	beq.n	8027c92 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8027c82:	687b      	ldr	r3, [r7, #4]
 8027c84:	681b      	ldr	r3, [r3, #0]
 8027c86:	681a      	ldr	r2, [r3, #0]
 8027c88:	687b      	ldr	r3, [r7, #4]
 8027c8a:	681b      	ldr	r3, [r3, #0]
 8027c8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027c90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027c92:	687b      	ldr	r3, [r7, #4]
 8027c94:	681b      	ldr	r3, [r3, #0]
 8027c96:	691a      	ldr	r2, [r3, #16]
 8027c98:	687b      	ldr	r3, [r7, #4]
 8027c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027c9c:	b2d2      	uxtb	r2, r2
 8027c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8027ca0:	687b      	ldr	r3, [r7, #4]
 8027ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027ca4:	1c5a      	adds	r2, r3, #1
 8027ca6:	687b      	ldr	r3, [r7, #4]
 8027ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8027caa:	687b      	ldr	r3, [r7, #4]
 8027cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027cae:	b29b      	uxth	r3, r3
 8027cb0:	3b01      	subs	r3, #1
 8027cb2:	b29a      	uxth	r2, r3
 8027cb4:	687b      	ldr	r3, [r7, #4]
 8027cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027cb8:	687b      	ldr	r3, [r7, #4]
 8027cba:	681b      	ldr	r3, [r3, #0]
 8027cbc:	691a      	ldr	r2, [r3, #16]
 8027cbe:	687b      	ldr	r3, [r7, #4]
 8027cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027cc2:	b2d2      	uxtb	r2, r2
 8027cc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8027cc6:	687b      	ldr	r3, [r7, #4]
 8027cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027cca:	1c5a      	adds	r2, r3, #1
 8027ccc:	687b      	ldr	r3, [r7, #4]
 8027cce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8027cd0:	687b      	ldr	r3, [r7, #4]
 8027cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027cd4:	b29b      	uxth	r3, r3
 8027cd6:	3b01      	subs	r3, #1
 8027cd8:	b29a      	uxth	r2, r3
 8027cda:	687b      	ldr	r3, [r7, #4]
 8027cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8027cde:	687b      	ldr	r3, [r7, #4]
 8027ce0:	681b      	ldr	r3, [r3, #0]
 8027ce2:	685a      	ldr	r2, [r3, #4]
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	681b      	ldr	r3, [r3, #0]
 8027ce8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8027cec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8027cee:	687b      	ldr	r3, [r7, #4]
 8027cf0:	2220      	movs	r2, #32
 8027cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8027cf6:	687b      	ldr	r3, [r7, #4]
 8027cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027cfc:	b2db      	uxtb	r3, r3
 8027cfe:	2b40      	cmp	r3, #64	@ 0x40
 8027d00:	d10a      	bne.n	8027d18 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8027d02:	687b      	ldr	r3, [r7, #4]
 8027d04:	2200      	movs	r2, #0
 8027d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	2200      	movs	r2, #0
 8027d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8027d10:	6878      	ldr	r0, [r7, #4]
 8027d12:	f007 fc89 	bl	802f628 <HAL_I2C_MemRxCpltCallback>
}
 8027d16:	e01d      	b.n	8027d54 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8027d18:	687b      	ldr	r3, [r7, #4]
 8027d1a:	2200      	movs	r2, #0
 8027d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8027d20:	687b      	ldr	r3, [r7, #4]
 8027d22:	2212      	movs	r2, #18
 8027d24:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8027d26:	6878      	ldr	r0, [r7, #4]
 8027d28:	f007 fc5c 	bl	802f5e4 <HAL_I2C_MasterRxCpltCallback>
}
 8027d2c:	e012      	b.n	8027d54 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8027d2e:	687b      	ldr	r3, [r7, #4]
 8027d30:	681b      	ldr	r3, [r3, #0]
 8027d32:	691a      	ldr	r2, [r3, #16]
 8027d34:	687b      	ldr	r3, [r7, #4]
 8027d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027d38:	b2d2      	uxtb	r2, r2
 8027d3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8027d3c:	687b      	ldr	r3, [r7, #4]
 8027d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027d40:	1c5a      	adds	r2, r3, #1
 8027d42:	687b      	ldr	r3, [r7, #4]
 8027d44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8027d46:	687b      	ldr	r3, [r7, #4]
 8027d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027d4a:	b29b      	uxth	r3, r3
 8027d4c:	3b01      	subs	r3, #1
 8027d4e:	b29a      	uxth	r2, r3
 8027d50:	687b      	ldr	r3, [r7, #4]
 8027d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8027d54:	bf00      	nop
 8027d56:	3710      	adds	r7, #16
 8027d58:	46bd      	mov	sp, r7
 8027d5a:	bd80      	pop	{r7, pc}

08027d5c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8027d5c:	b480      	push	{r7}
 8027d5e:	b083      	sub	sp, #12
 8027d60:	af00      	add	r7, sp, #0
 8027d62:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8027d64:	687b      	ldr	r3, [r7, #4]
 8027d66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027d6a:	b2db      	uxtb	r3, r3
 8027d6c:	2b40      	cmp	r3, #64	@ 0x40
 8027d6e:	d117      	bne.n	8027da0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8027d70:	687b      	ldr	r3, [r7, #4]
 8027d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027d74:	2b00      	cmp	r3, #0
 8027d76:	d109      	bne.n	8027d8c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8027d78:	687b      	ldr	r3, [r7, #4]
 8027d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027d7c:	b2db      	uxtb	r3, r3
 8027d7e:	461a      	mov	r2, r3
 8027d80:	687b      	ldr	r3, [r7, #4]
 8027d82:	681b      	ldr	r3, [r3, #0]
 8027d84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8027d88:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8027d8a:	e067      	b.n	8027e5c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8027d8c:	687b      	ldr	r3, [r7, #4]
 8027d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027d90:	b2db      	uxtb	r3, r3
 8027d92:	f043 0301 	orr.w	r3, r3, #1
 8027d96:	b2da      	uxtb	r2, r3
 8027d98:	687b      	ldr	r3, [r7, #4]
 8027d9a:	681b      	ldr	r3, [r3, #0]
 8027d9c:	611a      	str	r2, [r3, #16]
}
 8027d9e:	e05d      	b.n	8027e5c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8027da0:	687b      	ldr	r3, [r7, #4]
 8027da2:	691b      	ldr	r3, [r3, #16]
 8027da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8027da8:	d133      	bne.n	8027e12 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027db0:	b2db      	uxtb	r3, r3
 8027db2:	2b21      	cmp	r3, #33	@ 0x21
 8027db4:	d109      	bne.n	8027dca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027dba:	b2db      	uxtb	r3, r3
 8027dbc:	461a      	mov	r2, r3
 8027dbe:	687b      	ldr	r3, [r7, #4]
 8027dc0:	681b      	ldr	r3, [r3, #0]
 8027dc2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8027dc6:	611a      	str	r2, [r3, #16]
 8027dc8:	e008      	b.n	8027ddc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8027dca:	687b      	ldr	r3, [r7, #4]
 8027dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027dce:	b2db      	uxtb	r3, r3
 8027dd0:	f043 0301 	orr.w	r3, r3, #1
 8027dd4:	b2da      	uxtb	r2, r3
 8027dd6:	687b      	ldr	r3, [r7, #4]
 8027dd8:	681b      	ldr	r3, [r3, #0]
 8027dda:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8027ddc:	687b      	ldr	r3, [r7, #4]
 8027dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	d004      	beq.n	8027dee <I2C_Master_SB+0x92>
 8027de4:	687b      	ldr	r3, [r7, #4]
 8027de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8027de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027dea:	2b00      	cmp	r3, #0
 8027dec:	d108      	bne.n	8027e00 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8027dee:	687b      	ldr	r3, [r7, #4]
 8027df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027df2:	2b00      	cmp	r3, #0
 8027df4:	d032      	beq.n	8027e5c <I2C_Master_SB+0x100>
 8027df6:	687b      	ldr	r3, [r7, #4]
 8027df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027dfc:	2b00      	cmp	r3, #0
 8027dfe:	d02d      	beq.n	8027e5c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	681b      	ldr	r3, [r3, #0]
 8027e04:	685a      	ldr	r2, [r3, #4]
 8027e06:	687b      	ldr	r3, [r7, #4]
 8027e08:	681b      	ldr	r3, [r3, #0]
 8027e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8027e0e:	605a      	str	r2, [r3, #4]
}
 8027e10:	e024      	b.n	8027e5c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8027e12:	687b      	ldr	r3, [r7, #4]
 8027e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027e16:	2b00      	cmp	r3, #0
 8027e18:	d10e      	bne.n	8027e38 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8027e1a:	687b      	ldr	r3, [r7, #4]
 8027e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027e1e:	b29b      	uxth	r3, r3
 8027e20:	11db      	asrs	r3, r3, #7
 8027e22:	b2db      	uxtb	r3, r3
 8027e24:	f003 0306 	and.w	r3, r3, #6
 8027e28:	b2db      	uxtb	r3, r3
 8027e2a:	f063 030f 	orn	r3, r3, #15
 8027e2e:	b2da      	uxtb	r2, r3
 8027e30:	687b      	ldr	r3, [r7, #4]
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	611a      	str	r2, [r3, #16]
}
 8027e36:	e011      	b.n	8027e5c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8027e38:	687b      	ldr	r3, [r7, #4]
 8027e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027e3c:	2b01      	cmp	r3, #1
 8027e3e:	d10d      	bne.n	8027e5c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8027e40:	687b      	ldr	r3, [r7, #4]
 8027e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027e44:	b29b      	uxth	r3, r3
 8027e46:	11db      	asrs	r3, r3, #7
 8027e48:	b2db      	uxtb	r3, r3
 8027e4a:	f003 0306 	and.w	r3, r3, #6
 8027e4e:	b2db      	uxtb	r3, r3
 8027e50:	f063 030e 	orn	r3, r3, #14
 8027e54:	b2da      	uxtb	r2, r3
 8027e56:	687b      	ldr	r3, [r7, #4]
 8027e58:	681b      	ldr	r3, [r3, #0]
 8027e5a:	611a      	str	r2, [r3, #16]
}
 8027e5c:	bf00      	nop
 8027e5e:	370c      	adds	r7, #12
 8027e60:	46bd      	mov	sp, r7
 8027e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e66:	4770      	bx	lr

08027e68 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8027e68:	b480      	push	{r7}
 8027e6a:	b083      	sub	sp, #12
 8027e6c:	af00      	add	r7, sp, #0
 8027e6e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8027e70:	687b      	ldr	r3, [r7, #4]
 8027e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027e74:	b2da      	uxtb	r2, r3
 8027e76:	687b      	ldr	r3, [r7, #4]
 8027e78:	681b      	ldr	r3, [r3, #0]
 8027e7a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8027e7c:	687b      	ldr	r3, [r7, #4]
 8027e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8027e80:	2b00      	cmp	r3, #0
 8027e82:	d103      	bne.n	8027e8c <I2C_Master_ADD10+0x24>
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027e88:	2b00      	cmp	r3, #0
 8027e8a:	d011      	beq.n	8027eb0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8027e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027e92:	2b00      	cmp	r3, #0
 8027e94:	d104      	bne.n	8027ea0 <I2C_Master_ADD10+0x38>
 8027e96:	687b      	ldr	r3, [r7, #4]
 8027e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027e9c:	2b00      	cmp	r3, #0
 8027e9e:	d007      	beq.n	8027eb0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8027ea0:	687b      	ldr	r3, [r7, #4]
 8027ea2:	681b      	ldr	r3, [r3, #0]
 8027ea4:	685a      	ldr	r2, [r3, #4]
 8027ea6:	687b      	ldr	r3, [r7, #4]
 8027ea8:	681b      	ldr	r3, [r3, #0]
 8027eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8027eae:	605a      	str	r2, [r3, #4]
    }
  }
}
 8027eb0:	bf00      	nop
 8027eb2:	370c      	adds	r7, #12
 8027eb4:	46bd      	mov	sp, r7
 8027eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027eba:	4770      	bx	lr

08027ebc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8027ebc:	b480      	push	{r7}
 8027ebe:	b091      	sub	sp, #68	@ 0x44
 8027ec0:	af00      	add	r7, sp, #0
 8027ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8027ec4:	687b      	ldr	r3, [r7, #4]
 8027ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8027eca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8027ece:	687b      	ldr	r3, [r7, #4]
 8027ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8027ed4:	687b      	ldr	r3, [r7, #4]
 8027ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027ed8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8027eda:	687b      	ldr	r3, [r7, #4]
 8027edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027ee0:	b2db      	uxtb	r3, r3
 8027ee2:	2b22      	cmp	r3, #34	@ 0x22
 8027ee4:	f040 8169 	bne.w	80281ba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8027ee8:	687b      	ldr	r3, [r7, #4]
 8027eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027eec:	2b00      	cmp	r3, #0
 8027eee:	d10f      	bne.n	8027f10 <I2C_Master_ADDR+0x54>
 8027ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8027ef4:	2b40      	cmp	r3, #64	@ 0x40
 8027ef6:	d10b      	bne.n	8027f10 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8027ef8:	2300      	movs	r3, #0
 8027efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8027efc:	687b      	ldr	r3, [r7, #4]
 8027efe:	681b      	ldr	r3, [r3, #0]
 8027f00:	695b      	ldr	r3, [r3, #20]
 8027f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	681b      	ldr	r3, [r3, #0]
 8027f08:	699b      	ldr	r3, [r3, #24]
 8027f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8027f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f0e:	e160      	b.n	80281d2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8027f10:	687b      	ldr	r3, [r7, #4]
 8027f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027f14:	2b00      	cmp	r3, #0
 8027f16:	d11d      	bne.n	8027f54 <I2C_Master_ADDR+0x98>
 8027f18:	687b      	ldr	r3, [r7, #4]
 8027f1a:	691b      	ldr	r3, [r3, #16]
 8027f1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8027f20:	d118      	bne.n	8027f54 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8027f22:	2300      	movs	r3, #0
 8027f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027f26:	687b      	ldr	r3, [r7, #4]
 8027f28:	681b      	ldr	r3, [r3, #0]
 8027f2a:	695b      	ldr	r3, [r3, #20]
 8027f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027f2e:	687b      	ldr	r3, [r7, #4]
 8027f30:	681b      	ldr	r3, [r3, #0]
 8027f32:	699b      	ldr	r3, [r3, #24]
 8027f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8027f38:	687b      	ldr	r3, [r7, #4]
 8027f3a:	681b      	ldr	r3, [r3, #0]
 8027f3c:	681a      	ldr	r2, [r3, #0]
 8027f3e:	687b      	ldr	r3, [r7, #4]
 8027f40:	681b      	ldr	r3, [r3, #0]
 8027f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8027f46:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027f4c:	1c5a      	adds	r2, r3, #1
 8027f4e:	687b      	ldr	r3, [r7, #4]
 8027f50:	651a      	str	r2, [r3, #80]	@ 0x50
 8027f52:	e13e      	b.n	80281d2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8027f54:	687b      	ldr	r3, [r7, #4]
 8027f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027f58:	b29b      	uxth	r3, r3
 8027f5a:	2b00      	cmp	r3, #0
 8027f5c:	d113      	bne.n	8027f86 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8027f5e:	2300      	movs	r3, #0
 8027f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8027f62:	687b      	ldr	r3, [r7, #4]
 8027f64:	681b      	ldr	r3, [r3, #0]
 8027f66:	695b      	ldr	r3, [r3, #20]
 8027f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8027f6a:	687b      	ldr	r3, [r7, #4]
 8027f6c:	681b      	ldr	r3, [r3, #0]
 8027f6e:	699b      	ldr	r3, [r3, #24]
 8027f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8027f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	681b      	ldr	r3, [r3, #0]
 8027f78:	681a      	ldr	r2, [r3, #0]
 8027f7a:	687b      	ldr	r3, [r7, #4]
 8027f7c:	681b      	ldr	r3, [r3, #0]
 8027f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027f82:	601a      	str	r2, [r3, #0]
 8027f84:	e115      	b.n	80281b2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8027f86:	687b      	ldr	r3, [r7, #4]
 8027f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8027f8a:	b29b      	uxth	r3, r3
 8027f8c:	2b01      	cmp	r3, #1
 8027f8e:	f040 808a 	bne.w	80280a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8027f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027f94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8027f98:	d137      	bne.n	802800a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027f9a:	687b      	ldr	r3, [r7, #4]
 8027f9c:	681b      	ldr	r3, [r3, #0]
 8027f9e:	681a      	ldr	r2, [r3, #0]
 8027fa0:	687b      	ldr	r3, [r7, #4]
 8027fa2:	681b      	ldr	r3, [r3, #0]
 8027fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027fa8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8027faa:	687b      	ldr	r3, [r7, #4]
 8027fac:	681b      	ldr	r3, [r3, #0]
 8027fae:	685b      	ldr	r3, [r3, #4]
 8027fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8027fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8027fb8:	d113      	bne.n	8027fe2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8027fba:	687b      	ldr	r3, [r7, #4]
 8027fbc:	681b      	ldr	r3, [r3, #0]
 8027fbe:	681a      	ldr	r2, [r3, #0]
 8027fc0:	687b      	ldr	r3, [r7, #4]
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8027fc8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8027fca:	2300      	movs	r3, #0
 8027fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8027fce:	687b      	ldr	r3, [r7, #4]
 8027fd0:	681b      	ldr	r3, [r3, #0]
 8027fd2:	695b      	ldr	r3, [r3, #20]
 8027fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8027fd6:	687b      	ldr	r3, [r7, #4]
 8027fd8:	681b      	ldr	r3, [r3, #0]
 8027fda:	699b      	ldr	r3, [r3, #24]
 8027fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8027fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027fe0:	e0e7      	b.n	80281b2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8027fe2:	2300      	movs	r3, #0
 8027fe4:	623b      	str	r3, [r7, #32]
 8027fe6:	687b      	ldr	r3, [r7, #4]
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	695b      	ldr	r3, [r3, #20]
 8027fec:	623b      	str	r3, [r7, #32]
 8027fee:	687b      	ldr	r3, [r7, #4]
 8027ff0:	681b      	ldr	r3, [r3, #0]
 8027ff2:	699b      	ldr	r3, [r3, #24]
 8027ff4:	623b      	str	r3, [r7, #32]
 8027ff6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8027ff8:	687b      	ldr	r3, [r7, #4]
 8027ffa:	681b      	ldr	r3, [r3, #0]
 8027ffc:	681a      	ldr	r2, [r3, #0]
 8027ffe:	687b      	ldr	r3, [r7, #4]
 8028000:	681b      	ldr	r3, [r3, #0]
 8028002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8028006:	601a      	str	r2, [r3, #0]
 8028008:	e0d3      	b.n	80281b2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 802800a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802800c:	2b08      	cmp	r3, #8
 802800e:	d02e      	beq.n	802806e <I2C_Master_ADDR+0x1b2>
 8028010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028012:	2b20      	cmp	r3, #32
 8028014:	d02b      	beq.n	802806e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8028016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028018:	2b12      	cmp	r3, #18
 802801a:	d102      	bne.n	8028022 <I2C_Master_ADDR+0x166>
 802801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802801e:	2b01      	cmp	r3, #1
 8028020:	d125      	bne.n	802806e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8028022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028024:	2b04      	cmp	r3, #4
 8028026:	d00e      	beq.n	8028046 <I2C_Master_ADDR+0x18a>
 8028028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802802a:	2b02      	cmp	r3, #2
 802802c:	d00b      	beq.n	8028046 <I2C_Master_ADDR+0x18a>
 802802e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028030:	2b10      	cmp	r3, #16
 8028032:	d008      	beq.n	8028046 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8028034:	687b      	ldr	r3, [r7, #4]
 8028036:	681b      	ldr	r3, [r3, #0]
 8028038:	681a      	ldr	r2, [r3, #0]
 802803a:	687b      	ldr	r3, [r7, #4]
 802803c:	681b      	ldr	r3, [r3, #0]
 802803e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8028042:	601a      	str	r2, [r3, #0]
 8028044:	e007      	b.n	8028056 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8028046:	687b      	ldr	r3, [r7, #4]
 8028048:	681b      	ldr	r3, [r3, #0]
 802804a:	681a      	ldr	r2, [r3, #0]
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	681b      	ldr	r3, [r3, #0]
 8028050:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8028054:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8028056:	2300      	movs	r3, #0
 8028058:	61fb      	str	r3, [r7, #28]
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	681b      	ldr	r3, [r3, #0]
 802805e:	695b      	ldr	r3, [r3, #20]
 8028060:	61fb      	str	r3, [r7, #28]
 8028062:	687b      	ldr	r3, [r7, #4]
 8028064:	681b      	ldr	r3, [r3, #0]
 8028066:	699b      	ldr	r3, [r3, #24]
 8028068:	61fb      	str	r3, [r7, #28]
 802806a:	69fb      	ldr	r3, [r7, #28]
 802806c:	e0a1      	b.n	80281b2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802806e:	687b      	ldr	r3, [r7, #4]
 8028070:	681b      	ldr	r3, [r3, #0]
 8028072:	681a      	ldr	r2, [r3, #0]
 8028074:	687b      	ldr	r3, [r7, #4]
 8028076:	681b      	ldr	r3, [r3, #0]
 8028078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802807c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802807e:	2300      	movs	r3, #0
 8028080:	61bb      	str	r3, [r7, #24]
 8028082:	687b      	ldr	r3, [r7, #4]
 8028084:	681b      	ldr	r3, [r3, #0]
 8028086:	695b      	ldr	r3, [r3, #20]
 8028088:	61bb      	str	r3, [r7, #24]
 802808a:	687b      	ldr	r3, [r7, #4]
 802808c:	681b      	ldr	r3, [r3, #0]
 802808e:	699b      	ldr	r3, [r3, #24]
 8028090:	61bb      	str	r3, [r7, #24]
 8028092:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8028094:	687b      	ldr	r3, [r7, #4]
 8028096:	681b      	ldr	r3, [r3, #0]
 8028098:	681a      	ldr	r2, [r3, #0]
 802809a:	687b      	ldr	r3, [r7, #4]
 802809c:	681b      	ldr	r3, [r3, #0]
 802809e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80280a2:	601a      	str	r2, [r3, #0]
 80280a4:	e085      	b.n	80281b2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80280a6:	687b      	ldr	r3, [r7, #4]
 80280a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80280aa:	b29b      	uxth	r3, r3
 80280ac:	2b02      	cmp	r3, #2
 80280ae:	d14d      	bne.n	802814c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80280b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80280b2:	2b04      	cmp	r3, #4
 80280b4:	d016      	beq.n	80280e4 <I2C_Master_ADDR+0x228>
 80280b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80280b8:	2b02      	cmp	r3, #2
 80280ba:	d013      	beq.n	80280e4 <I2C_Master_ADDR+0x228>
 80280bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80280be:	2b10      	cmp	r3, #16
 80280c0:	d010      	beq.n	80280e4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	681b      	ldr	r3, [r3, #0]
 80280c6:	681a      	ldr	r2, [r3, #0]
 80280c8:	687b      	ldr	r3, [r7, #4]
 80280ca:	681b      	ldr	r3, [r3, #0]
 80280cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80280d0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80280d2:	687b      	ldr	r3, [r7, #4]
 80280d4:	681b      	ldr	r3, [r3, #0]
 80280d6:	681a      	ldr	r2, [r3, #0]
 80280d8:	687b      	ldr	r3, [r7, #4]
 80280da:	681b      	ldr	r3, [r3, #0]
 80280dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80280e0:	601a      	str	r2, [r3, #0]
 80280e2:	e007      	b.n	80280f4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80280e4:	687b      	ldr	r3, [r7, #4]
 80280e6:	681b      	ldr	r3, [r3, #0]
 80280e8:	681a      	ldr	r2, [r3, #0]
 80280ea:	687b      	ldr	r3, [r7, #4]
 80280ec:	681b      	ldr	r3, [r3, #0]
 80280ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80280f2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80280f4:	687b      	ldr	r3, [r7, #4]
 80280f6:	681b      	ldr	r3, [r3, #0]
 80280f8:	685b      	ldr	r3, [r3, #4]
 80280fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80280fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8028102:	d117      	bne.n	8028134 <I2C_Master_ADDR+0x278>
 8028104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028106:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802810a:	d00b      	beq.n	8028124 <I2C_Master_ADDR+0x268>
 802810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802810e:	2b01      	cmp	r3, #1
 8028110:	d008      	beq.n	8028124 <I2C_Master_ADDR+0x268>
 8028112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028114:	2b08      	cmp	r3, #8
 8028116:	d005      	beq.n	8028124 <I2C_Master_ADDR+0x268>
 8028118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802811a:	2b10      	cmp	r3, #16
 802811c:	d002      	beq.n	8028124 <I2C_Master_ADDR+0x268>
 802811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028120:	2b20      	cmp	r3, #32
 8028122:	d107      	bne.n	8028134 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8028124:	687b      	ldr	r3, [r7, #4]
 8028126:	681b      	ldr	r3, [r3, #0]
 8028128:	685a      	ldr	r2, [r3, #4]
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	681b      	ldr	r3, [r3, #0]
 802812e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8028132:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8028134:	2300      	movs	r3, #0
 8028136:	617b      	str	r3, [r7, #20]
 8028138:	687b      	ldr	r3, [r7, #4]
 802813a:	681b      	ldr	r3, [r3, #0]
 802813c:	695b      	ldr	r3, [r3, #20]
 802813e:	617b      	str	r3, [r7, #20]
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	681b      	ldr	r3, [r3, #0]
 8028144:	699b      	ldr	r3, [r3, #24]
 8028146:	617b      	str	r3, [r7, #20]
 8028148:	697b      	ldr	r3, [r7, #20]
 802814a:	e032      	b.n	80281b2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802814c:	687b      	ldr	r3, [r7, #4]
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	681a      	ldr	r2, [r3, #0]
 8028152:	687b      	ldr	r3, [r7, #4]
 8028154:	681b      	ldr	r3, [r3, #0]
 8028156:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802815a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	685b      	ldr	r3, [r3, #4]
 8028162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8028166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802816a:	d117      	bne.n	802819c <I2C_Master_ADDR+0x2e0>
 802816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802816e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8028172:	d00b      	beq.n	802818c <I2C_Master_ADDR+0x2d0>
 8028174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028176:	2b01      	cmp	r3, #1
 8028178:	d008      	beq.n	802818c <I2C_Master_ADDR+0x2d0>
 802817a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802817c:	2b08      	cmp	r3, #8
 802817e:	d005      	beq.n	802818c <I2C_Master_ADDR+0x2d0>
 8028180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028182:	2b10      	cmp	r3, #16
 8028184:	d002      	beq.n	802818c <I2C_Master_ADDR+0x2d0>
 8028186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028188:	2b20      	cmp	r3, #32
 802818a:	d107      	bne.n	802819c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 802818c:	687b      	ldr	r3, [r7, #4]
 802818e:	681b      	ldr	r3, [r3, #0]
 8028190:	685a      	ldr	r2, [r3, #4]
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	681b      	ldr	r3, [r3, #0]
 8028196:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 802819a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802819c:	2300      	movs	r3, #0
 802819e:	613b      	str	r3, [r7, #16]
 80281a0:	687b      	ldr	r3, [r7, #4]
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	695b      	ldr	r3, [r3, #20]
 80281a6:	613b      	str	r3, [r7, #16]
 80281a8:	687b      	ldr	r3, [r7, #4]
 80281aa:	681b      	ldr	r3, [r3, #0]
 80281ac:	699b      	ldr	r3, [r3, #24]
 80281ae:	613b      	str	r3, [r7, #16]
 80281b0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80281b2:	687b      	ldr	r3, [r7, #4]
 80281b4:	2200      	movs	r2, #0
 80281b6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80281b8:	e00b      	b.n	80281d2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80281ba:	2300      	movs	r3, #0
 80281bc:	60fb      	str	r3, [r7, #12]
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	695b      	ldr	r3, [r3, #20]
 80281c4:	60fb      	str	r3, [r7, #12]
 80281c6:	687b      	ldr	r3, [r7, #4]
 80281c8:	681b      	ldr	r3, [r3, #0]
 80281ca:	699b      	ldr	r3, [r3, #24]
 80281cc:	60fb      	str	r3, [r7, #12]
 80281ce:	68fb      	ldr	r3, [r7, #12]
}
 80281d0:	e7ff      	b.n	80281d2 <I2C_Master_ADDR+0x316>
 80281d2:	bf00      	nop
 80281d4:	3744      	adds	r7, #68	@ 0x44
 80281d6:	46bd      	mov	sp, r7
 80281d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281dc:	4770      	bx	lr

080281de <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80281de:	b580      	push	{r7, lr}
 80281e0:	b084      	sub	sp, #16
 80281e2:	af00      	add	r7, sp, #0
 80281e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80281e6:	687b      	ldr	r3, [r7, #4]
 80281e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80281ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80281ee:	687b      	ldr	r3, [r7, #4]
 80281f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80281f2:	b29b      	uxth	r3, r3
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	d02b      	beq.n	8028250 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80281fc:	781a      	ldrb	r2, [r3, #0]
 80281fe:	687b      	ldr	r3, [r7, #4]
 8028200:	681b      	ldr	r3, [r3, #0]
 8028202:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8028204:	687b      	ldr	r3, [r7, #4]
 8028206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028208:	1c5a      	adds	r2, r3, #1
 802820a:	687b      	ldr	r3, [r7, #4]
 802820c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 802820e:	687b      	ldr	r3, [r7, #4]
 8028210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028212:	b29b      	uxth	r3, r3
 8028214:	3b01      	subs	r3, #1
 8028216:	b29a      	uxth	r2, r3
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802821c:	687b      	ldr	r3, [r7, #4]
 802821e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028220:	b29b      	uxth	r3, r3
 8028222:	2b00      	cmp	r3, #0
 8028224:	d114      	bne.n	8028250 <I2C_SlaveTransmit_TXE+0x72>
 8028226:	7bfb      	ldrb	r3, [r7, #15]
 8028228:	2b29      	cmp	r3, #41	@ 0x29
 802822a:	d111      	bne.n	8028250 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802822c:	687b      	ldr	r3, [r7, #4]
 802822e:	681b      	ldr	r3, [r3, #0]
 8028230:	685a      	ldr	r2, [r3, #4]
 8028232:	687b      	ldr	r3, [r7, #4]
 8028234:	681b      	ldr	r3, [r3, #0]
 8028236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802823a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802823c:	687b      	ldr	r3, [r7, #4]
 802823e:	2221      	movs	r2, #33	@ 0x21
 8028240:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8028242:	687b      	ldr	r3, [r7, #4]
 8028244:	2228      	movs	r2, #40	@ 0x28
 8028246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 802824a:	6878      	ldr	r0, [r7, #4]
 802824c:	f7ff fa18 	bl	8027680 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8028250:	bf00      	nop
 8028252:	3710      	adds	r7, #16
 8028254:	46bd      	mov	sp, r7
 8028256:	bd80      	pop	{r7, pc}

08028258 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8028258:	b480      	push	{r7}
 802825a:	b083      	sub	sp, #12
 802825c:	af00      	add	r7, sp, #0
 802825e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028264:	b29b      	uxth	r3, r3
 8028266:	2b00      	cmp	r3, #0
 8028268:	d011      	beq.n	802828e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 802826a:	687b      	ldr	r3, [r7, #4]
 802826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802826e:	781a      	ldrb	r2, [r3, #0]
 8028270:	687b      	ldr	r3, [r7, #4]
 8028272:	681b      	ldr	r3, [r3, #0]
 8028274:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8028276:	687b      	ldr	r3, [r7, #4]
 8028278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802827a:	1c5a      	adds	r2, r3, #1
 802827c:	687b      	ldr	r3, [r7, #4]
 802827e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8028280:	687b      	ldr	r3, [r7, #4]
 8028282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028284:	b29b      	uxth	r3, r3
 8028286:	3b01      	subs	r3, #1
 8028288:	b29a      	uxth	r2, r3
 802828a:	687b      	ldr	r3, [r7, #4]
 802828c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 802828e:	bf00      	nop
 8028290:	370c      	adds	r7, #12
 8028292:	46bd      	mov	sp, r7
 8028294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028298:	4770      	bx	lr

0802829a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 802829a:	b580      	push	{r7, lr}
 802829c:	b084      	sub	sp, #16
 802829e:	af00      	add	r7, sp, #0
 80282a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80282a2:	687b      	ldr	r3, [r7, #4]
 80282a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80282a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80282aa:	687b      	ldr	r3, [r7, #4]
 80282ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80282ae:	b29b      	uxth	r3, r3
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	d02c      	beq.n	802830e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80282b4:	687b      	ldr	r3, [r7, #4]
 80282b6:	681b      	ldr	r3, [r3, #0]
 80282b8:	691a      	ldr	r2, [r3, #16]
 80282ba:	687b      	ldr	r3, [r7, #4]
 80282bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80282be:	b2d2      	uxtb	r2, r2
 80282c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80282c2:	687b      	ldr	r3, [r7, #4]
 80282c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80282c6:	1c5a      	adds	r2, r3, #1
 80282c8:	687b      	ldr	r3, [r7, #4]
 80282ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80282cc:	687b      	ldr	r3, [r7, #4]
 80282ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80282d0:	b29b      	uxth	r3, r3
 80282d2:	3b01      	subs	r3, #1
 80282d4:	b29a      	uxth	r2, r3
 80282d6:	687b      	ldr	r3, [r7, #4]
 80282d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80282da:	687b      	ldr	r3, [r7, #4]
 80282dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80282de:	b29b      	uxth	r3, r3
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	d114      	bne.n	802830e <I2C_SlaveReceive_RXNE+0x74>
 80282e4:	7bfb      	ldrb	r3, [r7, #15]
 80282e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80282e8:	d111      	bne.n	802830e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80282ea:	687b      	ldr	r3, [r7, #4]
 80282ec:	681b      	ldr	r3, [r3, #0]
 80282ee:	685a      	ldr	r2, [r3, #4]
 80282f0:	687b      	ldr	r3, [r7, #4]
 80282f2:	681b      	ldr	r3, [r3, #0]
 80282f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80282f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80282fa:	687b      	ldr	r3, [r7, #4]
 80282fc:	2222      	movs	r2, #34	@ 0x22
 80282fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8028300:	687b      	ldr	r3, [r7, #4]
 8028302:	2228      	movs	r2, #40	@ 0x28
 8028304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8028308:	6878      	ldr	r0, [r7, #4]
 802830a:	f7ff f9c3 	bl	8027694 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 802830e:	bf00      	nop
 8028310:	3710      	adds	r7, #16
 8028312:	46bd      	mov	sp, r7
 8028314:	bd80      	pop	{r7, pc}

08028316 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8028316:	b480      	push	{r7}
 8028318:	b083      	sub	sp, #12
 802831a:	af00      	add	r7, sp, #0
 802831c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 802831e:	687b      	ldr	r3, [r7, #4]
 8028320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028322:	b29b      	uxth	r3, r3
 8028324:	2b00      	cmp	r3, #0
 8028326:	d012      	beq.n	802834e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8028328:	687b      	ldr	r3, [r7, #4]
 802832a:	681b      	ldr	r3, [r3, #0]
 802832c:	691a      	ldr	r2, [r3, #16]
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028332:	b2d2      	uxtb	r2, r2
 8028334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8028336:	687b      	ldr	r3, [r7, #4]
 8028338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802833a:	1c5a      	adds	r2, r3, #1
 802833c:	687b      	ldr	r3, [r7, #4]
 802833e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028344:	b29b      	uxth	r3, r3
 8028346:	3b01      	subs	r3, #1
 8028348:	b29a      	uxth	r2, r3
 802834a:	687b      	ldr	r3, [r7, #4]
 802834c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 802834e:	bf00      	nop
 8028350:	370c      	adds	r7, #12
 8028352:	46bd      	mov	sp, r7
 8028354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028358:	4770      	bx	lr

0802835a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 802835a:	b580      	push	{r7, lr}
 802835c:	b084      	sub	sp, #16
 802835e:	af00      	add	r7, sp, #0
 8028360:	6078      	str	r0, [r7, #4]
 8028362:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8028364:	2300      	movs	r3, #0
 8028366:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802836e:	b2db      	uxtb	r3, r3
 8028370:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8028374:	2b28      	cmp	r3, #40	@ 0x28
 8028376:	d125      	bne.n	80283c4 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	681b      	ldr	r3, [r3, #0]
 802837c:	685a      	ldr	r2, [r3, #4]
 802837e:	687b      	ldr	r3, [r7, #4]
 8028380:	681b      	ldr	r3, [r3, #0]
 8028382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8028386:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8028388:	683b      	ldr	r3, [r7, #0]
 802838a:	f003 0304 	and.w	r3, r3, #4
 802838e:	2b00      	cmp	r3, #0
 8028390:	d101      	bne.n	8028396 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8028392:	2301      	movs	r3, #1
 8028394:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8028396:	683b      	ldr	r3, [r7, #0]
 8028398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802839c:	2b00      	cmp	r3, #0
 802839e:	d103      	bne.n	80283a8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80283a0:	687b      	ldr	r3, [r7, #4]
 80283a2:	68db      	ldr	r3, [r3, #12]
 80283a4:	81bb      	strh	r3, [r7, #12]
 80283a6:	e002      	b.n	80283ae <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80283a8:	687b      	ldr	r3, [r7, #4]
 80283aa:	699b      	ldr	r3, [r3, #24]
 80283ac:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	2200      	movs	r2, #0
 80283b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80283b6:	89ba      	ldrh	r2, [r7, #12]
 80283b8:	7bfb      	ldrb	r3, [r7, #15]
 80283ba:	4619      	mov	r1, r3
 80283bc:	6878      	ldr	r0, [r7, #4]
 80283be:	f7ff f973 	bl	80276a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80283c2:	e008      	b.n	80283d6 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80283c4:	687b      	ldr	r3, [r7, #4]
 80283c6:	681b      	ldr	r3, [r3, #0]
 80283c8:	f06f 0202 	mvn.w	r2, #2
 80283cc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80283ce:	687b      	ldr	r3, [r7, #4]
 80283d0:	2200      	movs	r2, #0
 80283d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80283d6:	bf00      	nop
 80283d8:	3710      	adds	r7, #16
 80283da:	46bd      	mov	sp, r7
 80283dc:	bd80      	pop	{r7, pc}
	...

080283e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80283e0:	b580      	push	{r7, lr}
 80283e2:	b084      	sub	sp, #16
 80283e4:	af00      	add	r7, sp, #0
 80283e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80283e8:	687b      	ldr	r3, [r7, #4]
 80283ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80283ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80283f0:	687b      	ldr	r3, [r7, #4]
 80283f2:	681b      	ldr	r3, [r3, #0]
 80283f4:	685a      	ldr	r2, [r3, #4]
 80283f6:	687b      	ldr	r3, [r7, #4]
 80283f8:	681b      	ldr	r3, [r3, #0]
 80283fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80283fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8028400:	2300      	movs	r3, #0
 8028402:	60bb      	str	r3, [r7, #8]
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	681b      	ldr	r3, [r3, #0]
 8028408:	695b      	ldr	r3, [r3, #20]
 802840a:	60bb      	str	r3, [r7, #8]
 802840c:	687b      	ldr	r3, [r7, #4]
 802840e:	681b      	ldr	r3, [r3, #0]
 8028410:	681a      	ldr	r2, [r3, #0]
 8028412:	687b      	ldr	r3, [r7, #4]
 8028414:	681b      	ldr	r3, [r3, #0]
 8028416:	f042 0201 	orr.w	r2, r2, #1
 802841a:	601a      	str	r2, [r3, #0]
 802841c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802841e:	687b      	ldr	r3, [r7, #4]
 8028420:	681b      	ldr	r3, [r3, #0]
 8028422:	681a      	ldr	r2, [r3, #0]
 8028424:	687b      	ldr	r3, [r7, #4]
 8028426:	681b      	ldr	r3, [r3, #0]
 8028428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802842c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802842e:	687b      	ldr	r3, [r7, #4]
 8028430:	681b      	ldr	r3, [r3, #0]
 8028432:	685b      	ldr	r3, [r3, #4]
 8028434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8028438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802843c:	d172      	bne.n	8028524 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802843e:	7bfb      	ldrb	r3, [r7, #15]
 8028440:	2b22      	cmp	r3, #34	@ 0x22
 8028442:	d002      	beq.n	802844a <I2C_Slave_STOPF+0x6a>
 8028444:	7bfb      	ldrb	r3, [r7, #15]
 8028446:	2b2a      	cmp	r3, #42	@ 0x2a
 8028448:	d135      	bne.n	80284b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802844e:	681b      	ldr	r3, [r3, #0]
 8028450:	685b      	ldr	r3, [r3, #4]
 8028452:	b29a      	uxth	r2, r3
 8028454:	687b      	ldr	r3, [r7, #4]
 8028456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8028458:	687b      	ldr	r3, [r7, #4]
 802845a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802845c:	b29b      	uxth	r3, r3
 802845e:	2b00      	cmp	r3, #0
 8028460:	d005      	beq.n	802846e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8028462:	687b      	ldr	r3, [r7, #4]
 8028464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028466:	f043 0204 	orr.w	r2, r3, #4
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	681b      	ldr	r3, [r3, #0]
 8028472:	685a      	ldr	r2, [r3, #4]
 8028474:	687b      	ldr	r3, [r7, #4]
 8028476:	681b      	ldr	r3, [r3, #0]
 8028478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 802847c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802847e:	687b      	ldr	r3, [r7, #4]
 8028480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028482:	4618      	mov	r0, r3
 8028484:	f7fe f8f0 	bl	8026668 <HAL_DMA_GetState>
 8028488:	4603      	mov	r3, r0
 802848a:	2b01      	cmp	r3, #1
 802848c:	d049      	beq.n	8028522 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028492:	4a69      	ldr	r2, [pc, #420]	@ (8028638 <I2C_Slave_STOPF+0x258>)
 8028494:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802849a:	4618      	mov	r0, r3
 802849c:	f7fd ff38 	bl	8026310 <HAL_DMA_Abort_IT>
 80284a0:	4603      	mov	r3, r0
 80284a2:	2b00      	cmp	r3, #0
 80284a4:	d03d      	beq.n	8028522 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80284a6:	687b      	ldr	r3, [r7, #4]
 80284a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80284aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80284ac:	687a      	ldr	r2, [r7, #4]
 80284ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80284b0:	4610      	mov	r0, r2
 80284b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80284b4:	e035      	b.n	8028522 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80284ba:	681b      	ldr	r3, [r3, #0]
 80284bc:	685b      	ldr	r3, [r3, #4]
 80284be:	b29a      	uxth	r2, r3
 80284c0:	687b      	ldr	r3, [r7, #4]
 80284c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80284c4:	687b      	ldr	r3, [r7, #4]
 80284c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80284c8:	b29b      	uxth	r3, r3
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	d005      	beq.n	80284da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80284ce:	687b      	ldr	r3, [r7, #4]
 80284d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80284d2:	f043 0204 	orr.w	r2, r3, #4
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80284da:	687b      	ldr	r3, [r7, #4]
 80284dc:	681b      	ldr	r3, [r3, #0]
 80284de:	685a      	ldr	r2, [r3, #4]
 80284e0:	687b      	ldr	r3, [r7, #4]
 80284e2:	681b      	ldr	r3, [r3, #0]
 80284e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80284e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80284ea:	687b      	ldr	r3, [r7, #4]
 80284ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80284ee:	4618      	mov	r0, r3
 80284f0:	f7fe f8ba 	bl	8026668 <HAL_DMA_GetState>
 80284f4:	4603      	mov	r3, r0
 80284f6:	2b01      	cmp	r3, #1
 80284f8:	d014      	beq.n	8028524 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80284fa:	687b      	ldr	r3, [r7, #4]
 80284fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80284fe:	4a4e      	ldr	r2, [pc, #312]	@ (8028638 <I2C_Slave_STOPF+0x258>)
 8028500:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8028502:	687b      	ldr	r3, [r7, #4]
 8028504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028506:	4618      	mov	r0, r3
 8028508:	f7fd ff02 	bl	8026310 <HAL_DMA_Abort_IT>
 802850c:	4603      	mov	r3, r0
 802850e:	2b00      	cmp	r3, #0
 8028510:	d008      	beq.n	8028524 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8028512:	687b      	ldr	r3, [r7, #4]
 8028514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028518:	687a      	ldr	r2, [r7, #4]
 802851a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802851c:	4610      	mov	r0, r2
 802851e:	4798      	blx	r3
 8028520:	e000      	b.n	8028524 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8028522:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8028524:	687b      	ldr	r3, [r7, #4]
 8028526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028528:	b29b      	uxth	r3, r3
 802852a:	2b00      	cmp	r3, #0
 802852c:	d03e      	beq.n	80285ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802852e:	687b      	ldr	r3, [r7, #4]
 8028530:	681b      	ldr	r3, [r3, #0]
 8028532:	695b      	ldr	r3, [r3, #20]
 8028534:	f003 0304 	and.w	r3, r3, #4
 8028538:	2b04      	cmp	r3, #4
 802853a:	d112      	bne.n	8028562 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802853c:	687b      	ldr	r3, [r7, #4]
 802853e:	681b      	ldr	r3, [r3, #0]
 8028540:	691a      	ldr	r2, [r3, #16]
 8028542:	687b      	ldr	r3, [r7, #4]
 8028544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028546:	b2d2      	uxtb	r2, r2
 8028548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802854a:	687b      	ldr	r3, [r7, #4]
 802854c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802854e:	1c5a      	adds	r2, r3, #1
 8028550:	687b      	ldr	r3, [r7, #4]
 8028552:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8028554:	687b      	ldr	r3, [r7, #4]
 8028556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8028558:	b29b      	uxth	r3, r3
 802855a:	3b01      	subs	r3, #1
 802855c:	b29a      	uxth	r2, r3
 802855e:	687b      	ldr	r3, [r7, #4]
 8028560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8028562:	687b      	ldr	r3, [r7, #4]
 8028564:	681b      	ldr	r3, [r3, #0]
 8028566:	695b      	ldr	r3, [r3, #20]
 8028568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802856c:	2b40      	cmp	r3, #64	@ 0x40
 802856e:	d112      	bne.n	8028596 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8028570:	687b      	ldr	r3, [r7, #4]
 8028572:	681b      	ldr	r3, [r3, #0]
 8028574:	691a      	ldr	r2, [r3, #16]
 8028576:	687b      	ldr	r3, [r7, #4]
 8028578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802857a:	b2d2      	uxtb	r2, r2
 802857c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802857e:	687b      	ldr	r3, [r7, #4]
 8028580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028582:	1c5a      	adds	r2, r3, #1
 8028584:	687b      	ldr	r3, [r7, #4]
 8028586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8028588:	687b      	ldr	r3, [r7, #4]
 802858a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802858c:	b29b      	uxth	r3, r3
 802858e:	3b01      	subs	r3, #1
 8028590:	b29a      	uxth	r2, r3
 8028592:	687b      	ldr	r3, [r7, #4]
 8028594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8028596:	687b      	ldr	r3, [r7, #4]
 8028598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802859a:	b29b      	uxth	r3, r3
 802859c:	2b00      	cmp	r3, #0
 802859e:	d005      	beq.n	80285ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80285a0:	687b      	ldr	r3, [r7, #4]
 80285a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80285a4:	f043 0204 	orr.w	r2, r3, #4
 80285a8:	687b      	ldr	r3, [r7, #4]
 80285aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80285b0:	2b00      	cmp	r3, #0
 80285b2:	d003      	beq.n	80285bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80285b4:	6878      	ldr	r0, [r7, #4]
 80285b6:	f000 f843 	bl	8028640 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80285ba:	e039      	b.n	8028630 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80285bc:	7bfb      	ldrb	r3, [r7, #15]
 80285be:	2b2a      	cmp	r3, #42	@ 0x2a
 80285c0:	d109      	bne.n	80285d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80285c2:	687b      	ldr	r3, [r7, #4]
 80285c4:	2200      	movs	r2, #0
 80285c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80285c8:	687b      	ldr	r3, [r7, #4]
 80285ca:	2228      	movs	r2, #40	@ 0x28
 80285cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80285d0:	6878      	ldr	r0, [r7, #4]
 80285d2:	f7ff f85f 	bl	8027694 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80285d6:	687b      	ldr	r3, [r7, #4]
 80285d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80285dc:	b2db      	uxtb	r3, r3
 80285de:	2b28      	cmp	r3, #40	@ 0x28
 80285e0:	d111      	bne.n	8028606 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80285e2:	687b      	ldr	r3, [r7, #4]
 80285e4:	4a15      	ldr	r2, [pc, #84]	@ (802863c <I2C_Slave_STOPF+0x25c>)
 80285e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80285e8:	687b      	ldr	r3, [r7, #4]
 80285ea:	2200      	movs	r2, #0
 80285ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80285ee:	687b      	ldr	r3, [r7, #4]
 80285f0:	2220      	movs	r2, #32
 80285f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80285f6:	687b      	ldr	r3, [r7, #4]
 80285f8:	2200      	movs	r2, #0
 80285fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80285fe:	6878      	ldr	r0, [r7, #4]
 8028600:	f7ff f860 	bl	80276c4 <HAL_I2C_ListenCpltCallback>
}
 8028604:	e014      	b.n	8028630 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8028606:	687b      	ldr	r3, [r7, #4]
 8028608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802860a:	2b22      	cmp	r3, #34	@ 0x22
 802860c:	d002      	beq.n	8028614 <I2C_Slave_STOPF+0x234>
 802860e:	7bfb      	ldrb	r3, [r7, #15]
 8028610:	2b22      	cmp	r3, #34	@ 0x22
 8028612:	d10d      	bne.n	8028630 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8028614:	687b      	ldr	r3, [r7, #4]
 8028616:	2200      	movs	r2, #0
 8028618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	2220      	movs	r2, #32
 802861e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8028622:	687b      	ldr	r3, [r7, #4]
 8028624:	2200      	movs	r2, #0
 8028626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 802862a:	6878      	ldr	r0, [r7, #4]
 802862c:	f7ff f832 	bl	8027694 <HAL_I2C_SlaveRxCpltCallback>
}
 8028630:	bf00      	nop
 8028632:	3710      	adds	r7, #16
 8028634:	46bd      	mov	sp, r7
 8028636:	bd80      	pop	{r7, pc}
 8028638:	080288a5 	.word	0x080288a5
 802863c:	ffff0000 	.word	0xffff0000

08028640 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8028640:	b580      	push	{r7, lr}
 8028642:	b084      	sub	sp, #16
 8028644:	af00      	add	r7, sp, #0
 8028646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802864e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8028650:	687b      	ldr	r3, [r7, #4]
 8028652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8028656:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8028658:	7bbb      	ldrb	r3, [r7, #14]
 802865a:	2b10      	cmp	r3, #16
 802865c:	d002      	beq.n	8028664 <I2C_ITError+0x24>
 802865e:	7bbb      	ldrb	r3, [r7, #14]
 8028660:	2b40      	cmp	r3, #64	@ 0x40
 8028662:	d10a      	bne.n	802867a <I2C_ITError+0x3a>
 8028664:	7bfb      	ldrb	r3, [r7, #15]
 8028666:	2b22      	cmp	r3, #34	@ 0x22
 8028668:	d107      	bne.n	802867a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 802866a:	687b      	ldr	r3, [r7, #4]
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	681a      	ldr	r2, [r3, #0]
 8028670:	687b      	ldr	r3, [r7, #4]
 8028672:	681b      	ldr	r3, [r3, #0]
 8028674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8028678:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802867a:	7bfb      	ldrb	r3, [r7, #15]
 802867c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8028680:	2b28      	cmp	r3, #40	@ 0x28
 8028682:	d107      	bne.n	8028694 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8028684:	687b      	ldr	r3, [r7, #4]
 8028686:	2200      	movs	r2, #0
 8028688:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 802868a:	687b      	ldr	r3, [r7, #4]
 802868c:	2228      	movs	r2, #40	@ 0x28
 802868e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8028692:	e015      	b.n	80286c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8028694:	687b      	ldr	r3, [r7, #4]
 8028696:	681b      	ldr	r3, [r3, #0]
 8028698:	685b      	ldr	r3, [r3, #4]
 802869a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802869e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80286a2:	d00a      	beq.n	80286ba <I2C_ITError+0x7a>
 80286a4:	7bfb      	ldrb	r3, [r7, #15]
 80286a6:	2b60      	cmp	r3, #96	@ 0x60
 80286a8:	d007      	beq.n	80286ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80286aa:	687b      	ldr	r3, [r7, #4]
 80286ac:	2220      	movs	r2, #32
 80286ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80286b2:	687b      	ldr	r3, [r7, #4]
 80286b4:	2200      	movs	r2, #0
 80286b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80286ba:	687b      	ldr	r3, [r7, #4]
 80286bc:	2200      	movs	r2, #0
 80286be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	681b      	ldr	r3, [r3, #0]
 80286c4:	685b      	ldr	r3, [r3, #4]
 80286c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80286ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80286ce:	d162      	bne.n	8028796 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	681b      	ldr	r3, [r3, #0]
 80286d4:	685a      	ldr	r2, [r3, #4]
 80286d6:	687b      	ldr	r3, [r7, #4]
 80286d8:	681b      	ldr	r3, [r3, #0]
 80286da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80286de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80286e0:	687b      	ldr	r3, [r7, #4]
 80286e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80286e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80286e8:	b2db      	uxtb	r3, r3
 80286ea:	2b01      	cmp	r3, #1
 80286ec:	d020      	beq.n	8028730 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80286f2:	4a6a      	ldr	r2, [pc, #424]	@ (802889c <I2C_ITError+0x25c>)
 80286f4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80286f6:	687b      	ldr	r3, [r7, #4]
 80286f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80286fa:	4618      	mov	r0, r3
 80286fc:	f7fd fe08 	bl	8026310 <HAL_DMA_Abort_IT>
 8028700:	4603      	mov	r3, r0
 8028702:	2b00      	cmp	r3, #0
 8028704:	f000 8089 	beq.w	802881a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	681b      	ldr	r3, [r3, #0]
 802870c:	681a      	ldr	r2, [r3, #0]
 802870e:	687b      	ldr	r3, [r7, #4]
 8028710:	681b      	ldr	r3, [r3, #0]
 8028712:	f022 0201 	bic.w	r2, r2, #1
 8028716:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8028718:	687b      	ldr	r3, [r7, #4]
 802871a:	2220      	movs	r2, #32
 802871c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8028720:	687b      	ldr	r3, [r7, #4]
 8028722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028726:	687a      	ldr	r2, [r7, #4]
 8028728:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802872a:	4610      	mov	r0, r2
 802872c:	4798      	blx	r3
 802872e:	e074      	b.n	802881a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8028730:	687b      	ldr	r3, [r7, #4]
 8028732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028734:	4a59      	ldr	r2, [pc, #356]	@ (802889c <I2C_ITError+0x25c>)
 8028736:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8028738:	687b      	ldr	r3, [r7, #4]
 802873a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802873c:	4618      	mov	r0, r3
 802873e:	f7fd fde7 	bl	8026310 <HAL_DMA_Abort_IT>
 8028742:	4603      	mov	r3, r0
 8028744:	2b00      	cmp	r3, #0
 8028746:	d068      	beq.n	802881a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8028748:	687b      	ldr	r3, [r7, #4]
 802874a:	681b      	ldr	r3, [r3, #0]
 802874c:	695b      	ldr	r3, [r3, #20]
 802874e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8028752:	2b40      	cmp	r3, #64	@ 0x40
 8028754:	d10b      	bne.n	802876e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8028756:	687b      	ldr	r3, [r7, #4]
 8028758:	681b      	ldr	r3, [r3, #0]
 802875a:	691a      	ldr	r2, [r3, #16]
 802875c:	687b      	ldr	r3, [r7, #4]
 802875e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028760:	b2d2      	uxtb	r2, r2
 8028762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8028764:	687b      	ldr	r3, [r7, #4]
 8028766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028768:	1c5a      	adds	r2, r3, #1
 802876a:	687b      	ldr	r3, [r7, #4]
 802876c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 802876e:	687b      	ldr	r3, [r7, #4]
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	681a      	ldr	r2, [r3, #0]
 8028774:	687b      	ldr	r3, [r7, #4]
 8028776:	681b      	ldr	r3, [r3, #0]
 8028778:	f022 0201 	bic.w	r2, r2, #1
 802877c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 802877e:	687b      	ldr	r3, [r7, #4]
 8028780:	2220      	movs	r2, #32
 8028782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8028786:	687b      	ldr	r3, [r7, #4]
 8028788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802878a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802878c:	687a      	ldr	r2, [r7, #4]
 802878e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8028790:	4610      	mov	r0, r2
 8028792:	4798      	blx	r3
 8028794:	e041      	b.n	802881a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8028796:	687b      	ldr	r3, [r7, #4]
 8028798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802879c:	b2db      	uxtb	r3, r3
 802879e:	2b60      	cmp	r3, #96	@ 0x60
 80287a0:	d125      	bne.n	80287ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80287a2:	687b      	ldr	r3, [r7, #4]
 80287a4:	2220      	movs	r2, #32
 80287a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80287aa:	687b      	ldr	r3, [r7, #4]
 80287ac:	2200      	movs	r2, #0
 80287ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80287b0:	687b      	ldr	r3, [r7, #4]
 80287b2:	681b      	ldr	r3, [r3, #0]
 80287b4:	695b      	ldr	r3, [r3, #20]
 80287b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80287ba:	2b40      	cmp	r3, #64	@ 0x40
 80287bc:	d10b      	bne.n	80287d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80287be:	687b      	ldr	r3, [r7, #4]
 80287c0:	681b      	ldr	r3, [r3, #0]
 80287c2:	691a      	ldr	r2, [r3, #16]
 80287c4:	687b      	ldr	r3, [r7, #4]
 80287c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80287c8:	b2d2      	uxtb	r2, r2
 80287ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80287d0:	1c5a      	adds	r2, r3, #1
 80287d2:	687b      	ldr	r3, [r7, #4]
 80287d4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80287d6:	687b      	ldr	r3, [r7, #4]
 80287d8:	681b      	ldr	r3, [r3, #0]
 80287da:	681a      	ldr	r2, [r3, #0]
 80287dc:	687b      	ldr	r3, [r7, #4]
 80287de:	681b      	ldr	r3, [r3, #0]
 80287e0:	f022 0201 	bic.w	r2, r2, #1
 80287e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80287e6:	6878      	ldr	r0, [r7, #4]
 80287e8:	f7fe ff80 	bl	80276ec <HAL_I2C_AbortCpltCallback>
 80287ec:	e015      	b.n	802881a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80287ee:	687b      	ldr	r3, [r7, #4]
 80287f0:	681b      	ldr	r3, [r3, #0]
 80287f2:	695b      	ldr	r3, [r3, #20]
 80287f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80287f8:	2b40      	cmp	r3, #64	@ 0x40
 80287fa:	d10b      	bne.n	8028814 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	681b      	ldr	r3, [r3, #0]
 8028800:	691a      	ldr	r2, [r3, #16]
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028806:	b2d2      	uxtb	r2, r2
 8028808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802880a:	687b      	ldr	r3, [r7, #4]
 802880c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802880e:	1c5a      	adds	r2, r3, #1
 8028810:	687b      	ldr	r3, [r7, #4]
 8028812:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8028814:	6878      	ldr	r0, [r7, #4]
 8028816:	f7fe ff5f 	bl	80276d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 802881a:	687b      	ldr	r3, [r7, #4]
 802881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802881e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8028820:	68bb      	ldr	r3, [r7, #8]
 8028822:	f003 0301 	and.w	r3, r3, #1
 8028826:	2b00      	cmp	r3, #0
 8028828:	d10e      	bne.n	8028848 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 802882a:	68bb      	ldr	r3, [r7, #8]
 802882c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8028830:	2b00      	cmp	r3, #0
 8028832:	d109      	bne.n	8028848 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8028834:	68bb      	ldr	r3, [r7, #8]
 8028836:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 802883a:	2b00      	cmp	r3, #0
 802883c:	d104      	bne.n	8028848 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 802883e:	68bb      	ldr	r3, [r7, #8]
 8028840:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8028844:	2b00      	cmp	r3, #0
 8028846:	d007      	beq.n	8028858 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8028848:	687b      	ldr	r3, [r7, #4]
 802884a:	681b      	ldr	r3, [r3, #0]
 802884c:	685a      	ldr	r2, [r3, #4]
 802884e:	687b      	ldr	r3, [r7, #4]
 8028850:	681b      	ldr	r3, [r3, #0]
 8028852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8028856:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8028858:	687b      	ldr	r3, [r7, #4]
 802885a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802885e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8028860:	687b      	ldr	r3, [r7, #4]
 8028862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028864:	f003 0304 	and.w	r3, r3, #4
 8028868:	2b04      	cmp	r3, #4
 802886a:	d113      	bne.n	8028894 <I2C_ITError+0x254>
 802886c:	7bfb      	ldrb	r3, [r7, #15]
 802886e:	2b28      	cmp	r3, #40	@ 0x28
 8028870:	d110      	bne.n	8028894 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8028872:	687b      	ldr	r3, [r7, #4]
 8028874:	4a0a      	ldr	r2, [pc, #40]	@ (80288a0 <I2C_ITError+0x260>)
 8028876:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8028878:	687b      	ldr	r3, [r7, #4]
 802887a:	2200      	movs	r2, #0
 802887c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 802887e:	687b      	ldr	r3, [r7, #4]
 8028880:	2220      	movs	r2, #32
 8028882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8028886:	687b      	ldr	r3, [r7, #4]
 8028888:	2200      	movs	r2, #0
 802888a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 802888e:	6878      	ldr	r0, [r7, #4]
 8028890:	f7fe ff18 	bl	80276c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8028894:	bf00      	nop
 8028896:	3710      	adds	r7, #16
 8028898:	46bd      	mov	sp, r7
 802889a:	bd80      	pop	{r7, pc}
 802889c:	080288a5 	.word	0x080288a5
 80288a0:	ffff0000 	.word	0xffff0000

080288a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80288a4:	b580      	push	{r7, lr}
 80288a6:	b086      	sub	sp, #24
 80288a8:	af00      	add	r7, sp, #0
 80288aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80288ac:	2300      	movs	r3, #0
 80288ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80288b0:	687b      	ldr	r3, [r7, #4]
 80288b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80288b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80288b6:	697b      	ldr	r3, [r7, #20]
 80288b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80288bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80288be:	4b4b      	ldr	r3, [pc, #300]	@ (80289ec <I2C_DMAAbort+0x148>)
 80288c0:	681b      	ldr	r3, [r3, #0]
 80288c2:	08db      	lsrs	r3, r3, #3
 80288c4:	4a4a      	ldr	r2, [pc, #296]	@ (80289f0 <I2C_DMAAbort+0x14c>)
 80288c6:	fba2 2303 	umull	r2, r3, r2, r3
 80288ca:	0a1a      	lsrs	r2, r3, #8
 80288cc:	4613      	mov	r3, r2
 80288ce:	009b      	lsls	r3, r3, #2
 80288d0:	4413      	add	r3, r2
 80288d2:	00da      	lsls	r2, r3, #3
 80288d4:	1ad3      	subs	r3, r2, r3
 80288d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80288d8:	68fb      	ldr	r3, [r7, #12]
 80288da:	2b00      	cmp	r3, #0
 80288dc:	d106      	bne.n	80288ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80288de:	697b      	ldr	r3, [r7, #20]
 80288e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80288e2:	f043 0220 	orr.w	r2, r3, #32
 80288e6:	697b      	ldr	r3, [r7, #20]
 80288e8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80288ea:	e00a      	b.n	8028902 <I2C_DMAAbort+0x5e>
    }
    count--;
 80288ec:	68fb      	ldr	r3, [r7, #12]
 80288ee:	3b01      	subs	r3, #1
 80288f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80288f2:	697b      	ldr	r3, [r7, #20]
 80288f4:	681b      	ldr	r3, [r3, #0]
 80288f6:	681b      	ldr	r3, [r3, #0]
 80288f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80288fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028900:	d0ea      	beq.n	80288d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8028902:	697b      	ldr	r3, [r7, #20]
 8028904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028906:	2b00      	cmp	r3, #0
 8028908:	d003      	beq.n	8028912 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 802890a:	697b      	ldr	r3, [r7, #20]
 802890c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802890e:	2200      	movs	r2, #0
 8028910:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8028912:	697b      	ldr	r3, [r7, #20]
 8028914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028916:	2b00      	cmp	r3, #0
 8028918:	d003      	beq.n	8028922 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 802891a:	697b      	ldr	r3, [r7, #20]
 802891c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802891e:	2200      	movs	r2, #0
 8028920:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8028922:	697b      	ldr	r3, [r7, #20]
 8028924:	681b      	ldr	r3, [r3, #0]
 8028926:	681a      	ldr	r2, [r3, #0]
 8028928:	697b      	ldr	r3, [r7, #20]
 802892a:	681b      	ldr	r3, [r3, #0]
 802892c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8028930:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8028932:	697b      	ldr	r3, [r7, #20]
 8028934:	2200      	movs	r2, #0
 8028936:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8028938:	697b      	ldr	r3, [r7, #20]
 802893a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802893c:	2b00      	cmp	r3, #0
 802893e:	d003      	beq.n	8028948 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8028940:	697b      	ldr	r3, [r7, #20]
 8028942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028944:	2200      	movs	r2, #0
 8028946:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8028948:	697b      	ldr	r3, [r7, #20]
 802894a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802894c:	2b00      	cmp	r3, #0
 802894e:	d003      	beq.n	8028958 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8028950:	697b      	ldr	r3, [r7, #20]
 8028952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028954:	2200      	movs	r2, #0
 8028956:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8028958:	697b      	ldr	r3, [r7, #20]
 802895a:	681b      	ldr	r3, [r3, #0]
 802895c:	681a      	ldr	r2, [r3, #0]
 802895e:	697b      	ldr	r3, [r7, #20]
 8028960:	681b      	ldr	r3, [r3, #0]
 8028962:	f022 0201 	bic.w	r2, r2, #1
 8028966:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8028968:	697b      	ldr	r3, [r7, #20]
 802896a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802896e:	b2db      	uxtb	r3, r3
 8028970:	2b60      	cmp	r3, #96	@ 0x60
 8028972:	d10e      	bne.n	8028992 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8028974:	697b      	ldr	r3, [r7, #20]
 8028976:	2220      	movs	r2, #32
 8028978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 802897c:	697b      	ldr	r3, [r7, #20]
 802897e:	2200      	movs	r2, #0
 8028980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8028984:	697b      	ldr	r3, [r7, #20]
 8028986:	2200      	movs	r2, #0
 8028988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802898a:	6978      	ldr	r0, [r7, #20]
 802898c:	f7fe feae 	bl	80276ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8028990:	e027      	b.n	80289e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8028992:	7cfb      	ldrb	r3, [r7, #19]
 8028994:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8028998:	2b28      	cmp	r3, #40	@ 0x28
 802899a:	d117      	bne.n	80289cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 802899c:	697b      	ldr	r3, [r7, #20]
 802899e:	681b      	ldr	r3, [r3, #0]
 80289a0:	681a      	ldr	r2, [r3, #0]
 80289a2:	697b      	ldr	r3, [r7, #20]
 80289a4:	681b      	ldr	r3, [r3, #0]
 80289a6:	f042 0201 	orr.w	r2, r2, #1
 80289aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80289ac:	697b      	ldr	r3, [r7, #20]
 80289ae:	681b      	ldr	r3, [r3, #0]
 80289b0:	681a      	ldr	r2, [r3, #0]
 80289b2:	697b      	ldr	r3, [r7, #20]
 80289b4:	681b      	ldr	r3, [r3, #0]
 80289b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80289ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80289bc:	697b      	ldr	r3, [r7, #20]
 80289be:	2200      	movs	r2, #0
 80289c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80289c2:	697b      	ldr	r3, [r7, #20]
 80289c4:	2228      	movs	r2, #40	@ 0x28
 80289c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80289ca:	e007      	b.n	80289dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80289cc:	697b      	ldr	r3, [r7, #20]
 80289ce:	2220      	movs	r2, #32
 80289d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80289d4:	697b      	ldr	r3, [r7, #20]
 80289d6:	2200      	movs	r2, #0
 80289d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80289dc:	6978      	ldr	r0, [r7, #20]
 80289de:	f7fe fe7b 	bl	80276d8 <HAL_I2C_ErrorCallback>
}
 80289e2:	bf00      	nop
 80289e4:	3718      	adds	r7, #24
 80289e6:	46bd      	mov	sp, r7
 80289e8:	bd80      	pop	{r7, pc}
 80289ea:	bf00      	nop
 80289ec:	20001028 	.word	0x20001028
 80289f0:	14f8b589 	.word	0x14f8b589

080289f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80289f4:	b480      	push	{r7}
 80289f6:	b085      	sub	sp, #20
 80289f8:	af00      	add	r7, sp, #0
 80289fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80289fc:	2300      	movs	r3, #0
 80289fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8028a00:	4b13      	ldr	r3, [pc, #76]	@ (8028a50 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8028a02:	681b      	ldr	r3, [r3, #0]
 8028a04:	08db      	lsrs	r3, r3, #3
 8028a06:	4a13      	ldr	r2, [pc, #76]	@ (8028a54 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8028a08:	fba2 2303 	umull	r2, r3, r2, r3
 8028a0c:	0a1a      	lsrs	r2, r3, #8
 8028a0e:	4613      	mov	r3, r2
 8028a10:	009b      	lsls	r3, r3, #2
 8028a12:	4413      	add	r3, r2
 8028a14:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8028a16:	68fb      	ldr	r3, [r7, #12]
 8028a18:	3b01      	subs	r3, #1
 8028a1a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8028a1c:	68fb      	ldr	r3, [r7, #12]
 8028a1e:	2b00      	cmp	r3, #0
 8028a20:	d107      	bne.n	8028a32 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8028a22:	687b      	ldr	r3, [r7, #4]
 8028a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028a26:	f043 0220 	orr.w	r2, r3, #32
 8028a2a:	687b      	ldr	r3, [r7, #4]
 8028a2c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8028a2e:	2301      	movs	r3, #1
 8028a30:	e008      	b.n	8028a44 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8028a32:	687b      	ldr	r3, [r7, #4]
 8028a34:	681b      	ldr	r3, [r3, #0]
 8028a36:	681b      	ldr	r3, [r3, #0]
 8028a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8028a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028a40:	d0e9      	beq.n	8028a16 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8028a42:	2300      	movs	r3, #0
}
 8028a44:	4618      	mov	r0, r3
 8028a46:	3714      	adds	r7, #20
 8028a48:	46bd      	mov	sp, r7
 8028a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a4e:	4770      	bx	lr
 8028a50:	20001028 	.word	0x20001028
 8028a54:	14f8b589 	.word	0x14f8b589

08028a58 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8028a58:	b480      	push	{r7}
 8028a5a:	b083      	sub	sp, #12
 8028a5c:	af00      	add	r7, sp, #0
 8028a5e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8028a60:	687b      	ldr	r3, [r7, #4]
 8028a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8028a68:	d103      	bne.n	8028a72 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8028a6a:	687b      	ldr	r3, [r7, #4]
 8028a6c:	2201      	movs	r2, #1
 8028a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8028a70:	e007      	b.n	8028a82 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a76:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8028a7a:	d102      	bne.n	8028a82 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8028a7c:	687b      	ldr	r3, [r7, #4]
 8028a7e:	2208      	movs	r2, #8
 8028a80:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8028a82:	bf00      	nop
 8028a84:	370c      	adds	r7, #12
 8028a86:	46bd      	mov	sp, r7
 8028a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a8c:	4770      	bx	lr
	...

08028a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028a90:	b580      	push	{r7, lr}
 8028a92:	b084      	sub	sp, #16
 8028a94:	af00      	add	r7, sp, #0
 8028a96:	6078      	str	r0, [r7, #4]
 8028a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d101      	bne.n	8028aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028aa0:	2301      	movs	r3, #1
 8028aa2:	e0cc      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028aa4:	4b68      	ldr	r3, [pc, #416]	@ (8028c48 <HAL_RCC_ClockConfig+0x1b8>)
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	f003 030f 	and.w	r3, r3, #15
 8028aac:	683a      	ldr	r2, [r7, #0]
 8028aae:	429a      	cmp	r2, r3
 8028ab0:	d90c      	bls.n	8028acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028ab2:	4b65      	ldr	r3, [pc, #404]	@ (8028c48 <HAL_RCC_ClockConfig+0x1b8>)
 8028ab4:	683a      	ldr	r2, [r7, #0]
 8028ab6:	b2d2      	uxtb	r2, r2
 8028ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028aba:	4b63      	ldr	r3, [pc, #396]	@ (8028c48 <HAL_RCC_ClockConfig+0x1b8>)
 8028abc:	681b      	ldr	r3, [r3, #0]
 8028abe:	f003 030f 	and.w	r3, r3, #15
 8028ac2:	683a      	ldr	r2, [r7, #0]
 8028ac4:	429a      	cmp	r2, r3
 8028ac6:	d001      	beq.n	8028acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8028ac8:	2301      	movs	r3, #1
 8028aca:	e0b8      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	681b      	ldr	r3, [r3, #0]
 8028ad0:	f003 0302 	and.w	r3, r3, #2
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	d020      	beq.n	8028b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028ad8:	687b      	ldr	r3, [r7, #4]
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	f003 0304 	and.w	r3, r3, #4
 8028ae0:	2b00      	cmp	r3, #0
 8028ae2:	d005      	beq.n	8028af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8028ae4:	4b59      	ldr	r3, [pc, #356]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028ae6:	689b      	ldr	r3, [r3, #8]
 8028ae8:	4a58      	ldr	r2, [pc, #352]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028aea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8028aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028af0:	687b      	ldr	r3, [r7, #4]
 8028af2:	681b      	ldr	r3, [r3, #0]
 8028af4:	f003 0308 	and.w	r3, r3, #8
 8028af8:	2b00      	cmp	r3, #0
 8028afa:	d005      	beq.n	8028b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8028afc:	4b53      	ldr	r3, [pc, #332]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028afe:	689b      	ldr	r3, [r3, #8]
 8028b00:	4a52      	ldr	r2, [pc, #328]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8028b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028b08:	4b50      	ldr	r3, [pc, #320]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b0a:	689b      	ldr	r3, [r3, #8]
 8028b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8028b10:	687b      	ldr	r3, [r7, #4]
 8028b12:	689b      	ldr	r3, [r3, #8]
 8028b14:	494d      	ldr	r1, [pc, #308]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b16:	4313      	orrs	r3, r2
 8028b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8028b1a:	687b      	ldr	r3, [r7, #4]
 8028b1c:	681b      	ldr	r3, [r3, #0]
 8028b1e:	f003 0301 	and.w	r3, r3, #1
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	d044      	beq.n	8028bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8028b26:	687b      	ldr	r3, [r7, #4]
 8028b28:	685b      	ldr	r3, [r3, #4]
 8028b2a:	2b01      	cmp	r3, #1
 8028b2c:	d107      	bne.n	8028b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028b2e:	4b47      	ldr	r3, [pc, #284]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b30:	681b      	ldr	r3, [r3, #0]
 8028b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8028b36:	2b00      	cmp	r3, #0
 8028b38:	d119      	bne.n	8028b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028b3a:	2301      	movs	r3, #1
 8028b3c:	e07f      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028b3e:	687b      	ldr	r3, [r7, #4]
 8028b40:	685b      	ldr	r3, [r3, #4]
 8028b42:	2b02      	cmp	r3, #2
 8028b44:	d003      	beq.n	8028b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8028b46:	687b      	ldr	r3, [r7, #4]
 8028b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028b4a:	2b03      	cmp	r3, #3
 8028b4c:	d107      	bne.n	8028b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b50:	681b      	ldr	r3, [r3, #0]
 8028b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8028b56:	2b00      	cmp	r3, #0
 8028b58:	d109      	bne.n	8028b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028b5a:	2301      	movs	r3, #1
 8028b5c:	e06f      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b60:	681b      	ldr	r3, [r3, #0]
 8028b62:	f003 0302 	and.w	r3, r3, #2
 8028b66:	2b00      	cmp	r3, #0
 8028b68:	d101      	bne.n	8028b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028b6a:	2301      	movs	r3, #1
 8028b6c:	e067      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028b6e:	4b37      	ldr	r3, [pc, #220]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b70:	689b      	ldr	r3, [r3, #8]
 8028b72:	f023 0203 	bic.w	r2, r3, #3
 8028b76:	687b      	ldr	r3, [r7, #4]
 8028b78:	685b      	ldr	r3, [r3, #4]
 8028b7a:	4934      	ldr	r1, [pc, #208]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028b7c:	4313      	orrs	r3, r2
 8028b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028b80:	f7fc fbe4 	bl	802534c <HAL_GetTick>
 8028b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028b86:	e00a      	b.n	8028b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028b88:	f7fc fbe0 	bl	802534c <HAL_GetTick>
 8028b8c:	4602      	mov	r2, r0
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	1ad3      	subs	r3, r2, r3
 8028b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8028b96:	4293      	cmp	r3, r2
 8028b98:	d901      	bls.n	8028b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8028b9a:	2303      	movs	r3, #3
 8028b9c:	e04f      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028ba0:	689b      	ldr	r3, [r3, #8]
 8028ba2:	f003 020c 	and.w	r2, r3, #12
 8028ba6:	687b      	ldr	r3, [r7, #4]
 8028ba8:	685b      	ldr	r3, [r3, #4]
 8028baa:	009b      	lsls	r3, r3, #2
 8028bac:	429a      	cmp	r2, r3
 8028bae:	d1eb      	bne.n	8028b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028bb0:	4b25      	ldr	r3, [pc, #148]	@ (8028c48 <HAL_RCC_ClockConfig+0x1b8>)
 8028bb2:	681b      	ldr	r3, [r3, #0]
 8028bb4:	f003 030f 	and.w	r3, r3, #15
 8028bb8:	683a      	ldr	r2, [r7, #0]
 8028bba:	429a      	cmp	r2, r3
 8028bbc:	d20c      	bcs.n	8028bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028bbe:	4b22      	ldr	r3, [pc, #136]	@ (8028c48 <HAL_RCC_ClockConfig+0x1b8>)
 8028bc0:	683a      	ldr	r2, [r7, #0]
 8028bc2:	b2d2      	uxtb	r2, r2
 8028bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028bc6:	4b20      	ldr	r3, [pc, #128]	@ (8028c48 <HAL_RCC_ClockConfig+0x1b8>)
 8028bc8:	681b      	ldr	r3, [r3, #0]
 8028bca:	f003 030f 	and.w	r3, r3, #15
 8028bce:	683a      	ldr	r2, [r7, #0]
 8028bd0:	429a      	cmp	r2, r3
 8028bd2:	d001      	beq.n	8028bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8028bd4:	2301      	movs	r3, #1
 8028bd6:	e032      	b.n	8028c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028bd8:	687b      	ldr	r3, [r7, #4]
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	f003 0304 	and.w	r3, r3, #4
 8028be0:	2b00      	cmp	r3, #0
 8028be2:	d008      	beq.n	8028bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028be4:	4b19      	ldr	r3, [pc, #100]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028be6:	689b      	ldr	r3, [r3, #8]
 8028be8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8028bec:	687b      	ldr	r3, [r7, #4]
 8028bee:	68db      	ldr	r3, [r3, #12]
 8028bf0:	4916      	ldr	r1, [pc, #88]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028bf2:	4313      	orrs	r3, r2
 8028bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	681b      	ldr	r3, [r3, #0]
 8028bfa:	f003 0308 	and.w	r3, r3, #8
 8028bfe:	2b00      	cmp	r3, #0
 8028c00:	d009      	beq.n	8028c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028c02:	4b12      	ldr	r3, [pc, #72]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028c04:	689b      	ldr	r3, [r3, #8]
 8028c06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8028c0a:	687b      	ldr	r3, [r7, #4]
 8028c0c:	691b      	ldr	r3, [r3, #16]
 8028c0e:	00db      	lsls	r3, r3, #3
 8028c10:	490e      	ldr	r1, [pc, #56]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028c12:	4313      	orrs	r3, r2
 8028c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028c16:	f000 f855 	bl	8028cc4 <HAL_RCC_GetSysClockFreq>
 8028c1a:	4602      	mov	r2, r0
 8028c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8028c4c <HAL_RCC_ClockConfig+0x1bc>)
 8028c1e:	689b      	ldr	r3, [r3, #8]
 8028c20:	091b      	lsrs	r3, r3, #4
 8028c22:	f003 030f 	and.w	r3, r3, #15
 8028c26:	490a      	ldr	r1, [pc, #40]	@ (8028c50 <HAL_RCC_ClockConfig+0x1c0>)
 8028c28:	5ccb      	ldrb	r3, [r1, r3]
 8028c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8028c2e:	4a09      	ldr	r2, [pc, #36]	@ (8028c54 <HAL_RCC_ClockConfig+0x1c4>)
 8028c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8028c32:	4b09      	ldr	r3, [pc, #36]	@ (8028c58 <HAL_RCC_ClockConfig+0x1c8>)
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	4618      	mov	r0, r3
 8028c38:	f7fc fb44 	bl	80252c4 <HAL_InitTick>

  return HAL_OK;
 8028c3c:	2300      	movs	r3, #0
}
 8028c3e:	4618      	mov	r0, r3
 8028c40:	3710      	adds	r7, #16
 8028c42:	46bd      	mov	sp, r7
 8028c44:	bd80      	pop	{r7, pc}
 8028c46:	bf00      	nop
 8028c48:	40023c00 	.word	0x40023c00
 8028c4c:	40023800 	.word	0x40023800
 8028c50:	0803fa58 	.word	0x0803fa58
 8028c54:	20001028 	.word	0x20001028
 8028c58:	200015a0 	.word	0x200015a0

08028c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028c5c:	b480      	push	{r7}
 8028c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8028c60:	4b03      	ldr	r3, [pc, #12]	@ (8028c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8028c62:	681b      	ldr	r3, [r3, #0]
}
 8028c64:	4618      	mov	r0, r3
 8028c66:	46bd      	mov	sp, r7
 8028c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c6c:	4770      	bx	lr
 8028c6e:	bf00      	nop
 8028c70:	20001028 	.word	0x20001028

08028c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028c74:	b580      	push	{r7, lr}
 8028c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8028c78:	f7ff fff0 	bl	8028c5c <HAL_RCC_GetHCLKFreq>
 8028c7c:	4602      	mov	r2, r0
 8028c7e:	4b05      	ldr	r3, [pc, #20]	@ (8028c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8028c80:	689b      	ldr	r3, [r3, #8]
 8028c82:	0a9b      	lsrs	r3, r3, #10
 8028c84:	f003 0307 	and.w	r3, r3, #7
 8028c88:	4903      	ldr	r1, [pc, #12]	@ (8028c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028c8a:	5ccb      	ldrb	r3, [r1, r3]
 8028c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8028c90:	4618      	mov	r0, r3
 8028c92:	bd80      	pop	{r7, pc}
 8028c94:	40023800 	.word	0x40023800
 8028c98:	0803fa68 	.word	0x0803fa68

08028c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8028c9c:	b580      	push	{r7, lr}
 8028c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8028ca0:	f7ff ffdc 	bl	8028c5c <HAL_RCC_GetHCLKFreq>
 8028ca4:	4602      	mov	r2, r0
 8028ca6:	4b05      	ldr	r3, [pc, #20]	@ (8028cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8028ca8:	689b      	ldr	r3, [r3, #8]
 8028caa:	0b5b      	lsrs	r3, r3, #13
 8028cac:	f003 0307 	and.w	r3, r3, #7
 8028cb0:	4903      	ldr	r1, [pc, #12]	@ (8028cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8028cb2:	5ccb      	ldrb	r3, [r1, r3]
 8028cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8028cb8:	4618      	mov	r0, r3
 8028cba:	bd80      	pop	{r7, pc}
 8028cbc:	40023800 	.word	0x40023800
 8028cc0:	0803fa68 	.word	0x0803fa68

08028cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028cc8:	b0ae      	sub	sp, #184	@ 0xb8
 8028cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8028ccc:	2300      	movs	r3, #0
 8028cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8028cd2:	2300      	movs	r3, #0
 8028cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8028cd8:	2300      	movs	r3, #0
 8028cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8028cde:	2300      	movs	r3, #0
 8028ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8028ce4:	2300      	movs	r3, #0
 8028ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028cea:	4bcb      	ldr	r3, [pc, #812]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028cec:	689b      	ldr	r3, [r3, #8]
 8028cee:	f003 030c 	and.w	r3, r3, #12
 8028cf2:	2b0c      	cmp	r3, #12
 8028cf4:	f200 8206 	bhi.w	8029104 <HAL_RCC_GetSysClockFreq+0x440>
 8028cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8028d00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8028cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028cfe:	bf00      	nop
 8028d00:	08028d35 	.word	0x08028d35
 8028d04:	08029105 	.word	0x08029105
 8028d08:	08029105 	.word	0x08029105
 8028d0c:	08029105 	.word	0x08029105
 8028d10:	08028d3d 	.word	0x08028d3d
 8028d14:	08029105 	.word	0x08029105
 8028d18:	08029105 	.word	0x08029105
 8028d1c:	08029105 	.word	0x08029105
 8028d20:	08028d45 	.word	0x08028d45
 8028d24:	08029105 	.word	0x08029105
 8028d28:	08029105 	.word	0x08029105
 8028d2c:	08029105 	.word	0x08029105
 8028d30:	08028f35 	.word	0x08028f35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028d34:	4bb9      	ldr	r3, [pc, #740]	@ (802901c <HAL_RCC_GetSysClockFreq+0x358>)
 8028d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8028d3a:	e1e7      	b.n	802910c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8028d3c:	4bb8      	ldr	r3, [pc, #736]	@ (8029020 <HAL_RCC_GetSysClockFreq+0x35c>)
 8028d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8028d42:	e1e3      	b.n	802910c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028d44:	4bb4      	ldr	r3, [pc, #720]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028d46:	685b      	ldr	r3, [r3, #4]
 8028d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8028d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028d50:	4bb1      	ldr	r3, [pc, #708]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028d52:	685b      	ldr	r3, [r3, #4]
 8028d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8028d58:	2b00      	cmp	r3, #0
 8028d5a:	d071      	beq.n	8028e40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028d5c:	4bae      	ldr	r3, [pc, #696]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028d5e:	685b      	ldr	r3, [r3, #4]
 8028d60:	099b      	lsrs	r3, r3, #6
 8028d62:	2200      	movs	r2, #0
 8028d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8028d68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8028d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8028d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8028d78:	2300      	movs	r3, #0
 8028d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8028d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8028d82:	4622      	mov	r2, r4
 8028d84:	462b      	mov	r3, r5
 8028d86:	f04f 0000 	mov.w	r0, #0
 8028d8a:	f04f 0100 	mov.w	r1, #0
 8028d8e:	0159      	lsls	r1, r3, #5
 8028d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8028d94:	0150      	lsls	r0, r2, #5
 8028d96:	4602      	mov	r2, r0
 8028d98:	460b      	mov	r3, r1
 8028d9a:	4621      	mov	r1, r4
 8028d9c:	1a51      	subs	r1, r2, r1
 8028d9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8028da0:	4629      	mov	r1, r5
 8028da2:	eb63 0301 	sbc.w	r3, r3, r1
 8028da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8028da8:	f04f 0200 	mov.w	r2, #0
 8028dac:	f04f 0300 	mov.w	r3, #0
 8028db0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8028db4:	4649      	mov	r1, r9
 8028db6:	018b      	lsls	r3, r1, #6
 8028db8:	4641      	mov	r1, r8
 8028dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8028dbe:	4641      	mov	r1, r8
 8028dc0:	018a      	lsls	r2, r1, #6
 8028dc2:	4641      	mov	r1, r8
 8028dc4:	1a51      	subs	r1, r2, r1
 8028dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8028dc8:	4649      	mov	r1, r9
 8028dca:	eb63 0301 	sbc.w	r3, r3, r1
 8028dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8028dd0:	f04f 0200 	mov.w	r2, #0
 8028dd4:	f04f 0300 	mov.w	r3, #0
 8028dd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8028ddc:	4649      	mov	r1, r9
 8028dde:	00cb      	lsls	r3, r1, #3
 8028de0:	4641      	mov	r1, r8
 8028de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8028de6:	4641      	mov	r1, r8
 8028de8:	00ca      	lsls	r2, r1, #3
 8028dea:	4610      	mov	r0, r2
 8028dec:	4619      	mov	r1, r3
 8028dee:	4603      	mov	r3, r0
 8028df0:	4622      	mov	r2, r4
 8028df2:	189b      	adds	r3, r3, r2
 8028df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8028df6:	462b      	mov	r3, r5
 8028df8:	460a      	mov	r2, r1
 8028dfa:	eb42 0303 	adc.w	r3, r2, r3
 8028dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8028e00:	f04f 0200 	mov.w	r2, #0
 8028e04:	f04f 0300 	mov.w	r3, #0
 8028e08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8028e0c:	4629      	mov	r1, r5
 8028e0e:	024b      	lsls	r3, r1, #9
 8028e10:	4621      	mov	r1, r4
 8028e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8028e16:	4621      	mov	r1, r4
 8028e18:	024a      	lsls	r2, r1, #9
 8028e1a:	4610      	mov	r0, r2
 8028e1c:	4619      	mov	r1, r3
 8028e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8028e22:	2200      	movs	r2, #0
 8028e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8028e28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8028e2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8028e30:	f7f7 feea 	bl	8020c08 <__aeabi_uldivmod>
 8028e34:	4602      	mov	r2, r0
 8028e36:	460b      	mov	r3, r1
 8028e38:	4613      	mov	r3, r2
 8028e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8028e3e:	e067      	b.n	8028f10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028e40:	4b75      	ldr	r3, [pc, #468]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028e42:	685b      	ldr	r3, [r3, #4]
 8028e44:	099b      	lsrs	r3, r3, #6
 8028e46:	2200      	movs	r2, #0
 8028e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8028e4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8028e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8028e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8028e5a:	2300      	movs	r3, #0
 8028e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8028e5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8028e62:	4622      	mov	r2, r4
 8028e64:	462b      	mov	r3, r5
 8028e66:	f04f 0000 	mov.w	r0, #0
 8028e6a:	f04f 0100 	mov.w	r1, #0
 8028e6e:	0159      	lsls	r1, r3, #5
 8028e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8028e74:	0150      	lsls	r0, r2, #5
 8028e76:	4602      	mov	r2, r0
 8028e78:	460b      	mov	r3, r1
 8028e7a:	4621      	mov	r1, r4
 8028e7c:	1a51      	subs	r1, r2, r1
 8028e7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8028e80:	4629      	mov	r1, r5
 8028e82:	eb63 0301 	sbc.w	r3, r3, r1
 8028e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8028e88:	f04f 0200 	mov.w	r2, #0
 8028e8c:	f04f 0300 	mov.w	r3, #0
 8028e90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8028e94:	4649      	mov	r1, r9
 8028e96:	018b      	lsls	r3, r1, #6
 8028e98:	4641      	mov	r1, r8
 8028e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8028e9e:	4641      	mov	r1, r8
 8028ea0:	018a      	lsls	r2, r1, #6
 8028ea2:	4641      	mov	r1, r8
 8028ea4:	ebb2 0a01 	subs.w	sl, r2, r1
 8028ea8:	4649      	mov	r1, r9
 8028eaa:	eb63 0b01 	sbc.w	fp, r3, r1
 8028eae:	f04f 0200 	mov.w	r2, #0
 8028eb2:	f04f 0300 	mov.w	r3, #0
 8028eb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8028eba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8028ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8028ec2:	4692      	mov	sl, r2
 8028ec4:	469b      	mov	fp, r3
 8028ec6:	4623      	mov	r3, r4
 8028ec8:	eb1a 0303 	adds.w	r3, sl, r3
 8028ecc:	623b      	str	r3, [r7, #32]
 8028ece:	462b      	mov	r3, r5
 8028ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8028ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8028ed6:	f04f 0200 	mov.w	r2, #0
 8028eda:	f04f 0300 	mov.w	r3, #0
 8028ede:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8028ee2:	4629      	mov	r1, r5
 8028ee4:	028b      	lsls	r3, r1, #10
 8028ee6:	4621      	mov	r1, r4
 8028ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8028eec:	4621      	mov	r1, r4
 8028eee:	028a      	lsls	r2, r1, #10
 8028ef0:	4610      	mov	r0, r2
 8028ef2:	4619      	mov	r1, r3
 8028ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8028ef8:	2200      	movs	r2, #0
 8028efa:	673b      	str	r3, [r7, #112]	@ 0x70
 8028efc:	677a      	str	r2, [r7, #116]	@ 0x74
 8028efe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8028f02:	f7f7 fe81 	bl	8020c08 <__aeabi_uldivmod>
 8028f06:	4602      	mov	r2, r0
 8028f08:	460b      	mov	r3, r1
 8028f0a:	4613      	mov	r3, r2
 8028f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028f10:	4b41      	ldr	r3, [pc, #260]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028f12:	685b      	ldr	r3, [r3, #4]
 8028f14:	0c1b      	lsrs	r3, r3, #16
 8028f16:	f003 0303 	and.w	r3, r3, #3
 8028f1a:	3301      	adds	r3, #1
 8028f1c:	005b      	lsls	r3, r3, #1
 8028f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8028f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8028f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8028f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8028f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8028f32:	e0eb      	b.n	802910c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028f34:	4b38      	ldr	r3, [pc, #224]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028f36:	685b      	ldr	r3, [r3, #4]
 8028f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8028f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028f40:	4b35      	ldr	r3, [pc, #212]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028f42:	685b      	ldr	r3, [r3, #4]
 8028f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	d06b      	beq.n	8029024 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028f4c:	4b32      	ldr	r3, [pc, #200]	@ (8029018 <HAL_RCC_GetSysClockFreq+0x354>)
 8028f4e:	685b      	ldr	r3, [r3, #4]
 8028f50:	099b      	lsrs	r3, r3, #6
 8028f52:	2200      	movs	r2, #0
 8028f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8028f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8028f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8028f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8028f60:	2300      	movs	r3, #0
 8028f62:	667b      	str	r3, [r7, #100]	@ 0x64
 8028f64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8028f68:	4622      	mov	r2, r4
 8028f6a:	462b      	mov	r3, r5
 8028f6c:	f04f 0000 	mov.w	r0, #0
 8028f70:	f04f 0100 	mov.w	r1, #0
 8028f74:	0159      	lsls	r1, r3, #5
 8028f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8028f7a:	0150      	lsls	r0, r2, #5
 8028f7c:	4602      	mov	r2, r0
 8028f7e:	460b      	mov	r3, r1
 8028f80:	4621      	mov	r1, r4
 8028f82:	1a51      	subs	r1, r2, r1
 8028f84:	61b9      	str	r1, [r7, #24]
 8028f86:	4629      	mov	r1, r5
 8028f88:	eb63 0301 	sbc.w	r3, r3, r1
 8028f8c:	61fb      	str	r3, [r7, #28]
 8028f8e:	f04f 0200 	mov.w	r2, #0
 8028f92:	f04f 0300 	mov.w	r3, #0
 8028f96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8028f9a:	4659      	mov	r1, fp
 8028f9c:	018b      	lsls	r3, r1, #6
 8028f9e:	4651      	mov	r1, sl
 8028fa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8028fa4:	4651      	mov	r1, sl
 8028fa6:	018a      	lsls	r2, r1, #6
 8028fa8:	4651      	mov	r1, sl
 8028faa:	ebb2 0801 	subs.w	r8, r2, r1
 8028fae:	4659      	mov	r1, fp
 8028fb0:	eb63 0901 	sbc.w	r9, r3, r1
 8028fb4:	f04f 0200 	mov.w	r2, #0
 8028fb8:	f04f 0300 	mov.w	r3, #0
 8028fbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8028fc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8028fc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8028fc8:	4690      	mov	r8, r2
 8028fca:	4699      	mov	r9, r3
 8028fcc:	4623      	mov	r3, r4
 8028fce:	eb18 0303 	adds.w	r3, r8, r3
 8028fd2:	613b      	str	r3, [r7, #16]
 8028fd4:	462b      	mov	r3, r5
 8028fd6:	eb49 0303 	adc.w	r3, r9, r3
 8028fda:	617b      	str	r3, [r7, #20]
 8028fdc:	f04f 0200 	mov.w	r2, #0
 8028fe0:	f04f 0300 	mov.w	r3, #0
 8028fe4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8028fe8:	4629      	mov	r1, r5
 8028fea:	024b      	lsls	r3, r1, #9
 8028fec:	4621      	mov	r1, r4
 8028fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8028ff2:	4621      	mov	r1, r4
 8028ff4:	024a      	lsls	r2, r1, #9
 8028ff6:	4610      	mov	r0, r2
 8028ff8:	4619      	mov	r1, r3
 8028ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8028ffe:	2200      	movs	r2, #0
 8029000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8029002:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8029004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8029008:	f7f7 fdfe 	bl	8020c08 <__aeabi_uldivmod>
 802900c:	4602      	mov	r2, r0
 802900e:	460b      	mov	r3, r1
 8029010:	4613      	mov	r3, r2
 8029012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8029016:	e065      	b.n	80290e4 <HAL_RCC_GetSysClockFreq+0x420>
 8029018:	40023800 	.word	0x40023800
 802901c:	00f42400 	.word	0x00f42400
 8029020:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8029024:	4b3d      	ldr	r3, [pc, #244]	@ (802911c <HAL_RCC_GetSysClockFreq+0x458>)
 8029026:	685b      	ldr	r3, [r3, #4]
 8029028:	099b      	lsrs	r3, r3, #6
 802902a:	2200      	movs	r2, #0
 802902c:	4618      	mov	r0, r3
 802902e:	4611      	mov	r1, r2
 8029030:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8029034:	653b      	str	r3, [r7, #80]	@ 0x50
 8029036:	2300      	movs	r3, #0
 8029038:	657b      	str	r3, [r7, #84]	@ 0x54
 802903a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 802903e:	4642      	mov	r2, r8
 8029040:	464b      	mov	r3, r9
 8029042:	f04f 0000 	mov.w	r0, #0
 8029046:	f04f 0100 	mov.w	r1, #0
 802904a:	0159      	lsls	r1, r3, #5
 802904c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8029050:	0150      	lsls	r0, r2, #5
 8029052:	4602      	mov	r2, r0
 8029054:	460b      	mov	r3, r1
 8029056:	4641      	mov	r1, r8
 8029058:	1a51      	subs	r1, r2, r1
 802905a:	60b9      	str	r1, [r7, #8]
 802905c:	4649      	mov	r1, r9
 802905e:	eb63 0301 	sbc.w	r3, r3, r1
 8029062:	60fb      	str	r3, [r7, #12]
 8029064:	f04f 0200 	mov.w	r2, #0
 8029068:	f04f 0300 	mov.w	r3, #0
 802906c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8029070:	4659      	mov	r1, fp
 8029072:	018b      	lsls	r3, r1, #6
 8029074:	4651      	mov	r1, sl
 8029076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802907a:	4651      	mov	r1, sl
 802907c:	018a      	lsls	r2, r1, #6
 802907e:	4651      	mov	r1, sl
 8029080:	1a54      	subs	r4, r2, r1
 8029082:	4659      	mov	r1, fp
 8029084:	eb63 0501 	sbc.w	r5, r3, r1
 8029088:	f04f 0200 	mov.w	r2, #0
 802908c:	f04f 0300 	mov.w	r3, #0
 8029090:	00eb      	lsls	r3, r5, #3
 8029092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8029096:	00e2      	lsls	r2, r4, #3
 8029098:	4614      	mov	r4, r2
 802909a:	461d      	mov	r5, r3
 802909c:	4643      	mov	r3, r8
 802909e:	18e3      	adds	r3, r4, r3
 80290a0:	603b      	str	r3, [r7, #0]
 80290a2:	464b      	mov	r3, r9
 80290a4:	eb45 0303 	adc.w	r3, r5, r3
 80290a8:	607b      	str	r3, [r7, #4]
 80290aa:	f04f 0200 	mov.w	r2, #0
 80290ae:	f04f 0300 	mov.w	r3, #0
 80290b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80290b6:	4629      	mov	r1, r5
 80290b8:	028b      	lsls	r3, r1, #10
 80290ba:	4621      	mov	r1, r4
 80290bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80290c0:	4621      	mov	r1, r4
 80290c2:	028a      	lsls	r2, r1, #10
 80290c4:	4610      	mov	r0, r2
 80290c6:	4619      	mov	r1, r3
 80290c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80290cc:	2200      	movs	r2, #0
 80290ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80290d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80290d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80290d6:	f7f7 fd97 	bl	8020c08 <__aeabi_uldivmod>
 80290da:	4602      	mov	r2, r0
 80290dc:	460b      	mov	r3, r1
 80290de:	4613      	mov	r3, r2
 80290e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80290e4:	4b0d      	ldr	r3, [pc, #52]	@ (802911c <HAL_RCC_GetSysClockFreq+0x458>)
 80290e6:	685b      	ldr	r3, [r3, #4]
 80290e8:	0f1b      	lsrs	r3, r3, #28
 80290ea:	f003 0307 	and.w	r3, r3, #7
 80290ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80290f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80290f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80290fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80290fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8029102:	e003      	b.n	802910c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8029104:	4b06      	ldr	r3, [pc, #24]	@ (8029120 <HAL_RCC_GetSysClockFreq+0x45c>)
 8029106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 802910a:	bf00      	nop
    }
  }
  return sysclockfreq;
 802910c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8029110:	4618      	mov	r0, r3
 8029112:	37b8      	adds	r7, #184	@ 0xb8
 8029114:	46bd      	mov	sp, r7
 8029116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802911a:	bf00      	nop
 802911c:	40023800 	.word	0x40023800
 8029120:	00f42400 	.word	0x00f42400

08029124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8029124:	b580      	push	{r7, lr}
 8029126:	b086      	sub	sp, #24
 8029128:	af00      	add	r7, sp, #0
 802912a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802912c:	2300      	movs	r3, #0
 802912e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8029130:	687b      	ldr	r3, [r7, #4]
 8029132:	681b      	ldr	r3, [r3, #0]
 8029134:	f003 0301 	and.w	r3, r3, #1
 8029138:	2b00      	cmp	r3, #0
 802913a:	f000 8083 	beq.w	8029244 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802913e:	4b95      	ldr	r3, [pc, #596]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029140:	689b      	ldr	r3, [r3, #8]
 8029142:	f003 030c 	and.w	r3, r3, #12
 8029146:	2b04      	cmp	r3, #4
 8029148:	d019      	beq.n	802917e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 802914a:	4b92      	ldr	r3, [pc, #584]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 802914c:	689b      	ldr	r3, [r3, #8]
 802914e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8029152:	2b08      	cmp	r3, #8
 8029154:	d106      	bne.n	8029164 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8029156:	4b8f      	ldr	r3, [pc, #572]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029158:	685b      	ldr	r3, [r3, #4]
 802915a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802915e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8029162:	d00c      	beq.n	802917e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029164:	4b8b      	ldr	r3, [pc, #556]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029166:	689b      	ldr	r3, [r3, #8]
 8029168:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 802916c:	2b0c      	cmp	r3, #12
 802916e:	d112      	bne.n	8029196 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029170:	4b88      	ldr	r3, [pc, #544]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029172:	685b      	ldr	r3, [r3, #4]
 8029174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8029178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802917c:	d10b      	bne.n	8029196 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802917e:	4b85      	ldr	r3, [pc, #532]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029180:	681b      	ldr	r3, [r3, #0]
 8029182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8029186:	2b00      	cmp	r3, #0
 8029188:	d05b      	beq.n	8029242 <HAL_RCC_OscConfig+0x11e>
 802918a:	687b      	ldr	r3, [r7, #4]
 802918c:	685b      	ldr	r3, [r3, #4]
 802918e:	2b00      	cmp	r3, #0
 8029190:	d157      	bne.n	8029242 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8029192:	2301      	movs	r3, #1
 8029194:	e216      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8029196:	687b      	ldr	r3, [r7, #4]
 8029198:	685b      	ldr	r3, [r3, #4]
 802919a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802919e:	d106      	bne.n	80291ae <HAL_RCC_OscConfig+0x8a>
 80291a0:	4b7c      	ldr	r3, [pc, #496]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291a2:	681b      	ldr	r3, [r3, #0]
 80291a4:	4a7b      	ldr	r2, [pc, #492]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80291aa:	6013      	str	r3, [r2, #0]
 80291ac:	e01d      	b.n	80291ea <HAL_RCC_OscConfig+0xc6>
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	685b      	ldr	r3, [r3, #4]
 80291b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80291b6:	d10c      	bne.n	80291d2 <HAL_RCC_OscConfig+0xae>
 80291b8:	4b76      	ldr	r3, [pc, #472]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291ba:	681b      	ldr	r3, [r3, #0]
 80291bc:	4a75      	ldr	r2, [pc, #468]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80291c2:	6013      	str	r3, [r2, #0]
 80291c4:	4b73      	ldr	r3, [pc, #460]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291c6:	681b      	ldr	r3, [r3, #0]
 80291c8:	4a72      	ldr	r2, [pc, #456]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80291ce:	6013      	str	r3, [r2, #0]
 80291d0:	e00b      	b.n	80291ea <HAL_RCC_OscConfig+0xc6>
 80291d2:	4b70      	ldr	r3, [pc, #448]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291d4:	681b      	ldr	r3, [r3, #0]
 80291d6:	4a6f      	ldr	r2, [pc, #444]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80291dc:	6013      	str	r3, [r2, #0]
 80291de:	4b6d      	ldr	r3, [pc, #436]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291e0:	681b      	ldr	r3, [r3, #0]
 80291e2:	4a6c      	ldr	r2, [pc, #432]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80291e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80291e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	685b      	ldr	r3, [r3, #4]
 80291ee:	2b00      	cmp	r3, #0
 80291f0:	d013      	beq.n	802921a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80291f2:	f7fc f8ab 	bl	802534c <HAL_GetTick>
 80291f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80291f8:	e008      	b.n	802920c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80291fa:	f7fc f8a7 	bl	802534c <HAL_GetTick>
 80291fe:	4602      	mov	r2, r0
 8029200:	693b      	ldr	r3, [r7, #16]
 8029202:	1ad3      	subs	r3, r2, r3
 8029204:	2b64      	cmp	r3, #100	@ 0x64
 8029206:	d901      	bls.n	802920c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8029208:	2303      	movs	r3, #3
 802920a:	e1db      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802920c:	4b61      	ldr	r3, [pc, #388]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 802920e:	681b      	ldr	r3, [r3, #0]
 8029210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8029214:	2b00      	cmp	r3, #0
 8029216:	d0f0      	beq.n	80291fa <HAL_RCC_OscConfig+0xd6>
 8029218:	e014      	b.n	8029244 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802921a:	f7fc f897 	bl	802534c <HAL_GetTick>
 802921e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8029220:	e008      	b.n	8029234 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8029222:	f7fc f893 	bl	802534c <HAL_GetTick>
 8029226:	4602      	mov	r2, r0
 8029228:	693b      	ldr	r3, [r7, #16]
 802922a:	1ad3      	subs	r3, r2, r3
 802922c:	2b64      	cmp	r3, #100	@ 0x64
 802922e:	d901      	bls.n	8029234 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8029230:	2303      	movs	r3, #3
 8029232:	e1c7      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8029234:	4b57      	ldr	r3, [pc, #348]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029236:	681b      	ldr	r3, [r3, #0]
 8029238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802923c:	2b00      	cmp	r3, #0
 802923e:	d1f0      	bne.n	8029222 <HAL_RCC_OscConfig+0xfe>
 8029240:	e000      	b.n	8029244 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029242:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8029244:	687b      	ldr	r3, [r7, #4]
 8029246:	681b      	ldr	r3, [r3, #0]
 8029248:	f003 0302 	and.w	r3, r3, #2
 802924c:	2b00      	cmp	r3, #0
 802924e:	d06f      	beq.n	8029330 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8029250:	4b50      	ldr	r3, [pc, #320]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029252:	689b      	ldr	r3, [r3, #8]
 8029254:	f003 030c 	and.w	r3, r3, #12
 8029258:	2b00      	cmp	r3, #0
 802925a:	d017      	beq.n	802928c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802925c:	4b4d      	ldr	r3, [pc, #308]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 802925e:	689b      	ldr	r3, [r3, #8]
 8029260:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8029264:	2b08      	cmp	r3, #8
 8029266:	d105      	bne.n	8029274 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8029268:	4b4a      	ldr	r3, [pc, #296]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 802926a:	685b      	ldr	r3, [r3, #4]
 802926c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8029270:	2b00      	cmp	r3, #0
 8029272:	d00b      	beq.n	802928c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8029274:	4b47      	ldr	r3, [pc, #284]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029276:	689b      	ldr	r3, [r3, #8]
 8029278:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802927c:	2b0c      	cmp	r3, #12
 802927e:	d11c      	bne.n	80292ba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8029280:	4b44      	ldr	r3, [pc, #272]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029282:	685b      	ldr	r3, [r3, #4]
 8029284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8029288:	2b00      	cmp	r3, #0
 802928a:	d116      	bne.n	80292ba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802928c:	4b41      	ldr	r3, [pc, #260]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 802928e:	681b      	ldr	r3, [r3, #0]
 8029290:	f003 0302 	and.w	r3, r3, #2
 8029294:	2b00      	cmp	r3, #0
 8029296:	d005      	beq.n	80292a4 <HAL_RCC_OscConfig+0x180>
 8029298:	687b      	ldr	r3, [r7, #4]
 802929a:	68db      	ldr	r3, [r3, #12]
 802929c:	2b01      	cmp	r3, #1
 802929e:	d001      	beq.n	80292a4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80292a0:	2301      	movs	r3, #1
 80292a2:	e18f      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80292a4:	4b3b      	ldr	r3, [pc, #236]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80292a6:	681b      	ldr	r3, [r3, #0]
 80292a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	691b      	ldr	r3, [r3, #16]
 80292b0:	00db      	lsls	r3, r3, #3
 80292b2:	4938      	ldr	r1, [pc, #224]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80292b4:	4313      	orrs	r3, r2
 80292b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80292b8:	e03a      	b.n	8029330 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80292ba:	687b      	ldr	r3, [r7, #4]
 80292bc:	68db      	ldr	r3, [r3, #12]
 80292be:	2b00      	cmp	r3, #0
 80292c0:	d020      	beq.n	8029304 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80292c2:	4b35      	ldr	r3, [pc, #212]	@ (8029398 <HAL_RCC_OscConfig+0x274>)
 80292c4:	2201      	movs	r2, #1
 80292c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80292c8:	f7fc f840 	bl	802534c <HAL_GetTick>
 80292cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80292ce:	e008      	b.n	80292e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80292d0:	f7fc f83c 	bl	802534c <HAL_GetTick>
 80292d4:	4602      	mov	r2, r0
 80292d6:	693b      	ldr	r3, [r7, #16]
 80292d8:	1ad3      	subs	r3, r2, r3
 80292da:	2b02      	cmp	r3, #2
 80292dc:	d901      	bls.n	80292e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80292de:	2303      	movs	r3, #3
 80292e0:	e170      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80292e2:	4b2c      	ldr	r3, [pc, #176]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80292e4:	681b      	ldr	r3, [r3, #0]
 80292e6:	f003 0302 	and.w	r3, r3, #2
 80292ea:	2b00      	cmp	r3, #0
 80292ec:	d0f0      	beq.n	80292d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80292ee:	4b29      	ldr	r3, [pc, #164]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80292f0:	681b      	ldr	r3, [r3, #0]
 80292f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80292f6:	687b      	ldr	r3, [r7, #4]
 80292f8:	691b      	ldr	r3, [r3, #16]
 80292fa:	00db      	lsls	r3, r3, #3
 80292fc:	4925      	ldr	r1, [pc, #148]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 80292fe:	4313      	orrs	r3, r2
 8029300:	600b      	str	r3, [r1, #0]
 8029302:	e015      	b.n	8029330 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8029304:	4b24      	ldr	r3, [pc, #144]	@ (8029398 <HAL_RCC_OscConfig+0x274>)
 8029306:	2200      	movs	r2, #0
 8029308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802930a:	f7fc f81f 	bl	802534c <HAL_GetTick>
 802930e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8029310:	e008      	b.n	8029324 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8029312:	f7fc f81b 	bl	802534c <HAL_GetTick>
 8029316:	4602      	mov	r2, r0
 8029318:	693b      	ldr	r3, [r7, #16]
 802931a:	1ad3      	subs	r3, r2, r3
 802931c:	2b02      	cmp	r3, #2
 802931e:	d901      	bls.n	8029324 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8029320:	2303      	movs	r3, #3
 8029322:	e14f      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8029324:	4b1b      	ldr	r3, [pc, #108]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029326:	681b      	ldr	r3, [r3, #0]
 8029328:	f003 0302 	and.w	r3, r3, #2
 802932c:	2b00      	cmp	r3, #0
 802932e:	d1f0      	bne.n	8029312 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8029330:	687b      	ldr	r3, [r7, #4]
 8029332:	681b      	ldr	r3, [r3, #0]
 8029334:	f003 0308 	and.w	r3, r3, #8
 8029338:	2b00      	cmp	r3, #0
 802933a:	d037      	beq.n	80293ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802933c:	687b      	ldr	r3, [r7, #4]
 802933e:	695b      	ldr	r3, [r3, #20]
 8029340:	2b00      	cmp	r3, #0
 8029342:	d016      	beq.n	8029372 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8029344:	4b15      	ldr	r3, [pc, #84]	@ (802939c <HAL_RCC_OscConfig+0x278>)
 8029346:	2201      	movs	r2, #1
 8029348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802934a:	f7fb ffff 	bl	802534c <HAL_GetTick>
 802934e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8029350:	e008      	b.n	8029364 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8029352:	f7fb fffb 	bl	802534c <HAL_GetTick>
 8029356:	4602      	mov	r2, r0
 8029358:	693b      	ldr	r3, [r7, #16]
 802935a:	1ad3      	subs	r3, r2, r3
 802935c:	2b02      	cmp	r3, #2
 802935e:	d901      	bls.n	8029364 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8029360:	2303      	movs	r3, #3
 8029362:	e12f      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8029364:	4b0b      	ldr	r3, [pc, #44]	@ (8029394 <HAL_RCC_OscConfig+0x270>)
 8029366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8029368:	f003 0302 	and.w	r3, r3, #2
 802936c:	2b00      	cmp	r3, #0
 802936e:	d0f0      	beq.n	8029352 <HAL_RCC_OscConfig+0x22e>
 8029370:	e01c      	b.n	80293ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8029372:	4b0a      	ldr	r3, [pc, #40]	@ (802939c <HAL_RCC_OscConfig+0x278>)
 8029374:	2200      	movs	r2, #0
 8029376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8029378:	f7fb ffe8 	bl	802534c <HAL_GetTick>
 802937c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802937e:	e00f      	b.n	80293a0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8029380:	f7fb ffe4 	bl	802534c <HAL_GetTick>
 8029384:	4602      	mov	r2, r0
 8029386:	693b      	ldr	r3, [r7, #16]
 8029388:	1ad3      	subs	r3, r2, r3
 802938a:	2b02      	cmp	r3, #2
 802938c:	d908      	bls.n	80293a0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 802938e:	2303      	movs	r3, #3
 8029390:	e118      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
 8029392:	bf00      	nop
 8029394:	40023800 	.word	0x40023800
 8029398:	42470000 	.word	0x42470000
 802939c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80293a0:	4b8a      	ldr	r3, [pc, #552]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80293a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80293a4:	f003 0302 	and.w	r3, r3, #2
 80293a8:	2b00      	cmp	r3, #0
 80293aa:	d1e9      	bne.n	8029380 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80293ac:	687b      	ldr	r3, [r7, #4]
 80293ae:	681b      	ldr	r3, [r3, #0]
 80293b0:	f003 0304 	and.w	r3, r3, #4
 80293b4:	2b00      	cmp	r3, #0
 80293b6:	f000 8097 	beq.w	80294e8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80293ba:	2300      	movs	r3, #0
 80293bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80293be:	4b83      	ldr	r3, [pc, #524]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80293c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80293c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80293c6:	2b00      	cmp	r3, #0
 80293c8:	d10f      	bne.n	80293ea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80293ca:	2300      	movs	r3, #0
 80293cc:	60fb      	str	r3, [r7, #12]
 80293ce:	4b7f      	ldr	r3, [pc, #508]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80293d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80293d2:	4a7e      	ldr	r2, [pc, #504]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80293d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80293d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80293da:	4b7c      	ldr	r3, [pc, #496]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80293dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80293de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80293e2:	60fb      	str	r3, [r7, #12]
 80293e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80293e6:	2301      	movs	r3, #1
 80293e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80293ea:	4b79      	ldr	r3, [pc, #484]	@ (80295d0 <HAL_RCC_OscConfig+0x4ac>)
 80293ec:	681b      	ldr	r3, [r3, #0]
 80293ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80293f2:	2b00      	cmp	r3, #0
 80293f4:	d118      	bne.n	8029428 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80293f6:	4b76      	ldr	r3, [pc, #472]	@ (80295d0 <HAL_RCC_OscConfig+0x4ac>)
 80293f8:	681b      	ldr	r3, [r3, #0]
 80293fa:	4a75      	ldr	r2, [pc, #468]	@ (80295d0 <HAL_RCC_OscConfig+0x4ac>)
 80293fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8029400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8029402:	f7fb ffa3 	bl	802534c <HAL_GetTick>
 8029406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8029408:	e008      	b.n	802941c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802940a:	f7fb ff9f 	bl	802534c <HAL_GetTick>
 802940e:	4602      	mov	r2, r0
 8029410:	693b      	ldr	r3, [r7, #16]
 8029412:	1ad3      	subs	r3, r2, r3
 8029414:	2b02      	cmp	r3, #2
 8029416:	d901      	bls.n	802941c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8029418:	2303      	movs	r3, #3
 802941a:	e0d3      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802941c:	4b6c      	ldr	r3, [pc, #432]	@ (80295d0 <HAL_RCC_OscConfig+0x4ac>)
 802941e:	681b      	ldr	r3, [r3, #0]
 8029420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8029424:	2b00      	cmp	r3, #0
 8029426:	d0f0      	beq.n	802940a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8029428:	687b      	ldr	r3, [r7, #4]
 802942a:	689b      	ldr	r3, [r3, #8]
 802942c:	2b01      	cmp	r3, #1
 802942e:	d106      	bne.n	802943e <HAL_RCC_OscConfig+0x31a>
 8029430:	4b66      	ldr	r3, [pc, #408]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029434:	4a65      	ldr	r2, [pc, #404]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029436:	f043 0301 	orr.w	r3, r3, #1
 802943a:	6713      	str	r3, [r2, #112]	@ 0x70
 802943c:	e01c      	b.n	8029478 <HAL_RCC_OscConfig+0x354>
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	689b      	ldr	r3, [r3, #8]
 8029442:	2b05      	cmp	r3, #5
 8029444:	d10c      	bne.n	8029460 <HAL_RCC_OscConfig+0x33c>
 8029446:	4b61      	ldr	r3, [pc, #388]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802944a:	4a60      	ldr	r2, [pc, #384]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 802944c:	f043 0304 	orr.w	r3, r3, #4
 8029450:	6713      	str	r3, [r2, #112]	@ 0x70
 8029452:	4b5e      	ldr	r3, [pc, #376]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029456:	4a5d      	ldr	r2, [pc, #372]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029458:	f043 0301 	orr.w	r3, r3, #1
 802945c:	6713      	str	r3, [r2, #112]	@ 0x70
 802945e:	e00b      	b.n	8029478 <HAL_RCC_OscConfig+0x354>
 8029460:	4b5a      	ldr	r3, [pc, #360]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029464:	4a59      	ldr	r2, [pc, #356]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029466:	f023 0301 	bic.w	r3, r3, #1
 802946a:	6713      	str	r3, [r2, #112]	@ 0x70
 802946c:	4b57      	ldr	r3, [pc, #348]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 802946e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029470:	4a56      	ldr	r2, [pc, #344]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029472:	f023 0304 	bic.w	r3, r3, #4
 8029476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	689b      	ldr	r3, [r3, #8]
 802947c:	2b00      	cmp	r3, #0
 802947e:	d015      	beq.n	80294ac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8029480:	f7fb ff64 	bl	802534c <HAL_GetTick>
 8029484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8029486:	e00a      	b.n	802949e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8029488:	f7fb ff60 	bl	802534c <HAL_GetTick>
 802948c:	4602      	mov	r2, r0
 802948e:	693b      	ldr	r3, [r7, #16]
 8029490:	1ad3      	subs	r3, r2, r3
 8029492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8029496:	4293      	cmp	r3, r2
 8029498:	d901      	bls.n	802949e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 802949a:	2303      	movs	r3, #3
 802949c:	e092      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802949e:	4b4b      	ldr	r3, [pc, #300]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80294a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80294a2:	f003 0302 	and.w	r3, r3, #2
 80294a6:	2b00      	cmp	r3, #0
 80294a8:	d0ee      	beq.n	8029488 <HAL_RCC_OscConfig+0x364>
 80294aa:	e014      	b.n	80294d6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80294ac:	f7fb ff4e 	bl	802534c <HAL_GetTick>
 80294b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80294b2:	e00a      	b.n	80294ca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80294b4:	f7fb ff4a 	bl	802534c <HAL_GetTick>
 80294b8:	4602      	mov	r2, r0
 80294ba:	693b      	ldr	r3, [r7, #16]
 80294bc:	1ad3      	subs	r3, r2, r3
 80294be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80294c2:	4293      	cmp	r3, r2
 80294c4:	d901      	bls.n	80294ca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80294c6:	2303      	movs	r3, #3
 80294c8:	e07c      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80294ca:	4b40      	ldr	r3, [pc, #256]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80294cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80294ce:	f003 0302 	and.w	r3, r3, #2
 80294d2:	2b00      	cmp	r3, #0
 80294d4:	d1ee      	bne.n	80294b4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80294d6:	7dfb      	ldrb	r3, [r7, #23]
 80294d8:	2b01      	cmp	r3, #1
 80294da:	d105      	bne.n	80294e8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80294dc:	4b3b      	ldr	r3, [pc, #236]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80294de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80294e0:	4a3a      	ldr	r2, [pc, #232]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80294e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80294e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	699b      	ldr	r3, [r3, #24]
 80294ec:	2b00      	cmp	r3, #0
 80294ee:	d068      	beq.n	80295c2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80294f0:	4b36      	ldr	r3, [pc, #216]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80294f2:	689b      	ldr	r3, [r3, #8]
 80294f4:	f003 030c 	and.w	r3, r3, #12
 80294f8:	2b08      	cmp	r3, #8
 80294fa:	d060      	beq.n	80295be <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80294fc:	687b      	ldr	r3, [r7, #4]
 80294fe:	699b      	ldr	r3, [r3, #24]
 8029500:	2b02      	cmp	r3, #2
 8029502:	d145      	bne.n	8029590 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8029504:	4b33      	ldr	r3, [pc, #204]	@ (80295d4 <HAL_RCC_OscConfig+0x4b0>)
 8029506:	2200      	movs	r2, #0
 8029508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802950a:	f7fb ff1f 	bl	802534c <HAL_GetTick>
 802950e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8029510:	e008      	b.n	8029524 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8029512:	f7fb ff1b 	bl	802534c <HAL_GetTick>
 8029516:	4602      	mov	r2, r0
 8029518:	693b      	ldr	r3, [r7, #16]
 802951a:	1ad3      	subs	r3, r2, r3
 802951c:	2b02      	cmp	r3, #2
 802951e:	d901      	bls.n	8029524 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8029520:	2303      	movs	r3, #3
 8029522:	e04f      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8029524:	4b29      	ldr	r3, [pc, #164]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029526:	681b      	ldr	r3, [r3, #0]
 8029528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802952c:	2b00      	cmp	r3, #0
 802952e:	d1f0      	bne.n	8029512 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8029530:	687b      	ldr	r3, [r7, #4]
 8029532:	69da      	ldr	r2, [r3, #28]
 8029534:	687b      	ldr	r3, [r7, #4]
 8029536:	6a1b      	ldr	r3, [r3, #32]
 8029538:	431a      	orrs	r2, r3
 802953a:	687b      	ldr	r3, [r7, #4]
 802953c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802953e:	019b      	lsls	r3, r3, #6
 8029540:	431a      	orrs	r2, r3
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029546:	085b      	lsrs	r3, r3, #1
 8029548:	3b01      	subs	r3, #1
 802954a:	041b      	lsls	r3, r3, #16
 802954c:	431a      	orrs	r2, r3
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029552:	061b      	lsls	r3, r3, #24
 8029554:	431a      	orrs	r2, r3
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802955a:	071b      	lsls	r3, r3, #28
 802955c:	491b      	ldr	r1, [pc, #108]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 802955e:	4313      	orrs	r3, r2
 8029560:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8029562:	4b1c      	ldr	r3, [pc, #112]	@ (80295d4 <HAL_RCC_OscConfig+0x4b0>)
 8029564:	2201      	movs	r2, #1
 8029566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8029568:	f7fb fef0 	bl	802534c <HAL_GetTick>
 802956c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802956e:	e008      	b.n	8029582 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8029570:	f7fb feec 	bl	802534c <HAL_GetTick>
 8029574:	4602      	mov	r2, r0
 8029576:	693b      	ldr	r3, [r7, #16]
 8029578:	1ad3      	subs	r3, r2, r3
 802957a:	2b02      	cmp	r3, #2
 802957c:	d901      	bls.n	8029582 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 802957e:	2303      	movs	r3, #3
 8029580:	e020      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8029582:	4b12      	ldr	r3, [pc, #72]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 8029584:	681b      	ldr	r3, [r3, #0]
 8029586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802958a:	2b00      	cmp	r3, #0
 802958c:	d0f0      	beq.n	8029570 <HAL_RCC_OscConfig+0x44c>
 802958e:	e018      	b.n	80295c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8029590:	4b10      	ldr	r3, [pc, #64]	@ (80295d4 <HAL_RCC_OscConfig+0x4b0>)
 8029592:	2200      	movs	r2, #0
 8029594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8029596:	f7fb fed9 	bl	802534c <HAL_GetTick>
 802959a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802959c:	e008      	b.n	80295b0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802959e:	f7fb fed5 	bl	802534c <HAL_GetTick>
 80295a2:	4602      	mov	r2, r0
 80295a4:	693b      	ldr	r3, [r7, #16]
 80295a6:	1ad3      	subs	r3, r2, r3
 80295a8:	2b02      	cmp	r3, #2
 80295aa:	d901      	bls.n	80295b0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80295ac:	2303      	movs	r3, #3
 80295ae:	e009      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80295b0:	4b06      	ldr	r3, [pc, #24]	@ (80295cc <HAL_RCC_OscConfig+0x4a8>)
 80295b2:	681b      	ldr	r3, [r3, #0]
 80295b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80295b8:	2b00      	cmp	r3, #0
 80295ba:	d1f0      	bne.n	802959e <HAL_RCC_OscConfig+0x47a>
 80295bc:	e001      	b.n	80295c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80295be:	2301      	movs	r3, #1
 80295c0:	e000      	b.n	80295c4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80295c2:	2300      	movs	r3, #0
}
 80295c4:	4618      	mov	r0, r3
 80295c6:	3718      	adds	r7, #24
 80295c8:	46bd      	mov	sp, r7
 80295ca:	bd80      	pop	{r7, pc}
 80295cc:	40023800 	.word	0x40023800
 80295d0:	40007000 	.word	0x40007000
 80295d4:	42470060 	.word	0x42470060

080295d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80295d8:	b580      	push	{r7, lr}
 80295da:	b082      	sub	sp, #8
 80295dc:	af00      	add	r7, sp, #0
 80295de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80295e0:	687b      	ldr	r3, [r7, #4]
 80295e2:	2b00      	cmp	r3, #0
 80295e4:	d101      	bne.n	80295ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80295e6:	2301      	movs	r3, #1
 80295e8:	e056      	b.n	8029698 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	2200      	movs	r2, #0
 80295ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80295f0:	687b      	ldr	r3, [r7, #4]
 80295f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80295f6:	b2db      	uxtb	r3, r3
 80295f8:	2b00      	cmp	r3, #0
 80295fa:	d106      	bne.n	802960a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80295fc:	687b      	ldr	r3, [r7, #4]
 80295fe:	2200      	movs	r2, #0
 8029600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8029604:	6878      	ldr	r0, [r7, #4]
 8029606:	f006 fdfd 	bl	8030204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802960a:	687b      	ldr	r3, [r7, #4]
 802960c:	2202      	movs	r2, #2
 802960e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8029612:	687b      	ldr	r3, [r7, #4]
 8029614:	681b      	ldr	r3, [r3, #0]
 8029616:	681a      	ldr	r2, [r3, #0]
 8029618:	687b      	ldr	r3, [r7, #4]
 802961a:	681b      	ldr	r3, [r3, #0]
 802961c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8029620:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8029622:	687b      	ldr	r3, [r7, #4]
 8029624:	685a      	ldr	r2, [r3, #4]
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	689b      	ldr	r3, [r3, #8]
 802962a:	431a      	orrs	r2, r3
 802962c:	687b      	ldr	r3, [r7, #4]
 802962e:	68db      	ldr	r3, [r3, #12]
 8029630:	431a      	orrs	r2, r3
 8029632:	687b      	ldr	r3, [r7, #4]
 8029634:	691b      	ldr	r3, [r3, #16]
 8029636:	431a      	orrs	r2, r3
 8029638:	687b      	ldr	r3, [r7, #4]
 802963a:	695b      	ldr	r3, [r3, #20]
 802963c:	431a      	orrs	r2, r3
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	699b      	ldr	r3, [r3, #24]
 8029642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8029646:	431a      	orrs	r2, r3
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	69db      	ldr	r3, [r3, #28]
 802964c:	431a      	orrs	r2, r3
 802964e:	687b      	ldr	r3, [r7, #4]
 8029650:	6a1b      	ldr	r3, [r3, #32]
 8029652:	ea42 0103 	orr.w	r1, r2, r3
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802965a:	687b      	ldr	r3, [r7, #4]
 802965c:	681b      	ldr	r3, [r3, #0]
 802965e:	430a      	orrs	r2, r1
 8029660:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8029662:	687b      	ldr	r3, [r7, #4]
 8029664:	699b      	ldr	r3, [r3, #24]
 8029666:	0c1b      	lsrs	r3, r3, #16
 8029668:	f003 0104 	and.w	r1, r3, #4
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8029670:	687b      	ldr	r3, [r7, #4]
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	430a      	orrs	r2, r1
 8029676:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	69da      	ldr	r2, [r3, #28]
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	681b      	ldr	r3, [r3, #0]
 8029682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8029686:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	2200      	movs	r2, #0
 802968c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802968e:	687b      	ldr	r3, [r7, #4]
 8029690:	2201      	movs	r2, #1
 8029692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8029696:	2300      	movs	r3, #0
}
 8029698:	4618      	mov	r0, r3
 802969a:	3708      	adds	r7, #8
 802969c:	46bd      	mov	sp, r7
 802969e:	bd80      	pop	{r7, pc}

080296a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80296a0:	b580      	push	{r7, lr}
 80296a2:	b088      	sub	sp, #32
 80296a4:	af00      	add	r7, sp, #0
 80296a6:	60f8      	str	r0, [r7, #12]
 80296a8:	60b9      	str	r1, [r7, #8]
 80296aa:	603b      	str	r3, [r7, #0]
 80296ac:	4613      	mov	r3, r2
 80296ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80296b0:	2300      	movs	r3, #0
 80296b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80296b4:	68fb      	ldr	r3, [r7, #12]
 80296b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80296ba:	2b01      	cmp	r3, #1
 80296bc:	d101      	bne.n	80296c2 <HAL_SPI_Transmit+0x22>
 80296be:	2302      	movs	r3, #2
 80296c0:	e11e      	b.n	8029900 <HAL_SPI_Transmit+0x260>
 80296c2:	68fb      	ldr	r3, [r7, #12]
 80296c4:	2201      	movs	r2, #1
 80296c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80296ca:	f7fb fe3f 	bl	802534c <HAL_GetTick>
 80296ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80296d0:	88fb      	ldrh	r3, [r7, #6]
 80296d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80296d4:	68fb      	ldr	r3, [r7, #12]
 80296d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80296da:	b2db      	uxtb	r3, r3
 80296dc:	2b01      	cmp	r3, #1
 80296de:	d002      	beq.n	80296e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80296e0:	2302      	movs	r3, #2
 80296e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80296e4:	e103      	b.n	80298ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80296e6:	68bb      	ldr	r3, [r7, #8]
 80296e8:	2b00      	cmp	r3, #0
 80296ea:	d002      	beq.n	80296f2 <HAL_SPI_Transmit+0x52>
 80296ec:	88fb      	ldrh	r3, [r7, #6]
 80296ee:	2b00      	cmp	r3, #0
 80296f0:	d102      	bne.n	80296f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80296f2:	2301      	movs	r3, #1
 80296f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80296f6:	e0fa      	b.n	80298ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80296f8:	68fb      	ldr	r3, [r7, #12]
 80296fa:	2203      	movs	r2, #3
 80296fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029700:	68fb      	ldr	r3, [r7, #12]
 8029702:	2200      	movs	r2, #0
 8029704:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8029706:	68fb      	ldr	r3, [r7, #12]
 8029708:	68ba      	ldr	r2, [r7, #8]
 802970a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 802970c:	68fb      	ldr	r3, [r7, #12]
 802970e:	88fa      	ldrh	r2, [r7, #6]
 8029710:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8029712:	68fb      	ldr	r3, [r7, #12]
 8029714:	88fa      	ldrh	r2, [r7, #6]
 8029716:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8029718:	68fb      	ldr	r3, [r7, #12]
 802971a:	2200      	movs	r2, #0
 802971c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 802971e:	68fb      	ldr	r3, [r7, #12]
 8029720:	2200      	movs	r2, #0
 8029722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8029724:	68fb      	ldr	r3, [r7, #12]
 8029726:	2200      	movs	r2, #0
 8029728:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 802972a:	68fb      	ldr	r3, [r7, #12]
 802972c:	2200      	movs	r2, #0
 802972e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8029730:	68fb      	ldr	r3, [r7, #12]
 8029732:	2200      	movs	r2, #0
 8029734:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029736:	68fb      	ldr	r3, [r7, #12]
 8029738:	689b      	ldr	r3, [r3, #8]
 802973a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802973e:	d107      	bne.n	8029750 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8029740:	68fb      	ldr	r3, [r7, #12]
 8029742:	681b      	ldr	r3, [r3, #0]
 8029744:	681a      	ldr	r2, [r3, #0]
 8029746:	68fb      	ldr	r3, [r7, #12]
 8029748:	681b      	ldr	r3, [r3, #0]
 802974a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802974e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8029750:	68fb      	ldr	r3, [r7, #12]
 8029752:	681b      	ldr	r3, [r3, #0]
 8029754:	681b      	ldr	r3, [r3, #0]
 8029756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802975a:	2b40      	cmp	r3, #64	@ 0x40
 802975c:	d007      	beq.n	802976e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802975e:	68fb      	ldr	r3, [r7, #12]
 8029760:	681b      	ldr	r3, [r3, #0]
 8029762:	681a      	ldr	r2, [r3, #0]
 8029764:	68fb      	ldr	r3, [r7, #12]
 8029766:	681b      	ldr	r3, [r3, #0]
 8029768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802976c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802976e:	68fb      	ldr	r3, [r7, #12]
 8029770:	68db      	ldr	r3, [r3, #12]
 8029772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8029776:	d14b      	bne.n	8029810 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029778:	68fb      	ldr	r3, [r7, #12]
 802977a:	685b      	ldr	r3, [r3, #4]
 802977c:	2b00      	cmp	r3, #0
 802977e:	d002      	beq.n	8029786 <HAL_SPI_Transmit+0xe6>
 8029780:	8afb      	ldrh	r3, [r7, #22]
 8029782:	2b01      	cmp	r3, #1
 8029784:	d13e      	bne.n	8029804 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029786:	68fb      	ldr	r3, [r7, #12]
 8029788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802978a:	881a      	ldrh	r2, [r3, #0]
 802978c:	68fb      	ldr	r3, [r7, #12]
 802978e:	681b      	ldr	r3, [r3, #0]
 8029790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8029792:	68fb      	ldr	r3, [r7, #12]
 8029794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029796:	1c9a      	adds	r2, r3, #2
 8029798:	68fb      	ldr	r3, [r7, #12]
 802979a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 802979c:	68fb      	ldr	r3, [r7, #12]
 802979e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80297a0:	b29b      	uxth	r3, r3
 80297a2:	3b01      	subs	r3, #1
 80297a4:	b29a      	uxth	r2, r3
 80297a6:	68fb      	ldr	r3, [r7, #12]
 80297a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80297aa:	e02b      	b.n	8029804 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80297ac:	68fb      	ldr	r3, [r7, #12]
 80297ae:	681b      	ldr	r3, [r3, #0]
 80297b0:	689b      	ldr	r3, [r3, #8]
 80297b2:	f003 0302 	and.w	r3, r3, #2
 80297b6:	2b02      	cmp	r3, #2
 80297b8:	d112      	bne.n	80297e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80297ba:	68fb      	ldr	r3, [r7, #12]
 80297bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80297be:	881a      	ldrh	r2, [r3, #0]
 80297c0:	68fb      	ldr	r3, [r7, #12]
 80297c2:	681b      	ldr	r3, [r3, #0]
 80297c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80297c6:	68fb      	ldr	r3, [r7, #12]
 80297c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80297ca:	1c9a      	adds	r2, r3, #2
 80297cc:	68fb      	ldr	r3, [r7, #12]
 80297ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80297d0:	68fb      	ldr	r3, [r7, #12]
 80297d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80297d4:	b29b      	uxth	r3, r3
 80297d6:	3b01      	subs	r3, #1
 80297d8:	b29a      	uxth	r2, r3
 80297da:	68fb      	ldr	r3, [r7, #12]
 80297dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80297de:	e011      	b.n	8029804 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80297e0:	f7fb fdb4 	bl	802534c <HAL_GetTick>
 80297e4:	4602      	mov	r2, r0
 80297e6:	69bb      	ldr	r3, [r7, #24]
 80297e8:	1ad3      	subs	r3, r2, r3
 80297ea:	683a      	ldr	r2, [r7, #0]
 80297ec:	429a      	cmp	r2, r3
 80297ee:	d803      	bhi.n	80297f8 <HAL_SPI_Transmit+0x158>
 80297f0:	683b      	ldr	r3, [r7, #0]
 80297f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80297f6:	d102      	bne.n	80297fe <HAL_SPI_Transmit+0x15e>
 80297f8:	683b      	ldr	r3, [r7, #0]
 80297fa:	2b00      	cmp	r3, #0
 80297fc:	d102      	bne.n	8029804 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80297fe:	2303      	movs	r3, #3
 8029800:	77fb      	strb	r3, [r7, #31]
          goto error;
 8029802:	e074      	b.n	80298ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8029804:	68fb      	ldr	r3, [r7, #12]
 8029806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8029808:	b29b      	uxth	r3, r3
 802980a:	2b00      	cmp	r3, #0
 802980c:	d1ce      	bne.n	80297ac <HAL_SPI_Transmit+0x10c>
 802980e:	e04c      	b.n	80298aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029810:	68fb      	ldr	r3, [r7, #12]
 8029812:	685b      	ldr	r3, [r3, #4]
 8029814:	2b00      	cmp	r3, #0
 8029816:	d002      	beq.n	802981e <HAL_SPI_Transmit+0x17e>
 8029818:	8afb      	ldrh	r3, [r7, #22]
 802981a:	2b01      	cmp	r3, #1
 802981c:	d140      	bne.n	80298a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802981e:	68fb      	ldr	r3, [r7, #12]
 8029820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8029822:	68fb      	ldr	r3, [r7, #12]
 8029824:	681b      	ldr	r3, [r3, #0]
 8029826:	330c      	adds	r3, #12
 8029828:	7812      	ldrb	r2, [r2, #0]
 802982a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802982c:	68fb      	ldr	r3, [r7, #12]
 802982e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029830:	1c5a      	adds	r2, r3, #1
 8029832:	68fb      	ldr	r3, [r7, #12]
 8029834:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8029836:	68fb      	ldr	r3, [r7, #12]
 8029838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802983a:	b29b      	uxth	r3, r3
 802983c:	3b01      	subs	r3, #1
 802983e:	b29a      	uxth	r2, r3
 8029840:	68fb      	ldr	r3, [r7, #12]
 8029842:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8029844:	e02c      	b.n	80298a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8029846:	68fb      	ldr	r3, [r7, #12]
 8029848:	681b      	ldr	r3, [r3, #0]
 802984a:	689b      	ldr	r3, [r3, #8]
 802984c:	f003 0302 	and.w	r3, r3, #2
 8029850:	2b02      	cmp	r3, #2
 8029852:	d113      	bne.n	802987c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8029854:	68fb      	ldr	r3, [r7, #12]
 8029856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8029858:	68fb      	ldr	r3, [r7, #12]
 802985a:	681b      	ldr	r3, [r3, #0]
 802985c:	330c      	adds	r3, #12
 802985e:	7812      	ldrb	r2, [r2, #0]
 8029860:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8029862:	68fb      	ldr	r3, [r7, #12]
 8029864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029866:	1c5a      	adds	r2, r3, #1
 8029868:	68fb      	ldr	r3, [r7, #12]
 802986a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 802986c:	68fb      	ldr	r3, [r7, #12]
 802986e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8029870:	b29b      	uxth	r3, r3
 8029872:	3b01      	subs	r3, #1
 8029874:	b29a      	uxth	r2, r3
 8029876:	68fb      	ldr	r3, [r7, #12]
 8029878:	86da      	strh	r2, [r3, #54]	@ 0x36
 802987a:	e011      	b.n	80298a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802987c:	f7fb fd66 	bl	802534c <HAL_GetTick>
 8029880:	4602      	mov	r2, r0
 8029882:	69bb      	ldr	r3, [r7, #24]
 8029884:	1ad3      	subs	r3, r2, r3
 8029886:	683a      	ldr	r2, [r7, #0]
 8029888:	429a      	cmp	r2, r3
 802988a:	d803      	bhi.n	8029894 <HAL_SPI_Transmit+0x1f4>
 802988c:	683b      	ldr	r3, [r7, #0]
 802988e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029892:	d102      	bne.n	802989a <HAL_SPI_Transmit+0x1fa>
 8029894:	683b      	ldr	r3, [r7, #0]
 8029896:	2b00      	cmp	r3, #0
 8029898:	d102      	bne.n	80298a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 802989a:	2303      	movs	r3, #3
 802989c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802989e:	e026      	b.n	80298ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80298a0:	68fb      	ldr	r3, [r7, #12]
 80298a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80298a4:	b29b      	uxth	r3, r3
 80298a6:	2b00      	cmp	r3, #0
 80298a8:	d1cd      	bne.n	8029846 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80298aa:	69ba      	ldr	r2, [r7, #24]
 80298ac:	6839      	ldr	r1, [r7, #0]
 80298ae:	68f8      	ldr	r0, [r7, #12]
 80298b0:	f001 f80e 	bl	802a8d0 <SPI_EndRxTxTransaction>
 80298b4:	4603      	mov	r3, r0
 80298b6:	2b00      	cmp	r3, #0
 80298b8:	d002      	beq.n	80298c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80298ba:	68fb      	ldr	r3, [r7, #12]
 80298bc:	2220      	movs	r2, #32
 80298be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80298c0:	68fb      	ldr	r3, [r7, #12]
 80298c2:	689b      	ldr	r3, [r3, #8]
 80298c4:	2b00      	cmp	r3, #0
 80298c6:	d10a      	bne.n	80298de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80298c8:	2300      	movs	r3, #0
 80298ca:	613b      	str	r3, [r7, #16]
 80298cc:	68fb      	ldr	r3, [r7, #12]
 80298ce:	681b      	ldr	r3, [r3, #0]
 80298d0:	68db      	ldr	r3, [r3, #12]
 80298d2:	613b      	str	r3, [r7, #16]
 80298d4:	68fb      	ldr	r3, [r7, #12]
 80298d6:	681b      	ldr	r3, [r3, #0]
 80298d8:	689b      	ldr	r3, [r3, #8]
 80298da:	613b      	str	r3, [r7, #16]
 80298dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80298de:	68fb      	ldr	r3, [r7, #12]
 80298e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80298e2:	2b00      	cmp	r3, #0
 80298e4:	d002      	beq.n	80298ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80298e6:	2301      	movs	r3, #1
 80298e8:	77fb      	strb	r3, [r7, #31]
 80298ea:	e000      	b.n	80298ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80298ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80298ee:	68fb      	ldr	r3, [r7, #12]
 80298f0:	2201      	movs	r2, #1
 80298f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80298f6:	68fb      	ldr	r3, [r7, #12]
 80298f8:	2200      	movs	r2, #0
 80298fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80298fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8029900:	4618      	mov	r0, r3
 8029902:	3720      	adds	r7, #32
 8029904:	46bd      	mov	sp, r7
 8029906:	bd80      	pop	{r7, pc}

08029908 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8029908:	b480      	push	{r7}
 802990a:	b087      	sub	sp, #28
 802990c:	af00      	add	r7, sp, #0
 802990e:	60f8      	str	r0, [r7, #12]
 8029910:	60b9      	str	r1, [r7, #8]
 8029912:	4613      	mov	r3, r2
 8029914:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8029916:	2300      	movs	r3, #0
 8029918:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802991a:	68fb      	ldr	r3, [r7, #12]
 802991c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8029920:	2b01      	cmp	r3, #1
 8029922:	d101      	bne.n	8029928 <HAL_SPI_Transmit_IT+0x20>
 8029924:	2302      	movs	r3, #2
 8029926:	e067      	b.n	80299f8 <HAL_SPI_Transmit_IT+0xf0>
 8029928:	68fb      	ldr	r3, [r7, #12]
 802992a:	2201      	movs	r2, #1
 802992c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8029930:	68bb      	ldr	r3, [r7, #8]
 8029932:	2b00      	cmp	r3, #0
 8029934:	d002      	beq.n	802993c <HAL_SPI_Transmit_IT+0x34>
 8029936:	88fb      	ldrh	r3, [r7, #6]
 8029938:	2b00      	cmp	r3, #0
 802993a:	d102      	bne.n	8029942 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 802993c:	2301      	movs	r3, #1
 802993e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029940:	e055      	b.n	80299ee <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8029942:	68fb      	ldr	r3, [r7, #12]
 8029944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029948:	b2db      	uxtb	r3, r3
 802994a:	2b01      	cmp	r3, #1
 802994c:	d002      	beq.n	8029954 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 802994e:	2302      	movs	r3, #2
 8029950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029952:	e04c      	b.n	80299ee <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8029954:	68fb      	ldr	r3, [r7, #12]
 8029956:	2203      	movs	r2, #3
 8029958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802995c:	68fb      	ldr	r3, [r7, #12]
 802995e:	2200      	movs	r2, #0
 8029960:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8029962:	68fb      	ldr	r3, [r7, #12]
 8029964:	68ba      	ldr	r2, [r7, #8]
 8029966:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8029968:	68fb      	ldr	r3, [r7, #12]
 802996a:	88fa      	ldrh	r2, [r7, #6]
 802996c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 802996e:	68fb      	ldr	r3, [r7, #12]
 8029970:	88fa      	ldrh	r2, [r7, #6]
 8029972:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8029974:	68fb      	ldr	r3, [r7, #12]
 8029976:	2200      	movs	r2, #0
 8029978:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 802997a:	68fb      	ldr	r3, [r7, #12]
 802997c:	2200      	movs	r2, #0
 802997e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8029980:	68fb      	ldr	r3, [r7, #12]
 8029982:	2200      	movs	r2, #0
 8029984:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8029986:	68fb      	ldr	r3, [r7, #12]
 8029988:	2200      	movs	r2, #0
 802998a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	68db      	ldr	r3, [r3, #12]
 8029990:	2b00      	cmp	r3, #0
 8029992:	d003      	beq.n	802999c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8029994:	68fb      	ldr	r3, [r7, #12]
 8029996:	4a1b      	ldr	r2, [pc, #108]	@ (8029a04 <HAL_SPI_Transmit_IT+0xfc>)
 8029998:	645a      	str	r2, [r3, #68]	@ 0x44
 802999a:	e002      	b.n	80299a2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 802999c:	68fb      	ldr	r3, [r7, #12]
 802999e:	4a1a      	ldr	r2, [pc, #104]	@ (8029a08 <HAL_SPI_Transmit_IT+0x100>)
 80299a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80299a2:	68fb      	ldr	r3, [r7, #12]
 80299a4:	689b      	ldr	r3, [r3, #8]
 80299a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80299aa:	d107      	bne.n	80299bc <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80299ac:	68fb      	ldr	r3, [r7, #12]
 80299ae:	681b      	ldr	r3, [r3, #0]
 80299b0:	681a      	ldr	r2, [r3, #0]
 80299b2:	68fb      	ldr	r3, [r7, #12]
 80299b4:	681b      	ldr	r3, [r3, #0]
 80299b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80299ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80299bc:	68fb      	ldr	r3, [r7, #12]
 80299be:	681b      	ldr	r3, [r3, #0]
 80299c0:	685a      	ldr	r2, [r3, #4]
 80299c2:	68fb      	ldr	r3, [r7, #12]
 80299c4:	681b      	ldr	r3, [r3, #0]
 80299c6:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80299ca:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80299cc:	68fb      	ldr	r3, [r7, #12]
 80299ce:	681b      	ldr	r3, [r3, #0]
 80299d0:	681b      	ldr	r3, [r3, #0]
 80299d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80299d6:	2b40      	cmp	r3, #64	@ 0x40
 80299d8:	d008      	beq.n	80299ec <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80299da:	68fb      	ldr	r3, [r7, #12]
 80299dc:	681b      	ldr	r3, [r3, #0]
 80299de:	681a      	ldr	r2, [r3, #0]
 80299e0:	68fb      	ldr	r3, [r7, #12]
 80299e2:	681b      	ldr	r3, [r3, #0]
 80299e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80299e8:	601a      	str	r2, [r3, #0]
 80299ea:	e000      	b.n	80299ee <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 80299ec:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80299ee:	68fb      	ldr	r3, [r7, #12]
 80299f0:	2200      	movs	r2, #0
 80299f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80299f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80299f8:	4618      	mov	r0, r3
 80299fa:	371c      	adds	r7, #28
 80299fc:	46bd      	mov	sp, r7
 80299fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a02:	4770      	bx	lr
 8029a04:	0802a6ed 	.word	0x0802a6ed
 8029a08:	0802a6a7 	.word	0x0802a6a7

08029a0c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8029a0c:	b580      	push	{r7, lr}
 8029a0e:	b086      	sub	sp, #24
 8029a10:	af00      	add	r7, sp, #0
 8029a12:	60f8      	str	r0, [r7, #12]
 8029a14:	60b9      	str	r1, [r7, #8]
 8029a16:	4613      	mov	r3, r2
 8029a18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8029a1a:	2300      	movs	r3, #0
 8029a1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8029a1e:	68fb      	ldr	r3, [r7, #12]
 8029a20:	689b      	ldr	r3, [r3, #8]
 8029a22:	2b00      	cmp	r3, #0
 8029a24:	d110      	bne.n	8029a48 <HAL_SPI_Receive_IT+0x3c>
 8029a26:	68fb      	ldr	r3, [r7, #12]
 8029a28:	685b      	ldr	r3, [r3, #4]
 8029a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8029a2e:	d10b      	bne.n	8029a48 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8029a30:	68fb      	ldr	r3, [r7, #12]
 8029a32:	2204      	movs	r2, #4
 8029a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8029a38:	88fb      	ldrh	r3, [r7, #6]
 8029a3a:	68ba      	ldr	r2, [r7, #8]
 8029a3c:	68b9      	ldr	r1, [r7, #8]
 8029a3e:	68f8      	ldr	r0, [r7, #12]
 8029a40:	f000 f87a 	bl	8029b38 <HAL_SPI_TransmitReceive_IT>
 8029a44:	4603      	mov	r3, r0
 8029a46:	e06e      	b.n	8029b26 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8029a48:	68fb      	ldr	r3, [r7, #12]
 8029a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8029a4e:	2b01      	cmp	r3, #1
 8029a50:	d101      	bne.n	8029a56 <HAL_SPI_Receive_IT+0x4a>
 8029a52:	2302      	movs	r3, #2
 8029a54:	e067      	b.n	8029b26 <HAL_SPI_Receive_IT+0x11a>
 8029a56:	68fb      	ldr	r3, [r7, #12]
 8029a58:	2201      	movs	r2, #1
 8029a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8029a5e:	68fb      	ldr	r3, [r7, #12]
 8029a60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029a64:	b2db      	uxtb	r3, r3
 8029a66:	2b01      	cmp	r3, #1
 8029a68:	d002      	beq.n	8029a70 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8029a6a:	2302      	movs	r3, #2
 8029a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029a6e:	e055      	b.n	8029b1c <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8029a70:	68bb      	ldr	r3, [r7, #8]
 8029a72:	2b00      	cmp	r3, #0
 8029a74:	d002      	beq.n	8029a7c <HAL_SPI_Receive_IT+0x70>
 8029a76:	88fb      	ldrh	r3, [r7, #6]
 8029a78:	2b00      	cmp	r3, #0
 8029a7a:	d102      	bne.n	8029a82 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8029a7c:	2301      	movs	r3, #1
 8029a7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029a80:	e04c      	b.n	8029b1c <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8029a82:	68fb      	ldr	r3, [r7, #12]
 8029a84:	2204      	movs	r2, #4
 8029a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029a8a:	68fb      	ldr	r3, [r7, #12]
 8029a8c:	2200      	movs	r2, #0
 8029a8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8029a90:	68fb      	ldr	r3, [r7, #12]
 8029a92:	68ba      	ldr	r2, [r7, #8]
 8029a94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8029a96:	68fb      	ldr	r3, [r7, #12]
 8029a98:	88fa      	ldrh	r2, [r7, #6]
 8029a9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8029a9c:	68fb      	ldr	r3, [r7, #12]
 8029a9e:	88fa      	ldrh	r2, [r7, #6]
 8029aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8029aa2:	68fb      	ldr	r3, [r7, #12]
 8029aa4:	2200      	movs	r2, #0
 8029aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8029aa8:	68fb      	ldr	r3, [r7, #12]
 8029aaa:	2200      	movs	r2, #0
 8029aac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8029aae:	68fb      	ldr	r3, [r7, #12]
 8029ab0:	2200      	movs	r2, #0
 8029ab2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8029ab4:	68fb      	ldr	r3, [r7, #12]
 8029ab6:	2200      	movs	r2, #0
 8029ab8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8029aba:	68fb      	ldr	r3, [r7, #12]
 8029abc:	68db      	ldr	r3, [r3, #12]
 8029abe:	2b00      	cmp	r3, #0
 8029ac0:	d003      	beq.n	8029aca <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8029ac2:	68fb      	ldr	r3, [r7, #12]
 8029ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8029b30 <HAL_SPI_Receive_IT+0x124>)
 8029ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8029ac8:	e002      	b.n	8029ad0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8029aca:	68fb      	ldr	r3, [r7, #12]
 8029acc:	4a19      	ldr	r2, [pc, #100]	@ (8029b34 <HAL_SPI_Receive_IT+0x128>)
 8029ace:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029ad0:	68fb      	ldr	r3, [r7, #12]
 8029ad2:	689b      	ldr	r3, [r3, #8]
 8029ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8029ad8:	d107      	bne.n	8029aea <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8029ada:	68fb      	ldr	r3, [r7, #12]
 8029adc:	681b      	ldr	r3, [r3, #0]
 8029ade:	681a      	ldr	r2, [r3, #0]
 8029ae0:	68fb      	ldr	r3, [r7, #12]
 8029ae2:	681b      	ldr	r3, [r3, #0]
 8029ae4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8029ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8029aea:	68fb      	ldr	r3, [r7, #12]
 8029aec:	681b      	ldr	r3, [r3, #0]
 8029aee:	685a      	ldr	r2, [r3, #4]
 8029af0:	68fb      	ldr	r3, [r7, #12]
 8029af2:	681b      	ldr	r3, [r3, #0]
 8029af4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8029af8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8029afa:	68fb      	ldr	r3, [r7, #12]
 8029afc:	681b      	ldr	r3, [r3, #0]
 8029afe:	681b      	ldr	r3, [r3, #0]
 8029b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029b04:	2b40      	cmp	r3, #64	@ 0x40
 8029b06:	d008      	beq.n	8029b1a <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8029b08:	68fb      	ldr	r3, [r7, #12]
 8029b0a:	681b      	ldr	r3, [r3, #0]
 8029b0c:	681a      	ldr	r2, [r3, #0]
 8029b0e:	68fb      	ldr	r3, [r7, #12]
 8029b10:	681b      	ldr	r3, [r3, #0]
 8029b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8029b16:	601a      	str	r2, [r3, #0]
 8029b18:	e000      	b.n	8029b1c <HAL_SPI_Receive_IT+0x110>
  }

error :
 8029b1a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8029b1c:	68fb      	ldr	r3, [r7, #12]
 8029b1e:	2200      	movs	r2, #0
 8029b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8029b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8029b26:	4618      	mov	r0, r3
 8029b28:	3718      	adds	r7, #24
 8029b2a:	46bd      	mov	sp, r7
 8029b2c:	bd80      	pop	{r7, pc}
 8029b2e:	bf00      	nop
 8029b30:	0802a661 	.word	0x0802a661
 8029b34:	0802a617 	.word	0x0802a617

08029b38 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8029b38:	b480      	push	{r7}
 8029b3a:	b087      	sub	sp, #28
 8029b3c:	af00      	add	r7, sp, #0
 8029b3e:	60f8      	str	r0, [r7, #12]
 8029b40:	60b9      	str	r1, [r7, #8]
 8029b42:	607a      	str	r2, [r7, #4]
 8029b44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8029b46:	2300      	movs	r3, #0
 8029b48:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8029b4a:	68fb      	ldr	r3, [r7, #12]
 8029b4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8029b50:	2b01      	cmp	r3, #1
 8029b52:	d101      	bne.n	8029b58 <HAL_SPI_TransmitReceive_IT+0x20>
 8029b54:	2302      	movs	r3, #2
 8029b56:	e075      	b.n	8029c44 <HAL_SPI_TransmitReceive_IT+0x10c>
 8029b58:	68fb      	ldr	r3, [r7, #12]
 8029b5a:	2201      	movs	r2, #1
 8029b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8029b60:	68fb      	ldr	r3, [r7, #12]
 8029b62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029b66:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8029b68:	68fb      	ldr	r3, [r7, #12]
 8029b6a:	685b      	ldr	r3, [r3, #4]
 8029b6c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8029b6e:	7dbb      	ldrb	r3, [r7, #22]
 8029b70:	2b01      	cmp	r3, #1
 8029b72:	d00d      	beq.n	8029b90 <HAL_SPI_TransmitReceive_IT+0x58>
 8029b74:	693b      	ldr	r3, [r7, #16]
 8029b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8029b7a:	d106      	bne.n	8029b8a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8029b7c:	68fb      	ldr	r3, [r7, #12]
 8029b7e:	689b      	ldr	r3, [r3, #8]
 8029b80:	2b00      	cmp	r3, #0
 8029b82:	d102      	bne.n	8029b8a <HAL_SPI_TransmitReceive_IT+0x52>
 8029b84:	7dbb      	ldrb	r3, [r7, #22]
 8029b86:	2b04      	cmp	r3, #4
 8029b88:	d002      	beq.n	8029b90 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8029b8a:	2302      	movs	r3, #2
 8029b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029b8e:	e054      	b.n	8029c3a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8029b90:	68bb      	ldr	r3, [r7, #8]
 8029b92:	2b00      	cmp	r3, #0
 8029b94:	d005      	beq.n	8029ba2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8029b96:	687b      	ldr	r3, [r7, #4]
 8029b98:	2b00      	cmp	r3, #0
 8029b9a:	d002      	beq.n	8029ba2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8029b9c:	887b      	ldrh	r3, [r7, #2]
 8029b9e:	2b00      	cmp	r3, #0
 8029ba0:	d102      	bne.n	8029ba8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8029ba2:	2301      	movs	r3, #1
 8029ba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029ba6:	e048      	b.n	8029c3a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8029ba8:	68fb      	ldr	r3, [r7, #12]
 8029baa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029bae:	b2db      	uxtb	r3, r3
 8029bb0:	2b04      	cmp	r3, #4
 8029bb2:	d003      	beq.n	8029bbc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8029bb4:	68fb      	ldr	r3, [r7, #12]
 8029bb6:	2205      	movs	r2, #5
 8029bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029bbc:	68fb      	ldr	r3, [r7, #12]
 8029bbe:	2200      	movs	r2, #0
 8029bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8029bc2:	68fb      	ldr	r3, [r7, #12]
 8029bc4:	68ba      	ldr	r2, [r7, #8]
 8029bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8029bc8:	68fb      	ldr	r3, [r7, #12]
 8029bca:	887a      	ldrh	r2, [r7, #2]
 8029bcc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8029bce:	68fb      	ldr	r3, [r7, #12]
 8029bd0:	887a      	ldrh	r2, [r7, #2]
 8029bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8029bd4:	68fb      	ldr	r3, [r7, #12]
 8029bd6:	687a      	ldr	r2, [r7, #4]
 8029bd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8029bda:	68fb      	ldr	r3, [r7, #12]
 8029bdc:	887a      	ldrh	r2, [r7, #2]
 8029bde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8029be0:	68fb      	ldr	r3, [r7, #12]
 8029be2:	887a      	ldrh	r2, [r7, #2]
 8029be4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8029be6:	68fb      	ldr	r3, [r7, #12]
 8029be8:	68db      	ldr	r3, [r3, #12]
 8029bea:	2b00      	cmp	r3, #0
 8029bec:	d006      	beq.n	8029bfc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8029bee:	68fb      	ldr	r3, [r7, #12]
 8029bf0:	4a17      	ldr	r2, [pc, #92]	@ (8029c50 <HAL_SPI_TransmitReceive_IT+0x118>)
 8029bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8029bf4:	68fb      	ldr	r3, [r7, #12]
 8029bf6:	4a17      	ldr	r2, [pc, #92]	@ (8029c54 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8029bf8:	645a      	str	r2, [r3, #68]	@ 0x44
 8029bfa:	e005      	b.n	8029c08 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8029bfc:	68fb      	ldr	r3, [r7, #12]
 8029bfe:	4a16      	ldr	r2, [pc, #88]	@ (8029c58 <HAL_SPI_TransmitReceive_IT+0x120>)
 8029c00:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8029c02:	68fb      	ldr	r3, [r7, #12]
 8029c04:	4a15      	ldr	r2, [pc, #84]	@ (8029c5c <HAL_SPI_TransmitReceive_IT+0x124>)
 8029c06:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8029c08:	68fb      	ldr	r3, [r7, #12]
 8029c0a:	681b      	ldr	r3, [r3, #0]
 8029c0c:	685a      	ldr	r2, [r3, #4]
 8029c0e:	68fb      	ldr	r3, [r7, #12]
 8029c10:	681b      	ldr	r3, [r3, #0]
 8029c12:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8029c16:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8029c18:	68fb      	ldr	r3, [r7, #12]
 8029c1a:	681b      	ldr	r3, [r3, #0]
 8029c1c:	681b      	ldr	r3, [r3, #0]
 8029c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029c22:	2b40      	cmp	r3, #64	@ 0x40
 8029c24:	d008      	beq.n	8029c38 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8029c26:	68fb      	ldr	r3, [r7, #12]
 8029c28:	681b      	ldr	r3, [r3, #0]
 8029c2a:	681a      	ldr	r2, [r3, #0]
 8029c2c:	68fb      	ldr	r3, [r7, #12]
 8029c2e:	681b      	ldr	r3, [r3, #0]
 8029c30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8029c34:	601a      	str	r2, [r3, #0]
 8029c36:	e000      	b.n	8029c3a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8029c38:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8029c3a:	68fb      	ldr	r3, [r7, #12]
 8029c3c:	2200      	movs	r2, #0
 8029c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8029c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8029c44:	4618      	mov	r0, r3
 8029c46:	371c      	adds	r7, #28
 8029c48:	46bd      	mov	sp, r7
 8029c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c4e:	4770      	bx	lr
 8029c50:	0802a559 	.word	0x0802a559
 8029c54:	0802a5b9 	.word	0x0802a5b9
 8029c58:	0802a495 	.word	0x0802a495
 8029c5c:	0802a4f9 	.word	0x0802a4f9

08029c60 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8029c60:	b580      	push	{r7, lr}
 8029c62:	b086      	sub	sp, #24
 8029c64:	af00      	add	r7, sp, #0
 8029c66:	60f8      	str	r0, [r7, #12]
 8029c68:	60b9      	str	r1, [r7, #8]
 8029c6a:	4613      	mov	r3, r2
 8029c6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8029c6e:	2300      	movs	r3, #0
 8029c70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8029c72:	68fb      	ldr	r3, [r7, #12]
 8029c74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8029c78:	2b01      	cmp	r3, #1
 8029c7a:	d101      	bne.n	8029c80 <HAL_SPI_Transmit_DMA+0x20>
 8029c7c:	2302      	movs	r3, #2
 8029c7e:	e093      	b.n	8029da8 <HAL_SPI_Transmit_DMA+0x148>
 8029c80:	68fb      	ldr	r3, [r7, #12]
 8029c82:	2201      	movs	r2, #1
 8029c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8029c88:	68fb      	ldr	r3, [r7, #12]
 8029c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029c8e:	b2db      	uxtb	r3, r3
 8029c90:	2b01      	cmp	r3, #1
 8029c92:	d002      	beq.n	8029c9a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8029c94:	2302      	movs	r3, #2
 8029c96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029c98:	e081      	b.n	8029d9e <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8029c9a:	68bb      	ldr	r3, [r7, #8]
 8029c9c:	2b00      	cmp	r3, #0
 8029c9e:	d002      	beq.n	8029ca6 <HAL_SPI_Transmit_DMA+0x46>
 8029ca0:	88fb      	ldrh	r3, [r7, #6]
 8029ca2:	2b00      	cmp	r3, #0
 8029ca4:	d102      	bne.n	8029cac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8029ca6:	2301      	movs	r3, #1
 8029ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029caa:	e078      	b.n	8029d9e <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8029cac:	68fb      	ldr	r3, [r7, #12]
 8029cae:	2203      	movs	r2, #3
 8029cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029cb4:	68fb      	ldr	r3, [r7, #12]
 8029cb6:	2200      	movs	r2, #0
 8029cb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8029cba:	68fb      	ldr	r3, [r7, #12]
 8029cbc:	68ba      	ldr	r2, [r7, #8]
 8029cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8029cc0:	68fb      	ldr	r3, [r7, #12]
 8029cc2:	88fa      	ldrh	r2, [r7, #6]
 8029cc4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8029cc6:	68fb      	ldr	r3, [r7, #12]
 8029cc8:	88fa      	ldrh	r2, [r7, #6]
 8029cca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8029ccc:	68fb      	ldr	r3, [r7, #12]
 8029cce:	2200      	movs	r2, #0
 8029cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8029cd2:	68fb      	ldr	r3, [r7, #12]
 8029cd4:	2200      	movs	r2, #0
 8029cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8029cd8:	68fb      	ldr	r3, [r7, #12]
 8029cda:	2200      	movs	r2, #0
 8029cdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8029cde:	68fb      	ldr	r3, [r7, #12]
 8029ce0:	2200      	movs	r2, #0
 8029ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8029ce4:	68fb      	ldr	r3, [r7, #12]
 8029ce6:	2200      	movs	r2, #0
 8029ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029cea:	68fb      	ldr	r3, [r7, #12]
 8029cec:	689b      	ldr	r3, [r3, #8]
 8029cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8029cf2:	d107      	bne.n	8029d04 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8029cf4:	68fb      	ldr	r3, [r7, #12]
 8029cf6:	681b      	ldr	r3, [r3, #0]
 8029cf8:	681a      	ldr	r2, [r3, #0]
 8029cfa:	68fb      	ldr	r3, [r7, #12]
 8029cfc:	681b      	ldr	r3, [r3, #0]
 8029cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8029d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8029d04:	68fb      	ldr	r3, [r7, #12]
 8029d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029d08:	4a29      	ldr	r2, [pc, #164]	@ (8029db0 <HAL_SPI_Transmit_DMA+0x150>)
 8029d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8029d0c:	68fb      	ldr	r3, [r7, #12]
 8029d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029d10:	4a28      	ldr	r2, [pc, #160]	@ (8029db4 <HAL_SPI_Transmit_DMA+0x154>)
 8029d12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8029d14:	68fb      	ldr	r3, [r7, #12]
 8029d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029d18:	4a27      	ldr	r2, [pc, #156]	@ (8029db8 <HAL_SPI_Transmit_DMA+0x158>)
 8029d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8029d1c:	68fb      	ldr	r3, [r7, #12]
 8029d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029d20:	2200      	movs	r2, #0
 8029d22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8029d24:	68fb      	ldr	r3, [r7, #12]
 8029d26:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8029d28:	68fb      	ldr	r3, [r7, #12]
 8029d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029d2c:	4619      	mov	r1, r3
 8029d2e:	68fb      	ldr	r3, [r7, #12]
 8029d30:	681b      	ldr	r3, [r3, #0]
 8029d32:	330c      	adds	r3, #12
 8029d34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8029d36:	68fb      	ldr	r3, [r7, #12]
 8029d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8029d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8029d3c:	f7fc fa20 	bl	8026180 <HAL_DMA_Start_IT>
 8029d40:	4603      	mov	r3, r0
 8029d42:	2b00      	cmp	r3, #0
 8029d44:	d00c      	beq.n	8029d60 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8029d46:	68fb      	ldr	r3, [r7, #12]
 8029d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029d4a:	f043 0210 	orr.w	r2, r3, #16
 8029d4e:	68fb      	ldr	r3, [r7, #12]
 8029d50:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8029d52:	2301      	movs	r3, #1
 8029d54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8029d56:	68fb      	ldr	r3, [r7, #12]
 8029d58:	2201      	movs	r2, #1
 8029d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8029d5e:	e01e      	b.n	8029d9e <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8029d60:	68fb      	ldr	r3, [r7, #12]
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	681b      	ldr	r3, [r3, #0]
 8029d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029d6a:	2b40      	cmp	r3, #64	@ 0x40
 8029d6c:	d007      	beq.n	8029d7e <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8029d6e:	68fb      	ldr	r3, [r7, #12]
 8029d70:	681b      	ldr	r3, [r3, #0]
 8029d72:	681a      	ldr	r2, [r3, #0]
 8029d74:	68fb      	ldr	r3, [r7, #12]
 8029d76:	681b      	ldr	r3, [r3, #0]
 8029d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8029d7c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8029d7e:	68fb      	ldr	r3, [r7, #12]
 8029d80:	681b      	ldr	r3, [r3, #0]
 8029d82:	685a      	ldr	r2, [r3, #4]
 8029d84:	68fb      	ldr	r3, [r7, #12]
 8029d86:	681b      	ldr	r3, [r3, #0]
 8029d88:	f042 0220 	orr.w	r2, r2, #32
 8029d8c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8029d8e:	68fb      	ldr	r3, [r7, #12]
 8029d90:	681b      	ldr	r3, [r3, #0]
 8029d92:	685a      	ldr	r2, [r3, #4]
 8029d94:	68fb      	ldr	r3, [r7, #12]
 8029d96:	681b      	ldr	r3, [r3, #0]
 8029d98:	f042 0202 	orr.w	r2, r2, #2
 8029d9c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8029d9e:	68fb      	ldr	r3, [r7, #12]
 8029da0:	2200      	movs	r2, #0
 8029da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8029da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8029da8:	4618      	mov	r0, r3
 8029daa:	3718      	adds	r7, #24
 8029dac:	46bd      	mov	sp, r7
 8029dae:	bd80      	pop	{r7, pc}
 8029db0:	0802a27d 	.word	0x0802a27d
 8029db4:	0802a1d5 	.word	0x0802a1d5
 8029db8:	0802a299 	.word	0x0802a299

08029dbc <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8029dbc:	b580      	push	{r7, lr}
 8029dbe:	b088      	sub	sp, #32
 8029dc0:	af00      	add	r7, sp, #0
 8029dc2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8029dc4:	2300      	movs	r3, #0
 8029dc6:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8029dc8:	2301      	movs	r3, #1
 8029dca:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8029dcc:	4b72      	ldr	r3, [pc, #456]	@ (8029f98 <HAL_SPI_Abort_IT+0x1dc>)
 8029dce:	681b      	ldr	r3, [r3, #0]
 8029dd0:	4a72      	ldr	r2, [pc, #456]	@ (8029f9c <HAL_SPI_Abort_IT+0x1e0>)
 8029dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8029dd6:	0a5b      	lsrs	r3, r3, #9
 8029dd8:	2264      	movs	r2, #100	@ 0x64
 8029dda:	fb02 f303 	mul.w	r3, r2, r3
 8029dde:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8029de0:	693b      	ldr	r3, [r7, #16]
 8029de2:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8029de4:	687b      	ldr	r3, [r7, #4]
 8029de6:	681b      	ldr	r3, [r3, #0]
 8029de8:	685a      	ldr	r2, [r3, #4]
 8029dea:	687b      	ldr	r3, [r7, #4]
 8029dec:	681b      	ldr	r3, [r3, #0]
 8029dee:	f022 0220 	bic.w	r2, r2, #32
 8029df2:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	681b      	ldr	r3, [r3, #0]
 8029df8:	685b      	ldr	r3, [r3, #4]
 8029dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8029dfe:	2b80      	cmp	r3, #128	@ 0x80
 8029e00:	d117      	bne.n	8029e32 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8029e02:	687b      	ldr	r3, [r7, #4]
 8029e04:	4a66      	ldr	r2, [pc, #408]	@ (8029fa0 <HAL_SPI_Abort_IT+0x1e4>)
 8029e06:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8029e08:	697b      	ldr	r3, [r7, #20]
 8029e0a:	2b00      	cmp	r3, #0
 8029e0c:	d106      	bne.n	8029e1c <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8029e16:	687b      	ldr	r3, [r7, #4]
 8029e18:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8029e1a:	e008      	b.n	8029e2e <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8029e1c:	697b      	ldr	r3, [r7, #20]
 8029e1e:	3b01      	subs	r3, #1
 8029e20:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029e28:	b2db      	uxtb	r3, r3
 8029e2a:	2b07      	cmp	r3, #7
 8029e2c:	d1ec      	bne.n	8029e08 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8029e2e:	693b      	ldr	r3, [r7, #16]
 8029e30:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8029e32:	687b      	ldr	r3, [r7, #4]
 8029e34:	681b      	ldr	r3, [r3, #0]
 8029e36:	685b      	ldr	r3, [r3, #4]
 8029e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029e3c:	2b40      	cmp	r3, #64	@ 0x40
 8029e3e:	d117      	bne.n	8029e70 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8029e40:	687b      	ldr	r3, [r7, #4]
 8029e42:	4a58      	ldr	r2, [pc, #352]	@ (8029fa4 <HAL_SPI_Abort_IT+0x1e8>)
 8029e44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8029e46:	697b      	ldr	r3, [r7, #20]
 8029e48:	2b00      	cmp	r3, #0
 8029e4a:	d106      	bne.n	8029e5a <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029e50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8029e54:	687b      	ldr	r3, [r7, #4]
 8029e56:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8029e58:	e008      	b.n	8029e6c <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8029e5a:	697b      	ldr	r3, [r7, #20]
 8029e5c:	3b01      	subs	r3, #1
 8029e5e:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8029e60:	687b      	ldr	r3, [r7, #4]
 8029e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8029e66:	b2db      	uxtb	r3, r3
 8029e68:	2b07      	cmp	r3, #7
 8029e6a:	d1ec      	bne.n	8029e46 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8029e6c:	693b      	ldr	r3, [r7, #16]
 8029e6e:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8029e70:	687b      	ldr	r3, [r7, #4]
 8029e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029e74:	2b00      	cmp	r3, #0
 8029e76:	d00f      	beq.n	8029e98 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8029e78:	687b      	ldr	r3, [r7, #4]
 8029e7a:	681b      	ldr	r3, [r3, #0]
 8029e7c:	685b      	ldr	r3, [r3, #4]
 8029e7e:	f003 0302 	and.w	r3, r3, #2
 8029e82:	2b02      	cmp	r3, #2
 8029e84:	d104      	bne.n	8029e90 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029e8a:	4a47      	ldr	r2, [pc, #284]	@ (8029fa8 <HAL_SPI_Abort_IT+0x1ec>)
 8029e8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8029e8e:	e003      	b.n	8029e98 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8029e90:	687b      	ldr	r3, [r7, #4]
 8029e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029e94:	2200      	movs	r2, #0
 8029e96:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8029e98:	687b      	ldr	r3, [r7, #4]
 8029e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8029e9c:	2b00      	cmp	r3, #0
 8029e9e:	d00f      	beq.n	8029ec0 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8029ea0:	687b      	ldr	r3, [r7, #4]
 8029ea2:	681b      	ldr	r3, [r3, #0]
 8029ea4:	685b      	ldr	r3, [r3, #4]
 8029ea6:	f003 0301 	and.w	r3, r3, #1
 8029eaa:	2b01      	cmp	r3, #1
 8029eac:	d104      	bne.n	8029eb8 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8029eae:	687b      	ldr	r3, [r7, #4]
 8029eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8029eb2:	4a3e      	ldr	r2, [pc, #248]	@ (8029fac <HAL_SPI_Abort_IT+0x1f0>)
 8029eb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8029eb6:	e003      	b.n	8029ec0 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8029eb8:	687b      	ldr	r3, [r7, #4]
 8029eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8029ebc:	2200      	movs	r2, #0
 8029ebe:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8029ec0:	687b      	ldr	r3, [r7, #4]
 8029ec2:	681b      	ldr	r3, [r3, #0]
 8029ec4:	685b      	ldr	r3, [r3, #4]
 8029ec6:	f003 0302 	and.w	r3, r3, #2
 8029eca:	2b02      	cmp	r3, #2
 8029ecc:	d115      	bne.n	8029efa <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8029ece:	687b      	ldr	r3, [r7, #4]
 8029ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029ed2:	2b00      	cmp	r3, #0
 8029ed4:	d011      	beq.n	8029efa <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8029ed6:	687b      	ldr	r3, [r7, #4]
 8029ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029eda:	4618      	mov	r0, r3
 8029edc:	f7fc fa18 	bl	8026310 <HAL_DMA_Abort_IT>
 8029ee0:	4603      	mov	r3, r0
 8029ee2:	2b00      	cmp	r3, #0
 8029ee4:	d007      	beq.n	8029ef6 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8029ee6:	687b      	ldr	r3, [r7, #4]
 8029ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029eea:	2200      	movs	r2, #0
 8029eec:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8029eee:	687b      	ldr	r3, [r7, #4]
 8029ef0:	2240      	movs	r2, #64	@ 0x40
 8029ef2:	655a      	str	r2, [r3, #84]	@ 0x54
 8029ef4:	e001      	b.n	8029efa <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8029ef6:	2300      	movs	r3, #0
 8029ef8:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	681b      	ldr	r3, [r3, #0]
 8029efe:	685b      	ldr	r3, [r3, #4]
 8029f00:	f003 0301 	and.w	r3, r3, #1
 8029f04:	2b01      	cmp	r3, #1
 8029f06:	d115      	bne.n	8029f34 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8029f08:	687b      	ldr	r3, [r7, #4]
 8029f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8029f0c:	2b00      	cmp	r3, #0
 8029f0e:	d011      	beq.n	8029f34 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8029f10:	687b      	ldr	r3, [r7, #4]
 8029f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8029f14:	4618      	mov	r0, r3
 8029f16:	f7fc f9fb 	bl	8026310 <HAL_DMA_Abort_IT>
 8029f1a:	4603      	mov	r3, r0
 8029f1c:	2b00      	cmp	r3, #0
 8029f1e:	d007      	beq.n	8029f30 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8029f20:	687b      	ldr	r3, [r7, #4]
 8029f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8029f24:	2200      	movs	r2, #0
 8029f26:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8029f28:	687b      	ldr	r3, [r7, #4]
 8029f2a:	2240      	movs	r2, #64	@ 0x40
 8029f2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8029f2e:	e001      	b.n	8029f34 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8029f30:	2300      	movs	r3, #0
 8029f32:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8029f34:	69bb      	ldr	r3, [r7, #24]
 8029f36:	2b01      	cmp	r3, #1
 8029f38:	d128      	bne.n	8029f8c <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8029f3a:	687b      	ldr	r3, [r7, #4]
 8029f3c:	2200      	movs	r2, #0
 8029f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->TxXferCount = 0U;
 8029f40:	687b      	ldr	r3, [r7, #4]
 8029f42:	2200      	movs	r2, #0
 8029f44:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8029f46:	687b      	ldr	r3, [r7, #4]
 8029f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029f4a:	2b40      	cmp	r3, #64	@ 0x40
 8029f4c:	d102      	bne.n	8029f54 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8029f4e:	2301      	movs	r3, #1
 8029f50:	77fb      	strb	r3, [r7, #31]
 8029f52:	e002      	b.n	8029f5a <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8029f54:	687b      	ldr	r3, [r7, #4]
 8029f56:	2200      	movs	r2, #0
 8029f58:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8029f5a:	2300      	movs	r3, #0
 8029f5c:	60fb      	str	r3, [r7, #12]
 8029f5e:	687b      	ldr	r3, [r7, #4]
 8029f60:	681b      	ldr	r3, [r3, #0]
 8029f62:	68db      	ldr	r3, [r3, #12]
 8029f64:	60fb      	str	r3, [r7, #12]
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	681b      	ldr	r3, [r3, #0]
 8029f6a:	689b      	ldr	r3, [r3, #8]
 8029f6c:	60fb      	str	r3, [r7, #12]
 8029f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8029f70:	2300      	movs	r3, #0
 8029f72:	60bb      	str	r3, [r7, #8]
 8029f74:	687b      	ldr	r3, [r7, #4]
 8029f76:	681b      	ldr	r3, [r3, #0]
 8029f78:	689b      	ldr	r3, [r3, #8]
 8029f7a:	60bb      	str	r3, [r7, #8]
 8029f7c:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8029f7e:	687b      	ldr	r3, [r7, #4]
 8029f80:	2201      	movs	r2, #1
 8029f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8029f86:	6878      	ldr	r0, [r7, #4]
 8029f88:	f000 f91a 	bl	802a1c0 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8029f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8029f8e:	4618      	mov	r0, r3
 8029f90:	3720      	adds	r7, #32
 8029f92:	46bd      	mov	sp, r7
 8029f94:	bd80      	pop	{r7, pc}
 8029f96:	bf00      	nop
 8029f98:	20001028 	.word	0x20001028
 8029f9c:	057619f1 	.word	0x057619f1
 8029fa0:	0802ac09 	.word	0x0802ac09
 8029fa4:	0802ab81 	.word	0x0802ab81
 8029fa8:	0802a301 	.word	0x0802a301
 8029fac:	0802a3d5 	.word	0x0802a3d5

08029fb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8029fb0:	b580      	push	{r7, lr}
 8029fb2:	b088      	sub	sp, #32
 8029fb4:	af00      	add	r7, sp, #0
 8029fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8029fb8:	687b      	ldr	r3, [r7, #4]
 8029fba:	681b      	ldr	r3, [r3, #0]
 8029fbc:	685b      	ldr	r3, [r3, #4]
 8029fbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8029fc0:	687b      	ldr	r3, [r7, #4]
 8029fc2:	681b      	ldr	r3, [r3, #0]
 8029fc4:	689b      	ldr	r3, [r3, #8]
 8029fc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8029fc8:	69bb      	ldr	r3, [r7, #24]
 8029fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029fce:	2b00      	cmp	r3, #0
 8029fd0:	d10e      	bne.n	8029ff0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8029fd2:	69bb      	ldr	r3, [r7, #24]
 8029fd4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8029fd8:	2b00      	cmp	r3, #0
 8029fda:	d009      	beq.n	8029ff0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8029fdc:	69fb      	ldr	r3, [r7, #28]
 8029fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029fe2:	2b00      	cmp	r3, #0
 8029fe4:	d004      	beq.n	8029ff0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029fea:	6878      	ldr	r0, [r7, #4]
 8029fec:	4798      	blx	r3
    return;
 8029fee:	e0ce      	b.n	802a18e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8029ff0:	69bb      	ldr	r3, [r7, #24]
 8029ff2:	f003 0302 	and.w	r3, r3, #2
 8029ff6:	2b00      	cmp	r3, #0
 8029ff8:	d009      	beq.n	802a00e <HAL_SPI_IRQHandler+0x5e>
 8029ffa:	69fb      	ldr	r3, [r7, #28]
 8029ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802a000:	2b00      	cmp	r3, #0
 802a002:	d004      	beq.n	802a00e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802a004:	687b      	ldr	r3, [r7, #4]
 802a006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a008:	6878      	ldr	r0, [r7, #4]
 802a00a:	4798      	blx	r3
    return;
 802a00c:	e0bf      	b.n	802a18e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802a00e:	69bb      	ldr	r3, [r7, #24]
 802a010:	f003 0320 	and.w	r3, r3, #32
 802a014:	2b00      	cmp	r3, #0
 802a016:	d10a      	bne.n	802a02e <HAL_SPI_IRQHandler+0x7e>
 802a018:	69bb      	ldr	r3, [r7, #24]
 802a01a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802a01e:	2b00      	cmp	r3, #0
 802a020:	d105      	bne.n	802a02e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802a022:	69bb      	ldr	r3, [r7, #24]
 802a024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802a028:	2b00      	cmp	r3, #0
 802a02a:	f000 80b0 	beq.w	802a18e <HAL_SPI_IRQHandler+0x1de>
 802a02e:	69fb      	ldr	r3, [r7, #28]
 802a030:	f003 0320 	and.w	r3, r3, #32
 802a034:	2b00      	cmp	r3, #0
 802a036:	f000 80aa 	beq.w	802a18e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802a03a:	69bb      	ldr	r3, [r7, #24]
 802a03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802a040:	2b00      	cmp	r3, #0
 802a042:	d023      	beq.n	802a08c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802a044:	687b      	ldr	r3, [r7, #4]
 802a046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802a04a:	b2db      	uxtb	r3, r3
 802a04c:	2b03      	cmp	r3, #3
 802a04e:	d011      	beq.n	802a074 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802a050:	687b      	ldr	r3, [r7, #4]
 802a052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a054:	f043 0204 	orr.w	r2, r3, #4
 802a058:	687b      	ldr	r3, [r7, #4]
 802a05a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802a05c:	2300      	movs	r3, #0
 802a05e:	617b      	str	r3, [r7, #20]
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	68db      	ldr	r3, [r3, #12]
 802a066:	617b      	str	r3, [r7, #20]
 802a068:	687b      	ldr	r3, [r7, #4]
 802a06a:	681b      	ldr	r3, [r3, #0]
 802a06c:	689b      	ldr	r3, [r3, #8]
 802a06e:	617b      	str	r3, [r7, #20]
 802a070:	697b      	ldr	r3, [r7, #20]
 802a072:	e00b      	b.n	802a08c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802a074:	2300      	movs	r3, #0
 802a076:	613b      	str	r3, [r7, #16]
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	681b      	ldr	r3, [r3, #0]
 802a07c:	68db      	ldr	r3, [r3, #12]
 802a07e:	613b      	str	r3, [r7, #16]
 802a080:	687b      	ldr	r3, [r7, #4]
 802a082:	681b      	ldr	r3, [r3, #0]
 802a084:	689b      	ldr	r3, [r3, #8]
 802a086:	613b      	str	r3, [r7, #16]
 802a088:	693b      	ldr	r3, [r7, #16]
        return;
 802a08a:	e080      	b.n	802a18e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802a08c:	69bb      	ldr	r3, [r7, #24]
 802a08e:	f003 0320 	and.w	r3, r3, #32
 802a092:	2b00      	cmp	r3, #0
 802a094:	d014      	beq.n	802a0c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802a096:	687b      	ldr	r3, [r7, #4]
 802a098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a09a:	f043 0201 	orr.w	r2, r3, #1
 802a09e:	687b      	ldr	r3, [r7, #4]
 802a0a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802a0a2:	2300      	movs	r3, #0
 802a0a4:	60fb      	str	r3, [r7, #12]
 802a0a6:	687b      	ldr	r3, [r7, #4]
 802a0a8:	681b      	ldr	r3, [r3, #0]
 802a0aa:	689b      	ldr	r3, [r3, #8]
 802a0ac:	60fb      	str	r3, [r7, #12]
 802a0ae:	687b      	ldr	r3, [r7, #4]
 802a0b0:	681b      	ldr	r3, [r3, #0]
 802a0b2:	681a      	ldr	r2, [r3, #0]
 802a0b4:	687b      	ldr	r3, [r7, #4]
 802a0b6:	681b      	ldr	r3, [r3, #0]
 802a0b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802a0bc:	601a      	str	r2, [r3, #0]
 802a0be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802a0c0:	69bb      	ldr	r3, [r7, #24]
 802a0c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802a0c6:	2b00      	cmp	r3, #0
 802a0c8:	d00c      	beq.n	802a0e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802a0ca:	687b      	ldr	r3, [r7, #4]
 802a0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a0ce:	f043 0208 	orr.w	r2, r3, #8
 802a0d2:	687b      	ldr	r3, [r7, #4]
 802a0d4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802a0d6:	2300      	movs	r3, #0
 802a0d8:	60bb      	str	r3, [r7, #8]
 802a0da:	687b      	ldr	r3, [r7, #4]
 802a0dc:	681b      	ldr	r3, [r3, #0]
 802a0de:	689b      	ldr	r3, [r3, #8]
 802a0e0:	60bb      	str	r3, [r7, #8]
 802a0e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802a0e4:	687b      	ldr	r3, [r7, #4]
 802a0e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a0e8:	2b00      	cmp	r3, #0
 802a0ea:	d04f      	beq.n	802a18c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802a0ec:	687b      	ldr	r3, [r7, #4]
 802a0ee:	681b      	ldr	r3, [r3, #0]
 802a0f0:	685a      	ldr	r2, [r3, #4]
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	681b      	ldr	r3, [r3, #0]
 802a0f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 802a0fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802a0fc:	687b      	ldr	r3, [r7, #4]
 802a0fe:	2201      	movs	r2, #1
 802a100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802a104:	69fb      	ldr	r3, [r7, #28]
 802a106:	f003 0302 	and.w	r3, r3, #2
 802a10a:	2b00      	cmp	r3, #0
 802a10c:	d104      	bne.n	802a118 <HAL_SPI_IRQHandler+0x168>
 802a10e:	69fb      	ldr	r3, [r7, #28]
 802a110:	f003 0301 	and.w	r3, r3, #1
 802a114:	2b00      	cmp	r3, #0
 802a116:	d034      	beq.n	802a182 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802a118:	687b      	ldr	r3, [r7, #4]
 802a11a:	681b      	ldr	r3, [r3, #0]
 802a11c:	685a      	ldr	r2, [r3, #4]
 802a11e:	687b      	ldr	r3, [r7, #4]
 802a120:	681b      	ldr	r3, [r3, #0]
 802a122:	f022 0203 	bic.w	r2, r2, #3
 802a126:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802a128:	687b      	ldr	r3, [r7, #4]
 802a12a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a12c:	2b00      	cmp	r3, #0
 802a12e:	d011      	beq.n	802a154 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802a130:	687b      	ldr	r3, [r7, #4]
 802a132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a134:	4a17      	ldr	r2, [pc, #92]	@ (802a194 <HAL_SPI_IRQHandler+0x1e4>)
 802a136:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a13c:	4618      	mov	r0, r3
 802a13e:	f7fc f8e7 	bl	8026310 <HAL_DMA_Abort_IT>
 802a142:	4603      	mov	r3, r0
 802a144:	2b00      	cmp	r3, #0
 802a146:	d005      	beq.n	802a154 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802a148:	687b      	ldr	r3, [r7, #4]
 802a14a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a14c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802a154:	687b      	ldr	r3, [r7, #4]
 802a156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a158:	2b00      	cmp	r3, #0
 802a15a:	d016      	beq.n	802a18a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802a15c:	687b      	ldr	r3, [r7, #4]
 802a15e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a160:	4a0c      	ldr	r2, [pc, #48]	@ (802a194 <HAL_SPI_IRQHandler+0x1e4>)
 802a162:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802a164:	687b      	ldr	r3, [r7, #4]
 802a166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a168:	4618      	mov	r0, r3
 802a16a:	f7fc f8d1 	bl	8026310 <HAL_DMA_Abort_IT>
 802a16e:	4603      	mov	r3, r0
 802a170:	2b00      	cmp	r3, #0
 802a172:	d00a      	beq.n	802a18a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802a174:	687b      	ldr	r3, [r7, #4]
 802a176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802a17c:	687b      	ldr	r3, [r7, #4]
 802a17e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 802a180:	e003      	b.n	802a18a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802a182:	6878      	ldr	r0, [r7, #4]
 802a184:	f000 f812 	bl	802a1ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802a188:	e000      	b.n	802a18c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802a18a:	bf00      	nop
    return;
 802a18c:	bf00      	nop
  }
}
 802a18e:	3720      	adds	r7, #32
 802a190:	46bd      	mov	sp, r7
 802a192:	bd80      	pop	{r7, pc}
 802a194:	0802a2d9 	.word	0x0802a2d9

0802a198 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 802a198:	b480      	push	{r7}
 802a19a:	b083      	sub	sp, #12
 802a19c:	af00      	add	r7, sp, #0
 802a19e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 802a1a0:	bf00      	nop
 802a1a2:	370c      	adds	r7, #12
 802a1a4:	46bd      	mov	sp, r7
 802a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1aa:	4770      	bx	lr

0802a1ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802a1ac:	b480      	push	{r7}
 802a1ae:	b083      	sub	sp, #12
 802a1b0:	af00      	add	r7, sp, #0
 802a1b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802a1b4:	bf00      	nop
 802a1b6:	370c      	adds	r7, #12
 802a1b8:	46bd      	mov	sp, r7
 802a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1be:	4770      	bx	lr

0802a1c0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 802a1c0:	b480      	push	{r7}
 802a1c2:	b083      	sub	sp, #12
 802a1c4:	af00      	add	r7, sp, #0
 802a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 802a1c8:	bf00      	nop
 802a1ca:	370c      	adds	r7, #12
 802a1cc:	46bd      	mov	sp, r7
 802a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1d2:	4770      	bx	lr

0802a1d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 802a1d4:	b580      	push	{r7, lr}
 802a1d6:	b086      	sub	sp, #24
 802a1d8:	af00      	add	r7, sp, #0
 802a1da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802a1dc:	687b      	ldr	r3, [r7, #4]
 802a1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a1e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802a1e2:	f7fb f8b3 	bl	802534c <HAL_GetTick>
 802a1e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 802a1e8:	687b      	ldr	r3, [r7, #4]
 802a1ea:	681b      	ldr	r3, [r3, #0]
 802a1ec:	681b      	ldr	r3, [r3, #0]
 802a1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802a1f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802a1f6:	d03b      	beq.n	802a270 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802a1f8:	697b      	ldr	r3, [r7, #20]
 802a1fa:	681b      	ldr	r3, [r3, #0]
 802a1fc:	685a      	ldr	r2, [r3, #4]
 802a1fe:	697b      	ldr	r3, [r7, #20]
 802a200:	681b      	ldr	r3, [r3, #0]
 802a202:	f022 0220 	bic.w	r2, r2, #32
 802a206:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 802a208:	697b      	ldr	r3, [r7, #20]
 802a20a:	681b      	ldr	r3, [r3, #0]
 802a20c:	685a      	ldr	r2, [r3, #4]
 802a20e:	697b      	ldr	r3, [r7, #20]
 802a210:	681b      	ldr	r3, [r3, #0]
 802a212:	f022 0202 	bic.w	r2, r2, #2
 802a216:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802a218:	693a      	ldr	r2, [r7, #16]
 802a21a:	2164      	movs	r1, #100	@ 0x64
 802a21c:	6978      	ldr	r0, [r7, #20]
 802a21e:	f000 fb57 	bl	802a8d0 <SPI_EndRxTxTransaction>
 802a222:	4603      	mov	r3, r0
 802a224:	2b00      	cmp	r3, #0
 802a226:	d005      	beq.n	802a234 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a228:	697b      	ldr	r3, [r7, #20]
 802a22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a22c:	f043 0220 	orr.w	r2, r3, #32
 802a230:	697b      	ldr	r3, [r7, #20]
 802a232:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802a234:	697b      	ldr	r3, [r7, #20]
 802a236:	689b      	ldr	r3, [r3, #8]
 802a238:	2b00      	cmp	r3, #0
 802a23a:	d10a      	bne.n	802a252 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802a23c:	2300      	movs	r3, #0
 802a23e:	60fb      	str	r3, [r7, #12]
 802a240:	697b      	ldr	r3, [r7, #20]
 802a242:	681b      	ldr	r3, [r3, #0]
 802a244:	68db      	ldr	r3, [r3, #12]
 802a246:	60fb      	str	r3, [r7, #12]
 802a248:	697b      	ldr	r3, [r7, #20]
 802a24a:	681b      	ldr	r3, [r3, #0]
 802a24c:	689b      	ldr	r3, [r3, #8]
 802a24e:	60fb      	str	r3, [r7, #12]
 802a250:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 802a252:	697b      	ldr	r3, [r7, #20]
 802a254:	2200      	movs	r2, #0
 802a256:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 802a258:	697b      	ldr	r3, [r7, #20]
 802a25a:	2201      	movs	r2, #1
 802a25c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802a260:	697b      	ldr	r3, [r7, #20]
 802a262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a264:	2b00      	cmp	r3, #0
 802a266:	d003      	beq.n	802a270 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 802a268:	6978      	ldr	r0, [r7, #20]
 802a26a:	f7ff ff9f 	bl	802a1ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802a26e:	e002      	b.n	802a276 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 802a270:	6978      	ldr	r0, [r7, #20]
 802a272:	f005 fe65 	bl	802ff40 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802a276:	3718      	adds	r7, #24
 802a278:	46bd      	mov	sp, r7
 802a27a:	bd80      	pop	{r7, pc}

0802a27c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 802a27c:	b580      	push	{r7, lr}
 802a27e:	b084      	sub	sp, #16
 802a280:	af00      	add	r7, sp, #0
 802a282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802a284:	687b      	ldr	r3, [r7, #4]
 802a286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a288:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 802a28a:	68f8      	ldr	r0, [r7, #12]
 802a28c:	f7ff ff84 	bl	802a198 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802a290:	bf00      	nop
 802a292:	3710      	adds	r7, #16
 802a294:	46bd      	mov	sp, r7
 802a296:	bd80      	pop	{r7, pc}

0802a298 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 802a298:	b580      	push	{r7, lr}
 802a29a:	b084      	sub	sp, #16
 802a29c:	af00      	add	r7, sp, #0
 802a29e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802a2a0:	687b      	ldr	r3, [r7, #4]
 802a2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a2a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 802a2a6:	68fb      	ldr	r3, [r7, #12]
 802a2a8:	681b      	ldr	r3, [r3, #0]
 802a2aa:	685a      	ldr	r2, [r3, #4]
 802a2ac:	68fb      	ldr	r3, [r7, #12]
 802a2ae:	681b      	ldr	r3, [r3, #0]
 802a2b0:	f022 0203 	bic.w	r2, r2, #3
 802a2b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802a2b6:	68fb      	ldr	r3, [r7, #12]
 802a2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a2ba:	f043 0210 	orr.w	r2, r3, #16
 802a2be:	68fb      	ldr	r3, [r7, #12]
 802a2c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 802a2c2:	68fb      	ldr	r3, [r7, #12]
 802a2c4:	2201      	movs	r2, #1
 802a2c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802a2ca:	68f8      	ldr	r0, [r7, #12]
 802a2cc:	f7ff ff6e 	bl	802a1ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802a2d0:	bf00      	nop
 802a2d2:	3710      	adds	r7, #16
 802a2d4:	46bd      	mov	sp, r7
 802a2d6:	bd80      	pop	{r7, pc}

0802a2d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802a2d8:	b580      	push	{r7, lr}
 802a2da:	b084      	sub	sp, #16
 802a2dc:	af00      	add	r7, sp, #0
 802a2de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802a2e0:	687b      	ldr	r3, [r7, #4]
 802a2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a2e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802a2e6:	68fb      	ldr	r3, [r7, #12]
 802a2e8:	2200      	movs	r2, #0
 802a2ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 802a2ec:	68fb      	ldr	r3, [r7, #12]
 802a2ee:	2200      	movs	r2, #0
 802a2f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802a2f2:	68f8      	ldr	r0, [r7, #12]
 802a2f4:	f7ff ff5a 	bl	802a1ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802a2f8:	bf00      	nop
 802a2fa:	3710      	adds	r7, #16
 802a2fc:	46bd      	mov	sp, r7
 802a2fe:	bd80      	pop	{r7, pc}

0802a300 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802a300:	b580      	push	{r7, lr}
 802a302:	b086      	sub	sp, #24
 802a304:	af00      	add	r7, sp, #0
 802a306:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802a308:	687b      	ldr	r3, [r7, #4]
 802a30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a30c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 802a30e:	697b      	ldr	r3, [r7, #20]
 802a310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a312:	2200      	movs	r2, #0
 802a314:	651a      	str	r2, [r3, #80]	@ 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802a316:	4b2d      	ldr	r3, [pc, #180]	@ (802a3cc <SPI_DMATxAbortCallback+0xcc>)
 802a318:	681b      	ldr	r3, [r3, #0]
 802a31a:	4a2d      	ldr	r2, [pc, #180]	@ (802a3d0 <SPI_DMATxAbortCallback+0xd0>)
 802a31c:	fba2 2303 	umull	r2, r3, r2, r3
 802a320:	0a5b      	lsrs	r3, r3, #9
 802a322:	2264      	movs	r2, #100	@ 0x64
 802a324:	fb02 f303 	mul.w	r3, r2, r3
 802a328:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 802a32a:	697b      	ldr	r3, [r7, #20]
 802a32c:	681b      	ldr	r3, [r3, #0]
 802a32e:	685a      	ldr	r2, [r3, #4]
 802a330:	697b      	ldr	r3, [r7, #20]
 802a332:	681b      	ldr	r3, [r3, #0]
 802a334:	f022 0202 	bic.w	r2, r2, #2
 802a338:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802a33a:	693b      	ldr	r3, [r7, #16]
 802a33c:	2b00      	cmp	r3, #0
 802a33e:	d106      	bne.n	802a34e <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802a340:	697b      	ldr	r3, [r7, #20]
 802a342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802a348:	697b      	ldr	r3, [r7, #20]
 802a34a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 802a34c:	e009      	b.n	802a362 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 802a34e:	693b      	ldr	r3, [r7, #16]
 802a350:	3b01      	subs	r3, #1
 802a352:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802a354:	697b      	ldr	r3, [r7, #20]
 802a356:	681b      	ldr	r3, [r3, #0]
 802a358:	689b      	ldr	r3, [r3, #8]
 802a35a:	f003 0302 	and.w	r3, r3, #2
 802a35e:	2b00      	cmp	r3, #0
 802a360:	d0eb      	beq.n	802a33a <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 802a362:	697b      	ldr	r3, [r7, #20]
 802a364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a366:	2b00      	cmp	r3, #0
 802a368:	d004      	beq.n	802a374 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 802a36a:	697b      	ldr	r3, [r7, #20]
 802a36c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802a370:	2b00      	cmp	r3, #0
 802a372:	d126      	bne.n	802a3c2 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 802a374:	697b      	ldr	r3, [r7, #20]
 802a376:	2200      	movs	r2, #0
 802a378:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 802a37a:	697b      	ldr	r3, [r7, #20]
 802a37c:	2200      	movs	r2, #0
 802a37e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 802a380:	697b      	ldr	r3, [r7, #20]
 802a382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a384:	2b40      	cmp	r3, #64	@ 0x40
 802a386:	d002      	beq.n	802a38e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802a388:	697b      	ldr	r3, [r7, #20]
 802a38a:	2200      	movs	r2, #0
 802a38c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802a38e:	2300      	movs	r3, #0
 802a390:	60fb      	str	r3, [r7, #12]
 802a392:	697b      	ldr	r3, [r7, #20]
 802a394:	681b      	ldr	r3, [r3, #0]
 802a396:	68db      	ldr	r3, [r3, #12]
 802a398:	60fb      	str	r3, [r7, #12]
 802a39a:	697b      	ldr	r3, [r7, #20]
 802a39c:	681b      	ldr	r3, [r3, #0]
 802a39e:	689b      	ldr	r3, [r3, #8]
 802a3a0:	60fb      	str	r3, [r7, #12]
 802a3a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 802a3a4:	2300      	movs	r3, #0
 802a3a6:	60bb      	str	r3, [r7, #8]
 802a3a8:	697b      	ldr	r3, [r7, #20]
 802a3aa:	681b      	ldr	r3, [r3, #0]
 802a3ac:	689b      	ldr	r3, [r3, #8]
 802a3ae:	60bb      	str	r3, [r7, #8]
 802a3b0:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 802a3b2:	697b      	ldr	r3, [r7, #20]
 802a3b4:	2201      	movs	r2, #1
 802a3b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 802a3ba:	6978      	ldr	r0, [r7, #20]
 802a3bc:	f7ff ff00 	bl	802a1c0 <HAL_SPI_AbortCpltCallback>
 802a3c0:	e000      	b.n	802a3c4 <SPI_DMATxAbortCallback+0xc4>
      return;
 802a3c2:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802a3c4:	3718      	adds	r7, #24
 802a3c6:	46bd      	mov	sp, r7
 802a3c8:	bd80      	pop	{r7, pc}
 802a3ca:	bf00      	nop
 802a3cc:	20001028 	.word	0x20001028
 802a3d0:	057619f1 	.word	0x057619f1

0802a3d4 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802a3d4:	b580      	push	{r7, lr}
 802a3d6:	b086      	sub	sp, #24
 802a3d8:	af00      	add	r7, sp, #0
 802a3da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802a3dc:	687b      	ldr	r3, [r7, #4]
 802a3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a3e0:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 802a3e2:	697b      	ldr	r3, [r7, #20]
 802a3e4:	681b      	ldr	r3, [r3, #0]
 802a3e6:	681a      	ldr	r2, [r3, #0]
 802a3e8:	697b      	ldr	r3, [r7, #20]
 802a3ea:	681b      	ldr	r3, [r3, #0]
 802a3ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802a3f0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 802a3f2:	697b      	ldr	r3, [r7, #20]
 802a3f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a3f6:	2200      	movs	r2, #0
 802a3f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 802a3fa:	697b      	ldr	r3, [r7, #20]
 802a3fc:	681b      	ldr	r3, [r3, #0]
 802a3fe:	685a      	ldr	r2, [r3, #4]
 802a400:	697b      	ldr	r3, [r7, #20]
 802a402:	681b      	ldr	r3, [r3, #0]
 802a404:	f022 0201 	bic.w	r2, r2, #1
 802a408:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 802a40a:	f7fa ff9f 	bl	802534c <HAL_GetTick>
 802a40e:	4603      	mov	r3, r0
 802a410:	461a      	mov	r2, r3
 802a412:	2164      	movs	r1, #100	@ 0x64
 802a414:	6978      	ldr	r0, [r7, #20]
 802a416:	f000 fa5b 	bl	802a8d0 <SPI_EndRxTxTransaction>
 802a41a:	4603      	mov	r3, r0
 802a41c:	2b00      	cmp	r3, #0
 802a41e:	d005      	beq.n	802a42c <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802a420:	697b      	ldr	r3, [r7, #20]
 802a422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802a428:	697b      	ldr	r3, [r7, #20]
 802a42a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 802a42c:	697b      	ldr	r3, [r7, #20]
 802a42e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a430:	2b00      	cmp	r3, #0
 802a432:	d004      	beq.n	802a43e <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 802a434:	697b      	ldr	r3, [r7, #20]
 802a436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802a43a:	2b00      	cmp	r3, #0
 802a43c:	d126      	bne.n	802a48c <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 802a43e:	697b      	ldr	r3, [r7, #20]
 802a440:	2200      	movs	r2, #0
 802a442:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 802a444:	697b      	ldr	r3, [r7, #20]
 802a446:	2200      	movs	r2, #0
 802a448:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 802a44a:	697b      	ldr	r3, [r7, #20]
 802a44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a44e:	2b40      	cmp	r3, #64	@ 0x40
 802a450:	d002      	beq.n	802a458 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802a452:	697b      	ldr	r3, [r7, #20]
 802a454:	2200      	movs	r2, #0
 802a456:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802a458:	2300      	movs	r3, #0
 802a45a:	613b      	str	r3, [r7, #16]
 802a45c:	697b      	ldr	r3, [r7, #20]
 802a45e:	681b      	ldr	r3, [r3, #0]
 802a460:	68db      	ldr	r3, [r3, #12]
 802a462:	613b      	str	r3, [r7, #16]
 802a464:	697b      	ldr	r3, [r7, #20]
 802a466:	681b      	ldr	r3, [r3, #0]
 802a468:	689b      	ldr	r3, [r3, #8]
 802a46a:	613b      	str	r3, [r7, #16]
 802a46c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 802a46e:	2300      	movs	r3, #0
 802a470:	60fb      	str	r3, [r7, #12]
 802a472:	697b      	ldr	r3, [r7, #20]
 802a474:	681b      	ldr	r3, [r3, #0]
 802a476:	689b      	ldr	r3, [r3, #8]
 802a478:	60fb      	str	r3, [r7, #12]
 802a47a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 802a47c:	697b      	ldr	r3, [r7, #20]
 802a47e:	2201      	movs	r2, #1
 802a480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 802a484:	6978      	ldr	r0, [r7, #20]
 802a486:	f7ff fe9b 	bl	802a1c0 <HAL_SPI_AbortCpltCallback>
 802a48a:	e000      	b.n	802a48e <SPI_DMARxAbortCallback+0xba>
      return;
 802a48c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802a48e:	3718      	adds	r7, #24
 802a490:	46bd      	mov	sp, r7
 802a492:	bd80      	pop	{r7, pc}

0802a494 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a494:	b580      	push	{r7, lr}
 802a496:	b082      	sub	sp, #8
 802a498:	af00      	add	r7, sp, #0
 802a49a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 802a49c:	687b      	ldr	r3, [r7, #4]
 802a49e:	681b      	ldr	r3, [r3, #0]
 802a4a0:	f103 020c 	add.w	r2, r3, #12
 802a4a4:	687b      	ldr	r3, [r7, #4]
 802a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a4a8:	7812      	ldrb	r2, [r2, #0]
 802a4aa:	b2d2      	uxtb	r2, r2
 802a4ac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 802a4ae:	687b      	ldr	r3, [r7, #4]
 802a4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a4b2:	1c5a      	adds	r2, r3, #1
 802a4b4:	687b      	ldr	r3, [r7, #4]
 802a4b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 802a4b8:	687b      	ldr	r3, [r7, #4]
 802a4ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a4bc:	b29b      	uxth	r3, r3
 802a4be:	3b01      	subs	r3, #1
 802a4c0:	b29a      	uxth	r2, r3
 802a4c2:	687b      	ldr	r3, [r7, #4]
 802a4c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 802a4c6:	687b      	ldr	r3, [r7, #4]
 802a4c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a4ca:	b29b      	uxth	r3, r3
 802a4cc:	2b00      	cmp	r3, #0
 802a4ce:	d10f      	bne.n	802a4f0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802a4d0:	687b      	ldr	r3, [r7, #4]
 802a4d2:	681b      	ldr	r3, [r3, #0]
 802a4d4:	685a      	ldr	r2, [r3, #4]
 802a4d6:	687b      	ldr	r3, [r7, #4]
 802a4d8:	681b      	ldr	r3, [r3, #0]
 802a4da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 802a4de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802a4e0:	687b      	ldr	r3, [r7, #4]
 802a4e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a4e4:	b29b      	uxth	r3, r3
 802a4e6:	2b00      	cmp	r3, #0
 802a4e8:	d102      	bne.n	802a4f0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 802a4ea:	6878      	ldr	r0, [r7, #4]
 802a4ec:	f000 fa32 	bl	802a954 <SPI_CloseRxTx_ISR>
    }
  }
}
 802a4f0:	bf00      	nop
 802a4f2:	3708      	adds	r7, #8
 802a4f4:	46bd      	mov	sp, r7
 802a4f6:	bd80      	pop	{r7, pc}

0802a4f8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a4f8:	b580      	push	{r7, lr}
 802a4fa:	b082      	sub	sp, #8
 802a4fc:	af00      	add	r7, sp, #0
 802a4fe:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802a500:	687b      	ldr	r3, [r7, #4]
 802a502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802a504:	687b      	ldr	r3, [r7, #4]
 802a506:	681b      	ldr	r3, [r3, #0]
 802a508:	330c      	adds	r3, #12
 802a50a:	7812      	ldrb	r2, [r2, #0]
 802a50c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 802a50e:	687b      	ldr	r3, [r7, #4]
 802a510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a512:	1c5a      	adds	r2, r3, #1
 802a514:	687b      	ldr	r3, [r7, #4]
 802a516:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 802a518:	687b      	ldr	r3, [r7, #4]
 802a51a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a51c:	b29b      	uxth	r3, r3
 802a51e:	3b01      	subs	r3, #1
 802a520:	b29a      	uxth	r2, r3
 802a522:	687b      	ldr	r3, [r7, #4]
 802a524:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 802a526:	687b      	ldr	r3, [r7, #4]
 802a528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a52a:	b29b      	uxth	r3, r3
 802a52c:	2b00      	cmp	r3, #0
 802a52e:	d10f      	bne.n	802a550 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802a530:	687b      	ldr	r3, [r7, #4]
 802a532:	681b      	ldr	r3, [r3, #0]
 802a534:	685a      	ldr	r2, [r3, #4]
 802a536:	687b      	ldr	r3, [r7, #4]
 802a538:	681b      	ldr	r3, [r3, #0]
 802a53a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802a53e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802a540:	687b      	ldr	r3, [r7, #4]
 802a542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a544:	b29b      	uxth	r3, r3
 802a546:	2b00      	cmp	r3, #0
 802a548:	d102      	bne.n	802a550 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802a54a:	6878      	ldr	r0, [r7, #4]
 802a54c:	f000 fa02 	bl	802a954 <SPI_CloseRxTx_ISR>
    }
  }
}
 802a550:	bf00      	nop
 802a552:	3708      	adds	r7, #8
 802a554:	46bd      	mov	sp, r7
 802a556:	bd80      	pop	{r7, pc}

0802a558 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a558:	b580      	push	{r7, lr}
 802a55a:	b082      	sub	sp, #8
 802a55c:	af00      	add	r7, sp, #0
 802a55e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 802a560:	687b      	ldr	r3, [r7, #4]
 802a562:	681b      	ldr	r3, [r3, #0]
 802a564:	68da      	ldr	r2, [r3, #12]
 802a566:	687b      	ldr	r3, [r7, #4]
 802a568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a56a:	b292      	uxth	r2, r2
 802a56c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 802a56e:	687b      	ldr	r3, [r7, #4]
 802a570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a572:	1c9a      	adds	r2, r3, #2
 802a574:	687b      	ldr	r3, [r7, #4]
 802a576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 802a578:	687b      	ldr	r3, [r7, #4]
 802a57a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a57c:	b29b      	uxth	r3, r3
 802a57e:	3b01      	subs	r3, #1
 802a580:	b29a      	uxth	r2, r3
 802a582:	687b      	ldr	r3, [r7, #4]
 802a584:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 802a586:	687b      	ldr	r3, [r7, #4]
 802a588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a58a:	b29b      	uxth	r3, r3
 802a58c:	2b00      	cmp	r3, #0
 802a58e:	d10f      	bne.n	802a5b0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 802a590:	687b      	ldr	r3, [r7, #4]
 802a592:	681b      	ldr	r3, [r3, #0]
 802a594:	685a      	ldr	r2, [r3, #4]
 802a596:	687b      	ldr	r3, [r7, #4]
 802a598:	681b      	ldr	r3, [r3, #0]
 802a59a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802a59e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802a5a0:	687b      	ldr	r3, [r7, #4]
 802a5a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a5a4:	b29b      	uxth	r3, r3
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d102      	bne.n	802a5b0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802a5aa:	6878      	ldr	r0, [r7, #4]
 802a5ac:	f000 f9d2 	bl	802a954 <SPI_CloseRxTx_ISR>
    }
  }
}
 802a5b0:	bf00      	nop
 802a5b2:	3708      	adds	r7, #8
 802a5b4:	46bd      	mov	sp, r7
 802a5b6:	bd80      	pop	{r7, pc}

0802a5b8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a5b8:	b580      	push	{r7, lr}
 802a5ba:	b082      	sub	sp, #8
 802a5bc:	af00      	add	r7, sp, #0
 802a5be:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802a5c0:	687b      	ldr	r3, [r7, #4]
 802a5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a5c4:	881a      	ldrh	r2, [r3, #0]
 802a5c6:	687b      	ldr	r3, [r7, #4]
 802a5c8:	681b      	ldr	r3, [r3, #0]
 802a5ca:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 802a5cc:	687b      	ldr	r3, [r7, #4]
 802a5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a5d0:	1c9a      	adds	r2, r3, #2
 802a5d2:	687b      	ldr	r3, [r7, #4]
 802a5d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 802a5d6:	687b      	ldr	r3, [r7, #4]
 802a5d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a5da:	b29b      	uxth	r3, r3
 802a5dc:	3b01      	subs	r3, #1
 802a5de:	b29a      	uxth	r2, r3
 802a5e0:	687b      	ldr	r3, [r7, #4]
 802a5e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 802a5e4:	687b      	ldr	r3, [r7, #4]
 802a5e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a5e8:	b29b      	uxth	r3, r3
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	d10f      	bne.n	802a60e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802a5ee:	687b      	ldr	r3, [r7, #4]
 802a5f0:	681b      	ldr	r3, [r3, #0]
 802a5f2:	685a      	ldr	r2, [r3, #4]
 802a5f4:	687b      	ldr	r3, [r7, #4]
 802a5f6:	681b      	ldr	r3, [r3, #0]
 802a5f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802a5fc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802a5fe:	687b      	ldr	r3, [r7, #4]
 802a600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a602:	b29b      	uxth	r3, r3
 802a604:	2b00      	cmp	r3, #0
 802a606:	d102      	bne.n	802a60e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 802a608:	6878      	ldr	r0, [r7, #4]
 802a60a:	f000 f9a3 	bl	802a954 <SPI_CloseRxTx_ISR>
    }
  }
}
 802a60e:	bf00      	nop
 802a610:	3708      	adds	r7, #8
 802a612:	46bd      	mov	sp, r7
 802a614:	bd80      	pop	{r7, pc}

0802a616 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a616:	b580      	push	{r7, lr}
 802a618:	b082      	sub	sp, #8
 802a61a:	af00      	add	r7, sp, #0
 802a61c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 802a61e:	687b      	ldr	r3, [r7, #4]
 802a620:	681b      	ldr	r3, [r3, #0]
 802a622:	f103 020c 	add.w	r2, r3, #12
 802a626:	687b      	ldr	r3, [r7, #4]
 802a628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a62a:	7812      	ldrb	r2, [r2, #0]
 802a62c:	b2d2      	uxtb	r2, r2
 802a62e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 802a630:	687b      	ldr	r3, [r7, #4]
 802a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a634:	1c5a      	adds	r2, r3, #1
 802a636:	687b      	ldr	r3, [r7, #4]
 802a638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 802a63a:	687b      	ldr	r3, [r7, #4]
 802a63c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a63e:	b29b      	uxth	r3, r3
 802a640:	3b01      	subs	r3, #1
 802a642:	b29a      	uxth	r2, r3
 802a644:	687b      	ldr	r3, [r7, #4]
 802a646:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 802a648:	687b      	ldr	r3, [r7, #4]
 802a64a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a64c:	b29b      	uxth	r3, r3
 802a64e:	2b00      	cmp	r3, #0
 802a650:	d102      	bne.n	802a658 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 802a652:	6878      	ldr	r0, [r7, #4]
 802a654:	f000 f9f2 	bl	802aa3c <SPI_CloseRx_ISR>
  }
}
 802a658:	bf00      	nop
 802a65a:	3708      	adds	r7, #8
 802a65c:	46bd      	mov	sp, r7
 802a65e:	bd80      	pop	{r7, pc}

0802a660 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a660:	b580      	push	{r7, lr}
 802a662:	b082      	sub	sp, #8
 802a664:	af00      	add	r7, sp, #0
 802a666:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 802a668:	687b      	ldr	r3, [r7, #4]
 802a66a:	681b      	ldr	r3, [r3, #0]
 802a66c:	68da      	ldr	r2, [r3, #12]
 802a66e:	687b      	ldr	r3, [r7, #4]
 802a670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a672:	b292      	uxth	r2, r2
 802a674:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 802a676:	687b      	ldr	r3, [r7, #4]
 802a678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a67a:	1c9a      	adds	r2, r3, #2
 802a67c:	687b      	ldr	r3, [r7, #4]
 802a67e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 802a680:	687b      	ldr	r3, [r7, #4]
 802a682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a684:	b29b      	uxth	r3, r3
 802a686:	3b01      	subs	r3, #1
 802a688:	b29a      	uxth	r2, r3
 802a68a:	687b      	ldr	r3, [r7, #4]
 802a68c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 802a68e:	687b      	ldr	r3, [r7, #4]
 802a690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 802a692:	b29b      	uxth	r3, r3
 802a694:	2b00      	cmp	r3, #0
 802a696:	d102      	bne.n	802a69e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 802a698:	6878      	ldr	r0, [r7, #4]
 802a69a:	f000 f9cf 	bl	802aa3c <SPI_CloseRx_ISR>
  }
}
 802a69e:	bf00      	nop
 802a6a0:	3708      	adds	r7, #8
 802a6a2:	46bd      	mov	sp, r7
 802a6a4:	bd80      	pop	{r7, pc}

0802a6a6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a6a6:	b580      	push	{r7, lr}
 802a6a8:	b082      	sub	sp, #8
 802a6aa:	af00      	add	r7, sp, #0
 802a6ac:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802a6ae:	687b      	ldr	r3, [r7, #4]
 802a6b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802a6b2:	687b      	ldr	r3, [r7, #4]
 802a6b4:	681b      	ldr	r3, [r3, #0]
 802a6b6:	330c      	adds	r3, #12
 802a6b8:	7812      	ldrb	r2, [r2, #0]
 802a6ba:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 802a6bc:	687b      	ldr	r3, [r7, #4]
 802a6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a6c0:	1c5a      	adds	r2, r3, #1
 802a6c2:	687b      	ldr	r3, [r7, #4]
 802a6c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 802a6c6:	687b      	ldr	r3, [r7, #4]
 802a6c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a6ca:	b29b      	uxth	r3, r3
 802a6cc:	3b01      	subs	r3, #1
 802a6ce:	b29a      	uxth	r2, r3
 802a6d0:	687b      	ldr	r3, [r7, #4]
 802a6d2:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 802a6d4:	687b      	ldr	r3, [r7, #4]
 802a6d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a6d8:	b29b      	uxth	r3, r3
 802a6da:	2b00      	cmp	r3, #0
 802a6dc:	d102      	bne.n	802a6e4 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 802a6de:	6878      	ldr	r0, [r7, #4]
 802a6e0:	f000 f9ec 	bl	802aabc <SPI_CloseTx_ISR>
  }
}
 802a6e4:	bf00      	nop
 802a6e6:	3708      	adds	r7, #8
 802a6e8:	46bd      	mov	sp, r7
 802a6ea:	bd80      	pop	{r7, pc}

0802a6ec <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802a6ec:	b580      	push	{r7, lr}
 802a6ee:	b082      	sub	sp, #8
 802a6f0:	af00      	add	r7, sp, #0
 802a6f2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802a6f4:	687b      	ldr	r3, [r7, #4]
 802a6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a6f8:	881a      	ldrh	r2, [r3, #0]
 802a6fa:	687b      	ldr	r3, [r7, #4]
 802a6fc:	681b      	ldr	r3, [r3, #0]
 802a6fe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 802a700:	687b      	ldr	r3, [r7, #4]
 802a702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a704:	1c9a      	adds	r2, r3, #2
 802a706:	687b      	ldr	r3, [r7, #4]
 802a708:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 802a70a:	687b      	ldr	r3, [r7, #4]
 802a70c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a70e:	b29b      	uxth	r3, r3
 802a710:	3b01      	subs	r3, #1
 802a712:	b29a      	uxth	r2, r3
 802a714:	687b      	ldr	r3, [r7, #4]
 802a716:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 802a718:	687b      	ldr	r3, [r7, #4]
 802a71a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802a71c:	b29b      	uxth	r3, r3
 802a71e:	2b00      	cmp	r3, #0
 802a720:	d102      	bne.n	802a728 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 802a722:	6878      	ldr	r0, [r7, #4]
 802a724:	f000 f9ca 	bl	802aabc <SPI_CloseTx_ISR>
  }
}
 802a728:	bf00      	nop
 802a72a:	3708      	adds	r7, #8
 802a72c:	46bd      	mov	sp, r7
 802a72e:	bd80      	pop	{r7, pc}

0802a730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802a730:	b580      	push	{r7, lr}
 802a732:	b084      	sub	sp, #16
 802a734:	af00      	add	r7, sp, #0
 802a736:	60f8      	str	r0, [r7, #12]
 802a738:	60b9      	str	r1, [r7, #8]
 802a73a:	603b      	str	r3, [r7, #0]
 802a73c:	4613      	mov	r3, r2
 802a73e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802a740:	e04c      	b.n	802a7dc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 802a742:	683b      	ldr	r3, [r7, #0]
 802a744:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a748:	d048      	beq.n	802a7dc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 802a74a:	f7fa fdff 	bl	802534c <HAL_GetTick>
 802a74e:	4602      	mov	r2, r0
 802a750:	69bb      	ldr	r3, [r7, #24]
 802a752:	1ad3      	subs	r3, r2, r3
 802a754:	683a      	ldr	r2, [r7, #0]
 802a756:	429a      	cmp	r2, r3
 802a758:	d902      	bls.n	802a760 <SPI_WaitFlagStateUntilTimeout+0x30>
 802a75a:	683b      	ldr	r3, [r7, #0]
 802a75c:	2b00      	cmp	r3, #0
 802a75e:	d13d      	bne.n	802a7dc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802a760:	68fb      	ldr	r3, [r7, #12]
 802a762:	681b      	ldr	r3, [r3, #0]
 802a764:	685a      	ldr	r2, [r3, #4]
 802a766:	68fb      	ldr	r3, [r7, #12]
 802a768:	681b      	ldr	r3, [r3, #0]
 802a76a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 802a76e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802a770:	68fb      	ldr	r3, [r7, #12]
 802a772:	685b      	ldr	r3, [r3, #4]
 802a774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802a778:	d111      	bne.n	802a79e <SPI_WaitFlagStateUntilTimeout+0x6e>
 802a77a:	68fb      	ldr	r3, [r7, #12]
 802a77c:	689b      	ldr	r3, [r3, #8]
 802a77e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802a782:	d004      	beq.n	802a78e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802a784:	68fb      	ldr	r3, [r7, #12]
 802a786:	689b      	ldr	r3, [r3, #8]
 802a788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802a78c:	d107      	bne.n	802a79e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802a78e:	68fb      	ldr	r3, [r7, #12]
 802a790:	681b      	ldr	r3, [r3, #0]
 802a792:	681a      	ldr	r2, [r3, #0]
 802a794:	68fb      	ldr	r3, [r7, #12]
 802a796:	681b      	ldr	r3, [r3, #0]
 802a798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802a79c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802a79e:	68fb      	ldr	r3, [r7, #12]
 802a7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802a7a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802a7a6:	d10f      	bne.n	802a7c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 802a7a8:	68fb      	ldr	r3, [r7, #12]
 802a7aa:	681b      	ldr	r3, [r3, #0]
 802a7ac:	681a      	ldr	r2, [r3, #0]
 802a7ae:	68fb      	ldr	r3, [r7, #12]
 802a7b0:	681b      	ldr	r3, [r3, #0]
 802a7b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802a7b6:	601a      	str	r2, [r3, #0]
 802a7b8:	68fb      	ldr	r3, [r7, #12]
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	681a      	ldr	r2, [r3, #0]
 802a7be:	68fb      	ldr	r3, [r7, #12]
 802a7c0:	681b      	ldr	r3, [r3, #0]
 802a7c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802a7c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802a7c8:	68fb      	ldr	r3, [r7, #12]
 802a7ca:	2201      	movs	r2, #1
 802a7cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802a7d0:	68fb      	ldr	r3, [r7, #12]
 802a7d2:	2200      	movs	r2, #0
 802a7d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 802a7d8:	2303      	movs	r3, #3
 802a7da:	e00f      	b.n	802a7fc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802a7dc:	68fb      	ldr	r3, [r7, #12]
 802a7de:	681b      	ldr	r3, [r3, #0]
 802a7e0:	689a      	ldr	r2, [r3, #8]
 802a7e2:	68bb      	ldr	r3, [r7, #8]
 802a7e4:	4013      	ands	r3, r2
 802a7e6:	68ba      	ldr	r2, [r7, #8]
 802a7e8:	429a      	cmp	r2, r3
 802a7ea:	bf0c      	ite	eq
 802a7ec:	2301      	moveq	r3, #1
 802a7ee:	2300      	movne	r3, #0
 802a7f0:	b2db      	uxtb	r3, r3
 802a7f2:	461a      	mov	r2, r3
 802a7f4:	79fb      	ldrb	r3, [r7, #7]
 802a7f6:	429a      	cmp	r2, r3
 802a7f8:	d1a3      	bne.n	802a742 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 802a7fa:	2300      	movs	r3, #0
}
 802a7fc:	4618      	mov	r0, r3
 802a7fe:	3710      	adds	r7, #16
 802a800:	46bd      	mov	sp, r7
 802a802:	bd80      	pop	{r7, pc}

0802a804 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802a804:	b580      	push	{r7, lr}
 802a806:	b086      	sub	sp, #24
 802a808:	af02      	add	r7, sp, #8
 802a80a:	60f8      	str	r0, [r7, #12]
 802a80c:	60b9      	str	r1, [r7, #8]
 802a80e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802a810:	68fb      	ldr	r3, [r7, #12]
 802a812:	685b      	ldr	r3, [r3, #4]
 802a814:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802a818:	d111      	bne.n	802a83e <SPI_EndRxTransaction+0x3a>
 802a81a:	68fb      	ldr	r3, [r7, #12]
 802a81c:	689b      	ldr	r3, [r3, #8]
 802a81e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802a822:	d004      	beq.n	802a82e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802a824:	68fb      	ldr	r3, [r7, #12]
 802a826:	689b      	ldr	r3, [r3, #8]
 802a828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802a82c:	d107      	bne.n	802a83e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802a82e:	68fb      	ldr	r3, [r7, #12]
 802a830:	681b      	ldr	r3, [r3, #0]
 802a832:	681a      	ldr	r2, [r3, #0]
 802a834:	68fb      	ldr	r3, [r7, #12]
 802a836:	681b      	ldr	r3, [r3, #0]
 802a838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802a83c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802a83e:	68fb      	ldr	r3, [r7, #12]
 802a840:	685b      	ldr	r3, [r3, #4]
 802a842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802a846:	d12a      	bne.n	802a89e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802a848:	68fb      	ldr	r3, [r7, #12]
 802a84a:	689b      	ldr	r3, [r3, #8]
 802a84c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802a850:	d012      	beq.n	802a878 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802a852:	687b      	ldr	r3, [r7, #4]
 802a854:	9300      	str	r3, [sp, #0]
 802a856:	68bb      	ldr	r3, [r7, #8]
 802a858:	2200      	movs	r2, #0
 802a85a:	2180      	movs	r1, #128	@ 0x80
 802a85c:	68f8      	ldr	r0, [r7, #12]
 802a85e:	f7ff ff67 	bl	802a730 <SPI_WaitFlagStateUntilTimeout>
 802a862:	4603      	mov	r3, r0
 802a864:	2b00      	cmp	r3, #0
 802a866:	d02d      	beq.n	802a8c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a868:	68fb      	ldr	r3, [r7, #12]
 802a86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a86c:	f043 0220 	orr.w	r2, r3, #32
 802a870:	68fb      	ldr	r3, [r7, #12]
 802a872:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 802a874:	2303      	movs	r3, #3
 802a876:	e026      	b.n	802a8c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802a878:	687b      	ldr	r3, [r7, #4]
 802a87a:	9300      	str	r3, [sp, #0]
 802a87c:	68bb      	ldr	r3, [r7, #8]
 802a87e:	2200      	movs	r2, #0
 802a880:	2101      	movs	r1, #1
 802a882:	68f8      	ldr	r0, [r7, #12]
 802a884:	f7ff ff54 	bl	802a730 <SPI_WaitFlagStateUntilTimeout>
 802a888:	4603      	mov	r3, r0
 802a88a:	2b00      	cmp	r3, #0
 802a88c:	d01a      	beq.n	802a8c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a88e:	68fb      	ldr	r3, [r7, #12]
 802a890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a892:	f043 0220 	orr.w	r2, r3, #32
 802a896:	68fb      	ldr	r3, [r7, #12]
 802a898:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 802a89a:	2303      	movs	r3, #3
 802a89c:	e013      	b.n	802a8c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802a89e:	687b      	ldr	r3, [r7, #4]
 802a8a0:	9300      	str	r3, [sp, #0]
 802a8a2:	68bb      	ldr	r3, [r7, #8]
 802a8a4:	2200      	movs	r2, #0
 802a8a6:	2101      	movs	r1, #1
 802a8a8:	68f8      	ldr	r0, [r7, #12]
 802a8aa:	f7ff ff41 	bl	802a730 <SPI_WaitFlagStateUntilTimeout>
 802a8ae:	4603      	mov	r3, r0
 802a8b0:	2b00      	cmp	r3, #0
 802a8b2:	d007      	beq.n	802a8c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a8b4:	68fb      	ldr	r3, [r7, #12]
 802a8b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a8b8:	f043 0220 	orr.w	r2, r3, #32
 802a8bc:	68fb      	ldr	r3, [r7, #12]
 802a8be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 802a8c0:	2303      	movs	r3, #3
 802a8c2:	e000      	b.n	802a8c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802a8c4:	2300      	movs	r3, #0
}
 802a8c6:	4618      	mov	r0, r3
 802a8c8:	3710      	adds	r7, #16
 802a8ca:	46bd      	mov	sp, r7
 802a8cc:	bd80      	pop	{r7, pc}
	...

0802a8d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802a8d0:	b580      	push	{r7, lr}
 802a8d2:	b088      	sub	sp, #32
 802a8d4:	af02      	add	r7, sp, #8
 802a8d6:	60f8      	str	r0, [r7, #12]
 802a8d8:	60b9      	str	r1, [r7, #8]
 802a8da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802a8dc:	4b1b      	ldr	r3, [pc, #108]	@ (802a94c <SPI_EndRxTxTransaction+0x7c>)
 802a8de:	681b      	ldr	r3, [r3, #0]
 802a8e0:	4a1b      	ldr	r2, [pc, #108]	@ (802a950 <SPI_EndRxTxTransaction+0x80>)
 802a8e2:	fba2 2303 	umull	r2, r3, r2, r3
 802a8e6:	0d5b      	lsrs	r3, r3, #21
 802a8e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a8ec:	fb02 f303 	mul.w	r3, r2, r3
 802a8f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802a8f2:	68fb      	ldr	r3, [r7, #12]
 802a8f4:	685b      	ldr	r3, [r3, #4]
 802a8f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802a8fa:	d112      	bne.n	802a922 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802a8fc:	687b      	ldr	r3, [r7, #4]
 802a8fe:	9300      	str	r3, [sp, #0]
 802a900:	68bb      	ldr	r3, [r7, #8]
 802a902:	2200      	movs	r2, #0
 802a904:	2180      	movs	r1, #128	@ 0x80
 802a906:	68f8      	ldr	r0, [r7, #12]
 802a908:	f7ff ff12 	bl	802a730 <SPI_WaitFlagStateUntilTimeout>
 802a90c:	4603      	mov	r3, r0
 802a90e:	2b00      	cmp	r3, #0
 802a910:	d016      	beq.n	802a940 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a912:	68fb      	ldr	r3, [r7, #12]
 802a914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a916:	f043 0220 	orr.w	r2, r3, #32
 802a91a:	68fb      	ldr	r3, [r7, #12]
 802a91c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 802a91e:	2303      	movs	r3, #3
 802a920:	e00f      	b.n	802a942 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802a922:	697b      	ldr	r3, [r7, #20]
 802a924:	2b00      	cmp	r3, #0
 802a926:	d00a      	beq.n	802a93e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802a928:	697b      	ldr	r3, [r7, #20]
 802a92a:	3b01      	subs	r3, #1
 802a92c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802a92e:	68fb      	ldr	r3, [r7, #12]
 802a930:	681b      	ldr	r3, [r3, #0]
 802a932:	689b      	ldr	r3, [r3, #8]
 802a934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802a938:	2b80      	cmp	r3, #128	@ 0x80
 802a93a:	d0f2      	beq.n	802a922 <SPI_EndRxTxTransaction+0x52>
 802a93c:	e000      	b.n	802a940 <SPI_EndRxTxTransaction+0x70>
        break;
 802a93e:	bf00      	nop
  }

  return HAL_OK;
 802a940:	2300      	movs	r3, #0
}
 802a942:	4618      	mov	r0, r3
 802a944:	3718      	adds	r7, #24
 802a946:	46bd      	mov	sp, r7
 802a948:	bd80      	pop	{r7, pc}
 802a94a:	bf00      	nop
 802a94c:	20001028 	.word	0x20001028
 802a950:	165e9f81 	.word	0x165e9f81

0802a954 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 802a954:	b580      	push	{r7, lr}
 802a956:	b086      	sub	sp, #24
 802a958:	af00      	add	r7, sp, #0
 802a95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802a95c:	4b35      	ldr	r3, [pc, #212]	@ (802aa34 <SPI_CloseRxTx_ISR+0xe0>)
 802a95e:	681b      	ldr	r3, [r3, #0]
 802a960:	4a35      	ldr	r2, [pc, #212]	@ (802aa38 <SPI_CloseRxTx_ISR+0xe4>)
 802a962:	fba2 2303 	umull	r2, r3, r2, r3
 802a966:	0a5b      	lsrs	r3, r3, #9
 802a968:	2264      	movs	r2, #100	@ 0x64
 802a96a:	fb02 f303 	mul.w	r3, r2, r3
 802a96e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 802a970:	f7fa fcec 	bl	802534c <HAL_GetTick>
 802a974:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802a976:	687b      	ldr	r3, [r7, #4]
 802a978:	681b      	ldr	r3, [r3, #0]
 802a97a:	685a      	ldr	r2, [r3, #4]
 802a97c:	687b      	ldr	r3, [r7, #4]
 802a97e:	681b      	ldr	r3, [r3, #0]
 802a980:	f022 0220 	bic.w	r2, r2, #32
 802a984:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802a986:	693b      	ldr	r3, [r7, #16]
 802a988:	2b00      	cmp	r3, #0
 802a98a:	d106      	bne.n	802a99a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a98c:	687b      	ldr	r3, [r7, #4]
 802a98e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a990:	f043 0220 	orr.w	r2, r3, #32
 802a994:	687b      	ldr	r3, [r7, #4]
 802a996:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 802a998:	e009      	b.n	802a9ae <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 802a99a:	693b      	ldr	r3, [r7, #16]
 802a99c:	3b01      	subs	r3, #1
 802a99e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802a9a0:	687b      	ldr	r3, [r7, #4]
 802a9a2:	681b      	ldr	r3, [r3, #0]
 802a9a4:	689b      	ldr	r3, [r3, #8]
 802a9a6:	f003 0302 	and.w	r3, r3, #2
 802a9aa:	2b00      	cmp	r3, #0
 802a9ac:	d0eb      	beq.n	802a986 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802a9ae:	697a      	ldr	r2, [r7, #20]
 802a9b0:	2164      	movs	r1, #100	@ 0x64
 802a9b2:	6878      	ldr	r0, [r7, #4]
 802a9b4:	f7ff ff8c 	bl	802a8d0 <SPI_EndRxTxTransaction>
 802a9b8:	4603      	mov	r3, r0
 802a9ba:	2b00      	cmp	r3, #0
 802a9bc:	d005      	beq.n	802a9ca <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802a9be:	687b      	ldr	r3, [r7, #4]
 802a9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a9c2:	f043 0220 	orr.w	r2, r3, #32
 802a9c6:	687b      	ldr	r3, [r7, #4]
 802a9c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802a9ca:	687b      	ldr	r3, [r7, #4]
 802a9cc:	689b      	ldr	r3, [r3, #8]
 802a9ce:	2b00      	cmp	r3, #0
 802a9d0:	d10a      	bne.n	802a9e8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802a9d2:	2300      	movs	r3, #0
 802a9d4:	60fb      	str	r3, [r7, #12]
 802a9d6:	687b      	ldr	r3, [r7, #4]
 802a9d8:	681b      	ldr	r3, [r3, #0]
 802a9da:	68db      	ldr	r3, [r3, #12]
 802a9dc:	60fb      	str	r3, [r7, #12]
 802a9de:	687b      	ldr	r3, [r7, #4]
 802a9e0:	681b      	ldr	r3, [r3, #0]
 802a9e2:	689b      	ldr	r3, [r3, #8]
 802a9e4:	60fb      	str	r3, [r7, #12]
 802a9e6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 802a9e8:	687b      	ldr	r3, [r7, #4]
 802a9ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a9ec:	2b00      	cmp	r3, #0
 802a9ee:	d115      	bne.n	802aa1c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 802a9f0:	687b      	ldr	r3, [r7, #4]
 802a9f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 802a9f6:	b2db      	uxtb	r3, r3
 802a9f8:	2b04      	cmp	r3, #4
 802a9fa:	d107      	bne.n	802aa0c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 802a9fc:	687b      	ldr	r3, [r7, #4]
 802a9fe:	2201      	movs	r2, #1
 802aa00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 802aa04:	6878      	ldr	r0, [r7, #4]
 802aa06:	f005 fac9 	bl	802ff9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 802aa0a:	e00e      	b.n	802aa2a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 802aa0c:	687b      	ldr	r3, [r7, #4]
 802aa0e:	2201      	movs	r2, #1
 802aa10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 802aa14:	6878      	ldr	r0, [r7, #4]
 802aa16:	f005 faef 	bl	802fff8 <HAL_SPI_TxRxCpltCallback>
}
 802aa1a:	e006      	b.n	802aa2a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 802aa1c:	687b      	ldr	r3, [r7, #4]
 802aa1e:	2201      	movs	r2, #1
 802aa20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 802aa24:	6878      	ldr	r0, [r7, #4]
 802aa26:	f7ff fbc1 	bl	802a1ac <HAL_SPI_ErrorCallback>
}
 802aa2a:	bf00      	nop
 802aa2c:	3718      	adds	r7, #24
 802aa2e:	46bd      	mov	sp, r7
 802aa30:	bd80      	pop	{r7, pc}
 802aa32:	bf00      	nop
 802aa34:	20001028 	.word	0x20001028
 802aa38:	057619f1 	.word	0x057619f1

0802aa3c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 802aa3c:	b580      	push	{r7, lr}
 802aa3e:	b084      	sub	sp, #16
 802aa40:	af00      	add	r7, sp, #0
 802aa42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802aa44:	687b      	ldr	r3, [r7, #4]
 802aa46:	681b      	ldr	r3, [r3, #0]
 802aa48:	685a      	ldr	r2, [r3, #4]
 802aa4a:	687b      	ldr	r3, [r7, #4]
 802aa4c:	681b      	ldr	r3, [r3, #0]
 802aa4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 802aa52:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 802aa54:	f7fa fc7a 	bl	802534c <HAL_GetTick>
 802aa58:	4603      	mov	r3, r0
 802aa5a:	461a      	mov	r2, r3
 802aa5c:	2164      	movs	r1, #100	@ 0x64
 802aa5e:	6878      	ldr	r0, [r7, #4]
 802aa60:	f7ff fed0 	bl	802a804 <SPI_EndRxTransaction>
 802aa64:	4603      	mov	r3, r0
 802aa66:	2b00      	cmp	r3, #0
 802aa68:	d005      	beq.n	802aa76 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802aa6a:	687b      	ldr	r3, [r7, #4]
 802aa6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802aa6e:	f043 0220 	orr.w	r2, r3, #32
 802aa72:	687b      	ldr	r3, [r7, #4]
 802aa74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802aa76:	687b      	ldr	r3, [r7, #4]
 802aa78:	689b      	ldr	r3, [r3, #8]
 802aa7a:	2b00      	cmp	r3, #0
 802aa7c:	d10a      	bne.n	802aa94 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802aa7e:	2300      	movs	r3, #0
 802aa80:	60fb      	str	r3, [r7, #12]
 802aa82:	687b      	ldr	r3, [r7, #4]
 802aa84:	681b      	ldr	r3, [r3, #0]
 802aa86:	68db      	ldr	r3, [r3, #12]
 802aa88:	60fb      	str	r3, [r7, #12]
 802aa8a:	687b      	ldr	r3, [r7, #4]
 802aa8c:	681b      	ldr	r3, [r3, #0]
 802aa8e:	689b      	ldr	r3, [r3, #8]
 802aa90:	60fb      	str	r3, [r7, #12]
 802aa92:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 802aa94:	687b      	ldr	r3, [r7, #4]
 802aa96:	2201      	movs	r2, #1
 802aa98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 802aa9c:	687b      	ldr	r3, [r7, #4]
 802aa9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802aaa0:	2b00      	cmp	r3, #0
 802aaa2:	d103      	bne.n	802aaac <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 802aaa4:	6878      	ldr	r0, [r7, #4]
 802aaa6:	f005 fa79 	bl	802ff9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 802aaaa:	e002      	b.n	802aab2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 802aaac:	6878      	ldr	r0, [r7, #4]
 802aaae:	f7ff fb7d 	bl	802a1ac <HAL_SPI_ErrorCallback>
}
 802aab2:	bf00      	nop
 802aab4:	3710      	adds	r7, #16
 802aab6:	46bd      	mov	sp, r7
 802aab8:	bd80      	pop	{r7, pc}
	...

0802aabc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 802aabc:	b580      	push	{r7, lr}
 802aabe:	b086      	sub	sp, #24
 802aac0:	af00      	add	r7, sp, #0
 802aac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802aac4:	4b2c      	ldr	r3, [pc, #176]	@ (802ab78 <SPI_CloseTx_ISR+0xbc>)
 802aac6:	681b      	ldr	r3, [r3, #0]
 802aac8:	4a2c      	ldr	r2, [pc, #176]	@ (802ab7c <SPI_CloseTx_ISR+0xc0>)
 802aaca:	fba2 2303 	umull	r2, r3, r2, r3
 802aace:	0a5b      	lsrs	r3, r3, #9
 802aad0:	2264      	movs	r2, #100	@ 0x64
 802aad2:	fb02 f303 	mul.w	r3, r2, r3
 802aad6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802aad8:	f7fa fc38 	bl	802534c <HAL_GetTick>
 802aadc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802aade:	693b      	ldr	r3, [r7, #16]
 802aae0:	2b00      	cmp	r3, #0
 802aae2:	d106      	bne.n	802aaf2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802aae4:	687b      	ldr	r3, [r7, #4]
 802aae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802aae8:	f043 0220 	orr.w	r2, r3, #32
 802aaec:	687b      	ldr	r3, [r7, #4]
 802aaee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 802aaf0:	e009      	b.n	802ab06 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 802aaf2:	693b      	ldr	r3, [r7, #16]
 802aaf4:	3b01      	subs	r3, #1
 802aaf6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802aaf8:	687b      	ldr	r3, [r7, #4]
 802aafa:	681b      	ldr	r3, [r3, #0]
 802aafc:	689b      	ldr	r3, [r3, #8]
 802aafe:	f003 0302 	and.w	r3, r3, #2
 802ab02:	2b00      	cmp	r3, #0
 802ab04:	d0eb      	beq.n	802aade <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 802ab06:	687b      	ldr	r3, [r7, #4]
 802ab08:	681b      	ldr	r3, [r3, #0]
 802ab0a:	685a      	ldr	r2, [r3, #4]
 802ab0c:	687b      	ldr	r3, [r7, #4]
 802ab0e:	681b      	ldr	r3, [r3, #0]
 802ab10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 802ab14:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802ab16:	697a      	ldr	r2, [r7, #20]
 802ab18:	2164      	movs	r1, #100	@ 0x64
 802ab1a:	6878      	ldr	r0, [r7, #4]
 802ab1c:	f7ff fed8 	bl	802a8d0 <SPI_EndRxTxTransaction>
 802ab20:	4603      	mov	r3, r0
 802ab22:	2b00      	cmp	r3, #0
 802ab24:	d005      	beq.n	802ab32 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ab26:	687b      	ldr	r3, [r7, #4]
 802ab28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ab2a:	f043 0220 	orr.w	r2, r3, #32
 802ab2e:	687b      	ldr	r3, [r7, #4]
 802ab30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802ab32:	687b      	ldr	r3, [r7, #4]
 802ab34:	689b      	ldr	r3, [r3, #8]
 802ab36:	2b00      	cmp	r3, #0
 802ab38:	d10a      	bne.n	802ab50 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802ab3a:	2300      	movs	r3, #0
 802ab3c:	60fb      	str	r3, [r7, #12]
 802ab3e:	687b      	ldr	r3, [r7, #4]
 802ab40:	681b      	ldr	r3, [r3, #0]
 802ab42:	68db      	ldr	r3, [r3, #12]
 802ab44:	60fb      	str	r3, [r7, #12]
 802ab46:	687b      	ldr	r3, [r7, #4]
 802ab48:	681b      	ldr	r3, [r3, #0]
 802ab4a:	689b      	ldr	r3, [r3, #8]
 802ab4c:	60fb      	str	r3, [r7, #12]
 802ab4e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 802ab50:	687b      	ldr	r3, [r7, #4]
 802ab52:	2201      	movs	r2, #1
 802ab54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802ab58:	687b      	ldr	r3, [r7, #4]
 802ab5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ab5c:	2b00      	cmp	r3, #0
 802ab5e:	d003      	beq.n	802ab68 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 802ab60:	6878      	ldr	r0, [r7, #4]
 802ab62:	f7ff fb23 	bl	802a1ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 802ab66:	e002      	b.n	802ab6e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 802ab68:	6878      	ldr	r0, [r7, #4]
 802ab6a:	f005 f9e9 	bl	802ff40 <HAL_SPI_TxCpltCallback>
}
 802ab6e:	bf00      	nop
 802ab70:	3718      	adds	r7, #24
 802ab72:	46bd      	mov	sp, r7
 802ab74:	bd80      	pop	{r7, pc}
 802ab76:	bf00      	nop
 802ab78:	20001028 	.word	0x20001028
 802ab7c:	057619f1 	.word	0x057619f1

0802ab80 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 802ab80:	b480      	push	{r7}
 802ab82:	b085      	sub	sp, #20
 802ab84:	af00      	add	r7, sp, #0
 802ab86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802ab88:	4b1d      	ldr	r3, [pc, #116]	@ (802ac00 <SPI_AbortRx_ISR+0x80>)
 802ab8a:	681b      	ldr	r3, [r3, #0]
 802ab8c:	4a1d      	ldr	r2, [pc, #116]	@ (802ac04 <SPI_AbortRx_ISR+0x84>)
 802ab8e:	fba2 2303 	umull	r2, r3, r2, r3
 802ab92:	0a5b      	lsrs	r3, r3, #9
 802ab94:	2264      	movs	r2, #100	@ 0x64
 802ab96:	fb02 f303 	mul.w	r3, r2, r3
 802ab9a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802ab9c:	68fb      	ldr	r3, [r7, #12]
 802ab9e:	2b00      	cmp	r3, #0
 802aba0:	d106      	bne.n	802abb0 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802aba2:	687b      	ldr	r3, [r7, #4]
 802aba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802aba6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802abaa:	687b      	ldr	r3, [r7, #4]
 802abac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 802abae:	e009      	b.n	802abc4 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 802abb0:	68fb      	ldr	r3, [r7, #12]
 802abb2:	3b01      	subs	r3, #1
 802abb4:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802abb6:	687b      	ldr	r3, [r7, #4]
 802abb8:	681b      	ldr	r3, [r3, #0]
 802abba:	689b      	ldr	r3, [r3, #8]
 802abbc:	f003 0302 	and.w	r3, r3, #2
 802abc0:	2b00      	cmp	r3, #0
 802abc2:	d0eb      	beq.n	802ab9c <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 802abc4:	687b      	ldr	r3, [r7, #4]
 802abc6:	681b      	ldr	r3, [r3, #0]
 802abc8:	681a      	ldr	r2, [r3, #0]
 802abca:	687b      	ldr	r3, [r7, #4]
 802abcc:	681b      	ldr	r3, [r3, #0]
 802abce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802abd2:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 802abd4:	687b      	ldr	r3, [r7, #4]
 802abd6:	681b      	ldr	r3, [r3, #0]
 802abd8:	685a      	ldr	r2, [r3, #4]
 802abda:	687b      	ldr	r3, [r7, #4]
 802abdc:	681b      	ldr	r3, [r3, #0]
 802abde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 802abe2:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 802abe4:	687b      	ldr	r3, [r7, #4]
 802abe6:	681b      	ldr	r3, [r3, #0]
 802abe8:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 802abea:	687b      	ldr	r3, [r7, #4]
 802abec:	2207      	movs	r2, #7
 802abee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 802abf2:	bf00      	nop
 802abf4:	3714      	adds	r7, #20
 802abf6:	46bd      	mov	sp, r7
 802abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abfc:	4770      	bx	lr
 802abfe:	bf00      	nop
 802ac00:	20001028 	.word	0x20001028
 802ac04:	057619f1 	.word	0x057619f1

0802ac08 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 802ac08:	b480      	push	{r7}
 802ac0a:	b083      	sub	sp, #12
 802ac0c:	af00      	add	r7, sp, #0
 802ac0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 802ac10:	687b      	ldr	r3, [r7, #4]
 802ac12:	681b      	ldr	r3, [r3, #0]
 802ac14:	685a      	ldr	r2, [r3, #4]
 802ac16:	687b      	ldr	r3, [r7, #4]
 802ac18:	681b      	ldr	r3, [r3, #0]
 802ac1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802ac1e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 802ac20:	687b      	ldr	r3, [r7, #4]
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	681a      	ldr	r2, [r3, #0]
 802ac26:	687b      	ldr	r3, [r7, #4]
 802ac28:	681b      	ldr	r3, [r3, #0]
 802ac2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802ac2e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 802ac30:	687b      	ldr	r3, [r7, #4]
 802ac32:	2207      	movs	r2, #7
 802ac34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 802ac38:	bf00      	nop
 802ac3a:	370c      	adds	r7, #12
 802ac3c:	46bd      	mov	sp, r7
 802ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac42:	4770      	bx	lr

0802ac44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802ac44:	b580      	push	{r7, lr}
 802ac46:	b082      	sub	sp, #8
 802ac48:	af00      	add	r7, sp, #0
 802ac4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802ac4c:	687b      	ldr	r3, [r7, #4]
 802ac4e:	2b00      	cmp	r3, #0
 802ac50:	d101      	bne.n	802ac56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802ac52:	2301      	movs	r3, #1
 802ac54:	e01d      	b.n	802ac92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802ac56:	687b      	ldr	r3, [r7, #4]
 802ac58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802ac5c:	b2db      	uxtb	r3, r3
 802ac5e:	2b00      	cmp	r3, #0
 802ac60:	d106      	bne.n	802ac70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802ac62:	687b      	ldr	r3, [r7, #4]
 802ac64:	2200      	movs	r2, #0
 802ac66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802ac6a:	6878      	ldr	r0, [r7, #4]
 802ac6c:	f000 f815 	bl	802ac9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802ac70:	687b      	ldr	r3, [r7, #4]
 802ac72:	2202      	movs	r2, #2
 802ac74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802ac78:	687b      	ldr	r3, [r7, #4]
 802ac7a:	681a      	ldr	r2, [r3, #0]
 802ac7c:	687b      	ldr	r3, [r7, #4]
 802ac7e:	3304      	adds	r3, #4
 802ac80:	4619      	mov	r1, r3
 802ac82:	4610      	mov	r0, r2
 802ac84:	f000 fa2c 	bl	802b0e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802ac88:	687b      	ldr	r3, [r7, #4]
 802ac8a:	2201      	movs	r2, #1
 802ac8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802ac90:	2300      	movs	r3, #0
}
 802ac92:	4618      	mov	r0, r3
 802ac94:	3708      	adds	r7, #8
 802ac96:	46bd      	mov	sp, r7
 802ac98:	bd80      	pop	{r7, pc}

0802ac9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 802ac9a:	b480      	push	{r7}
 802ac9c:	b083      	sub	sp, #12
 802ac9e:	af00      	add	r7, sp, #0
 802aca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 802aca2:	bf00      	nop
 802aca4:	370c      	adds	r7, #12
 802aca6:	46bd      	mov	sp, r7
 802aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acac:	4770      	bx	lr

0802acae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 802acae:	b480      	push	{r7}
 802acb0:	b085      	sub	sp, #20
 802acb2:	af00      	add	r7, sp, #0
 802acb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802acb6:	687b      	ldr	r3, [r7, #4]
 802acb8:	2202      	movs	r2, #2
 802acba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802acbe:	687b      	ldr	r3, [r7, #4]
 802acc0:	681b      	ldr	r3, [r3, #0]
 802acc2:	689b      	ldr	r3, [r3, #8]
 802acc4:	f003 0307 	and.w	r3, r3, #7
 802acc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802acca:	68fb      	ldr	r3, [r7, #12]
 802accc:	2b06      	cmp	r3, #6
 802acce:	d007      	beq.n	802ace0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 802acd0:	687b      	ldr	r3, [r7, #4]
 802acd2:	681b      	ldr	r3, [r3, #0]
 802acd4:	681a      	ldr	r2, [r3, #0]
 802acd6:	687b      	ldr	r3, [r7, #4]
 802acd8:	681b      	ldr	r3, [r3, #0]
 802acda:	f042 0201 	orr.w	r2, r2, #1
 802acde:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802ace0:	687b      	ldr	r3, [r7, #4]
 802ace2:	2201      	movs	r2, #1
 802ace4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 802ace8:	2300      	movs	r3, #0
}
 802acea:	4618      	mov	r0, r3
 802acec:	3714      	adds	r7, #20
 802acee:	46bd      	mov	sp, r7
 802acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acf4:	4770      	bx	lr

0802acf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802acf6:	b580      	push	{r7, lr}
 802acf8:	b082      	sub	sp, #8
 802acfa:	af00      	add	r7, sp, #0
 802acfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802acfe:	687b      	ldr	r3, [r7, #4]
 802ad00:	681b      	ldr	r3, [r3, #0]
 802ad02:	691b      	ldr	r3, [r3, #16]
 802ad04:	f003 0302 	and.w	r3, r3, #2
 802ad08:	2b02      	cmp	r3, #2
 802ad0a:	d122      	bne.n	802ad52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802ad0c:	687b      	ldr	r3, [r7, #4]
 802ad0e:	681b      	ldr	r3, [r3, #0]
 802ad10:	68db      	ldr	r3, [r3, #12]
 802ad12:	f003 0302 	and.w	r3, r3, #2
 802ad16:	2b02      	cmp	r3, #2
 802ad18:	d11b      	bne.n	802ad52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802ad1a:	687b      	ldr	r3, [r7, #4]
 802ad1c:	681b      	ldr	r3, [r3, #0]
 802ad1e:	f06f 0202 	mvn.w	r2, #2
 802ad22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802ad24:	687b      	ldr	r3, [r7, #4]
 802ad26:	2201      	movs	r2, #1
 802ad28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802ad2a:	687b      	ldr	r3, [r7, #4]
 802ad2c:	681b      	ldr	r3, [r3, #0]
 802ad2e:	699b      	ldr	r3, [r3, #24]
 802ad30:	f003 0303 	and.w	r3, r3, #3
 802ad34:	2b00      	cmp	r3, #0
 802ad36:	d003      	beq.n	802ad40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802ad38:	6878      	ldr	r0, [r7, #4]
 802ad3a:	f000 f9b2 	bl	802b0a2 <HAL_TIM_IC_CaptureCallback>
 802ad3e:	e005      	b.n	802ad4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802ad40:	6878      	ldr	r0, [r7, #4]
 802ad42:	f000 f9a4 	bl	802b08e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ad46:	6878      	ldr	r0, [r7, #4]
 802ad48:	f000 f9b5 	bl	802b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802ad4c:	687b      	ldr	r3, [r7, #4]
 802ad4e:	2200      	movs	r2, #0
 802ad50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802ad52:	687b      	ldr	r3, [r7, #4]
 802ad54:	681b      	ldr	r3, [r3, #0]
 802ad56:	691b      	ldr	r3, [r3, #16]
 802ad58:	f003 0304 	and.w	r3, r3, #4
 802ad5c:	2b04      	cmp	r3, #4
 802ad5e:	d122      	bne.n	802ada6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802ad60:	687b      	ldr	r3, [r7, #4]
 802ad62:	681b      	ldr	r3, [r3, #0]
 802ad64:	68db      	ldr	r3, [r3, #12]
 802ad66:	f003 0304 	and.w	r3, r3, #4
 802ad6a:	2b04      	cmp	r3, #4
 802ad6c:	d11b      	bne.n	802ada6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802ad6e:	687b      	ldr	r3, [r7, #4]
 802ad70:	681b      	ldr	r3, [r3, #0]
 802ad72:	f06f 0204 	mvn.w	r2, #4
 802ad76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802ad78:	687b      	ldr	r3, [r7, #4]
 802ad7a:	2202      	movs	r2, #2
 802ad7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802ad7e:	687b      	ldr	r3, [r7, #4]
 802ad80:	681b      	ldr	r3, [r3, #0]
 802ad82:	699b      	ldr	r3, [r3, #24]
 802ad84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802ad88:	2b00      	cmp	r3, #0
 802ad8a:	d003      	beq.n	802ad94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802ad8c:	6878      	ldr	r0, [r7, #4]
 802ad8e:	f000 f988 	bl	802b0a2 <HAL_TIM_IC_CaptureCallback>
 802ad92:	e005      	b.n	802ada0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802ad94:	6878      	ldr	r0, [r7, #4]
 802ad96:	f000 f97a 	bl	802b08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ad9a:	6878      	ldr	r0, [r7, #4]
 802ad9c:	f000 f98b 	bl	802b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802ada0:	687b      	ldr	r3, [r7, #4]
 802ada2:	2200      	movs	r2, #0
 802ada4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802ada6:	687b      	ldr	r3, [r7, #4]
 802ada8:	681b      	ldr	r3, [r3, #0]
 802adaa:	691b      	ldr	r3, [r3, #16]
 802adac:	f003 0308 	and.w	r3, r3, #8
 802adb0:	2b08      	cmp	r3, #8
 802adb2:	d122      	bne.n	802adfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802adb4:	687b      	ldr	r3, [r7, #4]
 802adb6:	681b      	ldr	r3, [r3, #0]
 802adb8:	68db      	ldr	r3, [r3, #12]
 802adba:	f003 0308 	and.w	r3, r3, #8
 802adbe:	2b08      	cmp	r3, #8
 802adc0:	d11b      	bne.n	802adfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	681b      	ldr	r3, [r3, #0]
 802adc6:	f06f 0208 	mvn.w	r2, #8
 802adca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802adcc:	687b      	ldr	r3, [r7, #4]
 802adce:	2204      	movs	r2, #4
 802add0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802add2:	687b      	ldr	r3, [r7, #4]
 802add4:	681b      	ldr	r3, [r3, #0]
 802add6:	69db      	ldr	r3, [r3, #28]
 802add8:	f003 0303 	and.w	r3, r3, #3
 802addc:	2b00      	cmp	r3, #0
 802adde:	d003      	beq.n	802ade8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802ade0:	6878      	ldr	r0, [r7, #4]
 802ade2:	f000 f95e 	bl	802b0a2 <HAL_TIM_IC_CaptureCallback>
 802ade6:	e005      	b.n	802adf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802ade8:	6878      	ldr	r0, [r7, #4]
 802adea:	f000 f950 	bl	802b08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802adee:	6878      	ldr	r0, [r7, #4]
 802adf0:	f000 f961 	bl	802b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802adf4:	687b      	ldr	r3, [r7, #4]
 802adf6:	2200      	movs	r2, #0
 802adf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802adfa:	687b      	ldr	r3, [r7, #4]
 802adfc:	681b      	ldr	r3, [r3, #0]
 802adfe:	691b      	ldr	r3, [r3, #16]
 802ae00:	f003 0310 	and.w	r3, r3, #16
 802ae04:	2b10      	cmp	r3, #16
 802ae06:	d122      	bne.n	802ae4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802ae08:	687b      	ldr	r3, [r7, #4]
 802ae0a:	681b      	ldr	r3, [r3, #0]
 802ae0c:	68db      	ldr	r3, [r3, #12]
 802ae0e:	f003 0310 	and.w	r3, r3, #16
 802ae12:	2b10      	cmp	r3, #16
 802ae14:	d11b      	bne.n	802ae4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802ae16:	687b      	ldr	r3, [r7, #4]
 802ae18:	681b      	ldr	r3, [r3, #0]
 802ae1a:	f06f 0210 	mvn.w	r2, #16
 802ae1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	2208      	movs	r2, #8
 802ae24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802ae26:	687b      	ldr	r3, [r7, #4]
 802ae28:	681b      	ldr	r3, [r3, #0]
 802ae2a:	69db      	ldr	r3, [r3, #28]
 802ae2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802ae30:	2b00      	cmp	r3, #0
 802ae32:	d003      	beq.n	802ae3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802ae34:	6878      	ldr	r0, [r7, #4]
 802ae36:	f000 f934 	bl	802b0a2 <HAL_TIM_IC_CaptureCallback>
 802ae3a:	e005      	b.n	802ae48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802ae3c:	6878      	ldr	r0, [r7, #4]
 802ae3e:	f000 f926 	bl	802b08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ae42:	6878      	ldr	r0, [r7, #4]
 802ae44:	f000 f937 	bl	802b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802ae48:	687b      	ldr	r3, [r7, #4]
 802ae4a:	2200      	movs	r2, #0
 802ae4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802ae4e:	687b      	ldr	r3, [r7, #4]
 802ae50:	681b      	ldr	r3, [r3, #0]
 802ae52:	691b      	ldr	r3, [r3, #16]
 802ae54:	f003 0301 	and.w	r3, r3, #1
 802ae58:	2b01      	cmp	r3, #1
 802ae5a:	d10e      	bne.n	802ae7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802ae5c:	687b      	ldr	r3, [r7, #4]
 802ae5e:	681b      	ldr	r3, [r3, #0]
 802ae60:	68db      	ldr	r3, [r3, #12]
 802ae62:	f003 0301 	and.w	r3, r3, #1
 802ae66:	2b01      	cmp	r3, #1
 802ae68:	d107      	bne.n	802ae7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802ae6a:	687b      	ldr	r3, [r7, #4]
 802ae6c:	681b      	ldr	r3, [r3, #0]
 802ae6e:	f06f 0201 	mvn.w	r2, #1
 802ae72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802ae74:	6878      	ldr	r0, [r7, #4]
 802ae76:	f005 fc99 	bl	80307ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802ae7a:	687b      	ldr	r3, [r7, #4]
 802ae7c:	681b      	ldr	r3, [r3, #0]
 802ae7e:	691b      	ldr	r3, [r3, #16]
 802ae80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ae84:	2b80      	cmp	r3, #128	@ 0x80
 802ae86:	d10e      	bne.n	802aea6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802ae88:	687b      	ldr	r3, [r7, #4]
 802ae8a:	681b      	ldr	r3, [r3, #0]
 802ae8c:	68db      	ldr	r3, [r3, #12]
 802ae8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ae92:	2b80      	cmp	r3, #128	@ 0x80
 802ae94:	d107      	bne.n	802aea6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802ae96:	687b      	ldr	r3, [r7, #4]
 802ae98:	681b      	ldr	r3, [r3, #0]
 802ae9a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 802ae9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802aea0:	6878      	ldr	r0, [r7, #4]
 802aea2:	f000 fadd 	bl	802b460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802aea6:	687b      	ldr	r3, [r7, #4]
 802aea8:	681b      	ldr	r3, [r3, #0]
 802aeaa:	691b      	ldr	r3, [r3, #16]
 802aeac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802aeb0:	2b40      	cmp	r3, #64	@ 0x40
 802aeb2:	d10e      	bne.n	802aed2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802aeb4:	687b      	ldr	r3, [r7, #4]
 802aeb6:	681b      	ldr	r3, [r3, #0]
 802aeb8:	68db      	ldr	r3, [r3, #12]
 802aeba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802aebe:	2b40      	cmp	r3, #64	@ 0x40
 802aec0:	d107      	bne.n	802aed2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	681b      	ldr	r3, [r3, #0]
 802aec6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 802aeca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802aecc:	6878      	ldr	r0, [r7, #4]
 802aece:	f000 f8fc 	bl	802b0ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802aed2:	687b      	ldr	r3, [r7, #4]
 802aed4:	681b      	ldr	r3, [r3, #0]
 802aed6:	691b      	ldr	r3, [r3, #16]
 802aed8:	f003 0320 	and.w	r3, r3, #32
 802aedc:	2b20      	cmp	r3, #32
 802aede:	d10e      	bne.n	802aefe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802aee0:	687b      	ldr	r3, [r7, #4]
 802aee2:	681b      	ldr	r3, [r3, #0]
 802aee4:	68db      	ldr	r3, [r3, #12]
 802aee6:	f003 0320 	and.w	r3, r3, #32
 802aeea:	2b20      	cmp	r3, #32
 802aeec:	d107      	bne.n	802aefe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802aeee:	687b      	ldr	r3, [r7, #4]
 802aef0:	681b      	ldr	r3, [r3, #0]
 802aef2:	f06f 0220 	mvn.w	r2, #32
 802aef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802aef8:	6878      	ldr	r0, [r7, #4]
 802aefa:	f000 faa7 	bl	802b44c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802aefe:	bf00      	nop
 802af00:	3708      	adds	r7, #8
 802af02:	46bd      	mov	sp, r7
 802af04:	bd80      	pop	{r7, pc}

0802af06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802af06:	b580      	push	{r7, lr}
 802af08:	b084      	sub	sp, #16
 802af0a:	af00      	add	r7, sp, #0
 802af0c:	6078      	str	r0, [r7, #4]
 802af0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802af10:	687b      	ldr	r3, [r7, #4]
 802af12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802af16:	2b01      	cmp	r3, #1
 802af18:	d101      	bne.n	802af1e <HAL_TIM_ConfigClockSource+0x18>
 802af1a:	2302      	movs	r3, #2
 802af1c:	e0b3      	b.n	802b086 <HAL_TIM_ConfigClockSource+0x180>
 802af1e:	687b      	ldr	r3, [r7, #4]
 802af20:	2201      	movs	r2, #1
 802af22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802af26:	687b      	ldr	r3, [r7, #4]
 802af28:	2202      	movs	r2, #2
 802af2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802af2e:	687b      	ldr	r3, [r7, #4]
 802af30:	681b      	ldr	r3, [r3, #0]
 802af32:	689b      	ldr	r3, [r3, #8]
 802af34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802af36:	68fb      	ldr	r3, [r7, #12]
 802af38:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 802af3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802af3e:	68fb      	ldr	r3, [r7, #12]
 802af40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 802af44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802af46:	687b      	ldr	r3, [r7, #4]
 802af48:	681b      	ldr	r3, [r3, #0]
 802af4a:	68fa      	ldr	r2, [r7, #12]
 802af4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802af4e:	683b      	ldr	r3, [r7, #0]
 802af50:	681b      	ldr	r3, [r3, #0]
 802af52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802af56:	d03e      	beq.n	802afd6 <HAL_TIM_ConfigClockSource+0xd0>
 802af58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802af5c:	f200 8087 	bhi.w	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802af64:	f000 8085 	beq.w	802b072 <HAL_TIM_ConfigClockSource+0x16c>
 802af68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802af6c:	d87f      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af6e:	2b70      	cmp	r3, #112	@ 0x70
 802af70:	d01a      	beq.n	802afa8 <HAL_TIM_ConfigClockSource+0xa2>
 802af72:	2b70      	cmp	r3, #112	@ 0x70
 802af74:	d87b      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af76:	2b60      	cmp	r3, #96	@ 0x60
 802af78:	d050      	beq.n	802b01c <HAL_TIM_ConfigClockSource+0x116>
 802af7a:	2b60      	cmp	r3, #96	@ 0x60
 802af7c:	d877      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af7e:	2b50      	cmp	r3, #80	@ 0x50
 802af80:	d03c      	beq.n	802affc <HAL_TIM_ConfigClockSource+0xf6>
 802af82:	2b50      	cmp	r3, #80	@ 0x50
 802af84:	d873      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af86:	2b40      	cmp	r3, #64	@ 0x40
 802af88:	d058      	beq.n	802b03c <HAL_TIM_ConfigClockSource+0x136>
 802af8a:	2b40      	cmp	r3, #64	@ 0x40
 802af8c:	d86f      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af8e:	2b30      	cmp	r3, #48	@ 0x30
 802af90:	d064      	beq.n	802b05c <HAL_TIM_ConfigClockSource+0x156>
 802af92:	2b30      	cmp	r3, #48	@ 0x30
 802af94:	d86b      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af96:	2b20      	cmp	r3, #32
 802af98:	d060      	beq.n	802b05c <HAL_TIM_ConfigClockSource+0x156>
 802af9a:	2b20      	cmp	r3, #32
 802af9c:	d867      	bhi.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
 802af9e:	2b00      	cmp	r3, #0
 802afa0:	d05c      	beq.n	802b05c <HAL_TIM_ConfigClockSource+0x156>
 802afa2:	2b10      	cmp	r3, #16
 802afa4:	d05a      	beq.n	802b05c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802afa6:	e062      	b.n	802b06e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 802afa8:	687b      	ldr	r3, [r7, #4]
 802afaa:	6818      	ldr	r0, [r3, #0]
 802afac:	683b      	ldr	r3, [r7, #0]
 802afae:	6899      	ldr	r1, [r3, #8]
 802afb0:	683b      	ldr	r3, [r7, #0]
 802afb2:	685a      	ldr	r2, [r3, #4]
 802afb4:	683b      	ldr	r3, [r7, #0]
 802afb6:	68db      	ldr	r3, [r3, #12]
 802afb8:	f000 f9ac 	bl	802b314 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802afbc:	687b      	ldr	r3, [r7, #4]
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	689b      	ldr	r3, [r3, #8]
 802afc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802afc4:	68fb      	ldr	r3, [r7, #12]
 802afc6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 802afca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802afcc:	687b      	ldr	r3, [r7, #4]
 802afce:	681b      	ldr	r3, [r3, #0]
 802afd0:	68fa      	ldr	r2, [r7, #12]
 802afd2:	609a      	str	r2, [r3, #8]
      break;
 802afd4:	e04e      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 802afd6:	687b      	ldr	r3, [r7, #4]
 802afd8:	6818      	ldr	r0, [r3, #0]
 802afda:	683b      	ldr	r3, [r7, #0]
 802afdc:	6899      	ldr	r1, [r3, #8]
 802afde:	683b      	ldr	r3, [r7, #0]
 802afe0:	685a      	ldr	r2, [r3, #4]
 802afe2:	683b      	ldr	r3, [r7, #0]
 802afe4:	68db      	ldr	r3, [r3, #12]
 802afe6:	f000 f995 	bl	802b314 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802afea:	687b      	ldr	r3, [r7, #4]
 802afec:	681b      	ldr	r3, [r3, #0]
 802afee:	689a      	ldr	r2, [r3, #8]
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	681b      	ldr	r3, [r3, #0]
 802aff4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802aff8:	609a      	str	r2, [r3, #8]
      break;
 802affa:	e03b      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802affc:	687b      	ldr	r3, [r7, #4]
 802affe:	6818      	ldr	r0, [r3, #0]
 802b000:	683b      	ldr	r3, [r7, #0]
 802b002:	6859      	ldr	r1, [r3, #4]
 802b004:	683b      	ldr	r3, [r7, #0]
 802b006:	68db      	ldr	r3, [r3, #12]
 802b008:	461a      	mov	r2, r3
 802b00a:	f000 f909 	bl	802b220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802b00e:	687b      	ldr	r3, [r7, #4]
 802b010:	681b      	ldr	r3, [r3, #0]
 802b012:	2150      	movs	r1, #80	@ 0x50
 802b014:	4618      	mov	r0, r3
 802b016:	f000 f962 	bl	802b2de <TIM_ITRx_SetConfig>
      break;
 802b01a:	e02b      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802b01c:	687b      	ldr	r3, [r7, #4]
 802b01e:	6818      	ldr	r0, [r3, #0]
 802b020:	683b      	ldr	r3, [r7, #0]
 802b022:	6859      	ldr	r1, [r3, #4]
 802b024:	683b      	ldr	r3, [r7, #0]
 802b026:	68db      	ldr	r3, [r3, #12]
 802b028:	461a      	mov	r2, r3
 802b02a:	f000 f928 	bl	802b27e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802b02e:	687b      	ldr	r3, [r7, #4]
 802b030:	681b      	ldr	r3, [r3, #0]
 802b032:	2160      	movs	r1, #96	@ 0x60
 802b034:	4618      	mov	r0, r3
 802b036:	f000 f952 	bl	802b2de <TIM_ITRx_SetConfig>
      break;
 802b03a:	e01b      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802b03c:	687b      	ldr	r3, [r7, #4]
 802b03e:	6818      	ldr	r0, [r3, #0]
 802b040:	683b      	ldr	r3, [r7, #0]
 802b042:	6859      	ldr	r1, [r3, #4]
 802b044:	683b      	ldr	r3, [r7, #0]
 802b046:	68db      	ldr	r3, [r3, #12]
 802b048:	461a      	mov	r2, r3
 802b04a:	f000 f8e9 	bl	802b220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802b04e:	687b      	ldr	r3, [r7, #4]
 802b050:	681b      	ldr	r3, [r3, #0]
 802b052:	2140      	movs	r1, #64	@ 0x40
 802b054:	4618      	mov	r0, r3
 802b056:	f000 f942 	bl	802b2de <TIM_ITRx_SetConfig>
      break;
 802b05a:	e00b      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802b05c:	687b      	ldr	r3, [r7, #4]
 802b05e:	681a      	ldr	r2, [r3, #0]
 802b060:	683b      	ldr	r3, [r7, #0]
 802b062:	681b      	ldr	r3, [r3, #0]
 802b064:	4619      	mov	r1, r3
 802b066:	4610      	mov	r0, r2
 802b068:	f000 f939 	bl	802b2de <TIM_ITRx_SetConfig>
      break;
 802b06c:	e002      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 802b06e:	bf00      	nop
 802b070:	e000      	b.n	802b074 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 802b072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802b074:	687b      	ldr	r3, [r7, #4]
 802b076:	2201      	movs	r2, #1
 802b078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 802b07c:	687b      	ldr	r3, [r7, #4]
 802b07e:	2200      	movs	r2, #0
 802b080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802b084:	2300      	movs	r3, #0
}
 802b086:	4618      	mov	r0, r3
 802b088:	3710      	adds	r7, #16
 802b08a:	46bd      	mov	sp, r7
 802b08c:	bd80      	pop	{r7, pc}

0802b08e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802b08e:	b480      	push	{r7}
 802b090:	b083      	sub	sp, #12
 802b092:	af00      	add	r7, sp, #0
 802b094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802b096:	bf00      	nop
 802b098:	370c      	adds	r7, #12
 802b09a:	46bd      	mov	sp, r7
 802b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0a0:	4770      	bx	lr

0802b0a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802b0a2:	b480      	push	{r7}
 802b0a4:	b083      	sub	sp, #12
 802b0a6:	af00      	add	r7, sp, #0
 802b0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802b0aa:	bf00      	nop
 802b0ac:	370c      	adds	r7, #12
 802b0ae:	46bd      	mov	sp, r7
 802b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0b4:	4770      	bx	lr

0802b0b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802b0b6:	b480      	push	{r7}
 802b0b8:	b083      	sub	sp, #12
 802b0ba:	af00      	add	r7, sp, #0
 802b0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802b0be:	bf00      	nop
 802b0c0:	370c      	adds	r7, #12
 802b0c2:	46bd      	mov	sp, r7
 802b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0c8:	4770      	bx	lr

0802b0ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802b0ca:	b480      	push	{r7}
 802b0cc:	b083      	sub	sp, #12
 802b0ce:	af00      	add	r7, sp, #0
 802b0d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802b0d2:	bf00      	nop
 802b0d4:	370c      	adds	r7, #12
 802b0d6:	46bd      	mov	sp, r7
 802b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0dc:	4770      	bx	lr
	...

0802b0e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802b0e0:	b480      	push	{r7}
 802b0e2:	b085      	sub	sp, #20
 802b0e4:	af00      	add	r7, sp, #0
 802b0e6:	6078      	str	r0, [r7, #4]
 802b0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802b0ea:	687b      	ldr	r3, [r7, #4]
 802b0ec:	681b      	ldr	r3, [r3, #0]
 802b0ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802b0f0:	687b      	ldr	r3, [r7, #4]
 802b0f2:	4a40      	ldr	r2, [pc, #256]	@ (802b1f4 <TIM_Base_SetConfig+0x114>)
 802b0f4:	4293      	cmp	r3, r2
 802b0f6:	d013      	beq.n	802b120 <TIM_Base_SetConfig+0x40>
 802b0f8:	687b      	ldr	r3, [r7, #4]
 802b0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802b0fe:	d00f      	beq.n	802b120 <TIM_Base_SetConfig+0x40>
 802b100:	687b      	ldr	r3, [r7, #4]
 802b102:	4a3d      	ldr	r2, [pc, #244]	@ (802b1f8 <TIM_Base_SetConfig+0x118>)
 802b104:	4293      	cmp	r3, r2
 802b106:	d00b      	beq.n	802b120 <TIM_Base_SetConfig+0x40>
 802b108:	687b      	ldr	r3, [r7, #4]
 802b10a:	4a3c      	ldr	r2, [pc, #240]	@ (802b1fc <TIM_Base_SetConfig+0x11c>)
 802b10c:	4293      	cmp	r3, r2
 802b10e:	d007      	beq.n	802b120 <TIM_Base_SetConfig+0x40>
 802b110:	687b      	ldr	r3, [r7, #4]
 802b112:	4a3b      	ldr	r2, [pc, #236]	@ (802b200 <TIM_Base_SetConfig+0x120>)
 802b114:	4293      	cmp	r3, r2
 802b116:	d003      	beq.n	802b120 <TIM_Base_SetConfig+0x40>
 802b118:	687b      	ldr	r3, [r7, #4]
 802b11a:	4a3a      	ldr	r2, [pc, #232]	@ (802b204 <TIM_Base_SetConfig+0x124>)
 802b11c:	4293      	cmp	r3, r2
 802b11e:	d108      	bne.n	802b132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802b120:	68fb      	ldr	r3, [r7, #12]
 802b122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802b126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802b128:	683b      	ldr	r3, [r7, #0]
 802b12a:	685b      	ldr	r3, [r3, #4]
 802b12c:	68fa      	ldr	r2, [r7, #12]
 802b12e:	4313      	orrs	r3, r2
 802b130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802b132:	687b      	ldr	r3, [r7, #4]
 802b134:	4a2f      	ldr	r2, [pc, #188]	@ (802b1f4 <TIM_Base_SetConfig+0x114>)
 802b136:	4293      	cmp	r3, r2
 802b138:	d02b      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b13a:	687b      	ldr	r3, [r7, #4]
 802b13c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802b140:	d027      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b142:	687b      	ldr	r3, [r7, #4]
 802b144:	4a2c      	ldr	r2, [pc, #176]	@ (802b1f8 <TIM_Base_SetConfig+0x118>)
 802b146:	4293      	cmp	r3, r2
 802b148:	d023      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b14a:	687b      	ldr	r3, [r7, #4]
 802b14c:	4a2b      	ldr	r2, [pc, #172]	@ (802b1fc <TIM_Base_SetConfig+0x11c>)
 802b14e:	4293      	cmp	r3, r2
 802b150:	d01f      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b152:	687b      	ldr	r3, [r7, #4]
 802b154:	4a2a      	ldr	r2, [pc, #168]	@ (802b200 <TIM_Base_SetConfig+0x120>)
 802b156:	4293      	cmp	r3, r2
 802b158:	d01b      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b15a:	687b      	ldr	r3, [r7, #4]
 802b15c:	4a29      	ldr	r2, [pc, #164]	@ (802b204 <TIM_Base_SetConfig+0x124>)
 802b15e:	4293      	cmp	r3, r2
 802b160:	d017      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b162:	687b      	ldr	r3, [r7, #4]
 802b164:	4a28      	ldr	r2, [pc, #160]	@ (802b208 <TIM_Base_SetConfig+0x128>)
 802b166:	4293      	cmp	r3, r2
 802b168:	d013      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b16a:	687b      	ldr	r3, [r7, #4]
 802b16c:	4a27      	ldr	r2, [pc, #156]	@ (802b20c <TIM_Base_SetConfig+0x12c>)
 802b16e:	4293      	cmp	r3, r2
 802b170:	d00f      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b172:	687b      	ldr	r3, [r7, #4]
 802b174:	4a26      	ldr	r2, [pc, #152]	@ (802b210 <TIM_Base_SetConfig+0x130>)
 802b176:	4293      	cmp	r3, r2
 802b178:	d00b      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b17a:	687b      	ldr	r3, [r7, #4]
 802b17c:	4a25      	ldr	r2, [pc, #148]	@ (802b214 <TIM_Base_SetConfig+0x134>)
 802b17e:	4293      	cmp	r3, r2
 802b180:	d007      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b182:	687b      	ldr	r3, [r7, #4]
 802b184:	4a24      	ldr	r2, [pc, #144]	@ (802b218 <TIM_Base_SetConfig+0x138>)
 802b186:	4293      	cmp	r3, r2
 802b188:	d003      	beq.n	802b192 <TIM_Base_SetConfig+0xb2>
 802b18a:	687b      	ldr	r3, [r7, #4]
 802b18c:	4a23      	ldr	r2, [pc, #140]	@ (802b21c <TIM_Base_SetConfig+0x13c>)
 802b18e:	4293      	cmp	r3, r2
 802b190:	d108      	bne.n	802b1a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802b192:	68fb      	ldr	r3, [r7, #12]
 802b194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802b198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802b19a:	683b      	ldr	r3, [r7, #0]
 802b19c:	68db      	ldr	r3, [r3, #12]
 802b19e:	68fa      	ldr	r2, [r7, #12]
 802b1a0:	4313      	orrs	r3, r2
 802b1a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802b1a4:	68fb      	ldr	r3, [r7, #12]
 802b1a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 802b1aa:	683b      	ldr	r3, [r7, #0]
 802b1ac:	695b      	ldr	r3, [r3, #20]
 802b1ae:	4313      	orrs	r3, r2
 802b1b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802b1b2:	687b      	ldr	r3, [r7, #4]
 802b1b4:	68fa      	ldr	r2, [r7, #12]
 802b1b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802b1b8:	683b      	ldr	r3, [r7, #0]
 802b1ba:	689a      	ldr	r2, [r3, #8]
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802b1c0:	683b      	ldr	r3, [r7, #0]
 802b1c2:	681a      	ldr	r2, [r3, #0]
 802b1c4:	687b      	ldr	r3, [r7, #4]
 802b1c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802b1c8:	687b      	ldr	r3, [r7, #4]
 802b1ca:	4a0a      	ldr	r2, [pc, #40]	@ (802b1f4 <TIM_Base_SetConfig+0x114>)
 802b1cc:	4293      	cmp	r3, r2
 802b1ce:	d003      	beq.n	802b1d8 <TIM_Base_SetConfig+0xf8>
 802b1d0:	687b      	ldr	r3, [r7, #4]
 802b1d2:	4a0c      	ldr	r2, [pc, #48]	@ (802b204 <TIM_Base_SetConfig+0x124>)
 802b1d4:	4293      	cmp	r3, r2
 802b1d6:	d103      	bne.n	802b1e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802b1d8:	683b      	ldr	r3, [r7, #0]
 802b1da:	691a      	ldr	r2, [r3, #16]
 802b1dc:	687b      	ldr	r3, [r7, #4]
 802b1de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802b1e0:	687b      	ldr	r3, [r7, #4]
 802b1e2:	2201      	movs	r2, #1
 802b1e4:	615a      	str	r2, [r3, #20]
}
 802b1e6:	bf00      	nop
 802b1e8:	3714      	adds	r7, #20
 802b1ea:	46bd      	mov	sp, r7
 802b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1f0:	4770      	bx	lr
 802b1f2:	bf00      	nop
 802b1f4:	40010000 	.word	0x40010000
 802b1f8:	40000400 	.word	0x40000400
 802b1fc:	40000800 	.word	0x40000800
 802b200:	40000c00 	.word	0x40000c00
 802b204:	40010400 	.word	0x40010400
 802b208:	40014000 	.word	0x40014000
 802b20c:	40014400 	.word	0x40014400
 802b210:	40014800 	.word	0x40014800
 802b214:	40001800 	.word	0x40001800
 802b218:	40001c00 	.word	0x40001c00
 802b21c:	40002000 	.word	0x40002000

0802b220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802b220:	b480      	push	{r7}
 802b222:	b087      	sub	sp, #28
 802b224:	af00      	add	r7, sp, #0
 802b226:	60f8      	str	r0, [r7, #12]
 802b228:	60b9      	str	r1, [r7, #8]
 802b22a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802b22c:	68fb      	ldr	r3, [r7, #12]
 802b22e:	6a1b      	ldr	r3, [r3, #32]
 802b230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802b232:	68fb      	ldr	r3, [r7, #12]
 802b234:	6a1b      	ldr	r3, [r3, #32]
 802b236:	f023 0201 	bic.w	r2, r3, #1
 802b23a:	68fb      	ldr	r3, [r7, #12]
 802b23c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802b23e:	68fb      	ldr	r3, [r7, #12]
 802b240:	699b      	ldr	r3, [r3, #24]
 802b242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802b244:	693b      	ldr	r3, [r7, #16]
 802b246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802b24a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802b24c:	687b      	ldr	r3, [r7, #4]
 802b24e:	011b      	lsls	r3, r3, #4
 802b250:	693a      	ldr	r2, [r7, #16]
 802b252:	4313      	orrs	r3, r2
 802b254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802b256:	697b      	ldr	r3, [r7, #20]
 802b258:	f023 030a 	bic.w	r3, r3, #10
 802b25c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802b25e:	697a      	ldr	r2, [r7, #20]
 802b260:	68bb      	ldr	r3, [r7, #8]
 802b262:	4313      	orrs	r3, r2
 802b264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802b266:	68fb      	ldr	r3, [r7, #12]
 802b268:	693a      	ldr	r2, [r7, #16]
 802b26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802b26c:	68fb      	ldr	r3, [r7, #12]
 802b26e:	697a      	ldr	r2, [r7, #20]
 802b270:	621a      	str	r2, [r3, #32]
}
 802b272:	bf00      	nop
 802b274:	371c      	adds	r7, #28
 802b276:	46bd      	mov	sp, r7
 802b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b27c:	4770      	bx	lr

0802b27e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802b27e:	b480      	push	{r7}
 802b280:	b087      	sub	sp, #28
 802b282:	af00      	add	r7, sp, #0
 802b284:	60f8      	str	r0, [r7, #12]
 802b286:	60b9      	str	r1, [r7, #8]
 802b288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802b28a:	68fb      	ldr	r3, [r7, #12]
 802b28c:	6a1b      	ldr	r3, [r3, #32]
 802b28e:	f023 0210 	bic.w	r2, r3, #16
 802b292:	68fb      	ldr	r3, [r7, #12]
 802b294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802b296:	68fb      	ldr	r3, [r7, #12]
 802b298:	699b      	ldr	r3, [r3, #24]
 802b29a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802b29c:	68fb      	ldr	r3, [r7, #12]
 802b29e:	6a1b      	ldr	r3, [r3, #32]
 802b2a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802b2a2:	697b      	ldr	r3, [r7, #20]
 802b2a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 802b2a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802b2aa:	687b      	ldr	r3, [r7, #4]
 802b2ac:	031b      	lsls	r3, r3, #12
 802b2ae:	697a      	ldr	r2, [r7, #20]
 802b2b0:	4313      	orrs	r3, r2
 802b2b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802b2b4:	693b      	ldr	r3, [r7, #16]
 802b2b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 802b2ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802b2bc:	68bb      	ldr	r3, [r7, #8]
 802b2be:	011b      	lsls	r3, r3, #4
 802b2c0:	693a      	ldr	r2, [r7, #16]
 802b2c2:	4313      	orrs	r3, r2
 802b2c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802b2c6:	68fb      	ldr	r3, [r7, #12]
 802b2c8:	697a      	ldr	r2, [r7, #20]
 802b2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802b2cc:	68fb      	ldr	r3, [r7, #12]
 802b2ce:	693a      	ldr	r2, [r7, #16]
 802b2d0:	621a      	str	r2, [r3, #32]
}
 802b2d2:	bf00      	nop
 802b2d4:	371c      	adds	r7, #28
 802b2d6:	46bd      	mov	sp, r7
 802b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2dc:	4770      	bx	lr

0802b2de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802b2de:	b480      	push	{r7}
 802b2e0:	b085      	sub	sp, #20
 802b2e2:	af00      	add	r7, sp, #0
 802b2e4:	6078      	str	r0, [r7, #4]
 802b2e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802b2e8:	687b      	ldr	r3, [r7, #4]
 802b2ea:	689b      	ldr	r3, [r3, #8]
 802b2ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802b2ee:	68fb      	ldr	r3, [r7, #12]
 802b2f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802b2f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802b2f6:	683a      	ldr	r2, [r7, #0]
 802b2f8:	68fb      	ldr	r3, [r7, #12]
 802b2fa:	4313      	orrs	r3, r2
 802b2fc:	f043 0307 	orr.w	r3, r3, #7
 802b300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802b302:	687b      	ldr	r3, [r7, #4]
 802b304:	68fa      	ldr	r2, [r7, #12]
 802b306:	609a      	str	r2, [r3, #8]
}
 802b308:	bf00      	nop
 802b30a:	3714      	adds	r7, #20
 802b30c:	46bd      	mov	sp, r7
 802b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b312:	4770      	bx	lr

0802b314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802b314:	b480      	push	{r7}
 802b316:	b087      	sub	sp, #28
 802b318:	af00      	add	r7, sp, #0
 802b31a:	60f8      	str	r0, [r7, #12]
 802b31c:	60b9      	str	r1, [r7, #8]
 802b31e:	607a      	str	r2, [r7, #4]
 802b320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802b322:	68fb      	ldr	r3, [r7, #12]
 802b324:	689b      	ldr	r3, [r3, #8]
 802b326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802b328:	697b      	ldr	r3, [r7, #20]
 802b32a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 802b32e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802b330:	683b      	ldr	r3, [r7, #0]
 802b332:	021a      	lsls	r2, r3, #8
 802b334:	687b      	ldr	r3, [r7, #4]
 802b336:	431a      	orrs	r2, r3
 802b338:	68bb      	ldr	r3, [r7, #8]
 802b33a:	4313      	orrs	r3, r2
 802b33c:	697a      	ldr	r2, [r7, #20]
 802b33e:	4313      	orrs	r3, r2
 802b340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802b342:	68fb      	ldr	r3, [r7, #12]
 802b344:	697a      	ldr	r2, [r7, #20]
 802b346:	609a      	str	r2, [r3, #8]
}
 802b348:	bf00      	nop
 802b34a:	371c      	adds	r7, #28
 802b34c:	46bd      	mov	sp, r7
 802b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b352:	4770      	bx	lr

0802b354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802b354:	b480      	push	{r7}
 802b356:	b085      	sub	sp, #20
 802b358:	af00      	add	r7, sp, #0
 802b35a:	6078      	str	r0, [r7, #4]
 802b35c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802b35e:	687b      	ldr	r3, [r7, #4]
 802b360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b364:	2b01      	cmp	r3, #1
 802b366:	d101      	bne.n	802b36c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802b368:	2302      	movs	r3, #2
 802b36a:	e05a      	b.n	802b422 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802b36c:	687b      	ldr	r3, [r7, #4]
 802b36e:	2201      	movs	r2, #1
 802b370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802b374:	687b      	ldr	r3, [r7, #4]
 802b376:	2202      	movs	r2, #2
 802b378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802b37c:	687b      	ldr	r3, [r7, #4]
 802b37e:	681b      	ldr	r3, [r3, #0]
 802b380:	685b      	ldr	r3, [r3, #4]
 802b382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802b384:	687b      	ldr	r3, [r7, #4]
 802b386:	681b      	ldr	r3, [r3, #0]
 802b388:	689b      	ldr	r3, [r3, #8]
 802b38a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802b38c:	68fb      	ldr	r3, [r7, #12]
 802b38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802b392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802b394:	683b      	ldr	r3, [r7, #0]
 802b396:	681b      	ldr	r3, [r3, #0]
 802b398:	68fa      	ldr	r2, [r7, #12]
 802b39a:	4313      	orrs	r3, r2
 802b39c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802b39e:	687b      	ldr	r3, [r7, #4]
 802b3a0:	681b      	ldr	r3, [r3, #0]
 802b3a2:	68fa      	ldr	r2, [r7, #12]
 802b3a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802b3a6:	687b      	ldr	r3, [r7, #4]
 802b3a8:	681b      	ldr	r3, [r3, #0]
 802b3aa:	4a21      	ldr	r2, [pc, #132]	@ (802b430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802b3ac:	4293      	cmp	r3, r2
 802b3ae:	d022      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3b0:	687b      	ldr	r3, [r7, #4]
 802b3b2:	681b      	ldr	r3, [r3, #0]
 802b3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802b3b8:	d01d      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3ba:	687b      	ldr	r3, [r7, #4]
 802b3bc:	681b      	ldr	r3, [r3, #0]
 802b3be:	4a1d      	ldr	r2, [pc, #116]	@ (802b434 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802b3c0:	4293      	cmp	r3, r2
 802b3c2:	d018      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3c4:	687b      	ldr	r3, [r7, #4]
 802b3c6:	681b      	ldr	r3, [r3, #0]
 802b3c8:	4a1b      	ldr	r2, [pc, #108]	@ (802b438 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802b3ca:	4293      	cmp	r3, r2
 802b3cc:	d013      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3ce:	687b      	ldr	r3, [r7, #4]
 802b3d0:	681b      	ldr	r3, [r3, #0]
 802b3d2:	4a1a      	ldr	r2, [pc, #104]	@ (802b43c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802b3d4:	4293      	cmp	r3, r2
 802b3d6:	d00e      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3d8:	687b      	ldr	r3, [r7, #4]
 802b3da:	681b      	ldr	r3, [r3, #0]
 802b3dc:	4a18      	ldr	r2, [pc, #96]	@ (802b440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802b3de:	4293      	cmp	r3, r2
 802b3e0:	d009      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3e2:	687b      	ldr	r3, [r7, #4]
 802b3e4:	681b      	ldr	r3, [r3, #0]
 802b3e6:	4a17      	ldr	r2, [pc, #92]	@ (802b444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802b3e8:	4293      	cmp	r3, r2
 802b3ea:	d004      	beq.n	802b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802b3ec:	687b      	ldr	r3, [r7, #4]
 802b3ee:	681b      	ldr	r3, [r3, #0]
 802b3f0:	4a15      	ldr	r2, [pc, #84]	@ (802b448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802b3f2:	4293      	cmp	r3, r2
 802b3f4:	d10c      	bne.n	802b410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802b3f6:	68bb      	ldr	r3, [r7, #8]
 802b3f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802b3fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802b3fe:	683b      	ldr	r3, [r7, #0]
 802b400:	685b      	ldr	r3, [r3, #4]
 802b402:	68ba      	ldr	r2, [r7, #8]
 802b404:	4313      	orrs	r3, r2
 802b406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802b408:	687b      	ldr	r3, [r7, #4]
 802b40a:	681b      	ldr	r3, [r3, #0]
 802b40c:	68ba      	ldr	r2, [r7, #8]
 802b40e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802b410:	687b      	ldr	r3, [r7, #4]
 802b412:	2201      	movs	r2, #1
 802b414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 802b418:	687b      	ldr	r3, [r7, #4]
 802b41a:	2200      	movs	r2, #0
 802b41c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802b420:	2300      	movs	r3, #0
}
 802b422:	4618      	mov	r0, r3
 802b424:	3714      	adds	r7, #20
 802b426:	46bd      	mov	sp, r7
 802b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b42c:	4770      	bx	lr
 802b42e:	bf00      	nop
 802b430:	40010000 	.word	0x40010000
 802b434:	40000400 	.word	0x40000400
 802b438:	40000800 	.word	0x40000800
 802b43c:	40000c00 	.word	0x40000c00
 802b440:	40010400 	.word	0x40010400
 802b444:	40014000 	.word	0x40014000
 802b448:	40001800 	.word	0x40001800

0802b44c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802b44c:	b480      	push	{r7}
 802b44e:	b083      	sub	sp, #12
 802b450:	af00      	add	r7, sp, #0
 802b452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802b454:	bf00      	nop
 802b456:	370c      	adds	r7, #12
 802b458:	46bd      	mov	sp, r7
 802b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b45e:	4770      	bx	lr

0802b460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802b460:	b480      	push	{r7}
 802b462:	b083      	sub	sp, #12
 802b464:	af00      	add	r7, sp, #0
 802b466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802b468:	bf00      	nop
 802b46a:	370c      	adds	r7, #12
 802b46c:	46bd      	mov	sp, r7
 802b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b472:	4770      	bx	lr

0802b474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802b474:	b580      	push	{r7, lr}
 802b476:	b082      	sub	sp, #8
 802b478:	af00      	add	r7, sp, #0
 802b47a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802b47c:	687b      	ldr	r3, [r7, #4]
 802b47e:	2b00      	cmp	r3, #0
 802b480:	d101      	bne.n	802b486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802b482:	2301      	movs	r3, #1
 802b484:	e03f      	b.n	802b506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802b486:	687b      	ldr	r3, [r7, #4]
 802b488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802b48c:	b2db      	uxtb	r3, r3
 802b48e:	2b00      	cmp	r3, #0
 802b490:	d106      	bne.n	802b4a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802b492:	687b      	ldr	r3, [r7, #4]
 802b494:	2200      	movs	r2, #0
 802b496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802b49a:	6878      	ldr	r0, [r7, #4]
 802b49c:	f006 f87a 	bl	8031594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802b4a0:	687b      	ldr	r3, [r7, #4]
 802b4a2:	2224      	movs	r2, #36	@ 0x24
 802b4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802b4a8:	687b      	ldr	r3, [r7, #4]
 802b4aa:	681b      	ldr	r3, [r3, #0]
 802b4ac:	68da      	ldr	r2, [r3, #12]
 802b4ae:	687b      	ldr	r3, [r7, #4]
 802b4b0:	681b      	ldr	r3, [r3, #0]
 802b4b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802b4b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802b4b8:	6878      	ldr	r0, [r7, #4]
 802b4ba:	f001 fc01 	bl	802ccc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802b4be:	687b      	ldr	r3, [r7, #4]
 802b4c0:	681b      	ldr	r3, [r3, #0]
 802b4c2:	691a      	ldr	r2, [r3, #16]
 802b4c4:	687b      	ldr	r3, [r7, #4]
 802b4c6:	681b      	ldr	r3, [r3, #0]
 802b4c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 802b4cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802b4ce:	687b      	ldr	r3, [r7, #4]
 802b4d0:	681b      	ldr	r3, [r3, #0]
 802b4d2:	695a      	ldr	r2, [r3, #20]
 802b4d4:	687b      	ldr	r3, [r7, #4]
 802b4d6:	681b      	ldr	r3, [r3, #0]
 802b4d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 802b4dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802b4de:	687b      	ldr	r3, [r7, #4]
 802b4e0:	681b      	ldr	r3, [r3, #0]
 802b4e2:	68da      	ldr	r2, [r3, #12]
 802b4e4:	687b      	ldr	r3, [r7, #4]
 802b4e6:	681b      	ldr	r3, [r3, #0]
 802b4e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802b4ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b4ee:	687b      	ldr	r3, [r7, #4]
 802b4f0:	2200      	movs	r2, #0
 802b4f2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 802b4f4:	687b      	ldr	r3, [r7, #4]
 802b4f6:	2220      	movs	r2, #32
 802b4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802b4fc:	687b      	ldr	r3, [r7, #4]
 802b4fe:	2220      	movs	r2, #32
 802b500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 802b504:	2300      	movs	r3, #0
}
 802b506:	4618      	mov	r0, r3
 802b508:	3708      	adds	r7, #8
 802b50a:	46bd      	mov	sp, r7
 802b50c:	bd80      	pop	{r7, pc}

0802b50e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802b50e:	b580      	push	{r7, lr}
 802b510:	b08a      	sub	sp, #40	@ 0x28
 802b512:	af02      	add	r7, sp, #8
 802b514:	60f8      	str	r0, [r7, #12]
 802b516:	60b9      	str	r1, [r7, #8]
 802b518:	603b      	str	r3, [r7, #0]
 802b51a:	4613      	mov	r3, r2
 802b51c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802b51e:	2300      	movs	r3, #0
 802b520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802b522:	68fb      	ldr	r3, [r7, #12]
 802b524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802b528:	b2db      	uxtb	r3, r3
 802b52a:	2b20      	cmp	r3, #32
 802b52c:	d17c      	bne.n	802b628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802b52e:	68bb      	ldr	r3, [r7, #8]
 802b530:	2b00      	cmp	r3, #0
 802b532:	d002      	beq.n	802b53a <HAL_UART_Transmit+0x2c>
 802b534:	88fb      	ldrh	r3, [r7, #6]
 802b536:	2b00      	cmp	r3, #0
 802b538:	d101      	bne.n	802b53e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802b53a:	2301      	movs	r3, #1
 802b53c:	e075      	b.n	802b62a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b53e:	68fb      	ldr	r3, [r7, #12]
 802b540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b544:	2b01      	cmp	r3, #1
 802b546:	d101      	bne.n	802b54c <HAL_UART_Transmit+0x3e>
 802b548:	2302      	movs	r3, #2
 802b54a:	e06e      	b.n	802b62a <HAL_UART_Transmit+0x11c>
 802b54c:	68fb      	ldr	r3, [r7, #12]
 802b54e:	2201      	movs	r2, #1
 802b550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b554:	68fb      	ldr	r3, [r7, #12]
 802b556:	2200      	movs	r2, #0
 802b558:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802b55a:	68fb      	ldr	r3, [r7, #12]
 802b55c:	2221      	movs	r2, #33	@ 0x21
 802b55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802b562:	f7f9 fef3 	bl	802534c <HAL_GetTick>
 802b566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802b568:	68fb      	ldr	r3, [r7, #12]
 802b56a:	88fa      	ldrh	r2, [r7, #6]
 802b56c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 802b56e:	68fb      	ldr	r3, [r7, #12]
 802b570:	88fa      	ldrh	r2, [r7, #6]
 802b572:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802b574:	68fb      	ldr	r3, [r7, #12]
 802b576:	689b      	ldr	r3, [r3, #8]
 802b578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802b57c:	d108      	bne.n	802b590 <HAL_UART_Transmit+0x82>
 802b57e:	68fb      	ldr	r3, [r7, #12]
 802b580:	691b      	ldr	r3, [r3, #16]
 802b582:	2b00      	cmp	r3, #0
 802b584:	d104      	bne.n	802b590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802b586:	2300      	movs	r3, #0
 802b588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802b58a:	68bb      	ldr	r3, [r7, #8]
 802b58c:	61bb      	str	r3, [r7, #24]
 802b58e:	e003      	b.n	802b598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802b590:	68bb      	ldr	r3, [r7, #8]
 802b592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802b594:	2300      	movs	r3, #0
 802b596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802b598:	68fb      	ldr	r3, [r7, #12]
 802b59a:	2200      	movs	r2, #0
 802b59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 802b5a0:	e02a      	b.n	802b5f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802b5a2:	683b      	ldr	r3, [r7, #0]
 802b5a4:	9300      	str	r3, [sp, #0]
 802b5a6:	697b      	ldr	r3, [r7, #20]
 802b5a8:	2200      	movs	r2, #0
 802b5aa:	2180      	movs	r1, #128	@ 0x80
 802b5ac:	68f8      	ldr	r0, [r7, #12]
 802b5ae:	f001 f81a 	bl	802c5e6 <UART_WaitOnFlagUntilTimeout>
 802b5b2:	4603      	mov	r3, r0
 802b5b4:	2b00      	cmp	r3, #0
 802b5b6:	d001      	beq.n	802b5bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802b5b8:	2303      	movs	r3, #3
 802b5ba:	e036      	b.n	802b62a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802b5bc:	69fb      	ldr	r3, [r7, #28]
 802b5be:	2b00      	cmp	r3, #0
 802b5c0:	d10b      	bne.n	802b5da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802b5c2:	69bb      	ldr	r3, [r7, #24]
 802b5c4:	881b      	ldrh	r3, [r3, #0]
 802b5c6:	461a      	mov	r2, r3
 802b5c8:	68fb      	ldr	r3, [r7, #12]
 802b5ca:	681b      	ldr	r3, [r3, #0]
 802b5cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802b5d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802b5d2:	69bb      	ldr	r3, [r7, #24]
 802b5d4:	3302      	adds	r3, #2
 802b5d6:	61bb      	str	r3, [r7, #24]
 802b5d8:	e007      	b.n	802b5ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802b5da:	69fb      	ldr	r3, [r7, #28]
 802b5dc:	781a      	ldrb	r2, [r3, #0]
 802b5de:	68fb      	ldr	r3, [r7, #12]
 802b5e0:	681b      	ldr	r3, [r3, #0]
 802b5e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802b5e4:	69fb      	ldr	r3, [r7, #28]
 802b5e6:	3301      	adds	r3, #1
 802b5e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802b5ea:	68fb      	ldr	r3, [r7, #12]
 802b5ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802b5ee:	b29b      	uxth	r3, r3
 802b5f0:	3b01      	subs	r3, #1
 802b5f2:	b29a      	uxth	r2, r3
 802b5f4:	68fb      	ldr	r3, [r7, #12]
 802b5f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 802b5f8:	68fb      	ldr	r3, [r7, #12]
 802b5fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802b5fc:	b29b      	uxth	r3, r3
 802b5fe:	2b00      	cmp	r3, #0
 802b600:	d1cf      	bne.n	802b5a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802b602:	683b      	ldr	r3, [r7, #0]
 802b604:	9300      	str	r3, [sp, #0]
 802b606:	697b      	ldr	r3, [r7, #20]
 802b608:	2200      	movs	r2, #0
 802b60a:	2140      	movs	r1, #64	@ 0x40
 802b60c:	68f8      	ldr	r0, [r7, #12]
 802b60e:	f000 ffea 	bl	802c5e6 <UART_WaitOnFlagUntilTimeout>
 802b612:	4603      	mov	r3, r0
 802b614:	2b00      	cmp	r3, #0
 802b616:	d001      	beq.n	802b61c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802b618:	2303      	movs	r3, #3
 802b61a:	e006      	b.n	802b62a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802b61c:	68fb      	ldr	r3, [r7, #12]
 802b61e:	2220      	movs	r2, #32
 802b620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 802b624:	2300      	movs	r3, #0
 802b626:	e000      	b.n	802b62a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802b628:	2302      	movs	r3, #2
  }
}
 802b62a:	4618      	mov	r0, r3
 802b62c:	3720      	adds	r7, #32
 802b62e:	46bd      	mov	sp, r7
 802b630:	bd80      	pop	{r7, pc}

0802b632 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802b632:	b580      	push	{r7, lr}
 802b634:	b08a      	sub	sp, #40	@ 0x28
 802b636:	af02      	add	r7, sp, #8
 802b638:	60f8      	str	r0, [r7, #12]
 802b63a:	60b9      	str	r1, [r7, #8]
 802b63c:	603b      	str	r3, [r7, #0]
 802b63e:	4613      	mov	r3, r2
 802b640:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802b642:	2300      	movs	r3, #0
 802b644:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802b646:	68fb      	ldr	r3, [r7, #12]
 802b648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802b64c:	b2db      	uxtb	r3, r3
 802b64e:	2b20      	cmp	r3, #32
 802b650:	f040 808c 	bne.w	802b76c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 802b654:	68bb      	ldr	r3, [r7, #8]
 802b656:	2b00      	cmp	r3, #0
 802b658:	d002      	beq.n	802b660 <HAL_UART_Receive+0x2e>
 802b65a:	88fb      	ldrh	r3, [r7, #6]
 802b65c:	2b00      	cmp	r3, #0
 802b65e:	d101      	bne.n	802b664 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 802b660:	2301      	movs	r3, #1
 802b662:	e084      	b.n	802b76e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b664:	68fb      	ldr	r3, [r7, #12]
 802b666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b66a:	2b01      	cmp	r3, #1
 802b66c:	d101      	bne.n	802b672 <HAL_UART_Receive+0x40>
 802b66e:	2302      	movs	r3, #2
 802b670:	e07d      	b.n	802b76e <HAL_UART_Receive+0x13c>
 802b672:	68fb      	ldr	r3, [r7, #12]
 802b674:	2201      	movs	r2, #1
 802b676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b67a:	68fb      	ldr	r3, [r7, #12]
 802b67c:	2200      	movs	r2, #0
 802b67e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802b680:	68fb      	ldr	r3, [r7, #12]
 802b682:	2222      	movs	r2, #34	@ 0x22
 802b684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802b688:	68fb      	ldr	r3, [r7, #12]
 802b68a:	2200      	movs	r2, #0
 802b68c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802b68e:	f7f9 fe5d 	bl	802534c <HAL_GetTick>
 802b692:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 802b694:	68fb      	ldr	r3, [r7, #12]
 802b696:	88fa      	ldrh	r2, [r7, #6]
 802b698:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 802b69a:	68fb      	ldr	r3, [r7, #12]
 802b69c:	88fa      	ldrh	r2, [r7, #6]
 802b69e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802b6a0:	68fb      	ldr	r3, [r7, #12]
 802b6a2:	689b      	ldr	r3, [r3, #8]
 802b6a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802b6a8:	d108      	bne.n	802b6bc <HAL_UART_Receive+0x8a>
 802b6aa:	68fb      	ldr	r3, [r7, #12]
 802b6ac:	691b      	ldr	r3, [r3, #16]
 802b6ae:	2b00      	cmp	r3, #0
 802b6b0:	d104      	bne.n	802b6bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 802b6b2:	2300      	movs	r3, #0
 802b6b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802b6b6:	68bb      	ldr	r3, [r7, #8]
 802b6b8:	61bb      	str	r3, [r7, #24]
 802b6ba:	e003      	b.n	802b6c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 802b6bc:	68bb      	ldr	r3, [r7, #8]
 802b6be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802b6c0:	2300      	movs	r3, #0
 802b6c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802b6c4:	68fb      	ldr	r3, [r7, #12]
 802b6c6:	2200      	movs	r2, #0
 802b6c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 802b6cc:	e043      	b.n	802b756 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 802b6ce:	683b      	ldr	r3, [r7, #0]
 802b6d0:	9300      	str	r3, [sp, #0]
 802b6d2:	697b      	ldr	r3, [r7, #20]
 802b6d4:	2200      	movs	r2, #0
 802b6d6:	2120      	movs	r1, #32
 802b6d8:	68f8      	ldr	r0, [r7, #12]
 802b6da:	f000 ff84 	bl	802c5e6 <UART_WaitOnFlagUntilTimeout>
 802b6de:	4603      	mov	r3, r0
 802b6e0:	2b00      	cmp	r3, #0
 802b6e2:	d001      	beq.n	802b6e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 802b6e4:	2303      	movs	r3, #3
 802b6e6:	e042      	b.n	802b76e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 802b6e8:	69fb      	ldr	r3, [r7, #28]
 802b6ea:	2b00      	cmp	r3, #0
 802b6ec:	d10c      	bne.n	802b708 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 802b6ee:	68fb      	ldr	r3, [r7, #12]
 802b6f0:	681b      	ldr	r3, [r3, #0]
 802b6f2:	685b      	ldr	r3, [r3, #4]
 802b6f4:	b29b      	uxth	r3, r3
 802b6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802b6fa:	b29a      	uxth	r2, r3
 802b6fc:	69bb      	ldr	r3, [r7, #24]
 802b6fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 802b700:	69bb      	ldr	r3, [r7, #24]
 802b702:	3302      	adds	r3, #2
 802b704:	61bb      	str	r3, [r7, #24]
 802b706:	e01f      	b.n	802b748 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802b708:	68fb      	ldr	r3, [r7, #12]
 802b70a:	689b      	ldr	r3, [r3, #8]
 802b70c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802b710:	d007      	beq.n	802b722 <HAL_UART_Receive+0xf0>
 802b712:	68fb      	ldr	r3, [r7, #12]
 802b714:	689b      	ldr	r3, [r3, #8]
 802b716:	2b00      	cmp	r3, #0
 802b718:	d10a      	bne.n	802b730 <HAL_UART_Receive+0xfe>
 802b71a:	68fb      	ldr	r3, [r7, #12]
 802b71c:	691b      	ldr	r3, [r3, #16]
 802b71e:	2b00      	cmp	r3, #0
 802b720:	d106      	bne.n	802b730 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802b722:	68fb      	ldr	r3, [r7, #12]
 802b724:	681b      	ldr	r3, [r3, #0]
 802b726:	685b      	ldr	r3, [r3, #4]
 802b728:	b2da      	uxtb	r2, r3
 802b72a:	69fb      	ldr	r3, [r7, #28]
 802b72c:	701a      	strb	r2, [r3, #0]
 802b72e:	e008      	b.n	802b742 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802b730:	68fb      	ldr	r3, [r7, #12]
 802b732:	681b      	ldr	r3, [r3, #0]
 802b734:	685b      	ldr	r3, [r3, #4]
 802b736:	b2db      	uxtb	r3, r3
 802b738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802b73c:	b2da      	uxtb	r2, r3
 802b73e:	69fb      	ldr	r3, [r7, #28]
 802b740:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 802b742:	69fb      	ldr	r3, [r7, #28]
 802b744:	3301      	adds	r3, #1
 802b746:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 802b748:	68fb      	ldr	r3, [r7, #12]
 802b74a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802b74c:	b29b      	uxth	r3, r3
 802b74e:	3b01      	subs	r3, #1
 802b750:	b29a      	uxth	r2, r3
 802b752:	68fb      	ldr	r3, [r7, #12]
 802b754:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 802b756:	68fb      	ldr	r3, [r7, #12]
 802b758:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802b75a:	b29b      	uxth	r3, r3
 802b75c:	2b00      	cmp	r3, #0
 802b75e:	d1b6      	bne.n	802b6ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802b760:	68fb      	ldr	r3, [r7, #12]
 802b762:	2220      	movs	r2, #32
 802b764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 802b768:	2300      	movs	r3, #0
 802b76a:	e000      	b.n	802b76e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 802b76c:	2302      	movs	r3, #2
  }
}
 802b76e:	4618      	mov	r0, r3
 802b770:	3720      	adds	r7, #32
 802b772:	46bd      	mov	sp, r7
 802b774:	bd80      	pop	{r7, pc}

0802b776 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802b776:	b480      	push	{r7}
 802b778:	b085      	sub	sp, #20
 802b77a:	af00      	add	r7, sp, #0
 802b77c:	60f8      	str	r0, [r7, #12]
 802b77e:	60b9      	str	r1, [r7, #8]
 802b780:	4613      	mov	r3, r2
 802b782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802b784:	68fb      	ldr	r3, [r7, #12]
 802b786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802b78a:	b2db      	uxtb	r3, r3
 802b78c:	2b20      	cmp	r3, #32
 802b78e:	d130      	bne.n	802b7f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 802b790:	68bb      	ldr	r3, [r7, #8]
 802b792:	2b00      	cmp	r3, #0
 802b794:	d002      	beq.n	802b79c <HAL_UART_Transmit_IT+0x26>
 802b796:	88fb      	ldrh	r3, [r7, #6]
 802b798:	2b00      	cmp	r3, #0
 802b79a:	d101      	bne.n	802b7a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 802b79c:	2301      	movs	r3, #1
 802b79e:	e029      	b.n	802b7f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b7a0:	68fb      	ldr	r3, [r7, #12]
 802b7a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b7a6:	2b01      	cmp	r3, #1
 802b7a8:	d101      	bne.n	802b7ae <HAL_UART_Transmit_IT+0x38>
 802b7aa:	2302      	movs	r3, #2
 802b7ac:	e022      	b.n	802b7f4 <HAL_UART_Transmit_IT+0x7e>
 802b7ae:	68fb      	ldr	r3, [r7, #12]
 802b7b0:	2201      	movs	r2, #1
 802b7b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 802b7b6:	68fb      	ldr	r3, [r7, #12]
 802b7b8:	68ba      	ldr	r2, [r7, #8]
 802b7ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 802b7bc:	68fb      	ldr	r3, [r7, #12]
 802b7be:	88fa      	ldrh	r2, [r7, #6]
 802b7c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 802b7c2:	68fb      	ldr	r3, [r7, #12]
 802b7c4:	88fa      	ldrh	r2, [r7, #6]
 802b7c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b7c8:	68fb      	ldr	r3, [r7, #12]
 802b7ca:	2200      	movs	r2, #0
 802b7cc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802b7ce:	68fb      	ldr	r3, [r7, #12]
 802b7d0:	2221      	movs	r2, #33	@ 0x21
 802b7d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802b7d6:	68fb      	ldr	r3, [r7, #12]
 802b7d8:	2200      	movs	r2, #0
 802b7da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 802b7de:	68fb      	ldr	r3, [r7, #12]
 802b7e0:	681b      	ldr	r3, [r3, #0]
 802b7e2:	68da      	ldr	r2, [r3, #12]
 802b7e4:	68fb      	ldr	r3, [r7, #12]
 802b7e6:	681b      	ldr	r3, [r3, #0]
 802b7e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802b7ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 802b7ee:	2300      	movs	r3, #0
 802b7f0:	e000      	b.n	802b7f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 802b7f2:	2302      	movs	r3, #2
  }
}
 802b7f4:	4618      	mov	r0, r3
 802b7f6:	3714      	adds	r7, #20
 802b7f8:	46bd      	mov	sp, r7
 802b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7fe:	4770      	bx	lr

0802b800 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802b800:	b580      	push	{r7, lr}
 802b802:	b084      	sub	sp, #16
 802b804:	af00      	add	r7, sp, #0
 802b806:	60f8      	str	r0, [r7, #12]
 802b808:	60b9      	str	r1, [r7, #8]
 802b80a:	4613      	mov	r3, r2
 802b80c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802b80e:	68fb      	ldr	r3, [r7, #12]
 802b810:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802b814:	b2db      	uxtb	r3, r3
 802b816:	2b20      	cmp	r3, #32
 802b818:	d11d      	bne.n	802b856 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802b81a:	68bb      	ldr	r3, [r7, #8]
 802b81c:	2b00      	cmp	r3, #0
 802b81e:	d002      	beq.n	802b826 <HAL_UART_Receive_IT+0x26>
 802b820:	88fb      	ldrh	r3, [r7, #6]
 802b822:	2b00      	cmp	r3, #0
 802b824:	d101      	bne.n	802b82a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 802b826:	2301      	movs	r3, #1
 802b828:	e016      	b.n	802b858 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b82a:	68fb      	ldr	r3, [r7, #12]
 802b82c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b830:	2b01      	cmp	r3, #1
 802b832:	d101      	bne.n	802b838 <HAL_UART_Receive_IT+0x38>
 802b834:	2302      	movs	r3, #2
 802b836:	e00f      	b.n	802b858 <HAL_UART_Receive_IT+0x58>
 802b838:	68fb      	ldr	r3, [r7, #12]
 802b83a:	2201      	movs	r2, #1
 802b83c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802b840:	68fb      	ldr	r3, [r7, #12]
 802b842:	2200      	movs	r2, #0
 802b844:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 802b846:	88fb      	ldrh	r3, [r7, #6]
 802b848:	461a      	mov	r2, r3
 802b84a:	68b9      	ldr	r1, [r7, #8]
 802b84c:	68f8      	ldr	r0, [r7, #12]
 802b84e:	f000 ff38 	bl	802c6c2 <UART_Start_Receive_IT>
 802b852:	4603      	mov	r3, r0
 802b854:	e000      	b.n	802b858 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 802b856:	2302      	movs	r3, #2
  }
}
 802b858:	4618      	mov	r0, r3
 802b85a:	3710      	adds	r7, #16
 802b85c:	46bd      	mov	sp, r7
 802b85e:	bd80      	pop	{r7, pc}

0802b860 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802b860:	b580      	push	{r7, lr}
 802b862:	b08c      	sub	sp, #48	@ 0x30
 802b864:	af00      	add	r7, sp, #0
 802b866:	60f8      	str	r0, [r7, #12]
 802b868:	60b9      	str	r1, [r7, #8]
 802b86a:	4613      	mov	r3, r2
 802b86c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802b86e:	68fb      	ldr	r3, [r7, #12]
 802b870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802b874:	b2db      	uxtb	r3, r3
 802b876:	2b20      	cmp	r3, #32
 802b878:	d165      	bne.n	802b946 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 802b87a:	68bb      	ldr	r3, [r7, #8]
 802b87c:	2b00      	cmp	r3, #0
 802b87e:	d002      	beq.n	802b886 <HAL_UART_Transmit_DMA+0x26>
 802b880:	88fb      	ldrh	r3, [r7, #6]
 802b882:	2b00      	cmp	r3, #0
 802b884:	d101      	bne.n	802b88a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 802b886:	2301      	movs	r3, #1
 802b888:	e05e      	b.n	802b948 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b88a:	68fb      	ldr	r3, [r7, #12]
 802b88c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b890:	2b01      	cmp	r3, #1
 802b892:	d101      	bne.n	802b898 <HAL_UART_Transmit_DMA+0x38>
 802b894:	2302      	movs	r3, #2
 802b896:	e057      	b.n	802b948 <HAL_UART_Transmit_DMA+0xe8>
 802b898:	68fb      	ldr	r3, [r7, #12]
 802b89a:	2201      	movs	r2, #1
 802b89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 802b8a0:	68ba      	ldr	r2, [r7, #8]
 802b8a2:	68fb      	ldr	r3, [r7, #12]
 802b8a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 802b8a6:	68fb      	ldr	r3, [r7, #12]
 802b8a8:	88fa      	ldrh	r2, [r7, #6]
 802b8aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 802b8ac:	68fb      	ldr	r3, [r7, #12]
 802b8ae:	88fa      	ldrh	r2, [r7, #6]
 802b8b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b8b2:	68fb      	ldr	r3, [r7, #12]
 802b8b4:	2200      	movs	r2, #0
 802b8b6:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802b8b8:	68fb      	ldr	r3, [r7, #12]
 802b8ba:	2221      	movs	r2, #33	@ 0x21
 802b8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 802b8c0:	68fb      	ldr	r3, [r7, #12]
 802b8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802b8c4:	4a22      	ldr	r2, [pc, #136]	@ (802b950 <HAL_UART_Transmit_DMA+0xf0>)
 802b8c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 802b8c8:	68fb      	ldr	r3, [r7, #12]
 802b8ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802b8cc:	4a21      	ldr	r2, [pc, #132]	@ (802b954 <HAL_UART_Transmit_DMA+0xf4>)
 802b8ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 802b8d0:	68fb      	ldr	r3, [r7, #12]
 802b8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802b8d4:	4a20      	ldr	r2, [pc, #128]	@ (802b958 <HAL_UART_Transmit_DMA+0xf8>)
 802b8d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 802b8d8:	68fb      	ldr	r3, [r7, #12]
 802b8da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802b8dc:	2200      	movs	r2, #0
 802b8de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 802b8e0:	f107 0308 	add.w	r3, r7, #8
 802b8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 802b8e6:	68fb      	ldr	r3, [r7, #12]
 802b8e8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 802b8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b8ec:	6819      	ldr	r1, [r3, #0]
 802b8ee:	68fb      	ldr	r3, [r7, #12]
 802b8f0:	681b      	ldr	r3, [r3, #0]
 802b8f2:	3304      	adds	r3, #4
 802b8f4:	461a      	mov	r2, r3
 802b8f6:	88fb      	ldrh	r3, [r7, #6]
 802b8f8:	f7fa fc42 	bl	8026180 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 802b8fc:	68fb      	ldr	r3, [r7, #12]
 802b8fe:	681b      	ldr	r3, [r3, #0]
 802b900:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 802b904:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802b906:	68fb      	ldr	r3, [r7, #12]
 802b908:	2200      	movs	r2, #0
 802b90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802b90e:	68fb      	ldr	r3, [r7, #12]
 802b910:	681b      	ldr	r3, [r3, #0]
 802b912:	3314      	adds	r3, #20
 802b914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b916:	69bb      	ldr	r3, [r7, #24]
 802b918:	e853 3f00 	ldrex	r3, [r3]
 802b91c:	617b      	str	r3, [r7, #20]
   return(result);
 802b91e:	697b      	ldr	r3, [r7, #20]
 802b920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b924:	62bb      	str	r3, [r7, #40]	@ 0x28
 802b926:	68fb      	ldr	r3, [r7, #12]
 802b928:	681b      	ldr	r3, [r3, #0]
 802b92a:	3314      	adds	r3, #20
 802b92c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802b92e:	627a      	str	r2, [r7, #36]	@ 0x24
 802b930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b932:	6a39      	ldr	r1, [r7, #32]
 802b934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b936:	e841 2300 	strex	r3, r2, [r1]
 802b93a:	61fb      	str	r3, [r7, #28]
   return(result);
 802b93c:	69fb      	ldr	r3, [r7, #28]
 802b93e:	2b00      	cmp	r3, #0
 802b940:	d1e5      	bne.n	802b90e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 802b942:	2300      	movs	r3, #0
 802b944:	e000      	b.n	802b948 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 802b946:	2302      	movs	r3, #2
  }
}
 802b948:	4618      	mov	r0, r3
 802b94a:	3730      	adds	r7, #48	@ 0x30
 802b94c:	46bd      	mov	sp, r7
 802b94e:	bd80      	pop	{r7, pc}
 802b950:	0802c341 	.word	0x0802c341
 802b954:	0802c3db 	.word	0x0802c3db
 802b958:	0802c553 	.word	0x0802c553

0802b95c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802b95c:	b580      	push	{r7, lr}
 802b95e:	b084      	sub	sp, #16
 802b960:	af00      	add	r7, sp, #0
 802b962:	60f8      	str	r0, [r7, #12]
 802b964:	60b9      	str	r1, [r7, #8]
 802b966:	4613      	mov	r3, r2
 802b968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802b96a:	68fb      	ldr	r3, [r7, #12]
 802b96c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802b970:	b2db      	uxtb	r3, r3
 802b972:	2b20      	cmp	r3, #32
 802b974:	d11d      	bne.n	802b9b2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802b976:	68bb      	ldr	r3, [r7, #8]
 802b978:	2b00      	cmp	r3, #0
 802b97a:	d002      	beq.n	802b982 <HAL_UART_Receive_DMA+0x26>
 802b97c:	88fb      	ldrh	r3, [r7, #6]
 802b97e:	2b00      	cmp	r3, #0
 802b980:	d101      	bne.n	802b986 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 802b982:	2301      	movs	r3, #1
 802b984:	e016      	b.n	802b9b4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b986:	68fb      	ldr	r3, [r7, #12]
 802b988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802b98c:	2b01      	cmp	r3, #1
 802b98e:	d101      	bne.n	802b994 <HAL_UART_Receive_DMA+0x38>
 802b990:	2302      	movs	r3, #2
 802b992:	e00f      	b.n	802b9b4 <HAL_UART_Receive_DMA+0x58>
 802b994:	68fb      	ldr	r3, [r7, #12]
 802b996:	2201      	movs	r2, #1
 802b998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802b99c:	68fb      	ldr	r3, [r7, #12]
 802b99e:	2200      	movs	r2, #0
 802b9a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 802b9a2:	88fb      	ldrh	r3, [r7, #6]
 802b9a4:	461a      	mov	r2, r3
 802b9a6:	68b9      	ldr	r1, [r7, #8]
 802b9a8:	68f8      	ldr	r0, [r7, #12]
 802b9aa:	f000 fec9 	bl	802c740 <UART_Start_Receive_DMA>
 802b9ae:	4603      	mov	r3, r0
 802b9b0:	e000      	b.n	802b9b4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 802b9b2:	2302      	movs	r3, #2
  }
}
 802b9b4:	4618      	mov	r0, r3
 802b9b6:	3710      	adds	r7, #16
 802b9b8:	46bd      	mov	sp, r7
 802b9ba:	bd80      	pop	{r7, pc}

0802b9bc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 802b9bc:	b580      	push	{r7, lr}
 802b9be:	b0a0      	sub	sp, #128	@ 0x80
 802b9c0:	af00      	add	r7, sp, #0
 802b9c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 802b9c4:	687b      	ldr	r3, [r7, #4]
 802b9c6:	681b      	ldr	r3, [r3, #0]
 802b9c8:	330c      	adds	r3, #12
 802b9ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b9cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802b9ce:	e853 3f00 	ldrex	r3, [r3]
 802b9d2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 802b9d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802b9d6:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 802b9da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	681b      	ldr	r3, [r3, #0]
 802b9e0:	330c      	adds	r3, #12
 802b9e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 802b9e4:	66ba      	str	r2, [r7, #104]	@ 0x68
 802b9e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b9e8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 802b9ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 802b9ec:	e841 2300 	strex	r3, r2, [r1]
 802b9f0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 802b9f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802b9f4:	2b00      	cmp	r3, #0
 802b9f6:	d1e5      	bne.n	802b9c4 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802b9f8:	687b      	ldr	r3, [r7, #4]
 802b9fa:	681b      	ldr	r3, [r3, #0]
 802b9fc:	3314      	adds	r3, #20
 802b9fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ba00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ba02:	e853 3f00 	ldrex	r3, [r3]
 802ba06:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 802ba08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802ba0a:	f023 0301 	bic.w	r3, r3, #1
 802ba0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 802ba10:	687b      	ldr	r3, [r7, #4]
 802ba12:	681b      	ldr	r3, [r3, #0]
 802ba14:	3314      	adds	r3, #20
 802ba16:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 802ba18:	657a      	str	r2, [r7, #84]	@ 0x54
 802ba1a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ba1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802ba1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802ba20:	e841 2300 	strex	r3, r2, [r1]
 802ba24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 802ba26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ba28:	2b00      	cmp	r3, #0
 802ba2a:	d1e5      	bne.n	802b9f8 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802ba2c:	687b      	ldr	r3, [r7, #4]
 802ba2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ba30:	2b01      	cmp	r3, #1
 802ba32:	d119      	bne.n	802ba68 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	681b      	ldr	r3, [r3, #0]
 802ba38:	330c      	adds	r3, #12
 802ba3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba3e:	e853 3f00 	ldrex	r3, [r3]
 802ba42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802ba44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802ba46:	f023 0310 	bic.w	r3, r3, #16
 802ba4a:	677b      	str	r3, [r7, #116]	@ 0x74
 802ba4c:	687b      	ldr	r3, [r7, #4]
 802ba4e:	681b      	ldr	r3, [r3, #0]
 802ba50:	330c      	adds	r3, #12
 802ba52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 802ba54:	643a      	str	r2, [r7, #64]	@ 0x40
 802ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ba58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802ba5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ba5c:	e841 2300 	strex	r3, r2, [r1]
 802ba60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802ba62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ba64:	2b00      	cmp	r3, #0
 802ba66:	d1e5      	bne.n	802ba34 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802ba68:	687b      	ldr	r3, [r7, #4]
 802ba6a:	681b      	ldr	r3, [r3, #0]
 802ba6c:	695b      	ldr	r3, [r3, #20]
 802ba6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ba72:	2b80      	cmp	r3, #128	@ 0x80
 802ba74:	d136      	bne.n	802bae4 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802ba76:	687b      	ldr	r3, [r7, #4]
 802ba78:	681b      	ldr	r3, [r3, #0]
 802ba7a:	3314      	adds	r3, #20
 802ba7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ba7e:	6a3b      	ldr	r3, [r7, #32]
 802ba80:	e853 3f00 	ldrex	r3, [r3]
 802ba84:	61fb      	str	r3, [r7, #28]
   return(result);
 802ba86:	69fb      	ldr	r3, [r7, #28]
 802ba88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802ba8c:	673b      	str	r3, [r7, #112]	@ 0x70
 802ba8e:	687b      	ldr	r3, [r7, #4]
 802ba90:	681b      	ldr	r3, [r3, #0]
 802ba92:	3314      	adds	r3, #20
 802ba94:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 802ba96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802ba98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ba9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802ba9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ba9e:	e841 2300 	strex	r3, r2, [r1]
 802baa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802baa6:	2b00      	cmp	r3, #0
 802baa8:	d1e5      	bne.n	802ba76 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 802baaa:	687b      	ldr	r3, [r7, #4]
 802baac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802baae:	2b00      	cmp	r3, #0
 802bab0:	d018      	beq.n	802bae4 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 802bab2:	687b      	ldr	r3, [r7, #4]
 802bab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bab6:	2200      	movs	r2, #0
 802bab8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 802baba:	687b      	ldr	r3, [r7, #4]
 802babc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802babe:	4618      	mov	r0, r3
 802bac0:	f7fa fbb6 	bl	8026230 <HAL_DMA_Abort>
 802bac4:	4603      	mov	r3, r0
 802bac6:	2b00      	cmp	r3, #0
 802bac8:	d00c      	beq.n	802bae4 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 802baca:	687b      	ldr	r3, [r7, #4]
 802bacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bace:	4618      	mov	r0, r3
 802bad0:	f7fa fdd8 	bl	8026684 <HAL_DMA_GetError>
 802bad4:	4603      	mov	r3, r0
 802bad6:	2b20      	cmp	r3, #32
 802bad8:	d104      	bne.n	802bae4 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 802bada:	687b      	ldr	r3, [r7, #4]
 802badc:	2210      	movs	r2, #16
 802bade:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 802bae0:	2303      	movs	r3, #3
 802bae2:	e052      	b.n	802bb8a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bae4:	687b      	ldr	r3, [r7, #4]
 802bae6:	681b      	ldr	r3, [r3, #0]
 802bae8:	695b      	ldr	r3, [r3, #20]
 802baea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802baee:	2b40      	cmp	r3, #64	@ 0x40
 802baf0:	d136      	bne.n	802bb60 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802baf2:	687b      	ldr	r3, [r7, #4]
 802baf4:	681b      	ldr	r3, [r3, #0]
 802baf6:	3314      	adds	r3, #20
 802baf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bafa:	68fb      	ldr	r3, [r7, #12]
 802bafc:	e853 3f00 	ldrex	r3, [r3]
 802bb00:	60bb      	str	r3, [r7, #8]
   return(result);
 802bb02:	68bb      	ldr	r3, [r7, #8]
 802bb04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802bb08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802bb0a:	687b      	ldr	r3, [r7, #4]
 802bb0c:	681b      	ldr	r3, [r3, #0]
 802bb0e:	3314      	adds	r3, #20
 802bb10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802bb12:	61ba      	str	r2, [r7, #24]
 802bb14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bb16:	6979      	ldr	r1, [r7, #20]
 802bb18:	69ba      	ldr	r2, [r7, #24]
 802bb1a:	e841 2300 	strex	r3, r2, [r1]
 802bb1e:	613b      	str	r3, [r7, #16]
   return(result);
 802bb20:	693b      	ldr	r3, [r7, #16]
 802bb22:	2b00      	cmp	r3, #0
 802bb24:	d1e5      	bne.n	802baf2 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bb2a:	2b00      	cmp	r3, #0
 802bb2c:	d018      	beq.n	802bb60 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 802bb2e:	687b      	ldr	r3, [r7, #4]
 802bb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bb32:	2200      	movs	r2, #0
 802bb34:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 802bb36:	687b      	ldr	r3, [r7, #4]
 802bb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bb3a:	4618      	mov	r0, r3
 802bb3c:	f7fa fb78 	bl	8026230 <HAL_DMA_Abort>
 802bb40:	4603      	mov	r3, r0
 802bb42:	2b00      	cmp	r3, #0
 802bb44:	d00c      	beq.n	802bb60 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 802bb46:	687b      	ldr	r3, [r7, #4]
 802bb48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bb4a:	4618      	mov	r0, r3
 802bb4c:	f7fa fd9a 	bl	8026684 <HAL_DMA_GetError>
 802bb50:	4603      	mov	r3, r0
 802bb52:	2b20      	cmp	r3, #32
 802bb54:	d104      	bne.n	802bb60 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	2210      	movs	r2, #16
 802bb5a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 802bb5c:	2303      	movs	r3, #3
 802bb5e:	e014      	b.n	802bb8a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 802bb60:	687b      	ldr	r3, [r7, #4]
 802bb62:	2200      	movs	r2, #0
 802bb64:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 802bb66:	687b      	ldr	r3, [r7, #4]
 802bb68:	2200      	movs	r2, #0
 802bb6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bb6c:	687b      	ldr	r3, [r7, #4]
 802bb6e:	2200      	movs	r2, #0
 802bb70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802bb72:	687b      	ldr	r3, [r7, #4]
 802bb74:	2220      	movs	r2, #32
 802bb76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->gState = HAL_UART_STATE_READY;
 802bb7a:	687b      	ldr	r3, [r7, #4]
 802bb7c:	2220      	movs	r2, #32
 802bb7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802bb82:	687b      	ldr	r3, [r7, #4]
 802bb84:	2200      	movs	r2, #0
 802bb86:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 802bb88:	2300      	movs	r3, #0
}
 802bb8a:	4618      	mov	r0, r3
 802bb8c:	3780      	adds	r7, #128	@ 0x80
 802bb8e:	46bd      	mov	sp, r7
 802bb90:	bd80      	pop	{r7, pc}
	...

0802bb94 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 802bb94:	b580      	push	{r7, lr}
 802bb96:	b0a2      	sub	sp, #136	@ 0x88
 802bb98:	af00      	add	r7, sp, #0
 802bb9a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 802bb9c:	2301      	movs	r3, #1
 802bb9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 802bba2:	687b      	ldr	r3, [r7, #4]
 802bba4:	681b      	ldr	r3, [r3, #0]
 802bba6:	330c      	adds	r3, #12
 802bba8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bbaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802bbac:	e853 3f00 	ldrex	r3, [r3]
 802bbb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802bbb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802bbb4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 802bbb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802bbbc:	687b      	ldr	r3, [r7, #4]
 802bbbe:	681b      	ldr	r3, [r3, #0]
 802bbc0:	330c      	adds	r3, #12
 802bbc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 802bbc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 802bbc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bbca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802bbcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802bbce:	e841 2300 	strex	r3, r2, [r1]
 802bbd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 802bbd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bbd6:	2b00      	cmp	r3, #0
 802bbd8:	d1e3      	bne.n	802bba2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802bbda:	687b      	ldr	r3, [r7, #4]
 802bbdc:	681b      	ldr	r3, [r3, #0]
 802bbde:	3314      	adds	r3, #20
 802bbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bbe4:	e853 3f00 	ldrex	r3, [r3]
 802bbe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 802bbea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bbec:	f023 0301 	bic.w	r3, r3, #1
 802bbf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802bbf2:	687b      	ldr	r3, [r7, #4]
 802bbf4:	681b      	ldr	r3, [r3, #0]
 802bbf6:	3314      	adds	r3, #20
 802bbf8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 802bbfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 802bbfc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bbfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802bc00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802bc02:	e841 2300 	strex	r3, r2, [r1]
 802bc06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 802bc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bc0a:	2b00      	cmp	r3, #0
 802bc0c:	d1e5      	bne.n	802bbda <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802bc0e:	687b      	ldr	r3, [r7, #4]
 802bc10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802bc12:	2b01      	cmp	r3, #1
 802bc14:	d119      	bne.n	802bc4a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 802bc16:	687b      	ldr	r3, [r7, #4]
 802bc18:	681b      	ldr	r3, [r3, #0]
 802bc1a:	330c      	adds	r3, #12
 802bc1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802bc20:	e853 3f00 	ldrex	r3, [r3]
 802bc24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802bc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bc28:	f023 0310 	bic.w	r3, r3, #16
 802bc2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 802bc2e:	687b      	ldr	r3, [r7, #4]
 802bc30:	681b      	ldr	r3, [r3, #0]
 802bc32:	330c      	adds	r3, #12
 802bc34:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 802bc36:	647a      	str	r2, [r7, #68]	@ 0x44
 802bc38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bc3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802bc3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802bc3e:	e841 2300 	strex	r3, r2, [r1]
 802bc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802bc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802bc46:	2b00      	cmp	r3, #0
 802bc48:	d1e5      	bne.n	802bc16 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 802bc4a:	687b      	ldr	r3, [r7, #4]
 802bc4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bc4e:	2b00      	cmp	r3, #0
 802bc50:	d00f      	beq.n	802bc72 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802bc52:	687b      	ldr	r3, [r7, #4]
 802bc54:	681b      	ldr	r3, [r3, #0]
 802bc56:	695b      	ldr	r3, [r3, #20]
 802bc58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802bc5c:	2b80      	cmp	r3, #128	@ 0x80
 802bc5e:	d104      	bne.n	802bc6a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 802bc60:	687b      	ldr	r3, [r7, #4]
 802bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bc64:	4a53      	ldr	r2, [pc, #332]	@ (802bdb4 <HAL_UART_Abort_IT+0x220>)
 802bc66:	651a      	str	r2, [r3, #80]	@ 0x50
 802bc68:	e003      	b.n	802bc72 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 802bc6a:	687b      	ldr	r3, [r7, #4]
 802bc6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bc6e:	2200      	movs	r2, #0
 802bc70:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 802bc72:	687b      	ldr	r3, [r7, #4]
 802bc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bc76:	2b00      	cmp	r3, #0
 802bc78:	d00f      	beq.n	802bc9a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bc7a:	687b      	ldr	r3, [r7, #4]
 802bc7c:	681b      	ldr	r3, [r3, #0]
 802bc7e:	695b      	ldr	r3, [r3, #20]
 802bc80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802bc84:	2b40      	cmp	r3, #64	@ 0x40
 802bc86:	d104      	bne.n	802bc92 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 802bc88:	687b      	ldr	r3, [r7, #4]
 802bc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bc8c:	4a4a      	ldr	r2, [pc, #296]	@ (802bdb8 <HAL_UART_Abort_IT+0x224>)
 802bc8e:	651a      	str	r2, [r3, #80]	@ 0x50
 802bc90:	e003      	b.n	802bc9a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 802bc92:	687b      	ldr	r3, [r7, #4]
 802bc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bc96:	2200      	movs	r2, #0
 802bc98:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802bc9a:	687b      	ldr	r3, [r7, #4]
 802bc9c:	681b      	ldr	r3, [r3, #0]
 802bc9e:	695b      	ldr	r3, [r3, #20]
 802bca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802bca4:	2b80      	cmp	r3, #128	@ 0x80
 802bca6:	d12d      	bne.n	802bd04 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	681b      	ldr	r3, [r3, #0]
 802bcac:	3314      	adds	r3, #20
 802bcae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bcb2:	e853 3f00 	ldrex	r3, [r3]
 802bcb6:	623b      	str	r3, [r7, #32]
   return(result);
 802bcb8:	6a3b      	ldr	r3, [r7, #32]
 802bcba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802bcbe:	677b      	str	r3, [r7, #116]	@ 0x74
 802bcc0:	687b      	ldr	r3, [r7, #4]
 802bcc2:	681b      	ldr	r3, [r3, #0]
 802bcc4:	3314      	adds	r3, #20
 802bcc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 802bcc8:	633a      	str	r2, [r7, #48]	@ 0x30
 802bcca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802bcce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802bcd0:	e841 2300 	strex	r3, r2, [r1]
 802bcd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802bcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802bcd8:	2b00      	cmp	r3, #0
 802bcda:	d1e5      	bne.n	802bca8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bce0:	2b00      	cmp	r3, #0
 802bce2:	d00f      	beq.n	802bd04 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 802bce4:	687b      	ldr	r3, [r7, #4]
 802bce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bce8:	4618      	mov	r0, r3
 802bcea:	f7fa fb11 	bl	8026310 <HAL_DMA_Abort_IT>
 802bcee:	4603      	mov	r3, r0
 802bcf0:	2b00      	cmp	r3, #0
 802bcf2:	d004      	beq.n	802bcfe <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 802bcf4:	687b      	ldr	r3, [r7, #4]
 802bcf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802bcf8:	2200      	movs	r2, #0
 802bcfa:	651a      	str	r2, [r3, #80]	@ 0x50
 802bcfc:	e002      	b.n	802bd04 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 802bcfe:	2300      	movs	r3, #0
 802bd00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bd04:	687b      	ldr	r3, [r7, #4]
 802bd06:	681b      	ldr	r3, [r3, #0]
 802bd08:	695b      	ldr	r3, [r3, #20]
 802bd0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802bd0e:	2b40      	cmp	r3, #64	@ 0x40
 802bd10:	d130      	bne.n	802bd74 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802bd12:	687b      	ldr	r3, [r7, #4]
 802bd14:	681b      	ldr	r3, [r3, #0]
 802bd16:	3314      	adds	r3, #20
 802bd18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bd1a:	693b      	ldr	r3, [r7, #16]
 802bd1c:	e853 3f00 	ldrex	r3, [r3]
 802bd20:	60fb      	str	r3, [r7, #12]
   return(result);
 802bd22:	68fb      	ldr	r3, [r7, #12]
 802bd24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802bd28:	673b      	str	r3, [r7, #112]	@ 0x70
 802bd2a:	687b      	ldr	r3, [r7, #4]
 802bd2c:	681b      	ldr	r3, [r3, #0]
 802bd2e:	3314      	adds	r3, #20
 802bd30:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 802bd32:	61fa      	str	r2, [r7, #28]
 802bd34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bd36:	69b9      	ldr	r1, [r7, #24]
 802bd38:	69fa      	ldr	r2, [r7, #28]
 802bd3a:	e841 2300 	strex	r3, r2, [r1]
 802bd3e:	617b      	str	r3, [r7, #20]
   return(result);
 802bd40:	697b      	ldr	r3, [r7, #20]
 802bd42:	2b00      	cmp	r3, #0
 802bd44:	d1e5      	bne.n	802bd12 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 802bd46:	687b      	ldr	r3, [r7, #4]
 802bd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bd4a:	2b00      	cmp	r3, #0
 802bd4c:	d012      	beq.n	802bd74 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802bd4e:	687b      	ldr	r3, [r7, #4]
 802bd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bd52:	4618      	mov	r0, r3
 802bd54:	f7fa fadc 	bl	8026310 <HAL_DMA_Abort_IT>
 802bd58:	4603      	mov	r3, r0
 802bd5a:	2b00      	cmp	r3, #0
 802bd5c:	d007      	beq.n	802bd6e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 802bd5e:	687b      	ldr	r3, [r7, #4]
 802bd60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bd62:	2200      	movs	r2, #0
 802bd64:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 802bd66:	2301      	movs	r3, #1
 802bd68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802bd6c:	e002      	b.n	802bd74 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 802bd6e:	2300      	movs	r3, #0
 802bd70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 802bd74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802bd78:	2b01      	cmp	r3, #1
 802bd7a:	d116      	bne.n	802bdaa <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 802bd7c:	687b      	ldr	r3, [r7, #4]
 802bd7e:	2200      	movs	r2, #0
 802bd80:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 802bd82:	687b      	ldr	r3, [r7, #4]
 802bd84:	2200      	movs	r2, #0
 802bd86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bd88:	687b      	ldr	r3, [r7, #4]
 802bd8a:	2200      	movs	r2, #0
 802bd8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 802bd8e:	687b      	ldr	r3, [r7, #4]
 802bd90:	2220      	movs	r2, #32
 802bd92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 802bd96:	687b      	ldr	r3, [r7, #4]
 802bd98:	2220      	movs	r2, #32
 802bd9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802bd9e:	687b      	ldr	r3, [r7, #4]
 802bda0:	2200      	movs	r2, #0
 802bda2:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 802bda4:	6878      	ldr	r0, [r7, #4]
 802bda6:	f000 fab5 	bl	802c314 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 802bdaa:	2300      	movs	r3, #0
}
 802bdac:	4618      	mov	r0, r3
 802bdae:	3788      	adds	r7, #136	@ 0x88
 802bdb0:	46bd      	mov	sp, r7
 802bdb2:	bd80      	pop	{r7, pc}
 802bdb4:	0802c9bb 	.word	0x0802c9bb
 802bdb8:	0802ca1b 	.word	0x0802ca1b

0802bdbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802bdbc:	b580      	push	{r7, lr}
 802bdbe:	b0ba      	sub	sp, #232	@ 0xe8
 802bdc0:	af00      	add	r7, sp, #0
 802bdc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802bdc4:	687b      	ldr	r3, [r7, #4]
 802bdc6:	681b      	ldr	r3, [r3, #0]
 802bdc8:	681b      	ldr	r3, [r3, #0]
 802bdca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802bdce:	687b      	ldr	r3, [r7, #4]
 802bdd0:	681b      	ldr	r3, [r3, #0]
 802bdd2:	68db      	ldr	r3, [r3, #12]
 802bdd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802bdd8:	687b      	ldr	r3, [r7, #4]
 802bdda:	681b      	ldr	r3, [r3, #0]
 802bddc:	695b      	ldr	r3, [r3, #20]
 802bdde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 802bde2:	2300      	movs	r3, #0
 802bde4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 802bde8:	2300      	movs	r3, #0
 802bdea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802bdee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802bdf2:	f003 030f 	and.w	r3, r3, #15
 802bdf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 802bdfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802bdfe:	2b00      	cmp	r3, #0
 802be00:	d10f      	bne.n	802be22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802be02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802be06:	f003 0320 	and.w	r3, r3, #32
 802be0a:	2b00      	cmp	r3, #0
 802be0c:	d009      	beq.n	802be22 <HAL_UART_IRQHandler+0x66>
 802be0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802be12:	f003 0320 	and.w	r3, r3, #32
 802be16:	2b00      	cmp	r3, #0
 802be18:	d003      	beq.n	802be22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802be1a:	6878      	ldr	r0, [r7, #4]
 802be1c:	f000 fe95 	bl	802cb4a <UART_Receive_IT>
      return;
 802be20:	e256      	b.n	802c2d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802be22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802be26:	2b00      	cmp	r3, #0
 802be28:	f000 80de 	beq.w	802bfe8 <HAL_UART_IRQHandler+0x22c>
 802be2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802be30:	f003 0301 	and.w	r3, r3, #1
 802be34:	2b00      	cmp	r3, #0
 802be36:	d106      	bne.n	802be46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802be38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802be3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 802be40:	2b00      	cmp	r3, #0
 802be42:	f000 80d1 	beq.w	802bfe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802be46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802be4a:	f003 0301 	and.w	r3, r3, #1
 802be4e:	2b00      	cmp	r3, #0
 802be50:	d00b      	beq.n	802be6a <HAL_UART_IRQHandler+0xae>
 802be52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802be56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802be5a:	2b00      	cmp	r3, #0
 802be5c:	d005      	beq.n	802be6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802be5e:	687b      	ldr	r3, [r7, #4]
 802be60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802be62:	f043 0201 	orr.w	r2, r3, #1
 802be66:	687b      	ldr	r3, [r7, #4]
 802be68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802be6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802be6e:	f003 0304 	and.w	r3, r3, #4
 802be72:	2b00      	cmp	r3, #0
 802be74:	d00b      	beq.n	802be8e <HAL_UART_IRQHandler+0xd2>
 802be76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802be7a:	f003 0301 	and.w	r3, r3, #1
 802be7e:	2b00      	cmp	r3, #0
 802be80:	d005      	beq.n	802be8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802be82:	687b      	ldr	r3, [r7, #4]
 802be84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802be86:	f043 0202 	orr.w	r2, r3, #2
 802be8a:	687b      	ldr	r3, [r7, #4]
 802be8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802be8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802be92:	f003 0302 	and.w	r3, r3, #2
 802be96:	2b00      	cmp	r3, #0
 802be98:	d00b      	beq.n	802beb2 <HAL_UART_IRQHandler+0xf6>
 802be9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802be9e:	f003 0301 	and.w	r3, r3, #1
 802bea2:	2b00      	cmp	r3, #0
 802bea4:	d005      	beq.n	802beb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802bea6:	687b      	ldr	r3, [r7, #4]
 802bea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802beaa:	f043 0204 	orr.w	r2, r3, #4
 802beae:	687b      	ldr	r3, [r7, #4]
 802beb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802beb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802beb6:	f003 0308 	and.w	r3, r3, #8
 802beba:	2b00      	cmp	r3, #0
 802bebc:	d011      	beq.n	802bee2 <HAL_UART_IRQHandler+0x126>
 802bebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802bec2:	f003 0320 	and.w	r3, r3, #32
 802bec6:	2b00      	cmp	r3, #0
 802bec8:	d105      	bne.n	802bed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802beca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802bece:	f003 0301 	and.w	r3, r3, #1
 802bed2:	2b00      	cmp	r3, #0
 802bed4:	d005      	beq.n	802bee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802bed6:	687b      	ldr	r3, [r7, #4]
 802bed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802beda:	f043 0208 	orr.w	r2, r3, #8
 802bede:	687b      	ldr	r3, [r7, #4]
 802bee0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802bee2:	687b      	ldr	r3, [r7, #4]
 802bee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bee6:	2b00      	cmp	r3, #0
 802bee8:	f000 81ed 	beq.w	802c2c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802beec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802bef0:	f003 0320 	and.w	r3, r3, #32
 802bef4:	2b00      	cmp	r3, #0
 802bef6:	d008      	beq.n	802bf0a <HAL_UART_IRQHandler+0x14e>
 802bef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802befc:	f003 0320 	and.w	r3, r3, #32
 802bf00:	2b00      	cmp	r3, #0
 802bf02:	d002      	beq.n	802bf0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802bf04:	6878      	ldr	r0, [r7, #4]
 802bf06:	f000 fe20 	bl	802cb4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802bf0a:	687b      	ldr	r3, [r7, #4]
 802bf0c:	681b      	ldr	r3, [r3, #0]
 802bf0e:	695b      	ldr	r3, [r3, #20]
 802bf10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802bf14:	2b40      	cmp	r3, #64	@ 0x40
 802bf16:	bf0c      	ite	eq
 802bf18:	2301      	moveq	r3, #1
 802bf1a:	2300      	movne	r3, #0
 802bf1c:	b2db      	uxtb	r3, r3
 802bf1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802bf22:	687b      	ldr	r3, [r7, #4]
 802bf24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bf26:	f003 0308 	and.w	r3, r3, #8
 802bf2a:	2b00      	cmp	r3, #0
 802bf2c:	d103      	bne.n	802bf36 <HAL_UART_IRQHandler+0x17a>
 802bf2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 802bf32:	2b00      	cmp	r3, #0
 802bf34:	d04f      	beq.n	802bfd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802bf36:	6878      	ldr	r0, [r7, #4]
 802bf38:	f000 fcc8 	bl	802c8cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bf3c:	687b      	ldr	r3, [r7, #4]
 802bf3e:	681b      	ldr	r3, [r3, #0]
 802bf40:	695b      	ldr	r3, [r3, #20]
 802bf42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802bf46:	2b40      	cmp	r3, #64	@ 0x40
 802bf48:	d141      	bne.n	802bfce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802bf4a:	687b      	ldr	r3, [r7, #4]
 802bf4c:	681b      	ldr	r3, [r3, #0]
 802bf4e:	3314      	adds	r3, #20
 802bf50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bf54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802bf58:	e853 3f00 	ldrex	r3, [r3]
 802bf5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 802bf60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802bf64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802bf68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802bf6c:	687b      	ldr	r3, [r7, #4]
 802bf6e:	681b      	ldr	r3, [r3, #0]
 802bf70:	3314      	adds	r3, #20
 802bf72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 802bf76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 802bf7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bf7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802bf82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 802bf86:	e841 2300 	strex	r3, r2, [r1]
 802bf8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 802bf8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802bf92:	2b00      	cmp	r3, #0
 802bf94:	d1d9      	bne.n	802bf4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802bf96:	687b      	ldr	r3, [r7, #4]
 802bf98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bf9a:	2b00      	cmp	r3, #0
 802bf9c:	d013      	beq.n	802bfc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802bf9e:	687b      	ldr	r3, [r7, #4]
 802bfa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bfa2:	4a7d      	ldr	r2, [pc, #500]	@ (802c198 <HAL_UART_IRQHandler+0x3dc>)
 802bfa4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802bfa6:	687b      	ldr	r3, [r7, #4]
 802bfa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bfaa:	4618      	mov	r0, r3
 802bfac:	f7fa f9b0 	bl	8026310 <HAL_DMA_Abort_IT>
 802bfb0:	4603      	mov	r3, r0
 802bfb2:	2b00      	cmp	r3, #0
 802bfb4:	d016      	beq.n	802bfe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802bfb6:	687b      	ldr	r3, [r7, #4]
 802bfb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802bfba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802bfbc:	687a      	ldr	r2, [r7, #4]
 802bfbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 802bfc0:	4610      	mov	r0, r2
 802bfc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bfc4:	e00e      	b.n	802bfe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802bfc6:	6878      	ldr	r0, [r7, #4]
 802bfc8:	f000 f99a 	bl	802c300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bfcc:	e00a      	b.n	802bfe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802bfce:	6878      	ldr	r0, [r7, #4]
 802bfd0:	f000 f996 	bl	802c300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bfd4:	e006      	b.n	802bfe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802bfd6:	6878      	ldr	r0, [r7, #4]
 802bfd8:	f000 f992 	bl	802c300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	2200      	movs	r2, #0
 802bfe0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 802bfe2:	e170      	b.n	802c2c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bfe4:	bf00      	nop
    return;
 802bfe6:	e16e      	b.n	802c2c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802bfe8:	687b      	ldr	r3, [r7, #4]
 802bfea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802bfec:	2b01      	cmp	r3, #1
 802bfee:	f040 814a 	bne.w	802c286 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802bff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802bff6:	f003 0310 	and.w	r3, r3, #16
 802bffa:	2b00      	cmp	r3, #0
 802bffc:	f000 8143 	beq.w	802c286 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802c000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802c004:	f003 0310 	and.w	r3, r3, #16
 802c008:	2b00      	cmp	r3, #0
 802c00a:	f000 813c 	beq.w	802c286 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c00e:	2300      	movs	r3, #0
 802c010:	60bb      	str	r3, [r7, #8]
 802c012:	687b      	ldr	r3, [r7, #4]
 802c014:	681b      	ldr	r3, [r3, #0]
 802c016:	681b      	ldr	r3, [r3, #0]
 802c018:	60bb      	str	r3, [r7, #8]
 802c01a:	687b      	ldr	r3, [r7, #4]
 802c01c:	681b      	ldr	r3, [r3, #0]
 802c01e:	685b      	ldr	r3, [r3, #4]
 802c020:	60bb      	str	r3, [r7, #8]
 802c022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c024:	687b      	ldr	r3, [r7, #4]
 802c026:	681b      	ldr	r3, [r3, #0]
 802c028:	695b      	ldr	r3, [r3, #20]
 802c02a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802c02e:	2b40      	cmp	r3, #64	@ 0x40
 802c030:	f040 80b4 	bne.w	802c19c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802c034:	687b      	ldr	r3, [r7, #4]
 802c036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c038:	681b      	ldr	r3, [r3, #0]
 802c03a:	685b      	ldr	r3, [r3, #4]
 802c03c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 802c040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 802c044:	2b00      	cmp	r3, #0
 802c046:	f000 8140 	beq.w	802c2ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802c04a:	687b      	ldr	r3, [r7, #4]
 802c04c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802c04e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802c052:	429a      	cmp	r2, r3
 802c054:	f080 8139 	bcs.w	802c2ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802c058:	687b      	ldr	r3, [r7, #4]
 802c05a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802c05e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802c060:	687b      	ldr	r3, [r7, #4]
 802c062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c064:	69db      	ldr	r3, [r3, #28]
 802c066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802c06a:	f000 8088 	beq.w	802c17e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c06e:	687b      	ldr	r3, [r7, #4]
 802c070:	681b      	ldr	r3, [r3, #0]
 802c072:	330c      	adds	r3, #12
 802c074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802c07c:	e853 3f00 	ldrex	r3, [r3]
 802c080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 802c084:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802c088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802c08c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802c090:	687b      	ldr	r3, [r7, #4]
 802c092:	681b      	ldr	r3, [r3, #0]
 802c094:	330c      	adds	r3, #12
 802c096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 802c09a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 802c09e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c0a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 802c0a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 802c0aa:	e841 2300 	strex	r3, r2, [r1]
 802c0ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 802c0b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802c0b6:	2b00      	cmp	r3, #0
 802c0b8:	d1d9      	bne.n	802c06e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c0ba:	687b      	ldr	r3, [r7, #4]
 802c0bc:	681b      	ldr	r3, [r3, #0]
 802c0be:	3314      	adds	r3, #20
 802c0c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c0c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802c0c4:	e853 3f00 	ldrex	r3, [r3]
 802c0c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 802c0ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802c0cc:	f023 0301 	bic.w	r3, r3, #1
 802c0d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802c0d4:	687b      	ldr	r3, [r7, #4]
 802c0d6:	681b      	ldr	r3, [r3, #0]
 802c0d8:	3314      	adds	r3, #20
 802c0da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 802c0de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802c0e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c0e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 802c0e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 802c0ea:	e841 2300 	strex	r3, r2, [r1]
 802c0ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 802c0f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802c0f2:	2b00      	cmp	r3, #0
 802c0f4:	d1e1      	bne.n	802c0ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c0f6:	687b      	ldr	r3, [r7, #4]
 802c0f8:	681b      	ldr	r3, [r3, #0]
 802c0fa:	3314      	adds	r3, #20
 802c0fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c0fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802c100:	e853 3f00 	ldrex	r3, [r3]
 802c104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802c106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802c108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802c10c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802c110:	687b      	ldr	r3, [r7, #4]
 802c112:	681b      	ldr	r3, [r3, #0]
 802c114:	3314      	adds	r3, #20
 802c116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802c11a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 802c11c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c11e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802c120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802c122:	e841 2300 	strex	r3, r2, [r1]
 802c126:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 802c128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802c12a:	2b00      	cmp	r3, #0
 802c12c:	d1e3      	bne.n	802c0f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802c12e:	687b      	ldr	r3, [r7, #4]
 802c130:	2220      	movs	r2, #32
 802c132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c136:	687b      	ldr	r3, [r7, #4]
 802c138:	2200      	movs	r2, #0
 802c13a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c13c:	687b      	ldr	r3, [r7, #4]
 802c13e:	681b      	ldr	r3, [r3, #0]
 802c140:	330c      	adds	r3, #12
 802c142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c146:	e853 3f00 	ldrex	r3, [r3]
 802c14a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 802c14c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c14e:	f023 0310 	bic.w	r3, r3, #16
 802c152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 802c156:	687b      	ldr	r3, [r7, #4]
 802c158:	681b      	ldr	r3, [r3, #0]
 802c15a:	330c      	adds	r3, #12
 802c15c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 802c160:	65ba      	str	r2, [r7, #88]	@ 0x58
 802c162:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802c166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802c168:	e841 2300 	strex	r3, r2, [r1]
 802c16c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 802c16e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c170:	2b00      	cmp	r3, #0
 802c172:	d1e3      	bne.n	802c13c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802c174:	687b      	ldr	r3, [r7, #4]
 802c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c178:	4618      	mov	r0, r3
 802c17a:	f7fa f859 	bl	8026230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802c17e:	687b      	ldr	r3, [r7, #4]
 802c180:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802c182:	687b      	ldr	r3, [r7, #4]
 802c184:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802c186:	b29b      	uxth	r3, r3
 802c188:	1ad3      	subs	r3, r2, r3
 802c18a:	b29b      	uxth	r3, r3
 802c18c:	4619      	mov	r1, r3
 802c18e:	6878      	ldr	r0, [r7, #4]
 802c190:	f000 f8ca 	bl	802c328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c194:	e099      	b.n	802c2ca <HAL_UART_IRQHandler+0x50e>
 802c196:	bf00      	nop
 802c198:	0802c993 	.word	0x0802c993
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802c19c:	687b      	ldr	r3, [r7, #4]
 802c19e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802c1a0:	687b      	ldr	r3, [r7, #4]
 802c1a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802c1a4:	b29b      	uxth	r3, r3
 802c1a6:	1ad3      	subs	r3, r2, r3
 802c1a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802c1b0:	b29b      	uxth	r3, r3
 802c1b2:	2b00      	cmp	r3, #0
 802c1b4:	f000 808b 	beq.w	802c2ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802c1b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802c1bc:	2b00      	cmp	r3, #0
 802c1be:	f000 8086 	beq.w	802c2ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c1c2:	687b      	ldr	r3, [r7, #4]
 802c1c4:	681b      	ldr	r3, [r3, #0]
 802c1c6:	330c      	adds	r3, #12
 802c1c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802c1cc:	e853 3f00 	ldrex	r3, [r3]
 802c1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802c1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c1d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802c1d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802c1dc:	687b      	ldr	r3, [r7, #4]
 802c1de:	681b      	ldr	r3, [r3, #0]
 802c1e0:	330c      	adds	r3, #12
 802c1e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 802c1e6:	647a      	str	r2, [r7, #68]	@ 0x44
 802c1e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c1ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802c1ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802c1ee:	e841 2300 	strex	r3, r2, [r1]
 802c1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802c1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c1f6:	2b00      	cmp	r3, #0
 802c1f8:	d1e3      	bne.n	802c1c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c1fa:	687b      	ldr	r3, [r7, #4]
 802c1fc:	681b      	ldr	r3, [r3, #0]
 802c1fe:	3314      	adds	r3, #20
 802c200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c204:	e853 3f00 	ldrex	r3, [r3]
 802c208:	623b      	str	r3, [r7, #32]
   return(result);
 802c20a:	6a3b      	ldr	r3, [r7, #32]
 802c20c:	f023 0301 	bic.w	r3, r3, #1
 802c210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802c214:	687b      	ldr	r3, [r7, #4]
 802c216:	681b      	ldr	r3, [r3, #0]
 802c218:	3314      	adds	r3, #20
 802c21a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 802c21e:	633a      	str	r2, [r7, #48]	@ 0x30
 802c220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802c226:	e841 2300 	strex	r3, r2, [r1]
 802c22a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802c22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802c22e:	2b00      	cmp	r3, #0
 802c230:	d1e3      	bne.n	802c1fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802c232:	687b      	ldr	r3, [r7, #4]
 802c234:	2220      	movs	r2, #32
 802c236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c23a:	687b      	ldr	r3, [r7, #4]
 802c23c:	2200      	movs	r2, #0
 802c23e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c240:	687b      	ldr	r3, [r7, #4]
 802c242:	681b      	ldr	r3, [r3, #0]
 802c244:	330c      	adds	r3, #12
 802c246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c248:	693b      	ldr	r3, [r7, #16]
 802c24a:	e853 3f00 	ldrex	r3, [r3]
 802c24e:	60fb      	str	r3, [r7, #12]
   return(result);
 802c250:	68fb      	ldr	r3, [r7, #12]
 802c252:	f023 0310 	bic.w	r3, r3, #16
 802c256:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802c25a:	687b      	ldr	r3, [r7, #4]
 802c25c:	681b      	ldr	r3, [r3, #0]
 802c25e:	330c      	adds	r3, #12
 802c260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 802c264:	61fa      	str	r2, [r7, #28]
 802c266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c268:	69b9      	ldr	r1, [r7, #24]
 802c26a:	69fa      	ldr	r2, [r7, #28]
 802c26c:	e841 2300 	strex	r3, r2, [r1]
 802c270:	617b      	str	r3, [r7, #20]
   return(result);
 802c272:	697b      	ldr	r3, [r7, #20]
 802c274:	2b00      	cmp	r3, #0
 802c276:	d1e3      	bne.n	802c240 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802c278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802c27c:	4619      	mov	r1, r3
 802c27e:	6878      	ldr	r0, [r7, #4]
 802c280:	f000 f852 	bl	802c328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c284:	e023      	b.n	802c2ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802c286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802c28a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802c28e:	2b00      	cmp	r3, #0
 802c290:	d009      	beq.n	802c2a6 <HAL_UART_IRQHandler+0x4ea>
 802c292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802c296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802c29a:	2b00      	cmp	r3, #0
 802c29c:	d003      	beq.n	802c2a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802c29e:	6878      	ldr	r0, [r7, #4]
 802c2a0:	f000 fbeb 	bl	802ca7a <UART_Transmit_IT>
    return;
 802c2a4:	e014      	b.n	802c2d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802c2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802c2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802c2ae:	2b00      	cmp	r3, #0
 802c2b0:	d00e      	beq.n	802c2d0 <HAL_UART_IRQHandler+0x514>
 802c2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802c2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802c2ba:	2b00      	cmp	r3, #0
 802c2bc:	d008      	beq.n	802c2d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802c2be:	6878      	ldr	r0, [r7, #4]
 802c2c0:	f000 fc2b 	bl	802cb1a <UART_EndTransmit_IT>
    return;
 802c2c4:	e004      	b.n	802c2d0 <HAL_UART_IRQHandler+0x514>
    return;
 802c2c6:	bf00      	nop
 802c2c8:	e002      	b.n	802c2d0 <HAL_UART_IRQHandler+0x514>
      return;
 802c2ca:	bf00      	nop
 802c2cc:	e000      	b.n	802c2d0 <HAL_UART_IRQHandler+0x514>
      return;
 802c2ce:	bf00      	nop
  }
}
 802c2d0:	37e8      	adds	r7, #232	@ 0xe8
 802c2d2:	46bd      	mov	sp, r7
 802c2d4:	bd80      	pop	{r7, pc}
 802c2d6:	bf00      	nop

0802c2d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 802c2d8:	b480      	push	{r7}
 802c2da:	b083      	sub	sp, #12
 802c2dc:	af00      	add	r7, sp, #0
 802c2de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 802c2e0:	bf00      	nop
 802c2e2:	370c      	adds	r7, #12
 802c2e4:	46bd      	mov	sp, r7
 802c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2ea:	4770      	bx	lr

0802c2ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 802c2ec:	b480      	push	{r7}
 802c2ee:	b083      	sub	sp, #12
 802c2f0:	af00      	add	r7, sp, #0
 802c2f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 802c2f4:	bf00      	nop
 802c2f6:	370c      	adds	r7, #12
 802c2f8:	46bd      	mov	sp, r7
 802c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2fe:	4770      	bx	lr

0802c300 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802c300:	b480      	push	{r7}
 802c302:	b083      	sub	sp, #12
 802c304:	af00      	add	r7, sp, #0
 802c306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802c308:	bf00      	nop
 802c30a:	370c      	adds	r7, #12
 802c30c:	46bd      	mov	sp, r7
 802c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c312:	4770      	bx	lr

0802c314 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 802c314:	b480      	push	{r7}
 802c316:	b083      	sub	sp, #12
 802c318:	af00      	add	r7, sp, #0
 802c31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 802c31c:	bf00      	nop
 802c31e:	370c      	adds	r7, #12
 802c320:	46bd      	mov	sp, r7
 802c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c326:	4770      	bx	lr

0802c328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802c328:	b480      	push	{r7}
 802c32a:	b083      	sub	sp, #12
 802c32c:	af00      	add	r7, sp, #0
 802c32e:	6078      	str	r0, [r7, #4]
 802c330:	460b      	mov	r3, r1
 802c332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802c334:	bf00      	nop
 802c336:	370c      	adds	r7, #12
 802c338:	46bd      	mov	sp, r7
 802c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c33e:	4770      	bx	lr

0802c340 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 802c340:	b580      	push	{r7, lr}
 802c342:	b090      	sub	sp, #64	@ 0x40
 802c344:	af00      	add	r7, sp, #0
 802c346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c348:	687b      	ldr	r3, [r7, #4]
 802c34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 802c34e:	687b      	ldr	r3, [r7, #4]
 802c350:	681b      	ldr	r3, [r3, #0]
 802c352:	681b      	ldr	r3, [r3, #0]
 802c354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802c358:	2b00      	cmp	r3, #0
 802c35a:	d137      	bne.n	802c3cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 802c35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c35e:	2200      	movs	r2, #0
 802c360:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802c362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c364:	681b      	ldr	r3, [r3, #0]
 802c366:	3314      	adds	r3, #20
 802c368:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c36c:	e853 3f00 	ldrex	r3, [r3]
 802c370:	623b      	str	r3, [r7, #32]
   return(result);
 802c372:	6a3b      	ldr	r3, [r7, #32]
 802c374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802c378:	63bb      	str	r3, [r7, #56]	@ 0x38
 802c37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c37c:	681b      	ldr	r3, [r3, #0]
 802c37e:	3314      	adds	r3, #20
 802c380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802c382:	633a      	str	r2, [r7, #48]	@ 0x30
 802c384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802c38a:	e841 2300 	strex	r3, r2, [r1]
 802c38e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802c390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802c392:	2b00      	cmp	r3, #0
 802c394:	d1e5      	bne.n	802c362 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802c396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c398:	681b      	ldr	r3, [r3, #0]
 802c39a:	330c      	adds	r3, #12
 802c39c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c39e:	693b      	ldr	r3, [r7, #16]
 802c3a0:	e853 3f00 	ldrex	r3, [r3]
 802c3a4:	60fb      	str	r3, [r7, #12]
   return(result);
 802c3a6:	68fb      	ldr	r3, [r7, #12]
 802c3a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c3ac:	637b      	str	r3, [r7, #52]	@ 0x34
 802c3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c3b0:	681b      	ldr	r3, [r3, #0]
 802c3b2:	330c      	adds	r3, #12
 802c3b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802c3b6:	61fa      	str	r2, [r7, #28]
 802c3b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c3ba:	69b9      	ldr	r1, [r7, #24]
 802c3bc:	69fa      	ldr	r2, [r7, #28]
 802c3be:	e841 2300 	strex	r3, r2, [r1]
 802c3c2:	617b      	str	r3, [r7, #20]
   return(result);
 802c3c4:	697b      	ldr	r3, [r7, #20]
 802c3c6:	2b00      	cmp	r3, #0
 802c3c8:	d1e5      	bne.n	802c396 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802c3ca:	e002      	b.n	802c3d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 802c3cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 802c3ce:	f005 f889 	bl	80314e4 <HAL_UART_TxCpltCallback>
}
 802c3d2:	bf00      	nop
 802c3d4:	3740      	adds	r7, #64	@ 0x40
 802c3d6:	46bd      	mov	sp, r7
 802c3d8:	bd80      	pop	{r7, pc}

0802c3da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802c3da:	b580      	push	{r7, lr}
 802c3dc:	b084      	sub	sp, #16
 802c3de:	af00      	add	r7, sp, #0
 802c3e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c3e2:	687b      	ldr	r3, [r7, #4]
 802c3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c3e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 802c3e8:	68f8      	ldr	r0, [r7, #12]
 802c3ea:	f7ff ff75 	bl	802c2d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802c3ee:	bf00      	nop
 802c3f0:	3710      	adds	r7, #16
 802c3f2:	46bd      	mov	sp, r7
 802c3f4:	bd80      	pop	{r7, pc}

0802c3f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802c3f6:	b580      	push	{r7, lr}
 802c3f8:	b09c      	sub	sp, #112	@ 0x70
 802c3fa:	af00      	add	r7, sp, #0
 802c3fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c3fe:	687b      	ldr	r3, [r7, #4]
 802c400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c402:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 802c404:	687b      	ldr	r3, [r7, #4]
 802c406:	681b      	ldr	r3, [r3, #0]
 802c408:	681b      	ldr	r3, [r3, #0]
 802c40a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802c40e:	2b00      	cmp	r3, #0
 802c410:	d172      	bne.n	802c4f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 802c412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c414:	2200      	movs	r2, #0
 802c416:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c41a:	681b      	ldr	r3, [r3, #0]
 802c41c:	330c      	adds	r3, #12
 802c41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c422:	e853 3f00 	ldrex	r3, [r3]
 802c426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 802c428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c42a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802c42e:	66bb      	str	r3, [r7, #104]	@ 0x68
 802c430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c432:	681b      	ldr	r3, [r3, #0]
 802c434:	330c      	adds	r3, #12
 802c436:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 802c438:	65ba      	str	r2, [r7, #88]	@ 0x58
 802c43a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c43c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802c43e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802c440:	e841 2300 	strex	r3, r2, [r1]
 802c444:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 802c446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c448:	2b00      	cmp	r3, #0
 802c44a:	d1e5      	bne.n	802c418 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c44e:	681b      	ldr	r3, [r3, #0]
 802c450:	3314      	adds	r3, #20
 802c452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802c456:	e853 3f00 	ldrex	r3, [r3]
 802c45a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c45e:	f023 0301 	bic.w	r3, r3, #1
 802c462:	667b      	str	r3, [r7, #100]	@ 0x64
 802c464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c466:	681b      	ldr	r3, [r3, #0]
 802c468:	3314      	adds	r3, #20
 802c46a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802c46c:	647a      	str	r2, [r7, #68]	@ 0x44
 802c46e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802c472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802c474:	e841 2300 	strex	r3, r2, [r1]
 802c478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802c47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c47c:	2b00      	cmp	r3, #0
 802c47e:	d1e5      	bne.n	802c44c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c482:	681b      	ldr	r3, [r3, #0]
 802c484:	3314      	adds	r3, #20
 802c486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c48a:	e853 3f00 	ldrex	r3, [r3]
 802c48e:	623b      	str	r3, [r7, #32]
   return(result);
 802c490:	6a3b      	ldr	r3, [r7, #32]
 802c492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802c496:	663b      	str	r3, [r7, #96]	@ 0x60
 802c498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c49a:	681b      	ldr	r3, [r3, #0]
 802c49c:	3314      	adds	r3, #20
 802c49e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802c4a0:	633a      	str	r2, [r7, #48]	@ 0x30
 802c4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c4a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c4a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802c4a8:	e841 2300 	strex	r3, r2, [r1]
 802c4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802c4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802c4b0:	2b00      	cmp	r3, #0
 802c4b2:	d1e5      	bne.n	802c480 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802c4b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c4b6:	2220      	movs	r2, #32
 802c4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c4bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c4c0:	2b01      	cmp	r3, #1
 802c4c2:	d119      	bne.n	802c4f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c4c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c4c6:	681b      	ldr	r3, [r3, #0]
 802c4c8:	330c      	adds	r3, #12
 802c4ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c4cc:	693b      	ldr	r3, [r7, #16]
 802c4ce:	e853 3f00 	ldrex	r3, [r3]
 802c4d2:	60fb      	str	r3, [r7, #12]
   return(result);
 802c4d4:	68fb      	ldr	r3, [r7, #12]
 802c4d6:	f023 0310 	bic.w	r3, r3, #16
 802c4da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802c4dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c4de:	681b      	ldr	r3, [r3, #0]
 802c4e0:	330c      	adds	r3, #12
 802c4e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 802c4e4:	61fa      	str	r2, [r7, #28]
 802c4e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c4e8:	69b9      	ldr	r1, [r7, #24]
 802c4ea:	69fa      	ldr	r2, [r7, #28]
 802c4ec:	e841 2300 	strex	r3, r2, [r1]
 802c4f0:	617b      	str	r3, [r7, #20]
   return(result);
 802c4f2:	697b      	ldr	r3, [r7, #20]
 802c4f4:	2b00      	cmp	r3, #0
 802c4f6:	d1e5      	bne.n	802c4c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c4f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c4fc:	2b01      	cmp	r3, #1
 802c4fe:	d106      	bne.n	802c50e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802c500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802c502:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802c504:	4619      	mov	r1, r3
 802c506:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 802c508:	f7ff ff0e 	bl	802c328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802c50c:	e002      	b.n	802c514 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 802c50e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 802c510:	f005 f814 	bl	803153c <HAL_UART_RxCpltCallback>
}
 802c514:	bf00      	nop
 802c516:	3770      	adds	r7, #112	@ 0x70
 802c518:	46bd      	mov	sp, r7
 802c51a:	bd80      	pop	{r7, pc}

0802c51c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802c51c:	b580      	push	{r7, lr}
 802c51e:	b084      	sub	sp, #16
 802c520:	af00      	add	r7, sp, #0
 802c522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c528:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c52a:	68fb      	ldr	r3, [r7, #12]
 802c52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c52e:	2b01      	cmp	r3, #1
 802c530:	d108      	bne.n	802c544 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 802c532:	68fb      	ldr	r3, [r7, #12]
 802c534:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802c536:	085b      	lsrs	r3, r3, #1
 802c538:	b29b      	uxth	r3, r3
 802c53a:	4619      	mov	r1, r3
 802c53c:	68f8      	ldr	r0, [r7, #12]
 802c53e:	f7ff fef3 	bl	802c328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 802c542:	e002      	b.n	802c54a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 802c544:	68f8      	ldr	r0, [r7, #12]
 802c546:	f7ff fed1 	bl	802c2ec <HAL_UART_RxHalfCpltCallback>
}
 802c54a:	bf00      	nop
 802c54c:	3710      	adds	r7, #16
 802c54e:	46bd      	mov	sp, r7
 802c550:	bd80      	pop	{r7, pc}

0802c552 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 802c552:	b580      	push	{r7, lr}
 802c554:	b084      	sub	sp, #16
 802c556:	af00      	add	r7, sp, #0
 802c558:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 802c55a:	2300      	movs	r3, #0
 802c55c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c55e:	687b      	ldr	r3, [r7, #4]
 802c560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c562:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 802c564:	68bb      	ldr	r3, [r7, #8]
 802c566:	681b      	ldr	r3, [r3, #0]
 802c568:	695b      	ldr	r3, [r3, #20]
 802c56a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802c56e:	2b80      	cmp	r3, #128	@ 0x80
 802c570:	bf0c      	ite	eq
 802c572:	2301      	moveq	r3, #1
 802c574:	2300      	movne	r3, #0
 802c576:	b2db      	uxtb	r3, r3
 802c578:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 802c57a:	68bb      	ldr	r3, [r7, #8]
 802c57c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802c580:	b2db      	uxtb	r3, r3
 802c582:	2b21      	cmp	r3, #33	@ 0x21
 802c584:	d108      	bne.n	802c598 <UART_DMAError+0x46>
 802c586:	68fb      	ldr	r3, [r7, #12]
 802c588:	2b00      	cmp	r3, #0
 802c58a:	d005      	beq.n	802c598 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 802c58c:	68bb      	ldr	r3, [r7, #8]
 802c58e:	2200      	movs	r2, #0
 802c590:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 802c592:	68b8      	ldr	r0, [r7, #8]
 802c594:	f000 f972 	bl	802c87c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802c598:	68bb      	ldr	r3, [r7, #8]
 802c59a:	681b      	ldr	r3, [r3, #0]
 802c59c:	695b      	ldr	r3, [r3, #20]
 802c59e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802c5a2:	2b40      	cmp	r3, #64	@ 0x40
 802c5a4:	bf0c      	ite	eq
 802c5a6:	2301      	moveq	r3, #1
 802c5a8:	2300      	movne	r3, #0
 802c5aa:	b2db      	uxtb	r3, r3
 802c5ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 802c5ae:	68bb      	ldr	r3, [r7, #8]
 802c5b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802c5b4:	b2db      	uxtb	r3, r3
 802c5b6:	2b22      	cmp	r3, #34	@ 0x22
 802c5b8:	d108      	bne.n	802c5cc <UART_DMAError+0x7a>
 802c5ba:	68fb      	ldr	r3, [r7, #12]
 802c5bc:	2b00      	cmp	r3, #0
 802c5be:	d005      	beq.n	802c5cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 802c5c0:	68bb      	ldr	r3, [r7, #8]
 802c5c2:	2200      	movs	r2, #0
 802c5c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 802c5c6:	68b8      	ldr	r0, [r7, #8]
 802c5c8:	f000 f980 	bl	802c8cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 802c5cc:	68bb      	ldr	r3, [r7, #8]
 802c5ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802c5d0:	f043 0210 	orr.w	r2, r3, #16
 802c5d4:	68bb      	ldr	r3, [r7, #8]
 802c5d6:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802c5d8:	68b8      	ldr	r0, [r7, #8]
 802c5da:	f7ff fe91 	bl	802c300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802c5de:	bf00      	nop
 802c5e0:	3710      	adds	r7, #16
 802c5e2:	46bd      	mov	sp, r7
 802c5e4:	bd80      	pop	{r7, pc}

0802c5e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802c5e6:	b580      	push	{r7, lr}
 802c5e8:	b090      	sub	sp, #64	@ 0x40
 802c5ea:	af00      	add	r7, sp, #0
 802c5ec:	60f8      	str	r0, [r7, #12]
 802c5ee:	60b9      	str	r1, [r7, #8]
 802c5f0:	603b      	str	r3, [r7, #0]
 802c5f2:	4613      	mov	r3, r2
 802c5f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c5f6:	e050      	b.n	802c69a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802c5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c5fe:	d04c      	beq.n	802c69a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802c600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c602:	2b00      	cmp	r3, #0
 802c604:	d007      	beq.n	802c616 <UART_WaitOnFlagUntilTimeout+0x30>
 802c606:	f7f8 fea1 	bl	802534c <HAL_GetTick>
 802c60a:	4602      	mov	r2, r0
 802c60c:	683b      	ldr	r3, [r7, #0]
 802c60e:	1ad3      	subs	r3, r2, r3
 802c610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c612:	429a      	cmp	r2, r3
 802c614:	d241      	bcs.n	802c69a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802c616:	68fb      	ldr	r3, [r7, #12]
 802c618:	681b      	ldr	r3, [r3, #0]
 802c61a:	330c      	adds	r3, #12
 802c61c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802c620:	e853 3f00 	ldrex	r3, [r3]
 802c624:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802c626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c628:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 802c62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802c62e:	68fb      	ldr	r3, [r7, #12]
 802c630:	681b      	ldr	r3, [r3, #0]
 802c632:	330c      	adds	r3, #12
 802c634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802c636:	637a      	str	r2, [r7, #52]	@ 0x34
 802c638:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c63a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802c63c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802c63e:	e841 2300 	strex	r3, r2, [r1]
 802c642:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 802c644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c646:	2b00      	cmp	r3, #0
 802c648:	d1e5      	bne.n	802c616 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c64a:	68fb      	ldr	r3, [r7, #12]
 802c64c:	681b      	ldr	r3, [r3, #0]
 802c64e:	3314      	adds	r3, #20
 802c650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c652:	697b      	ldr	r3, [r7, #20]
 802c654:	e853 3f00 	ldrex	r3, [r3]
 802c658:	613b      	str	r3, [r7, #16]
   return(result);
 802c65a:	693b      	ldr	r3, [r7, #16]
 802c65c:	f023 0301 	bic.w	r3, r3, #1
 802c660:	63bb      	str	r3, [r7, #56]	@ 0x38
 802c662:	68fb      	ldr	r3, [r7, #12]
 802c664:	681b      	ldr	r3, [r3, #0]
 802c666:	3314      	adds	r3, #20
 802c668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802c66a:	623a      	str	r2, [r7, #32]
 802c66c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c66e:	69f9      	ldr	r1, [r7, #28]
 802c670:	6a3a      	ldr	r2, [r7, #32]
 802c672:	e841 2300 	strex	r3, r2, [r1]
 802c676:	61bb      	str	r3, [r7, #24]
   return(result);
 802c678:	69bb      	ldr	r3, [r7, #24]
 802c67a:	2b00      	cmp	r3, #0
 802c67c:	d1e5      	bne.n	802c64a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 802c67e:	68fb      	ldr	r3, [r7, #12]
 802c680:	2220      	movs	r2, #32
 802c682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802c686:	68fb      	ldr	r3, [r7, #12]
 802c688:	2220      	movs	r2, #32
 802c68a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802c68e:	68fb      	ldr	r3, [r7, #12]
 802c690:	2200      	movs	r2, #0
 802c692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 802c696:	2303      	movs	r3, #3
 802c698:	e00f      	b.n	802c6ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c69a:	68fb      	ldr	r3, [r7, #12]
 802c69c:	681b      	ldr	r3, [r3, #0]
 802c69e:	681a      	ldr	r2, [r3, #0]
 802c6a0:	68bb      	ldr	r3, [r7, #8]
 802c6a2:	4013      	ands	r3, r2
 802c6a4:	68ba      	ldr	r2, [r7, #8]
 802c6a6:	429a      	cmp	r2, r3
 802c6a8:	bf0c      	ite	eq
 802c6aa:	2301      	moveq	r3, #1
 802c6ac:	2300      	movne	r3, #0
 802c6ae:	b2db      	uxtb	r3, r3
 802c6b0:	461a      	mov	r2, r3
 802c6b2:	79fb      	ldrb	r3, [r7, #7]
 802c6b4:	429a      	cmp	r2, r3
 802c6b6:	d09f      	beq.n	802c5f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802c6b8:	2300      	movs	r3, #0
}
 802c6ba:	4618      	mov	r0, r3
 802c6bc:	3740      	adds	r7, #64	@ 0x40
 802c6be:	46bd      	mov	sp, r7
 802c6c0:	bd80      	pop	{r7, pc}

0802c6c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802c6c2:	b480      	push	{r7}
 802c6c4:	b085      	sub	sp, #20
 802c6c6:	af00      	add	r7, sp, #0
 802c6c8:	60f8      	str	r0, [r7, #12]
 802c6ca:	60b9      	str	r1, [r7, #8]
 802c6cc:	4613      	mov	r3, r2
 802c6ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802c6d0:	68fb      	ldr	r3, [r7, #12]
 802c6d2:	68ba      	ldr	r2, [r7, #8]
 802c6d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 802c6d6:	68fb      	ldr	r3, [r7, #12]
 802c6d8:	88fa      	ldrh	r2, [r7, #6]
 802c6da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 802c6dc:	68fb      	ldr	r3, [r7, #12]
 802c6de:	88fa      	ldrh	r2, [r7, #6]
 802c6e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c6e2:	68fb      	ldr	r3, [r7, #12]
 802c6e4:	2200      	movs	r2, #0
 802c6e6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802c6e8:	68fb      	ldr	r3, [r7, #12]
 802c6ea:	2222      	movs	r2, #34	@ 0x22
 802c6ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802c6f0:	68fb      	ldr	r3, [r7, #12]
 802c6f2:	2200      	movs	r2, #0
 802c6f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802c6f8:	68fb      	ldr	r3, [r7, #12]
 802c6fa:	691b      	ldr	r3, [r3, #16]
 802c6fc:	2b00      	cmp	r3, #0
 802c6fe:	d007      	beq.n	802c710 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802c700:	68fb      	ldr	r3, [r7, #12]
 802c702:	681b      	ldr	r3, [r3, #0]
 802c704:	68da      	ldr	r2, [r3, #12]
 802c706:	68fb      	ldr	r3, [r7, #12]
 802c708:	681b      	ldr	r3, [r3, #0]
 802c70a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802c70e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802c710:	68fb      	ldr	r3, [r7, #12]
 802c712:	681b      	ldr	r3, [r3, #0]
 802c714:	695a      	ldr	r2, [r3, #20]
 802c716:	68fb      	ldr	r3, [r7, #12]
 802c718:	681b      	ldr	r3, [r3, #0]
 802c71a:	f042 0201 	orr.w	r2, r2, #1
 802c71e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802c720:	68fb      	ldr	r3, [r7, #12]
 802c722:	681b      	ldr	r3, [r3, #0]
 802c724:	68da      	ldr	r2, [r3, #12]
 802c726:	68fb      	ldr	r3, [r7, #12]
 802c728:	681b      	ldr	r3, [r3, #0]
 802c72a:	f042 0220 	orr.w	r2, r2, #32
 802c72e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802c730:	2300      	movs	r3, #0
}
 802c732:	4618      	mov	r0, r3
 802c734:	3714      	adds	r7, #20
 802c736:	46bd      	mov	sp, r7
 802c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c73c:	4770      	bx	lr
	...

0802c740 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802c740:	b580      	push	{r7, lr}
 802c742:	b098      	sub	sp, #96	@ 0x60
 802c744:	af00      	add	r7, sp, #0
 802c746:	60f8      	str	r0, [r7, #12]
 802c748:	60b9      	str	r1, [r7, #8]
 802c74a:	4613      	mov	r3, r2
 802c74c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 802c74e:	68ba      	ldr	r2, [r7, #8]
 802c750:	68fb      	ldr	r3, [r7, #12]
 802c752:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 802c754:	68fb      	ldr	r3, [r7, #12]
 802c756:	88fa      	ldrh	r2, [r7, #6]
 802c758:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c75a:	68fb      	ldr	r3, [r7, #12]
 802c75c:	2200      	movs	r2, #0
 802c75e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802c760:	68fb      	ldr	r3, [r7, #12]
 802c762:	2222      	movs	r2, #34	@ 0x22
 802c764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 802c768:	68fb      	ldr	r3, [r7, #12]
 802c76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c76c:	4a40      	ldr	r2, [pc, #256]	@ (802c870 <UART_Start_Receive_DMA+0x130>)
 802c76e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 802c770:	68fb      	ldr	r3, [r7, #12]
 802c772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c774:	4a3f      	ldr	r2, [pc, #252]	@ (802c874 <UART_Start_Receive_DMA+0x134>)
 802c776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 802c778:	68fb      	ldr	r3, [r7, #12]
 802c77a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c77c:	4a3e      	ldr	r2, [pc, #248]	@ (802c878 <UART_Start_Receive_DMA+0x138>)
 802c77e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 802c780:	68fb      	ldr	r3, [r7, #12]
 802c782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c784:	2200      	movs	r2, #0
 802c786:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 802c788:	f107 0308 	add.w	r3, r7, #8
 802c78c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 802c78e:	68fb      	ldr	r3, [r7, #12]
 802c790:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802c792:	68fb      	ldr	r3, [r7, #12]
 802c794:	681b      	ldr	r3, [r3, #0]
 802c796:	3304      	adds	r3, #4
 802c798:	4619      	mov	r1, r3
 802c79a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802c79c:	681a      	ldr	r2, [r3, #0]
 802c79e:	88fb      	ldrh	r3, [r7, #6]
 802c7a0:	f7f9 fcee 	bl	8026180 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 802c7a4:	2300      	movs	r3, #0
 802c7a6:	613b      	str	r3, [r7, #16]
 802c7a8:	68fb      	ldr	r3, [r7, #12]
 802c7aa:	681b      	ldr	r3, [r3, #0]
 802c7ac:	681b      	ldr	r3, [r3, #0]
 802c7ae:	613b      	str	r3, [r7, #16]
 802c7b0:	68fb      	ldr	r3, [r7, #12]
 802c7b2:	681b      	ldr	r3, [r3, #0]
 802c7b4:	685b      	ldr	r3, [r3, #4]
 802c7b6:	613b      	str	r3, [r7, #16]
 802c7b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802c7ba:	68fb      	ldr	r3, [r7, #12]
 802c7bc:	2200      	movs	r2, #0
 802c7be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802c7c2:	68fb      	ldr	r3, [r7, #12]
 802c7c4:	691b      	ldr	r3, [r3, #16]
 802c7c6:	2b00      	cmp	r3, #0
 802c7c8:	d019      	beq.n	802c7fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c7ca:	68fb      	ldr	r3, [r7, #12]
 802c7cc:	681b      	ldr	r3, [r3, #0]
 802c7ce:	330c      	adds	r3, #12
 802c7d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c7d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802c7d4:	e853 3f00 	ldrex	r3, [r3]
 802c7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802c7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c7dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802c7e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 802c7e2:	68fb      	ldr	r3, [r7, #12]
 802c7e4:	681b      	ldr	r3, [r3, #0]
 802c7e6:	330c      	adds	r3, #12
 802c7e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802c7ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 802c7ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c7ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 802c7f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c7f2:	e841 2300 	strex	r3, r2, [r1]
 802c7f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 802c7f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802c7fa:	2b00      	cmp	r3, #0
 802c7fc:	d1e5      	bne.n	802c7ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c7fe:	68fb      	ldr	r3, [r7, #12]
 802c800:	681b      	ldr	r3, [r3, #0]
 802c802:	3314      	adds	r3, #20
 802c804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c808:	e853 3f00 	ldrex	r3, [r3]
 802c80c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802c80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802c810:	f043 0301 	orr.w	r3, r3, #1
 802c814:	657b      	str	r3, [r7, #84]	@ 0x54
 802c816:	68fb      	ldr	r3, [r7, #12]
 802c818:	681b      	ldr	r3, [r3, #0]
 802c81a:	3314      	adds	r3, #20
 802c81c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c81e:	63ba      	str	r2, [r7, #56]	@ 0x38
 802c820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c822:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802c824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802c826:	e841 2300 	strex	r3, r2, [r1]
 802c82a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802c82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c82e:	2b00      	cmp	r3, #0
 802c830:	d1e5      	bne.n	802c7fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c832:	68fb      	ldr	r3, [r7, #12]
 802c834:	681b      	ldr	r3, [r3, #0]
 802c836:	3314      	adds	r3, #20
 802c838:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c83a:	69bb      	ldr	r3, [r7, #24]
 802c83c:	e853 3f00 	ldrex	r3, [r3]
 802c840:	617b      	str	r3, [r7, #20]
   return(result);
 802c842:	697b      	ldr	r3, [r7, #20]
 802c844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c848:	653b      	str	r3, [r7, #80]	@ 0x50
 802c84a:	68fb      	ldr	r3, [r7, #12]
 802c84c:	681b      	ldr	r3, [r3, #0]
 802c84e:	3314      	adds	r3, #20
 802c850:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c852:	627a      	str	r2, [r7, #36]	@ 0x24
 802c854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c856:	6a39      	ldr	r1, [r7, #32]
 802c858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c85a:	e841 2300 	strex	r3, r2, [r1]
 802c85e:	61fb      	str	r3, [r7, #28]
   return(result);
 802c860:	69fb      	ldr	r3, [r7, #28]
 802c862:	2b00      	cmp	r3, #0
 802c864:	d1e5      	bne.n	802c832 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 802c866:	2300      	movs	r3, #0
}
 802c868:	4618      	mov	r0, r3
 802c86a:	3760      	adds	r7, #96	@ 0x60
 802c86c:	46bd      	mov	sp, r7
 802c86e:	bd80      	pop	{r7, pc}
 802c870:	0802c3f7 	.word	0x0802c3f7
 802c874:	0802c51d 	.word	0x0802c51d
 802c878:	0802c553 	.word	0x0802c553

0802c87c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 802c87c:	b480      	push	{r7}
 802c87e:	b089      	sub	sp, #36	@ 0x24
 802c880:	af00      	add	r7, sp, #0
 802c882:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 802c884:	687b      	ldr	r3, [r7, #4]
 802c886:	681b      	ldr	r3, [r3, #0]
 802c888:	330c      	adds	r3, #12
 802c88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c88c:	68fb      	ldr	r3, [r7, #12]
 802c88e:	e853 3f00 	ldrex	r3, [r3]
 802c892:	60bb      	str	r3, [r7, #8]
   return(result);
 802c894:	68bb      	ldr	r3, [r7, #8]
 802c896:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 802c89a:	61fb      	str	r3, [r7, #28]
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	681b      	ldr	r3, [r3, #0]
 802c8a0:	330c      	adds	r3, #12
 802c8a2:	69fa      	ldr	r2, [r7, #28]
 802c8a4:	61ba      	str	r2, [r7, #24]
 802c8a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c8a8:	6979      	ldr	r1, [r7, #20]
 802c8aa:	69ba      	ldr	r2, [r7, #24]
 802c8ac:	e841 2300 	strex	r3, r2, [r1]
 802c8b0:	613b      	str	r3, [r7, #16]
   return(result);
 802c8b2:	693b      	ldr	r3, [r7, #16]
 802c8b4:	2b00      	cmp	r3, #0
 802c8b6:	d1e5      	bne.n	802c884 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802c8b8:	687b      	ldr	r3, [r7, #4]
 802c8ba:	2220      	movs	r2, #32
 802c8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 802c8c0:	bf00      	nop
 802c8c2:	3724      	adds	r7, #36	@ 0x24
 802c8c4:	46bd      	mov	sp, r7
 802c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8ca:	4770      	bx	lr

0802c8cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802c8cc:	b480      	push	{r7}
 802c8ce:	b095      	sub	sp, #84	@ 0x54
 802c8d0:	af00      	add	r7, sp, #0
 802c8d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c8d4:	687b      	ldr	r3, [r7, #4]
 802c8d6:	681b      	ldr	r3, [r3, #0]
 802c8d8:	330c      	adds	r3, #12
 802c8da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c8de:	e853 3f00 	ldrex	r3, [r3]
 802c8e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802c8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c8e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802c8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c8ec:	687b      	ldr	r3, [r7, #4]
 802c8ee:	681b      	ldr	r3, [r3, #0]
 802c8f0:	330c      	adds	r3, #12
 802c8f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c8f4:	643a      	str	r2, [r7, #64]	@ 0x40
 802c8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c8f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802c8fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802c8fc:	e841 2300 	strex	r3, r2, [r1]
 802c900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802c902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802c904:	2b00      	cmp	r3, #0
 802c906:	d1e5      	bne.n	802c8d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	681b      	ldr	r3, [r3, #0]
 802c90c:	3314      	adds	r3, #20
 802c90e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c910:	6a3b      	ldr	r3, [r7, #32]
 802c912:	e853 3f00 	ldrex	r3, [r3]
 802c916:	61fb      	str	r3, [r7, #28]
   return(result);
 802c918:	69fb      	ldr	r3, [r7, #28]
 802c91a:	f023 0301 	bic.w	r3, r3, #1
 802c91e:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c920:	687b      	ldr	r3, [r7, #4]
 802c922:	681b      	ldr	r3, [r3, #0]
 802c924:	3314      	adds	r3, #20
 802c926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802c92a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c92c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802c92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802c930:	e841 2300 	strex	r3, r2, [r1]
 802c934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c938:	2b00      	cmp	r3, #0
 802c93a:	d1e5      	bne.n	802c908 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c93c:	687b      	ldr	r3, [r7, #4]
 802c93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c940:	2b01      	cmp	r3, #1
 802c942:	d119      	bne.n	802c978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c944:	687b      	ldr	r3, [r7, #4]
 802c946:	681b      	ldr	r3, [r3, #0]
 802c948:	330c      	adds	r3, #12
 802c94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c94c:	68fb      	ldr	r3, [r7, #12]
 802c94e:	e853 3f00 	ldrex	r3, [r3]
 802c952:	60bb      	str	r3, [r7, #8]
   return(result);
 802c954:	68bb      	ldr	r3, [r7, #8]
 802c956:	f023 0310 	bic.w	r3, r3, #16
 802c95a:	647b      	str	r3, [r7, #68]	@ 0x44
 802c95c:	687b      	ldr	r3, [r7, #4]
 802c95e:	681b      	ldr	r3, [r3, #0]
 802c960:	330c      	adds	r3, #12
 802c962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802c964:	61ba      	str	r2, [r7, #24]
 802c966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c968:	6979      	ldr	r1, [r7, #20]
 802c96a:	69ba      	ldr	r2, [r7, #24]
 802c96c:	e841 2300 	strex	r3, r2, [r1]
 802c970:	613b      	str	r3, [r7, #16]
   return(result);
 802c972:	693b      	ldr	r3, [r7, #16]
 802c974:	2b00      	cmp	r3, #0
 802c976:	d1e5      	bne.n	802c944 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802c978:	687b      	ldr	r3, [r7, #4]
 802c97a:	2220      	movs	r2, #32
 802c97c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c980:	687b      	ldr	r3, [r7, #4]
 802c982:	2200      	movs	r2, #0
 802c984:	631a      	str	r2, [r3, #48]	@ 0x30
}
 802c986:	bf00      	nop
 802c988:	3754      	adds	r7, #84	@ 0x54
 802c98a:	46bd      	mov	sp, r7
 802c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c990:	4770      	bx	lr

0802c992 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802c992:	b580      	push	{r7, lr}
 802c994:	b084      	sub	sp, #16
 802c996:	af00      	add	r7, sp, #0
 802c998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c99e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802c9a0:	68fb      	ldr	r3, [r7, #12]
 802c9a2:	2200      	movs	r2, #0
 802c9a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 802c9a6:	68fb      	ldr	r3, [r7, #12]
 802c9a8:	2200      	movs	r2, #0
 802c9aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802c9ac:	68f8      	ldr	r0, [r7, #12]
 802c9ae:	f7ff fca7 	bl	802c300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802c9b2:	bf00      	nop
 802c9b4:	3710      	adds	r7, #16
 802c9b6:	46bd      	mov	sp, r7
 802c9b8:	bd80      	pop	{r7, pc}

0802c9ba <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802c9ba:	b580      	push	{r7, lr}
 802c9bc:	b084      	sub	sp, #16
 802c9be:	af00      	add	r7, sp, #0
 802c9c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c9c6:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 802c9c8:	68fb      	ldr	r3, [r7, #12]
 802c9ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802c9cc:	2200      	movs	r2, #0
 802c9ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 802c9d0:	68fb      	ldr	r3, [r7, #12]
 802c9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c9d4:	2b00      	cmp	r3, #0
 802c9d6:	d004      	beq.n	802c9e2 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 802c9d8:	68fb      	ldr	r3, [r7, #12]
 802c9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802c9dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802c9de:	2b00      	cmp	r3, #0
 802c9e0:	d117      	bne.n	802ca12 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802c9e2:	68fb      	ldr	r3, [r7, #12]
 802c9e4:	2200      	movs	r2, #0
 802c9e6:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 802c9e8:	68fb      	ldr	r3, [r7, #12]
 802c9ea:	2200      	movs	r2, #0
 802c9ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c9ee:	68fb      	ldr	r3, [r7, #12]
 802c9f0:	2200      	movs	r2, #0
 802c9f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 802c9f4:	68fb      	ldr	r3, [r7, #12]
 802c9f6:	2220      	movs	r2, #32
 802c9f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802c9fc:	68fb      	ldr	r3, [r7, #12]
 802c9fe:	2220      	movs	r2, #32
 802ca00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ca04:	68fb      	ldr	r3, [r7, #12]
 802ca06:	2200      	movs	r2, #0
 802ca08:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 802ca0a:	68f8      	ldr	r0, [r7, #12]
 802ca0c:	f7ff fc82 	bl	802c314 <HAL_UART_AbortCpltCallback>
 802ca10:	e000      	b.n	802ca14 <UART_DMATxAbortCallback+0x5a>
      return;
 802ca12:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802ca14:	3710      	adds	r7, #16
 802ca16:	46bd      	mov	sp, r7
 802ca18:	bd80      	pop	{r7, pc}

0802ca1a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 802ca1a:	b580      	push	{r7, lr}
 802ca1c:	b084      	sub	sp, #16
 802ca1e:	af00      	add	r7, sp, #0
 802ca20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802ca22:	687b      	ldr	r3, [r7, #4]
 802ca24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ca26:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 802ca28:	68fb      	ldr	r3, [r7, #12]
 802ca2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ca2c:	2200      	movs	r2, #0
 802ca2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 802ca30:	68fb      	ldr	r3, [r7, #12]
 802ca32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802ca34:	2b00      	cmp	r3, #0
 802ca36:	d004      	beq.n	802ca42 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 802ca38:	68fb      	ldr	r3, [r7, #12]
 802ca3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802ca3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802ca3e:	2b00      	cmp	r3, #0
 802ca40:	d117      	bne.n	802ca72 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802ca42:	68fb      	ldr	r3, [r7, #12]
 802ca44:	2200      	movs	r2, #0
 802ca46:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 802ca48:	68fb      	ldr	r3, [r7, #12]
 802ca4a:	2200      	movs	r2, #0
 802ca4c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ca4e:	68fb      	ldr	r3, [r7, #12]
 802ca50:	2200      	movs	r2, #0
 802ca52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 802ca54:	68fb      	ldr	r3, [r7, #12]
 802ca56:	2220      	movs	r2, #32
 802ca58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802ca5c:	68fb      	ldr	r3, [r7, #12]
 802ca5e:	2220      	movs	r2, #32
 802ca60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ca64:	68fb      	ldr	r3, [r7, #12]
 802ca66:	2200      	movs	r2, #0
 802ca68:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 802ca6a:	68f8      	ldr	r0, [r7, #12]
 802ca6c:	f7ff fc52 	bl	802c314 <HAL_UART_AbortCpltCallback>
 802ca70:	e000      	b.n	802ca74 <UART_DMARxAbortCallback+0x5a>
      return;
 802ca72:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802ca74:	3710      	adds	r7, #16
 802ca76:	46bd      	mov	sp, r7
 802ca78:	bd80      	pop	{r7, pc}

0802ca7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802ca7a:	b480      	push	{r7}
 802ca7c:	b085      	sub	sp, #20
 802ca7e:	af00      	add	r7, sp, #0
 802ca80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802ca82:	687b      	ldr	r3, [r7, #4]
 802ca84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802ca88:	b2db      	uxtb	r3, r3
 802ca8a:	2b21      	cmp	r3, #33	@ 0x21
 802ca8c:	d13e      	bne.n	802cb0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	689b      	ldr	r3, [r3, #8]
 802ca92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802ca96:	d114      	bne.n	802cac2 <UART_Transmit_IT+0x48>
 802ca98:	687b      	ldr	r3, [r7, #4]
 802ca9a:	691b      	ldr	r3, [r3, #16]
 802ca9c:	2b00      	cmp	r3, #0
 802ca9e:	d110      	bne.n	802cac2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802caa0:	687b      	ldr	r3, [r7, #4]
 802caa2:	6a1b      	ldr	r3, [r3, #32]
 802caa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802caa6:	68fb      	ldr	r3, [r7, #12]
 802caa8:	881b      	ldrh	r3, [r3, #0]
 802caaa:	461a      	mov	r2, r3
 802caac:	687b      	ldr	r3, [r7, #4]
 802caae:	681b      	ldr	r3, [r3, #0]
 802cab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802cab4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802cab6:	687b      	ldr	r3, [r7, #4]
 802cab8:	6a1b      	ldr	r3, [r3, #32]
 802caba:	1c9a      	adds	r2, r3, #2
 802cabc:	687b      	ldr	r3, [r7, #4]
 802cabe:	621a      	str	r2, [r3, #32]
 802cac0:	e008      	b.n	802cad4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802cac2:	687b      	ldr	r3, [r7, #4]
 802cac4:	6a1b      	ldr	r3, [r3, #32]
 802cac6:	1c59      	adds	r1, r3, #1
 802cac8:	687a      	ldr	r2, [r7, #4]
 802caca:	6211      	str	r1, [r2, #32]
 802cacc:	781a      	ldrb	r2, [r3, #0]
 802cace:	687b      	ldr	r3, [r7, #4]
 802cad0:	681b      	ldr	r3, [r3, #0]
 802cad2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802cad4:	687b      	ldr	r3, [r7, #4]
 802cad6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802cad8:	b29b      	uxth	r3, r3
 802cada:	3b01      	subs	r3, #1
 802cadc:	b29b      	uxth	r3, r3
 802cade:	687a      	ldr	r2, [r7, #4]
 802cae0:	4619      	mov	r1, r3
 802cae2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 802cae4:	2b00      	cmp	r3, #0
 802cae6:	d10f      	bne.n	802cb08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802cae8:	687b      	ldr	r3, [r7, #4]
 802caea:	681b      	ldr	r3, [r3, #0]
 802caec:	68da      	ldr	r2, [r3, #12]
 802caee:	687b      	ldr	r3, [r7, #4]
 802caf0:	681b      	ldr	r3, [r3, #0]
 802caf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802caf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802caf8:	687b      	ldr	r3, [r7, #4]
 802cafa:	681b      	ldr	r3, [r3, #0]
 802cafc:	68da      	ldr	r2, [r3, #12]
 802cafe:	687b      	ldr	r3, [r7, #4]
 802cb00:	681b      	ldr	r3, [r3, #0]
 802cb02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802cb06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802cb08:	2300      	movs	r3, #0
 802cb0a:	e000      	b.n	802cb0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802cb0c:	2302      	movs	r3, #2
  }
}
 802cb0e:	4618      	mov	r0, r3
 802cb10:	3714      	adds	r7, #20
 802cb12:	46bd      	mov	sp, r7
 802cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb18:	4770      	bx	lr

0802cb1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802cb1a:	b580      	push	{r7, lr}
 802cb1c:	b082      	sub	sp, #8
 802cb1e:	af00      	add	r7, sp, #0
 802cb20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802cb22:	687b      	ldr	r3, [r7, #4]
 802cb24:	681b      	ldr	r3, [r3, #0]
 802cb26:	68da      	ldr	r2, [r3, #12]
 802cb28:	687b      	ldr	r3, [r7, #4]
 802cb2a:	681b      	ldr	r3, [r3, #0]
 802cb2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802cb30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802cb32:	687b      	ldr	r3, [r7, #4]
 802cb34:	2220      	movs	r2, #32
 802cb36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802cb3a:	6878      	ldr	r0, [r7, #4]
 802cb3c:	f004 fcd2 	bl	80314e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802cb40:	2300      	movs	r3, #0
}
 802cb42:	4618      	mov	r0, r3
 802cb44:	3708      	adds	r7, #8
 802cb46:	46bd      	mov	sp, r7
 802cb48:	bd80      	pop	{r7, pc}

0802cb4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802cb4a:	b580      	push	{r7, lr}
 802cb4c:	b08c      	sub	sp, #48	@ 0x30
 802cb4e:	af00      	add	r7, sp, #0
 802cb50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802cb52:	687b      	ldr	r3, [r7, #4]
 802cb54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802cb58:	b2db      	uxtb	r3, r3
 802cb5a:	2b22      	cmp	r3, #34	@ 0x22
 802cb5c:	f040 80ab 	bne.w	802ccb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802cb60:	687b      	ldr	r3, [r7, #4]
 802cb62:	689b      	ldr	r3, [r3, #8]
 802cb64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802cb68:	d117      	bne.n	802cb9a <UART_Receive_IT+0x50>
 802cb6a:	687b      	ldr	r3, [r7, #4]
 802cb6c:	691b      	ldr	r3, [r3, #16]
 802cb6e:	2b00      	cmp	r3, #0
 802cb70:	d113      	bne.n	802cb9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802cb72:	2300      	movs	r3, #0
 802cb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802cb76:	687b      	ldr	r3, [r7, #4]
 802cb78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802cb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802cb7c:	687b      	ldr	r3, [r7, #4]
 802cb7e:	681b      	ldr	r3, [r3, #0]
 802cb80:	685b      	ldr	r3, [r3, #4]
 802cb82:	b29b      	uxth	r3, r3
 802cb84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802cb88:	b29a      	uxth	r2, r3
 802cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802cb8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802cb8e:	687b      	ldr	r3, [r7, #4]
 802cb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802cb92:	1c9a      	adds	r2, r3, #2
 802cb94:	687b      	ldr	r3, [r7, #4]
 802cb96:	629a      	str	r2, [r3, #40]	@ 0x28
 802cb98:	e026      	b.n	802cbe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802cb9a:	687b      	ldr	r3, [r7, #4]
 802cb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802cb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 802cba0:	2300      	movs	r3, #0
 802cba2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802cba4:	687b      	ldr	r3, [r7, #4]
 802cba6:	689b      	ldr	r3, [r3, #8]
 802cba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802cbac:	d007      	beq.n	802cbbe <UART_Receive_IT+0x74>
 802cbae:	687b      	ldr	r3, [r7, #4]
 802cbb0:	689b      	ldr	r3, [r3, #8]
 802cbb2:	2b00      	cmp	r3, #0
 802cbb4:	d10a      	bne.n	802cbcc <UART_Receive_IT+0x82>
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	691b      	ldr	r3, [r3, #16]
 802cbba:	2b00      	cmp	r3, #0
 802cbbc:	d106      	bne.n	802cbcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802cbbe:	687b      	ldr	r3, [r7, #4]
 802cbc0:	681b      	ldr	r3, [r3, #0]
 802cbc2:	685b      	ldr	r3, [r3, #4]
 802cbc4:	b2da      	uxtb	r2, r3
 802cbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802cbc8:	701a      	strb	r2, [r3, #0]
 802cbca:	e008      	b.n	802cbde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802cbcc:	687b      	ldr	r3, [r7, #4]
 802cbce:	681b      	ldr	r3, [r3, #0]
 802cbd0:	685b      	ldr	r3, [r3, #4]
 802cbd2:	b2db      	uxtb	r3, r3
 802cbd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802cbd8:	b2da      	uxtb	r2, r3
 802cbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802cbdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802cbde:	687b      	ldr	r3, [r7, #4]
 802cbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802cbe2:	1c5a      	adds	r2, r3, #1
 802cbe4:	687b      	ldr	r3, [r7, #4]
 802cbe6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 802cbe8:	687b      	ldr	r3, [r7, #4]
 802cbea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802cbec:	b29b      	uxth	r3, r3
 802cbee:	3b01      	subs	r3, #1
 802cbf0:	b29b      	uxth	r3, r3
 802cbf2:	687a      	ldr	r2, [r7, #4]
 802cbf4:	4619      	mov	r1, r3
 802cbf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 802cbf8:	2b00      	cmp	r3, #0
 802cbfa:	d15a      	bne.n	802ccb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802cbfc:	687b      	ldr	r3, [r7, #4]
 802cbfe:	681b      	ldr	r3, [r3, #0]
 802cc00:	68da      	ldr	r2, [r3, #12]
 802cc02:	687b      	ldr	r3, [r7, #4]
 802cc04:	681b      	ldr	r3, [r3, #0]
 802cc06:	f022 0220 	bic.w	r2, r2, #32
 802cc0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802cc0c:	687b      	ldr	r3, [r7, #4]
 802cc0e:	681b      	ldr	r3, [r3, #0]
 802cc10:	68da      	ldr	r2, [r3, #12]
 802cc12:	687b      	ldr	r3, [r7, #4]
 802cc14:	681b      	ldr	r3, [r3, #0]
 802cc16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 802cc1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802cc1c:	687b      	ldr	r3, [r7, #4]
 802cc1e:	681b      	ldr	r3, [r3, #0]
 802cc20:	695a      	ldr	r2, [r3, #20]
 802cc22:	687b      	ldr	r3, [r7, #4]
 802cc24:	681b      	ldr	r3, [r3, #0]
 802cc26:	f022 0201 	bic.w	r2, r2, #1
 802cc2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802cc2c:	687b      	ldr	r3, [r7, #4]
 802cc2e:	2220      	movs	r2, #32
 802cc30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802cc34:	687b      	ldr	r3, [r7, #4]
 802cc36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802cc38:	2b01      	cmp	r3, #1
 802cc3a:	d135      	bne.n	802cca8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802cc3c:	687b      	ldr	r3, [r7, #4]
 802cc3e:	2200      	movs	r2, #0
 802cc40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802cc42:	687b      	ldr	r3, [r7, #4]
 802cc44:	681b      	ldr	r3, [r3, #0]
 802cc46:	330c      	adds	r3, #12
 802cc48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cc4a:	697b      	ldr	r3, [r7, #20]
 802cc4c:	e853 3f00 	ldrex	r3, [r3]
 802cc50:	613b      	str	r3, [r7, #16]
   return(result);
 802cc52:	693b      	ldr	r3, [r7, #16]
 802cc54:	f023 0310 	bic.w	r3, r3, #16
 802cc58:	627b      	str	r3, [r7, #36]	@ 0x24
 802cc5a:	687b      	ldr	r3, [r7, #4]
 802cc5c:	681b      	ldr	r3, [r3, #0]
 802cc5e:	330c      	adds	r3, #12
 802cc60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cc62:	623a      	str	r2, [r7, #32]
 802cc64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cc66:	69f9      	ldr	r1, [r7, #28]
 802cc68:	6a3a      	ldr	r2, [r7, #32]
 802cc6a:	e841 2300 	strex	r3, r2, [r1]
 802cc6e:	61bb      	str	r3, [r7, #24]
   return(result);
 802cc70:	69bb      	ldr	r3, [r7, #24]
 802cc72:	2b00      	cmp	r3, #0
 802cc74:	d1e5      	bne.n	802cc42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802cc76:	687b      	ldr	r3, [r7, #4]
 802cc78:	681b      	ldr	r3, [r3, #0]
 802cc7a:	681b      	ldr	r3, [r3, #0]
 802cc7c:	f003 0310 	and.w	r3, r3, #16
 802cc80:	2b10      	cmp	r3, #16
 802cc82:	d10a      	bne.n	802cc9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802cc84:	2300      	movs	r3, #0
 802cc86:	60fb      	str	r3, [r7, #12]
 802cc88:	687b      	ldr	r3, [r7, #4]
 802cc8a:	681b      	ldr	r3, [r3, #0]
 802cc8c:	681b      	ldr	r3, [r3, #0]
 802cc8e:	60fb      	str	r3, [r7, #12]
 802cc90:	687b      	ldr	r3, [r7, #4]
 802cc92:	681b      	ldr	r3, [r3, #0]
 802cc94:	685b      	ldr	r3, [r3, #4]
 802cc96:	60fb      	str	r3, [r7, #12]
 802cc98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802cc9a:	687b      	ldr	r3, [r7, #4]
 802cc9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802cc9e:	4619      	mov	r1, r3
 802cca0:	6878      	ldr	r0, [r7, #4]
 802cca2:	f7ff fb41 	bl	802c328 <HAL_UARTEx_RxEventCallback>
 802cca6:	e002      	b.n	802ccae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802cca8:	6878      	ldr	r0, [r7, #4]
 802ccaa:	f004 fc47 	bl	803153c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802ccae:	2300      	movs	r3, #0
 802ccb0:	e002      	b.n	802ccb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802ccb2:	2300      	movs	r3, #0
 802ccb4:	e000      	b.n	802ccb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802ccb6:	2302      	movs	r3, #2
  }
}
 802ccb8:	4618      	mov	r0, r3
 802ccba:	3730      	adds	r7, #48	@ 0x30
 802ccbc:	46bd      	mov	sp, r7
 802ccbe:	bd80      	pop	{r7, pc}

0802ccc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802ccc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802ccc4:	b0c0      	sub	sp, #256	@ 0x100
 802ccc6:	af00      	add	r7, sp, #0
 802ccc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802cccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802ccd0:	681b      	ldr	r3, [r3, #0]
 802ccd2:	691b      	ldr	r3, [r3, #16]
 802ccd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 802ccd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802ccdc:	68d9      	ldr	r1, [r3, #12]
 802ccde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cce2:	681a      	ldr	r2, [r3, #0]
 802cce4:	ea40 0301 	orr.w	r3, r0, r1
 802cce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802ccea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802ccee:	689a      	ldr	r2, [r3, #8]
 802ccf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802ccf4:	691b      	ldr	r3, [r3, #16]
 802ccf6:	431a      	orrs	r2, r3
 802ccf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802ccfc:	695b      	ldr	r3, [r3, #20]
 802ccfe:	431a      	orrs	r2, r3
 802cd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd04:	69db      	ldr	r3, [r3, #28]
 802cd06:	4313      	orrs	r3, r2
 802cd08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802cd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd10:	681b      	ldr	r3, [r3, #0]
 802cd12:	68db      	ldr	r3, [r3, #12]
 802cd14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 802cd18:	f021 010c 	bic.w	r1, r1, #12
 802cd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd20:	681a      	ldr	r2, [r3, #0]
 802cd22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802cd26:	430b      	orrs	r3, r1
 802cd28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802cd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd2e:	681b      	ldr	r3, [r3, #0]
 802cd30:	695b      	ldr	r3, [r3, #20]
 802cd32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 802cd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd3a:	6999      	ldr	r1, [r3, #24]
 802cd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd40:	681a      	ldr	r2, [r3, #0]
 802cd42:	ea40 0301 	orr.w	r3, r0, r1
 802cd46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802cd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd4c:	681a      	ldr	r2, [r3, #0]
 802cd4e:	4b8f      	ldr	r3, [pc, #572]	@ (802cf8c <UART_SetConfig+0x2cc>)
 802cd50:	429a      	cmp	r2, r3
 802cd52:	d005      	beq.n	802cd60 <UART_SetConfig+0xa0>
 802cd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd58:	681a      	ldr	r2, [r3, #0]
 802cd5a:	4b8d      	ldr	r3, [pc, #564]	@ (802cf90 <UART_SetConfig+0x2d0>)
 802cd5c:	429a      	cmp	r2, r3
 802cd5e:	d104      	bne.n	802cd6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802cd60:	f7fb ff9c 	bl	8028c9c <HAL_RCC_GetPCLK2Freq>
 802cd64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 802cd68:	e003      	b.n	802cd72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802cd6a:	f7fb ff83 	bl	8028c74 <HAL_RCC_GetPCLK1Freq>
 802cd6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802cd72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cd76:	69db      	ldr	r3, [r3, #28]
 802cd78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802cd7c:	f040 810c 	bne.w	802cf98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802cd80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802cd84:	2200      	movs	r2, #0
 802cd86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802cd8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 802cd8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 802cd92:	4622      	mov	r2, r4
 802cd94:	462b      	mov	r3, r5
 802cd96:	1891      	adds	r1, r2, r2
 802cd98:	65b9      	str	r1, [r7, #88]	@ 0x58
 802cd9a:	415b      	adcs	r3, r3
 802cd9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802cd9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802cda2:	4621      	mov	r1, r4
 802cda4:	eb12 0801 	adds.w	r8, r2, r1
 802cda8:	4629      	mov	r1, r5
 802cdaa:	eb43 0901 	adc.w	r9, r3, r1
 802cdae:	f04f 0200 	mov.w	r2, #0
 802cdb2:	f04f 0300 	mov.w	r3, #0
 802cdb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802cdba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802cdbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802cdc2:	4690      	mov	r8, r2
 802cdc4:	4699      	mov	r9, r3
 802cdc6:	4623      	mov	r3, r4
 802cdc8:	eb18 0303 	adds.w	r3, r8, r3
 802cdcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 802cdd0:	462b      	mov	r3, r5
 802cdd2:	eb49 0303 	adc.w	r3, r9, r3
 802cdd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 802cdda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cdde:	685b      	ldr	r3, [r3, #4]
 802cde0:	2200      	movs	r2, #0
 802cde2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 802cde6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 802cdea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 802cdee:	460b      	mov	r3, r1
 802cdf0:	18db      	adds	r3, r3, r3
 802cdf2:	653b      	str	r3, [r7, #80]	@ 0x50
 802cdf4:	4613      	mov	r3, r2
 802cdf6:	eb42 0303 	adc.w	r3, r2, r3
 802cdfa:	657b      	str	r3, [r7, #84]	@ 0x54
 802cdfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 802ce00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 802ce04:	f7f3 ff00 	bl	8020c08 <__aeabi_uldivmod>
 802ce08:	4602      	mov	r2, r0
 802ce0a:	460b      	mov	r3, r1
 802ce0c:	4b61      	ldr	r3, [pc, #388]	@ (802cf94 <UART_SetConfig+0x2d4>)
 802ce0e:	fba3 2302 	umull	r2, r3, r3, r2
 802ce12:	095b      	lsrs	r3, r3, #5
 802ce14:	011c      	lsls	r4, r3, #4
 802ce16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802ce1a:	2200      	movs	r2, #0
 802ce1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802ce20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 802ce24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 802ce28:	4642      	mov	r2, r8
 802ce2a:	464b      	mov	r3, r9
 802ce2c:	1891      	adds	r1, r2, r2
 802ce2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 802ce30:	415b      	adcs	r3, r3
 802ce32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802ce34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 802ce38:	4641      	mov	r1, r8
 802ce3a:	eb12 0a01 	adds.w	sl, r2, r1
 802ce3e:	4649      	mov	r1, r9
 802ce40:	eb43 0b01 	adc.w	fp, r3, r1
 802ce44:	f04f 0200 	mov.w	r2, #0
 802ce48:	f04f 0300 	mov.w	r3, #0
 802ce4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802ce50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802ce54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802ce58:	4692      	mov	sl, r2
 802ce5a:	469b      	mov	fp, r3
 802ce5c:	4643      	mov	r3, r8
 802ce5e:	eb1a 0303 	adds.w	r3, sl, r3
 802ce62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802ce66:	464b      	mov	r3, r9
 802ce68:	eb4b 0303 	adc.w	r3, fp, r3
 802ce6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802ce70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802ce74:	685b      	ldr	r3, [r3, #4]
 802ce76:	2200      	movs	r2, #0
 802ce78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802ce7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 802ce80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 802ce84:	460b      	mov	r3, r1
 802ce86:	18db      	adds	r3, r3, r3
 802ce88:	643b      	str	r3, [r7, #64]	@ 0x40
 802ce8a:	4613      	mov	r3, r2
 802ce8c:	eb42 0303 	adc.w	r3, r2, r3
 802ce90:	647b      	str	r3, [r7, #68]	@ 0x44
 802ce92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 802ce96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 802ce9a:	f7f3 feb5 	bl	8020c08 <__aeabi_uldivmod>
 802ce9e:	4602      	mov	r2, r0
 802cea0:	460b      	mov	r3, r1
 802cea2:	4611      	mov	r1, r2
 802cea4:	4b3b      	ldr	r3, [pc, #236]	@ (802cf94 <UART_SetConfig+0x2d4>)
 802cea6:	fba3 2301 	umull	r2, r3, r3, r1
 802ceaa:	095b      	lsrs	r3, r3, #5
 802ceac:	2264      	movs	r2, #100	@ 0x64
 802ceae:	fb02 f303 	mul.w	r3, r2, r3
 802ceb2:	1acb      	subs	r3, r1, r3
 802ceb4:	00db      	lsls	r3, r3, #3
 802ceb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 802ceba:	4b36      	ldr	r3, [pc, #216]	@ (802cf94 <UART_SetConfig+0x2d4>)
 802cebc:	fba3 2302 	umull	r2, r3, r3, r2
 802cec0:	095b      	lsrs	r3, r3, #5
 802cec2:	005b      	lsls	r3, r3, #1
 802cec4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 802cec8:	441c      	add	r4, r3
 802ceca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802cece:	2200      	movs	r2, #0
 802ced0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802ced4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 802ced8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 802cedc:	4642      	mov	r2, r8
 802cede:	464b      	mov	r3, r9
 802cee0:	1891      	adds	r1, r2, r2
 802cee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 802cee4:	415b      	adcs	r3, r3
 802cee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802cee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 802ceec:	4641      	mov	r1, r8
 802ceee:	1851      	adds	r1, r2, r1
 802cef0:	6339      	str	r1, [r7, #48]	@ 0x30
 802cef2:	4649      	mov	r1, r9
 802cef4:	414b      	adcs	r3, r1
 802cef6:	637b      	str	r3, [r7, #52]	@ 0x34
 802cef8:	f04f 0200 	mov.w	r2, #0
 802cefc:	f04f 0300 	mov.w	r3, #0
 802cf00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 802cf04:	4659      	mov	r1, fp
 802cf06:	00cb      	lsls	r3, r1, #3
 802cf08:	4651      	mov	r1, sl
 802cf0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cf0e:	4651      	mov	r1, sl
 802cf10:	00ca      	lsls	r2, r1, #3
 802cf12:	4610      	mov	r0, r2
 802cf14:	4619      	mov	r1, r3
 802cf16:	4603      	mov	r3, r0
 802cf18:	4642      	mov	r2, r8
 802cf1a:	189b      	adds	r3, r3, r2
 802cf1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802cf20:	464b      	mov	r3, r9
 802cf22:	460a      	mov	r2, r1
 802cf24:	eb42 0303 	adc.w	r3, r2, r3
 802cf28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802cf2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cf30:	685b      	ldr	r3, [r3, #4]
 802cf32:	2200      	movs	r2, #0
 802cf34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802cf38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 802cf3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802cf40:	460b      	mov	r3, r1
 802cf42:	18db      	adds	r3, r3, r3
 802cf44:	62bb      	str	r3, [r7, #40]	@ 0x28
 802cf46:	4613      	mov	r3, r2
 802cf48:	eb42 0303 	adc.w	r3, r2, r3
 802cf4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802cf4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802cf52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 802cf56:	f7f3 fe57 	bl	8020c08 <__aeabi_uldivmod>
 802cf5a:	4602      	mov	r2, r0
 802cf5c:	460b      	mov	r3, r1
 802cf5e:	4b0d      	ldr	r3, [pc, #52]	@ (802cf94 <UART_SetConfig+0x2d4>)
 802cf60:	fba3 1302 	umull	r1, r3, r3, r2
 802cf64:	095b      	lsrs	r3, r3, #5
 802cf66:	2164      	movs	r1, #100	@ 0x64
 802cf68:	fb01 f303 	mul.w	r3, r1, r3
 802cf6c:	1ad3      	subs	r3, r2, r3
 802cf6e:	00db      	lsls	r3, r3, #3
 802cf70:	3332      	adds	r3, #50	@ 0x32
 802cf72:	4a08      	ldr	r2, [pc, #32]	@ (802cf94 <UART_SetConfig+0x2d4>)
 802cf74:	fba2 2303 	umull	r2, r3, r2, r3
 802cf78:	095b      	lsrs	r3, r3, #5
 802cf7a:	f003 0207 	and.w	r2, r3, #7
 802cf7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cf82:	681b      	ldr	r3, [r3, #0]
 802cf84:	4422      	add	r2, r4
 802cf86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802cf88:	e106      	b.n	802d198 <UART_SetConfig+0x4d8>
 802cf8a:	bf00      	nop
 802cf8c:	40011000 	.word	0x40011000
 802cf90:	40011400 	.word	0x40011400
 802cf94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802cf98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802cf9c:	2200      	movs	r2, #0
 802cf9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802cfa2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 802cfa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 802cfaa:	4642      	mov	r2, r8
 802cfac:	464b      	mov	r3, r9
 802cfae:	1891      	adds	r1, r2, r2
 802cfb0:	6239      	str	r1, [r7, #32]
 802cfb2:	415b      	adcs	r3, r3
 802cfb4:	627b      	str	r3, [r7, #36]	@ 0x24
 802cfb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802cfba:	4641      	mov	r1, r8
 802cfbc:	1854      	adds	r4, r2, r1
 802cfbe:	4649      	mov	r1, r9
 802cfc0:	eb43 0501 	adc.w	r5, r3, r1
 802cfc4:	f04f 0200 	mov.w	r2, #0
 802cfc8:	f04f 0300 	mov.w	r3, #0
 802cfcc:	00eb      	lsls	r3, r5, #3
 802cfce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802cfd2:	00e2      	lsls	r2, r4, #3
 802cfd4:	4614      	mov	r4, r2
 802cfd6:	461d      	mov	r5, r3
 802cfd8:	4643      	mov	r3, r8
 802cfda:	18e3      	adds	r3, r4, r3
 802cfdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 802cfe0:	464b      	mov	r3, r9
 802cfe2:	eb45 0303 	adc.w	r3, r5, r3
 802cfe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802cfea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802cfee:	685b      	ldr	r3, [r3, #4]
 802cff0:	2200      	movs	r2, #0
 802cff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802cff6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 802cffa:	f04f 0200 	mov.w	r2, #0
 802cffe:	f04f 0300 	mov.w	r3, #0
 802d002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 802d006:	4629      	mov	r1, r5
 802d008:	008b      	lsls	r3, r1, #2
 802d00a:	4621      	mov	r1, r4
 802d00c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802d010:	4621      	mov	r1, r4
 802d012:	008a      	lsls	r2, r1, #2
 802d014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 802d018:	f7f3 fdf6 	bl	8020c08 <__aeabi_uldivmod>
 802d01c:	4602      	mov	r2, r0
 802d01e:	460b      	mov	r3, r1
 802d020:	4b60      	ldr	r3, [pc, #384]	@ (802d1a4 <UART_SetConfig+0x4e4>)
 802d022:	fba3 2302 	umull	r2, r3, r3, r2
 802d026:	095b      	lsrs	r3, r3, #5
 802d028:	011c      	lsls	r4, r3, #4
 802d02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802d02e:	2200      	movs	r2, #0
 802d030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 802d034:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 802d038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 802d03c:	4642      	mov	r2, r8
 802d03e:	464b      	mov	r3, r9
 802d040:	1891      	adds	r1, r2, r2
 802d042:	61b9      	str	r1, [r7, #24]
 802d044:	415b      	adcs	r3, r3
 802d046:	61fb      	str	r3, [r7, #28]
 802d048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802d04c:	4641      	mov	r1, r8
 802d04e:	1851      	adds	r1, r2, r1
 802d050:	6139      	str	r1, [r7, #16]
 802d052:	4649      	mov	r1, r9
 802d054:	414b      	adcs	r3, r1
 802d056:	617b      	str	r3, [r7, #20]
 802d058:	f04f 0200 	mov.w	r2, #0
 802d05c:	f04f 0300 	mov.w	r3, #0
 802d060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802d064:	4659      	mov	r1, fp
 802d066:	00cb      	lsls	r3, r1, #3
 802d068:	4651      	mov	r1, sl
 802d06a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802d06e:	4651      	mov	r1, sl
 802d070:	00ca      	lsls	r2, r1, #3
 802d072:	4610      	mov	r0, r2
 802d074:	4619      	mov	r1, r3
 802d076:	4603      	mov	r3, r0
 802d078:	4642      	mov	r2, r8
 802d07a:	189b      	adds	r3, r3, r2
 802d07c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802d080:	464b      	mov	r3, r9
 802d082:	460a      	mov	r2, r1
 802d084:	eb42 0303 	adc.w	r3, r2, r3
 802d088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802d08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802d090:	685b      	ldr	r3, [r3, #4]
 802d092:	2200      	movs	r2, #0
 802d094:	67bb      	str	r3, [r7, #120]	@ 0x78
 802d096:	67fa      	str	r2, [r7, #124]	@ 0x7c
 802d098:	f04f 0200 	mov.w	r2, #0
 802d09c:	f04f 0300 	mov.w	r3, #0
 802d0a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 802d0a4:	4649      	mov	r1, r9
 802d0a6:	008b      	lsls	r3, r1, #2
 802d0a8:	4641      	mov	r1, r8
 802d0aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802d0ae:	4641      	mov	r1, r8
 802d0b0:	008a      	lsls	r2, r1, #2
 802d0b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802d0b6:	f7f3 fda7 	bl	8020c08 <__aeabi_uldivmod>
 802d0ba:	4602      	mov	r2, r0
 802d0bc:	460b      	mov	r3, r1
 802d0be:	4611      	mov	r1, r2
 802d0c0:	4b38      	ldr	r3, [pc, #224]	@ (802d1a4 <UART_SetConfig+0x4e4>)
 802d0c2:	fba3 2301 	umull	r2, r3, r3, r1
 802d0c6:	095b      	lsrs	r3, r3, #5
 802d0c8:	2264      	movs	r2, #100	@ 0x64
 802d0ca:	fb02 f303 	mul.w	r3, r2, r3
 802d0ce:	1acb      	subs	r3, r1, r3
 802d0d0:	011b      	lsls	r3, r3, #4
 802d0d2:	3332      	adds	r3, #50	@ 0x32
 802d0d4:	4a33      	ldr	r2, [pc, #204]	@ (802d1a4 <UART_SetConfig+0x4e4>)
 802d0d6:	fba2 2303 	umull	r2, r3, r2, r3
 802d0da:	095b      	lsrs	r3, r3, #5
 802d0dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802d0e0:	441c      	add	r4, r3
 802d0e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802d0e6:	2200      	movs	r2, #0
 802d0e8:	673b      	str	r3, [r7, #112]	@ 0x70
 802d0ea:	677a      	str	r2, [r7, #116]	@ 0x74
 802d0ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 802d0f0:	4642      	mov	r2, r8
 802d0f2:	464b      	mov	r3, r9
 802d0f4:	1891      	adds	r1, r2, r2
 802d0f6:	60b9      	str	r1, [r7, #8]
 802d0f8:	415b      	adcs	r3, r3
 802d0fa:	60fb      	str	r3, [r7, #12]
 802d0fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802d100:	4641      	mov	r1, r8
 802d102:	1851      	adds	r1, r2, r1
 802d104:	6039      	str	r1, [r7, #0]
 802d106:	4649      	mov	r1, r9
 802d108:	414b      	adcs	r3, r1
 802d10a:	607b      	str	r3, [r7, #4]
 802d10c:	f04f 0200 	mov.w	r2, #0
 802d110:	f04f 0300 	mov.w	r3, #0
 802d114:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802d118:	4659      	mov	r1, fp
 802d11a:	00cb      	lsls	r3, r1, #3
 802d11c:	4651      	mov	r1, sl
 802d11e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802d122:	4651      	mov	r1, sl
 802d124:	00ca      	lsls	r2, r1, #3
 802d126:	4610      	mov	r0, r2
 802d128:	4619      	mov	r1, r3
 802d12a:	4603      	mov	r3, r0
 802d12c:	4642      	mov	r2, r8
 802d12e:	189b      	adds	r3, r3, r2
 802d130:	66bb      	str	r3, [r7, #104]	@ 0x68
 802d132:	464b      	mov	r3, r9
 802d134:	460a      	mov	r2, r1
 802d136:	eb42 0303 	adc.w	r3, r2, r3
 802d13a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802d13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802d140:	685b      	ldr	r3, [r3, #4]
 802d142:	2200      	movs	r2, #0
 802d144:	663b      	str	r3, [r7, #96]	@ 0x60
 802d146:	667a      	str	r2, [r7, #100]	@ 0x64
 802d148:	f04f 0200 	mov.w	r2, #0
 802d14c:	f04f 0300 	mov.w	r3, #0
 802d150:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 802d154:	4649      	mov	r1, r9
 802d156:	008b      	lsls	r3, r1, #2
 802d158:	4641      	mov	r1, r8
 802d15a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802d15e:	4641      	mov	r1, r8
 802d160:	008a      	lsls	r2, r1, #2
 802d162:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 802d166:	f7f3 fd4f 	bl	8020c08 <__aeabi_uldivmod>
 802d16a:	4602      	mov	r2, r0
 802d16c:	460b      	mov	r3, r1
 802d16e:	4b0d      	ldr	r3, [pc, #52]	@ (802d1a4 <UART_SetConfig+0x4e4>)
 802d170:	fba3 1302 	umull	r1, r3, r3, r2
 802d174:	095b      	lsrs	r3, r3, #5
 802d176:	2164      	movs	r1, #100	@ 0x64
 802d178:	fb01 f303 	mul.w	r3, r1, r3
 802d17c:	1ad3      	subs	r3, r2, r3
 802d17e:	011b      	lsls	r3, r3, #4
 802d180:	3332      	adds	r3, #50	@ 0x32
 802d182:	4a08      	ldr	r2, [pc, #32]	@ (802d1a4 <UART_SetConfig+0x4e4>)
 802d184:	fba2 2303 	umull	r2, r3, r2, r3
 802d188:	095b      	lsrs	r3, r3, #5
 802d18a:	f003 020f 	and.w	r2, r3, #15
 802d18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802d192:	681b      	ldr	r3, [r3, #0]
 802d194:	4422      	add	r2, r4
 802d196:	609a      	str	r2, [r3, #8]
}
 802d198:	bf00      	nop
 802d19a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 802d19e:	46bd      	mov	sp, r7
 802d1a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d1a4:	51eb851f 	.word	0x51eb851f

0802d1a8 <gos_libGetBuildDate>:
/**
 * TODO
 * @return
 */
void_t gos_libGetBuildDate (gos_year_t* pYear, gos_month_t* pMonth, gos_day_t* pDay)
{
 802d1a8:	b580      	push	{r7, lr}
 802d1aa:	b084      	sub	sp, #16
 802d1ac:	af00      	add	r7, sp, #0
 802d1ae:	60f8      	str	r0, [r7, #12]
 802d1b0:	60b9      	str	r1, [r7, #8]
 802d1b2:	607a      	str	r2, [r7, #4]
	/*
	 * Function code.
	 */
	*pYear = (gos_year_t)atoi(year_str);
 802d1b4:	480c      	ldr	r0, [pc, #48]	@ (802d1e8 <gos_libGetBuildDate+0x40>)
 802d1b6:	f00e f95f 	bl	803b478 <atoi>
 802d1ba:	4603      	mov	r3, r0
 802d1bc:	b29a      	uxth	r2, r3
 802d1be:	68fb      	ldr	r3, [r7, #12]
 802d1c0:	801a      	strh	r2, [r3, #0]
	*pMonth = (gos_month_t)atoi(month_str);
 802d1c2:	480a      	ldr	r0, [pc, #40]	@ (802d1ec <gos_libGetBuildDate+0x44>)
 802d1c4:	f00e f958 	bl	803b478 <atoi>
 802d1c8:	4603      	mov	r3, r0
 802d1ca:	b2da      	uxtb	r2, r3
 802d1cc:	68bb      	ldr	r3, [r7, #8]
 802d1ce:	701a      	strb	r2, [r3, #0]
	*pDay = (gos_day_t)atoi(day_str);
 802d1d0:	4807      	ldr	r0, [pc, #28]	@ (802d1f0 <gos_libGetBuildDate+0x48>)
 802d1d2:	f00e f951 	bl	803b478 <atoi>
 802d1d6:	4603      	mov	r3, r0
 802d1d8:	b29a      	uxth	r2, r3
 802d1da:	687b      	ldr	r3, [r7, #4]
 802d1dc:	801a      	strh	r2, [r3, #0]
}
 802d1de:	bf00      	nop
 802d1e0:	3710      	adds	r7, #16
 802d1e2:	46bd      	mov	sp, r7
 802d1e4:	bd80      	pop	{r7, pc}
 802d1e6:	bf00      	nop
 802d1e8:	200015a8 	.word	0x200015a8
 802d1ec:	200015b0 	.word	0x200015b0
 802d1f0:	200015b4 	.word	0x200015b4

0802d1f4 <drv_25lc256Init>:

/*
 * Function: drv_25lc256Init
 */
gos_result_t drv_25lc256Init (void_t* pDevice)
{
 802d1f4:	b580      	push	{r7, lr}
 802d1f6:	b084      	sub	sp, #16
 802d1f8:	af00      	add	r7, sp, #0
 802d1fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 802d1fc:	2355      	movs	r3, #85	@ 0x55
 802d1fe:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 802d200:	2300      	movs	r3, #0
 802d202:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC256_DEVICE_NULL);
 802d204:	687b      	ldr	r3, [r7, #4]
 802d206:	2b00      	cmp	r3, #0
 802d208:	d103      	bne.n	802d212 <drv_25lc256Init+0x1e>
 802d20a:	68bb      	ldr	r3, [r7, #8]
 802d20c:	f043 0301 	orr.w	r3, r3, #1
 802d210:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc256Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc256Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC256_MUTEX_INIT);
 802d212:	687b      	ldr	r3, [r7, #4]
 802d214:	699b      	ldr	r3, [r3, #24]
 802d216:	2b00      	cmp	r3, #0
 802d218:	d10d      	bne.n	802d236 <drv_25lc256Init+0x42>
 802d21a:	687b      	ldr	r3, [r7, #4]
 802d21c:	3302      	adds	r3, #2
 802d21e:	4618      	mov	r0, r3
 802d220:	f00b f9fc 	bl	803861c <gos_mutexInit>
 802d224:	4603      	mov	r3, r0
 802d226:	2b55      	cmp	r3, #85	@ 0x55
 802d228:	d005      	beq.n	802d236 <drv_25lc256Init+0x42>
 802d22a:	687b      	ldr	r3, [r7, #4]
 802d22c:	699b      	ldr	r3, [r3, #24]
 802d22e:	f043 0208 	orr.w	r2, r3, #8
 802d232:	687b      	ldr	r3, [r7, #4]
 802d234:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 802d236:	68bb      	ldr	r3, [r7, #8]
 802d238:	2b00      	cmp	r3, #0
 802d23a:	d102      	bne.n	802d242 <drv_25lc256Init+0x4e>
 802d23c:	2355      	movs	r3, #85	@ 0x55
 802d23e:	73fb      	strb	r3, [r7, #15]
 802d240:	e001      	b.n	802d246 <drv_25lc256Init+0x52>
 802d242:	23ae      	movs	r3, #174	@ 0xae
 802d244:	73fb      	strb	r3, [r7, #15]

    return initResult;
 802d246:	7bfb      	ldrb	r3, [r7, #15]
}
 802d248:	4618      	mov	r0, r3
 802d24a:	3710      	adds	r7, #16
 802d24c:	46bd      	mov	sp, r7
 802d24e:	bd80      	pop	{r7, pc}

0802d250 <drv_25lc256Read>:

/*
 * Function: drv_25lc256Read
 */
GOS_INLINE gos_result_t drv_25lc256Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 802d250:	b590      	push	{r4, r7, lr}
 802d252:	b08f      	sub	sp, #60	@ 0x3c
 802d254:	af02      	add	r7, sp, #8
 802d256:	60f8      	str	r0, [r7, #12]
 802d258:	607a      	str	r2, [r7, #4]
 802d25a:	461a      	mov	r2, r3
 802d25c:	460b      	mov	r3, r1
 802d25e:	817b      	strh	r3, [r7, #10]
 802d260:	4613      	mov	r3, r2
 802d262:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 802d264:	2355      	movs	r3, #85	@ 0x55
 802d266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage     = 0u;
 802d26a:	2300      	movs	r3, #0
 802d26c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage       = 0u;
 802d26e:	2300      	movs	r3, #0
 802d270:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 802d272:	2300      	movs	r3, #0
 802d274:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 802d276:	2300      	movs	r3, #0
 802d278:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos           = 0u;
 802d27a:	2300      	movs	r3, #0
 802d27c:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset        = 0u;
 802d27e:	2300      	movs	r3, #0
 802d280:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress    = 0u;
 802d282:	2300      	movs	r3, #0
 802d284:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 802d286:	2300      	movs	r3, #0
 802d288:	833b      	strh	r3, [r7, #24]
    int32_t      paddrposition = 0;
 802d28a:	2300      	movs	r3, #0
 802d28c:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 802d28e:	2300      	movs	r3, #0
 802d290:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC256_DEVICE_NULL);
 802d292:	68fb      	ldr	r3, [r7, #12]
 802d294:	2b00      	cmp	r3, #0
 802d296:	d103      	bne.n	802d2a0 <drv_25lc256Read+0x50>
 802d298:	6a3b      	ldr	r3, [r7, #32]
 802d29a:	f043 0301 	orr.w	r3, r3, #1
 802d29e:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC256_TARGET_NULL);
 802d2a0:	687b      	ldr	r3, [r7, #4]
 802d2a2:	2b00      	cmp	r3, #0
 802d2a4:	d103      	bne.n	802d2ae <drv_25lc256Read+0x5e>
 802d2a6:	6a3b      	ldr	r3, [r7, #32]
 802d2a8:	f043 0302 	orr.w	r3, r3, #2
 802d2ac:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 802d2ae:	6a3b      	ldr	r3, [r7, #32]
 802d2b0:	2b00      	cmp	r3, #0
 802d2b2:	f040 80ce 	bne.w	802d452 <drv_25lc256Read+0x202>
 802d2b6:	897a      	ldrh	r2, [r7, #10]
 802d2b8:	893b      	ldrh	r3, [r7, #8]
 802d2ba:	4413      	add	r3, r2
 802d2bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802d2c0:	f080 80c7 	bcs.w	802d452 <drv_25lc256Read+0x202>
    {
        DRV_ERROR_CHK_SET(
 802d2c4:	6a3b      	ldr	r3, [r7, #32]
 802d2c6:	2b00      	cmp	r3, #0
 802d2c8:	d10e      	bne.n	802d2e8 <drv_25lc256Read+0x98>
 802d2ca:	68fb      	ldr	r3, [r7, #12]
 802d2cc:	1c9a      	adds	r2, r3, #2
 802d2ce:	68fb      	ldr	r3, [r7, #12]
 802d2d0:	689b      	ldr	r3, [r3, #8]
 802d2d2:	4619      	mov	r1, r3
 802d2d4:	4610      	mov	r0, r2
 802d2d6:	f00b f9bb 	bl	8038650 <gos_mutexLock>
 802d2da:	4603      	mov	r3, r0
 802d2dc:	2b55      	cmp	r3, #85	@ 0x55
 802d2de:	d003      	beq.n	802d2e8 <drv_25lc256Read+0x98>
 802d2e0:	6a3b      	ldr	r3, [r7, #32]
 802d2e2:	f043 0310 	orr.w	r3, r3, #16
 802d2e6:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc256Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc256Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC256_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d2e8:	6a3b      	ldr	r3, [r7, #32]
 802d2ea:	2b00      	cmp	r3, #0
 802d2ec:	d103      	bne.n	802d2f6 <drv_25lc256Read+0xa6>
 802d2ee:	2355      	movs	r3, #85	@ 0x55
 802d2f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d2f4:	e002      	b.n	802d2fc <drv_25lc256Read+0xac>
 802d2f6:	23ae      	movs	r3, #174	@ 0xae
 802d2f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 802d2fc:	2306      	movs	r3, #6
 802d2fe:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 802d300:	897b      	ldrh	r3, [r7, #10]
 802d302:	099b      	lsrs	r3, r3, #6
 802d304:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 802d306:	893a      	ldrh	r2, [r7, #8]
 802d308:	897b      	ldrh	r3, [r7, #10]
 802d30a:	4413      	add	r3, r2
 802d30c:	099b      	lsrs	r3, r3, #6
 802d30e:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 802d310:	8bfa      	ldrh	r2, [r7, #30]
 802d312:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d314:	1ad3      	subs	r3, r2, r3
 802d316:	b29b      	uxth	r3, r3
 802d318:	3301      	adds	r3, #1
 802d31a:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 802d31c:	2300      	movs	r3, #0
 802d31e:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 802d320:	897b      	ldrh	r3, [r7, #10]
 802d322:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802d326:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 802d328:	2300      	movs	r3, #0
 802d32a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802d32c:	e083      	b.n	802d436 <drv_25lc256Read+0x1e6>
        {
            memAddress = startPage << paddrposition | offset;
 802d32e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 802d330:	697b      	ldr	r3, [r7, #20]
 802d332:	fa02 f303 	lsl.w	r3, r2, r3
 802d336:	b21a      	sxth	r2, r3
 802d338:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 802d33c:	4313      	orrs	r3, r2
 802d33e:	b21b      	sxth	r3, r3
 802d340:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 802d342:	893a      	ldrh	r2, [r7, #8]
 802d344:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802d346:	4413      	add	r3, r2
 802d348:	2b3f      	cmp	r3, #63	@ 0x3f
 802d34a:	d904      	bls.n	802d356 <drv_25lc256Read+0x106>
 802d34c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802d34e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 802d352:	b29b      	uxth	r3, r3
 802d354:	e000      	b.n	802d358 <drv_25lc256Read+0x108>
 802d356:	893b      	ldrh	r3, [r7, #8]
 802d358:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 802d35a:	4b49      	ldr	r3, [pc, #292]	@ (802d480 <drv_25lc256Read+0x230>)
 802d35c:	2203      	movs	r2, #3
 802d35e:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 802d360:	8b7b      	ldrh	r3, [r7, #26]
 802d362:	0a1b      	lsrs	r3, r3, #8
 802d364:	b29b      	uxth	r3, r3
 802d366:	b2da      	uxtb	r2, r3
 802d368:	4b45      	ldr	r3, [pc, #276]	@ (802d480 <drv_25lc256Read+0x230>)
 802d36a:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 802d36c:	8b7b      	ldrh	r3, [r7, #26]
 802d36e:	b2da      	uxtb	r2, r3
 802d370:	4b43      	ldr	r3, [pc, #268]	@ (802d480 <drv_25lc256Read+0x230>)
 802d372:	709a      	strb	r2, [r3, #2]

            (void_t) drv_gpioWritePin(((drv_25lc256Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 802d374:	68fb      	ldr	r3, [r7, #12]
 802d376:	785b      	ldrb	r3, [r3, #1]
 802d378:	2100      	movs	r1, #0
 802d37a:	4618      	mov	r0, r3
 802d37c:	f001 fd2c 	bl	802edd8 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 802d380:	6a3b      	ldr	r3, [r7, #32]
 802d382:	2b00      	cmp	r3, #0
 802d384:	d112      	bne.n	802d3ac <drv_25lc256Read+0x15c>
 802d386:	68fb      	ldr	r3, [r7, #12]
 802d388:	7818      	ldrb	r0, [r3, #0]
 802d38a:	68fb      	ldr	r3, [r7, #12]
 802d38c:	689a      	ldr	r2, [r3, #8]
 802d38e:	68fb      	ldr	r3, [r7, #12]
 802d390:	68db      	ldr	r3, [r3, #12]
 802d392:	9300      	str	r3, [sp, #0]
 802d394:	4613      	mov	r3, r2
 802d396:	2203      	movs	r2, #3
 802d398:	4939      	ldr	r1, [pc, #228]	@ (802d480 <drv_25lc256Read+0x230>)
 802d39a:	f002 fcaf 	bl	802fcfc <drv_spiTransmitIT>
 802d39e:	4603      	mov	r3, r0
 802d3a0:	2b55      	cmp	r3, #85	@ 0x55
 802d3a2:	d003      	beq.n	802d3ac <drv_25lc256Read+0x15c>
 802d3a4:	6a3b      	ldr	r3, [r7, #32]
 802d3a6:	f043 0320 	orr.w	r3, r3, #32
 802d3aa:	623b      	str	r3, [r7, #32]
        					((drv_25lc256Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC256_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d3ac:	6a3b      	ldr	r3, [r7, #32]
 802d3ae:	2b00      	cmp	r3, #0
 802d3b0:	d103      	bne.n	802d3ba <drv_25lc256Read+0x16a>
 802d3b2:	2355      	movs	r3, #85	@ 0x55
 802d3b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d3b8:	e002      	b.n	802d3c0 <drv_25lc256Read+0x170>
 802d3ba:	23ae      	movs	r3, #174	@ 0xae
 802d3bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            DRV_ERROR_CHK_SET(
 802d3c0:	6a3b      	ldr	r3, [r7, #32]
 802d3c2:	2b00      	cmp	r3, #0
 802d3c4:	d114      	bne.n	802d3f0 <drv_25lc256Read+0x1a0>
 802d3c6:	68fb      	ldr	r3, [r7, #12]
 802d3c8:	7818      	ldrb	r0, [r3, #0]
 802d3ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 802d3cc:	687a      	ldr	r2, [r7, #4]
 802d3ce:	18d1      	adds	r1, r2, r3
 802d3d0:	68fb      	ldr	r3, [r7, #12]
 802d3d2:	689c      	ldr	r4, [r3, #8]
 802d3d4:	68fb      	ldr	r3, [r7, #12]
 802d3d6:	68db      	ldr	r3, [r3, #12]
 802d3d8:	8b3a      	ldrh	r2, [r7, #24]
 802d3da:	9300      	str	r3, [sp, #0]
 802d3dc:	4623      	mov	r3, r4
 802d3de:	f002 fcf1 	bl	802fdc4 <drv_spiReceiveIT>
 802d3e2:	4603      	mov	r3, r0
 802d3e4:	2b55      	cmp	r3, #85	@ 0x55
 802d3e6:	d003      	beq.n	802d3f0 <drv_25lc256Read+0x1a0>
 802d3e8:	6a3b      	ldr	r3, [r7, #32]
 802d3ea:	f043 0320 	orr.w	r3, r3, #32
 802d3ee:	623b      	str	r3, [r7, #32]
        					((drv_25lc256Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC256_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d3f0:	6a3b      	ldr	r3, [r7, #32]
 802d3f2:	2b00      	cmp	r3, #0
 802d3f4:	d103      	bne.n	802d3fe <drv_25lc256Read+0x1ae>
 802d3f6:	2355      	movs	r3, #85	@ 0x55
 802d3f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d3fc:	e002      	b.n	802d404 <drv_25lc256Read+0x1b4>
 802d3fe:	23ae      	movs	r3, #174	@ 0xae
 802d400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc256Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 802d404:	68fb      	ldr	r3, [r7, #12]
 802d406:	785b      	ldrb	r3, [r3, #1]
 802d408:	2101      	movs	r1, #1
 802d40a:	4618      	mov	r0, r3
 802d40c:	f001 fce4 	bl	802edd8 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 802d410:	200a      	movs	r0, #10
 802d412:	f008 fce5 	bl	8035de0 <gos_taskSleep>

            startPage += 1;
 802d416:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d418:	3301      	adds	r3, #1
 802d41a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 802d41c:	2300      	movs	r3, #0
 802d41e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 802d420:	893a      	ldrh	r2, [r7, #8]
 802d422:	8b3b      	ldrh	r3, [r7, #24]
 802d424:	1ad3      	subs	r3, r2, r3
 802d426:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 802d428:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 802d42a:	8b3b      	ldrh	r3, [r7, #24]
 802d42c:	4413      	add	r3, r2
 802d42e:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 802d430:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 802d432:	3301      	adds	r3, #1
 802d434:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802d436:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 802d438:	8bbb      	ldrh	r3, [r7, #28]
 802d43a:	429a      	cmp	r2, r3
 802d43c:	d204      	bcs.n	802d448 <drv_25lc256Read+0x1f8>
 802d43e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802d442:	2b55      	cmp	r3, #85	@ 0x55
 802d444:	f43f af73 	beq.w	802d32e <drv_25lc256Read+0xde>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc256Descriptor_t*)pDevice)->deviceMutex);
 802d448:	68fb      	ldr	r3, [r7, #12]
 802d44a:	3302      	adds	r3, #2
 802d44c:	4618      	mov	r0, r3
 802d44e:	f00b fa05 	bl	803885c <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc256Descriptor_t*)pDevice)->errorFlags, errorFlags);
 802d452:	68fb      	ldr	r3, [r7, #12]
 802d454:	699a      	ldr	r2, [r3, #24]
 802d456:	6a3b      	ldr	r3, [r7, #32]
 802d458:	431a      	orrs	r2, r3
 802d45a:	68fb      	ldr	r3, [r7, #12]
 802d45c:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d45e:	6a3b      	ldr	r3, [r7, #32]
 802d460:	2b00      	cmp	r3, #0
 802d462:	d103      	bne.n	802d46c <drv_25lc256Read+0x21c>
 802d464:	2355      	movs	r3, #85	@ 0x55
 802d466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d46a:	e002      	b.n	802d472 <drv_25lc256Read+0x222>
 802d46c:	23ae      	movs	r3, #174	@ 0xae
 802d46e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return readResult;
 802d472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 802d476:	4618      	mov	r0, r3
 802d478:	3734      	adds	r7, #52	@ 0x34
 802d47a:	46bd      	mov	sp, r7
 802d47c:	bd90      	pop	{r4, r7, pc}
 802d47e:	bf00      	nop
 802d480:	20007118 	.word	0x20007118

0802d484 <drv_25lc256Write>:

/*
 * Function: drv_25lc256Write
 */
GOS_INLINE gos_result_t drv_25lc256Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 802d484:	b580      	push	{r7, lr}
 802d486:	b08e      	sub	sp, #56	@ 0x38
 802d488:	af02      	add	r7, sp, #8
 802d48a:	60f8      	str	r0, [r7, #12]
 802d48c:	607a      	str	r2, [r7, #4]
 802d48e:	461a      	mov	r2, r3
 802d490:	460b      	mov	r3, r1
 802d492:	817b      	strh	r3, [r7, #10]
 802d494:	4613      	mov	r3, r2
 802d496:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 802d498:	2355      	movs	r3, #85	@ 0x55
 802d49a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage       = 0u;
 802d49e:	2300      	movs	r3, #0
 802d4a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage         = 0u;
 802d4a2:	2300      	movs	r3, #0
 802d4a4:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages      = 0u;
 802d4a6:	2300      	movs	r3, #0
 802d4a8:	83bb      	strh	r3, [r7, #28]
    u16_t        idx             = 0u;
 802d4aa:	2300      	movs	r3, #0
 802d4ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos             = 0u;
 802d4ae:	2300      	movs	r3, #0
 802d4b0:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset          = 0u;
 802d4b2:	2300      	movs	r3, #0
 802d4b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress      = 0u;
 802d4b6:	2300      	movs	r3, #0
 802d4b8:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem        = 0u;
 802d4ba:	2300      	movs	r3, #0
 802d4bc:	833b      	strh	r3, [r7, #24]
    int32_t      paddrposition   = 0;
 802d4be:	2300      	movs	r3, #0
 802d4c0:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags      = 0u;
 802d4c2:	2300      	movs	r3, #0
 802d4c4:	623b      	str	r3, [r7, #32]
    u8_t         wrenInstruction = 0x06;
 802d4c6:	2306      	movs	r3, #6
 802d4c8:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC256_DEVICE_NULL);
 802d4ca:	68fb      	ldr	r3, [r7, #12]
 802d4cc:	2b00      	cmp	r3, #0
 802d4ce:	d103      	bne.n	802d4d8 <drv_25lc256Write+0x54>
 802d4d0:	6a3b      	ldr	r3, [r7, #32]
 802d4d2:	f043 0301 	orr.w	r3, r3, #1
 802d4d6:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC256_DATA_NULL);
 802d4d8:	687b      	ldr	r3, [r7, #4]
 802d4da:	2b00      	cmp	r3, #0
 802d4dc:	d103      	bne.n	802d4e6 <drv_25lc256Write+0x62>
 802d4de:	6a3b      	ldr	r3, [r7, #32]
 802d4e0:	f043 0304 	orr.w	r3, r3, #4
 802d4e4:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 802d4e6:	6a3b      	ldr	r3, [r7, #32]
 802d4e8:	2b00      	cmp	r3, #0
 802d4ea:	f040 80e3 	bne.w	802d6b4 <drv_25lc256Write+0x230>
 802d4ee:	897a      	ldrh	r2, [r7, #10]
 802d4f0:	893b      	ldrh	r3, [r7, #8]
 802d4f2:	4413      	add	r3, r2
 802d4f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802d4f8:	f080 80dc 	bcs.w	802d6b4 <drv_25lc256Write+0x230>
    {
        DRV_ERROR_CHK_SET(
 802d4fc:	6a3b      	ldr	r3, [r7, #32]
 802d4fe:	2b00      	cmp	r3, #0
 802d500:	d10e      	bne.n	802d520 <drv_25lc256Write+0x9c>
 802d502:	68fb      	ldr	r3, [r7, #12]
 802d504:	1c9a      	adds	r2, r3, #2
 802d506:	68fb      	ldr	r3, [r7, #12]
 802d508:	691b      	ldr	r3, [r3, #16]
 802d50a:	4619      	mov	r1, r3
 802d50c:	4610      	mov	r0, r2
 802d50e:	f00b f89f 	bl	8038650 <gos_mutexLock>
 802d512:	4603      	mov	r3, r0
 802d514:	2b55      	cmp	r3, #85	@ 0x55
 802d516:	d003      	beq.n	802d520 <drv_25lc256Write+0x9c>
 802d518:	6a3b      	ldr	r3, [r7, #32]
 802d51a:	f043 0310 	orr.w	r3, r3, #16
 802d51e:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc256Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc256Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC256_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802d520:	6a3b      	ldr	r3, [r7, #32]
 802d522:	2b00      	cmp	r3, #0
 802d524:	d103      	bne.n	802d52e <drv_25lc256Write+0xaa>
 802d526:	2355      	movs	r3, #85	@ 0x55
 802d528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d52c:	e002      	b.n	802d534 <drv_25lc256Write+0xb0>
 802d52e:	23ae      	movs	r3, #174	@ 0xae
 802d530:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 802d534:	2306      	movs	r3, #6
 802d536:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 802d538:	897b      	ldrh	r3, [r7, #10]
 802d53a:	099b      	lsrs	r3, r3, #6
 802d53c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 802d53e:	893a      	ldrh	r2, [r7, #8]
 802d540:	897b      	ldrh	r3, [r7, #10]
 802d542:	4413      	add	r3, r2
 802d544:	099b      	lsrs	r3, r3, #6
 802d546:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 802d548:	8bfa      	ldrh	r2, [r7, #30]
 802d54a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d54c:	1ad3      	subs	r3, r2, r3
 802d54e:	b29b      	uxth	r3, r3
 802d550:	3301      	adds	r3, #1
 802d552:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 802d554:	2300      	movs	r3, #0
 802d556:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 802d558:	897b      	ldrh	r3, [r7, #10]
 802d55a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802d55e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 802d560:	2300      	movs	r3, #0
 802d562:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802d564:	e098      	b.n	802d698 <drv_25lc256Write+0x214>
        {
            memAddress = startPage << paddrposition | offset;
 802d566:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 802d568:	697b      	ldr	r3, [r7, #20]
 802d56a:	fa02 f303 	lsl.w	r3, r2, r3
 802d56e:	b21a      	sxth	r2, r3
 802d570:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 802d574:	4313      	orrs	r3, r2
 802d576:	b21b      	sxth	r3, r3
 802d578:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 802d57a:	893a      	ldrh	r2, [r7, #8]
 802d57c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802d57e:	4413      	add	r3, r2
 802d580:	2b3f      	cmp	r3, #63	@ 0x3f
 802d582:	d904      	bls.n	802d58e <drv_25lc256Write+0x10a>
 802d584:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802d586:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 802d58a:	b29b      	uxth	r3, r3
 802d58c:	e000      	b.n	802d590 <drv_25lc256Write+0x10c>
 802d58e:	893b      	ldrh	r3, [r7, #8]
 802d590:	833b      	strh	r3, [r7, #24]

            txBuffer[0] = 0x02;
 802d592:	4b53      	ldr	r3, [pc, #332]	@ (802d6e0 <drv_25lc256Write+0x25c>)
 802d594:	2202      	movs	r2, #2
 802d596:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (memAddress >> 8);
 802d598:	8b7b      	ldrh	r3, [r7, #26]
 802d59a:	0a1b      	lsrs	r3, r3, #8
 802d59c:	b29b      	uxth	r3, r3
 802d59e:	b2da      	uxtb	r2, r3
 802d5a0:	4b4f      	ldr	r3, [pc, #316]	@ (802d6e0 <drv_25lc256Write+0x25c>)
 802d5a2:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = memAddress & 0xFF;
 802d5a4:	8b7b      	ldrh	r3, [r7, #26]
 802d5a6:	b2da      	uxtb	r2, r3
 802d5a8:	4b4d      	ldr	r3, [pc, #308]	@ (802d6e0 <drv_25lc256Write+0x25c>)
 802d5aa:	709a      	strb	r2, [r3, #2]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 802d5ac:	484d      	ldr	r0, [pc, #308]	@ (802d6e4 <drv_25lc256Write+0x260>)
 802d5ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 802d5b0:	687a      	ldr	r2, [r7, #4]
 802d5b2:	4413      	add	r3, r2
 802d5b4:	8b3a      	ldrh	r2, [r7, #24]
 802d5b6:	4619      	mov	r1, r3
 802d5b8:	f00e fe0b 	bl	803c1d2 <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc256Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 802d5bc:	68fb      	ldr	r3, [r7, #12]
 802d5be:	785b      	ldrb	r3, [r3, #1]
 802d5c0:	2100      	movs	r1, #0
 802d5c2:	4618      	mov	r0, r3
 802d5c4:	f001 fc08 	bl	802edd8 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 802d5c8:	6a3b      	ldr	r3, [r7, #32]
 802d5ca:	2b00      	cmp	r3, #0
 802d5cc:	d113      	bne.n	802d5f6 <drv_25lc256Write+0x172>
 802d5ce:	68fb      	ldr	r3, [r7, #12]
 802d5d0:	7818      	ldrb	r0, [r3, #0]
 802d5d2:	68fb      	ldr	r3, [r7, #12]
 802d5d4:	689a      	ldr	r2, [r3, #8]
 802d5d6:	68fb      	ldr	r3, [r7, #12]
 802d5d8:	68db      	ldr	r3, [r3, #12]
 802d5da:	f107 0113 	add.w	r1, r7, #19
 802d5de:	9300      	str	r3, [sp, #0]
 802d5e0:	4613      	mov	r3, r2
 802d5e2:	2201      	movs	r2, #1
 802d5e4:	f002 fb8a 	bl	802fcfc <drv_spiTransmitIT>
 802d5e8:	4603      	mov	r3, r0
 802d5ea:	2b55      	cmp	r3, #85	@ 0x55
 802d5ec:	d003      	beq.n	802d5f6 <drv_25lc256Write+0x172>
 802d5ee:	6a3b      	ldr	r3, [r7, #32]
 802d5f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d5f4:	623b      	str	r3, [r7, #32]
        					((drv_25lc256Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC256_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802d5f6:	6a3b      	ldr	r3, [r7, #32]
 802d5f8:	2b00      	cmp	r3, #0
 802d5fa:	d103      	bne.n	802d604 <drv_25lc256Write+0x180>
 802d5fc:	2355      	movs	r3, #85	@ 0x55
 802d5fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d602:	e002      	b.n	802d60a <drv_25lc256Write+0x186>
 802d604:	23ae      	movs	r3, #174	@ 0xae
 802d606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc256Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 802d60a:	68fb      	ldr	r3, [r7, #12]
 802d60c:	785b      	ldrb	r3, [r3, #1]
 802d60e:	2101      	movs	r1, #1
 802d610:	4618      	mov	r0, r3
 802d612:	f001 fbe1 	bl	802edd8 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc256Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 802d616:	68fb      	ldr	r3, [r7, #12]
 802d618:	785b      	ldrb	r3, [r3, #1]
 802d61a:	2100      	movs	r1, #0
 802d61c:	4618      	mov	r0, r3
 802d61e:	f001 fbdb 	bl	802edd8 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 802d622:	6a3b      	ldr	r3, [r7, #32]
 802d624:	2b00      	cmp	r3, #0
 802d626:	d114      	bne.n	802d652 <drv_25lc256Write+0x1ce>
 802d628:	68fb      	ldr	r3, [r7, #12]
 802d62a:	7818      	ldrb	r0, [r3, #0]
 802d62c:	8b3b      	ldrh	r3, [r7, #24]
 802d62e:	3303      	adds	r3, #3
 802d630:	b29a      	uxth	r2, r3
 802d632:	68fb      	ldr	r3, [r7, #12]
 802d634:	6899      	ldr	r1, [r3, #8]
 802d636:	68fb      	ldr	r3, [r7, #12]
 802d638:	68db      	ldr	r3, [r3, #12]
 802d63a:	9300      	str	r3, [sp, #0]
 802d63c:	460b      	mov	r3, r1
 802d63e:	4928      	ldr	r1, [pc, #160]	@ (802d6e0 <drv_25lc256Write+0x25c>)
 802d640:	f002 fb5c 	bl	802fcfc <drv_spiTransmitIT>
 802d644:	4603      	mov	r3, r0
 802d646:	2b55      	cmp	r3, #85	@ 0x55
 802d648:	d003      	beq.n	802d652 <drv_25lc256Write+0x1ce>
 802d64a:	6a3b      	ldr	r3, [r7, #32]
 802d64c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d650:	623b      	str	r3, [r7, #32]
        					((drv_25lc256Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC256_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802d652:	6a3b      	ldr	r3, [r7, #32]
 802d654:	2b00      	cmp	r3, #0
 802d656:	d103      	bne.n	802d660 <drv_25lc256Write+0x1dc>
 802d658:	2355      	movs	r3, #85	@ 0x55
 802d65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d65e:	e002      	b.n	802d666 <drv_25lc256Write+0x1e2>
 802d660:	23ae      	movs	r3, #174	@ 0xae
 802d662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc256Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 802d666:	68fb      	ldr	r3, [r7, #12]
 802d668:	785b      	ldrb	r3, [r3, #1]
 802d66a:	2101      	movs	r1, #1
 802d66c:	4618      	mov	r0, r3
 802d66e:	f001 fbb3 	bl	802edd8 <drv_gpioWritePin>

            startPage += 1;
 802d672:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d674:	3301      	adds	r3, #1
 802d676:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 802d678:	2300      	movs	r3, #0
 802d67a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 802d67c:	893a      	ldrh	r2, [r7, #8]
 802d67e:	8b3b      	ldrh	r3, [r7, #24]
 802d680:	1ad3      	subs	r3, r2, r3
 802d682:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 802d684:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 802d686:	8b3b      	ldrh	r3, [r7, #24]
 802d688:	4413      	add	r3, r2
 802d68a:	853b      	strh	r3, [r7, #40]	@ 0x28

            (void_t) gos_taskSleep(5);
 802d68c:	2005      	movs	r0, #5
 802d68e:	f008 fba7 	bl	8035de0 <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 802d692:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 802d694:	3301      	adds	r3, #1
 802d696:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802d698:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 802d69a:	8bbb      	ldrh	r3, [r7, #28]
 802d69c:	429a      	cmp	r2, r3
 802d69e:	d204      	bcs.n	802d6aa <drv_25lc256Write+0x226>
 802d6a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802d6a4:	2b55      	cmp	r3, #85	@ 0x55
 802d6a6:	f43f af5e 	beq.w	802d566 <drv_25lc256Write+0xe2>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc256Descriptor_t*)pDevice)->deviceMutex);
 802d6aa:	68fb      	ldr	r3, [r7, #12]
 802d6ac:	3302      	adds	r3, #2
 802d6ae:	4618      	mov	r0, r3
 802d6b0:	f00b f8d4 	bl	803885c <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc256Descriptor_t*)pDevice)->errorFlags, errorFlags);
 802d6b4:	68fb      	ldr	r3, [r7, #12]
 802d6b6:	699a      	ldr	r2, [r3, #24]
 802d6b8:	6a3b      	ldr	r3, [r7, #32]
 802d6ba:	431a      	orrs	r2, r3
 802d6bc:	68fb      	ldr	r3, [r7, #12]
 802d6be:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802d6c0:	6a3b      	ldr	r3, [r7, #32]
 802d6c2:	2b00      	cmp	r3, #0
 802d6c4:	d103      	bne.n	802d6ce <drv_25lc256Write+0x24a>
 802d6c6:	2355      	movs	r3, #85	@ 0x55
 802d6c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d6cc:	e002      	b.n	802d6d4 <drv_25lc256Write+0x250>
 802d6ce:	23ae      	movs	r3, #174	@ 0xae
 802d6d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return writeResult;
 802d6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 802d6d8:	4618      	mov	r0, r3
 802d6da:	3730      	adds	r7, #48	@ 0x30
 802d6dc:	46bd      	mov	sp, r7
 802d6de:	bd80      	pop	{r7, pc}
 802d6e0:	20007118 	.word	0x20007118
 802d6e4:	2000711b 	.word	0x2000711b

0802d6e8 <drv_25lc640Init>:

/*
 * Function: drv_25lc640Init
 */
gos_result_t drv_25lc640Init (void_t* pDevice)
{
 802d6e8:	b580      	push	{r7, lr}
 802d6ea:	b084      	sub	sp, #16
 802d6ec:	af00      	add	r7, sp, #0
 802d6ee:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 802d6f0:	2355      	movs	r3, #85	@ 0x55
 802d6f2:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 802d6f4:	2300      	movs	r3, #0
 802d6f6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 802d6f8:	687b      	ldr	r3, [r7, #4]
 802d6fa:	2b00      	cmp	r3, #0
 802d6fc:	d103      	bne.n	802d706 <drv_25lc640Init+0x1e>
 802d6fe:	68bb      	ldr	r3, [r7, #8]
 802d700:	f043 0301 	orr.w	r3, r3, #1
 802d704:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc640Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC640_MUTEX_INIT);
 802d706:	687b      	ldr	r3, [r7, #4]
 802d708:	699b      	ldr	r3, [r3, #24]
 802d70a:	2b00      	cmp	r3, #0
 802d70c:	d10d      	bne.n	802d72a <drv_25lc640Init+0x42>
 802d70e:	687b      	ldr	r3, [r7, #4]
 802d710:	3302      	adds	r3, #2
 802d712:	4618      	mov	r0, r3
 802d714:	f00a ff82 	bl	803861c <gos_mutexInit>
 802d718:	4603      	mov	r3, r0
 802d71a:	2b55      	cmp	r3, #85	@ 0x55
 802d71c:	d005      	beq.n	802d72a <drv_25lc640Init+0x42>
 802d71e:	687b      	ldr	r3, [r7, #4]
 802d720:	699b      	ldr	r3, [r3, #24]
 802d722:	f043 0208 	orr.w	r2, r3, #8
 802d726:	687b      	ldr	r3, [r7, #4]
 802d728:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 802d72a:	68bb      	ldr	r3, [r7, #8]
 802d72c:	2b00      	cmp	r3, #0
 802d72e:	d102      	bne.n	802d736 <drv_25lc640Init+0x4e>
 802d730:	2355      	movs	r3, #85	@ 0x55
 802d732:	73fb      	strb	r3, [r7, #15]
 802d734:	e001      	b.n	802d73a <drv_25lc640Init+0x52>
 802d736:	23ae      	movs	r3, #174	@ 0xae
 802d738:	73fb      	strb	r3, [r7, #15]

    return initResult;
 802d73a:	7bfb      	ldrb	r3, [r7, #15]
}
 802d73c:	4618      	mov	r0, r3
 802d73e:	3710      	adds	r7, #16
 802d740:	46bd      	mov	sp, r7
 802d742:	bd80      	pop	{r7, pc}

0802d744 <drv_25lc640Read>:

/*
 * Function: drv_25lc640Read
 */
GOS_INLINE gos_result_t drv_25lc640Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 802d744:	b590      	push	{r4, r7, lr}
 802d746:	b08f      	sub	sp, #60	@ 0x3c
 802d748:	af02      	add	r7, sp, #8
 802d74a:	60f8      	str	r0, [r7, #12]
 802d74c:	607a      	str	r2, [r7, #4]
 802d74e:	461a      	mov	r2, r3
 802d750:	460b      	mov	r3, r1
 802d752:	817b      	strh	r3, [r7, #10]
 802d754:	4613      	mov	r3, r2
 802d756:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 802d758:	2355      	movs	r3, #85	@ 0x55
 802d75a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage     = 0u;
 802d75e:	2300      	movs	r3, #0
 802d760:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage       = 0u;
 802d762:	2300      	movs	r3, #0
 802d764:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 802d766:	2300      	movs	r3, #0
 802d768:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 802d76a:	2300      	movs	r3, #0
 802d76c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos           = 0u;
 802d76e:	2300      	movs	r3, #0
 802d770:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset        = 0u;
 802d772:	2300      	movs	r3, #0
 802d774:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress    = 0u;
 802d776:	2300      	movs	r3, #0
 802d778:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 802d77a:	2300      	movs	r3, #0
 802d77c:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition = 0;
 802d77e:	2300      	movs	r3, #0
 802d780:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 802d782:	2300      	movs	r3, #0
 802d784:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 802d786:	68fb      	ldr	r3, [r7, #12]
 802d788:	2b00      	cmp	r3, #0
 802d78a:	d103      	bne.n	802d794 <drv_25lc640Read+0x50>
 802d78c:	6a3b      	ldr	r3, [r7, #32]
 802d78e:	f043 0301 	orr.w	r3, r3, #1
 802d792:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC640_TARGET_NULL);
 802d794:	687b      	ldr	r3, [r7, #4]
 802d796:	2b00      	cmp	r3, #0
 802d798:	d103      	bne.n	802d7a2 <drv_25lc640Read+0x5e>
 802d79a:	6a3b      	ldr	r3, [r7, #32]
 802d79c:	f043 0302 	orr.w	r3, r3, #2
 802d7a0:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 802d7a2:	6a3b      	ldr	r3, [r7, #32]
 802d7a4:	2b00      	cmp	r3, #0
 802d7a6:	f040 80ce 	bne.w	802d946 <drv_25lc640Read+0x202>
 802d7aa:	897a      	ldrh	r2, [r7, #10]
 802d7ac:	893b      	ldrh	r3, [r7, #8]
 802d7ae:	4413      	add	r3, r2
 802d7b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802d7b4:	f080 80c7 	bcs.w	802d946 <drv_25lc640Read+0x202>
    {
        DRV_ERROR_CHK_SET(
 802d7b8:	6a3b      	ldr	r3, [r7, #32]
 802d7ba:	2b00      	cmp	r3, #0
 802d7bc:	d10e      	bne.n	802d7dc <drv_25lc640Read+0x98>
 802d7be:	68fb      	ldr	r3, [r7, #12]
 802d7c0:	1c9a      	adds	r2, r3, #2
 802d7c2:	68fb      	ldr	r3, [r7, #12]
 802d7c4:	689b      	ldr	r3, [r3, #8]
 802d7c6:	4619      	mov	r1, r3
 802d7c8:	4610      	mov	r0, r2
 802d7ca:	f00a ff41 	bl	8038650 <gos_mutexLock>
 802d7ce:	4603      	mov	r3, r0
 802d7d0:	2b55      	cmp	r3, #85	@ 0x55
 802d7d2:	d003      	beq.n	802d7dc <drv_25lc640Read+0x98>
 802d7d4:	6a3b      	ldr	r3, [r7, #32]
 802d7d6:	f043 0310 	orr.w	r3, r3, #16
 802d7da:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d7dc:	6a3b      	ldr	r3, [r7, #32]
 802d7de:	2b00      	cmp	r3, #0
 802d7e0:	d103      	bne.n	802d7ea <drv_25lc640Read+0xa6>
 802d7e2:	2355      	movs	r3, #85	@ 0x55
 802d7e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d7e8:	e002      	b.n	802d7f0 <drv_25lc640Read+0xac>
 802d7ea:	23ae      	movs	r3, #174	@ 0xae
 802d7ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 802d7f0:	2305      	movs	r3, #5
 802d7f2:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 802d7f4:	897b      	ldrh	r3, [r7, #10]
 802d7f6:	095b      	lsrs	r3, r3, #5
 802d7f8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 802d7fa:	893a      	ldrh	r2, [r7, #8]
 802d7fc:	897b      	ldrh	r3, [r7, #10]
 802d7fe:	4413      	add	r3, r2
 802d800:	095b      	lsrs	r3, r3, #5
 802d802:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 802d804:	8bfa      	ldrh	r2, [r7, #30]
 802d806:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d808:	1ad3      	subs	r3, r2, r3
 802d80a:	b29b      	uxth	r3, r3
 802d80c:	3301      	adds	r3, #1
 802d80e:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 802d810:	2300      	movs	r3, #0
 802d812:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 802d814:	897b      	ldrh	r3, [r7, #10]
 802d816:	f003 031f 	and.w	r3, r3, #31
 802d81a:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 802d81c:	2300      	movs	r3, #0
 802d81e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802d820:	e083      	b.n	802d92a <drv_25lc640Read+0x1e6>
        {
            memAddress = startPage << paddrposition | offset;
 802d822:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 802d824:	697b      	ldr	r3, [r7, #20]
 802d826:	fa02 f303 	lsl.w	r3, r2, r3
 802d82a:	b21a      	sxth	r2, r3
 802d82c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 802d830:	4313      	orrs	r3, r2
 802d832:	b21b      	sxth	r3, r3
 802d834:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 802d836:	893a      	ldrh	r2, [r7, #8]
 802d838:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802d83a:	4413      	add	r3, r2
 802d83c:	2b1f      	cmp	r3, #31
 802d83e:	d904      	bls.n	802d84a <drv_25lc640Read+0x106>
 802d840:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802d842:	f1c3 0320 	rsb	r3, r3, #32
 802d846:	b29b      	uxth	r3, r3
 802d848:	e000      	b.n	802d84c <drv_25lc640Read+0x108>
 802d84a:	893b      	ldrh	r3, [r7, #8]
 802d84c:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 802d84e:	4b49      	ldr	r3, [pc, #292]	@ (802d974 <drv_25lc640Read+0x230>)
 802d850:	2203      	movs	r2, #3
 802d852:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 802d854:	8b7b      	ldrh	r3, [r7, #26]
 802d856:	0a1b      	lsrs	r3, r3, #8
 802d858:	b29b      	uxth	r3, r3
 802d85a:	b2da      	uxtb	r2, r3
 802d85c:	4b45      	ldr	r3, [pc, #276]	@ (802d974 <drv_25lc640Read+0x230>)
 802d85e:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 802d860:	8b7b      	ldrh	r3, [r7, #26]
 802d862:	b2da      	uxtb	r2, r3
 802d864:	4b43      	ldr	r3, [pc, #268]	@ (802d974 <drv_25lc640Read+0x230>)
 802d866:	709a      	strb	r2, [r3, #2]

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 802d868:	68fb      	ldr	r3, [r7, #12]
 802d86a:	785b      	ldrb	r3, [r3, #1]
 802d86c:	2100      	movs	r1, #0
 802d86e:	4618      	mov	r0, r3
 802d870:	f001 fab2 	bl	802edd8 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 802d874:	6a3b      	ldr	r3, [r7, #32]
 802d876:	2b00      	cmp	r3, #0
 802d878:	d112      	bne.n	802d8a0 <drv_25lc640Read+0x15c>
 802d87a:	68fb      	ldr	r3, [r7, #12]
 802d87c:	7818      	ldrb	r0, [r3, #0]
 802d87e:	68fb      	ldr	r3, [r7, #12]
 802d880:	689a      	ldr	r2, [r3, #8]
 802d882:	68fb      	ldr	r3, [r7, #12]
 802d884:	68db      	ldr	r3, [r3, #12]
 802d886:	9300      	str	r3, [sp, #0]
 802d888:	4613      	mov	r3, r2
 802d88a:	2203      	movs	r2, #3
 802d88c:	4939      	ldr	r1, [pc, #228]	@ (802d974 <drv_25lc640Read+0x230>)
 802d88e:	f002 fa35 	bl	802fcfc <drv_spiTransmitIT>
 802d892:	4603      	mov	r3, r0
 802d894:	2b55      	cmp	r3, #85	@ 0x55
 802d896:	d003      	beq.n	802d8a0 <drv_25lc640Read+0x15c>
 802d898:	6a3b      	ldr	r3, [r7, #32]
 802d89a:	f043 0320 	orr.w	r3, r3, #32
 802d89e:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d8a0:	6a3b      	ldr	r3, [r7, #32]
 802d8a2:	2b00      	cmp	r3, #0
 802d8a4:	d103      	bne.n	802d8ae <drv_25lc640Read+0x16a>
 802d8a6:	2355      	movs	r3, #85	@ 0x55
 802d8a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d8ac:	e002      	b.n	802d8b4 <drv_25lc640Read+0x170>
 802d8ae:	23ae      	movs	r3, #174	@ 0xae
 802d8b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            DRV_ERROR_CHK_SET(
 802d8b4:	6a3b      	ldr	r3, [r7, #32]
 802d8b6:	2b00      	cmp	r3, #0
 802d8b8:	d114      	bne.n	802d8e4 <drv_25lc640Read+0x1a0>
 802d8ba:	68fb      	ldr	r3, [r7, #12]
 802d8bc:	7818      	ldrb	r0, [r3, #0]
 802d8be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 802d8c0:	687a      	ldr	r2, [r7, #4]
 802d8c2:	18d1      	adds	r1, r2, r3
 802d8c4:	68fb      	ldr	r3, [r7, #12]
 802d8c6:	689c      	ldr	r4, [r3, #8]
 802d8c8:	68fb      	ldr	r3, [r7, #12]
 802d8ca:	68db      	ldr	r3, [r3, #12]
 802d8cc:	8b3a      	ldrh	r2, [r7, #24]
 802d8ce:	9300      	str	r3, [sp, #0]
 802d8d0:	4623      	mov	r3, r4
 802d8d2:	f002 fa77 	bl	802fdc4 <drv_spiReceiveIT>
 802d8d6:	4603      	mov	r3, r0
 802d8d8:	2b55      	cmp	r3, #85	@ 0x55
 802d8da:	d003      	beq.n	802d8e4 <drv_25lc640Read+0x1a0>
 802d8dc:	6a3b      	ldr	r3, [r7, #32]
 802d8de:	f043 0320 	orr.w	r3, r3, #32
 802d8e2:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d8e4:	6a3b      	ldr	r3, [r7, #32]
 802d8e6:	2b00      	cmp	r3, #0
 802d8e8:	d103      	bne.n	802d8f2 <drv_25lc640Read+0x1ae>
 802d8ea:	2355      	movs	r3, #85	@ 0x55
 802d8ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d8f0:	e002      	b.n	802d8f8 <drv_25lc640Read+0x1b4>
 802d8f2:	23ae      	movs	r3, #174	@ 0xae
 802d8f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 802d8f8:	68fb      	ldr	r3, [r7, #12]
 802d8fa:	785b      	ldrb	r3, [r3, #1]
 802d8fc:	2101      	movs	r1, #1
 802d8fe:	4618      	mov	r0, r3
 802d900:	f001 fa6a 	bl	802edd8 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 802d904:	200a      	movs	r0, #10
 802d906:	f008 fa6b 	bl	8035de0 <gos_taskSleep>

            startPage += 1;
 802d90a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d90c:	3301      	adds	r3, #1
 802d90e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 802d910:	2300      	movs	r3, #0
 802d912:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 802d914:	893a      	ldrh	r2, [r7, #8]
 802d916:	8b3b      	ldrh	r3, [r7, #24]
 802d918:	1ad3      	subs	r3, r2, r3
 802d91a:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 802d91c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 802d91e:	8b3b      	ldrh	r3, [r7, #24]
 802d920:	4413      	add	r3, r2
 802d922:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 802d924:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 802d926:	3301      	adds	r3, #1
 802d928:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802d92a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 802d92c:	8bbb      	ldrh	r3, [r7, #28]
 802d92e:	429a      	cmp	r2, r3
 802d930:	d204      	bcs.n	802d93c <drv_25lc640Read+0x1f8>
 802d932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802d936:	2b55      	cmp	r3, #85	@ 0x55
 802d938:	f43f af73 	beq.w	802d822 <drv_25lc640Read+0xde>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 802d93c:	68fb      	ldr	r3, [r7, #12]
 802d93e:	3302      	adds	r3, #2
 802d940:	4618      	mov	r0, r3
 802d942:	f00a ff8b 	bl	803885c <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 802d946:	68fb      	ldr	r3, [r7, #12]
 802d948:	699a      	ldr	r2, [r3, #24]
 802d94a:	6a3b      	ldr	r3, [r7, #32]
 802d94c:	431a      	orrs	r2, r3
 802d94e:	68fb      	ldr	r3, [r7, #12]
 802d950:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 802d952:	6a3b      	ldr	r3, [r7, #32]
 802d954:	2b00      	cmp	r3, #0
 802d956:	d103      	bne.n	802d960 <drv_25lc640Read+0x21c>
 802d958:	2355      	movs	r3, #85	@ 0x55
 802d95a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802d95e:	e002      	b.n	802d966 <drv_25lc640Read+0x222>
 802d960:	23ae      	movs	r3, #174	@ 0xae
 802d962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return readResult;
 802d966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 802d96a:	4618      	mov	r0, r3
 802d96c:	3734      	adds	r7, #52	@ 0x34
 802d96e:	46bd      	mov	sp, r7
 802d970:	bd90      	pop	{r4, r7, pc}
 802d972:	bf00      	nop
 802d974:	2000715c 	.word	0x2000715c

0802d978 <drv_25lc640Write>:

/*
 * Function: drv_25lc640Write
 */
GOS_INLINE gos_result_t drv_25lc640Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 802d978:	b580      	push	{r7, lr}
 802d97a:	b08e      	sub	sp, #56	@ 0x38
 802d97c:	af02      	add	r7, sp, #8
 802d97e:	60f8      	str	r0, [r7, #12]
 802d980:	607a      	str	r2, [r7, #4]
 802d982:	461a      	mov	r2, r3
 802d984:	460b      	mov	r3, r1
 802d986:	817b      	strh	r3, [r7, #10]
 802d988:	4613      	mov	r3, r2
 802d98a:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 802d98c:	2355      	movs	r3, #85	@ 0x55
 802d98e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage       = 0u;
 802d992:	2300      	movs	r3, #0
 802d994:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage         = 0u;
 802d996:	2300      	movs	r3, #0
 802d998:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages      = 0u;
 802d99a:	2300      	movs	r3, #0
 802d99c:	83bb      	strh	r3, [r7, #28]
    u16_t        idx             = 0u;
 802d99e:	2300      	movs	r3, #0
 802d9a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos             = 0u;
 802d9a2:	2300      	movs	r3, #0
 802d9a4:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset          = 0u;
 802d9a6:	2300      	movs	r3, #0
 802d9a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress      = 0u;
 802d9aa:	2300      	movs	r3, #0
 802d9ac:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem        = 0u;
 802d9ae:	2300      	movs	r3, #0
 802d9b0:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition   = 0;
 802d9b2:	2300      	movs	r3, #0
 802d9b4:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags      = 0u;
 802d9b6:	2300      	movs	r3, #0
 802d9b8:	623b      	str	r3, [r7, #32]
    u8_t         wrenInstruction = 0x06;
 802d9ba:	2306      	movs	r3, #6
 802d9bc:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 802d9be:	68fb      	ldr	r3, [r7, #12]
 802d9c0:	2b00      	cmp	r3, #0
 802d9c2:	d103      	bne.n	802d9cc <drv_25lc640Write+0x54>
 802d9c4:	6a3b      	ldr	r3, [r7, #32]
 802d9c6:	f043 0301 	orr.w	r3, r3, #1
 802d9ca:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC640_DATA_NULL);
 802d9cc:	687b      	ldr	r3, [r7, #4]
 802d9ce:	2b00      	cmp	r3, #0
 802d9d0:	d103      	bne.n	802d9da <drv_25lc640Write+0x62>
 802d9d2:	6a3b      	ldr	r3, [r7, #32]
 802d9d4:	f043 0304 	orr.w	r3, r3, #4
 802d9d8:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 802d9da:	6a3b      	ldr	r3, [r7, #32]
 802d9dc:	2b00      	cmp	r3, #0
 802d9de:	f040 80e3 	bne.w	802dba8 <drv_25lc640Write+0x230>
 802d9e2:	897a      	ldrh	r2, [r7, #10]
 802d9e4:	893b      	ldrh	r3, [r7, #8]
 802d9e6:	4413      	add	r3, r2
 802d9e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802d9ec:	f080 80dc 	bcs.w	802dba8 <drv_25lc640Write+0x230>
    {
        DRV_ERROR_CHK_SET(
 802d9f0:	6a3b      	ldr	r3, [r7, #32]
 802d9f2:	2b00      	cmp	r3, #0
 802d9f4:	d10e      	bne.n	802da14 <drv_25lc640Write+0x9c>
 802d9f6:	68fb      	ldr	r3, [r7, #12]
 802d9f8:	1c9a      	adds	r2, r3, #2
 802d9fa:	68fb      	ldr	r3, [r7, #12]
 802d9fc:	691b      	ldr	r3, [r3, #16]
 802d9fe:	4619      	mov	r1, r3
 802da00:	4610      	mov	r0, r2
 802da02:	f00a fe25 	bl	8038650 <gos_mutexLock>
 802da06:	4603      	mov	r3, r0
 802da08:	2b55      	cmp	r3, #85	@ 0x55
 802da0a:	d003      	beq.n	802da14 <drv_25lc640Write+0x9c>
 802da0c:	6a3b      	ldr	r3, [r7, #32]
 802da0e:	f043 0310 	orr.w	r3, r3, #16
 802da12:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802da14:	6a3b      	ldr	r3, [r7, #32]
 802da16:	2b00      	cmp	r3, #0
 802da18:	d103      	bne.n	802da22 <drv_25lc640Write+0xaa>
 802da1a:	2355      	movs	r3, #85	@ 0x55
 802da1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802da20:	e002      	b.n	802da28 <drv_25lc640Write+0xb0>
 802da22:	23ae      	movs	r3, #174	@ 0xae
 802da24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 802da28:	2305      	movs	r3, #5
 802da2a:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 802da2c:	897b      	ldrh	r3, [r7, #10]
 802da2e:	095b      	lsrs	r3, r3, #5
 802da30:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 802da32:	893a      	ldrh	r2, [r7, #8]
 802da34:	897b      	ldrh	r3, [r7, #10]
 802da36:	4413      	add	r3, r2
 802da38:	095b      	lsrs	r3, r3, #5
 802da3a:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 802da3c:	8bfa      	ldrh	r2, [r7, #30]
 802da3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802da40:	1ad3      	subs	r3, r2, r3
 802da42:	b29b      	uxth	r3, r3
 802da44:	3301      	adds	r3, #1
 802da46:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 802da48:	2300      	movs	r3, #0
 802da4a:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 802da4c:	897b      	ldrh	r3, [r7, #10]
 802da4e:	f003 031f 	and.w	r3, r3, #31
 802da52:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 802da54:	2300      	movs	r3, #0
 802da56:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802da58:	e098      	b.n	802db8c <drv_25lc640Write+0x214>
        {
            memAddress = startPage << paddrposition | offset;
 802da5a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 802da5c:	697b      	ldr	r3, [r7, #20]
 802da5e:	fa02 f303 	lsl.w	r3, r2, r3
 802da62:	b21a      	sxth	r2, r3
 802da64:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 802da68:	4313      	orrs	r3, r2
 802da6a:	b21b      	sxth	r3, r3
 802da6c:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 802da6e:	893a      	ldrh	r2, [r7, #8]
 802da70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802da72:	4413      	add	r3, r2
 802da74:	2b1f      	cmp	r3, #31
 802da76:	d904      	bls.n	802da82 <drv_25lc640Write+0x10a>
 802da78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802da7a:	f1c3 0320 	rsb	r3, r3, #32
 802da7e:	b29b      	uxth	r3, r3
 802da80:	e000      	b.n	802da84 <drv_25lc640Write+0x10c>
 802da82:	893b      	ldrh	r3, [r7, #8]
 802da84:	833b      	strh	r3, [r7, #24]

            txBuffer[0] = 0x02;
 802da86:	4b53      	ldr	r3, [pc, #332]	@ (802dbd4 <drv_25lc640Write+0x25c>)
 802da88:	2202      	movs	r2, #2
 802da8a:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (memAddress >> 8);
 802da8c:	8b7b      	ldrh	r3, [r7, #26]
 802da8e:	0a1b      	lsrs	r3, r3, #8
 802da90:	b29b      	uxth	r3, r3
 802da92:	b2da      	uxtb	r2, r3
 802da94:	4b4f      	ldr	r3, [pc, #316]	@ (802dbd4 <drv_25lc640Write+0x25c>)
 802da96:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = memAddress & 0xFF;
 802da98:	8b7b      	ldrh	r3, [r7, #26]
 802da9a:	b2da      	uxtb	r2, r3
 802da9c:	4b4d      	ldr	r3, [pc, #308]	@ (802dbd4 <drv_25lc640Write+0x25c>)
 802da9e:	709a      	strb	r2, [r3, #2]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 802daa0:	484d      	ldr	r0, [pc, #308]	@ (802dbd8 <drv_25lc640Write+0x260>)
 802daa2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 802daa4:	687a      	ldr	r2, [r7, #4]
 802daa6:	4413      	add	r3, r2
 802daa8:	8b3a      	ldrh	r2, [r7, #24]
 802daaa:	4619      	mov	r1, r3
 802daac:	f00e fb91 	bl	803c1d2 <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 802dab0:	68fb      	ldr	r3, [r7, #12]
 802dab2:	785b      	ldrb	r3, [r3, #1]
 802dab4:	2100      	movs	r1, #0
 802dab6:	4618      	mov	r0, r3
 802dab8:	f001 f98e 	bl	802edd8 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 802dabc:	6a3b      	ldr	r3, [r7, #32]
 802dabe:	2b00      	cmp	r3, #0
 802dac0:	d113      	bne.n	802daea <drv_25lc640Write+0x172>
 802dac2:	68fb      	ldr	r3, [r7, #12]
 802dac4:	7818      	ldrb	r0, [r3, #0]
 802dac6:	68fb      	ldr	r3, [r7, #12]
 802dac8:	689a      	ldr	r2, [r3, #8]
 802daca:	68fb      	ldr	r3, [r7, #12]
 802dacc:	68db      	ldr	r3, [r3, #12]
 802dace:	f107 0113 	add.w	r1, r7, #19
 802dad2:	9300      	str	r3, [sp, #0]
 802dad4:	4613      	mov	r3, r2
 802dad6:	2201      	movs	r2, #1
 802dad8:	f002 f910 	bl	802fcfc <drv_spiTransmitIT>
 802dadc:	4603      	mov	r3, r0
 802dade:	2b55      	cmp	r3, #85	@ 0x55
 802dae0:	d003      	beq.n	802daea <drv_25lc640Write+0x172>
 802dae2:	6a3b      	ldr	r3, [r7, #32]
 802dae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dae8:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802daea:	6a3b      	ldr	r3, [r7, #32]
 802daec:	2b00      	cmp	r3, #0
 802daee:	d103      	bne.n	802daf8 <drv_25lc640Write+0x180>
 802daf0:	2355      	movs	r3, #85	@ 0x55
 802daf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802daf6:	e002      	b.n	802dafe <drv_25lc640Write+0x186>
 802daf8:	23ae      	movs	r3, #174	@ 0xae
 802dafa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 802dafe:	68fb      	ldr	r3, [r7, #12]
 802db00:	785b      	ldrb	r3, [r3, #1]
 802db02:	2101      	movs	r1, #1
 802db04:	4618      	mov	r0, r3
 802db06:	f001 f967 	bl	802edd8 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 802db0a:	68fb      	ldr	r3, [r7, #12]
 802db0c:	785b      	ldrb	r3, [r3, #1]
 802db0e:	2100      	movs	r1, #0
 802db10:	4618      	mov	r0, r3
 802db12:	f001 f961 	bl	802edd8 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 802db16:	6a3b      	ldr	r3, [r7, #32]
 802db18:	2b00      	cmp	r3, #0
 802db1a:	d114      	bne.n	802db46 <drv_25lc640Write+0x1ce>
 802db1c:	68fb      	ldr	r3, [r7, #12]
 802db1e:	7818      	ldrb	r0, [r3, #0]
 802db20:	8b3b      	ldrh	r3, [r7, #24]
 802db22:	3303      	adds	r3, #3
 802db24:	b29a      	uxth	r2, r3
 802db26:	68fb      	ldr	r3, [r7, #12]
 802db28:	6899      	ldr	r1, [r3, #8]
 802db2a:	68fb      	ldr	r3, [r7, #12]
 802db2c:	68db      	ldr	r3, [r3, #12]
 802db2e:	9300      	str	r3, [sp, #0]
 802db30:	460b      	mov	r3, r1
 802db32:	4928      	ldr	r1, [pc, #160]	@ (802dbd4 <drv_25lc640Write+0x25c>)
 802db34:	f002 f8e2 	bl	802fcfc <drv_spiTransmitIT>
 802db38:	4603      	mov	r3, r0
 802db3a:	2b55      	cmp	r3, #85	@ 0x55
 802db3c:	d003      	beq.n	802db46 <drv_25lc640Write+0x1ce>
 802db3e:	6a3b      	ldr	r3, [r7, #32]
 802db40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802db44:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802db46:	6a3b      	ldr	r3, [r7, #32]
 802db48:	2b00      	cmp	r3, #0
 802db4a:	d103      	bne.n	802db54 <drv_25lc640Write+0x1dc>
 802db4c:	2355      	movs	r3, #85	@ 0x55
 802db4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802db52:	e002      	b.n	802db5a <drv_25lc640Write+0x1e2>
 802db54:	23ae      	movs	r3, #174	@ 0xae
 802db56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 802db5a:	68fb      	ldr	r3, [r7, #12]
 802db5c:	785b      	ldrb	r3, [r3, #1]
 802db5e:	2101      	movs	r1, #1
 802db60:	4618      	mov	r0, r3
 802db62:	f001 f939 	bl	802edd8 <drv_gpioWritePin>

            startPage += 1;
 802db66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802db68:	3301      	adds	r3, #1
 802db6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 802db6c:	2300      	movs	r3, #0
 802db6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 802db70:	893a      	ldrh	r2, [r7, #8]
 802db72:	8b3b      	ldrh	r3, [r7, #24]
 802db74:	1ad3      	subs	r3, r2, r3
 802db76:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 802db78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 802db7a:	8b3b      	ldrh	r3, [r7, #24]
 802db7c:	4413      	add	r3, r2
 802db7e:	853b      	strh	r3, [r7, #40]	@ 0x28

            (void_t) gos_taskSleep(5);
 802db80:	2005      	movs	r0, #5
 802db82:	f008 f92d 	bl	8035de0 <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 802db86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 802db88:	3301      	adds	r3, #1
 802db8a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 802db8c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 802db8e:	8bbb      	ldrh	r3, [r7, #28]
 802db90:	429a      	cmp	r2, r3
 802db92:	d204      	bcs.n	802db9e <drv_25lc640Write+0x226>
 802db94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802db98:	2b55      	cmp	r3, #85	@ 0x55
 802db9a:	f43f af5e 	beq.w	802da5a <drv_25lc640Write+0xe2>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 802db9e:	68fb      	ldr	r3, [r7, #12]
 802dba0:	3302      	adds	r3, #2
 802dba2:	4618      	mov	r0, r3
 802dba4:	f00a fe5a 	bl	803885c <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 802dba8:	68fb      	ldr	r3, [r7, #12]
 802dbaa:	699a      	ldr	r2, [r3, #24]
 802dbac:	6a3b      	ldr	r3, [r7, #32]
 802dbae:	431a      	orrs	r2, r3
 802dbb0:	68fb      	ldr	r3, [r7, #12]
 802dbb2:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 802dbb4:	6a3b      	ldr	r3, [r7, #32]
 802dbb6:	2b00      	cmp	r3, #0
 802dbb8:	d103      	bne.n	802dbc2 <drv_25lc640Write+0x24a>
 802dbba:	2355      	movs	r3, #85	@ 0x55
 802dbbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 802dbc0:	e002      	b.n	802dbc8 <drv_25lc640Write+0x250>
 802dbc2:	23ae      	movs	r3, #174	@ 0xae
 802dbc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return writeResult;
 802dbc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 802dbcc:	4618      	mov	r0, r3
 802dbce:	3730      	adds	r7, #48	@ 0x30
 802dbd0:	46bd      	mov	sp, r7
 802dbd2:	bd80      	pop	{r7, pc}
 802dbd4:	2000715c 	.word	0x2000715c
 802dbd8:	2000715f 	.word	0x2000715f

0802dbdc <drv_adcInit>:

/*
 * Function: drv_adcInit
 */
gos_result_t drv_adcInit (void_t)
{
 802dbdc:	b580      	push	{r7, lr}
 802dbde:	b086      	sub	sp, #24
 802dbe0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            adcDriverInitResult = GOS_SUCCESS;
 802dbe2:	2355      	movs	r3, #85	@ 0x55
 802dbe4:	75fb      	strb	r3, [r7, #23]
    u8_t                    adcIdx              = 0u;
 802dbe6:	2300      	movs	r3, #0
 802dbe8:	75bb      	strb	r3, [r7, #22]
    ADC_ChannelConfTypeDef  sConfig             = {0};
 802dbea:	1d3b      	adds	r3, r7, #4
 802dbec:	2200      	movs	r2, #0
 802dbee:	601a      	str	r2, [r3, #0]
 802dbf0:	605a      	str	r2, [r3, #4]
 802dbf2:	609a      	str	r2, [r3, #8]
 802dbf4:	60da      	str	r2, [r3, #12]
    drv_adcPeriphInstance_t instance            = 0u;
 802dbf6:	2300      	movs	r3, #0
 802dbf8:	757b      	strb	r3, [r7, #21]
    /*
     * Function code.
     */
    if (adcConfig != NULL)
    {
        for (adcIdx = 0u; adcIdx < adcConfigSize / sizeof(drv_adcDescriptor_t); adcIdx++)
 802dbfa:	2300      	movs	r3, #0
 802dbfc:	75bb      	strb	r3, [r7, #22]
 802dbfe:	e00e      	b.n	802dc1e <drv_adcInit+0x42>
        {
            GOS_CONCAT_RESULT(adcDriverInitResult, drv_adcInitInstance(adcIdx));
 802dc00:	7dfb      	ldrb	r3, [r7, #23]
 802dc02:	2b55      	cmp	r3, #85	@ 0x55
 802dc04:	d106      	bne.n	802dc14 <drv_adcInit+0x38>
 802dc06:	7dbb      	ldrb	r3, [r7, #22]
 802dc08:	4618      	mov	r0, r3
 802dc0a:	f000 f865 	bl	802dcd8 <drv_adcInitInstance>
 802dc0e:	4603      	mov	r3, r0
 802dc10:	75fb      	strb	r3, [r7, #23]
 802dc12:	e001      	b.n	802dc18 <drv_adcInit+0x3c>
 802dc14:	23ae      	movs	r3, #174	@ 0xae
 802dc16:	75fb      	strb	r3, [r7, #23]
        for (adcIdx = 0u; adcIdx < adcConfigSize / sizeof(drv_adcDescriptor_t); adcIdx++)
 802dc18:	7dbb      	ldrb	r3, [r7, #22]
 802dc1a:	3301      	adds	r3, #1
 802dc1c:	75bb      	strb	r3, [r7, #22]
 802dc1e:	7dbb      	ldrb	r3, [r7, #22]
 802dc20:	4a27      	ldr	r2, [pc, #156]	@ (802dcc0 <drv_adcInit+0xe4>)
 802dc22:	6812      	ldr	r2, [r2, #0]
 802dc24:	08d2      	lsrs	r2, r2, #3
 802dc26:	4927      	ldr	r1, [pc, #156]	@ (802dcc4 <drv_adcInit+0xe8>)
 802dc28:	fba1 1202 	umull	r1, r2, r1, r2
 802dc2c:	4293      	cmp	r3, r2
 802dc2e:	d3e7      	bcc.n	802dc00 <drv_adcInit+0x24>
        }

        for (adcIdx = 0u; adcIdx < adcChannelConfigSize / sizeof(drv_adcChannelDesc_t); adcIdx++)
 802dc30:	2300      	movs	r3, #0
 802dc32:	75bb      	strb	r3, [r7, #22]
 802dc34:	e039      	b.n	802dcaa <drv_adcInit+0xce>
        {
            /*
             *  Configure for the selected ADC regular channel its corresponding rank
             *  in the sequencer and its sample time.
             */
            sConfig.Channel      = adcChannelConfig[adcIdx].channel;
 802dc36:	7dbb      	ldrb	r3, [r7, #22]
 802dc38:	4a23      	ldr	r2, [pc, #140]	@ (802dcc8 <drv_adcInit+0xec>)
 802dc3a:	011b      	lsls	r3, r3, #4
 802dc3c:	4413      	add	r3, r2
 802dc3e:	3304      	adds	r3, #4
 802dc40:	681b      	ldr	r3, [r3, #0]
 802dc42:	607b      	str	r3, [r7, #4]
            sConfig.Rank         = adcChannelConfig[adcIdx].rank;
 802dc44:	7dbb      	ldrb	r3, [r7, #22]
 802dc46:	4a20      	ldr	r2, [pc, #128]	@ (802dcc8 <drv_adcInit+0xec>)
 802dc48:	011b      	lsls	r3, r3, #4
 802dc4a:	4413      	add	r3, r2
 802dc4c:	3308      	adds	r3, #8
 802dc4e:	681b      	ldr	r3, [r3, #0]
 802dc50:	60bb      	str	r3, [r7, #8]
            sConfig.SamplingTime = adcChannelConfig[adcIdx].samplingTime;
 802dc52:	7dbb      	ldrb	r3, [r7, #22]
 802dc54:	4a1c      	ldr	r2, [pc, #112]	@ (802dcc8 <drv_adcInit+0xec>)
 802dc56:	011b      	lsls	r3, r3, #4
 802dc58:	4413      	add	r3, r2
 802dc5a:	330c      	adds	r3, #12
 802dc5c:	681b      	ldr	r3, [r3, #0]
 802dc5e:	60fb      	str	r3, [r7, #12]

            instance = adcConfig[adcIdx].periphInstance;
 802dc60:	7dba      	ldrb	r2, [r7, #22]
 802dc62:	491a      	ldr	r1, [pc, #104]	@ (802dccc <drv_adcInit+0xf0>)
 802dc64:	4613      	mov	r3, r2
 802dc66:	00db      	lsls	r3, r3, #3
 802dc68:	1a9b      	subs	r3, r3, r2
 802dc6a:	00db      	lsls	r3, r3, #3
 802dc6c:	440b      	add	r3, r1
 802dc6e:	781b      	ldrb	r3, [r3, #0]
 802dc70:	757b      	strb	r3, [r7, #21]

            GOS_CONCAT_RESULT(adcDriverInitResult, HAL_ADC_ConfigChannel(&hadcs[instance], &sConfig) == HAL_OK ? GOS_SUCCESS : GOS_ERROR);
 802dc72:	7dfb      	ldrb	r3, [r7, #23]
 802dc74:	2b55      	cmp	r3, #85	@ 0x55
 802dc76:	d113      	bne.n	802dca0 <drv_adcInit+0xc4>
 802dc78:	7d7a      	ldrb	r2, [r7, #21]
 802dc7a:	4613      	mov	r3, r2
 802dc7c:	00db      	lsls	r3, r3, #3
 802dc7e:	4413      	add	r3, r2
 802dc80:	00db      	lsls	r3, r3, #3
 802dc82:	4a13      	ldr	r2, [pc, #76]	@ (802dcd0 <drv_adcInit+0xf4>)
 802dc84:	4413      	add	r3, r2
 802dc86:	1d3a      	adds	r2, r7, #4
 802dc88:	4611      	mov	r1, r2
 802dc8a:	4618      	mov	r0, r3
 802dc8c:	f7f7 fdfe 	bl	802588c <HAL_ADC_ConfigChannel>
 802dc90:	4603      	mov	r3, r0
 802dc92:	2b00      	cmp	r3, #0
 802dc94:	d101      	bne.n	802dc9a <drv_adcInit+0xbe>
 802dc96:	2355      	movs	r3, #85	@ 0x55
 802dc98:	e000      	b.n	802dc9c <drv_adcInit+0xc0>
 802dc9a:	23ae      	movs	r3, #174	@ 0xae
 802dc9c:	75fb      	strb	r3, [r7, #23]
 802dc9e:	e001      	b.n	802dca4 <drv_adcInit+0xc8>
 802dca0:	23ae      	movs	r3, #174	@ 0xae
 802dca2:	75fb      	strb	r3, [r7, #23]
        for (adcIdx = 0u; adcIdx < adcChannelConfigSize / sizeof(drv_adcChannelDesc_t); adcIdx++)
 802dca4:	7dbb      	ldrb	r3, [r7, #22]
 802dca6:	3301      	adds	r3, #1
 802dca8:	75bb      	strb	r3, [r7, #22]
 802dcaa:	7dba      	ldrb	r2, [r7, #22]
 802dcac:	4b09      	ldr	r3, [pc, #36]	@ (802dcd4 <drv_adcInit+0xf8>)
 802dcae:	681b      	ldr	r3, [r3, #0]
 802dcb0:	091b      	lsrs	r3, r3, #4
 802dcb2:	429a      	cmp	r2, r3
 802dcb4:	d3bf      	bcc.n	802dc36 <drv_adcInit+0x5a>
    {
        // Configuration array is NULL pointer.
        adcDriverInitResult = GOS_ERROR;
    }

    return adcDriverInitResult;
 802dcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 802dcb8:	4618      	mov	r0, r3
 802dcba:	3718      	adds	r7, #24
 802dcbc:	46bd      	mov	sp, r7
 802dcbe:	bd80      	pop	{r7, pc}
 802dcc0:	2000102c 	.word	0x2000102c
 802dcc4:	24924925 	.word	0x24924925
 802dcc8:	0803faa8 	.word	0x0803faa8
 802dccc:	0803fa70 	.word	0x0803fa70
 802dcd0:	20007180 	.word	0x20007180
 802dcd4:	20001030 	.word	0x20001030

0802dcd8 <drv_adcInitInstance>:

/*
 * Function: drv_adcInitInstance
 */
gos_result_t drv_adcInitInstance (u8_t adcInstanceIndex)
{
 802dcd8:	b580      	push	{r7, lr}
 802dcda:	b084      	sub	sp, #16
 802dcdc:	af00      	add	r7, sp, #0
 802dcde:	4603      	mov	r3, r0
 802dce0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            adcInitResult = GOS_ERROR;
 802dce2:	23ae      	movs	r3, #174	@ 0xae
 802dce4:	73fb      	strb	r3, [r7, #15]
    drv_adcPeriphInstance_t instance      = 0u;
 802dce6:	2300      	movs	r3, #0
 802dce8:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (adcConfig != NULL && adcInstanceIndex < (adcConfigSize / sizeof(drv_adcDescriptor_t)))
 802dcea:	79fb      	ldrb	r3, [r7, #7]
 802dcec:	4a99      	ldr	r2, [pc, #612]	@ (802df54 <drv_adcInitInstance+0x27c>)
 802dcee:	6812      	ldr	r2, [r2, #0]
 802dcf0:	08d2      	lsrs	r2, r2, #3
 802dcf2:	4999      	ldr	r1, [pc, #612]	@ (802df58 <drv_adcInitInstance+0x280>)
 802dcf4:	fba1 1202 	umull	r1, r2, r1, r2
 802dcf8:	4293      	cmp	r3, r2
 802dcfa:	f080 8126 	bcs.w	802df4a <drv_adcInitInstance+0x272>
    {
        instance = adcConfig[adcInstanceIndex].periphInstance;
 802dcfe:	79fa      	ldrb	r2, [r7, #7]
 802dd00:	4996      	ldr	r1, [pc, #600]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dd02:	4613      	mov	r3, r2
 802dd04:	00db      	lsls	r3, r3, #3
 802dd06:	1a9b      	subs	r3, r3, r2
 802dd08:	00db      	lsls	r3, r3, #3
 802dd0a:	440b      	add	r3, r1
 802dd0c:	781b      	ldrb	r3, [r3, #0]
 802dd0e:	73bb      	strb	r3, [r7, #14]

        hadcs[instance].Instance = adcInstanceLut[instance];
 802dd10:	7bbb      	ldrb	r3, [r7, #14]
 802dd12:	7bba      	ldrb	r2, [r7, #14]
 802dd14:	4992      	ldr	r1, [pc, #584]	@ (802df60 <drv_adcInitInstance+0x288>)
 802dd16:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802dd1a:	4892      	ldr	r0, [pc, #584]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802dd1c:	4613      	mov	r3, r2
 802dd1e:	00db      	lsls	r3, r3, #3
 802dd20:	4413      	add	r3, r2
 802dd22:	00db      	lsls	r3, r3, #3
 802dd24:	4403      	add	r3, r0
 802dd26:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ClockPrescaler = adcConfig[adcInstanceIndex].clockPrescaler;
 802dd28:	79f9      	ldrb	r1, [r7, #7]
 802dd2a:	7bba      	ldrb	r2, [r7, #14]
 802dd2c:	488b      	ldr	r0, [pc, #556]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dd2e:	460b      	mov	r3, r1
 802dd30:	00db      	lsls	r3, r3, #3
 802dd32:	1a5b      	subs	r3, r3, r1
 802dd34:	00db      	lsls	r3, r3, #3
 802dd36:	4403      	add	r3, r0
 802dd38:	3304      	adds	r3, #4
 802dd3a:	6819      	ldr	r1, [r3, #0]
 802dd3c:	4889      	ldr	r0, [pc, #548]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802dd3e:	4613      	mov	r3, r2
 802dd40:	00db      	lsls	r3, r3, #3
 802dd42:	4413      	add	r3, r2
 802dd44:	00db      	lsls	r3, r3, #3
 802dd46:	4403      	add	r3, r0
 802dd48:	3304      	adds	r3, #4
 802dd4a:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ContinuousConvMode = adcConfig[adcInstanceIndex].continuousConvMode;
 802dd4c:	79fa      	ldrb	r2, [r7, #7]
 802dd4e:	4983      	ldr	r1, [pc, #524]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dd50:	4613      	mov	r3, r2
 802dd52:	00db      	lsls	r3, r3, #3
 802dd54:	1a9b      	subs	r3, r3, r2
 802dd56:	00db      	lsls	r3, r3, #3
 802dd58:	440b      	add	r3, r1
 802dd5a:	3310      	adds	r3, #16
 802dd5c:	681b      	ldr	r3, [r3, #0]
 802dd5e:	7bba      	ldrb	r2, [r7, #14]
 802dd60:	b2d8      	uxtb	r0, r3
 802dd62:	4980      	ldr	r1, [pc, #512]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802dd64:	4613      	mov	r3, r2
 802dd66:	00db      	lsls	r3, r3, #3
 802dd68:	4413      	add	r3, r2
 802dd6a:	00db      	lsls	r3, r3, #3
 802dd6c:	440b      	add	r3, r1
 802dd6e:	3318      	adds	r3, #24
 802dd70:	4602      	mov	r2, r0
 802dd72:	701a      	strb	r2, [r3, #0]
        hadcs[instance].Init.DMAContinuousRequests = adcConfig[adcInstanceIndex].dmaContinuousRequests;
 802dd74:	79fa      	ldrb	r2, [r7, #7]
 802dd76:	4979      	ldr	r1, [pc, #484]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dd78:	4613      	mov	r3, r2
 802dd7a:	00db      	lsls	r3, r3, #3
 802dd7c:	1a9b      	subs	r3, r3, r2
 802dd7e:	00db      	lsls	r3, r3, #3
 802dd80:	440b      	add	r3, r1
 802dd82:	332c      	adds	r3, #44	@ 0x2c
 802dd84:	681b      	ldr	r3, [r3, #0]
 802dd86:	7bba      	ldrb	r2, [r7, #14]
 802dd88:	b2d8      	uxtb	r0, r3
 802dd8a:	4976      	ldr	r1, [pc, #472]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802dd8c:	4613      	mov	r3, r2
 802dd8e:	00db      	lsls	r3, r3, #3
 802dd90:	4413      	add	r3, r2
 802dd92:	00db      	lsls	r3, r3, #3
 802dd94:	440b      	add	r3, r1
 802dd96:	3330      	adds	r3, #48	@ 0x30
 802dd98:	4602      	mov	r2, r0
 802dd9a:	701a      	strb	r2, [r3, #0]
        hadcs[instance].Init.DataAlign = adcConfig[adcInstanceIndex].dataAlign;
 802dd9c:	79f9      	ldrb	r1, [r7, #7]
 802dd9e:	7bba      	ldrb	r2, [r7, #14]
 802dda0:	486e      	ldr	r0, [pc, #440]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dda2:	460b      	mov	r3, r1
 802dda4:	00db      	lsls	r3, r3, #3
 802dda6:	1a5b      	subs	r3, r3, r1
 802dda8:	00db      	lsls	r3, r3, #3
 802ddaa:	4403      	add	r3, r0
 802ddac:	3320      	adds	r3, #32
 802ddae:	6819      	ldr	r1, [r3, #0]
 802ddb0:	486c      	ldr	r0, [pc, #432]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802ddb2:	4613      	mov	r3, r2
 802ddb4:	00db      	lsls	r3, r3, #3
 802ddb6:	4413      	add	r3, r2
 802ddb8:	00db      	lsls	r3, r3, #3
 802ddba:	4403      	add	r3, r0
 802ddbc:	330c      	adds	r3, #12
 802ddbe:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.DiscontinuousConvMode = adcConfig[adcInstanceIndex].discontinuousConvMode;
 802ddc0:	79fa      	ldrb	r2, [r7, #7]
 802ddc2:	4966      	ldr	r1, [pc, #408]	@ (802df5c <drv_adcInitInstance+0x284>)
 802ddc4:	4613      	mov	r3, r2
 802ddc6:	00db      	lsls	r3, r3, #3
 802ddc8:	1a9b      	subs	r3, r3, r2
 802ddca:	00db      	lsls	r3, r3, #3
 802ddcc:	440b      	add	r3, r1
 802ddce:	3314      	adds	r3, #20
 802ddd0:	681b      	ldr	r3, [r3, #0]
 802ddd2:	7bba      	ldrb	r2, [r7, #14]
 802ddd4:	b2d8      	uxtb	r0, r3
 802ddd6:	4963      	ldr	r1, [pc, #396]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802ddd8:	4613      	mov	r3, r2
 802ddda:	00db      	lsls	r3, r3, #3
 802dddc:	4413      	add	r3, r2
 802ddde:	00db      	lsls	r3, r3, #3
 802dde0:	440b      	add	r3, r1
 802dde2:	3320      	adds	r3, #32
 802dde4:	4602      	mov	r2, r0
 802dde6:	701a      	strb	r2, [r3, #0]
        hadcs[instance].Init.EOCSelection = adcConfig[adcInstanceIndex].eocSelection;
 802dde8:	79f9      	ldrb	r1, [r7, #7]
 802ddea:	7bba      	ldrb	r2, [r7, #14]
 802ddec:	485b      	ldr	r0, [pc, #364]	@ (802df5c <drv_adcInitInstance+0x284>)
 802ddee:	460b      	mov	r3, r1
 802ddf0:	00db      	lsls	r3, r3, #3
 802ddf2:	1a5b      	subs	r3, r3, r1
 802ddf4:	00db      	lsls	r3, r3, #3
 802ddf6:	4403      	add	r3, r0
 802ddf8:	3330      	adds	r3, #48	@ 0x30
 802ddfa:	6819      	ldr	r1, [r3, #0]
 802ddfc:	4859      	ldr	r0, [pc, #356]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802ddfe:	4613      	mov	r3, r2
 802de00:	00db      	lsls	r3, r3, #3
 802de02:	4413      	add	r3, r2
 802de04:	00db      	lsls	r3, r3, #3
 802de06:	4403      	add	r3, r0
 802de08:	3314      	adds	r3, #20
 802de0a:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ExternalTrigConv = adcConfig[adcInstanceIndex].externalTrigConv;
 802de0c:	79f9      	ldrb	r1, [r7, #7]
 802de0e:	7bba      	ldrb	r2, [r7, #14]
 802de10:	4852      	ldr	r0, [pc, #328]	@ (802df5c <drv_adcInitInstance+0x284>)
 802de12:	460b      	mov	r3, r1
 802de14:	00db      	lsls	r3, r3, #3
 802de16:	1a5b      	subs	r3, r3, r1
 802de18:	00db      	lsls	r3, r3, #3
 802de1a:	4403      	add	r3, r0
 802de1c:	331c      	adds	r3, #28
 802de1e:	6819      	ldr	r1, [r3, #0]
 802de20:	4850      	ldr	r0, [pc, #320]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802de22:	4613      	mov	r3, r2
 802de24:	00db      	lsls	r3, r3, #3
 802de26:	4413      	add	r3, r2
 802de28:	00db      	lsls	r3, r3, #3
 802de2a:	4403      	add	r3, r0
 802de2c:	3328      	adds	r3, #40	@ 0x28
 802de2e:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ExternalTrigConvEdge = adcConfig[adcInstanceIndex].externalTrigConvEdge;
 802de30:	79f9      	ldrb	r1, [r7, #7]
 802de32:	7bba      	ldrb	r2, [r7, #14]
 802de34:	4849      	ldr	r0, [pc, #292]	@ (802df5c <drv_adcInitInstance+0x284>)
 802de36:	460b      	mov	r3, r1
 802de38:	00db      	lsls	r3, r3, #3
 802de3a:	1a5b      	subs	r3, r3, r1
 802de3c:	00db      	lsls	r3, r3, #3
 802de3e:	4403      	add	r3, r0
 802de40:	3318      	adds	r3, #24
 802de42:	6819      	ldr	r1, [r3, #0]
 802de44:	4847      	ldr	r0, [pc, #284]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802de46:	4613      	mov	r3, r2
 802de48:	00db      	lsls	r3, r3, #3
 802de4a:	4413      	add	r3, r2
 802de4c:	00db      	lsls	r3, r3, #3
 802de4e:	4403      	add	r3, r0
 802de50:	332c      	adds	r3, #44	@ 0x2c
 802de52:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.NbrOfConversion = adcConfig[adcInstanceIndex].nbrOfConversion;
 802de54:	79f9      	ldrb	r1, [r7, #7]
 802de56:	7bba      	ldrb	r2, [r7, #14]
 802de58:	4840      	ldr	r0, [pc, #256]	@ (802df5c <drv_adcInitInstance+0x284>)
 802de5a:	460b      	mov	r3, r1
 802de5c:	00db      	lsls	r3, r3, #3
 802de5e:	1a5b      	subs	r3, r3, r1
 802de60:	00db      	lsls	r3, r3, #3
 802de62:	4403      	add	r3, r0
 802de64:	3324      	adds	r3, #36	@ 0x24
 802de66:	6819      	ldr	r1, [r3, #0]
 802de68:	483e      	ldr	r0, [pc, #248]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802de6a:	4613      	mov	r3, r2
 802de6c:	00db      	lsls	r3, r3, #3
 802de6e:	4413      	add	r3, r2
 802de70:	00db      	lsls	r3, r3, #3
 802de72:	4403      	add	r3, r0
 802de74:	331c      	adds	r3, #28
 802de76:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.NbrOfDiscConversion = adcConfig[adcInstanceIndex].nbrOfDiscConversion;
 802de78:	79f9      	ldrb	r1, [r7, #7]
 802de7a:	7bba      	ldrb	r2, [r7, #14]
 802de7c:	4837      	ldr	r0, [pc, #220]	@ (802df5c <drv_adcInitInstance+0x284>)
 802de7e:	460b      	mov	r3, r1
 802de80:	00db      	lsls	r3, r3, #3
 802de82:	1a5b      	subs	r3, r3, r1
 802de84:	00db      	lsls	r3, r3, #3
 802de86:	4403      	add	r3, r0
 802de88:	3328      	adds	r3, #40	@ 0x28
 802de8a:	6819      	ldr	r1, [r3, #0]
 802de8c:	4835      	ldr	r0, [pc, #212]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802de8e:	4613      	mov	r3, r2
 802de90:	00db      	lsls	r3, r3, #3
 802de92:	4413      	add	r3, r2
 802de94:	00db      	lsls	r3, r3, #3
 802de96:	4403      	add	r3, r0
 802de98:	3324      	adds	r3, #36	@ 0x24
 802de9a:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.Resolution = adcConfig[adcInstanceIndex].resolution;
 802de9c:	79f9      	ldrb	r1, [r7, #7]
 802de9e:	7bba      	ldrb	r2, [r7, #14]
 802dea0:	482e      	ldr	r0, [pc, #184]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dea2:	460b      	mov	r3, r1
 802dea4:	00db      	lsls	r3, r3, #3
 802dea6:	1a5b      	subs	r3, r3, r1
 802dea8:	00db      	lsls	r3, r3, #3
 802deaa:	4403      	add	r3, r0
 802deac:	3308      	adds	r3, #8
 802deae:	6819      	ldr	r1, [r3, #0]
 802deb0:	482c      	ldr	r0, [pc, #176]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802deb2:	4613      	mov	r3, r2
 802deb4:	00db      	lsls	r3, r3, #3
 802deb6:	4413      	add	r3, r2
 802deb8:	00db      	lsls	r3, r3, #3
 802deba:	4403      	add	r3, r0
 802debc:	3308      	adds	r3, #8
 802debe:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ScanConvMode = adcConfig[adcInstanceIndex].scanConvMode;
 802dec0:	79f9      	ldrb	r1, [r7, #7]
 802dec2:	7bba      	ldrb	r2, [r7, #14]
 802dec4:	4825      	ldr	r0, [pc, #148]	@ (802df5c <drv_adcInitInstance+0x284>)
 802dec6:	460b      	mov	r3, r1
 802dec8:	00db      	lsls	r3, r3, #3
 802deca:	1a5b      	subs	r3, r3, r1
 802decc:	00db      	lsls	r3, r3, #3
 802dece:	4403      	add	r3, r0
 802ded0:	330c      	adds	r3, #12
 802ded2:	6819      	ldr	r1, [r3, #0]
 802ded4:	4823      	ldr	r0, [pc, #140]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802ded6:	4613      	mov	r3, r2
 802ded8:	00db      	lsls	r3, r3, #3
 802deda:	4413      	add	r3, r2
 802dedc:	00db      	lsls	r3, r3, #3
 802dede:	4403      	add	r3, r0
 802dee0:	3310      	adds	r3, #16
 802dee2:	6019      	str	r1, [r3, #0]

        if (HAL_ADC_Init         (&hadcs[instance])            == HAL_OK      &&
 802dee4:	7bba      	ldrb	r2, [r7, #14]
 802dee6:	4613      	mov	r3, r2
 802dee8:	00db      	lsls	r3, r3, #3
 802deea:	4413      	add	r3, r2
 802deec:	00db      	lsls	r3, r3, #3
 802deee:	4a1d      	ldr	r2, [pc, #116]	@ (802df64 <drv_adcInitInstance+0x28c>)
 802def0:	4413      	add	r3, r2
 802def2:	4618      	mov	r0, r3
 802def4:	f7f7 fa36 	bl	8025364 <HAL_ADC_Init>
 802def8:	4603      	mov	r3, r0
 802defa:	2b00      	cmp	r3, #0
 802defc:	d125      	bne.n	802df4a <drv_adcInitInstance+0x272>
            gos_mutexInit        (&adcMutexes[instance])       == GOS_SUCCESS &&
 802defe:	7bbb      	ldrb	r3, [r7, #14]
 802df00:	009b      	lsls	r3, r3, #2
 802df02:	4a19      	ldr	r2, [pc, #100]	@ (802df68 <drv_adcInitInstance+0x290>)
 802df04:	4413      	add	r3, r2
 802df06:	4618      	mov	r0, r3
 802df08:	f00a fb88 	bl	803861c <gos_mutexInit>
 802df0c:	4603      	mov	r3, r0
        if (HAL_ADC_Init         (&hadcs[instance])            == HAL_OK      &&
 802df0e:	2b55      	cmp	r3, #85	@ 0x55
 802df10:	d11b      	bne.n	802df4a <drv_adcInitInstance+0x272>
            gos_triggerInit      (&adcReadyTriggers[instance]) == GOS_SUCCESS   &&
 802df12:	7bba      	ldrb	r2, [r7, #14]
 802df14:	4613      	mov	r3, r2
 802df16:	005b      	lsls	r3, r3, #1
 802df18:	4413      	add	r3, r2
 802df1a:	009b      	lsls	r3, r3, #2
 802df1c:	4a13      	ldr	r2, [pc, #76]	@ (802df6c <drv_adcInitInstance+0x294>)
 802df1e:	4413      	add	r3, r2
 802df20:	4618      	mov	r0, r3
 802df22:	f00d f831 	bl	803af88 <gos_triggerInit>
 802df26:	4603      	mov	r3, r0
            gos_mutexInit        (&adcMutexes[instance])       == GOS_SUCCESS &&
 802df28:	2b55      	cmp	r3, #85	@ 0x55
 802df2a:	d10e      	bne.n	802df4a <drv_adcInitInstance+0x272>
            gos_triggerReset     (&adcReadyTriggers[instance]) == GOS_SUCCESS
 802df2c:	7bba      	ldrb	r2, [r7, #14]
 802df2e:	4613      	mov	r3, r2
 802df30:	005b      	lsls	r3, r3, #1
 802df32:	4413      	add	r3, r2
 802df34:	009b      	lsls	r3, r3, #2
 802df36:	4a0d      	ldr	r2, [pc, #52]	@ (802df6c <drv_adcInitInstance+0x294>)
 802df38:	4413      	add	r3, r2
 802df3a:	4618      	mov	r0, r3
 802df3c:	f00d f840 	bl	803afc0 <gos_triggerReset>
 802df40:	4603      	mov	r3, r0
            gos_triggerInit      (&adcReadyTriggers[instance]) == GOS_SUCCESS   &&
 802df42:	2b55      	cmp	r3, #85	@ 0x55
 802df44:	d101      	bne.n	802df4a <drv_adcInitInstance+0x272>
            )
        {
            adcInitResult = GOS_SUCCESS;
 802df46:	2355      	movs	r3, #85	@ 0x55
 802df48:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return adcInitResult;
 802df4a:	7bfb      	ldrb	r3, [r7, #15]
}
 802df4c:	4618      	mov	r0, r3
 802df4e:	3710      	adds	r7, #16
 802df50:	46bd      	mov	sp, r7
 802df52:	bd80      	pop	{r7, pc}
 802df54:	2000102c 	.word	0x2000102c
 802df58:	24924925 	.word	0x24924925
 802df5c:	0803fa70 	.word	0x0803fa70
 802df60:	200015b8 	.word	0x200015b8
 802df64:	20007180 	.word	0x20007180
 802df68:	20007258 	.word	0x20007258
 802df6c:	20007264 	.word	0x20007264

0802df70 <drv_adcGetValueDMA>:
 */
gos_result_t drv_adcGetValueDMA (
        drv_adcPeriphInstance_t instance, u32_t* pValue, u32_t size,
        u32_t                   mutexTmo, u32_t  triggerTmo
        )
{
 802df70:	b580      	push	{r7, lr}
 802df72:	b086      	sub	sp, #24
 802df74:	af00      	add	r7, sp, #0
 802df76:	60b9      	str	r1, [r7, #8]
 802df78:	607a      	str	r2, [r7, #4]
 802df7a:	603b      	str	r3, [r7, #0]
 802df7c:	4603      	mov	r3, r0
 802df7e:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t adcDriverGetValueResult = GOS_ERROR;
 802df80:	23ae      	movs	r3, #174	@ 0xae
 802df82:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pValue                                               != NULL &&
 802df84:	68bb      	ldr	r3, [r7, #8]
 802df86:	2b00      	cmp	r3, #0
 802df88:	d01b      	beq.n	802dfc2 <drv_adcGetValueDMA+0x52>
        gos_mutexLock(&adcMutexes[instance], mutexTmo)       == GOS_SUCCESS &&
 802df8a:	7bfb      	ldrb	r3, [r7, #15]
 802df8c:	009b      	lsls	r3, r3, #2
 802df8e:	4a13      	ldr	r2, [pc, #76]	@ (802dfdc <drv_adcGetValueDMA+0x6c>)
 802df90:	4413      	add	r3, r2
 802df92:	6839      	ldr	r1, [r7, #0]
 802df94:	4618      	mov	r0, r3
 802df96:	f00a fb5b 	bl	8038650 <gos_mutexLock>
 802df9a:	4603      	mov	r3, r0
    if (pValue                                               != NULL &&
 802df9c:	2b55      	cmp	r3, #85	@ 0x55
 802df9e:	d110      	bne.n	802dfc2 <drv_adcGetValueDMA+0x52>
        HAL_ADC_Start_DMA(&hadcs[instance], pValue, size)    == HAL_OK)
 802dfa0:	7bfa      	ldrb	r2, [r7, #15]
 802dfa2:	4613      	mov	r3, r2
 802dfa4:	00db      	lsls	r3, r3, #3
 802dfa6:	4413      	add	r3, r2
 802dfa8:	00db      	lsls	r3, r3, #3
 802dfaa:	4a0d      	ldr	r2, [pc, #52]	@ (802dfe0 <drv_adcGetValueDMA+0x70>)
 802dfac:	4413      	add	r3, r2
 802dfae:	687a      	ldr	r2, [r7, #4]
 802dfb0:	68b9      	ldr	r1, [r7, #8]
 802dfb2:	4618      	mov	r0, r3
 802dfb4:	f7f7 fb5a 	bl	802566c <HAL_ADC_Start_DMA>
 802dfb8:	4603      	mov	r3, r0
        gos_mutexLock(&adcMutexes[instance], mutexTmo)       == GOS_SUCCESS &&
 802dfba:	2b00      	cmp	r3, #0
 802dfbc:	d101      	bne.n	802dfc2 <drv_adcGetValueDMA+0x52>
    {
        //if (gos_triggerWait(&adcReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
        //	gos_triggerReset(&adcReadyTriggers[instance])               == GOS_SUCCESS)
        {
        	adcDriverGetValueResult = GOS_SUCCESS;
 802dfbe:	2355      	movs	r3, #85	@ 0x55
 802dfc0:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex or ADC error.
    }

    (void_t) gos_mutexUnlock(&adcMutexes[instance]);
 802dfc2:	7bfb      	ldrb	r3, [r7, #15]
 802dfc4:	009b      	lsls	r3, r3, #2
 802dfc6:	4a05      	ldr	r2, [pc, #20]	@ (802dfdc <drv_adcGetValueDMA+0x6c>)
 802dfc8:	4413      	add	r3, r2
 802dfca:	4618      	mov	r0, r3
 802dfcc:	f00a fc46 	bl	803885c <gos_mutexUnlock>

    return adcDriverGetValueResult;
 802dfd0:	7dfb      	ldrb	r3, [r7, #23]
}
 802dfd2:	4618      	mov	r0, r3
 802dfd4:	3718      	adds	r7, #24
 802dfd6:	46bd      	mov	sp, r7
 802dfd8:	bd80      	pop	{r7, pc}
 802dfda:	bf00      	nop
 802dfdc:	20007258 	.word	0x20007258
 802dfe0:	20007180 	.word	0x20007180

0802dfe4 <HAL_ADC_ConvCpltCallback>:

/*
 * Function: HAL_ADC_ConvCpltCallback
 */
void_t HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 802dfe4:	b580      	push	{r7, lr}
 802dfe6:	b082      	sub	sp, #8
 802dfe8:	af00      	add	r7, sp, #0
 802dfea:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hadc->Instance == adcInstanceLut[DRV_ADC_INSTANCE_1])
 802dfec:	687b      	ldr	r3, [r7, #4]
 802dfee:	681a      	ldr	r2, [r3, #0]
 802dff0:	4b0f      	ldr	r3, [pc, #60]	@ (802e030 <HAL_ADC_ConvCpltCallback+0x4c>)
 802dff2:	681b      	ldr	r3, [r3, #0]
 802dff4:	429a      	cmp	r2, r3
 802dff6:	d103      	bne.n	802e000 <HAL_ADC_ConvCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&adcReadyTriggers[DRV_ADC_INSTANCE_1]);
 802dff8:	480e      	ldr	r0, [pc, #56]	@ (802e034 <HAL_ADC_ConvCpltCallback+0x50>)
 802dffa:	f00d f8e9 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802dffe:	e012      	b.n	802e026 <HAL_ADC_ConvCpltCallback+0x42>
    else if (hadc->Instance == adcInstanceLut[DRV_ADC_INSTANCE_2])
 802e000:	687b      	ldr	r3, [r7, #4]
 802e002:	681a      	ldr	r2, [r3, #0]
 802e004:	4b0a      	ldr	r3, [pc, #40]	@ (802e030 <HAL_ADC_ConvCpltCallback+0x4c>)
 802e006:	685b      	ldr	r3, [r3, #4]
 802e008:	429a      	cmp	r2, r3
 802e00a:	d103      	bne.n	802e014 <HAL_ADC_ConvCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&adcReadyTriggers[DRV_ADC_INSTANCE_2]);
 802e00c:	480a      	ldr	r0, [pc, #40]	@ (802e038 <HAL_ADC_ConvCpltCallback+0x54>)
 802e00e:	f00d f8df 	bl	803b1d0 <gos_triggerIncrement>
}
 802e012:	e008      	b.n	802e026 <HAL_ADC_ConvCpltCallback+0x42>
    else if (hadc->Instance == adcInstanceLut[DRV_ADC_INSTANCE_3])
 802e014:	687b      	ldr	r3, [r7, #4]
 802e016:	681a      	ldr	r2, [r3, #0]
 802e018:	4b05      	ldr	r3, [pc, #20]	@ (802e030 <HAL_ADC_ConvCpltCallback+0x4c>)
 802e01a:	689b      	ldr	r3, [r3, #8]
 802e01c:	429a      	cmp	r2, r3
 802e01e:	d102      	bne.n	802e026 <HAL_ADC_ConvCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&adcReadyTriggers[DRV_ADC_INSTANCE_3]);
 802e020:	4806      	ldr	r0, [pc, #24]	@ (802e03c <HAL_ADC_ConvCpltCallback+0x58>)
 802e022:	f00d f8d5 	bl	803b1d0 <gos_triggerIncrement>
}
 802e026:	bf00      	nop
 802e028:	3708      	adds	r7, #8
 802e02a:	46bd      	mov	sp, r7
 802e02c:	bd80      	pop	{r7, pc}
 802e02e:	bf00      	nop
 802e030:	200015b8 	.word	0x200015b8
 802e034:	20007264 	.word	0x20007264
 802e038:	20007270 	.word	0x20007270
 802e03c:	2000727c 	.word	0x2000727c

0802e040 <ADC_IRQHandler>:

/*
 * Function: ADC_IRQHandler
 */
void_t ADC_IRQHandler (void_t)
{
 802e040:	b580      	push	{r7, lr}
 802e042:	b082      	sub	sp, #8
 802e044:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    drv_adcPeriphInstance_t instance = DRV_ADC_INSTANCE_1;
 802e046:	2300      	movs	r3, #0
 802e048:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e04a:	4b1f      	ldr	r3, [pc, #124]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e04c:	781b      	ldrb	r3, [r3, #0]
 802e04e:	2b00      	cmp	r3, #0
 802e050:	d105      	bne.n	802e05e <ADC_IRQHandler+0x1e>
 802e052:	4b1e      	ldr	r3, [pc, #120]	@ (802e0cc <ADC_IRQHandler+0x8c>)
 802e054:	781b      	ldrb	r3, [r3, #0]
 802e056:	3301      	adds	r3, #1
 802e058:	b2da      	uxtb	r2, r3
 802e05a:	4b1c      	ldr	r3, [pc, #112]	@ (802e0cc <ADC_IRQHandler+0x8c>)
 802e05c:	701a      	strb	r2, [r3, #0]
 802e05e:	4b1a      	ldr	r3, [pc, #104]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e060:	781b      	ldrb	r3, [r3, #0]
 802e062:	3301      	adds	r3, #1
 802e064:	b2da      	uxtb	r2, r3
 802e066:	4b18      	ldr	r3, [pc, #96]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e068:	701a      	strb	r2, [r3, #0]

    for (instance = DRV_ADC_INSTANCE_1; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 802e06a:	2300      	movs	r3, #0
 802e06c:	71fb      	strb	r3, [r7, #7]
 802e06e:	e00c      	b.n	802e08a <ADC_IRQHandler+0x4a>
    {
        HAL_ADC_IRQHandler(&hadcs[instance]);
 802e070:	79fa      	ldrb	r2, [r7, #7]
 802e072:	4613      	mov	r3, r2
 802e074:	00db      	lsls	r3, r3, #3
 802e076:	4413      	add	r3, r2
 802e078:	00db      	lsls	r3, r3, #3
 802e07a:	4a15      	ldr	r2, [pc, #84]	@ (802e0d0 <ADC_IRQHandler+0x90>)
 802e07c:	4413      	add	r3, r2
 802e07e:	4618      	mov	r0, r3
 802e080:	f7f7 f9b3 	bl	80253ea <HAL_ADC_IRQHandler>
    for (instance = DRV_ADC_INSTANCE_1; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 802e084:	79fb      	ldrb	r3, [r7, #7]
 802e086:	3301      	adds	r3, #1
 802e088:	71fb      	strb	r3, [r7, #7]
 802e08a:	79fb      	ldrb	r3, [r7, #7]
 802e08c:	2b02      	cmp	r3, #2
 802e08e:	d9ef      	bls.n	802e070 <ADC_IRQHandler+0x30>
    }

    GOS_ISR_EXIT
 802e090:	4b0d      	ldr	r3, [pc, #52]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e092:	781b      	ldrb	r3, [r3, #0]
 802e094:	2b00      	cmp	r3, #0
 802e096:	d005      	beq.n	802e0a4 <ADC_IRQHandler+0x64>
 802e098:	4b0b      	ldr	r3, [pc, #44]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e09a:	781b      	ldrb	r3, [r3, #0]
 802e09c:	3b01      	subs	r3, #1
 802e09e:	b2da      	uxtb	r2, r3
 802e0a0:	4b09      	ldr	r3, [pc, #36]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e0a2:	701a      	strb	r2, [r3, #0]
 802e0a4:	4b08      	ldr	r3, [pc, #32]	@ (802e0c8 <ADC_IRQHandler+0x88>)
 802e0a6:	781b      	ldrb	r3, [r3, #0]
 802e0a8:	2b00      	cmp	r3, #0
 802e0aa:	d109      	bne.n	802e0c0 <ADC_IRQHandler+0x80>
 802e0ac:	4b07      	ldr	r3, [pc, #28]	@ (802e0cc <ADC_IRQHandler+0x8c>)
 802e0ae:	781b      	ldrb	r3, [r3, #0]
 802e0b0:	2b00      	cmp	r3, #0
 802e0b2:	d005      	beq.n	802e0c0 <ADC_IRQHandler+0x80>
 802e0b4:	4b05      	ldr	r3, [pc, #20]	@ (802e0cc <ADC_IRQHandler+0x8c>)
 802e0b6:	781b      	ldrb	r3, [r3, #0]
 802e0b8:	3b01      	subs	r3, #1
 802e0ba:	b2da      	uxtb	r2, r3
 802e0bc:	4b03      	ldr	r3, [pc, #12]	@ (802e0cc <ADC_IRQHandler+0x8c>)
 802e0be:	701a      	strb	r2, [r3, #0]
}
 802e0c0:	bf00      	nop
 802e0c2:	3708      	adds	r7, #8
 802e0c4:	46bd      	mov	sp, r7
 802e0c6:	bd80      	pop	{r7, pc}
 802e0c8:	2000b312 	.word	0x2000b312
 802e0cc:	2000b311 	.word	0x2000b311
 802e0d0:	20007180 	.word	0x20007180

0802e0d4 <HAL_ADC_MspInit>:

/*
 * Function: HAL_ADC_MspInit
 */
void_t HAL_ADC_MspInit (ADC_HandleTypeDef* hadc)
{
 802e0d4:	b480      	push	{r7}
 802e0d6:	b085      	sub	sp, #20
 802e0d8:	af00      	add	r7, sp, #0
 802e0da:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_adcPeriphInstance_t instance = 0u;
 802e0dc:	2300      	movs	r3, #0
 802e0de:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 802e0e0:	2300      	movs	r3, #0
 802e0e2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 802e0e4:	2300      	movs	r3, #0
 802e0e6:	73fb      	strb	r3, [r7, #15]
 802e0e8:	e046      	b.n	802e178 <HAL_ADC_MspInit+0xa4>
    {
        if (adcInstanceLut[instance] == hadc->Instance)
 802e0ea:	7bfb      	ldrb	r3, [r7, #15]
 802e0ec:	4a27      	ldr	r2, [pc, #156]	@ (802e18c <HAL_ADC_MspInit+0xb8>)
 802e0ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802e0f2:	687b      	ldr	r3, [r7, #4]
 802e0f4:	681b      	ldr	r3, [r3, #0]
 802e0f6:	429a      	cmp	r2, r3
 802e0f8:	d13b      	bne.n	802e172 <HAL_ADC_MspInit+0x9e>
        {
            for (idx = 0u; idx < adcConfigSize / sizeof(drv_adcDescriptor_t); idx++)
 802e0fa:	2300      	movs	r3, #0
 802e0fc:	73bb      	strb	r3, [r7, #14]
 802e0fe:	e02f      	b.n	802e160 <HAL_ADC_MspInit+0x8c>
            {
                if (adcConfig[idx].periphInstance == instance)
 802e100:	7bba      	ldrb	r2, [r7, #14]
 802e102:	4923      	ldr	r1, [pc, #140]	@ (802e190 <HAL_ADC_MspInit+0xbc>)
 802e104:	4613      	mov	r3, r2
 802e106:	00db      	lsls	r3, r3, #3
 802e108:	1a9b      	subs	r3, r3, r2
 802e10a:	00db      	lsls	r3, r3, #3
 802e10c:	440b      	add	r3, r1
 802e10e:	781b      	ldrb	r3, [r3, #0]
 802e110:	7bfa      	ldrb	r2, [r7, #15]
 802e112:	429a      	cmp	r2, r3
 802e114:	d121      	bne.n	802e15a <HAL_ADC_MspInit+0x86>
                {
                    if (adcConfig[idx].dmaConfig != NULL)
 802e116:	7bba      	ldrb	r2, [r7, #14]
 802e118:	491d      	ldr	r1, [pc, #116]	@ (802e190 <HAL_ADC_MspInit+0xbc>)
 802e11a:	4613      	mov	r3, r2
 802e11c:	00db      	lsls	r3, r3, #3
 802e11e:	1a9b      	subs	r3, r3, r2
 802e120:	00db      	lsls	r3, r3, #3
 802e122:	440b      	add	r3, r1
 802e124:	3334      	adds	r3, #52	@ 0x34
 802e126:	681b      	ldr	r3, [r3, #0]
 802e128:	2b00      	cmp	r3, #0
 802e12a:	d016      	beq.n	802e15a <HAL_ADC_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hadc, DMA_Handle, adcConfig[idx].dmaConfig->hdma);
 802e12c:	7bba      	ldrb	r2, [r7, #14]
 802e12e:	4918      	ldr	r1, [pc, #96]	@ (802e190 <HAL_ADC_MspInit+0xbc>)
 802e130:	4613      	mov	r3, r2
 802e132:	00db      	lsls	r3, r3, #3
 802e134:	1a9b      	subs	r3, r3, r2
 802e136:	00db      	lsls	r3, r3, #3
 802e138:	440b      	add	r3, r1
 802e13a:	3334      	adds	r3, #52	@ 0x34
 802e13c:	681b      	ldr	r3, [r3, #0]
 802e13e:	1d1a      	adds	r2, r3, #4
 802e140:	687b      	ldr	r3, [r7, #4]
 802e142:	639a      	str	r2, [r3, #56]	@ 0x38
 802e144:	7bba      	ldrb	r2, [r7, #14]
 802e146:	4912      	ldr	r1, [pc, #72]	@ (802e190 <HAL_ADC_MspInit+0xbc>)
 802e148:	4613      	mov	r3, r2
 802e14a:	00db      	lsls	r3, r3, #3
 802e14c:	1a9b      	subs	r3, r3, r2
 802e14e:	00db      	lsls	r3, r3, #3
 802e150:	440b      	add	r3, r1
 802e152:	3334      	adds	r3, #52	@ 0x34
 802e154:	681b      	ldr	r3, [r3, #0]
 802e156:	687a      	ldr	r2, [r7, #4]
 802e158:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < adcConfigSize / sizeof(drv_adcDescriptor_t); idx++)
 802e15a:	7bbb      	ldrb	r3, [r7, #14]
 802e15c:	3301      	adds	r3, #1
 802e15e:	73bb      	strb	r3, [r7, #14]
 802e160:	7bbb      	ldrb	r3, [r7, #14]
 802e162:	4a0c      	ldr	r2, [pc, #48]	@ (802e194 <HAL_ADC_MspInit+0xc0>)
 802e164:	6812      	ldr	r2, [r2, #0]
 802e166:	08d2      	lsrs	r2, r2, #3
 802e168:	490b      	ldr	r1, [pc, #44]	@ (802e198 <HAL_ADC_MspInit+0xc4>)
 802e16a:	fba1 1202 	umull	r1, r2, r1, r2
 802e16e:	4293      	cmp	r3, r2
 802e170:	d3c6      	bcc.n	802e100 <HAL_ADC_MspInit+0x2c>
    for (instance = 0u; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 802e172:	7bfb      	ldrb	r3, [r7, #15]
 802e174:	3301      	adds	r3, #1
 802e176:	73fb      	strb	r3, [r7, #15]
 802e178:	7bfb      	ldrb	r3, [r7, #15]
 802e17a:	2b02      	cmp	r3, #2
 802e17c:	d9b5      	bls.n	802e0ea <HAL_ADC_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 802e17e:	bf00      	nop
 802e180:	bf00      	nop
 802e182:	3714      	adds	r7, #20
 802e184:	46bd      	mov	sp, r7
 802e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e18a:	4770      	bx	lr
 802e18c:	200015b8 	.word	0x200015b8
 802e190:	0803fa70 	.word	0x0803fa70
 802e194:	2000102c 	.word	0x2000102c
 802e198:	24924925 	.word	0x24924925

0802e19c <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 802e19c:	b480      	push	{r7}
 802e19e:	b089      	sub	sp, #36	@ 0x24
 802e1a0:	af00      	add	r7, sp, #0
 802e1a2:	60f8      	str	r0, [r7, #12]
 802e1a4:	60b9      	str	r1, [r7, #8]
 802e1a6:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 802e1a8:	23ae      	movs	r3, #174	@ 0xae
 802e1aa:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 802e1ac:	2300      	movs	r3, #0
 802e1ae:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 802e1b0:	2300      	movs	r3, #0
 802e1b2:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 802e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 802e1b8:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 802e1ba:	68fb      	ldr	r3, [r7, #12]
 802e1bc:	2b00      	cmp	r3, #0
 802e1be:	d030      	beq.n	802e222 <drv_crcGetCrc32+0x86>
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	2b00      	cmp	r3, #0
 802e1c4:	d02d      	beq.n	802e222 <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 802e1c6:	2300      	movs	r3, #0
 802e1c8:	61bb      	str	r3, [r7, #24]
 802e1ca:	e021      	b.n	802e210 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 802e1cc:	68fa      	ldr	r2, [r7, #12]
 802e1ce:	69bb      	ldr	r3, [r7, #24]
 802e1d0:	4413      	add	r3, r2
 802e1d2:	781b      	ldrb	r3, [r3, #0]
 802e1d4:	461a      	mov	r2, r3
 802e1d6:	693b      	ldr	r3, [r7, #16]
 802e1d8:	4053      	eors	r3, r2
 802e1da:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 802e1dc:	2300      	movs	r3, #0
 802e1de:	75fb      	strb	r3, [r7, #23]
 802e1e0:	e010      	b.n	802e204 <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 802e1e2:	693b      	ldr	r3, [r7, #16]
 802e1e4:	2b00      	cmp	r3, #0
 802e1e6:	da07      	bge.n	802e1f8 <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 802e1e8:	693b      	ldr	r3, [r7, #16]
 802e1ea:	005b      	lsls	r3, r3, #1
 802e1ec:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 802e1ee:	693a      	ldr	r2, [r7, #16]
 802e1f0:	4b0f      	ldr	r3, [pc, #60]	@ (802e230 <drv_crcGetCrc32+0x94>)
 802e1f2:	4053      	eors	r3, r2
 802e1f4:	613b      	str	r3, [r7, #16]
 802e1f6:	e002      	b.n	802e1fe <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 802e1f8:	693b      	ldr	r3, [r7, #16]
 802e1fa:	005b      	lsls	r3, r3, #1
 802e1fc:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 802e1fe:	7dfb      	ldrb	r3, [r7, #23]
 802e200:	3301      	adds	r3, #1
 802e202:	75fb      	strb	r3, [r7, #23]
 802e204:	7dfb      	ldrb	r3, [r7, #23]
 802e206:	2b1f      	cmp	r3, #31
 802e208:	d9eb      	bls.n	802e1e2 <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 802e20a:	69bb      	ldr	r3, [r7, #24]
 802e20c:	3301      	adds	r3, #1
 802e20e:	61bb      	str	r3, [r7, #24]
 802e210:	69ba      	ldr	r2, [r7, #24]
 802e212:	68bb      	ldr	r3, [r7, #8]
 802e214:	429a      	cmp	r2, r3
 802e216:	d3d9      	bcc.n	802e1cc <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 802e218:	687b      	ldr	r3, [r7, #4]
 802e21a:	693a      	ldr	r2, [r7, #16]
 802e21c:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 802e21e:	2355      	movs	r3, #85	@ 0x55
 802e220:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 802e222:	7ffb      	ldrb	r3, [r7, #31]
}
 802e224:	4618      	mov	r0, r3
 802e226:	3724      	adds	r7, #36	@ 0x24
 802e228:	46bd      	mov	sp, r7
 802e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e22e:	4770      	bx	lr
 802e230:	04c11db7 	.word	0x04c11db7

0802e234 <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 802e234:	b580      	push	{r7, lr}
 802e236:	b086      	sub	sp, #24
 802e238:	af00      	add	r7, sp, #0
 802e23a:	60f8      	str	r0, [r7, #12]
 802e23c:	60b9      	str	r1, [r7, #8]
 802e23e:	607a      	str	r2, [r7, #4]
 802e240:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 802e242:	239c      	movs	r3, #156	@ 0x9c
 802e244:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 802e246:	2300      	movs	r3, #0
 802e248:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 802e24a:	68fb      	ldr	r3, [r7, #12]
 802e24c:	2b00      	cmp	r3, #0
 802e24e:	d015      	beq.n	802e27c <drv_crcCheckCrc32+0x48>
 802e250:	f107 0310 	add.w	r3, r7, #16
 802e254:	461a      	mov	r2, r3
 802e256:	68b9      	ldr	r1, [r7, #8]
 802e258:	68f8      	ldr	r0, [r7, #12]
 802e25a:	f7ff ff9f 	bl	802e19c <drv_crcGetCrc32>
 802e25e:	4603      	mov	r3, r0
 802e260:	2b55      	cmp	r3, #85	@ 0x55
 802e262:	d10b      	bne.n	802e27c <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 802e264:	693b      	ldr	r3, [r7, #16]
 802e266:	687a      	ldr	r2, [r7, #4]
 802e268:	429a      	cmp	r2, r3
 802e26a:	d101      	bne.n	802e270 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 802e26c:	23ca      	movs	r3, #202	@ 0xca
 802e26e:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 802e270:	683b      	ldr	r3, [r7, #0]
 802e272:	2b00      	cmp	r3, #0
 802e274:	d002      	beq.n	802e27c <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 802e276:	693a      	ldr	r2, [r7, #16]
 802e278:	683b      	ldr	r3, [r7, #0]
 802e27a:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 802e27c:	7dfb      	ldrb	r3, [r7, #23]
}
 802e27e:	4618      	mov	r0, r3
 802e280:	3718      	adds	r7, #24
 802e282:	46bd      	mov	sp, r7
 802e284:	bd80      	pop	{r7, pc}
	...

0802e288 <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 802e288:	b580      	push	{r7, lr}
 802e28a:	b082      	sub	sp, #8
 802e28c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 802e28e:	2355      	movs	r3, #85	@ 0x55
 802e290:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 802e292:	2300      	movs	r3, #0
 802e294:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 802e296:	2300      	movs	r3, #0
 802e298:	71bb      	strb	r3, [r7, #6]
 802e29a:	e0c9      	b.n	802e430 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 802e29c:	79ba      	ldrb	r2, [r7, #6]
 802e29e:	496c      	ldr	r1, [pc, #432]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e2a0:	4613      	mov	r3, r2
 802e2a2:	011b      	lsls	r3, r3, #4
 802e2a4:	4413      	add	r3, r2
 802e2a6:	00db      	lsls	r3, r3, #3
 802e2a8:	440b      	add	r3, r1
 802e2aa:	781b      	ldrb	r3, [r3, #0]
 802e2ac:	4619      	mov	r1, r3
 802e2ae:	79ba      	ldrb	r2, [r7, #6]
 802e2b0:	4b68      	ldr	r3, [pc, #416]	@ (802e454 <drv_dmaInit+0x1cc>)
 802e2b2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 802e2b6:	4866      	ldr	r0, [pc, #408]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e2b8:	4613      	mov	r3, r2
 802e2ba:	011b      	lsls	r3, r3, #4
 802e2bc:	4413      	add	r3, r2
 802e2be:	00db      	lsls	r3, r3, #3
 802e2c0:	4403      	add	r3, r0
 802e2c2:	3304      	adds	r3, #4
 802e2c4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 802e2c6:	79b9      	ldrb	r1, [r7, #6]
 802e2c8:	79ba      	ldrb	r2, [r7, #6]
 802e2ca:	4861      	ldr	r0, [pc, #388]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e2cc:	460b      	mov	r3, r1
 802e2ce:	011b      	lsls	r3, r3, #4
 802e2d0:	440b      	add	r3, r1
 802e2d2:	00db      	lsls	r3, r3, #3
 802e2d4:	4403      	add	r3, r0
 802e2d6:	3364      	adds	r3, #100	@ 0x64
 802e2d8:	6819      	ldr	r1, [r3, #0]
 802e2da:	485d      	ldr	r0, [pc, #372]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e2dc:	4613      	mov	r3, r2
 802e2de:	011b      	lsls	r3, r3, #4
 802e2e0:	4413      	add	r3, r2
 802e2e2:	00db      	lsls	r3, r3, #3
 802e2e4:	4403      	add	r3, r0
 802e2e6:	3308      	adds	r3, #8
 802e2e8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 802e2ea:	79b9      	ldrb	r1, [r7, #6]
 802e2ec:	79ba      	ldrb	r2, [r7, #6]
 802e2ee:	4858      	ldr	r0, [pc, #352]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e2f0:	460b      	mov	r3, r1
 802e2f2:	011b      	lsls	r3, r3, #4
 802e2f4:	440b      	add	r3, r1
 802e2f6:	00db      	lsls	r3, r3, #3
 802e2f8:	4403      	add	r3, r0
 802e2fa:	3368      	adds	r3, #104	@ 0x68
 802e2fc:	6819      	ldr	r1, [r3, #0]
 802e2fe:	4854      	ldr	r0, [pc, #336]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e300:	4613      	mov	r3, r2
 802e302:	011b      	lsls	r3, r3, #4
 802e304:	4413      	add	r3, r2
 802e306:	00db      	lsls	r3, r3, #3
 802e308:	4403      	add	r3, r0
 802e30a:	330c      	adds	r3, #12
 802e30c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 802e30e:	79b9      	ldrb	r1, [r7, #6]
 802e310:	79ba      	ldrb	r2, [r7, #6]
 802e312:	484f      	ldr	r0, [pc, #316]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e314:	460b      	mov	r3, r1
 802e316:	011b      	lsls	r3, r3, #4
 802e318:	440b      	add	r3, r1
 802e31a:	00db      	lsls	r3, r3, #3
 802e31c:	4403      	add	r3, r0
 802e31e:	336c      	adds	r3, #108	@ 0x6c
 802e320:	6819      	ldr	r1, [r3, #0]
 802e322:	484b      	ldr	r0, [pc, #300]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e324:	4613      	mov	r3, r2
 802e326:	011b      	lsls	r3, r3, #4
 802e328:	4413      	add	r3, r2
 802e32a:	00db      	lsls	r3, r3, #3
 802e32c:	4403      	add	r3, r0
 802e32e:	3310      	adds	r3, #16
 802e330:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 802e332:	79b9      	ldrb	r1, [r7, #6]
 802e334:	79ba      	ldrb	r2, [r7, #6]
 802e336:	4846      	ldr	r0, [pc, #280]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e338:	460b      	mov	r3, r1
 802e33a:	011b      	lsls	r3, r3, #4
 802e33c:	440b      	add	r3, r1
 802e33e:	00db      	lsls	r3, r3, #3
 802e340:	4403      	add	r3, r0
 802e342:	3370      	adds	r3, #112	@ 0x70
 802e344:	6819      	ldr	r1, [r3, #0]
 802e346:	4842      	ldr	r0, [pc, #264]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e348:	4613      	mov	r3, r2
 802e34a:	011b      	lsls	r3, r3, #4
 802e34c:	4413      	add	r3, r2
 802e34e:	00db      	lsls	r3, r3, #3
 802e350:	4403      	add	r3, r0
 802e352:	3314      	adds	r3, #20
 802e354:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 802e356:	79b9      	ldrb	r1, [r7, #6]
 802e358:	79ba      	ldrb	r2, [r7, #6]
 802e35a:	483d      	ldr	r0, [pc, #244]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e35c:	460b      	mov	r3, r1
 802e35e:	011b      	lsls	r3, r3, #4
 802e360:	440b      	add	r3, r1
 802e362:	00db      	lsls	r3, r3, #3
 802e364:	4403      	add	r3, r0
 802e366:	3374      	adds	r3, #116	@ 0x74
 802e368:	6819      	ldr	r1, [r3, #0]
 802e36a:	4839      	ldr	r0, [pc, #228]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e36c:	4613      	mov	r3, r2
 802e36e:	011b      	lsls	r3, r3, #4
 802e370:	4413      	add	r3, r2
 802e372:	00db      	lsls	r3, r3, #3
 802e374:	4403      	add	r3, r0
 802e376:	3318      	adds	r3, #24
 802e378:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 802e37a:	79b9      	ldrb	r1, [r7, #6]
 802e37c:	79ba      	ldrb	r2, [r7, #6]
 802e37e:	4834      	ldr	r0, [pc, #208]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e380:	460b      	mov	r3, r1
 802e382:	011b      	lsls	r3, r3, #4
 802e384:	440b      	add	r3, r1
 802e386:	00db      	lsls	r3, r3, #3
 802e388:	4403      	add	r3, r0
 802e38a:	3378      	adds	r3, #120	@ 0x78
 802e38c:	6819      	ldr	r1, [r3, #0]
 802e38e:	4830      	ldr	r0, [pc, #192]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e390:	4613      	mov	r3, r2
 802e392:	011b      	lsls	r3, r3, #4
 802e394:	4413      	add	r3, r2
 802e396:	00db      	lsls	r3, r3, #3
 802e398:	4403      	add	r3, r0
 802e39a:	331c      	adds	r3, #28
 802e39c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 802e39e:	79b9      	ldrb	r1, [r7, #6]
 802e3a0:	79ba      	ldrb	r2, [r7, #6]
 802e3a2:	482b      	ldr	r0, [pc, #172]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e3a4:	460b      	mov	r3, r1
 802e3a6:	011b      	lsls	r3, r3, #4
 802e3a8:	440b      	add	r3, r1
 802e3aa:	00db      	lsls	r3, r3, #3
 802e3ac:	4403      	add	r3, r0
 802e3ae:	337c      	adds	r3, #124	@ 0x7c
 802e3b0:	6819      	ldr	r1, [r3, #0]
 802e3b2:	4827      	ldr	r0, [pc, #156]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e3b4:	4613      	mov	r3, r2
 802e3b6:	011b      	lsls	r3, r3, #4
 802e3b8:	4413      	add	r3, r2
 802e3ba:	00db      	lsls	r3, r3, #3
 802e3bc:	4403      	add	r3, r0
 802e3be:	3320      	adds	r3, #32
 802e3c0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 802e3c2:	79b9      	ldrb	r1, [r7, #6]
 802e3c4:	79ba      	ldrb	r2, [r7, #6]
 802e3c6:	4822      	ldr	r0, [pc, #136]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e3c8:	460b      	mov	r3, r1
 802e3ca:	011b      	lsls	r3, r3, #4
 802e3cc:	440b      	add	r3, r1
 802e3ce:	00db      	lsls	r3, r3, #3
 802e3d0:	4403      	add	r3, r0
 802e3d2:	3380      	adds	r3, #128	@ 0x80
 802e3d4:	6819      	ldr	r1, [r3, #0]
 802e3d6:	481e      	ldr	r0, [pc, #120]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e3d8:	4613      	mov	r3, r2
 802e3da:	011b      	lsls	r3, r3, #4
 802e3dc:	4413      	add	r3, r2
 802e3de:	00db      	lsls	r3, r3, #3
 802e3e0:	4403      	add	r3, r0
 802e3e2:	3324      	adds	r3, #36	@ 0x24
 802e3e4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 802e3e6:	79b9      	ldrb	r1, [r7, #6]
 802e3e8:	79ba      	ldrb	r2, [r7, #6]
 802e3ea:	4819      	ldr	r0, [pc, #100]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e3ec:	460b      	mov	r3, r1
 802e3ee:	011b      	lsls	r3, r3, #4
 802e3f0:	440b      	add	r3, r1
 802e3f2:	00db      	lsls	r3, r3, #3
 802e3f4:	4403      	add	r3, r0
 802e3f6:	3384      	adds	r3, #132	@ 0x84
 802e3f8:	6819      	ldr	r1, [r3, #0]
 802e3fa:	4815      	ldr	r0, [pc, #84]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e3fc:	4613      	mov	r3, r2
 802e3fe:	011b      	lsls	r3, r3, #4
 802e400:	4413      	add	r3, r2
 802e402:	00db      	lsls	r3, r3, #3
 802e404:	4403      	add	r3, r0
 802e406:	3328      	adds	r3, #40	@ 0x28
 802e408:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 802e40a:	79ba      	ldrb	r2, [r7, #6]
 802e40c:	4613      	mov	r3, r2
 802e40e:	011b      	lsls	r3, r3, #4
 802e410:	4413      	add	r3, r2
 802e412:	00db      	lsls	r3, r3, #3
 802e414:	4a0e      	ldr	r2, [pc, #56]	@ (802e450 <drv_dmaInit+0x1c8>)
 802e416:	4413      	add	r3, r2
 802e418:	3304      	adds	r3, #4
 802e41a:	4618      	mov	r0, r3
 802e41c:	f7f7 fe02 	bl	8026024 <HAL_DMA_Init>
 802e420:	4603      	mov	r3, r0
 802e422:	2b00      	cmp	r3, #0
 802e424:	d001      	beq.n	802e42a <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 802e426:	23ae      	movs	r3, #174	@ 0xae
 802e428:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 802e42a:	79bb      	ldrb	r3, [r7, #6]
 802e42c:	3301      	adds	r3, #1
 802e42e:	71bb      	strb	r3, [r7, #6]
 802e430:	79ba      	ldrb	r2, [r7, #6]
 802e432:	4b09      	ldr	r3, [pc, #36]	@ (802e458 <drv_dmaInit+0x1d0>)
 802e434:	681b      	ldr	r3, [r3, #0]
 802e436:	4909      	ldr	r1, [pc, #36]	@ (802e45c <drv_dmaInit+0x1d4>)
 802e438:	fba1 1303 	umull	r1, r3, r1, r3
 802e43c:	09db      	lsrs	r3, r3, #7
 802e43e:	429a      	cmp	r2, r3
 802e440:	f4ff af2c 	bcc.w	802e29c <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 802e444:	79fb      	ldrb	r3, [r7, #7]
}
 802e446:	4618      	mov	r0, r3
 802e448:	3708      	adds	r7, #8
 802e44a:	46bd      	mov	sp, r7
 802e44c:	bd80      	pop	{r7, pc}
 802e44e:	bf00      	nop
 802e450:	20001034 	.word	0x20001034
 802e454:	200015c4 	.word	0x200015c4
 802e458:	200012dc 	.word	0x200012dc
 802e45c:	f0f0f0f1 	.word	0xf0f0f0f1

0802e460 <drv_dmaIsBusy>:

/*
 * Function: drv_dmaIsBusy
 */
bool_t drv_dmaIsBusy (drv_dmaDescriptor_t* pDMA)
{
 802e460:	b580      	push	{r7, lr}
 802e462:	b082      	sub	sp, #8
 802e464:	af00      	add	r7, sp, #0
 802e466:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    return HAL_DMA_STATE_BUSY == HAL_DMA_GetState(&pDMA->hdma) ? GOS_TRUE : GOS_FALSE;
 802e468:	687b      	ldr	r3, [r7, #4]
 802e46a:	3304      	adds	r3, #4
 802e46c:	4618      	mov	r0, r3
 802e46e:	f7f8 f8fb 	bl	8026668 <HAL_DMA_GetState>
 802e472:	4603      	mov	r3, r0
 802e474:	2b02      	cmp	r3, #2
 802e476:	d101      	bne.n	802e47c <drv_dmaIsBusy+0x1c>
 802e478:	2336      	movs	r3, #54	@ 0x36
 802e47a:	e000      	b.n	802e47e <drv_dmaIsBusy+0x1e>
 802e47c:	2349      	movs	r3, #73	@ 0x49
}
 802e47e:	4618      	mov	r0, r3
 802e480:	3708      	adds	r7, #8
 802e482:	46bd      	mov	sp, r7
 802e484:	bd80      	pop	{r7, pc}
	...

0802e488 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 802e488:	b580      	push	{r7, lr}
 802e48a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e48c:	4b19      	ldr	r3, [pc, #100]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e48e:	781b      	ldrb	r3, [r3, #0]
 802e490:	2b00      	cmp	r3, #0
 802e492:	d105      	bne.n	802e4a0 <DMA1_Stream0_IRQHandler+0x18>
 802e494:	4b18      	ldr	r3, [pc, #96]	@ (802e4f8 <DMA1_Stream0_IRQHandler+0x70>)
 802e496:	781b      	ldrb	r3, [r3, #0]
 802e498:	3301      	adds	r3, #1
 802e49a:	b2da      	uxtb	r2, r3
 802e49c:	4b16      	ldr	r3, [pc, #88]	@ (802e4f8 <DMA1_Stream0_IRQHandler+0x70>)
 802e49e:	701a      	strb	r2, [r3, #0]
 802e4a0:	4b14      	ldr	r3, [pc, #80]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e4a2:	781b      	ldrb	r3, [r3, #0]
 802e4a4:	3301      	adds	r3, #1
 802e4a6:	b2da      	uxtb	r2, r3
 802e4a8:	4b12      	ldr	r3, [pc, #72]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e4aa:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 802e4ac:	4b13      	ldr	r3, [pc, #76]	@ (802e4fc <DMA1_Stream0_IRQHandler+0x74>)
 802e4ae:	681b      	ldr	r3, [r3, #0]
 802e4b0:	2b00      	cmp	r3, #0
 802e4b2:	d005      	beq.n	802e4c0 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 802e4b4:	4b11      	ldr	r3, [pc, #68]	@ (802e4fc <DMA1_Stream0_IRQHandler+0x74>)
 802e4b6:	681b      	ldr	r3, [r3, #0]
 802e4b8:	3304      	adds	r3, #4
 802e4ba:	4618      	mov	r0, r3
 802e4bc:	f7f7 ff4a 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e4c0:	4b0c      	ldr	r3, [pc, #48]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e4c2:	781b      	ldrb	r3, [r3, #0]
 802e4c4:	2b00      	cmp	r3, #0
 802e4c6:	d005      	beq.n	802e4d4 <DMA1_Stream0_IRQHandler+0x4c>
 802e4c8:	4b0a      	ldr	r3, [pc, #40]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e4ca:	781b      	ldrb	r3, [r3, #0]
 802e4cc:	3b01      	subs	r3, #1
 802e4ce:	b2da      	uxtb	r2, r3
 802e4d0:	4b08      	ldr	r3, [pc, #32]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e4d2:	701a      	strb	r2, [r3, #0]
 802e4d4:	4b07      	ldr	r3, [pc, #28]	@ (802e4f4 <DMA1_Stream0_IRQHandler+0x6c>)
 802e4d6:	781b      	ldrb	r3, [r3, #0]
 802e4d8:	2b00      	cmp	r3, #0
 802e4da:	d109      	bne.n	802e4f0 <DMA1_Stream0_IRQHandler+0x68>
 802e4dc:	4b06      	ldr	r3, [pc, #24]	@ (802e4f8 <DMA1_Stream0_IRQHandler+0x70>)
 802e4de:	781b      	ldrb	r3, [r3, #0]
 802e4e0:	2b00      	cmp	r3, #0
 802e4e2:	d005      	beq.n	802e4f0 <DMA1_Stream0_IRQHandler+0x68>
 802e4e4:	4b04      	ldr	r3, [pc, #16]	@ (802e4f8 <DMA1_Stream0_IRQHandler+0x70>)
 802e4e6:	781b      	ldrb	r3, [r3, #0]
 802e4e8:	3b01      	subs	r3, #1
 802e4ea:	b2da      	uxtb	r2, r3
 802e4ec:	4b02      	ldr	r3, [pc, #8]	@ (802e4f8 <DMA1_Stream0_IRQHandler+0x70>)
 802e4ee:	701a      	strb	r2, [r3, #0]
}
 802e4f0:	bf00      	nop
 802e4f2:	bd80      	pop	{r7, pc}
 802e4f4:	2000b312 	.word	0x2000b312
 802e4f8:	2000b311 	.word	0x2000b311
 802e4fc:	200012e0 	.word	0x200012e0

0802e500 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 802e500:	b580      	push	{r7, lr}
 802e502:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e504:	4b19      	ldr	r3, [pc, #100]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e506:	781b      	ldrb	r3, [r3, #0]
 802e508:	2b00      	cmp	r3, #0
 802e50a:	d105      	bne.n	802e518 <DMA1_Stream1_IRQHandler+0x18>
 802e50c:	4b18      	ldr	r3, [pc, #96]	@ (802e570 <DMA1_Stream1_IRQHandler+0x70>)
 802e50e:	781b      	ldrb	r3, [r3, #0]
 802e510:	3301      	adds	r3, #1
 802e512:	b2da      	uxtb	r2, r3
 802e514:	4b16      	ldr	r3, [pc, #88]	@ (802e570 <DMA1_Stream1_IRQHandler+0x70>)
 802e516:	701a      	strb	r2, [r3, #0]
 802e518:	4b14      	ldr	r3, [pc, #80]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e51a:	781b      	ldrb	r3, [r3, #0]
 802e51c:	3301      	adds	r3, #1
 802e51e:	b2da      	uxtb	r2, r3
 802e520:	4b12      	ldr	r3, [pc, #72]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e522:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 802e524:	4b13      	ldr	r3, [pc, #76]	@ (802e574 <DMA1_Stream1_IRQHandler+0x74>)
 802e526:	685b      	ldr	r3, [r3, #4]
 802e528:	2b00      	cmp	r3, #0
 802e52a:	d005      	beq.n	802e538 <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 802e52c:	4b11      	ldr	r3, [pc, #68]	@ (802e574 <DMA1_Stream1_IRQHandler+0x74>)
 802e52e:	685b      	ldr	r3, [r3, #4]
 802e530:	3304      	adds	r3, #4
 802e532:	4618      	mov	r0, r3
 802e534:	f7f7 ff0e 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e538:	4b0c      	ldr	r3, [pc, #48]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e53a:	781b      	ldrb	r3, [r3, #0]
 802e53c:	2b00      	cmp	r3, #0
 802e53e:	d005      	beq.n	802e54c <DMA1_Stream1_IRQHandler+0x4c>
 802e540:	4b0a      	ldr	r3, [pc, #40]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e542:	781b      	ldrb	r3, [r3, #0]
 802e544:	3b01      	subs	r3, #1
 802e546:	b2da      	uxtb	r2, r3
 802e548:	4b08      	ldr	r3, [pc, #32]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e54a:	701a      	strb	r2, [r3, #0]
 802e54c:	4b07      	ldr	r3, [pc, #28]	@ (802e56c <DMA1_Stream1_IRQHandler+0x6c>)
 802e54e:	781b      	ldrb	r3, [r3, #0]
 802e550:	2b00      	cmp	r3, #0
 802e552:	d109      	bne.n	802e568 <DMA1_Stream1_IRQHandler+0x68>
 802e554:	4b06      	ldr	r3, [pc, #24]	@ (802e570 <DMA1_Stream1_IRQHandler+0x70>)
 802e556:	781b      	ldrb	r3, [r3, #0]
 802e558:	2b00      	cmp	r3, #0
 802e55a:	d005      	beq.n	802e568 <DMA1_Stream1_IRQHandler+0x68>
 802e55c:	4b04      	ldr	r3, [pc, #16]	@ (802e570 <DMA1_Stream1_IRQHandler+0x70>)
 802e55e:	781b      	ldrb	r3, [r3, #0]
 802e560:	3b01      	subs	r3, #1
 802e562:	b2da      	uxtb	r2, r3
 802e564:	4b02      	ldr	r3, [pc, #8]	@ (802e570 <DMA1_Stream1_IRQHandler+0x70>)
 802e566:	701a      	strb	r2, [r3, #0]
}
 802e568:	bf00      	nop
 802e56a:	bd80      	pop	{r7, pc}
 802e56c:	2000b312 	.word	0x2000b312
 802e570:	2000b311 	.word	0x2000b311
 802e574:	200012e0 	.word	0x200012e0

0802e578 <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 802e578:	b580      	push	{r7, lr}
 802e57a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e57c:	4b19      	ldr	r3, [pc, #100]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e57e:	781b      	ldrb	r3, [r3, #0]
 802e580:	2b00      	cmp	r3, #0
 802e582:	d105      	bne.n	802e590 <DMA1_Stream2_IRQHandler+0x18>
 802e584:	4b18      	ldr	r3, [pc, #96]	@ (802e5e8 <DMA1_Stream2_IRQHandler+0x70>)
 802e586:	781b      	ldrb	r3, [r3, #0]
 802e588:	3301      	adds	r3, #1
 802e58a:	b2da      	uxtb	r2, r3
 802e58c:	4b16      	ldr	r3, [pc, #88]	@ (802e5e8 <DMA1_Stream2_IRQHandler+0x70>)
 802e58e:	701a      	strb	r2, [r3, #0]
 802e590:	4b14      	ldr	r3, [pc, #80]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e592:	781b      	ldrb	r3, [r3, #0]
 802e594:	3301      	adds	r3, #1
 802e596:	b2da      	uxtb	r2, r3
 802e598:	4b12      	ldr	r3, [pc, #72]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e59a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 802e59c:	4b13      	ldr	r3, [pc, #76]	@ (802e5ec <DMA1_Stream2_IRQHandler+0x74>)
 802e59e:	689b      	ldr	r3, [r3, #8]
 802e5a0:	2b00      	cmp	r3, #0
 802e5a2:	d005      	beq.n	802e5b0 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 802e5a4:	4b11      	ldr	r3, [pc, #68]	@ (802e5ec <DMA1_Stream2_IRQHandler+0x74>)
 802e5a6:	689b      	ldr	r3, [r3, #8]
 802e5a8:	3304      	adds	r3, #4
 802e5aa:	4618      	mov	r0, r3
 802e5ac:	f7f7 fed2 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e5b0:	4b0c      	ldr	r3, [pc, #48]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e5b2:	781b      	ldrb	r3, [r3, #0]
 802e5b4:	2b00      	cmp	r3, #0
 802e5b6:	d005      	beq.n	802e5c4 <DMA1_Stream2_IRQHandler+0x4c>
 802e5b8:	4b0a      	ldr	r3, [pc, #40]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e5ba:	781b      	ldrb	r3, [r3, #0]
 802e5bc:	3b01      	subs	r3, #1
 802e5be:	b2da      	uxtb	r2, r3
 802e5c0:	4b08      	ldr	r3, [pc, #32]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e5c2:	701a      	strb	r2, [r3, #0]
 802e5c4:	4b07      	ldr	r3, [pc, #28]	@ (802e5e4 <DMA1_Stream2_IRQHandler+0x6c>)
 802e5c6:	781b      	ldrb	r3, [r3, #0]
 802e5c8:	2b00      	cmp	r3, #0
 802e5ca:	d109      	bne.n	802e5e0 <DMA1_Stream2_IRQHandler+0x68>
 802e5cc:	4b06      	ldr	r3, [pc, #24]	@ (802e5e8 <DMA1_Stream2_IRQHandler+0x70>)
 802e5ce:	781b      	ldrb	r3, [r3, #0]
 802e5d0:	2b00      	cmp	r3, #0
 802e5d2:	d005      	beq.n	802e5e0 <DMA1_Stream2_IRQHandler+0x68>
 802e5d4:	4b04      	ldr	r3, [pc, #16]	@ (802e5e8 <DMA1_Stream2_IRQHandler+0x70>)
 802e5d6:	781b      	ldrb	r3, [r3, #0]
 802e5d8:	3b01      	subs	r3, #1
 802e5da:	b2da      	uxtb	r2, r3
 802e5dc:	4b02      	ldr	r3, [pc, #8]	@ (802e5e8 <DMA1_Stream2_IRQHandler+0x70>)
 802e5de:	701a      	strb	r2, [r3, #0]
}
 802e5e0:	bf00      	nop
 802e5e2:	bd80      	pop	{r7, pc}
 802e5e4:	2000b312 	.word	0x2000b312
 802e5e8:	2000b311 	.word	0x2000b311
 802e5ec:	200012e0 	.word	0x200012e0

0802e5f0 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 802e5f0:	b580      	push	{r7, lr}
 802e5f2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e5f4:	4b19      	ldr	r3, [pc, #100]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e5f6:	781b      	ldrb	r3, [r3, #0]
 802e5f8:	2b00      	cmp	r3, #0
 802e5fa:	d105      	bne.n	802e608 <DMA1_Stream3_IRQHandler+0x18>
 802e5fc:	4b18      	ldr	r3, [pc, #96]	@ (802e660 <DMA1_Stream3_IRQHandler+0x70>)
 802e5fe:	781b      	ldrb	r3, [r3, #0]
 802e600:	3301      	adds	r3, #1
 802e602:	b2da      	uxtb	r2, r3
 802e604:	4b16      	ldr	r3, [pc, #88]	@ (802e660 <DMA1_Stream3_IRQHandler+0x70>)
 802e606:	701a      	strb	r2, [r3, #0]
 802e608:	4b14      	ldr	r3, [pc, #80]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e60a:	781b      	ldrb	r3, [r3, #0]
 802e60c:	3301      	adds	r3, #1
 802e60e:	b2da      	uxtb	r2, r3
 802e610:	4b12      	ldr	r3, [pc, #72]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e612:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 802e614:	4b13      	ldr	r3, [pc, #76]	@ (802e664 <DMA1_Stream3_IRQHandler+0x74>)
 802e616:	68db      	ldr	r3, [r3, #12]
 802e618:	2b00      	cmp	r3, #0
 802e61a:	d005      	beq.n	802e628 <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 802e61c:	4b11      	ldr	r3, [pc, #68]	@ (802e664 <DMA1_Stream3_IRQHandler+0x74>)
 802e61e:	68db      	ldr	r3, [r3, #12]
 802e620:	3304      	adds	r3, #4
 802e622:	4618      	mov	r0, r3
 802e624:	f7f7 fe96 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e628:	4b0c      	ldr	r3, [pc, #48]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e62a:	781b      	ldrb	r3, [r3, #0]
 802e62c:	2b00      	cmp	r3, #0
 802e62e:	d005      	beq.n	802e63c <DMA1_Stream3_IRQHandler+0x4c>
 802e630:	4b0a      	ldr	r3, [pc, #40]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e632:	781b      	ldrb	r3, [r3, #0]
 802e634:	3b01      	subs	r3, #1
 802e636:	b2da      	uxtb	r2, r3
 802e638:	4b08      	ldr	r3, [pc, #32]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e63a:	701a      	strb	r2, [r3, #0]
 802e63c:	4b07      	ldr	r3, [pc, #28]	@ (802e65c <DMA1_Stream3_IRQHandler+0x6c>)
 802e63e:	781b      	ldrb	r3, [r3, #0]
 802e640:	2b00      	cmp	r3, #0
 802e642:	d109      	bne.n	802e658 <DMA1_Stream3_IRQHandler+0x68>
 802e644:	4b06      	ldr	r3, [pc, #24]	@ (802e660 <DMA1_Stream3_IRQHandler+0x70>)
 802e646:	781b      	ldrb	r3, [r3, #0]
 802e648:	2b00      	cmp	r3, #0
 802e64a:	d005      	beq.n	802e658 <DMA1_Stream3_IRQHandler+0x68>
 802e64c:	4b04      	ldr	r3, [pc, #16]	@ (802e660 <DMA1_Stream3_IRQHandler+0x70>)
 802e64e:	781b      	ldrb	r3, [r3, #0]
 802e650:	3b01      	subs	r3, #1
 802e652:	b2da      	uxtb	r2, r3
 802e654:	4b02      	ldr	r3, [pc, #8]	@ (802e660 <DMA1_Stream3_IRQHandler+0x70>)
 802e656:	701a      	strb	r2, [r3, #0]
}
 802e658:	bf00      	nop
 802e65a:	bd80      	pop	{r7, pc}
 802e65c:	2000b312 	.word	0x2000b312
 802e660:	2000b311 	.word	0x2000b311
 802e664:	200012e0 	.word	0x200012e0

0802e668 <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 802e668:	b580      	push	{r7, lr}
 802e66a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e66c:	4b19      	ldr	r3, [pc, #100]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e66e:	781b      	ldrb	r3, [r3, #0]
 802e670:	2b00      	cmp	r3, #0
 802e672:	d105      	bne.n	802e680 <DMA1_Stream4_IRQHandler+0x18>
 802e674:	4b18      	ldr	r3, [pc, #96]	@ (802e6d8 <DMA1_Stream4_IRQHandler+0x70>)
 802e676:	781b      	ldrb	r3, [r3, #0]
 802e678:	3301      	adds	r3, #1
 802e67a:	b2da      	uxtb	r2, r3
 802e67c:	4b16      	ldr	r3, [pc, #88]	@ (802e6d8 <DMA1_Stream4_IRQHandler+0x70>)
 802e67e:	701a      	strb	r2, [r3, #0]
 802e680:	4b14      	ldr	r3, [pc, #80]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e682:	781b      	ldrb	r3, [r3, #0]
 802e684:	3301      	adds	r3, #1
 802e686:	b2da      	uxtb	r2, r3
 802e688:	4b12      	ldr	r3, [pc, #72]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e68a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 802e68c:	4b13      	ldr	r3, [pc, #76]	@ (802e6dc <DMA1_Stream4_IRQHandler+0x74>)
 802e68e:	691b      	ldr	r3, [r3, #16]
 802e690:	2b00      	cmp	r3, #0
 802e692:	d005      	beq.n	802e6a0 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 802e694:	4b11      	ldr	r3, [pc, #68]	@ (802e6dc <DMA1_Stream4_IRQHandler+0x74>)
 802e696:	691b      	ldr	r3, [r3, #16]
 802e698:	3304      	adds	r3, #4
 802e69a:	4618      	mov	r0, r3
 802e69c:	f7f7 fe5a 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e6a0:	4b0c      	ldr	r3, [pc, #48]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e6a2:	781b      	ldrb	r3, [r3, #0]
 802e6a4:	2b00      	cmp	r3, #0
 802e6a6:	d005      	beq.n	802e6b4 <DMA1_Stream4_IRQHandler+0x4c>
 802e6a8:	4b0a      	ldr	r3, [pc, #40]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e6aa:	781b      	ldrb	r3, [r3, #0]
 802e6ac:	3b01      	subs	r3, #1
 802e6ae:	b2da      	uxtb	r2, r3
 802e6b0:	4b08      	ldr	r3, [pc, #32]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e6b2:	701a      	strb	r2, [r3, #0]
 802e6b4:	4b07      	ldr	r3, [pc, #28]	@ (802e6d4 <DMA1_Stream4_IRQHandler+0x6c>)
 802e6b6:	781b      	ldrb	r3, [r3, #0]
 802e6b8:	2b00      	cmp	r3, #0
 802e6ba:	d109      	bne.n	802e6d0 <DMA1_Stream4_IRQHandler+0x68>
 802e6bc:	4b06      	ldr	r3, [pc, #24]	@ (802e6d8 <DMA1_Stream4_IRQHandler+0x70>)
 802e6be:	781b      	ldrb	r3, [r3, #0]
 802e6c0:	2b00      	cmp	r3, #0
 802e6c2:	d005      	beq.n	802e6d0 <DMA1_Stream4_IRQHandler+0x68>
 802e6c4:	4b04      	ldr	r3, [pc, #16]	@ (802e6d8 <DMA1_Stream4_IRQHandler+0x70>)
 802e6c6:	781b      	ldrb	r3, [r3, #0]
 802e6c8:	3b01      	subs	r3, #1
 802e6ca:	b2da      	uxtb	r2, r3
 802e6cc:	4b02      	ldr	r3, [pc, #8]	@ (802e6d8 <DMA1_Stream4_IRQHandler+0x70>)
 802e6ce:	701a      	strb	r2, [r3, #0]
}
 802e6d0:	bf00      	nop
 802e6d2:	bd80      	pop	{r7, pc}
 802e6d4:	2000b312 	.word	0x2000b312
 802e6d8:	2000b311 	.word	0x2000b311
 802e6dc:	200012e0 	.word	0x200012e0

0802e6e0 <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 802e6e0:	b580      	push	{r7, lr}
 802e6e2:	b082      	sub	sp, #8
 802e6e4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 802e6e6:	2300      	movs	r3, #0
 802e6e8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e6ea:	4b28      	ldr	r3, [pc, #160]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e6ec:	781b      	ldrb	r3, [r3, #0]
 802e6ee:	2b00      	cmp	r3, #0
 802e6f0:	d105      	bne.n	802e6fe <DMA1_Stream5_IRQHandler+0x1e>
 802e6f2:	4b27      	ldr	r3, [pc, #156]	@ (802e790 <DMA1_Stream5_IRQHandler+0xb0>)
 802e6f4:	781b      	ldrb	r3, [r3, #0]
 802e6f6:	3301      	adds	r3, #1
 802e6f8:	b2da      	uxtb	r2, r3
 802e6fa:	4b25      	ldr	r3, [pc, #148]	@ (802e790 <DMA1_Stream5_IRQHandler+0xb0>)
 802e6fc:	701a      	strb	r2, [r3, #0]
 802e6fe:	4b23      	ldr	r3, [pc, #140]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e700:	781b      	ldrb	r3, [r3, #0]
 802e702:	3301      	adds	r3, #1
 802e704:	b2da      	uxtb	r2, r3
 802e706:	4b21      	ldr	r3, [pc, #132]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e708:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 802e70a:	2300      	movs	r3, #0
 802e70c:	71fb      	strb	r3, [r7, #7]
 802e70e:	e017      	b.n	802e740 <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 802e710:	79fa      	ldrb	r2, [r7, #7]
 802e712:	4920      	ldr	r1, [pc, #128]	@ (802e794 <DMA1_Stream5_IRQHandler+0xb4>)
 802e714:	4613      	mov	r3, r2
 802e716:	011b      	lsls	r3, r3, #4
 802e718:	4413      	add	r3, r2
 802e71a:	00db      	lsls	r3, r3, #3
 802e71c:	440b      	add	r3, r1
 802e71e:	781b      	ldrb	r3, [r3, #0]
 802e720:	2b05      	cmp	r3, #5
 802e722:	d10a      	bne.n	802e73a <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 802e724:	79fa      	ldrb	r2, [r7, #7]
 802e726:	4613      	mov	r3, r2
 802e728:	011b      	lsls	r3, r3, #4
 802e72a:	4413      	add	r3, r2
 802e72c:	00db      	lsls	r3, r3, #3
 802e72e:	4a19      	ldr	r2, [pc, #100]	@ (802e794 <DMA1_Stream5_IRQHandler+0xb4>)
 802e730:	4413      	add	r3, r2
 802e732:	3304      	adds	r3, #4
 802e734:	4618      	mov	r0, r3
 802e736:	f7f7 fe0d 	bl	8026354 <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 802e73a:	79fb      	ldrb	r3, [r7, #7]
 802e73c:	3301      	adds	r3, #1
 802e73e:	71fb      	strb	r3, [r7, #7]
 802e740:	79fa      	ldrb	r2, [r7, #7]
 802e742:	4b15      	ldr	r3, [pc, #84]	@ (802e798 <DMA1_Stream5_IRQHandler+0xb8>)
 802e744:	681b      	ldr	r3, [r3, #0]
 802e746:	4915      	ldr	r1, [pc, #84]	@ (802e79c <DMA1_Stream5_IRQHandler+0xbc>)
 802e748:	fba1 1303 	umull	r1, r3, r1, r3
 802e74c:	09db      	lsrs	r3, r3, #7
 802e74e:	429a      	cmp	r2, r3
 802e750:	d3de      	bcc.n	802e710 <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 802e752:	4b0e      	ldr	r3, [pc, #56]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e754:	781b      	ldrb	r3, [r3, #0]
 802e756:	2b00      	cmp	r3, #0
 802e758:	d005      	beq.n	802e766 <DMA1_Stream5_IRQHandler+0x86>
 802e75a:	4b0c      	ldr	r3, [pc, #48]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e75c:	781b      	ldrb	r3, [r3, #0]
 802e75e:	3b01      	subs	r3, #1
 802e760:	b2da      	uxtb	r2, r3
 802e762:	4b0a      	ldr	r3, [pc, #40]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e764:	701a      	strb	r2, [r3, #0]
 802e766:	4b09      	ldr	r3, [pc, #36]	@ (802e78c <DMA1_Stream5_IRQHandler+0xac>)
 802e768:	781b      	ldrb	r3, [r3, #0]
 802e76a:	2b00      	cmp	r3, #0
 802e76c:	d109      	bne.n	802e782 <DMA1_Stream5_IRQHandler+0xa2>
 802e76e:	4b08      	ldr	r3, [pc, #32]	@ (802e790 <DMA1_Stream5_IRQHandler+0xb0>)
 802e770:	781b      	ldrb	r3, [r3, #0]
 802e772:	2b00      	cmp	r3, #0
 802e774:	d005      	beq.n	802e782 <DMA1_Stream5_IRQHandler+0xa2>
 802e776:	4b06      	ldr	r3, [pc, #24]	@ (802e790 <DMA1_Stream5_IRQHandler+0xb0>)
 802e778:	781b      	ldrb	r3, [r3, #0]
 802e77a:	3b01      	subs	r3, #1
 802e77c:	b2da      	uxtb	r2, r3
 802e77e:	4b04      	ldr	r3, [pc, #16]	@ (802e790 <DMA1_Stream5_IRQHandler+0xb0>)
 802e780:	701a      	strb	r2, [r3, #0]
}
 802e782:	bf00      	nop
 802e784:	3708      	adds	r7, #8
 802e786:	46bd      	mov	sp, r7
 802e788:	bd80      	pop	{r7, pc}
 802e78a:	bf00      	nop
 802e78c:	2000b312 	.word	0x2000b312
 802e790:	2000b311 	.word	0x2000b311
 802e794:	20001034 	.word	0x20001034
 802e798:	200012dc 	.word	0x200012dc
 802e79c:	f0f0f0f1 	.word	0xf0f0f0f1

0802e7a0 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 802e7a0:	b580      	push	{r7, lr}
 802e7a2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e7a4:	4b19      	ldr	r3, [pc, #100]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7a6:	781b      	ldrb	r3, [r3, #0]
 802e7a8:	2b00      	cmp	r3, #0
 802e7aa:	d105      	bne.n	802e7b8 <DMA1_Stream6_IRQHandler+0x18>
 802e7ac:	4b18      	ldr	r3, [pc, #96]	@ (802e810 <DMA1_Stream6_IRQHandler+0x70>)
 802e7ae:	781b      	ldrb	r3, [r3, #0]
 802e7b0:	3301      	adds	r3, #1
 802e7b2:	b2da      	uxtb	r2, r3
 802e7b4:	4b16      	ldr	r3, [pc, #88]	@ (802e810 <DMA1_Stream6_IRQHandler+0x70>)
 802e7b6:	701a      	strb	r2, [r3, #0]
 802e7b8:	4b14      	ldr	r3, [pc, #80]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7ba:	781b      	ldrb	r3, [r3, #0]
 802e7bc:	3301      	adds	r3, #1
 802e7be:	b2da      	uxtb	r2, r3
 802e7c0:	4b12      	ldr	r3, [pc, #72]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7c2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 802e7c4:	4b13      	ldr	r3, [pc, #76]	@ (802e814 <DMA1_Stream6_IRQHandler+0x74>)
 802e7c6:	699b      	ldr	r3, [r3, #24]
 802e7c8:	2b00      	cmp	r3, #0
 802e7ca:	d005      	beq.n	802e7d8 <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 802e7cc:	4b11      	ldr	r3, [pc, #68]	@ (802e814 <DMA1_Stream6_IRQHandler+0x74>)
 802e7ce:	699b      	ldr	r3, [r3, #24]
 802e7d0:	3304      	adds	r3, #4
 802e7d2:	4618      	mov	r0, r3
 802e7d4:	f7f7 fdbe 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e7d8:	4b0c      	ldr	r3, [pc, #48]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7da:	781b      	ldrb	r3, [r3, #0]
 802e7dc:	2b00      	cmp	r3, #0
 802e7de:	d005      	beq.n	802e7ec <DMA1_Stream6_IRQHandler+0x4c>
 802e7e0:	4b0a      	ldr	r3, [pc, #40]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7e2:	781b      	ldrb	r3, [r3, #0]
 802e7e4:	3b01      	subs	r3, #1
 802e7e6:	b2da      	uxtb	r2, r3
 802e7e8:	4b08      	ldr	r3, [pc, #32]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7ea:	701a      	strb	r2, [r3, #0]
 802e7ec:	4b07      	ldr	r3, [pc, #28]	@ (802e80c <DMA1_Stream6_IRQHandler+0x6c>)
 802e7ee:	781b      	ldrb	r3, [r3, #0]
 802e7f0:	2b00      	cmp	r3, #0
 802e7f2:	d109      	bne.n	802e808 <DMA1_Stream6_IRQHandler+0x68>
 802e7f4:	4b06      	ldr	r3, [pc, #24]	@ (802e810 <DMA1_Stream6_IRQHandler+0x70>)
 802e7f6:	781b      	ldrb	r3, [r3, #0]
 802e7f8:	2b00      	cmp	r3, #0
 802e7fa:	d005      	beq.n	802e808 <DMA1_Stream6_IRQHandler+0x68>
 802e7fc:	4b04      	ldr	r3, [pc, #16]	@ (802e810 <DMA1_Stream6_IRQHandler+0x70>)
 802e7fe:	781b      	ldrb	r3, [r3, #0]
 802e800:	3b01      	subs	r3, #1
 802e802:	b2da      	uxtb	r2, r3
 802e804:	4b02      	ldr	r3, [pc, #8]	@ (802e810 <DMA1_Stream6_IRQHandler+0x70>)
 802e806:	701a      	strb	r2, [r3, #0]
}
 802e808:	bf00      	nop
 802e80a:	bd80      	pop	{r7, pc}
 802e80c:	2000b312 	.word	0x2000b312
 802e810:	2000b311 	.word	0x2000b311
 802e814:	200012e0 	.word	0x200012e0

0802e818 <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 802e818:	b580      	push	{r7, lr}
 802e81a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e81c:	4b19      	ldr	r3, [pc, #100]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e81e:	781b      	ldrb	r3, [r3, #0]
 802e820:	2b00      	cmp	r3, #0
 802e822:	d105      	bne.n	802e830 <DMA1_Stream7_IRQHandler+0x18>
 802e824:	4b18      	ldr	r3, [pc, #96]	@ (802e888 <DMA1_Stream7_IRQHandler+0x70>)
 802e826:	781b      	ldrb	r3, [r3, #0]
 802e828:	3301      	adds	r3, #1
 802e82a:	b2da      	uxtb	r2, r3
 802e82c:	4b16      	ldr	r3, [pc, #88]	@ (802e888 <DMA1_Stream7_IRQHandler+0x70>)
 802e82e:	701a      	strb	r2, [r3, #0]
 802e830:	4b14      	ldr	r3, [pc, #80]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e832:	781b      	ldrb	r3, [r3, #0]
 802e834:	3301      	adds	r3, #1
 802e836:	b2da      	uxtb	r2, r3
 802e838:	4b12      	ldr	r3, [pc, #72]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e83a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 802e83c:	4b13      	ldr	r3, [pc, #76]	@ (802e88c <DMA1_Stream7_IRQHandler+0x74>)
 802e83e:	69db      	ldr	r3, [r3, #28]
 802e840:	2b00      	cmp	r3, #0
 802e842:	d005      	beq.n	802e850 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 802e844:	4b11      	ldr	r3, [pc, #68]	@ (802e88c <DMA1_Stream7_IRQHandler+0x74>)
 802e846:	69db      	ldr	r3, [r3, #28]
 802e848:	3304      	adds	r3, #4
 802e84a:	4618      	mov	r0, r3
 802e84c:	f7f7 fd82 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e850:	4b0c      	ldr	r3, [pc, #48]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e852:	781b      	ldrb	r3, [r3, #0]
 802e854:	2b00      	cmp	r3, #0
 802e856:	d005      	beq.n	802e864 <DMA1_Stream7_IRQHandler+0x4c>
 802e858:	4b0a      	ldr	r3, [pc, #40]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e85a:	781b      	ldrb	r3, [r3, #0]
 802e85c:	3b01      	subs	r3, #1
 802e85e:	b2da      	uxtb	r2, r3
 802e860:	4b08      	ldr	r3, [pc, #32]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e862:	701a      	strb	r2, [r3, #0]
 802e864:	4b07      	ldr	r3, [pc, #28]	@ (802e884 <DMA1_Stream7_IRQHandler+0x6c>)
 802e866:	781b      	ldrb	r3, [r3, #0]
 802e868:	2b00      	cmp	r3, #0
 802e86a:	d109      	bne.n	802e880 <DMA1_Stream7_IRQHandler+0x68>
 802e86c:	4b06      	ldr	r3, [pc, #24]	@ (802e888 <DMA1_Stream7_IRQHandler+0x70>)
 802e86e:	781b      	ldrb	r3, [r3, #0]
 802e870:	2b00      	cmp	r3, #0
 802e872:	d005      	beq.n	802e880 <DMA1_Stream7_IRQHandler+0x68>
 802e874:	4b04      	ldr	r3, [pc, #16]	@ (802e888 <DMA1_Stream7_IRQHandler+0x70>)
 802e876:	781b      	ldrb	r3, [r3, #0]
 802e878:	3b01      	subs	r3, #1
 802e87a:	b2da      	uxtb	r2, r3
 802e87c:	4b02      	ldr	r3, [pc, #8]	@ (802e888 <DMA1_Stream7_IRQHandler+0x70>)
 802e87e:	701a      	strb	r2, [r3, #0]
}
 802e880:	bf00      	nop
 802e882:	bd80      	pop	{r7, pc}
 802e884:	2000b312 	.word	0x2000b312
 802e888:	2000b311 	.word	0x2000b311
 802e88c:	200012e0 	.word	0x200012e0

0802e890 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 802e890:	b580      	push	{r7, lr}
 802e892:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e894:	4b19      	ldr	r3, [pc, #100]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e896:	781b      	ldrb	r3, [r3, #0]
 802e898:	2b00      	cmp	r3, #0
 802e89a:	d105      	bne.n	802e8a8 <DMA2_Stream0_IRQHandler+0x18>
 802e89c:	4b18      	ldr	r3, [pc, #96]	@ (802e900 <DMA2_Stream0_IRQHandler+0x70>)
 802e89e:	781b      	ldrb	r3, [r3, #0]
 802e8a0:	3301      	adds	r3, #1
 802e8a2:	b2da      	uxtb	r2, r3
 802e8a4:	4b16      	ldr	r3, [pc, #88]	@ (802e900 <DMA2_Stream0_IRQHandler+0x70>)
 802e8a6:	701a      	strb	r2, [r3, #0]
 802e8a8:	4b14      	ldr	r3, [pc, #80]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e8aa:	781b      	ldrb	r3, [r3, #0]
 802e8ac:	3301      	adds	r3, #1
 802e8ae:	b2da      	uxtb	r2, r3
 802e8b0:	4b12      	ldr	r3, [pc, #72]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e8b2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 802e8b4:	4b13      	ldr	r3, [pc, #76]	@ (802e904 <DMA2_Stream0_IRQHandler+0x74>)
 802e8b6:	6a1b      	ldr	r3, [r3, #32]
 802e8b8:	2b00      	cmp	r3, #0
 802e8ba:	d005      	beq.n	802e8c8 <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 802e8bc:	4b11      	ldr	r3, [pc, #68]	@ (802e904 <DMA2_Stream0_IRQHandler+0x74>)
 802e8be:	6a1b      	ldr	r3, [r3, #32]
 802e8c0:	3304      	adds	r3, #4
 802e8c2:	4618      	mov	r0, r3
 802e8c4:	f7f7 fd46 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e8c8:	4b0c      	ldr	r3, [pc, #48]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e8ca:	781b      	ldrb	r3, [r3, #0]
 802e8cc:	2b00      	cmp	r3, #0
 802e8ce:	d005      	beq.n	802e8dc <DMA2_Stream0_IRQHandler+0x4c>
 802e8d0:	4b0a      	ldr	r3, [pc, #40]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e8d2:	781b      	ldrb	r3, [r3, #0]
 802e8d4:	3b01      	subs	r3, #1
 802e8d6:	b2da      	uxtb	r2, r3
 802e8d8:	4b08      	ldr	r3, [pc, #32]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e8da:	701a      	strb	r2, [r3, #0]
 802e8dc:	4b07      	ldr	r3, [pc, #28]	@ (802e8fc <DMA2_Stream0_IRQHandler+0x6c>)
 802e8de:	781b      	ldrb	r3, [r3, #0]
 802e8e0:	2b00      	cmp	r3, #0
 802e8e2:	d109      	bne.n	802e8f8 <DMA2_Stream0_IRQHandler+0x68>
 802e8e4:	4b06      	ldr	r3, [pc, #24]	@ (802e900 <DMA2_Stream0_IRQHandler+0x70>)
 802e8e6:	781b      	ldrb	r3, [r3, #0]
 802e8e8:	2b00      	cmp	r3, #0
 802e8ea:	d005      	beq.n	802e8f8 <DMA2_Stream0_IRQHandler+0x68>
 802e8ec:	4b04      	ldr	r3, [pc, #16]	@ (802e900 <DMA2_Stream0_IRQHandler+0x70>)
 802e8ee:	781b      	ldrb	r3, [r3, #0]
 802e8f0:	3b01      	subs	r3, #1
 802e8f2:	b2da      	uxtb	r2, r3
 802e8f4:	4b02      	ldr	r3, [pc, #8]	@ (802e900 <DMA2_Stream0_IRQHandler+0x70>)
 802e8f6:	701a      	strb	r2, [r3, #0]
}
 802e8f8:	bf00      	nop
 802e8fa:	bd80      	pop	{r7, pc}
 802e8fc:	2000b312 	.word	0x2000b312
 802e900:	2000b311 	.word	0x2000b311
 802e904:	200012e0 	.word	0x200012e0

0802e908 <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 802e908:	b580      	push	{r7, lr}
 802e90a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e90c:	4b19      	ldr	r3, [pc, #100]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e90e:	781b      	ldrb	r3, [r3, #0]
 802e910:	2b00      	cmp	r3, #0
 802e912:	d105      	bne.n	802e920 <DMA2_Stream1_IRQHandler+0x18>
 802e914:	4b18      	ldr	r3, [pc, #96]	@ (802e978 <DMA2_Stream1_IRQHandler+0x70>)
 802e916:	781b      	ldrb	r3, [r3, #0]
 802e918:	3301      	adds	r3, #1
 802e91a:	b2da      	uxtb	r2, r3
 802e91c:	4b16      	ldr	r3, [pc, #88]	@ (802e978 <DMA2_Stream1_IRQHandler+0x70>)
 802e91e:	701a      	strb	r2, [r3, #0]
 802e920:	4b14      	ldr	r3, [pc, #80]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e922:	781b      	ldrb	r3, [r3, #0]
 802e924:	3301      	adds	r3, #1
 802e926:	b2da      	uxtb	r2, r3
 802e928:	4b12      	ldr	r3, [pc, #72]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e92a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 802e92c:	4b13      	ldr	r3, [pc, #76]	@ (802e97c <DMA2_Stream1_IRQHandler+0x74>)
 802e92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e930:	2b00      	cmp	r3, #0
 802e932:	d005      	beq.n	802e940 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 802e934:	4b11      	ldr	r3, [pc, #68]	@ (802e97c <DMA2_Stream1_IRQHandler+0x74>)
 802e936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e938:	3304      	adds	r3, #4
 802e93a:	4618      	mov	r0, r3
 802e93c:	f7f7 fd0a 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e940:	4b0c      	ldr	r3, [pc, #48]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e942:	781b      	ldrb	r3, [r3, #0]
 802e944:	2b00      	cmp	r3, #0
 802e946:	d005      	beq.n	802e954 <DMA2_Stream1_IRQHandler+0x4c>
 802e948:	4b0a      	ldr	r3, [pc, #40]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e94a:	781b      	ldrb	r3, [r3, #0]
 802e94c:	3b01      	subs	r3, #1
 802e94e:	b2da      	uxtb	r2, r3
 802e950:	4b08      	ldr	r3, [pc, #32]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e952:	701a      	strb	r2, [r3, #0]
 802e954:	4b07      	ldr	r3, [pc, #28]	@ (802e974 <DMA2_Stream1_IRQHandler+0x6c>)
 802e956:	781b      	ldrb	r3, [r3, #0]
 802e958:	2b00      	cmp	r3, #0
 802e95a:	d109      	bne.n	802e970 <DMA2_Stream1_IRQHandler+0x68>
 802e95c:	4b06      	ldr	r3, [pc, #24]	@ (802e978 <DMA2_Stream1_IRQHandler+0x70>)
 802e95e:	781b      	ldrb	r3, [r3, #0]
 802e960:	2b00      	cmp	r3, #0
 802e962:	d005      	beq.n	802e970 <DMA2_Stream1_IRQHandler+0x68>
 802e964:	4b04      	ldr	r3, [pc, #16]	@ (802e978 <DMA2_Stream1_IRQHandler+0x70>)
 802e966:	781b      	ldrb	r3, [r3, #0]
 802e968:	3b01      	subs	r3, #1
 802e96a:	b2da      	uxtb	r2, r3
 802e96c:	4b02      	ldr	r3, [pc, #8]	@ (802e978 <DMA2_Stream1_IRQHandler+0x70>)
 802e96e:	701a      	strb	r2, [r3, #0]
}
 802e970:	bf00      	nop
 802e972:	bd80      	pop	{r7, pc}
 802e974:	2000b312 	.word	0x2000b312
 802e978:	2000b311 	.word	0x2000b311
 802e97c:	200012e0 	.word	0x200012e0

0802e980 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 802e980:	b580      	push	{r7, lr}
 802e982:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e984:	4b19      	ldr	r3, [pc, #100]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e986:	781b      	ldrb	r3, [r3, #0]
 802e988:	2b00      	cmp	r3, #0
 802e98a:	d105      	bne.n	802e998 <DMA2_Stream2_IRQHandler+0x18>
 802e98c:	4b18      	ldr	r3, [pc, #96]	@ (802e9f0 <DMA2_Stream2_IRQHandler+0x70>)
 802e98e:	781b      	ldrb	r3, [r3, #0]
 802e990:	3301      	adds	r3, #1
 802e992:	b2da      	uxtb	r2, r3
 802e994:	4b16      	ldr	r3, [pc, #88]	@ (802e9f0 <DMA2_Stream2_IRQHandler+0x70>)
 802e996:	701a      	strb	r2, [r3, #0]
 802e998:	4b14      	ldr	r3, [pc, #80]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e99a:	781b      	ldrb	r3, [r3, #0]
 802e99c:	3301      	adds	r3, #1
 802e99e:	b2da      	uxtb	r2, r3
 802e9a0:	4b12      	ldr	r3, [pc, #72]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e9a2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 802e9a4:	4b13      	ldr	r3, [pc, #76]	@ (802e9f4 <DMA2_Stream2_IRQHandler+0x74>)
 802e9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e9a8:	2b00      	cmp	r3, #0
 802e9aa:	d005      	beq.n	802e9b8 <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 802e9ac:	4b11      	ldr	r3, [pc, #68]	@ (802e9f4 <DMA2_Stream2_IRQHandler+0x74>)
 802e9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e9b0:	3304      	adds	r3, #4
 802e9b2:	4618      	mov	r0, r3
 802e9b4:	f7f7 fcce 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802e9b8:	4b0c      	ldr	r3, [pc, #48]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e9ba:	781b      	ldrb	r3, [r3, #0]
 802e9bc:	2b00      	cmp	r3, #0
 802e9be:	d005      	beq.n	802e9cc <DMA2_Stream2_IRQHandler+0x4c>
 802e9c0:	4b0a      	ldr	r3, [pc, #40]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e9c2:	781b      	ldrb	r3, [r3, #0]
 802e9c4:	3b01      	subs	r3, #1
 802e9c6:	b2da      	uxtb	r2, r3
 802e9c8:	4b08      	ldr	r3, [pc, #32]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e9ca:	701a      	strb	r2, [r3, #0]
 802e9cc:	4b07      	ldr	r3, [pc, #28]	@ (802e9ec <DMA2_Stream2_IRQHandler+0x6c>)
 802e9ce:	781b      	ldrb	r3, [r3, #0]
 802e9d0:	2b00      	cmp	r3, #0
 802e9d2:	d109      	bne.n	802e9e8 <DMA2_Stream2_IRQHandler+0x68>
 802e9d4:	4b06      	ldr	r3, [pc, #24]	@ (802e9f0 <DMA2_Stream2_IRQHandler+0x70>)
 802e9d6:	781b      	ldrb	r3, [r3, #0]
 802e9d8:	2b00      	cmp	r3, #0
 802e9da:	d005      	beq.n	802e9e8 <DMA2_Stream2_IRQHandler+0x68>
 802e9dc:	4b04      	ldr	r3, [pc, #16]	@ (802e9f0 <DMA2_Stream2_IRQHandler+0x70>)
 802e9de:	781b      	ldrb	r3, [r3, #0]
 802e9e0:	3b01      	subs	r3, #1
 802e9e2:	b2da      	uxtb	r2, r3
 802e9e4:	4b02      	ldr	r3, [pc, #8]	@ (802e9f0 <DMA2_Stream2_IRQHandler+0x70>)
 802e9e6:	701a      	strb	r2, [r3, #0]
}
 802e9e8:	bf00      	nop
 802e9ea:	bd80      	pop	{r7, pc}
 802e9ec:	2000b312 	.word	0x2000b312
 802e9f0:	2000b311 	.word	0x2000b311
 802e9f4:	200012e0 	.word	0x200012e0

0802e9f8 <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 802e9f8:	b580      	push	{r7, lr}
 802e9fa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802e9fc:	4b19      	ldr	r3, [pc, #100]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802e9fe:	781b      	ldrb	r3, [r3, #0]
 802ea00:	2b00      	cmp	r3, #0
 802ea02:	d105      	bne.n	802ea10 <DMA2_Stream3_IRQHandler+0x18>
 802ea04:	4b18      	ldr	r3, [pc, #96]	@ (802ea68 <DMA2_Stream3_IRQHandler+0x70>)
 802ea06:	781b      	ldrb	r3, [r3, #0]
 802ea08:	3301      	adds	r3, #1
 802ea0a:	b2da      	uxtb	r2, r3
 802ea0c:	4b16      	ldr	r3, [pc, #88]	@ (802ea68 <DMA2_Stream3_IRQHandler+0x70>)
 802ea0e:	701a      	strb	r2, [r3, #0]
 802ea10:	4b14      	ldr	r3, [pc, #80]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802ea12:	781b      	ldrb	r3, [r3, #0]
 802ea14:	3301      	adds	r3, #1
 802ea16:	b2da      	uxtb	r2, r3
 802ea18:	4b12      	ldr	r3, [pc, #72]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802ea1a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 802ea1c:	4b13      	ldr	r3, [pc, #76]	@ (802ea6c <DMA2_Stream3_IRQHandler+0x74>)
 802ea1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ea20:	2b00      	cmp	r3, #0
 802ea22:	d005      	beq.n	802ea30 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 802ea24:	4b11      	ldr	r3, [pc, #68]	@ (802ea6c <DMA2_Stream3_IRQHandler+0x74>)
 802ea26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ea28:	3304      	adds	r3, #4
 802ea2a:	4618      	mov	r0, r3
 802ea2c:	f7f7 fc92 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802ea30:	4b0c      	ldr	r3, [pc, #48]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802ea32:	781b      	ldrb	r3, [r3, #0]
 802ea34:	2b00      	cmp	r3, #0
 802ea36:	d005      	beq.n	802ea44 <DMA2_Stream3_IRQHandler+0x4c>
 802ea38:	4b0a      	ldr	r3, [pc, #40]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802ea3a:	781b      	ldrb	r3, [r3, #0]
 802ea3c:	3b01      	subs	r3, #1
 802ea3e:	b2da      	uxtb	r2, r3
 802ea40:	4b08      	ldr	r3, [pc, #32]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802ea42:	701a      	strb	r2, [r3, #0]
 802ea44:	4b07      	ldr	r3, [pc, #28]	@ (802ea64 <DMA2_Stream3_IRQHandler+0x6c>)
 802ea46:	781b      	ldrb	r3, [r3, #0]
 802ea48:	2b00      	cmp	r3, #0
 802ea4a:	d109      	bne.n	802ea60 <DMA2_Stream3_IRQHandler+0x68>
 802ea4c:	4b06      	ldr	r3, [pc, #24]	@ (802ea68 <DMA2_Stream3_IRQHandler+0x70>)
 802ea4e:	781b      	ldrb	r3, [r3, #0]
 802ea50:	2b00      	cmp	r3, #0
 802ea52:	d005      	beq.n	802ea60 <DMA2_Stream3_IRQHandler+0x68>
 802ea54:	4b04      	ldr	r3, [pc, #16]	@ (802ea68 <DMA2_Stream3_IRQHandler+0x70>)
 802ea56:	781b      	ldrb	r3, [r3, #0]
 802ea58:	3b01      	subs	r3, #1
 802ea5a:	b2da      	uxtb	r2, r3
 802ea5c:	4b02      	ldr	r3, [pc, #8]	@ (802ea68 <DMA2_Stream3_IRQHandler+0x70>)
 802ea5e:	701a      	strb	r2, [r3, #0]
}
 802ea60:	bf00      	nop
 802ea62:	bd80      	pop	{r7, pc}
 802ea64:	2000b312 	.word	0x2000b312
 802ea68:	2000b311 	.word	0x2000b311
 802ea6c:	200012e0 	.word	0x200012e0

0802ea70 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 802ea70:	b580      	push	{r7, lr}
 802ea72:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802ea74:	4b19      	ldr	r3, [pc, #100]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802ea76:	781b      	ldrb	r3, [r3, #0]
 802ea78:	2b00      	cmp	r3, #0
 802ea7a:	d105      	bne.n	802ea88 <DMA2_Stream4_IRQHandler+0x18>
 802ea7c:	4b18      	ldr	r3, [pc, #96]	@ (802eae0 <DMA2_Stream4_IRQHandler+0x70>)
 802ea7e:	781b      	ldrb	r3, [r3, #0]
 802ea80:	3301      	adds	r3, #1
 802ea82:	b2da      	uxtb	r2, r3
 802ea84:	4b16      	ldr	r3, [pc, #88]	@ (802eae0 <DMA2_Stream4_IRQHandler+0x70>)
 802ea86:	701a      	strb	r2, [r3, #0]
 802ea88:	4b14      	ldr	r3, [pc, #80]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802ea8a:	781b      	ldrb	r3, [r3, #0]
 802ea8c:	3301      	adds	r3, #1
 802ea8e:	b2da      	uxtb	r2, r3
 802ea90:	4b12      	ldr	r3, [pc, #72]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802ea92:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 802ea94:	4b13      	ldr	r3, [pc, #76]	@ (802eae4 <DMA2_Stream4_IRQHandler+0x74>)
 802ea96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ea98:	2b00      	cmp	r3, #0
 802ea9a:	d005      	beq.n	802eaa8 <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 802ea9c:	4b11      	ldr	r3, [pc, #68]	@ (802eae4 <DMA2_Stream4_IRQHandler+0x74>)
 802ea9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802eaa0:	3304      	adds	r3, #4
 802eaa2:	4618      	mov	r0, r3
 802eaa4:	f7f7 fc56 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802eaa8:	4b0c      	ldr	r3, [pc, #48]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802eaaa:	781b      	ldrb	r3, [r3, #0]
 802eaac:	2b00      	cmp	r3, #0
 802eaae:	d005      	beq.n	802eabc <DMA2_Stream4_IRQHandler+0x4c>
 802eab0:	4b0a      	ldr	r3, [pc, #40]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802eab2:	781b      	ldrb	r3, [r3, #0]
 802eab4:	3b01      	subs	r3, #1
 802eab6:	b2da      	uxtb	r2, r3
 802eab8:	4b08      	ldr	r3, [pc, #32]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802eaba:	701a      	strb	r2, [r3, #0]
 802eabc:	4b07      	ldr	r3, [pc, #28]	@ (802eadc <DMA2_Stream4_IRQHandler+0x6c>)
 802eabe:	781b      	ldrb	r3, [r3, #0]
 802eac0:	2b00      	cmp	r3, #0
 802eac2:	d109      	bne.n	802ead8 <DMA2_Stream4_IRQHandler+0x68>
 802eac4:	4b06      	ldr	r3, [pc, #24]	@ (802eae0 <DMA2_Stream4_IRQHandler+0x70>)
 802eac6:	781b      	ldrb	r3, [r3, #0]
 802eac8:	2b00      	cmp	r3, #0
 802eaca:	d005      	beq.n	802ead8 <DMA2_Stream4_IRQHandler+0x68>
 802eacc:	4b04      	ldr	r3, [pc, #16]	@ (802eae0 <DMA2_Stream4_IRQHandler+0x70>)
 802eace:	781b      	ldrb	r3, [r3, #0]
 802ead0:	3b01      	subs	r3, #1
 802ead2:	b2da      	uxtb	r2, r3
 802ead4:	4b02      	ldr	r3, [pc, #8]	@ (802eae0 <DMA2_Stream4_IRQHandler+0x70>)
 802ead6:	701a      	strb	r2, [r3, #0]
}
 802ead8:	bf00      	nop
 802eada:	bd80      	pop	{r7, pc}
 802eadc:	2000b312 	.word	0x2000b312
 802eae0:	2000b311 	.word	0x2000b311
 802eae4:	200012e0 	.word	0x200012e0

0802eae8 <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 802eae8:	b580      	push	{r7, lr}
 802eaea:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802eaec:	4b19      	ldr	r3, [pc, #100]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eaee:	781b      	ldrb	r3, [r3, #0]
 802eaf0:	2b00      	cmp	r3, #0
 802eaf2:	d105      	bne.n	802eb00 <DMA2_Stream5_IRQHandler+0x18>
 802eaf4:	4b18      	ldr	r3, [pc, #96]	@ (802eb58 <DMA2_Stream5_IRQHandler+0x70>)
 802eaf6:	781b      	ldrb	r3, [r3, #0]
 802eaf8:	3301      	adds	r3, #1
 802eafa:	b2da      	uxtb	r2, r3
 802eafc:	4b16      	ldr	r3, [pc, #88]	@ (802eb58 <DMA2_Stream5_IRQHandler+0x70>)
 802eafe:	701a      	strb	r2, [r3, #0]
 802eb00:	4b14      	ldr	r3, [pc, #80]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eb02:	781b      	ldrb	r3, [r3, #0]
 802eb04:	3301      	adds	r3, #1
 802eb06:	b2da      	uxtb	r2, r3
 802eb08:	4b12      	ldr	r3, [pc, #72]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eb0a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 802eb0c:	4b13      	ldr	r3, [pc, #76]	@ (802eb5c <DMA2_Stream5_IRQHandler+0x74>)
 802eb0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802eb10:	2b00      	cmp	r3, #0
 802eb12:	d005      	beq.n	802eb20 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 802eb14:	4b11      	ldr	r3, [pc, #68]	@ (802eb5c <DMA2_Stream5_IRQHandler+0x74>)
 802eb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802eb18:	3304      	adds	r3, #4
 802eb1a:	4618      	mov	r0, r3
 802eb1c:	f7f7 fc1a 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802eb20:	4b0c      	ldr	r3, [pc, #48]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eb22:	781b      	ldrb	r3, [r3, #0]
 802eb24:	2b00      	cmp	r3, #0
 802eb26:	d005      	beq.n	802eb34 <DMA2_Stream5_IRQHandler+0x4c>
 802eb28:	4b0a      	ldr	r3, [pc, #40]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eb2a:	781b      	ldrb	r3, [r3, #0]
 802eb2c:	3b01      	subs	r3, #1
 802eb2e:	b2da      	uxtb	r2, r3
 802eb30:	4b08      	ldr	r3, [pc, #32]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eb32:	701a      	strb	r2, [r3, #0]
 802eb34:	4b07      	ldr	r3, [pc, #28]	@ (802eb54 <DMA2_Stream5_IRQHandler+0x6c>)
 802eb36:	781b      	ldrb	r3, [r3, #0]
 802eb38:	2b00      	cmp	r3, #0
 802eb3a:	d109      	bne.n	802eb50 <DMA2_Stream5_IRQHandler+0x68>
 802eb3c:	4b06      	ldr	r3, [pc, #24]	@ (802eb58 <DMA2_Stream5_IRQHandler+0x70>)
 802eb3e:	781b      	ldrb	r3, [r3, #0]
 802eb40:	2b00      	cmp	r3, #0
 802eb42:	d005      	beq.n	802eb50 <DMA2_Stream5_IRQHandler+0x68>
 802eb44:	4b04      	ldr	r3, [pc, #16]	@ (802eb58 <DMA2_Stream5_IRQHandler+0x70>)
 802eb46:	781b      	ldrb	r3, [r3, #0]
 802eb48:	3b01      	subs	r3, #1
 802eb4a:	b2da      	uxtb	r2, r3
 802eb4c:	4b02      	ldr	r3, [pc, #8]	@ (802eb58 <DMA2_Stream5_IRQHandler+0x70>)
 802eb4e:	701a      	strb	r2, [r3, #0]
}
 802eb50:	bf00      	nop
 802eb52:	bd80      	pop	{r7, pc}
 802eb54:	2000b312 	.word	0x2000b312
 802eb58:	2000b311 	.word	0x2000b311
 802eb5c:	200012e0 	.word	0x200012e0

0802eb60 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 802eb60:	b580      	push	{r7, lr}
 802eb62:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802eb64:	4b19      	ldr	r3, [pc, #100]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802eb66:	781b      	ldrb	r3, [r3, #0]
 802eb68:	2b00      	cmp	r3, #0
 802eb6a:	d105      	bne.n	802eb78 <DMA2_Stream6_IRQHandler+0x18>
 802eb6c:	4b18      	ldr	r3, [pc, #96]	@ (802ebd0 <DMA2_Stream6_IRQHandler+0x70>)
 802eb6e:	781b      	ldrb	r3, [r3, #0]
 802eb70:	3301      	adds	r3, #1
 802eb72:	b2da      	uxtb	r2, r3
 802eb74:	4b16      	ldr	r3, [pc, #88]	@ (802ebd0 <DMA2_Stream6_IRQHandler+0x70>)
 802eb76:	701a      	strb	r2, [r3, #0]
 802eb78:	4b14      	ldr	r3, [pc, #80]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802eb7a:	781b      	ldrb	r3, [r3, #0]
 802eb7c:	3301      	adds	r3, #1
 802eb7e:	b2da      	uxtb	r2, r3
 802eb80:	4b12      	ldr	r3, [pc, #72]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802eb82:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 802eb84:	4b13      	ldr	r3, [pc, #76]	@ (802ebd4 <DMA2_Stream6_IRQHandler+0x74>)
 802eb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802eb88:	2b00      	cmp	r3, #0
 802eb8a:	d005      	beq.n	802eb98 <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 802eb8c:	4b11      	ldr	r3, [pc, #68]	@ (802ebd4 <DMA2_Stream6_IRQHandler+0x74>)
 802eb8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802eb90:	3304      	adds	r3, #4
 802eb92:	4618      	mov	r0, r3
 802eb94:	f7f7 fbde 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802eb98:	4b0c      	ldr	r3, [pc, #48]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802eb9a:	781b      	ldrb	r3, [r3, #0]
 802eb9c:	2b00      	cmp	r3, #0
 802eb9e:	d005      	beq.n	802ebac <DMA2_Stream6_IRQHandler+0x4c>
 802eba0:	4b0a      	ldr	r3, [pc, #40]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802eba2:	781b      	ldrb	r3, [r3, #0]
 802eba4:	3b01      	subs	r3, #1
 802eba6:	b2da      	uxtb	r2, r3
 802eba8:	4b08      	ldr	r3, [pc, #32]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802ebaa:	701a      	strb	r2, [r3, #0]
 802ebac:	4b07      	ldr	r3, [pc, #28]	@ (802ebcc <DMA2_Stream6_IRQHandler+0x6c>)
 802ebae:	781b      	ldrb	r3, [r3, #0]
 802ebb0:	2b00      	cmp	r3, #0
 802ebb2:	d109      	bne.n	802ebc8 <DMA2_Stream6_IRQHandler+0x68>
 802ebb4:	4b06      	ldr	r3, [pc, #24]	@ (802ebd0 <DMA2_Stream6_IRQHandler+0x70>)
 802ebb6:	781b      	ldrb	r3, [r3, #0]
 802ebb8:	2b00      	cmp	r3, #0
 802ebba:	d005      	beq.n	802ebc8 <DMA2_Stream6_IRQHandler+0x68>
 802ebbc:	4b04      	ldr	r3, [pc, #16]	@ (802ebd0 <DMA2_Stream6_IRQHandler+0x70>)
 802ebbe:	781b      	ldrb	r3, [r3, #0]
 802ebc0:	3b01      	subs	r3, #1
 802ebc2:	b2da      	uxtb	r2, r3
 802ebc4:	4b02      	ldr	r3, [pc, #8]	@ (802ebd0 <DMA2_Stream6_IRQHandler+0x70>)
 802ebc6:	701a      	strb	r2, [r3, #0]
}
 802ebc8:	bf00      	nop
 802ebca:	bd80      	pop	{r7, pc}
 802ebcc:	2000b312 	.word	0x2000b312
 802ebd0:	2000b311 	.word	0x2000b311
 802ebd4:	200012e0 	.word	0x200012e0

0802ebd8 <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 802ebd8:	b580      	push	{r7, lr}
 802ebda:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802ebdc:	4b19      	ldr	r3, [pc, #100]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ebde:	781b      	ldrb	r3, [r3, #0]
 802ebe0:	2b00      	cmp	r3, #0
 802ebe2:	d105      	bne.n	802ebf0 <DMA2_Stream7_IRQHandler+0x18>
 802ebe4:	4b18      	ldr	r3, [pc, #96]	@ (802ec48 <DMA2_Stream7_IRQHandler+0x70>)
 802ebe6:	781b      	ldrb	r3, [r3, #0]
 802ebe8:	3301      	adds	r3, #1
 802ebea:	b2da      	uxtb	r2, r3
 802ebec:	4b16      	ldr	r3, [pc, #88]	@ (802ec48 <DMA2_Stream7_IRQHandler+0x70>)
 802ebee:	701a      	strb	r2, [r3, #0]
 802ebf0:	4b14      	ldr	r3, [pc, #80]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ebf2:	781b      	ldrb	r3, [r3, #0]
 802ebf4:	3301      	adds	r3, #1
 802ebf6:	b2da      	uxtb	r2, r3
 802ebf8:	4b12      	ldr	r3, [pc, #72]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ebfa:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 802ebfc:	4b13      	ldr	r3, [pc, #76]	@ (802ec4c <DMA2_Stream7_IRQHandler+0x74>)
 802ebfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ec00:	2b00      	cmp	r3, #0
 802ec02:	d005      	beq.n	802ec10 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 802ec04:	4b11      	ldr	r3, [pc, #68]	@ (802ec4c <DMA2_Stream7_IRQHandler+0x74>)
 802ec06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ec08:	3304      	adds	r3, #4
 802ec0a:	4618      	mov	r0, r3
 802ec0c:	f7f7 fba2 	bl	8026354 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 802ec10:	4b0c      	ldr	r3, [pc, #48]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ec12:	781b      	ldrb	r3, [r3, #0]
 802ec14:	2b00      	cmp	r3, #0
 802ec16:	d005      	beq.n	802ec24 <DMA2_Stream7_IRQHandler+0x4c>
 802ec18:	4b0a      	ldr	r3, [pc, #40]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ec1a:	781b      	ldrb	r3, [r3, #0]
 802ec1c:	3b01      	subs	r3, #1
 802ec1e:	b2da      	uxtb	r2, r3
 802ec20:	4b08      	ldr	r3, [pc, #32]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ec22:	701a      	strb	r2, [r3, #0]
 802ec24:	4b07      	ldr	r3, [pc, #28]	@ (802ec44 <DMA2_Stream7_IRQHandler+0x6c>)
 802ec26:	781b      	ldrb	r3, [r3, #0]
 802ec28:	2b00      	cmp	r3, #0
 802ec2a:	d109      	bne.n	802ec40 <DMA2_Stream7_IRQHandler+0x68>
 802ec2c:	4b06      	ldr	r3, [pc, #24]	@ (802ec48 <DMA2_Stream7_IRQHandler+0x70>)
 802ec2e:	781b      	ldrb	r3, [r3, #0]
 802ec30:	2b00      	cmp	r3, #0
 802ec32:	d005      	beq.n	802ec40 <DMA2_Stream7_IRQHandler+0x68>
 802ec34:	4b04      	ldr	r3, [pc, #16]	@ (802ec48 <DMA2_Stream7_IRQHandler+0x70>)
 802ec36:	781b      	ldrb	r3, [r3, #0]
 802ec38:	3b01      	subs	r3, #1
 802ec3a:	b2da      	uxtb	r2, r3
 802ec3c:	4b02      	ldr	r3, [pc, #8]	@ (802ec48 <DMA2_Stream7_IRQHandler+0x70>)
 802ec3e:	701a      	strb	r2, [r3, #0]
}
 802ec40:	bf00      	nop
 802ec42:	bd80      	pop	{r7, pc}
 802ec44:	2000b312 	.word	0x2000b312
 802ec48:	2000b311 	.word	0x2000b311
 802ec4c:	200012e0 	.word	0x200012e0

0802ec50 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 802ec50:	b580      	push	{r7, lr}
 802ec52:	b082      	sub	sp, #8
 802ec54:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 802ec56:	2355      	movs	r3, #85	@ 0x55
 802ec58:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 802ec5a:	2300      	movs	r3, #0
 802ec5c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 802ec5e:	2300      	movs	r3, #0
 802ec60:	71bb      	strb	r3, [r7, #6]
 802ec62:	e00e      	b.n	802ec82 <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 802ec64:	79fb      	ldrb	r3, [r7, #7]
 802ec66:	2b55      	cmp	r3, #85	@ 0x55
 802ec68:	d106      	bne.n	802ec78 <drv_gpioInit+0x28>
 802ec6a:	79bb      	ldrb	r3, [r7, #6]
 802ec6c:	4618      	mov	r0, r3
 802ec6e:	f000 f81b 	bl	802eca8 <drv_gpioInitPin>
 802ec72:	4603      	mov	r3, r0
 802ec74:	71fb      	strb	r3, [r7, #7]
 802ec76:	e001      	b.n	802ec7c <drv_gpioInit+0x2c>
 802ec78:	23ae      	movs	r3, #174	@ 0xae
 802ec7a:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 802ec7c:	79bb      	ldrb	r3, [r7, #6]
 802ec7e:	3301      	adds	r3, #1
 802ec80:	71bb      	strb	r3, [r7, #6]
 802ec82:	79bb      	ldrb	r3, [r7, #6]
 802ec84:	4a06      	ldr	r2, [pc, #24]	@ (802eca0 <drv_gpioInit+0x50>)
 802ec86:	6812      	ldr	r2, [r2, #0]
 802ec88:	0892      	lsrs	r2, r2, #2
 802ec8a:	4906      	ldr	r1, [pc, #24]	@ (802eca4 <drv_gpioInit+0x54>)
 802ec8c:	fba1 1202 	umull	r1, r2, r1, r2
 802ec90:	4293      	cmp	r3, r2
 802ec92:	d3e7      	bcc.n	802ec64 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 802ec94:	79fb      	ldrb	r3, [r7, #7]
}
 802ec96:	4618      	mov	r0, r3
 802ec98:	3708      	adds	r7, #8
 802ec9a:	46bd      	mov	sp, r7
 802ec9c:	bd80      	pop	{r7, pc}
 802ec9e:	bf00      	nop
 802eca0:	200013d4 	.word	0x200013d4
 802eca4:	24924925 	.word	0x24924925

0802eca8 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 802eca8:	b590      	push	{r4, r7, lr}
 802ecaa:	b089      	sub	sp, #36	@ 0x24
 802ecac:	af00      	add	r7, sp, #0
 802ecae:	4603      	mov	r3, r0
 802ecb0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 802ecb2:	23ae      	movs	r3, #174	@ 0xae
 802ecb4:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 802ecb6:	f107 0308 	add.w	r3, r7, #8
 802ecba:	2200      	movs	r2, #0
 802ecbc:	601a      	str	r2, [r3, #0]
 802ecbe:	605a      	str	r2, [r3, #4]
 802ecc0:	609a      	str	r2, [r3, #8]
 802ecc2:	60da      	str	r2, [r3, #12]
 802ecc4:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 802ecc6:	79fb      	ldrb	r3, [r7, #7]
 802ecc8:	4a40      	ldr	r2, [pc, #256]	@ (802edcc <drv_gpioInitPin+0x124>)
 802ecca:	6812      	ldr	r2, [r2, #0]
 802eccc:	0892      	lsrs	r2, r2, #2
 802ecce:	4940      	ldr	r1, [pc, #256]	@ (802edd0 <drv_gpioInitPin+0x128>)
 802ecd0:	fba1 1202 	umull	r1, r2, r1, r2
 802ecd4:	4293      	cmp	r3, r2
 802ecd6:	d274      	bcs.n	802edc2 <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 802ecd8:	79fa      	ldrb	r2, [r7, #7]
 802ecda:	493e      	ldr	r1, [pc, #248]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ecdc:	4613      	mov	r3, r2
 802ecde:	00db      	lsls	r3, r3, #3
 802ece0:	1a9b      	subs	r3, r3, r2
 802ece2:	009b      	lsls	r3, r3, #2
 802ece4:	440b      	add	r3, r1
 802ece6:	3304      	adds	r3, #4
 802ece8:	881b      	ldrh	r3, [r3, #0]
 802ecea:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 802ecec:	79fa      	ldrb	r2, [r7, #7]
 802ecee:	4939      	ldr	r1, [pc, #228]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ecf0:	4613      	mov	r3, r2
 802ecf2:	00db      	lsls	r3, r3, #3
 802ecf4:	1a9b      	subs	r3, r3, r2
 802ecf6:	009b      	lsls	r3, r3, #2
 802ecf8:	440b      	add	r3, r1
 802ecfa:	3308      	adds	r3, #8
 802ecfc:	681b      	ldr	r3, [r3, #0]
 802ecfe:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 802ed00:	79fa      	ldrb	r2, [r7, #7]
 802ed02:	4934      	ldr	r1, [pc, #208]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed04:	4613      	mov	r3, r2
 802ed06:	00db      	lsls	r3, r3, #3
 802ed08:	1a9b      	subs	r3, r3, r2
 802ed0a:	009b      	lsls	r3, r3, #2
 802ed0c:	440b      	add	r3, r1
 802ed0e:	3310      	adds	r3, #16
 802ed10:	681b      	ldr	r3, [r3, #0]
 802ed12:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 802ed14:	79fa      	ldrb	r2, [r7, #7]
 802ed16:	492f      	ldr	r1, [pc, #188]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed18:	4613      	mov	r3, r2
 802ed1a:	00db      	lsls	r3, r3, #3
 802ed1c:	1a9b      	subs	r3, r3, r2
 802ed1e:	009b      	lsls	r3, r3, #2
 802ed20:	440b      	add	r3, r1
 802ed22:	330c      	adds	r3, #12
 802ed24:	681b      	ldr	r3, [r3, #0]
 802ed26:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 802ed28:	79fa      	ldrb	r2, [r7, #7]
 802ed2a:	492a      	ldr	r1, [pc, #168]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed2c:	4613      	mov	r3, r2
 802ed2e:	00db      	lsls	r3, r3, #3
 802ed30:	1a9b      	subs	r3, r3, r2
 802ed32:	009b      	lsls	r3, r3, #2
 802ed34:	440b      	add	r3, r1
 802ed36:	3314      	adds	r3, #20
 802ed38:	681b      	ldr	r3, [r3, #0]
 802ed3a:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 802ed3c:	79fa      	ldrb	r2, [r7, #7]
 802ed3e:	4925      	ldr	r1, [pc, #148]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed40:	4613      	mov	r3, r2
 802ed42:	00db      	lsls	r3, r3, #3
 802ed44:	1a9b      	subs	r3, r3, r2
 802ed46:	009b      	lsls	r3, r3, #2
 802ed48:	440b      	add	r3, r1
 802ed4a:	681b      	ldr	r3, [r3, #0]
 802ed4c:	f107 0208 	add.w	r2, r7, #8
 802ed50:	4611      	mov	r1, r2
 802ed52:	4618      	mov	r0, r3
 802ed54:	f7f7 fd82 	bl	802685c <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 802ed58:	79fa      	ldrb	r2, [r7, #7]
 802ed5a:	491e      	ldr	r1, [pc, #120]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed5c:	4613      	mov	r3, r2
 802ed5e:	00db      	lsls	r3, r3, #3
 802ed60:	1a9b      	subs	r3, r3, r2
 802ed62:	009b      	lsls	r3, r3, #2
 802ed64:	440b      	add	r3, r1
 802ed66:	3318      	adds	r3, #24
 802ed68:	781b      	ldrb	r3, [r3, #0]
 802ed6a:	2b01      	cmp	r3, #1
 802ed6c:	d00a      	beq.n	802ed84 <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 802ed6e:	79fa      	ldrb	r2, [r7, #7]
 802ed70:	4918      	ldr	r1, [pc, #96]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed72:	4613      	mov	r3, r2
 802ed74:	00db      	lsls	r3, r3, #3
 802ed76:	1a9b      	subs	r3, r3, r2
 802ed78:	009b      	lsls	r3, r3, #2
 802ed7a:	440b      	add	r3, r1
 802ed7c:	3318      	adds	r3, #24
 802ed7e:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 802ed80:	2b00      	cmp	r3, #0
 802ed82:	d11c      	bne.n	802edbe <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 802ed84:	79fa      	ldrb	r2, [r7, #7]
 802ed86:	4913      	ldr	r1, [pc, #76]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed88:	4613      	mov	r3, r2
 802ed8a:	00db      	lsls	r3, r3, #3
 802ed8c:	1a9b      	subs	r3, r3, r2
 802ed8e:	009b      	lsls	r3, r3, #2
 802ed90:	440b      	add	r3, r1
 802ed92:	6818      	ldr	r0, [r3, #0]
 802ed94:	79fa      	ldrb	r2, [r7, #7]
 802ed96:	490f      	ldr	r1, [pc, #60]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802ed98:	4613      	mov	r3, r2
 802ed9a:	00db      	lsls	r3, r3, #3
 802ed9c:	1a9b      	subs	r3, r3, r2
 802ed9e:	009b      	lsls	r3, r3, #2
 802eda0:	440b      	add	r3, r1
 802eda2:	3304      	adds	r3, #4
 802eda4:	8819      	ldrh	r1, [r3, #0]
 802eda6:	79fa      	ldrb	r2, [r7, #7]
 802eda8:	4c0a      	ldr	r4, [pc, #40]	@ (802edd4 <drv_gpioInitPin+0x12c>)
 802edaa:	4613      	mov	r3, r2
 802edac:	00db      	lsls	r3, r3, #3
 802edae:	1a9b      	subs	r3, r3, r2
 802edb0:	009b      	lsls	r3, r3, #2
 802edb2:	4423      	add	r3, r4
 802edb4:	3318      	adds	r3, #24
 802edb6:	781b      	ldrb	r3, [r3, #0]
 802edb8:	461a      	mov	r2, r3
 802edba:	f7f7 fee3 	bl	8026b84 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 802edbe:	2355      	movs	r3, #85	@ 0x55
 802edc0:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 802edc2:	7ffb      	ldrb	r3, [r7, #31]
}
 802edc4:	4618      	mov	r0, r3
 802edc6:	3724      	adds	r7, #36	@ 0x24
 802edc8:	46bd      	mov	sp, r7
 802edca:	bd90      	pop	{r4, r7, pc}
 802edcc:	200013d4 	.word	0x200013d4
 802edd0:	24924925 	.word	0x24924925
 802edd4:	0803fbd0 	.word	0x0803fbd0

0802edd8 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 802edd8:	b580      	push	{r7, lr}
 802edda:	b084      	sub	sp, #16
 802eddc:	af00      	add	r7, sp, #0
 802edde:	4603      	mov	r3, r0
 802ede0:	460a      	mov	r2, r1
 802ede2:	71fb      	strb	r3, [r7, #7]
 802ede4:	4613      	mov	r3, r2
 802ede6:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 802ede8:	23ae      	movs	r3, #174	@ 0xae
 802edea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 802edec:	79fb      	ldrb	r3, [r7, #7]
 802edee:	4a13      	ldr	r2, [pc, #76]	@ (802ee3c <drv_gpioWritePin+0x64>)
 802edf0:	6812      	ldr	r2, [r2, #0]
 802edf2:	0892      	lsrs	r2, r2, #2
 802edf4:	4912      	ldr	r1, [pc, #72]	@ (802ee40 <drv_gpioWritePin+0x68>)
 802edf6:	fba1 1202 	umull	r1, r2, r1, r2
 802edfa:	4293      	cmp	r3, r2
 802edfc:	d219      	bcs.n	802ee32 <drv_gpioWritePin+0x5a>
 802edfe:	79bb      	ldrb	r3, [r7, #6]
 802ee00:	2b01      	cmp	r3, #1
 802ee02:	d816      	bhi.n	802ee32 <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 802ee04:	79fa      	ldrb	r2, [r7, #7]
 802ee06:	490f      	ldr	r1, [pc, #60]	@ (802ee44 <drv_gpioWritePin+0x6c>)
 802ee08:	4613      	mov	r3, r2
 802ee0a:	00db      	lsls	r3, r3, #3
 802ee0c:	1a9b      	subs	r3, r3, r2
 802ee0e:	009b      	lsls	r3, r3, #2
 802ee10:	440b      	add	r3, r1
 802ee12:	6818      	ldr	r0, [r3, #0]
 802ee14:	79fa      	ldrb	r2, [r7, #7]
 802ee16:	490b      	ldr	r1, [pc, #44]	@ (802ee44 <drv_gpioWritePin+0x6c>)
 802ee18:	4613      	mov	r3, r2
 802ee1a:	00db      	lsls	r3, r3, #3
 802ee1c:	1a9b      	subs	r3, r3, r2
 802ee1e:	009b      	lsls	r3, r3, #2
 802ee20:	440b      	add	r3, r1
 802ee22:	3304      	adds	r3, #4
 802ee24:	881b      	ldrh	r3, [r3, #0]
 802ee26:	79ba      	ldrb	r2, [r7, #6]
 802ee28:	4619      	mov	r1, r3
 802ee2a:	f7f7 feab 	bl	8026b84 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 802ee2e:	2355      	movs	r3, #85	@ 0x55
 802ee30:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 802ee32:	7bfb      	ldrb	r3, [r7, #15]
}
 802ee34:	4618      	mov	r0, r3
 802ee36:	3710      	adds	r7, #16
 802ee38:	46bd      	mov	sp, r7
 802ee3a:	bd80      	pop	{r7, pc}
 802ee3c:	200013d4 	.word	0x200013d4
 802ee40:	24924925 	.word	0x24924925
 802ee44:	0803fbd0 	.word	0x0803fbd0

0802ee48 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 802ee48:	b580      	push	{r7, lr}
 802ee4a:	b084      	sub	sp, #16
 802ee4c:	af00      	add	r7, sp, #0
 802ee4e:	4603      	mov	r3, r0
 802ee50:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 802ee52:	23ae      	movs	r3, #174	@ 0xae
 802ee54:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 802ee56:	79fb      	ldrb	r3, [r7, #7]
 802ee58:	4a11      	ldr	r2, [pc, #68]	@ (802eea0 <drv_gpioTgglePin+0x58>)
 802ee5a:	6812      	ldr	r2, [r2, #0]
 802ee5c:	0892      	lsrs	r2, r2, #2
 802ee5e:	4911      	ldr	r1, [pc, #68]	@ (802eea4 <drv_gpioTgglePin+0x5c>)
 802ee60:	fba1 1202 	umull	r1, r2, r1, r2
 802ee64:	4293      	cmp	r3, r2
 802ee66:	d215      	bcs.n	802ee94 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 802ee68:	79fa      	ldrb	r2, [r7, #7]
 802ee6a:	490f      	ldr	r1, [pc, #60]	@ (802eea8 <drv_gpioTgglePin+0x60>)
 802ee6c:	4613      	mov	r3, r2
 802ee6e:	00db      	lsls	r3, r3, #3
 802ee70:	1a9b      	subs	r3, r3, r2
 802ee72:	009b      	lsls	r3, r3, #2
 802ee74:	440b      	add	r3, r1
 802ee76:	6818      	ldr	r0, [r3, #0]
 802ee78:	79fa      	ldrb	r2, [r7, #7]
 802ee7a:	490b      	ldr	r1, [pc, #44]	@ (802eea8 <drv_gpioTgglePin+0x60>)
 802ee7c:	4613      	mov	r3, r2
 802ee7e:	00db      	lsls	r3, r3, #3
 802ee80:	1a9b      	subs	r3, r3, r2
 802ee82:	009b      	lsls	r3, r3, #2
 802ee84:	440b      	add	r3, r1
 802ee86:	3304      	adds	r3, #4
 802ee88:	881b      	ldrh	r3, [r3, #0]
 802ee8a:	4619      	mov	r1, r3
 802ee8c:	f7f7 fe93 	bl	8026bb6 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 802ee90:	2355      	movs	r3, #85	@ 0x55
 802ee92:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 802ee94:	7bfb      	ldrb	r3, [r7, #15]
}
 802ee96:	4618      	mov	r0, r3
 802ee98:	3710      	adds	r7, #16
 802ee9a:	46bd      	mov	sp, r7
 802ee9c:	bd80      	pop	{r7, pc}
 802ee9e:	bf00      	nop
 802eea0:	200013d4 	.word	0x200013d4
 802eea4:	24924925 	.word	0x24924925
 802eea8:	0803fbd0 	.word	0x0803fbd0

0802eeac <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 802eeac:	b580      	push	{r7, lr}
 802eeae:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802eeb0:	4b1d      	ldr	r3, [pc, #116]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802eeb2:	781b      	ldrb	r3, [r3, #0]
 802eeb4:	2b00      	cmp	r3, #0
 802eeb6:	d105      	bne.n	802eec4 <EXTI9_5_IRQHandler+0x18>
 802eeb8:	4b1c      	ldr	r3, [pc, #112]	@ (802ef2c <EXTI9_5_IRQHandler+0x80>)
 802eeba:	781b      	ldrb	r3, [r3, #0]
 802eebc:	3301      	adds	r3, #1
 802eebe:	b2da      	uxtb	r2, r3
 802eec0:	4b1a      	ldr	r3, [pc, #104]	@ (802ef2c <EXTI9_5_IRQHandler+0x80>)
 802eec2:	701a      	strb	r2, [r3, #0]
 802eec4:	4b18      	ldr	r3, [pc, #96]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802eec6:	781b      	ldrb	r3, [r3, #0]
 802eec8:	3301      	adds	r3, #1
 802eeca:	b2da      	uxtb	r2, r3
 802eecc:	4b16      	ldr	r3, [pc, #88]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802eece:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 802eed0:	2020      	movs	r0, #32
 802eed2:	f7f7 fe8b 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 802eed6:	2040      	movs	r0, #64	@ 0x40
 802eed8:	f7f7 fe88 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 802eedc:	2080      	movs	r0, #128	@ 0x80
 802eede:	f7f7 fe85 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 802eee2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 802eee6:	f7f7 fe81 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 802eeea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 802eeee:	f7f7 fe7d 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 802eef2:	4b0d      	ldr	r3, [pc, #52]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802eef4:	781b      	ldrb	r3, [r3, #0]
 802eef6:	2b00      	cmp	r3, #0
 802eef8:	d005      	beq.n	802ef06 <EXTI9_5_IRQHandler+0x5a>
 802eefa:	4b0b      	ldr	r3, [pc, #44]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802eefc:	781b      	ldrb	r3, [r3, #0]
 802eefe:	3b01      	subs	r3, #1
 802ef00:	b2da      	uxtb	r2, r3
 802ef02:	4b09      	ldr	r3, [pc, #36]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802ef04:	701a      	strb	r2, [r3, #0]
 802ef06:	4b08      	ldr	r3, [pc, #32]	@ (802ef28 <EXTI9_5_IRQHandler+0x7c>)
 802ef08:	781b      	ldrb	r3, [r3, #0]
 802ef0a:	2b00      	cmp	r3, #0
 802ef0c:	d109      	bne.n	802ef22 <EXTI9_5_IRQHandler+0x76>
 802ef0e:	4b07      	ldr	r3, [pc, #28]	@ (802ef2c <EXTI9_5_IRQHandler+0x80>)
 802ef10:	781b      	ldrb	r3, [r3, #0]
 802ef12:	2b00      	cmp	r3, #0
 802ef14:	d005      	beq.n	802ef22 <EXTI9_5_IRQHandler+0x76>
 802ef16:	4b05      	ldr	r3, [pc, #20]	@ (802ef2c <EXTI9_5_IRQHandler+0x80>)
 802ef18:	781b      	ldrb	r3, [r3, #0]
 802ef1a:	3b01      	subs	r3, #1
 802ef1c:	b2da      	uxtb	r2, r3
 802ef1e:	4b03      	ldr	r3, [pc, #12]	@ (802ef2c <EXTI9_5_IRQHandler+0x80>)
 802ef20:	701a      	strb	r2, [r3, #0]
}
 802ef22:	bf00      	nop
 802ef24:	bd80      	pop	{r7, pc}
 802ef26:	bf00      	nop
 802ef28:	2000b312 	.word	0x2000b312
 802ef2c:	2000b311 	.word	0x2000b311

0802ef30 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 802ef30:	b580      	push	{r7, lr}
 802ef32:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802ef34:	4b20      	ldr	r3, [pc, #128]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef36:	781b      	ldrb	r3, [r3, #0]
 802ef38:	2b00      	cmp	r3, #0
 802ef3a:	d105      	bne.n	802ef48 <EXTI15_10_IRQHandler+0x18>
 802ef3c:	4b1f      	ldr	r3, [pc, #124]	@ (802efbc <EXTI15_10_IRQHandler+0x8c>)
 802ef3e:	781b      	ldrb	r3, [r3, #0]
 802ef40:	3301      	adds	r3, #1
 802ef42:	b2da      	uxtb	r2, r3
 802ef44:	4b1d      	ldr	r3, [pc, #116]	@ (802efbc <EXTI15_10_IRQHandler+0x8c>)
 802ef46:	701a      	strb	r2, [r3, #0]
 802ef48:	4b1b      	ldr	r3, [pc, #108]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef4a:	781b      	ldrb	r3, [r3, #0]
 802ef4c:	3301      	adds	r3, #1
 802ef4e:	b2da      	uxtb	r2, r3
 802ef50:	4b19      	ldr	r3, [pc, #100]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef52:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 802ef54:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 802ef58:	f7f7 fe48 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 802ef5c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802ef60:	f7f7 fe44 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 802ef64:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 802ef68:	f7f7 fe40 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 802ef6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 802ef70:	f7f7 fe3c 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 802ef74:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 802ef78:	f7f7 fe38 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 802ef7c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 802ef80:	f7f7 fe34 	bl	8026bec <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 802ef84:	4b0c      	ldr	r3, [pc, #48]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef86:	781b      	ldrb	r3, [r3, #0]
 802ef88:	2b00      	cmp	r3, #0
 802ef8a:	d005      	beq.n	802ef98 <EXTI15_10_IRQHandler+0x68>
 802ef8c:	4b0a      	ldr	r3, [pc, #40]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef8e:	781b      	ldrb	r3, [r3, #0]
 802ef90:	3b01      	subs	r3, #1
 802ef92:	b2da      	uxtb	r2, r3
 802ef94:	4b08      	ldr	r3, [pc, #32]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef96:	701a      	strb	r2, [r3, #0]
 802ef98:	4b07      	ldr	r3, [pc, #28]	@ (802efb8 <EXTI15_10_IRQHandler+0x88>)
 802ef9a:	781b      	ldrb	r3, [r3, #0]
 802ef9c:	2b00      	cmp	r3, #0
 802ef9e:	d109      	bne.n	802efb4 <EXTI15_10_IRQHandler+0x84>
 802efa0:	4b06      	ldr	r3, [pc, #24]	@ (802efbc <EXTI15_10_IRQHandler+0x8c>)
 802efa2:	781b      	ldrb	r3, [r3, #0]
 802efa4:	2b00      	cmp	r3, #0
 802efa6:	d005      	beq.n	802efb4 <EXTI15_10_IRQHandler+0x84>
 802efa8:	4b04      	ldr	r3, [pc, #16]	@ (802efbc <EXTI15_10_IRQHandler+0x8c>)
 802efaa:	781b      	ldrb	r3, [r3, #0]
 802efac:	3b01      	subs	r3, #1
 802efae:	b2da      	uxtb	r2, r3
 802efb0:	4b02      	ldr	r3, [pc, #8]	@ (802efbc <EXTI15_10_IRQHandler+0x8c>)
 802efb2:	701a      	strb	r2, [r3, #0]
}
 802efb4:	bf00      	nop
 802efb6:	bd80      	pop	{r7, pc}
 802efb8:	2000b312 	.word	0x2000b312
 802efbc:	2000b311 	.word	0x2000b311

0802efc0 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 802efc0:	b580      	push	{r7, lr}
 802efc2:	b084      	sub	sp, #16
 802efc4:	af00      	add	r7, sp, #0
 802efc6:	4603      	mov	r3, r0
 802efc8:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 802efca:	4b27      	ldr	r3, [pc, #156]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802efcc:	781b      	ldrb	r3, [r3, #0]
 802efce:	2b00      	cmp	r3, #0
 802efd0:	d105      	bne.n	802efde <HAL_GPIO_EXTI_Callback+0x1e>
 802efd2:	4b26      	ldr	r3, [pc, #152]	@ (802f06c <HAL_GPIO_EXTI_Callback+0xac>)
 802efd4:	781b      	ldrb	r3, [r3, #0]
 802efd6:	3301      	adds	r3, #1
 802efd8:	b2da      	uxtb	r2, r3
 802efda:	4b24      	ldr	r3, [pc, #144]	@ (802f06c <HAL_GPIO_EXTI_Callback+0xac>)
 802efdc:	701a      	strb	r2, [r3, #0]
 802efde:	4b22      	ldr	r3, [pc, #136]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802efe0:	781b      	ldrb	r3, [r3, #0]
 802efe2:	3301      	adds	r3, #1
 802efe4:	b2da      	uxtb	r2, r3
 802efe6:	4b20      	ldr	r3, [pc, #128]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802efe8:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 802efea:	2300      	movs	r3, #0
 802efec:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 802efee:	2300      	movs	r3, #0
 802eff0:	73fb      	strb	r3, [r7, #15]
 802eff2:	e016      	b.n	802f022 <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 802eff4:	7bfb      	ldrb	r3, [r7, #15]
 802eff6:	4a1e      	ldr	r2, [pc, #120]	@ (802f070 <HAL_GPIO_EXTI_Callback+0xb0>)
 802eff8:	00db      	lsls	r3, r3, #3
 802effa:	4413      	add	r3, r2
 802effc:	889b      	ldrh	r3, [r3, #4]
 802effe:	88fa      	ldrh	r2, [r7, #6]
 802f000:	429a      	cmp	r2, r3
 802f002:	d10b      	bne.n	802f01c <HAL_GPIO_EXTI_Callback+0x5c>
 802f004:	7bfb      	ldrb	r3, [r7, #15]
 802f006:	4a1a      	ldr	r2, [pc, #104]	@ (802f070 <HAL_GPIO_EXTI_Callback+0xb0>)
 802f008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802f00c:	2b00      	cmp	r3, #0
 802f00e:	d005      	beq.n	802f01c <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 802f010:	7bfb      	ldrb	r3, [r7, #15]
 802f012:	4a17      	ldr	r2, [pc, #92]	@ (802f070 <HAL_GPIO_EXTI_Callback+0xb0>)
 802f014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802f018:	4798      	blx	r3
                break;
 802f01a:	e008      	b.n	802f02e <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 802f01c:	7bfb      	ldrb	r3, [r7, #15]
 802f01e:	3301      	adds	r3, #1
 802f020:	73fb      	strb	r3, [r7, #15]
 802f022:	7bfa      	ldrb	r2, [r7, #15]
 802f024:	4b13      	ldr	r3, [pc, #76]	@ (802f074 <HAL_GPIO_EXTI_Callback+0xb4>)
 802f026:	681b      	ldr	r3, [r3, #0]
 802f028:	08db      	lsrs	r3, r3, #3
 802f02a:	429a      	cmp	r2, r3
 802f02c:	d3e2      	bcc.n	802eff4 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 802f02e:	4b0e      	ldr	r3, [pc, #56]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802f030:	781b      	ldrb	r3, [r3, #0]
 802f032:	2b00      	cmp	r3, #0
 802f034:	d005      	beq.n	802f042 <HAL_GPIO_EXTI_Callback+0x82>
 802f036:	4b0c      	ldr	r3, [pc, #48]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802f038:	781b      	ldrb	r3, [r3, #0]
 802f03a:	3b01      	subs	r3, #1
 802f03c:	b2da      	uxtb	r2, r3
 802f03e:	4b0a      	ldr	r3, [pc, #40]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802f040:	701a      	strb	r2, [r3, #0]
 802f042:	4b09      	ldr	r3, [pc, #36]	@ (802f068 <HAL_GPIO_EXTI_Callback+0xa8>)
 802f044:	781b      	ldrb	r3, [r3, #0]
 802f046:	2b00      	cmp	r3, #0
 802f048:	d109      	bne.n	802f05e <HAL_GPIO_EXTI_Callback+0x9e>
 802f04a:	4b08      	ldr	r3, [pc, #32]	@ (802f06c <HAL_GPIO_EXTI_Callback+0xac>)
 802f04c:	781b      	ldrb	r3, [r3, #0]
 802f04e:	2b00      	cmp	r3, #0
 802f050:	d005      	beq.n	802f05e <HAL_GPIO_EXTI_Callback+0x9e>
 802f052:	4b06      	ldr	r3, [pc, #24]	@ (802f06c <HAL_GPIO_EXTI_Callback+0xac>)
 802f054:	781b      	ldrb	r3, [r3, #0]
 802f056:	3b01      	subs	r3, #1
 802f058:	b2da      	uxtb	r2, r3
 802f05a:	4b04      	ldr	r3, [pc, #16]	@ (802f06c <HAL_GPIO_EXTI_Callback+0xac>)
 802f05c:	701a      	strb	r2, [r3, #0]
}
 802f05e:	bf00      	nop
 802f060:	3710      	adds	r7, #16
 802f062:	46bd      	mov	sp, r7
 802f064:	bd80      	pop	{r7, pc}
 802f066:	bf00      	nop
 802f068:	2000b312 	.word	0x2000b312
 802f06c:	2000b311 	.word	0x2000b311
 802f070:	0803fe70 	.word	0x0803fe70
 802f074:	200013d8 	.word	0x200013d8

0802f078 <drv_i2cInit>:

/*
 * Function: drv_i2cInit
 */
gos_result_t drv_i2cInit (void_t)
{
 802f078:	b580      	push	{r7, lr}
 802f07a:	b082      	sub	sp, #8
 802f07c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t i2cDriverInitResult = GOS_SUCCESS;
 802f07e:	2355      	movs	r3, #85	@ 0x55
 802f080:	71fb      	strb	r3, [r7, #7]
    u8_t         i2cIdx              = 0u;
 802f082:	2300      	movs	r3, #0
 802f084:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (i2cConfig != NULL)
    {
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 802f086:	2300      	movs	r3, #0
 802f088:	71bb      	strb	r3, [r7, #6]
 802f08a:	e013      	b.n	802f0b4 <drv_i2cInit+0x3c>
        {
            GOS_CONCAT_RESULT(i2cDriverInitResult, drv_i2cInitInstance(&i2cConfig[i2cIdx]));
 802f08c:	79fb      	ldrb	r3, [r7, #7]
 802f08e:	2b55      	cmp	r3, #85	@ 0x55
 802f090:	d10b      	bne.n	802f0aa <drv_i2cInit+0x32>
 802f092:	79bb      	ldrb	r3, [r7, #6]
 802f094:	222c      	movs	r2, #44	@ 0x2c
 802f096:	fb02 f303 	mul.w	r3, r2, r3
 802f09a:	4a0d      	ldr	r2, [pc, #52]	@ (802f0d0 <drv_i2cInit+0x58>)
 802f09c:	4413      	add	r3, r2
 802f09e:	4618      	mov	r0, r3
 802f0a0:	f000 f81c 	bl	802f0dc <drv_i2cInitInstance>
 802f0a4:	4603      	mov	r3, r0
 802f0a6:	71fb      	strb	r3, [r7, #7]
 802f0a8:	e001      	b.n	802f0ae <drv_i2cInit+0x36>
 802f0aa:	23ae      	movs	r3, #174	@ 0xae
 802f0ac:	71fb      	strb	r3, [r7, #7]
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 802f0ae:	79bb      	ldrb	r3, [r7, #6]
 802f0b0:	3301      	adds	r3, #1
 802f0b2:	71bb      	strb	r3, [r7, #6]
 802f0b4:	79ba      	ldrb	r2, [r7, #6]
 802f0b6:	4b07      	ldr	r3, [pc, #28]	@ (802f0d4 <drv_i2cInit+0x5c>)
 802f0b8:	681b      	ldr	r3, [r3, #0]
 802f0ba:	4907      	ldr	r1, [pc, #28]	@ (802f0d8 <drv_i2cInit+0x60>)
 802f0bc:	fba1 1303 	umull	r1, r3, r1, r3
 802f0c0:	095b      	lsrs	r3, r3, #5
 802f0c2:	429a      	cmp	r2, r3
 802f0c4:	d3e2      	bcc.n	802f08c <drv_i2cInit+0x14>
    {
        // Configuration array is NULL pointer.
        i2cDriverInitResult = GOS_ERROR;
    }

    return i2cDriverInitResult;
 802f0c6:	79fb      	ldrb	r3, [r7, #7]
}
 802f0c8:	4618      	mov	r0, r3
 802f0ca:	3708      	adds	r7, #8
 802f0cc:	46bd      	mov	sp, r7
 802f0ce:	bd80      	pop	{r7, pc}
 802f0d0:	0803fe78 	.word	0x0803fe78
 802f0d4:	200013dc 	.word	0x200013dc
 802f0d8:	ba2e8ba3 	.word	0xba2e8ba3

0802f0dc <drv_i2cInitInstance>:

/*
 * Function: drv_i2cInitInstance
 */
gos_result_t drv_i2cInitInstance (GOS_CONST drv_i2cDescriptor_t* pInstance)
{
 802f0dc:	b580      	push	{r7, lr}
 802f0de:	b084      	sub	sp, #16
 802f0e0:	af00      	add	r7, sp, #0
 802f0e2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            i2cInitResult = GOS_ERROR;
 802f0e4:	23ae      	movs	r3, #174	@ 0xae
 802f0e6:	73fb      	strb	r3, [r7, #15]
    drv_i2cPeriphInstance_t instance      = 0u;
 802f0e8:	2300      	movs	r3, #0
 802f0ea:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pInstance != NULL)
 802f0ec:	687b      	ldr	r3, [r7, #4]
 802f0ee:	2b00      	cmp	r3, #0
 802f0f0:	f000 80e7 	beq.w	802f2c2 <drv_i2cInitInstance+0x1e6>
    {
        instance = pInstance->periphInstance;
 802f0f4:	687b      	ldr	r3, [r7, #4]
 802f0f6:	781b      	ldrb	r3, [r3, #0]
 802f0f8:	73bb      	strb	r3, [r7, #14]

        hi2cs[instance].Instance             = i2cInstanceLut[instance];
 802f0fa:	7bba      	ldrb	r2, [r7, #14]
 802f0fc:	7bbb      	ldrb	r3, [r7, #14]
 802f0fe:	4973      	ldr	r1, [pc, #460]	@ (802f2cc <drv_i2cInitInstance+0x1f0>)
 802f100:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802f104:	4972      	ldr	r1, [pc, #456]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f106:	2054      	movs	r0, #84	@ 0x54
 802f108:	fb00 f303 	mul.w	r3, r0, r3
 802f10c:	440b      	add	r3, r1
 802f10e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.ClockSpeed      = pInstance->clockSpeed;
 802f110:	7bbb      	ldrb	r3, [r7, #14]
 802f112:	687a      	ldr	r2, [r7, #4]
 802f114:	6852      	ldr	r2, [r2, #4]
 802f116:	496e      	ldr	r1, [pc, #440]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f118:	2054      	movs	r0, #84	@ 0x54
 802f11a:	fb00 f303 	mul.w	r3, r0, r3
 802f11e:	440b      	add	r3, r1
 802f120:	3304      	adds	r3, #4
 802f122:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DutyCycle       = pInstance->dutyCycle;
 802f124:	7bbb      	ldrb	r3, [r7, #14]
 802f126:	687a      	ldr	r2, [r7, #4]
 802f128:	6892      	ldr	r2, [r2, #8]
 802f12a:	4969      	ldr	r1, [pc, #420]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f12c:	2054      	movs	r0, #84	@ 0x54
 802f12e:	fb00 f303 	mul.w	r3, r0, r3
 802f132:	440b      	add	r3, r1
 802f134:	3308      	adds	r3, #8
 802f136:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.AddressingMode  = pInstance->addressingMode;
 802f138:	7bbb      	ldrb	r3, [r7, #14]
 802f13a:	687a      	ldr	r2, [r7, #4]
 802f13c:	6912      	ldr	r2, [r2, #16]
 802f13e:	4964      	ldr	r1, [pc, #400]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f140:	2054      	movs	r0, #84	@ 0x54
 802f142:	fb00 f303 	mul.w	r3, r0, r3
 802f146:	440b      	add	r3, r1
 802f148:	3310      	adds	r3, #16
 802f14a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress1     = pInstance->ownAddress1;
 802f14c:	7bbb      	ldrb	r3, [r7, #14]
 802f14e:	687a      	ldr	r2, [r7, #4]
 802f150:	68d2      	ldr	r2, [r2, #12]
 802f152:	495f      	ldr	r1, [pc, #380]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f154:	2054      	movs	r0, #84	@ 0x54
 802f156:	fb00 f303 	mul.w	r3, r0, r3
 802f15a:	440b      	add	r3, r1
 802f15c:	330c      	adds	r3, #12
 802f15e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress2     = pInstance->ownAddress2;
 802f160:	7bbb      	ldrb	r3, [r7, #14]
 802f162:	687a      	ldr	r2, [r7, #4]
 802f164:	6992      	ldr	r2, [r2, #24]
 802f166:	495a      	ldr	r1, [pc, #360]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f168:	2054      	movs	r0, #84	@ 0x54
 802f16a:	fb00 f303 	mul.w	r3, r0, r3
 802f16e:	440b      	add	r3, r1
 802f170:	3318      	adds	r3, #24
 802f172:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DualAddressMode = pInstance->dualAddressMode;
 802f174:	7bbb      	ldrb	r3, [r7, #14]
 802f176:	687a      	ldr	r2, [r7, #4]
 802f178:	6952      	ldr	r2, [r2, #20]
 802f17a:	4955      	ldr	r1, [pc, #340]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f17c:	2054      	movs	r0, #84	@ 0x54
 802f17e:	fb00 f303 	mul.w	r3, r0, r3
 802f182:	440b      	add	r3, r1
 802f184:	3314      	adds	r3, #20
 802f186:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.GeneralCallMode = pInstance->generalCallMode;
 802f188:	7bbb      	ldrb	r3, [r7, #14]
 802f18a:	687a      	ldr	r2, [r7, #4]
 802f18c:	69d2      	ldr	r2, [r2, #28]
 802f18e:	4950      	ldr	r1, [pc, #320]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f190:	2054      	movs	r0, #84	@ 0x54
 802f192:	fb00 f303 	mul.w	r3, r0, r3
 802f196:	440b      	add	r3, r1
 802f198:	331c      	adds	r3, #28
 802f19a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.NoStretchMode   = pInstance->noStretchMode;
 802f19c:	7bbb      	ldrb	r3, [r7, #14]
 802f19e:	687a      	ldr	r2, [r7, #4]
 802f1a0:	6a12      	ldr	r2, [r2, #32]
 802f1a2:	494b      	ldr	r1, [pc, #300]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f1a4:	2054      	movs	r0, #84	@ 0x54
 802f1a6:	fb00 f303 	mul.w	r3, r0, r3
 802f1aa:	440b      	add	r3, r1
 802f1ac:	3320      	adds	r3, #32
 802f1ae:	601a      	str	r2, [r3, #0]

        HAL_I2C_DeInit(&hi2cs[instance]);
 802f1b0:	7bbb      	ldrb	r3, [r7, #14]
 802f1b2:	2254      	movs	r2, #84	@ 0x54
 802f1b4:	fb02 f303 	mul.w	r3, r2, r3
 802f1b8:	4a45      	ldr	r2, [pc, #276]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f1ba:	4413      	add	r3, r2
 802f1bc:	4618      	mov	r0, r3
 802f1be:	f7f7 fe71 	bl	8026ea4 <HAL_I2C_DeInit>

        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 802f1c2:	7bbb      	ldrb	r3, [r7, #14]
 802f1c4:	2254      	movs	r2, #84	@ 0x54
 802f1c6:	fb02 f303 	mul.w	r3, r2, r3
 802f1ca:	4a41      	ldr	r2, [pc, #260]	@ (802f2d0 <drv_i2cInitInstance+0x1f4>)
 802f1cc:	4413      	add	r3, r2
 802f1ce:	4618      	mov	r0, r3
 802f1d0:	f7f7 fd24 	bl	8026c1c <HAL_I2C_Init>
 802f1d4:	4603      	mov	r3, r0
 802f1d6:	2b00      	cmp	r3, #0
 802f1d8:	d173      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 802f1da:	7bbb      	ldrb	r3, [r7, #14]
 802f1dc:	009b      	lsls	r3, r3, #2
 802f1de:	4a3d      	ldr	r2, [pc, #244]	@ (802f2d4 <drv_i2cInitInstance+0x1f8>)
 802f1e0:	4413      	add	r3, r2
 802f1e2:	4618      	mov	r0, r3
 802f1e4:	f009 fa1a 	bl	803861c <gos_mutexInit>
 802f1e8:	4603      	mov	r3, r0
        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 802f1ea:	2b55      	cmp	r3, #85	@ 0x55
 802f1ec:	d169      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f1ee:	7bba      	ldrb	r2, [r7, #14]
 802f1f0:	4613      	mov	r3, r2
 802f1f2:	005b      	lsls	r3, r3, #1
 802f1f4:	4413      	add	r3, r2
 802f1f6:	009b      	lsls	r3, r3, #2
 802f1f8:	4a37      	ldr	r2, [pc, #220]	@ (802f2d8 <drv_i2cInitInstance+0x1fc>)
 802f1fa:	4413      	add	r3, r2
 802f1fc:	4618      	mov	r0, r3
 802f1fe:	f00b fec3 	bl	803af88 <gos_triggerInit>
 802f202:	4603      	mov	r3, r0
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 802f204:	2b55      	cmp	r3, #85	@ 0x55
 802f206:	d15c      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f208:	7bba      	ldrb	r2, [r7, #14]
 802f20a:	4613      	mov	r3, r2
 802f20c:	005b      	lsls	r3, r3, #1
 802f20e:	4413      	add	r3, r2
 802f210:	009b      	lsls	r3, r3, #2
 802f212:	4a32      	ldr	r2, [pc, #200]	@ (802f2dc <drv_i2cInitInstance+0x200>)
 802f214:	4413      	add	r3, r2
 802f216:	4618      	mov	r0, r3
 802f218:	f00b feb6 	bl	803af88 <gos_triggerInit>
 802f21c:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f21e:	2b55      	cmp	r3, #85	@ 0x55
 802f220:	d14f      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 802f222:	7bba      	ldrb	r2, [r7, #14]
 802f224:	4613      	mov	r3, r2
 802f226:	005b      	lsls	r3, r3, #1
 802f228:	4413      	add	r3, r2
 802f22a:	009b      	lsls	r3, r3, #2
 802f22c:	4a2c      	ldr	r2, [pc, #176]	@ (802f2e0 <drv_i2cInitInstance+0x204>)
 802f22e:	4413      	add	r3, r2
 802f230:	4618      	mov	r0, r3
 802f232:	f00b fea9 	bl	803af88 <gos_triggerInit>
 802f236:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f238:	2b55      	cmp	r3, #85	@ 0x55
 802f23a:	d142      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 802f23c:	7bba      	ldrb	r2, [r7, #14]
 802f23e:	4613      	mov	r3, r2
 802f240:	005b      	lsls	r3, r3, #1
 802f242:	4413      	add	r3, r2
 802f244:	009b      	lsls	r3, r3, #2
 802f246:	4a27      	ldr	r2, [pc, #156]	@ (802f2e4 <drv_i2cInitInstance+0x208>)
 802f248:	4413      	add	r3, r2
 802f24a:	4618      	mov	r0, r3
 802f24c:	f00b fe9c 	bl	803af88 <gos_triggerInit>
 802f250:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 802f252:	2b55      	cmp	r3, #85	@ 0x55
 802f254:	d135      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f256:	7bba      	ldrb	r2, [r7, #14]
 802f258:	4613      	mov	r3, r2
 802f25a:	005b      	lsls	r3, r3, #1
 802f25c:	4413      	add	r3, r2
 802f25e:	009b      	lsls	r3, r3, #2
 802f260:	4a1d      	ldr	r2, [pc, #116]	@ (802f2d8 <drv_i2cInitInstance+0x1fc>)
 802f262:	4413      	add	r3, r2
 802f264:	4618      	mov	r0, r3
 802f266:	f00b feab 	bl	803afc0 <gos_triggerReset>
 802f26a:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 802f26c:	2b55      	cmp	r3, #85	@ 0x55
 802f26e:	d128      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f270:	7bba      	ldrb	r2, [r7, #14]
 802f272:	4613      	mov	r3, r2
 802f274:	005b      	lsls	r3, r3, #1
 802f276:	4413      	add	r3, r2
 802f278:	009b      	lsls	r3, r3, #2
 802f27a:	4a18      	ldr	r2, [pc, #96]	@ (802f2dc <drv_i2cInitInstance+0x200>)
 802f27c:	4413      	add	r3, r2
 802f27e:	4618      	mov	r0, r3
 802f280:	f00b fe9e 	bl	803afc0 <gos_triggerReset>
 802f284:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f286:	2b55      	cmp	r3, #85	@ 0x55
 802f288:	d11b      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 802f28a:	7bba      	ldrb	r2, [r7, #14]
 802f28c:	4613      	mov	r3, r2
 802f28e:	005b      	lsls	r3, r3, #1
 802f290:	4413      	add	r3, r2
 802f292:	009b      	lsls	r3, r3, #2
 802f294:	4a12      	ldr	r2, [pc, #72]	@ (802f2e0 <drv_i2cInitInstance+0x204>)
 802f296:	4413      	add	r3, r2
 802f298:	4618      	mov	r0, r3
 802f29a:	f00b fe91 	bl	803afc0 <gos_triggerReset>
 802f29e:	4603      	mov	r3, r0
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802f2a0:	2b55      	cmp	r3, #85	@ 0x55
 802f2a2:	d10e      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS
 802f2a4:	7bba      	ldrb	r2, [r7, #14]
 802f2a6:	4613      	mov	r3, r2
 802f2a8:	005b      	lsls	r3, r3, #1
 802f2aa:	4413      	add	r3, r2
 802f2ac:	009b      	lsls	r3, r3, #2
 802f2ae:	4a0d      	ldr	r2, [pc, #52]	@ (802f2e4 <drv_i2cInitInstance+0x208>)
 802f2b0:	4413      	add	r3, r2
 802f2b2:	4618      	mov	r0, r3
 802f2b4:	f00b fe84 	bl	803afc0 <gos_triggerReset>
 802f2b8:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 802f2ba:	2b55      	cmp	r3, #85	@ 0x55
 802f2bc:	d101      	bne.n	802f2c2 <drv_i2cInitInstance+0x1e6>
            )
        {
            i2cInitResult = GOS_SUCCESS;
 802f2be:	2355      	movs	r3, #85	@ 0x55
 802f2c0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return i2cInitResult;
 802f2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 802f2c4:	4618      	mov	r0, r3
 802f2c6:	3710      	adds	r7, #16
 802f2c8:	46bd      	mov	sp, r7
 802f2ca:	bd80      	pop	{r7, pc}
 802f2cc:	20001604 	.word	0x20001604
 802f2d0:	20007288 	.word	0x20007288
 802f2d4:	20007384 	.word	0x20007384
 802f2d8:	20007390 	.word	0x20007390
 802f2dc:	200073b4 	.word	0x200073b4
 802f2e0:	200073d8 	.word	0x200073d8
 802f2e4:	200073fc 	.word	0x200073fc

0802f2e8 <drv_i2cMemWrite>:
 */
gos_result_t drv_i2cMemWrite (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 802f2e8:	b590      	push	{r4, r7, lr}
 802f2ea:	b087      	sub	sp, #28
 802f2ec:	af02      	add	r7, sp, #8
 802f2ee:	4604      	mov	r4, r0
 802f2f0:	4608      	mov	r0, r1
 802f2f2:	4611      	mov	r1, r2
 802f2f4:	461a      	mov	r2, r3
 802f2f6:	4623      	mov	r3, r4
 802f2f8:	71fb      	strb	r3, [r7, #7]
 802f2fa:	4603      	mov	r3, r0
 802f2fc:	80bb      	strh	r3, [r7, #4]
 802f2fe:	460b      	mov	r3, r1
 802f300:	807b      	strh	r3, [r7, #2]
 802f302:	4613      	mov	r3, r2
 802f304:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemWriteResult = GOS_ERROR;
 802f306:	23ae      	movs	r3, #174	@ 0xae
 802f308:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802f30a:	79fb      	ldrb	r3, [r7, #7]
 802f30c:	009b      	lsls	r3, r3, #2
 802f30e:	4a29      	ldr	r2, [pc, #164]	@ (802f3b4 <drv_i2cMemWrite+0xcc>)
 802f310:	4413      	add	r3, r2
 802f312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802f314:	4618      	mov	r0, r3
 802f316:	f009 f99b 	bl	8038650 <gos_mutexLock>
 802f31a:	4603      	mov	r3, r0
 802f31c:	2b55      	cmp	r3, #85	@ 0x55
 802f31e:	d13c      	bne.n	802f39a <drv_i2cMemWrite+0xb2>
    {
        if (HAL_I2C_Mem_Write_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 802f320:	79fb      	ldrb	r3, [r7, #7]
 802f322:	2254      	movs	r2, #84	@ 0x54
 802f324:	fb02 f303 	mul.w	r3, r2, r3
 802f328:	4a23      	ldr	r2, [pc, #140]	@ (802f3b8 <drv_i2cMemWrite+0xd0>)
 802f32a:	1898      	adds	r0, r3, r2
 802f32c:	883c      	ldrh	r4, [r7, #0]
 802f32e:	887a      	ldrh	r2, [r7, #2]
 802f330:	88b9      	ldrh	r1, [r7, #4]
 802f332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802f334:	9301      	str	r3, [sp, #4]
 802f336:	6a3b      	ldr	r3, [r7, #32]
 802f338:	9300      	str	r3, [sp, #0]
 802f33a:	4623      	mov	r3, r4
 802f33c:	f7f7 fe92 	bl	8027064 <HAL_I2C_Mem_Write_IT>
 802f340:	4603      	mov	r3, r0
 802f342:	2b00      	cmp	r3, #0
 802f344:	d11e      	bne.n	802f384 <drv_i2cMemWrite+0x9c>
            gos_triggerWait     (&i2cTxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 802f346:	79fa      	ldrb	r2, [r7, #7]
 802f348:	4613      	mov	r3, r2
 802f34a:	005b      	lsls	r3, r3, #1
 802f34c:	4413      	add	r3, r2
 802f34e:	009b      	lsls	r3, r3, #2
 802f350:	4a1a      	ldr	r2, [pc, #104]	@ (802f3bc <drv_i2cMemWrite+0xd4>)
 802f352:	4413      	add	r3, r2
 802f354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f356:	2101      	movs	r1, #1
 802f358:	4618      	mov	r0, r3
 802f35a:	f00b fe89 	bl	803b070 <gos_triggerWait>
 802f35e:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Write_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 802f360:	2b55      	cmp	r3, #85	@ 0x55
 802f362:	d10f      	bne.n	802f384 <drv_i2cMemWrite+0x9c>
            gos_triggerReset    (&i2cTxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 802f364:	79fa      	ldrb	r2, [r7, #7]
 802f366:	4613      	mov	r3, r2
 802f368:	005b      	lsls	r3, r3, #1
 802f36a:	4413      	add	r3, r2
 802f36c:	009b      	lsls	r3, r3, #2
 802f36e:	4a13      	ldr	r2, [pc, #76]	@ (802f3bc <drv_i2cMemWrite+0xd4>)
 802f370:	4413      	add	r3, r2
 802f372:	4618      	mov	r0, r3
 802f374:	f00b fe24 	bl	803afc0 <gos_triggerReset>
 802f378:	4603      	mov	r3, r0
            gos_triggerWait     (&i2cTxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 802f37a:	2b55      	cmp	r3, #85	@ 0x55
 802f37c:	d102      	bne.n	802f384 <drv_i2cMemWrite+0x9c>
        {
            i2cMemWriteResult = GOS_SUCCESS;
 802f37e:	2355      	movs	r3, #85	@ 0x55
 802f380:	73fb      	strb	r3, [r7, #15]
 802f382:	e00a      	b.n	802f39a <drv_i2cMemWrite+0xb2>
        }
        else
        {
            // Transmit or trigger error.
            HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 802f384:	79fb      	ldrb	r3, [r7, #7]
 802f386:	2254      	movs	r2, #84	@ 0x54
 802f388:	fb02 f303 	mul.w	r3, r2, r3
 802f38c:	4a0a      	ldr	r2, [pc, #40]	@ (802f3b8 <drv_i2cMemWrite+0xd0>)
 802f38e:	4413      	add	r3, r2
 802f390:	88ba      	ldrh	r2, [r7, #4]
 802f392:	4611      	mov	r1, r2
 802f394:	4618      	mov	r0, r3
 802f396:	f7f7 ffd5 	bl	8027344 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 802f39a:	79fb      	ldrb	r3, [r7, #7]
 802f39c:	009b      	lsls	r3, r3, #2
 802f39e:	4a05      	ldr	r2, [pc, #20]	@ (802f3b4 <drv_i2cMemWrite+0xcc>)
 802f3a0:	4413      	add	r3, r2
 802f3a2:	4618      	mov	r0, r3
 802f3a4:	f009 fa5a 	bl	803885c <gos_mutexUnlock>

    return i2cMemWriteResult;
 802f3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 802f3aa:	4618      	mov	r0, r3
 802f3ac:	3714      	adds	r7, #20
 802f3ae:	46bd      	mov	sp, r7
 802f3b0:	bd90      	pop	{r4, r7, pc}
 802f3b2:	bf00      	nop
 802f3b4:	20007384 	.word	0x20007384
 802f3b8:	20007288 	.word	0x20007288
 802f3bc:	200073fc 	.word	0x200073fc

0802f3c0 <drv_i2cMemRead>:
 */
gos_result_t drv_i2cMemRead (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 802f3c0:	b590      	push	{r4, r7, lr}
 802f3c2:	b087      	sub	sp, #28
 802f3c4:	af02      	add	r7, sp, #8
 802f3c6:	4604      	mov	r4, r0
 802f3c8:	4608      	mov	r0, r1
 802f3ca:	4611      	mov	r1, r2
 802f3cc:	461a      	mov	r2, r3
 802f3ce:	4623      	mov	r3, r4
 802f3d0:	71fb      	strb	r3, [r7, #7]
 802f3d2:	4603      	mov	r3, r0
 802f3d4:	80bb      	strh	r3, [r7, #4]
 802f3d6:	460b      	mov	r3, r1
 802f3d8:	807b      	strh	r3, [r7, #2]
 802f3da:	4613      	mov	r3, r2
 802f3dc:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemReadResult = GOS_ERROR;
 802f3de:	23ae      	movs	r3, #174	@ 0xae
 802f3e0:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802f3e2:	79fb      	ldrb	r3, [r7, #7]
 802f3e4:	009b      	lsls	r3, r3, #2
 802f3e6:	4a29      	ldr	r2, [pc, #164]	@ (802f48c <drv_i2cMemRead+0xcc>)
 802f3e8:	4413      	add	r3, r2
 802f3ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802f3ec:	4618      	mov	r0, r3
 802f3ee:	f009 f92f 	bl	8038650 <gos_mutexLock>
 802f3f2:	4603      	mov	r3, r0
 802f3f4:	2b55      	cmp	r3, #85	@ 0x55
 802f3f6:	d13c      	bne.n	802f472 <drv_i2cMemRead+0xb2>
    {
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 802f3f8:	79fb      	ldrb	r3, [r7, #7]
 802f3fa:	2254      	movs	r2, #84	@ 0x54
 802f3fc:	fb02 f303 	mul.w	r3, r2, r3
 802f400:	4a23      	ldr	r2, [pc, #140]	@ (802f490 <drv_i2cMemRead+0xd0>)
 802f402:	1898      	adds	r0, r3, r2
 802f404:	883c      	ldrh	r4, [r7, #0]
 802f406:	887a      	ldrh	r2, [r7, #2]
 802f408:	88b9      	ldrh	r1, [r7, #4]
 802f40a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802f40c:	9301      	str	r3, [sp, #4]
 802f40e:	6a3b      	ldr	r3, [r7, #32]
 802f410:	9300      	str	r3, [sp, #0]
 802f412:	4623      	mov	r3, r4
 802f414:	f7f7 fed8 	bl	80271c8 <HAL_I2C_Mem_Read_IT>
 802f418:	4603      	mov	r3, r0
 802f41a:	2b00      	cmp	r3, #0
 802f41c:	d11e      	bne.n	802f45c <drv_i2cMemRead+0x9c>
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 802f41e:	79fa      	ldrb	r2, [r7, #7]
 802f420:	4613      	mov	r3, r2
 802f422:	005b      	lsls	r3, r3, #1
 802f424:	4413      	add	r3, r2
 802f426:	009b      	lsls	r3, r3, #2
 802f428:	4a1a      	ldr	r2, [pc, #104]	@ (802f494 <drv_i2cMemRead+0xd4>)
 802f42a:	4413      	add	r3, r2
 802f42c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f42e:	2101      	movs	r1, #1
 802f430:	4618      	mov	r0, r3
 802f432:	f00b fe1d 	bl	803b070 <gos_triggerWait>
 802f436:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 802f438:	2b55      	cmp	r3, #85	@ 0x55
 802f43a:	d10f      	bne.n	802f45c <drv_i2cMemRead+0x9c>
            gos_triggerReset   (&i2cRxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 802f43c:	79fa      	ldrb	r2, [r7, #7]
 802f43e:	4613      	mov	r3, r2
 802f440:	005b      	lsls	r3, r3, #1
 802f442:	4413      	add	r3, r2
 802f444:	009b      	lsls	r3, r3, #2
 802f446:	4a13      	ldr	r2, [pc, #76]	@ (802f494 <drv_i2cMemRead+0xd4>)
 802f448:	4413      	add	r3, r2
 802f44a:	4618      	mov	r0, r3
 802f44c:	f00b fdb8 	bl	803afc0 <gos_triggerReset>
 802f450:	4603      	mov	r3, r0
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 802f452:	2b55      	cmp	r3, #85	@ 0x55
 802f454:	d102      	bne.n	802f45c <drv_i2cMemRead+0x9c>
        {
            i2cMemReadResult = GOS_SUCCESS;
 802f456:	2355      	movs	r3, #85	@ 0x55
 802f458:	73fb      	strb	r3, [r7, #15]
 802f45a:	e00a      	b.n	802f472 <drv_i2cMemRead+0xb2>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 802f45c:	79fb      	ldrb	r3, [r7, #7]
 802f45e:	2254      	movs	r2, #84	@ 0x54
 802f460:	fb02 f303 	mul.w	r3, r2, r3
 802f464:	4a0a      	ldr	r2, [pc, #40]	@ (802f490 <drv_i2cMemRead+0xd0>)
 802f466:	4413      	add	r3, r2
 802f468:	88ba      	ldrh	r2, [r7, #4]
 802f46a:	4611      	mov	r1, r2
 802f46c:	4618      	mov	r0, r3
 802f46e:	f7f7 ff69 	bl	8027344 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 802f472:	79fb      	ldrb	r3, [r7, #7]
 802f474:	009b      	lsls	r3, r3, #2
 802f476:	4a05      	ldr	r2, [pc, #20]	@ (802f48c <drv_i2cMemRead+0xcc>)
 802f478:	4413      	add	r3, r2
 802f47a:	4618      	mov	r0, r3
 802f47c:	f009 f9ee 	bl	803885c <gos_mutexUnlock>

    return i2cMemReadResult;
 802f480:	7bfb      	ldrb	r3, [r7, #15]
}
 802f482:	4618      	mov	r0, r3
 802f484:	3714      	adds	r7, #20
 802f486:	46bd      	mov	sp, r7
 802f488:	bd90      	pop	{r4, r7, pc}
 802f48a:	bf00      	nop
 802f48c:	20007384 	.word	0x20007384
 802f490:	20007288 	.word	0x20007288
 802f494:	200073d8 	.word	0x200073d8

0802f498 <drv_i2cTransmitIT>:
 */
gos_result_t drv_i2cTransmitIT (
        drv_i2cPeriphInstance_t instance, u16_t address,  u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 802f498:	b580      	push	{r7, lr}
 802f49a:	b086      	sub	sp, #24
 802f49c:	af00      	add	r7, sp, #0
 802f49e:	60ba      	str	r2, [r7, #8]
 802f4a0:	461a      	mov	r2, r3
 802f4a2:	4603      	mov	r3, r0
 802f4a4:	73fb      	strb	r3, [r7, #15]
 802f4a6:	460b      	mov	r3, r1
 802f4a8:	81bb      	strh	r3, [r7, #12]
 802f4aa:	4613      	mov	r3, r2
 802f4ac:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t i2cDriverTransmitResult = GOS_ERROR;
 802f4ae:	23ae      	movs	r3, #174	@ 0xae
 802f4b0:	75fb      	strb	r3, [r7, #23]


    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802f4b2:	7bfb      	ldrb	r3, [r7, #15]
 802f4b4:	009b      	lsls	r3, r3, #2
 802f4b6:	4a26      	ldr	r2, [pc, #152]	@ (802f550 <drv_i2cTransmitIT+0xb8>)
 802f4b8:	4413      	add	r3, r2
 802f4ba:	6a39      	ldr	r1, [r7, #32]
 802f4bc:	4618      	mov	r0, r3
 802f4be:	f009 f8c7 	bl	8038650 <gos_mutexLock>
 802f4c2:	4603      	mov	r3, r0
 802f4c4:	2b55      	cmp	r3, #85	@ 0x55
 802f4c6:	d137      	bne.n	802f538 <drv_i2cTransmitIT+0xa0>
    {
        if (HAL_I2C_Master_Transmit_IT(&hi2cs[instance], address, pData, size)       == HAL_OK      &&
 802f4c8:	7bfb      	ldrb	r3, [r7, #15]
 802f4ca:	2254      	movs	r2, #84	@ 0x54
 802f4cc:	fb02 f303 	mul.w	r3, r2, r3
 802f4d0:	4a20      	ldr	r2, [pc, #128]	@ (802f554 <drv_i2cTransmitIT+0xbc>)
 802f4d2:	1898      	adds	r0, r3, r2
 802f4d4:	88fb      	ldrh	r3, [r7, #6]
 802f4d6:	89b9      	ldrh	r1, [r7, #12]
 802f4d8:	68ba      	ldr	r2, [r7, #8]
 802f4da:	f7f7 fd1d 	bl	8026f18 <HAL_I2C_Master_Transmit_IT>
 802f4de:	4603      	mov	r3, r0
 802f4e0:	2b00      	cmp	r3, #0
 802f4e2:	d11e      	bne.n	802f522 <drv_i2cTransmitIT+0x8a>
            gos_triggerWait           (&i2cTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802f4e4:	7bfa      	ldrb	r2, [r7, #15]
 802f4e6:	4613      	mov	r3, r2
 802f4e8:	005b      	lsls	r3, r3, #1
 802f4ea:	4413      	add	r3, r2
 802f4ec:	009b      	lsls	r3, r3, #2
 802f4ee:	4a1a      	ldr	r2, [pc, #104]	@ (802f558 <drv_i2cTransmitIT+0xc0>)
 802f4f0:	4413      	add	r3, r2
 802f4f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802f4f4:	2101      	movs	r1, #1
 802f4f6:	4618      	mov	r0, r3
 802f4f8:	f00b fdba 	bl	803b070 <gos_triggerWait>
 802f4fc:	4603      	mov	r3, r0
        if (HAL_I2C_Master_Transmit_IT(&hi2cs[instance], address, pData, size)       == HAL_OK      &&
 802f4fe:	2b55      	cmp	r3, #85	@ 0x55
 802f500:	d10f      	bne.n	802f522 <drv_i2cTransmitIT+0x8a>
            gos_triggerReset          (&i2cTxReadyTriggers[instance])                == GOS_SUCCESS)
 802f502:	7bfa      	ldrb	r2, [r7, #15]
 802f504:	4613      	mov	r3, r2
 802f506:	005b      	lsls	r3, r3, #1
 802f508:	4413      	add	r3, r2
 802f50a:	009b      	lsls	r3, r3, #2
 802f50c:	4a12      	ldr	r2, [pc, #72]	@ (802f558 <drv_i2cTransmitIT+0xc0>)
 802f50e:	4413      	add	r3, r2
 802f510:	4618      	mov	r0, r3
 802f512:	f00b fd55 	bl	803afc0 <gos_triggerReset>
 802f516:	4603      	mov	r3, r0
            gos_triggerWait           (&i2cTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802f518:	2b55      	cmp	r3, #85	@ 0x55
 802f51a:	d102      	bne.n	802f522 <drv_i2cTransmitIT+0x8a>
        {
            i2cDriverTransmitResult = GOS_SUCCESS;
 802f51c:	2355      	movs	r3, #85	@ 0x55
 802f51e:	75fb      	strb	r3, [r7, #23]
 802f520:	e00a      	b.n	802f538 <drv_i2cTransmitIT+0xa0>
        }
        else
        {
            // Transmit or trigger error.
            HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 802f522:	7bfb      	ldrb	r3, [r7, #15]
 802f524:	2254      	movs	r2, #84	@ 0x54
 802f526:	fb02 f303 	mul.w	r3, r2, r3
 802f52a:	4a0a      	ldr	r2, [pc, #40]	@ (802f554 <drv_i2cTransmitIT+0xbc>)
 802f52c:	4413      	add	r3, r2
 802f52e:	89ba      	ldrh	r2, [r7, #12]
 802f530:	4611      	mov	r1, r2
 802f532:	4618      	mov	r0, r3
 802f534:	f7f7 ff06 	bl	8027344 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 802f538:	7bfb      	ldrb	r3, [r7, #15]
 802f53a:	009b      	lsls	r3, r3, #2
 802f53c:	4a04      	ldr	r2, [pc, #16]	@ (802f550 <drv_i2cTransmitIT+0xb8>)
 802f53e:	4413      	add	r3, r2
 802f540:	4618      	mov	r0, r3
 802f542:	f009 f98b 	bl	803885c <gos_mutexUnlock>

    return i2cDriverTransmitResult;
 802f546:	7dfb      	ldrb	r3, [r7, #23]
}
 802f548:	4618      	mov	r0, r3
 802f54a:	3718      	adds	r7, #24
 802f54c:	46bd      	mov	sp, r7
 802f54e:	bd80      	pop	{r7, pc}
 802f550:	20007384 	.word	0x20007384
 802f554:	20007288 	.word	0x20007288
 802f558:	200073b4 	.word	0x200073b4

0802f55c <HAL_I2C_MasterTxCpltCallback>:

/*
 * Function: HAL_I2C_MasterTxCpltCallback
 */
void_t HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 802f55c:	b580      	push	{r7, lr}
 802f55e:	b082      	sub	sp, #8
 802f560:	af00      	add	r7, sp, #0
 802f562:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 802f564:	687b      	ldr	r3, [r7, #4]
 802f566:	681a      	ldr	r2, [r3, #0]
 802f568:	4b0a      	ldr	r3, [pc, #40]	@ (802f594 <HAL_I2C_MasterTxCpltCallback+0x38>)
 802f56a:	681b      	ldr	r3, [r3, #0]
 802f56c:	429a      	cmp	r2, r3
 802f56e:	d103      	bne.n	802f578 <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_1]);
 802f570:	4809      	ldr	r0, [pc, #36]	@ (802f598 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 802f572:	f00b fe2d 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802f576:	e008      	b.n	802f58a <HAL_I2C_MasterTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 802f578:	687b      	ldr	r3, [r7, #4]
 802f57a:	681a      	ldr	r2, [r3, #0]
 802f57c:	4b05      	ldr	r3, [pc, #20]	@ (802f594 <HAL_I2C_MasterTxCpltCallback+0x38>)
 802f57e:	685b      	ldr	r3, [r3, #4]
 802f580:	429a      	cmp	r2, r3
 802f582:	d102      	bne.n	802f58a <HAL_I2C_MasterTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_2]);
 802f584:	4805      	ldr	r0, [pc, #20]	@ (802f59c <HAL_I2C_MasterTxCpltCallback+0x40>)
 802f586:	f00b fe23 	bl	803b1d0 <gos_triggerIncrement>
}
 802f58a:	bf00      	nop
 802f58c:	3708      	adds	r7, #8
 802f58e:	46bd      	mov	sp, r7
 802f590:	bd80      	pop	{r7, pc}
 802f592:	bf00      	nop
 802f594:	20001604 	.word	0x20001604
 802f598:	200073b4 	.word	0x200073b4
 802f59c:	200073c0 	.word	0x200073c0

0802f5a0 <HAL_I2C_MemTxCpltCallback>:

/*
 * Function: HAL_I2C_MemTxCpltCallback
 */
void_t HAL_I2C_MemTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 802f5a0:	b580      	push	{r7, lr}
 802f5a2:	b082      	sub	sp, #8
 802f5a4:	af00      	add	r7, sp, #0
 802f5a6:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 802f5a8:	687b      	ldr	r3, [r7, #4]
 802f5aa:	681a      	ldr	r2, [r3, #0]
 802f5ac:	4b0a      	ldr	r3, [pc, #40]	@ (802f5d8 <HAL_I2C_MemTxCpltCallback+0x38>)
 802f5ae:	681b      	ldr	r3, [r3, #0]
 802f5b0:	429a      	cmp	r2, r3
 802f5b2:	d103      	bne.n	802f5bc <HAL_I2C_MemTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 802f5b4:	4809      	ldr	r0, [pc, #36]	@ (802f5dc <HAL_I2C_MemTxCpltCallback+0x3c>)
 802f5b6:	f00b fe0b 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802f5ba:	e008      	b.n	802f5ce <HAL_I2C_MemTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 802f5bc:	687b      	ldr	r3, [r7, #4]
 802f5be:	681a      	ldr	r2, [r3, #0]
 802f5c0:	4b05      	ldr	r3, [pc, #20]	@ (802f5d8 <HAL_I2C_MemTxCpltCallback+0x38>)
 802f5c2:	685b      	ldr	r3, [r3, #4]
 802f5c4:	429a      	cmp	r2, r3
 802f5c6:	d102      	bne.n	802f5ce <HAL_I2C_MemTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 802f5c8:	4805      	ldr	r0, [pc, #20]	@ (802f5e0 <HAL_I2C_MemTxCpltCallback+0x40>)
 802f5ca:	f00b fe01 	bl	803b1d0 <gos_triggerIncrement>
}
 802f5ce:	bf00      	nop
 802f5d0:	3708      	adds	r7, #8
 802f5d2:	46bd      	mov	sp, r7
 802f5d4:	bd80      	pop	{r7, pc}
 802f5d6:	bf00      	nop
 802f5d8:	20001604 	.word	0x20001604
 802f5dc:	200073fc 	.word	0x200073fc
 802f5e0:	20007408 	.word	0x20007408

0802f5e4 <HAL_I2C_MasterRxCpltCallback>:

/*
 * Function: HAL_I2C_MasterRxCpltCallback
 */
void_t HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 802f5e4:	b580      	push	{r7, lr}
 802f5e6:	b082      	sub	sp, #8
 802f5e8:	af00      	add	r7, sp, #0
 802f5ea:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 802f5ec:	687b      	ldr	r3, [r7, #4]
 802f5ee:	681a      	ldr	r2, [r3, #0]
 802f5f0:	4b0a      	ldr	r3, [pc, #40]	@ (802f61c <HAL_I2C_MasterRxCpltCallback+0x38>)
 802f5f2:	681b      	ldr	r3, [r3, #0]
 802f5f4:	429a      	cmp	r2, r3
 802f5f6:	d103      	bne.n	802f600 <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_1]);
 802f5f8:	4809      	ldr	r0, [pc, #36]	@ (802f620 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 802f5fa:	f00b fde9 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802f5fe:	e008      	b.n	802f612 <HAL_I2C_MasterRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 802f600:	687b      	ldr	r3, [r7, #4]
 802f602:	681a      	ldr	r2, [r3, #0]
 802f604:	4b05      	ldr	r3, [pc, #20]	@ (802f61c <HAL_I2C_MasterRxCpltCallback+0x38>)
 802f606:	685b      	ldr	r3, [r3, #4]
 802f608:	429a      	cmp	r2, r3
 802f60a:	d102      	bne.n	802f612 <HAL_I2C_MasterRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_2]);
 802f60c:	4805      	ldr	r0, [pc, #20]	@ (802f624 <HAL_I2C_MasterRxCpltCallback+0x40>)
 802f60e:	f00b fddf 	bl	803b1d0 <gos_triggerIncrement>
}
 802f612:	bf00      	nop
 802f614:	3708      	adds	r7, #8
 802f616:	46bd      	mov	sp, r7
 802f618:	bd80      	pop	{r7, pc}
 802f61a:	bf00      	nop
 802f61c:	20001604 	.word	0x20001604
 802f620:	20007390 	.word	0x20007390
 802f624:	2000739c 	.word	0x2000739c

0802f628 <HAL_I2C_MemRxCpltCallback>:

/*
 * Function: HAL_I2C_MemRxCpltCallback
 */
void_t HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 802f628:	b580      	push	{r7, lr}
 802f62a:	b082      	sub	sp, #8
 802f62c:	af00      	add	r7, sp, #0
 802f62e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 802f630:	687b      	ldr	r3, [r7, #4]
 802f632:	681a      	ldr	r2, [r3, #0]
 802f634:	4b0a      	ldr	r3, [pc, #40]	@ (802f660 <HAL_I2C_MemRxCpltCallback+0x38>)
 802f636:	681b      	ldr	r3, [r3, #0]
 802f638:	429a      	cmp	r2, r3
 802f63a:	d103      	bne.n	802f644 <HAL_I2C_MemRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 802f63c:	4809      	ldr	r0, [pc, #36]	@ (802f664 <HAL_I2C_MemRxCpltCallback+0x3c>)
 802f63e:	f00b fdc7 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802f642:	e008      	b.n	802f656 <HAL_I2C_MemRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 802f644:	687b      	ldr	r3, [r7, #4]
 802f646:	681a      	ldr	r2, [r3, #0]
 802f648:	4b05      	ldr	r3, [pc, #20]	@ (802f660 <HAL_I2C_MemRxCpltCallback+0x38>)
 802f64a:	685b      	ldr	r3, [r3, #4]
 802f64c:	429a      	cmp	r2, r3
 802f64e:	d102      	bne.n	802f656 <HAL_I2C_MemRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 802f650:	4805      	ldr	r0, [pc, #20]	@ (802f668 <HAL_I2C_MemRxCpltCallback+0x40>)
 802f652:	f00b fdbd 	bl	803b1d0 <gos_triggerIncrement>
}
 802f656:	bf00      	nop
 802f658:	3708      	adds	r7, #8
 802f65a:	46bd      	mov	sp, r7
 802f65c:	bd80      	pop	{r7, pc}
 802f65e:	bf00      	nop
 802f660:	20001604 	.word	0x20001604
 802f664:	200073d8 	.word	0x200073d8
 802f668:	200073e4 	.word	0x200073e4

0802f66c <I2C1_EV_IRQHandler>:

/*
 * Function: I2C1_EV_IRQHandler
 */
void_t I2C1_EV_IRQHandler (void_t)
{
 802f66c:	b580      	push	{r7, lr}
 802f66e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802f670:	4b16      	ldr	r3, [pc, #88]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f672:	781b      	ldrb	r3, [r3, #0]
 802f674:	2b00      	cmp	r3, #0
 802f676:	d105      	bne.n	802f684 <I2C1_EV_IRQHandler+0x18>
 802f678:	4b15      	ldr	r3, [pc, #84]	@ (802f6d0 <I2C1_EV_IRQHandler+0x64>)
 802f67a:	781b      	ldrb	r3, [r3, #0]
 802f67c:	3301      	adds	r3, #1
 802f67e:	b2da      	uxtb	r2, r3
 802f680:	4b13      	ldr	r3, [pc, #76]	@ (802f6d0 <I2C1_EV_IRQHandler+0x64>)
 802f682:	701a      	strb	r2, [r3, #0]
 802f684:	4b11      	ldr	r3, [pc, #68]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f686:	781b      	ldrb	r3, [r3, #0]
 802f688:	3301      	adds	r3, #1
 802f68a:	b2da      	uxtb	r2, r3
 802f68c:	4b0f      	ldr	r3, [pc, #60]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f68e:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_1]);
 802f690:	4810      	ldr	r0, [pc, #64]	@ (802f6d4 <I2C1_EV_IRQHandler+0x68>)
 802f692:	f7f7 fea6 	bl	80273e2 <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 802f696:	4b0d      	ldr	r3, [pc, #52]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f698:	781b      	ldrb	r3, [r3, #0]
 802f69a:	2b00      	cmp	r3, #0
 802f69c:	d005      	beq.n	802f6aa <I2C1_EV_IRQHandler+0x3e>
 802f69e:	4b0b      	ldr	r3, [pc, #44]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f6a0:	781b      	ldrb	r3, [r3, #0]
 802f6a2:	3b01      	subs	r3, #1
 802f6a4:	b2da      	uxtb	r2, r3
 802f6a6:	4b09      	ldr	r3, [pc, #36]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f6a8:	701a      	strb	r2, [r3, #0]
 802f6aa:	4b08      	ldr	r3, [pc, #32]	@ (802f6cc <I2C1_EV_IRQHandler+0x60>)
 802f6ac:	781b      	ldrb	r3, [r3, #0]
 802f6ae:	2b00      	cmp	r3, #0
 802f6b0:	d109      	bne.n	802f6c6 <I2C1_EV_IRQHandler+0x5a>
 802f6b2:	4b07      	ldr	r3, [pc, #28]	@ (802f6d0 <I2C1_EV_IRQHandler+0x64>)
 802f6b4:	781b      	ldrb	r3, [r3, #0]
 802f6b6:	2b00      	cmp	r3, #0
 802f6b8:	d005      	beq.n	802f6c6 <I2C1_EV_IRQHandler+0x5a>
 802f6ba:	4b05      	ldr	r3, [pc, #20]	@ (802f6d0 <I2C1_EV_IRQHandler+0x64>)
 802f6bc:	781b      	ldrb	r3, [r3, #0]
 802f6be:	3b01      	subs	r3, #1
 802f6c0:	b2da      	uxtb	r2, r3
 802f6c2:	4b03      	ldr	r3, [pc, #12]	@ (802f6d0 <I2C1_EV_IRQHandler+0x64>)
 802f6c4:	701a      	strb	r2, [r3, #0]
}
 802f6c6:	bf00      	nop
 802f6c8:	bd80      	pop	{r7, pc}
 802f6ca:	bf00      	nop
 802f6cc:	2000b312 	.word	0x2000b312
 802f6d0:	2000b311 	.word	0x2000b311
 802f6d4:	20007288 	.word	0x20007288

0802f6d8 <I2C2_EV_IRQHandler>:

/*
 * Function: I2C2_EV_IRQHandler
 */
void_t I2C2_EV_IRQHandler (void_t)
{
 802f6d8:	b580      	push	{r7, lr}
 802f6da:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 802f6dc:	4b16      	ldr	r3, [pc, #88]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f6de:	781b      	ldrb	r3, [r3, #0]
 802f6e0:	2b00      	cmp	r3, #0
 802f6e2:	d105      	bne.n	802f6f0 <I2C2_EV_IRQHandler+0x18>
 802f6e4:	4b15      	ldr	r3, [pc, #84]	@ (802f73c <I2C2_EV_IRQHandler+0x64>)
 802f6e6:	781b      	ldrb	r3, [r3, #0]
 802f6e8:	3301      	adds	r3, #1
 802f6ea:	b2da      	uxtb	r2, r3
 802f6ec:	4b13      	ldr	r3, [pc, #76]	@ (802f73c <I2C2_EV_IRQHandler+0x64>)
 802f6ee:	701a      	strb	r2, [r3, #0]
 802f6f0:	4b11      	ldr	r3, [pc, #68]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f6f2:	781b      	ldrb	r3, [r3, #0]
 802f6f4:	3301      	adds	r3, #1
 802f6f6:	b2da      	uxtb	r2, r3
 802f6f8:	4b0f      	ldr	r3, [pc, #60]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f6fa:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_2]);
 802f6fc:	4810      	ldr	r0, [pc, #64]	@ (802f740 <I2C2_EV_IRQHandler+0x68>)
 802f6fe:	f7f7 fe70 	bl	80273e2 <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 802f702:	4b0d      	ldr	r3, [pc, #52]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f704:	781b      	ldrb	r3, [r3, #0]
 802f706:	2b00      	cmp	r3, #0
 802f708:	d005      	beq.n	802f716 <I2C2_EV_IRQHandler+0x3e>
 802f70a:	4b0b      	ldr	r3, [pc, #44]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f70c:	781b      	ldrb	r3, [r3, #0]
 802f70e:	3b01      	subs	r3, #1
 802f710:	b2da      	uxtb	r2, r3
 802f712:	4b09      	ldr	r3, [pc, #36]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f714:	701a      	strb	r2, [r3, #0]
 802f716:	4b08      	ldr	r3, [pc, #32]	@ (802f738 <I2C2_EV_IRQHandler+0x60>)
 802f718:	781b      	ldrb	r3, [r3, #0]
 802f71a:	2b00      	cmp	r3, #0
 802f71c:	d109      	bne.n	802f732 <I2C2_EV_IRQHandler+0x5a>
 802f71e:	4b07      	ldr	r3, [pc, #28]	@ (802f73c <I2C2_EV_IRQHandler+0x64>)
 802f720:	781b      	ldrb	r3, [r3, #0]
 802f722:	2b00      	cmp	r3, #0
 802f724:	d005      	beq.n	802f732 <I2C2_EV_IRQHandler+0x5a>
 802f726:	4b05      	ldr	r3, [pc, #20]	@ (802f73c <I2C2_EV_IRQHandler+0x64>)
 802f728:	781b      	ldrb	r3, [r3, #0]
 802f72a:	3b01      	subs	r3, #1
 802f72c:	b2da      	uxtb	r2, r3
 802f72e:	4b03      	ldr	r3, [pc, #12]	@ (802f73c <I2C2_EV_IRQHandler+0x64>)
 802f730:	701a      	strb	r2, [r3, #0]
}
 802f732:	bf00      	nop
 802f734:	bd80      	pop	{r7, pc}
 802f736:	bf00      	nop
 802f738:	2000b312 	.word	0x2000b312
 802f73c:	2000b311 	.word	0x2000b311
 802f740:	200072dc 	.word	0x200072dc

0802f744 <HAL_I2C_MspInit>:

/*
 * Function: HAL_I2C_MspInit
 */
void_t HAL_I2C_MspInit (I2C_HandleTypeDef* hi2c)
{
 802f744:	b480      	push	{r7}
 802f746:	b085      	sub	sp, #20
 802f748:	af00      	add	r7, sp, #0
 802f74a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_i2cPeriphInstance_t instance = 0u;
 802f74c:	2300      	movs	r3, #0
 802f74e:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 802f750:	2300      	movs	r3, #0
 802f752:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 802f754:	2300      	movs	r3, #0
 802f756:	73fb      	strb	r3, [r7, #15]
 802f758:	e061      	b.n	802f81e <HAL_I2C_MspInit+0xda>
    {
        if (i2cInstanceLut[instance] == hi2c->Instance)
 802f75a:	7bfb      	ldrb	r3, [r7, #15]
 802f75c:	4a35      	ldr	r2, [pc, #212]	@ (802f834 <HAL_I2C_MspInit+0xf0>)
 802f75e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802f762:	687b      	ldr	r3, [r7, #4]
 802f764:	681b      	ldr	r3, [r3, #0]
 802f766:	429a      	cmp	r2, r3
 802f768:	d156      	bne.n	802f818 <HAL_I2C_MspInit+0xd4>
        {
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 802f76a:	2300      	movs	r3, #0
 802f76c:	73bb      	strb	r3, [r7, #14]
 802f76e:	e04a      	b.n	802f806 <HAL_I2C_MspInit+0xc2>
            {
                if (i2cConfig[idx].periphInstance == instance)
 802f770:	7bbb      	ldrb	r3, [r7, #14]
 802f772:	4a31      	ldr	r2, [pc, #196]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f774:	212c      	movs	r1, #44	@ 0x2c
 802f776:	fb01 f303 	mul.w	r3, r1, r3
 802f77a:	4413      	add	r3, r2
 802f77c:	781b      	ldrb	r3, [r3, #0]
 802f77e:	7bfa      	ldrb	r2, [r7, #15]
 802f780:	429a      	cmp	r2, r3
 802f782:	d13d      	bne.n	802f800 <HAL_I2C_MspInit+0xbc>
                {
                    if (i2cConfig[idx].dmaConfigRx != NULL)
 802f784:	7bbb      	ldrb	r3, [r7, #14]
 802f786:	4a2c      	ldr	r2, [pc, #176]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f788:	212c      	movs	r1, #44	@ 0x2c
 802f78a:	fb01 f303 	mul.w	r3, r1, r3
 802f78e:	4413      	add	r3, r2
 802f790:	3324      	adds	r3, #36	@ 0x24
 802f792:	681b      	ldr	r3, [r3, #0]
 802f794:	2b00      	cmp	r3, #0
 802f796:	d014      	beq.n	802f7c2 <HAL_I2C_MspInit+0x7e>
                    {
                        __HAL_LINKDMA(hi2c, hdmarx, i2cConfig[idx].dmaConfigRx->hdma);
 802f798:	7bbb      	ldrb	r3, [r7, #14]
 802f79a:	4a27      	ldr	r2, [pc, #156]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f79c:	212c      	movs	r1, #44	@ 0x2c
 802f79e:	fb01 f303 	mul.w	r3, r1, r3
 802f7a2:	4413      	add	r3, r2
 802f7a4:	3324      	adds	r3, #36	@ 0x24
 802f7a6:	681b      	ldr	r3, [r3, #0]
 802f7a8:	1d1a      	adds	r2, r3, #4
 802f7aa:	687b      	ldr	r3, [r7, #4]
 802f7ac:	639a      	str	r2, [r3, #56]	@ 0x38
 802f7ae:	7bbb      	ldrb	r3, [r7, #14]
 802f7b0:	4a21      	ldr	r2, [pc, #132]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f7b2:	212c      	movs	r1, #44	@ 0x2c
 802f7b4:	fb01 f303 	mul.w	r3, r1, r3
 802f7b8:	4413      	add	r3, r2
 802f7ba:	3324      	adds	r3, #36	@ 0x24
 802f7bc:	681b      	ldr	r3, [r3, #0]
 802f7be:	687a      	ldr	r2, [r7, #4]
 802f7c0:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (i2cConfig[idx].dmaConfigTx != NULL)
 802f7c2:	7bbb      	ldrb	r3, [r7, #14]
 802f7c4:	4a1c      	ldr	r2, [pc, #112]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f7c6:	212c      	movs	r1, #44	@ 0x2c
 802f7c8:	fb01 f303 	mul.w	r3, r1, r3
 802f7cc:	4413      	add	r3, r2
 802f7ce:	3328      	adds	r3, #40	@ 0x28
 802f7d0:	681b      	ldr	r3, [r3, #0]
 802f7d2:	2b00      	cmp	r3, #0
 802f7d4:	d014      	beq.n	802f800 <HAL_I2C_MspInit+0xbc>
                    {
                        __HAL_LINKDMA(hi2c, hdmatx, i2cConfig[idx].dmaConfigTx->hdma);
 802f7d6:	7bbb      	ldrb	r3, [r7, #14]
 802f7d8:	4a17      	ldr	r2, [pc, #92]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f7da:	212c      	movs	r1, #44	@ 0x2c
 802f7dc:	fb01 f303 	mul.w	r3, r1, r3
 802f7e0:	4413      	add	r3, r2
 802f7e2:	3328      	adds	r3, #40	@ 0x28
 802f7e4:	681b      	ldr	r3, [r3, #0]
 802f7e6:	1d1a      	adds	r2, r3, #4
 802f7e8:	687b      	ldr	r3, [r7, #4]
 802f7ea:	635a      	str	r2, [r3, #52]	@ 0x34
 802f7ec:	7bbb      	ldrb	r3, [r7, #14]
 802f7ee:	4a12      	ldr	r2, [pc, #72]	@ (802f838 <HAL_I2C_MspInit+0xf4>)
 802f7f0:	212c      	movs	r1, #44	@ 0x2c
 802f7f2:	fb01 f303 	mul.w	r3, r1, r3
 802f7f6:	4413      	add	r3, r2
 802f7f8:	3328      	adds	r3, #40	@ 0x28
 802f7fa:	681b      	ldr	r3, [r3, #0]
 802f7fc:	687a      	ldr	r2, [r7, #4]
 802f7fe:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 802f800:	7bbb      	ldrb	r3, [r7, #14]
 802f802:	3301      	adds	r3, #1
 802f804:	73bb      	strb	r3, [r7, #14]
 802f806:	7bba      	ldrb	r2, [r7, #14]
 802f808:	4b0c      	ldr	r3, [pc, #48]	@ (802f83c <HAL_I2C_MspInit+0xf8>)
 802f80a:	681b      	ldr	r3, [r3, #0]
 802f80c:	490c      	ldr	r1, [pc, #48]	@ (802f840 <HAL_I2C_MspInit+0xfc>)
 802f80e:	fba1 1303 	umull	r1, r3, r1, r3
 802f812:	095b      	lsrs	r3, r3, #5
 802f814:	429a      	cmp	r2, r3
 802f816:	d3ab      	bcc.n	802f770 <HAL_I2C_MspInit+0x2c>
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 802f818:	7bfb      	ldrb	r3, [r7, #15]
 802f81a:	3301      	adds	r3, #1
 802f81c:	73fb      	strb	r3, [r7, #15]
 802f81e:	7bfb      	ldrb	r3, [r7, #15]
 802f820:	2b02      	cmp	r3, #2
 802f822:	d99a      	bls.n	802f75a <HAL_I2C_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 802f824:	bf00      	nop
 802f826:	bf00      	nop
 802f828:	3714      	adds	r7, #20
 802f82a:	46bd      	mov	sp, r7
 802f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f830:	4770      	bx	lr
 802f832:	bf00      	nop
 802f834:	20001604 	.word	0x20001604
 802f838:	0803fe78 	.word	0x0803fe78
 802f83c:	200013dc 	.word	0x200013dc
 802f840:	ba2e8ba3 	.word	0xba2e8ba3

0802f844 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 802f844:	b590      	push	{r4, r7, lr}
 802f846:	b083      	sub	sp, #12
 802f848:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 802f84a:	23ae      	movs	r3, #174	@ 0xae
 802f84c:	71fb      	strb	r3, [r7, #7]
    u8_t         itIdx              = 0u;
 802f84e:	2300      	movs	r3, #0
 802f850:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 802f852:	2300      	movs	r3, #0
 802f854:	71bb      	strb	r3, [r7, #6]
 802f856:	e02c      	b.n	802f8b2 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 802f858:	79ba      	ldrb	r2, [r7, #6]
 802f85a:	491e      	ldr	r1, [pc, #120]	@ (802f8d4 <drv_itInit+0x90>)
 802f85c:	4613      	mov	r3, r2
 802f85e:	005b      	lsls	r3, r3, #1
 802f860:	4413      	add	r3, r2
 802f862:	009b      	lsls	r3, r3, #2
 802f864:	440b      	add	r3, r1
 802f866:	f993 0000 	ldrsb.w	r0, [r3]
 802f86a:	79ba      	ldrb	r2, [r7, #6]
 802f86c:	4919      	ldr	r1, [pc, #100]	@ (802f8d4 <drv_itInit+0x90>)
 802f86e:	4613      	mov	r3, r2
 802f870:	005b      	lsls	r3, r3, #1
 802f872:	4413      	add	r3, r2
 802f874:	009b      	lsls	r3, r3, #2
 802f876:	440b      	add	r3, r1
 802f878:	3304      	adds	r3, #4
 802f87a:	6819      	ldr	r1, [r3, #0]
 802f87c:	79ba      	ldrb	r2, [r7, #6]
 802f87e:	4c15      	ldr	r4, [pc, #84]	@ (802f8d4 <drv_itInit+0x90>)
 802f880:	4613      	mov	r3, r2
 802f882:	005b      	lsls	r3, r3, #1
 802f884:	4413      	add	r3, r2
 802f886:	009b      	lsls	r3, r3, #2
 802f888:	4423      	add	r3, r4
 802f88a:	3308      	adds	r3, #8
 802f88c:	681b      	ldr	r3, [r3, #0]
 802f88e:	461a      	mov	r2, r3
 802f890:	f7f6 fb91 	bl	8025fb6 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 802f894:	79ba      	ldrb	r2, [r7, #6]
 802f896:	490f      	ldr	r1, [pc, #60]	@ (802f8d4 <drv_itInit+0x90>)
 802f898:	4613      	mov	r3, r2
 802f89a:	005b      	lsls	r3, r3, #1
 802f89c:	4413      	add	r3, r2
 802f89e:	009b      	lsls	r3, r3, #2
 802f8a0:	440b      	add	r3, r1
 802f8a2:	f993 3000 	ldrsb.w	r3, [r3]
 802f8a6:	4618      	mov	r0, r3
 802f8a8:	f7f6 fba1 	bl	8025fee <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 802f8ac:	79bb      	ldrb	r3, [r7, #6]
 802f8ae:	3301      	adds	r3, #1
 802f8b0:	71bb      	strb	r3, [r7, #6]
 802f8b2:	79ba      	ldrb	r2, [r7, #6]
 802f8b4:	4b08      	ldr	r3, [pc, #32]	@ (802f8d8 <drv_itInit+0x94>)
 802f8b6:	681b      	ldr	r3, [r3, #0]
 802f8b8:	4908      	ldr	r1, [pc, #32]	@ (802f8dc <drv_itInit+0x98>)
 802f8ba:	fba1 1303 	umull	r1, r3, r1, r3
 802f8be:	08db      	lsrs	r3, r3, #3
 802f8c0:	429a      	cmp	r2, r3
 802f8c2:	d3c9      	bcc.n	802f858 <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 802f8c4:	2355      	movs	r3, #85	@ 0x55
 802f8c6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 802f8c8:	79fb      	ldrb	r3, [r7, #7]
}
 802f8ca:	4618      	mov	r0, r3
 802f8cc:	370c      	adds	r7, #12
 802f8ce:	46bd      	mov	sp, r7
 802f8d0:	bd90      	pop	{r4, r7, pc}
 802f8d2:	bf00      	nop
 802f8d4:	0803fea4 	.word	0x0803fea4
 802f8d8:	200013e0 	.word	0x200013e0
 802f8dc:	aaaaaaab 	.word	0xaaaaaaab

0802f8e0 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 802f8e0:	b580      	push	{r7, lr}
 802f8e2:	b086      	sub	sp, #24
 802f8e4:	af02      	add	r7, sp, #8
 802f8e6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 802f8e8:	23ae      	movs	r3, #174	@ 0xae
 802f8ea:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 802f8ec:	2300      	movs	r3, #0
 802f8ee:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 802f8f0:	4b0d      	ldr	r3, [pc, #52]	@ (802f928 <drv_shellTransmitString+0x48>)
 802f8f2:	785b      	ldrb	r3, [r3, #1]
 802f8f4:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 802f8f6:	7bbb      	ldrb	r3, [r7, #14]
 802f8f8:	2b05      	cmp	r3, #5
 802f8fa:	d810      	bhi.n	802f91e <drv_shellTransmitString+0x3e>
        {
            uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 802f8fc:	6878      	ldr	r0, [r7, #4]
 802f8fe:	f7f0 fce7 	bl	80202d0 <strlen>
 802f902:	4603      	mov	r3, r0
 802f904:	b29a      	uxth	r2, r3
 802f906:	4b09      	ldr	r3, [pc, #36]	@ (802f92c <drv_shellTransmitString+0x4c>)
 802f908:	6959      	ldr	r1, [r3, #20]
 802f90a:	4b08      	ldr	r3, [pc, #32]	@ (802f92c <drv_shellTransmitString+0x4c>)
 802f90c:	699b      	ldr	r3, [r3, #24]
 802f90e:	7bb8      	ldrb	r0, [r7, #14]
 802f910:	9300      	str	r3, [sp, #0]
 802f912:	460b      	mov	r3, r1
 802f914:	6879      	ldr	r1, [r7, #4]
 802f916:	f001 fbc1 	bl	803109c <drv_uartTransmitIT>
 802f91a:	4603      	mov	r3, r0
 802f91c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 802f91e:	7bfb      	ldrb	r3, [r7, #15]
}
 802f920:	4618      	mov	r0, r3
 802f922:	3710      	adds	r7, #16
 802f924:	46bd      	mov	sp, r7
 802f926:	bd80      	pop	{r7, pc}
 802f928:	08040038 	.word	0x08040038
 802f92c:	200014ac 	.word	0x200014ac

0802f930 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 802f930:	b580      	push	{r7, lr}
 802f932:	b086      	sub	sp, #24
 802f934:	af02      	add	r7, sp, #8
 802f936:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 802f938:	23ae      	movs	r3, #174	@ 0xae
 802f93a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 802f93c:	2300      	movs	r3, #0
 802f93e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 802f940:	4b0b      	ldr	r3, [pc, #44]	@ (802f970 <drv_shellReceiveChar+0x40>)
 802f942:	785b      	ldrb	r3, [r3, #1]
 802f944:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 802f946:	7bbb      	ldrb	r3, [r7, #14]
 802f948:	2b05      	cmp	r3, #5
 802f94a:	d80c      	bhi.n	802f966 <drv_shellReceiveChar+0x36>
        {
            uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 802f94c:	4b09      	ldr	r3, [pc, #36]	@ (802f974 <drv_shellReceiveChar+0x44>)
 802f94e:	68da      	ldr	r2, [r3, #12]
 802f950:	4b08      	ldr	r3, [pc, #32]	@ (802f974 <drv_shellReceiveChar+0x44>)
 802f952:	691b      	ldr	r3, [r3, #16]
 802f954:	7bb8      	ldrb	r0, [r7, #14]
 802f956:	9300      	str	r3, [sp, #0]
 802f958:	4613      	mov	r3, r2
 802f95a:	2201      	movs	r2, #1
 802f95c:	6879      	ldr	r1, [r7, #4]
 802f95e:	f001 fc0d 	bl	803117c <drv_uartReceiveIT>
 802f962:	4603      	mov	r3, r0
 802f964:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 802f966:	7bfb      	ldrb	r3, [r7, #15]
}
 802f968:	4618      	mov	r0, r3
 802f96a:	3710      	adds	r7, #16
 802f96c:	46bd      	mov	sp, r7
 802f96e:	bd80      	pop	{r7, pc}
 802f970:	08040038 	.word	0x08040038
 802f974:	200014ac 	.word	0x200014ac

0802f978 <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 802f978:	b580      	push	{r7, lr}
 802f97a:	b082      	sub	sp, #8
 802f97c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 802f97e:	2355      	movs	r3, #85	@ 0x55
 802f980:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 802f982:	2300      	movs	r3, #0
 802f984:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 802f986:	2300      	movs	r3, #0
 802f988:	71bb      	strb	r3, [r7, #6]
 802f98a:	e00e      	b.n	802f9aa <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 802f98c:	79fb      	ldrb	r3, [r7, #7]
 802f98e:	2b55      	cmp	r3, #85	@ 0x55
 802f990:	d106      	bne.n	802f9a0 <drv_spiInit+0x28>
 802f992:	79bb      	ldrb	r3, [r7, #6]
 802f994:	4618      	mov	r0, r3
 802f996:	f000 f81b 	bl	802f9d0 <drv_spiInitInstance>
 802f99a:	4603      	mov	r3, r0
 802f99c:	71fb      	strb	r3, [r7, #7]
 802f99e:	e001      	b.n	802f9a4 <drv_spiInit+0x2c>
 802f9a0:	23ae      	movs	r3, #174	@ 0xae
 802f9a2:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 802f9a4:	79bb      	ldrb	r3, [r7, #6]
 802f9a6:	3301      	adds	r3, #1
 802f9a8:	71bb      	strb	r3, [r7, #6]
 802f9aa:	79bb      	ldrb	r3, [r7, #6]
 802f9ac:	4a06      	ldr	r2, [pc, #24]	@ (802f9c8 <drv_spiInit+0x50>)
 802f9ae:	6812      	ldr	r2, [r2, #0]
 802f9b0:	08d2      	lsrs	r2, r2, #3
 802f9b2:	4906      	ldr	r1, [pc, #24]	@ (802f9cc <drv_spiInit+0x54>)
 802f9b4:	fba1 1202 	umull	r1, r2, r1, r2
 802f9b8:	4293      	cmp	r3, r2
 802f9ba:	d3e7      	bcc.n	802f98c <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 802f9bc:	79fb      	ldrb	r3, [r7, #7]
}
 802f9be:	4618      	mov	r0, r3
 802f9c0:	3708      	adds	r7, #8
 802f9c2:	46bd      	mov	sp, r7
 802f9c4:	bd80      	pop	{r7, pc}
 802f9c6:	bf00      	nop
 802f9c8:	2000143c 	.word	0x2000143c
 802f9cc:	24924925 	.word	0x24924925

0802f9d0 <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 802f9d0:	b580      	push	{r7, lr}
 802f9d2:	b084      	sub	sp, #16
 802f9d4:	af00      	add	r7, sp, #0
 802f9d6:	4603      	mov	r3, r0
 802f9d8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 802f9da:	23ae      	movs	r3, #174	@ 0xae
 802f9dc:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 802f9de:	2300      	movs	r3, #0
 802f9e0:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 802f9e2:	79fb      	ldrb	r3, [r7, #7]
 802f9e4:	4aa1      	ldr	r2, [pc, #644]	@ (802fc6c <drv_spiInitInstance+0x29c>)
 802f9e6:	6812      	ldr	r2, [r2, #0]
 802f9e8:	08d2      	lsrs	r2, r2, #3
 802f9ea:	49a1      	ldr	r1, [pc, #644]	@ (802fc70 <drv_spiInitInstance+0x2a0>)
 802f9ec:	fba1 1202 	umull	r1, r2, r1, r2
 802f9f0:	4293      	cmp	r3, r2
 802f9f2:	f080 8135 	bcs.w	802fc60 <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 802f9f6:	79fa      	ldrb	r2, [r7, #7]
 802f9f8:	499e      	ldr	r1, [pc, #632]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802f9fa:	4613      	mov	r3, r2
 802f9fc:	00db      	lsls	r3, r3, #3
 802f9fe:	1a9b      	subs	r3, r3, r2
 802fa00:	00db      	lsls	r3, r3, #3
 802fa02:	440b      	add	r3, r1
 802fa04:	781b      	ldrb	r3, [r3, #0]
 802fa06:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 802fa08:	7bba      	ldrb	r2, [r7, #14]
 802fa0a:	7bbb      	ldrb	r3, [r7, #14]
 802fa0c:	499a      	ldr	r1, [pc, #616]	@ (802fc78 <drv_spiInitInstance+0x2a8>)
 802fa0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802fa12:	499a      	ldr	r1, [pc, #616]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fa14:	2058      	movs	r0, #88	@ 0x58
 802fa16:	fb00 f303 	mul.w	r3, r0, r3
 802fa1a:	440b      	add	r3, r1
 802fa1c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 802fa1e:	79fa      	ldrb	r2, [r7, #7]
 802fa20:	7bb9      	ldrb	r1, [r7, #14]
 802fa22:	4894      	ldr	r0, [pc, #592]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fa24:	4613      	mov	r3, r2
 802fa26:	00db      	lsls	r3, r3, #3
 802fa28:	1a9b      	subs	r3, r3, r2
 802fa2a:	00db      	lsls	r3, r3, #3
 802fa2c:	4403      	add	r3, r0
 802fa2e:	3304      	adds	r3, #4
 802fa30:	681a      	ldr	r2, [r3, #0]
 802fa32:	4892      	ldr	r0, [pc, #584]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fa34:	2358      	movs	r3, #88	@ 0x58
 802fa36:	fb01 f303 	mul.w	r3, r1, r3
 802fa3a:	4403      	add	r3, r0
 802fa3c:	3304      	adds	r3, #4
 802fa3e:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 802fa40:	79fa      	ldrb	r2, [r7, #7]
 802fa42:	7bb9      	ldrb	r1, [r7, #14]
 802fa44:	488b      	ldr	r0, [pc, #556]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fa46:	4613      	mov	r3, r2
 802fa48:	00db      	lsls	r3, r3, #3
 802fa4a:	1a9b      	subs	r3, r3, r2
 802fa4c:	00db      	lsls	r3, r3, #3
 802fa4e:	4403      	add	r3, r0
 802fa50:	3308      	adds	r3, #8
 802fa52:	681a      	ldr	r2, [r3, #0]
 802fa54:	4889      	ldr	r0, [pc, #548]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fa56:	2358      	movs	r3, #88	@ 0x58
 802fa58:	fb01 f303 	mul.w	r3, r1, r3
 802fa5c:	4403      	add	r3, r0
 802fa5e:	3308      	adds	r3, #8
 802fa60:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 802fa62:	79fa      	ldrb	r2, [r7, #7]
 802fa64:	7bb9      	ldrb	r1, [r7, #14]
 802fa66:	4883      	ldr	r0, [pc, #524]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fa68:	4613      	mov	r3, r2
 802fa6a:	00db      	lsls	r3, r3, #3
 802fa6c:	1a9b      	subs	r3, r3, r2
 802fa6e:	00db      	lsls	r3, r3, #3
 802fa70:	4403      	add	r3, r0
 802fa72:	330c      	adds	r3, #12
 802fa74:	681a      	ldr	r2, [r3, #0]
 802fa76:	4881      	ldr	r0, [pc, #516]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fa78:	2358      	movs	r3, #88	@ 0x58
 802fa7a:	fb01 f303 	mul.w	r3, r1, r3
 802fa7e:	4403      	add	r3, r0
 802fa80:	330c      	adds	r3, #12
 802fa82:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 802fa84:	79fa      	ldrb	r2, [r7, #7]
 802fa86:	7bb9      	ldrb	r1, [r7, #14]
 802fa88:	487a      	ldr	r0, [pc, #488]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fa8a:	4613      	mov	r3, r2
 802fa8c:	00db      	lsls	r3, r3, #3
 802fa8e:	1a9b      	subs	r3, r3, r2
 802fa90:	00db      	lsls	r3, r3, #3
 802fa92:	4403      	add	r3, r0
 802fa94:	3310      	adds	r3, #16
 802fa96:	681a      	ldr	r2, [r3, #0]
 802fa98:	4878      	ldr	r0, [pc, #480]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fa9a:	2358      	movs	r3, #88	@ 0x58
 802fa9c:	fb01 f303 	mul.w	r3, r1, r3
 802faa0:	4403      	add	r3, r0
 802faa2:	3310      	adds	r3, #16
 802faa4:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 802faa6:	79fa      	ldrb	r2, [r7, #7]
 802faa8:	7bb9      	ldrb	r1, [r7, #14]
 802faaa:	4872      	ldr	r0, [pc, #456]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802faac:	4613      	mov	r3, r2
 802faae:	00db      	lsls	r3, r3, #3
 802fab0:	1a9b      	subs	r3, r3, r2
 802fab2:	00db      	lsls	r3, r3, #3
 802fab4:	4403      	add	r3, r0
 802fab6:	3314      	adds	r3, #20
 802fab8:	681a      	ldr	r2, [r3, #0]
 802faba:	4870      	ldr	r0, [pc, #448]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fabc:	2358      	movs	r3, #88	@ 0x58
 802fabe:	fb01 f303 	mul.w	r3, r1, r3
 802fac2:	4403      	add	r3, r0
 802fac4:	3314      	adds	r3, #20
 802fac6:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 802fac8:	79fa      	ldrb	r2, [r7, #7]
 802faca:	7bb9      	ldrb	r1, [r7, #14]
 802facc:	4869      	ldr	r0, [pc, #420]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802face:	4613      	mov	r3, r2
 802fad0:	00db      	lsls	r3, r3, #3
 802fad2:	1a9b      	subs	r3, r3, r2
 802fad4:	00db      	lsls	r3, r3, #3
 802fad6:	4403      	add	r3, r0
 802fad8:	3318      	adds	r3, #24
 802fada:	681a      	ldr	r2, [r3, #0]
 802fadc:	4867      	ldr	r0, [pc, #412]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fade:	2358      	movs	r3, #88	@ 0x58
 802fae0:	fb01 f303 	mul.w	r3, r1, r3
 802fae4:	4403      	add	r3, r0
 802fae6:	3318      	adds	r3, #24
 802fae8:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 802faea:	79fa      	ldrb	r2, [r7, #7]
 802faec:	7bb9      	ldrb	r1, [r7, #14]
 802faee:	4861      	ldr	r0, [pc, #388]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802faf0:	4613      	mov	r3, r2
 802faf2:	00db      	lsls	r3, r3, #3
 802faf4:	1a9b      	subs	r3, r3, r2
 802faf6:	00db      	lsls	r3, r3, #3
 802faf8:	4403      	add	r3, r0
 802fafa:	331c      	adds	r3, #28
 802fafc:	681a      	ldr	r2, [r3, #0]
 802fafe:	485f      	ldr	r0, [pc, #380]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fb00:	2358      	movs	r3, #88	@ 0x58
 802fb02:	fb01 f303 	mul.w	r3, r1, r3
 802fb06:	4403      	add	r3, r0
 802fb08:	331c      	adds	r3, #28
 802fb0a:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 802fb0c:	79fa      	ldrb	r2, [r7, #7]
 802fb0e:	7bb9      	ldrb	r1, [r7, #14]
 802fb10:	4858      	ldr	r0, [pc, #352]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fb12:	4613      	mov	r3, r2
 802fb14:	00db      	lsls	r3, r3, #3
 802fb16:	1a9b      	subs	r3, r3, r2
 802fb18:	00db      	lsls	r3, r3, #3
 802fb1a:	4403      	add	r3, r0
 802fb1c:	3320      	adds	r3, #32
 802fb1e:	681a      	ldr	r2, [r3, #0]
 802fb20:	4856      	ldr	r0, [pc, #344]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fb22:	2358      	movs	r3, #88	@ 0x58
 802fb24:	fb01 f303 	mul.w	r3, r1, r3
 802fb28:	4403      	add	r3, r0
 802fb2a:	3320      	adds	r3, #32
 802fb2c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 802fb2e:	79fa      	ldrb	r2, [r7, #7]
 802fb30:	7bb9      	ldrb	r1, [r7, #14]
 802fb32:	4850      	ldr	r0, [pc, #320]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fb34:	4613      	mov	r3, r2
 802fb36:	00db      	lsls	r3, r3, #3
 802fb38:	1a9b      	subs	r3, r3, r2
 802fb3a:	00db      	lsls	r3, r3, #3
 802fb3c:	4403      	add	r3, r0
 802fb3e:	3324      	adds	r3, #36	@ 0x24
 802fb40:	681a      	ldr	r2, [r3, #0]
 802fb42:	484e      	ldr	r0, [pc, #312]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fb44:	2358      	movs	r3, #88	@ 0x58
 802fb46:	fb01 f303 	mul.w	r3, r1, r3
 802fb4a:	4403      	add	r3, r0
 802fb4c:	3324      	adds	r3, #36	@ 0x24
 802fb4e:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 802fb50:	79fa      	ldrb	r2, [r7, #7]
 802fb52:	7bb9      	ldrb	r1, [r7, #14]
 802fb54:	4847      	ldr	r0, [pc, #284]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fb56:	4613      	mov	r3, r2
 802fb58:	00db      	lsls	r3, r3, #3
 802fb5a:	1a9b      	subs	r3, r3, r2
 802fb5c:	00db      	lsls	r3, r3, #3
 802fb5e:	4403      	add	r3, r0
 802fb60:	3328      	adds	r3, #40	@ 0x28
 802fb62:	681a      	ldr	r2, [r3, #0]
 802fb64:	4845      	ldr	r0, [pc, #276]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fb66:	2358      	movs	r3, #88	@ 0x58
 802fb68:	fb01 f303 	mul.w	r3, r1, r3
 802fb6c:	4403      	add	r3, r0
 802fb6e:	3328      	adds	r3, #40	@ 0x28
 802fb70:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 802fb72:	79fa      	ldrb	r2, [r7, #7]
 802fb74:	7bb9      	ldrb	r1, [r7, #14]
 802fb76:	483f      	ldr	r0, [pc, #252]	@ (802fc74 <drv_spiInitInstance+0x2a4>)
 802fb78:	4613      	mov	r3, r2
 802fb7a:	00db      	lsls	r3, r3, #3
 802fb7c:	1a9b      	subs	r3, r3, r2
 802fb7e:	00db      	lsls	r3, r3, #3
 802fb80:	4403      	add	r3, r0
 802fb82:	332c      	adds	r3, #44	@ 0x2c
 802fb84:	681a      	ldr	r2, [r3, #0]
 802fb86:	483d      	ldr	r0, [pc, #244]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fb88:	2358      	movs	r3, #88	@ 0x58
 802fb8a:	fb01 f303 	mul.w	r3, r1, r3
 802fb8e:	4403      	add	r3, r0
 802fb90:	332c      	adds	r3, #44	@ 0x2c
 802fb92:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 802fb94:	7bbb      	ldrb	r3, [r7, #14]
 802fb96:	2258      	movs	r2, #88	@ 0x58
 802fb98:	fb02 f303 	mul.w	r3, r2, r3
 802fb9c:	4a37      	ldr	r2, [pc, #220]	@ (802fc7c <drv_spiInitInstance+0x2ac>)
 802fb9e:	4413      	add	r3, r2
 802fba0:	4618      	mov	r0, r3
 802fba2:	f7f9 fd19 	bl	80295d8 <HAL_SPI_Init>
 802fba6:	4603      	mov	r3, r0
 802fba8:	2b00      	cmp	r3, #0
 802fbaa:	d159      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 802fbac:	7bbb      	ldrb	r3, [r7, #14]
 802fbae:	009b      	lsls	r3, r3, #2
 802fbb0:	4a33      	ldr	r2, [pc, #204]	@ (802fc80 <drv_spiInitInstance+0x2b0>)
 802fbb2:	4413      	add	r3, r2
 802fbb4:	4618      	mov	r0, r3
 802fbb6:	f008 fd31 	bl	803861c <gos_mutexInit>
 802fbba:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 802fbbc:	2b55      	cmp	r3, #85	@ 0x55
 802fbbe:	d14f      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fbc0:	7bba      	ldrb	r2, [r7, #14]
 802fbc2:	4613      	mov	r3, r2
 802fbc4:	005b      	lsls	r3, r3, #1
 802fbc6:	4413      	add	r3, r2
 802fbc8:	009b      	lsls	r3, r3, #2
 802fbca:	4a2e      	ldr	r2, [pc, #184]	@ (802fc84 <drv_spiInitInstance+0x2b4>)
 802fbcc:	4413      	add	r3, r2
 802fbce:	4618      	mov	r0, r3
 802fbd0:	f00b f9da 	bl	803af88 <gos_triggerInit>
 802fbd4:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 802fbd6:	2b55      	cmp	r3, #85	@ 0x55
 802fbd8:	d142      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fbda:	7bba      	ldrb	r2, [r7, #14]
 802fbdc:	4613      	mov	r3, r2
 802fbde:	005b      	lsls	r3, r3, #1
 802fbe0:	4413      	add	r3, r2
 802fbe2:	009b      	lsls	r3, r3, #2
 802fbe4:	4a28      	ldr	r2, [pc, #160]	@ (802fc88 <drv_spiInitInstance+0x2b8>)
 802fbe6:	4413      	add	r3, r2
 802fbe8:	4618      	mov	r0, r3
 802fbea:	f00b f9cd 	bl	803af88 <gos_triggerInit>
 802fbee:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fbf0:	2b55      	cmp	r3, #85	@ 0x55
 802fbf2:	d135      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 802fbf4:	7bba      	ldrb	r2, [r7, #14]
 802fbf6:	4613      	mov	r3, r2
 802fbf8:	005b      	lsls	r3, r3, #1
 802fbfa:	4413      	add	r3, r2
 802fbfc:	009b      	lsls	r3, r3, #2
 802fbfe:	4a23      	ldr	r2, [pc, #140]	@ (802fc8c <drv_spiInitInstance+0x2bc>)
 802fc00:	4413      	add	r3, r2
 802fc02:	4618      	mov	r0, r3
 802fc04:	f00b f9c0 	bl	803af88 <gos_triggerInit>
 802fc08:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fc0a:	2b55      	cmp	r3, #85	@ 0x55
 802fc0c:	d128      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fc0e:	7bba      	ldrb	r2, [r7, #14]
 802fc10:	4613      	mov	r3, r2
 802fc12:	005b      	lsls	r3, r3, #1
 802fc14:	4413      	add	r3, r2
 802fc16:	009b      	lsls	r3, r3, #2
 802fc18:	4a1a      	ldr	r2, [pc, #104]	@ (802fc84 <drv_spiInitInstance+0x2b4>)
 802fc1a:	4413      	add	r3, r2
 802fc1c:	4618      	mov	r0, r3
 802fc1e:	f00b f9cf 	bl	803afc0 <gos_triggerReset>
 802fc22:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 802fc24:	2b55      	cmp	r3, #85	@ 0x55
 802fc26:	d11b      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fc28:	7bba      	ldrb	r2, [r7, #14]
 802fc2a:	4613      	mov	r3, r2
 802fc2c:	005b      	lsls	r3, r3, #1
 802fc2e:	4413      	add	r3, r2
 802fc30:	009b      	lsls	r3, r3, #2
 802fc32:	4a15      	ldr	r2, [pc, #84]	@ (802fc88 <drv_spiInitInstance+0x2b8>)
 802fc34:	4413      	add	r3, r2
 802fc36:	4618      	mov	r0, r3
 802fc38:	f00b f9c2 	bl	803afc0 <gos_triggerReset>
 802fc3c:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fc3e:	2b55      	cmp	r3, #85	@ 0x55
 802fc40:	d10e      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 802fc42:	7bba      	ldrb	r2, [r7, #14]
 802fc44:	4613      	mov	r3, r2
 802fc46:	005b      	lsls	r3, r3, #1
 802fc48:	4413      	add	r3, r2
 802fc4a:	009b      	lsls	r3, r3, #2
 802fc4c:	4a0f      	ldr	r2, [pc, #60]	@ (802fc8c <drv_spiInitInstance+0x2bc>)
 802fc4e:	4413      	add	r3, r2
 802fc50:	4618      	mov	r0, r3
 802fc52:	f00b f9b5 	bl	803afc0 <gos_triggerReset>
 802fc56:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 802fc58:	2b55      	cmp	r3, #85	@ 0x55
 802fc5a:	d101      	bne.n	802fc60 <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 802fc5c:	2355      	movs	r3, #85	@ 0x55
 802fc5e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 802fc60:	7bfb      	ldrb	r3, [r7, #15]
}
 802fc62:	4618      	mov	r0, r3
 802fc64:	3710      	adds	r7, #16
 802fc66:	46bd      	mov	sp, r7
 802fc68:	bd80      	pop	{r7, pc}
 802fc6a:	bf00      	nop
 802fc6c:	2000143c 	.word	0x2000143c
 802fc70:	24924925 	.word	0x24924925
 802fc74:	0803ff4c 	.word	0x0803ff4c
 802fc78:	20001610 	.word	0x20001610
 802fc7c:	20007420 	.word	0x20007420
 802fc80:	20007580 	.word	0x20007580
 802fc84:	20007590 	.word	0x20007590
 802fc88:	200075c0 	.word	0x200075c0
 802fc8c:	200075f0 	.word	0x200075f0

0802fc90 <drv_spiTransmitBlocking>:
 */
gos_result_t drv_spiTransmitBlocking (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t transmitTmo
        )
{
 802fc90:	b580      	push	{r7, lr}
 802fc92:	b086      	sub	sp, #24
 802fc94:	af00      	add	r7, sp, #0
 802fc96:	60b9      	str	r1, [r7, #8]
 802fc98:	607b      	str	r3, [r7, #4]
 802fc9a:	4603      	mov	r3, r0
 802fc9c:	73fb      	strb	r3, [r7, #15]
 802fc9e:	4613      	mov	r3, r2
 802fca0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 802fca2:	23ae      	movs	r3, #174	@ 0xae
 802fca4:	75fb      	strb	r3, [r7, #23]


    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802fca6:	7bfb      	ldrb	r3, [r7, #15]
 802fca8:	009b      	lsls	r3, r3, #2
 802fcaa:	4a12      	ldr	r2, [pc, #72]	@ (802fcf4 <drv_spiTransmitBlocking+0x64>)
 802fcac:	4413      	add	r3, r2
 802fcae:	6879      	ldr	r1, [r7, #4]
 802fcb0:	4618      	mov	r0, r3
 802fcb2:	f008 fccd 	bl	8038650 <gos_mutexLock>
 802fcb6:	4603      	mov	r3, r0
 802fcb8:	2b55      	cmp	r3, #85	@ 0x55
 802fcba:	d10f      	bne.n	802fcdc <drv_spiTransmitBlocking+0x4c>
    {
        if (HAL_SPI_Transmit(&hspis[instance], pData, size, transmitTmo) == HAL_OK)
 802fcbc:	7bfb      	ldrb	r3, [r7, #15]
 802fcbe:	2258      	movs	r2, #88	@ 0x58
 802fcc0:	fb02 f303 	mul.w	r3, r2, r3
 802fcc4:	4a0c      	ldr	r2, [pc, #48]	@ (802fcf8 <drv_spiTransmitBlocking+0x68>)
 802fcc6:	1898      	adds	r0, r3, r2
 802fcc8:	89ba      	ldrh	r2, [r7, #12]
 802fcca:	6a3b      	ldr	r3, [r7, #32]
 802fccc:	68b9      	ldr	r1, [r7, #8]
 802fcce:	f7f9 fce7 	bl	80296a0 <HAL_SPI_Transmit>
 802fcd2:	4603      	mov	r3, r0
 802fcd4:	2b00      	cmp	r3, #0
 802fcd6:	d101      	bne.n	802fcdc <drv_spiTransmitBlocking+0x4c>
        {
            spiDriverTransmitResult = GOS_SUCCESS;
 802fcd8:	2355      	movs	r3, #85	@ 0x55
 802fcda:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 802fcdc:	7bfb      	ldrb	r3, [r7, #15]
 802fcde:	009b      	lsls	r3, r3, #2
 802fce0:	4a04      	ldr	r2, [pc, #16]	@ (802fcf4 <drv_spiTransmitBlocking+0x64>)
 802fce2:	4413      	add	r3, r2
 802fce4:	4618      	mov	r0, r3
 802fce6:	f008 fdb9 	bl	803885c <gos_mutexUnlock>

    return spiDriverTransmitResult;
 802fcea:	7dfb      	ldrb	r3, [r7, #23]
}
 802fcec:	4618      	mov	r0, r3
 802fcee:	3718      	adds	r7, #24
 802fcf0:	46bd      	mov	sp, r7
 802fcf2:	bd80      	pop	{r7, pc}
 802fcf4:	20007580 	.word	0x20007580
 802fcf8:	20007420 	.word	0x20007420

0802fcfc <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 802fcfc:	b580      	push	{r7, lr}
 802fcfe:	b086      	sub	sp, #24
 802fd00:	af00      	add	r7, sp, #0
 802fd02:	60b9      	str	r1, [r7, #8]
 802fd04:	607b      	str	r3, [r7, #4]
 802fd06:	4603      	mov	r3, r0
 802fd08:	73fb      	strb	r3, [r7, #15]
 802fd0a:	4613      	mov	r3, r2
 802fd0c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 802fd0e:	23ae      	movs	r3, #174	@ 0xae
 802fd10:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802fd12:	7bfb      	ldrb	r3, [r7, #15]
 802fd14:	009b      	lsls	r3, r3, #2
 802fd16:	4a28      	ldr	r2, [pc, #160]	@ (802fdb8 <drv_spiTransmitIT+0xbc>)
 802fd18:	4413      	add	r3, r2
 802fd1a:	6879      	ldr	r1, [r7, #4]
 802fd1c:	4618      	mov	r0, r3
 802fd1e:	f008 fc97 	bl	8038650 <gos_mutexLock>
 802fd22:	4603      	mov	r3, r0
 802fd24:	2b55      	cmp	r3, #85	@ 0x55
 802fd26:	d13a      	bne.n	802fd9e <drv_spiTransmitIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 802fd28:	7bfb      	ldrb	r3, [r7, #15]
 802fd2a:	2258      	movs	r2, #88	@ 0x58
 802fd2c:	fb02 f303 	mul.w	r3, r2, r3
 802fd30:	4a22      	ldr	r2, [pc, #136]	@ (802fdbc <drv_spiTransmitIT+0xc0>)
 802fd32:	4413      	add	r3, r2
 802fd34:	4618      	mov	r0, r3
 802fd36:	f7fa f841 	bl	8029dbc <HAL_SPI_Abort_IT>

        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 802fd3a:	7bfb      	ldrb	r3, [r7, #15]
 802fd3c:	2258      	movs	r2, #88	@ 0x58
 802fd3e:	fb02 f303 	mul.w	r3, r2, r3
 802fd42:	4a1e      	ldr	r2, [pc, #120]	@ (802fdbc <drv_spiTransmitIT+0xc0>)
 802fd44:	4413      	add	r3, r2
 802fd46:	89ba      	ldrh	r2, [r7, #12]
 802fd48:	68b9      	ldr	r1, [r7, #8]
 802fd4a:	4618      	mov	r0, r3
 802fd4c:	f7f9 fddc 	bl	8029908 <HAL_SPI_Transmit_IT>
 802fd50:	4603      	mov	r3, r0
 802fd52:	2b00      	cmp	r3, #0
 802fd54:	d123      	bne.n	802fd9e <drv_spiTransmitIT+0xa2>
        {
            if (triggerTmo > 0u)
 802fd56:	6a3b      	ldr	r3, [r7, #32]
 802fd58:	2b00      	cmp	r3, #0
 802fd5a:	d01e      	beq.n	802fd9a <drv_spiTransmitIT+0x9e>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802fd5c:	7bfa      	ldrb	r2, [r7, #15]
 802fd5e:	4613      	mov	r3, r2
 802fd60:	005b      	lsls	r3, r3, #1
 802fd62:	4413      	add	r3, r2
 802fd64:	009b      	lsls	r3, r3, #2
 802fd66:	4a16      	ldr	r2, [pc, #88]	@ (802fdc0 <drv_spiTransmitIT+0xc4>)
 802fd68:	4413      	add	r3, r2
 802fd6a:	6a3a      	ldr	r2, [r7, #32]
 802fd6c:	2101      	movs	r1, #1
 802fd6e:	4618      	mov	r0, r3
 802fd70:	f00b f97e 	bl	803b070 <gos_triggerWait>
 802fd74:	4603      	mov	r3, r0
 802fd76:	2b55      	cmp	r3, #85	@ 0x55
 802fd78:	d111      	bne.n	802fd9e <drv_spiTransmitIT+0xa2>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 802fd7a:	7bfa      	ldrb	r2, [r7, #15]
 802fd7c:	4613      	mov	r3, r2
 802fd7e:	005b      	lsls	r3, r3, #1
 802fd80:	4413      	add	r3, r2
 802fd82:	009b      	lsls	r3, r3, #2
 802fd84:	4a0e      	ldr	r2, [pc, #56]	@ (802fdc0 <drv_spiTransmitIT+0xc4>)
 802fd86:	4413      	add	r3, r2
 802fd88:	4618      	mov	r0, r3
 802fd8a:	f00b f919 	bl	803afc0 <gos_triggerReset>
 802fd8e:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802fd90:	2b55      	cmp	r3, #85	@ 0x55
 802fd92:	d104      	bne.n	802fd9e <drv_spiTransmitIT+0xa2>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 802fd94:	2355      	movs	r3, #85	@ 0x55
 802fd96:	75fb      	strb	r3, [r7, #23]
 802fd98:	e001      	b.n	802fd9e <drv_spiTransmitIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 802fd9a:	2355      	movs	r3, #85	@ 0x55
 802fd9c:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 802fd9e:	7bfb      	ldrb	r3, [r7, #15]
 802fda0:	009b      	lsls	r3, r3, #2
 802fda2:	4a05      	ldr	r2, [pc, #20]	@ (802fdb8 <drv_spiTransmitIT+0xbc>)
 802fda4:	4413      	add	r3, r2
 802fda6:	4618      	mov	r0, r3
 802fda8:	f008 fd58 	bl	803885c <gos_mutexUnlock>

    return spiDriverTransmitResult;
 802fdac:	7dfb      	ldrb	r3, [r7, #23]
}
 802fdae:	4618      	mov	r0, r3
 802fdb0:	3718      	adds	r7, #24
 802fdb2:	46bd      	mov	sp, r7
 802fdb4:	bd80      	pop	{r7, pc}
 802fdb6:	bf00      	nop
 802fdb8:	20007580 	.word	0x20007580
 802fdbc:	20007420 	.word	0x20007420
 802fdc0:	200075c0 	.word	0x200075c0

0802fdc4 <drv_spiReceiveIT>:
 */
gos_result_t drv_spiReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 802fdc4:	b580      	push	{r7, lr}
 802fdc6:	b086      	sub	sp, #24
 802fdc8:	af00      	add	r7, sp, #0
 802fdca:	60b9      	str	r1, [r7, #8]
 802fdcc:	607b      	str	r3, [r7, #4]
 802fdce:	4603      	mov	r3, r0
 802fdd0:	73fb      	strb	r3, [r7, #15]
 802fdd2:	4613      	mov	r3, r2
 802fdd4:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverReceiveResult = GOS_ERROR;
 802fdd6:	23ae      	movs	r3, #174	@ 0xae
 802fdd8:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802fdda:	7bfb      	ldrb	r3, [r7, #15]
 802fddc:	009b      	lsls	r3, r3, #2
 802fdde:	4a28      	ldr	r2, [pc, #160]	@ (802fe80 <drv_spiReceiveIT+0xbc>)
 802fde0:	4413      	add	r3, r2
 802fde2:	6879      	ldr	r1, [r7, #4]
 802fde4:	4618      	mov	r0, r3
 802fde6:	f008 fc33 	bl	8038650 <gos_mutexLock>
 802fdea:	4603      	mov	r3, r0
 802fdec:	2b55      	cmp	r3, #85	@ 0x55
 802fdee:	d13a      	bne.n	802fe66 <drv_spiReceiveIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 802fdf0:	7bfb      	ldrb	r3, [r7, #15]
 802fdf2:	2258      	movs	r2, #88	@ 0x58
 802fdf4:	fb02 f303 	mul.w	r3, r2, r3
 802fdf8:	4a22      	ldr	r2, [pc, #136]	@ (802fe84 <drv_spiReceiveIT+0xc0>)
 802fdfa:	4413      	add	r3, r2
 802fdfc:	4618      	mov	r0, r3
 802fdfe:	f7f9 ffdd 	bl	8029dbc <HAL_SPI_Abort_IT>

        if (HAL_SPI_Receive_IT(&hspis[instance], pBuffer, size) == HAL_OK)
 802fe02:	7bfb      	ldrb	r3, [r7, #15]
 802fe04:	2258      	movs	r2, #88	@ 0x58
 802fe06:	fb02 f303 	mul.w	r3, r2, r3
 802fe0a:	4a1e      	ldr	r2, [pc, #120]	@ (802fe84 <drv_spiReceiveIT+0xc0>)
 802fe0c:	4413      	add	r3, r2
 802fe0e:	89ba      	ldrh	r2, [r7, #12]
 802fe10:	68b9      	ldr	r1, [r7, #8]
 802fe12:	4618      	mov	r0, r3
 802fe14:	f7f9 fdfa 	bl	8029a0c <HAL_SPI_Receive_IT>
 802fe18:	4603      	mov	r3, r0
 802fe1a:	2b00      	cmp	r3, #0
 802fe1c:	d123      	bne.n	802fe66 <drv_spiReceiveIT+0xa2>
        {
            if (triggerTmo > 0u)
 802fe1e:	6a3b      	ldr	r3, [r7, #32]
 802fe20:	2b00      	cmp	r3, #0
 802fe22:	d01e      	beq.n	802fe62 <drv_spiReceiveIT+0x9e>
            {
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802fe24:	7bfa      	ldrb	r2, [r7, #15]
 802fe26:	4613      	mov	r3, r2
 802fe28:	005b      	lsls	r3, r3, #1
 802fe2a:	4413      	add	r3, r2
 802fe2c:	009b      	lsls	r3, r3, #2
 802fe2e:	4a16      	ldr	r2, [pc, #88]	@ (802fe88 <drv_spiReceiveIT+0xc4>)
 802fe30:	4413      	add	r3, r2
 802fe32:	6a3a      	ldr	r2, [r7, #32]
 802fe34:	2101      	movs	r1, #1
 802fe36:	4618      	mov	r0, r3
 802fe38:	f00b f91a 	bl	803b070 <gos_triggerWait>
 802fe3c:	4603      	mov	r3, r0
 802fe3e:	2b55      	cmp	r3, #85	@ 0x55
 802fe40:	d111      	bne.n	802fe66 <drv_spiReceiveIT+0xa2>
                    gos_triggerReset(&spiRxReadyTriggers[instance])                == GOS_SUCCESS)
 802fe42:	7bfa      	ldrb	r2, [r7, #15]
 802fe44:	4613      	mov	r3, r2
 802fe46:	005b      	lsls	r3, r3, #1
 802fe48:	4413      	add	r3, r2
 802fe4a:	009b      	lsls	r3, r3, #2
 802fe4c:	4a0e      	ldr	r2, [pc, #56]	@ (802fe88 <drv_spiReceiveIT+0xc4>)
 802fe4e:	4413      	add	r3, r2
 802fe50:	4618      	mov	r0, r3
 802fe52:	f00b f8b5 	bl	803afc0 <gos_triggerReset>
 802fe56:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802fe58:	2b55      	cmp	r3, #85	@ 0x55
 802fe5a:	d104      	bne.n	802fe66 <drv_spiReceiveIT+0xa2>
                {
                    spiDriverReceiveResult = GOS_SUCCESS;
 802fe5c:	2355      	movs	r3, #85	@ 0x55
 802fe5e:	75fb      	strb	r3, [r7, #23]
 802fe60:	e001      	b.n	802fe66 <drv_spiReceiveIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverReceiveResult = GOS_SUCCESS;
 802fe62:	2355      	movs	r3, #85	@ 0x55
 802fe64:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 802fe66:	7bfb      	ldrb	r3, [r7, #15]
 802fe68:	009b      	lsls	r3, r3, #2
 802fe6a:	4a05      	ldr	r2, [pc, #20]	@ (802fe80 <drv_spiReceiveIT+0xbc>)
 802fe6c:	4413      	add	r3, r2
 802fe6e:	4618      	mov	r0, r3
 802fe70:	f008 fcf4 	bl	803885c <gos_mutexUnlock>

    return spiDriverReceiveResult;
 802fe74:	7dfb      	ldrb	r3, [r7, #23]
}
 802fe76:	4618      	mov	r0, r3
 802fe78:	3718      	adds	r7, #24
 802fe7a:	46bd      	mov	sp, r7
 802fe7c:	bd80      	pop	{r7, pc}
 802fe7e:	bf00      	nop
 802fe80:	20007580 	.word	0x20007580
 802fe84:	20007420 	.word	0x20007420
 802fe88:	20007590 	.word	0x20007590

0802fe8c <drv_spiTransmitDMA>:
 */
gos_result_t drv_spiTransmitDMA (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 802fe8c:	b580      	push	{r7, lr}
 802fe8e:	b086      	sub	sp, #24
 802fe90:	af00      	add	r7, sp, #0
 802fe92:	60b9      	str	r1, [r7, #8]
 802fe94:	607b      	str	r3, [r7, #4]
 802fe96:	4603      	mov	r3, r0
 802fe98:	73fb      	strb	r3, [r7, #15]
 802fe9a:	4613      	mov	r3, r2
 802fe9c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 802fe9e:	23ae      	movs	r3, #174	@ 0xae
 802fea0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 802fea2:	7bfb      	ldrb	r3, [r7, #15]
 802fea4:	009b      	lsls	r3, r3, #2
 802fea6:	4a23      	ldr	r2, [pc, #140]	@ (802ff34 <drv_spiTransmitDMA+0xa8>)
 802fea8:	4413      	add	r3, r2
 802feaa:	6879      	ldr	r1, [r7, #4]
 802feac:	4618      	mov	r0, r3
 802feae:	f008 fbcf 	bl	8038650 <gos_mutexLock>
 802feb2:	4603      	mov	r3, r0
 802feb4:	2b55      	cmp	r3, #85	@ 0x55
 802feb6:	d131      	bne.n	802ff1c <drv_spiTransmitDMA+0x90>
    {
        if (HAL_SPI_Transmit_DMA(&hspis[instance], pData, size) == HAL_OK)
 802feb8:	7bfb      	ldrb	r3, [r7, #15]
 802feba:	2258      	movs	r2, #88	@ 0x58
 802febc:	fb02 f303 	mul.w	r3, r2, r3
 802fec0:	4a1d      	ldr	r2, [pc, #116]	@ (802ff38 <drv_spiTransmitDMA+0xac>)
 802fec2:	4413      	add	r3, r2
 802fec4:	89ba      	ldrh	r2, [r7, #12]
 802fec6:	68b9      	ldr	r1, [r7, #8]
 802fec8:	4618      	mov	r0, r3
 802feca:	f7f9 fec9 	bl	8029c60 <HAL_SPI_Transmit_DMA>
 802fece:	4603      	mov	r3, r0
 802fed0:	2b00      	cmp	r3, #0
 802fed2:	d123      	bne.n	802ff1c <drv_spiTransmitDMA+0x90>
        {
            if (triggerTmo > 0u)
 802fed4:	6a3b      	ldr	r3, [r7, #32]
 802fed6:	2b00      	cmp	r3, #0
 802fed8:	d01e      	beq.n	802ff18 <drv_spiTransmitDMA+0x8c>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802feda:	7bfa      	ldrb	r2, [r7, #15]
 802fedc:	4613      	mov	r3, r2
 802fede:	005b      	lsls	r3, r3, #1
 802fee0:	4413      	add	r3, r2
 802fee2:	009b      	lsls	r3, r3, #2
 802fee4:	4a15      	ldr	r2, [pc, #84]	@ (802ff3c <drv_spiTransmitDMA+0xb0>)
 802fee6:	4413      	add	r3, r2
 802fee8:	6a3a      	ldr	r2, [r7, #32]
 802feea:	2101      	movs	r1, #1
 802feec:	4618      	mov	r0, r3
 802feee:	f00b f8bf 	bl	803b070 <gos_triggerWait>
 802fef2:	4603      	mov	r3, r0
 802fef4:	2b55      	cmp	r3, #85	@ 0x55
 802fef6:	d111      	bne.n	802ff1c <drv_spiTransmitDMA+0x90>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 802fef8:	7bfa      	ldrb	r2, [r7, #15]
 802fefa:	4613      	mov	r3, r2
 802fefc:	005b      	lsls	r3, r3, #1
 802fefe:	4413      	add	r3, r2
 802ff00:	009b      	lsls	r3, r3, #2
 802ff02:	4a0e      	ldr	r2, [pc, #56]	@ (802ff3c <drv_spiTransmitDMA+0xb0>)
 802ff04:	4413      	add	r3, r2
 802ff06:	4618      	mov	r0, r3
 802ff08:	f00b f85a 	bl	803afc0 <gos_triggerReset>
 802ff0c:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 802ff0e:	2b55      	cmp	r3, #85	@ 0x55
 802ff10:	d104      	bne.n	802ff1c <drv_spiTransmitDMA+0x90>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 802ff12:	2355      	movs	r3, #85	@ 0x55
 802ff14:	75fb      	strb	r3, [r7, #23]
 802ff16:	e001      	b.n	802ff1c <drv_spiTransmitDMA+0x90>
                }
            }
            else
            {
                // Trigger is not used.
                spiDriverTransmitResult = GOS_SUCCESS;
 802ff18:	2355      	movs	r3, #85	@ 0x55
 802ff1a:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 802ff1c:	7bfb      	ldrb	r3, [r7, #15]
 802ff1e:	009b      	lsls	r3, r3, #2
 802ff20:	4a04      	ldr	r2, [pc, #16]	@ (802ff34 <drv_spiTransmitDMA+0xa8>)
 802ff22:	4413      	add	r3, r2
 802ff24:	4618      	mov	r0, r3
 802ff26:	f008 fc99 	bl	803885c <gos_mutexUnlock>

    return spiDriverTransmitResult;
 802ff2a:	7dfb      	ldrb	r3, [r7, #23]
}
 802ff2c:	4618      	mov	r0, r3
 802ff2e:	3718      	adds	r7, #24
 802ff30:	46bd      	mov	sp, r7
 802ff32:	bd80      	pop	{r7, pc}
 802ff34:	20007580 	.word	0x20007580
 802ff38:	20007420 	.word	0x20007420
 802ff3c:	200075c0 	.word	0x200075c0

0802ff40 <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 802ff40:	b580      	push	{r7, lr}
 802ff42:	b082      	sub	sp, #8
 802ff44:	af00      	add	r7, sp, #0
 802ff46:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 802ff48:	687b      	ldr	r3, [r7, #4]
 802ff4a:	681a      	ldr	r2, [r3, #0]
 802ff4c:	4b0f      	ldr	r3, [pc, #60]	@ (802ff8c <HAL_SPI_TxCpltCallback+0x4c>)
 802ff4e:	681b      	ldr	r3, [r3, #0]
 802ff50:	429a      	cmp	r2, r3
 802ff52:	d103      	bne.n	802ff5c <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 802ff54:	480e      	ldr	r0, [pc, #56]	@ (802ff90 <HAL_SPI_TxCpltCallback+0x50>)
 802ff56:	f00b f93b 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802ff5a:	e012      	b.n	802ff82 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 802ff5c:	687b      	ldr	r3, [r7, #4]
 802ff5e:	681a      	ldr	r2, [r3, #0]
 802ff60:	4b0a      	ldr	r3, [pc, #40]	@ (802ff8c <HAL_SPI_TxCpltCallback+0x4c>)
 802ff62:	685b      	ldr	r3, [r3, #4]
 802ff64:	429a      	cmp	r2, r3
 802ff66:	d103      	bne.n	802ff70 <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 802ff68:	480a      	ldr	r0, [pc, #40]	@ (802ff94 <HAL_SPI_TxCpltCallback+0x54>)
 802ff6a:	f00b f931 	bl	803b1d0 <gos_triggerIncrement>
}
 802ff6e:	e008      	b.n	802ff82 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 802ff70:	687b      	ldr	r3, [r7, #4]
 802ff72:	681a      	ldr	r2, [r3, #0]
 802ff74:	4b05      	ldr	r3, [pc, #20]	@ (802ff8c <HAL_SPI_TxCpltCallback+0x4c>)
 802ff76:	689b      	ldr	r3, [r3, #8]
 802ff78:	429a      	cmp	r2, r3
 802ff7a:	d102      	bne.n	802ff82 <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 802ff7c:	4806      	ldr	r0, [pc, #24]	@ (802ff98 <HAL_SPI_TxCpltCallback+0x58>)
 802ff7e:	f00b f927 	bl	803b1d0 <gos_triggerIncrement>
}
 802ff82:	bf00      	nop
 802ff84:	3708      	adds	r7, #8
 802ff86:	46bd      	mov	sp, r7
 802ff88:	bd80      	pop	{r7, pc}
 802ff8a:	bf00      	nop
 802ff8c:	20001610 	.word	0x20001610
 802ff90:	200075c0 	.word	0x200075c0
 802ff94:	200075cc 	.word	0x200075cc
 802ff98:	200075d8 	.word	0x200075d8

0802ff9c <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 802ff9c:	b580      	push	{r7, lr}
 802ff9e:	b082      	sub	sp, #8
 802ffa0:	af00      	add	r7, sp, #0
 802ffa2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 802ffa4:	687b      	ldr	r3, [r7, #4]
 802ffa6:	681a      	ldr	r2, [r3, #0]
 802ffa8:	4b0f      	ldr	r3, [pc, #60]	@ (802ffe8 <HAL_SPI_RxCpltCallback+0x4c>)
 802ffaa:	681b      	ldr	r3, [r3, #0]
 802ffac:	429a      	cmp	r2, r3
 802ffae:	d103      	bne.n	802ffb8 <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 802ffb0:	480e      	ldr	r0, [pc, #56]	@ (802ffec <HAL_SPI_RxCpltCallback+0x50>)
 802ffb2:	f00b f90d 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 802ffb6:	e012      	b.n	802ffde <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 802ffb8:	687b      	ldr	r3, [r7, #4]
 802ffba:	681a      	ldr	r2, [r3, #0]
 802ffbc:	4b0a      	ldr	r3, [pc, #40]	@ (802ffe8 <HAL_SPI_RxCpltCallback+0x4c>)
 802ffbe:	685b      	ldr	r3, [r3, #4]
 802ffc0:	429a      	cmp	r2, r3
 802ffc2:	d103      	bne.n	802ffcc <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 802ffc4:	480a      	ldr	r0, [pc, #40]	@ (802fff0 <HAL_SPI_RxCpltCallback+0x54>)
 802ffc6:	f00b f903 	bl	803b1d0 <gos_triggerIncrement>
}
 802ffca:	e008      	b.n	802ffde <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 802ffcc:	687b      	ldr	r3, [r7, #4]
 802ffce:	681a      	ldr	r2, [r3, #0]
 802ffd0:	4b05      	ldr	r3, [pc, #20]	@ (802ffe8 <HAL_SPI_RxCpltCallback+0x4c>)
 802ffd2:	689b      	ldr	r3, [r3, #8]
 802ffd4:	429a      	cmp	r2, r3
 802ffd6:	d102      	bne.n	802ffde <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 802ffd8:	4806      	ldr	r0, [pc, #24]	@ (802fff4 <HAL_SPI_RxCpltCallback+0x58>)
 802ffda:	f00b f8f9 	bl	803b1d0 <gos_triggerIncrement>
}
 802ffde:	bf00      	nop
 802ffe0:	3708      	adds	r7, #8
 802ffe2:	46bd      	mov	sp, r7
 802ffe4:	bd80      	pop	{r7, pc}
 802ffe6:	bf00      	nop
 802ffe8:	20001610 	.word	0x20001610
 802ffec:	20007590 	.word	0x20007590
 802fff0:	2000759c 	.word	0x2000759c
 802fff4:	200075a8 	.word	0x200075a8

0802fff8 <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 802fff8:	b580      	push	{r7, lr}
 802fffa:	b082      	sub	sp, #8
 802fffc:	af00      	add	r7, sp, #0
 802fffe:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 8030000:	687b      	ldr	r3, [r7, #4]
 8030002:	681a      	ldr	r2, [r3, #0]
 8030004:	4b0f      	ldr	r3, [pc, #60]	@ (8030044 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8030006:	681b      	ldr	r3, [r3, #0]
 8030008:	429a      	cmp	r2, r3
 803000a:	d103      	bne.n	8030014 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 803000c:	480e      	ldr	r0, [pc, #56]	@ (8030048 <HAL_SPI_TxRxCpltCallback+0x50>)
 803000e:	f00b f8df 	bl	803b1d0 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8030012:	e012      	b.n	803003a <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 8030014:	687b      	ldr	r3, [r7, #4]
 8030016:	681a      	ldr	r2, [r3, #0]
 8030018:	4b0a      	ldr	r3, [pc, #40]	@ (8030044 <HAL_SPI_TxRxCpltCallback+0x4c>)
 803001a:	685b      	ldr	r3, [r3, #4]
 803001c:	429a      	cmp	r2, r3
 803001e:	d103      	bne.n	8030028 <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 8030020:	480a      	ldr	r0, [pc, #40]	@ (803004c <HAL_SPI_TxRxCpltCallback+0x54>)
 8030022:	f00b f8d5 	bl	803b1d0 <gos_triggerIncrement>
}
 8030026:	e008      	b.n	803003a <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 8030028:	687b      	ldr	r3, [r7, #4]
 803002a:	681a      	ldr	r2, [r3, #0]
 803002c:	4b05      	ldr	r3, [pc, #20]	@ (8030044 <HAL_SPI_TxRxCpltCallback+0x4c>)
 803002e:	689b      	ldr	r3, [r3, #8]
 8030030:	429a      	cmp	r2, r3
 8030032:	d102      	bne.n	803003a <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 8030034:	4806      	ldr	r0, [pc, #24]	@ (8030050 <HAL_SPI_TxRxCpltCallback+0x58>)
 8030036:	f00b f8cb 	bl	803b1d0 <gos_triggerIncrement>
}
 803003a:	bf00      	nop
 803003c:	3708      	adds	r7, #8
 803003e:	46bd      	mov	sp, r7
 8030040:	bd80      	pop	{r7, pc}
 8030042:	bf00      	nop
 8030044:	20001610 	.word	0x20001610
 8030048:	200075f0 	.word	0x200075f0
 803004c:	200075fc 	.word	0x200075fc
 8030050:	20007608 	.word	0x20007608

08030054 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 8030054:	b580      	push	{r7, lr}
 8030056:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8030058:	4b16      	ldr	r3, [pc, #88]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 803005a:	781b      	ldrb	r3, [r3, #0]
 803005c:	2b00      	cmp	r3, #0
 803005e:	d105      	bne.n	803006c <SPI1_IRQHandler+0x18>
 8030060:	4b15      	ldr	r3, [pc, #84]	@ (80300b8 <SPI1_IRQHandler+0x64>)
 8030062:	781b      	ldrb	r3, [r3, #0]
 8030064:	3301      	adds	r3, #1
 8030066:	b2da      	uxtb	r2, r3
 8030068:	4b13      	ldr	r3, [pc, #76]	@ (80300b8 <SPI1_IRQHandler+0x64>)
 803006a:	701a      	strb	r2, [r3, #0]
 803006c:	4b11      	ldr	r3, [pc, #68]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 803006e:	781b      	ldrb	r3, [r3, #0]
 8030070:	3301      	adds	r3, #1
 8030072:	b2da      	uxtb	r2, r3
 8030074:	4b0f      	ldr	r3, [pc, #60]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 8030076:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 8030078:	4810      	ldr	r0, [pc, #64]	@ (80300bc <SPI1_IRQHandler+0x68>)
 803007a:	f7f9 ff99 	bl	8029fb0 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 803007e:	4b0d      	ldr	r3, [pc, #52]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 8030080:	781b      	ldrb	r3, [r3, #0]
 8030082:	2b00      	cmp	r3, #0
 8030084:	d005      	beq.n	8030092 <SPI1_IRQHandler+0x3e>
 8030086:	4b0b      	ldr	r3, [pc, #44]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 8030088:	781b      	ldrb	r3, [r3, #0]
 803008a:	3b01      	subs	r3, #1
 803008c:	b2da      	uxtb	r2, r3
 803008e:	4b09      	ldr	r3, [pc, #36]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 8030090:	701a      	strb	r2, [r3, #0]
 8030092:	4b08      	ldr	r3, [pc, #32]	@ (80300b4 <SPI1_IRQHandler+0x60>)
 8030094:	781b      	ldrb	r3, [r3, #0]
 8030096:	2b00      	cmp	r3, #0
 8030098:	d109      	bne.n	80300ae <SPI1_IRQHandler+0x5a>
 803009a:	4b07      	ldr	r3, [pc, #28]	@ (80300b8 <SPI1_IRQHandler+0x64>)
 803009c:	781b      	ldrb	r3, [r3, #0]
 803009e:	2b00      	cmp	r3, #0
 80300a0:	d005      	beq.n	80300ae <SPI1_IRQHandler+0x5a>
 80300a2:	4b05      	ldr	r3, [pc, #20]	@ (80300b8 <SPI1_IRQHandler+0x64>)
 80300a4:	781b      	ldrb	r3, [r3, #0]
 80300a6:	3b01      	subs	r3, #1
 80300a8:	b2da      	uxtb	r2, r3
 80300aa:	4b03      	ldr	r3, [pc, #12]	@ (80300b8 <SPI1_IRQHandler+0x64>)
 80300ac:	701a      	strb	r2, [r3, #0]
}
 80300ae:	bf00      	nop
 80300b0:	bd80      	pop	{r7, pc}
 80300b2:	bf00      	nop
 80300b4:	2000b312 	.word	0x2000b312
 80300b8:	2000b311 	.word	0x2000b311
 80300bc:	20007420 	.word	0x20007420

080300c0 <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 80300c0:	b580      	push	{r7, lr}
 80300c2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80300c4:	4b16      	ldr	r3, [pc, #88]	@ (8030120 <SPI2_IRQHandler+0x60>)
 80300c6:	781b      	ldrb	r3, [r3, #0]
 80300c8:	2b00      	cmp	r3, #0
 80300ca:	d105      	bne.n	80300d8 <SPI2_IRQHandler+0x18>
 80300cc:	4b15      	ldr	r3, [pc, #84]	@ (8030124 <SPI2_IRQHandler+0x64>)
 80300ce:	781b      	ldrb	r3, [r3, #0]
 80300d0:	3301      	adds	r3, #1
 80300d2:	b2da      	uxtb	r2, r3
 80300d4:	4b13      	ldr	r3, [pc, #76]	@ (8030124 <SPI2_IRQHandler+0x64>)
 80300d6:	701a      	strb	r2, [r3, #0]
 80300d8:	4b11      	ldr	r3, [pc, #68]	@ (8030120 <SPI2_IRQHandler+0x60>)
 80300da:	781b      	ldrb	r3, [r3, #0]
 80300dc:	3301      	adds	r3, #1
 80300de:	b2da      	uxtb	r2, r3
 80300e0:	4b0f      	ldr	r3, [pc, #60]	@ (8030120 <SPI2_IRQHandler+0x60>)
 80300e2:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 80300e4:	4810      	ldr	r0, [pc, #64]	@ (8030128 <SPI2_IRQHandler+0x68>)
 80300e6:	f7f9 ff63 	bl	8029fb0 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 80300ea:	4b0d      	ldr	r3, [pc, #52]	@ (8030120 <SPI2_IRQHandler+0x60>)
 80300ec:	781b      	ldrb	r3, [r3, #0]
 80300ee:	2b00      	cmp	r3, #0
 80300f0:	d005      	beq.n	80300fe <SPI2_IRQHandler+0x3e>
 80300f2:	4b0b      	ldr	r3, [pc, #44]	@ (8030120 <SPI2_IRQHandler+0x60>)
 80300f4:	781b      	ldrb	r3, [r3, #0]
 80300f6:	3b01      	subs	r3, #1
 80300f8:	b2da      	uxtb	r2, r3
 80300fa:	4b09      	ldr	r3, [pc, #36]	@ (8030120 <SPI2_IRQHandler+0x60>)
 80300fc:	701a      	strb	r2, [r3, #0]
 80300fe:	4b08      	ldr	r3, [pc, #32]	@ (8030120 <SPI2_IRQHandler+0x60>)
 8030100:	781b      	ldrb	r3, [r3, #0]
 8030102:	2b00      	cmp	r3, #0
 8030104:	d109      	bne.n	803011a <SPI2_IRQHandler+0x5a>
 8030106:	4b07      	ldr	r3, [pc, #28]	@ (8030124 <SPI2_IRQHandler+0x64>)
 8030108:	781b      	ldrb	r3, [r3, #0]
 803010a:	2b00      	cmp	r3, #0
 803010c:	d005      	beq.n	803011a <SPI2_IRQHandler+0x5a>
 803010e:	4b05      	ldr	r3, [pc, #20]	@ (8030124 <SPI2_IRQHandler+0x64>)
 8030110:	781b      	ldrb	r3, [r3, #0]
 8030112:	3b01      	subs	r3, #1
 8030114:	b2da      	uxtb	r2, r3
 8030116:	4b03      	ldr	r3, [pc, #12]	@ (8030124 <SPI2_IRQHandler+0x64>)
 8030118:	701a      	strb	r2, [r3, #0]
}
 803011a:	bf00      	nop
 803011c:	bd80      	pop	{r7, pc}
 803011e:	bf00      	nop
 8030120:	2000b312 	.word	0x2000b312
 8030124:	2000b311 	.word	0x2000b311
 8030128:	20007478 	.word	0x20007478

0803012c <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 803012c:	b580      	push	{r7, lr}
 803012e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8030130:	4b16      	ldr	r3, [pc, #88]	@ (803018c <SPI3_IRQHandler+0x60>)
 8030132:	781b      	ldrb	r3, [r3, #0]
 8030134:	2b00      	cmp	r3, #0
 8030136:	d105      	bne.n	8030144 <SPI3_IRQHandler+0x18>
 8030138:	4b15      	ldr	r3, [pc, #84]	@ (8030190 <SPI3_IRQHandler+0x64>)
 803013a:	781b      	ldrb	r3, [r3, #0]
 803013c:	3301      	adds	r3, #1
 803013e:	b2da      	uxtb	r2, r3
 8030140:	4b13      	ldr	r3, [pc, #76]	@ (8030190 <SPI3_IRQHandler+0x64>)
 8030142:	701a      	strb	r2, [r3, #0]
 8030144:	4b11      	ldr	r3, [pc, #68]	@ (803018c <SPI3_IRQHandler+0x60>)
 8030146:	781b      	ldrb	r3, [r3, #0]
 8030148:	3301      	adds	r3, #1
 803014a:	b2da      	uxtb	r2, r3
 803014c:	4b0f      	ldr	r3, [pc, #60]	@ (803018c <SPI3_IRQHandler+0x60>)
 803014e:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 8030150:	4810      	ldr	r0, [pc, #64]	@ (8030194 <SPI3_IRQHandler+0x68>)
 8030152:	f7f9 ff2d 	bl	8029fb0 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 8030156:	4b0d      	ldr	r3, [pc, #52]	@ (803018c <SPI3_IRQHandler+0x60>)
 8030158:	781b      	ldrb	r3, [r3, #0]
 803015a:	2b00      	cmp	r3, #0
 803015c:	d005      	beq.n	803016a <SPI3_IRQHandler+0x3e>
 803015e:	4b0b      	ldr	r3, [pc, #44]	@ (803018c <SPI3_IRQHandler+0x60>)
 8030160:	781b      	ldrb	r3, [r3, #0]
 8030162:	3b01      	subs	r3, #1
 8030164:	b2da      	uxtb	r2, r3
 8030166:	4b09      	ldr	r3, [pc, #36]	@ (803018c <SPI3_IRQHandler+0x60>)
 8030168:	701a      	strb	r2, [r3, #0]
 803016a:	4b08      	ldr	r3, [pc, #32]	@ (803018c <SPI3_IRQHandler+0x60>)
 803016c:	781b      	ldrb	r3, [r3, #0]
 803016e:	2b00      	cmp	r3, #0
 8030170:	d109      	bne.n	8030186 <SPI3_IRQHandler+0x5a>
 8030172:	4b07      	ldr	r3, [pc, #28]	@ (8030190 <SPI3_IRQHandler+0x64>)
 8030174:	781b      	ldrb	r3, [r3, #0]
 8030176:	2b00      	cmp	r3, #0
 8030178:	d005      	beq.n	8030186 <SPI3_IRQHandler+0x5a>
 803017a:	4b05      	ldr	r3, [pc, #20]	@ (8030190 <SPI3_IRQHandler+0x64>)
 803017c:	781b      	ldrb	r3, [r3, #0]
 803017e:	3b01      	subs	r3, #1
 8030180:	b2da      	uxtb	r2, r3
 8030182:	4b03      	ldr	r3, [pc, #12]	@ (8030190 <SPI3_IRQHandler+0x64>)
 8030184:	701a      	strb	r2, [r3, #0]
}
 8030186:	bf00      	nop
 8030188:	bd80      	pop	{r7, pc}
 803018a:	bf00      	nop
 803018c:	2000b312 	.word	0x2000b312
 8030190:	2000b311 	.word	0x2000b311
 8030194:	200074d0 	.word	0x200074d0

08030198 <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 8030198:	b580      	push	{r7, lr}
 803019a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 803019c:	4b16      	ldr	r3, [pc, #88]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 803019e:	781b      	ldrb	r3, [r3, #0]
 80301a0:	2b00      	cmp	r3, #0
 80301a2:	d105      	bne.n	80301b0 <SPI4_IRQHandler+0x18>
 80301a4:	4b15      	ldr	r3, [pc, #84]	@ (80301fc <SPI4_IRQHandler+0x64>)
 80301a6:	781b      	ldrb	r3, [r3, #0]
 80301a8:	3301      	adds	r3, #1
 80301aa:	b2da      	uxtb	r2, r3
 80301ac:	4b13      	ldr	r3, [pc, #76]	@ (80301fc <SPI4_IRQHandler+0x64>)
 80301ae:	701a      	strb	r2, [r3, #0]
 80301b0:	4b11      	ldr	r3, [pc, #68]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 80301b2:	781b      	ldrb	r3, [r3, #0]
 80301b4:	3301      	adds	r3, #1
 80301b6:	b2da      	uxtb	r2, r3
 80301b8:	4b0f      	ldr	r3, [pc, #60]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 80301ba:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 80301bc:	4810      	ldr	r0, [pc, #64]	@ (8030200 <SPI4_IRQHandler+0x68>)
 80301be:	f7f9 fef7 	bl	8029fb0 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 80301c2:	4b0d      	ldr	r3, [pc, #52]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 80301c4:	781b      	ldrb	r3, [r3, #0]
 80301c6:	2b00      	cmp	r3, #0
 80301c8:	d005      	beq.n	80301d6 <SPI4_IRQHandler+0x3e>
 80301ca:	4b0b      	ldr	r3, [pc, #44]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 80301cc:	781b      	ldrb	r3, [r3, #0]
 80301ce:	3b01      	subs	r3, #1
 80301d0:	b2da      	uxtb	r2, r3
 80301d2:	4b09      	ldr	r3, [pc, #36]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 80301d4:	701a      	strb	r2, [r3, #0]
 80301d6:	4b08      	ldr	r3, [pc, #32]	@ (80301f8 <SPI4_IRQHandler+0x60>)
 80301d8:	781b      	ldrb	r3, [r3, #0]
 80301da:	2b00      	cmp	r3, #0
 80301dc:	d109      	bne.n	80301f2 <SPI4_IRQHandler+0x5a>
 80301de:	4b07      	ldr	r3, [pc, #28]	@ (80301fc <SPI4_IRQHandler+0x64>)
 80301e0:	781b      	ldrb	r3, [r3, #0]
 80301e2:	2b00      	cmp	r3, #0
 80301e4:	d005      	beq.n	80301f2 <SPI4_IRQHandler+0x5a>
 80301e6:	4b05      	ldr	r3, [pc, #20]	@ (80301fc <SPI4_IRQHandler+0x64>)
 80301e8:	781b      	ldrb	r3, [r3, #0]
 80301ea:	3b01      	subs	r3, #1
 80301ec:	b2da      	uxtb	r2, r3
 80301ee:	4b03      	ldr	r3, [pc, #12]	@ (80301fc <SPI4_IRQHandler+0x64>)
 80301f0:	701a      	strb	r2, [r3, #0]
}
 80301f2:	bf00      	nop
 80301f4:	bd80      	pop	{r7, pc}
 80301f6:	bf00      	nop
 80301f8:	2000b312 	.word	0x2000b312
 80301fc:	2000b311 	.word	0x2000b311
 8030200:	20007528 	.word	0x20007528

08030204 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 8030204:	b480      	push	{r7}
 8030206:	b085      	sub	sp, #20
 8030208:	af00      	add	r7, sp, #0
 803020a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 803020c:	2300      	movs	r3, #0
 803020e:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8030210:	2300      	movs	r3, #0
 8030212:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 8030214:	2300      	movs	r3, #0
 8030216:	73fb      	strb	r3, [r7, #15]
 8030218:	e068      	b.n	80302ec <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 803021a:	7bfb      	ldrb	r3, [r7, #15]
 803021c:	4a38      	ldr	r2, [pc, #224]	@ (8030300 <HAL_SPI_MspInit+0xfc>)
 803021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8030222:	687b      	ldr	r3, [r7, #4]
 8030224:	681b      	ldr	r3, [r3, #0]
 8030226:	429a      	cmp	r2, r3
 8030228:	d15d      	bne.n	80302e6 <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 803022a:	2300      	movs	r3, #0
 803022c:	73bb      	strb	r3, [r7, #14]
 803022e:	e051      	b.n	80302d4 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 8030230:	7bba      	ldrb	r2, [r7, #14]
 8030232:	4934      	ldr	r1, [pc, #208]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 8030234:	4613      	mov	r3, r2
 8030236:	00db      	lsls	r3, r3, #3
 8030238:	1a9b      	subs	r3, r3, r2
 803023a:	00db      	lsls	r3, r3, #3
 803023c:	440b      	add	r3, r1
 803023e:	781b      	ldrb	r3, [r3, #0]
 8030240:	7bfa      	ldrb	r2, [r7, #15]
 8030242:	429a      	cmp	r2, r3
 8030244:	d143      	bne.n	80302ce <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 8030246:	7bba      	ldrb	r2, [r7, #14]
 8030248:	492e      	ldr	r1, [pc, #184]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 803024a:	4613      	mov	r3, r2
 803024c:	00db      	lsls	r3, r3, #3
 803024e:	1a9b      	subs	r3, r3, r2
 8030250:	00db      	lsls	r3, r3, #3
 8030252:	440b      	add	r3, r1
 8030254:	3330      	adds	r3, #48	@ 0x30
 8030256:	681b      	ldr	r3, [r3, #0]
 8030258:	2b00      	cmp	r3, #0
 803025a:	d016      	beq.n	803028a <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 803025c:	7bba      	ldrb	r2, [r7, #14]
 803025e:	4929      	ldr	r1, [pc, #164]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 8030260:	4613      	mov	r3, r2
 8030262:	00db      	lsls	r3, r3, #3
 8030264:	1a9b      	subs	r3, r3, r2
 8030266:	00db      	lsls	r3, r3, #3
 8030268:	440b      	add	r3, r1
 803026a:	3330      	adds	r3, #48	@ 0x30
 803026c:	681b      	ldr	r3, [r3, #0]
 803026e:	1d1a      	adds	r2, r3, #4
 8030270:	687b      	ldr	r3, [r7, #4]
 8030272:	64da      	str	r2, [r3, #76]	@ 0x4c
 8030274:	7bba      	ldrb	r2, [r7, #14]
 8030276:	4923      	ldr	r1, [pc, #140]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 8030278:	4613      	mov	r3, r2
 803027a:	00db      	lsls	r3, r3, #3
 803027c:	1a9b      	subs	r3, r3, r2
 803027e:	00db      	lsls	r3, r3, #3
 8030280:	440b      	add	r3, r1
 8030282:	3330      	adds	r3, #48	@ 0x30
 8030284:	681b      	ldr	r3, [r3, #0]
 8030286:	687a      	ldr	r2, [r7, #4]
 8030288:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 803028a:	7bba      	ldrb	r2, [r7, #14]
 803028c:	491d      	ldr	r1, [pc, #116]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 803028e:	4613      	mov	r3, r2
 8030290:	00db      	lsls	r3, r3, #3
 8030292:	1a9b      	subs	r3, r3, r2
 8030294:	00db      	lsls	r3, r3, #3
 8030296:	440b      	add	r3, r1
 8030298:	3334      	adds	r3, #52	@ 0x34
 803029a:	681b      	ldr	r3, [r3, #0]
 803029c:	2b00      	cmp	r3, #0
 803029e:	d016      	beq.n	80302ce <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 80302a0:	7bba      	ldrb	r2, [r7, #14]
 80302a2:	4918      	ldr	r1, [pc, #96]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 80302a4:	4613      	mov	r3, r2
 80302a6:	00db      	lsls	r3, r3, #3
 80302a8:	1a9b      	subs	r3, r3, r2
 80302aa:	00db      	lsls	r3, r3, #3
 80302ac:	440b      	add	r3, r1
 80302ae:	3334      	adds	r3, #52	@ 0x34
 80302b0:	681b      	ldr	r3, [r3, #0]
 80302b2:	1d1a      	adds	r2, r3, #4
 80302b4:	687b      	ldr	r3, [r7, #4]
 80302b6:	649a      	str	r2, [r3, #72]	@ 0x48
 80302b8:	7bba      	ldrb	r2, [r7, #14]
 80302ba:	4912      	ldr	r1, [pc, #72]	@ (8030304 <HAL_SPI_MspInit+0x100>)
 80302bc:	4613      	mov	r3, r2
 80302be:	00db      	lsls	r3, r3, #3
 80302c0:	1a9b      	subs	r3, r3, r2
 80302c2:	00db      	lsls	r3, r3, #3
 80302c4:	440b      	add	r3, r1
 80302c6:	3334      	adds	r3, #52	@ 0x34
 80302c8:	681b      	ldr	r3, [r3, #0]
 80302ca:	687a      	ldr	r2, [r7, #4]
 80302cc:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 80302ce:	7bbb      	ldrb	r3, [r7, #14]
 80302d0:	3301      	adds	r3, #1
 80302d2:	73bb      	strb	r3, [r7, #14]
 80302d4:	7bbb      	ldrb	r3, [r7, #14]
 80302d6:	4a0c      	ldr	r2, [pc, #48]	@ (8030308 <HAL_SPI_MspInit+0x104>)
 80302d8:	6812      	ldr	r2, [r2, #0]
 80302da:	08d2      	lsrs	r2, r2, #3
 80302dc:	490b      	ldr	r1, [pc, #44]	@ (803030c <HAL_SPI_MspInit+0x108>)
 80302de:	fba1 1202 	umull	r1, r2, r1, r2
 80302e2:	4293      	cmp	r3, r2
 80302e4:	d3a4      	bcc.n	8030230 <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 80302e6:	7bfb      	ldrb	r3, [r7, #15]
 80302e8:	3301      	adds	r3, #1
 80302ea:	73fb      	strb	r3, [r7, #15]
 80302ec:	7bfb      	ldrb	r3, [r7, #15]
 80302ee:	2b03      	cmp	r3, #3
 80302f0:	d993      	bls.n	803021a <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 80302f2:	bf00      	nop
 80302f4:	bf00      	nop
 80302f6:	3714      	adds	r7, #20
 80302f8:	46bd      	mov	sp, r7
 80302fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302fe:	4770      	bx	lr
 8030300:	20001610 	.word	0x20001610
 8030304:	0803ff4c 	.word	0x0803ff4c
 8030308:	2000143c 	.word	0x2000143c
 803030c:	24924925 	.word	0x24924925

08030310 <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 8030310:	b580      	push	{r7, lr}
 8030312:	b086      	sub	sp, #24
 8030314:	af02      	add	r7, sp, #8
 8030316:	6078      	str	r0, [r7, #4]
 8030318:	460b      	mov	r3, r1
 803031a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 803031c:	23ae      	movs	r3, #174	@ 0xae
 803031e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8030320:	2300      	movs	r3, #0
 8030322:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 8030324:	4b0a      	ldr	r3, [pc, #40]	@ (8030350 <drv_sysmonTransmit+0x40>)
 8030326:	781b      	ldrb	r3, [r3, #0]
 8030328:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 803032a:	4b0a      	ldr	r3, [pc, #40]	@ (8030354 <drv_sysmonTransmit+0x44>)
 803032c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 803032e:	4b09      	ldr	r3, [pc, #36]	@ (8030354 <drv_sysmonTransmit+0x44>)
 8030330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030332:	887a      	ldrh	r2, [r7, #2]
 8030334:	7bb8      	ldrb	r0, [r7, #14]
 8030336:	9300      	str	r3, [sp, #0]
 8030338:	460b      	mov	r3, r1
 803033a:	6879      	ldr	r1, [r7, #4]
 803033c:	f000 feae 	bl	803109c <drv_uartTransmitIT>
 8030340:	4603      	mov	r3, r0
 8030342:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8030344:	7bfb      	ldrb	r3, [r7, #15]
}
 8030346:	4618      	mov	r0, r3
 8030348:	3710      	adds	r7, #16
 803034a:	46bd      	mov	sp, r7
 803034c:	bd80      	pop	{r7, pc}
 803034e:	bf00      	nop
 8030350:	08040038 	.word	0x08040038
 8030354:	200014ac 	.word	0x200014ac

08030358 <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 8030358:	b580      	push	{r7, lr}
 803035a:	b086      	sub	sp, #24
 803035c:	af02      	add	r7, sp, #8
 803035e:	6078      	str	r0, [r7, #4]
 8030360:	460b      	mov	r3, r1
 8030362:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 8030364:	23ae      	movs	r3, #174	@ 0xae
 8030366:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8030368:	2300      	movs	r3, #0
 803036a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 803036c:	4b0a      	ldr	r3, [pc, #40]	@ (8030398 <drv_sysmonReceive+0x40>)
 803036e:	781b      	ldrb	r3, [r3, #0]
 8030370:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 8030372:	4b0a      	ldr	r3, [pc, #40]	@ (803039c <drv_sysmonReceive+0x44>)
 8030374:	69d9      	ldr	r1, [r3, #28]
 8030376:	4b09      	ldr	r3, [pc, #36]	@ (803039c <drv_sysmonReceive+0x44>)
 8030378:	6a1b      	ldr	r3, [r3, #32]
 803037a:	887a      	ldrh	r2, [r7, #2]
 803037c:	7bb8      	ldrb	r0, [r7, #14]
 803037e:	9300      	str	r3, [sp, #0]
 8030380:	460b      	mov	r3, r1
 8030382:	6879      	ldr	r1, [r7, #4]
 8030384:	f000 fe1a 	bl	8030fbc <drv_uartReceiveDMA>
 8030388:	4603      	mov	r3, r0
 803038a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 803038c:	7bfb      	ldrb	r3, [r7, #15]
}
 803038e:	4618      	mov	r0, r3
 8030390:	3710      	adds	r7, #16
 8030392:	46bd      	mov	sp, r7
 8030394:	bd80      	pop	{r7, pc}
 8030396:	bf00      	nop
 8030398:	08040038 	.word	0x08040038
 803039c:	200014ac 	.word	0x200014ac

080303a0 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 80303a0:	b580      	push	{r7, lr}
 80303a2:	b082      	sub	sp, #8
 80303a4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 80303a6:	23ae      	movs	r3, #174	@ 0xae
 80303a8:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 80303aa:	2300      	movs	r3, #0
 80303ac:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 80303ae:	4b08      	ldr	r3, [pc, #32]	@ (80303d0 <drv_systimerStart+0x30>)
 80303b0:	781b      	ldrb	r3, [r3, #0]
 80303b2:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 80303b4:	79bb      	ldrb	r3, [r7, #6]
 80303b6:	f04f 31ff 	mov.w	r1, #4294967295
 80303ba:	4618      	mov	r0, r3
 80303bc:	f000 f9a2 	bl	8030704 <drv_tmrStart>
 80303c0:	4603      	mov	r3, r0
 80303c2:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 80303c4:	79fb      	ldrb	r3, [r7, #7]
}
 80303c6:	4618      	mov	r0, r3
 80303c8:	3708      	adds	r7, #8
 80303ca:	46bd      	mov	sp, r7
 80303cc:	bd80      	pop	{r7, pc}
 80303ce:	bf00      	nop
 80303d0:	0803ffbc 	.word	0x0803ffbc

080303d4 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 80303d4:	b580      	push	{r7, lr}
 80303d6:	b084      	sub	sp, #16
 80303d8:	af00      	add	r7, sp, #0
 80303da:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 80303dc:	23ae      	movs	r3, #174	@ 0xae
 80303de:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 80303e0:	2300      	movs	r3, #0
 80303e2:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 80303e4:	2300      	movs	r3, #0
 80303e6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 80303e8:	687b      	ldr	r3, [r7, #4]
 80303ea:	2b00      	cmp	r3, #0
 80303ec:	d00f      	beq.n	803040e <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 80303ee:	4b0a      	ldr	r3, [pc, #40]	@ (8030418 <drv_systimerGetValue+0x44>)
 80303f0:	781b      	ldrb	r3, [r3, #0]
 80303f2:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 80303f4:	f107 0208 	add.w	r2, r7, #8
 80303f8:	7bbb      	ldrb	r3, [r7, #14]
 80303fa:	4611      	mov	r1, r2
 80303fc:	4618      	mov	r0, r3
 80303fe:	f000 f9b3 	bl	8030768 <drv_tmrGetValue>
 8030402:	4603      	mov	r3, r0
 8030404:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 8030406:	68bb      	ldr	r3, [r7, #8]
 8030408:	b29a      	uxth	r2, r3
 803040a:	687b      	ldr	r3, [r7, #4]
 803040c:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 803040e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030410:	4618      	mov	r0, r3
 8030412:	3710      	adds	r7, #16
 8030414:	46bd      	mov	sp, r7
 8030416:	bd80      	pop	{r7, pc}
 8030418:	0803ffbc 	.word	0x0803ffbc

0803041c <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 803041c:	b580      	push	{r7, lr}
 803041e:	b082      	sub	sp, #8
 8030420:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 8030422:	2355      	movs	r3, #85	@ 0x55
 8030424:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 8030426:	2300      	movs	r3, #0
 8030428:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 803042a:	2300      	movs	r3, #0
 803042c:	71bb      	strb	r3, [r7, #6]
 803042e:	e00e      	b.n	803044e <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 8030430:	79fb      	ldrb	r3, [r7, #7]
 8030432:	2b55      	cmp	r3, #85	@ 0x55
 8030434:	d106      	bne.n	8030444 <drv_tmrInit+0x28>
 8030436:	79bb      	ldrb	r3, [r7, #6]
 8030438:	4618      	mov	r0, r3
 803043a:	f000 f81b 	bl	8030474 <drv_tmrInitInstance>
 803043e:	4603      	mov	r3, r0
 8030440:	71fb      	strb	r3, [r7, #7]
 8030442:	e001      	b.n	8030448 <drv_tmrInit+0x2c>
 8030444:	23ae      	movs	r3, #174	@ 0xae
 8030446:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8030448:	79bb      	ldrb	r3, [r7, #6]
 803044a:	3301      	adds	r3, #1
 803044c:	71bb      	strb	r3, [r7, #6]
 803044e:	79ba      	ldrb	r2, [r7, #6]
 8030450:	4b06      	ldr	r3, [pc, #24]	@ (803046c <drv_tmrInit+0x50>)
 8030452:	681b      	ldr	r3, [r3, #0]
 8030454:	4906      	ldr	r1, [pc, #24]	@ (8030470 <drv_tmrInit+0x54>)
 8030456:	fba1 1303 	umull	r1, r3, r1, r3
 803045a:	091b      	lsrs	r3, r3, #4
 803045c:	429a      	cmp	r2, r3
 803045e:	d3e7      	bcc.n	8030430 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 8030460:	79fb      	ldrb	r3, [r7, #7]
}
 8030462:	4618      	mov	r0, r3
 8030464:	3708      	adds	r7, #8
 8030466:	46bd      	mov	sp, r7
 8030468:	bd80      	pop	{r7, pc}
 803046a:	bf00      	nop
 803046c:	200014a8 	.word	0x200014a8
 8030470:	4ec4ec4f 	.word	0x4ec4ec4f

08030474 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 8030474:	b580      	push	{r7, lr}
 8030476:	b08a      	sub	sp, #40	@ 0x28
 8030478:	af00      	add	r7, sp, #0
 803047a:	4603      	mov	r3, r0
 803047c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 803047e:	23ae      	movs	r3, #174	@ 0xae
 8030480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 8030484:	2300      	movs	r3, #0
 8030486:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 803048a:	f107 031c 	add.w	r3, r7, #28
 803048e:	2200      	movs	r2, #0
 8030490:	601a      	str	r2, [r3, #0]
 8030492:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 8030494:	f107 030c 	add.w	r3, r7, #12
 8030498:	2200      	movs	r2, #0
 803049a:	601a      	str	r2, [r3, #0]
 803049c:	605a      	str	r2, [r3, #4]
 803049e:	609a      	str	r2, [r3, #8]
 80304a0:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 80304a2:	79fa      	ldrb	r2, [r7, #7]
 80304a4:	4b90      	ldr	r3, [pc, #576]	@ (80306e8 <drv_tmrInitInstance+0x274>)
 80304a6:	681b      	ldr	r3, [r3, #0]
 80304a8:	4990      	ldr	r1, [pc, #576]	@ (80306ec <drv_tmrInitInstance+0x278>)
 80304aa:	fba1 1303 	umull	r1, r3, r1, r3
 80304ae:	091b      	lsrs	r3, r3, #4
 80304b0:	429a      	cmp	r2, r3
 80304b2:	f080 8112 	bcs.w	80306da <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 80304b6:	79fb      	ldrb	r3, [r7, #7]
 80304b8:	4a8d      	ldr	r2, [pc, #564]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80304ba:	2134      	movs	r1, #52	@ 0x34
 80304bc:	fb01 f303 	mul.w	r3, r1, r3
 80304c0:	4413      	add	r3, r2
 80304c2:	781b      	ldrb	r3, [r3, #0]
 80304c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 80304c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80304cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80304d0:	4988      	ldr	r1, [pc, #544]	@ (80306f4 <drv_tmrInitInstance+0x280>)
 80304d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80304d6:	4888      	ldr	r0, [pc, #544]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 80304d8:	4613      	mov	r3, r2
 80304da:	00db      	lsls	r3, r3, #3
 80304dc:	4413      	add	r3, r2
 80304de:	00db      	lsls	r3, r3, #3
 80304e0:	4403      	add	r3, r0
 80304e2:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 80304e4:	79fb      	ldrb	r3, [r7, #7]
 80304e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80304ea:	4981      	ldr	r1, [pc, #516]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80304ec:	2034      	movs	r0, #52	@ 0x34
 80304ee:	fb00 f303 	mul.w	r3, r0, r3
 80304f2:	440b      	add	r3, r1
 80304f4:	3318      	adds	r3, #24
 80304f6:	6819      	ldr	r1, [r3, #0]
 80304f8:	487f      	ldr	r0, [pc, #508]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 80304fa:	4613      	mov	r3, r2
 80304fc:	00db      	lsls	r3, r3, #3
 80304fe:	4413      	add	r3, r2
 8030500:	00db      	lsls	r3, r3, #3
 8030502:	4403      	add	r3, r0
 8030504:	3318      	adds	r3, #24
 8030506:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 8030508:	79fb      	ldrb	r3, [r7, #7]
 803050a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 803050e:	4978      	ldr	r1, [pc, #480]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 8030510:	2034      	movs	r0, #52	@ 0x34
 8030512:	fb00 f303 	mul.w	r3, r0, r3
 8030516:	440b      	add	r3, r1
 8030518:	3314      	adds	r3, #20
 803051a:	6819      	ldr	r1, [r3, #0]
 803051c:	4876      	ldr	r0, [pc, #472]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 803051e:	4613      	mov	r3, r2
 8030520:	00db      	lsls	r3, r3, #3
 8030522:	4413      	add	r3, r2
 8030524:	00db      	lsls	r3, r3, #3
 8030526:	4403      	add	r3, r0
 8030528:	3310      	adds	r3, #16
 803052a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 803052c:	79fb      	ldrb	r3, [r7, #7]
 803052e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8030532:	496f      	ldr	r1, [pc, #444]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 8030534:	2034      	movs	r0, #52	@ 0x34
 8030536:	fb00 f303 	mul.w	r3, r0, r3
 803053a:	440b      	add	r3, r1
 803053c:	330c      	adds	r3, #12
 803053e:	6819      	ldr	r1, [r3, #0]
 8030540:	486d      	ldr	r0, [pc, #436]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 8030542:	4613      	mov	r3, r2
 8030544:	00db      	lsls	r3, r3, #3
 8030546:	4413      	add	r3, r2
 8030548:	00db      	lsls	r3, r3, #3
 803054a:	4403      	add	r3, r0
 803054c:	3308      	adds	r3, #8
 803054e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 8030550:	79fb      	ldrb	r3, [r7, #7]
 8030552:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8030556:	4966      	ldr	r1, [pc, #408]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 8030558:	2034      	movs	r0, #52	@ 0x34
 803055a:	fb00 f303 	mul.w	r3, r0, r3
 803055e:	440b      	add	r3, r1
 8030560:	3310      	adds	r3, #16
 8030562:	6819      	ldr	r1, [r3, #0]
 8030564:	4864      	ldr	r0, [pc, #400]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 8030566:	4613      	mov	r3, r2
 8030568:	00db      	lsls	r3, r3, #3
 803056a:	4413      	add	r3, r2
 803056c:	00db      	lsls	r3, r3, #3
 803056e:	4403      	add	r3, r0
 8030570:	330c      	adds	r3, #12
 8030572:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 8030574:	79fb      	ldrb	r3, [r7, #7]
 8030576:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 803057a:	495d      	ldr	r1, [pc, #372]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 803057c:	2034      	movs	r0, #52	@ 0x34
 803057e:	fb00 f303 	mul.w	r3, r0, r3
 8030582:	440b      	add	r3, r1
 8030584:	3304      	adds	r3, #4
 8030586:	6819      	ldr	r1, [r3, #0]
 8030588:	485b      	ldr	r0, [pc, #364]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 803058a:	4613      	mov	r3, r2
 803058c:	00db      	lsls	r3, r3, #3
 803058e:	4413      	add	r3, r2
 8030590:	00db      	lsls	r3, r3, #3
 8030592:	4403      	add	r3, r0
 8030594:	3304      	adds	r3, #4
 8030596:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 8030598:	79fb      	ldrb	r3, [r7, #7]
 803059a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 803059e:	4954      	ldr	r1, [pc, #336]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80305a0:	2034      	movs	r0, #52	@ 0x34
 80305a2:	fb00 f303 	mul.w	r3, r0, r3
 80305a6:	440b      	add	r3, r1
 80305a8:	3308      	adds	r3, #8
 80305aa:	6819      	ldr	r1, [r3, #0]
 80305ac:	4852      	ldr	r0, [pc, #328]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 80305ae:	4613      	mov	r3, r2
 80305b0:	00db      	lsls	r3, r3, #3
 80305b2:	4413      	add	r3, r2
 80305b4:	00db      	lsls	r3, r3, #3
 80305b6:	4403      	add	r3, r0
 80305b8:	3314      	adds	r3, #20
 80305ba:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 80305bc:	79fb      	ldrb	r3, [r7, #7]
 80305be:	4a4c      	ldr	r2, [pc, #304]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80305c0:	2134      	movs	r1, #52	@ 0x34
 80305c2:	fb01 f303 	mul.w	r3, r1, r3
 80305c6:	4413      	add	r3, r2
 80305c8:	3328      	adds	r3, #40	@ 0x28
 80305ca:	681b      	ldr	r3, [r3, #0]
 80305cc:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 80305ce:	79fb      	ldrb	r3, [r7, #7]
 80305d0:	4a47      	ldr	r2, [pc, #284]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80305d2:	2134      	movs	r1, #52	@ 0x34
 80305d4:	fb01 f303 	mul.w	r3, r1, r3
 80305d8:	4413      	add	r3, r2
 80305da:	332c      	adds	r3, #44	@ 0x2c
 80305dc:	681b      	ldr	r3, [r3, #0]
 80305de:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 80305e0:	79fb      	ldrb	r3, [r7, #7]
 80305e2:	4a43      	ldr	r2, [pc, #268]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80305e4:	2134      	movs	r1, #52	@ 0x34
 80305e6:	fb01 f303 	mul.w	r3, r1, r3
 80305ea:	4413      	add	r3, r2
 80305ec:	3320      	adds	r3, #32
 80305ee:	681b      	ldr	r3, [r3, #0]
 80305f0:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 80305f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80305f6:	4613      	mov	r3, r2
 80305f8:	00db      	lsls	r3, r3, #3
 80305fa:	4413      	add	r3, r2
 80305fc:	00db      	lsls	r3, r3, #3
 80305fe:	4a3e      	ldr	r2, [pc, #248]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 8030600:	4413      	add	r3, r2
 8030602:	4618      	mov	r0, r3
 8030604:	f7fa fb1e 	bl	802ac44 <HAL_TIM_Base_Init>
 8030608:	4603      	mov	r3, r0
 803060a:	2b00      	cmp	r3, #0
 803060c:	d165      	bne.n	80306da <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 803060e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8030612:	009b      	lsls	r3, r3, #2
 8030614:	4a39      	ldr	r2, [pc, #228]	@ (80306fc <drv_tmrInitInstance+0x288>)
 8030616:	4413      	add	r3, r2
 8030618:	4618      	mov	r0, r3
 803061a:	f007 ffff 	bl	803861c <gos_mutexInit>
 803061e:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8030620:	2b55      	cmp	r3, #85	@ 0x55
 8030622:	d15a      	bne.n	80306da <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8030624:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8030628:	4613      	mov	r3, r2
 803062a:	005b      	lsls	r3, r3, #1
 803062c:	4413      	add	r3, r2
 803062e:	009b      	lsls	r3, r3, #2
 8030630:	4a33      	ldr	r2, [pc, #204]	@ (8030700 <drv_tmrInitInstance+0x28c>)
 8030632:	4413      	add	r3, r2
 8030634:	4618      	mov	r0, r3
 8030636:	f00a fca7 	bl	803af88 <gos_triggerInit>
 803063a:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 803063c:	2b55      	cmp	r3, #85	@ 0x55
 803063e:	d14c      	bne.n	80306da <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 8030640:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8030644:	4613      	mov	r3, r2
 8030646:	005b      	lsls	r3, r3, #1
 8030648:	4413      	add	r3, r2
 803064a:	009b      	lsls	r3, r3, #2
 803064c:	4a2c      	ldr	r2, [pc, #176]	@ (8030700 <drv_tmrInitInstance+0x28c>)
 803064e:	4413      	add	r3, r2
 8030650:	4618      	mov	r0, r3
 8030652:	f00a fcb5 	bl	803afc0 <gos_triggerReset>
 8030656:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8030658:	2b55      	cmp	r3, #85	@ 0x55
 803065a:	d13e      	bne.n	80306da <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 803065c:	2355      	movs	r3, #85	@ 0x55
 803065e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 8030662:	79fb      	ldrb	r3, [r7, #7]
 8030664:	4a22      	ldr	r2, [pc, #136]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 8030666:	2134      	movs	r1, #52	@ 0x34
 8030668:	fb01 f303 	mul.w	r3, r1, r3
 803066c:	4413      	add	r3, r2
 803066e:	331c      	adds	r3, #28
 8030670:	781b      	ldrb	r3, [r3, #0]
 8030672:	2b36      	cmp	r3, #54	@ 0x36
 8030674:	d113      	bne.n	803069e <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 8030676:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 803067a:	4613      	mov	r3, r2
 803067c:	00db      	lsls	r3, r3, #3
 803067e:	4413      	add	r3, r2
 8030680:	00db      	lsls	r3, r3, #3
 8030682:	4a1d      	ldr	r2, [pc, #116]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 8030684:	4413      	add	r3, r2
 8030686:	f107 020c 	add.w	r2, r7, #12
 803068a:	4611      	mov	r1, r2
 803068c:	4618      	mov	r0, r3
 803068e:	f7fa fc3a 	bl	802af06 <HAL_TIM_ConfigClockSource>
 8030692:	4603      	mov	r3, r0
 8030694:	2b00      	cmp	r3, #0
 8030696:	d002      	beq.n	803069e <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 8030698:	23ae      	movs	r3, #174	@ 0xae
 803069a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 803069e:	79fb      	ldrb	r3, [r7, #7]
 80306a0:	4a13      	ldr	r2, [pc, #76]	@ (80306f0 <drv_tmrInitInstance+0x27c>)
 80306a2:	2134      	movs	r1, #52	@ 0x34
 80306a4:	fb01 f303 	mul.w	r3, r1, r3
 80306a8:	4413      	add	r3, r2
 80306aa:	3324      	adds	r3, #36	@ 0x24
 80306ac:	781b      	ldrb	r3, [r3, #0]
 80306ae:	2b36      	cmp	r3, #54	@ 0x36
 80306b0:	d113      	bne.n	80306da <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 80306b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80306b6:	4613      	mov	r3, r2
 80306b8:	00db      	lsls	r3, r3, #3
 80306ba:	4413      	add	r3, r2
 80306bc:	00db      	lsls	r3, r3, #3
 80306be:	4a0e      	ldr	r2, [pc, #56]	@ (80306f8 <drv_tmrInitInstance+0x284>)
 80306c0:	4413      	add	r3, r2
 80306c2:	f107 021c 	add.w	r2, r7, #28
 80306c6:	4611      	mov	r1, r2
 80306c8:	4618      	mov	r0, r3
 80306ca:	f7fa fe43 	bl	802b354 <HAL_TIMEx_MasterConfigSynchronization>
 80306ce:	4603      	mov	r3, r0
 80306d0:	2b00      	cmp	r3, #0
 80306d2:	d002      	beq.n	80306da <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 80306d4:	23ae      	movs	r3, #174	@ 0xae
 80306d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 80306da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80306de:	4618      	mov	r0, r3
 80306e0:	3728      	adds	r7, #40	@ 0x28
 80306e2:	46bd      	mov	sp, r7
 80306e4:	bd80      	pop	{r7, pc}
 80306e6:	bf00      	nop
 80306e8:	200014a8 	.word	0x200014a8
 80306ec:	4ec4ec4f 	.word	0x4ec4ec4f
 80306f0:	20001440 	.word	0x20001440
 80306f4:	20001620 	.word	0x20001620
 80306f8:	20007620 	.word	0x20007620
 80306fc:	20007a10 	.word	0x20007a10
 8030700:	20007a48 	.word	0x20007a48

08030704 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 8030704:	b580      	push	{r7, lr}
 8030706:	b084      	sub	sp, #16
 8030708:	af00      	add	r7, sp, #0
 803070a:	4603      	mov	r3, r0
 803070c:	6039      	str	r1, [r7, #0]
 803070e:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 8030710:	23ae      	movs	r3, #174	@ 0xae
 8030712:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8030714:	79fb      	ldrb	r3, [r7, #7]
 8030716:	009b      	lsls	r3, r3, #2
 8030718:	4a11      	ldr	r2, [pc, #68]	@ (8030760 <drv_tmrStart+0x5c>)
 803071a:	4413      	add	r3, r2
 803071c:	6839      	ldr	r1, [r7, #0]
 803071e:	4618      	mov	r0, r3
 8030720:	f007 ff96 	bl	8038650 <gos_mutexLock>
 8030724:	4603      	mov	r3, r0
 8030726:	2b55      	cmp	r3, #85	@ 0x55
 8030728:	d10e      	bne.n	8030748 <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 803072a:	79fa      	ldrb	r2, [r7, #7]
 803072c:	4613      	mov	r3, r2
 803072e:	00db      	lsls	r3, r3, #3
 8030730:	4413      	add	r3, r2
 8030732:	00db      	lsls	r3, r3, #3
 8030734:	4a0b      	ldr	r2, [pc, #44]	@ (8030764 <drv_tmrStart+0x60>)
 8030736:	4413      	add	r3, r2
 8030738:	4618      	mov	r0, r3
 803073a:	f7fa fab8 	bl	802acae <HAL_TIM_Base_Start>
 803073e:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8030740:	2b00      	cmp	r3, #0
 8030742:	d101      	bne.n	8030748 <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 8030744:	2355      	movs	r3, #85	@ 0x55
 8030746:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 8030748:	79fb      	ldrb	r3, [r7, #7]
 803074a:	009b      	lsls	r3, r3, #2
 803074c:	4a04      	ldr	r2, [pc, #16]	@ (8030760 <drv_tmrStart+0x5c>)
 803074e:	4413      	add	r3, r2
 8030750:	4618      	mov	r0, r3
 8030752:	f008 f883 	bl	803885c <gos_mutexUnlock>

    return tmrStartResult;
 8030756:	7bfb      	ldrb	r3, [r7, #15]
}
 8030758:	4618      	mov	r0, r3
 803075a:	3710      	adds	r7, #16
 803075c:	46bd      	mov	sp, r7
 803075e:	bd80      	pop	{r7, pc}
 8030760:	20007a10 	.word	0x20007a10
 8030764:	20007620 	.word	0x20007620

08030768 <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 8030768:	b480      	push	{r7}
 803076a:	b085      	sub	sp, #20
 803076c:	af00      	add	r7, sp, #0
 803076e:	4603      	mov	r3, r0
 8030770:	6039      	str	r1, [r7, #0]
 8030772:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 8030774:	23ae      	movs	r3, #174	@ 0xae
 8030776:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 8030778:	683b      	ldr	r3, [r7, #0]
 803077a:	2b00      	cmp	r3, #0
 803077c:	d00c      	beq.n	8030798 <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 803077e:	79fa      	ldrb	r2, [r7, #7]
 8030780:	4909      	ldr	r1, [pc, #36]	@ (80307a8 <drv_tmrGetValue+0x40>)
 8030782:	4613      	mov	r3, r2
 8030784:	00db      	lsls	r3, r3, #3
 8030786:	4413      	add	r3, r2
 8030788:	00db      	lsls	r3, r3, #3
 803078a:	440b      	add	r3, r1
 803078c:	681b      	ldr	r3, [r3, #0]
 803078e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8030790:	683b      	ldr	r3, [r7, #0]
 8030792:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 8030794:	2355      	movs	r3, #85	@ 0x55
 8030796:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 8030798:	7bfb      	ldrb	r3, [r7, #15]
}
 803079a:	4618      	mov	r0, r3
 803079c:	3714      	adds	r7, #20
 803079e:	46bd      	mov	sp, r7
 80307a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80307a4:	4770      	bx	lr
 80307a6:	bf00      	nop
 80307a8:	20007620 	.word	0x20007620

080307ac <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 80307ac:	b580      	push	{r7, lr}
 80307ae:	b084      	sub	sp, #16
 80307b0:	af00      	add	r7, sp, #0
 80307b2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 80307b4:	2300      	movs	r3, #0
 80307b6:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 80307b8:	2300      	movs	r3, #0
 80307ba:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 80307bc:	687b      	ldr	r3, [r7, #4]
 80307be:	2b00      	cmp	r3, #0
 80307c0:	d041      	beq.n	8030846 <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 80307c2:	2300      	movs	r3, #0
 80307c4:	73fb      	strb	r3, [r7, #15]
 80307c6:	e03a      	b.n	803083e <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 80307c8:	7bfb      	ldrb	r3, [r7, #15]
 80307ca:	4a21      	ldr	r2, [pc, #132]	@ (8030850 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80307cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80307d0:	687b      	ldr	r3, [r7, #4]
 80307d2:	681b      	ldr	r3, [r3, #0]
 80307d4:	429a      	cmp	r2, r3
 80307d6:	d12f      	bne.n	8030838 <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 80307d8:	2300      	movs	r3, #0
 80307da:	73bb      	strb	r3, [r7, #14]
 80307dc:	e020      	b.n	8030820 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 80307de:	7bbb      	ldrb	r3, [r7, #14]
 80307e0:	4a1c      	ldr	r2, [pc, #112]	@ (8030854 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80307e2:	2134      	movs	r1, #52	@ 0x34
 80307e4:	fb01 f303 	mul.w	r3, r1, r3
 80307e8:	4413      	add	r3, r2
 80307ea:	781b      	ldrb	r3, [r3, #0]
 80307ec:	7bfa      	ldrb	r2, [r7, #15]
 80307ee:	429a      	cmp	r2, r3
 80307f0:	d113      	bne.n	803081a <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 80307f2:	7bbb      	ldrb	r3, [r7, #14]
 80307f4:	4a17      	ldr	r2, [pc, #92]	@ (8030854 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80307f6:	2134      	movs	r1, #52	@ 0x34
 80307f8:	fb01 f303 	mul.w	r3, r1, r3
 80307fc:	4413      	add	r3, r2
 80307fe:	3330      	adds	r3, #48	@ 0x30
 8030800:	681b      	ldr	r3, [r3, #0]
 8030802:	2b00      	cmp	r3, #0
 8030804:	d016      	beq.n	8030834 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 8030806:	7bbb      	ldrb	r3, [r7, #14]
 8030808:	4a12      	ldr	r2, [pc, #72]	@ (8030854 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 803080a:	2134      	movs	r1, #52	@ 0x34
 803080c:	fb01 f303 	mul.w	r3, r1, r3
 8030810:	4413      	add	r3, r2
 8030812:	3330      	adds	r3, #48	@ 0x30
 8030814:	681b      	ldr	r3, [r3, #0]
 8030816:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 8030818:	e00c      	b.n	8030834 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 803081a:	7bbb      	ldrb	r3, [r7, #14]
 803081c:	3301      	adds	r3, #1
 803081e:	73bb      	strb	r3, [r7, #14]
 8030820:	7bba      	ldrb	r2, [r7, #14]
 8030822:	4b0d      	ldr	r3, [pc, #52]	@ (8030858 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8030824:	681b      	ldr	r3, [r3, #0]
 8030826:	490d      	ldr	r1, [pc, #52]	@ (803085c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8030828:	fba1 1303 	umull	r1, r3, r1, r3
 803082c:	091b      	lsrs	r3, r3, #4
 803082e:	429a      	cmp	r2, r3
 8030830:	d3d5      	bcc.n	80307de <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 8030832:	e008      	b.n	8030846 <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 8030834:	bf00      	nop
                break;
 8030836:	e006      	b.n	8030846 <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8030838:	7bfb      	ldrb	r3, [r7, #15]
 803083a:	3301      	adds	r3, #1
 803083c:	73fb      	strb	r3, [r7, #15]
 803083e:	7bfb      	ldrb	r3, [r7, #15]
 8030840:	2b0d      	cmp	r3, #13
 8030842:	d9c1      	bls.n	80307c8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 8030844:	e7ff      	b.n	8030846 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8030846:	bf00      	nop
 8030848:	3710      	adds	r7, #16
 803084a:	46bd      	mov	sp, r7
 803084c:	bd80      	pop	{r7, pc}
 803084e:	bf00      	nop
 8030850:	20001620 	.word	0x20001620
 8030854:	20001440 	.word	0x20001440
 8030858:	200014a8 	.word	0x200014a8
 803085c:	4ec4ec4f 	.word	0x4ec4ec4f

08030860 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 8030860:	b580      	push	{r7, lr}
 8030862:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8030864:	4b16      	ldr	r3, [pc, #88]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 8030866:	781b      	ldrb	r3, [r3, #0]
 8030868:	2b00      	cmp	r3, #0
 803086a:	d105      	bne.n	8030878 <TIM2_IRQHandler+0x18>
 803086c:	4b15      	ldr	r3, [pc, #84]	@ (80308c4 <TIM2_IRQHandler+0x64>)
 803086e:	781b      	ldrb	r3, [r3, #0]
 8030870:	3301      	adds	r3, #1
 8030872:	b2da      	uxtb	r2, r3
 8030874:	4b13      	ldr	r3, [pc, #76]	@ (80308c4 <TIM2_IRQHandler+0x64>)
 8030876:	701a      	strb	r2, [r3, #0]
 8030878:	4b11      	ldr	r3, [pc, #68]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 803087a:	781b      	ldrb	r3, [r3, #0]
 803087c:	3301      	adds	r3, #1
 803087e:	b2da      	uxtb	r2, r3
 8030880:	4b0f      	ldr	r3, [pc, #60]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 8030882:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 8030884:	4810      	ldr	r0, [pc, #64]	@ (80308c8 <TIM2_IRQHandler+0x68>)
 8030886:	f7fa fa36 	bl	802acf6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 803088a:	4b0d      	ldr	r3, [pc, #52]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 803088c:	781b      	ldrb	r3, [r3, #0]
 803088e:	2b00      	cmp	r3, #0
 8030890:	d005      	beq.n	803089e <TIM2_IRQHandler+0x3e>
 8030892:	4b0b      	ldr	r3, [pc, #44]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 8030894:	781b      	ldrb	r3, [r3, #0]
 8030896:	3b01      	subs	r3, #1
 8030898:	b2da      	uxtb	r2, r3
 803089a:	4b09      	ldr	r3, [pc, #36]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 803089c:	701a      	strb	r2, [r3, #0]
 803089e:	4b08      	ldr	r3, [pc, #32]	@ (80308c0 <TIM2_IRQHandler+0x60>)
 80308a0:	781b      	ldrb	r3, [r3, #0]
 80308a2:	2b00      	cmp	r3, #0
 80308a4:	d109      	bne.n	80308ba <TIM2_IRQHandler+0x5a>
 80308a6:	4b07      	ldr	r3, [pc, #28]	@ (80308c4 <TIM2_IRQHandler+0x64>)
 80308a8:	781b      	ldrb	r3, [r3, #0]
 80308aa:	2b00      	cmp	r3, #0
 80308ac:	d005      	beq.n	80308ba <TIM2_IRQHandler+0x5a>
 80308ae:	4b05      	ldr	r3, [pc, #20]	@ (80308c4 <TIM2_IRQHandler+0x64>)
 80308b0:	781b      	ldrb	r3, [r3, #0]
 80308b2:	3b01      	subs	r3, #1
 80308b4:	b2da      	uxtb	r2, r3
 80308b6:	4b03      	ldr	r3, [pc, #12]	@ (80308c4 <TIM2_IRQHandler+0x64>)
 80308b8:	701a      	strb	r2, [r3, #0]
}
 80308ba:	bf00      	nop
 80308bc:	bd80      	pop	{r7, pc}
 80308be:	bf00      	nop
 80308c0:	2000b312 	.word	0x2000b312
 80308c4:	2000b311 	.word	0x2000b311
 80308c8:	20007668 	.word	0x20007668

080308cc <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 80308cc:	b580      	push	{r7, lr}
 80308ce:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80308d0:	4b16      	ldr	r3, [pc, #88]	@ (803092c <TIM3_IRQHandler+0x60>)
 80308d2:	781b      	ldrb	r3, [r3, #0]
 80308d4:	2b00      	cmp	r3, #0
 80308d6:	d105      	bne.n	80308e4 <TIM3_IRQHandler+0x18>
 80308d8:	4b15      	ldr	r3, [pc, #84]	@ (8030930 <TIM3_IRQHandler+0x64>)
 80308da:	781b      	ldrb	r3, [r3, #0]
 80308dc:	3301      	adds	r3, #1
 80308de:	b2da      	uxtb	r2, r3
 80308e0:	4b13      	ldr	r3, [pc, #76]	@ (8030930 <TIM3_IRQHandler+0x64>)
 80308e2:	701a      	strb	r2, [r3, #0]
 80308e4:	4b11      	ldr	r3, [pc, #68]	@ (803092c <TIM3_IRQHandler+0x60>)
 80308e6:	781b      	ldrb	r3, [r3, #0]
 80308e8:	3301      	adds	r3, #1
 80308ea:	b2da      	uxtb	r2, r3
 80308ec:	4b0f      	ldr	r3, [pc, #60]	@ (803092c <TIM3_IRQHandler+0x60>)
 80308ee:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 80308f0:	4810      	ldr	r0, [pc, #64]	@ (8030934 <TIM3_IRQHandler+0x68>)
 80308f2:	f7fa fa00 	bl	802acf6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80308f6:	4b0d      	ldr	r3, [pc, #52]	@ (803092c <TIM3_IRQHandler+0x60>)
 80308f8:	781b      	ldrb	r3, [r3, #0]
 80308fa:	2b00      	cmp	r3, #0
 80308fc:	d005      	beq.n	803090a <TIM3_IRQHandler+0x3e>
 80308fe:	4b0b      	ldr	r3, [pc, #44]	@ (803092c <TIM3_IRQHandler+0x60>)
 8030900:	781b      	ldrb	r3, [r3, #0]
 8030902:	3b01      	subs	r3, #1
 8030904:	b2da      	uxtb	r2, r3
 8030906:	4b09      	ldr	r3, [pc, #36]	@ (803092c <TIM3_IRQHandler+0x60>)
 8030908:	701a      	strb	r2, [r3, #0]
 803090a:	4b08      	ldr	r3, [pc, #32]	@ (803092c <TIM3_IRQHandler+0x60>)
 803090c:	781b      	ldrb	r3, [r3, #0]
 803090e:	2b00      	cmp	r3, #0
 8030910:	d109      	bne.n	8030926 <TIM3_IRQHandler+0x5a>
 8030912:	4b07      	ldr	r3, [pc, #28]	@ (8030930 <TIM3_IRQHandler+0x64>)
 8030914:	781b      	ldrb	r3, [r3, #0]
 8030916:	2b00      	cmp	r3, #0
 8030918:	d005      	beq.n	8030926 <TIM3_IRQHandler+0x5a>
 803091a:	4b05      	ldr	r3, [pc, #20]	@ (8030930 <TIM3_IRQHandler+0x64>)
 803091c:	781b      	ldrb	r3, [r3, #0]
 803091e:	3b01      	subs	r3, #1
 8030920:	b2da      	uxtb	r2, r3
 8030922:	4b03      	ldr	r3, [pc, #12]	@ (8030930 <TIM3_IRQHandler+0x64>)
 8030924:	701a      	strb	r2, [r3, #0]
}
 8030926:	bf00      	nop
 8030928:	bd80      	pop	{r7, pc}
 803092a:	bf00      	nop
 803092c:	2000b312 	.word	0x2000b312
 8030930:	2000b311 	.word	0x2000b311
 8030934:	200076b0 	.word	0x200076b0

08030938 <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 8030938:	b580      	push	{r7, lr}
 803093a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 803093c:	4b16      	ldr	r3, [pc, #88]	@ (8030998 <TIM4_IRQHandler+0x60>)
 803093e:	781b      	ldrb	r3, [r3, #0]
 8030940:	2b00      	cmp	r3, #0
 8030942:	d105      	bne.n	8030950 <TIM4_IRQHandler+0x18>
 8030944:	4b15      	ldr	r3, [pc, #84]	@ (803099c <TIM4_IRQHandler+0x64>)
 8030946:	781b      	ldrb	r3, [r3, #0]
 8030948:	3301      	adds	r3, #1
 803094a:	b2da      	uxtb	r2, r3
 803094c:	4b13      	ldr	r3, [pc, #76]	@ (803099c <TIM4_IRQHandler+0x64>)
 803094e:	701a      	strb	r2, [r3, #0]
 8030950:	4b11      	ldr	r3, [pc, #68]	@ (8030998 <TIM4_IRQHandler+0x60>)
 8030952:	781b      	ldrb	r3, [r3, #0]
 8030954:	3301      	adds	r3, #1
 8030956:	b2da      	uxtb	r2, r3
 8030958:	4b0f      	ldr	r3, [pc, #60]	@ (8030998 <TIM4_IRQHandler+0x60>)
 803095a:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 803095c:	4810      	ldr	r0, [pc, #64]	@ (80309a0 <TIM4_IRQHandler+0x68>)
 803095e:	f7fa f9ca 	bl	802acf6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8030962:	4b0d      	ldr	r3, [pc, #52]	@ (8030998 <TIM4_IRQHandler+0x60>)
 8030964:	781b      	ldrb	r3, [r3, #0]
 8030966:	2b00      	cmp	r3, #0
 8030968:	d005      	beq.n	8030976 <TIM4_IRQHandler+0x3e>
 803096a:	4b0b      	ldr	r3, [pc, #44]	@ (8030998 <TIM4_IRQHandler+0x60>)
 803096c:	781b      	ldrb	r3, [r3, #0]
 803096e:	3b01      	subs	r3, #1
 8030970:	b2da      	uxtb	r2, r3
 8030972:	4b09      	ldr	r3, [pc, #36]	@ (8030998 <TIM4_IRQHandler+0x60>)
 8030974:	701a      	strb	r2, [r3, #0]
 8030976:	4b08      	ldr	r3, [pc, #32]	@ (8030998 <TIM4_IRQHandler+0x60>)
 8030978:	781b      	ldrb	r3, [r3, #0]
 803097a:	2b00      	cmp	r3, #0
 803097c:	d109      	bne.n	8030992 <TIM4_IRQHandler+0x5a>
 803097e:	4b07      	ldr	r3, [pc, #28]	@ (803099c <TIM4_IRQHandler+0x64>)
 8030980:	781b      	ldrb	r3, [r3, #0]
 8030982:	2b00      	cmp	r3, #0
 8030984:	d005      	beq.n	8030992 <TIM4_IRQHandler+0x5a>
 8030986:	4b05      	ldr	r3, [pc, #20]	@ (803099c <TIM4_IRQHandler+0x64>)
 8030988:	781b      	ldrb	r3, [r3, #0]
 803098a:	3b01      	subs	r3, #1
 803098c:	b2da      	uxtb	r2, r3
 803098e:	4b03      	ldr	r3, [pc, #12]	@ (803099c <TIM4_IRQHandler+0x64>)
 8030990:	701a      	strb	r2, [r3, #0]
}
 8030992:	bf00      	nop
 8030994:	bd80      	pop	{r7, pc}
 8030996:	bf00      	nop
 8030998:	2000b312 	.word	0x2000b312
 803099c:	2000b311 	.word	0x2000b311
 80309a0:	200076f8 	.word	0x200076f8

080309a4 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 80309a4:	b580      	push	{r7, lr}
 80309a6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80309a8:	4b16      	ldr	r3, [pc, #88]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309aa:	781b      	ldrb	r3, [r3, #0]
 80309ac:	2b00      	cmp	r3, #0
 80309ae:	d105      	bne.n	80309bc <TIM5_IRQHandler+0x18>
 80309b0:	4b15      	ldr	r3, [pc, #84]	@ (8030a08 <TIM5_IRQHandler+0x64>)
 80309b2:	781b      	ldrb	r3, [r3, #0]
 80309b4:	3301      	adds	r3, #1
 80309b6:	b2da      	uxtb	r2, r3
 80309b8:	4b13      	ldr	r3, [pc, #76]	@ (8030a08 <TIM5_IRQHandler+0x64>)
 80309ba:	701a      	strb	r2, [r3, #0]
 80309bc:	4b11      	ldr	r3, [pc, #68]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309be:	781b      	ldrb	r3, [r3, #0]
 80309c0:	3301      	adds	r3, #1
 80309c2:	b2da      	uxtb	r2, r3
 80309c4:	4b0f      	ldr	r3, [pc, #60]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309c6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 80309c8:	4810      	ldr	r0, [pc, #64]	@ (8030a0c <TIM5_IRQHandler+0x68>)
 80309ca:	f7fa f994 	bl	802acf6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80309ce:	4b0d      	ldr	r3, [pc, #52]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309d0:	781b      	ldrb	r3, [r3, #0]
 80309d2:	2b00      	cmp	r3, #0
 80309d4:	d005      	beq.n	80309e2 <TIM5_IRQHandler+0x3e>
 80309d6:	4b0b      	ldr	r3, [pc, #44]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309d8:	781b      	ldrb	r3, [r3, #0]
 80309da:	3b01      	subs	r3, #1
 80309dc:	b2da      	uxtb	r2, r3
 80309de:	4b09      	ldr	r3, [pc, #36]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309e0:	701a      	strb	r2, [r3, #0]
 80309e2:	4b08      	ldr	r3, [pc, #32]	@ (8030a04 <TIM5_IRQHandler+0x60>)
 80309e4:	781b      	ldrb	r3, [r3, #0]
 80309e6:	2b00      	cmp	r3, #0
 80309e8:	d109      	bne.n	80309fe <TIM5_IRQHandler+0x5a>
 80309ea:	4b07      	ldr	r3, [pc, #28]	@ (8030a08 <TIM5_IRQHandler+0x64>)
 80309ec:	781b      	ldrb	r3, [r3, #0]
 80309ee:	2b00      	cmp	r3, #0
 80309f0:	d005      	beq.n	80309fe <TIM5_IRQHandler+0x5a>
 80309f2:	4b05      	ldr	r3, [pc, #20]	@ (8030a08 <TIM5_IRQHandler+0x64>)
 80309f4:	781b      	ldrb	r3, [r3, #0]
 80309f6:	3b01      	subs	r3, #1
 80309f8:	b2da      	uxtb	r2, r3
 80309fa:	4b03      	ldr	r3, [pc, #12]	@ (8030a08 <TIM5_IRQHandler+0x64>)
 80309fc:	701a      	strb	r2, [r3, #0]
}
 80309fe:	bf00      	nop
 8030a00:	bd80      	pop	{r7, pc}
 8030a02:	bf00      	nop
 8030a04:	2000b312 	.word	0x2000b312
 8030a08:	2000b311 	.word	0x2000b311
 8030a0c:	20007740 	.word	0x20007740

08030a10 <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 8030a10:	b580      	push	{r7, lr}
 8030a12:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8030a14:	4b16      	ldr	r3, [pc, #88]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a16:	781b      	ldrb	r3, [r3, #0]
 8030a18:	2b00      	cmp	r3, #0
 8030a1a:	d105      	bne.n	8030a28 <TIM7_IRQHandler+0x18>
 8030a1c:	4b15      	ldr	r3, [pc, #84]	@ (8030a74 <TIM7_IRQHandler+0x64>)
 8030a1e:	781b      	ldrb	r3, [r3, #0]
 8030a20:	3301      	adds	r3, #1
 8030a22:	b2da      	uxtb	r2, r3
 8030a24:	4b13      	ldr	r3, [pc, #76]	@ (8030a74 <TIM7_IRQHandler+0x64>)
 8030a26:	701a      	strb	r2, [r3, #0]
 8030a28:	4b11      	ldr	r3, [pc, #68]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a2a:	781b      	ldrb	r3, [r3, #0]
 8030a2c:	3301      	adds	r3, #1
 8030a2e:	b2da      	uxtb	r2, r3
 8030a30:	4b0f      	ldr	r3, [pc, #60]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a32:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 8030a34:	4810      	ldr	r0, [pc, #64]	@ (8030a78 <TIM7_IRQHandler+0x68>)
 8030a36:	f7fa f95e 	bl	802acf6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8030a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a3c:	781b      	ldrb	r3, [r3, #0]
 8030a3e:	2b00      	cmp	r3, #0
 8030a40:	d005      	beq.n	8030a4e <TIM7_IRQHandler+0x3e>
 8030a42:	4b0b      	ldr	r3, [pc, #44]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a44:	781b      	ldrb	r3, [r3, #0]
 8030a46:	3b01      	subs	r3, #1
 8030a48:	b2da      	uxtb	r2, r3
 8030a4a:	4b09      	ldr	r3, [pc, #36]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a4c:	701a      	strb	r2, [r3, #0]
 8030a4e:	4b08      	ldr	r3, [pc, #32]	@ (8030a70 <TIM7_IRQHandler+0x60>)
 8030a50:	781b      	ldrb	r3, [r3, #0]
 8030a52:	2b00      	cmp	r3, #0
 8030a54:	d109      	bne.n	8030a6a <TIM7_IRQHandler+0x5a>
 8030a56:	4b07      	ldr	r3, [pc, #28]	@ (8030a74 <TIM7_IRQHandler+0x64>)
 8030a58:	781b      	ldrb	r3, [r3, #0]
 8030a5a:	2b00      	cmp	r3, #0
 8030a5c:	d005      	beq.n	8030a6a <TIM7_IRQHandler+0x5a>
 8030a5e:	4b05      	ldr	r3, [pc, #20]	@ (8030a74 <TIM7_IRQHandler+0x64>)
 8030a60:	781b      	ldrb	r3, [r3, #0]
 8030a62:	3b01      	subs	r3, #1
 8030a64:	b2da      	uxtb	r2, r3
 8030a66:	4b03      	ldr	r3, [pc, #12]	@ (8030a74 <TIM7_IRQHandler+0x64>)
 8030a68:	701a      	strb	r2, [r3, #0]
}
 8030a6a:	bf00      	nop
 8030a6c:	bd80      	pop	{r7, pc}
 8030a6e:	bf00      	nop
 8030a70:	2000b312 	.word	0x2000b312
 8030a74:	2000b311 	.word	0x2000b311
 8030a78:	200077d0 	.word	0x200077d0

08030a7c <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 8030a7c:	b580      	push	{r7, lr}
 8030a7e:	b084      	sub	sp, #16
 8030a80:	af00      	add	r7, sp, #0
 8030a82:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8030a84:	23ae      	movs	r3, #174	@ 0xae
 8030a86:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8030a88:	2300      	movs	r3, #0
 8030a8a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8030a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8030ab8 <drv_traceTransmitUnsafe+0x3c>)
 8030a8e:	789b      	ldrb	r3, [r3, #2]
 8030a90:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 8030a92:	6878      	ldr	r0, [r7, #4]
 8030a94:	f7ef fc1c 	bl	80202d0 <strlen>
 8030a98:	4603      	mov	r3, r0
 8030a9a:	b29a      	uxth	r2, r3
 8030a9c:	4b07      	ldr	r3, [pc, #28]	@ (8030abc <drv_traceTransmitUnsafe+0x40>)
 8030a9e:	689b      	ldr	r3, [r3, #8]
 8030aa0:	7bb8      	ldrb	r0, [r7, #14]
 8030aa2:	6879      	ldr	r1, [r7, #4]
 8030aa4:	f000 f982 	bl	8030dac <drv_uartTransmitBlocking>
 8030aa8:	4603      	mov	r3, r0
 8030aaa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8030aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8030aae:	4618      	mov	r0, r3
 8030ab0:	3710      	adds	r7, #16
 8030ab2:	46bd      	mov	sp, r7
 8030ab4:	bd80      	pop	{r7, pc}
 8030ab6:	bf00      	nop
 8030ab8:	08040038 	.word	0x08040038
 8030abc:	200014ac 	.word	0x200014ac

08030ac0 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 8030ac0:	b580      	push	{r7, lr}
 8030ac2:	b086      	sub	sp, #24
 8030ac4:	af02      	add	r7, sp, #8
 8030ac6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8030ac8:	23ae      	movs	r3, #174	@ 0xae
 8030aca:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8030acc:	2300      	movs	r3, #0
 8030ace:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8030ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8030b04 <drv_traceTransmit+0x44>)
 8030ad2:	789b      	ldrb	r3, [r3, #2]
 8030ad4:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 8030ad6:	6878      	ldr	r0, [r7, #4]
 8030ad8:	f7ef fbfa 	bl	80202d0 <strlen>
 8030adc:	4603      	mov	r3, r0
 8030ade:	b29a      	uxth	r2, r3
 8030ae0:	4b09      	ldr	r3, [pc, #36]	@ (8030b08 <drv_traceTransmit+0x48>)
 8030ae2:	6819      	ldr	r1, [r3, #0]
 8030ae4:	4b08      	ldr	r3, [pc, #32]	@ (8030b08 <drv_traceTransmit+0x48>)
 8030ae6:	685b      	ldr	r3, [r3, #4]
 8030ae8:	7bb8      	ldrb	r0, [r7, #14]
 8030aea:	9300      	str	r3, [sp, #0]
 8030aec:	460b      	mov	r3, r1
 8030aee:	6879      	ldr	r1, [r7, #4]
 8030af0:	f000 f9f4 	bl	8030edc <drv_uartTransmitDMA>
 8030af4:	4603      	mov	r3, r0
 8030af6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8030af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8030afa:	4618      	mov	r0, r3
 8030afc:	3710      	adds	r7, #16
 8030afe:	46bd      	mov	sp, r7
 8030b00:	bd80      	pop	{r7, pc}
 8030b02:	bf00      	nop
 8030b04:	08040038 	.word	0x08040038
 8030b08:	200014ac 	.word	0x200014ac

08030b0c <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 8030b0c:	b580      	push	{r7, lr}
 8030b0e:	b082      	sub	sp, #8
 8030b10:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 8030b12:	2355      	movs	r3, #85	@ 0x55
 8030b14:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 8030b16:	2300      	movs	r3, #0
 8030b18:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8030b1a:	2300      	movs	r3, #0
 8030b1c:	71bb      	strb	r3, [r7, #6]
 8030b1e:	e00e      	b.n	8030b3e <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 8030b20:	79fb      	ldrb	r3, [r7, #7]
 8030b22:	2b55      	cmp	r3, #85	@ 0x55
 8030b24:	d106      	bne.n	8030b34 <drv_uartInit+0x28>
 8030b26:	79bb      	ldrb	r3, [r7, #6]
 8030b28:	4618      	mov	r0, r3
 8030b2a:	f000 f81b 	bl	8030b64 <drv_uartInitInstance>
 8030b2e:	4603      	mov	r3, r0
 8030b30:	71fb      	strb	r3, [r7, #7]
 8030b32:	e001      	b.n	8030b38 <drv_uartInit+0x2c>
 8030b34:	23ae      	movs	r3, #174	@ 0xae
 8030b36:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8030b38:	79bb      	ldrb	r3, [r7, #6]
 8030b3a:	3301      	adds	r3, #1
 8030b3c:	71bb      	strb	r3, [r7, #6]
 8030b3e:	79ba      	ldrb	r2, [r7, #6]
 8030b40:	4b06      	ldr	r3, [pc, #24]	@ (8030b5c <drv_uartInit+0x50>)
 8030b42:	681b      	ldr	r3, [r3, #0]
 8030b44:	4906      	ldr	r1, [pc, #24]	@ (8030b60 <drv_uartInit+0x54>)
 8030b46:	fba1 1303 	umull	r1, r3, r1, r3
 8030b4a:	095b      	lsrs	r3, r3, #5
 8030b4c:	429a      	cmp	r2, r3
 8030b4e:	d3e7      	bcc.n	8030b20 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 8030b50:	79fb      	ldrb	r3, [r7, #7]
}
 8030b52:	4618      	mov	r0, r3
 8030b54:	3708      	adds	r7, #8
 8030b56:	46bd      	mov	sp, r7
 8030b58:	bd80      	pop	{r7, pc}
 8030b5a:	bf00      	nop
 8030b5c:	200014d8 	.word	0x200014d8
 8030b60:	cccccccd 	.word	0xcccccccd

08030b64 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 8030b64:	b580      	push	{r7, lr}
 8030b66:	b084      	sub	sp, #16
 8030b68:	af00      	add	r7, sp, #0
 8030b6a:	4603      	mov	r3, r0
 8030b6c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 8030b6e:	23ae      	movs	r3, #174	@ 0xae
 8030b70:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 8030b72:	2300      	movs	r3, #0
 8030b74:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 8030b76:	79fa      	ldrb	r2, [r7, #7]
 8030b78:	4b82      	ldr	r3, [pc, #520]	@ (8030d84 <drv_uartInitInstance+0x220>)
 8030b7a:	681b      	ldr	r3, [r3, #0]
 8030b7c:	4982      	ldr	r1, [pc, #520]	@ (8030d88 <drv_uartInitInstance+0x224>)
 8030b7e:	fba1 1303 	umull	r1, r3, r1, r3
 8030b82:	095b      	lsrs	r3, r3, #5
 8030b84:	429a      	cmp	r2, r3
 8030b86:	f080 80f2 	bcs.w	8030d6e <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 8030b8a:	79fa      	ldrb	r2, [r7, #7]
 8030b8c:	497f      	ldr	r1, [pc, #508]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030b8e:	4613      	mov	r3, r2
 8030b90:	009b      	lsls	r3, r3, #2
 8030b92:	4413      	add	r3, r2
 8030b94:	00db      	lsls	r3, r3, #3
 8030b96:	440b      	add	r3, r1
 8030b98:	781b      	ldrb	r3, [r3, #0]
 8030b9a:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 8030b9c:	7bbb      	ldrb	r3, [r7, #14]
 8030b9e:	7bba      	ldrb	r2, [r7, #14]
 8030ba0:	497b      	ldr	r1, [pc, #492]	@ (8030d90 <drv_uartInitInstance+0x22c>)
 8030ba2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8030ba6:	487b      	ldr	r0, [pc, #492]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030ba8:	4613      	mov	r3, r2
 8030baa:	011b      	lsls	r3, r3, #4
 8030bac:	4413      	add	r3, r2
 8030bae:	009b      	lsls	r3, r3, #2
 8030bb0:	4403      	add	r3, r0
 8030bb2:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 8030bb4:	79f9      	ldrb	r1, [r7, #7]
 8030bb6:	7bba      	ldrb	r2, [r7, #14]
 8030bb8:	4874      	ldr	r0, [pc, #464]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030bba:	460b      	mov	r3, r1
 8030bbc:	009b      	lsls	r3, r3, #2
 8030bbe:	440b      	add	r3, r1
 8030bc0:	00db      	lsls	r3, r3, #3
 8030bc2:	4403      	add	r3, r0
 8030bc4:	3304      	adds	r3, #4
 8030bc6:	6819      	ldr	r1, [r3, #0]
 8030bc8:	4872      	ldr	r0, [pc, #456]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030bca:	4613      	mov	r3, r2
 8030bcc:	011b      	lsls	r3, r3, #4
 8030bce:	4413      	add	r3, r2
 8030bd0:	009b      	lsls	r3, r3, #2
 8030bd2:	4403      	add	r3, r0
 8030bd4:	3304      	adds	r3, #4
 8030bd6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 8030bd8:	79f9      	ldrb	r1, [r7, #7]
 8030bda:	7bba      	ldrb	r2, [r7, #14]
 8030bdc:	486b      	ldr	r0, [pc, #428]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030bde:	460b      	mov	r3, r1
 8030be0:	009b      	lsls	r3, r3, #2
 8030be2:	440b      	add	r3, r1
 8030be4:	00db      	lsls	r3, r3, #3
 8030be6:	4403      	add	r3, r0
 8030be8:	3308      	adds	r3, #8
 8030bea:	6819      	ldr	r1, [r3, #0]
 8030bec:	4869      	ldr	r0, [pc, #420]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030bee:	4613      	mov	r3, r2
 8030bf0:	011b      	lsls	r3, r3, #4
 8030bf2:	4413      	add	r3, r2
 8030bf4:	009b      	lsls	r3, r3, #2
 8030bf6:	4403      	add	r3, r0
 8030bf8:	3308      	adds	r3, #8
 8030bfa:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 8030bfc:	79f9      	ldrb	r1, [r7, #7]
 8030bfe:	7bba      	ldrb	r2, [r7, #14]
 8030c00:	4862      	ldr	r0, [pc, #392]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030c02:	460b      	mov	r3, r1
 8030c04:	009b      	lsls	r3, r3, #2
 8030c06:	440b      	add	r3, r1
 8030c08:	00db      	lsls	r3, r3, #3
 8030c0a:	4403      	add	r3, r0
 8030c0c:	330c      	adds	r3, #12
 8030c0e:	6819      	ldr	r1, [r3, #0]
 8030c10:	4860      	ldr	r0, [pc, #384]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030c12:	4613      	mov	r3, r2
 8030c14:	011b      	lsls	r3, r3, #4
 8030c16:	4413      	add	r3, r2
 8030c18:	009b      	lsls	r3, r3, #2
 8030c1a:	4403      	add	r3, r0
 8030c1c:	330c      	adds	r3, #12
 8030c1e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 8030c20:	79f9      	ldrb	r1, [r7, #7]
 8030c22:	7bba      	ldrb	r2, [r7, #14]
 8030c24:	4859      	ldr	r0, [pc, #356]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030c26:	460b      	mov	r3, r1
 8030c28:	009b      	lsls	r3, r3, #2
 8030c2a:	440b      	add	r3, r1
 8030c2c:	00db      	lsls	r3, r3, #3
 8030c2e:	4403      	add	r3, r0
 8030c30:	3310      	adds	r3, #16
 8030c32:	6819      	ldr	r1, [r3, #0]
 8030c34:	4857      	ldr	r0, [pc, #348]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030c36:	4613      	mov	r3, r2
 8030c38:	011b      	lsls	r3, r3, #4
 8030c3a:	4413      	add	r3, r2
 8030c3c:	009b      	lsls	r3, r3, #2
 8030c3e:	4403      	add	r3, r0
 8030c40:	3310      	adds	r3, #16
 8030c42:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 8030c44:	79f9      	ldrb	r1, [r7, #7]
 8030c46:	7bba      	ldrb	r2, [r7, #14]
 8030c48:	4850      	ldr	r0, [pc, #320]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030c4a:	460b      	mov	r3, r1
 8030c4c:	009b      	lsls	r3, r3, #2
 8030c4e:	440b      	add	r3, r1
 8030c50:	00db      	lsls	r3, r3, #3
 8030c52:	4403      	add	r3, r0
 8030c54:	3314      	adds	r3, #20
 8030c56:	6819      	ldr	r1, [r3, #0]
 8030c58:	484e      	ldr	r0, [pc, #312]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030c5a:	4613      	mov	r3, r2
 8030c5c:	011b      	lsls	r3, r3, #4
 8030c5e:	4413      	add	r3, r2
 8030c60:	009b      	lsls	r3, r3, #2
 8030c62:	4403      	add	r3, r0
 8030c64:	3314      	adds	r3, #20
 8030c66:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 8030c68:	79f9      	ldrb	r1, [r7, #7]
 8030c6a:	7bba      	ldrb	r2, [r7, #14]
 8030c6c:	4847      	ldr	r0, [pc, #284]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030c6e:	460b      	mov	r3, r1
 8030c70:	009b      	lsls	r3, r3, #2
 8030c72:	440b      	add	r3, r1
 8030c74:	00db      	lsls	r3, r3, #3
 8030c76:	4403      	add	r3, r0
 8030c78:	3318      	adds	r3, #24
 8030c7a:	6819      	ldr	r1, [r3, #0]
 8030c7c:	4845      	ldr	r0, [pc, #276]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030c7e:	4613      	mov	r3, r2
 8030c80:	011b      	lsls	r3, r3, #4
 8030c82:	4413      	add	r3, r2
 8030c84:	009b      	lsls	r3, r3, #2
 8030c86:	4403      	add	r3, r0
 8030c88:	3318      	adds	r3, #24
 8030c8a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 8030c8c:	79f9      	ldrb	r1, [r7, #7]
 8030c8e:	7bba      	ldrb	r2, [r7, #14]
 8030c90:	483e      	ldr	r0, [pc, #248]	@ (8030d8c <drv_uartInitInstance+0x228>)
 8030c92:	460b      	mov	r3, r1
 8030c94:	009b      	lsls	r3, r3, #2
 8030c96:	440b      	add	r3, r1
 8030c98:	00db      	lsls	r3, r3, #3
 8030c9a:	4403      	add	r3, r0
 8030c9c:	331c      	adds	r3, #28
 8030c9e:	6819      	ldr	r1, [r3, #0]
 8030ca0:	483c      	ldr	r0, [pc, #240]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030ca2:	4613      	mov	r3, r2
 8030ca4:	011b      	lsls	r3, r3, #4
 8030ca6:	4413      	add	r3, r2
 8030ca8:	009b      	lsls	r3, r3, #2
 8030caa:	4403      	add	r3, r0
 8030cac:	331c      	adds	r3, #28
 8030cae:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8030cb0:	7bba      	ldrb	r2, [r7, #14]
 8030cb2:	4613      	mov	r3, r2
 8030cb4:	011b      	lsls	r3, r3, #4
 8030cb6:	4413      	add	r3, r2
 8030cb8:	009b      	lsls	r3, r3, #2
 8030cba:	4a36      	ldr	r2, [pc, #216]	@ (8030d94 <drv_uartInitInstance+0x230>)
 8030cbc:	4413      	add	r3, r2
 8030cbe:	4618      	mov	r0, r3
 8030cc0:	f7fa fbd8 	bl	802b474 <HAL_UART_Init>
 8030cc4:	4603      	mov	r3, r0
 8030cc6:	2b00      	cmp	r3, #0
 8030cc8:	d14a      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8030cca:	7bbb      	ldrb	r3, [r7, #14]
 8030ccc:	009b      	lsls	r3, r3, #2
 8030cce:	4a32      	ldr	r2, [pc, #200]	@ (8030d98 <drv_uartInitInstance+0x234>)
 8030cd0:	4413      	add	r3, r2
 8030cd2:	4618      	mov	r0, r3
 8030cd4:	f007 fca2 	bl	803861c <gos_mutexInit>
 8030cd8:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8030cda:	2b55      	cmp	r3, #85	@ 0x55
 8030cdc:	d140      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8030cde:	7bbb      	ldrb	r3, [r7, #14]
 8030ce0:	009b      	lsls	r3, r3, #2
 8030ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8030d9c <drv_uartInitInstance+0x238>)
 8030ce4:	4413      	add	r3, r2
 8030ce6:	4618      	mov	r0, r3
 8030ce8:	f007 fc98 	bl	803861c <gos_mutexInit>
 8030cec:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8030cee:	2b55      	cmp	r3, #85	@ 0x55
 8030cf0:	d136      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8030cf2:	7bba      	ldrb	r2, [r7, #14]
 8030cf4:	4613      	mov	r3, r2
 8030cf6:	005b      	lsls	r3, r3, #1
 8030cf8:	4413      	add	r3, r2
 8030cfa:	009b      	lsls	r3, r3, #2
 8030cfc:	4a28      	ldr	r2, [pc, #160]	@ (8030da0 <drv_uartInitInstance+0x23c>)
 8030cfe:	4413      	add	r3, r2
 8030d00:	4618      	mov	r0, r3
 8030d02:	f00a f941 	bl	803af88 <gos_triggerInit>
 8030d06:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8030d08:	2b55      	cmp	r3, #85	@ 0x55
 8030d0a:	d129      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8030d0c:	7bba      	ldrb	r2, [r7, #14]
 8030d0e:	4613      	mov	r3, r2
 8030d10:	005b      	lsls	r3, r3, #1
 8030d12:	4413      	add	r3, r2
 8030d14:	009b      	lsls	r3, r3, #2
 8030d16:	4a23      	ldr	r2, [pc, #140]	@ (8030da4 <drv_uartInitInstance+0x240>)
 8030d18:	4413      	add	r3, r2
 8030d1a:	4618      	mov	r0, r3
 8030d1c:	f00a f934 	bl	803af88 <gos_triggerInit>
 8030d20:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8030d22:	2b55      	cmp	r3, #85	@ 0x55
 8030d24:	d11c      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8030d26:	7bba      	ldrb	r2, [r7, #14]
 8030d28:	4613      	mov	r3, r2
 8030d2a:	005b      	lsls	r3, r3, #1
 8030d2c:	4413      	add	r3, r2
 8030d2e:	009b      	lsls	r3, r3, #2
 8030d30:	4a1b      	ldr	r2, [pc, #108]	@ (8030da0 <drv_uartInitInstance+0x23c>)
 8030d32:	4413      	add	r3, r2
 8030d34:	4618      	mov	r0, r3
 8030d36:	f00a f943 	bl	803afc0 <gos_triggerReset>
 8030d3a:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8030d3c:	2b55      	cmp	r3, #85	@ 0x55
 8030d3e:	d10f      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 8030d40:	7bba      	ldrb	r2, [r7, #14]
 8030d42:	4613      	mov	r3, r2
 8030d44:	005b      	lsls	r3, r3, #1
 8030d46:	4413      	add	r3, r2
 8030d48:	009b      	lsls	r3, r3, #2
 8030d4a:	4a16      	ldr	r2, [pc, #88]	@ (8030da4 <drv_uartInitInstance+0x240>)
 8030d4c:	4413      	add	r3, r2
 8030d4e:	4618      	mov	r0, r3
 8030d50:	f00a f936 	bl	803afc0 <gos_triggerReset>
 8030d54:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8030d56:	2b55      	cmp	r3, #85	@ 0x55
 8030d58:	d102      	bne.n	8030d60 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 8030d5a:	2355      	movs	r3, #85	@ 0x55
 8030d5c:	73fb      	strb	r3, [r7, #15]
 8030d5e:	e00c      	b.n	8030d7a <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 8030d60:	4b11      	ldr	r3, [pc, #68]	@ (8030da8 <drv_uartInitInstance+0x244>)
 8030d62:	681b      	ldr	r3, [r3, #0]
 8030d64:	f043 0304 	orr.w	r3, r3, #4
 8030d68:	4a0f      	ldr	r2, [pc, #60]	@ (8030da8 <drv_uartInitInstance+0x244>)
 8030d6a:	6013      	str	r3, [r2, #0]
 8030d6c:	e005      	b.n	8030d7a <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 8030d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8030da8 <drv_uartInitInstance+0x244>)
 8030d70:	681b      	ldr	r3, [r3, #0]
 8030d72:	f043 0302 	orr.w	r3, r3, #2
 8030d76:	4a0c      	ldr	r2, [pc, #48]	@ (8030da8 <drv_uartInitInstance+0x244>)
 8030d78:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 8030d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8030d7c:	4618      	mov	r0, r3
 8030d7e:	3710      	adds	r7, #16
 8030d80:	46bd      	mov	sp, r7
 8030d82:	bd80      	pop	{r7, pc}
 8030d84:	200014d8 	.word	0x200014d8
 8030d88:	cccccccd 	.word	0xcccccccd
 8030d8c:	0803ffc0 	.word	0x0803ffc0
 8030d90:	20001658 	.word	0x20001658
 8030d94:	20007af4 	.word	0x20007af4
 8030d98:	20007c8c 	.word	0x20007c8c
 8030d9c:	20007ca4 	.word	0x20007ca4
 8030da0:	20007cbc 	.word	0x20007cbc
 8030da4:	20007d04 	.word	0x20007d04
 8030da8:	20007af0 	.word	0x20007af0

08030dac <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 8030dac:	b580      	push	{r7, lr}
 8030dae:	b086      	sub	sp, #24
 8030db0:	af00      	add	r7, sp, #0
 8030db2:	60b9      	str	r1, [r7, #8]
 8030db4:	607b      	str	r3, [r7, #4]
 8030db6:	4603      	mov	r3, r0
 8030db8:	73fb      	strb	r3, [r7, #15]
 8030dba:	4613      	mov	r3, r2
 8030dbc:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8030dbe:	23ae      	movs	r3, #174	@ 0xae
 8030dc0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8030dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8030e38 <drv_uartTransmitBlocking+0x8c>)
 8030dc4:	781b      	ldrb	r3, [r3, #0]
 8030dc6:	3301      	adds	r3, #1
 8030dc8:	b2da      	uxtb	r2, r3
 8030dca:	4b1b      	ldr	r3, [pc, #108]	@ (8030e38 <drv_uartTransmitBlocking+0x8c>)
 8030dcc:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8030dce:	7bfa      	ldrb	r2, [r7, #15]
 8030dd0:	4613      	mov	r3, r2
 8030dd2:	011b      	lsls	r3, r3, #4
 8030dd4:	4413      	add	r3, r2
 8030dd6:	009b      	lsls	r3, r3, #2
 8030dd8:	4a18      	ldr	r2, [pc, #96]	@ (8030e3c <drv_uartTransmitBlocking+0x90>)
 8030dda:	4413      	add	r3, r2
 8030ddc:	4618      	mov	r0, r3
 8030dde:	f7fa fded 	bl	802b9bc <HAL_UART_Abort>
 8030de2:	4603      	mov	r3, r0
 8030de4:	2b00      	cmp	r3, #0
 8030de6:	d111      	bne.n	8030e0c <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 8030de8:	7bfa      	ldrb	r2, [r7, #15]
 8030dea:	4613      	mov	r3, r2
 8030dec:	011b      	lsls	r3, r3, #4
 8030dee:	4413      	add	r3, r2
 8030df0:	009b      	lsls	r3, r3, #2
 8030df2:	4a12      	ldr	r2, [pc, #72]	@ (8030e3c <drv_uartTransmitBlocking+0x90>)
 8030df4:	1898      	adds	r0, r3, r2
 8030df6:	89ba      	ldrh	r2, [r7, #12]
 8030df8:	687b      	ldr	r3, [r7, #4]
 8030dfa:	68b9      	ldr	r1, [r7, #8]
 8030dfc:	f7fa fb87 	bl	802b50e <HAL_UART_Transmit>
 8030e00:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8030e02:	2b00      	cmp	r3, #0
 8030e04:	d102      	bne.n	8030e0c <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 8030e06:	2355      	movs	r3, #85	@ 0x55
 8030e08:	75fb      	strb	r3, [r7, #23]
 8030e0a:	e005      	b.n	8030e18 <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 8030e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8030e40 <drv_uartTransmitBlocking+0x94>)
 8030e0e:	681b      	ldr	r3, [r3, #0]
 8030e10:	f043 0310 	orr.w	r3, r3, #16
 8030e14:	4a0a      	ldr	r2, [pc, #40]	@ (8030e40 <drv_uartTransmitBlocking+0x94>)
 8030e16:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 8030e18:	4b07      	ldr	r3, [pc, #28]	@ (8030e38 <drv_uartTransmitBlocking+0x8c>)
 8030e1a:	781b      	ldrb	r3, [r3, #0]
 8030e1c:	2b00      	cmp	r3, #0
 8030e1e:	d005      	beq.n	8030e2c <drv_uartTransmitBlocking+0x80>
 8030e20:	4b05      	ldr	r3, [pc, #20]	@ (8030e38 <drv_uartTransmitBlocking+0x8c>)
 8030e22:	781b      	ldrb	r3, [r3, #0]
 8030e24:	3b01      	subs	r3, #1
 8030e26:	b2da      	uxtb	r2, r3
 8030e28:	4b03      	ldr	r3, [pc, #12]	@ (8030e38 <drv_uartTransmitBlocking+0x8c>)
 8030e2a:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 8030e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8030e2e:	4618      	mov	r0, r3
 8030e30:	3718      	adds	r7, #24
 8030e32:	46bd      	mov	sp, r7
 8030e34:	bd80      	pop	{r7, pc}
 8030e36:	bf00      	nop
 8030e38:	2000b311 	.word	0x2000b311
 8030e3c:	20007af4 	.word	0x20007af4
 8030e40:	20007af0 	.word	0x20007af0

08030e44 <drv_uartReceiveBlocking>:
 */
GOS_INLINE gos_result_t drv_uartReceiveBlocking (
        drv_uartPeriphInstance_t instance, u8_t* pData,
        u16_t                    size,     u32_t timeout
        )
{
 8030e44:	b580      	push	{r7, lr}
 8030e46:	b086      	sub	sp, #24
 8030e48:	af00      	add	r7, sp, #0
 8030e4a:	60b9      	str	r1, [r7, #8]
 8030e4c:	607b      	str	r3, [r7, #4]
 8030e4e:	4603      	mov	r3, r0
 8030e50:	73fb      	strb	r3, [r7, #15]
 8030e52:	4613      	mov	r3, r2
 8030e54:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 8030e56:	23ae      	movs	r3, #174	@ 0xae
 8030e58:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8030e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8030ed0 <drv_uartReceiveBlocking+0x8c>)
 8030e5c:	781b      	ldrb	r3, [r3, #0]
 8030e5e:	3301      	adds	r3, #1
 8030e60:	b2da      	uxtb	r2, r3
 8030e62:	4b1b      	ldr	r3, [pc, #108]	@ (8030ed0 <drv_uartReceiveBlocking+0x8c>)
 8030e64:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 8030e66:	7bfa      	ldrb	r2, [r7, #15]
 8030e68:	4613      	mov	r3, r2
 8030e6a:	011b      	lsls	r3, r3, #4
 8030e6c:	4413      	add	r3, r2
 8030e6e:	009b      	lsls	r3, r3, #2
 8030e70:	4a18      	ldr	r2, [pc, #96]	@ (8030ed4 <drv_uartReceiveBlocking+0x90>)
 8030e72:	4413      	add	r3, r2
 8030e74:	4618      	mov	r0, r3
 8030e76:	f7fa fda1 	bl	802b9bc <HAL_UART_Abort>
 8030e7a:	4603      	mov	r3, r0
 8030e7c:	2b00      	cmp	r3, #0
 8030e7e:	d111      	bne.n	8030ea4 <drv_uartReceiveBlocking+0x60>
    	HAL_UART_Receive(&huarts[instance], pData, size, timeout) == HAL_OK)
 8030e80:	7bfa      	ldrb	r2, [r7, #15]
 8030e82:	4613      	mov	r3, r2
 8030e84:	011b      	lsls	r3, r3, #4
 8030e86:	4413      	add	r3, r2
 8030e88:	009b      	lsls	r3, r3, #2
 8030e8a:	4a12      	ldr	r2, [pc, #72]	@ (8030ed4 <drv_uartReceiveBlocking+0x90>)
 8030e8c:	1898      	adds	r0, r3, r2
 8030e8e:	89ba      	ldrh	r2, [r7, #12]
 8030e90:	687b      	ldr	r3, [r7, #4]
 8030e92:	68b9      	ldr	r1, [r7, #8]
 8030e94:	f7fa fbcd 	bl	802b632 <HAL_UART_Receive>
 8030e98:	4603      	mov	r3, r0
    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 8030e9a:	2b00      	cmp	r3, #0
 8030e9c:	d102      	bne.n	8030ea4 <drv_uartReceiveBlocking+0x60>
    {
    	uartReceiveResult = GOS_SUCCESS;
 8030e9e:	2355      	movs	r3, #85	@ 0x55
 8030ea0:	75fb      	strb	r3, [r7, #23]
 8030ea2:	e005      	b.n	8030eb0 <drv_uartReceiveBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_BLOCKING);
 8030ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8030ed8 <drv_uartReceiveBlocking+0x94>)
 8030ea6:	681b      	ldr	r3, [r3, #0]
 8030ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8030eac:	4a0a      	ldr	r2, [pc, #40]	@ (8030ed8 <drv_uartReceiveBlocking+0x94>)
 8030eae:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 8030eb0:	4b07      	ldr	r3, [pc, #28]	@ (8030ed0 <drv_uartReceiveBlocking+0x8c>)
 8030eb2:	781b      	ldrb	r3, [r3, #0]
 8030eb4:	2b00      	cmp	r3, #0
 8030eb6:	d005      	beq.n	8030ec4 <drv_uartReceiveBlocking+0x80>
 8030eb8:	4b05      	ldr	r3, [pc, #20]	@ (8030ed0 <drv_uartReceiveBlocking+0x8c>)
 8030eba:	781b      	ldrb	r3, [r3, #0]
 8030ebc:	3b01      	subs	r3, #1
 8030ebe:	b2da      	uxtb	r2, r3
 8030ec0:	4b03      	ldr	r3, [pc, #12]	@ (8030ed0 <drv_uartReceiveBlocking+0x8c>)
 8030ec2:	701a      	strb	r2, [r3, #0]

    return uartReceiveResult;
 8030ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8030ec6:	4618      	mov	r0, r3
 8030ec8:	3718      	adds	r7, #24
 8030eca:	46bd      	mov	sp, r7
 8030ecc:	bd80      	pop	{r7, pc}
 8030ece:	bf00      	nop
 8030ed0:	2000b311 	.word	0x2000b311
 8030ed4:	20007af4 	.word	0x20007af4
 8030ed8:	20007af0 	.word	0x20007af0

08030edc <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8030edc:	b580      	push	{r7, lr}
 8030ede:	b086      	sub	sp, #24
 8030ee0:	af00      	add	r7, sp, #0
 8030ee2:	60b9      	str	r1, [r7, #8]
 8030ee4:	607b      	str	r3, [r7, #4]
 8030ee6:	4603      	mov	r3, r0
 8030ee8:	73fb      	strb	r3, [r7, #15]
 8030eea:	4613      	mov	r3, r2
 8030eec:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8030eee:	23ae      	movs	r3, #174	@ 0xae
 8030ef0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8030ef2:	7bfb      	ldrb	r3, [r7, #15]
 8030ef4:	009b      	lsls	r3, r3, #2
 8030ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8030fac <drv_uartTransmitDMA+0xd0>)
 8030ef8:	4413      	add	r3, r2
 8030efa:	6879      	ldr	r1, [r7, #4]
 8030efc:	4618      	mov	r0, r3
 8030efe:	f007 fba7 	bl	8038650 <gos_mutexLock>
 8030f02:	4603      	mov	r3, r0
 8030f04:	2b55      	cmp	r3, #85	@ 0x55
 8030f06:	d13e      	bne.n	8030f86 <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 8030f08:	7bfa      	ldrb	r2, [r7, #15]
 8030f0a:	4613      	mov	r3, r2
 8030f0c:	011b      	lsls	r3, r3, #4
 8030f0e:	4413      	add	r3, r2
 8030f10:	009b      	lsls	r3, r3, #2
 8030f12:	4a27      	ldr	r2, [pc, #156]	@ (8030fb0 <drv_uartTransmitDMA+0xd4>)
 8030f14:	4413      	add	r3, r2
 8030f16:	89ba      	ldrh	r2, [r7, #12]
 8030f18:	68b9      	ldr	r1, [r7, #8]
 8030f1a:	4618      	mov	r0, r3
 8030f1c:	f7fa fca0 	bl	802b860 <HAL_UART_Transmit_DMA>
 8030f20:	4603      	mov	r3, r0
 8030f22:	2b00      	cmp	r3, #0
 8030f24:	d11e      	bne.n	8030f64 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8030f26:	7bfa      	ldrb	r2, [r7, #15]
 8030f28:	4613      	mov	r3, r2
 8030f2a:	005b      	lsls	r3, r3, #1
 8030f2c:	4413      	add	r3, r2
 8030f2e:	009b      	lsls	r3, r3, #2
 8030f30:	4a20      	ldr	r2, [pc, #128]	@ (8030fb4 <drv_uartTransmitDMA+0xd8>)
 8030f32:	4413      	add	r3, r2
 8030f34:	6a3a      	ldr	r2, [r7, #32]
 8030f36:	2101      	movs	r1, #1
 8030f38:	4618      	mov	r0, r3
 8030f3a:	f00a f899 	bl	803b070 <gos_triggerWait>
 8030f3e:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 8030f40:	2b55      	cmp	r3, #85	@ 0x55
 8030f42:	d10f      	bne.n	8030f64 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8030f44:	7bfa      	ldrb	r2, [r7, #15]
 8030f46:	4613      	mov	r3, r2
 8030f48:	005b      	lsls	r3, r3, #1
 8030f4a:	4413      	add	r3, r2
 8030f4c:	009b      	lsls	r3, r3, #2
 8030f4e:	4a19      	ldr	r2, [pc, #100]	@ (8030fb4 <drv_uartTransmitDMA+0xd8>)
 8030f50:	4413      	add	r3, r2
 8030f52:	4618      	mov	r0, r3
 8030f54:	f00a f834 	bl	803afc0 <gos_triggerReset>
 8030f58:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8030f5a:	2b55      	cmp	r3, #85	@ 0x55
 8030f5c:	d102      	bne.n	8030f64 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8030f5e:	2355      	movs	r3, #85	@ 0x55
 8030f60:	75fb      	strb	r3, [r7, #23]
 8030f62:	e016      	b.n	8030f92 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8030f64:	7bfa      	ldrb	r2, [r7, #15]
 8030f66:	4613      	mov	r3, r2
 8030f68:	011b      	lsls	r3, r3, #4
 8030f6a:	4413      	add	r3, r2
 8030f6c:	009b      	lsls	r3, r3, #2
 8030f6e:	4a10      	ldr	r2, [pc, #64]	@ (8030fb0 <drv_uartTransmitDMA+0xd4>)
 8030f70:	4413      	add	r3, r2
 8030f72:	4618      	mov	r0, r3
 8030f74:	f7fa fe0e 	bl	802bb94 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 8030f78:	4b0f      	ldr	r3, [pc, #60]	@ (8030fb8 <drv_uartTransmitDMA+0xdc>)
 8030f7a:	681b      	ldr	r3, [r3, #0]
 8030f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030f80:	4a0d      	ldr	r2, [pc, #52]	@ (8030fb8 <drv_uartTransmitDMA+0xdc>)
 8030f82:	6013      	str	r3, [r2, #0]
 8030f84:	e005      	b.n	8030f92 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 8030f86:	4b0c      	ldr	r3, [pc, #48]	@ (8030fb8 <drv_uartTransmitDMA+0xdc>)
 8030f88:	681b      	ldr	r3, [r3, #0]
 8030f8a:	f043 0320 	orr.w	r3, r3, #32
 8030f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8030fb8 <drv_uartTransmitDMA+0xdc>)
 8030f90:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8030f92:	7bfb      	ldrb	r3, [r7, #15]
 8030f94:	009b      	lsls	r3, r3, #2
 8030f96:	4a05      	ldr	r2, [pc, #20]	@ (8030fac <drv_uartTransmitDMA+0xd0>)
 8030f98:	4413      	add	r3, r2
 8030f9a:	4618      	mov	r0, r3
 8030f9c:	f007 fc5e 	bl	803885c <gos_mutexUnlock>

    return uartTransmitResult;
 8030fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8030fa2:	4618      	mov	r0, r3
 8030fa4:	3718      	adds	r7, #24
 8030fa6:	46bd      	mov	sp, r7
 8030fa8:	bd80      	pop	{r7, pc}
 8030faa:	bf00      	nop
 8030fac:	20007ca4 	.word	0x20007ca4
 8030fb0:	20007af4 	.word	0x20007af4
 8030fb4:	20007d04 	.word	0x20007d04
 8030fb8:	20007af0 	.word	0x20007af0

08030fbc <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8030fbc:	b580      	push	{r7, lr}
 8030fbe:	b086      	sub	sp, #24
 8030fc0:	af00      	add	r7, sp, #0
 8030fc2:	60b9      	str	r1, [r7, #8]
 8030fc4:	607b      	str	r3, [r7, #4]
 8030fc6:	4603      	mov	r3, r0
 8030fc8:	73fb      	strb	r3, [r7, #15]
 8030fca:	4613      	mov	r3, r2
 8030fcc:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 8030fce:	23ae      	movs	r3, #174	@ 0xae
 8030fd0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8030fd2:	7bfb      	ldrb	r3, [r7, #15]
 8030fd4:	009b      	lsls	r3, r3, #2
 8030fd6:	4a2d      	ldr	r2, [pc, #180]	@ (803108c <drv_uartReceiveDMA+0xd0>)
 8030fd8:	4413      	add	r3, r2
 8030fda:	6879      	ldr	r1, [r7, #4]
 8030fdc:	4618      	mov	r0, r3
 8030fde:	f007 fb37 	bl	8038650 <gos_mutexLock>
 8030fe2:	4603      	mov	r3, r0
 8030fe4:	2b55      	cmp	r3, #85	@ 0x55
 8030fe6:	d13e      	bne.n	8031066 <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 8030fe8:	7bfa      	ldrb	r2, [r7, #15]
 8030fea:	4613      	mov	r3, r2
 8030fec:	011b      	lsls	r3, r3, #4
 8030fee:	4413      	add	r3, r2
 8030ff0:	009b      	lsls	r3, r3, #2
 8030ff2:	4a27      	ldr	r2, [pc, #156]	@ (8031090 <drv_uartReceiveDMA+0xd4>)
 8030ff4:	4413      	add	r3, r2
 8030ff6:	89ba      	ldrh	r2, [r7, #12]
 8030ff8:	68b9      	ldr	r1, [r7, #8]
 8030ffa:	4618      	mov	r0, r3
 8030ffc:	f7fa fcae 	bl	802b95c <HAL_UART_Receive_DMA>
 8031000:	4603      	mov	r3, r0
 8031002:	2b00      	cmp	r3, #0
 8031004:	d11e      	bne.n	8031044 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8031006:	7bfa      	ldrb	r2, [r7, #15]
 8031008:	4613      	mov	r3, r2
 803100a:	005b      	lsls	r3, r3, #1
 803100c:	4413      	add	r3, r2
 803100e:	009b      	lsls	r3, r3, #2
 8031010:	4a20      	ldr	r2, [pc, #128]	@ (8031094 <drv_uartReceiveDMA+0xd8>)
 8031012:	4413      	add	r3, r2
 8031014:	6a3a      	ldr	r2, [r7, #32]
 8031016:	2101      	movs	r1, #1
 8031018:	4618      	mov	r0, r3
 803101a:	f00a f829 	bl	803b070 <gos_triggerWait>
 803101e:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 8031020:	2b55      	cmp	r3, #85	@ 0x55
 8031022:	d10f      	bne.n	8031044 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 8031024:	7bfa      	ldrb	r2, [r7, #15]
 8031026:	4613      	mov	r3, r2
 8031028:	005b      	lsls	r3, r3, #1
 803102a:	4413      	add	r3, r2
 803102c:	009b      	lsls	r3, r3, #2
 803102e:	4a19      	ldr	r2, [pc, #100]	@ (8031094 <drv_uartReceiveDMA+0xd8>)
 8031030:	4413      	add	r3, r2
 8031032:	4618      	mov	r0, r3
 8031034:	f009 ffc4 	bl	803afc0 <gos_triggerReset>
 8031038:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 803103a:	2b55      	cmp	r3, #85	@ 0x55
 803103c:	d102      	bne.n	8031044 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 803103e:	2355      	movs	r3, #85	@ 0x55
 8031040:	75fb      	strb	r3, [r7, #23]
 8031042:	e016      	b.n	8031072 <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8031044:	7bfa      	ldrb	r2, [r7, #15]
 8031046:	4613      	mov	r3, r2
 8031048:	011b      	lsls	r3, r3, #4
 803104a:	4413      	add	r3, r2
 803104c:	009b      	lsls	r3, r3, #2
 803104e:	4a10      	ldr	r2, [pc, #64]	@ (8031090 <drv_uartReceiveDMA+0xd4>)
 8031050:	4413      	add	r3, r2
 8031052:	4618      	mov	r0, r3
 8031054:	f7fa fd9e 	bl	802bb94 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 8031058:	4b0f      	ldr	r3, [pc, #60]	@ (8031098 <drv_uartReceiveDMA+0xdc>)
 803105a:	681b      	ldr	r3, [r3, #0]
 803105c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8031060:	4a0d      	ldr	r2, [pc, #52]	@ (8031098 <drv_uartReceiveDMA+0xdc>)
 8031062:	6013      	str	r3, [r2, #0]
 8031064:	e005      	b.n	8031072 <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 8031066:	4b0c      	ldr	r3, [pc, #48]	@ (8031098 <drv_uartReceiveDMA+0xdc>)
 8031068:	681b      	ldr	r3, [r3, #0]
 803106a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 803106e:	4a0a      	ldr	r2, [pc, #40]	@ (8031098 <drv_uartReceiveDMA+0xdc>)
 8031070:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 8031072:	7bfb      	ldrb	r3, [r7, #15]
 8031074:	009b      	lsls	r3, r3, #2
 8031076:	4a05      	ldr	r2, [pc, #20]	@ (803108c <drv_uartReceiveDMA+0xd0>)
 8031078:	4413      	add	r3, r2
 803107a:	4618      	mov	r0, r3
 803107c:	f007 fbee 	bl	803885c <gos_mutexUnlock>

    return uartReceiveResult;
 8031080:	7dfb      	ldrb	r3, [r7, #23]
}
 8031082:	4618      	mov	r0, r3
 8031084:	3718      	adds	r7, #24
 8031086:	46bd      	mov	sp, r7
 8031088:	bd80      	pop	{r7, pc}
 803108a:	bf00      	nop
 803108c:	20007c8c 	.word	0x20007c8c
 8031090:	20007af4 	.word	0x20007af4
 8031094:	20007cbc 	.word	0x20007cbc
 8031098:	20007af0 	.word	0x20007af0

0803109c <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 803109c:	b580      	push	{r7, lr}
 803109e:	b086      	sub	sp, #24
 80310a0:	af00      	add	r7, sp, #0
 80310a2:	60b9      	str	r1, [r7, #8]
 80310a4:	607b      	str	r3, [r7, #4]
 80310a6:	4603      	mov	r3, r0
 80310a8:	73fb      	strb	r3, [r7, #15]
 80310aa:	4613      	mov	r3, r2
 80310ac:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 80310ae:	23ae      	movs	r3, #174	@ 0xae
 80310b0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 80310b2:	7bfb      	ldrb	r3, [r7, #15]
 80310b4:	009b      	lsls	r3, r3, #2
 80310b6:	4a2d      	ldr	r2, [pc, #180]	@ (803116c <drv_uartTransmitIT+0xd0>)
 80310b8:	4413      	add	r3, r2
 80310ba:	6879      	ldr	r1, [r7, #4]
 80310bc:	4618      	mov	r0, r3
 80310be:	f007 fac7 	bl	8038650 <gos_mutexLock>
 80310c2:	4603      	mov	r3, r0
 80310c4:	2b55      	cmp	r3, #85	@ 0x55
 80310c6:	d13e      	bne.n	8031146 <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 80310c8:	7bfa      	ldrb	r2, [r7, #15]
 80310ca:	4613      	mov	r3, r2
 80310cc:	011b      	lsls	r3, r3, #4
 80310ce:	4413      	add	r3, r2
 80310d0:	009b      	lsls	r3, r3, #2
 80310d2:	4a27      	ldr	r2, [pc, #156]	@ (8031170 <drv_uartTransmitIT+0xd4>)
 80310d4:	4413      	add	r3, r2
 80310d6:	89ba      	ldrh	r2, [r7, #12]
 80310d8:	68b9      	ldr	r1, [r7, #8]
 80310da:	4618      	mov	r0, r3
 80310dc:	f7fa fb4b 	bl	802b776 <HAL_UART_Transmit_IT>
 80310e0:	4603      	mov	r3, r0
 80310e2:	2b00      	cmp	r3, #0
 80310e4:	d11e      	bne.n	8031124 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80310e6:	7bfa      	ldrb	r2, [r7, #15]
 80310e8:	4613      	mov	r3, r2
 80310ea:	005b      	lsls	r3, r3, #1
 80310ec:	4413      	add	r3, r2
 80310ee:	009b      	lsls	r3, r3, #2
 80310f0:	4a20      	ldr	r2, [pc, #128]	@ (8031174 <drv_uartTransmitIT+0xd8>)
 80310f2:	4413      	add	r3, r2
 80310f4:	6a3a      	ldr	r2, [r7, #32]
 80310f6:	2101      	movs	r1, #1
 80310f8:	4618      	mov	r0, r3
 80310fa:	f009 ffb9 	bl	803b070 <gos_triggerWait>
 80310fe:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 8031100:	2b55      	cmp	r3, #85	@ 0x55
 8031102:	d10f      	bne.n	8031124 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8031104:	7bfa      	ldrb	r2, [r7, #15]
 8031106:	4613      	mov	r3, r2
 8031108:	005b      	lsls	r3, r3, #1
 803110a:	4413      	add	r3, r2
 803110c:	009b      	lsls	r3, r3, #2
 803110e:	4a19      	ldr	r2, [pc, #100]	@ (8031174 <drv_uartTransmitIT+0xd8>)
 8031110:	4413      	add	r3, r2
 8031112:	4618      	mov	r0, r3
 8031114:	f009 ff54 	bl	803afc0 <gos_triggerReset>
 8031118:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 803111a:	2b55      	cmp	r3, #85	@ 0x55
 803111c:	d102      	bne.n	8031124 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 803111e:	2355      	movs	r3, #85	@ 0x55
 8031120:	75fb      	strb	r3, [r7, #23]
 8031122:	e016      	b.n	8031152 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8031124:	7bfa      	ldrb	r2, [r7, #15]
 8031126:	4613      	mov	r3, r2
 8031128:	011b      	lsls	r3, r3, #4
 803112a:	4413      	add	r3, r2
 803112c:	009b      	lsls	r3, r3, #2
 803112e:	4a10      	ldr	r2, [pc, #64]	@ (8031170 <drv_uartTransmitIT+0xd4>)
 8031130:	4413      	add	r3, r2
 8031132:	4618      	mov	r0, r3
 8031134:	f7fa fd2e 	bl	802bb94 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 8031138:	4b0f      	ldr	r3, [pc, #60]	@ (8031178 <drv_uartTransmitIT+0xdc>)
 803113a:	681b      	ldr	r3, [r3, #0]
 803113c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8031140:	4a0d      	ldr	r2, [pc, #52]	@ (8031178 <drv_uartTransmitIT+0xdc>)
 8031142:	6013      	str	r3, [r2, #0]
 8031144:	e005      	b.n	8031152 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 8031146:	4b0c      	ldr	r3, [pc, #48]	@ (8031178 <drv_uartTransmitIT+0xdc>)
 8031148:	681b      	ldr	r3, [r3, #0]
 803114a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 803114e:	4a0a      	ldr	r2, [pc, #40]	@ (8031178 <drv_uartTransmitIT+0xdc>)
 8031150:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8031152:	7bfb      	ldrb	r3, [r7, #15]
 8031154:	009b      	lsls	r3, r3, #2
 8031156:	4a05      	ldr	r2, [pc, #20]	@ (803116c <drv_uartTransmitIT+0xd0>)
 8031158:	4413      	add	r3, r2
 803115a:	4618      	mov	r0, r3
 803115c:	f007 fb7e 	bl	803885c <gos_mutexUnlock>

    return uartTransmitResult;
 8031160:	7dfb      	ldrb	r3, [r7, #23]
}
 8031162:	4618      	mov	r0, r3
 8031164:	3718      	adds	r7, #24
 8031166:	46bd      	mov	sp, r7
 8031168:	bd80      	pop	{r7, pc}
 803116a:	bf00      	nop
 803116c:	20007ca4 	.word	0x20007ca4
 8031170:	20007af4 	.word	0x20007af4
 8031174:	20007d04 	.word	0x20007d04
 8031178:	20007af0 	.word	0x20007af0

0803117c <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 803117c:	b580      	push	{r7, lr}
 803117e:	b086      	sub	sp, #24
 8031180:	af00      	add	r7, sp, #0
 8031182:	60b9      	str	r1, [r7, #8]
 8031184:	607b      	str	r3, [r7, #4]
 8031186:	4603      	mov	r3, r0
 8031188:	73fb      	strb	r3, [r7, #15]
 803118a:	4613      	mov	r3, r2
 803118c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 803118e:	23ae      	movs	r3, #174	@ 0xae
 8031190:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8031192:	7bfb      	ldrb	r3, [r7, #15]
 8031194:	009b      	lsls	r3, r3, #2
 8031196:	4a2d      	ldr	r2, [pc, #180]	@ (803124c <drv_uartReceiveIT+0xd0>)
 8031198:	4413      	add	r3, r2
 803119a:	6879      	ldr	r1, [r7, #4]
 803119c:	4618      	mov	r0, r3
 803119e:	f007 fa57 	bl	8038650 <gos_mutexLock>
 80311a2:	4603      	mov	r3, r0
 80311a4:	2b55      	cmp	r3, #85	@ 0x55
 80311a6:	d13e      	bne.n	8031226 <drv_uartReceiveIT+0xaa>
    {
    	//__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 80311a8:	7bfa      	ldrb	r2, [r7, #15]
 80311aa:	4613      	mov	r3, r2
 80311ac:	011b      	lsls	r3, r3, #4
 80311ae:	4413      	add	r3, r2
 80311b0:	009b      	lsls	r3, r3, #2
 80311b2:	4a27      	ldr	r2, [pc, #156]	@ (8031250 <drv_uartReceiveIT+0xd4>)
 80311b4:	4413      	add	r3, r2
 80311b6:	89ba      	ldrh	r2, [r7, #12]
 80311b8:	68b9      	ldr	r1, [r7, #8]
 80311ba:	4618      	mov	r0, r3
 80311bc:	f7fa fb20 	bl	802b800 <HAL_UART_Receive_IT>
 80311c0:	4603      	mov	r3, r0
 80311c2:	2b00      	cmp	r3, #0
 80311c4:	d11e      	bne.n	8031204 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80311c6:	7bfa      	ldrb	r2, [r7, #15]
 80311c8:	4613      	mov	r3, r2
 80311ca:	005b      	lsls	r3, r3, #1
 80311cc:	4413      	add	r3, r2
 80311ce:	009b      	lsls	r3, r3, #2
 80311d0:	4a20      	ldr	r2, [pc, #128]	@ (8031254 <drv_uartReceiveIT+0xd8>)
 80311d2:	4413      	add	r3, r2
 80311d4:	6a3a      	ldr	r2, [r7, #32]
 80311d6:	2101      	movs	r1, #1
 80311d8:	4618      	mov	r0, r3
 80311da:	f009 ff49 	bl	803b070 <gos_triggerWait>
 80311de:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 80311e0:	2b55      	cmp	r3, #85	@ 0x55
 80311e2:	d10f      	bne.n	8031204 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 80311e4:	7bfa      	ldrb	r2, [r7, #15]
 80311e6:	4613      	mov	r3, r2
 80311e8:	005b      	lsls	r3, r3, #1
 80311ea:	4413      	add	r3, r2
 80311ec:	009b      	lsls	r3, r3, #2
 80311ee:	4a19      	ldr	r2, [pc, #100]	@ (8031254 <drv_uartReceiveIT+0xd8>)
 80311f0:	4413      	add	r3, r2
 80311f2:	4618      	mov	r0, r3
 80311f4:	f009 fee4 	bl	803afc0 <gos_triggerReset>
 80311f8:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80311fa:	2b55      	cmp	r3, #85	@ 0x55
 80311fc:	d102      	bne.n	8031204 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 80311fe:	2355      	movs	r3, #85	@ 0x55
 8031200:	75fb      	strb	r3, [r7, #23]
 8031202:	e016      	b.n	8031232 <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8031204:	7bfa      	ldrb	r2, [r7, #15]
 8031206:	4613      	mov	r3, r2
 8031208:	011b      	lsls	r3, r3, #4
 803120a:	4413      	add	r3, r2
 803120c:	009b      	lsls	r3, r3, #2
 803120e:	4a10      	ldr	r2, [pc, #64]	@ (8031250 <drv_uartReceiveIT+0xd4>)
 8031210:	4413      	add	r3, r2
 8031212:	4618      	mov	r0, r3
 8031214:	f7fa fcbe 	bl	802bb94 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 8031218:	4b0f      	ldr	r3, [pc, #60]	@ (8031258 <drv_uartReceiveIT+0xdc>)
 803121a:	681b      	ldr	r3, [r3, #0]
 803121c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8031220:	4a0d      	ldr	r2, [pc, #52]	@ (8031258 <drv_uartReceiveIT+0xdc>)
 8031222:	6013      	str	r3, [r2, #0]
 8031224:	e005      	b.n	8031232 <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 8031226:	4b0c      	ldr	r3, [pc, #48]	@ (8031258 <drv_uartReceiveIT+0xdc>)
 8031228:	681b      	ldr	r3, [r3, #0]
 803122a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 803122e:	4a0a      	ldr	r2, [pc, #40]	@ (8031258 <drv_uartReceiveIT+0xdc>)
 8031230:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 8031232:	7bfb      	ldrb	r3, [r7, #15]
 8031234:	009b      	lsls	r3, r3, #2
 8031236:	4a05      	ldr	r2, [pc, #20]	@ (803124c <drv_uartReceiveIT+0xd0>)
 8031238:	4413      	add	r3, r2
 803123a:	4618      	mov	r0, r3
 803123c:	f007 fb0e 	bl	803885c <gos_mutexUnlock>

    return uartReceiveResult;
 8031240:	7dfb      	ldrb	r3, [r7, #23]
}
 8031242:	4618      	mov	r0, r3
 8031244:	3718      	adds	r7, #24
 8031246:	46bd      	mov	sp, r7
 8031248:	bd80      	pop	{r7, pc}
 803124a:	bf00      	nop
 803124c:	20007c8c 	.word	0x20007c8c
 8031250:	20007af4 	.word	0x20007af4
 8031254:	20007cbc 	.word	0x20007cbc
 8031258:	20007af0 	.word	0x20007af0

0803125c <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 803125c:	b580      	push	{r7, lr}
 803125e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8031260:	4b16      	ldr	r3, [pc, #88]	@ (80312bc <USART1_IRQHandler+0x60>)
 8031262:	781b      	ldrb	r3, [r3, #0]
 8031264:	2b00      	cmp	r3, #0
 8031266:	d105      	bne.n	8031274 <USART1_IRQHandler+0x18>
 8031268:	4b15      	ldr	r3, [pc, #84]	@ (80312c0 <USART1_IRQHandler+0x64>)
 803126a:	781b      	ldrb	r3, [r3, #0]
 803126c:	3301      	adds	r3, #1
 803126e:	b2da      	uxtb	r2, r3
 8031270:	4b13      	ldr	r3, [pc, #76]	@ (80312c0 <USART1_IRQHandler+0x64>)
 8031272:	701a      	strb	r2, [r3, #0]
 8031274:	4b11      	ldr	r3, [pc, #68]	@ (80312bc <USART1_IRQHandler+0x60>)
 8031276:	781b      	ldrb	r3, [r3, #0]
 8031278:	3301      	adds	r3, #1
 803127a:	b2da      	uxtb	r2, r3
 803127c:	4b0f      	ldr	r3, [pc, #60]	@ (80312bc <USART1_IRQHandler+0x60>)
 803127e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 8031280:	4810      	ldr	r0, [pc, #64]	@ (80312c4 <USART1_IRQHandler+0x68>)
 8031282:	f7fa fd9b 	bl	802bdbc <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8031286:	4b0d      	ldr	r3, [pc, #52]	@ (80312bc <USART1_IRQHandler+0x60>)
 8031288:	781b      	ldrb	r3, [r3, #0]
 803128a:	2b00      	cmp	r3, #0
 803128c:	d005      	beq.n	803129a <USART1_IRQHandler+0x3e>
 803128e:	4b0b      	ldr	r3, [pc, #44]	@ (80312bc <USART1_IRQHandler+0x60>)
 8031290:	781b      	ldrb	r3, [r3, #0]
 8031292:	3b01      	subs	r3, #1
 8031294:	b2da      	uxtb	r2, r3
 8031296:	4b09      	ldr	r3, [pc, #36]	@ (80312bc <USART1_IRQHandler+0x60>)
 8031298:	701a      	strb	r2, [r3, #0]
 803129a:	4b08      	ldr	r3, [pc, #32]	@ (80312bc <USART1_IRQHandler+0x60>)
 803129c:	781b      	ldrb	r3, [r3, #0]
 803129e:	2b00      	cmp	r3, #0
 80312a0:	d109      	bne.n	80312b6 <USART1_IRQHandler+0x5a>
 80312a2:	4b07      	ldr	r3, [pc, #28]	@ (80312c0 <USART1_IRQHandler+0x64>)
 80312a4:	781b      	ldrb	r3, [r3, #0]
 80312a6:	2b00      	cmp	r3, #0
 80312a8:	d005      	beq.n	80312b6 <USART1_IRQHandler+0x5a>
 80312aa:	4b05      	ldr	r3, [pc, #20]	@ (80312c0 <USART1_IRQHandler+0x64>)
 80312ac:	781b      	ldrb	r3, [r3, #0]
 80312ae:	3b01      	subs	r3, #1
 80312b0:	b2da      	uxtb	r2, r3
 80312b2:	4b03      	ldr	r3, [pc, #12]	@ (80312c0 <USART1_IRQHandler+0x64>)
 80312b4:	701a      	strb	r2, [r3, #0]
}
 80312b6:	bf00      	nop
 80312b8:	bd80      	pop	{r7, pc}
 80312ba:	bf00      	nop
 80312bc:	2000b312 	.word	0x2000b312
 80312c0:	2000b311 	.word	0x2000b311
 80312c4:	20007af4 	.word	0x20007af4

080312c8 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 80312c8:	b580      	push	{r7, lr}
 80312ca:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80312cc:	4b16      	ldr	r3, [pc, #88]	@ (8031328 <USART2_IRQHandler+0x60>)
 80312ce:	781b      	ldrb	r3, [r3, #0]
 80312d0:	2b00      	cmp	r3, #0
 80312d2:	d105      	bne.n	80312e0 <USART2_IRQHandler+0x18>
 80312d4:	4b15      	ldr	r3, [pc, #84]	@ (803132c <USART2_IRQHandler+0x64>)
 80312d6:	781b      	ldrb	r3, [r3, #0]
 80312d8:	3301      	adds	r3, #1
 80312da:	b2da      	uxtb	r2, r3
 80312dc:	4b13      	ldr	r3, [pc, #76]	@ (803132c <USART2_IRQHandler+0x64>)
 80312de:	701a      	strb	r2, [r3, #0]
 80312e0:	4b11      	ldr	r3, [pc, #68]	@ (8031328 <USART2_IRQHandler+0x60>)
 80312e2:	781b      	ldrb	r3, [r3, #0]
 80312e4:	3301      	adds	r3, #1
 80312e6:	b2da      	uxtb	r2, r3
 80312e8:	4b0f      	ldr	r3, [pc, #60]	@ (8031328 <USART2_IRQHandler+0x60>)
 80312ea:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 80312ec:	4810      	ldr	r0, [pc, #64]	@ (8031330 <USART2_IRQHandler+0x68>)
 80312ee:	f7fa fd65 	bl	802bdbc <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80312f2:	4b0d      	ldr	r3, [pc, #52]	@ (8031328 <USART2_IRQHandler+0x60>)
 80312f4:	781b      	ldrb	r3, [r3, #0]
 80312f6:	2b00      	cmp	r3, #0
 80312f8:	d005      	beq.n	8031306 <USART2_IRQHandler+0x3e>
 80312fa:	4b0b      	ldr	r3, [pc, #44]	@ (8031328 <USART2_IRQHandler+0x60>)
 80312fc:	781b      	ldrb	r3, [r3, #0]
 80312fe:	3b01      	subs	r3, #1
 8031300:	b2da      	uxtb	r2, r3
 8031302:	4b09      	ldr	r3, [pc, #36]	@ (8031328 <USART2_IRQHandler+0x60>)
 8031304:	701a      	strb	r2, [r3, #0]
 8031306:	4b08      	ldr	r3, [pc, #32]	@ (8031328 <USART2_IRQHandler+0x60>)
 8031308:	781b      	ldrb	r3, [r3, #0]
 803130a:	2b00      	cmp	r3, #0
 803130c:	d109      	bne.n	8031322 <USART2_IRQHandler+0x5a>
 803130e:	4b07      	ldr	r3, [pc, #28]	@ (803132c <USART2_IRQHandler+0x64>)
 8031310:	781b      	ldrb	r3, [r3, #0]
 8031312:	2b00      	cmp	r3, #0
 8031314:	d005      	beq.n	8031322 <USART2_IRQHandler+0x5a>
 8031316:	4b05      	ldr	r3, [pc, #20]	@ (803132c <USART2_IRQHandler+0x64>)
 8031318:	781b      	ldrb	r3, [r3, #0]
 803131a:	3b01      	subs	r3, #1
 803131c:	b2da      	uxtb	r2, r3
 803131e:	4b03      	ldr	r3, [pc, #12]	@ (803132c <USART2_IRQHandler+0x64>)
 8031320:	701a      	strb	r2, [r3, #0]
}
 8031322:	bf00      	nop
 8031324:	bd80      	pop	{r7, pc}
 8031326:	bf00      	nop
 8031328:	2000b312 	.word	0x2000b312
 803132c:	2000b311 	.word	0x2000b311
 8031330:	20007b38 	.word	0x20007b38

08031334 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 8031334:	b580      	push	{r7, lr}
 8031336:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8031338:	4b16      	ldr	r3, [pc, #88]	@ (8031394 <USART3_IRQHandler+0x60>)
 803133a:	781b      	ldrb	r3, [r3, #0]
 803133c:	2b00      	cmp	r3, #0
 803133e:	d105      	bne.n	803134c <USART3_IRQHandler+0x18>
 8031340:	4b15      	ldr	r3, [pc, #84]	@ (8031398 <USART3_IRQHandler+0x64>)
 8031342:	781b      	ldrb	r3, [r3, #0]
 8031344:	3301      	adds	r3, #1
 8031346:	b2da      	uxtb	r2, r3
 8031348:	4b13      	ldr	r3, [pc, #76]	@ (8031398 <USART3_IRQHandler+0x64>)
 803134a:	701a      	strb	r2, [r3, #0]
 803134c:	4b11      	ldr	r3, [pc, #68]	@ (8031394 <USART3_IRQHandler+0x60>)
 803134e:	781b      	ldrb	r3, [r3, #0]
 8031350:	3301      	adds	r3, #1
 8031352:	b2da      	uxtb	r2, r3
 8031354:	4b0f      	ldr	r3, [pc, #60]	@ (8031394 <USART3_IRQHandler+0x60>)
 8031356:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 8031358:	4810      	ldr	r0, [pc, #64]	@ (803139c <USART3_IRQHandler+0x68>)
 803135a:	f7fa fd2f 	bl	802bdbc <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 803135e:	4b0d      	ldr	r3, [pc, #52]	@ (8031394 <USART3_IRQHandler+0x60>)
 8031360:	781b      	ldrb	r3, [r3, #0]
 8031362:	2b00      	cmp	r3, #0
 8031364:	d005      	beq.n	8031372 <USART3_IRQHandler+0x3e>
 8031366:	4b0b      	ldr	r3, [pc, #44]	@ (8031394 <USART3_IRQHandler+0x60>)
 8031368:	781b      	ldrb	r3, [r3, #0]
 803136a:	3b01      	subs	r3, #1
 803136c:	b2da      	uxtb	r2, r3
 803136e:	4b09      	ldr	r3, [pc, #36]	@ (8031394 <USART3_IRQHandler+0x60>)
 8031370:	701a      	strb	r2, [r3, #0]
 8031372:	4b08      	ldr	r3, [pc, #32]	@ (8031394 <USART3_IRQHandler+0x60>)
 8031374:	781b      	ldrb	r3, [r3, #0]
 8031376:	2b00      	cmp	r3, #0
 8031378:	d109      	bne.n	803138e <USART3_IRQHandler+0x5a>
 803137a:	4b07      	ldr	r3, [pc, #28]	@ (8031398 <USART3_IRQHandler+0x64>)
 803137c:	781b      	ldrb	r3, [r3, #0]
 803137e:	2b00      	cmp	r3, #0
 8031380:	d005      	beq.n	803138e <USART3_IRQHandler+0x5a>
 8031382:	4b05      	ldr	r3, [pc, #20]	@ (8031398 <USART3_IRQHandler+0x64>)
 8031384:	781b      	ldrb	r3, [r3, #0]
 8031386:	3b01      	subs	r3, #1
 8031388:	b2da      	uxtb	r2, r3
 803138a:	4b03      	ldr	r3, [pc, #12]	@ (8031398 <USART3_IRQHandler+0x64>)
 803138c:	701a      	strb	r2, [r3, #0]
}
 803138e:	bf00      	nop
 8031390:	bd80      	pop	{r7, pc}
 8031392:	bf00      	nop
 8031394:	2000b312 	.word	0x2000b312
 8031398:	2000b311 	.word	0x2000b311
 803139c:	20007b7c 	.word	0x20007b7c

080313a0 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 80313a0:	b580      	push	{r7, lr}
 80313a2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80313a4:	4b16      	ldr	r3, [pc, #88]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313a6:	781b      	ldrb	r3, [r3, #0]
 80313a8:	2b00      	cmp	r3, #0
 80313aa:	d105      	bne.n	80313b8 <UART4_IRQHandler+0x18>
 80313ac:	4b15      	ldr	r3, [pc, #84]	@ (8031404 <UART4_IRQHandler+0x64>)
 80313ae:	781b      	ldrb	r3, [r3, #0]
 80313b0:	3301      	adds	r3, #1
 80313b2:	b2da      	uxtb	r2, r3
 80313b4:	4b13      	ldr	r3, [pc, #76]	@ (8031404 <UART4_IRQHandler+0x64>)
 80313b6:	701a      	strb	r2, [r3, #0]
 80313b8:	4b11      	ldr	r3, [pc, #68]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313ba:	781b      	ldrb	r3, [r3, #0]
 80313bc:	3301      	adds	r3, #1
 80313be:	b2da      	uxtb	r2, r3
 80313c0:	4b0f      	ldr	r3, [pc, #60]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313c2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 80313c4:	4810      	ldr	r0, [pc, #64]	@ (8031408 <UART4_IRQHandler+0x68>)
 80313c6:	f7fa fcf9 	bl	802bdbc <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80313ca:	4b0d      	ldr	r3, [pc, #52]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313cc:	781b      	ldrb	r3, [r3, #0]
 80313ce:	2b00      	cmp	r3, #0
 80313d0:	d005      	beq.n	80313de <UART4_IRQHandler+0x3e>
 80313d2:	4b0b      	ldr	r3, [pc, #44]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313d4:	781b      	ldrb	r3, [r3, #0]
 80313d6:	3b01      	subs	r3, #1
 80313d8:	b2da      	uxtb	r2, r3
 80313da:	4b09      	ldr	r3, [pc, #36]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313dc:	701a      	strb	r2, [r3, #0]
 80313de:	4b08      	ldr	r3, [pc, #32]	@ (8031400 <UART4_IRQHandler+0x60>)
 80313e0:	781b      	ldrb	r3, [r3, #0]
 80313e2:	2b00      	cmp	r3, #0
 80313e4:	d109      	bne.n	80313fa <UART4_IRQHandler+0x5a>
 80313e6:	4b07      	ldr	r3, [pc, #28]	@ (8031404 <UART4_IRQHandler+0x64>)
 80313e8:	781b      	ldrb	r3, [r3, #0]
 80313ea:	2b00      	cmp	r3, #0
 80313ec:	d005      	beq.n	80313fa <UART4_IRQHandler+0x5a>
 80313ee:	4b05      	ldr	r3, [pc, #20]	@ (8031404 <UART4_IRQHandler+0x64>)
 80313f0:	781b      	ldrb	r3, [r3, #0]
 80313f2:	3b01      	subs	r3, #1
 80313f4:	b2da      	uxtb	r2, r3
 80313f6:	4b03      	ldr	r3, [pc, #12]	@ (8031404 <UART4_IRQHandler+0x64>)
 80313f8:	701a      	strb	r2, [r3, #0]
}
 80313fa:	bf00      	nop
 80313fc:	bd80      	pop	{r7, pc}
 80313fe:	bf00      	nop
 8031400:	2000b312 	.word	0x2000b312
 8031404:	2000b311 	.word	0x2000b311
 8031408:	20007bc0 	.word	0x20007bc0

0803140c <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 803140c:	b580      	push	{r7, lr}
 803140e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8031410:	4b16      	ldr	r3, [pc, #88]	@ (803146c <UART5_IRQHandler+0x60>)
 8031412:	781b      	ldrb	r3, [r3, #0]
 8031414:	2b00      	cmp	r3, #0
 8031416:	d105      	bne.n	8031424 <UART5_IRQHandler+0x18>
 8031418:	4b15      	ldr	r3, [pc, #84]	@ (8031470 <UART5_IRQHandler+0x64>)
 803141a:	781b      	ldrb	r3, [r3, #0]
 803141c:	3301      	adds	r3, #1
 803141e:	b2da      	uxtb	r2, r3
 8031420:	4b13      	ldr	r3, [pc, #76]	@ (8031470 <UART5_IRQHandler+0x64>)
 8031422:	701a      	strb	r2, [r3, #0]
 8031424:	4b11      	ldr	r3, [pc, #68]	@ (803146c <UART5_IRQHandler+0x60>)
 8031426:	781b      	ldrb	r3, [r3, #0]
 8031428:	3301      	adds	r3, #1
 803142a:	b2da      	uxtb	r2, r3
 803142c:	4b0f      	ldr	r3, [pc, #60]	@ (803146c <UART5_IRQHandler+0x60>)
 803142e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 8031430:	4810      	ldr	r0, [pc, #64]	@ (8031474 <UART5_IRQHandler+0x68>)
 8031432:	f7fa fcc3 	bl	802bdbc <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8031436:	4b0d      	ldr	r3, [pc, #52]	@ (803146c <UART5_IRQHandler+0x60>)
 8031438:	781b      	ldrb	r3, [r3, #0]
 803143a:	2b00      	cmp	r3, #0
 803143c:	d005      	beq.n	803144a <UART5_IRQHandler+0x3e>
 803143e:	4b0b      	ldr	r3, [pc, #44]	@ (803146c <UART5_IRQHandler+0x60>)
 8031440:	781b      	ldrb	r3, [r3, #0]
 8031442:	3b01      	subs	r3, #1
 8031444:	b2da      	uxtb	r2, r3
 8031446:	4b09      	ldr	r3, [pc, #36]	@ (803146c <UART5_IRQHandler+0x60>)
 8031448:	701a      	strb	r2, [r3, #0]
 803144a:	4b08      	ldr	r3, [pc, #32]	@ (803146c <UART5_IRQHandler+0x60>)
 803144c:	781b      	ldrb	r3, [r3, #0]
 803144e:	2b00      	cmp	r3, #0
 8031450:	d109      	bne.n	8031466 <UART5_IRQHandler+0x5a>
 8031452:	4b07      	ldr	r3, [pc, #28]	@ (8031470 <UART5_IRQHandler+0x64>)
 8031454:	781b      	ldrb	r3, [r3, #0]
 8031456:	2b00      	cmp	r3, #0
 8031458:	d005      	beq.n	8031466 <UART5_IRQHandler+0x5a>
 803145a:	4b05      	ldr	r3, [pc, #20]	@ (8031470 <UART5_IRQHandler+0x64>)
 803145c:	781b      	ldrb	r3, [r3, #0]
 803145e:	3b01      	subs	r3, #1
 8031460:	b2da      	uxtb	r2, r3
 8031462:	4b03      	ldr	r3, [pc, #12]	@ (8031470 <UART5_IRQHandler+0x64>)
 8031464:	701a      	strb	r2, [r3, #0]
}
 8031466:	bf00      	nop
 8031468:	bd80      	pop	{r7, pc}
 803146a:	bf00      	nop
 803146c:	2000b312 	.word	0x2000b312
 8031470:	2000b311 	.word	0x2000b311
 8031474:	20007c04 	.word	0x20007c04

08031478 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 8031478:	b580      	push	{r7, lr}
 803147a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 803147c:	4b16      	ldr	r3, [pc, #88]	@ (80314d8 <USART6_IRQHandler+0x60>)
 803147e:	781b      	ldrb	r3, [r3, #0]
 8031480:	2b00      	cmp	r3, #0
 8031482:	d105      	bne.n	8031490 <USART6_IRQHandler+0x18>
 8031484:	4b15      	ldr	r3, [pc, #84]	@ (80314dc <USART6_IRQHandler+0x64>)
 8031486:	781b      	ldrb	r3, [r3, #0]
 8031488:	3301      	adds	r3, #1
 803148a:	b2da      	uxtb	r2, r3
 803148c:	4b13      	ldr	r3, [pc, #76]	@ (80314dc <USART6_IRQHandler+0x64>)
 803148e:	701a      	strb	r2, [r3, #0]
 8031490:	4b11      	ldr	r3, [pc, #68]	@ (80314d8 <USART6_IRQHandler+0x60>)
 8031492:	781b      	ldrb	r3, [r3, #0]
 8031494:	3301      	adds	r3, #1
 8031496:	b2da      	uxtb	r2, r3
 8031498:	4b0f      	ldr	r3, [pc, #60]	@ (80314d8 <USART6_IRQHandler+0x60>)
 803149a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 803149c:	4810      	ldr	r0, [pc, #64]	@ (80314e0 <USART6_IRQHandler+0x68>)
 803149e:	f7fa fc8d 	bl	802bdbc <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80314a2:	4b0d      	ldr	r3, [pc, #52]	@ (80314d8 <USART6_IRQHandler+0x60>)
 80314a4:	781b      	ldrb	r3, [r3, #0]
 80314a6:	2b00      	cmp	r3, #0
 80314a8:	d005      	beq.n	80314b6 <USART6_IRQHandler+0x3e>
 80314aa:	4b0b      	ldr	r3, [pc, #44]	@ (80314d8 <USART6_IRQHandler+0x60>)
 80314ac:	781b      	ldrb	r3, [r3, #0]
 80314ae:	3b01      	subs	r3, #1
 80314b0:	b2da      	uxtb	r2, r3
 80314b2:	4b09      	ldr	r3, [pc, #36]	@ (80314d8 <USART6_IRQHandler+0x60>)
 80314b4:	701a      	strb	r2, [r3, #0]
 80314b6:	4b08      	ldr	r3, [pc, #32]	@ (80314d8 <USART6_IRQHandler+0x60>)
 80314b8:	781b      	ldrb	r3, [r3, #0]
 80314ba:	2b00      	cmp	r3, #0
 80314bc:	d109      	bne.n	80314d2 <USART6_IRQHandler+0x5a>
 80314be:	4b07      	ldr	r3, [pc, #28]	@ (80314dc <USART6_IRQHandler+0x64>)
 80314c0:	781b      	ldrb	r3, [r3, #0]
 80314c2:	2b00      	cmp	r3, #0
 80314c4:	d005      	beq.n	80314d2 <USART6_IRQHandler+0x5a>
 80314c6:	4b05      	ldr	r3, [pc, #20]	@ (80314dc <USART6_IRQHandler+0x64>)
 80314c8:	781b      	ldrb	r3, [r3, #0]
 80314ca:	3b01      	subs	r3, #1
 80314cc:	b2da      	uxtb	r2, r3
 80314ce:	4b03      	ldr	r3, [pc, #12]	@ (80314dc <USART6_IRQHandler+0x64>)
 80314d0:	701a      	strb	r2, [r3, #0]
}
 80314d2:	bf00      	nop
 80314d4:	bd80      	pop	{r7, pc}
 80314d6:	bf00      	nop
 80314d8:	2000b312 	.word	0x2000b312
 80314dc:	2000b311 	.word	0x2000b311
 80314e0:	20007c48 	.word	0x20007c48

080314e4 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 80314e4:	b580      	push	{r7, lr}
 80314e6:	b084      	sub	sp, #16
 80314e8:	af00      	add	r7, sp, #0
 80314ea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 80314ec:	2300      	movs	r3, #0
 80314ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80314f0:	2300      	movs	r3, #0
 80314f2:	73fb      	strb	r3, [r7, #15]
 80314f4:	e015      	b.n	8031522 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 80314f6:	7bfb      	ldrb	r3, [r7, #15]
 80314f8:	4a0e      	ldr	r2, [pc, #56]	@ (8031534 <HAL_UART_TxCpltCallback+0x50>)
 80314fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80314fe:	687b      	ldr	r3, [r7, #4]
 8031500:	681b      	ldr	r3, [r3, #0]
 8031502:	429a      	cmp	r2, r3
 8031504:	d10a      	bne.n	803151c <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 8031506:	7bfa      	ldrb	r2, [r7, #15]
 8031508:	4613      	mov	r3, r2
 803150a:	005b      	lsls	r3, r3, #1
 803150c:	4413      	add	r3, r2
 803150e:	009b      	lsls	r3, r3, #2
 8031510:	4a09      	ldr	r2, [pc, #36]	@ (8031538 <HAL_UART_TxCpltCallback+0x54>)
 8031512:	4413      	add	r3, r2
 8031514:	4618      	mov	r0, r3
 8031516:	f009 fe5b 	bl	803b1d0 <gos_triggerIncrement>
            break;
 803151a:	e006      	b.n	803152a <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 803151c:	7bfb      	ldrb	r3, [r7, #15]
 803151e:	3301      	adds	r3, #1
 8031520:	73fb      	strb	r3, [r7, #15]
 8031522:	7bfb      	ldrb	r3, [r7, #15]
 8031524:	2b05      	cmp	r3, #5
 8031526:	d9e6      	bls.n	80314f6 <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8031528:	bf00      	nop
 803152a:	bf00      	nop
 803152c:	3710      	adds	r7, #16
 803152e:	46bd      	mov	sp, r7
 8031530:	bd80      	pop	{r7, pc}
 8031532:	bf00      	nop
 8031534:	20001658 	.word	0x20001658
 8031538:	20007d04 	.word	0x20007d04

0803153c <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 803153c:	b580      	push	{r7, lr}
 803153e:	b084      	sub	sp, #16
 8031540:	af00      	add	r7, sp, #0
 8031542:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8031544:	2300      	movs	r3, #0
 8031546:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8031548:	2300      	movs	r3, #0
 803154a:	73fb      	strb	r3, [r7, #15]
 803154c:	e015      	b.n	803157a <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 803154e:	7bfb      	ldrb	r3, [r7, #15]
 8031550:	4a0e      	ldr	r2, [pc, #56]	@ (803158c <HAL_UART_RxCpltCallback+0x50>)
 8031552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8031556:	687b      	ldr	r3, [r7, #4]
 8031558:	681b      	ldr	r3, [r3, #0]
 803155a:	429a      	cmp	r2, r3
 803155c:	d10a      	bne.n	8031574 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 803155e:	7bfa      	ldrb	r2, [r7, #15]
 8031560:	4613      	mov	r3, r2
 8031562:	005b      	lsls	r3, r3, #1
 8031564:	4413      	add	r3, r2
 8031566:	009b      	lsls	r3, r3, #2
 8031568:	4a09      	ldr	r2, [pc, #36]	@ (8031590 <HAL_UART_RxCpltCallback+0x54>)
 803156a:	4413      	add	r3, r2
 803156c:	4618      	mov	r0, r3
 803156e:	f009 fe2f 	bl	803b1d0 <gos_triggerIncrement>
            break;
 8031572:	e006      	b.n	8031582 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8031574:	7bfb      	ldrb	r3, [r7, #15]
 8031576:	3301      	adds	r3, #1
 8031578:	73fb      	strb	r3, [r7, #15]
 803157a:	7bfb      	ldrb	r3, [r7, #15]
 803157c:	2b05      	cmp	r3, #5
 803157e:	d9e6      	bls.n	803154e <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8031580:	bf00      	nop
 8031582:	bf00      	nop
 8031584:	3710      	adds	r7, #16
 8031586:	46bd      	mov	sp, r7
 8031588:	bd80      	pop	{r7, pc}
 803158a:	bf00      	nop
 803158c:	20001658 	.word	0x20001658
 8031590:	20007cbc 	.word	0x20007cbc

08031594 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8031594:	b480      	push	{r7}
 8031596:	b085      	sub	sp, #20
 8031598:	af00      	add	r7, sp, #0
 803159a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 803159c:	2300      	movs	r3, #0
 803159e:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 80315a0:	2300      	movs	r3, #0
 80315a2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80315a4:	2300      	movs	r3, #0
 80315a6:	73fb      	strb	r3, [r7, #15]
 80315a8:	e068      	b.n	803167c <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 80315aa:	7bfb      	ldrb	r3, [r7, #15]
 80315ac:	4a38      	ldr	r2, [pc, #224]	@ (8031690 <HAL_UART_MspInit+0xfc>)
 80315ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80315b2:	687b      	ldr	r3, [r7, #4]
 80315b4:	681b      	ldr	r3, [r3, #0]
 80315b6:	429a      	cmp	r2, r3
 80315b8:	d15d      	bne.n	8031676 <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 80315ba:	2300      	movs	r3, #0
 80315bc:	73bb      	strb	r3, [r7, #14]
 80315be:	e051      	b.n	8031664 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 80315c0:	7bba      	ldrb	r2, [r7, #14]
 80315c2:	4934      	ldr	r1, [pc, #208]	@ (8031694 <HAL_UART_MspInit+0x100>)
 80315c4:	4613      	mov	r3, r2
 80315c6:	009b      	lsls	r3, r3, #2
 80315c8:	4413      	add	r3, r2
 80315ca:	00db      	lsls	r3, r3, #3
 80315cc:	440b      	add	r3, r1
 80315ce:	781b      	ldrb	r3, [r3, #0]
 80315d0:	7bfa      	ldrb	r2, [r7, #15]
 80315d2:	429a      	cmp	r2, r3
 80315d4:	d143      	bne.n	803165e <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 80315d6:	7bba      	ldrb	r2, [r7, #14]
 80315d8:	492e      	ldr	r1, [pc, #184]	@ (8031694 <HAL_UART_MspInit+0x100>)
 80315da:	4613      	mov	r3, r2
 80315dc:	009b      	lsls	r3, r3, #2
 80315de:	4413      	add	r3, r2
 80315e0:	00db      	lsls	r3, r3, #3
 80315e2:	440b      	add	r3, r1
 80315e4:	3320      	adds	r3, #32
 80315e6:	681b      	ldr	r3, [r3, #0]
 80315e8:	2b00      	cmp	r3, #0
 80315ea:	d016      	beq.n	803161a <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 80315ec:	7bba      	ldrb	r2, [r7, #14]
 80315ee:	4929      	ldr	r1, [pc, #164]	@ (8031694 <HAL_UART_MspInit+0x100>)
 80315f0:	4613      	mov	r3, r2
 80315f2:	009b      	lsls	r3, r3, #2
 80315f4:	4413      	add	r3, r2
 80315f6:	00db      	lsls	r3, r3, #3
 80315f8:	440b      	add	r3, r1
 80315fa:	3320      	adds	r3, #32
 80315fc:	681b      	ldr	r3, [r3, #0]
 80315fe:	1d1a      	adds	r2, r3, #4
 8031600:	687b      	ldr	r3, [r7, #4]
 8031602:	639a      	str	r2, [r3, #56]	@ 0x38
 8031604:	7bba      	ldrb	r2, [r7, #14]
 8031606:	4923      	ldr	r1, [pc, #140]	@ (8031694 <HAL_UART_MspInit+0x100>)
 8031608:	4613      	mov	r3, r2
 803160a:	009b      	lsls	r3, r3, #2
 803160c:	4413      	add	r3, r2
 803160e:	00db      	lsls	r3, r3, #3
 8031610:	440b      	add	r3, r1
 8031612:	3320      	adds	r3, #32
 8031614:	681b      	ldr	r3, [r3, #0]
 8031616:	687a      	ldr	r2, [r7, #4]
 8031618:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 803161a:	7bba      	ldrb	r2, [r7, #14]
 803161c:	491d      	ldr	r1, [pc, #116]	@ (8031694 <HAL_UART_MspInit+0x100>)
 803161e:	4613      	mov	r3, r2
 8031620:	009b      	lsls	r3, r3, #2
 8031622:	4413      	add	r3, r2
 8031624:	00db      	lsls	r3, r3, #3
 8031626:	440b      	add	r3, r1
 8031628:	3324      	adds	r3, #36	@ 0x24
 803162a:	681b      	ldr	r3, [r3, #0]
 803162c:	2b00      	cmp	r3, #0
 803162e:	d016      	beq.n	803165e <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 8031630:	7bba      	ldrb	r2, [r7, #14]
 8031632:	4918      	ldr	r1, [pc, #96]	@ (8031694 <HAL_UART_MspInit+0x100>)
 8031634:	4613      	mov	r3, r2
 8031636:	009b      	lsls	r3, r3, #2
 8031638:	4413      	add	r3, r2
 803163a:	00db      	lsls	r3, r3, #3
 803163c:	440b      	add	r3, r1
 803163e:	3324      	adds	r3, #36	@ 0x24
 8031640:	681b      	ldr	r3, [r3, #0]
 8031642:	1d1a      	adds	r2, r3, #4
 8031644:	687b      	ldr	r3, [r7, #4]
 8031646:	635a      	str	r2, [r3, #52]	@ 0x34
 8031648:	7bba      	ldrb	r2, [r7, #14]
 803164a:	4912      	ldr	r1, [pc, #72]	@ (8031694 <HAL_UART_MspInit+0x100>)
 803164c:	4613      	mov	r3, r2
 803164e:	009b      	lsls	r3, r3, #2
 8031650:	4413      	add	r3, r2
 8031652:	00db      	lsls	r3, r3, #3
 8031654:	440b      	add	r3, r1
 8031656:	3324      	adds	r3, #36	@ 0x24
 8031658:	681b      	ldr	r3, [r3, #0]
 803165a:	687a      	ldr	r2, [r7, #4]
 803165c:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 803165e:	7bbb      	ldrb	r3, [r7, #14]
 8031660:	3301      	adds	r3, #1
 8031662:	73bb      	strb	r3, [r7, #14]
 8031664:	7bba      	ldrb	r2, [r7, #14]
 8031666:	4b0c      	ldr	r3, [pc, #48]	@ (8031698 <HAL_UART_MspInit+0x104>)
 8031668:	681b      	ldr	r3, [r3, #0]
 803166a:	490c      	ldr	r1, [pc, #48]	@ (803169c <HAL_UART_MspInit+0x108>)
 803166c:	fba1 1303 	umull	r1, r3, r1, r3
 8031670:	095b      	lsrs	r3, r3, #5
 8031672:	429a      	cmp	r2, r3
 8031674:	d3a4      	bcc.n	80315c0 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8031676:	7bfb      	ldrb	r3, [r7, #15]
 8031678:	3301      	adds	r3, #1
 803167a:	73fb      	strb	r3, [r7, #15]
 803167c:	7bfb      	ldrb	r3, [r7, #15]
 803167e:	2b05      	cmp	r3, #5
 8031680:	d993      	bls.n	80315aa <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8031682:	bf00      	nop
 8031684:	bf00      	nop
 8031686:	3714      	adds	r7, #20
 8031688:	46bd      	mov	sp, r7
 803168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803168e:	4770      	bx	lr
 8031690:	20001658 	.word	0x20001658
 8031694:	0803ffc0 	.word	0x0803ffc0
 8031698:	200014d8 	.word	0x200014d8
 803169c:	cccccccd 	.word	0xcccccccd

080316a0 <drv_w25q64Init>:

/*
 * Function: drv_w25q64Init
 */
gos_result_t drv_w25q64Init (void_t* pDevice)
{
 80316a0:	b580      	push	{r7, lr}
 80316a2:	b084      	sub	sp, #16
 80316a4:	af00      	add	r7, sp, #0
 80316a6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 80316a8:	2355      	movs	r3, #85	@ 0x55
 80316aa:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 80316ac:	2300      	movs	r3, #0
 80316ae:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_W25Q64_DEVICE_NULL);
 80316b0:	687b      	ldr	r3, [r7, #4]
 80316b2:	2b00      	cmp	r3, #0
 80316b4:	d103      	bne.n	80316be <drv_w25q64Init+0x1e>
 80316b6:	68bb      	ldr	r3, [r7, #8]
 80316b8:	f043 0301 	orr.w	r3, r3, #1
 80316bc:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex), ((drv_w25q64Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_W25Q64_MUTEX_INIT);
 80316be:	687b      	ldr	r3, [r7, #4]
 80316c0:	699b      	ldr	r3, [r3, #24]
 80316c2:	2b00      	cmp	r3, #0
 80316c4:	d10d      	bne.n	80316e2 <drv_w25q64Init+0x42>
 80316c6:	687b      	ldr	r3, [r7, #4]
 80316c8:	3302      	adds	r3, #2
 80316ca:	4618      	mov	r0, r3
 80316cc:	f006 ffa6 	bl	803861c <gos_mutexInit>
 80316d0:	4603      	mov	r3, r0
 80316d2:	2b55      	cmp	r3, #85	@ 0x55
 80316d4:	d005      	beq.n	80316e2 <drv_w25q64Init+0x42>
 80316d6:	687b      	ldr	r3, [r7, #4]
 80316d8:	699b      	ldr	r3, [r3, #24]
 80316da:	f043 0202 	orr.w	r2, r3, #2
 80316de:	687b      	ldr	r3, [r7, #4]
 80316e0:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 80316e2:	68bb      	ldr	r3, [r7, #8]
 80316e4:	2b00      	cmp	r3, #0
 80316e6:	d102      	bne.n	80316ee <drv_w25q64Init+0x4e>
 80316e8:	2355      	movs	r3, #85	@ 0x55
 80316ea:	73fb      	strb	r3, [r7, #15]
 80316ec:	e001      	b.n	80316f2 <drv_w25q64Init+0x52>
 80316ee:	23ae      	movs	r3, #174	@ 0xae
 80316f0:	73fb      	strb	r3, [r7, #15]

    return initResult;
 80316f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80316f4:	4618      	mov	r0, r3
 80316f6:	3710      	adds	r7, #16
 80316f8:	46bd      	mov	sp, r7
 80316fa:	bd80      	pop	{r7, pc}

080316fc <drv_w25q64ReadData>:

/*
 * Function: drv_w25q64ReadData
 */
GOS_INLINE void_t drv_w25q64ReadData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 80316fc:	b580      	push	{r7, lr}
 80316fe:	b088      	sub	sp, #32
 8031700:	af00      	add	r7, sp, #0
 8031702:	60f8      	str	r0, [r7, #12]
 8031704:	60b9      	str	r1, [r7, #8]
 8031706:	607a      	str	r2, [r7, #4]
 8031708:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage  = address / W25Q64_PAGE_SIZE;
 803170a:	68bb      	ldr	r3, [r7, #8]
 803170c:	0a1b      	lsrs	r3, r3, #8
 803170e:	61fb      	str	r3, [r7, #28]
    u8_t  offset     = address % W25Q64_PAGE_SIZE;
 8031710:	68bb      	ldr	r3, [r7, #8]
 8031712:	76fb      	strb	r3, [r7, #27]
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 8031714:	69fb      	ldr	r3, [r7, #28]
 8031716:	021a      	lsls	r2, r3, #8
 8031718:	7efb      	ldrb	r3, [r7, #27]
 803171a:	4413      	add	r3, r2
 803171c:	617b      	str	r3, [r7, #20]
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 803171e:	2303      	movs	r3, #3
 8031720:	743b      	strb	r3, [r7, #16]
 8031722:	697b      	ldr	r3, [r7, #20]
 8031724:	0c1b      	lsrs	r3, r3, #16
 8031726:	b2db      	uxtb	r3, r3
 8031728:	747b      	strb	r3, [r7, #17]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 803172a:	697b      	ldr	r3, [r7, #20]
 803172c:	0a1b      	lsrs	r3, r3, #8
 803172e:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 8031730:	74bb      	strb	r3, [r7, #18]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 8031732:	697b      	ldr	r3, [r7, #20]
 8031734:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 8031736:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 8031738:	68fb      	ldr	r3, [r7, #12]
 803173a:	2b00      	cmp	r3, #0
 803173c:	d030      	beq.n	80317a0 <drv_w25q64ReadData+0xa4>
 803173e:	687b      	ldr	r3, [r7, #4]
 8031740:	2b00      	cmp	r3, #0
 8031742:	d02d      	beq.n	80317a0 <drv_w25q64ReadData+0xa4>
	{
        DRV_ERROR_CHK_SET(
 8031744:	68fb      	ldr	r3, [r7, #12]
 8031746:	699b      	ldr	r3, [r3, #24]
 8031748:	2b00      	cmp	r3, #0
 803174a:	d110      	bne.n	803176e <drv_w25q64ReadData+0x72>
 803174c:	68fb      	ldr	r3, [r7, #12]
 803174e:	1c9a      	adds	r2, r3, #2
 8031750:	68fb      	ldr	r3, [r7, #12]
 8031752:	689b      	ldr	r3, [r3, #8]
 8031754:	4619      	mov	r1, r3
 8031756:	4610      	mov	r0, r2
 8031758:	f006 ff7a 	bl	8038650 <gos_mutexLock>
 803175c:	4603      	mov	r3, r0
 803175e:	2b55      	cmp	r3, #85	@ 0x55
 8031760:	d005      	beq.n	803176e <drv_w25q64ReadData+0x72>
 8031762:	68fb      	ldr	r3, [r7, #12]
 8031764:	699b      	ldr	r3, [r3, #24]
 8031766:	f043 0204 	orr.w	r2, r3, #4
 803176a:	68fb      	ldr	r3, [r7, #12]
 803176c:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		drv_w25q64ChipSelectLow(pDevice);
 803176e:	68f8      	ldr	r0, [r7, #12]
 8031770:	f000 f9c9 	bl	8031b06 <drv_w25q64ChipSelectLow>
		drv_w25q64Write(pDevice, command, 4);
 8031774:	f107 0310 	add.w	r3, r7, #16
 8031778:	2204      	movs	r2, #4
 803177a:	4619      	mov	r1, r3
 803177c:	68f8      	ldr	r0, [r7, #12]
 803177e:	f000 fa12 	bl	8031ba6 <drv_w25q64Write>
		drv_w25q64Read(pDevice, pData, size);
 8031782:	683b      	ldr	r3, [r7, #0]
 8031784:	b29b      	uxth	r3, r3
 8031786:	461a      	mov	r2, r3
 8031788:	6879      	ldr	r1, [r7, #4]
 803178a:	68f8      	ldr	r0, [r7, #12]
 803178c:	f000 fa2f 	bl	8031bee <drv_w25q64Read>
		drv_w25q64ChipSelectHigh(pDevice);
 8031790:	68f8      	ldr	r0, [r7, #12]
 8031792:	f000 f9c6 	bl	8031b22 <drv_w25q64ChipSelectHigh>

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 8031796:	68fb      	ldr	r3, [r7, #12]
 8031798:	3302      	adds	r3, #2
 803179a:	4618      	mov	r0, r3
 803179c:	f007 f85e 	bl	803885c <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 80317a0:	bf00      	nop
 80317a2:	3720      	adds	r7, #32
 80317a4:	46bd      	mov	sp, r7
 80317a6:	bd80      	pop	{r7, pc}

080317a8 <drv_w25q64WriteData>:

/*
 * Function: drv_w25q64WriteData
 */
GOS_INLINE void_t drv_w25q64WriteData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 80317a8:	b580      	push	{r7, lr}
 80317aa:	b090      	sub	sp, #64	@ 0x40
 80317ac:	af02      	add	r7, sp, #8
 80317ae:	60f8      	str	r0, [r7, #12]
 80317b0:	60b9      	str	r1, [r7, #8]
 80317b2:	607a      	str	r2, [r7, #4]
 80317b4:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage    = address / W25Q64_PAGE_SIZE;
 80317b6:	68bb      	ldr	r3, [r7, #8]
 80317b8:	0a1b      	lsrs	r3, r3, #8
 80317ba:	627b      	str	r3, [r7, #36]	@ 0x24
    u8_t  offset       = address % W25Q64_PAGE_SIZE;
 80317bc:	68bb      	ldr	r3, [r7, #8]
 80317be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	u16_t startSector  = startPage / 16;
 80317c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80317c4:	091b      	lsrs	r3, r3, #4
 80317c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	u16_t endSector    = (startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE)) / 16;
 80317c8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80317cc:	683b      	ldr	r3, [r7, #0]
 80317ce:	4413      	add	r3, r2
 80317d0:	3b01      	subs	r3, #1
 80317d2:	0a1a      	lsrs	r2, r3, #8
 80317d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80317d6:	4413      	add	r3, r2
 80317d8:	091b      	lsrs	r3, r3, #4
 80317da:	843b      	strh	r3, [r7, #32]
	u16_t numOfSectors = endSector - startSector + 1;
 80317dc:	8c3a      	ldrh	r2, [r7, #32]
 80317de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80317e0:	1ad3      	subs	r3, r2, r3
 80317e2:	b29b      	uxth	r3, r3
 80317e4:	3301      	adds	r3, #1
 80317e6:	83fb      	strh	r3, [r7, #30]
	u32_t sectorOffset = ((startPage % 16) * W25Q64_PAGE_SIZE) + offset;
 80317e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80317ea:	f003 030f 	and.w	r3, r3, #15
 80317ee:	021a      	lsls	r2, r3, #8
 80317f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80317f4:	4413      	add	r3, r2
 80317f6:	633b      	str	r3, [r7, #48]	@ 0x30
	u32_t dataIndx     = 0u;
 80317f8:	2300      	movs	r3, #0
 80317fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 80317fc:	68fb      	ldr	r3, [r7, #12]
 80317fe:	2b00      	cmp	r3, #0
 8031800:	d065      	beq.n	80318ce <drv_w25q64WriteData+0x126>
 8031802:	687b      	ldr	r3, [r7, #4]
 8031804:	2b00      	cmp	r3, #0
 8031806:	d062      	beq.n	80318ce <drv_w25q64WriteData+0x126>
	{
        DRV_ERROR_CHK_SET(
 8031808:	68fb      	ldr	r3, [r7, #12]
 803180a:	699b      	ldr	r3, [r3, #24]
 803180c:	2b00      	cmp	r3, #0
 803180e:	d110      	bne.n	8031832 <drv_w25q64WriteData+0x8a>
 8031810:	68fb      	ldr	r3, [r7, #12]
 8031812:	1c9a      	adds	r2, r3, #2
 8031814:	68fb      	ldr	r3, [r7, #12]
 8031816:	689b      	ldr	r3, [r3, #8]
 8031818:	4619      	mov	r1, r3
 803181a:	4610      	mov	r0, r2
 803181c:	f006 ff18 	bl	8038650 <gos_mutexLock>
 8031820:	4603      	mov	r3, r0
 8031822:	2b55      	cmp	r3, #85	@ 0x55
 8031824:	d005      	beq.n	8031832 <drv_w25q64WriteData+0x8a>
 8031826:	68fb      	ldr	r3, [r7, #12]
 8031828:	699b      	ldr	r3, [r3, #24]
 803182a:	f043 0204 	orr.w	r2, r3, #4
 803182e:	68fb      	ldr	r3, [r7, #12]
 8031830:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		for (u16_t i = 0u; i < numOfSectors; i++)
 8031832:	2300      	movs	r3, #0
 8031834:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8031836:	e041      	b.n	80318bc <drv_w25q64WriteData+0x114>
		{
			u32_t _startPage = startSector * 16;
 8031838:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 803183a:	011b      	lsls	r3, r3, #4
 803183c:	61bb      	str	r3, [r7, #24]

			//(void_t) memset(sectorBuffer, 0, SECTOR_SIZE);

			drv_w25q64ReadDataFast(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 803183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8031842:	9300      	str	r3, [sp, #0]
 8031844:	4b24      	ldr	r3, [pc, #144]	@ (80318d8 <drv_w25q64WriteData+0x130>)
 8031846:	2200      	movs	r2, #0
 8031848:	69b9      	ldr	r1, [r7, #24]
 803184a:	68f8      	ldr	r0, [r7, #12]
 803184c:	f000 f846 	bl	80318dc <drv_w25q64ReadDataFast>

			u16_t bytesRem = drv_w25q64BytesToModify(size, sectorOffset);
 8031850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031852:	b29b      	uxth	r3, r3
 8031854:	4619      	mov	r1, r3
 8031856:	6838      	ldr	r0, [r7, #0]
 8031858:	f000 f939 	bl	8031ace <drv_w25q64BytesToModify>
 803185c:	4603      	mov	r3, r0
 803185e:	82fb      	strh	r3, [r7, #22]

			for (u16_t j = 0u; j < bytesRem; j++)
 8031860:	2300      	movs	r3, #0
 8031862:	853b      	strh	r3, [r7, #40]	@ 0x28
 8031864:	e00d      	b.n	8031882 <drv_w25q64WriteData+0xda>
			{
				sectorBuffer[j + sectorOffset] = pData[j + dataIndx];
 8031866:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8031868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803186a:	4413      	add	r3, r2
 803186c:	687a      	ldr	r2, [r7, #4]
 803186e:	441a      	add	r2, r3
 8031870:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8031872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031874:	440b      	add	r3, r1
 8031876:	7811      	ldrb	r1, [r2, #0]
 8031878:	4a17      	ldr	r2, [pc, #92]	@ (80318d8 <drv_w25q64WriteData+0x130>)
 803187a:	54d1      	strb	r1, [r2, r3]
			for (u16_t j = 0u; j < bytesRem; j++)
 803187c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 803187e:	3301      	adds	r3, #1
 8031880:	853b      	strh	r3, [r7, #40]	@ 0x28
 8031882:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8031884:	8afb      	ldrh	r3, [r7, #22]
 8031886:	429a      	cmp	r2, r3
 8031888:	d3ed      	bcc.n	8031866 <drv_w25q64WriteData+0xbe>
			}

			drv_w25q64WriteDataClean(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 803188a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803188e:	9300      	str	r3, [sp, #0]
 8031890:	4b11      	ldr	r3, [pc, #68]	@ (80318d8 <drv_w25q64WriteData+0x130>)
 8031892:	2200      	movs	r2, #0
 8031894:	69b9      	ldr	r1, [r7, #24]
 8031896:	68f8      	ldr	r0, [r7, #12]
 8031898:	f000 f854 	bl	8031944 <drv_w25q64WriteDataClean>

			startSector++;
 803189c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 803189e:	3301      	adds	r3, #1
 80318a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
			sectorOffset = 0;
 80318a2:	2300      	movs	r3, #0
 80318a4:	633b      	str	r3, [r7, #48]	@ 0x30
			dataIndx = dataIndx + bytesRem;
 80318a6:	8afb      	ldrh	r3, [r7, #22]
 80318a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80318aa:	4413      	add	r3, r2
 80318ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			size = size - bytesRem;
 80318ae:	8afb      	ldrh	r3, [r7, #22]
 80318b0:	683a      	ldr	r2, [r7, #0]
 80318b2:	1ad3      	subs	r3, r2, r3
 80318b4:	603b      	str	r3, [r7, #0]
		for (u16_t i = 0u; i < numOfSectors; i++)
 80318b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80318b8:	3301      	adds	r3, #1
 80318ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80318bc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80318be:	8bfb      	ldrh	r3, [r7, #30]
 80318c0:	429a      	cmp	r2, r3
 80318c2:	d3b9      	bcc.n	8031838 <drv_w25q64WriteData+0x90>
		}

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 80318c4:	68fb      	ldr	r3, [r7, #12]
 80318c6:	3302      	adds	r3, #2
 80318c8:	4618      	mov	r0, r3
 80318ca:	f006 ffc7 	bl	803885c <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 80318ce:	bf00      	nop
 80318d0:	3738      	adds	r7, #56	@ 0x38
 80318d2:	46bd      	mov	sp, r7
 80318d4:	bd80      	pop	{r7, pc}
 80318d6:	bf00      	nop
 80318d8:	20007d4c 	.word	0x20007d4c

080318dc <drv_w25q64ReadDataFast>:
 * @param   size      : Size of data to be read.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ReadDataFast (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 80318dc:	b580      	push	{r7, lr}
 80318de:	b088      	sub	sp, #32
 80318e0:	af00      	add	r7, sp, #0
 80318e2:	60f8      	str	r0, [r7, #12]
 80318e4:	60b9      	str	r1, [r7, #8]
 80318e6:	603b      	str	r3, [r7, #0]
 80318e8:	4613      	mov	r3, r2
 80318ea:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 80318ec:	68bb      	ldr	r3, [r7, #8]
 80318ee:	021a      	lsls	r2, r3, #8
 80318f0:	79fb      	ldrb	r3, [r7, #7]
 80318f2:	4413      	add	r3, r2
 80318f4:	61fb      	str	r3, [r7, #28]
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 80318f6:	230b      	movs	r3, #11
 80318f8:	753b      	strb	r3, [r7, #20]
 80318fa:	69fb      	ldr	r3, [r7, #28]
 80318fc:	0c1b      	lsrs	r3, r3, #16
 80318fe:	b2db      	uxtb	r3, r3
 8031900:	757b      	strb	r3, [r7, #21]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 8031902:	69fb      	ldr	r3, [r7, #28]
 8031904:	0a1b      	lsrs	r3, r3, #8
 8031906:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 8031908:	75bb      	strb	r3, [r7, #22]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 803190a:	69fb      	ldr	r3, [r7, #28]
 803190c:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 803190e:	75fb      	strb	r3, [r7, #23]
 8031910:	2300      	movs	r3, #0
 8031912:	763b      	strb	r3, [r7, #24]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 8031914:	68f8      	ldr	r0, [r7, #12]
 8031916:	f000 f8f6 	bl	8031b06 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 5);
 803191a:	f107 0314 	add.w	r3, r7, #20
 803191e:	2205      	movs	r2, #5
 8031920:	4619      	mov	r1, r3
 8031922:	68f8      	ldr	r0, [r7, #12]
 8031924:	f000 f93f 	bl	8031ba6 <drv_w25q64Write>
	drv_w25q64Read(pDevice, pData, size);
 8031928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803192a:	b29b      	uxth	r3, r3
 803192c:	461a      	mov	r2, r3
 803192e:	6839      	ldr	r1, [r7, #0]
 8031930:	68f8      	ldr	r0, [r7, #12]
 8031932:	f000 f95c 	bl	8031bee <drv_w25q64Read>
	drv_w25q64ChipSelectHigh(pDevice);
 8031936:	68f8      	ldr	r0, [r7, #12]
 8031938:	f000 f8f3 	bl	8031b22 <drv_w25q64ChipSelectHigh>
}
 803193c:	bf00      	nop
 803193e:	3720      	adds	r7, #32
 8031940:	46bd      	mov	sp, r7
 8031942:	bd80      	pop	{r7, pc}

08031944 <drv_w25q64WriteDataClean>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64WriteDataClean (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 8031944:	b580      	push	{r7, lr}
 8031946:	b090      	sub	sp, #64	@ 0x40
 8031948:	af00      	add	r7, sp, #0
 803194a:	60f8      	str	r0, [r7, #12]
 803194c:	60b9      	str	r1, [r7, #8]
 803194e:	603b      	str	r3, [r7, #0]
 8031950:	4613      	mov	r3, r2
 8031952:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t endPage      = startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE);
 8031954:	79fa      	ldrb	r2, [r7, #7]
 8031956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8031958:	4413      	add	r3, r2
 803195a:	3b01      	subs	r3, #1
 803195c:	0a1b      	lsrs	r3, r3, #8
 803195e:	68ba      	ldr	r2, [r7, #8]
 8031960:	4413      	add	r3, r2
 8031962:	62fb      	str	r3, [r7, #44]	@ 0x2c
	u32_t numOfPages   = endPage - startPage + 1;
 8031964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031966:	68bb      	ldr	r3, [r7, #8]
 8031968:	1ad3      	subs	r3, r2, r3
 803196a:	3301      	adds	r3, #1
 803196c:	62bb      	str	r3, [r7, #40]	@ 0x28
	u16_t startSector  = startPage / 16;
 803196e:	68bb      	ldr	r3, [r7, #8]
 8031970:	091b      	lsrs	r3, r3, #4
 8031972:	84fb      	strh	r3, [r7, #38]	@ 0x26
	u16_t endSector    = endPage / 16;
 8031974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031976:	091b      	lsrs	r3, r3, #4
 8031978:	84bb      	strh	r3, [r7, #36]	@ 0x24
	u16_t numOfSectors = endSector - startSector + 1;
 803197a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 803197c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 803197e:	1ad3      	subs	r3, r2, r3
 8031980:	b29b      	uxth	r3, r3
 8031982:	3301      	adds	r3, #1
 8031984:	847b      	strh	r3, [r7, #34]	@ 0x22
	u32_t dataPosition = 0u;
 8031986:	2300      	movs	r3, #0
 8031988:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u32_t idx;

    /*
     * Function code.
     */
	for (idx = 0u; idx < numOfSectors; idx++)
 803198a:	2300      	movs	r3, #0
 803198c:	63bb      	str	r3, [r7, #56]	@ 0x38
 803198e:	e00b      	b.n	80319a8 <drv_w25q64WriteDataClean+0x64>
	{
		drv_w25q64EraseSector(pDevice, (startSector + idx));
 8031990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8031992:	b29a      	uxth	r2, r3
 8031994:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8031996:	4413      	add	r3, r2
 8031998:	b29b      	uxth	r3, r3
 803199a:	4619      	mov	r1, r3
 803199c:	68f8      	ldr	r0, [r7, #12]
 803199e:	f000 f94a 	bl	8031c36 <drv_w25q64EraseSector>
	for (idx = 0u; idx < numOfSectors; idx++)
 80319a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80319a4:	3301      	adds	r3, #1
 80319a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80319a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80319aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80319ac:	429a      	cmp	r2, r3
 80319ae:	d3ef      	bcc.n	8031990 <drv_w25q64WriteDataClean+0x4c>
	}

	(void_t) memset(pageWriteBuffer, 0, 266);
 80319b0:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 80319b4:	2100      	movs	r1, #0
 80319b6:	4837      	ldr	r0, [pc, #220]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 80319b8:	f00a fb84 	bl	803c0c4 <memset>

	for (idx = 0; idx < numOfPages; idx++)
 80319bc:	2300      	movs	r3, #0
 80319be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80319c0:	e05e      	b.n	8031a80 <drv_w25q64WriteDataClean+0x13c>
	{
		u32_t memAddress = (startPage * W25Q64_PAGE_SIZE) + offset;
 80319c2:	68bb      	ldr	r3, [r7, #8]
 80319c4:	021a      	lsls	r2, r3, #8
 80319c6:	79fb      	ldrb	r3, [r7, #7]
 80319c8:	4413      	add	r3, r2
 80319ca:	61fb      	str	r3, [r7, #28]
		u32_t bytesRem = drv_w25q64BytesToWrite(size, offset);
 80319cc:	79fb      	ldrb	r3, [r7, #7]
 80319ce:	b29b      	uxth	r3, r3
 80319d0:	4619      	mov	r1, r3
 80319d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80319d4:	f000 f860 	bl	8031a98 <drv_w25q64BytesToWrite>
 80319d8:	61b8      	str	r0, [r7, #24]
		u32_t indx = 4;
 80319da:	2304      	movs	r3, #4
 80319dc:	637b      	str	r3, [r7, #52]	@ 0x34

		drv_w25q64WriteEnable(pDevice);
 80319de:	68f8      	ldr	r0, [r7, #12]
 80319e0:	f000 f8ad 	bl	8031b3e <drv_w25q64WriteEnable>

		pageWriteBuffer[0] = 0x02;
 80319e4:	4b2b      	ldr	r3, [pc, #172]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 80319e6:	2202      	movs	r2, #2
 80319e8:	701a      	strb	r2, [r3, #0]
		pageWriteBuffer[1] = (u8_t)((memAddress >> 16) & 0xFF);
 80319ea:	69fb      	ldr	r3, [r7, #28]
 80319ec:	0c1b      	lsrs	r3, r3, #16
 80319ee:	b2da      	uxtb	r2, r3
 80319f0:	4b28      	ldr	r3, [pc, #160]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 80319f2:	705a      	strb	r2, [r3, #1]
		pageWriteBuffer[2] = (u8_t)((memAddress >> 8) & 0xFF);
 80319f4:	69fb      	ldr	r3, [r7, #28]
 80319f6:	0a1b      	lsrs	r3, r3, #8
 80319f8:	b2da      	uxtb	r2, r3
 80319fa:	4b26      	ldr	r3, [pc, #152]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 80319fc:	709a      	strb	r2, [r3, #2]
		pageWriteBuffer[3] = (u8_t)(memAddress & 0xFF);
 80319fe:	69fb      	ldr	r3, [r7, #28]
 8031a00:	b2da      	uxtb	r2, r3
 8031a02:	4b24      	ldr	r3, [pc, #144]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 8031a04:	70da      	strb	r2, [r3, #3]

		u16_t bytesToSend = bytesRem + indx;
 8031a06:	69bb      	ldr	r3, [r7, #24]
 8031a08:	b29a      	uxth	r2, r3
 8031a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031a0c:	b29b      	uxth	r3, r3
 8031a0e:	4413      	add	r3, r2
 8031a10:	82fb      	strh	r3, [r7, #22]

		for (u16_t i = 0; i < bytesRem; i++)
 8031a12:	2300      	movs	r3, #0
 8031a14:	867b      	strh	r3, [r7, #50]	@ 0x32
 8031a16:	e00d      	b.n	8031a34 <drv_w25q64WriteDataClean+0xf0>
		{
			pageWriteBuffer[indx++] = pData[ i + dataPosition];
 8031a18:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8031a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8031a1c:	4413      	add	r3, r2
 8031a1e:	683a      	ldr	r2, [r7, #0]
 8031a20:	441a      	add	r2, r3
 8031a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031a24:	1c59      	adds	r1, r3, #1
 8031a26:	6379      	str	r1, [r7, #52]	@ 0x34
 8031a28:	7811      	ldrb	r1, [r2, #0]
 8031a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 8031a2c:	54d1      	strb	r1, [r2, r3]
		for (u16_t i = 0; i < bytesRem; i++)
 8031a2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8031a30:	3301      	adds	r3, #1
 8031a32:	867b      	strh	r3, [r7, #50]	@ 0x32
 8031a34:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8031a36:	69ba      	ldr	r2, [r7, #24]
 8031a38:	429a      	cmp	r2, r3
 8031a3a:	d8ed      	bhi.n	8031a18 <drv_w25q64WriteDataClean+0xd4>
		}

		drv_w25q64ChipSelectLow(pDevice);
 8031a3c:	68f8      	ldr	r0, [r7, #12]
 8031a3e:	f000 f862 	bl	8031b06 <drv_w25q64ChipSelectLow>

		drv_w25q64Write(pDevice, pageWriteBuffer, bytesToSend);
 8031a42:	8afb      	ldrh	r3, [r7, #22]
 8031a44:	461a      	mov	r2, r3
 8031a46:	4913      	ldr	r1, [pc, #76]	@ (8031a94 <drv_w25q64WriteDataClean+0x150>)
 8031a48:	68f8      	ldr	r0, [r7, #12]
 8031a4a:	f000 f8ac 	bl	8031ba6 <drv_w25q64Write>

		drv_w25q64ChipSelectHigh(pDevice);
 8031a4e:	68f8      	ldr	r0, [r7, #12]
 8031a50:	f000 f867 	bl	8031b22 <drv_w25q64ChipSelectHigh>

		startPage++;
 8031a54:	68bb      	ldr	r3, [r7, #8]
 8031a56:	3301      	adds	r3, #1
 8031a58:	60bb      	str	r3, [r7, #8]
		offset = 0;
 8031a5a:	2300      	movs	r3, #0
 8031a5c:	71fb      	strb	r3, [r7, #7]
		size = size - bytesRem;
 8031a5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8031a60:	69bb      	ldr	r3, [r7, #24]
 8031a62:	1ad3      	subs	r3, r2, r3
 8031a64:	64bb      	str	r3, [r7, #72]	@ 0x48
		dataPosition = dataPosition + bytesRem;
 8031a66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8031a68:	69bb      	ldr	r3, [r7, #24]
 8031a6a:	4413      	add	r3, r2
 8031a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		(void_t) gos_taskSleep(5);
 8031a6e:	2005      	movs	r0, #5
 8031a70:	f004 f9b6 	bl	8035de0 <gos_taskSleep>

		drv_w25q64WriteDisable(pDevice);
 8031a74:	68f8      	ldr	r0, [r7, #12]
 8031a76:	f000 f87c 	bl	8031b72 <drv_w25q64WriteDisable>
	for (idx = 0; idx < numOfPages; idx++)
 8031a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8031a7c:	3301      	adds	r3, #1
 8031a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8031a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8031a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031a84:	429a      	cmp	r2, r3
 8031a86:	d39c      	bcc.n	80319c2 <drv_w25q64WriteDataClean+0x7e>
	}
}
 8031a88:	bf00      	nop
 8031a8a:	bf00      	nop
 8031a8c:	3740      	adds	r7, #64	@ 0x40
 8031a8e:	46bd      	mov	sp, r7
 8031a90:	bd80      	pop	{r7, pc}
 8031a92:	bf00      	nop
 8031a94:	20008d4c 	.word	0x20008d4c

08031a98 <drv_w25q64BytesToWrite>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to write.
 */
GOS_STATIC u32_t drv_w25q64BytesToWrite (u32_t size, u16_t offset)
{
 8031a98:	b480      	push	{r7}
 8031a9a:	b085      	sub	sp, #20
 8031a9c:	af00      	add	r7, sp, #0
 8031a9e:	6078      	str	r0, [r7, #4]
 8031aa0:	460b      	mov	r3, r1
 8031aa2:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 8031aa4:	2300      	movs	r3, #0
 8031aa6:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < W25Q64_PAGE_SIZE)
 8031aa8:	887a      	ldrh	r2, [r7, #2]
 8031aaa:	687b      	ldr	r3, [r7, #4]
 8031aac:	4413      	add	r3, r2
 8031aae:	2bff      	cmp	r3, #255	@ 0xff
 8031ab0:	d802      	bhi.n	8031ab8 <drv_w25q64BytesToWrite+0x20>
	{
		bytesToWrite = size;
 8031ab2:	687b      	ldr	r3, [r7, #4]
 8031ab4:	60fb      	str	r3, [r7, #12]
 8031ab6:	e003      	b.n	8031ac0 <drv_w25q64BytesToWrite+0x28>
	}
	else
	{
		bytesToWrite = W25Q64_PAGE_SIZE - offset;
 8031ab8:	887b      	ldrh	r3, [r7, #2]
 8031aba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8031abe:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 8031ac0:	68fb      	ldr	r3, [r7, #12]
}
 8031ac2:	4618      	mov	r0, r3
 8031ac4:	3714      	adds	r7, #20
 8031ac6:	46bd      	mov	sp, r7
 8031ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031acc:	4770      	bx	lr

08031ace <drv_w25q64BytesToModify>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to modify.
 */
GOS_STATIC u32_t drv_w25q64BytesToModify (u32_t size, u16_t offset)
{
 8031ace:	b480      	push	{r7}
 8031ad0:	b085      	sub	sp, #20
 8031ad2:	af00      	add	r7, sp, #0
 8031ad4:	6078      	str	r0, [r7, #4]
 8031ad6:	460b      	mov	r3, r1
 8031ad8:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 8031ada:	2300      	movs	r3, #0
 8031adc:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < SECTOR_SIZE)
 8031ade:	887a      	ldrh	r2, [r7, #2]
 8031ae0:	687b      	ldr	r3, [r7, #4]
 8031ae2:	4413      	add	r3, r2
 8031ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8031ae8:	d202      	bcs.n	8031af0 <drv_w25q64BytesToModify+0x22>
	{
		bytesToWrite = size;
 8031aea:	687b      	ldr	r3, [r7, #4]
 8031aec:	60fb      	str	r3, [r7, #12]
 8031aee:	e003      	b.n	8031af8 <drv_w25q64BytesToModify+0x2a>
	}
	else
	{
		bytesToWrite = SECTOR_SIZE - offset;
 8031af0:	887b      	ldrh	r3, [r7, #2]
 8031af2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8031af6:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 8031af8:	68fb      	ldr	r3, [r7, #12]
}
 8031afa:	4618      	mov	r0, r3
 8031afc:	3714      	adds	r7, #20
 8031afe:	46bd      	mov	sp, r7
 8031b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b04:	4770      	bx	lr

08031b06 <drv_w25q64ChipSelectLow>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectLow (void_t* pDevice)
{
 8031b06:	b580      	push	{r7, lr}
 8031b08:	b082      	sub	sp, #8
 8031b0a:	af00      	add	r7, sp, #0
 8031b0c:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8031b0e:	687b      	ldr	r3, [r7, #4]
 8031b10:	785b      	ldrb	r3, [r3, #1]
 8031b12:	2100      	movs	r1, #0
 8031b14:	4618      	mov	r0, r3
 8031b16:	f7fd f95f 	bl	802edd8 <drv_gpioWritePin>
}
 8031b1a:	bf00      	nop
 8031b1c:	3708      	adds	r7, #8
 8031b1e:	46bd      	mov	sp, r7
 8031b20:	bd80      	pop	{r7, pc}

08031b22 <drv_w25q64ChipSelectHigh>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectHigh (void_t* pDevice)
{
 8031b22:	b580      	push	{r7, lr}
 8031b24:	b082      	sub	sp, #8
 8031b26:	af00      	add	r7, sp, #0
 8031b28:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8031b2a:	687b      	ldr	r3, [r7, #4]
 8031b2c:	785b      	ldrb	r3, [r3, #1]
 8031b2e:	2101      	movs	r1, #1
 8031b30:	4618      	mov	r0, r3
 8031b32:	f7fd f951 	bl	802edd8 <drv_gpioWritePin>
}
 8031b36:	bf00      	nop
 8031b38:	3708      	adds	r7, #8
 8031b3a:	46bd      	mov	sp, r7
 8031b3c:	bd80      	pop	{r7, pc}

08031b3e <drv_w25q64WriteEnable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteEnable (void_t* pDevice)
{
 8031b3e:	b580      	push	{r7, lr}
 8031b40:	b084      	sub	sp, #16
 8031b42:	af00      	add	r7, sp, #0
 8031b44:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x06;
 8031b46:	2306      	movs	r3, #6
 8031b48:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 8031b4a:	6878      	ldr	r0, [r7, #4]
 8031b4c:	f7ff ffdb 	bl	8031b06 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 8031b50:	f107 030f 	add.w	r3, r7, #15
 8031b54:	2201      	movs	r2, #1
 8031b56:	4619      	mov	r1, r3
 8031b58:	6878      	ldr	r0, [r7, #4]
 8031b5a:	f000 f824 	bl	8031ba6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 8031b5e:	6878      	ldr	r0, [r7, #4]
 8031b60:	f7ff ffdf 	bl	8031b22 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 8031b64:	2005      	movs	r0, #5
 8031b66:	f004 f93b 	bl	8035de0 <gos_taskSleep>
}
 8031b6a:	bf00      	nop
 8031b6c:	3710      	adds	r7, #16
 8031b6e:	46bd      	mov	sp, r7
 8031b70:	bd80      	pop	{r7, pc}

08031b72 <drv_w25q64WriteDisable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteDisable (void_t* pDevice)
{
 8031b72:	b580      	push	{r7, lr}
 8031b74:	b084      	sub	sp, #16
 8031b76:	af00      	add	r7, sp, #0
 8031b78:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x04;
 8031b7a:	2304      	movs	r3, #4
 8031b7c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 8031b7e:	6878      	ldr	r0, [r7, #4]
 8031b80:	f7ff ffc1 	bl	8031b06 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 8031b84:	f107 030f 	add.w	r3, r7, #15
 8031b88:	2201      	movs	r2, #1
 8031b8a:	4619      	mov	r1, r3
 8031b8c:	6878      	ldr	r0, [r7, #4]
 8031b8e:	f000 f80a 	bl	8031ba6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 8031b92:	6878      	ldr	r0, [r7, #4]
 8031b94:	f7ff ffc5 	bl	8031b22 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 8031b98:	2005      	movs	r0, #5
 8031b9a:	f004 f921 	bl	8035de0 <gos_taskSleep>
}
 8031b9e:	bf00      	nop
 8031ba0:	3710      	adds	r7, #16
 8031ba2:	46bd      	mov	sp, r7
 8031ba4:	bd80      	pop	{r7, pc}

08031ba6 <drv_w25q64Write>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Write (void_t* pDevice, u8_t* pData, u16_t size)
{
 8031ba6:	b580      	push	{r7, lr}
 8031ba8:	b086      	sub	sp, #24
 8031baa:	af02      	add	r7, sp, #8
 8031bac:	60f8      	str	r0, [r7, #12]
 8031bae:	60b9      	str	r1, [r7, #8]
 8031bb0:	4613      	mov	r3, r2
 8031bb2:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 8031bb4:	68fb      	ldr	r3, [r7, #12]
 8031bb6:	699b      	ldr	r3, [r3, #24]
 8031bb8:	2b00      	cmp	r3, #0
 8031bba:	d114      	bne.n	8031be6 <drv_w25q64Write+0x40>
 8031bbc:	68fb      	ldr	r3, [r7, #12]
 8031bbe:	7818      	ldrb	r0, [r3, #0]
 8031bc0:	68fb      	ldr	r3, [r7, #12]
 8031bc2:	6919      	ldr	r1, [r3, #16]
 8031bc4:	68fb      	ldr	r3, [r7, #12]
 8031bc6:	695b      	ldr	r3, [r3, #20]
 8031bc8:	88fa      	ldrh	r2, [r7, #6]
 8031bca:	9300      	str	r3, [sp, #0]
 8031bcc:	460b      	mov	r3, r1
 8031bce:	68b9      	ldr	r1, [r7, #8]
 8031bd0:	f7fe f894 	bl	802fcfc <drv_spiTransmitIT>
 8031bd4:	4603      	mov	r3, r0
 8031bd6:	2b55      	cmp	r3, #85	@ 0x55
 8031bd8:	d005      	beq.n	8031be6 <drv_w25q64Write+0x40>
 8031bda:	68fb      	ldr	r3, [r7, #12]
 8031bdc:	699b      	ldr	r3, [r3, #24]
 8031bde:	f043 0210 	orr.w	r2, r3, #16
 8031be2:	68fb      	ldr	r3, [r7, #12]
 8031be4:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->writeTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_WRITE
            );
}
 8031be6:	bf00      	nop
 8031be8:	3710      	adds	r7, #16
 8031bea:	46bd      	mov	sp, r7
 8031bec:	bd80      	pop	{r7, pc}

08031bee <drv_w25q64Read>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Read (void_t* pDevice, u8_t* pData, u16_t size)
{
 8031bee:	b580      	push	{r7, lr}
 8031bf0:	b086      	sub	sp, #24
 8031bf2:	af02      	add	r7, sp, #8
 8031bf4:	60f8      	str	r0, [r7, #12]
 8031bf6:	60b9      	str	r1, [r7, #8]
 8031bf8:	4613      	mov	r3, r2
 8031bfa:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 8031bfc:	68fb      	ldr	r3, [r7, #12]
 8031bfe:	699b      	ldr	r3, [r3, #24]
 8031c00:	2b00      	cmp	r3, #0
 8031c02:	d114      	bne.n	8031c2e <drv_w25q64Read+0x40>
 8031c04:	68fb      	ldr	r3, [r7, #12]
 8031c06:	7818      	ldrb	r0, [r3, #0]
 8031c08:	68fb      	ldr	r3, [r7, #12]
 8031c0a:	6899      	ldr	r1, [r3, #8]
 8031c0c:	68fb      	ldr	r3, [r7, #12]
 8031c0e:	68db      	ldr	r3, [r3, #12]
 8031c10:	88fa      	ldrh	r2, [r7, #6]
 8031c12:	9300      	str	r3, [sp, #0]
 8031c14:	460b      	mov	r3, r1
 8031c16:	68b9      	ldr	r1, [r7, #8]
 8031c18:	f7fe f8d4 	bl	802fdc4 <drv_spiReceiveIT>
 8031c1c:	4603      	mov	r3, r0
 8031c1e:	2b55      	cmp	r3, #85	@ 0x55
 8031c20:	d005      	beq.n	8031c2e <drv_w25q64Read+0x40>
 8031c22:	68fb      	ldr	r3, [r7, #12]
 8031c24:	699b      	ldr	r3, [r3, #24]
 8031c26:	f043 0208 	orr.w	r2, r3, #8
 8031c2a:	68fb      	ldr	r3, [r7, #12]
 8031c2c:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->readTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_READ
            );
}
 8031c2e:	bf00      	nop
 8031c30:	3710      	adds	r7, #16
 8031c32:	46bd      	mov	sp, r7
 8031c34:	bd80      	pop	{r7, pc}

08031c36 <drv_w25q64EraseSector>:
 * @param pDevice
 * @param sector
 * @return
 */
GOS_STATIC void_t drv_w25q64EraseSector (void_t* pDevice, u16_t sector)
{
 8031c36:	b580      	push	{r7, lr}
 8031c38:	b084      	sub	sp, #16
 8031c3a:	af00      	add	r7, sp, #0
 8031c3c:	6078      	str	r0, [r7, #4]
 8031c3e:	460b      	mov	r3, r1
 8031c40:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t memAddress = sector * 16 * W25Q64_PAGE_SIZE;
 8031c42:	887b      	ldrh	r3, [r7, #2]
 8031c44:	031b      	lsls	r3, r3, #12
 8031c46:	60fb      	str	r3, [r7, #12]
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 8031c48:	2320      	movs	r3, #32
 8031c4a:	723b      	strb	r3, [r7, #8]
 8031c4c:	68fb      	ldr	r3, [r7, #12]
 8031c4e:	0c1b      	lsrs	r3, r3, #16
 8031c50:	b2db      	uxtb	r3, r3
 8031c52:	727b      	strb	r3, [r7, #9]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 8031c54:	68fb      	ldr	r3, [r7, #12]
 8031c56:	0a1b      	lsrs	r3, r3, #8
 8031c58:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 8031c5a:	72bb      	strb	r3, [r7, #10]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 8031c5c:	68fb      	ldr	r3, [r7, #12]
 8031c5e:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 8031c60:	72fb      	strb	r3, [r7, #11]

    /*
     * Function code.
     */
	drv_w25q64WriteEnable(pDevice);
 8031c62:	6878      	ldr	r0, [r7, #4]
 8031c64:	f7ff ff6b 	bl	8031b3e <drv_w25q64WriteEnable>
	drv_w25q64ChipSelectLow(pDevice);
 8031c68:	6878      	ldr	r0, [r7, #4]
 8031c6a:	f7ff ff4c 	bl	8031b06 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 4);
 8031c6e:	f107 0308 	add.w	r3, r7, #8
 8031c72:	2204      	movs	r2, #4
 8031c74:	4619      	mov	r1, r3
 8031c76:	6878      	ldr	r0, [r7, #4]
 8031c78:	f7ff ff95 	bl	8031ba6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 8031c7c:	6878      	ldr	r0, [r7, #4]
 8031c7e:	f7ff ff50 	bl	8031b22 <drv_w25q64ChipSelectHigh>

	(void_t) gos_taskSleep(450);
 8031c82:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8031c86:	f004 f8ab 	bl	8035de0 <gos_taskSleep>

	drv_w25q64WriteDisable(pDevice);
 8031c8a:	6878      	ldr	r0, [r7, #4]
 8031c8c:	f7ff ff71 	bl	8031b72 <drv_w25q64WriteDisable>
}
 8031c90:	bf00      	nop
 8031c92:	3710      	adds	r7, #16
 8031c94:	46bd      	mov	sp, r7
 8031c96:	bd80      	pop	{r7, pc}

08031c98 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 8031c98:	b590      	push	{r4, r7, lr}
 8031c9a:	b083      	sub	sp, #12
 8031c9c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 8031c9e:	2355      	movs	r3, #85	@ 0x55
 8031ca0:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 8031ca2:	2300      	movs	r3, #0
 8031ca4:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 8031ca6:	2300      	movs	r3, #0
 8031ca8:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 8031caa:	4b3a      	ldr	r3, [pc, #232]	@ (8031d94 <svl_dsmInit+0xfc>)
 8031cac:	681b      	ldr	r3, [r3, #0]
 8031cae:	2b00      	cmp	r3, #0
 8031cb0:	d06a      	beq.n	8031d88 <svl_dsmInit+0xf0>
	{
		// Register DSM task.
		GOS_CONCAT_RESULT(dsmInitResult, gos_taskRegister(&svlDsmDaemonDesc, NULL));
 8031cb2:	79fb      	ldrb	r3, [r7, #7]
 8031cb4:	2b55      	cmp	r3, #85	@ 0x55
 8031cb6:	d106      	bne.n	8031cc6 <svl_dsmInit+0x2e>
 8031cb8:	2100      	movs	r1, #0
 8031cba:	4837      	ldr	r0, [pc, #220]	@ (8031d98 <svl_dsmInit+0x100>)
 8031cbc:	f003 fefe 	bl	8035abc <gos_taskRegister>
 8031cc0:	4603      	mov	r3, r0
 8031cc2:	71fb      	strb	r3, [r7, #7]
 8031cc4:	e001      	b.n	8031cca <svl_dsmInit+0x32>
 8031cc6:	23ae      	movs	r3, #174	@ 0xae
 8031cc8:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8031cca:	2300      	movs	r3, #0
 8031ccc:	71bb      	strb	r3, [r7, #6]
 8031cce:	e052      	b.n	8031d76 <svl_dsmInit+0xde>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8031cd0:	4832      	ldr	r0, [pc, #200]	@ (8031d9c <svl_dsmInit+0x104>)
 8031cd2:	f002 fd35 	bl	8034740 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 8031cd6:	79ba      	ldrb	r2, [r7, #6]
 8031cd8:	4931      	ldr	r1, [pc, #196]	@ (8031da0 <svl_dsmInit+0x108>)
 8031cda:	4613      	mov	r3, r2
 8031cdc:	015b      	lsls	r3, r3, #5
 8031cde:	4413      	add	r3, r2
 8031ce0:	009b      	lsls	r3, r3, #2
 8031ce2:	440b      	add	r3, r1
 8031ce4:	681b      	ldr	r3, [r3, #0]
 8031ce6:	4618      	mov	r0, r3
 8031ce8:	f002 fd2a 	bl	8034740 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8031cec:	482b      	ldr	r0, [pc, #172]	@ (8031d9c <svl_dsmInit+0x104>)
 8031cee:	f002 fd27 	bl	8034740 <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8031cf2:	2300      	movs	r3, #0
 8031cf4:	717b      	strb	r3, [r7, #5]
 8031cf6:	e036      	b.n	8031d66 <svl_dsmInit+0xce>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 8031cf8:	79ba      	ldrb	r2, [r7, #6]
 8031cfa:	797b      	ldrb	r3, [r7, #5]
 8031cfc:	4828      	ldr	r0, [pc, #160]	@ (8031da0 <svl_dsmInit+0x108>)
 8031cfe:	00d9      	lsls	r1, r3, #3
 8031d00:	4613      	mov	r3, r2
 8031d02:	015b      	lsls	r3, r3, #5
 8031d04:	4413      	add	r3, r2
 8031d06:	009b      	lsls	r3, r3, #2
 8031d08:	440b      	add	r3, r1
 8031d0a:	4403      	add	r3, r0
 8031d0c:	3308      	adds	r3, #8
 8031d0e:	681b      	ldr	r3, [r3, #0]
 8031d10:	2b00      	cmp	r3, #0
 8031d12:	d02c      	beq.n	8031d6e <svl_dsmInit+0xd6>
				{
					GOS_CONCAT_RESULT(dsmInitResult, gos_errorTraceInit(
 8031d14:	79fb      	ldrb	r3, [r7, #7]
 8031d16:	2b55      	cmp	r3, #85	@ 0x55
 8031d18:	d120      	bne.n	8031d5c <svl_dsmInit+0xc4>
 8031d1a:	79ba      	ldrb	r2, [r7, #6]
 8031d1c:	797b      	ldrb	r3, [r7, #5]
 8031d1e:	4820      	ldr	r0, [pc, #128]	@ (8031da0 <svl_dsmInit+0x108>)
 8031d20:	00d9      	lsls	r1, r3, #3
 8031d22:	4613      	mov	r3, r2
 8031d24:	015b      	lsls	r3, r3, #5
 8031d26:	4413      	add	r3, r2
 8031d28:	009b      	lsls	r3, r3, #2
 8031d2a:	440b      	add	r3, r1
 8031d2c:	4403      	add	r3, r0
 8031d2e:	3304      	adds	r3, #4
 8031d30:	681c      	ldr	r4, [r3, #0]
 8031d32:	79ba      	ldrb	r2, [r7, #6]
 8031d34:	797b      	ldrb	r3, [r7, #5]
 8031d36:	481a      	ldr	r0, [pc, #104]	@ (8031da0 <svl_dsmInit+0x108>)
 8031d38:	00d9      	lsls	r1, r3, #3
 8031d3a:	4613      	mov	r3, r2
 8031d3c:	015b      	lsls	r3, r3, #5
 8031d3e:	4413      	add	r3, r2
 8031d40:	009b      	lsls	r3, r3, #2
 8031d42:	440b      	add	r3, r1
 8031d44:	4403      	add	r3, r0
 8031d46:	3308      	adds	r3, #8
 8031d48:	681b      	ldr	r3, [r3, #0]
 8031d4a:	4798      	blx	r3
 8031d4c:	4603      	mov	r3, r0
 8031d4e:	4619      	mov	r1, r3
 8031d50:	4620      	mov	r0, r4
 8031d52:	f005 fe41 	bl	80379d8 <gos_errorTraceInit>
 8031d56:	4603      	mov	r3, r0
 8031d58:	71fb      	strb	r3, [r7, #7]
 8031d5a:	e001      	b.n	8031d60 <svl_dsmInit+0xc8>
 8031d5c:	23ae      	movs	r3, #174	@ 0xae
 8031d5e:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8031d60:	797b      	ldrb	r3, [r7, #5]
 8031d62:	3301      	adds	r3, #1
 8031d64:	717b      	strb	r3, [r7, #5]
 8031d66:	797b      	ldrb	r3, [r7, #5]
 8031d68:	2b0f      	cmp	r3, #15
 8031d6a:	d9c5      	bls.n	8031cf8 <svl_dsmInit+0x60>
 8031d6c:	e000      	b.n	8031d70 <svl_dsmInit+0xd8>
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer()));
				}
				else
				{
					// End of initializers.
					break;
 8031d6e:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8031d70:	79bb      	ldrb	r3, [r7, #6]
 8031d72:	3301      	adds	r3, #1
 8031d74:	71bb      	strb	r3, [r7, #6]
 8031d76:	79ba      	ldrb	r2, [r7, #6]
 8031d78:	4b06      	ldr	r3, [pc, #24]	@ (8031d94 <svl_dsmInit+0xfc>)
 8031d7a:	681b      	ldr	r3, [r3, #0]
 8031d7c:	4909      	ldr	r1, [pc, #36]	@ (8031da4 <svl_dsmInit+0x10c>)
 8031d7e:	fba1 1303 	umull	r1, r3, r1, r3
 8031d82:	095b      	lsrs	r3, r3, #5
 8031d84:	429a      	cmp	r2, r3
 8031d86:	d3a3      	bcc.n	8031cd0 <svl_dsmInit+0x38>
	else
	{
		// Configuration is empty.
	}

	return dsmInitResult;
 8031d88:	79fb      	ldrb	r3, [r7, #7]
}
 8031d8a:	4618      	mov	r0, r3
 8031d8c:	370c      	adds	r7, #12
 8031d8e:	46bd      	mov	sp, r7
 8031d90:	bd90      	pop	{r4, r7, pc}
 8031d92:	bf00      	nop
 8031d94:	20001320 	.word	0x20001320
 8031d98:	20001670 	.word	0x20001670
 8031d9c:	0803e7ac 	.word	0x0803e7ac
 8031da0:	0803fac8 	.word	0x0803fac8
 8031da4:	3e0f83e1 	.word	0x3e0f83e1

08031da8 <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 8031da8:	b580      	push	{r7, lr}
 8031daa:	b082      	sub	sp, #8
 8031dac:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 8031dae:	2355      	movs	r3, #85	@ 0x55
 8031db0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n"));
 8031db2:	79fb      	ldrb	r3, [r7, #7]
 8031db4:	2b55      	cmp	r3, #85	@ 0x55
 8031db6:	d106      	bne.n	8031dc6 <svl_dsmPrintOSInfo+0x1e>
 8031db8:	490d      	ldr	r1, [pc, #52]	@ (8031df0 <svl_dsmPrintOSInfo+0x48>)
 8031dba:	2049      	movs	r0, #73	@ 0x49
 8031dbc:	f008 ff56 	bl	803ac6c <gos_traceTraceFormatted>
 8031dc0:	4603      	mov	r3, r0
 8031dc2:	71fb      	strb	r3, [r7, #7]
 8031dc4:	e001      	b.n	8031dca <svl_dsmPrintOSInfo+0x22>
 8031dc6:	23ae      	movs	r3, #174	@ 0xae
 8031dc8:	71fb      	strb	r3, [r7, #7]
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR));
 8031dca:	79fb      	ldrb	r3, [r7, #7]
 8031dcc:	2b55      	cmp	r3, #85	@ 0x55
 8031dce:	d108      	bne.n	8031de2 <svl_dsmPrintOSInfo+0x3a>
 8031dd0:	2301      	movs	r3, #1
 8031dd2:	2201      	movs	r2, #1
 8031dd4:	4907      	ldr	r1, [pc, #28]	@ (8031df4 <svl_dsmPrintOSInfo+0x4c>)
 8031dd6:	2049      	movs	r0, #73	@ 0x49
 8031dd8:	f008 ff48 	bl	803ac6c <gos_traceTraceFormatted>
 8031ddc:	4603      	mov	r3, r0
 8031dde:	71fb      	strb	r3, [r7, #7]
 8031de0:	e001      	b.n	8031de6 <svl_dsmPrintOSInfo+0x3e>
 8031de2:	23ae      	movs	r3, #174	@ 0xae
 8031de4:	71fb      	strb	r3, [r7, #7]

	return printResult;
 8031de6:	79fb      	ldrb	r3, [r7, #7]
}
 8031de8:	4618      	mov	r0, r3
 8031dea:	3708      	adds	r7, #8
 8031dec:	46bd      	mov	sp, r7
 8031dee:	bd80      	pop	{r7, pc}
 8031df0:	0803e7b0 	.word	0x0803e7b0
 8031df4:	0803e7c8 	.word	0x0803e7c8

08031df8 <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 8031df8:	b580      	push	{r7, lr}
 8031dfa:	b0ac      	sub	sp, #176	@ 0xb0
 8031dfc:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 8031dfe:	2355      	movs	r3, #85	@ 0x55
 8031e00:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 8031e04:	1d3b      	adds	r3, r7, #4
 8031e06:	22a0      	movs	r2, #160	@ 0xa0
 8031e08:	2100      	movs	r1, #0
 8031e0a:	4618      	mov	r0, r3
 8031e0c:	f00a f95a 	bl	803c0c4 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetLibVersion(&libVer));
 8031e10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031e14:	2b55      	cmp	r3, #85	@ 0x55
 8031e16:	d107      	bne.n	8031e28 <svl_dsmPrintLibInfo+0x30>
 8031e18:	1d3b      	adds	r3, r7, #4
 8031e1a:	4618      	mov	r0, r3
 8031e1c:	f001 f9b8 	bl	8033190 <svl_pdhGetLibVersion>
 8031e20:	4603      	mov	r3, r0
 8031e22:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031e26:	e002      	b.n	8031e2e <svl_dsmPrintLibInfo+0x36>
 8031e28:	23ae      	movs	r3, #174	@ 0xae
 8031e2a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n"));
 8031e2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031e32:	2b55      	cmp	r3, #85	@ 0x55
 8031e34:	d107      	bne.n	8031e46 <svl_dsmPrintLibInfo+0x4e>
 8031e36:	493a      	ldr	r1, [pc, #232]	@ (8031f20 <svl_dsmPrintLibInfo+0x128>)
 8031e38:	2049      	movs	r0, #73	@ 0x49
 8031e3a:	f008 ff17 	bl	803ac6c <gos_traceTraceFormatted>
 8031e3e:	4603      	mov	r3, r0
 8031e40:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031e44:	e002      	b.n	8031e4c <svl_dsmPrintLibInfo+0x54>
 8031e46:	23ae      	movs	r3, #174	@ 0xae
 8031e48:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name));
 8031e4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031e50:	2b55      	cmp	r3, #85	@ 0x55
 8031e52:	d10a      	bne.n	8031e6a <svl_dsmPrintLibInfo+0x72>
 8031e54:	1d3b      	adds	r3, r7, #4
 8031e56:	3310      	adds	r3, #16
 8031e58:	461a      	mov	r2, r3
 8031e5a:	4932      	ldr	r1, [pc, #200]	@ (8031f24 <svl_dsmPrintLibInfo+0x12c>)
 8031e5c:	2049      	movs	r0, #73	@ 0x49
 8031e5e:	f008 ff05 	bl	803ac6c <gos_traceTraceFormatted>
 8031e62:	4603      	mov	r3, r0
 8031e64:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031e68:	e002      	b.n	8031e70 <svl_dsmPrintLibInfo+0x78>
 8031e6a:	23ae      	movs	r3, #174	@ 0xae
 8031e6c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description));
 8031e70:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031e74:	2b55      	cmp	r3, #85	@ 0x55
 8031e76:	d10a      	bne.n	8031e8e <svl_dsmPrintLibInfo+0x96>
 8031e78:	1d3b      	adds	r3, r7, #4
 8031e7a:	3340      	adds	r3, #64	@ 0x40
 8031e7c:	461a      	mov	r2, r3
 8031e7e:	492a      	ldr	r1, [pc, #168]	@ (8031f28 <svl_dsmPrintLibInfo+0x130>)
 8031e80:	2049      	movs	r0, #73	@ 0x49
 8031e82:	f008 fef3 	bl	803ac6c <gos_traceTraceFormatted>
 8031e86:	4603      	mov	r3, r0
 8031e88:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031e8c:	e002      	b.n	8031e94 <svl_dsmPrintLibInfo+0x9c>
 8031e8e:	23ae      	movs	r3, #174	@ 0xae
 8031e90:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build));
 8031e94:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031e98:	2b55      	cmp	r3, #85	@ 0x55
 8031e9a:	d10e      	bne.n	8031eba <svl_dsmPrintLibInfo+0xc2>
 8031e9c:	88bb      	ldrh	r3, [r7, #4]
 8031e9e:	461a      	mov	r2, r3
 8031ea0:	88fb      	ldrh	r3, [r7, #6]
 8031ea2:	4619      	mov	r1, r3
 8031ea4:	893b      	ldrh	r3, [r7, #8]
 8031ea6:	9300      	str	r3, [sp, #0]
 8031ea8:	460b      	mov	r3, r1
 8031eaa:	4920      	ldr	r1, [pc, #128]	@ (8031f2c <svl_dsmPrintLibInfo+0x134>)
 8031eac:	2049      	movs	r0, #73	@ 0x49
 8031eae:	f008 fedd 	bl	803ac6c <gos_traceTraceFormatted>
 8031eb2:	4603      	mov	r3, r0
 8031eb4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031eb8:	e002      	b.n	8031ec0 <svl_dsmPrintLibInfo+0xc8>
 8031eba:	23ae      	movs	r3, #174	@ 0xae
 8031ebc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days));
 8031ec0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031ec4:	2b55      	cmp	r3, #85	@ 0x55
 8031ec6:	d110      	bne.n	8031eea <svl_dsmPrintLibInfo+0xf2>
 8031ec8:	8a7b      	ldrh	r3, [r7, #18]
 8031eca:	461a      	mov	r2, r3
 8031ecc:	7c7b      	ldrb	r3, [r7, #17]
 8031ece:	4619      	mov	r1, r3
 8031ed0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8031ed4:	b29b      	uxth	r3, r3
 8031ed6:	9300      	str	r3, [sp, #0]
 8031ed8:	460b      	mov	r3, r1
 8031eda:	4915      	ldr	r1, [pc, #84]	@ (8031f30 <svl_dsmPrintLibInfo+0x138>)
 8031edc:	2049      	movs	r0, #73	@ 0x49
 8031ede:	f008 fec5 	bl	803ac6c <gos_traceTraceFormatted>
 8031ee2:	4603      	mov	r3, r0
 8031ee4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031ee8:	e002      	b.n	8031ef0 <svl_dsmPrintLibInfo+0xf8>
 8031eea:	23ae      	movs	r3, #174	@ 0xae
 8031eec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author));
 8031ef0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8031ef4:	2b55      	cmp	r3, #85	@ 0x55
 8031ef6:	d10a      	bne.n	8031f0e <svl_dsmPrintLibInfo+0x116>
 8031ef8:	1d3b      	adds	r3, r7, #4
 8031efa:	3370      	adds	r3, #112	@ 0x70
 8031efc:	461a      	mov	r2, r3
 8031efe:	490d      	ldr	r1, [pc, #52]	@ (8031f34 <svl_dsmPrintLibInfo+0x13c>)
 8031f00:	2049      	movs	r0, #73	@ 0x49
 8031f02:	f008 feb3 	bl	803ac6c <gos_traceTraceFormatted>
 8031f06:	4603      	mov	r3, r0
 8031f08:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8031f0c:	e002      	b.n	8031f14 <svl_dsmPrintLibInfo+0x11c>
 8031f0e:	23ae      	movs	r3, #174	@ 0xae
 8031f10:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	return printResult;
 8031f14:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8031f18:	4618      	mov	r0, r3
 8031f1a:	37a8      	adds	r7, #168	@ 0xa8
 8031f1c:	46bd      	mov	sp, r7
 8031f1e:	bd80      	pop	{r7, pc}
 8031f20:	0803e7e0 	.word	0x0803e7e0
 8031f24:	0803e7fc 	.word	0x0803e7fc
 8031f28:	0803e810 	.word	0x0803e810
 8031f2c:	0803e824 	.word	0x0803e824
 8031f30:	0803e844 	.word	0x0803e844
 8031f34:	0803e864 	.word	0x0803e864

08031f38 <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 8031f38:	b580      	push	{r7, lr}
 8031f3a:	b0c2      	sub	sp, #264	@ 0x108
 8031f3c:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 8031f3e:	2355      	movs	r3, #85	@ 0x55
 8031f40:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 8031f44:	1d3b      	adds	r3, r7, #4
 8031f46:	22fa      	movs	r2, #250	@ 0xfa
 8031f48:	2100      	movs	r1, #0
 8031f4a:	4618      	mov	r0, r3
 8031f4c:	f00a f8ba 	bl	803c0c4 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetHwInfo(&hwInfo));
 8031f50:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8031f54:	2b55      	cmp	r3, #85	@ 0x55
 8031f56:	d107      	bne.n	8031f68 <svl_dsmPrintHwInfo+0x30>
 8031f58:	1d3b      	adds	r3, r7, #4
 8031f5a:	4618      	mov	r0, r3
 8031f5c:	f001 f9d2 	bl	8033304 <svl_pdhGetHwInfo>
 8031f60:	4603      	mov	r3, r0
 8031f62:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8031f66:	e002      	b.n	8031f6e <svl_dsmPrintHwInfo+0x36>
 8031f68:	23ae      	movs	r3, #174	@ 0xae
 8031f6a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n"));
 8031f6e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8031f72:	2b55      	cmp	r3, #85	@ 0x55
 8031f74:	d107      	bne.n	8031f86 <svl_dsmPrintHwInfo+0x4e>
 8031f76:	4942      	ldr	r1, [pc, #264]	@ (8032080 <svl_dsmPrintHwInfo+0x148>)
 8031f78:	2049      	movs	r0, #73	@ 0x49
 8031f7a:	f008 fe77 	bl	803ac6c <gos_traceTraceFormatted>
 8031f7e:	4603      	mov	r3, r0
 8031f80:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8031f84:	e002      	b.n	8031f8c <svl_dsmPrintHwInfo+0x54>
 8031f86:	23ae      	movs	r3, #174	@ 0xae
 8031f88:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Board name:    \t%s\r\n", hwInfo.boardName));
 8031f8c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8031f90:	2b55      	cmp	r3, #85	@ 0x55
 8031f92:	d109      	bne.n	8031fa8 <svl_dsmPrintHwInfo+0x70>
 8031f94:	1d3b      	adds	r3, r7, #4
 8031f96:	461a      	mov	r2, r3
 8031f98:	493a      	ldr	r1, [pc, #232]	@ (8032084 <svl_dsmPrintHwInfo+0x14c>)
 8031f9a:	2049      	movs	r0, #73	@ 0x49
 8031f9c:	f008 fe66 	bl	803ac6c <gos_traceTraceFormatted>
 8031fa0:	4603      	mov	r3, r0
 8031fa2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8031fa6:	e002      	b.n	8031fae <svl_dsmPrintHwInfo+0x76>
 8031fa8:	23ae      	movs	r3, #174	@ 0xae
 8031faa:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:        \t%s\r\n", hwInfo.author));
 8031fae:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8031fb2:	2b55      	cmp	r3, #85	@ 0x55
 8031fb4:	d10a      	bne.n	8031fcc <svl_dsmPrintHwInfo+0x94>
 8031fb6:	1d3b      	adds	r3, r7, #4
 8031fb8:	3360      	adds	r3, #96	@ 0x60
 8031fba:	461a      	mov	r2, r3
 8031fbc:	4932      	ldr	r1, [pc, #200]	@ (8032088 <svl_dsmPrintHwInfo+0x150>)
 8031fbe:	2049      	movs	r0, #73	@ 0x49
 8031fc0:	f008 fe54 	bl	803ac6c <gos_traceTraceFormatted>
 8031fc4:	4603      	mov	r3, r0
 8031fc6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8031fca:	e002      	b.n	8031fd2 <svl_dsmPrintHwInfo+0x9a>
 8031fcc:	23ae      	movs	r3, #174	@ 0xae
 8031fce:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description:   \t%s\r\n", hwInfo.description));
 8031fd2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8031fd6:	2b55      	cmp	r3, #85	@ 0x55
 8031fd8:	d10a      	bne.n	8031ff0 <svl_dsmPrintHwInfo+0xb8>
 8031fda:	1d3b      	adds	r3, r7, #4
 8031fdc:	3390      	adds	r3, #144	@ 0x90
 8031fde:	461a      	mov	r2, r3
 8031fe0:	492a      	ldr	r1, [pc, #168]	@ (803208c <svl_dsmPrintHwInfo+0x154>)
 8031fe2:	2049      	movs	r0, #73	@ 0x49
 8031fe4:	f008 fe42 	bl	803ac6c <gos_traceTraceFormatted>
 8031fe8:	4603      	mov	r3, r0
 8031fea:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8031fee:	e002      	b.n	8031ff6 <svl_dsmPrintHwInfo+0xbe>
 8031ff0:	23ae      	movs	r3, #174	@ 0xae
 8031ff2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Revision:      \t%s\r\n", hwInfo.revision));
 8031ff6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8031ffa:	2b55      	cmp	r3, #85	@ 0x55
 8031ffc:	d10a      	bne.n	8032014 <svl_dsmPrintHwInfo+0xdc>
 8031ffe:	1d3b      	adds	r3, r7, #4
 8032000:	3330      	adds	r3, #48	@ 0x30
 8032002:	461a      	mov	r2, r3
 8032004:	4922      	ldr	r1, [pc, #136]	@ (8032090 <svl_dsmPrintHwInfo+0x158>)
 8032006:	2049      	movs	r0, #73	@ 0x49
 8032008:	f008 fe30 	bl	803ac6c <gos_traceTraceFormatted>
 803200c:	4603      	mov	r3, r0
 803200e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8032012:	e002      	b.n	803201a <svl_dsmPrintHwInfo+0xe2>
 8032014:	23ae      	movs	r3, #174	@ 0xae
 8032016:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Serial number: \t%s\r\n", hwInfo.serialNumber));
 803201a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 803201e:	2b55      	cmp	r3, #85	@ 0x55
 8032020:	d10a      	bne.n	8032038 <svl_dsmPrintHwInfo+0x100>
 8032022:	1d3b      	adds	r3, r7, #4
 8032024:	33ca      	adds	r3, #202	@ 0xca
 8032026:	461a      	mov	r2, r3
 8032028:	491a      	ldr	r1, [pc, #104]	@ (8032094 <svl_dsmPrintHwInfo+0x15c>)
 803202a:	2049      	movs	r0, #73	@ 0x49
 803202c:	f008 fe1e 	bl	803ac6c <gos_traceTraceFormatted>
 8032030:	4603      	mov	r3, r0
 8032032:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8032036:	e002      	b.n	803203e <svl_dsmPrintHwInfo+0x106>
 8032038:	23ae      	movs	r3, #174	@ 0xae
 803203a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 803203e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8032042:	2b55      	cmp	r3, #85	@ 0x55
 8032044:	d112      	bne.n	803206c <svl_dsmPrintHwInfo+0x134>
 8032046:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 803204a:	461a      	mov	r2, r3
 803204c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8032050:	4619      	mov	r1, r3
 8032052:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	@ 0xc9
 8032056:	b29b      	uxth	r3, r3
 8032058:	9300      	str	r3, [sp, #0]
 803205a:	460b      	mov	r3, r1
 803205c:	490e      	ldr	r1, [pc, #56]	@ (8032098 <svl_dsmPrintHwInfo+0x160>)
 803205e:	2049      	movs	r0, #73	@ 0x49
 8032060:	f008 fe04 	bl	803ac6c <gos_traceTraceFormatted>
 8032064:	4603      	mov	r3, r0
 8032066:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 803206a:	e002      	b.n	8032072 <svl_dsmPrintHwInfo+0x13a>
 803206c:	23ae      	movs	r3, #174	@ 0xae
 803206e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			hwInfo.date.years,
			hwInfo.date.months,
			hwInfo.date.days
			));

	return printResult;
 8032072:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 8032076:	4618      	mov	r0, r3
 8032078:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 803207c:	46bd      	mov	sp, r7
 803207e:	bd80      	pop	{r7, pc}
 8032080:	0803e878 	.word	0x0803e878
 8032084:	0803e894 	.word	0x0803e894
 8032088:	0803e8ac 	.word	0x0803e8ac
 803208c:	0803e8c4 	.word	0x0803e8c4
 8032090:	0803e8dc 	.word	0x0803e8dc
 8032094:	0803e8f4 	.word	0x0803e8f4
 8032098:	0803e90c 	.word	0x0803e90c

0803209c <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 803209c:	b580      	push	{r7, lr}
 803209e:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 80320a2:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 80320a4:	2355      	movs	r3, #85	@ 0x55
 80320a6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 80320aa:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80320ae:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80320b2:	4618      	mov	r0, r3
 80320b4:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80320b8:	461a      	mov	r2, r3
 80320ba:	2100      	movs	r1, #0
 80320bc:	f00a f802 	bl	803c0c4 <memset>

	/*
	 * Function code.
	 */
	//GOS_CONCAT_RESULT(printResult, svl_pdhGetSwInfo(&swInfo)); TODO
	(void_t) svl_pdhGetSwInfo(&swInfo);
 80320c0:	1d3b      	adds	r3, r7, #4
 80320c2:	4618      	mov	r0, r3
 80320c4:	f001 f8e6 	bl	8033294 <svl_pdhGetSwInfo>

	if (strcmp(swInfo.bldSwVerInfo.name, "") != 0)
 80320c8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80320cc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80320d0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80320d4:	2b00      	cmp	r3, #0
 80320d6:	f000 8091 	beq.w	80321fc <svl_dsmPrintAppInfo+0x160>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Bootloader Info"TRACE_FORMAT_RESET"\r\n"));
 80320da:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80320de:	2b55      	cmp	r3, #85	@ 0x55
 80320e0:	d107      	bne.n	80320f2 <svl_dsmPrintAppInfo+0x56>
 80320e2:	4998      	ldr	r1, [pc, #608]	@ (8032344 <svl_dsmPrintAppInfo+0x2a8>)
 80320e4:	2049      	movs	r0, #73	@ 0x49
 80320e6:	f008 fdc1 	bl	803ac6c <gos_traceTraceFormatted>
 80320ea:	4603      	mov	r3, r0
 80320ec:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80320f0:	e002      	b.n	80320f8 <svl_dsmPrintAppInfo+0x5c>
 80320f2:	23ae      	movs	r3, #174	@ 0xae
 80320f4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.bldSwVerInfo.name));
 80320f8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80320fc:	2b55      	cmp	r3, #85	@ 0x55
 80320fe:	d10a      	bne.n	8032116 <svl_dsmPrintAppInfo+0x7a>
 8032100:	1d3b      	adds	r3, r7, #4
 8032102:	33b0      	adds	r3, #176	@ 0xb0
 8032104:	461a      	mov	r2, r3
 8032106:	4990      	ldr	r1, [pc, #576]	@ (8032348 <svl_dsmPrintAppInfo+0x2ac>)
 8032108:	2049      	movs	r0, #73	@ 0x49
 803210a:	f008 fdaf 	bl	803ac6c <gos_traceTraceFormatted>
 803210e:	4603      	mov	r3, r0
 8032110:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8032114:	e002      	b.n	803211c <svl_dsmPrintAppInfo+0x80>
 8032116:	23ae      	movs	r3, #174	@ 0xae
 8032118:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.bldSwVerInfo.description));
 803211c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8032120:	2b55      	cmp	r3, #85	@ 0x55
 8032122:	d10a      	bne.n	803213a <svl_dsmPrintAppInfo+0x9e>
 8032124:	1d3b      	adds	r3, r7, #4
 8032126:	33e0      	adds	r3, #224	@ 0xe0
 8032128:	461a      	mov	r2, r3
 803212a:	4988      	ldr	r1, [pc, #544]	@ (803234c <svl_dsmPrintAppInfo+0x2b0>)
 803212c:	2049      	movs	r0, #73	@ 0x49
 803212e:	f008 fd9d 	bl	803ac6c <gos_traceTraceFormatted>
 8032132:	4603      	mov	r3, r0
 8032134:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8032138:	e002      	b.n	8032140 <svl_dsmPrintAppInfo+0xa4>
 803213a:	23ae      	movs	r3, #174	@ 0xae
 803213c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.bldSwVerInfo.major, swInfo.bldSwVerInfo.minor, swInfo.bldSwVerInfo.build));
 8032140:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8032144:	2b55      	cmp	r3, #85	@ 0x55
 8032146:	d11d      	bne.n	8032184 <svl_dsmPrintAppInfo+0xe8>
 8032148:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 803214c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8032150:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8032154:	461a      	mov	r2, r3
 8032156:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 803215a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 803215e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8032162:	4619      	mov	r1, r3
 8032164:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8032168:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 803216c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8032170:	9300      	str	r3, [sp, #0]
 8032172:	460b      	mov	r3, r1
 8032174:	4976      	ldr	r1, [pc, #472]	@ (8032350 <svl_dsmPrintAppInfo+0x2b4>)
 8032176:	2049      	movs	r0, #73	@ 0x49
 8032178:	f008 fd78 	bl	803ac6c <gos_traceTraceFormatted>
 803217c:	4603      	mov	r3, r0
 803217e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8032182:	e002      	b.n	803218a <svl_dsmPrintAppInfo+0xee>
 8032184:	23ae      	movs	r3, #174	@ 0xae
 8032186:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.bldSwVerInfo.date.years, swInfo.bldSwVerInfo.date.months, swInfo.bldSwVerInfo.date.days));
 803218a:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 803218e:	2b55      	cmp	r3, #85	@ 0x55
 8032190:	d11e      	bne.n	80321d0 <svl_dsmPrintAppInfo+0x134>
 8032192:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8032196:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 803219a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 803219e:	461a      	mov	r2, r3
 80321a0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80321a4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80321a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80321ac:	4619      	mov	r1, r3
 80321ae:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80321b2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80321b6:	f8b3 30ab 	ldrh.w	r3, [r3, #171]	@ 0xab
 80321ba:	b29b      	uxth	r3, r3
 80321bc:	9300      	str	r3, [sp, #0]
 80321be:	460b      	mov	r3, r1
 80321c0:	4964      	ldr	r1, [pc, #400]	@ (8032354 <svl_dsmPrintAppInfo+0x2b8>)
 80321c2:	2049      	movs	r0, #73	@ 0x49
 80321c4:	f008 fd52 	bl	803ac6c <gos_traceTraceFormatted>
 80321c8:	4603      	mov	r3, r0
 80321ca:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80321ce:	e002      	b.n	80321d6 <svl_dsmPrintAppInfo+0x13a>
 80321d0:	23ae      	movs	r3, #174	@ 0xae
 80321d2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.bldSwVerInfo.author));
 80321d6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80321da:	2b55      	cmp	r3, #85	@ 0x55
 80321dc:	d10b      	bne.n	80321f6 <svl_dsmPrintAppInfo+0x15a>
 80321de:	1d3b      	adds	r3, r7, #4
 80321e0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80321e4:	461a      	mov	r2, r3
 80321e6:	495c      	ldr	r1, [pc, #368]	@ (8032358 <svl_dsmPrintAppInfo+0x2bc>)
 80321e8:	2049      	movs	r0, #73	@ 0x49
 80321ea:	f008 fd3f 	bl	803ac6c <gos_traceTraceFormatted>
 80321ee:	4603      	mov	r3, r0
 80321f0:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80321f4:	e002      	b.n	80321fc <svl_dsmPrintAppInfo+0x160>
 80321f6:	23ae      	movs	r3, #174	@ 0xae
 80321f8:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Bootloader does not exist.
	}

	if (strcmp(swInfo.appSwVerInfo.name, "") != 0)
 80321fc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8032200:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8032204:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8032208:	2b00      	cmp	r3, #0
 803220a:	f000 8093 	beq.w	8032334 <svl_dsmPrintAppInfo+0x298>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n"));
 803220e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8032212:	2b55      	cmp	r3, #85	@ 0x55
 8032214:	d107      	bne.n	8032226 <svl_dsmPrintAppInfo+0x18a>
 8032216:	4951      	ldr	r1, [pc, #324]	@ (803235c <svl_dsmPrintAppInfo+0x2c0>)
 8032218:	2049      	movs	r0, #73	@ 0x49
 803221a:	f008 fd27 	bl	803ac6c <gos_traceTraceFormatted>
 803221e:	4603      	mov	r3, r0
 8032220:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8032224:	e002      	b.n	803222c <svl_dsmPrintAppInfo+0x190>
 8032226:	23ae      	movs	r3, #174	@ 0xae
 8032228:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name));
 803222c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8032230:	2b55      	cmp	r3, #85	@ 0x55
 8032232:	d10b      	bne.n	803224c <svl_dsmPrintAppInfo+0x1b0>
 8032234:	1d3b      	adds	r3, r7, #4
 8032236:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 803223a:	461a      	mov	r2, r3
 803223c:	4942      	ldr	r1, [pc, #264]	@ (8032348 <svl_dsmPrintAppInfo+0x2ac>)
 803223e:	2049      	movs	r0, #73	@ 0x49
 8032240:	f008 fd14 	bl	803ac6c <gos_traceTraceFormatted>
 8032244:	4603      	mov	r3, r0
 8032246:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 803224a:	e002      	b.n	8032252 <svl_dsmPrintAppInfo+0x1b6>
 803224c:	23ae      	movs	r3, #174	@ 0xae
 803224e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description));
 8032252:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8032256:	2b55      	cmp	r3, #85	@ 0x55
 8032258:	d10b      	bne.n	8032272 <svl_dsmPrintAppInfo+0x1d6>
 803225a:	1d3b      	adds	r3, r7, #4
 803225c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8032260:	461a      	mov	r2, r3
 8032262:	493a      	ldr	r1, [pc, #232]	@ (803234c <svl_dsmPrintAppInfo+0x2b0>)
 8032264:	2049      	movs	r0, #73	@ 0x49
 8032266:	f008 fd01 	bl	803ac6c <gos_traceTraceFormatted>
 803226a:	4603      	mov	r3, r0
 803226c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8032270:	e002      	b.n	8032278 <svl_dsmPrintAppInfo+0x1dc>
 8032272:	23ae      	movs	r3, #174	@ 0xae
 8032274:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build));
 8032278:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 803227c:	2b55      	cmp	r3, #85	@ 0x55
 803227e:	d11d      	bne.n	80322bc <svl_dsmPrintAppInfo+0x220>
 8032280:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8032284:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8032288:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
 803228c:	461a      	mov	r2, r3
 803228e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8032292:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8032296:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
 803229a:	4619      	mov	r1, r3
 803229c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80322a0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80322a4:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 80322a8:	9300      	str	r3, [sp, #0]
 80322aa:	460b      	mov	r3, r1
 80322ac:	4928      	ldr	r1, [pc, #160]	@ (8032350 <svl_dsmPrintAppInfo+0x2b4>)
 80322ae:	2049      	movs	r0, #73	@ 0x49
 80322b0:	f008 fcdc 	bl	803ac6c <gos_traceTraceFormatted>
 80322b4:	4603      	mov	r3, r0
 80322b6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80322ba:	e002      	b.n	80322c2 <svl_dsmPrintAppInfo+0x226>
 80322bc:	23ae      	movs	r3, #174	@ 0xae
 80322be:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days));
 80322c2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80322c6:	2b55      	cmp	r3, #85	@ 0x55
 80322c8:	d11e      	bne.n	8032308 <svl_dsmPrintAppInfo+0x26c>
 80322ca:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80322ce:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80322d2:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 80322d6:	461a      	mov	r2, r3
 80322d8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80322dc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80322e0:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 80322e4:	4619      	mov	r1, r3
 80322e6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80322ea:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80322ee:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 80322f2:	b29b      	uxth	r3, r3
 80322f4:	9300      	str	r3, [sp, #0]
 80322f6:	460b      	mov	r3, r1
 80322f8:	4916      	ldr	r1, [pc, #88]	@ (8032354 <svl_dsmPrintAppInfo+0x2b8>)
 80322fa:	2049      	movs	r0, #73	@ 0x49
 80322fc:	f008 fcb6 	bl	803ac6c <gos_traceTraceFormatted>
 8032300:	4603      	mov	r3, r0
 8032302:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8032306:	e002      	b.n	803230e <svl_dsmPrintAppInfo+0x272>
 8032308:	23ae      	movs	r3, #174	@ 0xae
 803230a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author));
 803230e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8032312:	2b55      	cmp	r3, #85	@ 0x55
 8032314:	d10b      	bne.n	803232e <svl_dsmPrintAppInfo+0x292>
 8032316:	1d3b      	adds	r3, r7, #4
 8032318:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 803231c:	461a      	mov	r2, r3
 803231e:	490e      	ldr	r1, [pc, #56]	@ (8032358 <svl_dsmPrintAppInfo+0x2bc>)
 8032320:	2049      	movs	r0, #73	@ 0x49
 8032322:	f008 fca3 	bl	803ac6c <gos_traceTraceFormatted>
 8032326:	4603      	mov	r3, r0
 8032328:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 803232c:	e002      	b.n	8032334 <svl_dsmPrintAppInfo+0x298>
 803232e:	23ae      	movs	r3, #174	@ 0xae
 8032330:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Application does not exist.
	}

	return printResult;
 8032334:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
}
 8032338:	4618      	mov	r0, r3
 803233a:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 803233e:	46bd      	mov	sp, r7
 8032340:	bd80      	pop	{r7, pc}
 8032342:	bf00      	nop
 8032344:	0803e930 	.word	0x0803e930
 8032348:	0803e7fc 	.word	0x0803e7fc
 803234c:	0803e810 	.word	0x0803e810
 8032350:	0803e824 	.word	0x0803e824
 8032354:	0803e844 	.word	0x0803e844
 8032358:	0803e864 	.word	0x0803e864
 803235c:	0803e950 	.word	0x0803e950

08032360 <svl_dsmDaemonTask>:
 *          it activates the related reactions - if any.
 *
 * @return  -
 */
GOS_STATIC void_t svl_dsmDaemonTask (void_t)
{
 8032360:	b580      	push	{r7, lr}
 8032362:	b082      	sub	sp, #8
 8032364:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 8032366:	2300      	movs	r3, #0
 8032368:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Disable scheduling to keep printed info consistent.
	GOS_DISABLE_SCHED
 803236a:	4b32      	ldr	r3, [pc, #200]	@ (8032434 <svl_dsmDaemonTask+0xd4>)
 803236c:	781b      	ldrb	r3, [r3, #0]
 803236e:	3301      	adds	r3, #1
 8032370:	b2da      	uxtb	r2, r3
 8032372:	4b30      	ldr	r3, [pc, #192]	@ (8032434 <svl_dsmDaemonTask+0xd4>)
 8032374:	701a      	strb	r2, [r3, #0]

	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 8032376:	f7ff fd17 	bl	8031da8 <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 803237a:	f7ff fd3d 	bl	8031df8 <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 803237e:	f7ff fddb 	bl	8031f38 <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 8032382:	f7ff fe8b 	bl	803209c <svl_dsmPrintAppInfo>

	// Enable scheduling, data printed.
	GOS_ENABLE_SCHED
 8032386:	4b2b      	ldr	r3, [pc, #172]	@ (8032434 <svl_dsmDaemonTask+0xd4>)
 8032388:	781b      	ldrb	r3, [r3, #0]
 803238a:	2b00      	cmp	r3, #0
 803238c:	d005      	beq.n	803239a <svl_dsmDaemonTask+0x3a>
 803238e:	4b29      	ldr	r3, [pc, #164]	@ (8032434 <svl_dsmDaemonTask+0xd4>)
 8032390:	781b      	ldrb	r3, [r3, #0]
 8032392:	3b01      	subs	r3, #1
 8032394:	b2da      	uxtb	r2, r3
 8032396:	4b27      	ldr	r3, [pc, #156]	@ (8032434 <svl_dsmDaemonTask+0xd4>)
 8032398:	701a      	strb	r2, [r3, #0]

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 803239a:	4b27      	ldr	r3, [pc, #156]	@ (8032438 <svl_dsmDaemonTask+0xd8>)
 803239c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803239e:	21c8      	movs	r1, #200	@ 0xc8
 80323a0:	4618      	mov	r0, r3
 80323a2:	f004 fb65 	bl	8036a70 <gos_taskSetPriority>
 80323a6:	2301      	movs	r3, #1
 80323a8:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 80323aa:	4b24      	ldr	r3, [pc, #144]	@ (803243c <svl_dsmDaemonTask+0xdc>)
 80323ac:	781a      	ldrb	r2, [r3, #0]
 80323ae:	4b24      	ldr	r3, [pc, #144]	@ (8032440 <svl_dsmDaemonTask+0xe0>)
 80323b0:	701a      	strb	r2, [r3, #0]
	deviceState     = requiredState;
 80323b2:	4a22      	ldr	r2, [pc, #136]	@ (803243c <svl_dsmDaemonTask+0xdc>)
 80323b4:	79bb      	ldrb	r3, [r7, #6]
 80323b6:	7013      	strb	r3, [r2, #0]
}
 80323b8:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 80323ba:	4b21      	ldr	r3, [pc, #132]	@ (8032440 <svl_dsmDaemonTask+0xe0>)
 80323bc:	781a      	ldrb	r2, [r3, #0]
 80323be:	4b1f      	ldr	r3, [pc, #124]	@ (803243c <svl_dsmDaemonTask+0xdc>)
 80323c0:	781b      	ldrb	r3, [r3, #0]
 80323c2:	429a      	cmp	r2, r3
 80323c4:	d031      	beq.n	803242a <svl_dsmDaemonTask+0xca>
 80323c6:	4b1f      	ldr	r3, [pc, #124]	@ (8032444 <svl_dsmDaemonTask+0xe4>)
 80323c8:	681b      	ldr	r3, [r3, #0]
 80323ca:	2b00      	cmp	r3, #0
 80323cc:	d02d      	beq.n	803242a <svl_dsmDaemonTask+0xca>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 80323ce:	2300      	movs	r3, #0
 80323d0:	71fb      	strb	r3, [r7, #7]
 80323d2:	e020      	b.n	8032416 <svl_dsmDaemonTask+0xb6>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 80323d4:	79fb      	ldrb	r3, [r7, #7]
 80323d6:	4a1c      	ldr	r2, [pc, #112]	@ (8032448 <svl_dsmDaemonTask+0xe8>)
 80323d8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80323dc:	4b18      	ldr	r3, [pc, #96]	@ (8032440 <svl_dsmDaemonTask+0xe0>)
 80323de:	781b      	ldrb	r3, [r3, #0]
 80323e0:	429a      	cmp	r2, r3
 80323e2:	d115      	bne.n	8032410 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].currState == deviceState &&
 80323e4:	79fb      	ldrb	r3, [r7, #7]
 80323e6:	4a18      	ldr	r2, [pc, #96]	@ (8032448 <svl_dsmDaemonTask+0xe8>)
 80323e8:	00db      	lsls	r3, r3, #3
 80323ea:	4413      	add	r3, r2
 80323ec:	785a      	ldrb	r2, [r3, #1]
 80323ee:	4b13      	ldr	r3, [pc, #76]	@ (803243c <svl_dsmDaemonTask+0xdc>)
 80323f0:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 80323f2:	429a      	cmp	r2, r3
 80323f4:	d10c      	bne.n	8032410 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].pReaction != NULL)
 80323f6:	79fb      	ldrb	r3, [r7, #7]
 80323f8:	4a13      	ldr	r2, [pc, #76]	@ (8032448 <svl_dsmDaemonTask+0xe8>)
 80323fa:	00db      	lsls	r3, r3, #3
 80323fc:	4413      	add	r3, r2
 80323fe:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 8032400:	2b00      	cmp	r3, #0
 8032402:	d005      	beq.n	8032410 <svl_dsmDaemonTask+0xb0>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 8032404:	79fb      	ldrb	r3, [r7, #7]
 8032406:	4a10      	ldr	r2, [pc, #64]	@ (8032448 <svl_dsmDaemonTask+0xe8>)
 8032408:	00db      	lsls	r3, r3, #3
 803240a:	4413      	add	r3, r2
 803240c:	685b      	ldr	r3, [r3, #4]
 803240e:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 8032410:	79fb      	ldrb	r3, [r7, #7]
 8032412:	3301      	adds	r3, #1
 8032414:	71fb      	strb	r3, [r7, #7]
 8032416:	79fa      	ldrb	r2, [r7, #7]
 8032418:	4b0a      	ldr	r3, [pc, #40]	@ (8032444 <svl_dsmDaemonTask+0xe4>)
 803241a:	681b      	ldr	r3, [r3, #0]
 803241c:	08db      	lsrs	r3, r3, #3
 803241e:	429a      	cmp	r2, r3
 8032420:	d3d8      	bcc.n	80323d4 <svl_dsmDaemonTask+0x74>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 8032422:	4b06      	ldr	r3, [pc, #24]	@ (803243c <svl_dsmDaemonTask+0xdc>)
 8032424:	781a      	ldrb	r2, [r3, #0]
 8032426:	4b06      	ldr	r3, [pc, #24]	@ (8032440 <svl_dsmDaemonTask+0xe0>)
 8032428:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 803242a:	2014      	movs	r0, #20
 803242c:	f003 fcd8 	bl	8035de0 <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 8032430:	e7c3      	b.n	80323ba <svl_dsmDaemonTask+0x5a>
 8032432:	bf00      	nop
 8032434:	2000b311 	.word	0x2000b311
 8032438:	20001670 	.word	0x20001670
 803243c:	20008e56 	.word	0x20008e56
 8032440:	20008e57 	.word	0x20008e57
 8032444:	2000689c 	.word	0x2000689c
 8032448:	0803fbd0 	.word	0x0803fbd0

0803244c <svl_ersInit>:

/*
 * Function: svl_ersInit
 */
gos_result_t svl_ersInit (void_t)
{
 803244c:	b580      	push	{r7, lr}
 803244e:	b082      	sub	sp, #8
 8032450:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8032452:	2355      	movs	r3, #85	@ 0x55
 8032454:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&ersEventsRequestMsg));
 8032456:	79fb      	ldrb	r3, [r7, #7]
 8032458:	2b55      	cmp	r3, #85	@ 0x55
 803245a:	d105      	bne.n	8032468 <svl_ersInit+0x1c>
 803245c:	4811      	ldr	r0, [pc, #68]	@ (80324a4 <svl_ersInit+0x58>)
 803245e:	f007 fb09 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8032462:	4603      	mov	r3, r0
 8032464:	71fb      	strb	r3, [r7, #7]
 8032466:	e001      	b.n	803246c <svl_ersInit+0x20>
 8032468:	23ae      	movs	r3, #174	@ 0xae
 803246a:	71fb      	strb	r3, [r7, #7]
	GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&ersEventsClearMsg));
 803246c:	79fb      	ldrb	r3, [r7, #7]
 803246e:	2b55      	cmp	r3, #85	@ 0x55
 8032470:	d105      	bne.n	803247e <svl_ersInit+0x32>
 8032472:	480d      	ldr	r0, [pc, #52]	@ (80324a8 <svl_ersInit+0x5c>)
 8032474:	f007 fafe 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8032478:	4603      	mov	r3, r0
 803247a:	71fb      	strb	r3, [r7, #7]
 803247c:	e001      	b.n	8032482 <svl_ersInit+0x36>
 803247e:	23ae      	movs	r3, #174	@ 0xae
 8032480:	71fb      	strb	r3, [r7, #7]
	GOS_CONCAT_RESULT(initResult, gos_mutexInit(&ersMutex));
 8032482:	79fb      	ldrb	r3, [r7, #7]
 8032484:	2b55      	cmp	r3, #85	@ 0x55
 8032486:	d105      	bne.n	8032494 <svl_ersInit+0x48>
 8032488:	4808      	ldr	r0, [pc, #32]	@ (80324ac <svl_ersInit+0x60>)
 803248a:	f006 f8c7 	bl	803861c <gos_mutexInit>
 803248e:	4603      	mov	r3, r0
 8032490:	71fb      	strb	r3, [r7, #7]
 8032492:	e001      	b.n	8032498 <svl_ersInit+0x4c>
 8032494:	23ae      	movs	r3, #174	@ 0xae
 8032496:	71fb      	strb	r3, [r7, #7]

	return initResult;
 8032498:	79fb      	ldrb	r3, [r7, #7]
}
 803249a:	4618      	mov	r0, r3
 803249c:	3708      	adds	r7, #8
 803249e:	46bd      	mov	sp, r7
 80324a0:	bd80      	pop	{r7, pc}
 80324a2:	bf00      	nop
 80324a4:	200016dc 	.word	0x200016dc
 80324a8:	200016ec 	.word	0x200016ec
 80324ac:	20008e60 	.word	0x20008e60

080324b0 <svl_ersConfigure>:

/*
 * Function: svl_ersConfigure
 */
gos_result_t svl_ersConfigure (svl_ersCfg_t* pCfg)
{
 80324b0:	b480      	push	{r7}
 80324b2:	b085      	sub	sp, #20
 80324b4:	af00      	add	r7, sp, #0
 80324b6:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 80324b8:	23ae      	movs	r3, #174	@ 0xae
 80324ba:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 80324bc:	687b      	ldr	r3, [r7, #4]
 80324be:	2b00      	cmp	r3, #0
 80324c0:	d011      	beq.n	80324e6 <svl_ersConfigure+0x36>
 80324c2:	687b      	ldr	r3, [r7, #4]
 80324c4:	681b      	ldr	r3, [r3, #0]
 80324c6:	2b00      	cmp	r3, #0
 80324c8:	d00d      	beq.n	80324e6 <svl_ersConfigure+0x36>
 80324ca:	687b      	ldr	r3, [r7, #4]
 80324cc:	685b      	ldr	r3, [r3, #4]
 80324ce:	2b00      	cmp	r3, #0
 80324d0:	d009      	beq.n	80324e6 <svl_ersConfigure+0x36>
	{
		ersReadFunction  = pCfg->readFunction;
 80324d2:	687b      	ldr	r3, [r7, #4]
 80324d4:	681b      	ldr	r3, [r3, #0]
 80324d6:	4a07      	ldr	r2, [pc, #28]	@ (80324f4 <svl_ersConfigure+0x44>)
 80324d8:	6013      	str	r3, [r2, #0]
		ersWriteFunction = pCfg->writeFunction;
 80324da:	687b      	ldr	r3, [r7, #4]
 80324dc:	685b      	ldr	r3, [r3, #4]
 80324de:	4a06      	ldr	r2, [pc, #24]	@ (80324f8 <svl_ersConfigure+0x48>)
 80324e0:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 80324e2:	2355      	movs	r3, #85	@ 0x55
 80324e4:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 80324e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80324e8:	4618      	mov	r0, r3
 80324ea:	3714      	adds	r7, #20
 80324ec:	46bd      	mov	sp, r7
 80324ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80324f2:	4770      	bx	lr
 80324f4:	20008e58 	.word	0x20008e58
 80324f8:	20008e5c 	.word	0x20008e5c

080324fc <svl_ersCreate>:

/*
 * Function: svl_ersCreate
 */
gos_result_t svl_ersCreate (u16_t index, u32_t trigger, u8_t* pEventData)
{
 80324fc:	b580      	push	{r7, lr}
 80324fe:	b088      	sub	sp, #32
 8032500:	af00      	add	r7, sp, #0
 8032502:	4603      	mov	r3, r0
 8032504:	60b9      	str	r1, [r7, #8]
 8032506:	607a      	str	r2, [r7, #4]
 8032508:	81fb      	strh	r3, [r7, #14]
	/*
	 * Local variables.
	 */
	gos_result_t createResult = GOS_ERROR;
 803250a:	23ae      	movs	r3, #174	@ 0xae
 803250c:	77fb      	strb	r3, [r7, #31]
	u32_t        numOfEntries = 0u;
 803250e:	2300      	movs	r3, #0
 8032510:	617b      	str	r3, [r7, #20]
	u32_t        address      = 0u;
 8032512:	2300      	movs	r3, #0
 8032514:	61bb      	str	r3, [r7, #24]

	/*
	 * Function code.
	 */
	if (ersWriteFunction != NULL && index < (u16_t)(ersEventsSize / sizeof(svl_ersEventDesc_t)))
 8032516:	4b3a      	ldr	r3, [pc, #232]	@ (8032600 <svl_ersCreate+0x104>)
 8032518:	681b      	ldr	r3, [r3, #0]
 803251a:	2b00      	cmp	r3, #0
 803251c:	d06b      	beq.n	80325f6 <svl_ersCreate+0xfa>
 803251e:	4b39      	ldr	r3, [pc, #228]	@ (8032604 <svl_ersCreate+0x108>)
 8032520:	681b      	ldr	r3, [r3, #0]
 8032522:	4a39      	ldr	r2, [pc, #228]	@ (8032608 <svl_ersCreate+0x10c>)
 8032524:	fba2 2303 	umull	r2, r3, r2, r3
 8032528:	091b      	lsrs	r3, r3, #4
 803252a:	b29b      	uxth	r3, r3
 803252c:	89fa      	ldrh	r2, [r7, #14]
 803252e:	429a      	cmp	r2, r3
 8032530:	d261      	bcs.n	80325f6 <svl_ersCreate+0xfa>
	{
		(void_t) gos_timeGet(&ersEvents[index].timeStamp);
 8032532:	89fb      	ldrh	r3, [r7, #14]
 8032534:	2256      	movs	r2, #86	@ 0x56
 8032536:	fb02 f303 	mul.w	r3, r2, r3
 803253a:	3340      	adds	r3, #64	@ 0x40
 803253c:	4a33      	ldr	r2, [pc, #204]	@ (803260c <svl_ersCreate+0x110>)
 803253e:	4413      	add	r3, r2
 8032540:	4618      	mov	r0, r3
 8032542:	f007 feeb 	bl	803a31c <gos_timeGet>
		ersEvents[index].trigger = trigger;
 8032546:	89fb      	ldrh	r3, [r7, #14]
 8032548:	4a30      	ldr	r2, [pc, #192]	@ (803260c <svl_ersCreate+0x110>)
 803254a:	2156      	movs	r1, #86	@ 0x56
 803254c:	fb01 f303 	mul.w	r3, r1, r3
 8032550:	4413      	add	r3, r2
 8032552:	3348      	adds	r3, #72	@ 0x48
 8032554:	68ba      	ldr	r2, [r7, #8]
 8032556:	f8c3 2002 	str.w	r2, [r3, #2]

		if (pEventData != NULL)
 803255a:	687b      	ldr	r3, [r7, #4]
 803255c:	2b00      	cmp	r3, #0
 803255e:	d00d      	beq.n	803257c <svl_ersCreate+0x80>
		{
			(void_t) memcpy((void_t*)ersEvents[index].eventData, (void_t*)pEventData, SVL_ERS_DATA_SIZE);
 8032560:	89fb      	ldrh	r3, [r7, #14]
 8032562:	2256      	movs	r2, #86	@ 0x56
 8032564:	fb02 f303 	mul.w	r3, r2, r3
 8032568:	3348      	adds	r3, #72	@ 0x48
 803256a:	4a28      	ldr	r2, [pc, #160]	@ (803260c <svl_ersCreate+0x110>)
 803256c:	4413      	add	r3, r2
 803256e:	3306      	adds	r3, #6
 8032570:	2208      	movs	r2, #8
 8032572:	6879      	ldr	r1, [r7, #4]
 8032574:	4618      	mov	r0, r3
 8032576:	f009 fe2c 	bl	803c1d2 <memcpy>
 803257a:	e00c      	b.n	8032596 <svl_ersCreate+0x9a>
		}
		else
		{
			// Event data not needed.
			(void_t) memset((void_t*)ersEvents[index].eventData, 0, SVL_ERS_DATA_SIZE);
 803257c:	89fb      	ldrh	r3, [r7, #14]
 803257e:	2256      	movs	r2, #86	@ 0x56
 8032580:	fb02 f303 	mul.w	r3, r2, r3
 8032584:	3348      	adds	r3, #72	@ 0x48
 8032586:	4a21      	ldr	r2, [pc, #132]	@ (803260c <svl_ersCreate+0x110>)
 8032588:	4413      	add	r3, r2
 803258a:	3306      	adds	r3, #6
 803258c:	2208      	movs	r2, #8
 803258e:	2100      	movs	r1, #0
 8032590:	4618      	mov	r0, r3
 8032592:	f009 fd97 	bl	803c0c4 <memset>
		}

		// Get the number of events.
		if (svl_ersGetNumOfEntries(&numOfEntries)          == GOS_SUCCESS &&
 8032596:	f107 0314 	add.w	r3, r7, #20
 803259a:	4618      	mov	r0, r3
 803259c:	f000 f87c 	bl	8032698 <svl_ersGetNumOfEntries>
 80325a0:	4603      	mov	r3, r0
 80325a2:	2b55      	cmp	r3, #85	@ 0x55
 80325a4:	d127      	bne.n	80325f6 <svl_ersCreate+0xfa>
			gos_mutexLock(&ersMutex, SVL_ERS_MUTEX_TMO_MS) == GOS_SUCCESS)
 80325a6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80325aa:	4819      	ldr	r0, [pc, #100]	@ (8032610 <svl_ersCreate+0x114>)
 80325ac:	f006 f850 	bl	8038650 <gos_mutexLock>
 80325b0:	4603      	mov	r3, r0
		if (svl_ersGetNumOfEntries(&numOfEntries)          == GOS_SUCCESS &&
 80325b2:	2b55      	cmp	r3, #85	@ 0x55
 80325b4:	d11f      	bne.n	80325f6 <svl_ersCreate+0xfa>
		{
			// Calculate next event address.
			address = SVL_ERS_ENTRY_START_ADDR + numOfEntries * sizeof(svl_ersEventDesc_t);
 80325b6:	697b      	ldr	r3, [r7, #20]
 80325b8:	2256      	movs	r2, #86	@ 0x56
 80325ba:	fb02 f303 	mul.w	r3, r2, r3
 80325be:	3304      	adds	r3, #4
 80325c0:	61bb      	str	r3, [r7, #24]

			// Write new fault.
			if (ersWriteFunction(address, (u8_t*)&ersEvents[index], sizeof(svl_ersEventDesc_t)) == GOS_SUCCESS)
 80325c2:	4b0f      	ldr	r3, [pc, #60]	@ (8032600 <svl_ersCreate+0x104>)
 80325c4:	681b      	ldr	r3, [r3, #0]
 80325c6:	89fa      	ldrh	r2, [r7, #14]
 80325c8:	2156      	movs	r1, #86	@ 0x56
 80325ca:	fb01 f202 	mul.w	r2, r1, r2
 80325ce:	490f      	ldr	r1, [pc, #60]	@ (803260c <svl_ersCreate+0x110>)
 80325d0:	4411      	add	r1, r2
 80325d2:	2256      	movs	r2, #86	@ 0x56
 80325d4:	69b8      	ldr	r0, [r7, #24]
 80325d6:	4798      	blx	r3
 80325d8:	4603      	mov	r3, r0
 80325da:	2b55      	cmp	r3, #85	@ 0x55
 80325dc:	d108      	bne.n	80325f0 <svl_ersCreate+0xf4>
			{
				// Update number of entries.
				numOfEntries++;
 80325de:	697b      	ldr	r3, [r7, #20]
 80325e0:	3301      	adds	r3, #1
 80325e2:	617b      	str	r3, [r7, #20]

				createResult = svl_ersSetNumOfEntries(numOfEntries);
 80325e4:	697b      	ldr	r3, [r7, #20]
 80325e6:	4618      	mov	r0, r3
 80325e8:	f000 f884 	bl	80326f4 <svl_ersSetNumOfEntries>
 80325ec:	4603      	mov	r3, r0
 80325ee:	77fb      	strb	r3, [r7, #31]
			else
			{
				// ERS write failed.
			}

			(void_t) gos_mutexUnlock(&ersMutex);
 80325f0:	4807      	ldr	r0, [pc, #28]	@ (8032610 <svl_ersCreate+0x114>)
 80325f2:	f006 f933 	bl	803885c <gos_mutexUnlock>
	else
	{
		// Index out of range.
	}

	return createResult;
 80325f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80325f8:	4618      	mov	r0, r3
 80325fa:	3720      	adds	r7, #32
 80325fc:	46bd      	mov	sp, r7
 80325fe:	bd80      	pop	{r7, pc}
 8032600:	20008e5c 	.word	0x20008e5c
 8032604:	200013d0 	.word	0x200013d0
 8032608:	2fa0be83 	.word	0x2fa0be83
 803260c:	20001324 	.word	0x20001324
 8032610:	20008e60 	.word	0x20008e60

08032614 <svl_ersRead>:

/*
 * Function: svl_ersRead
 */
gos_result_t svl_ersRead (u16_t index, u8_t* pTarget)
{
 8032614:	b580      	push	{r7, lr}
 8032616:	b086      	sub	sp, #24
 8032618:	af00      	add	r7, sp, #0
 803261a:	4603      	mov	r3, r0
 803261c:	6039      	str	r1, [r7, #0]
 803261e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Local variables.
	 */
	gos_result_t readResult   = GOS_ERROR;
 8032620:	23ae      	movs	r3, #174	@ 0xae
 8032622:	75fb      	strb	r3, [r7, #23]
	u32_t        numOfEntries = 0u;
 8032624:	2300      	movs	r3, #0
 8032626:	60fb      	str	r3, [r7, #12]
	u32_t        address      = 0u;
 8032628:	2300      	movs	r3, #0
 803262a:	613b      	str	r3, [r7, #16]

	/*
	 * Function code.
	 */
	if (pTarget                                        != NULL &&
 803262c:	683b      	ldr	r3, [r7, #0]
 803262e:	2b00      	cmp	r3, #0
 8032630:	d028      	beq.n	8032684 <svl_ersRead+0x70>
		ersReadFunction                                != NULL &&
 8032632:	4b17      	ldr	r3, [pc, #92]	@ (8032690 <svl_ersRead+0x7c>)
 8032634:	681b      	ldr	r3, [r3, #0]
	if (pTarget                                        != NULL &&
 8032636:	2b00      	cmp	r3, #0
 8032638:	d024      	beq.n	8032684 <svl_ersRead+0x70>
		svl_ersGetNumOfEntries(&numOfEntries)          == GOS_SUCCESS &&
 803263a:	f107 030c 	add.w	r3, r7, #12
 803263e:	4618      	mov	r0, r3
 8032640:	f000 f82a 	bl	8032698 <svl_ersGetNumOfEntries>
 8032644:	4603      	mov	r3, r0
		ersReadFunction                                != NULL &&
 8032646:	2b55      	cmp	r3, #85	@ 0x55
 8032648:	d11c      	bne.n	8032684 <svl_ersRead+0x70>
		index                                          < numOfEntries &&
 803264a:	88fa      	ldrh	r2, [r7, #6]
 803264c:	68fb      	ldr	r3, [r7, #12]
		svl_ersGetNumOfEntries(&numOfEntries)          == GOS_SUCCESS &&
 803264e:	429a      	cmp	r2, r3
 8032650:	d218      	bcs.n	8032684 <svl_ersRead+0x70>
		gos_mutexLock(&ersMutex, SVL_ERS_MUTEX_TMO_MS) == GOS_SUCCESS)
 8032652:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8032656:	480f      	ldr	r0, [pc, #60]	@ (8032694 <svl_ersRead+0x80>)
 8032658:	f005 fffa 	bl	8038650 <gos_mutexLock>
 803265c:	4603      	mov	r3, r0
		index                                          < numOfEntries &&
 803265e:	2b55      	cmp	r3, #85	@ 0x55
 8032660:	d110      	bne.n	8032684 <svl_ersRead+0x70>
	{
		address = SVL_ERS_ENTRY_START_ADDR + index * sizeof(svl_ersEventDesc_t);
 8032662:	88fb      	ldrh	r3, [r7, #6]
 8032664:	2256      	movs	r2, #86	@ 0x56
 8032666:	fb02 f303 	mul.w	r3, r2, r3
 803266a:	3304      	adds	r3, #4
 803266c:	613b      	str	r3, [r7, #16]
		readResult = ersReadFunction(address, pTarget, sizeof(svl_ersEventDesc_t));
 803266e:	4b08      	ldr	r3, [pc, #32]	@ (8032690 <svl_ersRead+0x7c>)
 8032670:	681b      	ldr	r3, [r3, #0]
 8032672:	2256      	movs	r2, #86	@ 0x56
 8032674:	6839      	ldr	r1, [r7, #0]
 8032676:	6938      	ldr	r0, [r7, #16]
 8032678:	4798      	blx	r3
 803267a:	4603      	mov	r3, r0
 803267c:	75fb      	strb	r3, [r7, #23]
		(void_t) gos_mutexUnlock(&ersMutex);
 803267e:	4805      	ldr	r0, [pc, #20]	@ (8032694 <svl_ersRead+0x80>)
 8032680:	f006 f8ec 	bl	803885c <gos_mutexUnlock>
	else
	{
		// Error.
	}

	return readResult;
 8032684:	7dfb      	ldrb	r3, [r7, #23]
}
 8032686:	4618      	mov	r0, r3
 8032688:	3718      	adds	r7, #24
 803268a:	46bd      	mov	sp, r7
 803268c:	bd80      	pop	{r7, pc}
 803268e:	bf00      	nop
 8032690:	20008e58 	.word	0x20008e58
 8032694:	20008e60 	.word	0x20008e60

08032698 <svl_ersGetNumOfEntries>:

/*
 * Function: svl_ersGetNumOfEntries
 */
gos_result_t svl_ersGetNumOfEntries (u32_t* pNumOfEntries)
{
 8032698:	b580      	push	{r7, lr}
 803269a:	b084      	sub	sp, #16
 803269c:	af00      	add	r7, sp, #0
 803269e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getNumOfEntriesResult = GOS_ERROR;
 80326a0:	23ae      	movs	r3, #174	@ 0xae
 80326a2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (ersReadFunction != NULL &&
 80326a4:	4b0d      	ldr	r3, [pc, #52]	@ (80326dc <svl_ersGetNumOfEntries+0x44>)
 80326a6:	681b      	ldr	r3, [r3, #0]
 80326a8:	2b00      	cmp	r3, #0
 80326aa:	d00f      	beq.n	80326cc <svl_ersGetNumOfEntries+0x34>
		gos_mutexLock(&ersMutex, SVL_ERS_MUTEX_TMO_MS) == GOS_SUCCESS)
 80326ac:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80326b0:	480b      	ldr	r0, [pc, #44]	@ (80326e0 <svl_ersGetNumOfEntries+0x48>)
 80326b2:	f005 ffcd 	bl	8038650 <gos_mutexLock>
 80326b6:	4603      	mov	r3, r0
	if (ersReadFunction != NULL &&
 80326b8:	2b55      	cmp	r3, #85	@ 0x55
 80326ba:	d107      	bne.n	80326cc <svl_ersGetNumOfEntries+0x34>
	{
		getNumOfEntriesResult = ersReadFunction(SVL_ERS_ENTRY_NUM_ADDR, (u8_t*)pNumOfEntries, sizeof(*pNumOfEntries));
 80326bc:	4b07      	ldr	r3, [pc, #28]	@ (80326dc <svl_ersGetNumOfEntries+0x44>)
 80326be:	681b      	ldr	r3, [r3, #0]
 80326c0:	2204      	movs	r2, #4
 80326c2:	6879      	ldr	r1, [r7, #4]
 80326c4:	2000      	movs	r0, #0
 80326c6:	4798      	blx	r3
 80326c8:	4603      	mov	r3, r0
 80326ca:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Read function is NULL.
	}

	(void_t) gos_mutexUnlock(&ersMutex);
 80326cc:	4804      	ldr	r0, [pc, #16]	@ (80326e0 <svl_ersGetNumOfEntries+0x48>)
 80326ce:	f006 f8c5 	bl	803885c <gos_mutexUnlock>

	return getNumOfEntriesResult;
 80326d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80326d4:	4618      	mov	r0, r3
 80326d6:	3710      	adds	r7, #16
 80326d8:	46bd      	mov	sp, r7
 80326da:	bd80      	pop	{r7, pc}
 80326dc:	20008e58 	.word	0x20008e58
 80326e0:	20008e60 	.word	0x20008e60

080326e4 <svl_ersClearEvents>:

/*
 * Function: svl_ersClearEvents
 */
gos_result_t svl_ersClearEvents (void_t)
{
 80326e4:	b580      	push	{r7, lr}
 80326e6:	af00      	add	r7, sp, #0
	return svl_ersSetNumOfEntries(0);
 80326e8:	2000      	movs	r0, #0
 80326ea:	f000 f803 	bl	80326f4 <svl_ersSetNumOfEntries>
 80326ee:	4603      	mov	r3, r0
}
 80326f0:	4618      	mov	r0, r3
 80326f2:	bd80      	pop	{r7, pc}

080326f4 <svl_ersSetNumOfEntries>:
 *
 * @retval  GOS_SUCCESS : Number setting successful.
 * @retval  GOS_ERROR   : Write failed.
 */
GOS_STATIC gos_result_t svl_ersSetNumOfEntries (u32_t numOfEntries)
{
 80326f4:	b580      	push	{r7, lr}
 80326f6:	b084      	sub	sp, #16
 80326f8:	af00      	add	r7, sp, #0
 80326fa:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setNumOfEntriesResult = GOS_ERROR;
 80326fc:	23ae      	movs	r3, #174	@ 0xae
 80326fe:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (ersWriteFunction != NULL)
 8032700:	4b08      	ldr	r3, [pc, #32]	@ (8032724 <svl_ersSetNumOfEntries+0x30>)
 8032702:	681b      	ldr	r3, [r3, #0]
 8032704:	2b00      	cmp	r3, #0
 8032706:	d007      	beq.n	8032718 <svl_ersSetNumOfEntries+0x24>
	{
		setNumOfEntriesResult = ersWriteFunction(SVL_ERS_ENTRY_NUM_ADDR, (u8_t*)&numOfEntries, sizeof(numOfEntries));
 8032708:	4b06      	ldr	r3, [pc, #24]	@ (8032724 <svl_ersSetNumOfEntries+0x30>)
 803270a:	681b      	ldr	r3, [r3, #0]
 803270c:	1d39      	adds	r1, r7, #4
 803270e:	2204      	movs	r2, #4
 8032710:	2000      	movs	r0, #0
 8032712:	4798      	blx	r3
 8032714:	4603      	mov	r3, r0
 8032716:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Read function is NULL.
	}

	return setNumOfEntriesResult;
 8032718:	7bfb      	ldrb	r3, [r7, #15]
}
 803271a:	4618      	mov	r0, r3
 803271c:	3710      	adds	r7, #16
 803271e:	46bd      	mov	sp, r7
 8032720:	bd80      	pop	{r7, pc}
 8032722:	bf00      	nop
 8032724:	20008e5c 	.word	0x20008e5c

08032728 <svl_ersEventsReqCallback>:
 * @details TODO
 *
 * @return  -
 */
GOS_STATIC void_t svl_ersEventsReqCallback (void_t)
{
 8032728:	b580      	push	{r7, lr}
 803272a:	b084      	sub	sp, #16
 803272c:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	u32_t numOfEvents = 0u;
 803272e:	2300      	movs	r3, #0
 8032730:	603b      	str	r3, [r7, #0]
	u16_t eventIdx    = 0u;
 8032732:	2300      	movs	r3, #0
 8032734:	80fb      	strh	r3, [r7, #6]

	/*
	 * Function code.
	 */
	(void_t) svl_ersGetNumOfEntries(&numOfEvents);
 8032736:	463b      	mov	r3, r7
 8032738:	4618      	mov	r0, r3
 803273a:	f7ff ffad 	bl	8032698 <svl_ersGetNumOfEntries>

	for (eventIdx = 0u; eventIdx < numOfEvents; eventIdx++)
 803273e:	2300      	movs	r3, #0
 8032740:	80fb      	strh	r3, [r7, #6]
 8032742:	e00d      	b.n	8032760 <svl_ersEventsReqCallback+0x38>
	{
		(void_t) svl_ersRead(eventIdx, ersBuffer + eventIdx * sizeof(svl_ersEventDesc_t));
 8032744:	88fb      	ldrh	r3, [r7, #6]
 8032746:	2256      	movs	r2, #86	@ 0x56
 8032748:	fb02 f303 	mul.w	r3, r2, r3
 803274c:	4a13      	ldr	r2, [pc, #76]	@ (803279c <svl_ersEventsReqCallback+0x74>)
 803274e:	441a      	add	r2, r3
 8032750:	88fb      	ldrh	r3, [r7, #6]
 8032752:	4611      	mov	r1, r2
 8032754:	4618      	mov	r0, r3
 8032756:	f7ff ff5d 	bl	8032614 <svl_ersRead>
	for (eventIdx = 0u; eventIdx < numOfEvents; eventIdx++)
 803275a:	88fb      	ldrh	r3, [r7, #6]
 803275c:	3301      	adds	r3, #1
 803275e:	80fb      	strh	r3, [r7, #6]
 8032760:	88fa      	ldrh	r2, [r7, #6]
 8032762:	683b      	ldr	r3, [r7, #0]
 8032764:	429a      	cmp	r2, r3
 8032766:	d3ed      	bcc.n	8032744 <svl_ersEventsReqCallback+0x1c>
	}

	(void_t) gos_gcpTransmitMessage(
 8032768:	683b      	ldr	r3, [r7, #0]
 803276a:	b29b      	uxth	r3, r3
 803276c:	461a      	mov	r2, r3
 803276e:	0092      	lsls	r2, r2, #2
 8032770:	441a      	add	r2, r3
 8032772:	4611      	mov	r1, r2
 8032774:	0108      	lsls	r0, r1, #4
 8032776:	4611      	mov	r1, r2
 8032778:	4602      	mov	r2, r0
 803277a:	440a      	add	r2, r1
 803277c:	4413      	add	r3, r2
 803277e:	b29b      	uxth	r3, r3
 8032780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8032784:	9200      	str	r2, [sp, #0]
 8032786:	4a05      	ldr	r2, [pc, #20]	@ (803279c <svl_ersEventsReqCallback+0x74>)
 8032788:	f644 2101 	movw	r1, #18945	@ 0x4a01
 803278c:	2000      	movs	r0, #0
 803278e:	f005 f9b9 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_ERS_SYSMON_MSG_EVENTS_GET_RESP,
			(void_t*)ersBuffer,
			numOfEvents * sizeof(svl_ersEventDesc_t),
			0xFFFF);
}
 8032792:	bf00      	nop
 8032794:	3708      	adds	r7, #8
 8032796:	46bd      	mov	sp, r7
 8032798:	bd80      	pop	{r7, pc}
 803279a:	bf00      	nop
 803279c:	20008e64 	.word	0x20008e64

080327a0 <svl_ersEventsClrCallback>:
 * @details TODO
 *
 * @return  -
 */
GOS_STATIC void_t svl_ersEventsClrCallback (void_t)
{
 80327a0:	b580      	push	{r7, lr}
 80327a2:	b084      	sub	sp, #16
 80327a4:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	u32_t eventNum = 0;
 80327a6:	2300      	movs	r3, #0
 80327a8:	607b      	str	r3, [r7, #4]

	/*
	 * Function code.
	 */
	(void_t) svl_ersGetNumOfEntries(&eventNum);
 80327aa:	1d3b      	adds	r3, r7, #4
 80327ac:	4618      	mov	r0, r3
 80327ae:	f7ff ff73 	bl	8032698 <svl_ersGetNumOfEntries>
	(void_t) svl_ersClearEvents();
 80327b2:	f7ff ff97 	bl	80326e4 <svl_ersClearEvents>
	(void_t) svl_ersGetNumOfEntries(&eventNum);
 80327b6:	1d3b      	adds	r3, r7, #4
 80327b8:	4618      	mov	r0, r3
 80327ba:	f7ff ff6d 	bl	8032698 <svl_ersGetNumOfEntries>

	(void_t) gos_gcpTransmitMessage(
 80327be:	1d3a      	adds	r2, r7, #4
 80327c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80327c4:	9300      	str	r3, [sp, #0]
 80327c6:	2304      	movs	r3, #4
 80327c8:	f644 2102 	movw	r1, #18946	@ 0x4a02
 80327cc:	2000      	movs	r0, #0
 80327ce:	f005 f999 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_ERS_SYSMON_MSG_EVENTS_CLEAR_RESP,
			(void_t*)&eventNum,
			sizeof(eventNum),
			0xFFFF);
}
 80327d2:	bf00      	nop
 80327d4:	3708      	adds	r7, #8
 80327d6:	46bd      	mov	sp, r7
 80327d8:	bd80      	pop	{r7, pc}
	...

080327dc <svl_iplInit>:

/*
 * Function: svl_iplInit
 */
gos_result_t svl_iplInit (void_t)
{
 80327dc:	b580      	push	{r7, lr}
 80327de:	b082      	sub	sp, #8
 80327e0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 80327e2:	23ae      	movs	r3, #174	@ 0xae
 80327e4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIplTaskDesc, NULL);
 80327e6:	2100      	movs	r1, #0
 80327e8:	4804      	ldr	r0, [pc, #16]	@ (80327fc <svl_iplInit+0x20>)
 80327ea:	f003 f967 	bl	8035abc <gos_taskRegister>
 80327ee:	4603      	mov	r3, r0
 80327f0:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80327f2:	79fb      	ldrb	r3, [r7, #7]
}
 80327f4:	4618      	mov	r0, r3
 80327f6:	3708      	adds	r7, #8
 80327f8:	46bd      	mov	sp, r7
 80327fa:	bd80      	pop	{r7, pc}
 80327fc:	200016fc 	.word	0x200016fc

08032800 <svl_iplRegisterUserMsg>:

/*
 * Function: svl_iplRegisterUserMsg
 */
gos_result_t svl_iplRegisterUserMsg (svl_iplUserMsgDesc_t* pUserMsgDesc)
{
 8032800:	b580      	push	{r7, lr}
 8032802:	b084      	sub	sp, #16
 8032804:	af00      	add	r7, sp, #0
 8032806:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t registerResult = GOS_ERROR;
 8032808:	23ae      	movs	r3, #174	@ 0xae
 803280a:	73fb      	strb	r3, [r7, #15]
	u8_t         lutIndex       = 0u;
 803280c:	2300      	movs	r3, #0
 803280e:	73bb      	strb	r3, [r7, #14]

	/*
	 * Function code.
	 */
	if (pUserMsgDesc != NULL)
 8032810:	687b      	ldr	r3, [r7, #4]
 8032812:	2b00      	cmp	r3, #0
 8032814:	d01b      	beq.n	803284e <svl_iplRegisterUserMsg+0x4e>
	{
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 8032816:	2300      	movs	r3, #0
 8032818:	73bb      	strb	r3, [r7, #14]
 803281a:	e015      	b.n	8032848 <svl_iplRegisterUserMsg+0x48>
		{
			if (userMsgLut[lutIndex].callback == NULL)
 803281c:	7bbb      	ldrb	r3, [r7, #14]
 803281e:	4a0e      	ldr	r2, [pc, #56]	@ (8032858 <svl_iplRegisterUserMsg+0x58>)
 8032820:	00db      	lsls	r3, r3, #3
 8032822:	4413      	add	r3, r2
 8032824:	685b      	ldr	r3, [r3, #4]
 8032826:	2b00      	cmp	r3, #0
 8032828:	d10b      	bne.n	8032842 <svl_iplRegisterUserMsg+0x42>
			{
				(void_t) memcpy((void_t*)&userMsgLut[lutIndex], (void_t*)pUserMsgDesc, sizeof(*pUserMsgDesc));
 803282a:	7bbb      	ldrb	r3, [r7, #14]
 803282c:	00db      	lsls	r3, r3, #3
 803282e:	4a0a      	ldr	r2, [pc, #40]	@ (8032858 <svl_iplRegisterUserMsg+0x58>)
 8032830:	4413      	add	r3, r2
 8032832:	2208      	movs	r2, #8
 8032834:	6879      	ldr	r1, [r7, #4]
 8032836:	4618      	mov	r0, r3
 8032838:	f009 fccb 	bl	803c1d2 <memcpy>
				registerResult = GOS_SUCCESS;
 803283c:	2355      	movs	r3, #85	@ 0x55
 803283e:	73fb      	strb	r3, [r7, #15]
				break;
 8032840:	e005      	b.n	803284e <svl_iplRegisterUserMsg+0x4e>
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 8032842:	7bbb      	ldrb	r3, [r7, #14]
 8032844:	3301      	adds	r3, #1
 8032846:	73bb      	strb	r3, [r7, #14]
 8032848:	7bbb      	ldrb	r3, [r7, #14]
 803284a:	2b07      	cmp	r3, #7
 803284c:	d9e6      	bls.n	803281c <svl_iplRegisterUserMsg+0x1c>
	else
	{
		// NULL pointer.
	}

	return registerResult;
 803284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8032850:	4618      	mov	r0, r3
 8032852:	3710      	adds	r7, #16
 8032854:	46bd      	mov	sp, r7
 8032856:	bd80      	pop	{r7, pc}
 8032858:	2000a61c 	.word	0x2000a61c

0803285c <svl_iplConfigure>:

/*
 * Function: svl_iplConfigure
 */
gos_result_t svl_iplConfigure (svl_iplTransmitFunction transmitFunc, svl_iplReceiveFunction receiveFunc)
{
 803285c:	b480      	push	{r7}
 803285e:	b085      	sub	sp, #20
 8032860:	af00      	add	r7, sp, #0
 8032862:	6078      	str	r0, [r7, #4]
 8032864:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_ERROR;
 8032866:	23ae      	movs	r3, #174	@ 0xae
 8032868:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	svl_iplTransmit = transmitFunc;
 803286a:	4a0f      	ldr	r2, [pc, #60]	@ (80328a8 <svl_iplConfigure+0x4c>)
 803286c:	687b      	ldr	r3, [r7, #4]
 803286e:	6013      	str	r3, [r2, #0]
	svl_iplReceive  = receiveFunc;
 8032870:	4a0e      	ldr	r2, [pc, #56]	@ (80328ac <svl_iplConfigure+0x50>)
 8032872:	683b      	ldr	r3, [r7, #0]
 8032874:	6013      	str	r3, [r2, #0]

	// Set IPL state machine based on NULL pointer check.
	if (svl_iplTransmit != NULL && svl_iplReceive != NULL)
 8032876:	4b0c      	ldr	r3, [pc, #48]	@ (80328a8 <svl_iplConfigure+0x4c>)
 8032878:	681b      	ldr	r3, [r3, #0]
 803287a:	2b00      	cmp	r3, #0
 803287c:	d009      	beq.n	8032892 <svl_iplConfigure+0x36>
 803287e:	4b0b      	ldr	r3, [pc, #44]	@ (80328ac <svl_iplConfigure+0x50>)
 8032880:	681b      	ldr	r3, [r3, #0]
 8032882:	2b00      	cmp	r3, #0
 8032884:	d005      	beq.n	8032892 <svl_iplConfigure+0x36>
	{
		iplState = SVL_IPL_STATE_DISCOVER_START;
 8032886:	4b0a      	ldr	r3, [pc, #40]	@ (80328b0 <svl_iplConfigure+0x54>)
 8032888:	2201      	movs	r2, #1
 803288a:	701a      	strb	r2, [r3, #0]
		configureResult = GOS_SUCCESS;
 803288c:	2355      	movs	r3, #85	@ 0x55
 803288e:	73fb      	strb	r3, [r7, #15]
 8032890:	e002      	b.n	8032898 <svl_iplConfigure+0x3c>
	}
	else
	{
		iplState = SVL_IPL_STATE_NOT_CONFIGURED;
 8032892:	4b07      	ldr	r3, [pc, #28]	@ (80328b0 <svl_iplConfigure+0x54>)
 8032894:	2200      	movs	r2, #0
 8032896:	701a      	strb	r2, [r3, #0]
	}

	return configureResult;
 8032898:	7bfb      	ldrb	r3, [r7, #15]
}
 803289a:	4618      	mov	r0, r3
 803289c:	3714      	adds	r7, #20
 803289e:	46bd      	mov	sp, r7
 80328a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80328a4:	4770      	bx	lr
 80328a6:	bf00      	nop
 80328a8:	2000a65c 	.word	0x2000a65c
 80328ac:	2000a660 	.word	0x2000a660
 80328b0:	20009664 	.word	0x20009664

080328b4 <svl_iplSendMessage>:

/*
 * Function: svl_iplSendMessage
 */
gos_result_t svl_iplSendMessage (u32_t msgId, u8_t* pData, u32_t dataLength)
{
 80328b4:	b580      	push	{r7, lr}
 80328b6:	b08a      	sub	sp, #40	@ 0x28
 80328b8:	af00      	add	r7, sp, #0
 80328ba:	60f8      	str	r0, [r7, #12]
 80328bc:	60b9      	str	r1, [r7, #8]
 80328be:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t       sendResult = GOS_ERROR;
 80328c0:	23ae      	movs	r3, #174	@ 0xae
 80328c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	svl_iplMsgHeader_t header;

	/*
	 * Function code.
	 */
	header.messageId     = msgId;
 80328c6:	68fb      	ldr	r3, [r7, #12]
 80328c8:	617b      	str	r3, [r7, #20]
	header.messageLength = dataLength;
 80328ca:	687b      	ldr	r3, [r7, #4]
 80328cc:	61bb      	str	r3, [r7, #24]

	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 80328ce:	f107 0314 	add.w	r3, r7, #20
 80328d2:	330c      	adds	r3, #12
 80328d4:	461a      	mov	r2, r3
 80328d6:	6879      	ldr	r1, [r7, #4]
 80328d8:	68b8      	ldr	r0, [r7, #8]
 80328da:	f7fb fc5f 	bl	802e19c <drv_crcGetCrc32>
 80328de:	4603      	mov	r3, r0
 80328e0:	2b55      	cmp	r3, #85	@ 0x55
 80328e2:	d117      	bne.n	8032914 <svl_iplSendMessage+0x60>
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 80328e4:	4b0e      	ldr	r3, [pc, #56]	@ (8032920 <svl_iplSendMessage+0x6c>)
 80328e6:	681b      	ldr	r3, [r3, #0]
 80328e8:	f107 0014 	add.w	r0, r7, #20
 80328ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80328f0:	2110      	movs	r1, #16
 80328f2:	4798      	blx	r3
 80328f4:	4603      	mov	r3, r0
	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 80328f6:	2b55      	cmp	r3, #85	@ 0x55
 80328f8:	d10c      	bne.n	8032914 <svl_iplSendMessage+0x60>
		svl_iplTransmit(pData, dataLength, 1000u) == GOS_SUCCESS)
 80328fa:	4b09      	ldr	r3, [pc, #36]	@ (8032920 <svl_iplSendMessage+0x6c>)
 80328fc:	681b      	ldr	r3, [r3, #0]
 80328fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8032902:	6879      	ldr	r1, [r7, #4]
 8032904:	68b8      	ldr	r0, [r7, #8]
 8032906:	4798      	blx	r3
 8032908:	4603      	mov	r3, r0
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 803290a:	2b55      	cmp	r3, #85	@ 0x55
 803290c:	d102      	bne.n	8032914 <svl_iplSendMessage+0x60>
	{
		sendResult = GOS_SUCCESS;
 803290e:	2355      	movs	r3, #85	@ 0x55
 8032910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	else
	{
		// Error.
	}

	return sendResult;
 8032914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8032918:	4618      	mov	r0, r3
 803291a:	3728      	adds	r7, #40	@ 0x28
 803291c:	46bd      	mov	sp, r7
 803291e:	bd80      	pop	{r7, pc}
 8032920:	2000a65c 	.word	0x2000a65c

08032924 <svl_iplDaemon>:
 * @details Handles IPL state machine and incoming IPL messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_iplDaemon (void_t)
{
 8032924:	b590      	push	{r4, r7, lr}
 8032926:	b087      	sub	sp, #28
 8032928:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t               lutIndex = 0u;
 803292a:	2300      	movs	r3, #0
 803292c:	75fb      	strb	r3, [r7, #23]
	/*
	 * Function code.
	 */
	for (;;)
	{
		switch (iplState)
 803292e:	4b9b      	ldr	r3, [pc, #620]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032930:	781b      	ldrb	r3, [r3, #0]
 8032932:	2b07      	cmp	r3, #7
 8032934:	f200 8352 	bhi.w	8032fdc <svl_iplDaemon+0x6b8>
 8032938:	a201      	add	r2, pc, #4	@ (adr r2, 8032940 <svl_iplDaemon+0x1c>)
 803293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803293e:	bf00      	nop
 8032940:	08032fdd 	.word	0x08032fdd
 8032944:	08032961 	.word	0x08032961
 8032948:	0803298f 	.word	0x0803298f
 803294c:	08032a3f 	.word	0x08032a3f
 8032950:	08032a47 	.word	0x08032a47
 8032954:	08032aeb 	.word	0x08032aeb
 8032958:	08032af3 	.word	0x08032af3
 803295c:	08032bcd 	.word	0x08032bcd
				// Wait until transmit and receive functions are registered.
				break;
			}
			case SVL_IPL_STATE_DISCOVER_START:
			{
				attemptCount++;
 8032960:	4b8f      	ldr	r3, [pc, #572]	@ (8032ba0 <svl_iplDaemon+0x27c>)
 8032962:	781b      	ldrb	r3, [r3, #0]
 8032964:	3301      	adds	r3, #1
 8032966:	b2da      	uxtb	r2, r3
 8032968:	4b8d      	ldr	r3, [pc, #564]	@ (8032ba0 <svl_iplDaemon+0x27c>)
 803296a:	701a      	strb	r2, [r3, #0]

				if (attemptCount <= SVL_IPL_MAX_ATTEMPTS)
 803296c:	4b8c      	ldr	r3, [pc, #560]	@ (8032ba0 <svl_iplDaemon+0x27c>)
 803296e:	781b      	ldrb	r3, [r3, #0]
 8032970:	2b05      	cmp	r3, #5
 8032972:	d803      	bhi.n	803297c <svl_iplDaemon+0x58>
				{
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery start...\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER;
 8032974:	4b89      	ldr	r3, [pc, #548]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032976:	2202      	movs	r2, #2
 8032978:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);

					// If task gets resumed externally, restart state-machine.
					attemptCount = 0u;
				}
				break;
 803297a:	e32f      	b.n	8032fdc <svl_iplDaemon+0x6b8>
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);
 803297c:	4b89      	ldr	r3, [pc, #548]	@ (8032ba4 <svl_iplDaemon+0x280>)
 803297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032980:	4618      	mov	r0, r3
 8032982:	f003 fb85 	bl	8036090 <gos_taskSuspend>
					attemptCount = 0u;
 8032986:	4b86      	ldr	r3, [pc, #536]	@ (8032ba0 <svl_iplDaemon+0x27c>)
 8032988:	2200      	movs	r2, #0
 803298a:	701a      	strb	r2, [r3, #0]
				break;
 803298c:	e326      	b.n	8032fdc <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_DISCOVER:
			{
				msgHeader.messageId     = IPL_MSG_ID_DISCOVERY;
 803298e:	2301      	movs	r3, #1
 8032990:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(discoveryMsg);
 8032992:	2340      	movs	r3, #64	@ 0x40
 8032994:	60bb      	str	r3, [r7, #8]

				(void_t) strcpy(discoveryMsg.masterDeviceId, "STM32F446-0001");
 8032996:	4a84      	ldr	r2, [pc, #528]	@ (8032ba8 <svl_iplDaemon+0x284>)
 8032998:	4b84      	ldr	r3, [pc, #528]	@ (8032bac <svl_iplDaemon+0x288>)
 803299a:	4614      	mov	r4, r2
 803299c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 803299e:	c407      	stmia	r4!, {r0, r1, r2}
 80329a0:	8023      	strh	r3, [r4, #0]
 80329a2:	3402      	adds	r4, #2
 80329a4:	0c1b      	lsrs	r3, r3, #16
 80329a6:	7023      	strb	r3, [r4, #0]
				(void_t) drv_crcGetCrc32((u8_t*)&discoveryMsg, sizeof(discoveryMsg), &msgHeader.messageCrc);
 80329a8:	1d3b      	adds	r3, r7, #4
 80329aa:	330c      	adds	r3, #12
 80329ac:	461a      	mov	r2, r3
 80329ae:	2140      	movs	r1, #64	@ 0x40
 80329b0:	487d      	ldr	r0, [pc, #500]	@ (8032ba8 <svl_iplDaemon+0x284>)
 80329b2:	f7fb fbf3 	bl	802e19c <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 80329b6:	4b7e      	ldr	r3, [pc, #504]	@ (8032bb0 <svl_iplDaemon+0x28c>)
 80329b8:	681b      	ldr	r3, [r3, #0]
 80329ba:	1d38      	adds	r0, r7, #4
 80329bc:	2264      	movs	r2, #100	@ 0x64
 80329be:	2110      	movs	r1, #16
 80329c0:	4798      	blx	r3
 80329c2:	4603      	mov	r3, r0
 80329c4:	2b55      	cmp	r3, #85	@ 0x55
 80329c6:	d132      	bne.n	8032a2e <svl_iplDaemon+0x10a>
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 80329c8:	4b79      	ldr	r3, [pc, #484]	@ (8032bb0 <svl_iplDaemon+0x28c>)
 80329ca:	681b      	ldr	r3, [r3, #0]
 80329cc:	2264      	movs	r2, #100	@ 0x64
 80329ce:	2140      	movs	r1, #64	@ 0x40
 80329d0:	4875      	ldr	r0, [pc, #468]	@ (8032ba8 <svl_iplDaemon+0x284>)
 80329d2:	4798      	blx	r3
 80329d4:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 80329d6:	2b55      	cmp	r3, #85	@ 0x55
 80329d8:	d129      	bne.n	8032a2e <svl_iplDaemon+0x10a>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 80329da:	4b76      	ldr	r3, [pc, #472]	@ (8032bb4 <svl_iplDaemon+0x290>)
 80329dc:	681b      	ldr	r3, [r3, #0]
 80329de:	1d38      	adds	r0, r7, #4
 80329e0:	22c8      	movs	r2, #200	@ 0xc8
 80329e2:	2110      	movs	r1, #16
 80329e4:	4798      	blx	r3
 80329e6:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 80329e8:	2b55      	cmp	r3, #85	@ 0x55
 80329ea:	d120      	bne.n	8032a2e <svl_iplDaemon+0x10a>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 80329ec:	4b71      	ldr	r3, [pc, #452]	@ (8032bb4 <svl_iplDaemon+0x290>)
 80329ee:	681b      	ldr	r3, [r3, #0]
 80329f0:	68b9      	ldr	r1, [r7, #8]
 80329f2:	22c8      	movs	r2, #200	@ 0xc8
 80329f4:	4870      	ldr	r0, [pc, #448]	@ (8032bb8 <svl_iplDaemon+0x294>)
 80329f6:	4798      	blx	r3
 80329f8:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 80329fa:	2b55      	cmp	r3, #85	@ 0x55
 80329fc:	d117      	bne.n	8032a2e <svl_iplDaemon+0x10a>
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 80329fe:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 8032a00:	f640 2201 	movw	r2, #2561	@ 0xa01
 8032a04:	4293      	cmp	r3, r2
 8032a06:	d112      	bne.n	8032a2e <svl_iplDaemon+0x10a>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8032a08:	68b9      	ldr	r1, [r7, #8]
 8032a0a:	693a      	ldr	r2, [r7, #16]
 8032a0c:	2300      	movs	r3, #0
 8032a0e:	486a      	ldr	r0, [pc, #424]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032a10:	f7fb fc10 	bl	802e234 <drv_crcCheckCrc32>
 8032a14:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 8032a16:	2bca      	cmp	r3, #202	@ 0xca
 8032a18:	d109      	bne.n	8032a2e <svl_iplDaemon+0x10a>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&discoveryMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 8032a1a:	68bb      	ldr	r3, [r7, #8]
 8032a1c:	461a      	mov	r2, r3
 8032a1e:	4966      	ldr	r1, [pc, #408]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032a20:	4861      	ldr	r0, [pc, #388]	@ (8032ba8 <svl_iplDaemon+0x284>)
 8032a22:	f009 fbd6 	bl	803c1d2 <memcpy>
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL device discovered: %s\r\n", discoveryMsg.slaveDeviceId);
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
 8032a26:	4b5d      	ldr	r3, [pc, #372]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032a28:	2203      	movs	r2, #3
 8032a2a:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 8032a2c:	e2d6      	b.n	8032fdc <svl_iplDaemon+0x6b8>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 8032a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032a30:	2201      	movs	r2, #1
 8032a32:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 8032a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8032a38:	f003 f9d2 	bl	8035de0 <gos_taskSleep>
				break;
 8032a3c:	e2ce      	b.n	8032fdc <svl_iplDaemon+0x6b8>
			case SVL_IPL_STATE_CONFIG_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Configuring device...\r\n");
#endif
				iplState = SVL_IPL_STATE_CONFIG;
 8032a3e:	4b57      	ldr	r3, [pc, #348]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032a40:	2204      	movs	r2, #4
 8032a42:	701a      	strb	r2, [r3, #0]
				break;
 8032a44:	e2ca      	b.n	8032fdc <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_CONFIG:
			{
				(void_t) svl_pdhGetWifiCfg(&devConfigMsg);
 8032a46:	485d      	ldr	r0, [pc, #372]	@ (8032bbc <svl_iplDaemon+0x298>)
 8032a48:	f000 fccc 	bl	80333e4 <svl_pdhGetWifiCfg>

				msgHeader.messageId     = IPL_MSG_ID_CONFIG;
 8032a4c:	2311      	movs	r3, #17
 8032a4e:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(devConfigMsg);
 8032a50:	236e      	movs	r3, #110	@ 0x6e
 8032a52:	60bb      	str	r3, [r7, #8]

				(void_t) drv_crcGetCrc32((u8_t*)&devConfigMsg, sizeof(devConfigMsg), &msgHeader.messageCrc);
 8032a54:	1d3b      	adds	r3, r7, #4
 8032a56:	330c      	adds	r3, #12
 8032a58:	461a      	mov	r2, r3
 8032a5a:	216e      	movs	r1, #110	@ 0x6e
 8032a5c:	4857      	ldr	r0, [pc, #348]	@ (8032bbc <svl_iplDaemon+0x298>)
 8032a5e:	f7fb fb9d 	bl	802e19c <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 8032a62:	4b53      	ldr	r3, [pc, #332]	@ (8032bb0 <svl_iplDaemon+0x28c>)
 8032a64:	681b      	ldr	r3, [r3, #0]
 8032a66:	1d38      	adds	r0, r7, #4
 8032a68:	2264      	movs	r2, #100	@ 0x64
 8032a6a:	2110      	movs	r1, #16
 8032a6c:	4798      	blx	r3
 8032a6e:	4603      	mov	r3, r0
 8032a70:	2b55      	cmp	r3, #85	@ 0x55
 8032a72:	d132      	bne.n	8032ada <svl_iplDaemon+0x1b6>
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       100u) == GOS_SUCCESS &&
 8032a74:	4b4e      	ldr	r3, [pc, #312]	@ (8032bb0 <svl_iplDaemon+0x28c>)
 8032a76:	681b      	ldr	r3, [r3, #0]
 8032a78:	2264      	movs	r2, #100	@ 0x64
 8032a7a:	216e      	movs	r1, #110	@ 0x6e
 8032a7c:	484f      	ldr	r0, [pc, #316]	@ (8032bbc <svl_iplDaemon+0x298>)
 8032a7e:	4798      	blx	r3
 8032a80:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 8032a82:	2b55      	cmp	r3, #85	@ 0x55
 8032a84:	d129      	bne.n	8032ada <svl_iplDaemon+0x1b6>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 8032a86:	4b4b      	ldr	r3, [pc, #300]	@ (8032bb4 <svl_iplDaemon+0x290>)
 8032a88:	681b      	ldr	r3, [r3, #0]
 8032a8a:	1d38      	adds	r0, r7, #4
 8032a8c:	22c8      	movs	r2, #200	@ 0xc8
 8032a8e:	2110      	movs	r1, #16
 8032a90:	4798      	blx	r3
 8032a92:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       100u) == GOS_SUCCESS &&
 8032a94:	2b55      	cmp	r3, #85	@ 0x55
 8032a96:	d120      	bne.n	8032ada <svl_iplDaemon+0x1b6>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 8032a98:	4b46      	ldr	r3, [pc, #280]	@ (8032bb4 <svl_iplDaemon+0x290>)
 8032a9a:	681b      	ldr	r3, [r3, #0]
 8032a9c:	68b9      	ldr	r1, [r7, #8]
 8032a9e:	22c8      	movs	r2, #200	@ 0xc8
 8032aa0:	4845      	ldr	r0, [pc, #276]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032aa2:	4798      	blx	r3
 8032aa4:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 8032aa6:	2b55      	cmp	r3, #85	@ 0x55
 8032aa8:	d117      	bne.n	8032ada <svl_iplDaemon+0x1b6>
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 8032aaa:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 8032aac:	f640 2211 	movw	r2, #2577	@ 0xa11
 8032ab0:	4293      	cmp	r3, r2
 8032ab2:	d112      	bne.n	8032ada <svl_iplDaemon+0x1b6>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8032ab4:	68b9      	ldr	r1, [r7, #8]
 8032ab6:	693a      	ldr	r2, [r7, #16]
 8032ab8:	2300      	movs	r3, #0
 8032aba:	483f      	ldr	r0, [pc, #252]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032abc:	f7fb fbba 	bl	802e234 <drv_crcCheckCrc32>
 8032ac0:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 8032ac2:	2bca      	cmp	r3, #202	@ 0xca
 8032ac4:	d109      	bne.n	8032ada <svl_iplDaemon+0x1b6>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&receivedDevConfigMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 8032ac6:	68bb      	ldr	r3, [r7, #8]
 8032ac8:	461a      	mov	r2, r3
 8032aca:	493b      	ldr	r1, [pc, #236]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032acc:	483c      	ldr	r0, [pc, #240]	@ (8032bc0 <svl_iplDaemon+0x29c>)
 8032ace:	f009 fb80 	bl	803c1d2 <memcpy>
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
						);
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 8032ad2:	4b32      	ldr	r3, [pc, #200]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032ad4:	2205      	movs	r2, #5
 8032ad6:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 8032ad8:	e280      	b.n	8032fdc <svl_iplDaemon+0x6b8>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 8032ada:	4b30      	ldr	r3, [pc, #192]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032adc:	2201      	movs	r2, #1
 8032ade:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 8032ae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8032ae4:	f003 f97c 	bl	8035de0 <gos_taskSleep>
				break;
 8032ae8:	e278      	b.n	8032fdc <svl_iplDaemon+0x6b8>
			case SVL_IPL_STATE_CONNECT_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Connecting to network...\r\n");
#endif
				iplState = SVL_IPL_STATE_CONNECT;
 8032aea:	4b2c      	ldr	r3, [pc, #176]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032aec:	2206      	movs	r2, #6
 8032aee:	701a      	strb	r2, [r3, #0]
				break;
 8032af0:	e274      	b.n	8032fdc <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_CONNECT:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONNECT;
 8032af2:	2321      	movs	r3, #33	@ 0x21
 8032af4:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(connectMsg);
 8032af6:	2301      	movs	r3, #1
 8032af8:	60bb      	str	r3, [r7, #8]

				(void_t) drv_crcGetCrc32((u8_t*)&connectMsg, sizeof(connectMsg), &msgHeader.messageCrc);
 8032afa:	1d3b      	adds	r3, r7, #4
 8032afc:	330c      	adds	r3, #12
 8032afe:	461a      	mov	r2, r3
 8032b00:	2101      	movs	r1, #1
 8032b02:	4830      	ldr	r0, [pc, #192]	@ (8032bc4 <svl_iplDaemon+0x2a0>)
 8032b04:	f7fb fb4a 	bl	802e19c <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 8032b08:	4b29      	ldr	r3, [pc, #164]	@ (8032bb0 <svl_iplDaemon+0x28c>)
 8032b0a:	681b      	ldr	r3, [r3, #0]
 8032b0c:	1d38      	adds	r0, r7, #4
 8032b0e:	2264      	movs	r2, #100	@ 0x64
 8032b10:	2110      	movs	r1, #16
 8032b12:	4798      	blx	r3
 8032b14:	4603      	mov	r3, r0
 8032b16:	2b55      	cmp	r3, #85	@ 0x55
 8032b18:	d13b      	bne.n	8032b92 <svl_iplDaemon+0x26e>
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         100u) == GOS_SUCCESS &&
 8032b1a:	4b25      	ldr	r3, [pc, #148]	@ (8032bb0 <svl_iplDaemon+0x28c>)
 8032b1c:	681b      	ldr	r3, [r3, #0]
 8032b1e:	2264      	movs	r2, #100	@ 0x64
 8032b20:	2101      	movs	r1, #1
 8032b22:	4828      	ldr	r0, [pc, #160]	@ (8032bc4 <svl_iplDaemon+0x2a0>)
 8032b24:	4798      	blx	r3
 8032b26:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 8032b28:	2b55      	cmp	r3, #85	@ 0x55
 8032b2a:	d132      	bne.n	8032b92 <svl_iplDaemon+0x26e>
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),          0xFFFFFFFFu) == GOS_SUCCESS &&
 8032b2c:	4b21      	ldr	r3, [pc, #132]	@ (8032bb4 <svl_iplDaemon+0x290>)
 8032b2e:	681b      	ldr	r3, [r3, #0]
 8032b30:	1d38      	adds	r0, r7, #4
 8032b32:	f04f 32ff 	mov.w	r2, #4294967295
 8032b36:	2110      	movs	r1, #16
 8032b38:	4798      	blx	r3
 8032b3a:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         100u) == GOS_SUCCESS &&
 8032b3c:	2b55      	cmp	r3, #85	@ 0x55
 8032b3e:	d128      	bne.n	8032b92 <svl_iplDaemon+0x26e>
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 8032b40:	4b1c      	ldr	r3, [pc, #112]	@ (8032bb4 <svl_iplDaemon+0x290>)
 8032b42:	681b      	ldr	r3, [r3, #0]
 8032b44:	68b9      	ldr	r1, [r7, #8]
 8032b46:	22c8      	movs	r2, #200	@ 0xc8
 8032b48:	481b      	ldr	r0, [pc, #108]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032b4a:	4798      	blx	r3
 8032b4c:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),          0xFFFFFFFFu) == GOS_SUCCESS &&
 8032b4e:	2b55      	cmp	r3, #85	@ 0x55
 8032b50:	d11f      	bne.n	8032b92 <svl_iplDaemon+0x26e>
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 8032b52:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 8032b54:	f640 2221 	movw	r2, #2593	@ 0xa21
 8032b58:	4293      	cmp	r3, r2
 8032b5a:	d11a      	bne.n	8032b92 <svl_iplDaemon+0x26e>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8032b5c:	68b9      	ldr	r1, [r7, #8]
 8032b5e:	693a      	ldr	r2, [r7, #16]
 8032b60:	2300      	movs	r3, #0
 8032b62:	4815      	ldr	r0, [pc, #84]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032b64:	f7fb fb66 	bl	802e234 <drv_crcCheckCrc32>
 8032b68:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 8032b6a:	2bca      	cmp	r3, #202	@ 0xca
 8032b6c:	d111      	bne.n	8032b92 <svl_iplDaemon+0x26e>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&connectResultMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 8032b6e:	68bb      	ldr	r3, [r7, #8]
 8032b70:	461a      	mov	r2, r3
 8032b72:	4911      	ldr	r1, [pc, #68]	@ (8032bb8 <svl_iplDaemon+0x294>)
 8032b74:	4814      	ldr	r0, [pc, #80]	@ (8032bc8 <svl_iplDaemon+0x2a4>)
 8032b76:	f009 fb2c 	bl	803c1d2 <memcpy>

					if (connectResultMsg.connectSuccess == GOS_TRUE)
 8032b7a:	4b13      	ldr	r3, [pc, #76]	@ (8032bc8 <svl_iplDaemon+0x2a4>)
 8032b7c:	781b      	ldrb	r3, [r3, #0]
 8032b7e:	2b36      	cmp	r3, #54	@ 0x36
 8032b80:	d103      	bne.n	8032b8a <svl_iplDaemon+0x266>
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Successfully connected to the network.\r\n");
#endif
						iplState = SVL_IPL_STATE_CONNECTED;
 8032b82:	4b06      	ldr	r3, [pc, #24]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032b84:	2207      	movs	r2, #7
 8032b86:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 8032b88:	e007      	b.n	8032b9a <svl_iplDaemon+0x276>
					else
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Network connection failed.\r\n");
#endif
						iplState = SVL_IPL_STATE_DISCOVER_START;
 8032b8a:	4b04      	ldr	r3, [pc, #16]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032b8c:	2201      	movs	r2, #1
 8032b8e:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 8032b90:	e003      	b.n	8032b9a <svl_iplDaemon+0x276>
				{
					// No response.
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "No response was received.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
 8032b92:	4b02      	ldr	r3, [pc, #8]	@ (8032b9c <svl_iplDaemon+0x278>)
 8032b94:	2201      	movs	r2, #1
 8032b96:	701a      	strb	r2, [r3, #0]
				}

				break;
 8032b98:	e220      	b.n	8032fdc <svl_iplDaemon+0x6b8>
 8032b9a:	e21f      	b.n	8032fdc <svl_iplDaemon+0x6b8>
 8032b9c:	20009664 	.word	0x20009664
 8032ba0:	2000a664 	.word	0x2000a664
 8032ba4:	200016fc 	.word	0x200016fc
 8032ba8:	2000a230 	.word	0x2000a230
 8032bac:	0803e970 	.word	0x0803e970
 8032bb0:	2000a65c 	.word	0x2000a65c
 8032bb4:	2000a660 	.word	0x2000a660
 8032bb8:	20009668 	.word	0x20009668
 8032bbc:	2000a150 	.word	0x2000a150
 8032bc0:	2000a1c0 	.word	0x2000a1c0
 8032bc4:	2000a140 	.word	0x2000a140
 8032bc8:	2000a144 	.word	0x2000a144
			}
			case SVL_IPL_STATE_CONNECTED:
			{
				// Check if there is an incoming request.
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 8032bcc:	4bac      	ldr	r3, [pc, #688]	@ (8032e80 <svl_iplDaemon+0x55c>)
 8032bce:	681b      	ldr	r3, [r3, #0]
 8032bd0:	1d38      	adds	r0, r7, #4
 8032bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8032bd6:	2110      	movs	r1, #16
 8032bd8:	4798      	blx	r3
 8032bda:	4603      	mov	r3, r0
 8032bdc:	2b55      	cmp	r3, #85	@ 0x55
 8032bde:	f040 81fc 	bne.w	8032fda <svl_iplDaemon+0x6b6>
					svl_iplReceive(iplRxBuffer,       msgHeader.messageLength, 0xFFFFFFFFu) == GOS_SUCCESS)
 8032be2:	4ba7      	ldr	r3, [pc, #668]	@ (8032e80 <svl_iplDaemon+0x55c>)
 8032be4:	681b      	ldr	r3, [r3, #0]
 8032be6:	68b9      	ldr	r1, [r7, #8]
 8032be8:	f04f 32ff 	mov.w	r2, #4294967295
 8032bec:	48a5      	ldr	r0, [pc, #660]	@ (8032e84 <svl_iplDaemon+0x560>)
 8032bee:	4798      	blx	r3
 8032bf0:	4603      	mov	r3, r0
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 8032bf2:	2b55      	cmp	r3, #85	@ 0x55
 8032bf4:	f040 81f1 	bne.w	8032fda <svl_iplDaemon+0x6b6>
				{
					if (drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8032bf8:	68b9      	ldr	r1, [r7, #8]
 8032bfa:	693a      	ldr	r2, [r7, #16]
 8032bfc:	2300      	movs	r3, #0
 8032bfe:	48a1      	ldr	r0, [pc, #644]	@ (8032e84 <svl_iplDaemon+0x560>)
 8032c00:	f7fb fb18 	bl	802e234 <drv_crcCheckCrc32>
 8032c04:	4603      	mov	r3, r0
 8032c06:	2bca      	cmp	r3, #202	@ 0xca
 8032c08:	f040 81e2 	bne.w	8032fd0 <svl_iplDaemon+0x6ac>
					{
						switch (msgHeader.messageId)
 8032c0c:	687b      	ldr	r3, [r7, #4]
 8032c0e:	2bd1      	cmp	r3, #209	@ 0xd1
 8032c10:	f000 8108 	beq.w	8032e24 <svl_iplDaemon+0x500>
 8032c14:	2bd1      	cmp	r3, #209	@ 0xd1
 8032c16:	f200 81ba 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c1a:	2bc1      	cmp	r3, #193	@ 0xc1
 8032c1c:	f000 80ed 	beq.w	8032dfa <svl_iplDaemon+0x4d6>
 8032c20:	2bc1      	cmp	r3, #193	@ 0xc1
 8032c22:	f200 81b4 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c26:	2bb1      	cmp	r3, #177	@ 0xb1
 8032c28:	f000 810b 	beq.w	8032e42 <svl_iplDaemon+0x51e>
 8032c2c:	2bb1      	cmp	r3, #177	@ 0xb1
 8032c2e:	f200 81ae 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c32:	2ba1      	cmp	r3, #161	@ 0xa1
 8032c34:	f000 80eb 	beq.w	8032e0e <svl_iplDaemon+0x4ea>
 8032c38:	2ba1      	cmp	r3, #161	@ 0xa1
 8032c3a:	f200 81a8 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c3e:	2b91      	cmp	r3, #145	@ 0x91
 8032c40:	f000 80d1 	beq.w	8032de6 <svl_iplDaemon+0x4c2>
 8032c44:	2b91      	cmp	r3, #145	@ 0x91
 8032c46:	f200 81a2 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c4a:	2b81      	cmp	r3, #129	@ 0x81
 8032c4c:	f000 8092 	beq.w	8032d74 <svl_iplDaemon+0x450>
 8032c50:	2b81      	cmp	r3, #129	@ 0x81
 8032c52:	f200 819c 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c56:	2b71      	cmp	r3, #113	@ 0x71
 8032c58:	d039      	beq.n	8032cce <svl_iplDaemon+0x3aa>
 8032c5a:	2b71      	cmp	r3, #113	@ 0x71
 8032c5c:	f200 8197 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c60:	2b61      	cmp	r3, #97	@ 0x61
 8032c62:	d02a      	beq.n	8032cba <svl_iplDaemon+0x396>
 8032c64:	2b61      	cmp	r3, #97	@ 0x61
 8032c66:	f200 8192 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c6a:	2b51      	cmp	r3, #81	@ 0x51
 8032c6c:	d01b      	beq.n	8032ca6 <svl_iplDaemon+0x382>
 8032c6e:	2b51      	cmp	r3, #81	@ 0x51
 8032c70:	f200 818d 	bhi.w	8032f8e <svl_iplDaemon+0x66a>
 8032c74:	2b31      	cmp	r3, #49	@ 0x31
 8032c76:	d002      	beq.n	8032c7e <svl_iplDaemon+0x35a>
 8032c78:	2b41      	cmp	r3, #65	@ 0x41
 8032c7a:	d00d      	beq.n	8032c98 <svl_iplDaemon+0x374>
 8032c7c:	e187      	b.n	8032f8e <svl_iplDaemon+0x66a>
							case IPL_MSG_ID_CPU_LOAD:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL CPU load request received.\r\n");
#endif
								cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 8032c7e:	f001 ff05 	bl	8034a8c <gos_kernelGetCpuUsage>
 8032c82:	4603      	mov	r3, r0
 8032c84:	461a      	mov	r2, r3
 8032c86:	4b80      	ldr	r3, [pc, #512]	@ (8032e88 <svl_iplDaemon+0x564>)
 8032c88:	801a      	strh	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_CPU_LOAD_ACK, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 8032c8a:	2202      	movs	r2, #2
 8032c8c:	497e      	ldr	r1, [pc, #504]	@ (8032e88 <svl_iplDaemon+0x564>)
 8032c8e:	f640 2031 	movw	r0, #2609	@ 0xa31
 8032c92:	f7ff fe0f 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032c96:	e1a0      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_RESET:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL reset request received.\r\n");
#endif
								(void_t) gos_taskSleep(2000);
 8032c98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8032c9c:	f003 f8a0 	bl	8035de0 <gos_taskSleep>
								gos_kernelReset();
 8032ca0:	f001 ff06 	bl	8034ab0 <gos_kernelReset>
								break;
 8032ca4:	e199      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_PING:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL ping request received.\r\n");
#endif
								pingMsg.pingResult = SVL_IPL_PING_OK;
 8032ca6:	4b79      	ldr	r3, [pc, #484]	@ (8032e8c <svl_iplDaemon+0x568>)
 8032ca8:	2228      	movs	r2, #40	@ 0x28
 8032caa:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_PING_ACK, (u8_t*)&pingMsg, sizeof(pingMsg));
 8032cac:	2201      	movs	r2, #1
 8032cae:	4977      	ldr	r1, [pc, #476]	@ (8032e8c <svl_iplDaemon+0x568>)
 8032cb0:	f640 2051 	movw	r0, #2641	@ 0xa51
 8032cb4:	f7ff fdfe 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032cb8:	e18f      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_TASK_NUM:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL task number request received.\r\n");
#endif
								(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 8032cba:	4875      	ldr	r0, [pc, #468]	@ (8032e90 <svl_iplDaemon+0x56c>)
 8032cbc:	f004 fc18 	bl	80374f0 <gos_taskGetNumber>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_NUM_ACK, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 8032cc0:	2202      	movs	r2, #2
 8032cc2:	4973      	ldr	r1, [pc, #460]	@ (8032e90 <svl_iplDaemon+0x56c>)
 8032cc4:	f640 2061 	movw	r0, #2657	@ 0xa61
 8032cc8:	f7ff fdf4 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032ccc:	e185      	b.n	8032fda <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 8032cce:	4b6d      	ldr	r3, [pc, #436]	@ (8032e84 <svl_iplDaemon+0x560>)
 8032cd0:	881a      	ldrh	r2, [r3, #0]
 8032cd2:	4b70      	ldr	r3, [pc, #448]	@ (8032e94 <svl_iplDaemon+0x570>)
 8032cd4:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8032cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8032e94 <svl_iplDaemon+0x570>)
 8032cd8:	881b      	ldrh	r3, [r3, #0]
 8032cda:	496f      	ldr	r1, [pc, #444]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032cdc:	4618      	mov	r0, r3
 8032cde:	f004 fb95 	bl	803740c <gos_taskGetDataByIndex>
										GOS_TRUE,
										"IPL task data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
#endif
								// Fill out message.
								taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 8032ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032ce4:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8032ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032cea:	875a      	strh	r2, [r3, #58]	@ 0x3a
								taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 8032cec:	4b6a      	ldr	r3, [pc, #424]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032cee:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8032cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
								taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 8032cf6:	4b68      	ldr	r3, [pc, #416]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032cf8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8032cfc:	4b67      	ldr	r3, [pc, #412]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032cfe:	871a      	strh	r2, [r3, #56]	@ 0x38
								taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 8032d00:	4b65      	ldr	r3, [pc, #404]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8032d04:	4a65      	ldr	r2, [pc, #404]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d06:	f8c2 3027 	str.w	r3, [r2, #39]	@ 0x27
								taskDataMsg.taskId               = taskData.taskId;
 8032d0a:	4b63      	ldr	r3, [pc, #396]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d0c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8032d0e:	4b63      	ldr	r3, [pc, #396]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d10:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
								(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 8032d14:	4962      	ldr	r1, [pc, #392]	@ (8032ea0 <svl_iplDaemon+0x57c>)
 8032d16:	4863      	ldr	r0, [pc, #396]	@ (8032ea4 <svl_iplDaemon+0x580>)
 8032d18:	f009 fa53 	bl	803c1c2 <strcpy>
								taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 8032d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d1e:	79da      	ldrb	r2, [r3, #7]
 8032d20:	4b5e      	ldr	r3, [pc, #376]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d22:	709a      	strb	r2, [r3, #2]
								taskDataMsg.taskPriority         = taskData.taskPriority;
 8032d24:	4b5c      	ldr	r3, [pc, #368]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d26:	799a      	ldrb	r2, [r3, #6]
 8032d28:	4b5c      	ldr	r3, [pc, #368]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d2a:	705a      	strb	r2, [r3, #1]
								taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 8032d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d2e:	891a      	ldrh	r2, [r3, #8]
 8032d30:	4b5a      	ldr	r3, [pc, #360]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d32:	f8a3 2003 	strh.w	r2, [r3, #3]
								(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 8032d36:	4a59      	ldr	r2, [pc, #356]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d38:	4b57      	ldr	r3, [pc, #348]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d3a:	322d      	adds	r2, #45	@ 0x2d
 8032d3c:	334c      	adds	r3, #76	@ 0x4c
 8032d3e:	cb03      	ldmia	r3!, {r0, r1}
 8032d40:	6010      	str	r0, [r2, #0]
 8032d42:	6051      	str	r1, [r2, #4]
 8032d44:	781b      	ldrb	r3, [r3, #0]
 8032d46:	7213      	strb	r3, [r2, #8]
								taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 8032d48:	4b53      	ldr	r3, [pc, #332]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8032d4e:	4b53      	ldr	r3, [pc, #332]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
								taskDataMsg.taskStackSize        = taskData.taskStackSize;
 8032d52:	4b51      	ldr	r3, [pc, #324]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8032d58:	4b50      	ldr	r3, [pc, #320]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d5a:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
								taskDataMsg.taskState            = taskData.taskState;
 8032d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d60:	791a      	ldrb	r2, [r3, #4]
 8032d62:	4b4e      	ldr	r3, [pc, #312]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d64:	701a      	strb	r2, [r3, #0]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_DATA_ACK, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 8032d66:	223e      	movs	r2, #62	@ 0x3e
 8032d68:	494c      	ldr	r1, [pc, #304]	@ (8032e9c <svl_iplDaemon+0x578>)
 8032d6a:	f640 2071 	movw	r0, #2673	@ 0xa71
 8032d6e:	f7ff fda1 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032d72:	e132      	b.n	8032fda <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_VAR_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 8032d74:	4b43      	ldr	r3, [pc, #268]	@ (8032e84 <svl_iplDaemon+0x560>)
 8032d76:	881a      	ldrh	r2, [r3, #0]
 8032d78:	4b46      	ldr	r3, [pc, #280]	@ (8032e94 <svl_iplDaemon+0x570>)
 8032d7a:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8032d7c:	4b45      	ldr	r3, [pc, #276]	@ (8032e94 <svl_iplDaemon+0x570>)
 8032d7e:	881b      	ldrh	r3, [r3, #0]
 8032d80:	4945      	ldr	r1, [pc, #276]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d82:	4618      	mov	r0, r3
 8032d84:	f004 fb42 	bl	803740c <gos_taskGetDataByIndex>
								(void_t) gos_traceTraceFormatted(
										GOS_TRUE,
										"IPL task variable data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
#endif
								taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 8032d88:	4b43      	ldr	r3, [pc, #268]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8032d8e:	4b46      	ldr	r3, [pc, #280]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032d90:	f8a3 2013 	strh.w	r2, [r3, #19]
								taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 8032d94:	4b40      	ldr	r3, [pc, #256]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032d96:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8032d9a:	4b43      	ldr	r3, [pc, #268]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032d9c:	f8a3 2011 	strh.w	r2, [r3, #17]
								taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 8032da0:	4b3d      	ldr	r3, [pc, #244]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032da2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8032da6:	4b40      	ldr	r3, [pc, #256]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032da8:	f8a3 200f 	strh.w	r2, [r3, #15]
								taskVarDataMsg.taskPriority      = taskData.taskPriority;
 8032dac:	4b3a      	ldr	r3, [pc, #232]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032dae:	799a      	ldrb	r2, [r3, #6]
 8032db0:	4b3d      	ldr	r3, [pc, #244]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032db2:	705a      	strb	r2, [r3, #1]
								taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 8032db4:	4b38      	ldr	r3, [pc, #224]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8032db8:	4a3b      	ldr	r2, [pc, #236]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032dba:	f8c2 3002 	str.w	r3, [r2, #2]
			                    taskVarDataMsg.taskState         = taskData.taskState;
 8032dbe:	4b36      	ldr	r3, [pc, #216]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032dc0:	791a      	ldrb	r2, [r3, #4]
 8032dc2:	4b39      	ldr	r3, [pc, #228]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032dc4:	701a      	strb	r2, [r3, #0]

			                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 8032dc6:	4a38      	ldr	r2, [pc, #224]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032dc8:	4b33      	ldr	r3, [pc, #204]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032dca:	3206      	adds	r2, #6
 8032dcc:	334c      	adds	r3, #76	@ 0x4c
 8032dce:	cb03      	ldmia	r3!, {r0, r1}
 8032dd0:	6010      	str	r0, [r2, #0]
 8032dd2:	6051      	str	r1, [r2, #4]
 8032dd4:	781b      	ldrb	r3, [r3, #0]
 8032dd6:	7213      	strb	r3, [r2, #8]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_VAR_DATA_ACK, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 8032dd8:	2215      	movs	r2, #21
 8032dda:	4933      	ldr	r1, [pc, #204]	@ (8032ea8 <svl_iplDaemon+0x584>)
 8032ddc:	f640 2081 	movw	r0, #2689	@ 0xa81
 8032de0:	f7ff fd68 	bl	80328b4 <svl_iplSendMessage>

								break;
 8032de4:	e0f9      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_RUNTIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL runtime request received.\r\n");
#endif
								(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 8032de6:	4831      	ldr	r0, [pc, #196]	@ (8032eac <svl_iplDaemon+0x588>)
 8032de8:	f007 fad2 	bl	803a390 <gos_runTimeGet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_RUNTIME_ACK, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 8032dec:	2209      	movs	r2, #9
 8032dee:	492f      	ldr	r1, [pc, #188]	@ (8032eac <svl_iplDaemon+0x588>)
 8032df0:	f640 2091 	movw	r0, #2705	@ 0xa91
 8032df4:	f7ff fd5e 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032df8:	e0ef      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_HWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL hardware info request received.\r\n");
#endif
								(void_t) svl_pdhGetHwInfo(&hwInfoMsg);
 8032dfa:	482d      	ldr	r0, [pc, #180]	@ (8032eb0 <svl_iplDaemon+0x58c>)
 8032dfc:	f000 fa82 	bl	8033304 <svl_pdhGetHwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_HWINFO_ACK, (u8_t*)&hwInfoMsg, sizeof(hwInfoMsg));
 8032e00:	22fa      	movs	r2, #250	@ 0xfa
 8032e02:	492b      	ldr	r1, [pc, #172]	@ (8032eb0 <svl_iplDaemon+0x58c>)
 8032e04:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8032e08:	f7ff fd54 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032e0c:	e0e5      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_SWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL software info request received.\r\n");
#endif
								(void_t) svl_pdhGetSwInfo(&swInfoMsg);
 8032e0e:	4829      	ldr	r0, [pc, #164]	@ (8032eb4 <svl_iplDaemon+0x590>)
 8032e10:	f000 fa40 	bl	8033294 <svl_pdhGetSwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SWINFO_ACK, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 8032e14:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8032e18:	4926      	ldr	r1, [pc, #152]	@ (8032eb4 <svl_iplDaemon+0x590>)
 8032e1a:	f640 20a1 	movw	r0, #2721	@ 0xaa1
 8032e1e:	f7ff fd49 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032e22:	e0da      	b.n	8032fda <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_SYNC_TIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL system time synchronization request received.\r\n");
#endif
								(void_t) memcpy((void_t*)&sysTimeSetMsg, (void_t*)iplRxBuffer, sizeof(sysTimeSetMsg));
 8032e24:	4b24      	ldr	r3, [pc, #144]	@ (8032eb8 <svl_iplDaemon+0x594>)
 8032e26:	4a17      	ldr	r2, [pc, #92]	@ (8032e84 <svl_iplDaemon+0x560>)
 8032e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8032e2a:	c303      	stmia	r3!, {r0, r1}
 8032e2c:	801a      	strh	r2, [r3, #0]
								(void_t) gos_timeSet(&sysTimeSetMsg.desiredSystemTime);
 8032e2e:	4822      	ldr	r0, [pc, #136]	@ (8032eb8 <svl_iplDaemon+0x594>)
 8032e30:	f007 fa92 	bl	803a358 <gos_timeSet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SYNC_TIME_ACK, (u8_t*)&sysTimeSetMsg, sizeof(sysTimeSetMsg));
 8032e34:	220a      	movs	r2, #10
 8032e36:	4920      	ldr	r1, [pc, #128]	@ (8032eb8 <svl_iplDaemon+0x594>)
 8032e38:	f640 20d1 	movw	r0, #2769	@ 0xad1
 8032e3c:	f7ff fd3a 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032e40:	e0cb      	b.n	8032fda <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_MODIFY:
							{
								// Get parameters.
								(void_t) memcpy((void_t*)&taskModifyMsg, (void_t*)iplRxBuffer, sizeof(taskModifyMsg));
 8032e42:	4b10      	ldr	r3, [pc, #64]	@ (8032e84 <svl_iplDaemon+0x560>)
 8032e44:	681b      	ldr	r3, [r3, #0]
 8032e46:	4a1d      	ldr	r2, [pc, #116]	@ (8032ebc <svl_iplDaemon+0x598>)
 8032e48:	6013      	str	r3, [r2, #0]
										"IPL task modification request received. Idx: %u Type: %u.\r\n",
										taskModifyMsg.taskIdx,
										taskModifyMsg.modificationType);
#endif

								(void_t) gos_taskGetDataByIndex(taskModifyMsg.taskIdx, &taskData);
 8032e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8032ebc <svl_iplDaemon+0x598>)
 8032e4c:	881b      	ldrh	r3, [r3, #0]
 8032e4e:	4912      	ldr	r1, [pc, #72]	@ (8032e98 <svl_iplDaemon+0x574>)
 8032e50:	4618      	mov	r0, r3
 8032e52:	f004 fadb 	bl	803740c <gos_taskGetDataByIndex>

								switch (taskModifyMsg.modificationType)
 8032e56:	4b19      	ldr	r3, [pc, #100]	@ (8032ebc <svl_iplDaemon+0x598>)
 8032e58:	789b      	ldrb	r3, [r3, #2]
 8032e5a:	2b05      	cmp	r3, #5
 8032e5c:	f200 808c 	bhi.w	8032f78 <svl_iplDaemon+0x654>
 8032e60:	a201      	add	r2, pc, #4	@ (adr r2, 8032e68 <svl_iplDaemon+0x544>)
 8032e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032e66:	bf00      	nop
 8032e68:	08032ec1 	.word	0x08032ec1
 8032e6c:	08032edf 	.word	0x08032edf
 8032e70:	08032efd 	.word	0x08032efd
 8032e74:	08032f1b 	.word	0x08032f1b
 8032e78:	08032f3d 	.word	0x08032f3d
 8032e7c:	08032f5b 	.word	0x08032f5b
 8032e80:	2000a660 	.word	0x2000a660
 8032e84:	20009668 	.word	0x20009668
 8032e88:	2000a13c 	.word	0x2000a13c
 8032e8c:	2000a148 	.word	0x2000a148
 8032e90:	2000a14c 	.word	0x2000a14c
 8032e94:	2000a0d4 	.word	0x2000a0d4
 8032e98:	2000a068 	.word	0x2000a068
 8032e9c:	2000a0fc 	.word	0x2000a0fc
 8032ea0:	2000a072 	.word	0x2000a072
 8032ea4:	2000a101 	.word	0x2000a101
 8032ea8:	2000a0d8 	.word	0x2000a0d8
 8032eac:	2000a0f0 	.word	0x2000a0f0
 8032eb0:	2000a270 	.word	0x2000a270
 8032eb4:	2000a36c 	.word	0x2000a36c
 8032eb8:	2000a610 	.word	0x2000a610
 8032ebc:	2000a60c 	.word	0x2000a60c
								{
									case IPL_TASK_MODIFY_SUSPEND:
									{
										taskModifyMsg.result = gos_taskSuspend(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8032ec0:	4b48      	ldr	r3, [pc, #288]	@ (8032fe4 <svl_iplDaemon+0x6c0>)
 8032ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032ec4:	4618      	mov	r0, r3
 8032ec6:	f003 f8e3 	bl	8036090 <gos_taskSuspend>
 8032eca:	4603      	mov	r3, r0
 8032ecc:	2b55      	cmp	r3, #85	@ 0x55
 8032ece:	bf0c      	ite	eq
 8032ed0:	2301      	moveq	r3, #1
 8032ed2:	2300      	movne	r3, #0
 8032ed4:	b2db      	uxtb	r3, r3
 8032ed6:	461a      	mov	r2, r3
 8032ed8:	4b43      	ldr	r3, [pc, #268]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032eda:	70da      	strb	r2, [r3, #3]
										break;
 8032edc:	e050      	b.n	8032f80 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_RESUME:
									{
										taskModifyMsg.result = gos_taskResume(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8032ede:	4b41      	ldr	r3, [pc, #260]	@ (8032fe4 <svl_iplDaemon+0x6c0>)
 8032ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032ee2:	4618      	mov	r0, r3
 8032ee4:	f003 f9f6 	bl	80362d4 <gos_taskResume>
 8032ee8:	4603      	mov	r3, r0
 8032eea:	2b55      	cmp	r3, #85	@ 0x55
 8032eec:	bf0c      	ite	eq
 8032eee:	2301      	moveq	r3, #1
 8032ef0:	2300      	movne	r3, #0
 8032ef2:	b2db      	uxtb	r3, r3
 8032ef4:	461a      	mov	r2, r3
 8032ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032ef8:	70da      	strb	r2, [r3, #3]
										break;
 8032efa:	e041      	b.n	8032f80 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_DELETE:
									{
										taskModifyMsg.result = gos_taskDelete(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8032efc:	4b39      	ldr	r3, [pc, #228]	@ (8032fe4 <svl_iplDaemon+0x6c0>)
 8032efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032f00:	4618      	mov	r0, r3
 8032f02:	f003 fc91 	bl	8036828 <gos_taskDelete>
 8032f06:	4603      	mov	r3, r0
 8032f08:	2b55      	cmp	r3, #85	@ 0x55
 8032f0a:	bf0c      	ite	eq
 8032f0c:	2301      	moveq	r3, #1
 8032f0e:	2300      	movne	r3, #0
 8032f10:	b2db      	uxtb	r3, r3
 8032f12:	461a      	mov	r2, r3
 8032f14:	4b34      	ldr	r3, [pc, #208]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032f16:	70da      	strb	r2, [r3, #3]
										break;
 8032f18:	e032      	b.n	8032f80 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_BLOCK:
									{
										taskModifyMsg.result = gos_taskBlock(taskData.taskId, GOS_TASK_MAX_BLOCK_TIME_MS) == GOS_SUCCESS ? 1 : 0;
 8032f1a:	4b32      	ldr	r3, [pc, #200]	@ (8032fe4 <svl_iplDaemon+0x6c0>)
 8032f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8032f22:	4618      	mov	r0, r3
 8032f24:	f003 fa84 	bl	8036430 <gos_taskBlock>
 8032f28:	4603      	mov	r3, r0
 8032f2a:	2b55      	cmp	r3, #85	@ 0x55
 8032f2c:	bf0c      	ite	eq
 8032f2e:	2301      	moveq	r3, #1
 8032f30:	2300      	movne	r3, #0
 8032f32:	b2db      	uxtb	r3, r3
 8032f34:	461a      	mov	r2, r3
 8032f36:	4b2c      	ldr	r3, [pc, #176]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032f38:	70da      	strb	r2, [r3, #3]
										break;
 8032f3a:	e021      	b.n	8032f80 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_UNBLOCK:
									{
										taskModifyMsg.result = gos_taskUnblock(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8032f3c:	4b29      	ldr	r3, [pc, #164]	@ (8032fe4 <svl_iplDaemon+0x6c0>)
 8032f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032f40:	4618      	mov	r0, r3
 8032f42:	f003 fb87 	bl	8036654 <gos_taskUnblock>
 8032f46:	4603      	mov	r3, r0
 8032f48:	2b55      	cmp	r3, #85	@ 0x55
 8032f4a:	bf0c      	ite	eq
 8032f4c:	2301      	moveq	r3, #1
 8032f4e:	2300      	movne	r3, #0
 8032f50:	b2db      	uxtb	r3, r3
 8032f52:	461a      	mov	r2, r3
 8032f54:	4b24      	ldr	r3, [pc, #144]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032f56:	70da      	strb	r2, [r3, #3]
										break;
 8032f58:	e012      	b.n	8032f80 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_WAKEUP:
									{
										taskModifyMsg.result = gos_taskWakeup(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8032f5a:	4b22      	ldr	r3, [pc, #136]	@ (8032fe4 <svl_iplDaemon+0x6c0>)
 8032f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8032f5e:	4618      	mov	r0, r3
 8032f60:	f002 ffd0 	bl	8035f04 <gos_taskWakeup>
 8032f64:	4603      	mov	r3, r0
 8032f66:	2b55      	cmp	r3, #85	@ 0x55
 8032f68:	bf0c      	ite	eq
 8032f6a:	2301      	moveq	r3, #1
 8032f6c:	2300      	movne	r3, #0
 8032f6e:	b2db      	uxtb	r3, r3
 8032f70:	461a      	mov	r2, r3
 8032f72:	4b1d      	ldr	r3, [pc, #116]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032f74:	70da      	strb	r2, [r3, #3]
										break;
 8032f76:	e003      	b.n	8032f80 <svl_iplDaemon+0x65c>
									}
									default:
									{
										taskModifyMsg.result = 0;
 8032f78:	4b1b      	ldr	r3, [pc, #108]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032f7a:	2200      	movs	r2, #0
 8032f7c:	70da      	strb	r2, [r3, #3]
										break;
 8032f7e:	bf00      	nop
									}
								}

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
 8032f80:	2204      	movs	r2, #4
 8032f82:	4919      	ldr	r1, [pc, #100]	@ (8032fe8 <svl_iplDaemon+0x6c4>)
 8032f84:	f640 20b1 	movw	r0, #2737	@ 0xab1
 8032f88:	f7ff fc94 	bl	80328b4 <svl_iplSendMessage>
								break;
 8032f8c:	e025      	b.n	8032fda <svl_iplDaemon+0x6b6>
							default:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL request received with ID: %u.\r\n", msgHeader.messageId);
#endif
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 8032f8e:	2300      	movs	r3, #0
 8032f90:	75fb      	strb	r3, [r7, #23]
 8032f92:	e019      	b.n	8032fc8 <svl_iplDaemon+0x6a4>
								{
									if (userMsgLut[lutIndex].callback == NULL)
 8032f94:	7dfb      	ldrb	r3, [r7, #23]
 8032f96:	4a15      	ldr	r2, [pc, #84]	@ (8032fec <svl_iplDaemon+0x6c8>)
 8032f98:	00db      	lsls	r3, r3, #3
 8032f9a:	4413      	add	r3, r2
 8032f9c:	685b      	ldr	r3, [r3, #4]
 8032f9e:	2b00      	cmp	r3, #0
 8032fa0:	d01a      	beq.n	8032fd8 <svl_iplDaemon+0x6b4>
										// Last registered message found, break loop.
										break;
									}
									else
									{
										if (userMsgLut[lutIndex].msgId == msgHeader.messageId)
 8032fa2:	7dfb      	ldrb	r3, [r7, #23]
 8032fa4:	4a11      	ldr	r2, [pc, #68]	@ (8032fec <svl_iplDaemon+0x6c8>)
 8032fa6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8032faa:	687b      	ldr	r3, [r7, #4]
 8032fac:	429a      	cmp	r2, r3
 8032fae:	d108      	bne.n	8032fc2 <svl_iplDaemon+0x69e>
										{
											userMsgLut[lutIndex].callback(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc);
 8032fb0:	7dfb      	ldrb	r3, [r7, #23]
 8032fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8032fec <svl_iplDaemon+0x6c8>)
 8032fb4:	00db      	lsls	r3, r3, #3
 8032fb6:	4413      	add	r3, r2
 8032fb8:	685b      	ldr	r3, [r3, #4]
 8032fba:	68b9      	ldr	r1, [r7, #8]
 8032fbc:	693a      	ldr	r2, [r7, #16]
 8032fbe:	480c      	ldr	r0, [pc, #48]	@ (8032ff0 <svl_iplDaemon+0x6cc>)
 8032fc0:	4798      	blx	r3
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 8032fc2:	7dfb      	ldrb	r3, [r7, #23]
 8032fc4:	3301      	adds	r3, #1
 8032fc6:	75fb      	strb	r3, [r7, #23]
 8032fc8:	7dfb      	ldrb	r3, [r7, #23]
 8032fca:	2b07      	cmp	r3, #7
 8032fcc:	d9e2      	bls.n	8032f94 <svl_iplDaemon+0x670>
					else
					{
						(void_t) gos_taskSleep(10);
					}
				}
				break;
 8032fce:	e004      	b.n	8032fda <svl_iplDaemon+0x6b6>
						(void_t) gos_taskSleep(10);
 8032fd0:	200a      	movs	r0, #10
 8032fd2:	f002 ff05 	bl	8035de0 <gos_taskSleep>
				break;
 8032fd6:	e000      	b.n	8032fda <svl_iplDaemon+0x6b6>
										break;
 8032fd8:	bf00      	nop
				break;
 8032fda:	bf00      	nop
			}
		}
		(void_t) gos_taskSleep(10);
 8032fdc:	200a      	movs	r0, #10
 8032fde:	f002 feff 	bl	8035de0 <gos_taskSleep>
		switch (iplState)
 8032fe2:	e4a4      	b.n	803292e <svl_iplDaemon+0xa>
 8032fe4:	2000a068 	.word	0x2000a068
 8032fe8:	2000a60c 	.word	0x2000a60c
 8032fec:	2000a61c 	.word	0x2000a61c
 8032ff0:	20009668 	.word	0x20009668

08032ff4 <svl_mdiInit>:

/*
 * Function: svl_mdiInit
 */
gos_result_t svl_mdiInit (void_t)
{
 8032ff4:	b580      	push	{r7, lr}
 8032ff6:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	return gos_sysmonRegisterUserMessage(&mdiRequestMsg);
 8032ff8:	4802      	ldr	r0, [pc, #8]	@ (8033004 <svl_mdiInit+0x10>)
 8032ffa:	f006 fd3b 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8032ffe:	4603      	mov	r3, r0
}
 8033000:	4618      	mov	r0, r3
 8033002:	bd80      	pop	{r7, pc}
 8033004:	20001768 	.word	0x20001768

08033008 <svl_mdiReqCallback>:

/*
 * TODO
 */
GOS_STATIC void_t svl_mdiReqCallback (void_t)
{
 8033008:	b580      	push	{r7, lr}
 803300a:	b082      	sub	sp, #8
 803300c:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	if (mdiVariables != NULL && mdiVariablesSize > 0u)
 803300e:	4b09      	ldr	r3, [pc, #36]	@ (8033034 <svl_mdiReqCallback+0x2c>)
 8033010:	681b      	ldr	r3, [r3, #0]
 8033012:	2b00      	cmp	r3, #0
 8033014:	d00b      	beq.n	803302e <svl_mdiReqCallback+0x26>
	{
		(void_t) gos_gcpTransmitMessage(
 8033016:	4b07      	ldr	r3, [pc, #28]	@ (8033034 <svl_mdiReqCallback+0x2c>)
 8033018:	681b      	ldr	r3, [r3, #0]
 803301a:	b29b      	uxth	r3, r3
 803301c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8033020:	9200      	str	r2, [sp, #0]
 8033022:	4a05      	ldr	r2, [pc, #20]	@ (8033038 <svl_mdiReqCallback+0x30>)
 8033024:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8033028:	2000      	movs	r0, #0
 803302a:	f004 fd6b 	bl	8037b04 <gos_gcpTransmitMessage>
	}
	else
	{
		// Nothing to send.
	}
}
 803302e:	bf00      	nop
 8033030:	46bd      	mov	sp, r7
 8033032:	bd80      	pop	{r7, pc}
 8033034:	20001438 	.word	0x20001438
 8033038:	200013e4 	.word	0x200013e4

0803303c <svl_pdhInit>:

/*
 * Function: svl_pdhInit
 */
gos_result_t svl_pdhInit (void_t)
{
 803303c:	b580      	push	{r7, lr}
 803303e:	b082      	sub	sp, #8
 8033040:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8033042:	2355      	movs	r3, #85	@ 0x55
 8033044:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&softwareInfoReqMsg));
 8033046:	79fb      	ldrb	r3, [r7, #7]
 8033048:	2b55      	cmp	r3, #85	@ 0x55
 803304a:	d105      	bne.n	8033058 <svl_pdhInit+0x1c>
 803304c:	4833      	ldr	r0, [pc, #204]	@ (803311c <svl_pdhInit+0xe0>)
 803304e:	f006 fd11 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033052:	4603      	mov	r3, r0
 8033054:	71fb      	strb	r3, [r7, #7]
 8033056:	e001      	b.n	803305c <svl_pdhInit+0x20>
 8033058:	23ae      	movs	r3, #174	@ 0xae
 803305a:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&hardwareInfoReqMsg));
 803305c:	79fb      	ldrb	r3, [r7, #7]
 803305e:	2b55      	cmp	r3, #85	@ 0x55
 8033060:	d105      	bne.n	803306e <svl_pdhInit+0x32>
 8033062:	482f      	ldr	r0, [pc, #188]	@ (8033120 <svl_pdhInit+0xe4>)
 8033064:	f006 fd06 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033068:	4603      	mov	r3, r0
 803306a:	71fb      	strb	r3, [r7, #7]
 803306c:	e001      	b.n	8033072 <svl_pdhInit+0x36>
 803306e:	23ae      	movs	r3, #174	@ 0xae
 8033070:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&wifiCfgReqMsg));
 8033072:	79fb      	ldrb	r3, [r7, #7]
 8033074:	2b55      	cmp	r3, #85	@ 0x55
 8033076:	d105      	bne.n	8033084 <svl_pdhInit+0x48>
 8033078:	482a      	ldr	r0, [pc, #168]	@ (8033124 <svl_pdhInit+0xe8>)
 803307a:	f006 fcfb 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 803307e:	4603      	mov	r3, r0
 8033080:	71fb      	strb	r3, [r7, #7]
 8033082:	e001      	b.n	8033088 <svl_pdhInit+0x4c>
 8033084:	23ae      	movs	r3, #174	@ 0xae
 8033086:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&bldCfgReqMsg));
 8033088:	79fb      	ldrb	r3, [r7, #7]
 803308a:	2b55      	cmp	r3, #85	@ 0x55
 803308c:	d105      	bne.n	803309a <svl_pdhInit+0x5e>
 803308e:	4826      	ldr	r0, [pc, #152]	@ (8033128 <svl_pdhInit+0xec>)
 8033090:	f006 fcf0 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033094:	4603      	mov	r3, r0
 8033096:	71fb      	strb	r3, [r7, #7]
 8033098:	e001      	b.n	803309e <svl_pdhInit+0x62>
 803309a:	23ae      	movs	r3, #174	@ 0xae
 803309c:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&softwareInfoSetMsg));
 803309e:	79fb      	ldrb	r3, [r7, #7]
 80330a0:	2b55      	cmp	r3, #85	@ 0x55
 80330a2:	d105      	bne.n	80330b0 <svl_pdhInit+0x74>
 80330a4:	4821      	ldr	r0, [pc, #132]	@ (803312c <svl_pdhInit+0xf0>)
 80330a6:	f006 fce5 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 80330aa:	4603      	mov	r3, r0
 80330ac:	71fb      	strb	r3, [r7, #7]
 80330ae:	e001      	b.n	80330b4 <svl_pdhInit+0x78>
 80330b0:	23ae      	movs	r3, #174	@ 0xae
 80330b2:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&hardwareInfoSetMsg));
 80330b4:	79fb      	ldrb	r3, [r7, #7]
 80330b6:	2b55      	cmp	r3, #85	@ 0x55
 80330b8:	d105      	bne.n	80330c6 <svl_pdhInit+0x8a>
 80330ba:	481d      	ldr	r0, [pc, #116]	@ (8033130 <svl_pdhInit+0xf4>)
 80330bc:	f006 fcda 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 80330c0:	4603      	mov	r3, r0
 80330c2:	71fb      	strb	r3, [r7, #7]
 80330c4:	e001      	b.n	80330ca <svl_pdhInit+0x8e>
 80330c6:	23ae      	movs	r3, #174	@ 0xae
 80330c8:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&wifiCfgSetMsg));
 80330ca:	79fb      	ldrb	r3, [r7, #7]
 80330cc:	2b55      	cmp	r3, #85	@ 0x55
 80330ce:	d105      	bne.n	80330dc <svl_pdhInit+0xa0>
 80330d0:	4818      	ldr	r0, [pc, #96]	@ (8033134 <svl_pdhInit+0xf8>)
 80330d2:	f006 fccf 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 80330d6:	4603      	mov	r3, r0
 80330d8:	71fb      	strb	r3, [r7, #7]
 80330da:	e001      	b.n	80330e0 <svl_pdhInit+0xa4>
 80330dc:	23ae      	movs	r3, #174	@ 0xae
 80330de:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&bldCfgSetMsg));
 80330e0:	79fb      	ldrb	r3, [r7, #7]
 80330e2:	2b55      	cmp	r3, #85	@ 0x55
 80330e4:	d105      	bne.n	80330f2 <svl_pdhInit+0xb6>
 80330e6:	4814      	ldr	r0, [pc, #80]	@ (8033138 <svl_pdhInit+0xfc>)
 80330e8:	f006 fcc4 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 80330ec:	4603      	mov	r3, r0
 80330ee:	71fb      	strb	r3, [r7, #7]
 80330f0:	e001      	b.n	80330f6 <svl_pdhInit+0xba>
 80330f2:	23ae      	movs	r3, #174	@ 0xae
 80330f4:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_mutexInit(&pdhMutex));
 80330f6:	79fb      	ldrb	r3, [r7, #7]
 80330f8:	2b55      	cmp	r3, #85	@ 0x55
 80330fa:	d105      	bne.n	8033108 <svl_pdhInit+0xcc>
 80330fc:	480f      	ldr	r0, [pc, #60]	@ (803313c <svl_pdhInit+0x100>)
 80330fe:	f005 fa8d 	bl	803861c <gos_mutexInit>
 8033102:	4603      	mov	r3, r0
 8033104:	71fb      	strb	r3, [r7, #7]
 8033106:	e001      	b.n	803310c <svl_pdhInit+0xd0>
 8033108:	23ae      	movs	r3, #174	@ 0xae
 803310a:	71fb      	strb	r3, [r7, #7]

	pdhInited = GOS_TRUE;
 803310c:	4b0c      	ldr	r3, [pc, #48]	@ (8033140 <svl_pdhInit+0x104>)
 803310e:	2236      	movs	r2, #54	@ 0x36
 8033110:	701a      	strb	r2, [r3, #0]

	return initResult;
 8033112:	79fb      	ldrb	r3, [r7, #7]
}
 8033114:	4618      	mov	r0, r3
 8033116:	3708      	adds	r7, #8
 8033118:	46bd      	mov	sp, r7
 803311a:	bd80      	pop	{r7, pc}
 803311c:	2000177c 	.word	0x2000177c
 8033120:	2000178c 	.word	0x2000178c
 8033124:	2000179c 	.word	0x2000179c
 8033128:	200017ac 	.word	0x200017ac
 803312c:	200017bc 	.word	0x200017bc
 8033130:	200017cc 	.word	0x200017cc
 8033134:	200017dc 	.word	0x200017dc
 8033138:	200017ec 	.word	0x200017ec
 803313c:	2000a670 	.word	0x2000a670
 8033140:	20001778 	.word	0x20001778

08033144 <svl_pdhConfigure>:

/*
 * Function: svl_pdhConfigure
 */
gos_result_t svl_pdhConfigure (svl_pdhCfg_t* pCfg)
{
 8033144:	b480      	push	{r7}
 8033146:	b085      	sub	sp, #20
 8033148:	af00      	add	r7, sp, #0
 803314a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 803314c:	23ae      	movs	r3, #174	@ 0xae
 803314e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 8033150:	687b      	ldr	r3, [r7, #4]
 8033152:	2b00      	cmp	r3, #0
 8033154:	d011      	beq.n	803317a <svl_pdhConfigure+0x36>
 8033156:	687b      	ldr	r3, [r7, #4]
 8033158:	681b      	ldr	r3, [r3, #0]
 803315a:	2b00      	cmp	r3, #0
 803315c:	d00d      	beq.n	803317a <svl_pdhConfigure+0x36>
 803315e:	687b      	ldr	r3, [r7, #4]
 8033160:	685b      	ldr	r3, [r3, #4]
 8033162:	2b00      	cmp	r3, #0
 8033164:	d009      	beq.n	803317a <svl_pdhConfigure+0x36>
	{
		pdhReadFunction  = pCfg->readFunction;
 8033166:	687b      	ldr	r3, [r7, #4]
 8033168:	681b      	ldr	r3, [r3, #0]
 803316a:	4a07      	ldr	r2, [pc, #28]	@ (8033188 <svl_pdhConfigure+0x44>)
 803316c:	6013      	str	r3, [r2, #0]
		pdhWriteFunction = pCfg->writeFunction;
 803316e:	687b      	ldr	r3, [r7, #4]
 8033170:	685b      	ldr	r3, [r3, #4]
 8033172:	4a06      	ldr	r2, [pc, #24]	@ (803318c <svl_pdhConfigure+0x48>)
 8033174:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 8033176:	2355      	movs	r3, #85	@ 0x55
 8033178:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 803317a:	7bfb      	ldrb	r3, [r7, #15]
}
 803317c:	4618      	mov	r0, r3
 803317e:	3714      	adds	r7, #20
 8033180:	46bd      	mov	sp, r7
 8033182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033186:	4770      	bx	lr
 8033188:	2000a668 	.word	0x2000a668
 803318c:	2000a66c 	.word	0x2000a66c

08033190 <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 8033190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033192:	b085      	sub	sp, #20
 8033194:	af00      	add	r7, sp, #0
 8033196:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8033198:	23ae      	movs	r3, #174	@ 0xae
 803319a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 803319c:	687b      	ldr	r3, [r7, #4]
 803319e:	2b00      	cmp	r3, #0
 80331a0:	d069      	beq.n	8033276 <svl_pdhGetLibVersion+0xe6>
 80331a2:	4b38      	ldr	r3, [pc, #224]	@ (8033284 <svl_pdhGetLibVersion+0xf4>)
 80331a4:	681b      	ldr	r3, [r3, #0]
 80331a6:	2b00      	cmp	r3, #0
 80331a8:	d065      	beq.n	8033276 <svl_pdhGetLibVersion+0xe6>
	{
		//(void_t) memset((void_t*)pLibVer, 0, sizeof(*pLibVer));

		pLibVer->major             = PDH_LIBVER_VERSION_MAJOR;
 80331aa:	687b      	ldr	r3, [r7, #4]
 80331ac:	2200      	movs	r2, #0
 80331ae:	701a      	strb	r2, [r3, #0]
 80331b0:	2200      	movs	r2, #0
 80331b2:	705a      	strb	r2, [r3, #1]
		pLibVer->minor             = PDH_LIBVER_VERSION_MINOR;
 80331b4:	687b      	ldr	r3, [r7, #4]
 80331b6:	2200      	movs	r2, #0
 80331b8:	f042 0215 	orr.w	r2, r2, #21
 80331bc:	709a      	strb	r2, [r3, #2]
 80331be:	2200      	movs	r2, #0
 80331c0:	70da      	strb	r2, [r3, #3]
		pLibVer->build             = PDH_LIBVER_VERSION_BUILD;
 80331c2:	687b      	ldr	r3, [r7, #4]
 80331c4:	2200      	movs	r2, #0
 80331c6:	711a      	strb	r2, [r3, #4]
 80331c8:	2200      	movs	r2, #0
 80331ca:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years        = PDH_LIBVER_VERSION_DATE_YEAR;
 80331cc:	687b      	ldr	r3, [r7, #4]
 80331ce:	2200      	movs	r2, #0
 80331d0:	f062 0216 	orn	r2, r2, #22
 80331d4:	739a      	strb	r2, [r3, #14]
 80331d6:	2200      	movs	r2, #0
 80331d8:	f042 0207 	orr.w	r2, r2, #7
 80331dc:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months       = PDH_LIBVER_VERSION_DATE_MONTH;
 80331de:	687b      	ldr	r3, [r7, #4]
 80331e0:	2203      	movs	r2, #3
 80331e2:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days         = PDH_LIBVER_VERSION_DATE_DAY;
 80331e4:	687b      	ldr	r3, [r7, #4]
 80331e6:	2200      	movs	r2, #0
 80331e8:	f042 021b 	orr.w	r2, r2, #27
 80331ec:	72da      	strb	r2, [r3, #11]
 80331ee:	2200      	movs	r2, #0
 80331f0:	731a      	strb	r2, [r3, #12]
		pLibVer->date.hours        = 0u;
 80331f2:	687b      	ldr	r3, [r7, #4]
 80331f4:	2200      	movs	r2, #0
 80331f6:	729a      	strb	r2, [r3, #10]
		pLibVer->date.minutes      = 0u;
 80331f8:	687b      	ldr	r3, [r7, #4]
 80331fa:	2200      	movs	r2, #0
 80331fc:	725a      	strb	r2, [r3, #9]
		pLibVer->date.seconds      = 0u;
 80331fe:	687b      	ldr	r3, [r7, #4]
 8033200:	2200      	movs	r2, #0
 8033202:	721a      	strb	r2, [r3, #8]
		pLibVer->date.milliseconds = 0u;
 8033204:	687b      	ldr	r3, [r7, #4]
 8033206:	2200      	movs	r2, #0
 8033208:	719a      	strb	r2, [r3, #6]
 803320a:	2200      	movs	r2, #0
 803320c:	71da      	strb	r2, [r3, #7]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 803320e:	687b      	ldr	r3, [r7, #4]
 8033210:	3310      	adds	r3, #16
 8033212:	4a1d      	ldr	r2, [pc, #116]	@ (8033288 <svl_pdhGetLibVersion+0xf8>)
 8033214:	461c      	mov	r4, r3
 8033216:	4613      	mov	r3, r2
 8033218:	cb07      	ldmia	r3!, {r0, r1, r2}
 803321a:	6020      	str	r0, [r4, #0]
 803321c:	6061      	str	r1, [r4, #4]
 803321e:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 8033220:	687b      	ldr	r3, [r7, #4]
 8033222:	3370      	adds	r3, #112	@ 0x70
 8033224:	4a19      	ldr	r2, [pc, #100]	@ (803328c <svl_pdhGetLibVersion+0xfc>)
 8033226:	461d      	mov	r5, r3
 8033228:	4614      	mov	r4, r2
 803322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 803322c:	6028      	str	r0, [r5, #0]
 803322e:	6069      	str	r1, [r5, #4]
 8033230:	60aa      	str	r2, [r5, #8]
 8033232:	60eb      	str	r3, [r5, #12]
 8033234:	6820      	ldr	r0, [r4, #0]
 8033236:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 8033238:	687b      	ldr	r3, [r7, #4]
 803323a:	3340      	adds	r3, #64	@ 0x40
 803323c:	4a14      	ldr	r2, [pc, #80]	@ (8033290 <svl_pdhGetLibVersion+0x100>)
 803323e:	4614      	mov	r4, r2
 8033240:	469c      	mov	ip, r3
 8033242:	f104 0e20 	add.w	lr, r4, #32
 8033246:	4665      	mov	r5, ip
 8033248:	4626      	mov	r6, r4
 803324a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 803324c:	6028      	str	r0, [r5, #0]
 803324e:	6069      	str	r1, [r5, #4]
 8033250:	60aa      	str	r2, [r5, #8]
 8033252:	60eb      	str	r3, [r5, #12]
 8033254:	3410      	adds	r4, #16
 8033256:	f10c 0c10 	add.w	ip, ip, #16
 803325a:	4574      	cmp	r4, lr
 803325c:	d1f3      	bne.n	8033246 <svl_pdhGetLibVersion+0xb6>
 803325e:	4662      	mov	r2, ip
 8033260:	4623      	mov	r3, r4
 8033262:	cb03      	ldmia	r3!, {r0, r1}
 8033264:	6010      	str	r0, [r2, #0]
 8033266:	6051      	str	r1, [r2, #4]
 8033268:	8819      	ldrh	r1, [r3, #0]
 803326a:	789b      	ldrb	r3, [r3, #2]
 803326c:	8111      	strh	r1, [r2, #8]
 803326e:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 8033270:	2355      	movs	r3, #85	@ 0x55
 8033272:	73fb      	strb	r3, [r7, #15]
 8033274:	e001      	b.n	803327a <svl_pdhGetLibVersion+0xea>
	}
	else
	{
		getResult = GOS_ERROR;
 8033276:	23ae      	movs	r3, #174	@ 0xae
 8033278:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 803327a:	7bfb      	ldrb	r3, [r7, #15]
}
 803327c:	4618      	mov	r0, r3
 803327e:	3714      	adds	r7, #20
 8033280:	46bd      	mov	sp, r7
 8033282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033284:	2000a668 	.word	0x2000a668
 8033288:	0803e980 	.word	0x0803e980
 803328c:	0803e98c 	.word	0x0803e98c
 8033290:	0803e9a0 	.word	0x0803e9a0

08033294 <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 8033294:	b580      	push	{r7, lr}
 8033296:	b084      	sub	sp, #16
 8033298:	af00      	add	r7, sp, #0
 803329a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 803329c:	23ae      	movs	r3, #174	@ 0xae
 803329e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 80332a0:	687b      	ldr	r3, [r7, #4]
 80332a2:	2b00      	cmp	r3, #0
 80332a4:	d020      	beq.n	80332e8 <svl_pdhGetSwInfo+0x54>
 80332a6:	4b14      	ldr	r3, [pc, #80]	@ (80332f8 <svl_pdhGetSwInfo+0x64>)
 80332a8:	681b      	ldr	r3, [r3, #0]
 80332aa:	2b00      	cmp	r3, #0
 80332ac:	d01c      	beq.n	80332e8 <svl_pdhGetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80332ae:	4b13      	ldr	r3, [pc, #76]	@ (80332fc <svl_pdhGetSwInfo+0x68>)
 80332b0:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 80332b2:	2b49      	cmp	r3, #73	@ 0x49
 80332b4:	d00b      	beq.n	80332ce <svl_pdhGetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80332b6:	4b11      	ldr	r3, [pc, #68]	@ (80332fc <svl_pdhGetSwInfo+0x68>)
 80332b8:	781b      	ldrb	r3, [r3, #0]
 80332ba:	2b36      	cmp	r3, #54	@ 0x36
 80332bc:	d114      	bne.n	80332e8 <svl_pdhGetSwInfo+0x54>
 80332be:	f241 3188 	movw	r1, #5000	@ 0x1388
 80332c2:	480f      	ldr	r0, [pc, #60]	@ (8033300 <svl_pdhGetSwInfo+0x6c>)
 80332c4:	f005 f9c4 	bl	8038650 <gos_mutexLock>
 80332c8:	4603      	mov	r3, r0
 80332ca:	2b55      	cmp	r3, #85	@ 0x55
 80332cc:	d10c      	bne.n	80332e8 <svl_pdhGetSwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 80332ce:	4b0a      	ldr	r3, [pc, #40]	@ (80332f8 <svl_pdhGetSwInfo+0x64>)
 80332d0:	681b      	ldr	r3, [r3, #0]
 80332d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80332d6:	6879      	ldr	r1, [r7, #4]
 80332d8:	2000      	movs	r0, #0
 80332da:	4798      	blx	r3
 80332dc:	4603      	mov	r3, r0
 80332de:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80332e0:	4807      	ldr	r0, [pc, #28]	@ (8033300 <svl_pdhGetSwInfo+0x6c>)
 80332e2:	f005 fabb 	bl	803885c <gos_mutexUnlock>
 80332e6:	e001      	b.n	80332ec <svl_pdhGetSwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 80332e8:	23ae      	movs	r3, #174	@ 0xae
 80332ea:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 80332ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80332ee:	4618      	mov	r0, r3
 80332f0:	3710      	adds	r7, #16
 80332f2:	46bd      	mov	sp, r7
 80332f4:	bd80      	pop	{r7, pc}
 80332f6:	bf00      	nop
 80332f8:	2000a668 	.word	0x2000a668
 80332fc:	20001778 	.word	0x20001778
 8033300:	2000a670 	.word	0x2000a670

08033304 <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 8033304:	b580      	push	{r7, lr}
 8033306:	b084      	sub	sp, #16
 8033308:	af00      	add	r7, sp, #0
 803330a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 803330c:	23ae      	movs	r3, #174	@ 0xae
 803330e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8033310:	687b      	ldr	r3, [r7, #4]
 8033312:	2b00      	cmp	r3, #0
 8033314:	d020      	beq.n	8033358 <svl_pdhGetHwInfo+0x54>
 8033316:	4b14      	ldr	r3, [pc, #80]	@ (8033368 <svl_pdhGetHwInfo+0x64>)
 8033318:	681b      	ldr	r3, [r3, #0]
 803331a:	2b00      	cmp	r3, #0
 803331c:	d01c      	beq.n	8033358 <svl_pdhGetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803331e:	4b13      	ldr	r3, [pc, #76]	@ (803336c <svl_pdhGetHwInfo+0x68>)
 8033320:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8033322:	2b49      	cmp	r3, #73	@ 0x49
 8033324:	d00b      	beq.n	803333e <svl_pdhGetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033326:	4b11      	ldr	r3, [pc, #68]	@ (803336c <svl_pdhGetHwInfo+0x68>)
 8033328:	781b      	ldrb	r3, [r3, #0]
 803332a:	2b36      	cmp	r3, #54	@ 0x36
 803332c:	d114      	bne.n	8033358 <svl_pdhGetHwInfo+0x54>
 803332e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033332:	480f      	ldr	r0, [pc, #60]	@ (8033370 <svl_pdhGetHwInfo+0x6c>)
 8033334:	f005 f98c 	bl	8038650 <gos_mutexLock>
 8033338:	4603      	mov	r3, r0
 803333a:	2b55      	cmp	r3, #85	@ 0x55
 803333c:	d10c      	bne.n	8033358 <svl_pdhGetHwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 803333e:	4b0a      	ldr	r3, [pc, #40]	@ (8033368 <svl_pdhGetHwInfo+0x64>)
 8033340:	681b      	ldr	r3, [r3, #0]
 8033342:	22fa      	movs	r2, #250	@ 0xfa
 8033344:	6879      	ldr	r1, [r7, #4]
 8033346:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 803334a:	4798      	blx	r3
 803334c:	4603      	mov	r3, r0
 803334e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033350:	4807      	ldr	r0, [pc, #28]	@ (8033370 <svl_pdhGetHwInfo+0x6c>)
 8033352:	f005 fa83 	bl	803885c <gos_mutexUnlock>
 8033356:	e001      	b.n	803335c <svl_pdhGetHwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 8033358:	23ae      	movs	r3, #174	@ 0xae
 803335a:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 803335c:	7bfb      	ldrb	r3, [r7, #15]
}
 803335e:	4618      	mov	r0, r3
 8033360:	3710      	adds	r7, #16
 8033362:	46bd      	mov	sp, r7
 8033364:	bd80      	pop	{r7, pc}
 8033366:	bf00      	nop
 8033368:	2000a668 	.word	0x2000a668
 803336c:	20001778 	.word	0x20001778
 8033370:	2000a670 	.word	0x2000a670

08033374 <svl_pdhGetBldCfg>:

/*
 * Function: svl_pdhGetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhGetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 8033374:	b580      	push	{r7, lr}
 8033376:	b084      	sub	sp, #16
 8033378:	af00      	add	r7, sp, #0
 803337a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 803337c:	23ae      	movs	r3, #174	@ 0xae
 803337e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8033380:	687b      	ldr	r3, [r7, #4]
 8033382:	2b00      	cmp	r3, #0
 8033384:	d020      	beq.n	80333c8 <svl_pdhGetBldCfg+0x54>
 8033386:	4b14      	ldr	r3, [pc, #80]	@ (80333d8 <svl_pdhGetBldCfg+0x64>)
 8033388:	681b      	ldr	r3, [r3, #0]
 803338a:	2b00      	cmp	r3, #0
 803338c:	d01c      	beq.n	80333c8 <svl_pdhGetBldCfg+0x54>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803338e:	4b13      	ldr	r3, [pc, #76]	@ (80333dc <svl_pdhGetBldCfg+0x68>)
 8033390:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8033392:	2b49      	cmp	r3, #73	@ 0x49
 8033394:	d00b      	beq.n	80333ae <svl_pdhGetBldCfg+0x3a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033396:	4b11      	ldr	r3, [pc, #68]	@ (80333dc <svl_pdhGetBldCfg+0x68>)
 8033398:	781b      	ldrb	r3, [r3, #0]
 803339a:	2b36      	cmp	r3, #54	@ 0x36
 803339c:	d114      	bne.n	80333c8 <svl_pdhGetBldCfg+0x54>
 803339e:	f241 3188 	movw	r1, #5000	@ 0x1388
 80333a2:	480f      	ldr	r0, [pc, #60]	@ (80333e0 <svl_pdhGetBldCfg+0x6c>)
 80333a4:	f005 f954 	bl	8038650 <gos_mutexLock>
 80333a8:	4603      	mov	r3, r0
 80333aa:	2b55      	cmp	r3, #85	@ 0x55
 80333ac:	d10c      	bne.n	80333c8 <svl_pdhGetBldCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 80333ae:	4b0a      	ldr	r3, [pc, #40]	@ (80333d8 <svl_pdhGetBldCfg+0x64>)
 80333b0:	681b      	ldr	r3, [r3, #0]
 80333b2:	220e      	movs	r2, #14
 80333b4:	6879      	ldr	r1, [r7, #4]
 80333b6:	f240 309a 	movw	r0, #922	@ 0x39a
 80333ba:	4798      	blx	r3
 80333bc:	4603      	mov	r3, r0
 80333be:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80333c0:	4807      	ldr	r0, [pc, #28]	@ (80333e0 <svl_pdhGetBldCfg+0x6c>)
 80333c2:	f005 fa4b 	bl	803885c <gos_mutexUnlock>
 80333c6:	e001      	b.n	80333cc <svl_pdhGetBldCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 80333c8:	23ae      	movs	r3, #174	@ 0xae
 80333ca:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 80333cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80333ce:	4618      	mov	r0, r3
 80333d0:	3710      	adds	r7, #16
 80333d2:	46bd      	mov	sp, r7
 80333d4:	bd80      	pop	{r7, pc}
 80333d6:	bf00      	nop
 80333d8:	2000a668 	.word	0x2000a668
 80333dc:	20001778 	.word	0x20001778
 80333e0:	2000a670 	.word	0x2000a670

080333e4 <svl_pdhGetWifiCfg>:

/*
 * Function: svl_pdhGetWifiCfg
 */
gos_result_t svl_pdhGetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 80333e4:	b580      	push	{r7, lr}
 80333e6:	b084      	sub	sp, #16
 80333e8:	af00      	add	r7, sp, #0
 80333ea:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 80333ec:	23ae      	movs	r3, #174	@ 0xae
 80333ee:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 80333f0:	687b      	ldr	r3, [r7, #4]
 80333f2:	2b00      	cmp	r3, #0
 80333f4:	d020      	beq.n	8033438 <svl_pdhGetWifiCfg+0x54>
 80333f6:	4b14      	ldr	r3, [pc, #80]	@ (8033448 <svl_pdhGetWifiCfg+0x64>)
 80333f8:	681b      	ldr	r3, [r3, #0]
 80333fa:	2b00      	cmp	r3, #0
 80333fc:	d01c      	beq.n	8033438 <svl_pdhGetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80333fe:	4b13      	ldr	r3, [pc, #76]	@ (803344c <svl_pdhGetWifiCfg+0x68>)
 8033400:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 8033402:	2b49      	cmp	r3, #73	@ 0x49
 8033404:	d00b      	beq.n	803341e <svl_pdhGetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033406:	4b11      	ldr	r3, [pc, #68]	@ (803344c <svl_pdhGetWifiCfg+0x68>)
 8033408:	781b      	ldrb	r3, [r3, #0]
 803340a:	2b36      	cmp	r3, #54	@ 0x36
 803340c:	d114      	bne.n	8033438 <svl_pdhGetWifiCfg+0x54>
 803340e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033412:	480f      	ldr	r0, [pc, #60]	@ (8033450 <svl_pdhGetWifiCfg+0x6c>)
 8033414:	f005 f91c 	bl	8038650 <gos_mutexLock>
 8033418:	4603      	mov	r3, r0
 803341a:	2b55      	cmp	r3, #85	@ 0x55
 803341c:	d10c      	bne.n	8033438 <svl_pdhGetWifiCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 803341e:	4b0a      	ldr	r3, [pc, #40]	@ (8033448 <svl_pdhGetWifiCfg+0x64>)
 8033420:	681b      	ldr	r3, [r3, #0]
 8033422:	226e      	movs	r2, #110	@ 0x6e
 8033424:	6879      	ldr	r1, [r7, #4]
 8033426:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 803342a:	4798      	blx	r3
 803342c:	4603      	mov	r3, r0
 803342e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033430:	4807      	ldr	r0, [pc, #28]	@ (8033450 <svl_pdhGetWifiCfg+0x6c>)
 8033432:	f005 fa13 	bl	803885c <gos_mutexUnlock>
 8033436:	e001      	b.n	803343c <svl_pdhGetWifiCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 8033438:	23ae      	movs	r3, #174	@ 0xae
 803343a:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 803343c:	7bfb      	ldrb	r3, [r7, #15]
}
 803343e:	4618      	mov	r0, r3
 8033440:	3710      	adds	r7, #16
 8033442:	46bd      	mov	sp, r7
 8033444:	bd80      	pop	{r7, pc}
 8033446:	bf00      	nop
 8033448:	2000a668 	.word	0x2000a668
 803344c:	20001778 	.word	0x20001778
 8033450:	2000a670 	.word	0x2000a670

08033454 <svl_pdhSetSwInfo>:

/*
 * Function: svl_pdhSetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhSetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 8033454:	b580      	push	{r7, lr}
 8033456:	b084      	sub	sp, #16
 8033458:	af00      	add	r7, sp, #0
 803345a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 803345c:	23ae      	movs	r3, #174	@ 0xae
 803345e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8033460:	687b      	ldr	r3, [r7, #4]
 8033462:	2b00      	cmp	r3, #0
 8033464:	d020      	beq.n	80334a8 <svl_pdhSetSwInfo+0x54>
 8033466:	4b14      	ldr	r3, [pc, #80]	@ (80334b8 <svl_pdhSetSwInfo+0x64>)
 8033468:	681b      	ldr	r3, [r3, #0]
 803346a:	2b00      	cmp	r3, #0
 803346c:	d01c      	beq.n	80334a8 <svl_pdhSetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803346e:	4b13      	ldr	r3, [pc, #76]	@ (80334bc <svl_pdhSetSwInfo+0x68>)
 8033470:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8033472:	2b49      	cmp	r3, #73	@ 0x49
 8033474:	d00b      	beq.n	803348e <svl_pdhSetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033476:	4b11      	ldr	r3, [pc, #68]	@ (80334bc <svl_pdhSetSwInfo+0x68>)
 8033478:	781b      	ldrb	r3, [r3, #0]
 803347a:	2b36      	cmp	r3, #54	@ 0x36
 803347c:	d114      	bne.n	80334a8 <svl_pdhSetSwInfo+0x54>
 803347e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033482:	480f      	ldr	r0, [pc, #60]	@ (80334c0 <svl_pdhSetSwInfo+0x6c>)
 8033484:	f005 f8e4 	bl	8038650 <gos_mutexLock>
 8033488:	4603      	mov	r3, r0
 803348a:	2b55      	cmp	r3, #85	@ 0x55
 803348c:	d10c      	bne.n	80334a8 <svl_pdhSetSwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 803348e:	4b0a      	ldr	r3, [pc, #40]	@ (80334b8 <svl_pdhSetSwInfo+0x64>)
 8033490:	681b      	ldr	r3, [r3, #0]
 8033492:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8033496:	6879      	ldr	r1, [r7, #4]
 8033498:	2000      	movs	r0, #0
 803349a:	4798      	blx	r3
 803349c:	4603      	mov	r3, r0
 803349e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80334a0:	4807      	ldr	r0, [pc, #28]	@ (80334c0 <svl_pdhSetSwInfo+0x6c>)
 80334a2:	f005 f9db 	bl	803885c <gos_mutexUnlock>
 80334a6:	e001      	b.n	80334ac <svl_pdhSetSwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 80334a8:	23ae      	movs	r3, #174	@ 0xae
 80334aa:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 80334ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80334ae:	4618      	mov	r0, r3
 80334b0:	3710      	adds	r7, #16
 80334b2:	46bd      	mov	sp, r7
 80334b4:	bd80      	pop	{r7, pc}
 80334b6:	bf00      	nop
 80334b8:	2000a66c 	.word	0x2000a66c
 80334bc:	20001778 	.word	0x20001778
 80334c0:	2000a670 	.word	0x2000a670

080334c4 <svl_pdhSetHwInfo>:

/*
 * Function: svl_pdhSetHwInfo
 */
gos_result_t svl_pdhSetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 80334c4:	b580      	push	{r7, lr}
 80334c6:	b084      	sub	sp, #16
 80334c8:	af00      	add	r7, sp, #0
 80334ca:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 80334cc:	23ae      	movs	r3, #174	@ 0xae
 80334ce:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 80334d0:	687b      	ldr	r3, [r7, #4]
 80334d2:	2b00      	cmp	r3, #0
 80334d4:	d020      	beq.n	8033518 <svl_pdhSetHwInfo+0x54>
 80334d6:	4b14      	ldr	r3, [pc, #80]	@ (8033528 <svl_pdhSetHwInfo+0x64>)
 80334d8:	681b      	ldr	r3, [r3, #0]
 80334da:	2b00      	cmp	r3, #0
 80334dc:	d01c      	beq.n	8033518 <svl_pdhSetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80334de:	4b13      	ldr	r3, [pc, #76]	@ (803352c <svl_pdhSetHwInfo+0x68>)
 80334e0:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 80334e2:	2b49      	cmp	r3, #73	@ 0x49
 80334e4:	d00b      	beq.n	80334fe <svl_pdhSetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80334e6:	4b11      	ldr	r3, [pc, #68]	@ (803352c <svl_pdhSetHwInfo+0x68>)
 80334e8:	781b      	ldrb	r3, [r3, #0]
 80334ea:	2b36      	cmp	r3, #54	@ 0x36
 80334ec:	d114      	bne.n	8033518 <svl_pdhSetHwInfo+0x54>
 80334ee:	f241 3188 	movw	r1, #5000	@ 0x1388
 80334f2:	480f      	ldr	r0, [pc, #60]	@ (8033530 <svl_pdhSetHwInfo+0x6c>)
 80334f4:	f005 f8ac 	bl	8038650 <gos_mutexLock>
 80334f8:	4603      	mov	r3, r0
 80334fa:	2b55      	cmp	r3, #85	@ 0x55
 80334fc:	d10c      	bne.n	8033518 <svl_pdhSetHwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 80334fe:	4b0a      	ldr	r3, [pc, #40]	@ (8033528 <svl_pdhSetHwInfo+0x64>)
 8033500:	681b      	ldr	r3, [r3, #0]
 8033502:	22fa      	movs	r2, #250	@ 0xfa
 8033504:	6879      	ldr	r1, [r7, #4]
 8033506:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 803350a:	4798      	blx	r3
 803350c:	4603      	mov	r3, r0
 803350e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033510:	4807      	ldr	r0, [pc, #28]	@ (8033530 <svl_pdhSetHwInfo+0x6c>)
 8033512:	f005 f9a3 	bl	803885c <gos_mutexUnlock>
 8033516:	e001      	b.n	803351c <svl_pdhSetHwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 8033518:	23ae      	movs	r3, #174	@ 0xae
 803351a:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 803351c:	7bfb      	ldrb	r3, [r7, #15]
}
 803351e:	4618      	mov	r0, r3
 8033520:	3710      	adds	r7, #16
 8033522:	46bd      	mov	sp, r7
 8033524:	bd80      	pop	{r7, pc}
 8033526:	bf00      	nop
 8033528:	2000a66c 	.word	0x2000a66c
 803352c:	20001778 	.word	0x20001778
 8033530:	2000a670 	.word	0x2000a670

08033534 <svl_pdhSetBldCfg>:

/*
 * Function: svl_pdhSetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhSetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 8033534:	b580      	push	{r7, lr}
 8033536:	b084      	sub	sp, #16
 8033538:	af00      	add	r7, sp, #0
 803353a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 803353c:	23ae      	movs	r3, #174	@ 0xae
 803353e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8033540:	687b      	ldr	r3, [r7, #4]
 8033542:	2b00      	cmp	r3, #0
 8033544:	d020      	beq.n	8033588 <svl_pdhSetBldCfg+0x54>
 8033546:	4b14      	ldr	r3, [pc, #80]	@ (8033598 <svl_pdhSetBldCfg+0x64>)
 8033548:	681b      	ldr	r3, [r3, #0]
 803354a:	2b00      	cmp	r3, #0
 803354c:	d01c      	beq.n	8033588 <svl_pdhSetBldCfg+0x54>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803354e:	4b13      	ldr	r3, [pc, #76]	@ (803359c <svl_pdhSetBldCfg+0x68>)
 8033550:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8033552:	2b49      	cmp	r3, #73	@ 0x49
 8033554:	d00b      	beq.n	803356e <svl_pdhSetBldCfg+0x3a>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033556:	4b11      	ldr	r3, [pc, #68]	@ (803359c <svl_pdhSetBldCfg+0x68>)
 8033558:	781b      	ldrb	r3, [r3, #0]
 803355a:	2b36      	cmp	r3, #54	@ 0x36
 803355c:	d114      	bne.n	8033588 <svl_pdhSetBldCfg+0x54>
 803355e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033562:	480f      	ldr	r0, [pc, #60]	@ (80335a0 <svl_pdhSetBldCfg+0x6c>)
 8033564:	f005 f874 	bl	8038650 <gos_mutexLock>
 8033568:	4603      	mov	r3, r0
 803356a:	2b55      	cmp	r3, #85	@ 0x55
 803356c:	d10c      	bne.n	8033588 <svl_pdhSetBldCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 803356e:	4b0a      	ldr	r3, [pc, #40]	@ (8033598 <svl_pdhSetBldCfg+0x64>)
 8033570:	681b      	ldr	r3, [r3, #0]
 8033572:	220e      	movs	r2, #14
 8033574:	6879      	ldr	r1, [r7, #4]
 8033576:	f240 309a 	movw	r0, #922	@ 0x39a
 803357a:	4798      	blx	r3
 803357c:	4603      	mov	r3, r0
 803357e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033580:	4807      	ldr	r0, [pc, #28]	@ (80335a0 <svl_pdhSetBldCfg+0x6c>)
 8033582:	f005 f96b 	bl	803885c <gos_mutexUnlock>
 8033586:	e001      	b.n	803358c <svl_pdhSetBldCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 8033588:	23ae      	movs	r3, #174	@ 0xae
 803358a:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 803358c:	7bfb      	ldrb	r3, [r7, #15]
}
 803358e:	4618      	mov	r0, r3
 8033590:	3710      	adds	r7, #16
 8033592:	46bd      	mov	sp, r7
 8033594:	bd80      	pop	{r7, pc}
 8033596:	bf00      	nop
 8033598:	2000a66c 	.word	0x2000a66c
 803359c:	20001778 	.word	0x20001778
 80335a0:	2000a670 	.word	0x2000a670

080335a4 <svl_pdhSetWifiCfg>:

/*
 * Function: svl_pdhSetWifiCfg
 */
gos_result_t svl_pdhSetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 80335a4:	b580      	push	{r7, lr}
 80335a6:	b084      	sub	sp, #16
 80335a8:	af00      	add	r7, sp, #0
 80335aa:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 80335ac:	23ae      	movs	r3, #174	@ 0xae
 80335ae:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 80335b0:	687b      	ldr	r3, [r7, #4]
 80335b2:	2b00      	cmp	r3, #0
 80335b4:	d020      	beq.n	80335f8 <svl_pdhSetWifiCfg+0x54>
 80335b6:	4b14      	ldr	r3, [pc, #80]	@ (8033608 <svl_pdhSetWifiCfg+0x64>)
 80335b8:	681b      	ldr	r3, [r3, #0]
 80335ba:	2b00      	cmp	r3, #0
 80335bc:	d01c      	beq.n	80335f8 <svl_pdhSetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80335be:	4b13      	ldr	r3, [pc, #76]	@ (803360c <svl_pdhSetWifiCfg+0x68>)
 80335c0:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 80335c2:	2b49      	cmp	r3, #73	@ 0x49
 80335c4:	d00b      	beq.n	80335de <svl_pdhSetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80335c6:	4b11      	ldr	r3, [pc, #68]	@ (803360c <svl_pdhSetWifiCfg+0x68>)
 80335c8:	781b      	ldrb	r3, [r3, #0]
 80335ca:	2b36      	cmp	r3, #54	@ 0x36
 80335cc:	d114      	bne.n	80335f8 <svl_pdhSetWifiCfg+0x54>
 80335ce:	f241 3188 	movw	r1, #5000	@ 0x1388
 80335d2:	480f      	ldr	r0, [pc, #60]	@ (8033610 <svl_pdhSetWifiCfg+0x6c>)
 80335d4:	f005 f83c 	bl	8038650 <gos_mutexLock>
 80335d8:	4603      	mov	r3, r0
 80335da:	2b55      	cmp	r3, #85	@ 0x55
 80335dc:	d10c      	bne.n	80335f8 <svl_pdhSetWifiCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 80335de:	4b0a      	ldr	r3, [pc, #40]	@ (8033608 <svl_pdhSetWifiCfg+0x64>)
 80335e0:	681b      	ldr	r3, [r3, #0]
 80335e2:	226e      	movs	r2, #110	@ 0x6e
 80335e4:	6879      	ldr	r1, [r7, #4]
 80335e6:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 80335ea:	4798      	blx	r3
 80335ec:	4603      	mov	r3, r0
 80335ee:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80335f0:	4807      	ldr	r0, [pc, #28]	@ (8033610 <svl_pdhSetWifiCfg+0x6c>)
 80335f2:	f005 f933 	bl	803885c <gos_mutexUnlock>
 80335f6:	e001      	b.n	80335fc <svl_pdhSetWifiCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 80335f8:	23ae      	movs	r3, #174	@ 0xae
 80335fa:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 80335fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80335fe:	4618      	mov	r0, r3
 8033600:	3710      	adds	r7, #16
 8033602:	46bd      	mov	sp, r7
 8033604:	bd80      	pop	{r7, pc}
 8033606:	bf00      	nop
 8033608:	2000a66c 	.word	0x2000a66c
 803360c:	20001778 	.word	0x20001778
 8033610:	2000a670 	.word	0x2000a670

08033614 <svl_pdhSoftwareInfoReqMsgReceived>:
 * @details Sends out the software info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhSoftwareInfoReqMsgReceived (void_t)
{
 8033614:	b580      	push	{r7, lr}
 8033616:	b084      	sub	sp, #16
 8033618:	af02      	add	r7, sp, #8
 803361a:	4b1c      	ldr	r3, [pc, #112]	@ (803368c <svl_pdhSoftwareInfoReqMsgReceived+0x78>)
 803361c:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 803361e:	23ae      	movs	r3, #174	@ 0xae
 8033620:	70fb      	strb	r3, [r7, #3]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8033622:	687b      	ldr	r3, [r7, #4]
 8033624:	2b00      	cmp	r3, #0
 8033626:	d020      	beq.n	803366a <svl_pdhSoftwareInfoReqMsgReceived+0x56>
 8033628:	4b19      	ldr	r3, [pc, #100]	@ (8033690 <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 803362a:	681b      	ldr	r3, [r3, #0]
 803362c:	2b00      	cmp	r3, #0
 803362e:	d01c      	beq.n	803366a <svl_pdhSoftwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033630:	4b18      	ldr	r3, [pc, #96]	@ (8033694 <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 8033632:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8033634:	2b49      	cmp	r3, #73	@ 0x49
 8033636:	d00b      	beq.n	8033650 <svl_pdhSoftwareInfoReqMsgReceived+0x3c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033638:	4b16      	ldr	r3, [pc, #88]	@ (8033694 <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 803363a:	781b      	ldrb	r3, [r3, #0]
 803363c:	2b36      	cmp	r3, #54	@ 0x36
 803363e:	d114      	bne.n	803366a <svl_pdhSoftwareInfoReqMsgReceived+0x56>
 8033640:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033644:	4814      	ldr	r0, [pc, #80]	@ (8033698 <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 8033646:	f005 f803 	bl	8038650 <gos_mutexLock>
 803364a:	4603      	mov	r3, r0
 803364c:	2b55      	cmp	r3, #85	@ 0x55
 803364e:	d10c      	bne.n	803366a <svl_pdhSoftwareInfoReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8033650:	4b0f      	ldr	r3, [pc, #60]	@ (8033690 <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 8033652:	681b      	ldr	r3, [r3, #0]
 8033654:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8033658:	6879      	ldr	r1, [r7, #4]
 803365a:	2000      	movs	r0, #0
 803365c:	4798      	blx	r3
 803365e:	4603      	mov	r3, r0
 8033660:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033662:	480d      	ldr	r0, [pc, #52]	@ (8033698 <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 8033664:	f005 f8fa 	bl	803885c <gos_mutexUnlock>
 8033668:	e001      	b.n	803366e <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 803366a:	23ae      	movs	r3, #174	@ 0xae
 803366c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 803366e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8033672:	9300      	str	r3, [sp, #0]
 8033674:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8033678:	4a04      	ldr	r2, [pc, #16]	@ (803368c <svl_pdhSoftwareInfoReqMsgReceived+0x78>)
 803367a:	f642 2101 	movw	r1, #10753	@ 0x2a01
 803367e:	2000      	movs	r0, #0
 8033680:	f004 fa40 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_GET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 8033684:	bf00      	nop
 8033686:	3708      	adds	r7, #8
 8033688:	46bd      	mov	sp, r7
 803368a:	bd80      	pop	{r7, pc}
 803368c:	2000aa74 	.word	0x2000aa74
 8033690:	2000a668 	.word	0x2000a668
 8033694:	20001778 	.word	0x20001778
 8033698:	2000a670 	.word	0x2000a670

0803369c <svl_pdhHardwareInfoReqMsgReceived>:
 * @details Sends out the hardware info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhHardwareInfoReqMsgReceived (void_t)
{
 803369c:	b580      	push	{r7, lr}
 803369e:	b084      	sub	sp, #16
 80336a0:	af02      	add	r7, sp, #8
 80336a2:	4b1c      	ldr	r3, [pc, #112]	@ (8033714 <svl_pdhHardwareInfoReqMsgReceived+0x78>)
 80336a4:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 80336a6:	23ae      	movs	r3, #174	@ 0xae
 80336a8:	70fb      	strb	r3, [r7, #3]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80336aa:	687b      	ldr	r3, [r7, #4]
 80336ac:	2b00      	cmp	r3, #0
 80336ae:	d020      	beq.n	80336f2 <svl_pdhHardwareInfoReqMsgReceived+0x56>
 80336b0:	4b19      	ldr	r3, [pc, #100]	@ (8033718 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 80336b2:	681b      	ldr	r3, [r3, #0]
 80336b4:	2b00      	cmp	r3, #0
 80336b6:	d01c      	beq.n	80336f2 <svl_pdhHardwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80336b8:	4b18      	ldr	r3, [pc, #96]	@ (803371c <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 80336ba:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80336bc:	2b49      	cmp	r3, #73	@ 0x49
 80336be:	d00b      	beq.n	80336d8 <svl_pdhHardwareInfoReqMsgReceived+0x3c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80336c0:	4b16      	ldr	r3, [pc, #88]	@ (803371c <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 80336c2:	781b      	ldrb	r3, [r3, #0]
 80336c4:	2b36      	cmp	r3, #54	@ 0x36
 80336c6:	d114      	bne.n	80336f2 <svl_pdhHardwareInfoReqMsgReceived+0x56>
 80336c8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80336cc:	4814      	ldr	r0, [pc, #80]	@ (8033720 <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 80336ce:	f004 ffbf 	bl	8038650 <gos_mutexLock>
 80336d2:	4603      	mov	r3, r0
 80336d4:	2b55      	cmp	r3, #85	@ 0x55
 80336d6:	d10c      	bne.n	80336f2 <svl_pdhHardwareInfoReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 80336d8:	4b0f      	ldr	r3, [pc, #60]	@ (8033718 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 80336da:	681b      	ldr	r3, [r3, #0]
 80336dc:	22fa      	movs	r2, #250	@ 0xfa
 80336de:	6879      	ldr	r1, [r7, #4]
 80336e0:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 80336e4:	4798      	blx	r3
 80336e6:	4603      	mov	r3, r0
 80336e8:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80336ea:	480d      	ldr	r0, [pc, #52]	@ (8033720 <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 80336ec:	f005 f8b6 	bl	803885c <gos_mutexUnlock>
 80336f0:	e001      	b.n	80336f6 <svl_pdhHardwareInfoReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 80336f2:	23ae      	movs	r3, #174	@ 0xae
 80336f4:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 80336f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80336fa:	9300      	str	r3, [sp, #0]
 80336fc:	23fa      	movs	r3, #250	@ 0xfa
 80336fe:	4a05      	ldr	r2, [pc, #20]	@ (8033714 <svl_pdhHardwareInfoReqMsgReceived+0x78>)
 8033700:	f642 2102 	movw	r1, #10754	@ 0x2a02
 8033704:	2000      	movs	r0, #0
 8033706:	f004 f9fd 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_GET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 803370a:	bf00      	nop
 803370c:	3708      	adds	r7, #8
 803370e:	46bd      	mov	sp, r7
 8033710:	bd80      	pop	{r7, pc}
 8033712:	bf00      	nop
 8033714:	2000ad14 	.word	0x2000ad14
 8033718:	2000a668 	.word	0x2000a668
 803371c:	20001778 	.word	0x20001778
 8033720:	2000a670 	.word	0x2000a670

08033724 <svl_pdhWifiCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgReqMsgReceived (void_t)
{
 8033724:	b580      	push	{r7, lr}
 8033726:	b082      	sub	sp, #8
 8033728:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 803372a:	4808      	ldr	r0, [pc, #32]	@ (803374c <svl_pdhWifiCfgReqMsgReceived+0x28>)
 803372c:	f7ff fe5a 	bl	80333e4 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 8033730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8033734:	9300      	str	r3, [sp, #0]
 8033736:	236e      	movs	r3, #110	@ 0x6e
 8033738:	4a04      	ldr	r2, [pc, #16]	@ (803374c <svl_pdhWifiCfgReqMsgReceived+0x28>)
 803373a:	f642 2103 	movw	r1, #10755	@ 0x2a03
 803373e:	2000      	movs	r0, #0
 8033740:	f004 f9e0 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_GET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 8033744:	bf00      	nop
 8033746:	46bd      	mov	sp, r7
 8033748:	bd80      	pop	{r7, pc}
 803374a:	bf00      	nop
 803374c:	2000ae10 	.word	0x2000ae10

08033750 <svl_pdhBldCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgReqMsgReceived (void_t)
{
 8033750:	b580      	push	{r7, lr}
 8033752:	b084      	sub	sp, #16
 8033754:	af02      	add	r7, sp, #8
 8033756:	4b1c      	ldr	r3, [pc, #112]	@ (80337c8 <svl_pdhBldCfgReqMsgReceived+0x78>)
 8033758:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 803375a:	23ae      	movs	r3, #174	@ 0xae
 803375c:	70fb      	strb	r3, [r7, #3]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 803375e:	687b      	ldr	r3, [r7, #4]
 8033760:	2b00      	cmp	r3, #0
 8033762:	d020      	beq.n	80337a6 <svl_pdhBldCfgReqMsgReceived+0x56>
 8033764:	4b19      	ldr	r3, [pc, #100]	@ (80337cc <svl_pdhBldCfgReqMsgReceived+0x7c>)
 8033766:	681b      	ldr	r3, [r3, #0]
 8033768:	2b00      	cmp	r3, #0
 803376a:	d01c      	beq.n	80337a6 <svl_pdhBldCfgReqMsgReceived+0x56>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803376c:	4b18      	ldr	r3, [pc, #96]	@ (80337d0 <svl_pdhBldCfgReqMsgReceived+0x80>)
 803376e:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8033770:	2b49      	cmp	r3, #73	@ 0x49
 8033772:	d00b      	beq.n	803378c <svl_pdhBldCfgReqMsgReceived+0x3c>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033774:	4b16      	ldr	r3, [pc, #88]	@ (80337d0 <svl_pdhBldCfgReqMsgReceived+0x80>)
 8033776:	781b      	ldrb	r3, [r3, #0]
 8033778:	2b36      	cmp	r3, #54	@ 0x36
 803377a:	d114      	bne.n	80337a6 <svl_pdhBldCfgReqMsgReceived+0x56>
 803377c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033780:	4814      	ldr	r0, [pc, #80]	@ (80337d4 <svl_pdhBldCfgReqMsgReceived+0x84>)
 8033782:	f004 ff65 	bl	8038650 <gos_mutexLock>
 8033786:	4603      	mov	r3, r0
 8033788:	2b55      	cmp	r3, #85	@ 0x55
 803378a:	d10c      	bne.n	80337a6 <svl_pdhBldCfgReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 803378c:	4b0f      	ldr	r3, [pc, #60]	@ (80337cc <svl_pdhBldCfgReqMsgReceived+0x7c>)
 803378e:	681b      	ldr	r3, [r3, #0]
 8033790:	220e      	movs	r2, #14
 8033792:	6879      	ldr	r1, [r7, #4]
 8033794:	f240 309a 	movw	r0, #922	@ 0x39a
 8033798:	4798      	blx	r3
 803379a:	4603      	mov	r3, r0
 803379c:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 803379e:	480d      	ldr	r0, [pc, #52]	@ (80337d4 <svl_pdhBldCfgReqMsgReceived+0x84>)
 80337a0:	f005 f85c 	bl	803885c <gos_mutexUnlock>
 80337a4:	e001      	b.n	80337aa <svl_pdhBldCfgReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 80337a6:	23ae      	movs	r3, #174	@ 0xae
 80337a8:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 80337aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80337ae:	9300      	str	r3, [sp, #0]
 80337b0:	230e      	movs	r3, #14
 80337b2:	4a05      	ldr	r2, [pc, #20]	@ (80337c8 <svl_pdhBldCfgReqMsgReceived+0x78>)
 80337b4:	f642 2104 	movw	r1, #10756	@ 0x2a04
 80337b8:	2000      	movs	r0, #0
 80337ba:	f004 f9a3 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_GET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 80337be:	bf00      	nop
 80337c0:	3708      	adds	r7, #8
 80337c2:	46bd      	mov	sp, r7
 80337c4:	bd80      	pop	{r7, pc}
 80337c6:	bf00      	nop
 80337c8:	2000ae80 	.word	0x2000ae80
 80337cc:	2000a668 	.word	0x2000a668
 80337d0:	20001778 	.word	0x20001778
 80337d4:	2000a670 	.word	0x2000a670

080337d8 <svl_pdhSoftwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhSoftwareInfoSetMsgReceived (void_t)
{
 80337d8:	b580      	push	{r7, lr}
 80337da:	b086      	sub	sp, #24
 80337dc:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&swInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhSwInfo_t));
 80337de:	4a36      	ldr	r2, [pc, #216]	@ (80338b8 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 80337e0:	4b36      	ldr	r3, [pc, #216]	@ (80338bc <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 80337e2:	4610      	mov	r0, r2
 80337e4:	4619      	mov	r1, r3
 80337e6:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80337ea:	461a      	mov	r2, r3
 80337ec:	f008 fcf1 	bl	803c1d2 <memcpy>
 80337f0:	4b31      	ldr	r3, [pc, #196]	@ (80338b8 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 80337f2:	607b      	str	r3, [r7, #4]
	gos_result_t setResult = GOS_ERROR;
 80337f4:	23ae      	movs	r3, #174	@ 0xae
 80337f6:	70fb      	strb	r3, [r7, #3]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 80337f8:	687b      	ldr	r3, [r7, #4]
 80337fa:	2b00      	cmp	r3, #0
 80337fc:	d020      	beq.n	8033840 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
 80337fe:	4b30      	ldr	r3, [pc, #192]	@ (80338c0 <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 8033800:	681b      	ldr	r3, [r3, #0]
 8033802:	2b00      	cmp	r3, #0
 8033804:	d01c      	beq.n	8033840 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033806:	4b2f      	ldr	r3, [pc, #188]	@ (80338c4 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 8033808:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 803380a:	2b49      	cmp	r3, #73	@ 0x49
 803380c:	d00b      	beq.n	8033826 <svl_pdhSoftwareInfoSetMsgReceived+0x4e>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803380e:	4b2d      	ldr	r3, [pc, #180]	@ (80338c4 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 8033810:	781b      	ldrb	r3, [r3, #0]
 8033812:	2b36      	cmp	r3, #54	@ 0x36
 8033814:	d114      	bne.n	8033840 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
 8033816:	f241 3188 	movw	r1, #5000	@ 0x1388
 803381a:	482b      	ldr	r0, [pc, #172]	@ (80338c8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 803381c:	f004 ff18 	bl	8038650 <gos_mutexLock>
 8033820:	4603      	mov	r3, r0
 8033822:	2b55      	cmp	r3, #85	@ 0x55
 8033824:	d10c      	bne.n	8033840 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8033826:	4b26      	ldr	r3, [pc, #152]	@ (80338c0 <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 8033828:	681b      	ldr	r3, [r3, #0]
 803382a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 803382e:	6879      	ldr	r1, [r7, #4]
 8033830:	2000      	movs	r0, #0
 8033832:	4798      	blx	r3
 8033834:	4603      	mov	r3, r0
 8033836:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033838:	4823      	ldr	r0, [pc, #140]	@ (80338c8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 803383a:	f005 f80f 	bl	803885c <gos_mutexUnlock>
 803383e:	e001      	b.n	8033844 <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
		setResult = GOS_ERROR;
 8033840:	23ae      	movs	r3, #174	@ 0xae
 8033842:	70fb      	strb	r3, [r7, #3]
 8033844:	4b1c      	ldr	r3, [pc, #112]	@ (80338b8 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 8033846:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 8033848:	23ae      	movs	r3, #174	@ 0xae
 803384a:	72fb      	strb	r3, [r7, #11]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 803384c:	68fb      	ldr	r3, [r7, #12]
 803384e:	2b00      	cmp	r3, #0
 8033850:	d020      	beq.n	8033894 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
 8033852:	4b1e      	ldr	r3, [pc, #120]	@ (80338cc <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 8033854:	681b      	ldr	r3, [r3, #0]
 8033856:	2b00      	cmp	r3, #0
 8033858:	d01c      	beq.n	8033894 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803385a:	4b1a      	ldr	r3, [pc, #104]	@ (80338c4 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 803385c:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 803385e:	2b49      	cmp	r3, #73	@ 0x49
 8033860:	d00b      	beq.n	803387a <svl_pdhSoftwareInfoSetMsgReceived+0xa2>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033862:	4b18      	ldr	r3, [pc, #96]	@ (80338c4 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 8033864:	781b      	ldrb	r3, [r3, #0]
 8033866:	2b36      	cmp	r3, #54	@ 0x36
 8033868:	d114      	bne.n	8033894 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
 803386a:	f241 3188 	movw	r1, #5000	@ 0x1388
 803386e:	4816      	ldr	r0, [pc, #88]	@ (80338c8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 8033870:	f004 feee 	bl	8038650 <gos_mutexLock>
 8033874:	4603      	mov	r3, r0
 8033876:	2b55      	cmp	r3, #85	@ 0x55
 8033878:	d10c      	bne.n	8033894 <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 803387a:	4b14      	ldr	r3, [pc, #80]	@ (80338cc <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 803387c:	681b      	ldr	r3, [r3, #0]
 803387e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8033882:	68f9      	ldr	r1, [r7, #12]
 8033884:	2000      	movs	r0, #0
 8033886:	4798      	blx	r3
 8033888:	4603      	mov	r3, r0
 803388a:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 803388c:	480e      	ldr	r0, [pc, #56]	@ (80338c8 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 803388e:	f004 ffe5 	bl	803885c <gos_mutexUnlock>
 8033892:	e001      	b.n	8033898 <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
		getResult = GOS_ERROR;
 8033894:	23ae      	movs	r3, #174	@ 0xae
 8033896:	72fb      	strb	r3, [r7, #11]

	(void_t) svl_pdhSetSwInfo(&swInfoMsg);
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8033898:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 803389c:	9300      	str	r3, [sp, #0]
 803389e:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80338a2:	4a05      	ldr	r2, [pc, #20]	@ (80338b8 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 80338a4:	f642 2105 	movw	r1, #10757	@ 0x2a05
 80338a8:	2000      	movs	r0, #0
 80338aa:	f004 f92b 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_SET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 80338ae:	bf00      	nop
 80338b0:	3710      	adds	r7, #16
 80338b2:	46bd      	mov	sp, r7
 80338b4:	bd80      	pop	{r7, pc}
 80338b6:	bf00      	nop
 80338b8:	2000aa74 	.word	0x2000aa74
 80338bc:	2000a674 	.word	0x2000a674
 80338c0:	2000a66c 	.word	0x2000a66c
 80338c4:	20001778 	.word	0x20001778
 80338c8:	2000a670 	.word	0x2000a670
 80338cc:	2000a668 	.word	0x2000a668

080338d0 <svl_pdhHardwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhHardwareInfoSetMsgReceived (void_t)
{
 80338d0:	b580      	push	{r7, lr}
 80338d2:	b084      	sub	sp, #16
 80338d4:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&hwInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhHwInfo_t));
 80338d6:	4a21      	ldr	r2, [pc, #132]	@ (803395c <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 80338d8:	4b21      	ldr	r3, [pc, #132]	@ (8033960 <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 80338da:	4610      	mov	r0, r2
 80338dc:	4619      	mov	r1, r3
 80338de:	23fa      	movs	r3, #250	@ 0xfa
 80338e0:	461a      	mov	r2, r3
 80338e2:	f008 fc76 	bl	803c1d2 <memcpy>

	(void_t) svl_pdhSetHwInfo(&hwInfoMsg);
 80338e6:	481d      	ldr	r0, [pc, #116]	@ (803395c <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 80338e8:	f7ff fdec 	bl	80334c4 <svl_pdhSetHwInfo>
 80338ec:	4b1b      	ldr	r3, [pc, #108]	@ (803395c <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 80338ee:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 80338f0:	23ae      	movs	r3, #174	@ 0xae
 80338f2:	70fb      	strb	r3, [r7, #3]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80338f4:	687b      	ldr	r3, [r7, #4]
 80338f6:	2b00      	cmp	r3, #0
 80338f8:	d020      	beq.n	803393c <svl_pdhHardwareInfoSetMsgReceived+0x6c>
 80338fa:	4b1a      	ldr	r3, [pc, #104]	@ (8033964 <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 80338fc:	681b      	ldr	r3, [r3, #0]
 80338fe:	2b00      	cmp	r3, #0
 8033900:	d01c      	beq.n	803393c <svl_pdhHardwareInfoSetMsgReceived+0x6c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033902:	4b19      	ldr	r3, [pc, #100]	@ (8033968 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 8033904:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8033906:	2b49      	cmp	r3, #73	@ 0x49
 8033908:	d00b      	beq.n	8033922 <svl_pdhHardwareInfoSetMsgReceived+0x52>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 803390a:	4b17      	ldr	r3, [pc, #92]	@ (8033968 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 803390c:	781b      	ldrb	r3, [r3, #0]
 803390e:	2b36      	cmp	r3, #54	@ 0x36
 8033910:	d114      	bne.n	803393c <svl_pdhHardwareInfoSetMsgReceived+0x6c>
 8033912:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033916:	4815      	ldr	r0, [pc, #84]	@ (803396c <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 8033918:	f004 fe9a 	bl	8038650 <gos_mutexLock>
 803391c:	4603      	mov	r3, r0
 803391e:	2b55      	cmp	r3, #85	@ 0x55
 8033920:	d10c      	bne.n	803393c <svl_pdhHardwareInfoSetMsgReceived+0x6c>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8033922:	4b10      	ldr	r3, [pc, #64]	@ (8033964 <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 8033924:	681b      	ldr	r3, [r3, #0]
 8033926:	22fa      	movs	r2, #250	@ 0xfa
 8033928:	6879      	ldr	r1, [r7, #4]
 803392a:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 803392e:	4798      	blx	r3
 8033930:	4603      	mov	r3, r0
 8033932:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033934:	480d      	ldr	r0, [pc, #52]	@ (803396c <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 8033936:	f004 ff91 	bl	803885c <gos_mutexUnlock>
 803393a:	e001      	b.n	8033940 <svl_pdhHardwareInfoSetMsgReceived+0x70>
		getResult = GOS_ERROR;
 803393c:	23ae      	movs	r3, #174	@ 0xae
 803393e:	70fb      	strb	r3, [r7, #3]
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8033940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8033944:	9300      	str	r3, [sp, #0]
 8033946:	23fa      	movs	r3, #250	@ 0xfa
 8033948:	4a04      	ldr	r2, [pc, #16]	@ (803395c <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 803394a:	f642 2106 	movw	r1, #10758	@ 0x2a06
 803394e:	2000      	movs	r0, #0
 8033950:	f004 f8d8 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_SET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 8033954:	bf00      	nop
 8033956:	3708      	adds	r7, #8
 8033958:	46bd      	mov	sp, r7
 803395a:	bd80      	pop	{r7, pc}
 803395c:	2000ad14 	.word	0x2000ad14
 8033960:	2000a674 	.word	0x2000a674
 8033964:	2000a668 	.word	0x2000a668
 8033968:	20001778 	.word	0x20001778
 803396c:	2000a670 	.word	0x2000a670

08033970 <svl_pdhWifiCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgSetMsgReceived (void_t)
{
 8033970:	b580      	push	{r7, lr}
 8033972:	b082      	sub	sp, #8
 8033974:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&wifiCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhWifiCfg_t));
 8033976:	4a0d      	ldr	r2, [pc, #52]	@ (80339ac <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 8033978:	4b0d      	ldr	r3, [pc, #52]	@ (80339b0 <svl_pdhWifiCfgSetMsgReceived+0x40>)
 803397a:	4610      	mov	r0, r2
 803397c:	4619      	mov	r1, r3
 803397e:	236e      	movs	r3, #110	@ 0x6e
 8033980:	461a      	mov	r2, r3
 8033982:	f008 fc26 	bl	803c1d2 <memcpy>

	(void_t) svl_pdhSetWifiCfg(&wifiCfgMsg);
 8033986:	4809      	ldr	r0, [pc, #36]	@ (80339ac <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 8033988:	f7ff fe0c 	bl	80335a4 <svl_pdhSetWifiCfg>
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 803398c:	4807      	ldr	r0, [pc, #28]	@ (80339ac <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 803398e:	f7ff fd29 	bl	80333e4 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 8033992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8033996:	9300      	str	r3, [sp, #0]
 8033998:	236e      	movs	r3, #110	@ 0x6e
 803399a:	4a04      	ldr	r2, [pc, #16]	@ (80339ac <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 803399c:	f642 2107 	movw	r1, #10759	@ 0x2a07
 80339a0:	2000      	movs	r0, #0
 80339a2:	f004 f8af 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_SET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 80339a6:	bf00      	nop
 80339a8:	46bd      	mov	sp, r7
 80339aa:	bd80      	pop	{r7, pc}
 80339ac:	2000ae10 	.word	0x2000ae10
 80339b0:	2000a674 	.word	0x2000a674

080339b4 <svl_pdhBldCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgSetMsgReceived (void_t)
{
 80339b4:	b590      	push	{r4, r7, lr}
 80339b6:	b087      	sub	sp, #28
 80339b8:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&bldCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhBldCfg_t));
 80339ba:	4a34      	ldr	r2, [pc, #208]	@ (8033a8c <svl_pdhBldCfgSetMsgReceived+0xd8>)
 80339bc:	4b34      	ldr	r3, [pc, #208]	@ (8033a90 <svl_pdhBldCfgSetMsgReceived+0xdc>)
 80339be:	4614      	mov	r4, r2
 80339c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80339c2:	c407      	stmia	r4!, {r0, r1, r2}
 80339c4:	8023      	strh	r3, [r4, #0]
 80339c6:	4b31      	ldr	r3, [pc, #196]	@ (8033a8c <svl_pdhBldCfgSetMsgReceived+0xd8>)
 80339c8:	607b      	str	r3, [r7, #4]
	gos_result_t setResult = GOS_ERROR;
 80339ca:	23ae      	movs	r3, #174	@ 0xae
 80339cc:	70fb      	strb	r3, [r7, #3]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 80339ce:	687b      	ldr	r3, [r7, #4]
 80339d0:	2b00      	cmp	r3, #0
 80339d2:	d020      	beq.n	8033a16 <svl_pdhBldCfgSetMsgReceived+0x62>
 80339d4:	4b2f      	ldr	r3, [pc, #188]	@ (8033a94 <svl_pdhBldCfgSetMsgReceived+0xe0>)
 80339d6:	681b      	ldr	r3, [r3, #0]
 80339d8:	2b00      	cmp	r3, #0
 80339da:	d01c      	beq.n	8033a16 <svl_pdhBldCfgSetMsgReceived+0x62>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80339dc:	4b2e      	ldr	r3, [pc, #184]	@ (8033a98 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 80339de:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 80339e0:	2b49      	cmp	r3, #73	@ 0x49
 80339e2:	d00b      	beq.n	80339fc <svl_pdhBldCfgSetMsgReceived+0x48>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80339e4:	4b2c      	ldr	r3, [pc, #176]	@ (8033a98 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 80339e6:	781b      	ldrb	r3, [r3, #0]
 80339e8:	2b36      	cmp	r3, #54	@ 0x36
 80339ea:	d114      	bne.n	8033a16 <svl_pdhBldCfgSetMsgReceived+0x62>
 80339ec:	f241 3188 	movw	r1, #5000	@ 0x1388
 80339f0:	482a      	ldr	r0, [pc, #168]	@ (8033a9c <svl_pdhBldCfgSetMsgReceived+0xe8>)
 80339f2:	f004 fe2d 	bl	8038650 <gos_mutexLock>
 80339f6:	4603      	mov	r3, r0
 80339f8:	2b55      	cmp	r3, #85	@ 0x55
 80339fa:	d10c      	bne.n	8033a16 <svl_pdhBldCfgSetMsgReceived+0x62>
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 80339fc:	4b25      	ldr	r3, [pc, #148]	@ (8033a94 <svl_pdhBldCfgSetMsgReceived+0xe0>)
 80339fe:	681b      	ldr	r3, [r3, #0]
 8033a00:	220e      	movs	r2, #14
 8033a02:	6879      	ldr	r1, [r7, #4]
 8033a04:	f240 309a 	movw	r0, #922	@ 0x39a
 8033a08:	4798      	blx	r3
 8033a0a:	4603      	mov	r3, r0
 8033a0c:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033a0e:	4823      	ldr	r0, [pc, #140]	@ (8033a9c <svl_pdhBldCfgSetMsgReceived+0xe8>)
 8033a10:	f004 ff24 	bl	803885c <gos_mutexUnlock>
 8033a14:	e001      	b.n	8033a1a <svl_pdhBldCfgSetMsgReceived+0x66>
		setResult = GOS_ERROR;
 8033a16:	23ae      	movs	r3, #174	@ 0xae
 8033a18:	70fb      	strb	r3, [r7, #3]
 8033a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8033a8c <svl_pdhBldCfgSetMsgReceived+0xd8>)
 8033a1c:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 8033a1e:	23ae      	movs	r3, #174	@ 0xae
 8033a20:	72fb      	strb	r3, [r7, #11]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8033a22:	68fb      	ldr	r3, [r7, #12]
 8033a24:	2b00      	cmp	r3, #0
 8033a26:	d020      	beq.n	8033a6a <svl_pdhBldCfgSetMsgReceived+0xb6>
 8033a28:	4b1d      	ldr	r3, [pc, #116]	@ (8033aa0 <svl_pdhBldCfgSetMsgReceived+0xec>)
 8033a2a:	681b      	ldr	r3, [r3, #0]
 8033a2c:	2b00      	cmp	r3, #0
 8033a2e:	d01c      	beq.n	8033a6a <svl_pdhBldCfgSetMsgReceived+0xb6>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033a30:	4b19      	ldr	r3, [pc, #100]	@ (8033a98 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 8033a32:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8033a34:	2b49      	cmp	r3, #73	@ 0x49
 8033a36:	d00b      	beq.n	8033a50 <svl_pdhBldCfgSetMsgReceived+0x9c>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8033a38:	4b17      	ldr	r3, [pc, #92]	@ (8033a98 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 8033a3a:	781b      	ldrb	r3, [r3, #0]
 8033a3c:	2b36      	cmp	r3, #54	@ 0x36
 8033a3e:	d114      	bne.n	8033a6a <svl_pdhBldCfgSetMsgReceived+0xb6>
 8033a40:	f241 3188 	movw	r1, #5000	@ 0x1388
 8033a44:	4815      	ldr	r0, [pc, #84]	@ (8033a9c <svl_pdhBldCfgSetMsgReceived+0xe8>)
 8033a46:	f004 fe03 	bl	8038650 <gos_mutexLock>
 8033a4a:	4603      	mov	r3, r0
 8033a4c:	2b55      	cmp	r3, #85	@ 0x55
 8033a4e:	d10c      	bne.n	8033a6a <svl_pdhBldCfgSetMsgReceived+0xb6>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8033a50:	4b13      	ldr	r3, [pc, #76]	@ (8033aa0 <svl_pdhBldCfgSetMsgReceived+0xec>)
 8033a52:	681b      	ldr	r3, [r3, #0]
 8033a54:	220e      	movs	r2, #14
 8033a56:	68f9      	ldr	r1, [r7, #12]
 8033a58:	f240 309a 	movw	r0, #922	@ 0x39a
 8033a5c:	4798      	blx	r3
 8033a5e:	4603      	mov	r3, r0
 8033a60:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8033a62:	480e      	ldr	r0, [pc, #56]	@ (8033a9c <svl_pdhBldCfgSetMsgReceived+0xe8>)
 8033a64:	f004 fefa 	bl	803885c <gos_mutexUnlock>
 8033a68:	e001      	b.n	8033a6e <svl_pdhBldCfgSetMsgReceived+0xba>
		getResult = GOS_ERROR;
 8033a6a:	23ae      	movs	r3, #174	@ 0xae
 8033a6c:	72fb      	strb	r3, [r7, #11]

	(void_t) svl_pdhSetBldCfg(&bldCfgMsg);
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 8033a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8033a72:	9300      	str	r3, [sp, #0]
 8033a74:	230e      	movs	r3, #14
 8033a76:	4a05      	ldr	r2, [pc, #20]	@ (8033a8c <svl_pdhBldCfgSetMsgReceived+0xd8>)
 8033a78:	f642 2108 	movw	r1, #10760	@ 0x2a08
 8033a7c:	2000      	movs	r0, #0
 8033a7e:	f004 f841 	bl	8037b04 <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_SET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 8033a82:	bf00      	nop
 8033a84:	3714      	adds	r7, #20
 8033a86:	46bd      	mov	sp, r7
 8033a88:	bd90      	pop	{r4, r7, pc}
 8033a8a:	bf00      	nop
 8033a8c:	2000ae80 	.word	0x2000ae80
 8033a90:	2000a674 	.word	0x2000a674
 8033a94:	2000a66c 	.word	0x2000a66c
 8033a98:	20001778 	.word	0x20001778
 8033a9c:	2000a670 	.word	0x2000a670
 8033aa0:	2000a668 	.word	0x2000a668

08033aa4 <svl_sdhInit>:

/*
 * Function: svl_sdhInit
 */
gos_result_t svl_sdhInit (void_t)
{
 8033aa4:	b580      	push	{r7, lr}
 8033aa6:	b082      	sub	sp, #8
 8033aa8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 8033aaa:	2355      	movs	r3, #85	@ 0x55
 8033aac:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Register sysmon callbacks.
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryNumReqMsg));
 8033aae:	79fb      	ldrb	r3, [r7, #7]
 8033ab0:	2b55      	cmp	r3, #85	@ 0x55
 8033ab2:	d105      	bne.n	8033ac0 <svl_sdhInit+0x1c>
 8033ab4:	4853      	ldr	r0, [pc, #332]	@ (8033c04 <svl_sdhInit+0x160>)
 8033ab6:	f005 ffdd 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033aba:	4603      	mov	r3, r0
 8033abc:	71fb      	strb	r3, [r7, #7]
 8033abe:	e001      	b.n	8033ac4 <svl_sdhInit+0x20>
 8033ac0:	23ae      	movs	r3, #174	@ 0xae
 8033ac2:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryInfoReqMsg));
 8033ac4:	79fb      	ldrb	r3, [r7, #7]
 8033ac6:	2b55      	cmp	r3, #85	@ 0x55
 8033ac8:	d105      	bne.n	8033ad6 <svl_sdhInit+0x32>
 8033aca:	484f      	ldr	r0, [pc, #316]	@ (8033c08 <svl_sdhInit+0x164>)
 8033acc:	f005 ffd2 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033ad0:	4603      	mov	r3, r0
 8033ad2:	71fb      	strb	r3, [r7, #7]
 8033ad4:	e001      	b.n	8033ada <svl_sdhInit+0x36>
 8033ad6:	23ae      	movs	r3, #174	@ 0xae
 8033ad8:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonDownloadReqMsg));
 8033ada:	79fb      	ldrb	r3, [r7, #7]
 8033adc:	2b55      	cmp	r3, #85	@ 0x55
 8033ade:	d105      	bne.n	8033aec <svl_sdhInit+0x48>
 8033ae0:	484a      	ldr	r0, [pc, #296]	@ (8033c0c <svl_sdhInit+0x168>)
 8033ae2:	f005 ffc7 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033ae6:	4603      	mov	r3, r0
 8033ae8:	71fb      	strb	r3, [r7, #7]
 8033aea:	e001      	b.n	8033af0 <svl_sdhInit+0x4c>
 8033aec:	23ae      	movs	r3, #174	@ 0xae
 8033aee:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryChunkReqMsg));
 8033af0:	79fb      	ldrb	r3, [r7, #7]
 8033af2:	2b55      	cmp	r3, #85	@ 0x55
 8033af4:	d105      	bne.n	8033b02 <svl_sdhInit+0x5e>
 8033af6:	4846      	ldr	r0, [pc, #280]	@ (8033c10 <svl_sdhInit+0x16c>)
 8033af8:	f005 ffbc 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033afc:	4603      	mov	r3, r0
 8033afe:	71fb      	strb	r3, [r7, #7]
 8033b00:	e001      	b.n	8033b06 <svl_sdhInit+0x62>
 8033b02:	23ae      	movs	r3, #174	@ 0xae
 8033b04:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonSoftwareInstallReqMsg));
 8033b06:	79fb      	ldrb	r3, [r7, #7]
 8033b08:	2b55      	cmp	r3, #85	@ 0x55
 8033b0a:	d105      	bne.n	8033b18 <svl_sdhInit+0x74>
 8033b0c:	4841      	ldr	r0, [pc, #260]	@ (8033c14 <svl_sdhInit+0x170>)
 8033b0e:	f005 ffb1 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033b12:	4603      	mov	r3, r0
 8033b14:	71fb      	strb	r3, [r7, #7]
 8033b16:	e001      	b.n	8033b1c <svl_sdhInit+0x78>
 8033b18:	23ae      	movs	r3, #174	@ 0xae
 8033b1a:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryEraseReqMsg));
 8033b1c:	79fb      	ldrb	r3, [r7, #7]
 8033b1e:	2b55      	cmp	r3, #85	@ 0x55
 8033b20:	d105      	bne.n	8033b2e <svl_sdhInit+0x8a>
 8033b22:	483d      	ldr	r0, [pc, #244]	@ (8033c18 <svl_sdhInit+0x174>)
 8033b24:	f005 ffa6 	bl	8039a74 <gos_sysmonRegisterUserMessage>
 8033b28:	4603      	mov	r3, r0
 8033b2a:	71fb      	strb	r3, [r7, #7]
 8033b2c:	e001      	b.n	8033b32 <svl_sdhInit+0x8e>
 8033b2e:	23ae      	movs	r3, #174	@ 0xae
 8033b30:	71fb      	strb	r3, [r7, #7]

    // Register IPL callbacks.
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryNumReqMsg));
 8033b32:	79fb      	ldrb	r3, [r7, #7]
 8033b34:	2b55      	cmp	r3, #85	@ 0x55
 8033b36:	d105      	bne.n	8033b44 <svl_sdhInit+0xa0>
 8033b38:	4838      	ldr	r0, [pc, #224]	@ (8033c1c <svl_sdhInit+0x178>)
 8033b3a:	f7fe fe61 	bl	8032800 <svl_iplRegisterUserMsg>
 8033b3e:	4603      	mov	r3, r0
 8033b40:	71fb      	strb	r3, [r7, #7]
 8033b42:	e001      	b.n	8033b48 <svl_sdhInit+0xa4>
 8033b44:	23ae      	movs	r3, #174	@ 0xae
 8033b46:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryInfoReqMsg));
 8033b48:	79fb      	ldrb	r3, [r7, #7]
 8033b4a:	2b55      	cmp	r3, #85	@ 0x55
 8033b4c:	d105      	bne.n	8033b5a <svl_sdhInit+0xb6>
 8033b4e:	4834      	ldr	r0, [pc, #208]	@ (8033c20 <svl_sdhInit+0x17c>)
 8033b50:	f7fe fe56 	bl	8032800 <svl_iplRegisterUserMsg>
 8033b54:	4603      	mov	r3, r0
 8033b56:	71fb      	strb	r3, [r7, #7]
 8033b58:	e001      	b.n	8033b5e <svl_sdhInit+0xba>
 8033b5a:	23ae      	movs	r3, #174	@ 0xae
 8033b5c:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplDownloadReqMsg));
 8033b5e:	79fb      	ldrb	r3, [r7, #7]
 8033b60:	2b55      	cmp	r3, #85	@ 0x55
 8033b62:	d105      	bne.n	8033b70 <svl_sdhInit+0xcc>
 8033b64:	482f      	ldr	r0, [pc, #188]	@ (8033c24 <svl_sdhInit+0x180>)
 8033b66:	f7fe fe4b 	bl	8032800 <svl_iplRegisterUserMsg>
 8033b6a:	4603      	mov	r3, r0
 8033b6c:	71fb      	strb	r3, [r7, #7]
 8033b6e:	e001      	b.n	8033b74 <svl_sdhInit+0xd0>
 8033b70:	23ae      	movs	r3, #174	@ 0xae
 8033b72:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryChunkReqMsg));
 8033b74:	79fb      	ldrb	r3, [r7, #7]
 8033b76:	2b55      	cmp	r3, #85	@ 0x55
 8033b78:	d105      	bne.n	8033b86 <svl_sdhInit+0xe2>
 8033b7a:	482b      	ldr	r0, [pc, #172]	@ (8033c28 <svl_sdhInit+0x184>)
 8033b7c:	f7fe fe40 	bl	8032800 <svl_iplRegisterUserMsg>
 8033b80:	4603      	mov	r3, r0
 8033b82:	71fb      	strb	r3, [r7, #7]
 8033b84:	e001      	b.n	8033b8a <svl_sdhInit+0xe6>
 8033b86:	23ae      	movs	r3, #174	@ 0xae
 8033b88:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplSoftwareInstallReqMsg));
 8033b8a:	79fb      	ldrb	r3, [r7, #7]
 8033b8c:	2b55      	cmp	r3, #85	@ 0x55
 8033b8e:	d105      	bne.n	8033b9c <svl_sdhInit+0xf8>
 8033b90:	4826      	ldr	r0, [pc, #152]	@ (8033c2c <svl_sdhInit+0x188>)
 8033b92:	f7fe fe35 	bl	8032800 <svl_iplRegisterUserMsg>
 8033b96:	4603      	mov	r3, r0
 8033b98:	71fb      	strb	r3, [r7, #7]
 8033b9a:	e001      	b.n	8033ba0 <svl_sdhInit+0xfc>
 8033b9c:	23ae      	movs	r3, #174	@ 0xae
 8033b9e:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplEraseReqMsg));
 8033ba0:	79fb      	ldrb	r3, [r7, #7]
 8033ba2:	2b55      	cmp	r3, #85	@ 0x55
 8033ba4:	d105      	bne.n	8033bb2 <svl_sdhInit+0x10e>
 8033ba6:	4822      	ldr	r0, [pc, #136]	@ (8033c30 <svl_sdhInit+0x18c>)
 8033ba8:	f7fe fe2a 	bl	8032800 <svl_iplRegisterUserMsg>
 8033bac:	4603      	mov	r3, r0
 8033bae:	71fb      	strb	r3, [r7, #7]
 8033bb0:	e001      	b.n	8033bb6 <svl_sdhInit+0x112>
 8033bb2:	23ae      	movs	r3, #174	@ 0xae
 8033bb4:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_taskRegister(&svlSdhTaskDesc, NULL));
 8033bb6:	79fb      	ldrb	r3, [r7, #7]
 8033bb8:	2b55      	cmp	r3, #85	@ 0x55
 8033bba:	d106      	bne.n	8033bca <svl_sdhInit+0x126>
 8033bbc:	2100      	movs	r1, #0
 8033bbe:	481d      	ldr	r0, [pc, #116]	@ (8033c34 <svl_sdhInit+0x190>)
 8033bc0:	f001 ff7c 	bl	8035abc <gos_taskRegister>
 8033bc4:	4603      	mov	r3, r0
 8033bc6:	71fb      	strb	r3, [r7, #7]
 8033bc8:	e001      	b.n	8033bce <svl_sdhInit+0x12a>
 8033bca:	23ae      	movs	r3, #174	@ 0xae
 8033bcc:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlTrigger));
 8033bce:	79fb      	ldrb	r3, [r7, #7]
 8033bd0:	2b55      	cmp	r3, #85	@ 0x55
 8033bd2:	d105      	bne.n	8033be0 <svl_sdhInit+0x13c>
 8033bd4:	4818      	ldr	r0, [pc, #96]	@ (8033c38 <svl_sdhInit+0x194>)
 8033bd6:	f007 f9d7 	bl	803af88 <gos_triggerInit>
 8033bda:	4603      	mov	r3, r0
 8033bdc:	71fb      	strb	r3, [r7, #7]
 8033bde:	e001      	b.n	8033be4 <svl_sdhInit+0x140>
 8033be0:	23ae      	movs	r3, #174	@ 0xae
 8033be2:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlFeedbackTrigger));
 8033be4:	79fb      	ldrb	r3, [r7, #7]
 8033be6:	2b55      	cmp	r3, #85	@ 0x55
 8033be8:	d105      	bne.n	8033bf6 <svl_sdhInit+0x152>
 8033bea:	4814      	ldr	r0, [pc, #80]	@ (8033c3c <svl_sdhInit+0x198>)
 8033bec:	f007 f9cc 	bl	803af88 <gos_triggerInit>
 8033bf0:	4603      	mov	r3, r0
 8033bf2:	71fb      	strb	r3, [r7, #7]
 8033bf4:	e001      	b.n	8033bfa <svl_sdhInit+0x156>
 8033bf6:	23ae      	movs	r3, #174	@ 0xae
 8033bf8:	71fb      	strb	r3, [r7, #7]

    return initResult;
 8033bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8033bfc:	4618      	mov	r0, r3
 8033bfe:	3708      	adds	r7, #8
 8033c00:	46bd      	mov	sp, r7
 8033c02:	bd80      	pop	{r7, pc}
 8033c04:	200017fc 	.word	0x200017fc
 8033c08:	2000180c 	.word	0x2000180c
 8033c0c:	2000181c 	.word	0x2000181c
 8033c10:	2000182c 	.word	0x2000182c
 8033c14:	2000183c 	.word	0x2000183c
 8033c18:	2000184c 	.word	0x2000184c
 8033c1c:	2000185c 	.word	0x2000185c
 8033c20:	20001864 	.word	0x20001864
 8033c24:	2000186c 	.word	0x2000186c
 8033c28:	20001874 	.word	0x20001874
 8033c2c:	2000187c 	.word	0x2000187c
 8033c30:	20001884 	.word	0x20001884
 8033c34:	2000188c 	.word	0x2000188c
 8033c38:	2000b2d8 	.word	0x2000b2d8
 8033c3c:	2000b2e4 	.word	0x2000b2e4

08033c40 <svl_sdhConfigure>:

/*
 * Function: svl_sdhConfigure
 */
gos_result_t svl_sdhConfigure (svl_sdhCfg_t* pCfg)
{
 8033c40:	b480      	push	{r7}
 8033c42:	b085      	sub	sp, #20
 8033c44:	af00      	add	r7, sp, #0
 8033c46:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t cfgResult = GOS_ERROR;
 8033c48:	23ae      	movs	r3, #174	@ 0xae
 8033c4a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 8033c4c:	687b      	ldr	r3, [r7, #4]
 8033c4e:	2b00      	cmp	r3, #0
 8033c50:	d011      	beq.n	8033c76 <svl_sdhConfigure+0x36>
 8033c52:	687b      	ldr	r3, [r7, #4]
 8033c54:	681b      	ldr	r3, [r3, #0]
 8033c56:	2b00      	cmp	r3, #0
 8033c58:	d00d      	beq.n	8033c76 <svl_sdhConfigure+0x36>
 8033c5a:	687b      	ldr	r3, [r7, #4]
 8033c5c:	685b      	ldr	r3, [r3, #4]
 8033c5e:	2b00      	cmp	r3, #0
 8033c60:	d009      	beq.n	8033c76 <svl_sdhConfigure+0x36>
    {
        sdhReadFunction  = pCfg->readFunction;
 8033c62:	687b      	ldr	r3, [r7, #4]
 8033c64:	681b      	ldr	r3, [r3, #0]
 8033c66:	4a07      	ldr	r2, [pc, #28]	@ (8033c84 <svl_sdhConfigure+0x44>)
 8033c68:	6013      	str	r3, [r2, #0]
        sdhWriteFunction = pCfg->writeFunction;
 8033c6a:	687b      	ldr	r3, [r7, #4]
 8033c6c:	685b      	ldr	r3, [r3, #4]
 8033c6e:	4a06      	ldr	r2, [pc, #24]	@ (8033c88 <svl_sdhConfigure+0x48>)
 8033c70:	6013      	str	r3, [r2, #0]
        cfgResult        = GOS_SUCCESS;
 8033c72:	2355      	movs	r3, #85	@ 0x55
 8033c74:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return cfgResult;
 8033c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8033c78:	4618      	mov	r0, r3
 8033c7a:	3714      	adds	r7, #20
 8033c7c:	46bd      	mov	sp, r7
 8033c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033c82:	4770      	bx	lr
 8033c84:	2000ae90 	.word	0x2000ae90
 8033c88:	2000ae94 	.word	0x2000ae94

08033c8c <svl_sdhGetBinaryData>:

/*
 * Function: svl_sdhGetBinaryData
 */
gos_result_t svl_sdhGetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 8033c8c:	b590      	push	{r4, r7, lr}
 8033c8e:	b085      	sub	sp, #20
 8033c90:	af00      	add	r7, sp, #0
 8033c92:	4603      	mov	r3, r0
 8033c94:	6039      	str	r1, [r7, #0]
 8033c96:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_SUCCESS;
 8033c98:	2355      	movs	r3, #85	@ 0x55
 8033c9a:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 8033c9c:	2300      	movs	r3, #0
 8033c9e:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL)
 8033ca0:	683b      	ldr	r3, [r7, #0]
 8033ca2:	2b00      	cmp	r3, #0
 8033ca4:	d01e      	beq.n	8033ce4 <svl_sdhGetBinaryData+0x58>
 8033ca6:	4b13      	ldr	r3, [pc, #76]	@ (8033cf4 <svl_sdhGetBinaryData+0x68>)
 8033ca8:	681b      	ldr	r3, [r3, #0]
 8033caa:	2b00      	cmp	r3, #0
 8033cac:	d01a      	beq.n	8033ce4 <svl_sdhGetBinaryData+0x58>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8033cae:	4b11      	ldr	r3, [pc, #68]	@ (8033cf4 <svl_sdhGetBinaryData+0x68>)
 8033cb0:	681b      	ldr	r3, [r3, #0]
 8033cb2:	f107 010c 	add.w	r1, r7, #12
 8033cb6:	2202      	movs	r2, #2
 8033cb8:	2000      	movs	r0, #0
 8033cba:	4798      	blx	r3

        if (index < numOfBinaries)
 8033cbc:	89bb      	ldrh	r3, [r7, #12]
 8033cbe:	88fa      	ldrh	r2, [r7, #6]
 8033cc0:	429a      	cmp	r2, r3
 8033cc2:	d20c      	bcs.n	8033cde <svl_sdhGetBinaryData+0x52>
        {
            (void_t) sdhReadFunction(
 8033cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8033cf4 <svl_sdhGetBinaryData+0x68>)
 8033cc6:	681c      	ldr	r4, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 8033cc8:	88fa      	ldrh	r2, [r7, #6]
 8033cca:	4613      	mov	r3, r2
 8033ccc:	005b      	lsls	r3, r3, #1
 8033cce:	4413      	add	r3, r2
 8033cd0:	011b      	lsls	r3, r3, #4
 8033cd2:	3302      	adds	r3, #2
            (void_t) sdhReadFunction(
 8033cd4:	2230      	movs	r2, #48	@ 0x30
 8033cd6:	6839      	ldr	r1, [r7, #0]
 8033cd8:	4618      	mov	r0, r3
 8033cda:	47a0      	blx	r4
        if (index < numOfBinaries)
 8033cdc:	e004      	b.n	8033ce8 <svl_sdhGetBinaryData+0x5c>
                    );
        }
        else
        {
            // Invalid request.
            dataGetResult = GOS_ERROR;
 8033cde:	23ae      	movs	r3, #174	@ 0xae
 8033ce0:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 8033ce2:	e001      	b.n	8033ce8 <svl_sdhGetBinaryData+0x5c>
        }
    }
    else
    {
        // NULL pointer error.
        dataGetResult = GOS_ERROR;
 8033ce4:	23ae      	movs	r3, #174	@ 0xae
 8033ce6:	73fb      	strb	r3, [r7, #15]
    }

    return dataGetResult;
 8033ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8033cea:	4618      	mov	r0, r3
 8033cec:	3714      	adds	r7, #20
 8033cee:	46bd      	mov	sp, r7
 8033cf0:	bd90      	pop	{r4, r7, pc}
 8033cf2:	bf00      	nop
 8033cf4:	2000ae90 	.word	0x2000ae90

08033cf8 <svl_sdhSetBinaryData>:

/*
 * Function: svl_sdhSetBinaryData
 */
gos_result_t svl_sdhSetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 8033cf8:	b590      	push	{r4, r7, lr}
 8033cfa:	b085      	sub	sp, #20
 8033cfc:	af00      	add	r7, sp, #0
 8033cfe:	4603      	mov	r3, r0
 8033d00:	6039      	str	r1, [r7, #0]
 8033d02:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_SUCCESS;
 8033d04:	2355      	movs	r3, #85	@ 0x55
 8033d06:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 8033d08:	2300      	movs	r3, #0
 8033d0a:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8033d0c:	683b      	ldr	r3, [r7, #0]
 8033d0e:	2b00      	cmp	r3, #0
 8033d10:	d022      	beq.n	8033d58 <svl_sdhSetBinaryData+0x60>
 8033d12:	4b15      	ldr	r3, [pc, #84]	@ (8033d68 <svl_sdhSetBinaryData+0x70>)
 8033d14:	681b      	ldr	r3, [r3, #0]
 8033d16:	2b00      	cmp	r3, #0
 8033d18:	d01e      	beq.n	8033d58 <svl_sdhSetBinaryData+0x60>
 8033d1a:	4b14      	ldr	r3, [pc, #80]	@ (8033d6c <svl_sdhSetBinaryData+0x74>)
 8033d1c:	681b      	ldr	r3, [r3, #0]
 8033d1e:	2b00      	cmp	r3, #0
 8033d20:	d01a      	beq.n	8033d58 <svl_sdhSetBinaryData+0x60>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8033d22:	4b11      	ldr	r3, [pc, #68]	@ (8033d68 <svl_sdhSetBinaryData+0x70>)
 8033d24:	681b      	ldr	r3, [r3, #0]
 8033d26:	f107 010c 	add.w	r1, r7, #12
 8033d2a:	2202      	movs	r2, #2
 8033d2c:	2000      	movs	r0, #0
 8033d2e:	4798      	blx	r3

        if (index < numOfBinaries)
 8033d30:	89bb      	ldrh	r3, [r7, #12]
 8033d32:	88fa      	ldrh	r2, [r7, #6]
 8033d34:	429a      	cmp	r2, r3
 8033d36:	d20c      	bcs.n	8033d52 <svl_sdhSetBinaryData+0x5a>
        {
            (void_t) sdhWriteFunction(
 8033d38:	4b0c      	ldr	r3, [pc, #48]	@ (8033d6c <svl_sdhSetBinaryData+0x74>)
 8033d3a:	681c      	ldr	r4, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 8033d3c:	88fa      	ldrh	r2, [r7, #6]
 8033d3e:	4613      	mov	r3, r2
 8033d40:	005b      	lsls	r3, r3, #1
 8033d42:	4413      	add	r3, r2
 8033d44:	011b      	lsls	r3, r3, #4
 8033d46:	3302      	adds	r3, #2
            (void_t) sdhWriteFunction(
 8033d48:	2230      	movs	r2, #48	@ 0x30
 8033d4a:	6839      	ldr	r1, [r7, #0]
 8033d4c:	4618      	mov	r0, r3
 8033d4e:	47a0      	blx	r4
        if (index < numOfBinaries)
 8033d50:	e004      	b.n	8033d5c <svl_sdhSetBinaryData+0x64>
                    );
        }
        else
        {
            // Invalid request.
            dataSetResult = GOS_ERROR;
 8033d52:	23ae      	movs	r3, #174	@ 0xae
 8033d54:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 8033d56:	e001      	b.n	8033d5c <svl_sdhSetBinaryData+0x64>
        }
    }
    else
    {
        // NULL pointer error.
        dataSetResult = GOS_ERROR;
 8033d58:	23ae      	movs	r3, #174	@ 0xae
 8033d5a:	73fb      	strb	r3, [r7, #15]
    }

    return dataSetResult;
 8033d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8033d5e:	4618      	mov	r0, r3
 8033d60:	3714      	adds	r7, #20
 8033d62:	46bd      	mov	sp, r7
 8033d64:	bd90      	pop	{r4, r7, pc}
 8033d66:	bf00      	nop
 8033d68:	2000ae90 	.word	0x2000ae90
 8033d6c:	2000ae94 	.word	0x2000ae94

08033d70 <svl_sdhDaemon>:
 * @details Handles the incoming requests via sysmon or IPL.
 *
 * @return -
 */
GOS_STATIC void_t svl_sdhDaemon (void_t)
{
 8033d70:	b5b0      	push	{r4, r5, r7, lr}
 8033d72:	b0a4      	sub	sp, #144	@ 0x90
 8033d74:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    svl_sdhBinaryDesc_t binaryDescriptor    = {0};
 8033d76:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8033d7a:	2230      	movs	r2, #48	@ 0x30
 8033d7c:	2100      	movs	r1, #0
 8033d7e:	4618      	mov	r0, r3
 8033d80:	f008 f9a0 	bl	803c0c4 <memset>
    svl_sdhBinaryDesc_t newBinaryDescriptor = {0};
 8033d84:	f107 031c 	add.w	r3, r7, #28
 8033d88:	2230      	movs	r2, #48	@ 0x30
 8033d8a:	2100      	movs	r1, #0
 8033d8c:	4618      	mov	r0, r3
 8033d8e:	f008 f999 	bl	803c0c4 <memset>
    svl_sdhChunkDesc_t  chunkDesc           = {0};
 8033d92:	f107 0318 	add.w	r3, r7, #24
 8033d96:	2100      	movs	r1, #0
 8033d98:	460a      	mov	r2, r1
 8033d9a:	801a      	strh	r2, [r3, #0]
 8033d9c:	460a      	mov	r2, r1
 8033d9e:	709a      	strb	r2, [r3, #2]
    svl_pdhBldCfg_t     bldCfg              = {0};
 8033da0:	f107 0308 	add.w	r3, r7, #8
 8033da4:	2200      	movs	r2, #0
 8033da6:	601a      	str	r2, [r3, #0]
 8033da8:	605a      	str	r2, [r3, #4]
 8033daa:	609a      	str	r2, [r3, #8]
 8033dac:	819a      	strh	r2, [r3, #12]
    u16_t               numOfChunks         = 0u;
 8033dae:	2300      	movs	r3, #0
 8033db0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    u16_t               index               = 0u;
 8033db4:	2300      	movs	r3, #0
 8033db6:	80fb      	strh	r3, [r7, #6]
    u16_t               numOfBinaries       = 0u;
 8033db8:	2300      	movs	r3, #0
 8033dba:	80bb      	strh	r3, [r7, #4]
    u8_t                result              = 0u;
 8033dbc:	2300      	movs	r3, #0
 8033dbe:	70fb      	strb	r3, [r7, #3]
    u32_t               startAddress        = 0u;
 8033dc0:	2300      	movs	r3, #0
 8033dc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    u32_t               fromAddress         = 0u;
 8033dc6:	2300      	movs	r3, #0
 8033dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    u32_t               totalCopySize       = 0u;
 8033dcc:	2300      	movs	r3, #0
 8033dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    bool_t              defragment          = GOS_FALSE;
 8033dd0:	2349      	movs	r3, #73	@ 0x49
 8033dd2:	70bb      	strb	r3, [r7, #2]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8033dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8033dd8:	2101      	movs	r1, #1
 8033dda:	48a2      	ldr	r0, [pc, #648]	@ (8034064 <svl_sdhDaemon+0x2f4>)
 8033ddc:	f007 f948 	bl	803b070 <gos_triggerWait>
 8033de0:	4603      	mov	r3, r0
 8033de2:	2b55      	cmp	r3, #85	@ 0x55
 8033de4:	f040 8232 	bne.w	803424c <svl_sdhDaemon+0x4dc>
        {
            switch (sdhRequestedState)
 8033de8:	4b9f      	ldr	r3, [pc, #636]	@ (8034068 <svl_sdhDaemon+0x2f8>)
 8033dea:	781b      	ldrb	r3, [r3, #0]
 8033dec:	3b01      	subs	r3, #1
 8033dee:	2b05      	cmp	r3, #5
 8033df0:	f200 821b 	bhi.w	803422a <svl_sdhDaemon+0x4ba>
 8033df4:	a201      	add	r2, pc, #4	@ (adr r2, 8033dfc <svl_sdhDaemon+0x8c>)
 8033df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033dfa:	bf00      	nop
 8033dfc:	08033fd7 	.word	0x08033fd7
 8033e00:	08033e15 	.word	0x08033e15
 8033e04:	08033e61 	.word	0x08033e61
 8033e08:	08033ef7 	.word	0x08033ef7
 8033e0c:	08033ea7 	.word	0x08033ea7
 8033e10:	08034089 	.word	0x08034089
            {
                case SDH_STATE_BINARY_NUM_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8033e14:	4b95      	ldr	r3, [pc, #596]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033e16:	681b      	ldr	r3, [r3, #0]
 8033e18:	2b00      	cmp	r3, #0
 8033e1a:	f000 8208 	beq.w	803422e <svl_sdhDaemon+0x4be>
 8033e1e:	4b94      	ldr	r3, [pc, #592]	@ (8034070 <svl_sdhDaemon+0x300>)
 8033e20:	681b      	ldr	r3, [r3, #0]
 8033e22:	2b00      	cmp	r3, #0
 8033e24:	f000 8203 	beq.w	803422e <svl_sdhDaemon+0x4be>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary number request received.\r\n");
#endif
                        u16_t numOfBinaries = 0u;
 8033e28:	2300      	movs	r3, #0
 8033e2a:	803b      	strh	r3, [r7, #0]

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8033e2c:	4b8f      	ldr	r3, [pc, #572]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033e2e:	681b      	ldr	r3, [r3, #0]
 8033e30:	4639      	mov	r1, r7
 8033e32:	2202      	movs	r2, #2
 8033e34:	2000      	movs	r0, #0
 8033e36:	4798      	blx	r3

                        if (numOfBinaries == 0xFFFF)
 8033e38:	883b      	ldrh	r3, [r7, #0]
 8033e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8033e3e:	4293      	cmp	r3, r2
 8033e40:	d107      	bne.n	8033e52 <svl_sdhDaemon+0xe2>
                        {
                            numOfBinaries = 0u;
 8033e42:	2300      	movs	r3, #0
 8033e44:	803b      	strh	r3, [r7, #0]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8033e46:	4b8a      	ldr	r3, [pc, #552]	@ (8034070 <svl_sdhDaemon+0x300>)
 8033e48:	681b      	ldr	r3, [r3, #0]
 8033e4a:	4639      	mov	r1, r7
 8033e4c:	2202      	movs	r2, #2
 8033e4e:	2000      	movs	r0, #0
 8033e50:	4798      	blx	r3
                        else
                        {
                            // Number OK.
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, &numOfBinaries, sizeof(numOfBinaries));
 8033e52:	883a      	ldrh	r2, [r7, #0]
 8033e54:	4b87      	ldr	r3, [pc, #540]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033e56:	801a      	strh	r2, [r3, #0]

                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8033e58:	4887      	ldr	r0, [pc, #540]	@ (8034078 <svl_sdhDaemon+0x308>)
 8033e5a:	f007 f9b9 	bl	803b1d0 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8033e5e:	e1e6      	b.n	803422e <svl_sdhDaemon+0x4be>
                }
                case SDH_STATE_BINARY_INFO_REQ:
                {
                    if (sdhReadFunction != NULL)
 8033e60:	4b82      	ldr	r3, [pc, #520]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033e62:	681b      	ldr	r3, [r3, #0]
 8033e64:	2b00      	cmp	r3, #0
 8033e66:	f000 81e4 	beq.w	8034232 <svl_sdhDaemon+0x4c2>
                    {
                        (void_t) memcpy((void_t*)&index, sdhBuffer, sizeof(index));
 8033e6a:	4b82      	ldr	r3, [pc, #520]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033e6c:	881b      	ldrh	r3, [r3, #0]
 8033e6e:	80fb      	strh	r3, [r7, #6]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary info request received. Index: %u\r\n", index);
#endif
                        if (svl_sdhGetBinaryData(index, &binaryDescriptor) == GOS_SUCCESS)
 8033e70:	88fb      	ldrh	r3, [r7, #6]
 8033e72:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8033e76:	4611      	mov	r1, r2
 8033e78:	4618      	mov	r0, r3
 8033e7a:	f7ff ff07 	bl	8033c8c <svl_sdhGetBinaryData>
 8033e7e:	4603      	mov	r3, r0
 8033e80:	2b55      	cmp	r3, #85	@ 0x55
 8033e82:	f040 81d6 	bne.w	8034232 <svl_sdhDaemon+0x4c2>
                        {
                            (void_t) memcpy(sdhBuffer, (void_t*)&binaryDescriptor, sizeof(binaryDescriptor));
 8033e86:	4b7b      	ldr	r3, [pc, #492]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033e88:	461d      	mov	r5, r3
 8033e8a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8033e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8033e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8033e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8033e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8033e96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8033e9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                            gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8033e9e:	4876      	ldr	r0, [pc, #472]	@ (8034078 <svl_sdhDaemon+0x308>)
 8033ea0:	f007 f996 	bl	803b1d0 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8033ea4:	e1c5      	b.n	8034232 <svl_sdhDaemon+0x4c2>
                }
                case SDH_STATE_BINARY_INSTALL_REQ:
                {
                    if (sdhReadFunction != NULL)
 8033ea6:	4b71      	ldr	r3, [pc, #452]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033ea8:	681b      	ldr	r3, [r3, #0]
 8033eaa:	2b00      	cmp	r3, #0
 8033eac:	f000 81c3 	beq.w	8034236 <svl_sdhDaemon+0x4c6>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 8033eb0:	4b70      	ldr	r3, [pc, #448]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033eb2:	881b      	ldrh	r3, [r3, #0]
 8033eb4:	80fb      	strh	r3, [r7, #6]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary install request received. Index: %u\r\n", index);
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8033eb6:	4b6d      	ldr	r3, [pc, #436]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033eb8:	681b      	ldr	r3, [r3, #0]
 8033eba:	1d39      	adds	r1, r7, #4
 8033ebc:	2202      	movs	r2, #2
 8033ebe:	2000      	movs	r0, #0
 8033ec0:	4798      	blx	r3

                        if (index < numOfBinaries)
 8033ec2:	88fa      	ldrh	r2, [r7, #6]
 8033ec4:	88bb      	ldrh	r3, [r7, #4]
 8033ec6:	429a      	cmp	r2, r3
 8033ec8:	f080 81b5 	bcs.w	8034236 <svl_sdhDaemon+0x4c6>
                        {
                            (void_t) svl_pdhGetBldCfg(&bldCfg);
 8033ecc:	f107 0308 	add.w	r3, r7, #8
 8033ed0:	4618      	mov	r0, r3
 8033ed2:	f7ff fa4f 	bl	8033374 <svl_pdhGetBldCfg>

                            bldCfg.installRequested = GOS_TRUE;
 8033ed6:	2336      	movs	r3, #54	@ 0x36
 8033ed8:	723b      	strb	r3, [r7, #8]
                            bldCfg.binaryIndex      = index;
 8033eda:	88fb      	ldrh	r3, [r7, #6]
 8033edc:	817b      	strh	r3, [r7, #10]

                            (void_t) svl_pdhSetBldCfg(&bldCfg);
 8033ede:	f107 0308 	add.w	r3, r7, #8
 8033ee2:	4618      	mov	r0, r3
 8033ee4:	f7ff fb26 	bl	8033534 <svl_pdhSetBldCfg>

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 8033ee8:	88fa      	ldrh	r2, [r7, #6]
 8033eea:	4b62      	ldr	r3, [pc, #392]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033eec:	801a      	strh	r2, [r3, #0]

                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8033eee:	4862      	ldr	r0, [pc, #392]	@ (8034078 <svl_sdhDaemon+0x308>)
 8033ef0:	f007 f96e 	bl	803b1d0 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8033ef4:	e19f      	b.n	8034236 <svl_sdhDaemon+0x4c6>
                }
                case SDH_STATE_BINARY_DOWNLOAD_REQ:
                {
                    if (sdhReadFunction != NULL)
 8033ef6:	4b5d      	ldr	r3, [pc, #372]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033ef8:	681b      	ldr	r3, [r3, #0]
 8033efa:	2b00      	cmp	r3, #0
 8033efc:	f000 819d 	beq.w	803423a <svl_sdhDaemon+0x4ca>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download request received.\r\n");
#endif
                        // Check if descriptor fits.
                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8033f00:	4b5a      	ldr	r3, [pc, #360]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033f02:	681b      	ldr	r3, [r3, #0]
 8033f04:	1d39      	adds	r1, r7, #4
 8033f06:	2202      	movs	r2, #2
 8033f08:	2000      	movs	r0, #0
 8033f0a:	4798      	blx	r3

                        if ((SVL_SDH_STORAGE_DESC_BIN_DESC_START + ((numOfBinaries + 1) * sizeof(svl_sdhBinaryDesc_t))) < SVL_SDH_STORAGE_DESC_AREA_SIZE)
 8033f0c:	88bb      	ldrh	r3, [r7, #4]
 8033f0e:	3301      	adds	r3, #1
 8033f10:	461a      	mov	r2, r3
 8033f12:	4613      	mov	r3, r2
 8033f14:	005b      	lsls	r3, r3, #1
 8033f16:	4413      	add	r3, r2
 8033f18:	011b      	lsls	r3, r3, #4
 8033f1a:	3302      	adds	r3, #2
 8033f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8033f20:	d250      	bcs.n	8033fc4 <svl_sdhDaemon+0x254>
                        {
                            (void_t) memcpy((void_t*)&newBinaryDescriptor, (void_t*)sdhBuffer, sizeof(newBinaryDescriptor));
 8033f22:	4b54      	ldr	r3, [pc, #336]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033f24:	f107 041c 	add.w	r4, r7, #28
 8033f28:	461d      	mov	r5, r3
 8033f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8033f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8033f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8033f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8033f32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8033f36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

                            if (numOfBinaries > 0)
 8033f3a:	88bb      	ldrh	r3, [r7, #4]
 8033f3c:	2b00      	cmp	r3, #0
 8033f3e:	d013      	beq.n	8033f68 <svl_sdhDaemon+0x1f8>
                            {
                                (void_t) sdhReadFunction(
 8033f40:	4b4a      	ldr	r3, [pc, #296]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033f42:	681c      	ldr	r4, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + (numOfBinaries - 1) * sizeof(svl_sdhBinaryDesc_t),
 8033f44:	88bb      	ldrh	r3, [r7, #4]
 8033f46:	3b01      	subs	r3, #1
 8033f48:	461a      	mov	r2, r3
 8033f4a:	4613      	mov	r3, r2
 8033f4c:	005b      	lsls	r3, r3, #1
 8033f4e:	4413      	add	r3, r2
 8033f50:	011b      	lsls	r3, r3, #4
 8033f52:	3302      	adds	r3, #2
                                (void_t) sdhReadFunction(
 8033f54:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8033f58:	2230      	movs	r2, #48	@ 0x30
 8033f5a:	4618      	mov	r0, r3
 8033f5c:	47a0      	blx	r4
                                        (u8_t*)&binaryDescriptor,
                                        sizeof(binaryDescriptor)
                                        );

                                newBinaryDescriptor.binaryLocation = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size;
 8033f5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8033f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8033f62:	4413      	add	r3, r2
 8033f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8033f66:	e002      	b.n	8033f6e <svl_sdhDaemon+0x1fe>
                            }
                            else
                            {
                                newBinaryDescriptor.binaryLocation = SVL_SDH_BINARY_AREA_START;
 8033f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8033f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                    newBinaryDescriptor.binaryInfo.size,
                                    newBinaryDescriptor.binaryInfo.startAddress,
                                    newBinaryDescriptor.binaryInfo.crc);
#endif

                            if ((newBinaryDescriptor.binaryLocation + newBinaryDescriptor.binaryInfo.size) < SVL_SDH_BINARY_AREA_END)
 8033f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8033f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8033f72:	4413      	add	r3, r2
 8033f74:	4a41      	ldr	r2, [pc, #260]	@ (803407c <svl_sdhDaemon+0x30c>)
 8033f76:	4293      	cmp	r3, r2
 8033f78:	d821      	bhi.n	8033fbe <svl_sdhDaemon+0x24e>
                            {
                                (void_t) sdhWriteFunction(
 8033f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8034070 <svl_sdhDaemon+0x300>)
 8033f7c:	681c      	ldr	r4, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + numOfBinaries * sizeof(svl_sdhBinaryDesc_t),
 8033f7e:	88bb      	ldrh	r3, [r7, #4]
 8033f80:	461a      	mov	r2, r3
 8033f82:	4613      	mov	r3, r2
 8033f84:	005b      	lsls	r3, r3, #1
 8033f86:	4413      	add	r3, r2
 8033f88:	011b      	lsls	r3, r3, #4
 8033f8a:	3302      	adds	r3, #2
                                (void_t) sdhWriteFunction(
 8033f8c:	f107 011c 	add.w	r1, r7, #28
 8033f90:	2230      	movs	r2, #48	@ 0x30
 8033f92:	4618      	mov	r0, r3
 8033f94:	47a0      	blx	r4
                                        (u8_t*)&newBinaryDescriptor,
                                        sizeof(newBinaryDescriptor)
                                );
                                result = SDH_DOWNLOAD_REQ_OK;
 8033f96:	2301      	movs	r3, #1
 8033f98:	70fb      	strb	r3, [r7, #3]

                                numOfChunks = newBinaryDescriptor.binaryInfo.size / SVL_SDH_CHUNK_SIZE + (newBinaryDescriptor.binaryInfo.size % SVL_SDH_CHUNK_SIZE == 0 ? 0 : 1);
 8033f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8033f9c:	0a9b      	lsrs	r3, r3, #10
 8033f9e:	b29b      	uxth	r3, r3
 8033fa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8033fa2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8033fa6:	2a00      	cmp	r2, #0
 8033fa8:	bf14      	ite	ne
 8033faa:	2201      	movne	r2, #1
 8033fac:	2200      	moveq	r2, #0
 8033fae:	b2d2      	uxtb	r2, r2
 8033fb0:	4413      	add	r3, r2
 8033fb2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

                                sdhState = SDH_STATE_DOWNLOADING_BINARY;
 8033fb6:	4b32      	ldr	r3, [pc, #200]	@ (8034080 <svl_sdhDaemon+0x310>)
 8033fb8:	2201      	movs	r2, #1
 8033fba:	701a      	strb	r2, [r3, #0]
 8033fbc:	e004      	b.n	8033fc8 <svl_sdhDaemon+0x258>
                            }
                            else
                            {
                                // New binary does not fit.
                                result = SDH_DOWNLOAD_REQ_FILE_SIZE_ERR;
 8033fbe:	2304      	movs	r3, #4
 8033fc0:	70fb      	strb	r3, [r7, #3]
 8033fc2:	e001      	b.n	8033fc8 <svl_sdhDaemon+0x258>
                            }
                        }
                        else
                        {
                            // There is not enough size for descriptor.
                            result = SDH_DOWNLOAD_REQ_DESC_SIZE_ERR;
 8033fc4:	2302      	movs	r3, #2
 8033fc6:	70fb      	strb	r3, [r7, #3]
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&result, sizeof(result));
 8033fc8:	78fa      	ldrb	r2, [r7, #3]
 8033fca:	4b2a      	ldr	r3, [pc, #168]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033fcc:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8033fce:	482a      	ldr	r0, [pc, #168]	@ (8034078 <svl_sdhDaemon+0x308>)
 8033fd0:	f007 f8fe 	bl	803b1d0 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8033fd4:	e131      	b.n	803423a <svl_sdhDaemon+0x4ca>
                }
                case SDH_STATE_DOWNLOADING_BINARY:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8033fd6:	4b25      	ldr	r3, [pc, #148]	@ (803406c <svl_sdhDaemon+0x2fc>)
 8033fd8:	681b      	ldr	r3, [r3, #0]
 8033fda:	2b00      	cmp	r3, #0
 8033fdc:	f000 812f 	beq.w	803423e <svl_sdhDaemon+0x4ce>
 8033fe0:	4b23      	ldr	r3, [pc, #140]	@ (8034070 <svl_sdhDaemon+0x300>)
 8033fe2:	681b      	ldr	r3, [r3, #0]
 8033fe4:	2b00      	cmp	r3, #0
 8033fe6:	f000 812a 	beq.w	803423e <svl_sdhDaemon+0x4ce>
                    {
                        // Get chunk descriptor.
                        (void_t) memcpy((void_t*)&chunkDesc, (void_t*)sdhBuffer, sizeof(chunkDesc));
 8033fea:	4a22      	ldr	r2, [pc, #136]	@ (8034074 <svl_sdhDaemon+0x304>)
 8033fec:	f107 0318 	add.w	r3, r7, #24
 8033ff0:	6812      	ldr	r2, [r2, #0]
 8033ff2:	4611      	mov	r1, r2
 8033ff4:	8019      	strh	r1, [r3, #0]
 8033ff6:	3302      	adds	r3, #2
 8033ff8:	0c12      	lsrs	r2, r2, #16
 8033ffa:	701a      	strb	r2, [r3, #0]
                                percentage % 100
                        );
#endif

                        // Save chunk.
                        (void_t) sdhWriteFunction(
 8033ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8034070 <svl_sdhDaemon+0x300>)
 8033ffe:	681b      	ldr	r3, [r3, #0]
                                newBinaryDescriptor.binaryLocation + chunkDesc.chunkIdx * SVL_SDH_CHUNK_SIZE,
 8034000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8034002:	8b3a      	ldrh	r2, [r7, #24]
 8034004:	0292      	lsls	r2, r2, #10
                        (void_t) sdhWriteFunction(
 8034006:	1888      	adds	r0, r1, r2
 8034008:	491e      	ldr	r1, [pc, #120]	@ (8034084 <svl_sdhDaemon+0x314>)
 803400a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 803400e:	4798      	blx	r3
                                (u8_t*)(/*controlMsg.pData*/sdhBuffer + sizeof(chunkDesc)),
                                SVL_SDH_CHUNK_SIZE
                        );

                        // Send response.
                        chunkDesc.result = 1;
 8034010:	2301      	movs	r3, #1
 8034012:	76bb      	strb	r3, [r7, #26]

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&chunkDesc, sizeof(chunkDesc));
 8034014:	4b17      	ldr	r3, [pc, #92]	@ (8034074 <svl_sdhDaemon+0x304>)
 8034016:	f107 0218 	add.w	r2, r7, #24
 803401a:	6812      	ldr	r2, [r2, #0]
 803401c:	4611      	mov	r1, r2
 803401e:	8019      	strh	r1, [r3, #0]
 8034020:	3302      	adds	r3, #2
 8034022:	0c12      	lsrs	r2, r2, #16
 8034024:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8034026:	4814      	ldr	r0, [pc, #80]	@ (8034078 <svl_sdhDaemon+0x308>)
 8034028:	f007 f8d2 	bl	803b1d0 <gos_triggerIncrement>

                        // Check if all chunks have been received.
                        if (chunkDesc.chunkIdx == (numOfChunks - 1))
 803402c:	8b3b      	ldrh	r3, [r7, #24]
 803402e:	461a      	mov	r2, r3
 8034030:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8034034:	3b01      	subs	r3, #1
 8034036:	429a      	cmp	r2, r3
 8034038:	f040 8101 	bne.w	803423e <svl_sdhDaemon+0x4ce>
                        {
#if SVL_SDH_TRACE_LEVEL > 0
                            (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download finished.\r\n");
#endif
                            (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 803403c:	4b0b      	ldr	r3, [pc, #44]	@ (803406c <svl_sdhDaemon+0x2fc>)
 803403e:	681b      	ldr	r3, [r3, #0]
 8034040:	1d39      	adds	r1, r7, #4
 8034042:	2202      	movs	r2, #2
 8034044:	2000      	movs	r0, #0
 8034046:	4798      	blx	r3
                            numOfBinaries++;
 8034048:	88bb      	ldrh	r3, [r7, #4]
 803404a:	3301      	adds	r3, #1
 803404c:	b29b      	uxth	r3, r3
 803404e:	80bb      	strh	r3, [r7, #4]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8034050:	4b07      	ldr	r3, [pc, #28]	@ (8034070 <svl_sdhDaemon+0x300>)
 8034052:	681b      	ldr	r3, [r3, #0]
 8034054:	1d39      	adds	r1, r7, #4
 8034056:	2202      	movs	r2, #2
 8034058:	2000      	movs	r0, #0
 803405a:	4798      	blx	r3

                            sdhState = SDH_STATE_IDLE;
 803405c:	4b08      	ldr	r3, [pc, #32]	@ (8034080 <svl_sdhDaemon+0x310>)
 803405e:	2200      	movs	r2, #0
 8034060:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            // Continue reception.
                        }
                    }
                    break;
 8034062:	e0ec      	b.n	803423e <svl_sdhDaemon+0x4ce>
 8034064:	2000b2d8 	.word	0x2000b2d8
 8034068:	2000b2f1 	.word	0x2000b2f1
 803406c:	2000ae90 	.word	0x2000ae90
 8034070:	2000ae94 	.word	0x2000ae94
 8034074:	2000ae98 	.word	0x2000ae98
 8034078:	2000b2e4 	.word	0x2000b2e4
 803407c:	007ffffe 	.word	0x007ffffe
 8034080:	2000b2f0 	.word	0x2000b2f0
 8034084:	2000ae9b 	.word	0x2000ae9b
                }
                case SDH_STATE_BINARY_ERASE_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8034088:	4b74      	ldr	r3, [pc, #464]	@ (803425c <svl_sdhDaemon+0x4ec>)
 803408a:	681b      	ldr	r3, [r3, #0]
 803408c:	2b00      	cmp	r3, #0
 803408e:	f000 80d8 	beq.w	8034242 <svl_sdhDaemon+0x4d2>
 8034092:	4b73      	ldr	r3, [pc, #460]	@ (8034260 <svl_sdhDaemon+0x4f0>)
 8034094:	681b      	ldr	r3, [r3, #0]
 8034096:	2b00      	cmp	r3, #0
 8034098:	f000 80d3 	beq.w	8034242 <svl_sdhDaemon+0x4d2>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 803409c:	4b71      	ldr	r3, [pc, #452]	@ (8034264 <svl_sdhDaemon+0x4f4>)
 803409e:	881b      	ldrh	r3, [r3, #0]
 80340a0:	80fb      	strh	r3, [r7, #6]
                        (void_t) memcpy((void_t*)&defragment, (void_t*)sdhBuffer + sizeof(index), sizeof(defragment));
 80340a2:	4b71      	ldr	r3, [pc, #452]	@ (8034268 <svl_sdhDaemon+0x4f8>)
 80340a4:	781b      	ldrb	r3, [r3, #0]
 80340a6:	70bb      	strb	r3, [r7, #2]
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary erase request received. Index: %u\r\n", index);
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80340a8:	4b6c      	ldr	r3, [pc, #432]	@ (803425c <svl_sdhDaemon+0x4ec>)
 80340aa:	681b      	ldr	r3, [r3, #0]
 80340ac:	1d39      	adds	r1, r7, #4
 80340ae:	2202      	movs	r2, #2
 80340b0:	2000      	movs	r0, #0
 80340b2:	4798      	blx	r3

                        if (index < numOfBinaries)
 80340b4:	88fa      	ldrh	r2, [r7, #6]
 80340b6:	88bb      	ldrh	r3, [r7, #4]
 80340b8:	429a      	cmp	r2, r3
 80340ba:	f080 80c2 	bcs.w	8034242 <svl_sdhDaemon+0x4d2>
                        {
                            svl_sdhGetBinaryData(index, &binaryDescriptor);
 80340be:	88fb      	ldrh	r3, [r7, #6]
 80340c0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80340c4:	4611      	mov	r1, r2
 80340c6:	4618      	mov	r0, r3
 80340c8:	f7ff fde0 	bl	8033c8c <svl_sdhGetBinaryData>

                            // Start address to copy is the binary location of
                            // the binary that is being deleted.
                            startAddress = binaryDescriptor.binaryLocation;
 80340cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80340ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                            // Reorganize descriptors and binary.
                            if (index != (numOfBinaries - 1))
 80340d2:	88fb      	ldrh	r3, [r7, #6]
 80340d4:	461a      	mov	r2, r3
 80340d6:	88bb      	ldrh	r3, [r7, #4]
 80340d8:	3b01      	subs	r3, #1
 80340da:	429a      	cmp	r2, r3
 80340dc:	f000 8094 	beq.w	8034208 <svl_sdhDaemon+0x498>
                            {
                                // Move descriptors.
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 80340e0:	2300      	movs	r3, #0
 80340e2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80340e6:	e01c      	b.n	8034122 <svl_sdhDaemon+0x3b2>
                                {
                                    (void_t) svl_sdhGetBinaryData((index + 1 + idx), &binaryDescriptor);
 80340e8:	88fa      	ldrh	r2, [r7, #6]
 80340ea:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80340ee:	4413      	add	r3, r2
 80340f0:	b29b      	uxth	r3, r3
 80340f2:	3301      	adds	r3, #1
 80340f4:	b29b      	uxth	r3, r3
 80340f6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80340fa:	4611      	mov	r1, r2
 80340fc:	4618      	mov	r0, r3
 80340fe:	f7ff fdc5 	bl	8033c8c <svl_sdhGetBinaryData>
                                    (void_t) svl_sdhSetBinaryData((index + idx), &binaryDescriptor);
 8034102:	88fa      	ldrh	r2, [r7, #6]
 8034104:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8034108:	4413      	add	r3, r2
 803410a:	b29b      	uxth	r3, r3
 803410c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8034110:	4611      	mov	r1, r2
 8034112:	4618      	mov	r0, r3
 8034114:	f7ff fdf0 	bl	8033cf8 <svl_sdhSetBinaryData>
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 8034118:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 803411c:	3301      	adds	r3, #1
 803411e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8034122:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8034126:	88bb      	ldrh	r3, [r7, #4]
 8034128:	4619      	mov	r1, r3
 803412a:	88fb      	ldrh	r3, [r7, #6]
 803412c:	3301      	adds	r3, #1
 803412e:	1acb      	subs	r3, r1, r3
 8034130:	429a      	cmp	r2, r3
 8034132:	dbd9      	blt.n	80340e8 <svl_sdhDaemon+0x378>
                                }

                                // Move binaries and update descriptor data.
                                // Prepare variables.
                                if (defragment == GOS_TRUE)
 8034134:	78bb      	ldrb	r3, [r7, #2]
 8034136:	2b36      	cmp	r3, #54	@ 0x36
 8034138:	d166      	bne.n	8034208 <svl_sdhDaemon+0x498>
                                {
                                    (void_t) svl_sdhGetBinaryData(index, &binaryDescriptor);
 803413a:	88fb      	ldrh	r3, [r7, #6]
 803413c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8034140:	4611      	mov	r1, r2
 8034142:	4618      	mov	r0, r3
 8034144:	f7ff fda2 	bl	8033c8c <svl_sdhGetBinaryData>
                                    fromAddress = binaryDescriptor.binaryLocation;
 8034148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 803414a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                    (void_t) svl_sdhGetBinaryData((numOfBinaries - 2), &binaryDescriptor);
 803414e:	88bb      	ldrh	r3, [r7, #4]
 8034150:	3b02      	subs	r3, #2
 8034152:	b29b      	uxth	r3, r3
 8034154:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8034158:	4611      	mov	r1, r2
 803415a:	4618      	mov	r0, r3
 803415c:	f7ff fd96 	bl	8033c8c <svl_sdhGetBinaryData>
                                    totalCopySize = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size - fromAddress;
 8034160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8034162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8034164:	441a      	add	r2, r3
 8034166:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 803416a:	1ad3      	subs	r3, r2, r3
 803416c:	67fb      	str	r3, [r7, #124]	@ 0x7c

                                    // Move in chunks using SDH buffer.
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 803416e:	2300      	movs	r3, #0
 8034170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8034174:	e042      	b.n	80341fc <svl_sdhDaemon+0x48c>
                                    {
                                        if ((cntr + 1) * SVL_SDH_CHUNK_SIZE < totalCopySize)
 8034176:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 803417a:	3301      	adds	r3, #1
 803417c:	029b      	lsls	r3, r3, #10
 803417e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8034180:	429a      	cmp	r2, r3
 8034182:	d918      	bls.n	80341b6 <svl_sdhDaemon+0x446>
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 8034184:	4b35      	ldr	r3, [pc, #212]	@ (803425c <svl_sdhDaemon+0x4ec>)
 8034186:	681b      	ldr	r3, [r3, #0]
 8034188:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 803418c:	0291      	lsls	r1, r2, #10
 803418e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8034192:	1888      	adds	r0, r1, r2
 8034194:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8034198:	4932      	ldr	r1, [pc, #200]	@ (8034264 <svl_sdhDaemon+0x4f4>)
 803419a:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 803419c:	4b30      	ldr	r3, [pc, #192]	@ (8034260 <svl_sdhDaemon+0x4f0>)
 803419e:	681b      	ldr	r3, [r3, #0]
 80341a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80341a4:	0291      	lsls	r1, r2, #10
 80341a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80341aa:	1888      	adds	r0, r1, r2
 80341ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80341b0:	492c      	ldr	r1, [pc, #176]	@ (8034264 <svl_sdhDaemon+0x4f4>)
 80341b2:	4798      	blx	r3
 80341b4:	e01d      	b.n	80341f2 <svl_sdhDaemon+0x482>
                                        }
                                        else
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 80341b6:	4b29      	ldr	r3, [pc, #164]	@ (803425c <svl_sdhDaemon+0x4ec>)
 80341b8:	681b      	ldr	r3, [r3, #0]
 80341ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80341be:	0291      	lsls	r1, r2, #10
 80341c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80341c4:	1888      	adds	r0, r1, r2
 80341c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80341ca:	0292      	lsls	r2, r2, #10
 80341cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80341ce:	1a8a      	subs	r2, r1, r2
 80341d0:	4924      	ldr	r1, [pc, #144]	@ (8034264 <svl_sdhDaemon+0x4f4>)
 80341d2:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 80341d4:	4b22      	ldr	r3, [pc, #136]	@ (8034260 <svl_sdhDaemon+0x4f0>)
 80341d6:	681b      	ldr	r3, [r3, #0]
 80341d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80341dc:	0291      	lsls	r1, r2, #10
 80341de:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80341e2:	1888      	adds	r0, r1, r2
 80341e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80341e8:	0292      	lsls	r2, r2, #10
 80341ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80341ec:	1a8a      	subs	r2, r1, r2
 80341ee:	491d      	ldr	r1, [pc, #116]	@ (8034264 <svl_sdhDaemon+0x4f4>)
 80341f0:	4798      	blx	r3
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 80341f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80341f6:	3301      	adds	r3, #1
 80341f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80341fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8034200:	029b      	lsls	r3, r3, #10
 8034202:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8034204:	429a      	cmp	r2, r3
 8034206:	d8b6      	bhi.n	8034176 <svl_sdhDaemon+0x406>
                            {
                                // No moving required.
                            }

                            // Decrease number of binaries.
                            numOfBinaries--;
 8034208:	88bb      	ldrh	r3, [r7, #4]
 803420a:	3b01      	subs	r3, #1
 803420c:	b29b      	uxth	r3, r3
 803420e:	80bb      	strh	r3, [r7, #4]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8034210:	4b13      	ldr	r3, [pc, #76]	@ (8034260 <svl_sdhDaemon+0x4f0>)
 8034212:	681b      	ldr	r3, [r3, #0]
 8034214:	1d39      	adds	r1, r7, #4
 8034216:	2202      	movs	r2, #2
 8034218:	2000      	movs	r0, #0
 803421a:	4798      	blx	r3

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 803421c:	88fa      	ldrh	r2, [r7, #6]
 803421e:	4b11      	ldr	r3, [pc, #68]	@ (8034264 <svl_sdhDaemon+0x4f4>)
 8034220:	801a      	strh	r2, [r3, #0]
                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8034222:	4812      	ldr	r0, [pc, #72]	@ (803426c <svl_sdhDaemon+0x4fc>)
 8034224:	f006 ffd4 	bl	803b1d0 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8034228:	e00b      	b.n	8034242 <svl_sdhDaemon+0x4d2>
                }
                default: break;
 803422a:	bf00      	nop
 803422c:	e00a      	b.n	8034244 <svl_sdhDaemon+0x4d4>
                    break;
 803422e:	bf00      	nop
 8034230:	e008      	b.n	8034244 <svl_sdhDaemon+0x4d4>
                    break;
 8034232:	bf00      	nop
 8034234:	e006      	b.n	8034244 <svl_sdhDaemon+0x4d4>
                    break;
 8034236:	bf00      	nop
 8034238:	e004      	b.n	8034244 <svl_sdhDaemon+0x4d4>
                    break;
 803423a:	bf00      	nop
 803423c:	e002      	b.n	8034244 <svl_sdhDaemon+0x4d4>
                    break;
 803423e:	bf00      	nop
 8034240:	e000      	b.n	8034244 <svl_sdhDaemon+0x4d4>
                    break;
 8034242:	bf00      	nop
            }
            (void_t) gos_triggerReset(&sdhControlTrigger);
 8034244:	480a      	ldr	r0, [pc, #40]	@ (8034270 <svl_sdhDaemon+0x500>)
 8034246:	f006 febb 	bl	803afc0 <gos_triggerReset>
 803424a:	e5c3      	b.n	8033dd4 <svl_sdhDaemon+0x64>
            else
            {
                // Just message RX timeout in idle state.
            }
#endif
            sdhState = SDH_STATE_IDLE;
 803424c:	4b09      	ldr	r3, [pc, #36]	@ (8034274 <svl_sdhDaemon+0x504>)
 803424e:	2200      	movs	r2, #0
 8034250:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskSleep(100);
 8034252:	2064      	movs	r0, #100	@ 0x64
 8034254:	f001 fdc4 	bl	8035de0 <gos_taskSleep>
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8034258:	e5bc      	b.n	8033dd4 <svl_sdhDaemon+0x64>
 803425a:	bf00      	nop
 803425c:	2000ae90 	.word	0x2000ae90
 8034260:	2000ae94 	.word	0x2000ae94
 8034264:	2000ae98 	.word	0x2000ae98
 8034268:	2000ae9a 	.word	0x2000ae9a
 803426c:	2000b2e4 	.word	0x2000b2e4
 8034270:	2000b2d8 	.word	0x2000b2d8
 8034274:	2000b2f0 	.word	0x2000b2f0

08034278 <svl_sdhSysmonBinaryNumReqCallback>:
 * @details Handles the binary number request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryNumReqCallback (void_t)
{
 8034278:	b580      	push	{r7, lr}
 803427a:	b082      	sub	sp, #8
 803427c:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 803427e:	4b0f      	ldr	r3, [pc, #60]	@ (80342bc <svl_sdhSysmonBinaryNumReqCallback+0x44>)
 8034280:	2202      	movs	r2, #2
 8034282:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8034284:	480e      	ldr	r0, [pc, #56]	@ (80342c0 <svl_sdhSysmonBinaryNumReqCallback+0x48>)
 8034286:	f006 ffa3 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 803428a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 803428e:	2101      	movs	r1, #1
 8034290:	480c      	ldr	r0, [pc, #48]	@ (80342c4 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 8034292:	f006 feed 	bl	803b070 <gos_triggerWait>
 8034296:	4603      	mov	r3, r0
 8034298:	2b55      	cmp	r3, #85	@ 0x55
 803429a:	d109      	bne.n	80342b0 <svl_sdhSysmonBinaryNumReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 803429c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80342a0:	9300      	str	r3, [sp, #0]
 80342a2:	2302      	movs	r3, #2
 80342a4:	4a08      	ldr	r2, [pc, #32]	@ (80342c8 <svl_sdhSysmonBinaryNumReqCallback+0x50>)
 80342a6:	f641 2101 	movw	r1, #6657	@ 0x1a01
 80342aa:	2000      	movs	r0, #0
 80342ac:	f003 fc2a 	bl	8037b04 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80342b0:	4804      	ldr	r0, [pc, #16]	@ (80342c4 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 80342b2:	f006 fe85 	bl	803afc0 <gos_triggerReset>
}
 80342b6:	bf00      	nop
 80342b8:	46bd      	mov	sp, r7
 80342ba:	bd80      	pop	{r7, pc}
 80342bc:	2000b2f1 	.word	0x2000b2f1
 80342c0:	2000b2d8 	.word	0x2000b2d8
 80342c4:	2000b2e4 	.word	0x2000b2e4
 80342c8:	2000ae98 	.word	0x2000ae98

080342cc <svl_sdhSysmonBinaryInfoReqCallback>:
 * @details Handles the binary info request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryInfoReqCallback (void_t)
{
 80342cc:	b580      	push	{r7, lr}
 80342ce:	b082      	sub	sp, #8
 80342d0:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 80342d2:	4b0f      	ldr	r3, [pc, #60]	@ (8034310 <svl_sdhSysmonBinaryInfoReqCallback+0x44>)
 80342d4:	2203      	movs	r2, #3
 80342d6:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 80342d8:	480e      	ldr	r0, [pc, #56]	@ (8034314 <svl_sdhSysmonBinaryInfoReqCallback+0x48>)
 80342da:	f006 ff79 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 80342de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80342e2:	2101      	movs	r1, #1
 80342e4:	480c      	ldr	r0, [pc, #48]	@ (8034318 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 80342e6:	f006 fec3 	bl	803b070 <gos_triggerWait>
 80342ea:	4603      	mov	r3, r0
 80342ec:	2b55      	cmp	r3, #85	@ 0x55
 80342ee:	d109      	bne.n	8034304 <svl_sdhSysmonBinaryInfoReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 80342f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80342f4:	9300      	str	r3, [sp, #0]
 80342f6:	2330      	movs	r3, #48	@ 0x30
 80342f8:	4a08      	ldr	r2, [pc, #32]	@ (803431c <svl_sdhSysmonBinaryInfoReqCallback+0x50>)
 80342fa:	f641 2102 	movw	r1, #6658	@ 0x1a02
 80342fe:	2000      	movs	r0, #0
 8034300:	f003 fc00 	bl	8037b04 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8034304:	4804      	ldr	r0, [pc, #16]	@ (8034318 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 8034306:	f006 fe5b 	bl	803afc0 <gos_triggerReset>
}
 803430a:	bf00      	nop
 803430c:	46bd      	mov	sp, r7
 803430e:	bd80      	pop	{r7, pc}
 8034310:	2000b2f1 	.word	0x2000b2f1
 8034314:	2000b2d8 	.word	0x2000b2d8
 8034318:	2000b2e4 	.word	0x2000b2e4
 803431c:	2000ae98 	.word	0x2000ae98

08034320 <svl_sdhSysmonDownloadReqCallback>:
 * @details Handles the download request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonDownloadReqCallback (void_t)
{
 8034320:	b580      	push	{r7, lr}
 8034322:	b082      	sub	sp, #8
 8034324:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 8034326:	4b0f      	ldr	r3, [pc, #60]	@ (8034364 <svl_sdhSysmonDownloadReqCallback+0x44>)
 8034328:	2204      	movs	r2, #4
 803432a:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 803432c:	480e      	ldr	r0, [pc, #56]	@ (8034368 <svl_sdhSysmonDownloadReqCallback+0x48>)
 803432e:	f006 ff4f 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 8034332:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8034336:	2101      	movs	r1, #1
 8034338:	480c      	ldr	r0, [pc, #48]	@ (803436c <svl_sdhSysmonDownloadReqCallback+0x4c>)
 803433a:	f006 fe99 	bl	803b070 <gos_triggerWait>
 803433e:	4603      	mov	r3, r0
 8034340:	2b55      	cmp	r3, #85	@ 0x55
 8034342:	d109      	bne.n	8034358 <svl_sdhSysmonDownloadReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 8034344:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8034348:	9300      	str	r3, [sp, #0]
 803434a:	2301      	movs	r3, #1
 803434c:	4a08      	ldr	r2, [pc, #32]	@ (8034370 <svl_sdhSysmonDownloadReqCallback+0x50>)
 803434e:	f641 2103 	movw	r1, #6659	@ 0x1a03
 8034352:	2000      	movs	r0, #0
 8034354:	f003 fbd6 	bl	8037b04 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8034358:	4804      	ldr	r0, [pc, #16]	@ (803436c <svl_sdhSysmonDownloadReqCallback+0x4c>)
 803435a:	f006 fe31 	bl	803afc0 <gos_triggerReset>
}
 803435e:	bf00      	nop
 8034360:	46bd      	mov	sp, r7
 8034362:	bd80      	pop	{r7, pc}
 8034364:	2000b2f1 	.word	0x2000b2f1
 8034368:	2000b2d8 	.word	0x2000b2d8
 803436c:	2000b2e4 	.word	0x2000b2e4
 8034370:	2000ae98 	.word	0x2000ae98

08034374 <svl_sdhSysmonBinaryChunkReqCallback>:
 * @details Handles the binary chunk request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryChunkReqCallback (void_t)
{
 8034374:	b580      	push	{r7, lr}
 8034376:	b082      	sub	sp, #8
 8034378:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 803437a:	4b0f      	ldr	r3, [pc, #60]	@ (80343b8 <svl_sdhSysmonBinaryChunkReqCallback+0x44>)
 803437c:	2201      	movs	r2, #1
 803437e:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8034380:	480e      	ldr	r0, [pc, #56]	@ (80343bc <svl_sdhSysmonBinaryChunkReqCallback+0x48>)
 8034382:	f006 ff25 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 8034386:	f242 7210 	movw	r2, #10000	@ 0x2710
 803438a:	2101      	movs	r1, #1
 803438c:	480c      	ldr	r0, [pc, #48]	@ (80343c0 <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 803438e:	f006 fe6f 	bl	803b070 <gos_triggerWait>
 8034392:	4603      	mov	r3, r0
 8034394:	2b55      	cmp	r3, #85	@ 0x55
 8034396:	d109      	bne.n	80343ac <svl_sdhSysmonBinaryChunkReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 8034398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 803439c:	9300      	str	r3, [sp, #0]
 803439e:	2303      	movs	r3, #3
 80343a0:	4a08      	ldr	r2, [pc, #32]	@ (80343c4 <svl_sdhSysmonBinaryChunkReqCallback+0x50>)
 80343a2:	f641 2104 	movw	r1, #6660	@ 0x1a04
 80343a6:	2000      	movs	r0, #0
 80343a8:	f003 fbac 	bl	8037b04 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80343ac:	4804      	ldr	r0, [pc, #16]	@ (80343c0 <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 80343ae:	f006 fe07 	bl	803afc0 <gos_triggerReset>
}
 80343b2:	bf00      	nop
 80343b4:	46bd      	mov	sp, r7
 80343b6:	bd80      	pop	{r7, pc}
 80343b8:	2000b2f1 	.word	0x2000b2f1
 80343bc:	2000b2d8 	.word	0x2000b2d8
 80343c0:	2000b2e4 	.word	0x2000b2e4
 80343c4:	2000ae98 	.word	0x2000ae98

080343c8 <svl_sdhSysmonSoftwareInstallReqCallback>:
 * @details Handles the install request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonSoftwareInstallReqCallback (void_t)
{
 80343c8:	b580      	push	{r7, lr}
 80343ca:	b082      	sub	sp, #8
 80343cc:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 80343ce:	4b0f      	ldr	r3, [pc, #60]	@ (803440c <svl_sdhSysmonSoftwareInstallReqCallback+0x44>)
 80343d0:	2205      	movs	r2, #5
 80343d2:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 80343d4:	480e      	ldr	r0, [pc, #56]	@ (8034410 <svl_sdhSysmonSoftwareInstallReqCallback+0x48>)
 80343d6:	f006 fefb 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 80343da:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80343de:	2101      	movs	r1, #1
 80343e0:	480c      	ldr	r0, [pc, #48]	@ (8034414 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 80343e2:	f006 fe45 	bl	803b070 <gos_triggerWait>
 80343e6:	4603      	mov	r3, r0
 80343e8:	2b55      	cmp	r3, #85	@ 0x55
 80343ea:	d109      	bne.n	8034400 <svl_sdhSysmonSoftwareInstallReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 80343ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80343f0:	9300      	str	r3, [sp, #0]
 80343f2:	2302      	movs	r3, #2
 80343f4:	4a08      	ldr	r2, [pc, #32]	@ (8034418 <svl_sdhSysmonSoftwareInstallReqCallback+0x50>)
 80343f6:	f641 2105 	movw	r1, #6661	@ 0x1a05
 80343fa:	2000      	movs	r0, #0
 80343fc:	f003 fb82 	bl	8037b04 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8034400:	4804      	ldr	r0, [pc, #16]	@ (8034414 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 8034402:	f006 fddd 	bl	803afc0 <gos_triggerReset>
}
 8034406:	bf00      	nop
 8034408:	46bd      	mov	sp, r7
 803440a:	bd80      	pop	{r7, pc}
 803440c:	2000b2f1 	.word	0x2000b2f1
 8034410:	2000b2d8 	.word	0x2000b2d8
 8034414:	2000b2e4 	.word	0x2000b2e4
 8034418:	2000ae98 	.word	0x2000ae98

0803441c <svl_sdhSysmonBinaryEraseReqCallback>:
 * @details Handles the erase request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryEraseReqCallback (void_t)
{
 803441c:	b580      	push	{r7, lr}
 803441e:	b082      	sub	sp, #8
 8034420:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 8034422:	4b0f      	ldr	r3, [pc, #60]	@ (8034460 <svl_sdhSysmonBinaryEraseReqCallback+0x44>)
 8034424:	2206      	movs	r2, #6
 8034426:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8034428:	480e      	ldr	r0, [pc, #56]	@ (8034464 <svl_sdhSysmonBinaryEraseReqCallback+0x48>)
 803442a:	f006 fed1 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 803442e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8034432:	2101      	movs	r1, #1
 8034434:	480c      	ldr	r0, [pc, #48]	@ (8034468 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 8034436:	f006 fe1b 	bl	803b070 <gos_triggerWait>
 803443a:	4603      	mov	r3, r0
 803443c:	2b55      	cmp	r3, #85	@ 0x55
 803443e:	d109      	bne.n	8034454 <svl_sdhSysmonBinaryEraseReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 8034440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8034444:	9300      	str	r3, [sp, #0]
 8034446:	2302      	movs	r3, #2
 8034448:	4a08      	ldr	r2, [pc, #32]	@ (803446c <svl_sdhSysmonBinaryEraseReqCallback+0x50>)
 803444a:	f641 2106 	movw	r1, #6662	@ 0x1a06
 803444e:	2000      	movs	r0, #0
 8034450:	f003 fb58 	bl	8037b04 <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8034454:	4804      	ldr	r0, [pc, #16]	@ (8034468 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 8034456:	f006 fdb3 	bl	803afc0 <gos_triggerReset>
}
 803445a:	bf00      	nop
 803445c:	46bd      	mov	sp, r7
 803445e:	bd80      	pop	{r7, pc}
 8034460:	2000b2f1 	.word	0x2000b2f1
 8034464:	2000b2d8 	.word	0x2000b2d8
 8034468:	2000b2e4 	.word	0x2000b2e4
 803446c:	2000ae98 	.word	0x2000ae98

08034470 <svl_sdhIplBinaryNumReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhIplBinaryNumReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8034470:	b580      	push	{r7, lr}
 8034472:	b084      	sub	sp, #16
 8034474:	af00      	add	r7, sp, #0
 8034476:	60f8      	str	r0, [r7, #12]
 8034478:	60b9      	str	r1, [r7, #8]
 803447a:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 803447c:	4b0d      	ldr	r3, [pc, #52]	@ (80344b4 <svl_sdhIplBinaryNumReqCallback+0x44>)
 803447e:	2202      	movs	r2, #2
 8034480:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8034482:	480d      	ldr	r0, [pc, #52]	@ (80344b8 <svl_sdhIplBinaryNumReqCallback+0x48>)
 8034484:	f006 fea4 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 8034488:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 803448c:	2101      	movs	r1, #1
 803448e:	480b      	ldr	r0, [pc, #44]	@ (80344bc <svl_sdhIplBinaryNumReqCallback+0x4c>)
 8034490:	f006 fdee 	bl	803b070 <gos_triggerWait>
 8034494:	4603      	mov	r3, r0
 8034496:	2b55      	cmp	r3, #85	@ 0x55
 8034498:	d105      	bne.n	80344a6 <svl_sdhIplBinaryNumReqCallback+0x36>
    {
        (void_t) svl_iplSendMessage(0xA02, sdhBuffer, sizeof(u16_t));
 803449a:	2202      	movs	r2, #2
 803449c:	4908      	ldr	r1, [pc, #32]	@ (80344c0 <svl_sdhIplBinaryNumReqCallback+0x50>)
 803449e:	f640 2002 	movw	r0, #2562	@ 0xa02
 80344a2:	f7fe fa07 	bl	80328b4 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80344a6:	4805      	ldr	r0, [pc, #20]	@ (80344bc <svl_sdhIplBinaryNumReqCallback+0x4c>)
 80344a8:	f006 fd8a 	bl	803afc0 <gos_triggerReset>
}
 80344ac:	bf00      	nop
 80344ae:	3710      	adds	r7, #16
 80344b0:	46bd      	mov	sp, r7
 80344b2:	bd80      	pop	{r7, pc}
 80344b4:	2000b2f1 	.word	0x2000b2f1
 80344b8:	2000b2d8 	.word	0x2000b2d8
 80344bc:	2000b2e4 	.word	0x2000b2e4
 80344c0:	2000ae98 	.word	0x2000ae98

080344c4 <svl_sdhIplBinaryInfoReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryInfoReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 80344c4:	b580      	push	{r7, lr}
 80344c6:	b084      	sub	sp, #16
 80344c8:	af00      	add	r7, sp, #0
 80344ca:	60f8      	str	r0, [r7, #12]
 80344cc:	60b9      	str	r1, [r7, #8]
 80344ce:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 80344d0:	4b13      	ldr	r3, [pc, #76]	@ (8034520 <svl_sdhIplBinaryInfoReqCallback+0x5c>)
 80344d2:	2203      	movs	r2, #3
 80344d4:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 80344d6:	68bb      	ldr	r3, [r7, #8]
 80344d8:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 80344dc:	d902      	bls.n	80344e4 <svl_sdhIplBinaryInfoReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 80344de:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80344e2:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 80344e4:	68ba      	ldr	r2, [r7, #8]
 80344e6:	68f9      	ldr	r1, [r7, #12]
 80344e8:	480e      	ldr	r0, [pc, #56]	@ (8034524 <svl_sdhIplBinaryInfoReqCallback+0x60>)
 80344ea:	f007 fe72 	bl	803c1d2 <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 80344ee:	480e      	ldr	r0, [pc, #56]	@ (8034528 <svl_sdhIplBinaryInfoReqCallback+0x64>)
 80344f0:	f006 fe6e 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 80344f4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80344f8:	2101      	movs	r1, #1
 80344fa:	480c      	ldr	r0, [pc, #48]	@ (803452c <svl_sdhIplBinaryInfoReqCallback+0x68>)
 80344fc:	f006 fdb8 	bl	803b070 <gos_triggerWait>
 8034500:	4603      	mov	r3, r0
 8034502:	2b55      	cmp	r3, #85	@ 0x55
 8034504:	d105      	bne.n	8034512 <svl_sdhIplBinaryInfoReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA12, (u8_t*)sdhBuffer, sizeof(svl_sdhBinaryDesc_t));
 8034506:	2230      	movs	r2, #48	@ 0x30
 8034508:	4906      	ldr	r1, [pc, #24]	@ (8034524 <svl_sdhIplBinaryInfoReqCallback+0x60>)
 803450a:	f640 2012 	movw	r0, #2578	@ 0xa12
 803450e:	f7fe f9d1 	bl	80328b4 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8034512:	4806      	ldr	r0, [pc, #24]	@ (803452c <svl_sdhIplBinaryInfoReqCallback+0x68>)
 8034514:	f006 fd54 	bl	803afc0 <gos_triggerReset>
}
 8034518:	bf00      	nop
 803451a:	3710      	adds	r7, #16
 803451c:	46bd      	mov	sp, r7
 803451e:	bd80      	pop	{r7, pc}
 8034520:	2000b2f1 	.word	0x2000b2f1
 8034524:	2000ae98 	.word	0x2000ae98
 8034528:	2000b2d8 	.word	0x2000b2d8
 803452c:	2000b2e4 	.word	0x2000b2e4

08034530 <svl_sdhIplDownloadReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplDownloadReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8034530:	b580      	push	{r7, lr}
 8034532:	b084      	sub	sp, #16
 8034534:	af00      	add	r7, sp, #0
 8034536:	60f8      	str	r0, [r7, #12]
 8034538:	60b9      	str	r1, [r7, #8]
 803453a:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 803453c:	4b13      	ldr	r3, [pc, #76]	@ (803458c <svl_sdhIplDownloadReqCallback+0x5c>)
 803453e:	2204      	movs	r2, #4
 8034540:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 8034542:	68bb      	ldr	r3, [r7, #8]
 8034544:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8034548:	d902      	bls.n	8034550 <svl_sdhIplDownloadReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 803454a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 803454e:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 8034550:	68ba      	ldr	r2, [r7, #8]
 8034552:	68f9      	ldr	r1, [r7, #12]
 8034554:	480e      	ldr	r0, [pc, #56]	@ (8034590 <svl_sdhIplDownloadReqCallback+0x60>)
 8034556:	f007 fe3c 	bl	803c1d2 <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 803455a:	480e      	ldr	r0, [pc, #56]	@ (8034594 <svl_sdhIplDownloadReqCallback+0x64>)
 803455c:	f006 fe38 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 8034560:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8034564:	2101      	movs	r1, #1
 8034566:	480c      	ldr	r0, [pc, #48]	@ (8034598 <svl_sdhIplDownloadReqCallback+0x68>)
 8034568:	f006 fd82 	bl	803b070 <gos_triggerWait>
 803456c:	4603      	mov	r3, r0
 803456e:	2b55      	cmp	r3, #85	@ 0x55
 8034570:	d105      	bne.n	803457e <svl_sdhIplDownloadReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA22, sdhBuffer, sizeof(u8_t));
 8034572:	2201      	movs	r2, #1
 8034574:	4906      	ldr	r1, [pc, #24]	@ (8034590 <svl_sdhIplDownloadReqCallback+0x60>)
 8034576:	f640 2022 	movw	r0, #2594	@ 0xa22
 803457a:	f7fe f99b 	bl	80328b4 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 803457e:	4806      	ldr	r0, [pc, #24]	@ (8034598 <svl_sdhIplDownloadReqCallback+0x68>)
 8034580:	f006 fd1e 	bl	803afc0 <gos_triggerReset>
}
 8034584:	bf00      	nop
 8034586:	3710      	adds	r7, #16
 8034588:	46bd      	mov	sp, r7
 803458a:	bd80      	pop	{r7, pc}
 803458c:	2000b2f1 	.word	0x2000b2f1
 8034590:	2000ae98 	.word	0x2000ae98
 8034594:	2000b2d8 	.word	0x2000b2d8
 8034598:	2000b2e4 	.word	0x2000b2e4

0803459c <svl_sdhIplBinaryChunkReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryChunkReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 803459c:	b580      	push	{r7, lr}
 803459e:	b084      	sub	sp, #16
 80345a0:	af00      	add	r7, sp, #0
 80345a2:	60f8      	str	r0, [r7, #12]
 80345a4:	60b9      	str	r1, [r7, #8]
 80345a6:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 80345a8:	4b13      	ldr	r3, [pc, #76]	@ (80345f8 <svl_sdhIplBinaryChunkReqCallback+0x5c>)
 80345aa:	2201      	movs	r2, #1
 80345ac:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 80345ae:	68bb      	ldr	r3, [r7, #8]
 80345b0:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 80345b4:	d902      	bls.n	80345bc <svl_sdhIplBinaryChunkReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 80345b6:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80345ba:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 80345bc:	68ba      	ldr	r2, [r7, #8]
 80345be:	68f9      	ldr	r1, [r7, #12]
 80345c0:	480e      	ldr	r0, [pc, #56]	@ (80345fc <svl_sdhIplBinaryChunkReqCallback+0x60>)
 80345c2:	f007 fe06 	bl	803c1d2 <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 80345c6:	480e      	ldr	r0, [pc, #56]	@ (8034600 <svl_sdhIplBinaryChunkReqCallback+0x64>)
 80345c8:	f006 fe02 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 80345cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80345d0:	2101      	movs	r1, #1
 80345d2:	480c      	ldr	r0, [pc, #48]	@ (8034604 <svl_sdhIplBinaryChunkReqCallback+0x68>)
 80345d4:	f006 fd4c 	bl	803b070 <gos_triggerWait>
 80345d8:	4603      	mov	r3, r0
 80345da:	2b55      	cmp	r3, #85	@ 0x55
 80345dc:	d105      	bne.n	80345ea <svl_sdhIplBinaryChunkReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA32, sdhBuffer, sizeof(svl_sdhChunkDesc_t));
 80345de:	2203      	movs	r2, #3
 80345e0:	4906      	ldr	r1, [pc, #24]	@ (80345fc <svl_sdhIplBinaryChunkReqCallback+0x60>)
 80345e2:	f640 2032 	movw	r0, #2610	@ 0xa32
 80345e6:	f7fe f965 	bl	80328b4 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80345ea:	4806      	ldr	r0, [pc, #24]	@ (8034604 <svl_sdhIplBinaryChunkReqCallback+0x68>)
 80345ec:	f006 fce8 	bl	803afc0 <gos_triggerReset>
}
 80345f0:	bf00      	nop
 80345f2:	3710      	adds	r7, #16
 80345f4:	46bd      	mov	sp, r7
 80345f6:	bd80      	pop	{r7, pc}
 80345f8:	2000b2f1 	.word	0x2000b2f1
 80345fc:	2000ae98 	.word	0x2000ae98
 8034600:	2000b2d8 	.word	0x2000b2d8
 8034604:	2000b2e4 	.word	0x2000b2e4

08034608 <svl_sdhIplSoftwareInstallReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplSoftwareInstallReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8034608:	b580      	push	{r7, lr}
 803460a:	b084      	sub	sp, #16
 803460c:	af00      	add	r7, sp, #0
 803460e:	60f8      	str	r0, [r7, #12]
 8034610:	60b9      	str	r1, [r7, #8]
 8034612:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 8034614:	4b13      	ldr	r3, [pc, #76]	@ (8034664 <svl_sdhIplSoftwareInstallReqCallback+0x5c>)
 8034616:	2205      	movs	r2, #5
 8034618:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 803461a:	68bb      	ldr	r3, [r7, #8]
 803461c:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8034620:	d902      	bls.n	8034628 <svl_sdhIplSoftwareInstallReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 8034622:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8034626:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 8034628:	68ba      	ldr	r2, [r7, #8]
 803462a:	68f9      	ldr	r1, [r7, #12]
 803462c:	480e      	ldr	r0, [pc, #56]	@ (8034668 <svl_sdhIplSoftwareInstallReqCallback+0x60>)
 803462e:	f007 fdd0 	bl	803c1d2 <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8034632:	480e      	ldr	r0, [pc, #56]	@ (803466c <svl_sdhIplSoftwareInstallReqCallback+0x64>)
 8034634:	f006 fdcc 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 8034638:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 803463c:	2101      	movs	r1, #1
 803463e:	480c      	ldr	r0, [pc, #48]	@ (8034670 <svl_sdhIplSoftwareInstallReqCallback+0x68>)
 8034640:	f006 fd16 	bl	803b070 <gos_triggerWait>
 8034644:	4603      	mov	r3, r0
 8034646:	2b55      	cmp	r3, #85	@ 0x55
 8034648:	d105      	bne.n	8034656 <svl_sdhIplSoftwareInstallReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA42, sdhBuffer, sizeof(u16_t));
 803464a:	2202      	movs	r2, #2
 803464c:	4906      	ldr	r1, [pc, #24]	@ (8034668 <svl_sdhIplSoftwareInstallReqCallback+0x60>)
 803464e:	f640 2042 	movw	r0, #2626	@ 0xa42
 8034652:	f7fe f92f 	bl	80328b4 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8034656:	4806      	ldr	r0, [pc, #24]	@ (8034670 <svl_sdhIplSoftwareInstallReqCallback+0x68>)
 8034658:	f006 fcb2 	bl	803afc0 <gos_triggerReset>
}
 803465c:	bf00      	nop
 803465e:	3710      	adds	r7, #16
 8034660:	46bd      	mov	sp, r7
 8034662:	bd80      	pop	{r7, pc}
 8034664:	2000b2f1 	.word	0x2000b2f1
 8034668:	2000ae98 	.word	0x2000ae98
 803466c:	2000b2d8 	.word	0x2000b2d8
 8034670:	2000b2e4 	.word	0x2000b2e4

08034674 <svl_sdhIplBinaryEraseReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryEraseReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8034674:	b580      	push	{r7, lr}
 8034676:	b084      	sub	sp, #16
 8034678:	af00      	add	r7, sp, #0
 803467a:	60f8      	str	r0, [r7, #12]
 803467c:	60b9      	str	r1, [r7, #8]
 803467e:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 8034680:	4b13      	ldr	r3, [pc, #76]	@ (80346d0 <svl_sdhIplBinaryEraseReqCallback+0x5c>)
 8034682:	2206      	movs	r2, #6
 8034684:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 8034686:	68bb      	ldr	r3, [r7, #8]
 8034688:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 803468c:	d902      	bls.n	8034694 <svl_sdhIplBinaryEraseReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 803468e:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8034692:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 8034694:	68ba      	ldr	r2, [r7, #8]
 8034696:	68f9      	ldr	r1, [r7, #12]
 8034698:	480e      	ldr	r0, [pc, #56]	@ (80346d4 <svl_sdhIplBinaryEraseReqCallback+0x60>)
 803469a:	f007 fd9a 	bl	803c1d2 <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 803469e:	480e      	ldr	r0, [pc, #56]	@ (80346d8 <svl_sdhIplBinaryEraseReqCallback+0x64>)
 80346a0:	f006 fd96 	bl	803b1d0 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 80346a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80346a8:	2101      	movs	r1, #1
 80346aa:	480c      	ldr	r0, [pc, #48]	@ (80346dc <svl_sdhIplBinaryEraseReqCallback+0x68>)
 80346ac:	f006 fce0 	bl	803b070 <gos_triggerWait>
 80346b0:	4603      	mov	r3, r0
 80346b2:	2b55      	cmp	r3, #85	@ 0x55
 80346b4:	d105      	bne.n	80346c2 <svl_sdhIplBinaryEraseReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA52, sdhBuffer, sizeof(u16_t));
 80346b6:	2202      	movs	r2, #2
 80346b8:	4906      	ldr	r1, [pc, #24]	@ (80346d4 <svl_sdhIplBinaryEraseReqCallback+0x60>)
 80346ba:	f640 2052 	movw	r0, #2642	@ 0xa52
 80346be:	f7fe f8f9 	bl	80328b4 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80346c2:	4806      	ldr	r0, [pc, #24]	@ (80346dc <svl_sdhIplBinaryEraseReqCallback+0x68>)
 80346c4:	f006 fc7c 	bl	803afc0 <gos_triggerReset>
}
 80346c8:	bf00      	nop
 80346ca:	3710      	adds	r7, #16
 80346cc:	46bd      	mov	sp, r7
 80346ce:	bd80      	pop	{r7, pc}
 80346d0:	2000b2f1 	.word	0x2000b2f1
 80346d4:	2000ae98 	.word	0x2000ae98
 80346d8:	2000b2d8 	.word	0x2000b2d8
 80346dc:	2000b2e4 	.word	0x2000b2e4

080346e0 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80346e0:	b580      	push	{r7, lr}
 80346e2:	b084      	sub	sp, #16
 80346e4:	af00      	add	r7, sp, #0
 80346e6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80346e8:	23ae      	movs	r3, #174	@ 0xae
 80346ea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80346ec:	687b      	ldr	r3, [r7, #4]
 80346ee:	2b00      	cmp	r3, #0
 80346f0:	d006      	beq.n	8034700 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80346f2:	221c      	movs	r2, #28
 80346f4:	6879      	ldr	r1, [r7, #4]
 80346f6:	4805      	ldr	r0, [pc, #20]	@ (803470c <gos_driverInit+0x2c>)
 80346f8:	f007 fd6b 	bl	803c1d2 <memcpy>
        driverInitResult = GOS_SUCCESS;
 80346fc:	2355      	movs	r3, #85	@ 0x55
 80346fe:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 8034700:	7bfb      	ldrb	r3, [r7, #15]
}
 8034702:	4618      	mov	r0, r3
 8034704:	3710      	adds	r7, #16
 8034706:	46bd      	mov	sp, r7
 8034708:	bd80      	pop	{r7, pc}
 803470a:	bf00      	nop
 803470c:	2000b2f4 	.word	0x2000b2f4

08034710 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 8034710:	b580      	push	{r7, lr}
 8034712:	b084      	sub	sp, #16
 8034714:	af00      	add	r7, sp, #0
 8034716:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8034718:	23ae      	movs	r3, #174	@ 0xae
 803471a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 803471c:	4b07      	ldr	r3, [pc, #28]	@ (803473c <gos_traceDriverTransmitString+0x2c>)
 803471e:	689b      	ldr	r3, [r3, #8]
 8034720:	2b00      	cmp	r3, #0
 8034722:	d005      	beq.n	8034730 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 8034724:	4b05      	ldr	r3, [pc, #20]	@ (803473c <gos_traceDriverTransmitString+0x2c>)
 8034726:	689b      	ldr	r3, [r3, #8]
 8034728:	6878      	ldr	r0, [r7, #4]
 803472a:	4798      	blx	r3
 803472c:	4603      	mov	r3, r0
 803472e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8034730:	7bfb      	ldrb	r3, [r7, #15]
}
 8034732:	4618      	mov	r0, r3
 8034734:	3710      	adds	r7, #16
 8034736:	46bd      	mov	sp, r7
 8034738:	bd80      	pop	{r7, pc}
 803473a:	bf00      	nop
 803473c:	2000b2f4 	.word	0x2000b2f4

08034740 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 8034740:	b580      	push	{r7, lr}
 8034742:	b084      	sub	sp, #16
 8034744:	af00      	add	r7, sp, #0
 8034746:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8034748:	23ae      	movs	r3, #174	@ 0xae
 803474a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 803474c:	4b07      	ldr	r3, [pc, #28]	@ (803476c <gos_traceDriverTransmitString_Unsafe+0x2c>)
 803474e:	68db      	ldr	r3, [r3, #12]
 8034750:	2b00      	cmp	r3, #0
 8034752:	d005      	beq.n	8034760 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 8034754:	4b05      	ldr	r3, [pc, #20]	@ (803476c <gos_traceDriverTransmitString_Unsafe+0x2c>)
 8034756:	68db      	ldr	r3, [r3, #12]
 8034758:	6878      	ldr	r0, [r7, #4]
 803475a:	4798      	blx	r3
 803475c:	4603      	mov	r3, r0
 803475e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8034760:	7bfb      	ldrb	r3, [r7, #15]
}
 8034762:	4618      	mov	r0, r3
 8034764:	3710      	adds	r7, #16
 8034766:	46bd      	mov	sp, r7
 8034768:	bd80      	pop	{r7, pc}
 803476a:	bf00      	nop
 803476c:	2000b2f4 	.word	0x2000b2f4

08034770 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 8034770:	b480      	push	{r7}
 8034772:	b083      	sub	sp, #12
 8034774:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 8034776:	23ae      	movs	r3, #174	@ 0xae
 8034778:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 803477a:	2301      	movs	r3, #1
 803477c:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803477e:	2301      	movs	r3, #1
 8034780:	80fb      	strh	r3, [r7, #6]
 8034782:	e038      	b.n	80347f6 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 8034784:	88fb      	ldrh	r3, [r7, #6]
 8034786:	4a6b      	ldr	r2, [pc, #428]	@ (8034934 <gos_kernelInit+0x1c4>)
 8034788:	216a      	movs	r1, #106	@ 0x6a
 803478a:	fb01 f303 	mul.w	r3, r1, r3
 803478e:	4413      	add	r3, r2
 8034790:	2200      	movs	r2, #0
 8034792:	701a      	strb	r2, [r3, #0]
 8034794:	2200      	movs	r2, #0
 8034796:	705a      	strb	r2, [r3, #1]
 8034798:	2200      	movs	r2, #0
 803479a:	709a      	strb	r2, [r3, #2]
 803479c:	2200      	movs	r2, #0
 803479e:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 80347a0:	88fb      	ldrh	r3, [r7, #6]
 80347a2:	4a64      	ldr	r2, [pc, #400]	@ (8034934 <gos_kernelInit+0x1c4>)
 80347a4:	216a      	movs	r1, #106	@ 0x6a
 80347a6:	fb01 f303 	mul.w	r3, r1, r3
 80347aa:	4413      	add	r3, r2
 80347ac:	3306      	adds	r3, #6
 80347ae:	22ff      	movs	r2, #255	@ 0xff
 80347b0:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 80347b2:	88fb      	ldrh	r3, [r7, #6]
 80347b4:	4a5f      	ldr	r2, [pc, #380]	@ (8034934 <gos_kernelInit+0x1c4>)
 80347b6:	216a      	movs	r1, #106	@ 0x6a
 80347b8:	fb01 f303 	mul.w	r3, r1, r3
 80347bc:	4413      	add	r3, r2
 80347be:	3307      	adds	r3, #7
 80347c0:	22ff      	movs	r2, #255	@ 0xff
 80347c2:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 80347c4:	88fb      	ldrh	r3, [r7, #6]
 80347c6:	4a5b      	ldr	r2, [pc, #364]	@ (8034934 <gos_kernelInit+0x1c4>)
 80347c8:	216a      	movs	r1, #106	@ 0x6a
 80347ca:	fb01 f303 	mul.w	r3, r1, r3
 80347ce:	4413      	add	r3, r2
 80347d0:	3304      	adds	r3, #4
 80347d2:	2205      	movs	r2, #5
 80347d4:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 80347d6:	88fb      	ldrh	r3, [r7, #6]
 80347d8:	4a56      	ldr	r2, [pc, #344]	@ (8034934 <gos_kernelInit+0x1c4>)
 80347da:	216a      	movs	r1, #106	@ 0x6a
 80347dc:	fb01 f303 	mul.w	r3, r1, r3
 80347e0:	4413      	add	r3, r2
 80347e2:	3328      	adds	r3, #40	@ 0x28
 80347e4:	2200      	movs	r2, #0
 80347e6:	709a      	strb	r2, [r3, #2]
 80347e8:	2200      	movs	r2, #0
 80347ea:	f042 0201 	orr.w	r2, r2, #1
 80347ee:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80347f0:	88fb      	ldrh	r3, [r7, #6]
 80347f2:	3301      	adds	r3, #1
 80347f4:	80fb      	strh	r3, [r7, #6]
 80347f6:	88fb      	ldrh	r3, [r7, #6]
 80347f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80347fa:	d9c3      	bls.n	8034784 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 80347fc:	4b4e      	ldr	r3, [pc, #312]	@ (8034938 <gos_kernelInit+0x1c8>)
 80347fe:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8034800:	683b      	ldr	r3, [r7, #0]
 8034802:	3b04      	subs	r3, #4
 8034804:	603b      	str	r3, [r7, #0]
 8034806:	683b      	ldr	r3, [r7, #0]
 8034808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 803480c:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 803480e:	683b      	ldr	r3, [r7, #0]
 8034810:	3b04      	subs	r3, #4
 8034812:	603b      	str	r3, [r7, #0]
 8034814:	4a49      	ldr	r2, [pc, #292]	@ (803493c <gos_kernelInit+0x1cc>)
 8034816:	683b      	ldr	r3, [r7, #0]
 8034818:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 803481a:	683b      	ldr	r3, [r7, #0]
 803481c:	3b04      	subs	r3, #4
 803481e:	603b      	str	r3, [r7, #0]
 8034820:	683b      	ldr	r3, [r7, #0]
 8034822:	f06f 0202 	mvn.w	r2, #2
 8034826:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8034828:	683b      	ldr	r3, [r7, #0]
 803482a:	3b04      	subs	r3, #4
 803482c:	603b      	str	r3, [r7, #0]
 803482e:	683b      	ldr	r3, [r7, #0]
 8034830:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8034834:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 8034836:	683b      	ldr	r3, [r7, #0]
 8034838:	3b04      	subs	r3, #4
 803483a:	603b      	str	r3, [r7, #0]
 803483c:	683b      	ldr	r3, [r7, #0]
 803483e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8034842:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 8034844:	683b      	ldr	r3, [r7, #0]
 8034846:	3b04      	subs	r3, #4
 8034848:	603b      	str	r3, [r7, #0]
 803484a:	683b      	ldr	r3, [r7, #0]
 803484c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8034850:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 8034852:	683b      	ldr	r3, [r7, #0]
 8034854:	3b04      	subs	r3, #4
 8034856:	603b      	str	r3, [r7, #0]
 8034858:	683b      	ldr	r3, [r7, #0]
 803485a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 803485e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 8034860:	683b      	ldr	r3, [r7, #0]
 8034862:	3b04      	subs	r3, #4
 8034864:	603b      	str	r3, [r7, #0]
 8034866:	683b      	ldr	r3, [r7, #0]
 8034868:	2200      	movs	r2, #0
 803486a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 803486c:	683b      	ldr	r3, [r7, #0]
 803486e:	3b04      	subs	r3, #4
 8034870:	603b      	str	r3, [r7, #0]
 8034872:	683b      	ldr	r3, [r7, #0]
 8034874:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8034878:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 803487a:	683b      	ldr	r3, [r7, #0]
 803487c:	3b04      	subs	r3, #4
 803487e:	603b      	str	r3, [r7, #0]
 8034880:	683b      	ldr	r3, [r7, #0]
 8034882:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8034886:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 8034888:	683b      	ldr	r3, [r7, #0]
 803488a:	3b04      	subs	r3, #4
 803488c:	603b      	str	r3, [r7, #0]
 803488e:	683b      	ldr	r3, [r7, #0]
 8034890:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8034894:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 8034896:	683b      	ldr	r3, [r7, #0]
 8034898:	3b04      	subs	r3, #4
 803489a:	603b      	str	r3, [r7, #0]
 803489c:	683b      	ldr	r3, [r7, #0]
 803489e:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80348a2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 80348a4:	683b      	ldr	r3, [r7, #0]
 80348a6:	3b04      	subs	r3, #4
 80348a8:	603b      	str	r3, [r7, #0]
 80348aa:	683b      	ldr	r3, [r7, #0]
 80348ac:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80348b0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 80348b2:	683b      	ldr	r3, [r7, #0]
 80348b4:	3b04      	subs	r3, #4
 80348b6:	603b      	str	r3, [r7, #0]
 80348b8:	683b      	ldr	r3, [r7, #0]
 80348ba:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80348be:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 80348c0:	683b      	ldr	r3, [r7, #0]
 80348c2:	3b04      	subs	r3, #4
 80348c4:	603b      	str	r3, [r7, #0]
 80348c6:	683b      	ldr	r3, [r7, #0]
 80348c8:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80348cc:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 80348ce:	683b      	ldr	r3, [r7, #0]
 80348d0:	3b04      	subs	r3, #4
 80348d2:	603b      	str	r3, [r7, #0]
 80348d4:	683b      	ldr	r3, [r7, #0]
 80348d6:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80348da:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 80348dc:	683b      	ldr	r3, [r7, #0]
 80348de:	4a15      	ldr	r2, [pc, #84]	@ (8034934 <gos_kernelInit+0x1c4>)
 80348e0:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 80348e2:	4b14      	ldr	r3, [pc, #80]	@ (8034934 <gos_kernelInit+0x1c4>)
 80348e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80348e6:	4a13      	ldr	r2, [pc, #76]	@ (8034934 <gos_kernelInit+0x1c4>)
 80348e8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80348ec:	b292      	uxth	r2, r2
 80348ee:	1a9b      	subs	r3, r3, r2
 80348f0:	3340      	adds	r3, #64	@ 0x40
 80348f2:	4a10      	ldr	r2, [pc, #64]	@ (8034934 <gos_kernelInit+0x1c4>)
 80348f4:	f8c2 3066 	str.w	r3, [r2, #102]	@ 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 80348f8:	4b11      	ldr	r3, [pc, #68]	@ (8034940 <gos_kernelInit+0x1d0>)
 80348fa:	681b      	ldr	r3, [r3, #0]
 80348fc:	4a10      	ldr	r2, [pc, #64]	@ (8034940 <gos_kernelInit+0x1d0>)
 80348fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8034902:	6013      	str	r3, [r2, #0]
 8034904:	4b0e      	ldr	r3, [pc, #56]	@ (8034940 <gos_kernelInit+0x1d0>)
 8034906:	681b      	ldr	r3, [r3, #0]
 8034908:	4a0d      	ldr	r2, [pc, #52]	@ (8034940 <gos_kernelInit+0x1d0>)
 803490a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 803490e:	6013      	str	r3, [r2, #0]
 8034910:	4b0b      	ldr	r3, [pc, #44]	@ (8034940 <gos_kernelInit+0x1d0>)
 8034912:	681b      	ldr	r3, [r3, #0]
 8034914:	4a0a      	ldr	r2, [pc, #40]	@ (8034940 <gos_kernelInit+0x1d0>)
 8034916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 803491a:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 803491c:	4b09      	ldr	r3, [pc, #36]	@ (8034944 <gos_kernelInit+0x1d4>)
 803491e:	2200      	movs	r2, #0
 8034920:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 8034922:	2355      	movs	r3, #85	@ 0x55
 8034924:	717b      	strb	r3, [r7, #5]

    return initResult;
 8034926:	797b      	ldrb	r3, [r7, #5]
}
 8034928:	4618      	mov	r0, r3
 803492a:	370c      	adds	r7, #12
 803492c:	46bd      	mov	sp, r7
 803492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034932:	4770      	bx	lr
 8034934:	200018fc 	.word	0x200018fc
 8034938:	2001ee00 	.word	0x2001ee00
 803493c:	080375c5 	.word	0x080375c5
 8034940:	e000ed24 	.word	0xe000ed24
 8034944:	2000b311 	.word	0x2000b311

08034948 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 8034948:	b580      	push	{r7, lr}
 803494a:	b082      	sub	sp, #8
 803494c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 803494e:	23ae      	movs	r3, #174	@ 0xae
 8034950:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 8034952:	4b19      	ldr	r3, [pc, #100]	@ (80349b8 <gos_kernelStart+0x70>)
 8034954:	2200      	movs	r2, #0
 8034956:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 8034958:	f000 fea2 	bl	80356a0 <gos_kernelGetCurrentPsp>
 803495c:	f380 8809 	msr	PSP, r0
 8034960:	f3ef 8014 	mrs	r0, CONTROL
 8034964:	f040 0002 	orr.w	r0, r0, #2
 8034968:	f380 8814 	msr	CONTROL, r0
 803496c:	f3ef 8014 	mrs	r0, CONTROL
 8034970:	f040 0001 	orr.w	r0, r0, #1
 8034974:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 8034978:	4b0f      	ldr	r3, [pc, #60]	@ (80349b8 <gos_kernelStart+0x70>)
 803497a:	681b      	ldr	r3, [r3, #0]
 803497c:	4a0f      	ldr	r2, [pc, #60]	@ (80349bc <gos_kernelStart+0x74>)
 803497e:	216a      	movs	r1, #106	@ 0x6a
 8034980:	fb01 f303 	mul.w	r3, r1, r3
 8034984:	4413      	add	r3, r2
 8034986:	681b      	ldr	r3, [r3, #0]
 8034988:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 803498a:	480d      	ldr	r0, [pc, #52]	@ (80349c0 <gos_kernelStart+0x78>)
 803498c:	f006 fd5c 	bl	803b448 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 8034990:	4b0c      	ldr	r3, [pc, #48]	@ (80349c4 <gos_kernelStart+0x7c>)
 8034992:	781b      	ldrb	r3, [r3, #0]
 8034994:	2b00      	cmp	r3, #0
 8034996:	d005      	beq.n	80349a4 <gos_kernelStart+0x5c>
 8034998:	4b0a      	ldr	r3, [pc, #40]	@ (80349c4 <gos_kernelStart+0x7c>)
 803499a:	781b      	ldrb	r3, [r3, #0]
 803499c:	3b01      	subs	r3, #1
 803499e:	b2da      	uxtb	r2, r3
 80349a0:	4b08      	ldr	r3, [pc, #32]	@ (80349c4 <gos_kernelStart+0x7c>)
 80349a2:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 80349a4:	4b08      	ldr	r3, [pc, #32]	@ (80349c8 <gos_kernelStart+0x80>)
 80349a6:	2236      	movs	r2, #54	@ 0x36
 80349a8:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 80349aa:	683b      	ldr	r3, [r7, #0]
 80349ac:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 80349ae:	79fb      	ldrb	r3, [r7, #7]
}
 80349b0:	4618      	mov	r0, r3
 80349b2:	3708      	adds	r7, #8
 80349b4:	46bd      	mov	sp, r7
 80349b6:	bd80      	pop	{r7, pc}
 80349b8:	2000b318 	.word	0x2000b318
 80349bc:	200018fc 	.word	0x200018fc
 80349c0:	2000b320 	.word	0x2000b320
 80349c4:	2000b311 	.word	0x2000b311
 80349c8:	200018f8 	.word	0x200018f8

080349cc <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 80349cc:	b480      	push	{r7}
 80349ce:	b085      	sub	sp, #20
 80349d0:	af00      	add	r7, sp, #0
 80349d2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 80349d4:	23ae      	movs	r3, #174	@ 0xae
 80349d6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 80349d8:	687b      	ldr	r3, [r7, #4]
 80349da:	2b00      	cmp	r3, #0
 80349dc:	d008      	beq.n	80349f0 <gos_kernelRegisterSysTickHook+0x24>
 80349de:	4b08      	ldr	r3, [pc, #32]	@ (8034a00 <gos_kernelRegisterSysTickHook+0x34>)
 80349e0:	681b      	ldr	r3, [r3, #0]
 80349e2:	2b00      	cmp	r3, #0
 80349e4:	d104      	bne.n	80349f0 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 80349e6:	4a06      	ldr	r2, [pc, #24]	@ (8034a00 <gos_kernelRegisterSysTickHook+0x34>)
 80349e8:	687b      	ldr	r3, [r7, #4]
 80349ea:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 80349ec:	2355      	movs	r3, #85	@ 0x55
 80349ee:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 80349f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80349f2:	4618      	mov	r0, r3
 80349f4:	3714      	adds	r7, #20
 80349f6:	46bd      	mov	sp, r7
 80349f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80349fc:	4770      	bx	lr
 80349fe:	bf00      	nop
 8034a00:	2000b334 	.word	0x2000b334

08034a04 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 8034a04:	b580      	push	{r7, lr}
 8034a06:	b082      	sub	sp, #8
 8034a08:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 8034a0a:	4b15      	ldr	r3, [pc, #84]	@ (8034a60 <SysTick_Handler+0x5c>)
 8034a0c:	681b      	ldr	r3, [r3, #0]
 8034a0e:	3301      	adds	r3, #1
 8034a10:	4a13      	ldr	r2, [pc, #76]	@ (8034a60 <SysTick_Handler+0x5c>)
 8034a12:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 8034a14:	2001      	movs	r0, #1
 8034a16:	f005 ff61 	bl	803a8dc <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 8034a1a:	4b12      	ldr	r3, [pc, #72]	@ (8034a64 <SysTick_Handler+0x60>)
 8034a1c:	781b      	ldrb	r3, [r3, #0]
 8034a1e:	2b36      	cmp	r3, #54	@ 0x36
 8034a20:	d113      	bne.n	8034a4a <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 8034a22:	f000 fdad 	bl	8035580 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 8034a26:	4b10      	ldr	r3, [pc, #64]	@ (8034a68 <SysTick_Handler+0x64>)
 8034a28:	781b      	ldrb	r3, [r3, #0]
 8034a2a:	2b00      	cmp	r3, #0
 8034a2c:	d10d      	bne.n	8034a4a <SysTick_Handler+0x46>
 8034a2e:	2316      	movs	r3, #22
 8034a30:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 8034a32:	79fb      	ldrb	r3, [r7, #7]
 8034a34:	2b16      	cmp	r3, #22
 8034a36:	d106      	bne.n	8034a46 <SysTick_Handler+0x42>
 8034a38:	4b0c      	ldr	r3, [pc, #48]	@ (8034a6c <SysTick_Handler+0x68>)
 8034a3a:	681b      	ldr	r3, [r3, #0]
 8034a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8034a6c <SysTick_Handler+0x68>)
 8034a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8034a42:	6013      	str	r3, [r2, #0]
}
 8034a44:	e000      	b.n	8034a48 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 8034a46:	dfff      	svc	255	@ 0xff
}
 8034a48:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 8034a4a:	4b09      	ldr	r3, [pc, #36]	@ (8034a70 <SysTick_Handler+0x6c>)
 8034a4c:	681b      	ldr	r3, [r3, #0]
 8034a4e:	2b00      	cmp	r3, #0
 8034a50:	d002      	beq.n	8034a58 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 8034a52:	4b07      	ldr	r3, [pc, #28]	@ (8034a70 <SysTick_Handler+0x6c>)
 8034a54:	681b      	ldr	r3, [r3, #0]
 8034a56:	4798      	blx	r3
}
 8034a58:	bf00      	nop
 8034a5a:	3708      	adds	r7, #8
 8034a5c:	46bd      	mov	sp, r7
 8034a5e:	bd80      	pop	{r7, pc}
 8034a60:	2000b31c 	.word	0x2000b31c
 8034a64:	200018f8 	.word	0x200018f8
 8034a68:	2000b311 	.word	0x2000b311
 8034a6c:	e000ed04 	.word	0xe000ed04
 8034a70:	2000b334 	.word	0x2000b334

08034a74 <gos_kernelGetSysTicks>:
{
 8034a74:	b480      	push	{r7}
 8034a76:	af00      	add	r7, sp, #0
    return sysTicks;
 8034a78:	4b03      	ldr	r3, [pc, #12]	@ (8034a88 <gos_kernelGetSysTicks+0x14>)
 8034a7a:	681b      	ldr	r3, [r3, #0]
}
 8034a7c:	4618      	mov	r0, r3
 8034a7e:	46bd      	mov	sp, r7
 8034a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a84:	4770      	bx	lr
 8034a86:	bf00      	nop
 8034a88:	2000b31c 	.word	0x2000b31c

08034a8c <gos_kernelGetCpuUsage>:
{
 8034a8c:	b480      	push	{r7}
 8034a8e:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 8034a90:	4b06      	ldr	r3, [pc, #24]	@ (8034aac <gos_kernelGetCpuUsage+0x20>)
 8034a92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8034a96:	b29b      	uxth	r3, r3
 8034a98:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8034a9c:	3310      	adds	r3, #16
 8034a9e:	b29b      	uxth	r3, r3
}
 8034aa0:	4618      	mov	r0, r3
 8034aa2:	46bd      	mov	sp, r7
 8034aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aa8:	4770      	bx	lr
 8034aaa:	bf00      	nop
 8034aac:	200018fc 	.word	0x200018fc

08034ab0 <gos_kernelReset>:
{
 8034ab0:	b580      	push	{r7, lr}
 8034ab2:	b082      	sub	sp, #8
 8034ab4:	af00      	add	r7, sp, #0
	if (kernelPreResetHookFunction != NULL)
 8034ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8034af0 <gos_kernelReset+0x40>)
 8034ab8:	681b      	ldr	r3, [r3, #0]
 8034aba:	2b00      	cmp	r3, #0
 8034abc:	d002      	beq.n	8034ac4 <gos_kernelReset+0x14>
		kernelPreResetHookFunction();
 8034abe:	4b0c      	ldr	r3, [pc, #48]	@ (8034af0 <gos_kernelReset+0x40>)
 8034ac0:	681b      	ldr	r3, [r3, #0]
 8034ac2:	4798      	blx	r3
    resetRequired = GOS_TRUE;
 8034ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8034af4 <gos_kernelReset+0x44>)
 8034ac6:	2236      	movs	r2, #54	@ 0x36
 8034ac8:	701a      	strb	r2, [r3, #0]
 8034aca:	2309      	movs	r3, #9
 8034acc:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8034ace:	79fb      	ldrb	r3, [r7, #7]
 8034ad0:	2b16      	cmp	r3, #22
 8034ad2:	d106      	bne.n	8034ae2 <gos_kernelReset+0x32>
 8034ad4:	4b08      	ldr	r3, [pc, #32]	@ (8034af8 <gos_kernelReset+0x48>)
 8034ad6:	681b      	ldr	r3, [r3, #0]
 8034ad8:	4a07      	ldr	r2, [pc, #28]	@ (8034af8 <gos_kernelReset+0x48>)
 8034ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8034ade:	6013      	str	r3, [r2, #0]
}
 8034ae0:	e000      	b.n	8034ae4 <gos_kernelReset+0x34>
    gos_ported_reschedule(privilege);
 8034ae2:	dfff      	svc	255	@ 0xff
}
 8034ae4:	bf00      	nop
}
 8034ae6:	bf00      	nop
 8034ae8:	3708      	adds	r7, #8
 8034aea:	46bd      	mov	sp, r7
 8034aec:	bd80      	pop	{r7, pc}
 8034aee:	bf00      	nop
 8034af0:	2000b338 	.word	0x2000b338
 8034af4:	200018f9 	.word	0x200018f9
 8034af8:	e000ed04 	.word	0xe000ed04

08034afc <gos_kernelDelayMs>:
{
 8034afc:	b480      	push	{r7}
 8034afe:	b085      	sub	sp, #20
 8034b00:	af00      	add	r7, sp, #0
 8034b02:	4603      	mov	r3, r0
 8034b04:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 8034b06:	4b0a      	ldr	r3, [pc, #40]	@ (8034b30 <gos_kernelDelayMs+0x34>)
 8034b08:	681b      	ldr	r3, [r3, #0]
 8034b0a:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 8034b0c:	bf00      	nop
 8034b0e:	4b08      	ldr	r3, [pc, #32]	@ (8034b30 <gos_kernelDelayMs+0x34>)
 8034b10:	681b      	ldr	r3, [r3, #0]
 8034b12:	b29a      	uxth	r2, r3
 8034b14:	68fb      	ldr	r3, [r7, #12]
 8034b16:	b29b      	uxth	r3, r3
 8034b18:	1ad3      	subs	r3, r2, r3
 8034b1a:	b29b      	uxth	r3, r3
 8034b1c:	88fa      	ldrh	r2, [r7, #6]
 8034b1e:	429a      	cmp	r2, r3
 8034b20:	d8f5      	bhi.n	8034b0e <gos_kernelDelayMs+0x12>
}
 8034b22:	bf00      	nop
 8034b24:	bf00      	nop
 8034b26:	3714      	adds	r7, #20
 8034b28:	46bd      	mov	sp, r7
 8034b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b2e:	4770      	bx	lr
 8034b30:	2000b31c 	.word	0x2000b31c

08034b34 <gos_kernelCalculateTaskCpuUsages>:
{
 8034b34:	b590      	push	{r4, r7, lr}
 8034b36:	b087      	sub	sp, #28
 8034b38:	af00      	add	r7, sp, #0
 8034b3a:	4603      	mov	r3, r0
 8034b3c:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 8034b3e:	2300      	movs	r3, #0
 8034b40:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8034b42:	2300      	movs	r3, #0
 8034b44:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 8034b46:	2300      	movs	r3, #0
 8034b48:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8034b4a:	4ba8      	ldr	r3, [pc, #672]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034b4c:	795b      	ldrb	r3, [r3, #5]
 8034b4e:	461a      	mov	r2, r3
 8034b50:	4ba7      	ldr	r3, [pc, #668]	@ (8034df0 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8034b52:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 8034b56:	4ba5      	ldr	r3, [pc, #660]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034b58:	791b      	ldrb	r3, [r3, #4]
 8034b5a:	4619      	mov	r1, r3
 8034b5c:	4ba5      	ldr	r3, [pc, #660]	@ (8034df4 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 8034b5e:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8034b62:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8034b64:	4ba1      	ldr	r3, [pc, #644]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034b66:	885b      	ldrh	r3, [r3, #2]
 8034b68:	4619      	mov	r1, r3
 8034b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8034b6e:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 8034b72:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8034b74:	4a9d      	ldr	r2, [pc, #628]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034b76:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 8034b78:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8034b7a:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8034b7c:	2300      	movs	r3, #0
 8034b7e:	82fb      	strh	r3, [r7, #22]
 8034b80:	e10f      	b.n	8034da2 <gos_kernelCalculateTaskCpuUsages+0x26e>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8034b82:	8afb      	ldrh	r3, [r7, #22]
 8034b84:	4a9c      	ldr	r2, [pc, #624]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034b86:	216a      	movs	r1, #106	@ 0x6a
 8034b88:	fb01 f303 	mul.w	r3, r1, r3
 8034b8c:	4413      	add	r3, r2
 8034b8e:	681b      	ldr	r3, [r3, #0]
 8034b90:	2b00      	cmp	r3, #0
 8034b92:	f000 810b 	beq.w	8034dac <gos_kernelCalculateTaskCpuUsages+0x278>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8034b96:	8afb      	ldrh	r3, [r7, #22]
 8034b98:	4a97      	ldr	r2, [pc, #604]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034b9a:	216a      	movs	r1, #106	@ 0x6a
 8034b9c:	fb01 f303 	mul.w	r3, r1, r3
 8034ba0:	4413      	add	r3, r2
 8034ba2:	335a      	adds	r3, #90	@ 0x5a
 8034ba4:	781b      	ldrb	r3, [r3, #0]
 8034ba6:	461a      	mov	r2, r3
 8034ba8:	4b91      	ldr	r3, [pc, #580]	@ (8034df0 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8034baa:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8034bae:	8afb      	ldrh	r3, [r7, #22]
 8034bb0:	4991      	ldr	r1, [pc, #580]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034bb2:	206a      	movs	r0, #106	@ 0x6a
 8034bb4:	fb00 f303 	mul.w	r3, r0, r3
 8034bb8:	440b      	add	r3, r1
 8034bba:	3359      	adds	r3, #89	@ 0x59
 8034bbc:	781b      	ldrb	r3, [r3, #0]
 8034bbe:	4619      	mov	r1, r3
 8034bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8034df4 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 8034bc2:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8034bc6:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8034bc8:	8afb      	ldrh	r3, [r7, #22]
 8034bca:	498b      	ldr	r1, [pc, #556]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034bcc:	206a      	movs	r0, #106	@ 0x6a
 8034bce:	fb00 f303 	mul.w	r3, r0, r3
 8034bd2:	440b      	add	r3, r1
 8034bd4:	3350      	adds	r3, #80	@ 0x50
 8034bd6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8034bda:	b29b      	uxth	r3, r3
 8034bdc:	4619      	mov	r1, r3
 8034bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8034be2:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8034be6:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 8034be8:	8afa      	ldrh	r2, [r7, #22]
 8034bea:	4983      	ldr	r1, [pc, #524]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034bec:	206a      	movs	r0, #106	@ 0x6a
 8034bee:	fb00 f202 	mul.w	r2, r0, r2
 8034bf2:	440a      	add	r2, r1
 8034bf4:	3250      	adds	r2, #80	@ 0x50
 8034bf6:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8034bfa:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8034bfc:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8034bfe:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 8034c00:	693b      	ldr	r3, [r7, #16]
 8034c02:	2b00      	cmp	r3, #0
 8034c04:	f000 80ca 	beq.w	8034d9c <gos_kernelCalculateTaskCpuUsages+0x268>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8034c08:	68fb      	ldr	r3, [r7, #12]
 8034c0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8034c0e:	fb03 f202 	mul.w	r2, r3, r2
 8034c12:	693b      	ldr	r3, [r7, #16]
 8034c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8034c18:	8afb      	ldrh	r3, [r7, #22]
 8034c1a:	b290      	uxth	r0, r2
 8034c1c:	4a76      	ldr	r2, [pc, #472]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034c1e:	216a      	movs	r1, #106	@ 0x6a
 8034c20:	fb01 f303 	mul.w	r3, r1, r3
 8034c24:	4413      	add	r3, r2
 8034c26:	3360      	adds	r3, #96	@ 0x60
 8034c28:	4602      	mov	r2, r0
 8034c2a:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8034c2c:	79fb      	ldrb	r3, [r7, #7]
 8034c2e:	2b36      	cmp	r3, #54	@ 0x36
 8034c30:	d004      	beq.n	8034c3c <gos_kernelCalculateTaskCpuUsages+0x108>
 8034c32:	4b6e      	ldr	r3, [pc, #440]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034c34:	791b      	ldrb	r3, [r3, #4]
 8034c36:	2b00      	cmp	r3, #0
 8034c38:	f000 80b0 	beq.w	8034d9c <gos_kernelCalculateTaskCpuUsages+0x268>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8034c3c:	68fb      	ldr	r3, [r7, #12]
 8034c3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8034c42:	fb03 f202 	mul.w	r2, r3, r2
 8034c46:	693b      	ldr	r3, [r7, #16]
 8034c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8034c4c:	8afb      	ldrh	r3, [r7, #22]
 8034c4e:	b290      	uxth	r0, r2
 8034c50:	4a69      	ldr	r2, [pc, #420]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034c52:	216a      	movs	r1, #106	@ 0x6a
 8034c54:	fb01 f303 	mul.w	r3, r1, r3
 8034c58:	4413      	add	r3, r2
 8034c5a:	3360      	adds	r3, #96	@ 0x60
 8034c5c:	4602      	mov	r2, r0
 8034c5e:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 8034c60:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 8034c62:	226a      	movs	r2, #106	@ 0x6a
 8034c64:	fb02 f303 	mul.w	r3, r2, r3
 8034c68:	3348      	adds	r3, #72	@ 0x48
 8034c6a:	4a63      	ldr	r2, [pc, #396]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034c6c:	4413      	add	r3, r2
 8034c6e:	1d18      	adds	r0, r3, #4
 8034c70:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 8034c72:	4a61      	ldr	r2, [pc, #388]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034c74:	216a      	movs	r1, #106	@ 0x6a
 8034c76:	fb01 f303 	mul.w	r3, r1, r3
 8034c7a:	4413      	add	r3, r2
 8034c7c:	3350      	adds	r3, #80	@ 0x50
 8034c7e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8034c82:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 8034c84:	461a      	mov	r2, r3
 8034c86:	2100      	movs	r1, #0
 8034c88:	f005 fca0 	bl	803a5cc <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8034c8c:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 8034c8e:	226a      	movs	r2, #106	@ 0x6a
 8034c90:	fb02 f303 	mul.w	r3, r2, r3
 8034c94:	3348      	adds	r3, #72	@ 0x48
 8034c96:	4a58      	ldr	r2, [pc, #352]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034c98:	4413      	add	r3, r2
 8034c9a:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 8034c9c:	8afb      	ldrh	r3, [r7, #22]
 8034c9e:	4a56      	ldr	r2, [pc, #344]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034ca0:	216a      	movs	r1, #106	@ 0x6a
 8034ca2:	fb01 f303 	mul.w	r3, r1, r3
 8034ca6:	4413      	add	r3, r2
 8034ca8:	3350      	adds	r3, #80	@ 0x50
 8034caa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8034cae:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8034cb0:	8afb      	ldrh	r3, [r7, #22]
 8034cb2:	4951      	ldr	r1, [pc, #324]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034cb4:	246a      	movs	r4, #106	@ 0x6a
 8034cb6:	fb04 f303 	mul.w	r3, r4, r3
 8034cba:	440b      	add	r3, r1
 8034cbc:	3359      	adds	r3, #89	@ 0x59
 8034cbe:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 8034cc0:	4619      	mov	r1, r3
 8034cc2:	0149      	lsls	r1, r1, #5
 8034cc4:	1ac9      	subs	r1, r1, r3
 8034cc6:	0089      	lsls	r1, r1, #2
 8034cc8:	440b      	add	r3, r1
 8034cca:	00db      	lsls	r3, r3, #3
 8034ccc:	b29b      	uxth	r3, r3
 8034cce:	4413      	add	r3, r2
 8034cd0:	b29b      	uxth	r3, r3
 8034cd2:	4619      	mov	r1, r3
 8034cd4:	f005 fd5a 	bl	803a78c <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 8034cd8:	8afb      	ldrh	r3, [r7, #22]
 8034cda:	4a47      	ldr	r2, [pc, #284]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034cdc:	216a      	movs	r1, #106	@ 0x6a
 8034cde:	fb01 f303 	mul.w	r3, r1, r3
 8034ce2:	4413      	add	r3, r2
 8034ce4:	3350      	adds	r3, #80	@ 0x50
 8034ce6:	2200      	movs	r2, #0
 8034ce8:	731a      	strb	r2, [r3, #12]
 8034cea:	2200      	movs	r2, #0
 8034cec:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8034cee:	8afb      	ldrh	r3, [r7, #22]
 8034cf0:	4a41      	ldr	r2, [pc, #260]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034cf2:	216a      	movs	r1, #106	@ 0x6a
 8034cf4:	fb01 f303 	mul.w	r3, r1, r3
 8034cf8:	4413      	add	r3, r2
 8034cfa:	335b      	adds	r3, #91	@ 0x5b
 8034cfc:	2200      	movs	r2, #0
 8034cfe:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8034d00:	8afb      	ldrh	r3, [r7, #22]
 8034d02:	4a3d      	ldr	r2, [pc, #244]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d04:	216a      	movs	r1, #106	@ 0x6a
 8034d06:	fb01 f303 	mul.w	r3, r1, r3
 8034d0a:	4413      	add	r3, r2
 8034d0c:	335a      	adds	r3, #90	@ 0x5a
 8034d0e:	2200      	movs	r2, #0
 8034d10:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8034d12:	8afb      	ldrh	r3, [r7, #22]
 8034d14:	4a38      	ldr	r2, [pc, #224]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d16:	216a      	movs	r1, #106	@ 0x6a
 8034d18:	fb01 f303 	mul.w	r3, r1, r3
 8034d1c:	4413      	add	r3, r2
 8034d1e:	3359      	adds	r3, #89	@ 0x59
 8034d20:	2200      	movs	r2, #0
 8034d22:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8034d24:	8afb      	ldrh	r3, [r7, #22]
 8034d26:	4a34      	ldr	r2, [pc, #208]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d28:	216a      	movs	r1, #106	@ 0x6a
 8034d2a:	fb01 f303 	mul.w	r3, r1, r3
 8034d2e:	4413      	add	r3, r2
 8034d30:	3350      	adds	r3, #80	@ 0x50
 8034d32:	2200      	movs	r2, #0
 8034d34:	71da      	strb	r2, [r3, #7]
 8034d36:	2200      	movs	r2, #0
 8034d38:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8034d3a:	8afb      	ldrh	r3, [r7, #22]
 8034d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d3e:	216a      	movs	r1, #106	@ 0x6a
 8034d40:	fb01 f303 	mul.w	r3, r1, r3
 8034d44:	4413      	add	r3, r2
 8034d46:	3350      	adds	r3, #80	@ 0x50
 8034d48:	2200      	movs	r2, #0
 8034d4a:	715a      	strb	r2, [r3, #5]
 8034d4c:	2200      	movs	r2, #0
 8034d4e:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 8034d50:	8afb      	ldrh	r3, [r7, #22]
 8034d52:	4a29      	ldr	r2, [pc, #164]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d54:	216a      	movs	r1, #106	@ 0x6a
 8034d56:	fb01 f303 	mul.w	r3, r1, r3
 8034d5a:	4413      	add	r3, r2
 8034d5c:	3360      	adds	r3, #96	@ 0x60
 8034d5e:	885b      	ldrh	r3, [r3, #2]
 8034d60:	b29a      	uxth	r2, r3
 8034d62:	8afb      	ldrh	r3, [r7, #22]
 8034d64:	4924      	ldr	r1, [pc, #144]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d66:	206a      	movs	r0, #106	@ 0x6a
 8034d68:	fb00 f303 	mul.w	r3, r0, r3
 8034d6c:	440b      	add	r3, r1
 8034d6e:	3360      	adds	r3, #96	@ 0x60
 8034d70:	881b      	ldrh	r3, [r3, #0]
 8034d72:	b29b      	uxth	r3, r3
 8034d74:	429a      	cmp	r2, r3
 8034d76:	d911      	bls.n	8034d9c <gos_kernelCalculateTaskCpuUsages+0x268>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8034d78:	8afa      	ldrh	r2, [r7, #22]
 8034d7a:	8afb      	ldrh	r3, [r7, #22]
 8034d7c:	491e      	ldr	r1, [pc, #120]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d7e:	206a      	movs	r0, #106	@ 0x6a
 8034d80:	fb00 f202 	mul.w	r2, r0, r2
 8034d84:	440a      	add	r2, r1
 8034d86:	3260      	adds	r2, #96	@ 0x60
 8034d88:	8852      	ldrh	r2, [r2, #2]
 8034d8a:	b290      	uxth	r0, r2
 8034d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8034df8 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8034d8e:	216a      	movs	r1, #106	@ 0x6a
 8034d90:	fb01 f303 	mul.w	r3, r1, r3
 8034d94:	4413      	add	r3, r2
 8034d96:	3360      	adds	r3, #96	@ 0x60
 8034d98:	4602      	mov	r2, r0
 8034d9a:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8034d9c:	8afb      	ldrh	r3, [r7, #22]
 8034d9e:	3301      	adds	r3, #1
 8034da0:	82fb      	strh	r3, [r7, #22]
 8034da2:	8afb      	ldrh	r3, [r7, #22]
 8034da4:	2b2f      	cmp	r3, #47	@ 0x2f
 8034da6:	f67f aeec 	bls.w	8034b82 <gos_kernelCalculateTaskCpuUsages+0x4e>
 8034daa:	e000      	b.n	8034dae <gos_kernelCalculateTaskCpuUsages+0x27a>
            break;
 8034dac:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8034dae:	79fb      	ldrb	r3, [r7, #7]
 8034db0:	2b36      	cmp	r3, #54	@ 0x36
 8034db2:	d003      	beq.n	8034dbc <gos_kernelCalculateTaskCpuUsages+0x288>
 8034db4:	4b0d      	ldr	r3, [pc, #52]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034db6:	791b      	ldrb	r3, [r3, #4]
 8034db8:	2b00      	cmp	r3, #0
 8034dba:	d013      	beq.n	8034de4 <gos_kernelCalculateTaskCpuUsages+0x2b0>
        monitoringTime.days         = 0u;
 8034dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034dbe:	2200      	movs	r2, #0
 8034dc0:	71da      	strb	r2, [r3, #7]
 8034dc2:	2200      	movs	r2, #0
 8034dc4:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 8034dc6:	4b09      	ldr	r3, [pc, #36]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034dc8:	2200      	movs	r2, #0
 8034dca:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8034dcc:	4b07      	ldr	r3, [pc, #28]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034dce:	2200      	movs	r2, #0
 8034dd0:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 8034dd2:	4b06      	ldr	r3, [pc, #24]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034dd4:	2200      	movs	r2, #0
 8034dd6:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8034dd8:	4b04      	ldr	r3, [pc, #16]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034dda:	2200      	movs	r2, #0
 8034ddc:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 8034dde:	4b03      	ldr	r3, [pc, #12]	@ (8034dec <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8034de0:	2200      	movs	r2, #0
 8034de2:	801a      	strh	r2, [r3, #0]
}
 8034de4:	bf00      	nop
 8034de6:	371c      	adds	r7, #28
 8034de8:	46bd      	mov	sp, r7
 8034dea:	bd90      	pop	{r4, r7, pc}
 8034dec:	2000b324 	.word	0x2000b324
 8034df0:	03938700 	.word	0x03938700
 8034df4:	000f4240 	.word	0x000f4240
 8034df8:	200018fc 	.word	0x200018fc

08034dfc <gos_kernelDump>:
{
 8034dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034e00:	b0a6      	sub	sp, #152	@ 0x98
 8034e02:	af14      	add	r7, sp, #80	@ 0x50
    u16_t taskIndex = 0u;
 8034e04:	2300      	movs	r3, #0
 8034e06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 8034e0a:	48ae      	ldr	r0, [pc, #696]	@ (80350c4 <gos_kernelDump+0x2c8>)
 8034e0c:	f006 fac0 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8034e10:	48ad      	ldr	r0, [pc, #692]	@ (80350c8 <gos_kernelDump+0x2cc>)
 8034e12:	f006 fabd 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8034e16:	4bad      	ldr	r3, [pc, #692]	@ (80350cc <gos_kernelDump+0x2d0>)
 8034e18:	9302      	str	r3, [sp, #8]
 8034e1a:	4bad      	ldr	r3, [pc, #692]	@ (80350d0 <gos_kernelDump+0x2d4>)
 8034e1c:	9301      	str	r3, [sp, #4]
 8034e1e:	4bad      	ldr	r3, [pc, #692]	@ (80350d4 <gos_kernelDump+0x2d8>)
 8034e20:	9300      	str	r3, [sp, #0]
 8034e22:	4bad      	ldr	r3, [pc, #692]	@ (80350d8 <gos_kernelDump+0x2dc>)
 8034e24:	4aad      	ldr	r2, [pc, #692]	@ (80350dc <gos_kernelDump+0x2e0>)
 8034e26:	49ae      	ldr	r1, [pc, #696]	@ (80350e0 <gos_kernelDump+0x2e4>)
 8034e28:	48ae      	ldr	r0, [pc, #696]	@ (80350e4 <gos_kernelDump+0x2e8>)
 8034e2a:	f006 fab1 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8034e2e:	48a6      	ldr	r0, [pc, #664]	@ (80350c8 <gos_kernelDump+0x2cc>)
 8034e30:	f006 faae 	bl	803b390 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8034e34:	2300      	movs	r3, #0
 8034e36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8034e3a:	e1cc      	b.n	80351d6 <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8034e3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034e40:	4aa9      	ldr	r2, [pc, #676]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034e42:	216a      	movs	r1, #106	@ 0x6a
 8034e44:	fb01 f303 	mul.w	r3, r1, r3
 8034e48:	4413      	add	r3, r2
 8034e4a:	681b      	ldr	r3, [r3, #0]
 8034e4c:	2b00      	cmp	r3, #0
 8034e4e:	f000 81c8 	beq.w	80351e2 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 8034e52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034e56:	4aa4      	ldr	r2, [pc, #656]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034e58:	216a      	movs	r1, #106	@ 0x6a
 8034e5a:	fb01 f303 	mul.w	r3, r1, r3
 8034e5e:	4413      	add	r3, r2
 8034e60:	3328      	adds	r3, #40	@ 0x28
 8034e62:	885b      	ldrh	r3, [r3, #2]
 8034e64:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8034e66:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 8034e68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034e6c:	226a      	movs	r2, #106	@ 0x6a
 8034e6e:	fb02 f303 	mul.w	r3, r2, r3
 8034e72:	3308      	adds	r3, #8
 8034e74:	4a9c      	ldr	r2, [pc, #624]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034e76:	4413      	add	r3, r2
 8034e78:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8034e7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034e80:	4a99      	ldr	r2, [pc, #612]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034e82:	216a      	movs	r1, #106	@ 0x6a
 8034e84:	fb01 f303 	mul.w	r3, r1, r3
 8034e88:	4413      	add	r3, r2
 8034e8a:	3306      	adds	r3, #6
 8034e8c:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8034e8e:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034e90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034e94:	4a94      	ldr	r2, [pc, #592]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034e96:	216a      	movs	r1, #106	@ 0x6a
 8034e98:	fb01 f303 	mul.w	r3, r1, r3
 8034e9c:	4413      	add	r3, r2
 8034e9e:	3308      	adds	r3, #8
 8034ea0:	881b      	ldrh	r3, [r3, #0]
 8034ea2:	b29b      	uxth	r3, r3
 8034ea4:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8034ea6:	2b00      	cmp	r3, #0
 8034ea8:	da02      	bge.n	8034eb0 <gos_kernelDump+0xb4>
 8034eaa:	4b90      	ldr	r3, [pc, #576]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8034eae:	e001      	b.n	8034eb4 <gos_kernelDump+0xb8>
 8034eb0:	4b8f      	ldr	r3, [pc, #572]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034eb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034eb8:	4a8b      	ldr	r2, [pc, #556]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034eba:	216a      	movs	r1, #106	@ 0x6a
 8034ebc:	fb01 f303 	mul.w	r3, r1, r3
 8034ec0:	4413      	add	r3, r2
 8034ec2:	3308      	adds	r3, #8
 8034ec4:	881b      	ldrh	r3, [r3, #0]
 8034ec6:	b29b      	uxth	r3, r3
 8034ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            (void_t) gos_shellDriverTransmitString(
 8034ecc:	2b00      	cmp	r3, #0
 8034ece:	d002      	beq.n	8034ed6 <gos_kernelDump+0xda>
 8034ed0:	4b86      	ldr	r3, [pc, #536]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8034ed4:	e001      	b.n	8034eda <gos_kernelDump+0xde>
 8034ed6:	4b86      	ldr	r3, [pc, #536]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034eda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034ede:	4a82      	ldr	r2, [pc, #520]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034ee0:	216a      	movs	r1, #106	@ 0x6a
 8034ee2:	fb01 f303 	mul.w	r3, r1, r3
 8034ee6:	4413      	add	r3, r2
 8034ee8:	3308      	adds	r3, #8
 8034eea:	881b      	ldrh	r3, [r3, #0]
 8034eec:	b29b      	uxth	r3, r3
 8034eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            (void_t) gos_shellDriverTransmitString(
 8034ef2:	2b00      	cmp	r3, #0
 8034ef4:	d002      	beq.n	8034efc <gos_kernelDump+0x100>
 8034ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8034efa:	e001      	b.n	8034f00 <gos_kernelDump+0x104>
 8034efc:	4b7c      	ldr	r3, [pc, #496]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034efe:	637b      	str	r3, [r7, #52]	@ 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034f00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034f04:	4a78      	ldr	r2, [pc, #480]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034f06:	216a      	movs	r1, #106	@ 0x6a
 8034f08:	fb01 f303 	mul.w	r3, r1, r3
 8034f0c:	4413      	add	r3, r2
 8034f0e:	3308      	adds	r3, #8
 8034f10:	881b      	ldrh	r3, [r3, #0]
 8034f12:	b29b      	uxth	r3, r3
 8034f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
            (void_t) gos_shellDriverTransmitString(
 8034f18:	2b00      	cmp	r3, #0
 8034f1a:	d002      	beq.n	8034f22 <gos_kernelDump+0x126>
 8034f1c:	4b73      	ldr	r3, [pc, #460]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8034f20:	e001      	b.n	8034f26 <gos_kernelDump+0x12a>
 8034f22:	4b73      	ldr	r3, [pc, #460]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034f24:	633b      	str	r3, [r7, #48]	@ 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034f26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034f2c:	216a      	movs	r1, #106	@ 0x6a
 8034f2e:	fb01 f303 	mul.w	r3, r1, r3
 8034f32:	4413      	add	r3, r2
 8034f34:	3308      	adds	r3, #8
 8034f36:	881b      	ldrh	r3, [r3, #0]
 8034f38:	b29b      	uxth	r3, r3
 8034f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            (void_t) gos_shellDriverTransmitString(
 8034f3e:	2b00      	cmp	r3, #0
 8034f40:	d002      	beq.n	8034f48 <gos_kernelDump+0x14c>
 8034f42:	4b6a      	ldr	r3, [pc, #424]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8034f46:	e001      	b.n	8034f4c <gos_kernelDump+0x150>
 8034f48:	4b69      	ldr	r3, [pc, #420]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034f4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034f50:	4a65      	ldr	r2, [pc, #404]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034f52:	216a      	movs	r1, #106	@ 0x6a
 8034f54:	fb01 f303 	mul.w	r3, r1, r3
 8034f58:	4413      	add	r3, r2
 8034f5a:	3308      	adds	r3, #8
 8034f5c:	881b      	ldrh	r3, [r3, #0]
 8034f5e:	b29b      	uxth	r3, r3
 8034f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
            (void_t) gos_shellDriverTransmitString(
 8034f64:	2b00      	cmp	r3, #0
 8034f66:	d002      	beq.n	8034f6e <gos_kernelDump+0x172>
 8034f68:	4b60      	ldr	r3, [pc, #384]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8034f6c:	e001      	b.n	8034f72 <gos_kernelDump+0x176>
 8034f6e:	4b60      	ldr	r3, [pc, #384]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034f70:	62bb      	str	r3, [r7, #40]	@ 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034f72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034f76:	4a5c      	ldr	r2, [pc, #368]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034f78:	216a      	movs	r1, #106	@ 0x6a
 8034f7a:	fb01 f303 	mul.w	r3, r1, r3
 8034f7e:	4413      	add	r3, r2
 8034f80:	3308      	adds	r3, #8
 8034f82:	881b      	ldrh	r3, [r3, #0]
 8034f84:	b29b      	uxth	r3, r3
 8034f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
            (void_t) gos_shellDriverTransmitString(
 8034f8a:	2b00      	cmp	r3, #0
 8034f8c:	d002      	beq.n	8034f94 <gos_kernelDump+0x198>
 8034f8e:	4b57      	ldr	r3, [pc, #348]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8034f92:	e001      	b.n	8034f98 <gos_kernelDump+0x19c>
 8034f94:	4b56      	ldr	r3, [pc, #344]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034f96:	627b      	str	r3, [r7, #36]	@ 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034f98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034f9c:	4a52      	ldr	r2, [pc, #328]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034f9e:	216a      	movs	r1, #106	@ 0x6a
 8034fa0:	fb01 f303 	mul.w	r3, r1, r3
 8034fa4:	4413      	add	r3, r2
 8034fa6:	3308      	adds	r3, #8
 8034fa8:	881b      	ldrh	r3, [r3, #0]
 8034faa:	b29b      	uxth	r3, r3
 8034fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
            (void_t) gos_shellDriverTransmitString(
 8034fb0:	2b00      	cmp	r3, #0
 8034fb2:	d002      	beq.n	8034fba <gos_kernelDump+0x1be>
 8034fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034fb6:	623b      	str	r3, [r7, #32]
 8034fb8:	e001      	b.n	8034fbe <gos_kernelDump+0x1c2>
 8034fba:	4b4d      	ldr	r3, [pc, #308]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034fbc:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034fbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8034fc2:	4a49      	ldr	r2, [pc, #292]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034fc4:	216a      	movs	r1, #106	@ 0x6a
 8034fc6:	fb01 f303 	mul.w	r3, r1, r3
 8034fca:	4413      	add	r3, r2
 8034fcc:	3308      	adds	r3, #8
 8034fce:	881b      	ldrh	r3, [r3, #0]
 8034fd0:	b29b      	uxth	r3, r3
 8034fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
            (void_t) gos_shellDriverTransmitString(
 8034fd6:	2b00      	cmp	r3, #0
 8034fd8:	d002      	beq.n	8034fe0 <gos_kernelDump+0x1e4>
 8034fda:	4b44      	ldr	r3, [pc, #272]	@ (80350ec <gos_kernelDump+0x2f0>)
 8034fdc:	61fb      	str	r3, [r7, #28]
 8034fde:	e001      	b.n	8034fe4 <gos_kernelDump+0x1e8>
 8034fe0:	4b43      	ldr	r3, [pc, #268]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8034fe2:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8034fe4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8034fe8:	493f      	ldr	r1, [pc, #252]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8034fea:	236a      	movs	r3, #106	@ 0x6a
 8034fec:	fb02 f303 	mul.w	r3, r2, r3
 8034ff0:	440b      	add	r3, r1
 8034ff2:	3308      	adds	r3, #8
 8034ff4:	881b      	ldrh	r3, [r3, #0]
 8034ff6:	b29b      	uxth	r3, r3
 8034ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
            (void_t) gos_shellDriverTransmitString(
 8034ffc:	2b00      	cmp	r3, #0
 8034ffe:	d002      	beq.n	8035006 <gos_kernelDump+0x20a>
 8035000:	4b3a      	ldr	r3, [pc, #232]	@ (80350ec <gos_kernelDump+0x2f0>)
 8035002:	61bb      	str	r3, [r7, #24]
 8035004:	e001      	b.n	803500a <gos_kernelDump+0x20e>
 8035006:	4b3a      	ldr	r3, [pc, #232]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8035008:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803500a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 803500e:	4936      	ldr	r1, [pc, #216]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8035010:	236a      	movs	r3, #106	@ 0x6a
 8035012:	fb02 f303 	mul.w	r3, r2, r3
 8035016:	440b      	add	r3, r1
 8035018:	3308      	adds	r3, #8
 803501a:	881b      	ldrh	r3, [r3, #0]
 803501c:	b29b      	uxth	r3, r3
 803501e:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8035022:	2b00      	cmp	r3, #0
 8035024:	d002      	beq.n	803502c <gos_kernelDump+0x230>
 8035026:	4b31      	ldr	r3, [pc, #196]	@ (80350ec <gos_kernelDump+0x2f0>)
 8035028:	617b      	str	r3, [r7, #20]
 803502a:	e001      	b.n	8035030 <gos_kernelDump+0x234>
 803502c:	4b30      	ldr	r3, [pc, #192]	@ (80350f0 <gos_kernelDump+0x2f4>)
 803502e:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8035030:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8035034:	492c      	ldr	r1, [pc, #176]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8035036:	236a      	movs	r3, #106	@ 0x6a
 8035038:	fb02 f303 	mul.w	r3, r2, r3
 803503c:	440b      	add	r3, r1
 803503e:	3308      	adds	r3, #8
 8035040:	881b      	ldrh	r3, [r3, #0]
 8035042:	b29b      	uxth	r3, r3
 8035044:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8035048:	2b00      	cmp	r3, #0
 803504a:	d002      	beq.n	8035052 <gos_kernelDump+0x256>
 803504c:	4b27      	ldr	r3, [pc, #156]	@ (80350ec <gos_kernelDump+0x2f0>)
 803504e:	613b      	str	r3, [r7, #16]
 8035050:	e001      	b.n	8035056 <gos_kernelDump+0x25a>
 8035052:	4b27      	ldr	r3, [pc, #156]	@ (80350f0 <gos_kernelDump+0x2f4>)
 8035054:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8035056:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 803505a:	4923      	ldr	r1, [pc, #140]	@ (80350e8 <gos_kernelDump+0x2ec>)
 803505c:	236a      	movs	r3, #106	@ 0x6a
 803505e:	fb02 f303 	mul.w	r3, r2, r3
 8035062:	440b      	add	r3, r1
 8035064:	3308      	adds	r3, #8
 8035066:	881b      	ldrh	r3, [r3, #0]
 8035068:	b29b      	uxth	r3, r3
 803506a:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 803506e:	2b00      	cmp	r3, #0
 8035070:	d002      	beq.n	8035078 <gos_kernelDump+0x27c>
 8035072:	4b1e      	ldr	r3, [pc, #120]	@ (80350ec <gos_kernelDump+0x2f0>)
 8035074:	60fb      	str	r3, [r7, #12]
 8035076:	e001      	b.n	803507c <gos_kernelDump+0x280>
 8035078:	4b1d      	ldr	r3, [pc, #116]	@ (80350f0 <gos_kernelDump+0x2f4>)
 803507a:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803507c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8035080:	4919      	ldr	r1, [pc, #100]	@ (80350e8 <gos_kernelDump+0x2ec>)
 8035082:	236a      	movs	r3, #106	@ 0x6a
 8035084:	fb02 f303 	mul.w	r3, r2, r3
 8035088:	440b      	add	r3, r1
 803508a:	3308      	adds	r3, #8
 803508c:	881b      	ldrh	r3, [r3, #0]
 803508e:	b29b      	uxth	r3, r3
 8035090:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 8035094:	2b00      	cmp	r3, #0
 8035096:	d002      	beq.n	803509e <gos_kernelDump+0x2a2>
 8035098:	4b14      	ldr	r3, [pc, #80]	@ (80350ec <gos_kernelDump+0x2f0>)
 803509a:	60bb      	str	r3, [r7, #8]
 803509c:	e001      	b.n	80350a2 <gos_kernelDump+0x2a6>
 803509e:	4b14      	ldr	r3, [pc, #80]	@ (80350f0 <gos_kernelDump+0x2f4>)
 80350a0:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80350a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80350a6:	4910      	ldr	r1, [pc, #64]	@ (80350e8 <gos_kernelDump+0x2ec>)
 80350a8:	236a      	movs	r3, #106	@ 0x6a
 80350aa:	fb02 f303 	mul.w	r3, r2, r3
 80350ae:	440b      	add	r3, r1
 80350b0:	3308      	adds	r3, #8
 80350b2:	881b      	ldrh	r3, [r3, #0]
 80350b4:	b29b      	uxth	r3, r3
 80350b6:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 80350ba:	2b00      	cmp	r3, #0
 80350bc:	d01a      	beq.n	80350f4 <gos_kernelDump+0x2f8>
 80350be:	4b0b      	ldr	r3, [pc, #44]	@ (80350ec <gos_kernelDump+0x2f0>)
 80350c0:	607b      	str	r3, [r7, #4]
 80350c2:	e019      	b.n	80350f8 <gos_kernelDump+0x2fc>
 80350c4:	0803e9cc 	.word	0x0803e9cc
 80350c8:	0803e9dc 	.word	0x0803e9dc
 80350cc:	0803ea78 	.word	0x0803ea78
 80350d0:	0803ea80 	.word	0x0803ea80
 80350d4:	0803ea88 	.word	0x0803ea88
 80350d8:	0803ea38 	.word	0x0803ea38
 80350dc:	0803ea40 	.word	0x0803ea40
 80350e0:	0803ea48 	.word	0x0803ea48
 80350e4:	0803ea4c 	.word	0x0803ea4c
 80350e8:	200018fc 	.word	0x200018fc
 80350ec:	0803ea94 	.word	0x0803ea94
 80350f0:	0803ea9c 	.word	0x0803ea9c
 80350f4:	4b7d      	ldr	r3, [pc, #500]	@ (80352ec <gos_kernelDump+0x4f0>)
 80350f6:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80350f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80350fc:	497c      	ldr	r1, [pc, #496]	@ (80352f0 <gos_kernelDump+0x4f4>)
 80350fe:	236a      	movs	r3, #106	@ 0x6a
 8035100:	fb02 f303 	mul.w	r3, r2, r3
 8035104:	440b      	add	r3, r1
 8035106:	3308      	adds	r3, #8
 8035108:	881b      	ldrh	r3, [r3, #0]
 803510a:	b29b      	uxth	r3, r3
 803510c:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8035110:	2b00      	cmp	r3, #0
 8035112:	d001      	beq.n	8035118 <gos_kernelDump+0x31c>
 8035114:	4d77      	ldr	r5, [pc, #476]	@ (80352f4 <gos_kernelDump+0x4f8>)
 8035116:	e000      	b.n	803511a <gos_kernelDump+0x31e>
 8035118:	4d74      	ldr	r5, [pc, #464]	@ (80352ec <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 803511a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 803511e:	4974      	ldr	r1, [pc, #464]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035120:	236a      	movs	r3, #106	@ 0x6a
 8035122:	fb02 f303 	mul.w	r3, r2, r3
 8035126:	440b      	add	r3, r1
 8035128:	3360      	adds	r3, #96	@ 0x60
 803512a:	885b      	ldrh	r3, [r3, #2]
 803512c:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 803512e:	4b72      	ldr	r3, [pc, #456]	@ (80352f8 <gos_kernelDump+0x4fc>)
 8035130:	fba3 2302 	umull	r2, r3, r3, r2
 8035134:	095b      	lsrs	r3, r3, #5
 8035136:	b29b      	uxth	r3, r3
 8035138:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 803513a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 803513e:	496c      	ldr	r1, [pc, #432]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035140:	236a      	movs	r3, #106	@ 0x6a
 8035142:	fb02 f303 	mul.w	r3, r2, r3
 8035146:	440b      	add	r3, r1
 8035148:	3360      	adds	r3, #96	@ 0x60
 803514a:	885b      	ldrh	r3, [r3, #2]
 803514c:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 803514e:	4b6a      	ldr	r3, [pc, #424]	@ (80352f8 <gos_kernelDump+0x4fc>)
 8035150:	fba3 2301 	umull	r2, r3, r3, r1
 8035154:	095a      	lsrs	r2, r3, #5
 8035156:	2364      	movs	r3, #100	@ 0x64
 8035158:	fb02 f303 	mul.w	r3, r2, r3
 803515c:	1acb      	subs	r3, r1, r3
 803515e:	b29b      	uxth	r3, r3
 8035160:	461c      	mov	r4, r3
 8035162:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8035166:	4962      	ldr	r1, [pc, #392]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035168:	236a      	movs	r3, #106	@ 0x6a
 803516a:	fb02 f303 	mul.w	r3, r2, r3
 803516e:	440b      	add	r3, r1
 8035170:	3304      	adds	r3, #4
 8035172:	781b      	ldrb	r3, [r3, #0]
 8035174:	4618      	mov	r0, r3
 8035176:	f000 fc25 	bl	80359c4 <gos_kernelGetTaskStateString>
 803517a:	4603      	mov	r3, r0
 803517c:	9312      	str	r3, [sp, #72]	@ 0x48
 803517e:	9411      	str	r4, [sp, #68]	@ 0x44
 8035180:	9610      	str	r6, [sp, #64]	@ 0x40
 8035182:	950f      	str	r5, [sp, #60]	@ 0x3c
 8035184:	687b      	ldr	r3, [r7, #4]
 8035186:	930e      	str	r3, [sp, #56]	@ 0x38
 8035188:	68bb      	ldr	r3, [r7, #8]
 803518a:	930d      	str	r3, [sp, #52]	@ 0x34
 803518c:	68fb      	ldr	r3, [r7, #12]
 803518e:	930c      	str	r3, [sp, #48]	@ 0x30
 8035190:	693b      	ldr	r3, [r7, #16]
 8035192:	930b      	str	r3, [sp, #44]	@ 0x2c
 8035194:	697b      	ldr	r3, [r7, #20]
 8035196:	930a      	str	r3, [sp, #40]	@ 0x28
 8035198:	69bb      	ldr	r3, [r7, #24]
 803519a:	9309      	str	r3, [sp, #36]	@ 0x24
 803519c:	69fb      	ldr	r3, [r7, #28]
 803519e:	9308      	str	r3, [sp, #32]
 80351a0:	6a3b      	ldr	r3, [r7, #32]
 80351a2:	9307      	str	r3, [sp, #28]
 80351a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80351a6:	9306      	str	r3, [sp, #24]
 80351a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80351aa:	9305      	str	r3, [sp, #20]
 80351ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80351ae:	9304      	str	r3, [sp, #16]
 80351b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80351b2:	9303      	str	r3, [sp, #12]
 80351b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80351b6:	9302      	str	r3, [sp, #8]
 80351b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80351ba:	9301      	str	r3, [sp, #4]
 80351bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80351be:	9300      	str	r3, [sp, #0]
 80351c0:	4653      	mov	r3, sl
 80351c2:	4642      	mov	r2, r8
 80351c4:	4649      	mov	r1, r9
 80351c6:	484d      	ldr	r0, [pc, #308]	@ (80352fc <gos_kernelDump+0x500>)
 80351c8:	f006 f8e2 	bl	803b390 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80351cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80351d0:	3301      	adds	r3, #1
 80351d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80351d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80351da:	2b2f      	cmp	r3, #47	@ 0x2f
 80351dc:	f67f ae2e 	bls.w	8034e3c <gos_kernelDump+0x40>
 80351e0:	e000      	b.n	80351e4 <gos_kernelDump+0x3e8>
            break;
 80351e2:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 80351e4:	4846      	ldr	r0, [pc, #280]	@ (8035300 <gos_kernelDump+0x504>)
 80351e6:	f006 f8d3 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 80351ea:	4846      	ldr	r0, [pc, #280]	@ (8035304 <gos_kernelDump+0x508>)
 80351ec:	f006 f8d0 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 80351f0:	4845      	ldr	r0, [pc, #276]	@ (8035308 <gos_kernelDump+0x50c>)
 80351f2:	f006 f8cd 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 80351f6:	4b45      	ldr	r3, [pc, #276]	@ (803530c <gos_kernelDump+0x510>)
 80351f8:	4a45      	ldr	r2, [pc, #276]	@ (8035310 <gos_kernelDump+0x514>)
 80351fa:	4946      	ldr	r1, [pc, #280]	@ (8035314 <gos_kernelDump+0x518>)
 80351fc:	4846      	ldr	r0, [pc, #280]	@ (8035318 <gos_kernelDump+0x51c>)
 80351fe:	f006 f8c7 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8035202:	4841      	ldr	r0, [pc, #260]	@ (8035308 <gos_kernelDump+0x50c>)
 8035204:	f006 f8c4 	bl	803b390 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8035208:	2300      	movs	r3, #0
 803520a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 803520e:	e04c      	b.n	80352aa <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8035210:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035214:	4a36      	ldr	r2, [pc, #216]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035216:	216a      	movs	r1, #106	@ 0x6a
 8035218:	fb01 f303 	mul.w	r3, r1, r3
 803521c:	4413      	add	r3, r2
 803521e:	681b      	ldr	r3, [r3, #0]
 8035220:	2b00      	cmp	r3, #0
 8035222:	d047      	beq.n	80352b4 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8035224:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035228:	4a31      	ldr	r2, [pc, #196]	@ (80352f0 <gos_kernelDump+0x4f4>)
 803522a:	216a      	movs	r1, #106	@ 0x6a
 803522c:	fb01 f303 	mul.w	r3, r1, r3
 8035230:	4413      	add	r3, r2
 8035232:	3328      	adds	r3, #40	@ 0x28
 8035234:	885b      	ldrh	r3, [r3, #2]
 8035236:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8035238:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 803523a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 803523e:	226a      	movs	r2, #106	@ 0x6a
 8035240:	fb02 f303 	mul.w	r3, r2, r3
 8035244:	3308      	adds	r3, #8
 8035246:	4a2a      	ldr	r2, [pc, #168]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035248:	4413      	add	r3, r2
 803524a:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 803524c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035250:	4a27      	ldr	r2, [pc, #156]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035252:	206a      	movs	r0, #106	@ 0x6a
 8035254:	fb00 f303 	mul.w	r3, r0, r3
 8035258:	4413      	add	r3, r2
 803525a:	3360      	adds	r3, #96	@ 0x60
 803525c:	881b      	ldrh	r3, [r3, #0]
 803525e:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8035260:	4a25      	ldr	r2, [pc, #148]	@ (80352f8 <gos_kernelDump+0x4fc>)
 8035262:	fba2 2303 	umull	r2, r3, r2, r3
 8035266:	095b      	lsrs	r3, r3, #5
 8035268:	b29b      	uxth	r3, r3
 803526a:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 803526c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035270:	4a1f      	ldr	r2, [pc, #124]	@ (80352f0 <gos_kernelDump+0x4f4>)
 8035272:	206a      	movs	r0, #106	@ 0x6a
 8035274:	fb00 f303 	mul.w	r3, r0, r3
 8035278:	4413      	add	r3, r2
 803527a:	3360      	adds	r3, #96	@ 0x60
 803527c:	881b      	ldrh	r3, [r3, #0]
 803527e:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8035280:	4a1d      	ldr	r2, [pc, #116]	@ (80352f8 <gos_kernelDump+0x4fc>)
 8035282:	fba2 0203 	umull	r0, r2, r2, r3
 8035286:	0952      	lsrs	r2, r2, #5
 8035288:	2064      	movs	r0, #100	@ 0x64
 803528a:	fb00 f202 	mul.w	r2, r0, r2
 803528e:	1a9b      	subs	r3, r3, r2
 8035290:	b29b      	uxth	r3, r3
 8035292:	9300      	str	r3, [sp, #0]
 8035294:	462b      	mov	r3, r5
 8035296:	460a      	mov	r2, r1
 8035298:	4621      	mov	r1, r4
 803529a:	4820      	ldr	r0, [pc, #128]	@ (803531c <gos_kernelDump+0x520>)
 803529c:	f006 f878 	bl	803b390 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80352a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80352a4:	3301      	adds	r3, #1
 80352a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80352aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80352ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80352b0:	d9ae      	bls.n	8035210 <gos_kernelDump+0x414>
 80352b2:	e000      	b.n	80352b6 <gos_kernelDump+0x4ba>
            break;
 80352b4:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 80352b6:	481a      	ldr	r0, [pc, #104]	@ (8035320 <gos_kernelDump+0x524>)
 80352b8:	f006 f86a 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 80352bc:	4819      	ldr	r0, [pc, #100]	@ (8035324 <gos_kernelDump+0x528>)
 80352be:	f006 f867 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 80352c2:	4819      	ldr	r0, [pc, #100]	@ (8035328 <gos_kernelDump+0x52c>)
 80352c4:	f006 f864 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 80352c8:	4b18      	ldr	r3, [pc, #96]	@ (803532c <gos_kernelDump+0x530>)
 80352ca:	9301      	str	r3, [sp, #4]
 80352cc:	4b18      	ldr	r3, [pc, #96]	@ (8035330 <gos_kernelDump+0x534>)
 80352ce:	9300      	str	r3, [sp, #0]
 80352d0:	4b18      	ldr	r3, [pc, #96]	@ (8035334 <gos_kernelDump+0x538>)
 80352d2:	4a0f      	ldr	r2, [pc, #60]	@ (8035310 <gos_kernelDump+0x514>)
 80352d4:	490f      	ldr	r1, [pc, #60]	@ (8035314 <gos_kernelDump+0x518>)
 80352d6:	4818      	ldr	r0, [pc, #96]	@ (8035338 <gos_kernelDump+0x53c>)
 80352d8:	f006 f85a 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 80352dc:	4812      	ldr	r0, [pc, #72]	@ (8035328 <gos_kernelDump+0x52c>)
 80352de:	f006 f857 	bl	803b390 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80352e2:	2300      	movs	r3, #0
 80352e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80352e8:	e0b1      	b.n	803544e <gos_kernelDump+0x652>
 80352ea:	bf00      	nop
 80352ec:	0803ea9c 	.word	0x0803ea9c
 80352f0:	200018fc 	.word	0x200018fc
 80352f4:	0803ea94 	.word	0x0803ea94
 80352f8:	51eb851f 	.word	0x51eb851f
 80352fc:	0803eaa4 	.word	0x0803eaa4
 8035300:	0803eaf8 	.word	0x0803eaf8
 8035304:	0803eb58 	.word	0x0803eb58
 8035308:	0803eb6c 	.word	0x0803eb6c
 803530c:	0803eba8 	.word	0x0803eba8
 8035310:	0803ea40 	.word	0x0803ea40
 8035314:	0803ea48 	.word	0x0803ea48
 8035318:	0803ebb4 	.word	0x0803ebb4
 803531c:	0803ebcc 	.word	0x0803ebcc
 8035320:	0803ebec 	.word	0x0803ebec
 8035324:	0803ec28 	.word	0x0803ec28
 8035328:	0803ec3c 	.word	0x0803ec3c
 803532c:	0803ecbc 	.word	0x0803ecbc
 8035330:	0803ecc8 	.word	0x0803ecc8
 8035334:	0803ec90 	.word	0x0803ec90
 8035338:	0803ec98 	.word	0x0803ec98
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 803533c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035340:	4a4a      	ldr	r2, [pc, #296]	@ (803546c <gos_kernelDump+0x670>)
 8035342:	216a      	movs	r1, #106	@ 0x6a
 8035344:	fb01 f303 	mul.w	r3, r1, r3
 8035348:	4413      	add	r3, r2
 803534a:	681b      	ldr	r3, [r3, #0]
 803534c:	2b00      	cmp	r3, #0
 803534e:	f000 8084 	beq.w	803545a <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8035352:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035356:	4a45      	ldr	r2, [pc, #276]	@ (803546c <gos_kernelDump+0x670>)
 8035358:	216a      	movs	r1, #106	@ 0x6a
 803535a:	fb01 f303 	mul.w	r3, r1, r3
 803535e:	4413      	add	r3, r2
 8035360:	3328      	adds	r3, #40	@ 0x28
 8035362:	885b      	ldrh	r3, [r3, #2]
 8035364:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8035366:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 8035368:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 803536c:	226a      	movs	r2, #106	@ 0x6a
 803536e:	fb02 f303 	mul.w	r3, r2, r3
 8035372:	3308      	adds	r3, #8
 8035374:	4a3d      	ldr	r2, [pc, #244]	@ (803546c <gos_kernelDump+0x670>)
 8035376:	4413      	add	r3, r2
 8035378:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 803537a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 803537e:	4a3b      	ldr	r2, [pc, #236]	@ (803546c <gos_kernelDump+0x670>)
 8035380:	216a      	movs	r1, #106	@ 0x6a
 8035382:	fb01 f303 	mul.w	r3, r1, r3
 8035386:	4413      	add	r3, r2
 8035388:	3348      	adds	r3, #72	@ 0x48
 803538a:	881b      	ldrh	r3, [r3, #0]
 803538c:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803538e:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8035390:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035394:	4a35      	ldr	r2, [pc, #212]	@ (803546c <gos_kernelDump+0x670>)
 8035396:	216a      	movs	r1, #106	@ 0x6a
 8035398:	fb01 f303 	mul.w	r3, r1, r3
 803539c:	4413      	add	r3, r2
 803539e:	3348      	adds	r3, #72	@ 0x48
 80353a0:	885b      	ldrh	r3, [r3, #2]
 80353a2:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80353a4:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 80353a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80353aa:	4a30      	ldr	r2, [pc, #192]	@ (803546c <gos_kernelDump+0x670>)
 80353ac:	216a      	movs	r1, #106	@ 0x6a
 80353ae:	fb01 f303 	mul.w	r3, r1, r3
 80353b2:	4413      	add	r3, r2
 80353b4:	3348      	adds	r3, #72	@ 0x48
 80353b6:	885b      	ldrh	r3, [r3, #2]
 80353b8:	b29b      	uxth	r3, r3
 80353ba:	461a      	mov	r2, r3
 80353bc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80353c0:	fb02 f303 	mul.w	r3, r2, r3
 80353c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80353c8:	4928      	ldr	r1, [pc, #160]	@ (803546c <gos_kernelDump+0x670>)
 80353ca:	206a      	movs	r0, #106	@ 0x6a
 80353cc:	fb00 f202 	mul.w	r2, r0, r2
 80353d0:	440a      	add	r2, r1
 80353d2:	3248      	adds	r2, #72	@ 0x48
 80353d4:	8812      	ldrh	r2, [r2, #0]
 80353d6:	b292      	uxth	r2, r2
 80353d8:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 80353dc:	4a24      	ldr	r2, [pc, #144]	@ (8035470 <gos_kernelDump+0x674>)
 80353de:	fb82 1203 	smull	r1, r2, r2, r3
 80353e2:	1152      	asrs	r2, r2, #5
 80353e4:	17db      	asrs	r3, r3, #31
 80353e6:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 80353e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80353ec:	4a1f      	ldr	r2, [pc, #124]	@ (803546c <gos_kernelDump+0x670>)
 80353ee:	206a      	movs	r0, #106	@ 0x6a
 80353f0:	fb00 f303 	mul.w	r3, r0, r3
 80353f4:	4413      	add	r3, r2
 80353f6:	3348      	adds	r3, #72	@ 0x48
 80353f8:	885b      	ldrh	r3, [r3, #2]
 80353fa:	b29b      	uxth	r3, r3
 80353fc:	461a      	mov	r2, r3
 80353fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8035402:	fb02 f303 	mul.w	r3, r2, r3
 8035406:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 803540a:	4818      	ldr	r0, [pc, #96]	@ (803546c <gos_kernelDump+0x670>)
 803540c:	256a      	movs	r5, #106	@ 0x6a
 803540e:	fb05 f202 	mul.w	r2, r5, r2
 8035412:	4402      	add	r2, r0
 8035414:	3248      	adds	r2, #72	@ 0x48
 8035416:	8812      	ldrh	r2, [r2, #0]
 8035418:	b292      	uxth	r2, r2
 803541a:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 803541e:	4b14      	ldr	r3, [pc, #80]	@ (8035470 <gos_kernelDump+0x674>)
 8035420:	fb83 0302 	smull	r0, r3, r3, r2
 8035424:	1158      	asrs	r0, r3, #5
 8035426:	17d3      	asrs	r3, r2, #31
 8035428:	1ac3      	subs	r3, r0, r3
 803542a:	2064      	movs	r0, #100	@ 0x64
 803542c:	fb00 f303 	mul.w	r3, r0, r3
 8035430:	1ad3      	subs	r3, r2, r3
 8035432:	9302      	str	r3, [sp, #8]
 8035434:	9101      	str	r1, [sp, #4]
 8035436:	9600      	str	r6, [sp, #0]
 8035438:	4673      	mov	r3, lr
 803543a:	4622      	mov	r2, r4
 803543c:	4661      	mov	r1, ip
 803543e:	480d      	ldr	r0, [pc, #52]	@ (8035474 <gos_kernelDump+0x678>)
 8035440:	f005 ffa6 	bl	803b390 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8035444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035448:	3301      	adds	r3, #1
 803544a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 803544e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8035452:	2b2f      	cmp	r3, #47	@ 0x2f
 8035454:	f67f af72 	bls.w	803533c <gos_kernelDump+0x540>
 8035458:	e000      	b.n	803545c <gos_kernelDump+0x660>
            break;
 803545a:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 803545c:	4806      	ldr	r0, [pc, #24]	@ (8035478 <gos_kernelDump+0x67c>)
 803545e:	f005 ff97 	bl	803b390 <gos_shellDriverTransmitString>
}
 8035462:	bf00      	nop
 8035464:	3748      	adds	r7, #72	@ 0x48
 8035466:	46bd      	mov	sp, r7
 8035468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803546c:	200018fc 	.word	0x200018fc
 8035470:	51eb851f 	.word	0x51eb851f
 8035474:	0803ecd8 	.word	0x0803ecd8
 8035478:	0803ed0c 	.word	0x0803ed0c

0803547c <gos_kernelIsCallerIsr>:
{
 803547c:	b480      	push	{r7}
 803547e:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 8035480:	4b05      	ldr	r3, [pc, #20]	@ (8035498 <gos_kernelIsCallerIsr+0x1c>)
 8035482:	781b      	ldrb	r3, [r3, #0]
 8035484:	2b00      	cmp	r3, #0
 8035486:	d001      	beq.n	803548c <gos_kernelIsCallerIsr+0x10>
 8035488:	2336      	movs	r3, #54	@ 0x36
 803548a:	e000      	b.n	803548e <gos_kernelIsCallerIsr+0x12>
 803548c:	2349      	movs	r3, #73	@ 0x49
}
 803548e:	4618      	mov	r0, r3
 8035490:	46bd      	mov	sp, r7
 8035492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035496:	4770      	bx	lr
 8035498:	2000b312 	.word	0x2000b312

0803549c <SVC_Handler>:
    gos_ported_handleSVC();
 803549c:	f01e 0f04 	tst.w	lr, #4
 80354a0:	bf0c      	ite	eq
 80354a2:	f3ef 8008 	mrseq	r0, MSP
 80354a6:	f3ef 8009 	mrsne	r0, PSP
 80354aa:	4b06      	ldr	r3, [pc, #24]	@ (80354c4 <SVC_Handler+0x28>)
 80354ac:	781b      	ldrb	r3, [r3, #0]
 80354ae:	2b36      	cmp	r3, #54	@ 0x36
 80354b0:	d104      	bne.n	80354bc <SVC_Handler+0x20>
 80354b2:	4b04      	ldr	r3, [pc, #16]	@ (80354c4 <SVC_Handler+0x28>)
 80354b4:	2249      	movs	r2, #73	@ 0x49
 80354b6:	701a      	strb	r2, [r3, #0]
 80354b8:	f000 fad8 	bl	8035a6c <gos_kernelProcessorReset>
 80354bc:	f000 b804 	b.w	80354c8 <gos_kernelSVC_HandlerMain>
}
 80354c0:	bf00      	nop
 80354c2:	bf00      	nop
 80354c4:	200018f9 	.word	0x200018f9

080354c8 <gos_kernelSVC_HandlerMain>:
{
 80354c8:	b480      	push	{r7}
 80354ca:	b085      	sub	sp, #20
 80354cc:	af00      	add	r7, sp, #0
 80354ce:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 80354d0:	687b      	ldr	r3, [r7, #4]
 80354d2:	3318      	adds	r3, #24
 80354d4:	681b      	ldr	r3, [r3, #0]
 80354d6:	60fb      	str	r3, [r7, #12]
 80354d8:	68fb      	ldr	r3, [r7, #12]
 80354da:	3b02      	subs	r3, #2
 80354dc:	60fb      	str	r3, [r7, #12]
 80354de:	68fb      	ldr	r3, [r7, #12]
 80354e0:	781b      	ldrb	r3, [r3, #0]
 80354e2:	72fb      	strb	r3, [r7, #11]
 80354e4:	7afb      	ldrb	r3, [r7, #11]
 80354e6:	2bff      	cmp	r3, #255	@ 0xff
 80354e8:	d105      	bne.n	80354f6 <gos_kernelSVC_HandlerMain+0x2e>
 80354ea:	4b06      	ldr	r3, [pc, #24]	@ (8035504 <gos_kernelSVC_HandlerMain+0x3c>)
 80354ec:	681b      	ldr	r3, [r3, #0]
 80354ee:	4a05      	ldr	r2, [pc, #20]	@ (8035504 <gos_kernelSVC_HandlerMain+0x3c>)
 80354f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80354f4:	6013      	str	r3, [r2, #0]
}
 80354f6:	bf00      	nop
 80354f8:	3714      	adds	r7, #20
 80354fa:	46bd      	mov	sp, r7
 80354fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035500:	4770      	bx	lr
 8035502:	bf00      	nop
 8035504:	e000ed04 	.word	0xe000ed04

08035508 <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 8035508:	4b10      	ldr	r3, [pc, #64]	@ (803554c <PendSV_Handler+0x44>)
 803550a:	781b      	ldrb	r3, [r3, #0]
 803550c:	2b36      	cmp	r3, #54	@ 0x36
 803550e:	d109      	bne.n	8035524 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 8035510:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8035514:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 8035518:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 803551c:	4b0b      	ldr	r3, [pc, #44]	@ (803554c <PendSV_Handler+0x44>)
 803551e:	2249      	movs	r2, #73	@ 0x49
 8035520:	701a      	strb	r2, [r3, #0]
}
 8035522:	e011      	b.n	8035548 <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8035524:	b500      	push	{lr}
 8035526:	f3ef 8009 	mrs	r0, PSP
 803552a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 803552e:	f000 f8cb 	bl	80356c8 <gos_kernelSaveCurrentPsp>
 8035532:	f000 f8e1 	bl	80356f8 <gos_kernelSelectNextTask>
 8035536:	f000 f8b3 	bl	80356a0 <gos_kernelGetCurrentPsp>
 803553a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 803553e:	f380 8809 	msr	PSP, r0
 8035542:	f85d eb04 	ldr.w	lr, [sp], #4
 8035546:	4770      	bx	lr
}
 8035548:	bf00      	nop
 803554a:	bf00      	nop
 803554c:	200018fa 	.word	0x200018fa

08035550 <gos_kernelReschedule>:
{
 8035550:	b480      	push	{r7}
 8035552:	b083      	sub	sp, #12
 8035554:	af00      	add	r7, sp, #0
 8035556:	4603      	mov	r3, r0
 8035558:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 803555a:	79fb      	ldrb	r3, [r7, #7]
 803555c:	2b16      	cmp	r3, #22
 803555e:	d106      	bne.n	803556e <gos_kernelReschedule+0x1e>
 8035560:	4b06      	ldr	r3, [pc, #24]	@ (803557c <gos_kernelReschedule+0x2c>)
 8035562:	681b      	ldr	r3, [r3, #0]
 8035564:	4a05      	ldr	r2, [pc, #20]	@ (803557c <gos_kernelReschedule+0x2c>)
 8035566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 803556a:	6013      	str	r3, [r2, #0]
}
 803556c:	e000      	b.n	8035570 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 803556e:	dfff      	svc	255	@ 0xff
}
 8035570:	bf00      	nop
 8035572:	370c      	adds	r7, #12
 8035574:	46bd      	mov	sp, r7
 8035576:	f85d 7b04 	ldr.w	r7, [sp], #4
 803557a:	4770      	bx	lr
 803557c:	e000ed04 	.word	0xe000ed04

08035580 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 8035580:	b580      	push	{r7, lr}
 8035582:	b086      	sub	sp, #24
 8035584:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 8035586:	2300      	movs	r3, #0
 8035588:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 803558a:	f3ef 8309 	mrs	r3, PSP
 803558e:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 8035590:	687b      	ldr	r3, [r7, #4]
 8035592:	2b00      	cmp	r3, #0
 8035594:	d02b      	beq.n	80355ee <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 8035596:	4b3f      	ldr	r3, [pc, #252]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 8035598:	681b      	ldr	r3, [r3, #0]
 803559a:	4a3f      	ldr	r2, [pc, #252]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 803559c:	216a      	movs	r1, #106	@ 0x6a
 803559e:	fb01 f303 	mul.w	r3, r1, r3
 80355a2:	4413      	add	r3, r2
 80355a4:	3360      	adds	r3, #96	@ 0x60
 80355a6:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 80355aa:	687a      	ldr	r2, [r7, #4]
 80355ac:	429a      	cmp	r2, r3
 80355ae:	d21e      	bcs.n	80355ee <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 80355b0:	4b38      	ldr	r3, [pc, #224]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 80355b2:	681b      	ldr	r3, [r3, #0]
 80355b4:	226a      	movs	r2, #106	@ 0x6a
 80355b6:	fb02 f303 	mul.w	r3, r2, r3
 80355ba:	3308      	adds	r3, #8
 80355bc:	4a36      	ldr	r2, [pc, #216]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 80355be:	4413      	add	r3, r2
 80355c0:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 80355c2:	4a34      	ldr	r2, [pc, #208]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 80355c4:	6812      	ldr	r2, [r2, #0]
 80355c6:	4934      	ldr	r1, [pc, #208]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 80355c8:	206a      	movs	r0, #106	@ 0x6a
 80355ca:	fb00 f202 	mul.w	r2, r0, r2
 80355ce:	440a      	add	r2, r1
 80355d0:	3260      	adds	r2, #96	@ 0x60
 80355d2:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 80355d6:	687a      	ldr	r2, [r7, #4]
 80355d8:	1a8a      	subs	r2, r1, r2
 80355da:	9202      	str	r2, [sp, #8]
 80355dc:	687a      	ldr	r2, [r7, #4]
 80355de:	9201      	str	r2, [sp, #4]
 80355e0:	9300      	str	r3, [sp, #0]
 80355e2:	4b2e      	ldr	r3, [pc, #184]	@ (803569c <gos_kernelCheckTaskStack+0x11c>)
 80355e4:	2200      	movs	r2, #0
 80355e6:	2100      	movs	r1, #0
 80355e8:	2034      	movs	r0, #52	@ 0x34
 80355ea:	f002 f95d 	bl	80378a8 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 80355ee:	687b      	ldr	r3, [r7, #4]
 80355f0:	2b00      	cmp	r3, #0
 80355f2:	d04a      	beq.n	803568a <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 80355f4:	4b27      	ldr	r3, [pc, #156]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 80355f6:	681b      	ldr	r3, [r3, #0]
 80355f8:	4a27      	ldr	r2, [pc, #156]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 80355fa:	216a      	movs	r1, #106	@ 0x6a
 80355fc:	fb01 f303 	mul.w	r3, r1, r3
 8035600:	4413      	add	r3, r2
 8035602:	3360      	adds	r3, #96	@ 0x60
 8035604:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8035608:	4a22      	ldr	r2, [pc, #136]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 803560a:	6812      	ldr	r2, [r2, #0]
 803560c:	4922      	ldr	r1, [pc, #136]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 803560e:	206a      	movs	r0, #106	@ 0x6a
 8035610:	fb00 f202 	mul.w	r2, r0, r2
 8035614:	440a      	add	r2, r1
 8035616:	3248      	adds	r2, #72	@ 0x48
 8035618:	8812      	ldrh	r2, [r2, #0]
 803561a:	b292      	uxth	r2, r2
 803561c:	441a      	add	r2, r3
 803561e:	687b      	ldr	r3, [r7, #4]
 8035620:	1ad3      	subs	r3, r2, r3
 8035622:	3b40      	subs	r3, #64	@ 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 8035624:	4a1b      	ldr	r2, [pc, #108]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 8035626:	6812      	ldr	r2, [r2, #0]
 8035628:	491b      	ldr	r1, [pc, #108]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 803562a:	206a      	movs	r0, #106	@ 0x6a
 803562c:	fb00 f202 	mul.w	r2, r0, r2
 8035630:	440a      	add	r2, r1
 8035632:	3248      	adds	r2, #72	@ 0x48
 8035634:	8852      	ldrh	r2, [r2, #2]
 8035636:	b292      	uxth	r2, r2
    if (sp != 0 &&
 8035638:	4293      	cmp	r3, r2
 803563a:	d926      	bls.n	803568a <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 803563c:	4b15      	ldr	r3, [pc, #84]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 803563e:	681b      	ldr	r3, [r3, #0]
 8035640:	4a15      	ldr	r2, [pc, #84]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 8035642:	216a      	movs	r1, #106	@ 0x6a
 8035644:	fb01 f303 	mul.w	r3, r1, r3
 8035648:	4413      	add	r3, r2
 803564a:	3360      	adds	r3, #96	@ 0x60
 803564c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8035650:	b29a      	uxth	r2, r3
 8035652:	4b10      	ldr	r3, [pc, #64]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 8035654:	681b      	ldr	r3, [r3, #0]
 8035656:	4910      	ldr	r1, [pc, #64]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 8035658:	206a      	movs	r0, #106	@ 0x6a
 803565a:	fb00 f303 	mul.w	r3, r0, r3
 803565e:	440b      	add	r3, r1
 8035660:	3348      	adds	r3, #72	@ 0x48
 8035662:	881b      	ldrh	r3, [r3, #0]
 8035664:	b29b      	uxth	r3, r3
 8035666:	4413      	add	r3, r2
 8035668:	b29a      	uxth	r2, r3
 803566a:	687b      	ldr	r3, [r7, #4]
 803566c:	b29b      	uxth	r3, r3
 803566e:	1ad3      	subs	r3, r2, r3
 8035670:	b29a      	uxth	r2, r3
 8035672:	4b08      	ldr	r3, [pc, #32]	@ (8035694 <gos_kernelCheckTaskStack+0x114>)
 8035674:	681b      	ldr	r3, [r3, #0]
 8035676:	3a20      	subs	r2, #32
 8035678:	b290      	uxth	r0, r2
 803567a:	4a07      	ldr	r2, [pc, #28]	@ (8035698 <gos_kernelCheckTaskStack+0x118>)
 803567c:	216a      	movs	r1, #106	@ 0x6a
 803567e:	fb01 f303 	mul.w	r3, r1, r3
 8035682:	4413      	add	r3, r2
 8035684:	3348      	adds	r3, #72	@ 0x48
 8035686:	4602      	mov	r2, r0
 8035688:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 803568a:	bf00      	nop
 803568c:	3708      	adds	r7, #8
 803568e:	46bd      	mov	sp, r7
 8035690:	bd80      	pop	{r7, pc}
 8035692:	bf00      	nop
 8035694:	2000b318 	.word	0x2000b318
 8035698:	200018fc 	.word	0x200018fc
 803569c:	0803ed60 	.word	0x0803ed60

080356a0 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 80356a0:	b480      	push	{r7}
 80356a2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 80356a4:	4b06      	ldr	r3, [pc, #24]	@ (80356c0 <gos_kernelGetCurrentPsp+0x20>)
 80356a6:	681b      	ldr	r3, [r3, #0]
 80356a8:	4a06      	ldr	r2, [pc, #24]	@ (80356c4 <gos_kernelGetCurrentPsp+0x24>)
 80356aa:	216a      	movs	r1, #106	@ 0x6a
 80356ac:	fb01 f303 	mul.w	r3, r1, r3
 80356b0:	4413      	add	r3, r2
 80356b2:	3338      	adds	r3, #56	@ 0x38
 80356b4:	685b      	ldr	r3, [r3, #4]
}
 80356b6:	4618      	mov	r0, r3
 80356b8:	46bd      	mov	sp, r7
 80356ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80356be:	4770      	bx	lr
 80356c0:	2000b318 	.word	0x2000b318
 80356c4:	200018fc 	.word	0x200018fc

080356c8 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 80356c8:	b480      	push	{r7}
 80356ca:	b083      	sub	sp, #12
 80356cc:	af00      	add	r7, sp, #0
 80356ce:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 80356d0:	4b07      	ldr	r3, [pc, #28]	@ (80356f0 <gos_kernelSaveCurrentPsp+0x28>)
 80356d2:	681b      	ldr	r3, [r3, #0]
 80356d4:	4a07      	ldr	r2, [pc, #28]	@ (80356f4 <gos_kernelSaveCurrentPsp+0x2c>)
 80356d6:	216a      	movs	r1, #106	@ 0x6a
 80356d8:	fb01 f303 	mul.w	r3, r1, r3
 80356dc:	4413      	add	r3, r2
 80356de:	3338      	adds	r3, #56	@ 0x38
 80356e0:	687a      	ldr	r2, [r7, #4]
 80356e2:	605a      	str	r2, [r3, #4]
}
 80356e4:	bf00      	nop
 80356e6:	370c      	adds	r7, #12
 80356e8:	46bd      	mov	sp, r7
 80356ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80356ee:	4770      	bx	lr
 80356f0:	2000b318 	.word	0x2000b318
 80356f4:	200018fc 	.word	0x200018fc

080356f8 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 80356f8:	b590      	push	{r4, r7, lr}
 80356fa:	b085      	sub	sp, #20
 80356fc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 80356fe:	2300      	movs	r3, #0
 8035700:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 8035702:	23ff      	movs	r3, #255	@ 0xff
 8035704:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 8035706:	2300      	movs	r3, #0
 8035708:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 803570a:	2300      	movs	r3, #0
 803570c:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 803570e:	2300      	movs	r3, #0
 8035710:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 8035712:	4ba3      	ldr	r3, [pc, #652]	@ (80359a0 <gos_kernelSelectNextTask+0x2a8>)
 8035714:	681a      	ldr	r2, [r3, #0]
 8035716:	4ba3      	ldr	r3, [pc, #652]	@ (80359a4 <gos_kernelSelectNextTask+0x2ac>)
 8035718:	681b      	ldr	r3, [r3, #0]
 803571a:	1ad3      	subs	r3, r2, r3
 803571c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 803571e:	f7ff ff2f 	bl	8035580 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 8035722:	4ba1      	ldr	r3, [pc, #644]	@ (80359a8 <gos_kernelSelectNextTask+0x2b0>)
 8035724:	781b      	ldrb	r3, [r3, #0]
 8035726:	2b00      	cmp	r3, #0
 8035728:	f040 8136 	bne.w	8035998 <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803572c:	2300      	movs	r3, #0
 803572e:	81fb      	strh	r3, [r7, #14]
 8035730:	e0d0      	b.n	80358d4 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8035732:	89fb      	ldrh	r3, [r7, #14]
 8035734:	4a9d      	ldr	r2, [pc, #628]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035736:	216a      	movs	r1, #106	@ 0x6a
 8035738:	fb01 f303 	mul.w	r3, r1, r3
 803573c:	4413      	add	r3, r2
 803573e:	3304      	adds	r3, #4
 8035740:	781b      	ldrb	r3, [r3, #0]
 8035742:	2b16      	cmp	r3, #22
 8035744:	d12c      	bne.n	80357a0 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 8035746:	89fb      	ldrh	r3, [r7, #14]
 8035748:	4a98      	ldr	r2, [pc, #608]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803574a:	216a      	movs	r1, #106	@ 0x6a
 803574c:	fb01 f303 	mul.w	r3, r1, r3
 8035750:	4413      	add	r3, r2
 8035752:	3330      	adds	r3, #48	@ 0x30
 8035754:	6819      	ldr	r1, [r3, #0]
 8035756:	89fb      	ldrh	r3, [r7, #14]
 8035758:	687a      	ldr	r2, [r7, #4]
 803575a:	4411      	add	r1, r2
 803575c:	4893      	ldr	r0, [pc, #588]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803575e:	226a      	movs	r2, #106	@ 0x6a
 8035760:	fb03 f202 	mul.w	r2, r3, r2
 8035764:	4402      	add	r2, r0
 8035766:	3230      	adds	r2, #48	@ 0x30
 8035768:	6011      	str	r1, [r2, #0]
 803576a:	4a90      	ldr	r2, [pc, #576]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803576c:	216a      	movs	r1, #106	@ 0x6a
 803576e:	fb01 f303 	mul.w	r3, r1, r3
 8035772:	4413      	add	r3, r2
 8035774:	3330      	adds	r3, #48	@ 0x30
 8035776:	681a      	ldr	r2, [r3, #0]
 8035778:	89fb      	ldrh	r3, [r7, #14]
 803577a:	498c      	ldr	r1, [pc, #560]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803577c:	206a      	movs	r0, #106	@ 0x6a
 803577e:	fb00 f303 	mul.w	r3, r0, r3
 8035782:	440b      	add	r3, r1
 8035784:	3328      	adds	r3, #40	@ 0x28
 8035786:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8035788:	429a      	cmp	r2, r3
 803578a:	d309      	bcc.n	80357a0 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 803578c:	89fb      	ldrh	r3, [r7, #14]
 803578e:	4a87      	ldr	r2, [pc, #540]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035790:	216a      	movs	r1, #106	@ 0x6a
 8035792:	fb01 f303 	mul.w	r3, r1, r3
 8035796:	4413      	add	r3, r2
 8035798:	3304      	adds	r3, #4
 803579a:	220a      	movs	r2, #10
 803579c:	701a      	strb	r2, [r3, #0]
 803579e:	e040      	b.n	8035822 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 80357a0:	89fb      	ldrh	r3, [r7, #14]
 80357a2:	4a82      	ldr	r2, [pc, #520]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80357a4:	216a      	movs	r1, #106	@ 0x6a
 80357a6:	fb01 f303 	mul.w	r3, r1, r3
 80357aa:	4413      	add	r3, r2
 80357ac:	3304      	adds	r3, #4
 80357ae:	781b      	ldrb	r3, [r3, #0]
 80357b0:	2b19      	cmp	r3, #25
 80357b2:	d136      	bne.n	8035822 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 80357b4:	89fb      	ldrh	r3, [r7, #14]
 80357b6:	4a7d      	ldr	r2, [pc, #500]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80357b8:	216a      	movs	r1, #106	@ 0x6a
 80357ba:	fb01 f303 	mul.w	r3, r1, r3
 80357be:	4413      	add	r3, r2
 80357c0:	3330      	adds	r3, #48	@ 0x30
 80357c2:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 80357c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80357c8:	d02b      	beq.n	8035822 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 80357ca:	89fb      	ldrh	r3, [r7, #14]
 80357cc:	4a77      	ldr	r2, [pc, #476]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80357ce:	216a      	movs	r1, #106	@ 0x6a
 80357d0:	fb01 f303 	mul.w	r3, r1, r3
 80357d4:	4413      	add	r3, r2
 80357d6:	3338      	adds	r3, #56	@ 0x38
 80357d8:	6819      	ldr	r1, [r3, #0]
 80357da:	89fb      	ldrh	r3, [r7, #14]
 80357dc:	687a      	ldr	r2, [r7, #4]
 80357de:	4411      	add	r1, r2
 80357e0:	4872      	ldr	r0, [pc, #456]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80357e2:	226a      	movs	r2, #106	@ 0x6a
 80357e4:	fb03 f202 	mul.w	r2, r3, r2
 80357e8:	4402      	add	r2, r0
 80357ea:	3238      	adds	r2, #56	@ 0x38
 80357ec:	6011      	str	r1, [r2, #0]
 80357ee:	4a6f      	ldr	r2, [pc, #444]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80357f0:	216a      	movs	r1, #106	@ 0x6a
 80357f2:	fb01 f303 	mul.w	r3, r1, r3
 80357f6:	4413      	add	r3, r2
 80357f8:	3338      	adds	r3, #56	@ 0x38
 80357fa:	681a      	ldr	r2, [r3, #0]
 80357fc:	89fb      	ldrh	r3, [r7, #14]
 80357fe:	496b      	ldr	r1, [pc, #428]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035800:	206a      	movs	r0, #106	@ 0x6a
 8035802:	fb00 f303 	mul.w	r3, r0, r3
 8035806:	440b      	add	r3, r1
 8035808:	3330      	adds	r3, #48	@ 0x30
 803580a:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 803580c:	429a      	cmp	r2, r3
 803580e:	d308      	bcc.n	8035822 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8035810:	89fb      	ldrh	r3, [r7, #14]
 8035812:	4a66      	ldr	r2, [pc, #408]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035814:	216a      	movs	r1, #106	@ 0x6a
 8035816:	fb01 f303 	mul.w	r3, r1, r3
 803581a:	4413      	add	r3, r2
 803581c:	3304      	adds	r3, #4
 803581e:	220a      	movs	r2, #10
 8035820:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 8035822:	89fa      	ldrh	r2, [r7, #14]
 8035824:	4b62      	ldr	r3, [pc, #392]	@ (80359b0 <gos_kernelSelectNextTask+0x2b8>)
 8035826:	681b      	ldr	r3, [r3, #0]
 8035828:	429a      	cmp	r2, r3
 803582a:	d047      	beq.n	80358bc <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 803582c:	89fb      	ldrh	r3, [r7, #14]
 803582e:	4a5f      	ldr	r2, [pc, #380]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035830:	216a      	movs	r1, #106	@ 0x6a
 8035832:	fb01 f303 	mul.w	r3, r1, r3
 8035836:	4413      	add	r3, r2
 8035838:	3304      	adds	r3, #4
 803583a:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 803583c:	2b0a      	cmp	r3, #10
 803583e:	d13d      	bne.n	80358bc <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8035840:	89fb      	ldrh	r3, [r7, #14]
 8035842:	4a5a      	ldr	r2, [pc, #360]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035844:	216a      	movs	r1, #106	@ 0x6a
 8035846:	fb01 f303 	mul.w	r3, r1, r3
 803584a:	4413      	add	r3, r2
 803584c:	3306      	adds	r3, #6
 803584e:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8035850:	7b7a      	ldrb	r2, [r7, #13]
 8035852:	429a      	cmp	r2, r3
 8035854:	d932      	bls.n	80358bc <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8035856:	89fb      	ldrh	r3, [r7, #14]
 8035858:	4a54      	ldr	r2, [pc, #336]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803585a:	216a      	movs	r1, #106	@ 0x6a
 803585c:	fb01 f303 	mul.w	r3, r1, r3
 8035860:	4413      	add	r3, r2
 8035862:	3360      	adds	r3, #96	@ 0x60
 8035864:	889b      	ldrh	r3, [r3, #4]
 8035866:	b29a      	uxth	r2, r3
 8035868:	89fb      	ldrh	r3, [r7, #14]
 803586a:	4950      	ldr	r1, [pc, #320]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803586c:	206a      	movs	r0, #106	@ 0x6a
 803586e:	fb00 f303 	mul.w	r3, r0, r3
 8035872:	440b      	add	r3, r1
 8035874:	3358      	adds	r3, #88	@ 0x58
 8035876:	88db      	ldrh	r3, [r3, #6]
 8035878:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 803587a:	429a      	cmp	r2, r3
 803587c:	d21e      	bcs.n	80358bc <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 803587e:	89fb      	ldrh	r3, [r7, #14]
 8035880:	4a4a      	ldr	r2, [pc, #296]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035882:	216a      	movs	r1, #106	@ 0x6a
 8035884:	fb01 f303 	mul.w	r3, r1, r3
 8035888:	4413      	add	r3, r2
 803588a:	3360      	adds	r3, #96	@ 0x60
 803588c:	885b      	ldrh	r3, [r3, #2]
 803588e:	b29a      	uxth	r2, r3
 8035890:	89fb      	ldrh	r3, [r7, #14]
 8035892:	4946      	ldr	r1, [pc, #280]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035894:	206a      	movs	r0, #106	@ 0x6a
 8035896:	fb00 f303 	mul.w	r3, r0, r3
 803589a:	440b      	add	r3, r1
 803589c:	3358      	adds	r3, #88	@ 0x58
 803589e:	88db      	ldrh	r3, [r3, #6]
 80358a0:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80358a2:	429a      	cmp	r2, r3
 80358a4:	d20a      	bcs.n	80358bc <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 80358a6:	89fb      	ldrh	r3, [r7, #14]
 80358a8:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 80358aa:	89fb      	ldrh	r3, [r7, #14]
 80358ac:	4a3f      	ldr	r2, [pc, #252]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80358ae:	216a      	movs	r1, #106	@ 0x6a
 80358b0:	fb01 f303 	mul.w	r3, r1, r3
 80358b4:	4413      	add	r3, r2
 80358b6:	3306      	adds	r3, #6
 80358b8:	781b      	ldrb	r3, [r3, #0]
 80358ba:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 80358bc:	89fb      	ldrh	r3, [r7, #14]
 80358be:	4a3b      	ldr	r2, [pc, #236]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 80358c0:	216a      	movs	r1, #106	@ 0x6a
 80358c2:	fb01 f303 	mul.w	r3, r1, r3
 80358c6:	4413      	add	r3, r2
 80358c8:	681b      	ldr	r3, [r3, #0]
 80358ca:	2b00      	cmp	r3, #0
 80358cc:	d007      	beq.n	80358de <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80358ce:	89fb      	ldrh	r3, [r7, #14]
 80358d0:	3301      	adds	r3, #1
 80358d2:	81fb      	strh	r3, [r7, #14]
 80358d4:	89fb      	ldrh	r3, [r7, #14]
 80358d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80358d8:	f67f af2b 	bls.w	8035732 <gos_kernelSelectNextTask+0x3a>
 80358dc:	e000      	b.n	80358e0 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 80358de:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 80358e0:	f7ff f8d4 	bl	8034a8c <gos_kernelGetCpuUsage>
 80358e4:	4603      	mov	r3, r0
 80358e6:	461a      	mov	r2, r3
 80358e8:	4b32      	ldr	r3, [pc, #200]	@ (80359b4 <gos_kernelSelectNextTask+0x2bc>)
 80358ea:	881b      	ldrh	r3, [r3, #0]
 80358ec:	429a      	cmp	r2, r3
 80358ee:	d901      	bls.n	80358f4 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 80358f0:	2300      	movs	r3, #0
 80358f2:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 80358f4:	897a      	ldrh	r2, [r7, #10]
 80358f6:	4b2e      	ldr	r3, [pc, #184]	@ (80359b0 <gos_kernelSelectNextTask+0x2b8>)
 80358f8:	681b      	ldr	r3, [r3, #0]
 80358fa:	429a      	cmp	r2, r3
 80358fc:	d02b      	beq.n	8035956 <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 80358fe:	4b2e      	ldr	r3, [pc, #184]	@ (80359b8 <gos_kernelSelectNextTask+0x2c0>)
 8035900:	681b      	ldr	r3, [r3, #0]
 8035902:	2b00      	cmp	r3, #0
 8035904:	d016      	beq.n	8035934 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 8035906:	4b2c      	ldr	r3, [pc, #176]	@ (80359b8 <gos_kernelSelectNextTask+0x2c0>)
 8035908:	681b      	ldr	r3, [r3, #0]
 803590a:	4a29      	ldr	r2, [pc, #164]	@ (80359b0 <gos_kernelSelectNextTask+0x2b8>)
 803590c:	6812      	ldr	r2, [r2, #0]
 803590e:	4927      	ldr	r1, [pc, #156]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035910:	206a      	movs	r0, #106	@ 0x6a
 8035912:	fb00 f202 	mul.w	r2, r0, r2
 8035916:	440a      	add	r2, r1
 8035918:	3228      	adds	r2, #40	@ 0x28
 803591a:	8852      	ldrh	r2, [r2, #2]
 803591c:	b290      	uxth	r0, r2
 803591e:	897a      	ldrh	r2, [r7, #10]
 8035920:	4922      	ldr	r1, [pc, #136]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035922:	246a      	movs	r4, #106	@ 0x6a
 8035924:	fb04 f202 	mul.w	r2, r4, r2
 8035928:	440a      	add	r2, r1
 803592a:	3228      	adds	r2, #40	@ 0x28
 803592c:	8852      	ldrh	r2, [r2, #2]
 803592e:	b292      	uxth	r2, r2
 8035930:	4611      	mov	r1, r2
 8035932:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8035934:	4b1e      	ldr	r3, [pc, #120]	@ (80359b0 <gos_kernelSelectNextTask+0x2b8>)
 8035936:	681b      	ldr	r3, [r3, #0]
 8035938:	491c      	ldr	r1, [pc, #112]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803593a:	226a      	movs	r2, #106	@ 0x6a
 803593c:	fb03 f202 	mul.w	r2, r3, r2
 8035940:	440a      	add	r2, r1
 8035942:	3240      	adds	r2, #64	@ 0x40
 8035944:	6852      	ldr	r2, [r2, #4]
 8035946:	3201      	adds	r2, #1
 8035948:	4918      	ldr	r1, [pc, #96]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 803594a:	206a      	movs	r0, #106	@ 0x6a
 803594c:	fb00 f303 	mul.w	r3, r0, r3
 8035950:	440b      	add	r3, r1
 8035952:	3340      	adds	r3, #64	@ 0x40
 8035954:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 8035956:	1cbb      	adds	r3, r7, #2
 8035958:	4618      	mov	r0, r3
 803595a:	f005 fd75 	bl	803b448 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 803595e:	887a      	ldrh	r2, [r7, #2]
 8035960:	4b16      	ldr	r3, [pc, #88]	@ (80359bc <gos_kernelSelectNextTask+0x2c4>)
 8035962:	881b      	ldrh	r3, [r3, #0]
 8035964:	1ad3      	subs	r3, r2, r3
 8035966:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 8035968:	4b11      	ldr	r3, [pc, #68]	@ (80359b0 <gos_kernelSelectNextTask+0x2b8>)
 803596a:	681b      	ldr	r3, [r3, #0]
 803596c:	226a      	movs	r2, #106	@ 0x6a
 803596e:	fb02 f303 	mul.w	r3, r2, r3
 8035972:	3350      	adds	r3, #80	@ 0x50
 8035974:	4a0d      	ldr	r2, [pc, #52]	@ (80359ac <gos_kernelSelectNextTask+0x2b4>)
 8035976:	4413      	add	r3, r2
 8035978:	3305      	adds	r3, #5
 803597a:	893a      	ldrh	r2, [r7, #8]
 803597c:	4619      	mov	r1, r3
 803597e:	4810      	ldr	r0, [pc, #64]	@ (80359c0 <gos_kernelSelectNextTask+0x2c8>)
 8035980:	f004 fe24 	bl	803a5cc <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8035984:	480d      	ldr	r0, [pc, #52]	@ (80359bc <gos_kernelSelectNextTask+0x2c4>)
 8035986:	f005 fd5f 	bl	803b448 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 803598a:	897b      	ldrh	r3, [r7, #10]
 803598c:	4a08      	ldr	r2, [pc, #32]	@ (80359b0 <gos_kernelSelectNextTask+0x2b8>)
 803598e:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 8035990:	4b03      	ldr	r3, [pc, #12]	@ (80359a0 <gos_kernelSelectNextTask+0x2a8>)
 8035992:	681b      	ldr	r3, [r3, #0]
 8035994:	4a03      	ldr	r2, [pc, #12]	@ (80359a4 <gos_kernelSelectNextTask+0x2ac>)
 8035996:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 8035998:	bf00      	nop
 803599a:	3714      	adds	r7, #20
 803599c:	46bd      	mov	sp, r7
 803599e:	bd90      	pop	{r4, r7, pc}
 80359a0:	2000b31c 	.word	0x2000b31c
 80359a4:	2000b33c 	.word	0x2000b33c
 80359a8:	2000b311 	.word	0x2000b311
 80359ac:	200018fc 	.word	0x200018fc
 80359b0:	2000b318 	.word	0x2000b318
 80359b4:	200018f6 	.word	0x200018f6
 80359b8:	2000b330 	.word	0x2000b330
 80359bc:	2000b320 	.word	0x2000b320
 80359c0:	2000b324 	.word	0x2000b324

080359c4 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 80359c4:	b480      	push	{r7}
 80359c6:	b083      	sub	sp, #12
 80359c8:	af00      	add	r7, sp, #0
 80359ca:	4603      	mov	r3, r0
 80359cc:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 80359ce:	79fb      	ldrb	r3, [r7, #7]
 80359d0:	3b05      	subs	r3, #5
 80359d2:	2b14      	cmp	r3, #20
 80359d4:	d836      	bhi.n	8035a44 <gos_kernelGetTaskStateString+0x80>
 80359d6:	a201      	add	r2, pc, #4	@ (adr r2, 80359dc <gos_kernelGetTaskStateString+0x18>)
 80359d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80359dc:	08035a39 	.word	0x08035a39
 80359e0:	08035a45 	.word	0x08035a45
 80359e4:	08035a45 	.word	0x08035a45
 80359e8:	08035a45 	.word	0x08035a45
 80359ec:	08035a45 	.word	0x08035a45
 80359f0:	08035a31 	.word	0x08035a31
 80359f4:	08035a45 	.word	0x08035a45
 80359f8:	08035a45 	.word	0x08035a45
 80359fc:	08035a41 	.word	0x08035a41
 8035a00:	08035a45 	.word	0x08035a45
 8035a04:	08035a45 	.word	0x08035a45
 8035a08:	08035a45 	.word	0x08035a45
 8035a0c:	08035a45 	.word	0x08035a45
 8035a10:	08035a45 	.word	0x08035a45
 8035a14:	08035a45 	.word	0x08035a45
 8035a18:	08035a45 	.word	0x08035a45
 8035a1c:	08035a45 	.word	0x08035a45
 8035a20:	08035a35 	.word	0x08035a35
 8035a24:	08035a45 	.word	0x08035a45
 8035a28:	08035a45 	.word	0x08035a45
 8035a2c:	08035a3d 	.word	0x08035a3d
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 8035a30:	4b08      	ldr	r3, [pc, #32]	@ (8035a54 <gos_kernelGetTaskStateString+0x90>)
 8035a32:	e008      	b.n	8035a46 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8035a34:	4b08      	ldr	r3, [pc, #32]	@ (8035a58 <gos_kernelGetTaskStateString+0x94>)
 8035a36:	e006      	b.n	8035a46 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 8035a38:	4b08      	ldr	r3, [pc, #32]	@ (8035a5c <gos_kernelGetTaskStateString+0x98>)
 8035a3a:	e004      	b.n	8035a46 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8035a3c:	4b08      	ldr	r3, [pc, #32]	@ (8035a60 <gos_kernelGetTaskStateString+0x9c>)
 8035a3e:	e002      	b.n	8035a46 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 8035a40:	4b08      	ldr	r3, [pc, #32]	@ (8035a64 <gos_kernelGetTaskStateString+0xa0>)
 8035a42:	e000      	b.n	8035a46 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8035a44:	4b08      	ldr	r3, [pc, #32]	@ (8035a68 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 8035a46:	4618      	mov	r0, r3
 8035a48:	370c      	adds	r7, #12
 8035a4a:	46bd      	mov	sp, r7
 8035a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a50:	4770      	bx	lr
 8035a52:	bf00      	nop
 8035a54:	0803eda4 	.word	0x0803eda4
 8035a58:	0803edb4 	.word	0x0803edb4
 8035a5c:	0803edc8 	.word	0x0803edc8
 8035a60:	0803eddc 	.word	0x0803eddc
 8035a64:	0803edf0 	.word	0x0803edf0
 8035a68:	0803ee00 	.word	0x0803ee00

08035a6c <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 8035a6c:	b480      	push	{r7}
 8035a6e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 8035a70:	f3bf 8f4f 	dsb	sy
 8035a74:	4b05      	ldr	r3, [pc, #20]	@ (8035a8c <gos_kernelProcessorReset+0x20>)
 8035a76:	681b      	ldr	r3, [r3, #0]
 8035a78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8035a7c:	4903      	ldr	r1, [pc, #12]	@ (8035a8c <gos_kernelProcessorReset+0x20>)
 8035a7e:	4b04      	ldr	r3, [pc, #16]	@ (8035a90 <gos_kernelProcessorReset+0x24>)
 8035a80:	4313      	orrs	r3, r2
 8035a82:	600b      	str	r3, [r1, #0]
 8035a84:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 8035a88:	bf00      	nop
 8035a8a:	e7fd      	b.n	8035a88 <gos_kernelProcessorReset+0x1c>
 8035a8c:	e000ed0c 	.word	0xe000ed0c
 8035a90:	05fa0004 	.word	0x05fa0004

08035a94 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 8035a94:	b480      	push	{r7}
 8035a96:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8035a98:	bf00      	nop
 8035a9a:	e7fd      	b.n	8035a98 <NMI_Handler+0x4>

08035a9c <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 8035a9c:	b480      	push	{r7}
 8035a9e:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8035aa0:	bf00      	nop
 8035aa2:	e7fd      	b.n	8035aa0 <HardFault_Handler+0x4>

08035aa4 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 8035aa4:	b480      	push	{r7}
 8035aa6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8035aa8:	bf00      	nop
 8035aaa:	e7fd      	b.n	8035aa8 <MemManage_Handler+0x4>

08035aac <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 8035aac:	b480      	push	{r7}
 8035aae:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8035ab0:	bf00      	nop
 8035ab2:	e7fd      	b.n	8035ab0 <BusFault_Handler+0x4>

08035ab4 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8035ab4:	b480      	push	{r7}
 8035ab6:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8035ab8:	bf00      	nop
 8035aba:	e7fd      	b.n	8035ab8 <UsageFault_Handler+0x4>

08035abc <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 8035abc:	b580      	push	{r7, lr}
 8035abe:	b086      	sub	sp, #24
 8035ac0:	af00      	add	r7, sp, #0
 8035ac2:	6078      	str	r0, [r7, #4]
 8035ac4:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 8035ac6:	2355      	movs	r3, #85	@ 0x55
 8035ac8:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 8035aca:	2300      	movs	r3, #0
 8035acc:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 8035ace:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8035ad2:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 8035ad4:	2300      	movs	r3, #0
 8035ad6:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 8035ad8:	6878      	ldr	r0, [r7, #4]
 8035ada:	f001 fd3d 	bl	8037558 <gos_taskCheckDescriptor>
 8035ade:	4603      	mov	r3, r0
 8035ae0:	2bae      	cmp	r3, #174	@ 0xae
 8035ae2:	d102      	bne.n	8035aea <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 8035ae4:	23ae      	movs	r3, #174	@ 0xae
 8035ae6:	75fb      	strb	r3, [r7, #23]
 8035ae8:	e173      	b.n	8035dd2 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 8035aea:	23ae      	movs	r3, #174	@ 0xae
 8035aec:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8035aee:	2300      	movs	r3, #0
 8035af0:	82bb      	strh	r3, [r7, #20]
 8035af2:	e01a      	b.n	8035b2a <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8035af4:	8abb      	ldrh	r3, [r7, #20]
 8035af6:	4a89      	ldr	r2, [pc, #548]	@ (8035d1c <gos_taskRegister+0x260>)
 8035af8:	216a      	movs	r1, #106	@ 0x6a
 8035afa:	fb01 f303 	mul.w	r3, r1, r3
 8035afe:	4413      	add	r3, r2
 8035b00:	681b      	ldr	r3, [r3, #0]
 8035b02:	2b00      	cmp	r3, #0
 8035b04:	d102      	bne.n	8035b0c <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 8035b06:	2355      	movs	r3, #85	@ 0x55
 8035b08:	75fb      	strb	r3, [r7, #23]
                break;
 8035b0a:	e011      	b.n	8035b30 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 8035b0c:	8abb      	ldrh	r3, [r7, #20]
 8035b0e:	4a83      	ldr	r2, [pc, #524]	@ (8035d1c <gos_taskRegister+0x260>)
 8035b10:	216a      	movs	r1, #106	@ 0x6a
 8035b12:	fb01 f303 	mul.w	r3, r1, r3
 8035b16:	4413      	add	r3, r2
 8035b18:	3348      	adds	r3, #72	@ 0x48
 8035b1a:	881b      	ldrh	r3, [r3, #0]
 8035b1c:	461a      	mov	r2, r3
 8035b1e:	693b      	ldr	r3, [r7, #16]
 8035b20:	4413      	add	r3, r2
 8035b22:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8035b24:	8abb      	ldrh	r3, [r7, #20]
 8035b26:	3301      	adds	r3, #1
 8035b28:	82bb      	strh	r3, [r7, #20]
 8035b2a:	8abb      	ldrh	r3, [r7, #20]
 8035b2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8035b2e:	d9e1      	bls.n	8035af4 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 8035b30:	8abb      	ldrh	r3, [r7, #20]
 8035b32:	2b2f      	cmp	r3, #47	@ 0x2f
 8035b34:	d902      	bls.n	8035b3c <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 8035b36:	23ae      	movs	r3, #174	@ 0xae
 8035b38:	75fb      	strb	r3, [r7, #23]
 8035b3a:	e14a      	b.n	8035dd2 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 8035b3c:	693b      	ldr	r3, [r7, #16]
 8035b3e:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8035b42:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8035b46:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8035b48:	68fb      	ldr	r3, [r7, #12]
 8035b4a:	3b04      	subs	r3, #4
 8035b4c:	60fb      	str	r3, [r7, #12]
 8035b4e:	68fb      	ldr	r3, [r7, #12]
 8035b50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8035b54:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 8035b56:	687b      	ldr	r3, [r7, #4]
 8035b58:	681a      	ldr	r2, [r3, #0]
 8035b5a:	68fb      	ldr	r3, [r7, #12]
 8035b5c:	3b04      	subs	r3, #4
 8035b5e:	60fb      	str	r3, [r7, #12]
 8035b60:	68fb      	ldr	r3, [r7, #12]
 8035b62:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8035b64:	68fb      	ldr	r3, [r7, #12]
 8035b66:	3b04      	subs	r3, #4
 8035b68:	60fb      	str	r3, [r7, #12]
 8035b6a:	68fb      	ldr	r3, [r7, #12]
 8035b6c:	f06f 0202 	mvn.w	r2, #2
 8035b70:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 8035b72:	68fb      	ldr	r3, [r7, #12]
 8035b74:	3b04      	subs	r3, #4
 8035b76:	60fb      	str	r3, [r7, #12]
 8035b78:	68fb      	ldr	r3, [r7, #12]
 8035b7a:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8035b7e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 8035b80:	68fb      	ldr	r3, [r7, #12]
 8035b82:	3b04      	subs	r3, #4
 8035b84:	60fb      	str	r3, [r7, #12]
 8035b86:	68fb      	ldr	r3, [r7, #12]
 8035b88:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8035b8c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 8035b8e:	68fb      	ldr	r3, [r7, #12]
 8035b90:	3b04      	subs	r3, #4
 8035b92:	60fb      	str	r3, [r7, #12]
 8035b94:	68fb      	ldr	r3, [r7, #12]
 8035b96:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8035b9a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 8035b9c:	68fb      	ldr	r3, [r7, #12]
 8035b9e:	3b04      	subs	r3, #4
 8035ba0:	60fb      	str	r3, [r7, #12]
 8035ba2:	68fb      	ldr	r3, [r7, #12]
 8035ba4:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8035ba8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 8035baa:	68fb      	ldr	r3, [r7, #12]
 8035bac:	3b04      	subs	r3, #4
 8035bae:	60fb      	str	r3, [r7, #12]
 8035bb0:	68fb      	ldr	r3, [r7, #12]
 8035bb2:	2200      	movs	r2, #0
 8035bb4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 8035bb6:	68fb      	ldr	r3, [r7, #12]
 8035bb8:	3b04      	subs	r3, #4
 8035bba:	60fb      	str	r3, [r7, #12]
 8035bbc:	68fb      	ldr	r3, [r7, #12]
 8035bbe:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8035bc2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 8035bc4:	68fb      	ldr	r3, [r7, #12]
 8035bc6:	3b04      	subs	r3, #4
 8035bc8:	60fb      	str	r3, [r7, #12]
 8035bca:	68fb      	ldr	r3, [r7, #12]
 8035bcc:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8035bd0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 8035bd2:	68fb      	ldr	r3, [r7, #12]
 8035bd4:	3b04      	subs	r3, #4
 8035bd6:	60fb      	str	r3, [r7, #12]
 8035bd8:	68fb      	ldr	r3, [r7, #12]
 8035bda:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8035bde:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 8035be0:	68fb      	ldr	r3, [r7, #12]
 8035be2:	3b04      	subs	r3, #4
 8035be4:	60fb      	str	r3, [r7, #12]
 8035be6:	68fb      	ldr	r3, [r7, #12]
 8035be8:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8035bec:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 8035bee:	68fb      	ldr	r3, [r7, #12]
 8035bf0:	3b04      	subs	r3, #4
 8035bf2:	60fb      	str	r3, [r7, #12]
 8035bf4:	68fb      	ldr	r3, [r7, #12]
 8035bf6:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8035bfa:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 8035bfc:	68fb      	ldr	r3, [r7, #12]
 8035bfe:	3b04      	subs	r3, #4
 8035c00:	60fb      	str	r3, [r7, #12]
 8035c02:	68fb      	ldr	r3, [r7, #12]
 8035c04:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8035c08:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 8035c0a:	68fb      	ldr	r3, [r7, #12]
 8035c0c:	3b04      	subs	r3, #4
 8035c0e:	60fb      	str	r3, [r7, #12]
 8035c10:	68fb      	ldr	r3, [r7, #12]
 8035c12:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8035c16:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 8035c18:	68fb      	ldr	r3, [r7, #12]
 8035c1a:	3b04      	subs	r3, #4
 8035c1c:	60fb      	str	r3, [r7, #12]
 8035c1e:	68fb      	ldr	r3, [r7, #12]
 8035c20:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8035c24:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 8035c26:	8abb      	ldrh	r3, [r7, #20]
 8035c28:	68fa      	ldr	r2, [r7, #12]
 8035c2a:	493c      	ldr	r1, [pc, #240]	@ (8035d1c <gos_taskRegister+0x260>)
 8035c2c:	206a      	movs	r0, #106	@ 0x6a
 8035c2e:	fb00 f303 	mul.w	r3, r0, r3
 8035c32:	440b      	add	r3, r1
 8035c34:	333c      	adds	r3, #60	@ 0x3c
 8035c36:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 8035c38:	8abb      	ldrh	r3, [r7, #20]
 8035c3a:	4a38      	ldr	r2, [pc, #224]	@ (8035d1c <gos_taskRegister+0x260>)
 8035c3c:	216a      	movs	r1, #106	@ 0x6a
 8035c3e:	fb01 f303 	mul.w	r3, r1, r3
 8035c42:	4413      	add	r3, r2
 8035c44:	3304      	adds	r3, #4
 8035c46:	220a      	movs	r2, #10
 8035c48:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 8035c4a:	8abb      	ldrh	r3, [r7, #20]
 8035c4c:	687a      	ldr	r2, [r7, #4]
 8035c4e:	6812      	ldr	r2, [r2, #0]
 8035c50:	4932      	ldr	r1, [pc, #200]	@ (8035d1c <gos_taskRegister+0x260>)
 8035c52:	206a      	movs	r0, #106	@ 0x6a
 8035c54:	fb00 f303 	mul.w	r3, r0, r3
 8035c58:	440b      	add	r3, r1
 8035c5a:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 8035c5c:	8abb      	ldrh	r3, [r7, #20]
 8035c5e:	687a      	ldr	r2, [r7, #4]
 8035c60:	7990      	ldrb	r0, [r2, #6]
 8035c62:	4a2e      	ldr	r2, [pc, #184]	@ (8035d1c <gos_taskRegister+0x260>)
 8035c64:	216a      	movs	r1, #106	@ 0x6a
 8035c66:	fb01 f303 	mul.w	r3, r1, r3
 8035c6a:	4413      	add	r3, r2
 8035c6c:	3306      	adds	r3, #6
 8035c6e:	4602      	mov	r2, r0
 8035c70:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 8035c72:	8abb      	ldrh	r3, [r7, #20]
 8035c74:	687a      	ldr	r2, [r7, #4]
 8035c76:	7990      	ldrb	r0, [r2, #6]
 8035c78:	4a28      	ldr	r2, [pc, #160]	@ (8035d1c <gos_taskRegister+0x260>)
 8035c7a:	216a      	movs	r1, #106	@ 0x6a
 8035c7c:	fb01 f303 	mul.w	r3, r1, r3
 8035c80:	4413      	add	r3, r2
 8035c82:	3307      	adds	r3, #7
 8035c84:	4602      	mov	r2, r0
 8035c86:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 8035c88:	8abb      	ldrh	r3, [r7, #20]
 8035c8a:	687a      	ldr	r2, [r7, #4]
 8035c8c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8035c90:	b290      	uxth	r0, r2
 8035c92:	4a22      	ldr	r2, [pc, #136]	@ (8035d1c <gos_taskRegister+0x260>)
 8035c94:	216a      	movs	r1, #106	@ 0x6a
 8035c96:	fb01 f303 	mul.w	r3, r1, r3
 8035c9a:	4413      	add	r3, r2
 8035c9c:	3348      	adds	r3, #72	@ 0x48
 8035c9e:	4602      	mov	r2, r0
 8035ca0:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 8035ca2:	8abb      	ldrh	r3, [r7, #20]
 8035ca4:	8aba      	ldrh	r2, [r7, #20]
 8035ca6:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 8035caa:	b290      	uxth	r0, r2
 8035cac:	4a1b      	ldr	r2, [pc, #108]	@ (8035d1c <gos_taskRegister+0x260>)
 8035cae:	216a      	movs	r1, #106	@ 0x6a
 8035cb0:	fb01 f303 	mul.w	r3, r1, r3
 8035cb4:	4413      	add	r3, r2
 8035cb6:	332a      	adds	r3, #42	@ 0x2a
 8035cb8:	4602      	mov	r2, r0
 8035cba:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 8035cbc:	8abb      	ldrh	r3, [r7, #20]
 8035cbe:	687a      	ldr	r2, [r7, #4]
 8035cc0:	8912      	ldrh	r2, [r2, #8]
 8035cc2:	b290      	uxth	r0, r2
 8035cc4:	4a15      	ldr	r2, [pc, #84]	@ (8035d1c <gos_taskRegister+0x260>)
 8035cc6:	216a      	movs	r1, #106	@ 0x6a
 8035cc8:	fb01 f303 	mul.w	r3, r1, r3
 8035ccc:	4413      	add	r3, r2
 8035cce:	3308      	adds	r3, #8
 8035cd0:	4602      	mov	r2, r0
 8035cd2:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 8035cd4:	687b      	ldr	r3, [r7, #4]
 8035cd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8035cda:	b29b      	uxth	r3, r3
 8035cdc:	2b00      	cmp	r3, #0
 8035cde:	d10a      	bne.n	8035cf6 <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8035ce0:	8abb      	ldrh	r3, [r7, #20]
 8035ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8035d1c <gos_taskRegister+0x260>)
 8035ce4:	216a      	movs	r1, #106	@ 0x6a
 8035ce6:	fb01 f303 	mul.w	r3, r1, r3
 8035cea:	4413      	add	r3, r2
 8035cec:	335e      	adds	r3, #94	@ 0x5e
 8035cee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8035cf2:	801a      	strh	r2, [r3, #0]
 8035cf4:	e021      	b.n	8035d3a <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 8035cf6:	687b      	ldr	r3, [r7, #4]
 8035cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8035cfc:	b29b      	uxth	r3, r3
 8035cfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8035d02:	4293      	cmp	r3, r2
 8035d04:	d90c      	bls.n	8035d20 <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8035d06:	8abb      	ldrh	r3, [r7, #20]
 8035d08:	4a04      	ldr	r2, [pc, #16]	@ (8035d1c <gos_taskRegister+0x260>)
 8035d0a:	216a      	movs	r1, #106	@ 0x6a
 8035d0c:	fb01 f303 	mul.w	r3, r1, r3
 8035d10:	4413      	add	r3, r2
 8035d12:	335e      	adds	r3, #94	@ 0x5e
 8035d14:	f242 7210 	movw	r2, #10000	@ 0x2710
 8035d18:	801a      	strh	r2, [r3, #0]
 8035d1a:	e00e      	b.n	8035d3a <gos_taskRegister+0x27e>
 8035d1c:	200018fc 	.word	0x200018fc
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 8035d20:	8abb      	ldrh	r3, [r7, #20]
 8035d22:	687a      	ldr	r2, [r7, #4]
 8035d24:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8035d28:	b290      	uxth	r0, r2
 8035d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8035ddc <gos_taskRegister+0x320>)
 8035d2c:	216a      	movs	r1, #106	@ 0x6a
 8035d2e:	fb01 f303 	mul.w	r3, r1, r3
 8035d32:	4413      	add	r3, r2
 8035d34:	335e      	adds	r3, #94	@ 0x5e
 8035d36:	4602      	mov	r2, r0
 8035d38:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 8035d3a:	687b      	ldr	r3, [r7, #4]
 8035d3c:	330a      	adds	r3, #10
 8035d3e:	2b00      	cmp	r3, #0
 8035d40:	d015      	beq.n	8035d6e <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 8035d42:	687b      	ldr	r3, [r7, #4]
 8035d44:	330a      	adds	r3, #10
 8035d46:	4618      	mov	r0, r3
 8035d48:	f7ea fac2 	bl	80202d0 <strlen>
 8035d4c:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 8035d4e:	2b20      	cmp	r3, #32
 8035d50:	d80d      	bhi.n	8035d6e <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 8035d52:	8abb      	ldrh	r3, [r7, #20]
 8035d54:	226a      	movs	r2, #106	@ 0x6a
 8035d56:	fb02 f303 	mul.w	r3, r2, r3
 8035d5a:	3308      	adds	r3, #8
 8035d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8035ddc <gos_taskRegister+0x320>)
 8035d5e:	4413      	add	r3, r2
 8035d60:	1c9a      	adds	r2, r3, #2
 8035d62:	687b      	ldr	r3, [r7, #4]
 8035d64:	330a      	adds	r3, #10
 8035d66:	4619      	mov	r1, r3
 8035d68:	4610      	mov	r0, r2
 8035d6a:	f006 fa2a 	bl	803c1c2 <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 8035d6e:	8abb      	ldrh	r3, [r7, #20]
 8035d70:	4a1a      	ldr	r2, [pc, #104]	@ (8035ddc <gos_taskRegister+0x320>)
 8035d72:	216a      	movs	r1, #106	@ 0x6a
 8035d74:	fb01 f303 	mul.w	r3, r1, r3
 8035d78:	4413      	add	r3, r2
 8035d7a:	332a      	adds	r3, #42	@ 0x2a
 8035d7c:	881a      	ldrh	r2, [r3, #0]
 8035d7e:	687b      	ldr	r3, [r7, #4]
 8035d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
            if (taskId != NULL)
 8035d82:	683b      	ldr	r3, [r7, #0]
 8035d84:	2b00      	cmp	r3, #0
 8035d86:	d009      	beq.n	8035d9c <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 8035d88:	8abb      	ldrh	r3, [r7, #20]
 8035d8a:	4a14      	ldr	r2, [pc, #80]	@ (8035ddc <gos_taskRegister+0x320>)
 8035d8c:	216a      	movs	r1, #106	@ 0x6a
 8035d8e:	fb01 f303 	mul.w	r3, r1, r3
 8035d92:	4413      	add	r3, r2
 8035d94:	332a      	adds	r3, #42	@ 0x2a
 8035d96:	881a      	ldrh	r2, [r3, #0]
 8035d98:	683b      	ldr	r3, [r7, #0]
 8035d9a:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8035d9c:	8abb      	ldrh	r3, [r7, #20]
 8035d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8035ddc <gos_taskRegister+0x320>)
 8035da0:	216a      	movs	r1, #106	@ 0x6a
 8035da2:	fb01 f303 	mul.w	r3, r1, r3
 8035da6:	4413      	add	r3, r2
 8035da8:	333c      	adds	r3, #60	@ 0x3c
 8035daa:	681b      	ldr	r3, [r3, #0]
 8035dac:	8aba      	ldrh	r2, [r7, #20]
 8035dae:	490b      	ldr	r1, [pc, #44]	@ (8035ddc <gos_taskRegister+0x320>)
 8035db0:	206a      	movs	r0, #106	@ 0x6a
 8035db2:	fb00 f202 	mul.w	r2, r0, r2
 8035db6:	440a      	add	r2, r1
 8035db8:	3248      	adds	r2, #72	@ 0x48
 8035dba:	8812      	ldrh	r2, [r2, #0]
 8035dbc:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8035dbe:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8035dc0:	3240      	adds	r2, #64	@ 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8035dc2:	4906      	ldr	r1, [pc, #24]	@ (8035ddc <gos_taskRegister+0x320>)
 8035dc4:	206a      	movs	r0, #106	@ 0x6a
 8035dc6:	fb00 f303 	mul.w	r3, r0, r3
 8035dca:	440b      	add	r3, r1
 8035dcc:	3360      	adds	r3, #96	@ 0x60
 8035dce:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 8035dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8035dd4:	4618      	mov	r0, r3
 8035dd6:	3718      	adds	r7, #24
 8035dd8:	46bd      	mov	sp, r7
 8035dda:	bd80      	pop	{r7, pc}
 8035ddc:	200018fc 	.word	0x200018fc

08035de0 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 8035de0:	b580      	push	{r7, lr}
 8035de2:	b084      	sub	sp, #16
 8035de4:	af00      	add	r7, sp, #0
 8035de6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 8035de8:	23ae      	movs	r3, #174	@ 0xae
 8035dea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (isKernelRunning == GOS_FALSE)
 8035dec:	4b3f      	ldr	r3, [pc, #252]	@ (8035eec <gos_taskSleep+0x10c>)
 8035dee:	781b      	ldrb	r3, [r3, #0]
 8035df0:	2b49      	cmp	r3, #73	@ 0x49
 8035df2:	d105      	bne.n	8035e00 <gos_taskSleep+0x20>
    {
    	gos_kernelDelayMs(sleepTicks);
 8035df4:	687b      	ldr	r3, [r7, #4]
 8035df6:	b29b      	uxth	r3, r3
 8035df8:	4618      	mov	r0, r3
 8035dfa:	f7fe fe7f 	bl	8034afc <gos_kernelDelayMs>
 8035dfe:	e070      	b.n	8035ee2 <gos_taskSleep+0x102>
    }
    else
    {
        if (currentTaskIndex > 0u)
 8035e00:	4b3b      	ldr	r3, [pc, #236]	@ (8035ef0 <gos_taskSleep+0x110>)
 8035e02:	681b      	ldr	r3, [r3, #0]
 8035e04:	2b00      	cmp	r3, #0
 8035e06:	d06c      	beq.n	8035ee2 <gos_taskSleep+0x102>
        {
            GOS_ATOMIC_ENTER
 8035e08:	4b3a      	ldr	r3, [pc, #232]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035e0a:	781b      	ldrb	r3, [r3, #0]
 8035e0c:	2b00      	cmp	r3, #0
 8035e0e:	d108      	bne.n	8035e22 <gos_taskSleep+0x42>
 8035e10:	b672      	cpsid	i
 8035e12:	f3ef 8310 	mrs	r3, PRIMASK
 8035e16:	4a38      	ldr	r2, [pc, #224]	@ (8035ef8 <gos_taskSleep+0x118>)
 8035e18:	6013      	str	r3, [r2, #0]
 8035e1a:	f3bf 8f4f 	dsb	sy
 8035e1e:	f3bf 8f6f 	isb	sy
 8035e22:	4b34      	ldr	r3, [pc, #208]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035e24:	781b      	ldrb	r3, [r3, #0]
 8035e26:	3301      	adds	r3, #1
 8035e28:	b2da      	uxtb	r2, r3
 8035e2a:	4b32      	ldr	r3, [pc, #200]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035e2c:	701a      	strb	r2, [r3, #0]
 8035e2e:	4b33      	ldr	r3, [pc, #204]	@ (8035efc <gos_taskSleep+0x11c>)
 8035e30:	781b      	ldrb	r3, [r3, #0]
 8035e32:	3301      	adds	r3, #1
 8035e34:	b2da      	uxtb	r2, r3
 8035e36:	4b31      	ldr	r3, [pc, #196]	@ (8035efc <gos_taskSleep+0x11c>)
 8035e38:	701a      	strb	r2, [r3, #0]
            {
                if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 8035e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8035ef0 <gos_taskSleep+0x110>)
 8035e3c:	681b      	ldr	r3, [r3, #0]
 8035e3e:	4a30      	ldr	r2, [pc, #192]	@ (8035f00 <gos_taskSleep+0x120>)
 8035e40:	216a      	movs	r1, #106	@ 0x6a
 8035e42:	fb01 f303 	mul.w	r3, r1, r3
 8035e46:	4413      	add	r3, r2
 8035e48:	3304      	adds	r3, #4
 8035e4a:	781b      	ldrb	r3, [r3, #0]
 8035e4c:	2b0a      	cmp	r3, #10
 8035e4e:	d121      	bne.n	8035e94 <gos_taskSleep+0xb4>
                {
                    taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 8035e50:	4b27      	ldr	r3, [pc, #156]	@ (8035ef0 <gos_taskSleep+0x110>)
 8035e52:	681b      	ldr	r3, [r3, #0]
 8035e54:	4a2a      	ldr	r2, [pc, #168]	@ (8035f00 <gos_taskSleep+0x120>)
 8035e56:	216a      	movs	r1, #106	@ 0x6a
 8035e58:	fb01 f303 	mul.w	r3, r1, r3
 8035e5c:	4413      	add	r3, r2
 8035e5e:	3304      	adds	r3, #4
 8035e60:	2216      	movs	r2, #22
 8035e62:	701a      	strb	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8035e64:	4b22      	ldr	r3, [pc, #136]	@ (8035ef0 <gos_taskSleep+0x110>)
 8035e66:	681b      	ldr	r3, [r3, #0]
 8035e68:	4a25      	ldr	r2, [pc, #148]	@ (8035f00 <gos_taskSleep+0x120>)
 8035e6a:	216a      	movs	r1, #106	@ 0x6a
 8035e6c:	fb01 f303 	mul.w	r3, r1, r3
 8035e70:	4413      	add	r3, r2
 8035e72:	332c      	adds	r3, #44	@ 0x2c
 8035e74:	687a      	ldr	r2, [r7, #4]
 8035e76:	601a      	str	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 8035e78:	4b1d      	ldr	r3, [pc, #116]	@ (8035ef0 <gos_taskSleep+0x110>)
 8035e7a:	681b      	ldr	r3, [r3, #0]
 8035e7c:	4a20      	ldr	r2, [pc, #128]	@ (8035f00 <gos_taskSleep+0x120>)
 8035e7e:	216a      	movs	r1, #106	@ 0x6a
 8035e80:	fb01 f303 	mul.w	r3, r1, r3
 8035e84:	4413      	add	r3, r2
 8035e86:	3330      	adds	r3, #48	@ 0x30
 8035e88:	2200      	movs	r2, #0
 8035e8a:	801a      	strh	r2, [r3, #0]
 8035e8c:	2200      	movs	r2, #0
 8035e8e:	805a      	strh	r2, [r3, #2]
                    taskSleepResult = GOS_SUCCESS;
 8035e90:	2355      	movs	r3, #85	@ 0x55
 8035e92:	73fb      	strb	r3, [r7, #15]
                else
                {
                    // Nothing to do.
                }
            }
            GOS_ATOMIC_EXIT
 8035e94:	4b17      	ldr	r3, [pc, #92]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035e96:	781b      	ldrb	r3, [r3, #0]
 8035e98:	2b00      	cmp	r3, #0
 8035e9a:	d005      	beq.n	8035ea8 <gos_taskSleep+0xc8>
 8035e9c:	4b15      	ldr	r3, [pc, #84]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035e9e:	781b      	ldrb	r3, [r3, #0]
 8035ea0:	3b01      	subs	r3, #1
 8035ea2:	b2da      	uxtb	r2, r3
 8035ea4:	4b13      	ldr	r3, [pc, #76]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035ea6:	701a      	strb	r2, [r3, #0]
 8035ea8:	4b12      	ldr	r3, [pc, #72]	@ (8035ef4 <gos_taskSleep+0x114>)
 8035eaa:	781b      	ldrb	r3, [r3, #0]
 8035eac:	2b00      	cmp	r3, #0
 8035eae:	d108      	bne.n	8035ec2 <gos_taskSleep+0xe2>
 8035eb0:	4b11      	ldr	r3, [pc, #68]	@ (8035ef8 <gos_taskSleep+0x118>)
 8035eb2:	681b      	ldr	r3, [r3, #0]
 8035eb4:	f383 8810 	msr	PRIMASK, r3
 8035eb8:	b662      	cpsie	i
 8035eba:	f3bf 8f4f 	dsb	sy
 8035ebe:	f3bf 8f6f 	isb	sy
 8035ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8035efc <gos_taskSleep+0x11c>)
 8035ec4:	781b      	ldrb	r3, [r3, #0]
 8035ec6:	2b00      	cmp	r3, #0
 8035ec8:	d005      	beq.n	8035ed6 <gos_taskSleep+0xf6>
 8035eca:	4b0c      	ldr	r3, [pc, #48]	@ (8035efc <gos_taskSleep+0x11c>)
 8035ecc:	781b      	ldrb	r3, [r3, #0]
 8035ece:	3b01      	subs	r3, #1
 8035ed0:	b2da      	uxtb	r2, r3
 8035ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8035efc <gos_taskSleep+0x11c>)
 8035ed4:	701a      	strb	r2, [r3, #0]

            if (taskSleepResult == GOS_SUCCESS)
 8035ed6:	7bfb      	ldrb	r3, [r7, #15]
 8035ed8:	2b55      	cmp	r3, #85	@ 0x55
 8035eda:	d102      	bne.n	8035ee2 <gos_taskSleep+0x102>
            {
                // Unprivileged.
                gos_kernelReschedule(GOS_UNPRIVILEGED);
 8035edc:	2009      	movs	r0, #9
 8035ede:	f7ff fb37 	bl	8035550 <gos_kernelReschedule>
        {
            // Idle task cannot sleep.
        }
    }

    return taskSleepResult;
 8035ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8035ee4:	4618      	mov	r0, r3
 8035ee6:	3710      	adds	r7, #16
 8035ee8:	46bd      	mov	sp, r7
 8035eea:	bd80      	pop	{r7, pc}
 8035eec:	200018f8 	.word	0x200018f8
 8035ef0:	2000b318 	.word	0x2000b318
 8035ef4:	2000b313 	.word	0x2000b313
 8035ef8:	2000b314 	.word	0x2000b314
 8035efc:	2000b311 	.word	0x2000b311
 8035f00:	200018fc 	.word	0x200018fc

08035f04 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 8035f04:	b580      	push	{r7, lr}
 8035f06:	b086      	sub	sp, #24
 8035f08:	af02      	add	r7, sp, #8
 8035f0a:	4603      	mov	r3, r0
 8035f0c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 8035f0e:	23ae      	movs	r3, #174	@ 0xae
 8035f10:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8035f12:	2300      	movs	r3, #0
 8035f14:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8035f16:	4b56      	ldr	r3, [pc, #344]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035f18:	781b      	ldrb	r3, [r3, #0]
 8035f1a:	2b00      	cmp	r3, #0
 8035f1c:	d108      	bne.n	8035f30 <gos_taskWakeup+0x2c>
 8035f1e:	b672      	cpsid	i
 8035f20:	f3ef 8310 	mrs	r3, PRIMASK
 8035f24:	4a53      	ldr	r2, [pc, #332]	@ (8036074 <gos_taskWakeup+0x170>)
 8035f26:	6013      	str	r3, [r2, #0]
 8035f28:	f3bf 8f4f 	dsb	sy
 8035f2c:	f3bf 8f6f 	isb	sy
 8035f30:	4b4f      	ldr	r3, [pc, #316]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035f32:	781b      	ldrb	r3, [r3, #0]
 8035f34:	3301      	adds	r3, #1
 8035f36:	b2da      	uxtb	r2, r3
 8035f38:	4b4d      	ldr	r3, [pc, #308]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035f3a:	701a      	strb	r2, [r3, #0]
 8035f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8036078 <gos_taskWakeup+0x174>)
 8035f3e:	781b      	ldrb	r3, [r3, #0]
 8035f40:	3301      	adds	r3, #1
 8035f42:	b2da      	uxtb	r2, r3
 8035f44:	4b4c      	ldr	r3, [pc, #304]	@ (8036078 <gos_taskWakeup+0x174>)
 8035f46:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8035f48:	88fb      	ldrh	r3, [r7, #6]
 8035f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8035f4e:	d969      	bls.n	8036024 <gos_taskWakeup+0x120>
 8035f50:	88fb      	ldrh	r3, [r7, #6]
 8035f52:	f248 022f 	movw	r2, #32815	@ 0x802f
 8035f56:	4293      	cmp	r3, r2
 8035f58:	d864      	bhi.n	8036024 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8035f5a:	88fb      	ldrh	r3, [r7, #6]
 8035f5c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8035f60:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8035f62:	4b46      	ldr	r3, [pc, #280]	@ (803607c <gos_taskWakeup+0x178>)
 8035f64:	681b      	ldr	r3, [r3, #0]
 8035f66:	4a46      	ldr	r2, [pc, #280]	@ (8036080 <gos_taskWakeup+0x17c>)
 8035f68:	216a      	movs	r1, #106	@ 0x6a
 8035f6a:	fb01 f303 	mul.w	r3, r1, r3
 8035f6e:	4413      	add	r3, r2
 8035f70:	3308      	adds	r3, #8
 8035f72:	881b      	ldrh	r3, [r3, #0]
 8035f74:	b21b      	sxth	r3, r3
 8035f76:	2b00      	cmp	r3, #0
 8035f78:	db03      	blt.n	8035f82 <gos_taskWakeup+0x7e>
            inIsr > 0)
 8035f7a:	4b42      	ldr	r3, [pc, #264]	@ (8036084 <gos_taskWakeup+0x180>)
 8035f7c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8035f7e:	2b00      	cmp	r3, #0
 8035f80:	d015      	beq.n	8035fae <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8035f82:	4a3f      	ldr	r2, [pc, #252]	@ (8036080 <gos_taskWakeup+0x17c>)
 8035f84:	68bb      	ldr	r3, [r7, #8]
 8035f86:	216a      	movs	r1, #106	@ 0x6a
 8035f88:	fb01 f303 	mul.w	r3, r1, r3
 8035f8c:	4413      	add	r3, r2
 8035f8e:	3304      	adds	r3, #4
 8035f90:	781b      	ldrb	r3, [r3, #0]
 8035f92:	2b16      	cmp	r3, #22
 8035f94:	d146      	bne.n	8036024 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8035f96:	4a3a      	ldr	r2, [pc, #232]	@ (8036080 <gos_taskWakeup+0x17c>)
 8035f98:	68bb      	ldr	r3, [r7, #8]
 8035f9a:	216a      	movs	r1, #106	@ 0x6a
 8035f9c:	fb01 f303 	mul.w	r3, r1, r3
 8035fa0:	4413      	add	r3, r2
 8035fa2:	3304      	adds	r3, #4
 8035fa4:	220a      	movs	r2, #10
 8035fa6:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 8035fa8:	2355      	movs	r3, #85	@ 0x55
 8035faa:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8035fac:	e03a      	b.n	8036024 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8035fae:	4b30      	ldr	r3, [pc, #192]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035fb0:	781b      	ldrb	r3, [r3, #0]
 8035fb2:	2b00      	cmp	r3, #0
 8035fb4:	d005      	beq.n	8035fc2 <gos_taskWakeup+0xbe>
 8035fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035fb8:	781b      	ldrb	r3, [r3, #0]
 8035fba:	3b01      	subs	r3, #1
 8035fbc:	b2da      	uxtb	r2, r3
 8035fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035fc0:	701a      	strb	r2, [r3, #0]
 8035fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8036070 <gos_taskWakeup+0x16c>)
 8035fc4:	781b      	ldrb	r3, [r3, #0]
 8035fc6:	2b00      	cmp	r3, #0
 8035fc8:	d108      	bne.n	8035fdc <gos_taskWakeup+0xd8>
 8035fca:	4b2a      	ldr	r3, [pc, #168]	@ (8036074 <gos_taskWakeup+0x170>)
 8035fcc:	681b      	ldr	r3, [r3, #0]
 8035fce:	f383 8810 	msr	PRIMASK, r3
 8035fd2:	b662      	cpsie	i
 8035fd4:	f3bf 8f4f 	dsb	sy
 8035fd8:	f3bf 8f6f 	isb	sy
 8035fdc:	4b26      	ldr	r3, [pc, #152]	@ (8036078 <gos_taskWakeup+0x174>)
 8035fde:	781b      	ldrb	r3, [r3, #0]
 8035fe0:	2b00      	cmp	r3, #0
 8035fe2:	d005      	beq.n	8035ff0 <gos_taskWakeup+0xec>
 8035fe4:	4b24      	ldr	r3, [pc, #144]	@ (8036078 <gos_taskWakeup+0x174>)
 8035fe6:	781b      	ldrb	r3, [r3, #0]
 8035fe8:	3b01      	subs	r3, #1
 8035fea:	b2da      	uxtb	r2, r3
 8035fec:	4b22      	ldr	r3, [pc, #136]	@ (8036078 <gos_taskWakeup+0x174>)
 8035fee:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8035ff0:	4b22      	ldr	r3, [pc, #136]	@ (803607c <gos_taskWakeup+0x178>)
 8035ff2:	681b      	ldr	r3, [r3, #0]
 8035ff4:	226a      	movs	r2, #106	@ 0x6a
 8035ff6:	fb02 f303 	mul.w	r3, r2, r3
 8035ffa:	3308      	adds	r3, #8
 8035ffc:	4a20      	ldr	r2, [pc, #128]	@ (8036080 <gos_taskWakeup+0x17c>)
 8035ffe:	4413      	add	r3, r2
 8036000:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8036002:	68ba      	ldr	r2, [r7, #8]
 8036004:	216a      	movs	r1, #106	@ 0x6a
 8036006:	fb01 f202 	mul.w	r2, r1, r2
 803600a:	3208      	adds	r2, #8
 803600c:	491c      	ldr	r1, [pc, #112]	@ (8036080 <gos_taskWakeup+0x17c>)
 803600e:	440a      	add	r2, r1
 8036010:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 8036012:	9201      	str	r2, [sp, #4]
 8036014:	9300      	str	r3, [sp, #0]
 8036016:	4b1c      	ldr	r3, [pc, #112]	@ (8036088 <gos_taskWakeup+0x184>)
 8036018:	f240 1275 	movw	r2, #373	@ 0x175
 803601c:	491b      	ldr	r1, [pc, #108]	@ (803608c <gos_taskWakeup+0x188>)
 803601e:	2034      	movs	r0, #52	@ 0x34
 8036020:	f001 fc42 	bl	80378a8 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8036024:	4b12      	ldr	r3, [pc, #72]	@ (8036070 <gos_taskWakeup+0x16c>)
 8036026:	781b      	ldrb	r3, [r3, #0]
 8036028:	2b00      	cmp	r3, #0
 803602a:	d005      	beq.n	8036038 <gos_taskWakeup+0x134>
 803602c:	4b10      	ldr	r3, [pc, #64]	@ (8036070 <gos_taskWakeup+0x16c>)
 803602e:	781b      	ldrb	r3, [r3, #0]
 8036030:	3b01      	subs	r3, #1
 8036032:	b2da      	uxtb	r2, r3
 8036034:	4b0e      	ldr	r3, [pc, #56]	@ (8036070 <gos_taskWakeup+0x16c>)
 8036036:	701a      	strb	r2, [r3, #0]
 8036038:	4b0d      	ldr	r3, [pc, #52]	@ (8036070 <gos_taskWakeup+0x16c>)
 803603a:	781b      	ldrb	r3, [r3, #0]
 803603c:	2b00      	cmp	r3, #0
 803603e:	d108      	bne.n	8036052 <gos_taskWakeup+0x14e>
 8036040:	4b0c      	ldr	r3, [pc, #48]	@ (8036074 <gos_taskWakeup+0x170>)
 8036042:	681b      	ldr	r3, [r3, #0]
 8036044:	f383 8810 	msr	PRIMASK, r3
 8036048:	b662      	cpsie	i
 803604a:	f3bf 8f4f 	dsb	sy
 803604e:	f3bf 8f6f 	isb	sy
 8036052:	4b09      	ldr	r3, [pc, #36]	@ (8036078 <gos_taskWakeup+0x174>)
 8036054:	781b      	ldrb	r3, [r3, #0]
 8036056:	2b00      	cmp	r3, #0
 8036058:	d005      	beq.n	8036066 <gos_taskWakeup+0x162>
 803605a:	4b07      	ldr	r3, [pc, #28]	@ (8036078 <gos_taskWakeup+0x174>)
 803605c:	781b      	ldrb	r3, [r3, #0]
 803605e:	3b01      	subs	r3, #1
 8036060:	b2da      	uxtb	r2, r3
 8036062:	4b05      	ldr	r3, [pc, #20]	@ (8036078 <gos_taskWakeup+0x174>)
 8036064:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 8036066:	7bfb      	ldrb	r3, [r7, #15]
}
 8036068:	4618      	mov	r0, r3
 803606a:	3710      	adds	r7, #16
 803606c:	46bd      	mov	sp, r7
 803606e:	bd80      	pop	{r7, pc}
 8036070:	2000b313 	.word	0x2000b313
 8036074:	2000b314 	.word	0x2000b314
 8036078:	2000b311 	.word	0x2000b311
 803607c:	2000b318 	.word	0x2000b318
 8036080:	200018fc 	.word	0x200018fc
 8036084:	2000b312 	.word	0x2000b312
 8036088:	0803ee04 	.word	0x0803ee04
 803608c:	080407c0 	.word	0x080407c0

08036090 <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 8036090:	b580      	push	{r7, lr}
 8036092:	b086      	sub	sp, #24
 8036094:	af02      	add	r7, sp, #8
 8036096:	4603      	mov	r3, r0
 8036098:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 803609a:	23ae      	movs	r3, #174	@ 0xae
 803609c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 803609e:	2300      	movs	r3, #0
 80360a0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80360a2:	4b84      	ldr	r3, [pc, #528]	@ (80362b4 <gos_taskSuspend+0x224>)
 80360a4:	781b      	ldrb	r3, [r3, #0]
 80360a6:	2b00      	cmp	r3, #0
 80360a8:	d108      	bne.n	80360bc <gos_taskSuspend+0x2c>
 80360aa:	b672      	cpsid	i
 80360ac:	f3ef 8310 	mrs	r3, PRIMASK
 80360b0:	4a81      	ldr	r2, [pc, #516]	@ (80362b8 <gos_taskSuspend+0x228>)
 80360b2:	6013      	str	r3, [r2, #0]
 80360b4:	f3bf 8f4f 	dsb	sy
 80360b8:	f3bf 8f6f 	isb	sy
 80360bc:	4b7d      	ldr	r3, [pc, #500]	@ (80362b4 <gos_taskSuspend+0x224>)
 80360be:	781b      	ldrb	r3, [r3, #0]
 80360c0:	3301      	adds	r3, #1
 80360c2:	b2da      	uxtb	r2, r3
 80360c4:	4b7b      	ldr	r3, [pc, #492]	@ (80362b4 <gos_taskSuspend+0x224>)
 80360c6:	701a      	strb	r2, [r3, #0]
 80360c8:	4b7c      	ldr	r3, [pc, #496]	@ (80362bc <gos_taskSuspend+0x22c>)
 80360ca:	781b      	ldrb	r3, [r3, #0]
 80360cc:	3301      	adds	r3, #1
 80360ce:	b2da      	uxtb	r2, r3
 80360d0:	4b7a      	ldr	r3, [pc, #488]	@ (80362bc <gos_taskSuspend+0x22c>)
 80360d2:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80360d4:	88fb      	ldrh	r3, [r7, #6]
 80360d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80360da:	f240 80c1 	bls.w	8036260 <gos_taskSuspend+0x1d0>
 80360de:	88fb      	ldrh	r3, [r7, #6]
 80360e0:	f248 022f 	movw	r2, #32815	@ 0x802f
 80360e4:	4293      	cmp	r3, r2
 80360e6:	f200 80bb 	bhi.w	8036260 <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80360ea:	88fb      	ldrh	r3, [r7, #6]
 80360ec:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80360f0:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80360f2:	4b73      	ldr	r3, [pc, #460]	@ (80362c0 <gos_taskSuspend+0x230>)
 80360f4:	681b      	ldr	r3, [r3, #0]
 80360f6:	4a73      	ldr	r2, [pc, #460]	@ (80362c4 <gos_taskSuspend+0x234>)
 80360f8:	216a      	movs	r1, #106	@ 0x6a
 80360fa:	fb01 f303 	mul.w	r3, r1, r3
 80360fe:	4413      	add	r3, r2
 8036100:	3308      	adds	r3, #8
 8036102:	881b      	ldrh	r3, [r3, #0]
 8036104:	b21b      	sxth	r3, r3
 8036106:	2b00      	cmp	r3, #0
 8036108:	db08      	blt.n	803611c <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 803610a:	4b6d      	ldr	r3, [pc, #436]	@ (80362c0 <gos_taskSuspend+0x230>)
 803610c:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803610e:	68ba      	ldr	r2, [r7, #8]
 8036110:	429a      	cmp	r2, r3
 8036112:	d003      	beq.n	803611c <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8036114:	4b6c      	ldr	r3, [pc, #432]	@ (80362c8 <gos_taskSuspend+0x238>)
 8036116:	781b      	ldrb	r3, [r3, #0]
 8036118:	2b00      	cmp	r3, #0
 803611a:	d064      	beq.n	80361e6 <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 803611c:	4a69      	ldr	r2, [pc, #420]	@ (80362c4 <gos_taskSuspend+0x234>)
 803611e:	68bb      	ldr	r3, [r7, #8]
 8036120:	216a      	movs	r1, #106	@ 0x6a
 8036122:	fb01 f303 	mul.w	r3, r1, r3
 8036126:	4413      	add	r3, r2
 8036128:	3304      	adds	r3, #4
 803612a:	781b      	ldrb	r3, [r3, #0]
 803612c:	2b0a      	cmp	r3, #10
 803612e:	d014      	beq.n	803615a <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8036130:	4a64      	ldr	r2, [pc, #400]	@ (80362c4 <gos_taskSuspend+0x234>)
 8036132:	68bb      	ldr	r3, [r7, #8]
 8036134:	216a      	movs	r1, #106	@ 0x6a
 8036136:	fb01 f303 	mul.w	r3, r1, r3
 803613a:	4413      	add	r3, r2
 803613c:	3304      	adds	r3, #4
 803613e:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8036140:	2b16      	cmp	r3, #22
 8036142:	d00a      	beq.n	803615a <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8036144:	4a5f      	ldr	r2, [pc, #380]	@ (80362c4 <gos_taskSuspend+0x234>)
 8036146:	68bb      	ldr	r3, [r7, #8]
 8036148:	216a      	movs	r1, #106	@ 0x6a
 803614a:	fb01 f303 	mul.w	r3, r1, r3
 803614e:	4413      	add	r3, r2
 8036150:	3304      	adds	r3, #4
 8036152:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8036154:	2b19      	cmp	r3, #25
 8036156:	f040 8082 	bne.w	803625e <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 803615a:	4a5a      	ldr	r2, [pc, #360]	@ (80362c4 <gos_taskSuspend+0x234>)
 803615c:	68bb      	ldr	r3, [r7, #8]
 803615e:	216a      	movs	r1, #106	@ 0x6a
 8036160:	fb01 f303 	mul.w	r3, r1, r3
 8036164:	4413      	add	r3, r2
 8036166:	3304      	adds	r3, #4
 8036168:	7818      	ldrb	r0, [r3, #0]
 803616a:	4a56      	ldr	r2, [pc, #344]	@ (80362c4 <gos_taskSuspend+0x234>)
 803616c:	68bb      	ldr	r3, [r7, #8]
 803616e:	216a      	movs	r1, #106	@ 0x6a
 8036170:	fb01 f303 	mul.w	r3, r1, r3
 8036174:	4413      	add	r3, r2
 8036176:	3305      	adds	r3, #5
 8036178:	4602      	mov	r2, r0
 803617a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 803617c:	4a51      	ldr	r2, [pc, #324]	@ (80362c4 <gos_taskSuspend+0x234>)
 803617e:	68bb      	ldr	r3, [r7, #8]
 8036180:	216a      	movs	r1, #106	@ 0x6a
 8036182:	fb01 f303 	mul.w	r3, r1, r3
 8036186:	4413      	add	r3, r2
 8036188:	3304      	adds	r3, #4
 803618a:	2205      	movs	r2, #5
 803618c:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 803618e:	2355      	movs	r3, #85	@ 0x55
 8036190:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8036192:	4b48      	ldr	r3, [pc, #288]	@ (80362b4 <gos_taskSuspend+0x224>)
 8036194:	781b      	ldrb	r3, [r3, #0]
 8036196:	2b00      	cmp	r3, #0
 8036198:	d005      	beq.n	80361a6 <gos_taskSuspend+0x116>
 803619a:	4b46      	ldr	r3, [pc, #280]	@ (80362b4 <gos_taskSuspend+0x224>)
 803619c:	781b      	ldrb	r3, [r3, #0]
 803619e:	3b01      	subs	r3, #1
 80361a0:	b2da      	uxtb	r2, r3
 80361a2:	4b44      	ldr	r3, [pc, #272]	@ (80362b4 <gos_taskSuspend+0x224>)
 80361a4:	701a      	strb	r2, [r3, #0]
 80361a6:	4b43      	ldr	r3, [pc, #268]	@ (80362b4 <gos_taskSuspend+0x224>)
 80361a8:	781b      	ldrb	r3, [r3, #0]
 80361aa:	2b00      	cmp	r3, #0
 80361ac:	d108      	bne.n	80361c0 <gos_taskSuspend+0x130>
 80361ae:	4b42      	ldr	r3, [pc, #264]	@ (80362b8 <gos_taskSuspend+0x228>)
 80361b0:	681b      	ldr	r3, [r3, #0]
 80361b2:	f383 8810 	msr	PRIMASK, r3
 80361b6:	b662      	cpsie	i
 80361b8:	f3bf 8f4f 	dsb	sy
 80361bc:	f3bf 8f6f 	isb	sy
 80361c0:	4b3e      	ldr	r3, [pc, #248]	@ (80362bc <gos_taskSuspend+0x22c>)
 80361c2:	781b      	ldrb	r3, [r3, #0]
 80361c4:	2b00      	cmp	r3, #0
 80361c6:	d005      	beq.n	80361d4 <gos_taskSuspend+0x144>
 80361c8:	4b3c      	ldr	r3, [pc, #240]	@ (80362bc <gos_taskSuspend+0x22c>)
 80361ca:	781b      	ldrb	r3, [r3, #0]
 80361cc:	3b01      	subs	r3, #1
 80361ce:	b2da      	uxtb	r2, r3
 80361d0:	4b3a      	ldr	r3, [pc, #232]	@ (80362bc <gos_taskSuspend+0x22c>)
 80361d2:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 80361d4:	4b3a      	ldr	r3, [pc, #232]	@ (80362c0 <gos_taskSuspend+0x230>)
 80361d6:	681b      	ldr	r3, [r3, #0]
 80361d8:	68ba      	ldr	r2, [r7, #8]
 80361da:	429a      	cmp	r2, r3
 80361dc:	d13f      	bne.n	803625e <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 80361de:	2009      	movs	r0, #9
 80361e0:	f7ff f9b6 	bl	8035550 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 80361e4:	e03b      	b.n	803625e <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80361e6:	4b33      	ldr	r3, [pc, #204]	@ (80362b4 <gos_taskSuspend+0x224>)
 80361e8:	781b      	ldrb	r3, [r3, #0]
 80361ea:	2b00      	cmp	r3, #0
 80361ec:	d005      	beq.n	80361fa <gos_taskSuspend+0x16a>
 80361ee:	4b31      	ldr	r3, [pc, #196]	@ (80362b4 <gos_taskSuspend+0x224>)
 80361f0:	781b      	ldrb	r3, [r3, #0]
 80361f2:	3b01      	subs	r3, #1
 80361f4:	b2da      	uxtb	r2, r3
 80361f6:	4b2f      	ldr	r3, [pc, #188]	@ (80362b4 <gos_taskSuspend+0x224>)
 80361f8:	701a      	strb	r2, [r3, #0]
 80361fa:	4b2e      	ldr	r3, [pc, #184]	@ (80362b4 <gos_taskSuspend+0x224>)
 80361fc:	781b      	ldrb	r3, [r3, #0]
 80361fe:	2b00      	cmp	r3, #0
 8036200:	d108      	bne.n	8036214 <gos_taskSuspend+0x184>
 8036202:	4b2d      	ldr	r3, [pc, #180]	@ (80362b8 <gos_taskSuspend+0x228>)
 8036204:	681b      	ldr	r3, [r3, #0]
 8036206:	f383 8810 	msr	PRIMASK, r3
 803620a:	b662      	cpsie	i
 803620c:	f3bf 8f4f 	dsb	sy
 8036210:	f3bf 8f6f 	isb	sy
 8036214:	4b29      	ldr	r3, [pc, #164]	@ (80362bc <gos_taskSuspend+0x22c>)
 8036216:	781b      	ldrb	r3, [r3, #0]
 8036218:	2b00      	cmp	r3, #0
 803621a:	d005      	beq.n	8036228 <gos_taskSuspend+0x198>
 803621c:	4b27      	ldr	r3, [pc, #156]	@ (80362bc <gos_taskSuspend+0x22c>)
 803621e:	781b      	ldrb	r3, [r3, #0]
 8036220:	3b01      	subs	r3, #1
 8036222:	b2da      	uxtb	r2, r3
 8036224:	4b25      	ldr	r3, [pc, #148]	@ (80362bc <gos_taskSuspend+0x22c>)
 8036226:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8036228:	4b25      	ldr	r3, [pc, #148]	@ (80362c0 <gos_taskSuspend+0x230>)
 803622a:	681b      	ldr	r3, [r3, #0]
 803622c:	226a      	movs	r2, #106	@ 0x6a
 803622e:	fb02 f303 	mul.w	r3, r2, r3
 8036232:	3308      	adds	r3, #8
 8036234:	4a23      	ldr	r2, [pc, #140]	@ (80362c4 <gos_taskSuspend+0x234>)
 8036236:	4413      	add	r3, r2
 8036238:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803623a:	68ba      	ldr	r2, [r7, #8]
 803623c:	216a      	movs	r1, #106	@ 0x6a
 803623e:	fb01 f202 	mul.w	r2, r1, r2
 8036242:	3208      	adds	r2, #8
 8036244:	491f      	ldr	r1, [pc, #124]	@ (80362c4 <gos_taskSuspend+0x234>)
 8036246:	440a      	add	r2, r1
 8036248:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 803624a:	9201      	str	r2, [sp, #4]
 803624c:	9300      	str	r3, [sp, #0]
 803624e:	4b1f      	ldr	r3, [pc, #124]	@ (80362cc <gos_taskSuspend+0x23c>)
 8036250:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8036254:	491e      	ldr	r1, [pc, #120]	@ (80362d0 <gos_taskSuspend+0x240>)
 8036256:	2034      	movs	r0, #52	@ 0x34
 8036258:	f001 fb26 	bl	80378a8 <gos_errorHandler>
 803625c:	e000      	b.n	8036260 <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 803625e:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 8036260:	7bfb      	ldrb	r3, [r7, #15]
 8036262:	2b55      	cmp	r3, #85	@ 0x55
 8036264:	d020      	beq.n	80362a8 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 8036266:	4b13      	ldr	r3, [pc, #76]	@ (80362b4 <gos_taskSuspend+0x224>)
 8036268:	781b      	ldrb	r3, [r3, #0]
 803626a:	2b00      	cmp	r3, #0
 803626c:	d005      	beq.n	803627a <gos_taskSuspend+0x1ea>
 803626e:	4b11      	ldr	r3, [pc, #68]	@ (80362b4 <gos_taskSuspend+0x224>)
 8036270:	781b      	ldrb	r3, [r3, #0]
 8036272:	3b01      	subs	r3, #1
 8036274:	b2da      	uxtb	r2, r3
 8036276:	4b0f      	ldr	r3, [pc, #60]	@ (80362b4 <gos_taskSuspend+0x224>)
 8036278:	701a      	strb	r2, [r3, #0]
 803627a:	4b0e      	ldr	r3, [pc, #56]	@ (80362b4 <gos_taskSuspend+0x224>)
 803627c:	781b      	ldrb	r3, [r3, #0]
 803627e:	2b00      	cmp	r3, #0
 8036280:	d108      	bne.n	8036294 <gos_taskSuspend+0x204>
 8036282:	4b0d      	ldr	r3, [pc, #52]	@ (80362b8 <gos_taskSuspend+0x228>)
 8036284:	681b      	ldr	r3, [r3, #0]
 8036286:	f383 8810 	msr	PRIMASK, r3
 803628a:	b662      	cpsie	i
 803628c:	f3bf 8f4f 	dsb	sy
 8036290:	f3bf 8f6f 	isb	sy
 8036294:	4b09      	ldr	r3, [pc, #36]	@ (80362bc <gos_taskSuspend+0x22c>)
 8036296:	781b      	ldrb	r3, [r3, #0]
 8036298:	2b00      	cmp	r3, #0
 803629a:	d005      	beq.n	80362a8 <gos_taskSuspend+0x218>
 803629c:	4b07      	ldr	r3, [pc, #28]	@ (80362bc <gos_taskSuspend+0x22c>)
 803629e:	781b      	ldrb	r3, [r3, #0]
 80362a0:	3b01      	subs	r3, #1
 80362a2:	b2da      	uxtb	r2, r3
 80362a4:	4b05      	ldr	r3, [pc, #20]	@ (80362bc <gos_taskSuspend+0x22c>)
 80362a6:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 80362a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80362aa:	4618      	mov	r0, r3
 80362ac:	3710      	adds	r7, #16
 80362ae:	46bd      	mov	sp, r7
 80362b0:	bd80      	pop	{r7, pc}
 80362b2:	bf00      	nop
 80362b4:	2000b313 	.word	0x2000b313
 80362b8:	2000b314 	.word	0x2000b314
 80362bc:	2000b311 	.word	0x2000b311
 80362c0:	2000b318 	.word	0x2000b318
 80362c4:	200018fc 	.word	0x200018fc
 80362c8:	2000b312 	.word	0x2000b312
 80362cc:	0803ee2c 	.word	0x0803ee2c
 80362d0:	080407d0 	.word	0x080407d0

080362d4 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 80362d4:	b580      	push	{r7, lr}
 80362d6:	b086      	sub	sp, #24
 80362d8:	af02      	add	r7, sp, #8
 80362da:	4603      	mov	r3, r0
 80362dc:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 80362de:	23ae      	movs	r3, #174	@ 0xae
 80362e0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 80362e2:	2300      	movs	r3, #0
 80362e4:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80362e6:	4b4a      	ldr	r3, [pc, #296]	@ (8036410 <gos_taskResume+0x13c>)
 80362e8:	781b      	ldrb	r3, [r3, #0]
 80362ea:	2b00      	cmp	r3, #0
 80362ec:	d108      	bne.n	8036300 <gos_taskResume+0x2c>
 80362ee:	b672      	cpsid	i
 80362f0:	f3ef 8310 	mrs	r3, PRIMASK
 80362f4:	4a47      	ldr	r2, [pc, #284]	@ (8036414 <gos_taskResume+0x140>)
 80362f6:	6013      	str	r3, [r2, #0]
 80362f8:	f3bf 8f4f 	dsb	sy
 80362fc:	f3bf 8f6f 	isb	sy
 8036300:	4b43      	ldr	r3, [pc, #268]	@ (8036410 <gos_taskResume+0x13c>)
 8036302:	781b      	ldrb	r3, [r3, #0]
 8036304:	3301      	adds	r3, #1
 8036306:	b2da      	uxtb	r2, r3
 8036308:	4b41      	ldr	r3, [pc, #260]	@ (8036410 <gos_taskResume+0x13c>)
 803630a:	701a      	strb	r2, [r3, #0]
 803630c:	4b42      	ldr	r3, [pc, #264]	@ (8036418 <gos_taskResume+0x144>)
 803630e:	781b      	ldrb	r3, [r3, #0]
 8036310:	3301      	adds	r3, #1
 8036312:	b2da      	uxtb	r2, r3
 8036314:	4b40      	ldr	r3, [pc, #256]	@ (8036418 <gos_taskResume+0x144>)
 8036316:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8036318:	88fb      	ldrh	r3, [r7, #6]
 803631a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 803631e:	d950      	bls.n	80363c2 <gos_taskResume+0xee>
 8036320:	88fb      	ldrh	r3, [r7, #6]
 8036322:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036326:	4293      	cmp	r3, r2
 8036328:	d84b      	bhi.n	80363c2 <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803632a:	88fb      	ldrh	r3, [r7, #6]
 803632c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036330:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8036332:	4b3a      	ldr	r3, [pc, #232]	@ (803641c <gos_taskResume+0x148>)
 8036334:	681b      	ldr	r3, [r3, #0]
 8036336:	4a3a      	ldr	r2, [pc, #232]	@ (8036420 <gos_taskResume+0x14c>)
 8036338:	216a      	movs	r1, #106	@ 0x6a
 803633a:	fb01 f303 	mul.w	r3, r1, r3
 803633e:	4413      	add	r3, r2
 8036340:	3308      	adds	r3, #8
 8036342:	881b      	ldrh	r3, [r3, #0]
 8036344:	b21b      	sxth	r3, r3
 8036346:	2b00      	cmp	r3, #0
 8036348:	db03      	blt.n	8036352 <gos_taskResume+0x7e>
            inIsr > 0)
 803634a:	4b36      	ldr	r3, [pc, #216]	@ (8036424 <gos_taskResume+0x150>)
 803634c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803634e:	2b00      	cmp	r3, #0
 8036350:	d01d      	beq.n	803638e <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8036352:	4a33      	ldr	r2, [pc, #204]	@ (8036420 <gos_taskResume+0x14c>)
 8036354:	68bb      	ldr	r3, [r7, #8]
 8036356:	216a      	movs	r1, #106	@ 0x6a
 8036358:	fb01 f303 	mul.w	r3, r1, r3
 803635c:	4413      	add	r3, r2
 803635e:	3304      	adds	r3, #4
 8036360:	781b      	ldrb	r3, [r3, #0]
 8036362:	2b05      	cmp	r3, #5
 8036364:	d12d      	bne.n	80363c2 <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8036366:	4a2e      	ldr	r2, [pc, #184]	@ (8036420 <gos_taskResume+0x14c>)
 8036368:	68bb      	ldr	r3, [r7, #8]
 803636a:	216a      	movs	r1, #106	@ 0x6a
 803636c:	fb01 f303 	mul.w	r3, r1, r3
 8036370:	4413      	add	r3, r2
 8036372:	3305      	adds	r3, #5
 8036374:	7818      	ldrb	r0, [r3, #0]
 8036376:	4a2a      	ldr	r2, [pc, #168]	@ (8036420 <gos_taskResume+0x14c>)
 8036378:	68bb      	ldr	r3, [r7, #8]
 803637a:	216a      	movs	r1, #106	@ 0x6a
 803637c:	fb01 f303 	mul.w	r3, r1, r3
 8036380:	4413      	add	r3, r2
 8036382:	3304      	adds	r3, #4
 8036384:	4602      	mov	r2, r0
 8036386:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8036388:	2355      	movs	r3, #85	@ 0x55
 803638a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 803638c:	e019      	b.n	80363c2 <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803638e:	4b23      	ldr	r3, [pc, #140]	@ (803641c <gos_taskResume+0x148>)
 8036390:	681b      	ldr	r3, [r3, #0]
 8036392:	226a      	movs	r2, #106	@ 0x6a
 8036394:	fb02 f303 	mul.w	r3, r2, r3
 8036398:	3308      	adds	r3, #8
 803639a:	4a21      	ldr	r2, [pc, #132]	@ (8036420 <gos_taskResume+0x14c>)
 803639c:	4413      	add	r3, r2
 803639e:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80363a0:	68ba      	ldr	r2, [r7, #8]
 80363a2:	216a      	movs	r1, #106	@ 0x6a
 80363a4:	fb01 f202 	mul.w	r2, r1, r2
 80363a8:	3208      	adds	r2, #8
 80363aa:	491d      	ldr	r1, [pc, #116]	@ (8036420 <gos_taskResume+0x14c>)
 80363ac:	440a      	add	r2, r1
 80363ae:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 80363b0:	9201      	str	r2, [sp, #4]
 80363b2:	9300      	str	r3, [sp, #0]
 80363b4:	4b1c      	ldr	r3, [pc, #112]	@ (8036428 <gos_taskResume+0x154>)
 80363b6:	f240 12f1 	movw	r2, #497	@ 0x1f1
 80363ba:	491c      	ldr	r1, [pc, #112]	@ (803642c <gos_taskResume+0x158>)
 80363bc:	2034      	movs	r0, #52	@ 0x34
 80363be:	f001 fa73 	bl	80378a8 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 80363c2:	4b13      	ldr	r3, [pc, #76]	@ (8036410 <gos_taskResume+0x13c>)
 80363c4:	781b      	ldrb	r3, [r3, #0]
 80363c6:	2b00      	cmp	r3, #0
 80363c8:	d005      	beq.n	80363d6 <gos_taskResume+0x102>
 80363ca:	4b11      	ldr	r3, [pc, #68]	@ (8036410 <gos_taskResume+0x13c>)
 80363cc:	781b      	ldrb	r3, [r3, #0]
 80363ce:	3b01      	subs	r3, #1
 80363d0:	b2da      	uxtb	r2, r3
 80363d2:	4b0f      	ldr	r3, [pc, #60]	@ (8036410 <gos_taskResume+0x13c>)
 80363d4:	701a      	strb	r2, [r3, #0]
 80363d6:	4b0e      	ldr	r3, [pc, #56]	@ (8036410 <gos_taskResume+0x13c>)
 80363d8:	781b      	ldrb	r3, [r3, #0]
 80363da:	2b00      	cmp	r3, #0
 80363dc:	d108      	bne.n	80363f0 <gos_taskResume+0x11c>
 80363de:	4b0d      	ldr	r3, [pc, #52]	@ (8036414 <gos_taskResume+0x140>)
 80363e0:	681b      	ldr	r3, [r3, #0]
 80363e2:	f383 8810 	msr	PRIMASK, r3
 80363e6:	b662      	cpsie	i
 80363e8:	f3bf 8f4f 	dsb	sy
 80363ec:	f3bf 8f6f 	isb	sy
 80363f0:	4b09      	ldr	r3, [pc, #36]	@ (8036418 <gos_taskResume+0x144>)
 80363f2:	781b      	ldrb	r3, [r3, #0]
 80363f4:	2b00      	cmp	r3, #0
 80363f6:	d005      	beq.n	8036404 <gos_taskResume+0x130>
 80363f8:	4b07      	ldr	r3, [pc, #28]	@ (8036418 <gos_taskResume+0x144>)
 80363fa:	781b      	ldrb	r3, [r3, #0]
 80363fc:	3b01      	subs	r3, #1
 80363fe:	b2da      	uxtb	r2, r3
 8036400:	4b05      	ldr	r3, [pc, #20]	@ (8036418 <gos_taskResume+0x144>)
 8036402:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 8036404:	7bfb      	ldrb	r3, [r7, #15]
}
 8036406:	4618      	mov	r0, r3
 8036408:	3710      	adds	r7, #16
 803640a:	46bd      	mov	sp, r7
 803640c:	bd80      	pop	{r7, pc}
 803640e:	bf00      	nop
 8036410:	2000b313 	.word	0x2000b313
 8036414:	2000b314 	.word	0x2000b314
 8036418:	2000b311 	.word	0x2000b311
 803641c:	2000b318 	.word	0x2000b318
 8036420:	200018fc 	.word	0x200018fc
 8036424:	2000b312 	.word	0x2000b312
 8036428:	0803ee54 	.word	0x0803ee54
 803642c:	080407e0 	.word	0x080407e0

08036430 <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 8036430:	b580      	push	{r7, lr}
 8036432:	b086      	sub	sp, #24
 8036434:	af02      	add	r7, sp, #8
 8036436:	4603      	mov	r3, r0
 8036438:	6039      	str	r1, [r7, #0]
 803643a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 803643c:	23ae      	movs	r3, #174	@ 0xae
 803643e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8036440:	2300      	movs	r3, #0
 8036442:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036444:	4b7b      	ldr	r3, [pc, #492]	@ (8036634 <gos_taskBlock+0x204>)
 8036446:	781b      	ldrb	r3, [r3, #0]
 8036448:	2b00      	cmp	r3, #0
 803644a:	d108      	bne.n	803645e <gos_taskBlock+0x2e>
 803644c:	b672      	cpsid	i
 803644e:	f3ef 8310 	mrs	r3, PRIMASK
 8036452:	4a79      	ldr	r2, [pc, #484]	@ (8036638 <gos_taskBlock+0x208>)
 8036454:	6013      	str	r3, [r2, #0]
 8036456:	f3bf 8f4f 	dsb	sy
 803645a:	f3bf 8f6f 	isb	sy
 803645e:	4b75      	ldr	r3, [pc, #468]	@ (8036634 <gos_taskBlock+0x204>)
 8036460:	781b      	ldrb	r3, [r3, #0]
 8036462:	3301      	adds	r3, #1
 8036464:	b2da      	uxtb	r2, r3
 8036466:	4b73      	ldr	r3, [pc, #460]	@ (8036634 <gos_taskBlock+0x204>)
 8036468:	701a      	strb	r2, [r3, #0]
 803646a:	4b74      	ldr	r3, [pc, #464]	@ (803663c <gos_taskBlock+0x20c>)
 803646c:	781b      	ldrb	r3, [r3, #0]
 803646e:	3301      	adds	r3, #1
 8036470:	b2da      	uxtb	r2, r3
 8036472:	4b72      	ldr	r3, [pc, #456]	@ (803663c <gos_taskBlock+0x20c>)
 8036474:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8036476:	88fb      	ldrh	r3, [r7, #6]
 8036478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 803647c:	f240 80b0 	bls.w	80365e0 <gos_taskBlock+0x1b0>
 8036480:	88fb      	ldrh	r3, [r7, #6]
 8036482:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036486:	4293      	cmp	r3, r2
 8036488:	f200 80aa 	bhi.w	80365e0 <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803648c:	88fb      	ldrh	r3, [r7, #6]
 803648e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036492:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8036494:	4b6a      	ldr	r3, [pc, #424]	@ (8036640 <gos_taskBlock+0x210>)
 8036496:	681b      	ldr	r3, [r3, #0]
 8036498:	4a6a      	ldr	r2, [pc, #424]	@ (8036644 <gos_taskBlock+0x214>)
 803649a:	216a      	movs	r1, #106	@ 0x6a
 803649c:	fb01 f303 	mul.w	r3, r1, r3
 80364a0:	4413      	add	r3, r2
 80364a2:	3308      	adds	r3, #8
 80364a4:	881b      	ldrh	r3, [r3, #0]
 80364a6:	b21b      	sxth	r3, r3
 80364a8:	2b00      	cmp	r3, #0
 80364aa:	db08      	blt.n	80364be <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 80364ac:	4b64      	ldr	r3, [pc, #400]	@ (8036640 <gos_taskBlock+0x210>)
 80364ae:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80364b0:	68ba      	ldr	r2, [r7, #8]
 80364b2:	429a      	cmp	r2, r3
 80364b4:	d003      	beq.n	80364be <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 80364b6:	4b64      	ldr	r3, [pc, #400]	@ (8036648 <gos_taskBlock+0x218>)
 80364b8:	781b      	ldrb	r3, [r3, #0]
 80364ba:	2b00      	cmp	r3, #0
 80364bc:	d053      	beq.n	8036566 <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80364be:	4a61      	ldr	r2, [pc, #388]	@ (8036644 <gos_taskBlock+0x214>)
 80364c0:	68bb      	ldr	r3, [r7, #8]
 80364c2:	216a      	movs	r1, #106	@ 0x6a
 80364c4:	fb01 f303 	mul.w	r3, r1, r3
 80364c8:	4413      	add	r3, r2
 80364ca:	3304      	adds	r3, #4
 80364cc:	781b      	ldrb	r3, [r3, #0]
 80364ce:	2b0a      	cmp	r3, #10
 80364d0:	f040 8085 	bne.w	80365de <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 80364d4:	4a5b      	ldr	r2, [pc, #364]	@ (8036644 <gos_taskBlock+0x214>)
 80364d6:	68bb      	ldr	r3, [r7, #8]
 80364d8:	216a      	movs	r1, #106	@ 0x6a
 80364da:	fb01 f303 	mul.w	r3, r1, r3
 80364de:	4413      	add	r3, r2
 80364e0:	3304      	adds	r3, #4
 80364e2:	2219      	movs	r2, #25
 80364e4:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 80364e6:	4a57      	ldr	r2, [pc, #348]	@ (8036644 <gos_taskBlock+0x214>)
 80364e8:	68bb      	ldr	r3, [r7, #8]
 80364ea:	216a      	movs	r1, #106	@ 0x6a
 80364ec:	fb01 f303 	mul.w	r3, r1, r3
 80364f0:	4413      	add	r3, r2
 80364f2:	3334      	adds	r3, #52	@ 0x34
 80364f4:	683a      	ldr	r2, [r7, #0]
 80364f6:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 80364f8:	4a52      	ldr	r2, [pc, #328]	@ (8036644 <gos_taskBlock+0x214>)
 80364fa:	68bb      	ldr	r3, [r7, #8]
 80364fc:	216a      	movs	r1, #106	@ 0x6a
 80364fe:	fb01 f303 	mul.w	r3, r1, r3
 8036502:	4413      	add	r3, r2
 8036504:	3338      	adds	r3, #56	@ 0x38
 8036506:	2200      	movs	r2, #0
 8036508:	801a      	strh	r2, [r3, #0]
 803650a:	2200      	movs	r2, #0
 803650c:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 803650e:	2355      	movs	r3, #85	@ 0x55
 8036510:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8036512:	4b48      	ldr	r3, [pc, #288]	@ (8036634 <gos_taskBlock+0x204>)
 8036514:	781b      	ldrb	r3, [r3, #0]
 8036516:	2b00      	cmp	r3, #0
 8036518:	d005      	beq.n	8036526 <gos_taskBlock+0xf6>
 803651a:	4b46      	ldr	r3, [pc, #280]	@ (8036634 <gos_taskBlock+0x204>)
 803651c:	781b      	ldrb	r3, [r3, #0]
 803651e:	3b01      	subs	r3, #1
 8036520:	b2da      	uxtb	r2, r3
 8036522:	4b44      	ldr	r3, [pc, #272]	@ (8036634 <gos_taskBlock+0x204>)
 8036524:	701a      	strb	r2, [r3, #0]
 8036526:	4b43      	ldr	r3, [pc, #268]	@ (8036634 <gos_taskBlock+0x204>)
 8036528:	781b      	ldrb	r3, [r3, #0]
 803652a:	2b00      	cmp	r3, #0
 803652c:	d108      	bne.n	8036540 <gos_taskBlock+0x110>
 803652e:	4b42      	ldr	r3, [pc, #264]	@ (8036638 <gos_taskBlock+0x208>)
 8036530:	681b      	ldr	r3, [r3, #0]
 8036532:	f383 8810 	msr	PRIMASK, r3
 8036536:	b662      	cpsie	i
 8036538:	f3bf 8f4f 	dsb	sy
 803653c:	f3bf 8f6f 	isb	sy
 8036540:	4b3e      	ldr	r3, [pc, #248]	@ (803663c <gos_taskBlock+0x20c>)
 8036542:	781b      	ldrb	r3, [r3, #0]
 8036544:	2b00      	cmp	r3, #0
 8036546:	d005      	beq.n	8036554 <gos_taskBlock+0x124>
 8036548:	4b3c      	ldr	r3, [pc, #240]	@ (803663c <gos_taskBlock+0x20c>)
 803654a:	781b      	ldrb	r3, [r3, #0]
 803654c:	3b01      	subs	r3, #1
 803654e:	b2da      	uxtb	r2, r3
 8036550:	4b3a      	ldr	r3, [pc, #232]	@ (803663c <gos_taskBlock+0x20c>)
 8036552:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8036554:	4b3a      	ldr	r3, [pc, #232]	@ (8036640 <gos_taskBlock+0x210>)
 8036556:	681b      	ldr	r3, [r3, #0]
 8036558:	68ba      	ldr	r2, [r7, #8]
 803655a:	429a      	cmp	r2, r3
 803655c:	d13f      	bne.n	80365de <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 803655e:	2009      	movs	r0, #9
 8036560:	f7fe fff6 	bl	8035550 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8036564:	e03b      	b.n	80365de <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8036566:	4b33      	ldr	r3, [pc, #204]	@ (8036634 <gos_taskBlock+0x204>)
 8036568:	781b      	ldrb	r3, [r3, #0]
 803656a:	2b00      	cmp	r3, #0
 803656c:	d005      	beq.n	803657a <gos_taskBlock+0x14a>
 803656e:	4b31      	ldr	r3, [pc, #196]	@ (8036634 <gos_taskBlock+0x204>)
 8036570:	781b      	ldrb	r3, [r3, #0]
 8036572:	3b01      	subs	r3, #1
 8036574:	b2da      	uxtb	r2, r3
 8036576:	4b2f      	ldr	r3, [pc, #188]	@ (8036634 <gos_taskBlock+0x204>)
 8036578:	701a      	strb	r2, [r3, #0]
 803657a:	4b2e      	ldr	r3, [pc, #184]	@ (8036634 <gos_taskBlock+0x204>)
 803657c:	781b      	ldrb	r3, [r3, #0]
 803657e:	2b00      	cmp	r3, #0
 8036580:	d108      	bne.n	8036594 <gos_taskBlock+0x164>
 8036582:	4b2d      	ldr	r3, [pc, #180]	@ (8036638 <gos_taskBlock+0x208>)
 8036584:	681b      	ldr	r3, [r3, #0]
 8036586:	f383 8810 	msr	PRIMASK, r3
 803658a:	b662      	cpsie	i
 803658c:	f3bf 8f4f 	dsb	sy
 8036590:	f3bf 8f6f 	isb	sy
 8036594:	4b29      	ldr	r3, [pc, #164]	@ (803663c <gos_taskBlock+0x20c>)
 8036596:	781b      	ldrb	r3, [r3, #0]
 8036598:	2b00      	cmp	r3, #0
 803659a:	d005      	beq.n	80365a8 <gos_taskBlock+0x178>
 803659c:	4b27      	ldr	r3, [pc, #156]	@ (803663c <gos_taskBlock+0x20c>)
 803659e:	781b      	ldrb	r3, [r3, #0]
 80365a0:	3b01      	subs	r3, #1
 80365a2:	b2da      	uxtb	r2, r3
 80365a4:	4b25      	ldr	r3, [pc, #148]	@ (803663c <gos_taskBlock+0x20c>)
 80365a6:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80365a8:	4b25      	ldr	r3, [pc, #148]	@ (8036640 <gos_taskBlock+0x210>)
 80365aa:	681b      	ldr	r3, [r3, #0]
 80365ac:	226a      	movs	r2, #106	@ 0x6a
 80365ae:	fb02 f303 	mul.w	r3, r2, r3
 80365b2:	3308      	adds	r3, #8
 80365b4:	4a23      	ldr	r2, [pc, #140]	@ (8036644 <gos_taskBlock+0x214>)
 80365b6:	4413      	add	r3, r2
 80365b8:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80365ba:	68ba      	ldr	r2, [r7, #8]
 80365bc:	216a      	movs	r1, #106	@ 0x6a
 80365be:	fb01 f202 	mul.w	r2, r1, r2
 80365c2:	3208      	adds	r2, #8
 80365c4:	491f      	ldr	r1, [pc, #124]	@ (8036644 <gos_taskBlock+0x214>)
 80365c6:	440a      	add	r2, r1
 80365c8:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 80365ca:	9201      	str	r2, [sp, #4]
 80365cc:	9300      	str	r3, [sp, #0]
 80365ce:	4b1f      	ldr	r3, [pc, #124]	@ (803664c <gos_taskBlock+0x21c>)
 80365d0:	f240 2235 	movw	r2, #565	@ 0x235
 80365d4:	491e      	ldr	r1, [pc, #120]	@ (8036650 <gos_taskBlock+0x220>)
 80365d6:	2034      	movs	r0, #52	@ 0x34
 80365d8:	f001 f966 	bl	80378a8 <gos_errorHandler>
 80365dc:	e000      	b.n	80365e0 <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80365de:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 80365e0:	7bfb      	ldrb	r3, [r7, #15]
 80365e2:	2b55      	cmp	r3, #85	@ 0x55
 80365e4:	d020      	beq.n	8036628 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 80365e6:	4b13      	ldr	r3, [pc, #76]	@ (8036634 <gos_taskBlock+0x204>)
 80365e8:	781b      	ldrb	r3, [r3, #0]
 80365ea:	2b00      	cmp	r3, #0
 80365ec:	d005      	beq.n	80365fa <gos_taskBlock+0x1ca>
 80365ee:	4b11      	ldr	r3, [pc, #68]	@ (8036634 <gos_taskBlock+0x204>)
 80365f0:	781b      	ldrb	r3, [r3, #0]
 80365f2:	3b01      	subs	r3, #1
 80365f4:	b2da      	uxtb	r2, r3
 80365f6:	4b0f      	ldr	r3, [pc, #60]	@ (8036634 <gos_taskBlock+0x204>)
 80365f8:	701a      	strb	r2, [r3, #0]
 80365fa:	4b0e      	ldr	r3, [pc, #56]	@ (8036634 <gos_taskBlock+0x204>)
 80365fc:	781b      	ldrb	r3, [r3, #0]
 80365fe:	2b00      	cmp	r3, #0
 8036600:	d108      	bne.n	8036614 <gos_taskBlock+0x1e4>
 8036602:	4b0d      	ldr	r3, [pc, #52]	@ (8036638 <gos_taskBlock+0x208>)
 8036604:	681b      	ldr	r3, [r3, #0]
 8036606:	f383 8810 	msr	PRIMASK, r3
 803660a:	b662      	cpsie	i
 803660c:	f3bf 8f4f 	dsb	sy
 8036610:	f3bf 8f6f 	isb	sy
 8036614:	4b09      	ldr	r3, [pc, #36]	@ (803663c <gos_taskBlock+0x20c>)
 8036616:	781b      	ldrb	r3, [r3, #0]
 8036618:	2b00      	cmp	r3, #0
 803661a:	d005      	beq.n	8036628 <gos_taskBlock+0x1f8>
 803661c:	4b07      	ldr	r3, [pc, #28]	@ (803663c <gos_taskBlock+0x20c>)
 803661e:	781b      	ldrb	r3, [r3, #0]
 8036620:	3b01      	subs	r3, #1
 8036622:	b2da      	uxtb	r2, r3
 8036624:	4b05      	ldr	r3, [pc, #20]	@ (803663c <gos_taskBlock+0x20c>)
 8036626:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 8036628:	7bfb      	ldrb	r3, [r7, #15]
}
 803662a:	4618      	mov	r0, r3
 803662c:	3710      	adds	r7, #16
 803662e:	46bd      	mov	sp, r7
 8036630:	bd80      	pop	{r7, pc}
 8036632:	bf00      	nop
 8036634:	2000b313 	.word	0x2000b313
 8036638:	2000b314 	.word	0x2000b314
 803663c:	2000b311 	.word	0x2000b311
 8036640:	2000b318 	.word	0x2000b318
 8036644:	200018fc 	.word	0x200018fc
 8036648:	2000b312 	.word	0x2000b312
 803664c:	0803ee7c 	.word	0x0803ee7c
 8036650:	080407f0 	.word	0x080407f0

08036654 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 8036654:	b580      	push	{r7, lr}
 8036656:	b086      	sub	sp, #24
 8036658:	af02      	add	r7, sp, #8
 803665a:	4603      	mov	r3, r0
 803665c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 803665e:	23ae      	movs	r3, #174	@ 0xae
 8036660:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8036662:	2300      	movs	r3, #0
 8036664:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036666:	4b68      	ldr	r3, [pc, #416]	@ (8036808 <gos_taskUnblock+0x1b4>)
 8036668:	781b      	ldrb	r3, [r3, #0]
 803666a:	2b00      	cmp	r3, #0
 803666c:	d108      	bne.n	8036680 <gos_taskUnblock+0x2c>
 803666e:	b672      	cpsid	i
 8036670:	f3ef 8310 	mrs	r3, PRIMASK
 8036674:	4a65      	ldr	r2, [pc, #404]	@ (803680c <gos_taskUnblock+0x1b8>)
 8036676:	6013      	str	r3, [r2, #0]
 8036678:	f3bf 8f4f 	dsb	sy
 803667c:	f3bf 8f6f 	isb	sy
 8036680:	4b61      	ldr	r3, [pc, #388]	@ (8036808 <gos_taskUnblock+0x1b4>)
 8036682:	781b      	ldrb	r3, [r3, #0]
 8036684:	3301      	adds	r3, #1
 8036686:	b2da      	uxtb	r2, r3
 8036688:	4b5f      	ldr	r3, [pc, #380]	@ (8036808 <gos_taskUnblock+0x1b4>)
 803668a:	701a      	strb	r2, [r3, #0]
 803668c:	4b60      	ldr	r3, [pc, #384]	@ (8036810 <gos_taskUnblock+0x1bc>)
 803668e:	781b      	ldrb	r3, [r3, #0]
 8036690:	3301      	adds	r3, #1
 8036692:	b2da      	uxtb	r2, r3
 8036694:	4b5e      	ldr	r3, [pc, #376]	@ (8036810 <gos_taskUnblock+0x1bc>)
 8036696:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8036698:	88fb      	ldrh	r3, [r7, #6]
 803669a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 803669e:	f240 808d 	bls.w	80367bc <gos_taskUnblock+0x168>
 80366a2:	88fb      	ldrh	r3, [r7, #6]
 80366a4:	f248 022f 	movw	r2, #32815	@ 0x802f
 80366a8:	4293      	cmp	r3, r2
 80366aa:	f200 8087 	bhi.w	80367bc <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80366ae:	88fb      	ldrh	r3, [r7, #6]
 80366b0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80366b4:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80366b6:	4b57      	ldr	r3, [pc, #348]	@ (8036814 <gos_taskUnblock+0x1c0>)
 80366b8:	681b      	ldr	r3, [r3, #0]
 80366ba:	4a57      	ldr	r2, [pc, #348]	@ (8036818 <gos_taskUnblock+0x1c4>)
 80366bc:	216a      	movs	r1, #106	@ 0x6a
 80366be:	fb01 f303 	mul.w	r3, r1, r3
 80366c2:	4413      	add	r3, r2
 80366c4:	3308      	adds	r3, #8
 80366c6:	881b      	ldrh	r3, [r3, #0]
 80366c8:	b21b      	sxth	r3, r3
 80366ca:	2b00      	cmp	r3, #0
 80366cc:	db03      	blt.n	80366d6 <gos_taskUnblock+0x82>
            inIsr > 0)
 80366ce:	4b53      	ldr	r3, [pc, #332]	@ (803681c <gos_taskUnblock+0x1c8>)
 80366d0:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80366d2:	2b00      	cmp	r3, #0
 80366d4:	d035      	beq.n	8036742 <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80366d6:	4a50      	ldr	r2, [pc, #320]	@ (8036818 <gos_taskUnblock+0x1c4>)
 80366d8:	68bb      	ldr	r3, [r7, #8]
 80366da:	216a      	movs	r1, #106	@ 0x6a
 80366dc:	fb01 f303 	mul.w	r3, r1, r3
 80366e0:	4413      	add	r3, r2
 80366e2:	3304      	adds	r3, #4
 80366e4:	781b      	ldrb	r3, [r3, #0]
 80366e6:	2b19      	cmp	r3, #25
 80366e8:	d10b      	bne.n	8036702 <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80366ea:	4a4b      	ldr	r2, [pc, #300]	@ (8036818 <gos_taskUnblock+0x1c4>)
 80366ec:	68bb      	ldr	r3, [r7, #8]
 80366ee:	216a      	movs	r1, #106	@ 0x6a
 80366f0:	fb01 f303 	mul.w	r3, r1, r3
 80366f4:	4413      	add	r3, r2
 80366f6:	3304      	adds	r3, #4
 80366f8:	220a      	movs	r2, #10
 80366fa:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 80366fc:	2355      	movs	r3, #85	@ 0x55
 80366fe:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8036700:	e05b      	b.n	80367ba <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8036702:	4a45      	ldr	r2, [pc, #276]	@ (8036818 <gos_taskUnblock+0x1c4>)
 8036704:	68bb      	ldr	r3, [r7, #8]
 8036706:	216a      	movs	r1, #106	@ 0x6a
 8036708:	fb01 f303 	mul.w	r3, r1, r3
 803670c:	4413      	add	r3, r2
 803670e:	3304      	adds	r3, #4
 8036710:	781b      	ldrb	r3, [r3, #0]
 8036712:	2b05      	cmp	r3, #5
 8036714:	d151      	bne.n	80367ba <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8036716:	4a40      	ldr	r2, [pc, #256]	@ (8036818 <gos_taskUnblock+0x1c4>)
 8036718:	68bb      	ldr	r3, [r7, #8]
 803671a:	216a      	movs	r1, #106	@ 0x6a
 803671c:	fb01 f303 	mul.w	r3, r1, r3
 8036720:	4413      	add	r3, r2
 8036722:	3305      	adds	r3, #5
 8036724:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8036726:	2b19      	cmp	r3, #25
 8036728:	d147      	bne.n	80367ba <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 803672a:	4a3b      	ldr	r2, [pc, #236]	@ (8036818 <gos_taskUnblock+0x1c4>)
 803672c:	68bb      	ldr	r3, [r7, #8]
 803672e:	216a      	movs	r1, #106	@ 0x6a
 8036730:	fb01 f303 	mul.w	r3, r1, r3
 8036734:	4413      	add	r3, r2
 8036736:	3305      	adds	r3, #5
 8036738:	220a      	movs	r2, #10
 803673a:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 803673c:	2355      	movs	r3, #85	@ 0x55
 803673e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8036740:	e03b      	b.n	80367ba <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8036742:	4b31      	ldr	r3, [pc, #196]	@ (8036808 <gos_taskUnblock+0x1b4>)
 8036744:	781b      	ldrb	r3, [r3, #0]
 8036746:	2b00      	cmp	r3, #0
 8036748:	d005      	beq.n	8036756 <gos_taskUnblock+0x102>
 803674a:	4b2f      	ldr	r3, [pc, #188]	@ (8036808 <gos_taskUnblock+0x1b4>)
 803674c:	781b      	ldrb	r3, [r3, #0]
 803674e:	3b01      	subs	r3, #1
 8036750:	b2da      	uxtb	r2, r3
 8036752:	4b2d      	ldr	r3, [pc, #180]	@ (8036808 <gos_taskUnblock+0x1b4>)
 8036754:	701a      	strb	r2, [r3, #0]
 8036756:	4b2c      	ldr	r3, [pc, #176]	@ (8036808 <gos_taskUnblock+0x1b4>)
 8036758:	781b      	ldrb	r3, [r3, #0]
 803675a:	2b00      	cmp	r3, #0
 803675c:	d108      	bne.n	8036770 <gos_taskUnblock+0x11c>
 803675e:	4b2b      	ldr	r3, [pc, #172]	@ (803680c <gos_taskUnblock+0x1b8>)
 8036760:	681b      	ldr	r3, [r3, #0]
 8036762:	f383 8810 	msr	PRIMASK, r3
 8036766:	b662      	cpsie	i
 8036768:	f3bf 8f4f 	dsb	sy
 803676c:	f3bf 8f6f 	isb	sy
 8036770:	4b27      	ldr	r3, [pc, #156]	@ (8036810 <gos_taskUnblock+0x1bc>)
 8036772:	781b      	ldrb	r3, [r3, #0]
 8036774:	2b00      	cmp	r3, #0
 8036776:	d005      	beq.n	8036784 <gos_taskUnblock+0x130>
 8036778:	4b25      	ldr	r3, [pc, #148]	@ (8036810 <gos_taskUnblock+0x1bc>)
 803677a:	781b      	ldrb	r3, [r3, #0]
 803677c:	3b01      	subs	r3, #1
 803677e:	b2da      	uxtb	r2, r3
 8036780:	4b23      	ldr	r3, [pc, #140]	@ (8036810 <gos_taskUnblock+0x1bc>)
 8036782:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8036784:	4b23      	ldr	r3, [pc, #140]	@ (8036814 <gos_taskUnblock+0x1c0>)
 8036786:	681b      	ldr	r3, [r3, #0]
 8036788:	226a      	movs	r2, #106	@ 0x6a
 803678a:	fb02 f303 	mul.w	r3, r2, r3
 803678e:	3308      	adds	r3, #8
 8036790:	4a21      	ldr	r2, [pc, #132]	@ (8036818 <gos_taskUnblock+0x1c4>)
 8036792:	4413      	add	r3, r2
 8036794:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8036796:	68ba      	ldr	r2, [r7, #8]
 8036798:	216a      	movs	r1, #106	@ 0x6a
 803679a:	fb01 f202 	mul.w	r2, r1, r2
 803679e:	3208      	adds	r2, #8
 80367a0:	491d      	ldr	r1, [pc, #116]	@ (8036818 <gos_taskUnblock+0x1c4>)
 80367a2:	440a      	add	r2, r1
 80367a4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 80367a6:	9201      	str	r2, [sp, #4]
 80367a8:	9300      	str	r3, [sp, #0]
 80367aa:	4b1d      	ldr	r3, [pc, #116]	@ (8036820 <gos_taskUnblock+0x1cc>)
 80367ac:	f240 2276 	movw	r2, #630	@ 0x276
 80367b0:	491c      	ldr	r1, [pc, #112]	@ (8036824 <gos_taskUnblock+0x1d0>)
 80367b2:	2034      	movs	r0, #52	@ 0x34
 80367b4:	f001 f878 	bl	80378a8 <gos_errorHandler>
 80367b8:	e000      	b.n	80367bc <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80367ba:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80367bc:	4b12      	ldr	r3, [pc, #72]	@ (8036808 <gos_taskUnblock+0x1b4>)
 80367be:	781b      	ldrb	r3, [r3, #0]
 80367c0:	2b00      	cmp	r3, #0
 80367c2:	d005      	beq.n	80367d0 <gos_taskUnblock+0x17c>
 80367c4:	4b10      	ldr	r3, [pc, #64]	@ (8036808 <gos_taskUnblock+0x1b4>)
 80367c6:	781b      	ldrb	r3, [r3, #0]
 80367c8:	3b01      	subs	r3, #1
 80367ca:	b2da      	uxtb	r2, r3
 80367cc:	4b0e      	ldr	r3, [pc, #56]	@ (8036808 <gos_taskUnblock+0x1b4>)
 80367ce:	701a      	strb	r2, [r3, #0]
 80367d0:	4b0d      	ldr	r3, [pc, #52]	@ (8036808 <gos_taskUnblock+0x1b4>)
 80367d2:	781b      	ldrb	r3, [r3, #0]
 80367d4:	2b00      	cmp	r3, #0
 80367d6:	d108      	bne.n	80367ea <gos_taskUnblock+0x196>
 80367d8:	4b0c      	ldr	r3, [pc, #48]	@ (803680c <gos_taskUnblock+0x1b8>)
 80367da:	681b      	ldr	r3, [r3, #0]
 80367dc:	f383 8810 	msr	PRIMASK, r3
 80367e0:	b662      	cpsie	i
 80367e2:	f3bf 8f4f 	dsb	sy
 80367e6:	f3bf 8f6f 	isb	sy
 80367ea:	4b09      	ldr	r3, [pc, #36]	@ (8036810 <gos_taskUnblock+0x1bc>)
 80367ec:	781b      	ldrb	r3, [r3, #0]
 80367ee:	2b00      	cmp	r3, #0
 80367f0:	d005      	beq.n	80367fe <gos_taskUnblock+0x1aa>
 80367f2:	4b07      	ldr	r3, [pc, #28]	@ (8036810 <gos_taskUnblock+0x1bc>)
 80367f4:	781b      	ldrb	r3, [r3, #0]
 80367f6:	3b01      	subs	r3, #1
 80367f8:	b2da      	uxtb	r2, r3
 80367fa:	4b05      	ldr	r3, [pc, #20]	@ (8036810 <gos_taskUnblock+0x1bc>)
 80367fc:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 80367fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8036800:	4618      	mov	r0, r3
 8036802:	3710      	adds	r7, #16
 8036804:	46bd      	mov	sp, r7
 8036806:	bd80      	pop	{r7, pc}
 8036808:	2000b313 	.word	0x2000b313
 803680c:	2000b314 	.word	0x2000b314
 8036810:	2000b311 	.word	0x2000b311
 8036814:	2000b318 	.word	0x2000b318
 8036818:	200018fc 	.word	0x200018fc
 803681c:	2000b312 	.word	0x2000b312
 8036820:	0803eea4 	.word	0x0803eea4
 8036824:	08040800 	.word	0x08040800

08036828 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 8036828:	b580      	push	{r7, lr}
 803682a:	b086      	sub	sp, #24
 803682c:	af02      	add	r7, sp, #8
 803682e:	4603      	mov	r3, r0
 8036830:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 8036832:	23ae      	movs	r3, #174	@ 0xae
 8036834:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8036836:	2300      	movs	r3, #0
 8036838:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803683a:	4b84      	ldr	r3, [pc, #528]	@ (8036a4c <gos_taskDelete+0x224>)
 803683c:	781b      	ldrb	r3, [r3, #0]
 803683e:	2b00      	cmp	r3, #0
 8036840:	d108      	bne.n	8036854 <gos_taskDelete+0x2c>
 8036842:	b672      	cpsid	i
 8036844:	f3ef 8310 	mrs	r3, PRIMASK
 8036848:	4a81      	ldr	r2, [pc, #516]	@ (8036a50 <gos_taskDelete+0x228>)
 803684a:	6013      	str	r3, [r2, #0]
 803684c:	f3bf 8f4f 	dsb	sy
 8036850:	f3bf 8f6f 	isb	sy
 8036854:	4b7d      	ldr	r3, [pc, #500]	@ (8036a4c <gos_taskDelete+0x224>)
 8036856:	781b      	ldrb	r3, [r3, #0]
 8036858:	3301      	adds	r3, #1
 803685a:	b2da      	uxtb	r2, r3
 803685c:	4b7b      	ldr	r3, [pc, #492]	@ (8036a4c <gos_taskDelete+0x224>)
 803685e:	701a      	strb	r2, [r3, #0]
 8036860:	4b7c      	ldr	r3, [pc, #496]	@ (8036a54 <gos_taskDelete+0x22c>)
 8036862:	781b      	ldrb	r3, [r3, #0]
 8036864:	3301      	adds	r3, #1
 8036866:	b2da      	uxtb	r2, r3
 8036868:	4b7a      	ldr	r3, [pc, #488]	@ (8036a54 <gos_taskDelete+0x22c>)
 803686a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803686c:	88fb      	ldrh	r3, [r7, #6]
 803686e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8036872:	f240 80b9 	bls.w	80369e8 <gos_taskDelete+0x1c0>
 8036876:	88fb      	ldrh	r3, [r7, #6]
 8036878:	f248 022f 	movw	r2, #32815	@ 0x802f
 803687c:	4293      	cmp	r3, r2
 803687e:	f200 80b3 	bhi.w	80369e8 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8036882:	88fb      	ldrh	r3, [r7, #6]
 8036884:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036888:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803688a:	4b73      	ldr	r3, [pc, #460]	@ (8036a58 <gos_taskDelete+0x230>)
 803688c:	681b      	ldr	r3, [r3, #0]
 803688e:	4a73      	ldr	r2, [pc, #460]	@ (8036a5c <gos_taskDelete+0x234>)
 8036890:	216a      	movs	r1, #106	@ 0x6a
 8036892:	fb01 f303 	mul.w	r3, r1, r3
 8036896:	4413      	add	r3, r2
 8036898:	3308      	adds	r3, #8
 803689a:	881b      	ldrh	r3, [r3, #0]
 803689c:	b21b      	sxth	r3, r3
 803689e:	2b00      	cmp	r3, #0
 80368a0:	db08      	blt.n	80368b4 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80368a2:	4b6d      	ldr	r3, [pc, #436]	@ (8036a58 <gos_taskDelete+0x230>)
 80368a4:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80368a6:	68ba      	ldr	r2, [r7, #8]
 80368a8:	429a      	cmp	r2, r3
 80368aa:	d003      	beq.n	80368b4 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80368ac:	4b6c      	ldr	r3, [pc, #432]	@ (8036a60 <gos_taskDelete+0x238>)
 80368ae:	781b      	ldrb	r3, [r3, #0]
 80368b0:	2b00      	cmp	r3, #0
 80368b2:	d05e      	beq.n	8036972 <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80368b4:	4a69      	ldr	r2, [pc, #420]	@ (8036a5c <gos_taskDelete+0x234>)
 80368b6:	68bb      	ldr	r3, [r7, #8]
 80368b8:	216a      	movs	r1, #106	@ 0x6a
 80368ba:	fb01 f303 	mul.w	r3, r1, r3
 80368be:	4413      	add	r3, r2
 80368c0:	3304      	adds	r3, #4
 80368c2:	781b      	ldrb	r3, [r3, #0]
 80368c4:	2b0d      	cmp	r3, #13
 80368c6:	f000 808f 	beq.w	80369e8 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 80368ca:	4a64      	ldr	r2, [pc, #400]	@ (8036a5c <gos_taskDelete+0x234>)
 80368cc:	68bb      	ldr	r3, [r7, #8]
 80368ce:	216a      	movs	r1, #106	@ 0x6a
 80368d0:	fb01 f303 	mul.w	r3, r1, r3
 80368d4:	4413      	add	r3, r2
 80368d6:	3304      	adds	r3, #4
 80368d8:	220d      	movs	r2, #13
 80368da:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 80368dc:	2355      	movs	r3, #85	@ 0x55
 80368de:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 80368e0:	4b5d      	ldr	r3, [pc, #372]	@ (8036a58 <gos_taskDelete+0x230>)
 80368e2:	681b      	ldr	r3, [r3, #0]
 80368e4:	4a5d      	ldr	r2, [pc, #372]	@ (8036a5c <gos_taskDelete+0x234>)
 80368e6:	216a      	movs	r1, #106	@ 0x6a
 80368e8:	fb01 f303 	mul.w	r3, r1, r3
 80368ec:	4413      	add	r3, r2
 80368ee:	3308      	adds	r3, #8
 80368f0:	881b      	ldrh	r3, [r3, #0]
 80368f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80368f6:	2b00      	cmp	r3, #0
 80368f8:	d133      	bne.n	8036962 <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 80368fa:	4b57      	ldr	r3, [pc, #348]	@ (8036a58 <gos_taskDelete+0x230>)
 80368fc:	681b      	ldr	r3, [r3, #0]
 80368fe:	4a57      	ldr	r2, [pc, #348]	@ (8036a5c <gos_taskDelete+0x234>)
 8036900:	216a      	movs	r1, #106	@ 0x6a
 8036902:	fb01 f303 	mul.w	r3, r1, r3
 8036906:	4413      	add	r3, r2
 8036908:	3308      	adds	r3, #8
 803690a:	881a      	ldrh	r2, [r3, #0]
 803690c:	4b52      	ldr	r3, [pc, #328]	@ (8036a58 <gos_taskDelete+0x230>)
 803690e:	681b      	ldr	r3, [r3, #0]
 8036910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8036914:	b290      	uxth	r0, r2
 8036916:	4a51      	ldr	r2, [pc, #324]	@ (8036a5c <gos_taskDelete+0x234>)
 8036918:	216a      	movs	r1, #106	@ 0x6a
 803691a:	fb01 f303 	mul.w	r3, r1, r3
 803691e:	4413      	add	r3, r2
 8036920:	3308      	adds	r3, #8
 8036922:	4602      	mov	r2, r0
 8036924:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8036926:	4b4f      	ldr	r3, [pc, #316]	@ (8036a64 <gos_taskDelete+0x23c>)
 8036928:	781b      	ldrb	r3, [r3, #0]
 803692a:	88fa      	ldrh	r2, [r7, #6]
 803692c:	4611      	mov	r1, r2
 803692e:	4618      	mov	r0, r3
 8036930:	f002 ff6a 	bl	8039808 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8036934:	4b48      	ldr	r3, [pc, #288]	@ (8036a58 <gos_taskDelete+0x230>)
 8036936:	681b      	ldr	r3, [r3, #0]
 8036938:	4a48      	ldr	r2, [pc, #288]	@ (8036a5c <gos_taskDelete+0x234>)
 803693a:	216a      	movs	r1, #106	@ 0x6a
 803693c:	fb01 f303 	mul.w	r3, r1, r3
 8036940:	4413      	add	r3, r2
 8036942:	3308      	adds	r3, #8
 8036944:	881a      	ldrh	r2, [r3, #0]
 8036946:	4b44      	ldr	r3, [pc, #272]	@ (8036a58 <gos_taskDelete+0x230>)
 8036948:	681b      	ldr	r3, [r3, #0]
 803694a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 803694e:	b290      	uxth	r0, r2
 8036950:	4a42      	ldr	r2, [pc, #264]	@ (8036a5c <gos_taskDelete+0x234>)
 8036952:	216a      	movs	r1, #106	@ 0x6a
 8036954:	fb01 f303 	mul.w	r3, r1, r3
 8036958:	4413      	add	r3, r2
 803695a:	3308      	adds	r3, #8
 803695c:	4602      	mov	r2, r0
 803695e:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8036960:	e042      	b.n	80369e8 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8036962:	4b40      	ldr	r3, [pc, #256]	@ (8036a64 <gos_taskDelete+0x23c>)
 8036964:	781b      	ldrb	r3, [r3, #0]
 8036966:	88fa      	ldrh	r2, [r7, #6]
 8036968:	4611      	mov	r1, r2
 803696a:	4618      	mov	r0, r3
 803696c:	f002 ff4c 	bl	8039808 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8036970:	e03a      	b.n	80369e8 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8036972:	4b36      	ldr	r3, [pc, #216]	@ (8036a4c <gos_taskDelete+0x224>)
 8036974:	781b      	ldrb	r3, [r3, #0]
 8036976:	2b00      	cmp	r3, #0
 8036978:	d005      	beq.n	8036986 <gos_taskDelete+0x15e>
 803697a:	4b34      	ldr	r3, [pc, #208]	@ (8036a4c <gos_taskDelete+0x224>)
 803697c:	781b      	ldrb	r3, [r3, #0]
 803697e:	3b01      	subs	r3, #1
 8036980:	b2da      	uxtb	r2, r3
 8036982:	4b32      	ldr	r3, [pc, #200]	@ (8036a4c <gos_taskDelete+0x224>)
 8036984:	701a      	strb	r2, [r3, #0]
 8036986:	4b31      	ldr	r3, [pc, #196]	@ (8036a4c <gos_taskDelete+0x224>)
 8036988:	781b      	ldrb	r3, [r3, #0]
 803698a:	2b00      	cmp	r3, #0
 803698c:	d108      	bne.n	80369a0 <gos_taskDelete+0x178>
 803698e:	4b30      	ldr	r3, [pc, #192]	@ (8036a50 <gos_taskDelete+0x228>)
 8036990:	681b      	ldr	r3, [r3, #0]
 8036992:	f383 8810 	msr	PRIMASK, r3
 8036996:	b662      	cpsie	i
 8036998:	f3bf 8f4f 	dsb	sy
 803699c:	f3bf 8f6f 	isb	sy
 80369a0:	4b2c      	ldr	r3, [pc, #176]	@ (8036a54 <gos_taskDelete+0x22c>)
 80369a2:	781b      	ldrb	r3, [r3, #0]
 80369a4:	2b00      	cmp	r3, #0
 80369a6:	d005      	beq.n	80369b4 <gos_taskDelete+0x18c>
 80369a8:	4b2a      	ldr	r3, [pc, #168]	@ (8036a54 <gos_taskDelete+0x22c>)
 80369aa:	781b      	ldrb	r3, [r3, #0]
 80369ac:	3b01      	subs	r3, #1
 80369ae:	b2da      	uxtb	r2, r3
 80369b0:	4b28      	ldr	r3, [pc, #160]	@ (8036a54 <gos_taskDelete+0x22c>)
 80369b2:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80369b4:	4b28      	ldr	r3, [pc, #160]	@ (8036a58 <gos_taskDelete+0x230>)
 80369b6:	681b      	ldr	r3, [r3, #0]
 80369b8:	226a      	movs	r2, #106	@ 0x6a
 80369ba:	fb02 f303 	mul.w	r3, r2, r3
 80369be:	3308      	adds	r3, #8
 80369c0:	4a26      	ldr	r2, [pc, #152]	@ (8036a5c <gos_taskDelete+0x234>)
 80369c2:	4413      	add	r3, r2
 80369c4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80369c6:	68ba      	ldr	r2, [r7, #8]
 80369c8:	216a      	movs	r1, #106	@ 0x6a
 80369ca:	fb01 f202 	mul.w	r2, r1, r2
 80369ce:	3208      	adds	r2, #8
 80369d0:	4922      	ldr	r1, [pc, #136]	@ (8036a5c <gos_taskDelete+0x234>)
 80369d2:	440a      	add	r2, r1
 80369d4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 80369d6:	9201      	str	r2, [sp, #4]
 80369d8:	9300      	str	r3, [sp, #0]
 80369da:	4b23      	ldr	r3, [pc, #140]	@ (8036a68 <gos_taskDelete+0x240>)
 80369dc:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80369e0:	4922      	ldr	r1, [pc, #136]	@ (8036a6c <gos_taskDelete+0x244>)
 80369e2:	2034      	movs	r0, #52	@ 0x34
 80369e4:	f000 ff60 	bl	80378a8 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80369e8:	4b18      	ldr	r3, [pc, #96]	@ (8036a4c <gos_taskDelete+0x224>)
 80369ea:	781b      	ldrb	r3, [r3, #0]
 80369ec:	2b00      	cmp	r3, #0
 80369ee:	d005      	beq.n	80369fc <gos_taskDelete+0x1d4>
 80369f0:	4b16      	ldr	r3, [pc, #88]	@ (8036a4c <gos_taskDelete+0x224>)
 80369f2:	781b      	ldrb	r3, [r3, #0]
 80369f4:	3b01      	subs	r3, #1
 80369f6:	b2da      	uxtb	r2, r3
 80369f8:	4b14      	ldr	r3, [pc, #80]	@ (8036a4c <gos_taskDelete+0x224>)
 80369fa:	701a      	strb	r2, [r3, #0]
 80369fc:	4b13      	ldr	r3, [pc, #76]	@ (8036a4c <gos_taskDelete+0x224>)
 80369fe:	781b      	ldrb	r3, [r3, #0]
 8036a00:	2b00      	cmp	r3, #0
 8036a02:	d108      	bne.n	8036a16 <gos_taskDelete+0x1ee>
 8036a04:	4b12      	ldr	r3, [pc, #72]	@ (8036a50 <gos_taskDelete+0x228>)
 8036a06:	681b      	ldr	r3, [r3, #0]
 8036a08:	f383 8810 	msr	PRIMASK, r3
 8036a0c:	b662      	cpsie	i
 8036a0e:	f3bf 8f4f 	dsb	sy
 8036a12:	f3bf 8f6f 	isb	sy
 8036a16:	4b0f      	ldr	r3, [pc, #60]	@ (8036a54 <gos_taskDelete+0x22c>)
 8036a18:	781b      	ldrb	r3, [r3, #0]
 8036a1a:	2b00      	cmp	r3, #0
 8036a1c:	d005      	beq.n	8036a2a <gos_taskDelete+0x202>
 8036a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8036a54 <gos_taskDelete+0x22c>)
 8036a20:	781b      	ldrb	r3, [r3, #0]
 8036a22:	3b01      	subs	r3, #1
 8036a24:	b2da      	uxtb	r2, r3
 8036a26:	4b0b      	ldr	r3, [pc, #44]	@ (8036a54 <gos_taskDelete+0x22c>)
 8036a28:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 8036a2a:	7bfb      	ldrb	r3, [r7, #15]
 8036a2c:	2b55      	cmp	r3, #85	@ 0x55
 8036a2e:	d107      	bne.n	8036a40 <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 8036a30:	4b09      	ldr	r3, [pc, #36]	@ (8036a58 <gos_taskDelete+0x230>)
 8036a32:	681b      	ldr	r3, [r3, #0]
 8036a34:	68ba      	ldr	r2, [r7, #8]
 8036a36:	429a      	cmp	r2, r3
 8036a38:	d102      	bne.n	8036a40 <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 8036a3a:	2009      	movs	r0, #9
 8036a3c:	f7fe fd88 	bl	8035550 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 8036a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8036a42:	4618      	mov	r0, r3
 8036a44:	3710      	adds	r7, #16
 8036a46:	46bd      	mov	sp, r7
 8036a48:	bd80      	pop	{r7, pc}
 8036a4a:	bf00      	nop
 8036a4c:	2000b313 	.word	0x2000b313
 8036a50:	2000b314 	.word	0x2000b314
 8036a54:	2000b311 	.word	0x2000b311
 8036a58:	2000b318 	.word	0x2000b318
 8036a5c:	200018fc 	.word	0x200018fc
 8036a60:	2000b312 	.word	0x2000b312
 8036a64:	2000b340 	.word	0x2000b340
 8036a68:	0803eecc 	.word	0x0803eecc
 8036a6c:	08040810 	.word	0x08040810

08036a70 <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8036a70:	b580      	push	{r7, lr}
 8036a72:	b086      	sub	sp, #24
 8036a74:	af02      	add	r7, sp, #8
 8036a76:	4603      	mov	r3, r0
 8036a78:	460a      	mov	r2, r1
 8036a7a:	80fb      	strh	r3, [r7, #6]
 8036a7c:	4613      	mov	r3, r2
 8036a7e:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8036a80:	23ae      	movs	r3, #174	@ 0xae
 8036a82:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8036a84:	2300      	movs	r3, #0
 8036a86:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036a88:	4b53      	ldr	r3, [pc, #332]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036a8a:	781b      	ldrb	r3, [r3, #0]
 8036a8c:	2b00      	cmp	r3, #0
 8036a8e:	d108      	bne.n	8036aa2 <gos_taskSetPriority+0x32>
 8036a90:	b672      	cpsid	i
 8036a92:	f3ef 8310 	mrs	r3, PRIMASK
 8036a96:	4a51      	ldr	r2, [pc, #324]	@ (8036bdc <gos_taskSetPriority+0x16c>)
 8036a98:	6013      	str	r3, [r2, #0]
 8036a9a:	f3bf 8f4f 	dsb	sy
 8036a9e:	f3bf 8f6f 	isb	sy
 8036aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036aa4:	781b      	ldrb	r3, [r3, #0]
 8036aa6:	3301      	adds	r3, #1
 8036aa8:	b2da      	uxtb	r2, r3
 8036aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036aac:	701a      	strb	r2, [r3, #0]
 8036aae:	4b4c      	ldr	r3, [pc, #304]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036ab0:	781b      	ldrb	r3, [r3, #0]
 8036ab2:	3301      	adds	r3, #1
 8036ab4:	b2da      	uxtb	r2, r3
 8036ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036ab8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8036aba:	88fb      	ldrh	r3, [r7, #6]
 8036abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8036ac0:	d963      	bls.n	8036b8a <gos_taskSetPriority+0x11a>
 8036ac2:	88fb      	ldrh	r3, [r7, #6]
 8036ac4:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036ac8:	4293      	cmp	r3, r2
 8036aca:	d85e      	bhi.n	8036b8a <gos_taskSetPriority+0x11a>
 8036acc:	797b      	ldrb	r3, [r7, #5]
 8036ace:	2bff      	cmp	r3, #255	@ 0xff
 8036ad0:	d05b      	beq.n	8036b8a <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8036ad2:	88fb      	ldrh	r3, [r7, #6]
 8036ad4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036ad8:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8036ada:	4b42      	ldr	r3, [pc, #264]	@ (8036be4 <gos_taskSetPriority+0x174>)
 8036adc:	681b      	ldr	r3, [r3, #0]
 8036ade:	4a42      	ldr	r2, [pc, #264]	@ (8036be8 <gos_taskSetPriority+0x178>)
 8036ae0:	216a      	movs	r1, #106	@ 0x6a
 8036ae2:	fb01 f303 	mul.w	r3, r1, r3
 8036ae6:	4413      	add	r3, r2
 8036ae8:	3308      	adds	r3, #8
 8036aea:	881b      	ldrh	r3, [r3, #0]
 8036aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8036af0:	2b00      	cmp	r3, #0
 8036af2:	d103      	bne.n	8036afc <gos_taskSetPriority+0x8c>
            inIsr > 0)
 8036af4:	4b3d      	ldr	r3, [pc, #244]	@ (8036bec <gos_taskSetPriority+0x17c>)
 8036af6:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8036af8:	2b00      	cmp	r3, #0
 8036afa:	d00b      	beq.n	8036b14 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 8036afc:	4a3a      	ldr	r2, [pc, #232]	@ (8036be8 <gos_taskSetPriority+0x178>)
 8036afe:	68bb      	ldr	r3, [r7, #8]
 8036b00:	216a      	movs	r1, #106	@ 0x6a
 8036b02:	fb01 f303 	mul.w	r3, r1, r3
 8036b06:	4413      	add	r3, r2
 8036b08:	3306      	adds	r3, #6
 8036b0a:	797a      	ldrb	r2, [r7, #5]
 8036b0c:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 8036b0e:	2355      	movs	r3, #85	@ 0x55
 8036b10:	73fb      	strb	r3, [r7, #15]
 8036b12:	e03a      	b.n	8036b8a <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8036b14:	4b30      	ldr	r3, [pc, #192]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b16:	781b      	ldrb	r3, [r3, #0]
 8036b18:	2b00      	cmp	r3, #0
 8036b1a:	d005      	beq.n	8036b28 <gos_taskSetPriority+0xb8>
 8036b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b1e:	781b      	ldrb	r3, [r3, #0]
 8036b20:	3b01      	subs	r3, #1
 8036b22:	b2da      	uxtb	r2, r3
 8036b24:	4b2c      	ldr	r3, [pc, #176]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b26:	701a      	strb	r2, [r3, #0]
 8036b28:	4b2b      	ldr	r3, [pc, #172]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b2a:	781b      	ldrb	r3, [r3, #0]
 8036b2c:	2b00      	cmp	r3, #0
 8036b2e:	d108      	bne.n	8036b42 <gos_taskSetPriority+0xd2>
 8036b30:	4b2a      	ldr	r3, [pc, #168]	@ (8036bdc <gos_taskSetPriority+0x16c>)
 8036b32:	681b      	ldr	r3, [r3, #0]
 8036b34:	f383 8810 	msr	PRIMASK, r3
 8036b38:	b662      	cpsie	i
 8036b3a:	f3bf 8f4f 	dsb	sy
 8036b3e:	f3bf 8f6f 	isb	sy
 8036b42:	4b27      	ldr	r3, [pc, #156]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036b44:	781b      	ldrb	r3, [r3, #0]
 8036b46:	2b00      	cmp	r3, #0
 8036b48:	d005      	beq.n	8036b56 <gos_taskSetPriority+0xe6>
 8036b4a:	4b25      	ldr	r3, [pc, #148]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036b4c:	781b      	ldrb	r3, [r3, #0]
 8036b4e:	3b01      	subs	r3, #1
 8036b50:	b2da      	uxtb	r2, r3
 8036b52:	4b23      	ldr	r3, [pc, #140]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036b54:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8036b56:	4b23      	ldr	r3, [pc, #140]	@ (8036be4 <gos_taskSetPriority+0x174>)
 8036b58:	681b      	ldr	r3, [r3, #0]
 8036b5a:	226a      	movs	r2, #106	@ 0x6a
 8036b5c:	fb02 f303 	mul.w	r3, r2, r3
 8036b60:	3308      	adds	r3, #8
 8036b62:	4a21      	ldr	r2, [pc, #132]	@ (8036be8 <gos_taskSetPriority+0x178>)
 8036b64:	4413      	add	r3, r2
 8036b66:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8036b68:	68ba      	ldr	r2, [r7, #8]
 8036b6a:	216a      	movs	r1, #106	@ 0x6a
 8036b6c:	fb01 f202 	mul.w	r2, r1, r2
 8036b70:	3208      	adds	r2, #8
 8036b72:	491d      	ldr	r1, [pc, #116]	@ (8036be8 <gos_taskSetPriority+0x178>)
 8036b74:	440a      	add	r2, r1
 8036b76:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8036b78:	9201      	str	r2, [sp, #4]
 8036b7a:	9300      	str	r3, [sp, #0]
 8036b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8036bf0 <gos_taskSetPriority+0x180>)
 8036b7e:	f44f 723d 	mov.w	r2, #756	@ 0x2f4
 8036b82:	491c      	ldr	r1, [pc, #112]	@ (8036bf4 <gos_taskSetPriority+0x184>)
 8036b84:	2034      	movs	r0, #52	@ 0x34
 8036b86:	f000 fe8f 	bl	80378a8 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8036b8a:	4b13      	ldr	r3, [pc, #76]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b8c:	781b      	ldrb	r3, [r3, #0]
 8036b8e:	2b00      	cmp	r3, #0
 8036b90:	d005      	beq.n	8036b9e <gos_taskSetPriority+0x12e>
 8036b92:	4b11      	ldr	r3, [pc, #68]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b94:	781b      	ldrb	r3, [r3, #0]
 8036b96:	3b01      	subs	r3, #1
 8036b98:	b2da      	uxtb	r2, r3
 8036b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036b9c:	701a      	strb	r2, [r3, #0]
 8036b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8036bd8 <gos_taskSetPriority+0x168>)
 8036ba0:	781b      	ldrb	r3, [r3, #0]
 8036ba2:	2b00      	cmp	r3, #0
 8036ba4:	d108      	bne.n	8036bb8 <gos_taskSetPriority+0x148>
 8036ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8036bdc <gos_taskSetPriority+0x16c>)
 8036ba8:	681b      	ldr	r3, [r3, #0]
 8036baa:	f383 8810 	msr	PRIMASK, r3
 8036bae:	b662      	cpsie	i
 8036bb0:	f3bf 8f4f 	dsb	sy
 8036bb4:	f3bf 8f6f 	isb	sy
 8036bb8:	4b09      	ldr	r3, [pc, #36]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036bba:	781b      	ldrb	r3, [r3, #0]
 8036bbc:	2b00      	cmp	r3, #0
 8036bbe:	d005      	beq.n	8036bcc <gos_taskSetPriority+0x15c>
 8036bc0:	4b07      	ldr	r3, [pc, #28]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036bc2:	781b      	ldrb	r3, [r3, #0]
 8036bc4:	3b01      	subs	r3, #1
 8036bc6:	b2da      	uxtb	r2, r3
 8036bc8:	4b05      	ldr	r3, [pc, #20]	@ (8036be0 <gos_taskSetPriority+0x170>)
 8036bca:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8036bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8036bce:	4618      	mov	r0, r3
 8036bd0:	3710      	adds	r7, #16
 8036bd2:	46bd      	mov	sp, r7
 8036bd4:	bd80      	pop	{r7, pc}
 8036bd6:	bf00      	nop
 8036bd8:	2000b313 	.word	0x2000b313
 8036bdc:	2000b314 	.word	0x2000b314
 8036be0:	2000b311 	.word	0x2000b311
 8036be4:	2000b318 	.word	0x2000b318
 8036be8:	200018fc 	.word	0x200018fc
 8036bec:	2000b312 	.word	0x2000b312
 8036bf0:	0803eef4 	.word	0x0803eef4
 8036bf4:	08040820 	.word	0x08040820

08036bf8 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8036bf8:	b580      	push	{r7, lr}
 8036bfa:	b086      	sub	sp, #24
 8036bfc:	af02      	add	r7, sp, #8
 8036bfe:	4603      	mov	r3, r0
 8036c00:	460a      	mov	r2, r1
 8036c02:	80fb      	strh	r3, [r7, #6]
 8036c04:	4613      	mov	r3, r2
 8036c06:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8036c08:	23ae      	movs	r3, #174	@ 0xae
 8036c0a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8036c0c:	2300      	movs	r3, #0
 8036c0e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036c10:	4b53      	ldr	r3, [pc, #332]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036c12:	781b      	ldrb	r3, [r3, #0]
 8036c14:	2b00      	cmp	r3, #0
 8036c16:	d108      	bne.n	8036c2a <gos_taskSetOriginalPriority+0x32>
 8036c18:	b672      	cpsid	i
 8036c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8036c1e:	4a51      	ldr	r2, [pc, #324]	@ (8036d64 <gos_taskSetOriginalPriority+0x16c>)
 8036c20:	6013      	str	r3, [r2, #0]
 8036c22:	f3bf 8f4f 	dsb	sy
 8036c26:	f3bf 8f6f 	isb	sy
 8036c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036c2c:	781b      	ldrb	r3, [r3, #0]
 8036c2e:	3301      	adds	r3, #1
 8036c30:	b2da      	uxtb	r2, r3
 8036c32:	4b4b      	ldr	r3, [pc, #300]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036c34:	701a      	strb	r2, [r3, #0]
 8036c36:	4b4c      	ldr	r3, [pc, #304]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036c38:	781b      	ldrb	r3, [r3, #0]
 8036c3a:	3301      	adds	r3, #1
 8036c3c:	b2da      	uxtb	r2, r3
 8036c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036c40:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8036c42:	88fb      	ldrh	r3, [r7, #6]
 8036c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8036c48:	d963      	bls.n	8036d12 <gos_taskSetOriginalPriority+0x11a>
 8036c4a:	88fb      	ldrh	r3, [r7, #6]
 8036c4c:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036c50:	4293      	cmp	r3, r2
 8036c52:	d85e      	bhi.n	8036d12 <gos_taskSetOriginalPriority+0x11a>
 8036c54:	797b      	ldrb	r3, [r7, #5]
 8036c56:	2bff      	cmp	r3, #255	@ 0xff
 8036c58:	d05b      	beq.n	8036d12 <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8036c5a:	88fb      	ldrh	r3, [r7, #6]
 8036c5c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036c60:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8036c62:	4b42      	ldr	r3, [pc, #264]	@ (8036d6c <gos_taskSetOriginalPriority+0x174>)
 8036c64:	681b      	ldr	r3, [r3, #0]
 8036c66:	4a42      	ldr	r2, [pc, #264]	@ (8036d70 <gos_taskSetOriginalPriority+0x178>)
 8036c68:	216a      	movs	r1, #106	@ 0x6a
 8036c6a:	fb01 f303 	mul.w	r3, r1, r3
 8036c6e:	4413      	add	r3, r2
 8036c70:	3308      	adds	r3, #8
 8036c72:	881b      	ldrh	r3, [r3, #0]
 8036c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8036c78:	2b00      	cmp	r3, #0
 8036c7a:	d103      	bne.n	8036c84 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 8036c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8036d74 <gos_taskSetOriginalPriority+0x17c>)
 8036c7e:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8036c80:	2b00      	cmp	r3, #0
 8036c82:	d00b      	beq.n	8036c9c <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 8036c84:	4a3a      	ldr	r2, [pc, #232]	@ (8036d70 <gos_taskSetOriginalPriority+0x178>)
 8036c86:	68bb      	ldr	r3, [r7, #8]
 8036c88:	216a      	movs	r1, #106	@ 0x6a
 8036c8a:	fb01 f303 	mul.w	r3, r1, r3
 8036c8e:	4413      	add	r3, r2
 8036c90:	3307      	adds	r3, #7
 8036c92:	797a      	ldrb	r2, [r7, #5]
 8036c94:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 8036c96:	2355      	movs	r3, #85	@ 0x55
 8036c98:	73fb      	strb	r3, [r7, #15]
 8036c9a:	e03a      	b.n	8036d12 <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8036c9c:	4b30      	ldr	r3, [pc, #192]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036c9e:	781b      	ldrb	r3, [r3, #0]
 8036ca0:	2b00      	cmp	r3, #0
 8036ca2:	d005      	beq.n	8036cb0 <gos_taskSetOriginalPriority+0xb8>
 8036ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036ca6:	781b      	ldrb	r3, [r3, #0]
 8036ca8:	3b01      	subs	r3, #1
 8036caa:	b2da      	uxtb	r2, r3
 8036cac:	4b2c      	ldr	r3, [pc, #176]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036cae:	701a      	strb	r2, [r3, #0]
 8036cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036cb2:	781b      	ldrb	r3, [r3, #0]
 8036cb4:	2b00      	cmp	r3, #0
 8036cb6:	d108      	bne.n	8036cca <gos_taskSetOriginalPriority+0xd2>
 8036cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8036d64 <gos_taskSetOriginalPriority+0x16c>)
 8036cba:	681b      	ldr	r3, [r3, #0]
 8036cbc:	f383 8810 	msr	PRIMASK, r3
 8036cc0:	b662      	cpsie	i
 8036cc2:	f3bf 8f4f 	dsb	sy
 8036cc6:	f3bf 8f6f 	isb	sy
 8036cca:	4b27      	ldr	r3, [pc, #156]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036ccc:	781b      	ldrb	r3, [r3, #0]
 8036cce:	2b00      	cmp	r3, #0
 8036cd0:	d005      	beq.n	8036cde <gos_taskSetOriginalPriority+0xe6>
 8036cd2:	4b25      	ldr	r3, [pc, #148]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036cd4:	781b      	ldrb	r3, [r3, #0]
 8036cd6:	3b01      	subs	r3, #1
 8036cd8:	b2da      	uxtb	r2, r3
 8036cda:	4b23      	ldr	r3, [pc, #140]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036cdc:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8036cde:	4b23      	ldr	r3, [pc, #140]	@ (8036d6c <gos_taskSetOriginalPriority+0x174>)
 8036ce0:	681b      	ldr	r3, [r3, #0]
 8036ce2:	226a      	movs	r2, #106	@ 0x6a
 8036ce4:	fb02 f303 	mul.w	r3, r2, r3
 8036ce8:	3308      	adds	r3, #8
 8036cea:	4a21      	ldr	r2, [pc, #132]	@ (8036d70 <gos_taskSetOriginalPriority+0x178>)
 8036cec:	4413      	add	r3, r2
 8036cee:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8036cf0:	68ba      	ldr	r2, [r7, #8]
 8036cf2:	216a      	movs	r1, #106	@ 0x6a
 8036cf4:	fb01 f202 	mul.w	r2, r1, r2
 8036cf8:	3208      	adds	r2, #8
 8036cfa:	491d      	ldr	r1, [pc, #116]	@ (8036d70 <gos_taskSetOriginalPriority+0x178>)
 8036cfc:	440a      	add	r2, r1
 8036cfe:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8036d00:	9201      	str	r2, [sp, #4]
 8036d02:	9300      	str	r3, [sp, #0]
 8036d04:	4b1c      	ldr	r3, [pc, #112]	@ (8036d78 <gos_taskSetOriginalPriority+0x180>)
 8036d06:	f240 3222 	movw	r2, #802	@ 0x322
 8036d0a:	491c      	ldr	r1, [pc, #112]	@ (8036d7c <gos_taskSetOriginalPriority+0x184>)
 8036d0c:	2034      	movs	r0, #52	@ 0x34
 8036d0e:	f000 fdcb 	bl	80378a8 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8036d12:	4b13      	ldr	r3, [pc, #76]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036d14:	781b      	ldrb	r3, [r3, #0]
 8036d16:	2b00      	cmp	r3, #0
 8036d18:	d005      	beq.n	8036d26 <gos_taskSetOriginalPriority+0x12e>
 8036d1a:	4b11      	ldr	r3, [pc, #68]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036d1c:	781b      	ldrb	r3, [r3, #0]
 8036d1e:	3b01      	subs	r3, #1
 8036d20:	b2da      	uxtb	r2, r3
 8036d22:	4b0f      	ldr	r3, [pc, #60]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036d24:	701a      	strb	r2, [r3, #0]
 8036d26:	4b0e      	ldr	r3, [pc, #56]	@ (8036d60 <gos_taskSetOriginalPriority+0x168>)
 8036d28:	781b      	ldrb	r3, [r3, #0]
 8036d2a:	2b00      	cmp	r3, #0
 8036d2c:	d108      	bne.n	8036d40 <gos_taskSetOriginalPriority+0x148>
 8036d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8036d64 <gos_taskSetOriginalPriority+0x16c>)
 8036d30:	681b      	ldr	r3, [r3, #0]
 8036d32:	f383 8810 	msr	PRIMASK, r3
 8036d36:	b662      	cpsie	i
 8036d38:	f3bf 8f4f 	dsb	sy
 8036d3c:	f3bf 8f6f 	isb	sy
 8036d40:	4b09      	ldr	r3, [pc, #36]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036d42:	781b      	ldrb	r3, [r3, #0]
 8036d44:	2b00      	cmp	r3, #0
 8036d46:	d005      	beq.n	8036d54 <gos_taskSetOriginalPriority+0x15c>
 8036d48:	4b07      	ldr	r3, [pc, #28]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036d4a:	781b      	ldrb	r3, [r3, #0]
 8036d4c:	3b01      	subs	r3, #1
 8036d4e:	b2da      	uxtb	r2, r3
 8036d50:	4b05      	ldr	r3, [pc, #20]	@ (8036d68 <gos_taskSetOriginalPriority+0x170>)
 8036d52:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8036d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8036d56:	4618      	mov	r0, r3
 8036d58:	3710      	adds	r7, #16
 8036d5a:	46bd      	mov	sp, r7
 8036d5c:	bd80      	pop	{r7, pc}
 8036d5e:	bf00      	nop
 8036d60:	2000b313 	.word	0x2000b313
 8036d64:	2000b314 	.word	0x2000b314
 8036d68:	2000b311 	.word	0x2000b311
 8036d6c:	2000b318 	.word	0x2000b318
 8036d70:	200018fc 	.word	0x200018fc
 8036d74:	2000b312 	.word	0x2000b312
 8036d78:	0803eef4 	.word	0x0803eef4
 8036d7c:	08040834 	.word	0x08040834

08036d80 <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 8036d80:	b480      	push	{r7}
 8036d82:	b085      	sub	sp, #20
 8036d84:	af00      	add	r7, sp, #0
 8036d86:	4603      	mov	r3, r0
 8036d88:	6039      	str	r1, [r7, #0]
 8036d8a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8036d8c:	23ae      	movs	r3, #174	@ 0xae
 8036d8e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8036d90:	2300      	movs	r3, #0
 8036d92:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036d94:	4b2e      	ldr	r3, [pc, #184]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036d96:	781b      	ldrb	r3, [r3, #0]
 8036d98:	2b00      	cmp	r3, #0
 8036d9a:	d108      	bne.n	8036dae <gos_taskGetPriority+0x2e>
 8036d9c:	b672      	cpsid	i
 8036d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8036da2:	4a2c      	ldr	r2, [pc, #176]	@ (8036e54 <gos_taskGetPriority+0xd4>)
 8036da4:	6013      	str	r3, [r2, #0]
 8036da6:	f3bf 8f4f 	dsb	sy
 8036daa:	f3bf 8f6f 	isb	sy
 8036dae:	4b28      	ldr	r3, [pc, #160]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036db0:	781b      	ldrb	r3, [r3, #0]
 8036db2:	3301      	adds	r3, #1
 8036db4:	b2da      	uxtb	r2, r3
 8036db6:	4b26      	ldr	r3, [pc, #152]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036db8:	701a      	strb	r2, [r3, #0]
 8036dba:	4b27      	ldr	r3, [pc, #156]	@ (8036e58 <gos_taskGetPriority+0xd8>)
 8036dbc:	781b      	ldrb	r3, [r3, #0]
 8036dbe:	3301      	adds	r3, #1
 8036dc0:	b2da      	uxtb	r2, r3
 8036dc2:	4b25      	ldr	r3, [pc, #148]	@ (8036e58 <gos_taskGetPriority+0xd8>)
 8036dc4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8036dc6:	88fb      	ldrh	r3, [r7, #6]
 8036dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8036dcc:	d917      	bls.n	8036dfe <gos_taskGetPriority+0x7e>
 8036dce:	88fb      	ldrh	r3, [r7, #6]
 8036dd0:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036dd4:	4293      	cmp	r3, r2
 8036dd6:	d812      	bhi.n	8036dfe <gos_taskGetPriority+0x7e>
 8036dd8:	683b      	ldr	r3, [r7, #0]
 8036dda:	2b00      	cmp	r3, #0
 8036ddc:	d00f      	beq.n	8036dfe <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8036dde:	88fb      	ldrh	r3, [r7, #6]
 8036de0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036de4:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 8036de6:	4a1d      	ldr	r2, [pc, #116]	@ (8036e5c <gos_taskGetPriority+0xdc>)
 8036de8:	68bb      	ldr	r3, [r7, #8]
 8036dea:	216a      	movs	r1, #106	@ 0x6a
 8036dec:	fb01 f303 	mul.w	r3, r1, r3
 8036df0:	4413      	add	r3, r2
 8036df2:	3306      	adds	r3, #6
 8036df4:	781a      	ldrb	r2, [r3, #0]
 8036df6:	683b      	ldr	r3, [r7, #0]
 8036df8:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8036dfa:	2355      	movs	r3, #85	@ 0x55
 8036dfc:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 8036dfe:	4b14      	ldr	r3, [pc, #80]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036e00:	781b      	ldrb	r3, [r3, #0]
 8036e02:	2b00      	cmp	r3, #0
 8036e04:	d005      	beq.n	8036e12 <gos_taskGetPriority+0x92>
 8036e06:	4b12      	ldr	r3, [pc, #72]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036e08:	781b      	ldrb	r3, [r3, #0]
 8036e0a:	3b01      	subs	r3, #1
 8036e0c:	b2da      	uxtb	r2, r3
 8036e0e:	4b10      	ldr	r3, [pc, #64]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036e10:	701a      	strb	r2, [r3, #0]
 8036e12:	4b0f      	ldr	r3, [pc, #60]	@ (8036e50 <gos_taskGetPriority+0xd0>)
 8036e14:	781b      	ldrb	r3, [r3, #0]
 8036e16:	2b00      	cmp	r3, #0
 8036e18:	d108      	bne.n	8036e2c <gos_taskGetPriority+0xac>
 8036e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8036e54 <gos_taskGetPriority+0xd4>)
 8036e1c:	681b      	ldr	r3, [r3, #0]
 8036e1e:	f383 8810 	msr	PRIMASK, r3
 8036e22:	b662      	cpsie	i
 8036e24:	f3bf 8f4f 	dsb	sy
 8036e28:	f3bf 8f6f 	isb	sy
 8036e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8036e58 <gos_taskGetPriority+0xd8>)
 8036e2e:	781b      	ldrb	r3, [r3, #0]
 8036e30:	2b00      	cmp	r3, #0
 8036e32:	d005      	beq.n	8036e40 <gos_taskGetPriority+0xc0>
 8036e34:	4b08      	ldr	r3, [pc, #32]	@ (8036e58 <gos_taskGetPriority+0xd8>)
 8036e36:	781b      	ldrb	r3, [r3, #0]
 8036e38:	3b01      	subs	r3, #1
 8036e3a:	b2da      	uxtb	r2, r3
 8036e3c:	4b06      	ldr	r3, [pc, #24]	@ (8036e58 <gos_taskGetPriority+0xd8>)
 8036e3e:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 8036e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8036e42:	4618      	mov	r0, r3
 8036e44:	3714      	adds	r7, #20
 8036e46:	46bd      	mov	sp, r7
 8036e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e4c:	4770      	bx	lr
 8036e4e:	bf00      	nop
 8036e50:	2000b313 	.word	0x2000b313
 8036e54:	2000b314 	.word	0x2000b314
 8036e58:	2000b311 	.word	0x2000b311
 8036e5c:	200018fc 	.word	0x200018fc

08036e60 <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8036e60:	b480      	push	{r7}
 8036e62:	b085      	sub	sp, #20
 8036e64:	af00      	add	r7, sp, #0
 8036e66:	4603      	mov	r3, r0
 8036e68:	460a      	mov	r2, r1
 8036e6a:	80fb      	strh	r3, [r7, #6]
 8036e6c:	4613      	mov	r3, r2
 8036e6e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8036e70:	23ae      	movs	r3, #174	@ 0xae
 8036e72:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8036e74:	2300      	movs	r3, #0
 8036e76:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036e78:	4b31      	ldr	r3, [pc, #196]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036e7a:	781b      	ldrb	r3, [r3, #0]
 8036e7c:	2b00      	cmp	r3, #0
 8036e7e:	d108      	bne.n	8036e92 <gos_taskAddPrivilege+0x32>
 8036e80:	b672      	cpsid	i
 8036e82:	f3ef 8310 	mrs	r3, PRIMASK
 8036e86:	4a2f      	ldr	r2, [pc, #188]	@ (8036f44 <gos_taskAddPrivilege+0xe4>)
 8036e88:	6013      	str	r3, [r2, #0]
 8036e8a:	f3bf 8f4f 	dsb	sy
 8036e8e:	f3bf 8f6f 	isb	sy
 8036e92:	4b2b      	ldr	r3, [pc, #172]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036e94:	781b      	ldrb	r3, [r3, #0]
 8036e96:	3301      	adds	r3, #1
 8036e98:	b2da      	uxtb	r2, r3
 8036e9a:	4b29      	ldr	r3, [pc, #164]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036e9c:	701a      	strb	r2, [r3, #0]
 8036e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8036f48 <gos_taskAddPrivilege+0xe8>)
 8036ea0:	781b      	ldrb	r3, [r3, #0]
 8036ea2:	3301      	adds	r3, #1
 8036ea4:	b2da      	uxtb	r2, r3
 8036ea6:	4b28      	ldr	r3, [pc, #160]	@ (8036f48 <gos_taskAddPrivilege+0xe8>)
 8036ea8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8036eaa:	88fb      	ldrh	r3, [r7, #6]
 8036eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8036eb0:	d91e      	bls.n	8036ef0 <gos_taskAddPrivilege+0x90>
 8036eb2:	88fb      	ldrh	r3, [r7, #6]
 8036eb4:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036eb8:	4293      	cmp	r3, r2
 8036eba:	d819      	bhi.n	8036ef0 <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8036ebc:	88fb      	ldrh	r3, [r7, #6]
 8036ebe:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036ec2:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8036ec4:	4a21      	ldr	r2, [pc, #132]	@ (8036f4c <gos_taskAddPrivilege+0xec>)
 8036ec6:	68bb      	ldr	r3, [r7, #8]
 8036ec8:	216a      	movs	r1, #106	@ 0x6a
 8036eca:	fb01 f303 	mul.w	r3, r1, r3
 8036ece:	4413      	add	r3, r2
 8036ed0:	3308      	adds	r3, #8
 8036ed2:	881a      	ldrh	r2, [r3, #0]
 8036ed4:	88bb      	ldrh	r3, [r7, #4]
 8036ed6:	4313      	orrs	r3, r2
 8036ed8:	b298      	uxth	r0, r3
 8036eda:	4a1c      	ldr	r2, [pc, #112]	@ (8036f4c <gos_taskAddPrivilege+0xec>)
 8036edc:	68bb      	ldr	r3, [r7, #8]
 8036ede:	216a      	movs	r1, #106	@ 0x6a
 8036ee0:	fb01 f303 	mul.w	r3, r1, r3
 8036ee4:	4413      	add	r3, r2
 8036ee6:	3308      	adds	r3, #8
 8036ee8:	4602      	mov	r2, r0
 8036eea:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8036eec:	2355      	movs	r3, #85	@ 0x55
 8036eee:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8036ef0:	4b13      	ldr	r3, [pc, #76]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036ef2:	781b      	ldrb	r3, [r3, #0]
 8036ef4:	2b00      	cmp	r3, #0
 8036ef6:	d005      	beq.n	8036f04 <gos_taskAddPrivilege+0xa4>
 8036ef8:	4b11      	ldr	r3, [pc, #68]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036efa:	781b      	ldrb	r3, [r3, #0]
 8036efc:	3b01      	subs	r3, #1
 8036efe:	b2da      	uxtb	r2, r3
 8036f00:	4b0f      	ldr	r3, [pc, #60]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036f02:	701a      	strb	r2, [r3, #0]
 8036f04:	4b0e      	ldr	r3, [pc, #56]	@ (8036f40 <gos_taskAddPrivilege+0xe0>)
 8036f06:	781b      	ldrb	r3, [r3, #0]
 8036f08:	2b00      	cmp	r3, #0
 8036f0a:	d108      	bne.n	8036f1e <gos_taskAddPrivilege+0xbe>
 8036f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8036f44 <gos_taskAddPrivilege+0xe4>)
 8036f0e:	681b      	ldr	r3, [r3, #0]
 8036f10:	f383 8810 	msr	PRIMASK, r3
 8036f14:	b662      	cpsie	i
 8036f16:	f3bf 8f4f 	dsb	sy
 8036f1a:	f3bf 8f6f 	isb	sy
 8036f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8036f48 <gos_taskAddPrivilege+0xe8>)
 8036f20:	781b      	ldrb	r3, [r3, #0]
 8036f22:	2b00      	cmp	r3, #0
 8036f24:	d005      	beq.n	8036f32 <gos_taskAddPrivilege+0xd2>
 8036f26:	4b08      	ldr	r3, [pc, #32]	@ (8036f48 <gos_taskAddPrivilege+0xe8>)
 8036f28:	781b      	ldrb	r3, [r3, #0]
 8036f2a:	3b01      	subs	r3, #1
 8036f2c:	b2da      	uxtb	r2, r3
 8036f2e:	4b06      	ldr	r3, [pc, #24]	@ (8036f48 <gos_taskAddPrivilege+0xe8>)
 8036f30:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 8036f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8036f34:	4618      	mov	r0, r3
 8036f36:	3714      	adds	r7, #20
 8036f38:	46bd      	mov	sp, r7
 8036f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f3e:	4770      	bx	lr
 8036f40:	2000b313 	.word	0x2000b313
 8036f44:	2000b314 	.word	0x2000b314
 8036f48:	2000b311 	.word	0x2000b311
 8036f4c:	200018fc 	.word	0x200018fc

08036f50 <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8036f50:	b480      	push	{r7}
 8036f52:	b085      	sub	sp, #20
 8036f54:	af00      	add	r7, sp, #0
 8036f56:	4603      	mov	r3, r0
 8036f58:	460a      	mov	r2, r1
 8036f5a:	80fb      	strh	r3, [r7, #6]
 8036f5c:	4613      	mov	r3, r2
 8036f5e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 8036f60:	23ae      	movs	r3, #174	@ 0xae
 8036f62:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 8036f64:	2300      	movs	r3, #0
 8036f66:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8036f68:	4b34      	ldr	r3, [pc, #208]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8036f6a:	781b      	ldrb	r3, [r3, #0]
 8036f6c:	2b00      	cmp	r3, #0
 8036f6e:	d108      	bne.n	8036f82 <gos_taskRemovePrivilege+0x32>
 8036f70:	b672      	cpsid	i
 8036f72:	f3ef 8310 	mrs	r3, PRIMASK
 8036f76:	4a32      	ldr	r2, [pc, #200]	@ (8037040 <gos_taskRemovePrivilege+0xf0>)
 8036f78:	6013      	str	r3, [r2, #0]
 8036f7a:	f3bf 8f4f 	dsb	sy
 8036f7e:	f3bf 8f6f 	isb	sy
 8036f82:	4b2e      	ldr	r3, [pc, #184]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8036f84:	781b      	ldrb	r3, [r3, #0]
 8036f86:	3301      	adds	r3, #1
 8036f88:	b2da      	uxtb	r2, r3
 8036f8a:	4b2c      	ldr	r3, [pc, #176]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8036f8c:	701a      	strb	r2, [r3, #0]
 8036f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8037044 <gos_taskRemovePrivilege+0xf4>)
 8036f90:	781b      	ldrb	r3, [r3, #0]
 8036f92:	3301      	adds	r3, #1
 8036f94:	b2da      	uxtb	r2, r3
 8036f96:	4b2b      	ldr	r3, [pc, #172]	@ (8037044 <gos_taskRemovePrivilege+0xf4>)
 8036f98:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8036f9a:	88fb      	ldrh	r3, [r7, #6]
 8036f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8036fa0:	d923      	bls.n	8036fea <gos_taskRemovePrivilege+0x9a>
 8036fa2:	88fb      	ldrh	r3, [r7, #6]
 8036fa4:	f248 022f 	movw	r2, #32815	@ 0x802f
 8036fa8:	4293      	cmp	r3, r2
 8036faa:	d81e      	bhi.n	8036fea <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8036fac:	88fb      	ldrh	r3, [r7, #6]
 8036fae:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8036fb2:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8036fb4:	4a24      	ldr	r2, [pc, #144]	@ (8037048 <gos_taskRemovePrivilege+0xf8>)
 8036fb6:	68bb      	ldr	r3, [r7, #8]
 8036fb8:	216a      	movs	r1, #106	@ 0x6a
 8036fba:	fb01 f303 	mul.w	r3, r1, r3
 8036fbe:	4413      	add	r3, r2
 8036fc0:	3308      	adds	r3, #8
 8036fc2:	881b      	ldrh	r3, [r3, #0]
 8036fc4:	b21a      	sxth	r2, r3
 8036fc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8036fca:	43db      	mvns	r3, r3
 8036fcc:	b21b      	sxth	r3, r3
 8036fce:	4013      	ands	r3, r2
 8036fd0:	b21b      	sxth	r3, r3
 8036fd2:	b298      	uxth	r0, r3
 8036fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8037048 <gos_taskRemovePrivilege+0xf8>)
 8036fd6:	68bb      	ldr	r3, [r7, #8]
 8036fd8:	216a      	movs	r1, #106	@ 0x6a
 8036fda:	fb01 f303 	mul.w	r3, r1, r3
 8036fde:	4413      	add	r3, r2
 8036fe0:	3308      	adds	r3, #8
 8036fe2:	4602      	mov	r2, r0
 8036fe4:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8036fe6:	2355      	movs	r3, #85	@ 0x55
 8036fe8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8036fea:	4b14      	ldr	r3, [pc, #80]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8036fec:	781b      	ldrb	r3, [r3, #0]
 8036fee:	2b00      	cmp	r3, #0
 8036ff0:	d005      	beq.n	8036ffe <gos_taskRemovePrivilege+0xae>
 8036ff2:	4b12      	ldr	r3, [pc, #72]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8036ff4:	781b      	ldrb	r3, [r3, #0]
 8036ff6:	3b01      	subs	r3, #1
 8036ff8:	b2da      	uxtb	r2, r3
 8036ffa:	4b10      	ldr	r3, [pc, #64]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8036ffc:	701a      	strb	r2, [r3, #0]
 8036ffe:	4b0f      	ldr	r3, [pc, #60]	@ (803703c <gos_taskRemovePrivilege+0xec>)
 8037000:	781b      	ldrb	r3, [r3, #0]
 8037002:	2b00      	cmp	r3, #0
 8037004:	d108      	bne.n	8037018 <gos_taskRemovePrivilege+0xc8>
 8037006:	4b0e      	ldr	r3, [pc, #56]	@ (8037040 <gos_taskRemovePrivilege+0xf0>)
 8037008:	681b      	ldr	r3, [r3, #0]
 803700a:	f383 8810 	msr	PRIMASK, r3
 803700e:	b662      	cpsie	i
 8037010:	f3bf 8f4f 	dsb	sy
 8037014:	f3bf 8f6f 	isb	sy
 8037018:	4b0a      	ldr	r3, [pc, #40]	@ (8037044 <gos_taskRemovePrivilege+0xf4>)
 803701a:	781b      	ldrb	r3, [r3, #0]
 803701c:	2b00      	cmp	r3, #0
 803701e:	d005      	beq.n	803702c <gos_taskRemovePrivilege+0xdc>
 8037020:	4b08      	ldr	r3, [pc, #32]	@ (8037044 <gos_taskRemovePrivilege+0xf4>)
 8037022:	781b      	ldrb	r3, [r3, #0]
 8037024:	3b01      	subs	r3, #1
 8037026:	b2da      	uxtb	r2, r3
 8037028:	4b06      	ldr	r3, [pc, #24]	@ (8037044 <gos_taskRemovePrivilege+0xf4>)
 803702a:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 803702c:	7bfb      	ldrb	r3, [r7, #15]
}
 803702e:	4618      	mov	r0, r3
 8037030:	3714      	adds	r7, #20
 8037032:	46bd      	mov	sp, r7
 8037034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037038:	4770      	bx	lr
 803703a:	bf00      	nop
 803703c:	2000b313 	.word	0x2000b313
 8037040:	2000b314 	.word	0x2000b314
 8037044:	2000b311 	.word	0x2000b311
 8037048:	200018fc 	.word	0x200018fc

0803704c <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 803704c:	b480      	push	{r7}
 803704e:	b085      	sub	sp, #20
 8037050:	af00      	add	r7, sp, #0
 8037052:	4603      	mov	r3, r0
 8037054:	460a      	mov	r2, r1
 8037056:	80fb      	strh	r3, [r7, #6]
 8037058:	4613      	mov	r3, r2
 803705a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 803705c:	23ae      	movs	r3, #174	@ 0xae
 803705e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8037060:	2300      	movs	r3, #0
 8037062:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8037064:	4b2c      	ldr	r3, [pc, #176]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 8037066:	781b      	ldrb	r3, [r3, #0]
 8037068:	2b00      	cmp	r3, #0
 803706a:	d108      	bne.n	803707e <gos_taskSetPrivileges+0x32>
 803706c:	b672      	cpsid	i
 803706e:	f3ef 8310 	mrs	r3, PRIMASK
 8037072:	4a2a      	ldr	r2, [pc, #168]	@ (803711c <gos_taskSetPrivileges+0xd0>)
 8037074:	6013      	str	r3, [r2, #0]
 8037076:	f3bf 8f4f 	dsb	sy
 803707a:	f3bf 8f6f 	isb	sy
 803707e:	4b26      	ldr	r3, [pc, #152]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 8037080:	781b      	ldrb	r3, [r3, #0]
 8037082:	3301      	adds	r3, #1
 8037084:	b2da      	uxtb	r2, r3
 8037086:	4b24      	ldr	r3, [pc, #144]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 8037088:	701a      	strb	r2, [r3, #0]
 803708a:	4b25      	ldr	r3, [pc, #148]	@ (8037120 <gos_taskSetPrivileges+0xd4>)
 803708c:	781b      	ldrb	r3, [r3, #0]
 803708e:	3301      	adds	r3, #1
 8037090:	b2da      	uxtb	r2, r3
 8037092:	4b23      	ldr	r3, [pc, #140]	@ (8037120 <gos_taskSetPrivileges+0xd4>)
 8037094:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8037096:	88fb      	ldrh	r3, [r7, #6]
 8037098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 803709c:	d913      	bls.n	80370c6 <gos_taskSetPrivileges+0x7a>
 803709e:	88fb      	ldrh	r3, [r7, #6]
 80370a0:	f248 022f 	movw	r2, #32815	@ 0x802f
 80370a4:	4293      	cmp	r3, r2
 80370a6:	d80e      	bhi.n	80370c6 <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80370a8:	88fb      	ldrh	r3, [r7, #6]
 80370aa:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80370ae:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 80370b0:	4a1c      	ldr	r2, [pc, #112]	@ (8037124 <gos_taskSetPrivileges+0xd8>)
 80370b2:	68bb      	ldr	r3, [r7, #8]
 80370b4:	216a      	movs	r1, #106	@ 0x6a
 80370b6:	fb01 f303 	mul.w	r3, r1, r3
 80370ba:	4413      	add	r3, r2
 80370bc:	3308      	adds	r3, #8
 80370be:	88ba      	ldrh	r2, [r7, #4]
 80370c0:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 80370c2:	2355      	movs	r3, #85	@ 0x55
 80370c4:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80370c6:	4b14      	ldr	r3, [pc, #80]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 80370c8:	781b      	ldrb	r3, [r3, #0]
 80370ca:	2b00      	cmp	r3, #0
 80370cc:	d005      	beq.n	80370da <gos_taskSetPrivileges+0x8e>
 80370ce:	4b12      	ldr	r3, [pc, #72]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 80370d0:	781b      	ldrb	r3, [r3, #0]
 80370d2:	3b01      	subs	r3, #1
 80370d4:	b2da      	uxtb	r2, r3
 80370d6:	4b10      	ldr	r3, [pc, #64]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 80370d8:	701a      	strb	r2, [r3, #0]
 80370da:	4b0f      	ldr	r3, [pc, #60]	@ (8037118 <gos_taskSetPrivileges+0xcc>)
 80370dc:	781b      	ldrb	r3, [r3, #0]
 80370de:	2b00      	cmp	r3, #0
 80370e0:	d108      	bne.n	80370f4 <gos_taskSetPrivileges+0xa8>
 80370e2:	4b0e      	ldr	r3, [pc, #56]	@ (803711c <gos_taskSetPrivileges+0xd0>)
 80370e4:	681b      	ldr	r3, [r3, #0]
 80370e6:	f383 8810 	msr	PRIMASK, r3
 80370ea:	b662      	cpsie	i
 80370ec:	f3bf 8f4f 	dsb	sy
 80370f0:	f3bf 8f6f 	isb	sy
 80370f4:	4b0a      	ldr	r3, [pc, #40]	@ (8037120 <gos_taskSetPrivileges+0xd4>)
 80370f6:	781b      	ldrb	r3, [r3, #0]
 80370f8:	2b00      	cmp	r3, #0
 80370fa:	d005      	beq.n	8037108 <gos_taskSetPrivileges+0xbc>
 80370fc:	4b08      	ldr	r3, [pc, #32]	@ (8037120 <gos_taskSetPrivileges+0xd4>)
 80370fe:	781b      	ldrb	r3, [r3, #0]
 8037100:	3b01      	subs	r3, #1
 8037102:	b2da      	uxtb	r2, r3
 8037104:	4b06      	ldr	r3, [pc, #24]	@ (8037120 <gos_taskSetPrivileges+0xd4>)
 8037106:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8037108:	7bfb      	ldrb	r3, [r7, #15]
}
 803710a:	4618      	mov	r0, r3
 803710c:	3714      	adds	r7, #20
 803710e:	46bd      	mov	sp, r7
 8037110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037114:	4770      	bx	lr
 8037116:	bf00      	nop
 8037118:	2000b313 	.word	0x2000b313
 803711c:	2000b314 	.word	0x2000b314
 8037120:	2000b311 	.word	0x2000b311
 8037124:	200018fc 	.word	0x200018fc

08037128 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8037128:	b480      	push	{r7}
 803712a:	b085      	sub	sp, #20
 803712c:	af00      	add	r7, sp, #0
 803712e:	4603      	mov	r3, r0
 8037130:	6039      	str	r1, [r7, #0]
 8037132:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8037134:	23ae      	movs	r3, #174	@ 0xae
 8037136:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8037138:	2300      	movs	r3, #0
 803713a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803713c:	4b2e      	ldr	r3, [pc, #184]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 803713e:	781b      	ldrb	r3, [r3, #0]
 8037140:	2b00      	cmp	r3, #0
 8037142:	d108      	bne.n	8037156 <gos_taskGetPrivileges+0x2e>
 8037144:	b672      	cpsid	i
 8037146:	f3ef 8310 	mrs	r3, PRIMASK
 803714a:	4a2c      	ldr	r2, [pc, #176]	@ (80371fc <gos_taskGetPrivileges+0xd4>)
 803714c:	6013      	str	r3, [r2, #0]
 803714e:	f3bf 8f4f 	dsb	sy
 8037152:	f3bf 8f6f 	isb	sy
 8037156:	4b28      	ldr	r3, [pc, #160]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 8037158:	781b      	ldrb	r3, [r3, #0]
 803715a:	3301      	adds	r3, #1
 803715c:	b2da      	uxtb	r2, r3
 803715e:	4b26      	ldr	r3, [pc, #152]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 8037160:	701a      	strb	r2, [r3, #0]
 8037162:	4b27      	ldr	r3, [pc, #156]	@ (8037200 <gos_taskGetPrivileges+0xd8>)
 8037164:	781b      	ldrb	r3, [r3, #0]
 8037166:	3301      	adds	r3, #1
 8037168:	b2da      	uxtb	r2, r3
 803716a:	4b25      	ldr	r3, [pc, #148]	@ (8037200 <gos_taskGetPrivileges+0xd8>)
 803716c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803716e:	88fb      	ldrh	r3, [r7, #6]
 8037170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8037174:	d917      	bls.n	80371a6 <gos_taskGetPrivileges+0x7e>
 8037176:	88fb      	ldrh	r3, [r7, #6]
 8037178:	f248 022f 	movw	r2, #32815	@ 0x802f
 803717c:	4293      	cmp	r3, r2
 803717e:	d812      	bhi.n	80371a6 <gos_taskGetPrivileges+0x7e>
 8037180:	683b      	ldr	r3, [r7, #0]
 8037182:	2b00      	cmp	r3, #0
 8037184:	d00f      	beq.n	80371a6 <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8037186:	88fb      	ldrh	r3, [r7, #6]
 8037188:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 803718c:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 803718e:	4a1d      	ldr	r2, [pc, #116]	@ (8037204 <gos_taskGetPrivileges+0xdc>)
 8037190:	68bb      	ldr	r3, [r7, #8]
 8037192:	216a      	movs	r1, #106	@ 0x6a
 8037194:	fb01 f303 	mul.w	r3, r1, r3
 8037198:	4413      	add	r3, r2
 803719a:	3308      	adds	r3, #8
 803719c:	881a      	ldrh	r2, [r3, #0]
 803719e:	683b      	ldr	r3, [r7, #0]
 80371a0:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 80371a2:	2355      	movs	r3, #85	@ 0x55
 80371a4:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 80371a6:	4b14      	ldr	r3, [pc, #80]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 80371a8:	781b      	ldrb	r3, [r3, #0]
 80371aa:	2b00      	cmp	r3, #0
 80371ac:	d005      	beq.n	80371ba <gos_taskGetPrivileges+0x92>
 80371ae:	4b12      	ldr	r3, [pc, #72]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 80371b0:	781b      	ldrb	r3, [r3, #0]
 80371b2:	3b01      	subs	r3, #1
 80371b4:	b2da      	uxtb	r2, r3
 80371b6:	4b10      	ldr	r3, [pc, #64]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 80371b8:	701a      	strb	r2, [r3, #0]
 80371ba:	4b0f      	ldr	r3, [pc, #60]	@ (80371f8 <gos_taskGetPrivileges+0xd0>)
 80371bc:	781b      	ldrb	r3, [r3, #0]
 80371be:	2b00      	cmp	r3, #0
 80371c0:	d108      	bne.n	80371d4 <gos_taskGetPrivileges+0xac>
 80371c2:	4b0e      	ldr	r3, [pc, #56]	@ (80371fc <gos_taskGetPrivileges+0xd4>)
 80371c4:	681b      	ldr	r3, [r3, #0]
 80371c6:	f383 8810 	msr	PRIMASK, r3
 80371ca:	b662      	cpsie	i
 80371cc:	f3bf 8f4f 	dsb	sy
 80371d0:	f3bf 8f6f 	isb	sy
 80371d4:	4b0a      	ldr	r3, [pc, #40]	@ (8037200 <gos_taskGetPrivileges+0xd8>)
 80371d6:	781b      	ldrb	r3, [r3, #0]
 80371d8:	2b00      	cmp	r3, #0
 80371da:	d005      	beq.n	80371e8 <gos_taskGetPrivileges+0xc0>
 80371dc:	4b08      	ldr	r3, [pc, #32]	@ (8037200 <gos_taskGetPrivileges+0xd8>)
 80371de:	781b      	ldrb	r3, [r3, #0]
 80371e0:	3b01      	subs	r3, #1
 80371e2:	b2da      	uxtb	r2, r3
 80371e4:	4b06      	ldr	r3, [pc, #24]	@ (8037200 <gos_taskGetPrivileges+0xd8>)
 80371e6:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 80371e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80371ea:	4618      	mov	r0, r3
 80371ec:	3714      	adds	r7, #20
 80371ee:	46bd      	mov	sp, r7
 80371f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80371f4:	4770      	bx	lr
 80371f6:	bf00      	nop
 80371f8:	2000b313 	.word	0x2000b313
 80371fc:	2000b314 	.word	0x2000b314
 8037200:	2000b311 	.word	0x2000b311
 8037204:	200018fc 	.word	0x200018fc

08037208 <gos_taskGetId>:

/*
 * Function: gos_taskGetId
 */
gos_result_t gos_taskGetId (gos_taskName_t taskName, gos_tid_t* taskId)
{
 8037208:	b580      	push	{r7, lr}
 803720a:	b084      	sub	sp, #16
 803720c:	af00      	add	r7, sp, #0
 803720e:	6078      	str	r0, [r7, #4]
 8037210:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskGetIdResult = GOS_ERROR;
 8037212:	23ae      	movs	r3, #174	@ 0xae
 8037214:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8037216:	2300      	movs	r3, #0
 8037218:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 803721a:	2300      	movs	r3, #0
 803721c:	60bb      	str	r3, [r7, #8]
 803721e:	e01e      	b.n	803725e <gos_taskGetId+0x56>
    {
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 8037220:	68bb      	ldr	r3, [r7, #8]
 8037222:	226a      	movs	r2, #106	@ 0x6a
 8037224:	fb02 f303 	mul.w	r3, r2, r3
 8037228:	3308      	adds	r3, #8
 803722a:	4a12      	ldr	r2, [pc, #72]	@ (8037274 <gos_taskGetId+0x6c>)
 803722c:	4413      	add	r3, r2
 803722e:	3302      	adds	r3, #2
 8037230:	4619      	mov	r1, r3
 8037232:	6878      	ldr	r0, [r7, #4]
 8037234:	f7e8 ffec 	bl	8020210 <strcmp>
 8037238:	4603      	mov	r3, r0
 803723a:	2b00      	cmp	r3, #0
 803723c:	d10c      	bne.n	8037258 <gos_taskGetId+0x50>
        {
            *taskId = taskDescriptors[taskIndex].taskId;
 803723e:	4a0d      	ldr	r2, [pc, #52]	@ (8037274 <gos_taskGetId+0x6c>)
 8037240:	68bb      	ldr	r3, [r7, #8]
 8037242:	216a      	movs	r1, #106	@ 0x6a
 8037244:	fb01 f303 	mul.w	r3, r1, r3
 8037248:	4413      	add	r3, r2
 803724a:	332a      	adds	r3, #42	@ 0x2a
 803724c:	881a      	ldrh	r2, [r3, #0]
 803724e:	683b      	ldr	r3, [r7, #0]
 8037250:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 8037252:	2355      	movs	r3, #85	@ 0x55
 8037254:	73fb      	strb	r3, [r7, #15]
            break;
 8037256:	e008      	b.n	803726a <gos_taskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8037258:	68bb      	ldr	r3, [r7, #8]
 803725a:	3301      	adds	r3, #1
 803725c:	60bb      	str	r3, [r7, #8]
 803725e:	68bb      	ldr	r3, [r7, #8]
 8037260:	2b2f      	cmp	r3, #47	@ 0x2f
 8037262:	d802      	bhi.n	803726a <gos_taskGetId+0x62>
 8037264:	683b      	ldr	r3, [r7, #0]
 8037266:	2b00      	cmp	r3, #0
 8037268:	d1da      	bne.n	8037220 <gos_taskGetId+0x18>
        {
            // Continue.
        }
    }

    return taskGetIdResult;
 803726a:	7bfb      	ldrb	r3, [r7, #15]
}
 803726c:	4618      	mov	r0, r3
 803726e:	3710      	adds	r7, #16
 8037270:	46bd      	mov	sp, r7
 8037272:	bd80      	pop	{r7, pc}
 8037274:	200018fc 	.word	0x200018fc

08037278 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 8037278:	b480      	push	{r7}
 803727a:	b085      	sub	sp, #20
 803727c:	af00      	add	r7, sp, #0
 803727e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8037280:	23ae      	movs	r3, #174	@ 0xae
 8037282:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8037284:	4b26      	ldr	r3, [pc, #152]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 8037286:	781b      	ldrb	r3, [r3, #0]
 8037288:	2b00      	cmp	r3, #0
 803728a:	d108      	bne.n	803729e <gos_taskGetCurrentId+0x26>
 803728c:	b672      	cpsid	i
 803728e:	f3ef 8310 	mrs	r3, PRIMASK
 8037292:	4a24      	ldr	r2, [pc, #144]	@ (8037324 <gos_taskGetCurrentId+0xac>)
 8037294:	6013      	str	r3, [r2, #0]
 8037296:	f3bf 8f4f 	dsb	sy
 803729a:	f3bf 8f6f 	isb	sy
 803729e:	4b20      	ldr	r3, [pc, #128]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 80372a0:	781b      	ldrb	r3, [r3, #0]
 80372a2:	3301      	adds	r3, #1
 80372a4:	b2da      	uxtb	r2, r3
 80372a6:	4b1e      	ldr	r3, [pc, #120]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 80372a8:	701a      	strb	r2, [r3, #0]
 80372aa:	4b1f      	ldr	r3, [pc, #124]	@ (8037328 <gos_taskGetCurrentId+0xb0>)
 80372ac:	781b      	ldrb	r3, [r3, #0]
 80372ae:	3301      	adds	r3, #1
 80372b0:	b2da      	uxtb	r2, r3
 80372b2:	4b1d      	ldr	r3, [pc, #116]	@ (8037328 <gos_taskGetCurrentId+0xb0>)
 80372b4:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 80372b6:	687b      	ldr	r3, [r7, #4]
 80372b8:	2b00      	cmp	r3, #0
 80372ba:	d009      	beq.n	80372d0 <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 80372bc:	4b1b      	ldr	r3, [pc, #108]	@ (803732c <gos_taskGetCurrentId+0xb4>)
 80372be:	681b      	ldr	r3, [r3, #0]
 80372c0:	b29b      	uxth	r3, r3
 80372c2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80372c6:	b29a      	uxth	r2, r3
 80372c8:	687b      	ldr	r3, [r7, #4]
 80372ca:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 80372cc:	2355      	movs	r3, #85	@ 0x55
 80372ce:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 80372d0:	4b13      	ldr	r3, [pc, #76]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 80372d2:	781b      	ldrb	r3, [r3, #0]
 80372d4:	2b00      	cmp	r3, #0
 80372d6:	d005      	beq.n	80372e4 <gos_taskGetCurrentId+0x6c>
 80372d8:	4b11      	ldr	r3, [pc, #68]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 80372da:	781b      	ldrb	r3, [r3, #0]
 80372dc:	3b01      	subs	r3, #1
 80372de:	b2da      	uxtb	r2, r3
 80372e0:	4b0f      	ldr	r3, [pc, #60]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 80372e2:	701a      	strb	r2, [r3, #0]
 80372e4:	4b0e      	ldr	r3, [pc, #56]	@ (8037320 <gos_taskGetCurrentId+0xa8>)
 80372e6:	781b      	ldrb	r3, [r3, #0]
 80372e8:	2b00      	cmp	r3, #0
 80372ea:	d108      	bne.n	80372fe <gos_taskGetCurrentId+0x86>
 80372ec:	4b0d      	ldr	r3, [pc, #52]	@ (8037324 <gos_taskGetCurrentId+0xac>)
 80372ee:	681b      	ldr	r3, [r3, #0]
 80372f0:	f383 8810 	msr	PRIMASK, r3
 80372f4:	b662      	cpsie	i
 80372f6:	f3bf 8f4f 	dsb	sy
 80372fa:	f3bf 8f6f 	isb	sy
 80372fe:	4b0a      	ldr	r3, [pc, #40]	@ (8037328 <gos_taskGetCurrentId+0xb0>)
 8037300:	781b      	ldrb	r3, [r3, #0]
 8037302:	2b00      	cmp	r3, #0
 8037304:	d005      	beq.n	8037312 <gos_taskGetCurrentId+0x9a>
 8037306:	4b08      	ldr	r3, [pc, #32]	@ (8037328 <gos_taskGetCurrentId+0xb0>)
 8037308:	781b      	ldrb	r3, [r3, #0]
 803730a:	3b01      	subs	r3, #1
 803730c:	b2da      	uxtb	r2, r3
 803730e:	4b06      	ldr	r3, [pc, #24]	@ (8037328 <gos_taskGetCurrentId+0xb0>)
 8037310:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 8037312:	7bfb      	ldrb	r3, [r7, #15]
}
 8037314:	4618      	mov	r0, r3
 8037316:	3714      	adds	r7, #20
 8037318:	46bd      	mov	sp, r7
 803731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803731e:	4770      	bx	lr
 8037320:	2000b313 	.word	0x2000b313
 8037324:	2000b314 	.word	0x2000b314
 8037328:	2000b311 	.word	0x2000b311
 803732c:	2000b318 	.word	0x2000b318

08037330 <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8037330:	b580      	push	{r7, lr}
 8037332:	b084      	sub	sp, #16
 8037334:	af00      	add	r7, sp, #0
 8037336:	4603      	mov	r3, r0
 8037338:	6039      	str	r1, [r7, #0]
 803733a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 803733c:	23ae      	movs	r3, #174	@ 0xae
 803733e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8037340:	2300      	movs	r3, #0
 8037342:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8037344:	4b2d      	ldr	r3, [pc, #180]	@ (80373fc <gos_taskGetData+0xcc>)
 8037346:	781b      	ldrb	r3, [r3, #0]
 8037348:	2b00      	cmp	r3, #0
 803734a:	d108      	bne.n	803735e <gos_taskGetData+0x2e>
 803734c:	b672      	cpsid	i
 803734e:	f3ef 8310 	mrs	r3, PRIMASK
 8037352:	4a2b      	ldr	r2, [pc, #172]	@ (8037400 <gos_taskGetData+0xd0>)
 8037354:	6013      	str	r3, [r2, #0]
 8037356:	f3bf 8f4f 	dsb	sy
 803735a:	f3bf 8f6f 	isb	sy
 803735e:	4b27      	ldr	r3, [pc, #156]	@ (80373fc <gos_taskGetData+0xcc>)
 8037360:	781b      	ldrb	r3, [r3, #0]
 8037362:	3301      	adds	r3, #1
 8037364:	b2da      	uxtb	r2, r3
 8037366:	4b25      	ldr	r3, [pc, #148]	@ (80373fc <gos_taskGetData+0xcc>)
 8037368:	701a      	strb	r2, [r3, #0]
 803736a:	4b26      	ldr	r3, [pc, #152]	@ (8037404 <gos_taskGetData+0xd4>)
 803736c:	781b      	ldrb	r3, [r3, #0]
 803736e:	3301      	adds	r3, #1
 8037370:	b2da      	uxtb	r2, r3
 8037372:	4b24      	ldr	r3, [pc, #144]	@ (8037404 <gos_taskGetData+0xd4>)
 8037374:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8037376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803737a:	2b00      	cmp	r3, #0
 803737c:	da18      	bge.n	80373b0 <gos_taskGetData+0x80>
 803737e:	88fb      	ldrh	r3, [r7, #6]
 8037380:	f248 022f 	movw	r2, #32815	@ 0x802f
 8037384:	4293      	cmp	r3, r2
 8037386:	d813      	bhi.n	80373b0 <gos_taskGetData+0x80>
 8037388:	683b      	ldr	r3, [r7, #0]
 803738a:	2b00      	cmp	r3, #0
 803738c:	d010      	beq.n	80373b0 <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803738e:	88fb      	ldrh	r3, [r7, #6]
 8037390:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8037394:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8037396:	68bb      	ldr	r3, [r7, #8]
 8037398:	226a      	movs	r2, #106	@ 0x6a
 803739a:	fb02 f303 	mul.w	r3, r2, r3
 803739e:	4a1a      	ldr	r2, [pc, #104]	@ (8037408 <gos_taskGetData+0xd8>)
 80373a0:	4413      	add	r3, r2
 80373a2:	226a      	movs	r2, #106	@ 0x6a
 80373a4:	4619      	mov	r1, r3
 80373a6:	6838      	ldr	r0, [r7, #0]
 80373a8:	f004 ff13 	bl	803c1d2 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 80373ac:	2355      	movs	r3, #85	@ 0x55
 80373ae:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 80373b0:	4b12      	ldr	r3, [pc, #72]	@ (80373fc <gos_taskGetData+0xcc>)
 80373b2:	781b      	ldrb	r3, [r3, #0]
 80373b4:	2b00      	cmp	r3, #0
 80373b6:	d005      	beq.n	80373c4 <gos_taskGetData+0x94>
 80373b8:	4b10      	ldr	r3, [pc, #64]	@ (80373fc <gos_taskGetData+0xcc>)
 80373ba:	781b      	ldrb	r3, [r3, #0]
 80373bc:	3b01      	subs	r3, #1
 80373be:	b2da      	uxtb	r2, r3
 80373c0:	4b0e      	ldr	r3, [pc, #56]	@ (80373fc <gos_taskGetData+0xcc>)
 80373c2:	701a      	strb	r2, [r3, #0]
 80373c4:	4b0d      	ldr	r3, [pc, #52]	@ (80373fc <gos_taskGetData+0xcc>)
 80373c6:	781b      	ldrb	r3, [r3, #0]
 80373c8:	2b00      	cmp	r3, #0
 80373ca:	d108      	bne.n	80373de <gos_taskGetData+0xae>
 80373cc:	4b0c      	ldr	r3, [pc, #48]	@ (8037400 <gos_taskGetData+0xd0>)
 80373ce:	681b      	ldr	r3, [r3, #0]
 80373d0:	f383 8810 	msr	PRIMASK, r3
 80373d4:	b662      	cpsie	i
 80373d6:	f3bf 8f4f 	dsb	sy
 80373da:	f3bf 8f6f 	isb	sy
 80373de:	4b09      	ldr	r3, [pc, #36]	@ (8037404 <gos_taskGetData+0xd4>)
 80373e0:	781b      	ldrb	r3, [r3, #0]
 80373e2:	2b00      	cmp	r3, #0
 80373e4:	d005      	beq.n	80373f2 <gos_taskGetData+0xc2>
 80373e6:	4b07      	ldr	r3, [pc, #28]	@ (8037404 <gos_taskGetData+0xd4>)
 80373e8:	781b      	ldrb	r3, [r3, #0]
 80373ea:	3b01      	subs	r3, #1
 80373ec:	b2da      	uxtb	r2, r3
 80373ee:	4b05      	ldr	r3, [pc, #20]	@ (8037404 <gos_taskGetData+0xd4>)
 80373f0:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 80373f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80373f4:	4618      	mov	r0, r3
 80373f6:	3710      	adds	r7, #16
 80373f8:	46bd      	mov	sp, r7
 80373fa:	bd80      	pop	{r7, pc}
 80373fc:	2000b313 	.word	0x2000b313
 8037400:	2000b314 	.word	0x2000b314
 8037404:	2000b311 	.word	0x2000b311
 8037408:	200018fc 	.word	0x200018fc

0803740c <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 803740c:	b580      	push	{r7, lr}
 803740e:	b084      	sub	sp, #16
 8037410:	af00      	add	r7, sp, #0
 8037412:	4603      	mov	r3, r0
 8037414:	6039      	str	r1, [r7, #0]
 8037416:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8037418:	23ae      	movs	r3, #174	@ 0xae
 803741a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803741c:	4b2f      	ldr	r3, [pc, #188]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 803741e:	781b      	ldrb	r3, [r3, #0]
 8037420:	2b00      	cmp	r3, #0
 8037422:	d108      	bne.n	8037436 <gos_taskGetDataByIndex+0x2a>
 8037424:	b672      	cpsid	i
 8037426:	f3ef 8310 	mrs	r3, PRIMASK
 803742a:	4a2d      	ldr	r2, [pc, #180]	@ (80374e0 <gos_taskGetDataByIndex+0xd4>)
 803742c:	6013      	str	r3, [r2, #0]
 803742e:	f3bf 8f4f 	dsb	sy
 8037432:	f3bf 8f6f 	isb	sy
 8037436:	4b29      	ldr	r3, [pc, #164]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 8037438:	781b      	ldrb	r3, [r3, #0]
 803743a:	3301      	adds	r3, #1
 803743c:	b2da      	uxtb	r2, r3
 803743e:	4b27      	ldr	r3, [pc, #156]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 8037440:	701a      	strb	r2, [r3, #0]
 8037442:	4b28      	ldr	r3, [pc, #160]	@ (80374e4 <gos_taskGetDataByIndex+0xd8>)
 8037444:	781b      	ldrb	r3, [r3, #0]
 8037446:	3301      	adds	r3, #1
 8037448:	b2da      	uxtb	r2, r3
 803744a:	4b26      	ldr	r3, [pc, #152]	@ (80374e4 <gos_taskGetDataByIndex+0xd8>)
 803744c:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 803744e:	88fb      	ldrh	r3, [r7, #6]
 8037450:	2b2f      	cmp	r3, #47	@ 0x2f
 8037452:	d81d      	bhi.n	8037490 <gos_taskGetDataByIndex+0x84>
 8037454:	683b      	ldr	r3, [r7, #0]
 8037456:	2b00      	cmp	r3, #0
 8037458:	d01a      	beq.n	8037490 <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 803745a:	4b23      	ldr	r3, [pc, #140]	@ (80374e8 <gos_taskGetDataByIndex+0xdc>)
 803745c:	681b      	ldr	r3, [r3, #0]
 803745e:	4a23      	ldr	r2, [pc, #140]	@ (80374ec <gos_taskGetDataByIndex+0xe0>)
 8037460:	216a      	movs	r1, #106	@ 0x6a
 8037462:	fb01 f303 	mul.w	r3, r1, r3
 8037466:	4413      	add	r3, r2
 8037468:	3308      	adds	r3, #8
 803746a:	881b      	ldrh	r3, [r3, #0]
 803746c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        taskData != NULL &&
 8037470:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8037474:	d10c      	bne.n	8037490 <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8037476:	88fb      	ldrh	r3, [r7, #6]
 8037478:	226a      	movs	r2, #106	@ 0x6a
 803747a:	fb02 f303 	mul.w	r3, r2, r3
 803747e:	4a1b      	ldr	r2, [pc, #108]	@ (80374ec <gos_taskGetDataByIndex+0xe0>)
 8037480:	4413      	add	r3, r2
 8037482:	226a      	movs	r2, #106	@ 0x6a
 8037484:	4619      	mov	r1, r3
 8037486:	6838      	ldr	r0, [r7, #0]
 8037488:	f004 fea3 	bl	803c1d2 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 803748c:	2355      	movs	r3, #85	@ 0x55
 803748e:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8037490:	4b12      	ldr	r3, [pc, #72]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 8037492:	781b      	ldrb	r3, [r3, #0]
 8037494:	2b00      	cmp	r3, #0
 8037496:	d005      	beq.n	80374a4 <gos_taskGetDataByIndex+0x98>
 8037498:	4b10      	ldr	r3, [pc, #64]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 803749a:	781b      	ldrb	r3, [r3, #0]
 803749c:	3b01      	subs	r3, #1
 803749e:	b2da      	uxtb	r2, r3
 80374a0:	4b0e      	ldr	r3, [pc, #56]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 80374a2:	701a      	strb	r2, [r3, #0]
 80374a4:	4b0d      	ldr	r3, [pc, #52]	@ (80374dc <gos_taskGetDataByIndex+0xd0>)
 80374a6:	781b      	ldrb	r3, [r3, #0]
 80374a8:	2b00      	cmp	r3, #0
 80374aa:	d108      	bne.n	80374be <gos_taskGetDataByIndex+0xb2>
 80374ac:	4b0c      	ldr	r3, [pc, #48]	@ (80374e0 <gos_taskGetDataByIndex+0xd4>)
 80374ae:	681b      	ldr	r3, [r3, #0]
 80374b0:	f383 8810 	msr	PRIMASK, r3
 80374b4:	b662      	cpsie	i
 80374b6:	f3bf 8f4f 	dsb	sy
 80374ba:	f3bf 8f6f 	isb	sy
 80374be:	4b09      	ldr	r3, [pc, #36]	@ (80374e4 <gos_taskGetDataByIndex+0xd8>)
 80374c0:	781b      	ldrb	r3, [r3, #0]
 80374c2:	2b00      	cmp	r3, #0
 80374c4:	d005      	beq.n	80374d2 <gos_taskGetDataByIndex+0xc6>
 80374c6:	4b07      	ldr	r3, [pc, #28]	@ (80374e4 <gos_taskGetDataByIndex+0xd8>)
 80374c8:	781b      	ldrb	r3, [r3, #0]
 80374ca:	3b01      	subs	r3, #1
 80374cc:	b2da      	uxtb	r2, r3
 80374ce:	4b05      	ldr	r3, [pc, #20]	@ (80374e4 <gos_taskGetDataByIndex+0xd8>)
 80374d0:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 80374d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80374d4:	4618      	mov	r0, r3
 80374d6:	3710      	adds	r7, #16
 80374d8:	46bd      	mov	sp, r7
 80374da:	bd80      	pop	{r7, pc}
 80374dc:	2000b313 	.word	0x2000b313
 80374e0:	2000b314 	.word	0x2000b314
 80374e4:	2000b311 	.word	0x2000b311
 80374e8:	2000b318 	.word	0x2000b318
 80374ec:	200018fc 	.word	0x200018fc

080374f0 <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 80374f0:	b480      	push	{r7}
 80374f2:	b085      	sub	sp, #20
 80374f4:	af00      	add	r7, sp, #0
 80374f6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 80374f8:	23ae      	movs	r3, #174	@ 0xae
 80374fa:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 80374fc:	2300      	movs	r3, #0
 80374fe:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 8037500:	687b      	ldr	r3, [r7, #4]
 8037502:	2b00      	cmp	r3, #0
 8037504:	d01e      	beq.n	8037544 <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 8037506:	687b      	ldr	r3, [r7, #4]
 8037508:	2200      	movs	r2, #0
 803750a:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803750c:	2300      	movs	r3, #0
 803750e:	81bb      	strh	r3, [r7, #12]
 8037510:	e011      	b.n	8037536 <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 8037512:	89bb      	ldrh	r3, [r7, #12]
 8037514:	4a0f      	ldr	r2, [pc, #60]	@ (8037554 <gos_taskGetNumber+0x64>)
 8037516:	216a      	movs	r1, #106	@ 0x6a
 8037518:	fb01 f303 	mul.w	r3, r1, r3
 803751c:	4413      	add	r3, r2
 803751e:	681b      	ldr	r3, [r3, #0]
 8037520:	2b00      	cmp	r3, #0
 8037522:	d00c      	beq.n	803753e <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 8037524:	687b      	ldr	r3, [r7, #4]
 8037526:	881b      	ldrh	r3, [r3, #0]
 8037528:	3301      	adds	r3, #1
 803752a:	b29a      	uxth	r2, r3
 803752c:	687b      	ldr	r3, [r7, #4]
 803752e:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8037530:	89bb      	ldrh	r3, [r7, #12]
 8037532:	3301      	adds	r3, #1
 8037534:	81bb      	strh	r3, [r7, #12]
 8037536:	89bb      	ldrh	r3, [r7, #12]
 8037538:	2b2f      	cmp	r3, #47	@ 0x2f
 803753a:	d9ea      	bls.n	8037512 <gos_taskGetNumber+0x22>
 803753c:	e000      	b.n	8037540 <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 803753e:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 8037540:	2355      	movs	r3, #85	@ 0x55
 8037542:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 8037544:	7bfb      	ldrb	r3, [r7, #15]
}
 8037546:	4618      	mov	r0, r3
 8037548:	3714      	adds	r7, #20
 803754a:	46bd      	mov	sp, r7
 803754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037550:	4770      	bx	lr
 8037552:	bf00      	nop
 8037554:	200018fc 	.word	0x200018fc

08037558 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 8037558:	b480      	push	{r7}
 803755a:	b085      	sub	sp, #20
 803755c:	af00      	add	r7, sp, #0
 803755e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_ERROR;
 8037560:	23ae      	movs	r3, #174	@ 0xae
 8037562:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction != NULL                     &&
 8037564:	687b      	ldr	r3, [r7, #4]
 8037566:	681b      	ldr	r3, [r3, #0]
 8037568:	2b00      	cmp	r3, #0
 803756a:	d022      	beq.n	80375b2 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPrivilegeLevel != 0                  &&
 803756c:	687b      	ldr	r3, [r7, #4]
 803756e:	891b      	ldrh	r3, [r3, #8]
 8037570:	b29b      	uxth	r3, r3
 8037572:	2b00      	cmp	r3, #0
 8037574:	d01d      	beq.n	80375b2 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
        taskDescriptor->taskFunction != gos_idleTask             &&
 8037576:	687b      	ldr	r3, [r7, #4]
 8037578:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
 803757a:	4a11      	ldr	r2, [pc, #68]	@ (80375c0 <gos_taskCheckDescriptor+0x68>)
 803757c:	4293      	cmp	r3, r2
 803757e:	d018      	beq.n	80375b2 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 8037580:	687b      	ldr	r3, [r7, #4]
 8037582:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8037586:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction != gos_idleTask             &&
 8037588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 803758c:	d811      	bhi.n	80375b2 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 803758e:	687b      	ldr	r3, [r7, #4]
 8037590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8037594:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 8037596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 803759a:	d30a      	bcc.n	80375b2 <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize % 4 == 0u)
 803759c:	687b      	ldr	r3, [r7, #4]
 803759e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80375a2:	b29b      	uxth	r3, r3
 80375a4:	f003 0303 	and.w	r3, r3, #3
 80375a8:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 80375aa:	2b00      	cmp	r3, #0
 80375ac:	d101      	bne.n	80375b2 <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_SUCCESS;
 80375ae:	2355      	movs	r3, #85	@ 0x55
 80375b0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 80375b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80375b4:	4618      	mov	r0, r3
 80375b6:	3714      	adds	r7, #20
 80375b8:	46bd      	mov	sp, r7
 80375ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80375be:	4770      	bx	lr
 80375c0:	080375c5 	.word	0x080375c5

080375c4 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 80375c4:	b580      	push	{r7, lr}
 80375c6:	b082      	sub	sp, #8
 80375c8:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 80375ca:	2155      	movs	r1, #85	@ 0x55
 80375cc:	480c      	ldr	r0, [pc, #48]	@ (8037600 <gos_idleTask+0x3c>)
 80375ce:	f000 fa03 	bl	80379d8 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 80375d2:	4b0c      	ldr	r3, [pc, #48]	@ (8037604 <gos_idleTask+0x40>)
 80375d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80375d6:	3301      	adds	r3, #1
 80375d8:	4a0a      	ldr	r2, [pc, #40]	@ (8037604 <gos_idleTask+0x40>)
 80375da:	6413      	str	r3, [r2, #64]	@ 0x40

        if (kernelIdleHookFunction != NULL)
 80375dc:	4b0a      	ldr	r3, [pc, #40]	@ (8037608 <gos_idleTask+0x44>)
 80375de:	681b      	ldr	r3, [r3, #0]
 80375e0:	2b00      	cmp	r3, #0
 80375e2:	d002      	beq.n	80375ea <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 80375e4:	4b08      	ldr	r3, [pc, #32]	@ (8037608 <gos_idleTask+0x44>)
 80375e6:	681b      	ldr	r3, [r3, #0]
 80375e8:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 80375ea:	2049      	movs	r0, #73	@ 0x49
 80375ec:	f7fd faa2 	bl	8034b34 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 80375f0:	2355      	movs	r3, #85	@ 0x55
 80375f2:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 80375f4:	2009      	movs	r0, #9
 80375f6:	f7fd ffab 	bl	8035550 <gos_kernelReschedule>
    return taskYieldResult;
 80375fa:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 80375fc:	e7e9      	b.n	80375d2 <gos_idleTask+0xe>
 80375fe:	bf00      	nop
 8037600:	0803ef28 	.word	0x0803ef28
 8037604:	200018fc 	.word	0x200018fc
 8037608:	2000b344 	.word	0x2000b344

0803760c <main>:

/*
 * Main
 */
int main (void_t)
{
 803760c:	b580      	push	{r7, lr}
 803760e:	b082      	sub	sp, #8
 8037610:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8037612:	4b1d      	ldr	r3, [pc, #116]	@ (8037688 <main+0x7c>)
 8037614:	781b      	ldrb	r3, [r3, #0]
 8037616:	3301      	adds	r3, #1
 8037618:	b2da      	uxtb	r2, r3
 803761a:	4b1b      	ldr	r3, [pc, #108]	@ (8037688 <main+0x7c>)
 803761c:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 803761e:	f7e9 fc6b 	bl	8020ef8 <gos_platformDriverInit>
 8037622:	4603      	mov	r3, r0
 8037624:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8037626:	f000 f905 	bl	8037834 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 803762a:	79fb      	ldrb	r3, [r7, #7]
 803762c:	4619      	mov	r1, r3
 803762e:	4817      	ldr	r0, [pc, #92]	@ (803768c <main+0x80>)
 8037630:	f000 f9d2 	bl	80379d8 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8037634:	f7fd f89c 	bl	8034770 <gos_kernelInit>
 8037638:	4603      	mov	r3, r0
 803763a:	4619      	mov	r1, r3
 803763c:	4814      	ldr	r0, [pc, #80]	@ (8037690 <main+0x84>)
 803763e:	f000 f9cb 	bl	80379d8 <gos_errorTraceInit>
 8037642:	4603      	mov	r3, r0
 8037644:	2b55      	cmp	r3, #85	@ 0x55
 8037646:	d109      	bne.n	803765c <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 8037648:	4912      	ldr	r1, [pc, #72]	@ (8037694 <main+0x88>)
 803764a:	4813      	ldr	r0, [pc, #76]	@ (8037698 <main+0x8c>)
 803764c:	f7fe fa36 	bl	8035abc <gos_taskRegister>
 8037650:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8037652:	2b55      	cmp	r3, #85	@ 0x55
 8037654:	d102      	bne.n	803765c <main+0x50>
    {
        initError = GOS_FALSE;
 8037656:	4b11      	ldr	r3, [pc, #68]	@ (803769c <main+0x90>)
 8037658:	2249      	movs	r2, #73	@ 0x49
 803765a:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 803765c:	f000 f860 	bl	8037720 <gos_Start>
 8037660:	4603      	mov	r3, r0
 8037662:	2bae      	cmp	r3, #174	@ 0xae
 8037664:	d106      	bne.n	8037674 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8037666:	4b0e      	ldr	r3, [pc, #56]	@ (80376a0 <main+0x94>)
 8037668:	22c2      	movs	r2, #194	@ 0xc2
 803766a:	490e      	ldr	r1, [pc, #56]	@ (80376a4 <main+0x98>)
 803766c:	2034      	movs	r0, #52	@ 0x34
 803766e:	f000 f91b 	bl	80378a8 <gos_errorHandler>
 8037672:	e006      	b.n	8037682 <main+0x76>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8037674:	4b0c      	ldr	r3, [pc, #48]	@ (80376a8 <main+0x9c>)
 8037676:	22c6      	movs	r2, #198	@ 0xc6
 8037678:	490a      	ldr	r1, [pc, #40]	@ (80376a4 <main+0x98>)
 803767a:	2034      	movs	r0, #52	@ 0x34
 803767c:	f000 f914 	bl	80378a8 <gos_errorHandler>
    }

    for (;;);
 8037680:	bf00      	nop
 8037682:	bf00      	nop
 8037684:	e7fd      	b.n	8037682 <main+0x76>
 8037686:	bf00      	nop
 8037688:	2000b311 	.word	0x2000b311
 803768c:	0803ef38 	.word	0x0803ef38
 8037690:	0803ef58 	.word	0x0803ef58
 8037694:	2000b34a 	.word	0x2000b34a
 8037698:	20002e20 	.word	0x20002e20
 803769c:	2000b348 	.word	0x2000b348
 80376a0:	0803ef70 	.word	0x0803ef70
 80376a4:	08040850 	.word	0x08040850
 80376a8:	0803ef90 	.word	0x0803ef90

080376ac <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 80376ac:	b580      	push	{r7, lr}
 80376ae:	b082      	sub	sp, #8
 80376b0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t privileges    = 0u;
 80376b2:	2300      	movs	r3, #0
 80376b4:	80fb      	strh	r3, [r7, #6]
    gos_tid_t                currentTaskId = GOS_INVALID_TASK_ID;
 80376b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80376ba:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    dumpRequired = GOS_TRUE;
 80376bc:	4b16      	ldr	r3, [pc, #88]	@ (8037718 <gos_Dump+0x6c>)
 80376be:	2236      	movs	r2, #54	@ 0x36
 80376c0:	701a      	strb	r2, [r3, #0]

    (void_t) gos_taskGetCurrentId(&currentTaskId);
 80376c2:	1d3b      	adds	r3, r7, #4
 80376c4:	4618      	mov	r0, r3
 80376c6:	f7ff fdd7 	bl	8037278 <gos_taskGetCurrentId>
    (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 80376ca:	88bb      	ldrh	r3, [r7, #4]
 80376cc:	1dba      	adds	r2, r7, #6
 80376ce:	4611      	mov	r1, r2
 80376d0:	4618      	mov	r0, r3
 80376d2:	f7ff fd29 	bl	8037128 <gos_taskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 80376d6:	88fb      	ldrh	r3, [r7, #6]
 80376d8:	b21b      	sxth	r3, r3
 80376da:	2b00      	cmp	r3, #0
 80376dc:	db11      	blt.n	8037702 <gos_Dump+0x56>
    {
        (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80376de:	88bb      	ldrh	r3, [r7, #4]
 80376e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80376e4:	4618      	mov	r0, r3
 80376e6:	f7ff fbbb 	bl	8036e60 <gos_taskAddPrivilege>
        (void_t) gos_taskWakeup(systemTaskId);
 80376ea:	4b0c      	ldr	r3, [pc, #48]	@ (803771c <gos_Dump+0x70>)
 80376ec:	881b      	ldrh	r3, [r3, #0]
 80376ee:	4618      	mov	r0, r3
 80376f0:	f7fe fc08 	bl	8035f04 <gos_taskWakeup>
        (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80376f4:	88bb      	ldrh	r3, [r7, #4]
 80376f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80376fa:	4618      	mov	r0, r3
 80376fc:	f7ff fc28 	bl	8036f50 <gos_taskRemovePrivilege>
 8037700:	e004      	b.n	803770c <gos_Dump+0x60>
    }
    else
    {
        (void_t) gos_taskWakeup(systemTaskId);
 8037702:	4b06      	ldr	r3, [pc, #24]	@ (803771c <gos_Dump+0x70>)
 8037704:	881b      	ldrh	r3, [r3, #0]
 8037706:	4618      	mov	r0, r3
 8037708:	f7fe fbfc 	bl	8035f04 <gos_taskWakeup>
    }

    (void_t) gos_shellSuspend();
 803770c:	f001 fc60 	bl	8038fd0 <gos_shellSuspend>
}
 8037710:	bf00      	nop
 8037712:	3708      	adds	r7, #8
 8037714:	46bd      	mov	sp, r7
 8037716:	bd80      	pop	{r7, pc}
 8037718:	2000b349 	.word	0x2000b349
 803771c:	2000b34a 	.word	0x2000b34a

08037720 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8037720:	b580      	push	{r7, lr}
 8037722:	b082      	sub	sp, #8
 8037724:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 8037726:	23b1      	movs	r3, #177	@ 0xb1
 8037728:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 803772a:	4b06      	ldr	r3, [pc, #24]	@ (8037744 <gos_Start+0x24>)
 803772c:	781b      	ldrb	r3, [r3, #0]
 803772e:	2b49      	cmp	r3, #73	@ 0x49
 8037730:	d103      	bne.n	803773a <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 8037732:	f7fd f909 	bl	8034948 <gos_kernelStart>
 8037736:	4603      	mov	r3, r0
 8037738:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 803773a:	79fb      	ldrb	r3, [r7, #7]
}
 803773c:	4618      	mov	r0, r3
 803773e:	3708      	adds	r7, #8
 8037740:	46bd      	mov	sp, r7
 8037742:	bd80      	pop	{r7, pc}
 8037744:	2000b348 	.word	0x2000b348

08037748 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8037748:	b590      	push	{r4, r7, lr}
 803774a:	b083      	sub	sp, #12
 803774c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 803774e:	2355      	movs	r3, #85	@ 0x55
 8037750:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 8037752:	2300      	movs	r3, #0
 8037754:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8037756:	4b31      	ldr	r3, [pc, #196]	@ (803781c <gos_systemTask+0xd4>)
 8037758:	781b      	ldrb	r3, [r3, #0]
 803775a:	3301      	adds	r3, #1
 803775c:	b2da      	uxtb	r2, r3
 803775e:	4b2f      	ldr	r3, [pc, #188]	@ (803781c <gos_systemTask+0xd4>)
 8037760:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8037762:	2300      	movs	r3, #0
 8037764:	71bb      	strb	r3, [r7, #6]
 8037766:	e020      	b.n	80377aa <gos_systemTask+0x62>
    {
    	GOS_CONCAT_RESULT(sysInitResult, gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc()));
 8037768:	79fb      	ldrb	r3, [r7, #7]
 803776a:	2b55      	cmp	r3, #85	@ 0x55
 803776c:	d118      	bne.n	80377a0 <gos_systemTask+0x58>
 803776e:	79ba      	ldrb	r2, [r7, #6]
 8037770:	4613      	mov	r3, r2
 8037772:	00db      	lsls	r3, r3, #3
 8037774:	4413      	add	r3, r2
 8037776:	009b      	lsls	r3, r3, #2
 8037778:	4a29      	ldr	r2, [pc, #164]	@ (8037820 <gos_systemTask+0xd8>)
 803777a:	189c      	adds	r4, r3, r2
 803777c:	79ba      	ldrb	r2, [r7, #6]
 803777e:	4928      	ldr	r1, [pc, #160]	@ (8037820 <gos_systemTask+0xd8>)
 8037780:	4613      	mov	r3, r2
 8037782:	00db      	lsls	r3, r3, #3
 8037784:	4413      	add	r3, r2
 8037786:	009b      	lsls	r3, r3, #2
 8037788:	440b      	add	r3, r1
 803778a:	3320      	adds	r3, #32
 803778c:	681b      	ldr	r3, [r3, #0]
 803778e:	4798      	blx	r3
 8037790:	4603      	mov	r3, r0
 8037792:	4619      	mov	r1, r3
 8037794:	4620      	mov	r0, r4
 8037796:	f000 f91f 	bl	80379d8 <gos_errorTraceInit>
 803779a:	4603      	mov	r3, r0
 803779c:	71fb      	strb	r3, [r7, #7]
 803779e:	e001      	b.n	80377a4 <gos_systemTask+0x5c>
 80377a0:	23ae      	movs	r3, #174	@ 0xae
 80377a2:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 80377a4:	79bb      	ldrb	r3, [r7, #6]
 80377a6:	3301      	adds	r3, #1
 80377a8:	71bb      	strb	r3, [r7, #6]
 80377aa:	79bb      	ldrb	r3, [r7, #6]
 80377ac:	2b08      	cmp	r3, #8
 80377ae:	d9db      	bls.n	8037768 <gos_systemTask+0x20>
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 80377b0:	79fb      	ldrb	r3, [r7, #7]
 80377b2:	4619      	mov	r1, r3
 80377b4:	481b      	ldr	r0, [pc, #108]	@ (8037824 <gos_systemTask+0xdc>)
 80377b6:	f000 f90f 	bl	80379d8 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 80377ba:	4b18      	ldr	r3, [pc, #96]	@ (803781c <gos_systemTask+0xd4>)
 80377bc:	781b      	ldrb	r3, [r3, #0]
 80377be:	2b00      	cmp	r3, #0
 80377c0:	d005      	beq.n	80377ce <gos_systemTask+0x86>
 80377c2:	4b16      	ldr	r3, [pc, #88]	@ (803781c <gos_systemTask+0xd4>)
 80377c4:	781b      	ldrb	r3, [r3, #0]
 80377c6:	3b01      	subs	r3, #1
 80377c8:	b2da      	uxtb	r2, r3
 80377ca:	4b14      	ldr	r3, [pc, #80]	@ (803781c <gos_systemTask+0xd4>)
 80377cc:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80377ce:	4b16      	ldr	r3, [pc, #88]	@ (8037828 <gos_systemTask+0xe0>)
 80377d0:	881b      	ldrh	r3, [r3, #0]
 80377d2:	21c3      	movs	r1, #195	@ 0xc3
 80377d4:	4618      	mov	r0, r3
 80377d6:	f7ff fa0f 	bl	8036bf8 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80377da:	4b13      	ldr	r3, [pc, #76]	@ (8037828 <gos_systemTask+0xe0>)
 80377dc:	881b      	ldrh	r3, [r3, #0]
 80377de:	21c3      	movs	r1, #195	@ 0xc3
 80377e0:	4618      	mov	r0, r3
 80377e2:	f7ff f945 	bl	8036a70 <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 80377e6:	2036      	movs	r0, #54	@ 0x36
 80377e8:	f7fd f9a4 	bl	8034b34 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 80377ec:	4b0f      	ldr	r3, [pc, #60]	@ (803782c <gos_systemTask+0xe4>)
 80377ee:	781b      	ldrb	r3, [r3, #0]
 80377f0:	2b36      	cmp	r3, #54	@ 0x36
 80377f2:	d10e      	bne.n	8037812 <gos_systemTask+0xca>
        {
            gos_kernelDump();
 80377f4:	f7fd fb02 	bl	8034dfc <gos_kernelDump>
            gos_queueDump();
 80377f8:	f001 fafa 	bl	8038df0 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 80377fc:	4b0c      	ldr	r3, [pc, #48]	@ (8037830 <gos_systemTask+0xe8>)
 80377fe:	781b      	ldrb	r3, [r3, #0]
 8037800:	2100      	movs	r1, #0
 8037802:	4618      	mov	r0, r3
 8037804:	f002 f800 	bl	8039808 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 8037808:	4b08      	ldr	r3, [pc, #32]	@ (803782c <gos_systemTask+0xe4>)
 803780a:	2249      	movs	r2, #73	@ 0x49
 803780c:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 803780e:	f001 fbf3 	bl	8038ff8 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8037812:	2064      	movs	r0, #100	@ 0x64
 8037814:	f7fe fae4 	bl	8035de0 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8037818:	e7e5      	b.n	80377e6 <gos_systemTask+0x9e>
 803781a:	bf00      	nop
 803781c:	2000b311 	.word	0x2000b311
 8037820:	20002cdc 	.word	0x20002cdc
 8037824:	0803f00c 	.word	0x0803f00c
 8037828:	2000b34a 	.word	0x2000b34a
 803782c:	2000b349 	.word	0x2000b349
 8037830:	2000b310 	.word	0x2000b310

08037834 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 8037834:	b580      	push	{r7, lr}
 8037836:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 8037838:	4811      	ldr	r0, [pc, #68]	@ (8037880 <gos_printStartupLogo+0x4c>)
 803783a:	f003 fb49 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 803783e:	4811      	ldr	r0, [pc, #68]	@ (8037884 <gos_printStartupLogo+0x50>)
 8037840:	f003 fb46 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8037844:	4810      	ldr	r0, [pc, #64]	@ (8037888 <gos_printStartupLogo+0x54>)
 8037846:	f003 fb43 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 803784a:	4810      	ldr	r0, [pc, #64]	@ (803788c <gos_printStartupLogo+0x58>)
 803784c:	f003 fb40 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 8037850:	480f      	ldr	r0, [pc, #60]	@ (8037890 <gos_printStartupLogo+0x5c>)
 8037852:	f003 fb3d 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 8037856:	480f      	ldr	r0, [pc, #60]	@ (8037894 <gos_printStartupLogo+0x60>)
 8037858:	f003 fb3a 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 803785c:	480e      	ldr	r0, [pc, #56]	@ (8037898 <gos_printStartupLogo+0x64>)
 803785e:	f003 fb37 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8037862:	4809      	ldr	r0, [pc, #36]	@ (8037888 <gos_printStartupLogo+0x54>)
 8037864:	f003 fb34 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 8037868:	480c      	ldr	r0, [pc, #48]	@ (803789c <gos_printStartupLogo+0x68>)
 803786a:	f003 fb31 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2025                        \r\n\r\n");
 803786e:	480c      	ldr	r0, [pc, #48]	@ (80378a0 <gos_printStartupLogo+0x6c>)
 8037870:	f003 fb2e 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 8037874:	480b      	ldr	r0, [pc, #44]	@ (80378a4 <gos_printStartupLogo+0x70>)
 8037876:	f003 fb2b 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
}
 803787a:	bf00      	nop
 803787c:	bd80      	pop	{r7, pc}
 803787e:	bf00      	nop
 8037880:	0803f024 	.word	0x0803f024
 8037884:	0803f074 	.word	0x0803f074
 8037888:	0803f0c4 	.word	0x0803f0c4
 803788c:	0803f114 	.word	0x0803f114
 8037890:	0803f164 	.word	0x0803f164
 8037894:	0803f1b4 	.word	0x0803f1b4
 8037898:	0803f204 	.word	0x0803f204
 803789c:	0803f254 	.word	0x0803f254
 80378a0:	0803f2a4 	.word	0x0803f2a4
 80378a4:	0803f2f4 	.word	0x0803f2f4

080378a8 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 80378a8:	b408      	push	{r3}
 80378aa:	b580      	push	{r7, lr}
 80378ac:	b087      	sub	sp, #28
 80378ae:	af00      	add	r7, sp, #0
 80378b0:	4603      	mov	r3, r0
 80378b2:	60b9      	str	r1, [r7, #8]
 80378b4:	607a      	str	r2, [r7, #4]
 80378b6:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 80378b8:	483a      	ldr	r0, [pc, #232]	@ (80379a4 <gos_errorHandler+0xfc>)
 80378ba:	f003 fb09 	bl	803aed0 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 80378be:	7bfb      	ldrb	r3, [r7, #15]
 80378c0:	2b34      	cmp	r3, #52	@ 0x34
 80378c2:	d103      	bne.n	80378cc <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80378c4:	4838      	ldr	r0, [pc, #224]	@ (80379a8 <gos_errorHandler+0x100>)
 80378c6:	f003 fb03 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
 80378ca:	e013      	b.n	80378f4 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 80378cc:	7bfb      	ldrb	r3, [r7, #15]
 80378ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80378d0:	d103      	bne.n	80378da <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80378d2:	4836      	ldr	r0, [pc, #216]	@ (80379ac <gos_errorHandler+0x104>)
 80378d4:	f003 fafc 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
 80378d8:	e00c      	b.n	80378f4 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80378da:	7bfb      	ldrb	r3, [r7, #15]
 80378dc:	2b1a      	cmp	r3, #26
 80378de:	d103      	bne.n	80378e8 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80378e0:	4833      	ldr	r0, [pc, #204]	@ (80379b0 <gos_errorHandler+0x108>)
 80378e2:	f003 faf5 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
 80378e6:	e005      	b.n	80378f4 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 80378e8:	7bfb      	ldrb	r3, [r7, #15]
 80378ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80378ec:	d102      	bne.n	80378f4 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80378ee:	4831      	ldr	r0, [pc, #196]	@ (80379b4 <gos_errorHandler+0x10c>)
 80378f0:	f003 faee 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 80378f4:	68bb      	ldr	r3, [r7, #8]
 80378f6:	2b00      	cmp	r3, #0
 80378f8:	d005      	beq.n	8037906 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 80378fa:	687a      	ldr	r2, [r7, #4]
 80378fc:	68b9      	ldr	r1, [r7, #8]
 80378fe:	482e      	ldr	r0, [pc, #184]	@ (80379b8 <gos_errorHandler+0x110>)
 8037900:	f003 fae6 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
 8037904:	e006      	b.n	8037914 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 8037906:	687b      	ldr	r3, [r7, #4]
 8037908:	2b00      	cmp	r3, #0
 803790a:	d003      	beq.n	8037914 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 803790c:	6879      	ldr	r1, [r7, #4]
 803790e:	482b      	ldr	r0, [pc, #172]	@ (80379bc <gos_errorHandler+0x114>)
 8037910:	f003 fade 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8037914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8037916:	2b00      	cmp	r3, #0
 8037918:	d00b      	beq.n	8037932 <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 803791a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 803791e:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 8037920:	697a      	ldr	r2, [r7, #20]
 8037922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8037924:	4826      	ldr	r0, [pc, #152]	@ (80379c0 <gos_errorHandler+0x118>)
 8037926:	f004 fbc3 	bl	803c0b0 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 803792a:	4925      	ldr	r1, [pc, #148]	@ (80379c0 <gos_errorHandler+0x118>)
 803792c:	4825      	ldr	r0, [pc, #148]	@ (80379c4 <gos_errorHandler+0x11c>)
 803792e:	f003 facf 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 8037932:	4825      	ldr	r0, [pc, #148]	@ (80379c8 <gos_errorHandler+0x120>)
 8037934:	f003 facc 	bl	803aed0 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8037938:	7bfb      	ldrb	r3, [r7, #15]
 803793a:	2b34      	cmp	r3, #52	@ 0x34
 803793c:	d002      	beq.n	8037944 <gos_errorHandler+0x9c>
 803793e:	7bfb      	ldrb	r3, [r7, #15]
 8037940:	2b1a      	cmp	r3, #26
 8037942:	d127      	bne.n	8037994 <gos_errorHandler+0xec>
    {
        GOS_DISABLE_SCHED
 8037944:	4b21      	ldr	r3, [pc, #132]	@ (80379cc <gos_errorHandler+0x124>)
 8037946:	781b      	ldrb	r3, [r3, #0]
 8037948:	3301      	adds	r3, #1
 803794a:	b2da      	uxtb	r2, r3
 803794c:	4b1f      	ldr	r3, [pc, #124]	@ (80379cc <gos_errorHandler+0x124>)
 803794e:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 8037950:	4b1f      	ldr	r3, [pc, #124]	@ (80379d0 <gos_errorHandler+0x128>)
 8037952:	781b      	ldrb	r3, [r3, #0]
 8037954:	2b00      	cmp	r3, #0
 8037956:	d108      	bne.n	803796a <gos_errorHandler+0xc2>
 8037958:	b672      	cpsid	i
 803795a:	f3ef 8310 	mrs	r3, PRIMASK
 803795e:	4a1d      	ldr	r2, [pc, #116]	@ (80379d4 <gos_errorHandler+0x12c>)
 8037960:	6013      	str	r3, [r2, #0]
 8037962:	f3bf 8f4f 	dsb	sy
 8037966:	f3bf 8f6f 	isb	sy
 803796a:	4b19      	ldr	r3, [pc, #100]	@ (80379d0 <gos_errorHandler+0x128>)
 803796c:	781b      	ldrb	r3, [r3, #0]
 803796e:	3301      	adds	r3, #1
 8037970:	b2da      	uxtb	r2, r3
 8037972:	4b17      	ldr	r3, [pc, #92]	@ (80379d0 <gos_errorHandler+0x128>)
 8037974:	701a      	strb	r2, [r3, #0]
 8037976:	4b15      	ldr	r3, [pc, #84]	@ (80379cc <gos_errorHandler+0x124>)
 8037978:	781b      	ldrb	r3, [r3, #0]
 803797a:	3301      	adds	r3, #1
 803797c:	b2da      	uxtb	r2, r3
 803797e:	4b13      	ldr	r3, [pc, #76]	@ (80379cc <gos_errorHandler+0x124>)
 8037980:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 8037982:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 8037984:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8037988:	f7fd f8b8 	bl	8034afc <gos_kernelDelayMs>
            gos_kernelReset();
 803798c:	f7fd f890 	bl	8034ab0 <gos_kernelReset>
            GOS_NOP;
 8037990:	bf00      	nop
 8037992:	e7f6      	b.n	8037982 <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 8037994:	bf00      	nop
 8037996:	371c      	adds	r7, #28
 8037998:	46bd      	mov	sp, r7
 803799a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803799e:	b001      	add	sp, #4
 80379a0:	4770      	bx	lr
 80379a2:	bf00      	nop
 80379a4:	0803f344 	.word	0x0803f344
 80379a8:	0803f398 	.word	0x0803f398
 80379ac:	0803f3c4 	.word	0x0803f3c4
 80379b0:	0803f3e4 	.word	0x0803f3e4
 80379b4:	0803f414 	.word	0x0803f414
 80379b8:	0803f434 	.word	0x0803f434
 80379bc:	0803f458 	.word	0x0803f458
 80379c0:	2000b34c 	.word	0x2000b34c
 80379c4:	0803f484 	.word	0x0803f484
 80379c8:	0803f48c 	.word	0x0803f48c
 80379cc:	2000b311 	.word	0x2000b311
 80379d0:	2000b313 	.word	0x2000b313
 80379d4:	2000b314 	.word	0x2000b314

080379d8 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 80379d8:	b590      	push	{r4, r7, lr}
 80379da:	b083      	sub	sp, #12
 80379dc:	af00      	add	r7, sp, #0
 80379de:	6078      	str	r0, [r7, #4]
 80379e0:	460b      	mov	r3, r1
 80379e2:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 80379e4:	f7fd f846 	bl	8034a74 <gos_kernelGetSysTicks>
 80379e8:	4604      	mov	r4, r0
 80379ea:	1cfb      	adds	r3, r7, #3
 80379ec:	4618      	mov	r0, r3
 80379ee:	f000 f80d 	bl	8037a0c <gos_traceResultToString>
 80379f2:	4603      	mov	r3, r0
 80379f4:	687a      	ldr	r2, [r7, #4]
 80379f6:	4621      	mov	r1, r4
 80379f8:	4803      	ldr	r0, [pc, #12]	@ (8037a08 <gos_errorTraceInit+0x30>)
 80379fa:	f003 fa69 	bl	803aed0 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 80379fe:	78fb      	ldrb	r3, [r7, #3]
}
 8037a00:	4618      	mov	r0, r3
 8037a02:	370c      	adds	r7, #12
 8037a04:	46bd      	mov	sp, r7
 8037a06:	bd90      	pop	{r4, r7, pc}
 8037a08:	0803f4dc 	.word	0x0803f4dc

08037a0c <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 8037a0c:	b480      	push	{r7}
 8037a0e:	b083      	sub	sp, #12
 8037a10:	af00      	add	r7, sp, #0
 8037a12:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8037a14:	687b      	ldr	r3, [r7, #4]
 8037a16:	781b      	ldrb	r3, [r3, #0]
 8037a18:	2b55      	cmp	r3, #85	@ 0x55
 8037a1a:	d002      	beq.n	8037a22 <gos_traceResultToString+0x16>
 8037a1c:	2bae      	cmp	r3, #174	@ 0xae
 8037a1e:	d002      	beq.n	8037a26 <gos_traceResultToString+0x1a>
 8037a20:	e003      	b.n	8037a2a <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 8037a22:	4b05      	ldr	r3, [pc, #20]	@ (8037a38 <gos_traceResultToString+0x2c>)
 8037a24:	e002      	b.n	8037a2c <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 8037a26:	4b05      	ldr	r3, [pc, #20]	@ (8037a3c <gos_traceResultToString+0x30>)
 8037a28:	e000      	b.n	8037a2c <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 8037a2a:	4b05      	ldr	r3, [pc, #20]	@ (8037a40 <gos_traceResultToString+0x34>)
        }
    }
}
 8037a2c:	4618      	mov	r0, r3
 8037a2e:	370c      	adds	r7, #12
 8037a30:	46bd      	mov	sp, r7
 8037a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a36:	4770      	bx	lr
 8037a38:	0803f4f8 	.word	0x0803f4f8
 8037a3c:	0803f50c 	.word	0x0803f50c
 8037a40:	0803f520 	.word	0x0803f520

08037a44 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 8037a44:	b580      	push	{r7, lr}
 8037a46:	b082      	sub	sp, #8
 8037a48:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 8037a4a:	2355      	movs	r3, #85	@ 0x55
 8037a4c:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 8037a4e:	2300      	movs	r3, #0
 8037a50:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8037a52:	2300      	movs	r3, #0
 8037a54:	80bb      	strh	r3, [r7, #4]
 8037a56:	e020      	b.n	8037a9a <gos_gcpInit+0x56>
    {
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpRxMutexes[mutexIdx]));
 8037a58:	79fb      	ldrb	r3, [r7, #7]
 8037a5a:	2b55      	cmp	r3, #85	@ 0x55
 8037a5c:	d109      	bne.n	8037a72 <gos_gcpInit+0x2e>
 8037a5e:	88bb      	ldrh	r3, [r7, #4]
 8037a60:	009b      	lsls	r3, r3, #2
 8037a62:	4a12      	ldr	r2, [pc, #72]	@ (8037aac <gos_gcpInit+0x68>)
 8037a64:	4413      	add	r3, r2
 8037a66:	4618      	mov	r0, r3
 8037a68:	f000 fdd8 	bl	803861c <gos_mutexInit>
 8037a6c:	4603      	mov	r3, r0
 8037a6e:	71fb      	strb	r3, [r7, #7]
 8037a70:	e001      	b.n	8037a76 <gos_gcpInit+0x32>
 8037a72:	23ae      	movs	r3, #174	@ 0xae
 8037a74:	71fb      	strb	r3, [r7, #7]
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpTxMutexes[mutexIdx]));
 8037a76:	79fb      	ldrb	r3, [r7, #7]
 8037a78:	2b55      	cmp	r3, #85	@ 0x55
 8037a7a:	d109      	bne.n	8037a90 <gos_gcpInit+0x4c>
 8037a7c:	88bb      	ldrh	r3, [r7, #4]
 8037a7e:	009b      	lsls	r3, r3, #2
 8037a80:	4a0b      	ldr	r2, [pc, #44]	@ (8037ab0 <gos_gcpInit+0x6c>)
 8037a82:	4413      	add	r3, r2
 8037a84:	4618      	mov	r0, r3
 8037a86:	f000 fdc9 	bl	803861c <gos_mutexInit>
 8037a8a:	4603      	mov	r3, r0
 8037a8c:	71fb      	strb	r3, [r7, #7]
 8037a8e:	e001      	b.n	8037a94 <gos_gcpInit+0x50>
 8037a90:	23ae      	movs	r3, #174	@ 0xae
 8037a92:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8037a94:	88bb      	ldrh	r3, [r7, #4]
 8037a96:	3301      	adds	r3, #1
 8037a98:	80bb      	strh	r3, [r7, #4]
 8037a9a:	88bb      	ldrh	r3, [r7, #4]
 8037a9c:	2b03      	cmp	r3, #3
 8037a9e:	d9db      	bls.n	8037a58 <gos_gcpInit+0x14>
    }

    return gcpInitResult;
 8037aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8037aa2:	4618      	mov	r0, r3
 8037aa4:	3708      	adds	r7, #8
 8037aa6:	46bd      	mov	sp, r7
 8037aa8:	bd80      	pop	{r7, pc}
 8037aaa:	bf00      	nop
 8037aac:	2000b3bc 	.word	0x2000b3bc
 8037ab0:	2000b3cc 	.word	0x2000b3cc

08037ab4 <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 8037ab4:	b480      	push	{r7}
 8037ab6:	b087      	sub	sp, #28
 8037ab8:	af00      	add	r7, sp, #0
 8037aba:	4603      	mov	r3, r0
 8037abc:	60b9      	str	r1, [r7, #8]
 8037abe:	607a      	str	r2, [r7, #4]
 8037ac0:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 8037ac2:	23ae      	movs	r3, #174	@ 0xae
 8037ac4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 8037ac6:	7bfb      	ldrb	r3, [r7, #15]
 8037ac8:	2b03      	cmp	r3, #3
 8037aca:	d812      	bhi.n	8037af2 <gos_gcpRegisterPhysicalDriver+0x3e>
 8037acc:	68bb      	ldr	r3, [r7, #8]
 8037ace:	2b00      	cmp	r3, #0
 8037ad0:	d00f      	beq.n	8037af2 <gos_gcpRegisterPhysicalDriver+0x3e>
 8037ad2:	687b      	ldr	r3, [r7, #4]
 8037ad4:	2b00      	cmp	r3, #0
 8037ad6:	d00c      	beq.n	8037af2 <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 8037ad8:	7bfb      	ldrb	r3, [r7, #15]
 8037ada:	4a09      	ldr	r2, [pc, #36]	@ (8037b00 <gos_gcpRegisterPhysicalDriver+0x4c>)
 8037adc:	00db      	lsls	r3, r3, #3
 8037ade:	4413      	add	r3, r2
 8037ae0:	687a      	ldr	r2, [r7, #4]
 8037ae2:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 8037ae4:	7bfb      	ldrb	r3, [r7, #15]
 8037ae6:	4906      	ldr	r1, [pc, #24]	@ (8037b00 <gos_gcpRegisterPhysicalDriver+0x4c>)
 8037ae8:	68ba      	ldr	r2, [r7, #8]
 8037aea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 8037aee:	2355      	movs	r3, #85	@ 0x55
 8037af0:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 8037af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8037af4:	4618      	mov	r0, r3
 8037af6:	371c      	adds	r7, #28
 8037af8:	46bd      	mov	sp, r7
 8037afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037afe:	4770      	bx	lr
 8037b00:	2000b39c 	.word	0x2000b39c

08037b04 <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 8037b04:	b580      	push	{r7, lr}
 8037b06:	b092      	sub	sp, #72	@ 0x48
 8037b08:	af00      	add	r7, sp, #0
 8037b0a:	60ba      	str	r2, [r7, #8]
 8037b0c:	461a      	mov	r2, r3
 8037b0e:	4603      	mov	r3, r0
 8037b10:	73fb      	strb	r3, [r7, #15]
 8037b12:	460b      	mov	r3, r1
 8037b14:	81bb      	strh	r3, [r7, #12]
 8037b16:	4613      	mov	r3, r2
 8037b18:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 8037b1a:	23ae      	movs	r3, #174	@ 0xae
 8037b1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8037b20:	7bfb      	ldrb	r3, [r7, #15]
 8037b22:	009b      	lsls	r3, r3, #2
 8037b24:	4a8e      	ldr	r2, [pc, #568]	@ (8037d60 <gos_gcpTransmitMessage+0x25c>)
 8037b26:	4413      	add	r3, r2
 8037b28:	f04f 31ff 	mov.w	r1, #4294967295
 8037b2c:	4618      	mov	r0, r3
 8037b2e:	f000 fd8f 	bl	8038650 <gos_mutexLock>
 8037b32:	4603      	mov	r3, r0
 8037b34:	2b55      	cmp	r3, #85	@ 0x55
 8037b36:	f040 8105 	bne.w	8037d44 <gos_gcpTransmitMessage+0x240>
 8037b3a:	7bfb      	ldrb	r3, [r7, #15]
 8037b3c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8037b40:	89bb      	ldrh	r3, [r7, #12]
 8037b42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8037b46:	68bb      	ldr	r3, [r7, #8]
 8037b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8037b4a:	88fb      	ldrh	r3, [r7, #6]
 8037b4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8037b4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8037b52:	87bb      	strh	r3, [r7, #60]	@ 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 8037b54:	23ae      	movs	r3, #174	@ 0xae
 8037b56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 8037b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8037b5e:	2200      	movs	r2, #0
 8037b60:	601a      	str	r2, [r3, #0]
 8037b62:	605a      	str	r2, [r3, #4]
 8037b64:	609a      	str	r2, [r3, #8]
 8037b66:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8037b68:	f107 0314 	add.w	r3, r7, #20
 8037b6c:	2200      	movs	r2, #0
 8037b6e:	601a      	str	r2, [r3, #0]
 8037b70:	605a      	str	r2, [r3, #4]
 8037b72:	609a      	str	r2, [r3, #8]
 8037b74:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 8037b76:	2300      	movs	r3, #0
 8037b78:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 8037b7a:	2300      	movs	r3, #0
 8037b7c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    u8_t                 chunkIndex            = 0u;
 8037b80:	2300      	movs	r3, #0
 8037b82:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    u16_t                tempSize              = 0u;
 8037b86:	2300      	movs	r3, #0
 8037b88:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 8037b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8037b8c:	2b00      	cmp	r3, #0
 8037b8e:	d107      	bne.n	8037ba0 <gos_gcpTransmitMessage+0x9c>
 8037b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8037b92:	2b00      	cmp	r3, #0
 8037b94:	f040 80d2 	bne.w	8037d3c <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 8037b98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8037b9a:	2b00      	cmp	r3, #0
 8037b9c:	f040 80ce 	bne.w	8037d3c <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 8037ba0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8037ba4:	2b03      	cmp	r3, #3
 8037ba6:	f200 80c9 	bhi.w	8037d3c <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 8037baa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8037bae:	4a6d      	ldr	r2, [pc, #436]	@ (8037d64 <gos_gcpTransmitMessage+0x260>)
 8037bb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8037bb4:	2b00      	cmp	r3, #0
 8037bb6:	f000 80c1 	beq.w	8037d3c <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 8037bba:	2300      	movs	r3, #0
 8037bbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 8037bc0:	2302      	movs	r3, #2
 8037bc2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8037bc6:	2300      	movs	r3, #0
 8037bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 8037bcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8037bce:	857b      	strh	r3, [r7, #42]	@ 0x2a
        requestHeaderFrame.messageId     = messageId;
 8037bd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8037bd4:	853b      	strh	r3, [r7, #40]	@ 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 8037bd6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8037bd8:	4619      	mov	r1, r3
 8037bda:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8037bdc:	f003 fb82 	bl	803b2e4 <gos_crcDriverGetCrc>
 8037be0:	4603      	mov	r3, r0
 8037be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 8037be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8037be8:	210c      	movs	r1, #12
 8037bea:	4618      	mov	r0, r3
 8037bec:	f003 fb7a 	bl	803b2e4 <gos_crcDriverGetCrc>
 8037bf0:	4603      	mov	r3, r0
 8037bf2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 8037bf4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8037bf8:	4a5a      	ldr	r2, [pc, #360]	@ (8037d64 <gos_gcpTransmitMessage+0x260>)
 8037bfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8037bfe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8037c02:	2110      	movs	r1, #16
 8037c04:	4610      	mov	r0, r2
 8037c06:	4798      	blx	r3
 8037c08:	4603      	mov	r3, r0
 8037c0a:	2b55      	cmp	r3, #85	@ 0x55
 8037c0c:	f040 8096 	bne.w	8037d3c <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 8037c10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8037c12:	2b00      	cmp	r3, #0
 8037c14:	d120      	bne.n	8037c58 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8037c16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8037c1a:	4a52      	ldr	r2, [pc, #328]	@ (8037d64 <gos_gcpTransmitMessage+0x260>)
 8037c1c:	00db      	lsls	r3, r3, #3
 8037c1e:	4413      	add	r3, r2
 8037c20:	685b      	ldr	r3, [r3, #4]
 8037c22:	f107 0214 	add.w	r2, r7, #20
 8037c26:	2110      	movs	r1, #16
 8037c28:	4610      	mov	r0, r2
 8037c2a:	4798      	blx	r3
 8037c2c:	4603      	mov	r3, r0
 8037c2e:	2b55      	cmp	r3, #85	@ 0x55
 8037c30:	f040 8084 	bne.w	8037d3c <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8037c34:	f107 0213 	add.w	r2, r7, #19
 8037c38:	f107 0314 	add.w	r3, r7, #20
 8037c3c:	4611      	mov	r1, r2
 8037c3e:	4618      	mov	r0, r3
 8037c40:	f000 f9de 	bl	8038000 <gos_gcpValidateHeader>
 8037c44:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8037c46:	2b55      	cmp	r3, #85	@ 0x55
 8037c48:	d178      	bne.n	8037d3c <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 8037c4a:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8037c4c:	2b01      	cmp	r3, #1
 8037c4e:	d175      	bne.n	8037d3c <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 8037c50:	2355      	movs	r3, #85	@ 0x55
 8037c52:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8037c56:	e071      	b.n	8037d3c <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8037c58:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8037c5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8037c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8037c60:	b29b      	uxth	r3, r3
 8037c62:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 8037c66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8037c68:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8037c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8037c6e:	fb01 f202 	mul.w	r2, r1, r2
 8037c72:	1a9b      	subs	r3, r3, r2
 8037c74:	b29b      	uxth	r3, r3
 8037c76:	2b00      	cmp	r3, #0
 8037c78:	d004      	beq.n	8037c84 <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 8037c7a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8037c7e:	3301      	adds	r3, #1
 8037c80:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8037c84:	2300      	movs	r3, #0
 8037c86:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8037c8a:	e051      	b.n	8037d30 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8037c8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8037c90:	3301      	adds	r3, #1
 8037c92:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8037c94:	fb02 f303 	mul.w	r3, r2, r3
 8037c98:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8037c9a:	4293      	cmp	r3, r2
 8037c9c:	dd0a      	ble.n	8037cb4 <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8037c9e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8037ca0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8037ca4:	b29b      	uxth	r3, r3
 8037ca6:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8037ca8:	fb11 f303 	smulbb	r3, r1, r3
 8037cac:	b29b      	uxth	r3, r3
 8037cae:	1ad3      	subs	r3, r2, r3
 8037cb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8037cb2:	e001      	b.n	8037cb8 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8037cb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8037cb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8037cb8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8037cbc:	4a29      	ldr	r2, [pc, #164]	@ (8037d64 <gos_gcpTransmitMessage+0x260>)
 8037cbe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8037cc2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8037cc6:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8037cc8:	fb01 f202 	mul.w	r2, r1, r2
 8037ccc:	4611      	mov	r1, r2
 8037cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8037cd0:	440a      	add	r2, r1
 8037cd2:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8037cd4:	4610      	mov	r0, r2
 8037cd6:	4798      	blx	r3
 8037cd8:	4603      	mov	r3, r0
 8037cda:	2b55      	cmp	r3, #85	@ 0x55
 8037cdc:	d124      	bne.n	8037d28 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8037cde:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8037ce2:	4a20      	ldr	r2, [pc, #128]	@ (8037d64 <gos_gcpTransmitMessage+0x260>)
 8037ce4:	00db      	lsls	r3, r3, #3
 8037ce6:	4413      	add	r3, r2
 8037ce8:	685b      	ldr	r3, [r3, #4]
 8037cea:	f107 0214 	add.w	r2, r7, #20
 8037cee:	2110      	movs	r1, #16
 8037cf0:	4610      	mov	r0, r2
 8037cf2:	4798      	blx	r3
 8037cf4:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8037cf6:	2b55      	cmp	r3, #85	@ 0x55
 8037cf8:	d116      	bne.n	8037d28 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8037cfa:	f107 0213 	add.w	r2, r7, #19
 8037cfe:	f107 0314 	add.w	r3, r7, #20
 8037d02:	4611      	mov	r1, r2
 8037d04:	4618      	mov	r0, r3
 8037d06:	f000 f97b 	bl	8038000 <gos_gcpValidateHeader>
 8037d0a:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8037d0c:	2b55      	cmp	r3, #85	@ 0x55
 8037d0e:	d10b      	bne.n	8037d28 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 8037d10:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8037d12:	2b01      	cmp	r3, #1
 8037d14:	d108      	bne.n	8037d28 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 8037d16:	2355      	movs	r3, #85	@ 0x55
 8037d18:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8037d1c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8037d20:	3301      	adds	r3, #1
 8037d22:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8037d26:	e003      	b.n	8037d30 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 8037d28:	23ae      	movs	r3, #174	@ 0xae
 8037d2a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            			break;
 8037d2e:	e005      	b.n	8037d3c <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8037d30:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8037d34:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8037d38:	429a      	cmp	r2, r3
 8037d3a:	d3a7      	bcc.n	8037c8c <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 8037d3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 8037d40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 8037d44:	7bfb      	ldrb	r3, [r7, #15]
 8037d46:	009b      	lsls	r3, r3, #2
 8037d48:	4a05      	ldr	r2, [pc, #20]	@ (8037d60 <gos_gcpTransmitMessage+0x25c>)
 8037d4a:	4413      	add	r3, r2
 8037d4c:	4618      	mov	r0, r3
 8037d4e:	f000 fd85 	bl	803885c <gos_mutexUnlock>
    return transmitMessageResult;
 8037d52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8037d56:	4618      	mov	r0, r3
 8037d58:	3748      	adds	r7, #72	@ 0x48
 8037d5a:	46bd      	mov	sp, r7
 8037d5c:	bd80      	pop	{r7, pc}
 8037d5e:	bf00      	nop
 8037d60:	2000b3cc 	.word	0x2000b3cc
 8037d64:	2000b39c 	.word	0x2000b39c

08037d68 <gos_gcpReceiveMessage>:
{
 8037d68:	b580      	push	{r7, lr}
 8037d6a:	b094      	sub	sp, #80	@ 0x50
 8037d6c:	af00      	add	r7, sp, #0
 8037d6e:	60b9      	str	r1, [r7, #8]
 8037d70:	607a      	str	r2, [r7, #4]
 8037d72:	461a      	mov	r2, r3
 8037d74:	4603      	mov	r3, r0
 8037d76:	73fb      	strb	r3, [r7, #15]
 8037d78:	4613      	mov	r3, r2
 8037d7a:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 8037d7c:	23ae      	movs	r3, #174	@ 0xae
 8037d7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8037d82:	7bfb      	ldrb	r3, [r7, #15]
 8037d84:	009b      	lsls	r3, r3, #2
 8037d86:	4a9c      	ldr	r2, [pc, #624]	@ (8037ff8 <gos_gcpReceiveMessage+0x290>)
 8037d88:	4413      	add	r3, r2
 8037d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8037d8e:	4618      	mov	r0, r3
 8037d90:	f000 fc5e 	bl	8038650 <gos_mutexLock>
 8037d94:	4603      	mov	r3, r0
 8037d96:	2b55      	cmp	r3, #85	@ 0x55
 8037d98:	f040 8120 	bne.w	8037fdc <gos_gcpReceiveMessage+0x274>
 8037d9c:	7bfb      	ldrb	r3, [r7, #15]
 8037d9e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8037da2:	68bb      	ldr	r3, [r7, #8]
 8037da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8037da6:	687b      	ldr	r3, [r7, #4]
 8037da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8037daa:	89bb      	ldrh	r3, [r7, #12]
 8037dac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8037db0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8037db4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 8037db8:	23ae      	movs	r3, #174	@ 0xae
 8037dba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 8037dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8037dc2:	2200      	movs	r2, #0
 8037dc4:	601a      	str	r2, [r3, #0]
 8037dc6:	605a      	str	r2, [r3, #4]
 8037dc8:	609a      	str	r2, [r3, #8]
 8037dca:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8037dcc:	f107 0318 	add.w	r3, r7, #24
 8037dd0:	2200      	movs	r2, #0
 8037dd2:	601a      	str	r2, [r3, #0]
 8037dd4:	605a      	str	r2, [r3, #4]
 8037dd6:	609a      	str	r2, [r3, #8]
 8037dd8:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 8037dda:	2300      	movs	r3, #0
 8037ddc:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 8037dde:	2300      	movs	r3, #0
 8037de0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    u8_t                 chunkIndex            = 0u;
 8037de4:	2300      	movs	r3, #0
 8037de6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    u16_t                tempSize              = 0u;
 8037dea:	2300      	movs	r3, #0
 8037dec:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 8037dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8037df0:	2b00      	cmp	r3, #0
 8037df2:	f000 80ef 	beq.w	8037fd4 <gos_gcpReceiveMessage+0x26c>
 8037df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8037df8:	2b00      	cmp	r3, #0
 8037dfa:	f000 80eb 	beq.w	8037fd4 <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 8037dfe:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037e02:	2b03      	cmp	r3, #3
 8037e04:	f200 80e6 	bhi.w	8037fd4 <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 8037e08:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8037ffc <gos_gcpReceiveMessage+0x294>)
 8037e0e:	00db      	lsls	r3, r3, #3
 8037e10:	4413      	add	r3, r2
 8037e12:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8037e14:	2b00      	cmp	r3, #0
 8037e16:	f000 80dd 	beq.w	8037fd4 <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 8037e1a:	2300      	movs	r3, #0
 8037e1c:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 8037e1e:	2300      	movs	r3, #0
 8037e20:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 8037e22:	2302      	movs	r3, #2
 8037e24:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8037e26:	2300      	movs	r3, #0
 8037e28:	767b      	strb	r3, [r7, #25]

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8037e2a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037e2e:	4a73      	ldr	r2, [pc, #460]	@ (8037ffc <gos_gcpReceiveMessage+0x294>)
 8037e30:	00db      	lsls	r3, r3, #3
 8037e32:	4413      	add	r3, r2
 8037e34:	685b      	ldr	r3, [r3, #4]
 8037e36:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8037e3a:	2110      	movs	r1, #16
 8037e3c:	4610      	mov	r0, r2
 8037e3e:	4798      	blx	r3
 8037e40:	4603      	mov	r3, r0
 8037e42:	2b55      	cmp	r3, #85	@ 0x55
 8037e44:	f040 80b0 	bne.w	8037fa8 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 8037e48:	f107 0217 	add.w	r2, r7, #23
 8037e4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8037e50:	4611      	mov	r1, r2
 8037e52:	4618      	mov	r0, r3
 8037e54:	f000 f8d4 	bl	8038000 <gos_gcpValidateHeader>
 8037e58:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8037e5a:	2b55      	cmp	r3, #85	@ 0x55
 8037e5c:	f040 80a4 	bne.w	8037fa8 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 8037e60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8037e62:	2b00      	cmp	r3, #0
 8037e64:	d11e      	bne.n	8037ea4 <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 8037e66:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8037e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8037e6a:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 8037e6c:	2301      	movs	r3, #1
 8037e6e:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8037e70:	f107 0318 	add.w	r3, r7, #24
 8037e74:	210c      	movs	r1, #12
 8037e76:	4618      	mov	r0, r3
 8037e78:	f003 fa34 	bl	803b2e4 <gos_crcDriverGetCrc>
 8037e7c:	4603      	mov	r3, r0
 8037e7e:	627b      	str	r3, [r7, #36]	@ 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8037e80:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037e84:	4a5d      	ldr	r2, [pc, #372]	@ (8037ffc <gos_gcpReceiveMessage+0x294>)
 8037e86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8037e8a:	f107 0218 	add.w	r2, r7, #24
 8037e8e:	2110      	movs	r1, #16
 8037e90:	4610      	mov	r0, r2
 8037e92:	4798      	blx	r3
 8037e94:	4603      	mov	r3, r0
 8037e96:	2b55      	cmp	r3, #85	@ 0x55
 8037e98:	f040 809b 	bne.w	8037fd2 <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 8037e9c:	2355      	movs	r3, #85	@ 0x55
 8037e9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8037ea2:	e096      	b.n	8037fd2 <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8037ea4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8037ea6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8037eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8037eae:	b29b      	uxth	r3, r3
 8037eb0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 8037eb4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8037eb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8037eba:	fbb3 f1f2 	udiv	r1, r3, r2
 8037ebe:	fb01 f202 	mul.w	r2, r1, r2
 8037ec2:	1a9b      	subs	r3, r3, r2
 8037ec4:	b29b      	uxth	r3, r3
 8037ec6:	2b00      	cmp	r3, #0
 8037ec8:	d004      	beq.n	8037ed4 <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 8037eca:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8037ece:	3301      	adds	r3, #1
 8037ed0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8037ed4:	2300      	movs	r3, #0
 8037ed6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8037eda:	e04c      	b.n	8037f76 <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8037edc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8037ee0:	3301      	adds	r3, #1
 8037ee2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8037ee6:	fb02 f303 	mul.w	r3, r2, r3
 8037eea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8037eec:	4293      	cmp	r3, r2
 8037eee:	dd0b      	ble.n	8037f08 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8037ef0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8037ef2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8037ef6:	b29b      	uxth	r3, r3
 8037ef8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8037efc:	fb11 f303 	smulbb	r3, r1, r3
 8037f00:	b29b      	uxth	r3, r3
 8037f02:	1ad3      	subs	r3, r2, r3
 8037f04:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8037f06:	e002      	b.n	8037f0e <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8037f08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8037f0c:	877b      	strh	r3, [r7, #58]	@ 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 8037f0e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037f12:	4a3a      	ldr	r2, [pc, #232]	@ (8037ffc <gos_gcpReceiveMessage+0x294>)
 8037f14:	00db      	lsls	r3, r3, #3
 8037f16:	4413      	add	r3, r2
 8037f18:	685b      	ldr	r3, [r3, #4]
 8037f1a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8037f1e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8037f22:	fb01 f202 	mul.w	r2, r1, r2
 8037f26:	4611      	mov	r1, r2
 8037f28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8037f2a:	440a      	add	r2, r1
 8037f2c:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 8037f2e:	4610      	mov	r0, r2
 8037f30:	4798      	blx	r3
 8037f32:	4603      	mov	r3, r0
 8037f34:	2b55      	cmp	r3, #85	@ 0x55
 8037f36:	d125      	bne.n	8037f84 <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 8037f38:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8037f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8037f3c:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 8037f3e:	2301      	movs	r3, #1
 8037f40:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8037f42:	f107 0318 	add.w	r3, r7, #24
 8037f46:	210c      	movs	r1, #12
 8037f48:	4618      	mov	r0, r3
 8037f4a:	f003 f9cb 	bl	803b2e4 <gos_crcDriverGetCrc>
 8037f4e:	4603      	mov	r3, r0
 8037f50:	627b      	str	r3, [r7, #36]	@ 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8037f52:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037f56:	4a29      	ldr	r2, [pc, #164]	@ (8037ffc <gos_gcpReceiveMessage+0x294>)
 8037f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8037f5c:	f107 0218 	add.w	r2, r7, #24
 8037f60:	2110      	movs	r1, #16
 8037f62:	4610      	mov	r0, r2
 8037f64:	4798      	blx	r3
 8037f66:	4603      	mov	r3, r0
 8037f68:	2b55      	cmp	r3, #85	@ 0x55
 8037f6a:	d10d      	bne.n	8037f88 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8037f6c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8037f70:	3301      	adds	r3, #1
 8037f72:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8037f76:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8037f7a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8037f7e:	429a      	cmp	r2, r3
 8037f80:	d3ac      	bcc.n	8037edc <gos_gcpReceiveMessage+0x174>
 8037f82:	e002      	b.n	8037f8a <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 8037f84:	bf00      	nop
 8037f86:	e000      	b.n	8037f8a <gos_gcpReceiveMessage+0x222>
                        	break;
 8037f88:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 8037f8a:	f107 0217 	add.w	r2, r7, #23
 8037f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8037f92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8037f94:	4618      	mov	r0, r3
 8037f96:	f000 f860 	bl	803805a <gos_gcpValidateData>
 8037f9a:	4603      	mov	r3, r0
 8037f9c:	2b55      	cmp	r3, #85	@ 0x55
 8037f9e:	d118      	bne.n	8037fd2 <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 8037fa0:	2355      	movs	r3, #85	@ 0x55
 8037fa2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8037fa6:	e014      	b.n	8037fd2 <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 8037fa8:	7dfb      	ldrb	r3, [r7, #23]
 8037faa:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8037fac:	f107 0318 	add.w	r3, r7, #24
 8037fb0:	210c      	movs	r1, #12
 8037fb2:	4618      	mov	r0, r3
 8037fb4:	f003 f996 	bl	803b2e4 <gos_crcDriverGetCrc>
 8037fb8:	4603      	mov	r3, r0
 8037fba:	627b      	str	r3, [r7, #36]	@ 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 8037fbc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8037fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8037ffc <gos_gcpReceiveMessage+0x294>)
 8037fc2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8037fc6:	f107 0218 	add.w	r2, r7, #24
 8037fca:	2110      	movs	r1, #16
 8037fcc:	4610      	mov	r0, r2
 8037fce:	4798      	blx	r3
 8037fd0:	e000      	b.n	8037fd4 <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 8037fd2:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 8037fd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 8037fd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 8037fdc:	7bfb      	ldrb	r3, [r7, #15]
 8037fde:	009b      	lsls	r3, r3, #2
 8037fe0:	4a05      	ldr	r2, [pc, #20]	@ (8037ff8 <gos_gcpReceiveMessage+0x290>)
 8037fe2:	4413      	add	r3, r2
 8037fe4:	4618      	mov	r0, r3
 8037fe6:	f000 fc39 	bl	803885c <gos_mutexUnlock>
    return receiveMessageResult;
 8037fea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8037fee:	4618      	mov	r0, r3
 8037ff0:	3750      	adds	r7, #80	@ 0x50
 8037ff2:	46bd      	mov	sp, r7
 8037ff4:	bd80      	pop	{r7, pc}
 8037ff6:	bf00      	nop
 8037ff8:	2000b3bc 	.word	0x2000b3bc
 8037ffc:	2000b39c 	.word	0x2000b39c

08038000 <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 8038000:	b580      	push	{r7, lr}
 8038002:	b084      	sub	sp, #16
 8038004:	af00      	add	r7, sp, #0
 8038006:	6078      	str	r0, [r7, #4]
 8038008:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 803800a:	23ae      	movs	r3, #174	@ 0xae
 803800c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 803800e:	687b      	ldr	r3, [r7, #4]
 8038010:	2b00      	cmp	r3, #0
 8038012:	d01d      	beq.n	8038050 <gos_gcpValidateHeader+0x50>
 8038014:	683b      	ldr	r3, [r7, #0]
 8038016:	2b00      	cmp	r3, #0
 8038018:	d01a      	beq.n	8038050 <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 803801a:	210c      	movs	r1, #12
 803801c:	6878      	ldr	r0, [r7, #4]
 803801e:	f003 f961 	bl	803b2e4 <gos_crcDriverGetCrc>
 8038022:	4602      	mov	r2, r0
 8038024:	687b      	ldr	r3, [r7, #4]
 8038026:	68db      	ldr	r3, [r3, #12]
 8038028:	429a      	cmp	r2, r3
 803802a:	d10e      	bne.n	803804a <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 803802c:	687b      	ldr	r3, [r7, #4]
 803802e:	781b      	ldrb	r3, [r3, #0]
 8038030:	2b02      	cmp	r3, #2
 8038032:	d106      	bne.n	8038042 <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 8038034:	687b      	ldr	r3, [r7, #4]
 8038036:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8038038:	2b00      	cmp	r3, #0
 803803a:	d102      	bne.n	8038042 <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 803803c:	2355      	movs	r3, #85	@ 0x55
 803803e:	73fb      	strb	r3, [r7, #15]
 8038040:	e006      	b.n	8038050 <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 8038042:	683b      	ldr	r3, [r7, #0]
 8038044:	2205      	movs	r2, #5
 8038046:	701a      	strb	r2, [r3, #0]
 8038048:	e002      	b.n	8038050 <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 803804a:	683b      	ldr	r3, [r7, #0]
 803804c:	2202      	movs	r2, #2
 803804e:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8038050:	7bfb      	ldrb	r3, [r7, #15]
}
 8038052:	4618      	mov	r0, r3
 8038054:	3710      	adds	r7, #16
 8038056:	46bd      	mov	sp, r7
 8038058:	bd80      	pop	{r7, pc}

0803805a <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 803805a:	b580      	push	{r7, lr}
 803805c:	b086      	sub	sp, #24
 803805e:	af00      	add	r7, sp, #0
 8038060:	60f8      	str	r0, [r7, #12]
 8038062:	60b9      	str	r1, [r7, #8]
 8038064:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8038066:	23ae      	movs	r3, #174	@ 0xae
 8038068:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 803806a:	68fb      	ldr	r3, [r7, #12]
 803806c:	2b00      	cmp	r3, #0
 803806e:	d016      	beq.n	803809e <gos_gcpValidateData+0x44>
 8038070:	68bb      	ldr	r3, [r7, #8]
 8038072:	2b00      	cmp	r3, #0
 8038074:	d013      	beq.n	803809e <gos_gcpValidateData+0x44>
 8038076:	687b      	ldr	r3, [r7, #4]
 8038078:	2b00      	cmp	r3, #0
 803807a:	d010      	beq.n	803809e <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 803807c:	68fb      	ldr	r3, [r7, #12]
 803807e:	88db      	ldrh	r3, [r3, #6]
 8038080:	4619      	mov	r1, r3
 8038082:	68b8      	ldr	r0, [r7, #8]
 8038084:	f003 f92e 	bl	803b2e4 <gos_crcDriverGetCrc>
 8038088:	4602      	mov	r2, r0
 803808a:	68fb      	ldr	r3, [r7, #12]
 803808c:	689b      	ldr	r3, [r3, #8]
 803808e:	429a      	cmp	r2, r3
 8038090:	d102      	bne.n	8038098 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 8038092:	2355      	movs	r3, #85	@ 0x55
 8038094:	75fb      	strb	r3, [r7, #23]
 8038096:	e002      	b.n	803809e <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8038098:	687b      	ldr	r3, [r7, #4]
 803809a:	2202      	movs	r2, #2
 803809c:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 803809e:	7dfb      	ldrb	r3, [r7, #23]
}
 80380a0:	4618      	mov	r0, r3
 80380a2:	3718      	adds	r7, #24
 80380a4:	46bd      	mov	sp, r7
 80380a6:	bd80      	pop	{r7, pc}

080380a8 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 80380a8:	b580      	push	{r7, lr}
 80380aa:	b082      	sub	sp, #8
 80380ac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_ERROR;
 80380ae:	23ae      	movs	r3, #174	@ 0xae
 80380b0:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 80380b2:	2300      	movs	r3, #0
 80380b4:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 80380b6:	2300      	movs	r3, #0
 80380b8:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 80380ba:	4b22      	ldr	r3, [pc, #136]	@ (8038144 <gos_messageInit+0x9c>)
 80380bc:	2200      	movs	r2, #0
 80380be:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 80380c0:	4b21      	ldr	r3, [pc, #132]	@ (8038148 <gos_messageInit+0xa0>)
 80380c2:	2200      	movs	r2, #0
 80380c4:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80380c6:	2300      	movs	r3, #0
 80380c8:	71bb      	strb	r3, [r7, #6]
 80380ca:	e014      	b.n	80380f6 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 80380cc:	79bb      	ldrb	r3, [r7, #6]
 80380ce:	4a1f      	ldr	r2, [pc, #124]	@ (803814c <gos_messageInit+0xa4>)
 80380d0:	2154      	movs	r1, #84	@ 0x54
 80380d2:	fb01 f303 	mul.w	r3, r1, r3
 80380d6:	4413      	add	r3, r2
 80380d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80380dc:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 80380de:	79bb      	ldrb	r3, [r7, #6]
 80380e0:	4a1a      	ldr	r2, [pc, #104]	@ (803814c <gos_messageInit+0xa4>)
 80380e2:	2154      	movs	r1, #84	@ 0x54
 80380e4:	fb01 f303 	mul.w	r3, r1, r3
 80380e8:	4413      	add	r3, r2
 80380ea:	3302      	adds	r3, #2
 80380ec:	2200      	movs	r2, #0
 80380ee:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80380f0:	79bb      	ldrb	r3, [r7, #6]
 80380f2:	3301      	adds	r3, #1
 80380f4:	71bb      	strb	r3, [r7, #6]
 80380f6:	79bb      	ldrb	r3, [r7, #6]
 80380f8:	2b07      	cmp	r3, #7
 80380fa:	d9e7      	bls.n	80380cc <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80380fc:	2300      	movs	r3, #0
 80380fe:	717b      	strb	r3, [r7, #5]
 8038100:	e009      	b.n	8038116 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8038102:	797b      	ldrb	r3, [r7, #5]
 8038104:	4a12      	ldr	r2, [pc, #72]	@ (8038150 <gos_messageInit+0xa8>)
 8038106:	015b      	lsls	r3, r3, #5
 8038108:	4413      	add	r3, r2
 803810a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 803810e:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8038110:	797b      	ldrb	r3, [r7, #5]
 8038112:	3301      	adds	r3, #1
 8038114:	717b      	strb	r3, [r7, #5]
 8038116:	797b      	ldrb	r3, [r7, #5]
 8038118:	2b09      	cmp	r3, #9
 803811a:	d9f2      	bls.n	8038102 <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 803811c:	480d      	ldr	r0, [pc, #52]	@ (8038154 <gos_messageInit+0xac>)
 803811e:	f000 fa7d 	bl	803861c <gos_mutexInit>
 8038122:	4603      	mov	r3, r0
 8038124:	2b55      	cmp	r3, #85	@ 0x55
 8038126:	d108      	bne.n	803813a <gos_messageInit+0x92>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) == GOS_SUCCESS)
 8038128:	490b      	ldr	r1, [pc, #44]	@ (8038158 <gos_messageInit+0xb0>)
 803812a:	480c      	ldr	r0, [pc, #48]	@ (803815c <gos_messageInit+0xb4>)
 803812c:	f7fd fcc6 	bl	8035abc <gos_taskRegister>
 8038130:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 8038132:	2b55      	cmp	r3, #85	@ 0x55
 8038134:	d101      	bne.n	803813a <gos_messageInit+0x92>
    {
        messageInitResult = GOS_SUCCESS;
 8038136:	2355      	movs	r3, #85	@ 0x55
 8038138:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 803813a:	79fb      	ldrb	r3, [r7, #7]
}
 803813c:	4618      	mov	r0, r3
 803813e:	3708      	adds	r7, #8
 8038140:	46bd      	mov	sp, r7
 8038142:	bd80      	pop	{r7, pc}
 8038144:	2000b7be 	.word	0x2000b7be
 8038148:	2000b7bf 	.word	0x2000b7bf
 803814c:	2000b3dc 	.word	0x2000b3dc
 8038150:	2000b67c 	.word	0x2000b67c
 8038154:	2000b7c0 	.word	0x2000b7c0
 8038158:	2000b7bc 	.word	0x2000b7bc
 803815c:	20002e8c 	.word	0x20002e8c

08038160 <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 8038160:	b590      	push	{r4, r7, lr}
 8038162:	b087      	sub	sp, #28
 8038164:	af00      	add	r7, sp, #0
 8038166:	60f8      	str	r0, [r7, #12]
 8038168:	60b9      	str	r1, [r7, #8]
 803816a:	4613      	mov	r3, r2
 803816c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 803816e:	23ae      	movs	r3, #174	@ 0xae
 8038170:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 8038172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8038176:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8038178:	2300      	movs	r3, #0
 803817a:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 803817c:	2300      	movs	r3, #0
 803817e:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8038180:	2300      	movs	r3, #0
 8038182:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 8038184:	2300      	movs	r3, #0
 8038186:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 8038188:	68bb      	ldr	r3, [r7, #8]
 803818a:	2b00      	cmp	r3, #0
 803818c:	f000 80d9 	beq.w	8038342 <gos_messageRx+0x1e2>
 8038190:	68fb      	ldr	r3, [r7, #12]
 8038192:	2b00      	cmp	r3, #0
 8038194:	f000 80d5 	beq.w	8038342 <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8038198:	f04f 31ff 	mov.w	r1, #4294967295
 803819c:	486d      	ldr	r0, [pc, #436]	@ (8038354 <gos_messageRx+0x1f4>)
 803819e:	f000 fa57 	bl	8038650 <gos_mutexLock>
 80381a2:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 80381a4:	2b55      	cmp	r3, #85	@ 0x55
 80381a6:	f040 80cc 	bne.w	8038342 <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 80381aa:	4b6b      	ldr	r3, [pc, #428]	@ (8038358 <gos_messageRx+0x1f8>)
 80381ac:	781b      	ldrb	r3, [r3, #0]
 80381ae:	4a6b      	ldr	r2, [pc, #428]	@ (803835c <gos_messageRx+0x1fc>)
 80381b0:	015b      	lsls	r3, r3, #5
 80381b2:	4413      	add	r3, r2
 80381b4:	881b      	ldrh	r3, [r3, #0]
 80381b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80381ba:	f040 80c2 	bne.w	8038342 <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 80381be:	f107 0312 	add.w	r3, r7, #18
 80381c2:	4618      	mov	r0, r3
 80381c4:	f7ff f858 	bl	8037278 <gos_taskGetCurrentId>
 80381c8:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 80381ca:	2b55      	cmp	r3, #85	@ 0x55
 80381cc:	f040 80b9 	bne.w	8038342 <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 80381d0:	4b61      	ldr	r3, [pc, #388]	@ (8038358 <gos_messageRx+0x1f8>)
 80381d2:	781b      	ldrb	r3, [r3, #0]
 80381d4:	8a79      	ldrh	r1, [r7, #18]
 80381d6:	4a61      	ldr	r2, [pc, #388]	@ (803835c <gos_messageRx+0x1fc>)
 80381d8:	015b      	lsls	r3, r3, #5
 80381da:	4413      	add	r3, r2
 80381dc:	460a      	mov	r2, r1
 80381de:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 80381e0:	4b5d      	ldr	r3, [pc, #372]	@ (8038358 <gos_messageRx+0x1f8>)
 80381e2:	781b      	ldrb	r3, [r3, #0]
 80381e4:	4a5d      	ldr	r2, [pc, #372]	@ (803835c <gos_messageRx+0x1fc>)
 80381e6:	015b      	lsls	r3, r3, #5
 80381e8:	4413      	add	r3, r2
 80381ea:	3302      	adds	r3, #2
 80381ec:	88fa      	ldrh	r2, [r7, #6]
 80381ee:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 80381f0:	4b59      	ldr	r3, [pc, #356]	@ (8038358 <gos_messageRx+0x1f8>)
 80381f2:	781b      	ldrb	r3, [r3, #0]
 80381f4:	4a59      	ldr	r2, [pc, #356]	@ (803835c <gos_messageRx+0x1fc>)
 80381f6:	015b      	lsls	r3, r3, #5
 80381f8:	4413      	add	r3, r2
 80381fa:	3304      	adds	r3, #4
 80381fc:	2200      	movs	r2, #0
 80381fe:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 8038200:	4b55      	ldr	r3, [pc, #340]	@ (8038358 <gos_messageRx+0x1f8>)
 8038202:	781b      	ldrb	r3, [r3, #0]
 8038204:	4a55      	ldr	r2, [pc, #340]	@ (803835c <gos_messageRx+0x1fc>)
 8038206:	015b      	lsls	r3, r3, #5
 8038208:	4413      	add	r3, r2
 803820a:	3318      	adds	r3, #24
 803820c:	68ba      	ldr	r2, [r7, #8]
 803820e:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 8038210:	4b51      	ldr	r3, [pc, #324]	@ (8038358 <gos_messageRx+0x1f8>)
 8038212:	781b      	ldrb	r3, [r3, #0]
 8038214:	4a51      	ldr	r2, [pc, #324]	@ (803835c <gos_messageRx+0x1fc>)
 8038216:	015b      	lsls	r3, r3, #5
 8038218:	4413      	add	r3, r2
 803821a:	331c      	adds	r3, #28
 803821c:	2249      	movs	r2, #73	@ 0x49
 803821e:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 8038220:	4b4d      	ldr	r3, [pc, #308]	@ (8038358 <gos_messageRx+0x1f8>)
 8038222:	781b      	ldrb	r3, [r3, #0]
 8038224:	015b      	lsls	r3, r3, #5
 8038226:	4a4d      	ldr	r2, [pc, #308]	@ (803835c <gos_messageRx+0x1fc>)
 8038228:	4413      	add	r3, r2
 803822a:	3306      	adds	r3, #6
 803822c:	2210      	movs	r2, #16
 803822e:	2100      	movs	r1, #0
 8038230:	4618      	mov	r0, r3
 8038232:	f003 ff47 	bl	803c0c4 <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8038236:	2300      	movs	r3, #0
 8038238:	757b      	strb	r3, [r7, #21]
 803823a:	e019      	b.n	8038270 <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 803823c:	7d7b      	ldrb	r3, [r7, #21]
 803823e:	005b      	lsls	r3, r3, #1
 8038240:	68fa      	ldr	r2, [r7, #12]
 8038242:	4413      	add	r3, r2
 8038244:	881b      	ldrh	r3, [r3, #0]
 8038246:	2b00      	cmp	r3, #0
 8038248:	d016      	beq.n	8038278 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 803824a:	7d7b      	ldrb	r3, [r7, #21]
 803824c:	005b      	lsls	r3, r3, #1
 803824e:	68fa      	ldr	r2, [r7, #12]
 8038250:	441a      	add	r2, r3
 8038252:	4b41      	ldr	r3, [pc, #260]	@ (8038358 <gos_messageRx+0x1f8>)
 8038254:	781b      	ldrb	r3, [r3, #0]
 8038256:	461c      	mov	r4, r3
 8038258:	7d7b      	ldrb	r3, [r7, #21]
 803825a:	8810      	ldrh	r0, [r2, #0]
 803825c:	493f      	ldr	r1, [pc, #252]	@ (803835c <gos_messageRx+0x1fc>)
 803825e:	0122      	lsls	r2, r4, #4
 8038260:	4413      	add	r3, r2
 8038262:	005b      	lsls	r3, r3, #1
 8038264:	440b      	add	r3, r1
 8038266:	4602      	mov	r2, r0
 8038268:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 803826a:	7d7b      	ldrb	r3, [r7, #21]
 803826c:	3301      	adds	r3, #1
 803826e:	757b      	strb	r3, [r7, #21]
 8038270:	7d7b      	ldrb	r3, [r7, #21]
 8038272:	2b07      	cmp	r3, #7
 8038274:	d9e2      	bls.n	803823c <gos_messageRx+0xdc>
 8038276:	e000      	b.n	803827a <gos_messageRx+0x11a>
                    break;
 8038278:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 803827a:	4b37      	ldr	r3, [pc, #220]	@ (8038358 <gos_messageRx+0x1f8>)
 803827c:	781b      	ldrb	r3, [r3, #0]
 803827e:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8038280:	2300      	movs	r3, #0
 8038282:	75bb      	strb	r3, [r7, #22]
 8038284:	e018      	b.n	80382b8 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 8038286:	4b34      	ldr	r3, [pc, #208]	@ (8038358 <gos_messageRx+0x1f8>)
 8038288:	781b      	ldrb	r3, [r3, #0]
 803828a:	3301      	adds	r3, #1
 803828c:	b2da      	uxtb	r2, r3
 803828e:	4b32      	ldr	r3, [pc, #200]	@ (8038358 <gos_messageRx+0x1f8>)
 8038290:	701a      	strb	r2, [r3, #0]
 8038292:	4b31      	ldr	r3, [pc, #196]	@ (8038358 <gos_messageRx+0x1f8>)
 8038294:	781b      	ldrb	r3, [r3, #0]
 8038296:	2b0a      	cmp	r3, #10
 8038298:	d102      	bne.n	80382a0 <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 803829a:	4b2f      	ldr	r3, [pc, #188]	@ (8038358 <gos_messageRx+0x1f8>)
 803829c:	2200      	movs	r2, #0
 803829e:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 80382a0:	4b2d      	ldr	r3, [pc, #180]	@ (8038358 <gos_messageRx+0x1f8>)
 80382a2:	781b      	ldrb	r3, [r3, #0]
 80382a4:	4a2d      	ldr	r2, [pc, #180]	@ (803835c <gos_messageRx+0x1fc>)
 80382a6:	015b      	lsls	r3, r3, #5
 80382a8:	4413      	add	r3, r2
 80382aa:	881b      	ldrh	r3, [r3, #0]
 80382ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80382b0:	d006      	beq.n	80382c0 <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 80382b2:	7dbb      	ldrb	r3, [r7, #22]
 80382b4:	3301      	adds	r3, #1
 80382b6:	75bb      	strb	r3, [r7, #22]
 80382b8:	7dbb      	ldrb	r3, [r7, #22]
 80382ba:	2b09      	cmp	r3, #9
 80382bc:	d9e3      	bls.n	8038286 <gos_messageRx+0x126>
 80382be:	e000      	b.n	80382c2 <gos_messageRx+0x162>
                {
                    break;
 80382c0:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 80382c2:	4824      	ldr	r0, [pc, #144]	@ (8038354 <gos_messageRx+0x1f4>)
 80382c4:	f000 faca 	bl	803885c <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 80382c8:	8a7b      	ldrh	r3, [r7, #18]
 80382ca:	f107 0210 	add.w	r2, r7, #16
 80382ce:	4611      	mov	r1, r2
 80382d0:	4618      	mov	r0, r3
 80382d2:	f7fe ff29 	bl	8037128 <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 80382d6:	8a3b      	ldrh	r3, [r7, #16]
 80382d8:	b21b      	sxth	r3, r3
 80382da:	2b00      	cmp	r3, #0
 80382dc:	db12      	blt.n	8038304 <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80382de:	8a7b      	ldrh	r3, [r7, #18]
 80382e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80382e4:	4618      	mov	r0, r3
 80382e6:	f7fe fdbb 	bl	8036e60 <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 80382ea:	8a7b      	ldrh	r3, [r7, #18]
 80382ec:	f04f 31ff 	mov.w	r1, #4294967295
 80382f0:	4618      	mov	r0, r3
 80382f2:	f7fe f89d 	bl	8036430 <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80382f6:	8a7b      	ldrh	r3, [r7, #18]
 80382f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80382fc:	4618      	mov	r0, r3
 80382fe:	f7fe fe27 	bl	8036f50 <gos_taskRemovePrivilege>
 8038302:	e005      	b.n	8038310 <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8038304:	8a7b      	ldrh	r3, [r7, #18]
 8038306:	f04f 31ff 	mov.w	r1, #4294967295
 803830a:	4618      	mov	r0, r3
 803830c:	f7fe f890 	bl	8036430 <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 8038310:	7d3b      	ldrb	r3, [r7, #20]
 8038312:	4a12      	ldr	r2, [pc, #72]	@ (803835c <gos_messageRx+0x1fc>)
 8038314:	015b      	lsls	r3, r3, #5
 8038316:	4413      	add	r3, r2
 8038318:	331c      	adds	r3, #28
 803831a:	781b      	ldrb	r3, [r3, #0]
 803831c:	2b36      	cmp	r3, #54	@ 0x36
 803831e:	d102      	bne.n	8038326 <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 8038320:	2355      	movs	r3, #85	@ 0x55
 8038322:	75fb      	strb	r3, [r7, #23]
 8038324:	e006      	b.n	8038334 <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8038326:	7d3b      	ldrb	r3, [r7, #20]
 8038328:	4a0c      	ldr	r2, [pc, #48]	@ (803835c <gos_messageRx+0x1fc>)
 803832a:	015b      	lsls	r3, r3, #5
 803832c:	4413      	add	r3, r2
 803832e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8038332:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 8038334:	7d3b      	ldrb	r3, [r7, #20]
 8038336:	4a09      	ldr	r2, [pc, #36]	@ (803835c <gos_messageRx+0x1fc>)
 8038338:	015b      	lsls	r3, r3, #5
 803833a:	4413      	add	r3, r2
 803833c:	331c      	adds	r3, #28
 803833e:	2249      	movs	r2, #73	@ 0x49
 8038340:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8038342:	4804      	ldr	r0, [pc, #16]	@ (8038354 <gos_messageRx+0x1f4>)
 8038344:	f000 fa8a 	bl	803885c <gos_mutexUnlock>

    return messageRxResult;
 8038348:	7dfb      	ldrb	r3, [r7, #23]
}
 803834a:	4618      	mov	r0, r3
 803834c:	371c      	adds	r7, #28
 803834e:	46bd      	mov	sp, r7
 8038350:	bd90      	pop	{r4, r7, pc}
 8038352:	bf00      	nop
 8038354:	2000b7c0 	.word	0x2000b7c0
 8038358:	2000b7bf 	.word	0x2000b7bf
 803835c:	2000b67c 	.word	0x2000b67c

08038360 <gos_messageTx>:
 * Function: gos_messageTx
 */
GOS_INLINE gos_result_t gos_messageTx (
        gos_message_t* message
        )
{
 8038360:	b580      	push	{r7, lr}
 8038362:	b084      	sub	sp, #16
 8038364:	af00      	add	r7, sp, #0
 8038366:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       messageTxResult = GOS_ERROR;
 8038368:	23ae      	movs	r3, #174	@ 0xae
 803836a:	73fb      	strb	r3, [r7, #15]
    gos_messageIndex_t msgIndex        = 0u;
 803836c:	2300      	movs	r3, #0
 803836e:	73bb      	strb	r3, [r7, #14]

    /**
     * Function code.
     */
    if (message                                             != NULL &&
 8038370:	687b      	ldr	r3, [r7, #4]
 8038372:	2b00      	cmp	r3, #0
 8038374:	d052      	beq.n	803841c <gos_messageTx+0xbc>
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 8038376:	687b      	ldr	r3, [r7, #4]
 8038378:	881b      	ldrh	r3, [r3, #0]
    if (message                                             != NULL &&
 803837a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803837e:	4293      	cmp	r3, r2
 8038380:	d04c      	beq.n	803841c <gos_messageTx+0xbc>
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 8038382:	687b      	ldr	r3, [r7, #4]
 8038384:	789b      	ldrb	r3, [r3, #2]
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 8038386:	2b4f      	cmp	r3, #79	@ 0x4f
 8038388:	d848      	bhi.n	803841c <gos_messageTx+0xbc>
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803838a:	f04f 31ff 	mov.w	r1, #4294967295
 803838e:	4827      	ldr	r0, [pc, #156]	@ (803842c <gos_messageTx+0xcc>)
 8038390:	f000 f95e 	bl	8038650 <gos_mutexLock>
 8038394:	4603      	mov	r3, r0
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 8038396:	2b55      	cmp	r3, #85	@ 0x55
 8038398:	d140      	bne.n	803841c <gos_messageTx+0xbc>
    {
        if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 803839a:	4b25      	ldr	r3, [pc, #148]	@ (8038430 <gos_messageTx+0xd0>)
 803839c:	781b      	ldrb	r3, [r3, #0]
 803839e:	4619      	mov	r1, r3
 80383a0:	4a24      	ldr	r2, [pc, #144]	@ (8038434 <gos_messageTx+0xd4>)
 80383a2:	2354      	movs	r3, #84	@ 0x54
 80383a4:	fb01 f303 	mul.w	r3, r1, r3
 80383a8:	4413      	add	r3, r2
 80383aa:	881b      	ldrh	r3, [r3, #0]
 80383ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80383b0:	4293      	cmp	r3, r2
 80383b2:	d133      	bne.n	803841c <gos_messageTx+0xbc>
        {
            (void_t*) memcpy((void_t*)&messageArray[nextMessageIndex], (void_t*)message, sizeof(*message));
 80383b4:	4b1e      	ldr	r3, [pc, #120]	@ (8038430 <gos_messageTx+0xd0>)
 80383b6:	781b      	ldrb	r3, [r3, #0]
 80383b8:	461a      	mov	r2, r3
 80383ba:	2354      	movs	r3, #84	@ 0x54
 80383bc:	fb02 f303 	mul.w	r3, r2, r3
 80383c0:	4a1c      	ldr	r2, [pc, #112]	@ (8038434 <gos_messageTx+0xd4>)
 80383c2:	4413      	add	r3, r2
 80383c4:	2254      	movs	r2, #84	@ 0x54
 80383c6:	6879      	ldr	r1, [r7, #4]
 80383c8:	4618      	mov	r0, r3
 80383ca:	f003 ff02 	bl	803c1d2 <memcpy>

            messageTxResult = GOS_SUCCESS;
 80383ce:	2355      	movs	r3, #85	@ 0x55
 80383d0:	73fb      	strb	r3, [r7, #15]

            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 80383d2:	2300      	movs	r3, #0
 80383d4:	73bb      	strb	r3, [r7, #14]
 80383d6:	e01c      	b.n	8038412 <gos_messageTx+0xb2>
            {
                if (++nextMessageIndex == CFG_MESSAGE_MAX_NUMBER)
 80383d8:	4b15      	ldr	r3, [pc, #84]	@ (8038430 <gos_messageTx+0xd0>)
 80383da:	781b      	ldrb	r3, [r3, #0]
 80383dc:	3301      	adds	r3, #1
 80383de:	b2da      	uxtb	r2, r3
 80383e0:	4b13      	ldr	r3, [pc, #76]	@ (8038430 <gos_messageTx+0xd0>)
 80383e2:	701a      	strb	r2, [r3, #0]
 80383e4:	4b12      	ldr	r3, [pc, #72]	@ (8038430 <gos_messageTx+0xd0>)
 80383e6:	781b      	ldrb	r3, [r3, #0]
 80383e8:	2b08      	cmp	r3, #8
 80383ea:	d102      	bne.n	80383f2 <gos_messageTx+0x92>
                {
                    nextMessageIndex = 0u;
 80383ec:	4b10      	ldr	r3, [pc, #64]	@ (8038430 <gos_messageTx+0xd0>)
 80383ee:	2200      	movs	r2, #0
 80383f0:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 80383f2:	4b0f      	ldr	r3, [pc, #60]	@ (8038430 <gos_messageTx+0xd0>)
 80383f4:	781b      	ldrb	r3, [r3, #0]
 80383f6:	4619      	mov	r1, r3
 80383f8:	4a0e      	ldr	r2, [pc, #56]	@ (8038434 <gos_messageTx+0xd4>)
 80383fa:	2354      	movs	r3, #84	@ 0x54
 80383fc:	fb01 f303 	mul.w	r3, r1, r3
 8038400:	4413      	add	r3, r2
 8038402:	881b      	ldrh	r3, [r3, #0]
 8038404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8038408:	4293      	cmp	r3, r2
 803840a:	d006      	beq.n	803841a <gos_messageTx+0xba>
            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 803840c:	7bbb      	ldrb	r3, [r7, #14]
 803840e:	3301      	adds	r3, #1
 8038410:	73bb      	strb	r3, [r7, #14]
 8038412:	7bbb      	ldrb	r3, [r7, #14]
 8038414:	2b07      	cmp	r3, #7
 8038416:	d9df      	bls.n	80383d8 <gos_messageTx+0x78>
 8038418:	e000      	b.n	803841c <gos_messageTx+0xbc>
                {
                    break;
 803841a:	bf00      	nop
    {
        // Nothing to do.
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 803841c:	4803      	ldr	r0, [pc, #12]	@ (803842c <gos_messageTx+0xcc>)
 803841e:	f000 fa1d 	bl	803885c <gos_mutexUnlock>

    return messageTxResult;
 8038422:	7bfb      	ldrb	r3, [r7, #15]
}
 8038424:	4618      	mov	r0, r3
 8038426:	3710      	adds	r7, #16
 8038428:	46bd      	mov	sp, r7
 803842a:	bd80      	pop	{r7, pc}
 803842c:	2000b7c0 	.word	0x2000b7c0
 8038430:	2000b7be 	.word	0x2000b7be
 8038434:	2000b3dc 	.word	0x2000b3dc

08038438 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8038438:	b590      	push	{r4, r7, lr}
 803843a:	b083      	sub	sp, #12
 803843c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 803843e:	2300      	movs	r3, #0
 8038440:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8038442:	2300      	movs	r3, #0
 8038444:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8038446:	2300      	movs	r3, #0
 8038448:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803844a:	f04f 31ff 	mov.w	r1, #4294967295
 803844e:	4870      	ldr	r0, [pc, #448]	@ (8038610 <gos_messageDaemonTask+0x1d8>)
 8038450:	f000 f8fe 	bl	8038650 <gos_mutexLock>
 8038454:	4603      	mov	r3, r0
 8038456:	2b55      	cmp	r3, #85	@ 0x55
 8038458:	f040 80d5 	bne.w	8038606 <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 803845c:	2300      	movs	r3, #0
 803845e:	71bb      	strb	r3, [r7, #6]
 8038460:	e0ca      	b.n	80385f8 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 8038462:	79bb      	ldrb	r3, [r7, #6]
 8038464:	4a6b      	ldr	r2, [pc, #428]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038466:	015b      	lsls	r3, r3, #5
 8038468:	4413      	add	r3, r2
 803846a:	881b      	ldrh	r3, [r3, #0]
 803846c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8038470:	f000 80bf 	beq.w	80385f2 <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8038474:	2300      	movs	r3, #0
 8038476:	717b      	strb	r3, [r7, #5]
 8038478:	e077      	b.n	803856a <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 803847a:	2300      	movs	r3, #0
 803847c:	71fb      	strb	r3, [r7, #7]
 803847e:	e06e      	b.n	803855e <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8038480:	79ba      	ldrb	r2, [r7, #6]
 8038482:	797b      	ldrb	r3, [r7, #5]
 8038484:	4963      	ldr	r1, [pc, #396]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038486:	0112      	lsls	r2, r2, #4
 8038488:	4413      	add	r3, r2
 803848a:	005b      	lsls	r3, r3, #1
 803848c:	440b      	add	r3, r1
 803848e:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 8038490:	79fb      	ldrb	r3, [r7, #7]
 8038492:	4961      	ldr	r1, [pc, #388]	@ (8038618 <gos_messageDaemonTask+0x1e0>)
 8038494:	2054      	movs	r0, #84	@ 0x54
 8038496:	fb00 f303 	mul.w	r3, r0, r3
 803849a:	440b      	add	r3, r1
 803849c:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 803849e:	429a      	cmp	r2, r3
 80384a0:	d15a      	bne.n	8038558 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80384a2:	79bb      	ldrb	r3, [r7, #6]
 80384a4:	4a5b      	ldr	r2, [pc, #364]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80384a6:	015b      	lsls	r3, r3, #5
 80384a8:	4413      	add	r3, r2
 80384aa:	3318      	adds	r3, #24
 80384ac:	681b      	ldr	r3, [r3, #0]
 80384ae:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 80384b0:	79fb      	ldrb	r3, [r7, #7]
 80384b2:	2254      	movs	r2, #84	@ 0x54
 80384b4:	fb02 f303 	mul.w	r3, r2, r3
 80384b8:	4a57      	ldr	r2, [pc, #348]	@ (8038618 <gos_messageDaemonTask+0x1e0>)
 80384ba:	4413      	add	r3, r2
 80384bc:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 80384be:	79fb      	ldrb	r3, [r7, #7]
 80384c0:	4a55      	ldr	r2, [pc, #340]	@ (8038618 <gos_messageDaemonTask+0x1e0>)
 80384c2:	2454      	movs	r4, #84	@ 0x54
 80384c4:	fb04 f303 	mul.w	r3, r4, r3
 80384c8:	4413      	add	r3, r2
 80384ca:	3302      	adds	r3, #2
 80384cc:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80384ce:	461a      	mov	r2, r3
 80384d0:	f003 fe7f 	bl	803c1d2 <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 80384d4:	79fa      	ldrb	r2, [r7, #7]
 80384d6:	79bb      	ldrb	r3, [r7, #6]
 80384d8:	494e      	ldr	r1, [pc, #312]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80384da:	015b      	lsls	r3, r3, #5
 80384dc:	440b      	add	r3, r1
 80384de:	3318      	adds	r3, #24
 80384e0:	681b      	ldr	r3, [r3, #0]
 80384e2:	494d      	ldr	r1, [pc, #308]	@ (8038618 <gos_messageDaemonTask+0x1e0>)
 80384e4:	2054      	movs	r0, #84	@ 0x54
 80384e6:	fb00 f202 	mul.w	r2, r0, r2
 80384ea:	440a      	add	r2, r1
 80384ec:	3202      	adds	r2, #2
 80384ee:	7812      	ldrb	r2, [r2, #0]
 80384f0:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 80384f2:	79fa      	ldrb	r2, [r7, #7]
 80384f4:	79bb      	ldrb	r3, [r7, #6]
 80384f6:	4947      	ldr	r1, [pc, #284]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80384f8:	015b      	lsls	r3, r3, #5
 80384fa:	440b      	add	r3, r1
 80384fc:	3318      	adds	r3, #24
 80384fe:	681b      	ldr	r3, [r3, #0]
 8038500:	4945      	ldr	r1, [pc, #276]	@ (8038618 <gos_messageDaemonTask+0x1e0>)
 8038502:	2054      	movs	r0, #84	@ 0x54
 8038504:	fb00 f202 	mul.w	r2, r0, r2
 8038508:	440a      	add	r2, r1
 803850a:	8812      	ldrh	r2, [r2, #0]
 803850c:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 803850e:	79bb      	ldrb	r3, [r7, #6]
 8038510:	4a40      	ldr	r2, [pc, #256]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038512:	015b      	lsls	r3, r3, #5
 8038514:	4413      	add	r3, r2
 8038516:	881b      	ldrh	r3, [r3, #0]
 8038518:	4618      	mov	r0, r3
 803851a:	f7fe f89b 	bl	8036654 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 803851e:	79fb      	ldrb	r3, [r7, #7]
 8038520:	4a3d      	ldr	r2, [pc, #244]	@ (8038618 <gos_messageDaemonTask+0x1e0>)
 8038522:	2154      	movs	r1, #84	@ 0x54
 8038524:	fb01 f303 	mul.w	r3, r1, r3
 8038528:	4413      	add	r3, r2
 803852a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803852e:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8038530:	79bb      	ldrb	r3, [r7, #6]
 8038532:	4a38      	ldr	r2, [pc, #224]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038534:	015b      	lsls	r3, r3, #5
 8038536:	4413      	add	r3, r2
 8038538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 803853c:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 803853e:	79bb      	ldrb	r3, [r7, #6]
 8038540:	4a34      	ldr	r2, [pc, #208]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038542:	015b      	lsls	r3, r3, #5
 8038544:	4413      	add	r3, r2
 8038546:	331c      	adds	r3, #28
 8038548:	2236      	movs	r2, #54	@ 0x36
 803854a:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 803854c:	2308      	movs	r3, #8
 803854e:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 8038550:	2308      	movs	r3, #8
 8038552:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 8038554:	230a      	movs	r3, #10
 8038556:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8038558:	79fb      	ldrb	r3, [r7, #7]
 803855a:	3301      	adds	r3, #1
 803855c:	71fb      	strb	r3, [r7, #7]
 803855e:	79fb      	ldrb	r3, [r7, #7]
 8038560:	2b07      	cmp	r3, #7
 8038562:	d98d      	bls.n	8038480 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8038564:	797b      	ldrb	r3, [r7, #5]
 8038566:	3301      	adds	r3, #1
 8038568:	717b      	strb	r3, [r7, #5]
 803856a:	797b      	ldrb	r3, [r7, #5]
 803856c:	2b07      	cmp	r3, #7
 803856e:	d984      	bls.n	803847a <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8038570:	79bb      	ldrb	r3, [r7, #6]
 8038572:	4a28      	ldr	r2, [pc, #160]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038574:	015b      	lsls	r3, r3, #5
 8038576:	4413      	add	r3, r2
 8038578:	331c      	adds	r3, #28
 803857a:	781b      	ldrb	r3, [r3, #0]
 803857c:	2b49      	cmp	r3, #73	@ 0x49
 803857e:	d138      	bne.n	80385f2 <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 8038580:	79bb      	ldrb	r3, [r7, #6]
 8038582:	4a24      	ldr	r2, [pc, #144]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038584:	015b      	lsls	r3, r3, #5
 8038586:	4413      	add	r3, r2
 8038588:	3302      	adds	r3, #2
 803858a:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 803858c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8038590:	4293      	cmp	r3, r2
 8038592:	d02e      	beq.n	80385f2 <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 8038594:	79bb      	ldrb	r3, [r7, #6]
 8038596:	491f      	ldr	r1, [pc, #124]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 8038598:	015a      	lsls	r2, r3, #5
 803859a:	440a      	add	r2, r1
 803859c:	3204      	adds	r2, #4
 803859e:	8812      	ldrh	r2, [r2, #0]
 80385a0:	3201      	adds	r2, #1
 80385a2:	b291      	uxth	r1, r2
 80385a4:	4a1b      	ldr	r2, [pc, #108]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80385a6:	015b      	lsls	r3, r3, #5
 80385a8:	4413      	add	r3, r2
 80385aa:	3304      	adds	r3, #4
 80385ac:	460a      	mov	r2, r1
 80385ae:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 80385b0:	79bb      	ldrb	r3, [r7, #6]
 80385b2:	4a18      	ldr	r2, [pc, #96]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80385b4:	015b      	lsls	r3, r3, #5
 80385b6:	4413      	add	r3, r2
 80385b8:	3304      	adds	r3, #4
 80385ba:	881b      	ldrh	r3, [r3, #0]
 80385bc:	461a      	mov	r2, r3
 80385be:	2332      	movs	r3, #50	@ 0x32
 80385c0:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 80385c4:	79ba      	ldrb	r2, [r7, #6]
 80385c6:	4913      	ldr	r1, [pc, #76]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80385c8:	0152      	lsls	r2, r2, #5
 80385ca:	440a      	add	r2, r1
 80385cc:	3202      	adds	r2, #2
 80385ce:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 80385d0:	4293      	cmp	r3, r2
 80385d2:	d90e      	bls.n	80385f2 <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 80385d4:	79bb      	ldrb	r3, [r7, #6]
 80385d6:	4a0f      	ldr	r2, [pc, #60]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80385d8:	015b      	lsls	r3, r3, #5
 80385da:	4413      	add	r3, r2
 80385dc:	881b      	ldrh	r3, [r3, #0]
 80385de:	4618      	mov	r0, r3
 80385e0:	f7fe f838 	bl	8036654 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80385e4:	79bb      	ldrb	r3, [r7, #6]
 80385e6:	4a0b      	ldr	r2, [pc, #44]	@ (8038614 <gos_messageDaemonTask+0x1dc>)
 80385e8:	015b      	lsls	r3, r3, #5
 80385ea:	4413      	add	r3, r2
 80385ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80385f0:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80385f2:	79bb      	ldrb	r3, [r7, #6]
 80385f4:	3301      	adds	r3, #1
 80385f6:	71bb      	strb	r3, [r7, #6]
 80385f8:	79bb      	ldrb	r3, [r7, #6]
 80385fa:	2b09      	cmp	r3, #9
 80385fc:	f67f af31 	bls.w	8038462 <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8038600:	4803      	ldr	r0, [pc, #12]	@ (8038610 <gos_messageDaemonTask+0x1d8>)
 8038602:	f000 f92b 	bl	803885c <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 8038606:	2032      	movs	r0, #50	@ 0x32
 8038608:	f7fd fbea 	bl	8035de0 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803860c:	e71d      	b.n	803844a <gos_messageDaemonTask+0x12>
 803860e:	bf00      	nop
 8038610:	2000b7c0 	.word	0x2000b7c0
 8038614:	2000b67c 	.word	0x2000b67c
 8038618:	2000b3dc 	.word	0x2000b3dc

0803861c <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 803861c:	b480      	push	{r7}
 803861e:	b085      	sub	sp, #20
 8038620:	af00      	add	r7, sp, #0
 8038622:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 8038624:	23ae      	movs	r3, #174	@ 0xae
 8038626:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8038628:	687b      	ldr	r3, [r7, #4]
 803862a:	2b00      	cmp	r3, #0
 803862c:	d008      	beq.n	8038640 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 803862e:	687b      	ldr	r3, [r7, #4]
 8038630:	22d2      	movs	r2, #210	@ 0xd2
 8038632:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8038634:	687b      	ldr	r3, [r7, #4]
 8038636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 803863a:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 803863c:	2355      	movs	r3, #85	@ 0x55
 803863e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 8038640:	7bfb      	ldrb	r3, [r7, #15]
}
 8038642:	4618      	mov	r0, r3
 8038644:	3714      	adds	r7, #20
 8038646:	46bd      	mov	sp, r7
 8038648:	f85d 7b04 	ldr.w	r7, [sp], #4
 803864c:	4770      	bx	lr
	...

08038650 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 8038650:	b580      	push	{r7, lr}
 8038652:	b086      	sub	sp, #24
 8038654:	af00      	add	r7, sp, #0
 8038656:	6078      	str	r0, [r7, #4]
 8038658:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 803865a:	23ae      	movs	r3, #174	@ 0xae
 803865c:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 803865e:	f7fc fa09 	bl	8034a74 <gos_kernelGetSysTicks>
 8038662:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 8038664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8038668:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 803866a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 803866e:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 8038670:	23ff      	movs	r3, #255	@ 0xff
 8038672:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 8038674:	23ff      	movs	r3, #255	@ 0xff
 8038676:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 8038678:	2349      	movs	r3, #73	@ 0x49
 803867a:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 803867c:	e0ce      	b.n	803881c <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 803867e:	4b73      	ldr	r3, [pc, #460]	@ (803884c <gos_mutexLock+0x1fc>)
 8038680:	781b      	ldrb	r3, [r3, #0]
 8038682:	2b00      	cmp	r3, #0
 8038684:	d108      	bne.n	8038698 <gos_mutexLock+0x48>
 8038686:	b672      	cpsid	i
 8038688:	f3ef 8310 	mrs	r3, PRIMASK
 803868c:	4a70      	ldr	r2, [pc, #448]	@ (8038850 <gos_mutexLock+0x200>)
 803868e:	6013      	str	r3, [r2, #0]
 8038690:	f3bf 8f4f 	dsb	sy
 8038694:	f3bf 8f6f 	isb	sy
 8038698:	4b6c      	ldr	r3, [pc, #432]	@ (803884c <gos_mutexLock+0x1fc>)
 803869a:	781b      	ldrb	r3, [r3, #0]
 803869c:	3301      	adds	r3, #1
 803869e:	b2da      	uxtb	r2, r3
 80386a0:	4b6a      	ldr	r3, [pc, #424]	@ (803884c <gos_mutexLock+0x1fc>)
 80386a2:	701a      	strb	r2, [r3, #0]
 80386a4:	4b6b      	ldr	r3, [pc, #428]	@ (8038854 <gos_mutexLock+0x204>)
 80386a6:	781b      	ldrb	r3, [r3, #0]
 80386a8:	3301      	adds	r3, #1
 80386aa:	b2da      	uxtb	r2, r3
 80386ac:	4b69      	ldr	r3, [pc, #420]	@ (8038854 <gos_mutexLock+0x204>)
 80386ae:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 80386b0:	687b      	ldr	r3, [r7, #4]
 80386b2:	781b      	ldrb	r3, [r3, #0]
 80386b4:	2bd2      	cmp	r3, #210	@ 0xd2
 80386b6:	d13b      	bne.n	8038730 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 80386b8:	7cfb      	ldrb	r3, [r7, #19]
 80386ba:	2b36      	cmp	r3, #54	@ 0x36
 80386bc:	d12d      	bne.n	803871a <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 80386be:	4b66      	ldr	r3, [pc, #408]	@ (8038858 <gos_mutexLock+0x208>)
 80386c0:	781b      	ldrb	r3, [r3, #0]
 80386c2:	2b00      	cmp	r3, #0
 80386c4:	d105      	bne.n	80386d2 <gos_mutexLock+0x82>
 80386c6:	4b63      	ldr	r3, [pc, #396]	@ (8038854 <gos_mutexLock+0x204>)
 80386c8:	781b      	ldrb	r3, [r3, #0]
 80386ca:	3301      	adds	r3, #1
 80386cc:	b2da      	uxtb	r2, r3
 80386ce:	4b61      	ldr	r3, [pc, #388]	@ (8038854 <gos_mutexLock+0x204>)
 80386d0:	701a      	strb	r2, [r3, #0]
 80386d2:	4b61      	ldr	r3, [pc, #388]	@ (8038858 <gos_mutexLock+0x208>)
 80386d4:	781b      	ldrb	r3, [r3, #0]
 80386d6:	3301      	adds	r3, #1
 80386d8:	b2da      	uxtb	r2, r3
 80386da:	4b5f      	ldr	r3, [pc, #380]	@ (8038858 <gos_mutexLock+0x208>)
 80386dc:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 80386de:	7a7a      	ldrb	r2, [r7, #9]
 80386e0:	8abb      	ldrh	r3, [r7, #20]
 80386e2:	4611      	mov	r1, r2
 80386e4:	4618      	mov	r0, r3
 80386e6:	f7fe f9c3 	bl	8036a70 <gos_taskSetPriority>
                GOS_ISR_EXIT
 80386ea:	4b5b      	ldr	r3, [pc, #364]	@ (8038858 <gos_mutexLock+0x208>)
 80386ec:	781b      	ldrb	r3, [r3, #0]
 80386ee:	2b00      	cmp	r3, #0
 80386f0:	d005      	beq.n	80386fe <gos_mutexLock+0xae>
 80386f2:	4b59      	ldr	r3, [pc, #356]	@ (8038858 <gos_mutexLock+0x208>)
 80386f4:	781b      	ldrb	r3, [r3, #0]
 80386f6:	3b01      	subs	r3, #1
 80386f8:	b2da      	uxtb	r2, r3
 80386fa:	4b57      	ldr	r3, [pc, #348]	@ (8038858 <gos_mutexLock+0x208>)
 80386fc:	701a      	strb	r2, [r3, #0]
 80386fe:	4b56      	ldr	r3, [pc, #344]	@ (8038858 <gos_mutexLock+0x208>)
 8038700:	781b      	ldrb	r3, [r3, #0]
 8038702:	2b00      	cmp	r3, #0
 8038704:	d109      	bne.n	803871a <gos_mutexLock+0xca>
 8038706:	4b53      	ldr	r3, [pc, #332]	@ (8038854 <gos_mutexLock+0x204>)
 8038708:	781b      	ldrb	r3, [r3, #0]
 803870a:	2b00      	cmp	r3, #0
 803870c:	d005      	beq.n	803871a <gos_mutexLock+0xca>
 803870e:	4b51      	ldr	r3, [pc, #324]	@ (8038854 <gos_mutexLock+0x204>)
 8038710:	781b      	ldrb	r3, [r3, #0]
 8038712:	3b01      	subs	r3, #1
 8038714:	b2da      	uxtb	r2, r3
 8038716:	4b4f      	ldr	r3, [pc, #316]	@ (8038854 <gos_mutexLock+0x204>)
 8038718:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 803871a:	687b      	ldr	r3, [r7, #4]
 803871c:	226b      	movs	r2, #107	@ 0x6b
 803871e:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 8038720:	687b      	ldr	r3, [r7, #4]
 8038722:	3302      	adds	r3, #2
 8038724:	4618      	mov	r0, r3
 8038726:	f7fe fda7 	bl	8037278 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 803872a:	2355      	movs	r3, #85	@ 0x55
 803872c:	75fb      	strb	r3, [r7, #23]
 803872e:	e04b      	b.n	80387c8 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 8038730:	687b      	ldr	r3, [r7, #4]
 8038732:	885b      	ldrh	r3, [r3, #2]
 8038734:	f107 0209 	add.w	r2, r7, #9
 8038738:	4611      	mov	r1, r2
 803873a:	4618      	mov	r0, r3
 803873c:	f7fe fb20 	bl	8036d80 <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 8038740:	f107 030a 	add.w	r3, r7, #10
 8038744:	4618      	mov	r0, r3
 8038746:	f7fe fd97 	bl	8037278 <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 803874a:	897b      	ldrh	r3, [r7, #10]
 803874c:	f107 0208 	add.w	r2, r7, #8
 8038750:	4611      	mov	r1, r2
 8038752:	4618      	mov	r0, r3
 8038754:	f7fe fb14 	bl	8036d80 <gos_taskGetPriority>
            ownerId = pMutex->owner;
 8038758:	687b      	ldr	r3, [r7, #4]
 803875a:	885b      	ldrh	r3, [r3, #2]
 803875c:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 803875e:	7a3a      	ldrb	r2, [r7, #8]
 8038760:	7a7b      	ldrb	r3, [r7, #9]
 8038762:	429a      	cmp	r2, r3
 8038764:	d230      	bcs.n	80387c8 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8038766:	4b3c      	ldr	r3, [pc, #240]	@ (8038858 <gos_mutexLock+0x208>)
 8038768:	781b      	ldrb	r3, [r3, #0]
 803876a:	2b00      	cmp	r3, #0
 803876c:	d105      	bne.n	803877a <gos_mutexLock+0x12a>
 803876e:	4b39      	ldr	r3, [pc, #228]	@ (8038854 <gos_mutexLock+0x204>)
 8038770:	781b      	ldrb	r3, [r3, #0]
 8038772:	3301      	adds	r3, #1
 8038774:	b2da      	uxtb	r2, r3
 8038776:	4b37      	ldr	r3, [pc, #220]	@ (8038854 <gos_mutexLock+0x204>)
 8038778:	701a      	strb	r2, [r3, #0]
 803877a:	4b37      	ldr	r3, [pc, #220]	@ (8038858 <gos_mutexLock+0x208>)
 803877c:	781b      	ldrb	r3, [r3, #0]
 803877e:	3301      	adds	r3, #1
 8038780:	b2da      	uxtb	r2, r3
 8038782:	4b35      	ldr	r3, [pc, #212]	@ (8038858 <gos_mutexLock+0x208>)
 8038784:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 8038786:	687b      	ldr	r3, [r7, #4]
 8038788:	885b      	ldrh	r3, [r3, #2]
 803878a:	7a3a      	ldrb	r2, [r7, #8]
 803878c:	4611      	mov	r1, r2
 803878e:	4618      	mov	r0, r3
 8038790:	f7fe f96e 	bl	8036a70 <gos_taskSetPriority>
                GOS_ISR_EXIT
 8038794:	4b30      	ldr	r3, [pc, #192]	@ (8038858 <gos_mutexLock+0x208>)
 8038796:	781b      	ldrb	r3, [r3, #0]
 8038798:	2b00      	cmp	r3, #0
 803879a:	d005      	beq.n	80387a8 <gos_mutexLock+0x158>
 803879c:	4b2e      	ldr	r3, [pc, #184]	@ (8038858 <gos_mutexLock+0x208>)
 803879e:	781b      	ldrb	r3, [r3, #0]
 80387a0:	3b01      	subs	r3, #1
 80387a2:	b2da      	uxtb	r2, r3
 80387a4:	4b2c      	ldr	r3, [pc, #176]	@ (8038858 <gos_mutexLock+0x208>)
 80387a6:	701a      	strb	r2, [r3, #0]
 80387a8:	4b2b      	ldr	r3, [pc, #172]	@ (8038858 <gos_mutexLock+0x208>)
 80387aa:	781b      	ldrb	r3, [r3, #0]
 80387ac:	2b00      	cmp	r3, #0
 80387ae:	d109      	bne.n	80387c4 <gos_mutexLock+0x174>
 80387b0:	4b28      	ldr	r3, [pc, #160]	@ (8038854 <gos_mutexLock+0x204>)
 80387b2:	781b      	ldrb	r3, [r3, #0]
 80387b4:	2b00      	cmp	r3, #0
 80387b6:	d005      	beq.n	80387c4 <gos_mutexLock+0x174>
 80387b8:	4b26      	ldr	r3, [pc, #152]	@ (8038854 <gos_mutexLock+0x204>)
 80387ba:	781b      	ldrb	r3, [r3, #0]
 80387bc:	3b01      	subs	r3, #1
 80387be:	b2da      	uxtb	r2, r3
 80387c0:	4b24      	ldr	r3, [pc, #144]	@ (8038854 <gos_mutexLock+0x204>)
 80387c2:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 80387c4:	2336      	movs	r3, #54	@ 0x36
 80387c6:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 80387c8:	4b20      	ldr	r3, [pc, #128]	@ (803884c <gos_mutexLock+0x1fc>)
 80387ca:	781b      	ldrb	r3, [r3, #0]
 80387cc:	2b00      	cmp	r3, #0
 80387ce:	d005      	beq.n	80387dc <gos_mutexLock+0x18c>
 80387d0:	4b1e      	ldr	r3, [pc, #120]	@ (803884c <gos_mutexLock+0x1fc>)
 80387d2:	781b      	ldrb	r3, [r3, #0]
 80387d4:	3b01      	subs	r3, #1
 80387d6:	b2da      	uxtb	r2, r3
 80387d8:	4b1c      	ldr	r3, [pc, #112]	@ (803884c <gos_mutexLock+0x1fc>)
 80387da:	701a      	strb	r2, [r3, #0]
 80387dc:	4b1b      	ldr	r3, [pc, #108]	@ (803884c <gos_mutexLock+0x1fc>)
 80387de:	781b      	ldrb	r3, [r3, #0]
 80387e0:	2b00      	cmp	r3, #0
 80387e2:	d108      	bne.n	80387f6 <gos_mutexLock+0x1a6>
 80387e4:	4b1a      	ldr	r3, [pc, #104]	@ (8038850 <gos_mutexLock+0x200>)
 80387e6:	681b      	ldr	r3, [r3, #0]
 80387e8:	f383 8810 	msr	PRIMASK, r3
 80387ec:	b662      	cpsie	i
 80387ee:	f3bf 8f4f 	dsb	sy
 80387f2:	f3bf 8f6f 	isb	sy
 80387f6:	4b17      	ldr	r3, [pc, #92]	@ (8038854 <gos_mutexLock+0x204>)
 80387f8:	781b      	ldrb	r3, [r3, #0]
 80387fa:	2b00      	cmp	r3, #0
 80387fc:	d005      	beq.n	803880a <gos_mutexLock+0x1ba>
 80387fe:	4b15      	ldr	r3, [pc, #84]	@ (8038854 <gos_mutexLock+0x204>)
 8038800:	781b      	ldrb	r3, [r3, #0]
 8038802:	3b01      	subs	r3, #1
 8038804:	b2da      	uxtb	r2, r3
 8038806:	4b13      	ldr	r3, [pc, #76]	@ (8038854 <gos_mutexLock+0x204>)
 8038808:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 803880a:	7dfb      	ldrb	r3, [r7, #23]
 803880c:	2b55      	cmp	r3, #85	@ 0x55
 803880e:	d017      	beq.n	8038840 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 8038810:	683b      	ldr	r3, [r7, #0]
 8038812:	2b00      	cmp	r3, #0
 8038814:	d002      	beq.n	803881c <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 8038816:	2002      	movs	r0, #2
 8038818:	f7fd fae2 	bl	8035de0 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 803881c:	687b      	ldr	r3, [r7, #4]
 803881e:	2b00      	cmp	r3, #0
 8038820:	d00f      	beq.n	8038842 <gos_mutexLock+0x1f2>
 8038822:	f7fc f927 	bl	8034a74 <gos_kernelGetSysTicks>
 8038826:	4602      	mov	r2, r0
 8038828:	68fb      	ldr	r3, [r7, #12]
 803882a:	1ad3      	subs	r3, r2, r3
 803882c:	683a      	ldr	r2, [r7, #0]
 803882e:	429a      	cmp	r2, r3
 8038830:	f4bf af25 	bcs.w	803867e <gos_mutexLock+0x2e>
 8038834:	683b      	ldr	r3, [r7, #0]
 8038836:	f1b3 3fff 	cmp.w	r3, #4294967295
 803883a:	f43f af20 	beq.w	803867e <gos_mutexLock+0x2e>
 803883e:	e000      	b.n	8038842 <gos_mutexLock+0x1f2>
            break;
 8038840:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 8038842:	7dfb      	ldrb	r3, [r7, #23]
}
 8038844:	4618      	mov	r0, r3
 8038846:	3718      	adds	r7, #24
 8038848:	46bd      	mov	sp, r7
 803884a:	bd80      	pop	{r7, pc}
 803884c:	2000b313 	.word	0x2000b313
 8038850:	2000b314 	.word	0x2000b314
 8038854:	2000b311 	.word	0x2000b311
 8038858:	2000b312 	.word	0x2000b312

0803885c <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 803885c:	b580      	push	{r7, lr}
 803885e:	b084      	sub	sp, #16
 8038860:	af00      	add	r7, sp, #0
 8038862:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 8038864:	23ae      	movs	r3, #174	@ 0xae
 8038866:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 8038868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 803886c:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 803886e:	687b      	ldr	r3, [r7, #4]
 8038870:	2b00      	cmp	r3, #0
 8038872:	d04c      	beq.n	803890e <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 8038874:	4b28      	ldr	r3, [pc, #160]	@ (8038918 <gos_mutexUnlock+0xbc>)
 8038876:	781b      	ldrb	r3, [r3, #0]
 8038878:	2b00      	cmp	r3, #0
 803887a:	d108      	bne.n	803888e <gos_mutexUnlock+0x32>
 803887c:	b672      	cpsid	i
 803887e:	f3ef 8310 	mrs	r3, PRIMASK
 8038882:	4a26      	ldr	r2, [pc, #152]	@ (803891c <gos_mutexUnlock+0xc0>)
 8038884:	6013      	str	r3, [r2, #0]
 8038886:	f3bf 8f4f 	dsb	sy
 803888a:	f3bf 8f6f 	isb	sy
 803888e:	4b22      	ldr	r3, [pc, #136]	@ (8038918 <gos_mutexUnlock+0xbc>)
 8038890:	781b      	ldrb	r3, [r3, #0]
 8038892:	3301      	adds	r3, #1
 8038894:	b2da      	uxtb	r2, r3
 8038896:	4b20      	ldr	r3, [pc, #128]	@ (8038918 <gos_mutexUnlock+0xbc>)
 8038898:	701a      	strb	r2, [r3, #0]
 803889a:	4b21      	ldr	r3, [pc, #132]	@ (8038920 <gos_mutexUnlock+0xc4>)
 803889c:	781b      	ldrb	r3, [r3, #0]
 803889e:	3301      	adds	r3, #1
 80388a0:	b2da      	uxtb	r2, r3
 80388a2:	4b1f      	ldr	r3, [pc, #124]	@ (8038920 <gos_mutexUnlock+0xc4>)
 80388a4:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 80388a6:	f107 030c 	add.w	r3, r7, #12
 80388aa:	4618      	mov	r0, r3
 80388ac:	f7fe fce4 	bl	8037278 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 80388b0:	687b      	ldr	r3, [r7, #4]
 80388b2:	885a      	ldrh	r2, [r3, #2]
 80388b4:	89bb      	ldrh	r3, [r7, #12]
 80388b6:	429a      	cmp	r2, r3
 80388b8:	d108      	bne.n	80388cc <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 80388ba:	687b      	ldr	r3, [r7, #4]
 80388bc:	22d2      	movs	r2, #210	@ 0xd2
 80388be:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 80388c0:	687b      	ldr	r3, [r7, #4]
 80388c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80388c6:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 80388c8:	2355      	movs	r3, #85	@ 0x55
 80388ca:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 80388cc:	4b12      	ldr	r3, [pc, #72]	@ (8038918 <gos_mutexUnlock+0xbc>)
 80388ce:	781b      	ldrb	r3, [r3, #0]
 80388d0:	2b00      	cmp	r3, #0
 80388d2:	d005      	beq.n	80388e0 <gos_mutexUnlock+0x84>
 80388d4:	4b10      	ldr	r3, [pc, #64]	@ (8038918 <gos_mutexUnlock+0xbc>)
 80388d6:	781b      	ldrb	r3, [r3, #0]
 80388d8:	3b01      	subs	r3, #1
 80388da:	b2da      	uxtb	r2, r3
 80388dc:	4b0e      	ldr	r3, [pc, #56]	@ (8038918 <gos_mutexUnlock+0xbc>)
 80388de:	701a      	strb	r2, [r3, #0]
 80388e0:	4b0d      	ldr	r3, [pc, #52]	@ (8038918 <gos_mutexUnlock+0xbc>)
 80388e2:	781b      	ldrb	r3, [r3, #0]
 80388e4:	2b00      	cmp	r3, #0
 80388e6:	d108      	bne.n	80388fa <gos_mutexUnlock+0x9e>
 80388e8:	4b0c      	ldr	r3, [pc, #48]	@ (803891c <gos_mutexUnlock+0xc0>)
 80388ea:	681b      	ldr	r3, [r3, #0]
 80388ec:	f383 8810 	msr	PRIMASK, r3
 80388f0:	b662      	cpsie	i
 80388f2:	f3bf 8f4f 	dsb	sy
 80388f6:	f3bf 8f6f 	isb	sy
 80388fa:	4b09      	ldr	r3, [pc, #36]	@ (8038920 <gos_mutexUnlock+0xc4>)
 80388fc:	781b      	ldrb	r3, [r3, #0]
 80388fe:	2b00      	cmp	r3, #0
 8038900:	d005      	beq.n	803890e <gos_mutexUnlock+0xb2>
 8038902:	4b07      	ldr	r3, [pc, #28]	@ (8038920 <gos_mutexUnlock+0xc4>)
 8038904:	781b      	ldrb	r3, [r3, #0]
 8038906:	3b01      	subs	r3, #1
 8038908:	b2da      	uxtb	r2, r3
 803890a:	4b05      	ldr	r3, [pc, #20]	@ (8038920 <gos_mutexUnlock+0xc4>)
 803890c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 803890e:	7bfb      	ldrb	r3, [r7, #15]
}
 8038910:	4618      	mov	r0, r3
 8038912:	3710      	adds	r7, #16
 8038914:	46bd      	mov	sp, r7
 8038916:	bd80      	pop	{r7, pc}
 8038918:	2000b313 	.word	0x2000b313
 803891c:	2000b314 	.word	0x2000b314
 8038920:	2000b311 	.word	0x2000b311

08038924 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 8038924:	b580      	push	{r7, lr}
 8038926:	b082      	sub	sp, #8
 8038928:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_ERROR;
 803892a:	23ae      	movs	r3, #174	@ 0xae
 803892c:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 803892e:	2300      	movs	r3, #0
 8038930:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 8038932:	2300      	movs	r3, #0
 8038934:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8038936:	2300      	movs	r3, #0
 8038938:	71fb      	strb	r3, [r7, #7]
 803893a:	e038      	b.n	80389ae <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 803893c:	79fb      	ldrb	r3, [r7, #7]
 803893e:	4a22      	ldr	r2, [pc, #136]	@ (80389c8 <gos_queueInit+0xa4>)
 8038940:	2100      	movs	r1, #0
 8038942:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 8038944:	79fb      	ldrb	r3, [r7, #7]
 8038946:	4a21      	ldr	r2, [pc, #132]	@ (80389cc <gos_queueInit+0xa8>)
 8038948:	2100      	movs	r1, #0
 803894a:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 803894c:	79fb      	ldrb	r3, [r7, #7]
 803894e:	4a20      	ldr	r2, [pc, #128]	@ (80389d0 <gos_queueInit+0xac>)
 8038950:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038954:	fb01 f303 	mul.w	r3, r1, r3
 8038958:	4413      	add	r3, r2
 803895a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 803895e:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 8038960:	79fb      	ldrb	r3, [r7, #7]
 8038962:	4a1b      	ldr	r2, [pc, #108]	@ (80389d0 <gos_queueInit+0xac>)
 8038964:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038968:	fb01 f303 	mul.w	r3, r1, r3
 803896c:	4413      	add	r3, r2
 803896e:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038972:	3302      	adds	r3, #2
 8038974:	2200      	movs	r2, #0
 8038976:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8038978:	2300      	movs	r3, #0
 803897a:	71bb      	strb	r3, [r7, #6]
 803897c:	e011      	b.n	80389a2 <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 803897e:	79fb      	ldrb	r3, [r7, #7]
 8038980:	79ba      	ldrb	r2, [r7, #6]
 8038982:	4913      	ldr	r1, [pc, #76]	@ (80389d0 <gos_queueInit+0xac>)
 8038984:	20c9      	movs	r0, #201	@ 0xc9
 8038986:	fb00 f202 	mul.w	r2, r0, r2
 803898a:	f641 7084 	movw	r0, #8068	@ 0x1f84
 803898e:	fb00 f303 	mul.w	r3, r0, r3
 8038992:	4413      	add	r3, r2
 8038994:	440b      	add	r3, r1
 8038996:	33e2      	adds	r3, #226	@ 0xe2
 8038998:	2200      	movs	r2, #0
 803899a:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 803899c:	79bb      	ldrb	r3, [r7, #6]
 803899e:	3301      	adds	r3, #1
 80389a0:	71bb      	strb	r3, [r7, #6]
 80389a2:	79bb      	ldrb	r3, [r7, #6]
 80389a4:	2b27      	cmp	r3, #39	@ 0x27
 80389a6:	d9ea      	bls.n	803897e <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80389a8:	79fb      	ldrb	r3, [r7, #7]
 80389aa:	3301      	adds	r3, #1
 80389ac:	71fb      	strb	r3, [r7, #7]
 80389ae:	79fb      	ldrb	r3, [r7, #7]
 80389b0:	2b03      	cmp	r3, #3
 80389b2:	d9c3      	bls.n	803893c <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 80389b4:	4807      	ldr	r0, [pc, #28]	@ (80389d4 <gos_queueInit+0xb0>)
 80389b6:	f7ff fe31 	bl	803861c <gos_mutexInit>
 80389ba:	4603      	mov	r3, r0
 80389bc:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 80389be:	797b      	ldrb	r3, [r7, #5]
}
 80389c0:	4618      	mov	r0, r3
 80389c2:	3708      	adds	r7, #8
 80389c4:	46bd      	mov	sp, r7
 80389c6:	bd80      	pop	{r7, pc}
 80389c8:	200135d4 	.word	0x200135d4
 80389cc:	200135d8 	.word	0x200135d8
 80389d0:	2000b7c4 	.word	0x2000b7c4
 80389d4:	200135dc 	.word	0x200135dc

080389d8 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 80389d8:	b580      	push	{r7, lr}
 80389da:	b084      	sub	sp, #16
 80389dc:	af00      	add	r7, sp, #0
 80389de:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 80389e0:	23ae      	movs	r3, #174	@ 0xae
 80389e2:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 80389e4:	2300      	movs	r3, #0
 80389e6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 80389e8:	687b      	ldr	r3, [r7, #4]
 80389ea:	2b00      	cmp	r3, #0
 80389ec:	d048      	beq.n	8038a80 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80389ee:	2300      	movs	r3, #0
 80389f0:	73bb      	strb	r3, [r7, #14]
 80389f2:	e042      	b.n	8038a7a <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 80389f4:	7bbb      	ldrb	r3, [r7, #14]
 80389f6:	4a25      	ldr	r2, [pc, #148]	@ (8038a8c <gos_queueCreate+0xb4>)
 80389f8:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80389fc:	fb01 f303 	mul.w	r3, r1, r3
 8038a00:	4413      	add	r3, r2
 8038a02:	881b      	ldrh	r3, [r3, #0]
 8038a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8038a08:	d134      	bne.n	8038a74 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 8038a0a:	7bbb      	ldrb	r3, [r7, #14]
 8038a0c:	b29a      	uxth	r2, r3
 8038a0e:	7bbb      	ldrb	r3, [r7, #14]
 8038a10:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8038a14:	b290      	uxth	r0, r2
 8038a16:	4a1d      	ldr	r2, [pc, #116]	@ (8038a8c <gos_queueCreate+0xb4>)
 8038a18:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038a1c:	fb01 f303 	mul.w	r3, r1, r3
 8038a20:	4413      	add	r3, r2
 8038a22:	4602      	mov	r2, r0
 8038a24:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 8038a26:	7bbb      	ldrb	r3, [r7, #14]
 8038a28:	4a18      	ldr	r2, [pc, #96]	@ (8038a8c <gos_queueCreate+0xb4>)
 8038a2a:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038a2e:	fb01 f303 	mul.w	r3, r1, r3
 8038a32:	4413      	add	r3, r2
 8038a34:	881a      	ldrh	r2, [r3, #0]
 8038a36:	687b      	ldr	r3, [r7, #4]
 8038a38:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 8038a3a:	687b      	ldr	r3, [r7, #4]
 8038a3c:	3302      	adds	r3, #2
 8038a3e:	2b00      	cmp	r3, #0
 8038a40:	d015      	beq.n	8038a6e <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 8038a42:	687b      	ldr	r3, [r7, #4]
 8038a44:	3302      	adds	r3, #2
 8038a46:	4618      	mov	r0, r3
 8038a48:	f7e7 fc42 	bl	80202d0 <strlen>
 8038a4c:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 8038a4e:	2b18      	cmp	r3, #24
 8038a50:	d80d      	bhi.n	8038a6e <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 8038a52:	7bbb      	ldrb	r3, [r7, #14]
 8038a54:	f641 7284 	movw	r2, #8068	@ 0x1f84
 8038a58:	fb02 f303 	mul.w	r3, r2, r3
 8038a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8038a8c <gos_queueCreate+0xb4>)
 8038a5e:	4413      	add	r3, r2
 8038a60:	1c9a      	adds	r2, r3, #2
 8038a62:	687b      	ldr	r3, [r7, #4]
 8038a64:	3302      	adds	r3, #2
 8038a66:	4619      	mov	r1, r3
 8038a68:	4610      	mov	r0, r2
 8038a6a:	f003 fbaa 	bl	803c1c2 <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 8038a6e:	2355      	movs	r3, #85	@ 0x55
 8038a70:	73fb      	strb	r3, [r7, #15]
                break;
 8038a72:	e005      	b.n	8038a80 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8038a74:	7bbb      	ldrb	r3, [r7, #14]
 8038a76:	3301      	adds	r3, #1
 8038a78:	73bb      	strb	r3, [r7, #14]
 8038a7a:	7bbb      	ldrb	r3, [r7, #14]
 8038a7c:	2b03      	cmp	r3, #3
 8038a7e:	d9b9      	bls.n	80389f4 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8038a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8038a82:	4618      	mov	r0, r3
 8038a84:	3710      	adds	r7, #16
 8038a86:	46bd      	mov	sp, r7
 8038a88:	bd80      	pop	{r7, pc}
 8038a8a:	bf00      	nop
 8038a8c:	2000b7c4 	.word	0x2000b7c4

08038a90 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8038a90:	b580      	push	{r7, lr}
 8038a92:	b086      	sub	sp, #24
 8038a94:	af00      	add	r7, sp, #0
 8038a96:	60b9      	str	r1, [r7, #8]
 8038a98:	607b      	str	r3, [r7, #4]
 8038a9a:	4603      	mov	r3, r0
 8038a9c:	81fb      	strh	r3, [r7, #14]
 8038a9e:	4613      	mov	r3, r2
 8038aa0:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 8038aa2:	23ae      	movs	r3, #174	@ 0xae
 8038aa4:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8038aa6:	2300      	movs	r3, #0
 8038aa8:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8038aaa:	6879      	ldr	r1, [r7, #4]
 8038aac:	485a      	ldr	r0, [pc, #360]	@ (8038c18 <gos_queuePut+0x188>)
 8038aae:	f7ff fdcf 	bl	8038650 <gos_mutexLock>
 8038ab2:	4603      	mov	r3, r0
 8038ab4:	2b55      	cmp	r3, #85	@ 0x55
 8038ab6:	f040 80a7 	bne.w	8038c08 <gos_queuePut+0x178>
 8038aba:	89fb      	ldrh	r3, [r7, #14]
 8038abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8038ac0:	f0c0 80a2 	bcc.w	8038c08 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8038ac4:	89fb      	ldrh	r3, [r7, #14]
 8038ac6:	f243 0203 	movw	r2, #12291	@ 0x3003
 8038aca:	4293      	cmp	r3, r2
 8038acc:	f200 809c 	bhi.w	8038c08 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8038ad0:	68bb      	ldr	r3, [r7, #8]
 8038ad2:	2b00      	cmp	r3, #0
 8038ad4:	f000 8098 	beq.w	8038c08 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 8038ad8:	7b7b      	ldrb	r3, [r7, #13]
 8038ada:	2bc8      	cmp	r3, #200	@ 0xc8
 8038adc:	f200 8094 	bhi.w	8038c08 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8038ae0:	89fb      	ldrh	r3, [r7, #14]
 8038ae2:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8038ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8038c1c <gos_queuePut+0x18c>)
 8038ae8:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038aec:	fb01 f303 	mul.w	r3, r1, r3
 8038af0:	4413      	add	r3, r2
 8038af2:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 8038af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8038af8:	f000 8086 	beq.w	8038c08 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8038afc:	89fb      	ldrh	r3, [r7, #14]
 8038afe:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8038b00:	7dbb      	ldrb	r3, [r7, #22]
 8038b02:	4a47      	ldr	r2, [pc, #284]	@ (8038c20 <gos_queuePut+0x190>)
 8038b04:	5cd3      	ldrb	r3, [r2, r3]
 8038b06:	2b00      	cmp	r3, #0
 8038b08:	d009      	beq.n	8038b1e <gos_queuePut+0x8e>
 8038b0a:	7dbb      	ldrb	r3, [r7, #22]
 8038b0c:	4a45      	ldr	r2, [pc, #276]	@ (8038c24 <gos_queuePut+0x194>)
 8038b0e:	5cd3      	ldrb	r3, [r2, r3]
 8038b10:	4619      	mov	r1, r3
 8038b12:	7dbb      	ldrb	r3, [r7, #22]
 8038b14:	4a42      	ldr	r2, [pc, #264]	@ (8038c20 <gos_queuePut+0x190>)
 8038b16:	5cd3      	ldrb	r3, [r2, r3]
 8038b18:	3b01      	subs	r3, #1
 8038b1a:	4299      	cmp	r1, r3
 8038b1c:	d109      	bne.n	8038b32 <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8038b1e:	7dbb      	ldrb	r3, [r7, #22]
 8038b20:	4a3f      	ldr	r2, [pc, #252]	@ (8038c20 <gos_queuePut+0x190>)
 8038b22:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8038b24:	2b00      	cmp	r3, #0
 8038b26:	d16f      	bne.n	8038c08 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8038b28:	7dbb      	ldrb	r3, [r7, #22]
 8038b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8038c24 <gos_queuePut+0x194>)
 8038b2c:	5cd3      	ldrb	r3, [r2, r3]
 8038b2e:	2b27      	cmp	r3, #39	@ 0x27
 8038b30:	d06a      	beq.n	8038c08 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 8038b32:	7dbb      	ldrb	r3, [r7, #22]
 8038b34:	7dba      	ldrb	r2, [r7, #22]
 8038b36:	493b      	ldr	r1, [pc, #236]	@ (8038c24 <gos_queuePut+0x194>)
 8038b38:	5c8a      	ldrb	r2, [r1, r2]
 8038b3a:	4611      	mov	r1, r2
 8038b3c:	22c9      	movs	r2, #201	@ 0xc9
 8038b3e:	fb01 f202 	mul.w	r2, r1, r2
 8038b42:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038b46:	fb01 f303 	mul.w	r3, r1, r3
 8038b4a:	4413      	add	r3, r2
 8038b4c:	3318      	adds	r3, #24
 8038b4e:	4a33      	ldr	r2, [pc, #204]	@ (8038c1c <gos_queuePut+0x18c>)
 8038b50:	4413      	add	r3, r2
 8038b52:	3302      	adds	r3, #2
            (void_t) memcpy(
 8038b54:	7b7a      	ldrb	r2, [r7, #13]
 8038b56:	68b9      	ldr	r1, [r7, #8]
 8038b58:	4618      	mov	r0, r3
 8038b5a:	f003 fb3a 	bl	803c1d2 <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 8038b5e:	7dbb      	ldrb	r3, [r7, #22]
 8038b60:	7dba      	ldrb	r2, [r7, #22]
 8038b62:	4930      	ldr	r1, [pc, #192]	@ (8038c24 <gos_queuePut+0x194>)
 8038b64:	5c8a      	ldrb	r2, [r1, r2]
 8038b66:	4610      	mov	r0, r2
 8038b68:	492c      	ldr	r1, [pc, #176]	@ (8038c1c <gos_queuePut+0x18c>)
 8038b6a:	22c9      	movs	r2, #201	@ 0xc9
 8038b6c:	fb00 f202 	mul.w	r2, r0, r2
 8038b70:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8038b74:	fb00 f303 	mul.w	r3, r0, r3
 8038b78:	4413      	add	r3, r2
 8038b7a:	440b      	add	r3, r1
 8038b7c:	33e2      	adds	r3, #226	@ 0xe2
 8038b7e:	7b7a      	ldrb	r2, [r7, #13]
 8038b80:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 8038b82:	7dbb      	ldrb	r3, [r7, #22]
 8038b84:	4a27      	ldr	r2, [pc, #156]	@ (8038c24 <gos_queuePut+0x194>)
 8038b86:	5cd2      	ldrb	r2, [r2, r3]
 8038b88:	3201      	adds	r2, #1
 8038b8a:	b2d1      	uxtb	r1, r2
 8038b8c:	4a25      	ldr	r2, [pc, #148]	@ (8038c24 <gos_queuePut+0x194>)
 8038b8e:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8038b90:	7dba      	ldrb	r2, [r7, #22]
 8038b92:	4922      	ldr	r1, [pc, #136]	@ (8038c1c <gos_queuePut+0x18c>)
 8038b94:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8038b98:	fb02 f303 	mul.w	r3, r2, r3
 8038b9c:	440b      	add	r3, r1
 8038b9e:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038ba2:	3302      	adds	r3, #2
 8038ba4:	781b      	ldrb	r3, [r3, #0]
 8038ba6:	3301      	adds	r3, #1
 8038ba8:	b2d8      	uxtb	r0, r3
 8038baa:	491c      	ldr	r1, [pc, #112]	@ (8038c1c <gos_queuePut+0x18c>)
 8038bac:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8038bb0:	fb02 f303 	mul.w	r3, r2, r3
 8038bb4:	440b      	add	r3, r1
 8038bb6:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038bba:	3302      	adds	r3, #2
 8038bbc:	4602      	mov	r2, r0
 8038bbe:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8038bc0:	7dbb      	ldrb	r3, [r7, #22]
 8038bc2:	4a18      	ldr	r2, [pc, #96]	@ (8038c24 <gos_queuePut+0x194>)
 8038bc4:	5cd3      	ldrb	r3, [r2, r3]
 8038bc6:	2b27      	cmp	r3, #39	@ 0x27
 8038bc8:	d903      	bls.n	8038bd2 <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 8038bca:	7dbb      	ldrb	r3, [r7, #22]
 8038bcc:	4a15      	ldr	r2, [pc, #84]	@ (8038c24 <gos_queuePut+0x194>)
 8038bce:	2100      	movs	r1, #0
 8038bd0:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8038bd2:	7dbb      	ldrb	r3, [r7, #22]
 8038bd4:	4a11      	ldr	r2, [pc, #68]	@ (8038c1c <gos_queuePut+0x18c>)
 8038bd6:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038bda:	fb01 f303 	mul.w	r3, r1, r3
 8038bde:	4413      	add	r3, r2
 8038be0:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038be4:	3302      	adds	r3, #2
 8038be6:	781b      	ldrb	r3, [r3, #0]
 8038be8:	2b27      	cmp	r3, #39	@ 0x27
 8038bea:	d10b      	bne.n	8038c04 <gos_queuePut+0x174>
                queueFullHook != NULL)
 8038bec:	4b0e      	ldr	r3, [pc, #56]	@ (8038c28 <gos_queuePut+0x198>)
 8038bee:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8038bf0:	2b00      	cmp	r3, #0
 8038bf2:	d007      	beq.n	8038c04 <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 8038bf4:	4808      	ldr	r0, [pc, #32]	@ (8038c18 <gos_queuePut+0x188>)
 8038bf6:	f7ff fe31 	bl	803885c <gos_mutexUnlock>
                queueFullHook(queueId);
 8038bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8038c28 <gos_queuePut+0x198>)
 8038bfc:	681b      	ldr	r3, [r3, #0]
 8038bfe:	89fa      	ldrh	r2, [r7, #14]
 8038c00:	4610      	mov	r0, r2
 8038c02:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 8038c04:	2355      	movs	r3, #85	@ 0x55
 8038c06:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8038c08:	4803      	ldr	r0, [pc, #12]	@ (8038c18 <gos_queuePut+0x188>)
 8038c0a:	f7ff fe27 	bl	803885c <gos_mutexUnlock>

    return queuePutResult;
 8038c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8038c10:	4618      	mov	r0, r3
 8038c12:	3718      	adds	r7, #24
 8038c14:	46bd      	mov	sp, r7
 8038c16:	bd80      	pop	{r7, pc}
 8038c18:	200135dc 	.word	0x200135dc
 8038c1c:	2000b7c4 	.word	0x2000b7c4
 8038c20:	200135d4 	.word	0x200135d4
 8038c24:	200135d8 	.word	0x200135d8
 8038c28:	200135e0 	.word	0x200135e0

08038c2c <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 8038c2c:	b590      	push	{r4, r7, lr}
 8038c2e:	b087      	sub	sp, #28
 8038c30:	af00      	add	r7, sp, #0
 8038c32:	60b9      	str	r1, [r7, #8]
 8038c34:	607b      	str	r3, [r7, #4]
 8038c36:	4603      	mov	r3, r0
 8038c38:	81fb      	strh	r3, [r7, #14]
 8038c3a:	4613      	mov	r3, r2
 8038c3c:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 8038c3e:	23ae      	movs	r3, #174	@ 0xae
 8038c40:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8038c42:	2300      	movs	r3, #0
 8038c44:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8038c46:	6879      	ldr	r1, [r7, #4]
 8038c48:	4864      	ldr	r0, [pc, #400]	@ (8038ddc <gos_queueGet+0x1b0>)
 8038c4a:	f7ff fd01 	bl	8038650 <gos_mutexLock>
 8038c4e:	4603      	mov	r3, r0
 8038c50:	2b55      	cmp	r3, #85	@ 0x55
 8038c52:	f040 80bb 	bne.w	8038dcc <gos_queueGet+0x1a0>
 8038c56:	68bb      	ldr	r3, [r7, #8]
 8038c58:	2b00      	cmp	r3, #0
 8038c5a:	f000 80b7 	beq.w	8038dcc <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 8038c5e:	89fb      	ldrh	r3, [r7, #14]
 8038c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8038c64:	f0c0 80b2 	bcc.w	8038dcc <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8038c68:	89fb      	ldrh	r3, [r7, #14]
 8038c6a:	f243 0203 	movw	r2, #12291	@ 0x3003
 8038c6e:	4293      	cmp	r3, r2
 8038c70:	f200 80ac 	bhi.w	8038dcc <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8038c74:	89fb      	ldrh	r3, [r7, #14]
 8038c76:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8038c7a:	4a59      	ldr	r2, [pc, #356]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038c7c:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038c80:	fb01 f303 	mul.w	r3, r1, r3
 8038c84:	4413      	add	r3, r2
 8038c86:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8038c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8038c8c:	f000 809e 	beq.w	8038dcc <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8038c90:	89fb      	ldrh	r3, [r7, #14]
 8038c92:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8038c96:	89fa      	ldrh	r2, [r7, #14]
 8038c98:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 8038c9c:	4951      	ldr	r1, [pc, #324]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038c9e:	5c8a      	ldrb	r2, [r1, r2]
 8038ca0:	4610      	mov	r0, r2
 8038ca2:	494f      	ldr	r1, [pc, #316]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038ca4:	22c9      	movs	r2, #201	@ 0xc9
 8038ca6:	fb00 f202 	mul.w	r2, r0, r2
 8038caa:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8038cae:	fb00 f303 	mul.w	r3, r0, r3
 8038cb2:	4413      	add	r3, r2
 8038cb4:	440b      	add	r3, r1
 8038cb6:	33e2      	adds	r3, #226	@ 0xe2
 8038cb8:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8038cba:	7b7a      	ldrb	r2, [r7, #13]
 8038cbc:	429a      	cmp	r2, r3
 8038cbe:	f0c0 8085 	bcc.w	8038dcc <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8038cc2:	89fb      	ldrh	r3, [r7, #14]
 8038cc4:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 8038cc6:	7dbb      	ldrb	r3, [r7, #22]
 8038cc8:	4a46      	ldr	r2, [pc, #280]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038cca:	5cd2      	ldrb	r2, [r2, r3]
 8038ccc:	7dbb      	ldrb	r3, [r7, #22]
 8038cce:	4946      	ldr	r1, [pc, #280]	@ (8038de8 <gos_queueGet+0x1bc>)
 8038cd0:	5ccb      	ldrb	r3, [r1, r3]
 8038cd2:	429a      	cmp	r2, r3
 8038cd4:	d07a      	beq.n	8038dcc <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 8038cd6:	7dbb      	ldrb	r3, [r7, #22]
 8038cd8:	7dba      	ldrb	r2, [r7, #22]
 8038cda:	4942      	ldr	r1, [pc, #264]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038cdc:	5c8a      	ldrb	r2, [r1, r2]
 8038cde:	4611      	mov	r1, r2
 8038ce0:	22c9      	movs	r2, #201	@ 0xc9
 8038ce2:	fb01 f202 	mul.w	r2, r1, r2
 8038ce6:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038cea:	fb01 f303 	mul.w	r3, r1, r3
 8038cee:	4413      	add	r3, r2
 8038cf0:	3318      	adds	r3, #24
 8038cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038cf4:	4413      	add	r3, r2
 8038cf6:	1c99      	adds	r1, r3, #2
 8038cf8:	7dbb      	ldrb	r3, [r7, #22]
 8038cfa:	7dba      	ldrb	r2, [r7, #22]
 8038cfc:	4839      	ldr	r0, [pc, #228]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038cfe:	5c82      	ldrb	r2, [r0, r2]
 8038d00:	4614      	mov	r4, r2
 8038d02:	4837      	ldr	r0, [pc, #220]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038d04:	22c9      	movs	r2, #201	@ 0xc9
 8038d06:	fb04 f202 	mul.w	r2, r4, r2
 8038d0a:	f641 7484 	movw	r4, #8068	@ 0x1f84
 8038d0e:	fb04 f303 	mul.w	r3, r4, r3
 8038d12:	4413      	add	r3, r2
 8038d14:	4403      	add	r3, r0
 8038d16:	33e2      	adds	r3, #226	@ 0xe2
 8038d18:	781b      	ldrb	r3, [r3, #0]
 8038d1a:	461a      	mov	r2, r3
 8038d1c:	68b8      	ldr	r0, [r7, #8]
 8038d1e:	f003 fa58 	bl	803c1d2 <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 8038d22:	7dbb      	ldrb	r3, [r7, #22]
 8038d24:	7dba      	ldrb	r2, [r7, #22]
 8038d26:	492f      	ldr	r1, [pc, #188]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038d28:	5c8a      	ldrb	r2, [r1, r2]
 8038d2a:	4610      	mov	r0, r2
 8038d2c:	492c      	ldr	r1, [pc, #176]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038d2e:	22c9      	movs	r2, #201	@ 0xc9
 8038d30:	fb00 f202 	mul.w	r2, r0, r2
 8038d34:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8038d38:	fb00 f303 	mul.w	r3, r0, r3
 8038d3c:	4413      	add	r3, r2
 8038d3e:	440b      	add	r3, r1
 8038d40:	33e2      	adds	r3, #226	@ 0xe2
 8038d42:	2200      	movs	r2, #0
 8038d44:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 8038d46:	7dbb      	ldrb	r3, [r7, #22]
 8038d48:	4a26      	ldr	r2, [pc, #152]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038d4a:	5cd2      	ldrb	r2, [r2, r3]
 8038d4c:	3201      	adds	r2, #1
 8038d4e:	b2d1      	uxtb	r1, r2
 8038d50:	4a24      	ldr	r2, [pc, #144]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038d52:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 8038d54:	7dba      	ldrb	r2, [r7, #22]
 8038d56:	4922      	ldr	r1, [pc, #136]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038d58:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8038d5c:	fb02 f303 	mul.w	r3, r2, r3
 8038d60:	440b      	add	r3, r1
 8038d62:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038d66:	3302      	adds	r3, #2
 8038d68:	781b      	ldrb	r3, [r3, #0]
 8038d6a:	3b01      	subs	r3, #1
 8038d6c:	b2d8      	uxtb	r0, r3
 8038d6e:	491c      	ldr	r1, [pc, #112]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038d70:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8038d74:	fb02 f303 	mul.w	r3, r2, r3
 8038d78:	440b      	add	r3, r1
 8038d7a:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038d7e:	3302      	adds	r3, #2
 8038d80:	4602      	mov	r2, r0
 8038d82:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8038d84:	7dbb      	ldrb	r3, [r7, #22]
 8038d86:	4a17      	ldr	r2, [pc, #92]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038d88:	5cd3      	ldrb	r3, [r2, r3]
 8038d8a:	2b27      	cmp	r3, #39	@ 0x27
 8038d8c:	d903      	bls.n	8038d96 <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 8038d8e:	7dbb      	ldrb	r3, [r7, #22]
 8038d90:	4a14      	ldr	r2, [pc, #80]	@ (8038de4 <gos_queueGet+0x1b8>)
 8038d92:	2100      	movs	r1, #0
 8038d94:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 8038d96:	7dbb      	ldrb	r3, [r7, #22]
 8038d98:	4a11      	ldr	r2, [pc, #68]	@ (8038de0 <gos_queueGet+0x1b4>)
 8038d9a:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038d9e:	fb01 f303 	mul.w	r3, r1, r3
 8038da2:	4413      	add	r3, r2
 8038da4:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038da8:	3302      	adds	r3, #2
 8038daa:	781b      	ldrb	r3, [r3, #0]
 8038dac:	2b00      	cmp	r3, #0
 8038dae:	d10b      	bne.n	8038dc8 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 8038db0:	4b0e      	ldr	r3, [pc, #56]	@ (8038dec <gos_queueGet+0x1c0>)
 8038db2:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 8038db4:	2b00      	cmp	r3, #0
 8038db6:	d007      	beq.n	8038dc8 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 8038db8:	4808      	ldr	r0, [pc, #32]	@ (8038ddc <gos_queueGet+0x1b0>)
 8038dba:	f7ff fd4f 	bl	803885c <gos_mutexUnlock>
                queueEmptyHook(queueId);
 8038dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8038dec <gos_queueGet+0x1c0>)
 8038dc0:	681b      	ldr	r3, [r3, #0]
 8038dc2:	89fa      	ldrh	r2, [r7, #14]
 8038dc4:	4610      	mov	r0, r2
 8038dc6:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 8038dc8:	2355      	movs	r3, #85	@ 0x55
 8038dca:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8038dcc:	4803      	ldr	r0, [pc, #12]	@ (8038ddc <gos_queueGet+0x1b0>)
 8038dce:	f7ff fd45 	bl	803885c <gos_mutexUnlock>

    return queueGetResult;
 8038dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8038dd4:	4618      	mov	r0, r3
 8038dd6:	371c      	adds	r7, #28
 8038dd8:	46bd      	mov	sp, r7
 8038dda:	bd90      	pop	{r4, r7, pc}
 8038ddc:	200135dc 	.word	0x200135dc
 8038de0:	2000b7c4 	.word	0x2000b7c4
 8038de4:	200135d4 	.word	0x200135d4
 8038de8:	200135d8 	.word	0x200135d8
 8038dec:	200135e4 	.word	0x200135e4

08038df0 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8038df0:	b590      	push	{r4, r7, lr}
 8038df2:	b083      	sub	sp, #12
 8038df4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 8038df6:	2300      	movs	r3, #0
 8038df8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 8038dfa:	4826      	ldr	r0, [pc, #152]	@ (8038e94 <gos_queueDump+0xa4>)
 8038dfc:	f002 fac8 	bl	803b390 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8038e00:	4825      	ldr	r0, [pc, #148]	@ (8038e98 <gos_queueDump+0xa8>)
 8038e02:	f002 fac5 	bl	803b390 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 8038e06:	4b25      	ldr	r3, [pc, #148]	@ (8038e9c <gos_queueDump+0xac>)
 8038e08:	4a25      	ldr	r2, [pc, #148]	@ (8038ea0 <gos_queueDump+0xb0>)
 8038e0a:	4926      	ldr	r1, [pc, #152]	@ (8038ea4 <gos_queueDump+0xb4>)
 8038e0c:	4826      	ldr	r0, [pc, #152]	@ (8038ea8 <gos_queueDump+0xb8>)
 8038e0e:	f002 fabf 	bl	803b390 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8038e12:	4821      	ldr	r0, [pc, #132]	@ (8038e98 <gos_queueDump+0xa8>)
 8038e14:	f002 fabc 	bl	803b390 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8038e18:	2300      	movs	r3, #0
 8038e1a:	71fb      	strb	r3, [r7, #7]
 8038e1c:	e02d      	b.n	8038e7a <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8038e1e:	79fb      	ldrb	r3, [r7, #7]
 8038e20:	4a22      	ldr	r2, [pc, #136]	@ (8038eac <gos_queueDump+0xbc>)
 8038e22:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038e26:	fb01 f303 	mul.w	r3, r1, r3
 8038e2a:	4413      	add	r3, r2
 8038e2c:	881b      	ldrh	r3, [r3, #0]
 8038e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8038e32:	d026      	beq.n	8038e82 <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 8038e34:	79fb      	ldrb	r3, [r7, #7]
 8038e36:	4a1d      	ldr	r2, [pc, #116]	@ (8038eac <gos_queueDump+0xbc>)
 8038e38:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8038e3c:	fb01 f303 	mul.w	r3, r1, r3
 8038e40:	4413      	add	r3, r2
 8038e42:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8038e44:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 8038e46:	79fb      	ldrb	r3, [r7, #7]
 8038e48:	f641 7284 	movw	r2, #8068	@ 0x1f84
 8038e4c:	fb02 f303 	mul.w	r3, r2, r3
 8038e50:	4a16      	ldr	r2, [pc, #88]	@ (8038eac <gos_queueDump+0xbc>)
 8038e52:	4413      	add	r3, r2
 8038e54:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 8038e56:	79fb      	ldrb	r3, [r7, #7]
 8038e58:	4914      	ldr	r1, [pc, #80]	@ (8038eac <gos_queueDump+0xbc>)
 8038e5a:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8038e5e:	fb00 f303 	mul.w	r3, r0, r3
 8038e62:	440b      	add	r3, r1
 8038e64:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8038e68:	3302      	adds	r3, #2
 8038e6a:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8038e6c:	4621      	mov	r1, r4
 8038e6e:	4810      	ldr	r0, [pc, #64]	@ (8038eb0 <gos_queueDump+0xc0>)
 8038e70:	f002 fa8e 	bl	803b390 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8038e74:	79fb      	ldrb	r3, [r7, #7]
 8038e76:	3301      	adds	r3, #1
 8038e78:	71fb      	strb	r3, [r7, #7]
 8038e7a:	79fb      	ldrb	r3, [r7, #7]
 8038e7c:	2b03      	cmp	r3, #3
 8038e7e:	d9ce      	bls.n	8038e1e <gos_queueDump+0x2e>
 8038e80:	e000      	b.n	8038e84 <gos_queueDump+0x94>
            break;
 8038e82:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 8038e84:	480b      	ldr	r0, [pc, #44]	@ (8038eb4 <gos_queueDump+0xc4>)
 8038e86:	f002 fa83 	bl	803b390 <gos_shellDriverTransmitString>
}
 8038e8a:	bf00      	nop
 8038e8c:	370c      	adds	r7, #12
 8038e8e:	46bd      	mov	sp, r7
 8038e90:	bd90      	pop	{r4, r7, pc}
 8038e92:	bf00      	nop
 8038e94:	0803f534 	.word	0x0803f534
 8038e98:	0803f544 	.word	0x0803f544
 8038e9c:	0803f580 	.word	0x0803f580
 8038ea0:	0803f58c 	.word	0x0803f58c
 8038ea4:	0803f594 	.word	0x0803f594
 8038ea8:	0803f598 	.word	0x0803f598
 8038eac:	2000b7c4 	.word	0x2000b7c4
 8038eb0:	0803f5b0 	.word	0x0803f5b0
 8038eb4:	0803f5cc 	.word	0x0803f5cc

08038eb8 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 8038eb8:	b580      	push	{r7, lr}
 8038eba:	b082      	sub	sp, #8
 8038ebc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 8038ebe:	23ae      	movs	r3, #174	@ 0xae
 8038ec0:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 8038ec2:	2300      	movs	r3, #0
 8038ec4:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 8038ec6:	4b15      	ldr	r3, [pc, #84]	@ (8038f1c <gos_shellInit+0x64>)
 8038ec8:	2236      	movs	r2, #54	@ 0x36
 8038eca:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8038ecc:	2300      	movs	r3, #0
 8038ece:	71bb      	strb	r3, [r7, #6]
 8038ed0:	e00c      	b.n	8038eec <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 8038ed2:	79ba      	ldrb	r2, [r7, #6]
 8038ed4:	4912      	ldr	r1, [pc, #72]	@ (8038f20 <gos_shellInit+0x68>)
 8038ed6:	4613      	mov	r3, r2
 8038ed8:	00db      	lsls	r3, r3, #3
 8038eda:	1a9b      	subs	r3, r3, r2
 8038edc:	009b      	lsls	r3, r3, #2
 8038ede:	440b      	add	r3, r1
 8038ee0:	3314      	adds	r3, #20
 8038ee2:	2200      	movs	r2, #0
 8038ee4:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8038ee6:	79bb      	ldrb	r3, [r7, #6]
 8038ee8:	3301      	adds	r3, #1
 8038eea:	71bb      	strb	r3, [r7, #6]
 8038eec:	79bb      	ldrb	r3, [r7, #6]
 8038eee:	2b0f      	cmp	r3, #15
 8038ef0:	d9ef      	bls.n	8038ed2 <gos_shellInit+0x1a>
    }

    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8038ef2:	490c      	ldr	r1, [pc, #48]	@ (8038f24 <gos_shellInit+0x6c>)
 8038ef4:	480c      	ldr	r0, [pc, #48]	@ (8038f28 <gos_shellInit+0x70>)
 8038ef6:	f7fc fde1 	bl	8035abc <gos_taskRegister>
 8038efa:	4603      	mov	r3, r0
 8038efc:	2b55      	cmp	r3, #85	@ 0x55
 8038efe:	d107      	bne.n	8038f10 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 8038f00:	480a      	ldr	r0, [pc, #40]	@ (8038f2c <gos_shellInit+0x74>)
 8038f02:	f000 f815 	bl	8038f30 <gos_shellRegisterCommand>
 8038f06:	4603      	mov	r3, r0
    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8038f08:	2b55      	cmp	r3, #85	@ 0x55
 8038f0a:	d101      	bne.n	8038f10 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 8038f0c:	2355      	movs	r3, #85	@ 0x55
 8038f0e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 8038f10:	79fb      	ldrb	r3, [r7, #7]
}
 8038f12:	4618      	mov	r0, r3
 8038f14:	3708      	adds	r7, #8
 8038f16:	46bd      	mov	sp, r7
 8038f18:	bd80      	pop	{r7, pc}
 8038f1a:	bf00      	nop
 8038f1c:	20013876 	.word	0x20013876
 8038f20:	200135e8 	.word	0x200135e8
 8038f24:	200137a8 	.word	0x200137a8
 8038f28:	20002ef8 	.word	0x20002ef8
 8038f2c:	20002f64 	.word	0x20002f64

08038f30 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 8038f30:	b580      	push	{r7, lr}
 8038f32:	b084      	sub	sp, #16
 8038f34:	af00      	add	r7, sp, #0
 8038f36:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 8038f38:	23ae      	movs	r3, #174	@ 0xae
 8038f3a:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 8038f3c:	2300      	movs	r3, #0
 8038f3e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 8038f40:	687b      	ldr	r3, [r7, #4]
 8038f42:	695b      	ldr	r3, [r3, #20]
 8038f44:	2b00      	cmp	r3, #0
 8038f46:	d03c      	beq.n	8038fc2 <gos_shellRegisterCommand+0x92>
 8038f48:	687b      	ldr	r3, [r7, #4]
 8038f4a:	2b00      	cmp	r3, #0
 8038f4c:	d039      	beq.n	8038fc2 <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8038f4e:	2300      	movs	r3, #0
 8038f50:	73bb      	strb	r3, [r7, #14]
 8038f52:	e033      	b.n	8038fbc <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 8038f54:	7bba      	ldrb	r2, [r7, #14]
 8038f56:	491d      	ldr	r1, [pc, #116]	@ (8038fcc <gos_shellRegisterCommand+0x9c>)
 8038f58:	4613      	mov	r3, r2
 8038f5a:	00db      	lsls	r3, r3, #3
 8038f5c:	1a9b      	subs	r3, r3, r2
 8038f5e:	009b      	lsls	r3, r3, #2
 8038f60:	440b      	add	r3, r1
 8038f62:	3314      	adds	r3, #20
 8038f64:	681b      	ldr	r3, [r3, #0]
 8038f66:	2b00      	cmp	r3, #0
 8038f68:	d125      	bne.n	8038fb6 <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 8038f6a:	7bba      	ldrb	r2, [r7, #14]
 8038f6c:	687b      	ldr	r3, [r7, #4]
 8038f6e:	6959      	ldr	r1, [r3, #20]
 8038f70:	4816      	ldr	r0, [pc, #88]	@ (8038fcc <gos_shellRegisterCommand+0x9c>)
 8038f72:	4613      	mov	r3, r2
 8038f74:	00db      	lsls	r3, r3, #3
 8038f76:	1a9b      	subs	r3, r3, r2
 8038f78:	009b      	lsls	r3, r3, #2
 8038f7a:	4403      	add	r3, r0
 8038f7c:	3314      	adds	r3, #20
 8038f7e:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 8038f80:	7bba      	ldrb	r2, [r7, #14]
 8038f82:	687b      	ldr	r3, [r7, #4]
 8038f84:	8b18      	ldrh	r0, [r3, #24]
 8038f86:	4911      	ldr	r1, [pc, #68]	@ (8038fcc <gos_shellRegisterCommand+0x9c>)
 8038f88:	4613      	mov	r3, r2
 8038f8a:	00db      	lsls	r3, r3, #3
 8038f8c:	1a9b      	subs	r3, r3, r2
 8038f8e:	009b      	lsls	r3, r3, #2
 8038f90:	440b      	add	r3, r1
 8038f92:	3318      	adds	r3, #24
 8038f94:	4602      	mov	r2, r0
 8038f96:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 8038f98:	7bba      	ldrb	r2, [r7, #14]
 8038f9a:	4613      	mov	r3, r2
 8038f9c:	00db      	lsls	r3, r3, #3
 8038f9e:	1a9b      	subs	r3, r3, r2
 8038fa0:	009b      	lsls	r3, r3, #2
 8038fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8038fcc <gos_shellRegisterCommand+0x9c>)
 8038fa4:	4413      	add	r3, r2
 8038fa6:	687a      	ldr	r2, [r7, #4]
 8038fa8:	4611      	mov	r1, r2
 8038faa:	4618      	mov	r0, r3
 8038fac:	f003 f909 	bl	803c1c2 <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 8038fb0:	2355      	movs	r3, #85	@ 0x55
 8038fb2:	73fb      	strb	r3, [r7, #15]
                break;
 8038fb4:	e005      	b.n	8038fc2 <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8038fb6:	7bbb      	ldrb	r3, [r7, #14]
 8038fb8:	3301      	adds	r3, #1
 8038fba:	73bb      	strb	r3, [r7, #14]
 8038fbc:	7bbb      	ldrb	r3, [r7, #14]
 8038fbe:	2b0f      	cmp	r3, #15
 8038fc0:	d9c8      	bls.n	8038f54 <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 8038fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8038fc4:	4618      	mov	r0, r3
 8038fc6:	3710      	adds	r7, #16
 8038fc8:	46bd      	mov	sp, r7
 8038fca:	bd80      	pop	{r7, pc}
 8038fcc:	200135e8 	.word	0x200135e8

08038fd0 <gos_shellSuspend>:

/*
 * Function: gos_shellSuspend
 */
gos_result_t gos_shellSuspend (void_t)
{
 8038fd0:	b580      	push	{r7, lr}
 8038fd2:	b082      	sub	sp, #8
 8038fd4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellSuspendResult = GOS_ERROR;
 8038fd6:	23ae      	movs	r3, #174	@ 0xae
 8038fd8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellSuspendResult = gos_taskSuspend(shellDaemonTaskId);
 8038fda:	4b06      	ldr	r3, [pc, #24]	@ (8038ff4 <gos_shellSuspend+0x24>)
 8038fdc:	881b      	ldrh	r3, [r3, #0]
 8038fde:	4618      	mov	r0, r3
 8038fe0:	f7fd f856 	bl	8036090 <gos_taskSuspend>
 8038fe4:	4603      	mov	r3, r0
 8038fe6:	71fb      	strb	r3, [r7, #7]

    return shellSuspendResult;
 8038fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8038fea:	4618      	mov	r0, r3
 8038fec:	3708      	adds	r7, #8
 8038fee:	46bd      	mov	sp, r7
 8038ff0:	bd80      	pop	{r7, pc}
 8038ff2:	bf00      	nop
 8038ff4:	200137a8 	.word	0x200137a8

08038ff8 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 8038ff8:	b580      	push	{r7, lr}
 8038ffa:	b082      	sub	sp, #8
 8038ffc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 8038ffe:	23ae      	movs	r3, #174	@ 0xae
 8039000:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 8039002:	4b06      	ldr	r3, [pc, #24]	@ (803901c <gos_shellResume+0x24>)
 8039004:	881b      	ldrh	r3, [r3, #0]
 8039006:	4618      	mov	r0, r3
 8039008:	f7fd f964 	bl	80362d4 <gos_taskResume>
 803900c:	4603      	mov	r3, r0
 803900e:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 8039010:	79fb      	ldrb	r3, [r7, #7]
}
 8039012:	4618      	mov	r0, r3
 8039014:	3708      	adds	r7, #8
 8039016:	46bd      	mov	sp, r7
 8039018:	bd80      	pop	{r7, pc}
 803901a:	bf00      	nop
 803901c:	200137a8 	.word	0x200137a8

08039020 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 8039020:	b580      	push	{r7, lr}
 8039022:	b082      	sub	sp, #8
 8039024:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 8039026:	2300      	movs	r3, #0
 8039028:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 803902a:	2300      	movs	r3, #0
 803902c:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 803902e:	2300      	movs	r3, #0
 8039030:	807b      	strh	r3, [r7, #2]

    /*
     * Function code.
     */
    (void_t) gos_taskSleep(CFG_SHELL_STARTUP_DELAY_MS);
 8039032:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8039036:	f7fc fed3 	bl	8035de0 <gos_taskSleep>
    (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 803903a:	4873      	ldr	r0, [pc, #460]	@ (8039208 <gos_shellDaemonTask+0x1e8>)
 803903c:	f002 f9a8 	bl	803b390 <gos_shellDriverTransmitString>

    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8039040:	4b72      	ldr	r3, [pc, #456]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 8039042:	881b      	ldrh	r3, [r3, #0]
 8039044:	461a      	mov	r2, r3
 8039046:	4b72      	ldr	r3, [pc, #456]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 8039048:	4413      	add	r3, r2
 803904a:	4618      	mov	r0, r3
 803904c:	f002 f988 	bl	803b360 <gos_shellDriverReceiveChar>
 8039050:	4603      	mov	r3, r0
 8039052:	2b55      	cmp	r3, #85	@ 0x55
 8039054:	f040 80d3 	bne.w	80391fe <gos_shellDaemonTask+0x1de>
        {
            if (useEcho == GOS_TRUE)
 8039058:	4b6e      	ldr	r3, [pc, #440]	@ (8039214 <gos_shellDaemonTask+0x1f4>)
 803905a:	781b      	ldrb	r3, [r3, #0]
 803905c:	2b36      	cmp	r3, #54	@ 0x36
 803905e:	d107      	bne.n	8039070 <gos_shellDaemonTask+0x50>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 8039060:	4b6a      	ldr	r3, [pc, #424]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 8039062:	881b      	ldrh	r3, [r3, #0]
 8039064:	461a      	mov	r2, r3
 8039066:	4b6a      	ldr	r3, [pc, #424]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 8039068:	4413      	add	r3, r2
 803906a:	4618      	mov	r0, r3
 803906c:	f002 f990 	bl	803b390 <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 8039070:	4b66      	ldr	r3, [pc, #408]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 8039072:	881b      	ldrh	r3, [r3, #0]
 8039074:	461a      	mov	r2, r3
 8039076:	4b66      	ldr	r3, [pc, #408]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 8039078:	5c9b      	ldrb	r3, [r3, r2]
 803907a:	2b7f      	cmp	r3, #127	@ 0x7f
 803907c:	d10c      	bne.n	8039098 <gos_shellDaemonTask+0x78>
            {
                commandBuffer[commandBufferIndex] = '\0';
 803907e:	4b63      	ldr	r3, [pc, #396]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 8039080:	881b      	ldrh	r3, [r3, #0]
 8039082:	461a      	mov	r2, r3
 8039084:	4b62      	ldr	r3, [pc, #392]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 8039086:	2100      	movs	r1, #0
 8039088:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 803908a:	4b60      	ldr	r3, [pc, #384]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 803908c:	881b      	ldrh	r3, [r3, #0]
 803908e:	3b01      	subs	r3, #1
 8039090:	b29a      	uxth	r2, r3
 8039092:	4b5e      	ldr	r3, [pc, #376]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 8039094:	801a      	strh	r2, [r3, #0]
 8039096:	e0b2      	b.n	80391fe <gos_shellDaemonTask+0x1de>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 8039098:	4b5c      	ldr	r3, [pc, #368]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 803909a:	881b      	ldrh	r3, [r3, #0]
 803909c:	461a      	mov	r2, r3
 803909e:	4b5c      	ldr	r3, [pc, #368]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80390a0:	5c9b      	ldrb	r3, [r3, r2]
 80390a2:	2b0d      	cmp	r3, #13
 80390a4:	f040 8099 	bne.w	80391da <gos_shellDaemonTask+0x1ba>
            {
                if (useEcho == GOS_TRUE)
 80390a8:	4b5a      	ldr	r3, [pc, #360]	@ (8039214 <gos_shellDaemonTask+0x1f4>)
 80390aa:	781b      	ldrb	r3, [r3, #0]
 80390ac:	2b36      	cmp	r3, #54	@ 0x36
 80390ae:	d102      	bne.n	80390b6 <gos_shellDaemonTask+0x96>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 80390b0:	4859      	ldr	r0, [pc, #356]	@ (8039218 <gos_shellDaemonTask+0x1f8>)
 80390b2:	f002 f96d 	bl	803b390 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 80390b6:	4b55      	ldr	r3, [pc, #340]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 80390b8:	881b      	ldrh	r3, [r3, #0]
 80390ba:	461a      	mov	r2, r3
 80390bc:	4b54      	ldr	r3, [pc, #336]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80390be:	2100      	movs	r1, #0
 80390c0:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 80390c2:	2300      	movs	r3, #0
 80390c4:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 80390c6:	2300      	movs	r3, #0
 80390c8:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 80390ca:	e008      	b.n	80390de <gos_shellDaemonTask+0xbe>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 80390cc:	88ba      	ldrh	r2, [r7, #4]
 80390ce:	88bb      	ldrh	r3, [r7, #4]
 80390d0:	494f      	ldr	r1, [pc, #316]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80390d2:	5c89      	ldrb	r1, [r1, r2]
 80390d4:	4a51      	ldr	r2, [pc, #324]	@ (803921c <gos_shellDaemonTask+0x1fc>)
 80390d6:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 80390d8:	88bb      	ldrh	r3, [r7, #4]
 80390da:	3301      	adds	r3, #1
 80390dc:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 80390de:	88bb      	ldrh	r3, [r7, #4]
 80390e0:	4a4b      	ldr	r2, [pc, #300]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80390e2:	5cd3      	ldrb	r3, [r2, r3]
 80390e4:	2b20      	cmp	r3, #32
 80390e6:	d004      	beq.n	80390f2 <gos_shellDaemonTask+0xd2>
 80390e8:	88bb      	ldrh	r3, [r7, #4]
 80390ea:	4a49      	ldr	r2, [pc, #292]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80390ec:	5cd3      	ldrb	r3, [r2, r3]
 80390ee:	2b00      	cmp	r3, #0
 80390f0:	d1ec      	bne.n	80390cc <gos_shellDaemonTask+0xac>
                }
                actualCommand[actualCommandIndex] = '\0';
 80390f2:	88bb      	ldrh	r3, [r7, #4]
 80390f4:	4a49      	ldr	r2, [pc, #292]	@ (803921c <gos_shellDaemonTask+0x1fc>)
 80390f6:	2100      	movs	r1, #0
 80390f8:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 80390fa:	88bb      	ldrh	r3, [r7, #4]
 80390fc:	3301      	adds	r3, #1
 80390fe:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 8039100:	e00b      	b.n	803911a <gos_shellDaemonTask+0xfa>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 8039102:	88bb      	ldrh	r3, [r7, #4]
 8039104:	1c5a      	adds	r2, r3, #1
 8039106:	80ba      	strh	r2, [r7, #4]
 8039108:	4619      	mov	r1, r3
 803910a:	887b      	ldrh	r3, [r7, #2]
 803910c:	1c5a      	adds	r2, r3, #1
 803910e:	807a      	strh	r2, [r7, #2]
 8039110:	461a      	mov	r2, r3
 8039112:	4b3f      	ldr	r3, [pc, #252]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 8039114:	5c59      	ldrb	r1, [r3, r1]
 8039116:	4b42      	ldr	r3, [pc, #264]	@ (8039220 <gos_shellDaemonTask+0x200>)
 8039118:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 803911a:	88bb      	ldrh	r3, [r7, #4]
 803911c:	4a3c      	ldr	r2, [pc, #240]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 803911e:	5cd3      	ldrb	r3, [r2, r3]
 8039120:	2b00      	cmp	r3, #0
 8039122:	d1ee      	bne.n	8039102 <gos_shellDaemonTask+0xe2>
                }
                commandParams[paramIndex] = '\0';
 8039124:	887b      	ldrh	r3, [r7, #2]
 8039126:	4a3e      	ldr	r2, [pc, #248]	@ (8039220 <gos_shellDaemonTask+0x200>)
 8039128:	2100      	movs	r1, #0
 803912a:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803912c:	2300      	movs	r3, #0
 803912e:	71fb      	strb	r3, [r7, #7]
 8039130:	e03c      	b.n	80391ac <gos_shellDaemonTask+0x18c>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 8039132:	79fa      	ldrb	r2, [r7, #7]
 8039134:	4613      	mov	r3, r2
 8039136:	00db      	lsls	r3, r3, #3
 8039138:	1a9b      	subs	r3, r3, r2
 803913a:	009b      	lsls	r3, r3, #2
 803913c:	4a39      	ldr	r2, [pc, #228]	@ (8039224 <gos_shellDaemonTask+0x204>)
 803913e:	4413      	add	r3, r2
 8039140:	4936      	ldr	r1, [pc, #216]	@ (803921c <gos_shellDaemonTask+0x1fc>)
 8039142:	4618      	mov	r0, r3
 8039144:	f7e7 f864 	bl	8020210 <strcmp>
 8039148:	4603      	mov	r3, r0
 803914a:	2b00      	cmp	r3, #0
 803914c:	d12b      	bne.n	80391a6 <gos_shellDaemonTask+0x186>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 803914e:	79fa      	ldrb	r2, [r7, #7]
 8039150:	4934      	ldr	r1, [pc, #208]	@ (8039224 <gos_shellDaemonTask+0x204>)
 8039152:	4613      	mov	r3, r2
 8039154:	00db      	lsls	r3, r3, #3
 8039156:	1a9b      	subs	r3, r3, r2
 8039158:	009b      	lsls	r3, r3, #2
 803915a:	440b      	add	r3, r1
 803915c:	3314      	adds	r3, #20
 803915e:	681b      	ldr	r3, [r3, #0]
 8039160:	2b00      	cmp	r3, #0
 8039162:	d027      	beq.n	80391b4 <gos_shellDaemonTask+0x194>
                        {
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 8039164:	4b30      	ldr	r3, [pc, #192]	@ (8039228 <gos_shellDaemonTask+0x208>)
 8039166:	8818      	ldrh	r0, [r3, #0]
 8039168:	79fa      	ldrb	r2, [r7, #7]
 803916a:	492e      	ldr	r1, [pc, #184]	@ (8039224 <gos_shellDaemonTask+0x204>)
 803916c:	4613      	mov	r3, r2
 803916e:	00db      	lsls	r3, r3, #3
 8039170:	1a9b      	subs	r3, r3, r2
 8039172:	009b      	lsls	r3, r3, #2
 8039174:	440b      	add	r3, r1
 8039176:	3318      	adds	r3, #24
 8039178:	881b      	ldrh	r3, [r3, #0]
 803917a:	4619      	mov	r1, r3
 803917c:	f7fd ff66 	bl	803704c <gos_taskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 8039180:	79fa      	ldrb	r2, [r7, #7]
 8039182:	4928      	ldr	r1, [pc, #160]	@ (8039224 <gos_shellDaemonTask+0x204>)
 8039184:	4613      	mov	r3, r2
 8039186:	00db      	lsls	r3, r3, #3
 8039188:	1a9b      	subs	r3, r3, r2
 803918a:	009b      	lsls	r3, r3, #2
 803918c:	440b      	add	r3, r1
 803918e:	3314      	adds	r3, #20
 8039190:	681b      	ldr	r3, [r3, #0]
 8039192:	4823      	ldr	r0, [pc, #140]	@ (8039220 <gos_shellDaemonTask+0x200>)
 8039194:	4798      	blx	r3
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 8039196:	4b24      	ldr	r3, [pc, #144]	@ (8039228 <gos_shellDaemonTask+0x208>)
 8039198:	881b      	ldrh	r3, [r3, #0]
 803919a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 803919e:	4618      	mov	r0, r3
 80391a0:	f7fd ff54 	bl	803704c <gos_taskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 80391a4:	e006      	b.n	80391b4 <gos_shellDaemonTask+0x194>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 80391a6:	79fb      	ldrb	r3, [r7, #7]
 80391a8:	3301      	adds	r3, #1
 80391aa:	71fb      	strb	r3, [r7, #7]
 80391ac:	79fb      	ldrb	r3, [r7, #7]
 80391ae:	2b0f      	cmp	r3, #15
 80391b0:	d9bf      	bls.n	8039132 <gos_shellDaemonTask+0x112>
 80391b2:	e000      	b.n	80391b6 <gos_shellDaemonTask+0x196>
                        break;
 80391b4:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 80391b6:	79fb      	ldrb	r3, [r7, #7]
 80391b8:	2b10      	cmp	r3, #16
 80391ba:	d102      	bne.n	80391c2 <gos_shellDaemonTask+0x1a2>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 80391bc:	481b      	ldr	r0, [pc, #108]	@ (803922c <gos_shellDaemonTask+0x20c>)
 80391be:	f002 f8e7 	bl	803b390 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 80391c2:	22c8      	movs	r2, #200	@ 0xc8
 80391c4:	2100      	movs	r1, #0
 80391c6:	4812      	ldr	r0, [pc, #72]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80391c8:	f002 ff7c 	bl	803c0c4 <memset>
                commandBufferIndex = 0u;
 80391cc:	4b0f      	ldr	r3, [pc, #60]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 80391ce:	2200      	movs	r2, #0
 80391d0:	801a      	strh	r2, [r3, #0]

                (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 80391d2:	480d      	ldr	r0, [pc, #52]	@ (8039208 <gos_shellDaemonTask+0x1e8>)
 80391d4:	f002 f8dc 	bl	803b390 <gos_shellDriverTransmitString>
 80391d8:	e011      	b.n	80391fe <gos_shellDaemonTask+0x1de>
            }
            else
            {
                commandBufferIndex++;
 80391da:	4b0c      	ldr	r3, [pc, #48]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 80391dc:	881b      	ldrh	r3, [r3, #0]
 80391de:	3301      	adds	r3, #1
 80391e0:	b29a      	uxth	r2, r3
 80391e2:	4b0a      	ldr	r3, [pc, #40]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 80391e4:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 80391e6:	4b09      	ldr	r3, [pc, #36]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 80391e8:	881b      	ldrh	r3, [r3, #0]
 80391ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80391ec:	d907      	bls.n	80391fe <gos_shellDaemonTask+0x1de>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 80391ee:	22c8      	movs	r2, #200	@ 0xc8
 80391f0:	2100      	movs	r1, #0
 80391f2:	4807      	ldr	r0, [pc, #28]	@ (8039210 <gos_shellDaemonTask+0x1f0>)
 80391f4:	f002 ff66 	bl	803c0c4 <memset>
                    commandBufferIndex = 0u;
 80391f8:	4b04      	ldr	r3, [pc, #16]	@ (803920c <gos_shellDaemonTask+0x1ec>)
 80391fa:	2200      	movs	r2, #0
 80391fc:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_taskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 80391fe:	2032      	movs	r0, #50	@ 0x32
 8039200:	f7fc fdee 	bl	8035de0 <gos_taskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8039204:	e71c      	b.n	8039040 <gos_shellDaemonTask+0x20>
 8039206:	bf00      	nop
 8039208:	0803f60c 	.word	0x0803f60c
 803920c:	20013874 	.word	0x20013874
 8039210:	200137ac 	.word	0x200137ac
 8039214:	20013876 	.word	0x20013876
 8039218:	0803f628 	.word	0x0803f628
 803921c:	20013878 	.word	0x20013878
 8039220:	2001388c 	.word	0x2001388c
 8039224:	200135e8 	.word	0x200135e8
 8039228:	200137a8 	.word	0x200137a8
 803922c:	0803f62c 	.word	0x0803f62c

08039230 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 8039230:	b590      	push	{r4, r7, lr}
 8039232:	b089      	sub	sp, #36	@ 0x24
 8039234:	af02      	add	r7, sp, #8
 8039236:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 8039238:	2300      	movs	r3, #0
 803923a:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 803923c:	2300      	movs	r3, #0
 803923e:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 8039240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8039244:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 8039246:	f107 0308 	add.w	r3, r7, #8
 803924a:	2200      	movs	r2, #0
 803924c:	601a      	str	r2, [r3, #0]
 803924e:	605a      	str	r2, [r3, #4]
 8039250:	721a      	strb	r2, [r3, #8]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 8039252:	499f      	ldr	r1, [pc, #636]	@ (80394d0 <gos_shellCommandHandler+0x2a0>)
 8039254:	6878      	ldr	r0, [r7, #4]
 8039256:	f7e6 ffdb 	bl	8020210 <strcmp>
 803925a:	4603      	mov	r3, r0
 803925c:	2b00      	cmp	r3, #0
 803925e:	d102      	bne.n	8039266 <gos_shellCommandHandler+0x36>
    {
        gos_Dump();
 8039260:	f7fe fa24 	bl	80376ac <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 8039264:	e22d      	b.n	80396c2 <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "reset") == 0)
 8039266:	499b      	ldr	r1, [pc, #620]	@ (80394d4 <gos_shellCommandHandler+0x2a4>)
 8039268:	6878      	ldr	r0, [r7, #4]
 803926a:	f7e6 ffd1 	bl	8020210 <strcmp>
 803926e:	4603      	mov	r3, r0
 8039270:	2b00      	cmp	r3, #0
 8039272:	d102      	bne.n	803927a <gos_shellCommandHandler+0x4a>
        gos_kernelReset();
 8039274:	f7fb fc1c 	bl	8034ab0 <gos_kernelReset>
}
 8039278:	e223      	b.n	80396c2 <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "help") == 0)
 803927a:	4997      	ldr	r1, [pc, #604]	@ (80394d8 <gos_shellCommandHandler+0x2a8>)
 803927c:	6878      	ldr	r0, [r7, #4]
 803927e:	f7e6 ffc7 	bl	8020210 <strcmp>
 8039282:	4603      	mov	r3, r0
 8039284:	2b00      	cmp	r3, #0
 8039286:	d137      	bne.n	80392f8 <gos_shellCommandHandler+0xc8>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 8039288:	4894      	ldr	r0, [pc, #592]	@ (80394dc <gos_shellCommandHandler+0x2ac>)
 803928a:	f002 f881 	bl	803b390 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 803928e:	2300      	movs	r3, #0
 8039290:	75bb      	strb	r3, [r7, #22]
 8039292:	e02a      	b.n	80392ea <gos_shellCommandHandler+0xba>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 8039294:	7dba      	ldrb	r2, [r7, #22]
 8039296:	4613      	mov	r3, r2
 8039298:	00db      	lsls	r3, r3, #3
 803929a:	1a9b      	subs	r3, r3, r2
 803929c:	009b      	lsls	r3, r3, #2
 803929e:	4a90      	ldr	r2, [pc, #576]	@ (80394e0 <gos_shellCommandHandler+0x2b0>)
 80392a0:	4413      	add	r3, r2
 80392a2:	781b      	ldrb	r3, [r3, #0]
 80392a4:	2b00      	cmp	r3, #0
 80392a6:	f000 820b 	beq.w	80396c0 <gos_shellCommandHandler+0x490>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 80392aa:	7dba      	ldrb	r2, [r7, #22]
 80392ac:	4613      	mov	r3, r2
 80392ae:	00db      	lsls	r3, r3, #3
 80392b0:	1a9b      	subs	r3, r3, r2
 80392b2:	009b      	lsls	r3, r3, #2
 80392b4:	4a8a      	ldr	r2, [pc, #552]	@ (80394e0 <gos_shellCommandHandler+0x2b0>)
 80392b6:	4413      	add	r3, r2
 80392b8:	498a      	ldr	r1, [pc, #552]	@ (80394e4 <gos_shellCommandHandler+0x2b4>)
 80392ba:	4618      	mov	r0, r3
 80392bc:	f7e6 ffa8 	bl	8020210 <strcmp>
 80392c0:	4603      	mov	r3, r0
 80392c2:	2b00      	cmp	r3, #0
 80392c4:	d103      	bne.n	80392ce <gos_shellCommandHandler+0x9e>
                (void_t) gos_shellDriverTransmitString("\t"
 80392c6:	4888      	ldr	r0, [pc, #544]	@ (80394e8 <gos_shellCommandHandler+0x2b8>)
 80392c8:	f002 f862 	bl	803b390 <gos_shellDriverTransmitString>
 80392cc:	e00a      	b.n	80392e4 <gos_shellCommandHandler+0xb4>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 80392ce:	7dba      	ldrb	r2, [r7, #22]
 80392d0:	4613      	mov	r3, r2
 80392d2:	00db      	lsls	r3, r3, #3
 80392d4:	1a9b      	subs	r3, r3, r2
 80392d6:	009b      	lsls	r3, r3, #2
 80392d8:	4a81      	ldr	r2, [pc, #516]	@ (80394e0 <gos_shellCommandHandler+0x2b0>)
 80392da:	4413      	add	r3, r2
 80392dc:	4619      	mov	r1, r3
 80392de:	4883      	ldr	r0, [pc, #524]	@ (80394ec <gos_shellCommandHandler+0x2bc>)
 80392e0:	f002 f856 	bl	803b390 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 80392e4:	7dbb      	ldrb	r3, [r7, #22]
 80392e6:	3301      	adds	r3, #1
 80392e8:	75bb      	strb	r3, [r7, #22]
 80392ea:	7dbb      	ldrb	r3, [r7, #22]
 80392ec:	2b0f      	cmp	r3, #15
 80392ee:	d9d1      	bls.n	8039294 <gos_shellCommandHandler+0x64>
}
 80392f0:	e1e7      	b.n	80396c2 <gos_shellCommandHandler+0x492>
            index++;
 80392f2:	7dfb      	ldrb	r3, [r7, #23]
 80392f4:	3301      	adds	r3, #1
 80392f6:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 80392f8:	7dfb      	ldrb	r3, [r7, #23]
 80392fa:	687a      	ldr	r2, [r7, #4]
 80392fc:	4413      	add	r3, r2
 80392fe:	781b      	ldrb	r3, [r3, #0]
 8039300:	2b20      	cmp	r3, #32
 8039302:	d005      	beq.n	8039310 <gos_shellCommandHandler+0xe0>
 8039304:	7dfb      	ldrb	r3, [r7, #23]
 8039306:	687a      	ldr	r2, [r7, #4]
 8039308:	4413      	add	r3, r2
 803930a:	781b      	ldrb	r3, [r3, #0]
 803930c:	2b00      	cmp	r3, #0
 803930e:	d1f0      	bne.n	80392f2 <gos_shellCommandHandler+0xc2>
        params[index] = '\0';
 8039310:	7dfb      	ldrb	r3, [r7, #23]
 8039312:	687a      	ldr	r2, [r7, #4]
 8039314:	4413      	add	r3, r2
 8039316:	2200      	movs	r2, #0
 8039318:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 803931a:	4975      	ldr	r1, [pc, #468]	@ (80394f0 <gos_shellCommandHandler+0x2c0>)
 803931c:	6878      	ldr	r0, [r7, #4]
 803931e:	f7e6 ff77 	bl	8020210 <strcmp>
 8039322:	4603      	mov	r3, r0
 8039324:	2b00      	cmp	r3, #0
 8039326:	d120      	bne.n	803936a <gos_shellCommandHandler+0x13a>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8039328:	7dfb      	ldrb	r3, [r7, #23]
 803932a:	3301      	adds	r3, #1
 803932c:	75fb      	strb	r3, [r7, #23]
 803932e:	7dfb      	ldrb	r3, [r7, #23]
 8039330:	687a      	ldr	r2, [r7, #4]
 8039332:	4413      	add	r3, r2
 8039334:	2210      	movs	r2, #16
 8039336:	2100      	movs	r1, #0
 8039338:	4618      	mov	r0, r3
 803933a:	f002 f91b 	bl	803b574 <strtol>
 803933e:	4603      	mov	r3, r0
 8039340:	b29b      	uxth	r3, r3
 8039342:	82bb      	strh	r3, [r7, #20]
            if (gos_taskDelete(taskId) == GOS_SUCCESS)
 8039344:	8abb      	ldrh	r3, [r7, #20]
 8039346:	4618      	mov	r0, r3
 8039348:	f7fd fa6e 	bl	8036828 <gos_taskDelete>
 803934c:	4603      	mov	r3, r0
 803934e:	2b55      	cmp	r3, #85	@ 0x55
 8039350:	d105      	bne.n	803935e <gos_shellCommandHandler+0x12e>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 8039352:	8abb      	ldrh	r3, [r7, #20]
 8039354:	4619      	mov	r1, r3
 8039356:	4867      	ldr	r0, [pc, #412]	@ (80394f4 <gos_shellCommandHandler+0x2c4>)
 8039358:	f002 f81a 	bl	803b390 <gos_shellDriverTransmitString>
}
 803935c:	e1b1      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 803935e:	8abb      	ldrh	r3, [r7, #20]
 8039360:	4619      	mov	r1, r3
 8039362:	4865      	ldr	r0, [pc, #404]	@ (80394f8 <gos_shellCommandHandler+0x2c8>)
 8039364:	f002 f814 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039368:	e1ab      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "delete") == 0)
 803936a:	4964      	ldr	r1, [pc, #400]	@ (80394fc <gos_shellCommandHandler+0x2cc>)
 803936c:	6878      	ldr	r0, [r7, #4]
 803936e:	f7e6 ff4f 	bl	8020210 <strcmp>
 8039372:	4603      	mov	r3, r0
 8039374:	2b00      	cmp	r3, #0
 8039376:	d129      	bne.n	80393cc <gos_shellCommandHandler+0x19c>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8039378:	7dfb      	ldrb	r3, [r7, #23]
 803937a:	3301      	adds	r3, #1
 803937c:	75fb      	strb	r3, [r7, #23]
 803937e:	7dfb      	ldrb	r3, [r7, #23]
 8039380:	687a      	ldr	r2, [r7, #4]
 8039382:	4413      	add	r3, r2
 8039384:	f107 0214 	add.w	r2, r7, #20
 8039388:	4611      	mov	r1, r2
 803938a:	4618      	mov	r0, r3
 803938c:	f7fd ff3c 	bl	8037208 <gos_taskGetId>
 8039390:	4603      	mov	r3, r0
 8039392:	2b55      	cmp	r3, #85	@ 0x55
 8039394:	d116      	bne.n	80393c4 <gos_shellCommandHandler+0x194>
                if (gos_taskDelete(taskId) == GOS_SUCCESS)
 8039396:	8abb      	ldrh	r3, [r7, #20]
 8039398:	4618      	mov	r0, r3
 803939a:	f7fd fa45 	bl	8036828 <gos_taskDelete>
 803939e:	4603      	mov	r3, r0
 80393a0:	2b55      	cmp	r3, #85	@ 0x55
 80393a2:	d107      	bne.n	80393b4 <gos_shellCommandHandler+0x184>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 80393a4:	7dfb      	ldrb	r3, [r7, #23]
 80393a6:	687a      	ldr	r2, [r7, #4]
 80393a8:	4413      	add	r3, r2
 80393aa:	4619      	mov	r1, r3
 80393ac:	4854      	ldr	r0, [pc, #336]	@ (8039500 <gos_shellCommandHandler+0x2d0>)
 80393ae:	f001 ffef 	bl	803b390 <gos_shellDriverTransmitString>
}
 80393b2:	e186      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 80393b4:	7dfb      	ldrb	r3, [r7, #23]
 80393b6:	687a      	ldr	r2, [r7, #4]
 80393b8:	4413      	add	r3, r2
 80393ba:	4619      	mov	r1, r3
 80393bc:	4851      	ldr	r0, [pc, #324]	@ (8039504 <gos_shellCommandHandler+0x2d4>)
 80393be:	f001 ffe7 	bl	803b390 <gos_shellDriverTransmitString>
}
 80393c2:	e17e      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 80393c4:	4850      	ldr	r0, [pc, #320]	@ (8039508 <gos_shellCommandHandler+0x2d8>)
 80393c6:	f001 ffe3 	bl	803b390 <gos_shellDriverTransmitString>
}
 80393ca:	e17a      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend_tid") == 0)
 80393cc:	494f      	ldr	r1, [pc, #316]	@ (803950c <gos_shellCommandHandler+0x2dc>)
 80393ce:	6878      	ldr	r0, [r7, #4]
 80393d0:	f7e6 ff1e 	bl	8020210 <strcmp>
 80393d4:	4603      	mov	r3, r0
 80393d6:	2b00      	cmp	r3, #0
 80393d8:	d120      	bne.n	803941c <gos_shellCommandHandler+0x1ec>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 80393da:	7dfb      	ldrb	r3, [r7, #23]
 80393dc:	3301      	adds	r3, #1
 80393de:	75fb      	strb	r3, [r7, #23]
 80393e0:	7dfb      	ldrb	r3, [r7, #23]
 80393e2:	687a      	ldr	r2, [r7, #4]
 80393e4:	4413      	add	r3, r2
 80393e6:	2210      	movs	r2, #16
 80393e8:	2100      	movs	r1, #0
 80393ea:	4618      	mov	r0, r3
 80393ec:	f002 f8c2 	bl	803b574 <strtol>
 80393f0:	4603      	mov	r3, r0
 80393f2:	b29b      	uxth	r3, r3
 80393f4:	82bb      	strh	r3, [r7, #20]
            if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 80393f6:	8abb      	ldrh	r3, [r7, #20]
 80393f8:	4618      	mov	r0, r3
 80393fa:	f7fc fe49 	bl	8036090 <gos_taskSuspend>
 80393fe:	4603      	mov	r3, r0
 8039400:	2b55      	cmp	r3, #85	@ 0x55
 8039402:	d105      	bne.n	8039410 <gos_shellCommandHandler+0x1e0>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 8039404:	8abb      	ldrh	r3, [r7, #20]
 8039406:	4619      	mov	r1, r3
 8039408:	4841      	ldr	r0, [pc, #260]	@ (8039510 <gos_shellCommandHandler+0x2e0>)
 803940a:	f001 ffc1 	bl	803b390 <gos_shellDriverTransmitString>
}
 803940e:	e158      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 8039410:	8abb      	ldrh	r3, [r7, #20]
 8039412:	4619      	mov	r1, r3
 8039414:	483f      	ldr	r0, [pc, #252]	@ (8039514 <gos_shellCommandHandler+0x2e4>)
 8039416:	f001 ffbb 	bl	803b390 <gos_shellDriverTransmitString>
}
 803941a:	e152      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend") == 0)
 803941c:	493e      	ldr	r1, [pc, #248]	@ (8039518 <gos_shellCommandHandler+0x2e8>)
 803941e:	6878      	ldr	r0, [r7, #4]
 8039420:	f7e6 fef6 	bl	8020210 <strcmp>
 8039424:	4603      	mov	r3, r0
 8039426:	2b00      	cmp	r3, #0
 8039428:	d129      	bne.n	803947e <gos_shellCommandHandler+0x24e>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 803942a:	7dfb      	ldrb	r3, [r7, #23]
 803942c:	3301      	adds	r3, #1
 803942e:	75fb      	strb	r3, [r7, #23]
 8039430:	7dfb      	ldrb	r3, [r7, #23]
 8039432:	687a      	ldr	r2, [r7, #4]
 8039434:	4413      	add	r3, r2
 8039436:	f107 0214 	add.w	r2, r7, #20
 803943a:	4611      	mov	r1, r2
 803943c:	4618      	mov	r0, r3
 803943e:	f7fd fee3 	bl	8037208 <gos_taskGetId>
 8039442:	4603      	mov	r3, r0
 8039444:	2b55      	cmp	r3, #85	@ 0x55
 8039446:	d116      	bne.n	8039476 <gos_shellCommandHandler+0x246>
                if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 8039448:	8abb      	ldrh	r3, [r7, #20]
 803944a:	4618      	mov	r0, r3
 803944c:	f7fc fe20 	bl	8036090 <gos_taskSuspend>
 8039450:	4603      	mov	r3, r0
 8039452:	2b55      	cmp	r3, #85	@ 0x55
 8039454:	d107      	bne.n	8039466 <gos_shellCommandHandler+0x236>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 8039456:	7dfb      	ldrb	r3, [r7, #23]
 8039458:	687a      	ldr	r2, [r7, #4]
 803945a:	4413      	add	r3, r2
 803945c:	4619      	mov	r1, r3
 803945e:	482f      	ldr	r0, [pc, #188]	@ (803951c <gos_shellCommandHandler+0x2ec>)
 8039460:	f001 ff96 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039464:	e12d      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 8039466:	7dfb      	ldrb	r3, [r7, #23]
 8039468:	687a      	ldr	r2, [r7, #4]
 803946a:	4413      	add	r3, r2
 803946c:	4619      	mov	r1, r3
 803946e:	482c      	ldr	r0, [pc, #176]	@ (8039520 <gos_shellCommandHandler+0x2f0>)
 8039470:	f001 ff8e 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039474:	e125      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8039476:	4824      	ldr	r0, [pc, #144]	@ (8039508 <gos_shellCommandHandler+0x2d8>)
 8039478:	f001 ff8a 	bl	803b390 <gos_shellDriverTransmitString>
}
 803947c:	e121      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "resume_tid") == 0)
 803947e:	4929      	ldr	r1, [pc, #164]	@ (8039524 <gos_shellCommandHandler+0x2f4>)
 8039480:	6878      	ldr	r0, [r7, #4]
 8039482:	f7e6 fec5 	bl	8020210 <strcmp>
 8039486:	4603      	mov	r3, r0
 8039488:	2b00      	cmp	r3, #0
 803948a:	d151      	bne.n	8039530 <gos_shellCommandHandler+0x300>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 803948c:	7dfb      	ldrb	r3, [r7, #23]
 803948e:	3301      	adds	r3, #1
 8039490:	75fb      	strb	r3, [r7, #23]
 8039492:	7dfb      	ldrb	r3, [r7, #23]
 8039494:	687a      	ldr	r2, [r7, #4]
 8039496:	4413      	add	r3, r2
 8039498:	2210      	movs	r2, #16
 803949a:	2100      	movs	r1, #0
 803949c:	4618      	mov	r0, r3
 803949e:	f002 f869 	bl	803b574 <strtol>
 80394a2:	4603      	mov	r3, r0
 80394a4:	b29b      	uxth	r3, r3
 80394a6:	82bb      	strh	r3, [r7, #20]
            if (gos_taskResume(taskId) == GOS_SUCCESS)
 80394a8:	8abb      	ldrh	r3, [r7, #20]
 80394aa:	4618      	mov	r0, r3
 80394ac:	f7fc ff12 	bl	80362d4 <gos_taskResume>
 80394b0:	4603      	mov	r3, r0
 80394b2:	2b55      	cmp	r3, #85	@ 0x55
 80394b4:	d105      	bne.n	80394c2 <gos_shellCommandHandler+0x292>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 80394b6:	8abb      	ldrh	r3, [r7, #20]
 80394b8:	4619      	mov	r1, r3
 80394ba:	481b      	ldr	r0, [pc, #108]	@ (8039528 <gos_shellCommandHandler+0x2f8>)
 80394bc:	f001 ff68 	bl	803b390 <gos_shellDriverTransmitString>
}
 80394c0:	e0ff      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 80394c2:	8abb      	ldrh	r3, [r7, #20]
 80394c4:	4619      	mov	r1, r3
 80394c6:	4819      	ldr	r0, [pc, #100]	@ (803952c <gos_shellCommandHandler+0x2fc>)
 80394c8:	f001 ff62 	bl	803b390 <gos_shellDriverTransmitString>
}
 80394cc:	e0f9      	b.n	80396c2 <gos_shellCommandHandler+0x492>
 80394ce:	bf00      	nop
 80394d0:	0803f644 	.word	0x0803f644
 80394d4:	0803f64c 	.word	0x0803f64c
 80394d8:	0803f654 	.word	0x0803f654
 80394dc:	0803f65c 	.word	0x0803f65c
 80394e0:	200135e8 	.word	0x200135e8
 80394e4:	0803f684 	.word	0x0803f684
 80394e8:	0803f68c 	.word	0x0803f68c
 80394ec:	0803f738 	.word	0x0803f738
 80394f0:	0803f740 	.word	0x0803f740
 80394f4:	0803f74c 	.word	0x0803f74c
 80394f8:	0803f76c 	.word	0x0803f76c
 80394fc:	0803f790 	.word	0x0803f790
 8039500:	0803f798 	.word	0x0803f798
 8039504:	0803f7b0 	.word	0x0803f7b0
 8039508:	0803f7cc 	.word	0x0803f7cc
 803950c:	0803f7e8 	.word	0x0803f7e8
 8039510:	0803f7f4 	.word	0x0803f7f4
 8039514:	0803f814 	.word	0x0803f814
 8039518:	0803f838 	.word	0x0803f838
 803951c:	0803f840 	.word	0x0803f840
 8039520:	0803f85c 	.word	0x0803f85c
 8039524:	0803f87c 	.word	0x0803f87c
 8039528:	0803f888 	.word	0x0803f888
 803952c:	0803f8a8 	.word	0x0803f8a8
        else if (strcmp(params, "resume") == 0)
 8039530:	4966      	ldr	r1, [pc, #408]	@ (80396cc <gos_shellCommandHandler+0x49c>)
 8039532:	6878      	ldr	r0, [r7, #4]
 8039534:	f7e6 fe6c 	bl	8020210 <strcmp>
 8039538:	4603      	mov	r3, r0
 803953a:	2b00      	cmp	r3, #0
 803953c:	d129      	bne.n	8039592 <gos_shellCommandHandler+0x362>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 803953e:	7dfb      	ldrb	r3, [r7, #23]
 8039540:	3301      	adds	r3, #1
 8039542:	75fb      	strb	r3, [r7, #23]
 8039544:	7dfb      	ldrb	r3, [r7, #23]
 8039546:	687a      	ldr	r2, [r7, #4]
 8039548:	4413      	add	r3, r2
 803954a:	f107 0214 	add.w	r2, r7, #20
 803954e:	4611      	mov	r1, r2
 8039550:	4618      	mov	r0, r3
 8039552:	f7fd fe59 	bl	8037208 <gos_taskGetId>
 8039556:	4603      	mov	r3, r0
 8039558:	2b55      	cmp	r3, #85	@ 0x55
 803955a:	d116      	bne.n	803958a <gos_shellCommandHandler+0x35a>
                if (gos_taskResume(taskId) == GOS_SUCCESS)
 803955c:	8abb      	ldrh	r3, [r7, #20]
 803955e:	4618      	mov	r0, r3
 8039560:	f7fc feb8 	bl	80362d4 <gos_taskResume>
 8039564:	4603      	mov	r3, r0
 8039566:	2b55      	cmp	r3, #85	@ 0x55
 8039568:	d107      	bne.n	803957a <gos_shellCommandHandler+0x34a>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 803956a:	7dfb      	ldrb	r3, [r7, #23]
 803956c:	687a      	ldr	r2, [r7, #4]
 803956e:	4413      	add	r3, r2
 8039570:	4619      	mov	r1, r3
 8039572:	4857      	ldr	r0, [pc, #348]	@ (80396d0 <gos_shellCommandHandler+0x4a0>)
 8039574:	f001 ff0c 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039578:	e0a3      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 803957a:	7dfb      	ldrb	r3, [r7, #23]
 803957c:	687a      	ldr	r2, [r7, #4]
 803957e:	4413      	add	r3, r2
 8039580:	4619      	mov	r1, r3
 8039582:	4854      	ldr	r0, [pc, #336]	@ (80396d4 <gos_shellCommandHandler+0x4a4>)
 8039584:	f001 ff04 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039588:	e09b      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 803958a:	4853      	ldr	r0, [pc, #332]	@ (80396d8 <gos_shellCommandHandler+0x4a8>)
 803958c:	f001 ff00 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039590:	e097      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock_tid") == 0)
 8039592:	4952      	ldr	r1, [pc, #328]	@ (80396dc <gos_shellCommandHandler+0x4ac>)
 8039594:	6878      	ldr	r0, [r7, #4]
 8039596:	f7e6 fe3b 	bl	8020210 <strcmp>
 803959a:	4603      	mov	r3, r0
 803959c:	2b00      	cmp	r3, #0
 803959e:	d120      	bne.n	80395e2 <gos_shellCommandHandler+0x3b2>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 80395a0:	7dfb      	ldrb	r3, [r7, #23]
 80395a2:	3301      	adds	r3, #1
 80395a4:	75fb      	strb	r3, [r7, #23]
 80395a6:	7dfb      	ldrb	r3, [r7, #23]
 80395a8:	687a      	ldr	r2, [r7, #4]
 80395aa:	4413      	add	r3, r2
 80395ac:	2210      	movs	r2, #16
 80395ae:	2100      	movs	r1, #0
 80395b0:	4618      	mov	r0, r3
 80395b2:	f001 ffdf 	bl	803b574 <strtol>
 80395b6:	4603      	mov	r3, r0
 80395b8:	b29b      	uxth	r3, r3
 80395ba:	82bb      	strh	r3, [r7, #20]
            if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 80395bc:	8abb      	ldrh	r3, [r7, #20]
 80395be:	4618      	mov	r0, r3
 80395c0:	f7fd f848 	bl	8036654 <gos_taskUnblock>
 80395c4:	4603      	mov	r3, r0
 80395c6:	2b55      	cmp	r3, #85	@ 0x55
 80395c8:	d105      	bne.n	80395d6 <gos_shellCommandHandler+0x3a6>
                (void_t) gos_shellDriverTransmitString("0x%X task has been unblocked.\r\n", taskId);
 80395ca:	8abb      	ldrh	r3, [r7, #20]
 80395cc:	4619      	mov	r1, r3
 80395ce:	4844      	ldr	r0, [pc, #272]	@ (80396e0 <gos_shellCommandHandler+0x4b0>)
 80395d0:	f001 fede 	bl	803b390 <gos_shellDriverTransmitString>
}
 80395d4:	e075      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be unblocked.\r\n", taskId);
 80395d6:	8abb      	ldrh	r3, [r7, #20]
 80395d8:	4619      	mov	r1, r3
 80395da:	4842      	ldr	r0, [pc, #264]	@ (80396e4 <gos_shellCommandHandler+0x4b4>)
 80395dc:	f001 fed8 	bl	803b390 <gos_shellDriverTransmitString>
}
 80395e0:	e06f      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock") == 0)
 80395e2:	4941      	ldr	r1, [pc, #260]	@ (80396e8 <gos_shellCommandHandler+0x4b8>)
 80395e4:	6878      	ldr	r0, [r7, #4]
 80395e6:	f7e6 fe13 	bl	8020210 <strcmp>
 80395ea:	4603      	mov	r3, r0
 80395ec:	2b00      	cmp	r3, #0
 80395ee:	d129      	bne.n	8039644 <gos_shellCommandHandler+0x414>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 80395f0:	7dfb      	ldrb	r3, [r7, #23]
 80395f2:	3301      	adds	r3, #1
 80395f4:	75fb      	strb	r3, [r7, #23]
 80395f6:	7dfb      	ldrb	r3, [r7, #23]
 80395f8:	687a      	ldr	r2, [r7, #4]
 80395fa:	4413      	add	r3, r2
 80395fc:	f107 0214 	add.w	r2, r7, #20
 8039600:	4611      	mov	r1, r2
 8039602:	4618      	mov	r0, r3
 8039604:	f7fd fe00 	bl	8037208 <gos_taskGetId>
 8039608:	4603      	mov	r3, r0
 803960a:	2b55      	cmp	r3, #85	@ 0x55
 803960c:	d116      	bne.n	803963c <gos_shellCommandHandler+0x40c>
                if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 803960e:	8abb      	ldrh	r3, [r7, #20]
 8039610:	4618      	mov	r0, r3
 8039612:	f7fd f81f 	bl	8036654 <gos_taskUnblock>
 8039616:	4603      	mov	r3, r0
 8039618:	2b55      	cmp	r3, #85	@ 0x55
 803961a:	d107      	bne.n	803962c <gos_shellCommandHandler+0x3fc>
                    (void_t) gos_shellDriverTransmitString("%s has been unblocked.\r\n", &params[index]);
 803961c:	7dfb      	ldrb	r3, [r7, #23]
 803961e:	687a      	ldr	r2, [r7, #4]
 8039620:	4413      	add	r3, r2
 8039622:	4619      	mov	r1, r3
 8039624:	4831      	ldr	r0, [pc, #196]	@ (80396ec <gos_shellCommandHandler+0x4bc>)
 8039626:	f001 feb3 	bl	803b390 <gos_shellDriverTransmitString>
}
 803962a:	e04a      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be unblocked.\r\n", &params[index]);
 803962c:	7dfb      	ldrb	r3, [r7, #23]
 803962e:	687a      	ldr	r2, [r7, #4]
 8039630:	4413      	add	r3, r2
 8039632:	4619      	mov	r1, r3
 8039634:	482e      	ldr	r0, [pc, #184]	@ (80396f0 <gos_shellCommandHandler+0x4c0>)
 8039636:	f001 feab 	bl	803b390 <gos_shellDriverTransmitString>
}
 803963a:	e042      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 803963c:	4826      	ldr	r0, [pc, #152]	@ (80396d8 <gos_shellCommandHandler+0x4a8>)
 803963e:	f001 fea7 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039642:	e03e      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "cpu") == 0)
 8039644:	492b      	ldr	r1, [pc, #172]	@ (80396f4 <gos_shellCommandHandler+0x4c4>)
 8039646:	6878      	ldr	r0, [r7, #4]
 8039648:	f7e6 fde2 	bl	8020210 <strcmp>
 803964c:	4603      	mov	r3, r0
 803964e:	2b00      	cmp	r3, #0
 8039650:	d11b      	bne.n	803968a <gos_shellCommandHandler+0x45a>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 8039652:	f7fb fa1b 	bl	8034a8c <gos_kernelGetCpuUsage>
 8039656:	4603      	mov	r3, r0
 8039658:	461a      	mov	r2, r3
 803965a:	4b27      	ldr	r3, [pc, #156]	@ (80396f8 <gos_shellCommandHandler+0x4c8>)
 803965c:	fba3 2302 	umull	r2, r3, r3, r2
 8039660:	095b      	lsrs	r3, r3, #5
 8039662:	b29b      	uxth	r3, r3
 8039664:	461c      	mov	r4, r3
 8039666:	f7fb fa11 	bl	8034a8c <gos_kernelGetCpuUsage>
 803966a:	4603      	mov	r3, r0
 803966c:	4a22      	ldr	r2, [pc, #136]	@ (80396f8 <gos_shellCommandHandler+0x4c8>)
 803966e:	fba2 1203 	umull	r1, r2, r2, r3
 8039672:	0952      	lsrs	r2, r2, #5
 8039674:	2164      	movs	r1, #100	@ 0x64
 8039676:	fb01 f202 	mul.w	r2, r1, r2
 803967a:	1a9b      	subs	r3, r3, r2
 803967c:	b29b      	uxth	r3, r3
 803967e:	461a      	mov	r2, r3
 8039680:	4621      	mov	r1, r4
 8039682:	481e      	ldr	r0, [pc, #120]	@ (80396fc <gos_shellCommandHandler+0x4cc>)
 8039684:	f001 fe84 	bl	803b390 <gos_shellDriverTransmitString>
}
 8039688:	e01b      	b.n	80396c2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "runtime") == 0)
 803968a:	491d      	ldr	r1, [pc, #116]	@ (8039700 <gos_shellCommandHandler+0x4d0>)
 803968c:	6878      	ldr	r0, [r7, #4]
 803968e:	f7e6 fdbf 	bl	8020210 <strcmp>
 8039692:	4603      	mov	r3, r0
 8039694:	2b00      	cmp	r3, #0
 8039696:	d114      	bne.n	80396c2 <gos_shellCommandHandler+0x492>
            (void_t) gos_runTimeGet(&totalRunTime);
 8039698:	f107 0308 	add.w	r3, r7, #8
 803969c:	4618      	mov	r0, r3
 803969e:	f000 fe77 	bl	803a390 <gos_runTimeGet>
                    totalRunTime.days,
 80396a2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80396a6:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80396a8:	4619      	mov	r1, r3
                    totalRunTime.hours,
 80396aa:	7bbb      	ldrb	r3, [r7, #14]
            (void_t) gos_shellDriverTransmitString(
 80396ac:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 80396ae:	7b7b      	ldrb	r3, [r7, #13]
            (void_t) gos_shellDriverTransmitString(
 80396b0:	4618      	mov	r0, r3
                    totalRunTime.seconds
 80396b2:	7b3b      	ldrb	r3, [r7, #12]
            (void_t) gos_shellDriverTransmitString(
 80396b4:	9300      	str	r3, [sp, #0]
 80396b6:	4603      	mov	r3, r0
 80396b8:	4812      	ldr	r0, [pc, #72]	@ (8039704 <gos_shellCommandHandler+0x4d4>)
 80396ba:	f001 fe69 	bl	803b390 <gos_shellDriverTransmitString>
}
 80396be:	e000      	b.n	80396c2 <gos_shellCommandHandler+0x492>
                break;
 80396c0:	bf00      	nop
}
 80396c2:	bf00      	nop
 80396c4:	371c      	adds	r7, #28
 80396c6:	46bd      	mov	sp, r7
 80396c8:	bd90      	pop	{r4, r7, pc}
 80396ca:	bf00      	nop
 80396cc:	0803f8cc 	.word	0x0803f8cc
 80396d0:	0803f8d4 	.word	0x0803f8d4
 80396d4:	0803f8ec 	.word	0x0803f8ec
 80396d8:	0803f7cc 	.word	0x0803f7cc
 80396dc:	0803f908 	.word	0x0803f908
 80396e0:	0803f914 	.word	0x0803f914
 80396e4:	0803f934 	.word	0x0803f934
 80396e8:	0803f958 	.word	0x0803f958
 80396ec:	0803f960 	.word	0x0803f960
 80396f0:	0803f97c 	.word	0x0803f97c
 80396f4:	0803f99c 	.word	0x0803f99c
 80396f8:	51eb851f 	.word	0x51eb851f
 80396fc:	0803f9a0 	.word	0x0803f9a0
 8039700:	0803f9b8 	.word	0x0803f9b8
 8039704:	0803f9c0 	.word	0x0803f9c0

08039708 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 8039708:	b580      	push	{r7, lr}
 803970a:	b082      	sub	sp, #8
 803970c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_ERROR;
 803970e:	23ae      	movs	r3, #174	@ 0xae
 8039710:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 8039712:	2300      	movs	r3, #0
 8039714:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8039716:	2300      	movs	r3, #0
 8039718:	71bb      	strb	r3, [r7, #6]
 803971a:	e00a      	b.n	8039732 <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 803971c:	79bb      	ldrb	r3, [r7, #6]
 803971e:	4a16      	ldr	r2, [pc, #88]	@ (8039778 <gos_signalInit+0x70>)
 8039720:	212c      	movs	r1, #44	@ 0x2c
 8039722:	fb01 f303 	mul.w	r3, r1, r3
 8039726:	4413      	add	r3, r2
 8039728:	2249      	movs	r2, #73	@ 0x49
 803972a:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803972c:	79bb      	ldrb	r3, [r7, #6]
 803972e:	3301      	adds	r3, #1
 8039730:	71bb      	strb	r3, [r7, #6]
 8039732:	79bb      	ldrb	r3, [r7, #6]
 8039734:	2b05      	cmp	r3, #5
 8039736:	d9f1      	bls.n	803971c <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 8039738:	2100      	movs	r1, #0
 803973a:	4810      	ldr	r0, [pc, #64]	@ (803977c <gos_signalInit+0x74>)
 803973c:	f7fc f9be 	bl	8035abc <gos_taskRegister>
 8039740:	4603      	mov	r3, r0
 8039742:	2b55      	cmp	r3, #85	@ 0x55
 8039744:	d113      	bne.n	803976e <gos_signalInit+0x66>
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 8039746:	480e      	ldr	r0, [pc, #56]	@ (8039780 <gos_signalInit+0x78>)
 8039748:	f000 f820 	bl	803978c <gos_signalCreate>
 803974c:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 803974e:	2b55      	cmp	r3, #85	@ 0x55
 8039750:	d10d      	bne.n	803976e <gos_signalInit+0x66>
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 8039752:	480c      	ldr	r0, [pc, #48]	@ (8039784 <gos_signalInit+0x7c>)
 8039754:	f000 f81a 	bl	803978c <gos_signalCreate>
 8039758:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 803975a:	2b55      	cmp	r3, #85	@ 0x55
 803975c:	d107      	bne.n	803976e <gos_signalInit+0x66>
        gos_triggerInit(&signalInvokeTrigger)               == GOS_SUCCESS
 803975e:	480a      	ldr	r0, [pc, #40]	@ (8039788 <gos_signalInit+0x80>)
 8039760:	f001 fc12 	bl	803af88 <gos_triggerInit>
 8039764:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 8039766:	2b55      	cmp	r3, #85	@ 0x55
 8039768:	d101      	bne.n	803976e <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_SUCCESS;
 803976a:	2355      	movs	r3, #85	@ 0x55
 803976c:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 803976e:	79fb      	ldrb	r3, [r7, #7]
}
 8039770:	4618      	mov	r0, r3
 8039772:	3708      	adds	r7, #8
 8039774:	46bd      	mov	sp, r7
 8039776:	bd80      	pop	{r7, pc}
 8039778:	2001390c 	.word	0x2001390c
 803977c:	20002f80 	.word	0x20002f80
 8039780:	2000b340 	.word	0x2000b340
 8039784:	2000b310 	.word	0x2000b310
 8039788:	20013a14 	.word	0x20013a14

0803978c <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 803978c:	b480      	push	{r7}
 803978e:	b085      	sub	sp, #20
 8039790:	af00      	add	r7, sp, #0
 8039792:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 8039794:	23ae      	movs	r3, #174	@ 0xae
 8039796:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 8039798:	2300      	movs	r3, #0
 803979a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803979c:	2300      	movs	r3, #0
 803979e:	73bb      	strb	r3, [r7, #14]
 80397a0:	e025      	b.n	80397ee <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 80397a2:	7bbb      	ldrb	r3, [r7, #14]
 80397a4:	4a17      	ldr	r2, [pc, #92]	@ (8039804 <gos_signalCreate+0x78>)
 80397a6:	212c      	movs	r1, #44	@ 0x2c
 80397a8:	fb01 f303 	mul.w	r3, r1, r3
 80397ac:	4413      	add	r3, r2
 80397ae:	781b      	ldrb	r3, [r3, #0]
 80397b0:	2b49      	cmp	r3, #73	@ 0x49
 80397b2:	d119      	bne.n	80397e8 <gos_signalCreate+0x5c>
 80397b4:	687b      	ldr	r3, [r7, #4]
 80397b6:	2b00      	cmp	r3, #0
 80397b8:	d016      	beq.n	80397e8 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 80397ba:	687b      	ldr	r3, [r7, #4]
 80397bc:	7bba      	ldrb	r2, [r7, #14]
 80397be:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 80397c0:	7bbb      	ldrb	r3, [r7, #14]
 80397c2:	4a10      	ldr	r2, [pc, #64]	@ (8039804 <gos_signalCreate+0x78>)
 80397c4:	212c      	movs	r1, #44	@ 0x2c
 80397c6:	fb01 f303 	mul.w	r3, r1, r3
 80397ca:	4413      	add	r3, r2
 80397cc:	2236      	movs	r2, #54	@ 0x36
 80397ce:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 80397d0:	7bbb      	ldrb	r3, [r7, #14]
 80397d2:	4a0c      	ldr	r2, [pc, #48]	@ (8039804 <gos_signalCreate+0x78>)
 80397d4:	212c      	movs	r1, #44	@ 0x2c
 80397d6:	fb01 f303 	mul.w	r3, r1, r3
 80397da:	4413      	add	r3, r2
 80397dc:	3328      	adds	r3, #40	@ 0x28
 80397de:	2249      	movs	r2, #73	@ 0x49
 80397e0:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 80397e2:	2355      	movs	r3, #85	@ 0x55
 80397e4:	73fb      	strb	r3, [r7, #15]
            break;
 80397e6:	e005      	b.n	80397f4 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80397e8:	7bbb      	ldrb	r3, [r7, #14]
 80397ea:	3301      	adds	r3, #1
 80397ec:	73bb      	strb	r3, [r7, #14]
 80397ee:	7bbb      	ldrb	r3, [r7, #14]
 80397f0:	2b05      	cmp	r3, #5
 80397f2:	d9d6      	bls.n	80397a2 <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 80397f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80397f6:	4618      	mov	r0, r3
 80397f8:	3714      	adds	r7, #20
 80397fa:	46bd      	mov	sp, r7
 80397fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039800:	4770      	bx	lr
 8039802:	bf00      	nop
 8039804:	2001390c 	.word	0x2001390c

08039808 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 8039808:	b580      	push	{r7, lr}
 803980a:	b086      	sub	sp, #24
 803980c:	af02      	add	r7, sp, #8
 803980e:	4603      	mov	r3, r0
 8039810:	460a      	mov	r2, r1
 8039812:	71fb      	strb	r3, [r7, #7]
 8039814:	4613      	mov	r3, r2
 8039816:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 8039818:	23ae      	movs	r3, #174	@ 0xae
 803981a:	73fb      	strb	r3, [r7, #15]
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 803981c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8039820:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 8039822:	79fb      	ldrb	r3, [r7, #7]
 8039824:	2b05      	cmp	r3, #5
 8039826:	d844      	bhi.n	80398b2 <gos_signalInvoke+0xaa>
 8039828:	79fb      	ldrb	r3, [r7, #7]
 803982a:	4a24      	ldr	r2, [pc, #144]	@ (80398bc <gos_signalInvoke+0xb4>)
 803982c:	212c      	movs	r1, #44	@ 0x2c
 803982e:	fb01 f303 	mul.w	r3, r1, r3
 8039832:	4413      	add	r3, r2
 8039834:	781b      	ldrb	r3, [r3, #0]
 8039836:	2b36      	cmp	r3, #54	@ 0x36
 8039838:	d13b      	bne.n	80398b2 <gos_signalInvoke+0xaa>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 803983a:	f7fb fe1f 	bl	803547c <gos_kernelIsCallerIsr>
 803983e:	4603      	mov	r3, r0
 8039840:	2b36      	cmp	r3, #54	@ 0x36
 8039842:	d015      	beq.n	8039870 <gos_signalInvoke+0x68>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 8039844:	f107 030c 	add.w	r3, r7, #12
 8039848:	4618      	mov	r0, r3
 803984a:	f7fd fd15 	bl	8037278 <gos_taskGetCurrentId>
 803984e:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8039850:	2b55      	cmp	r3, #85	@ 0x55
 8039852:	d125      	bne.n	80398a0 <gos_signalInvoke+0x98>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 8039854:	89bb      	ldrh	r3, [r7, #12]
 8039856:	491a      	ldr	r1, [pc, #104]	@ (80398c0 <gos_signalInvoke+0xb8>)
 8039858:	4618      	mov	r0, r3
 803985a:	f7fd fd69 	bl	8037330 <gos_taskGetData>
 803985e:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 8039860:	2b55      	cmp	r3, #85	@ 0x55
 8039862:	d11d      	bne.n	80398a0 <gos_signalInvoke+0x98>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 8039864:	4b16      	ldr	r3, [pc, #88]	@ (80398c0 <gos_signalInvoke+0xb8>)
 8039866:	891b      	ldrh	r3, [r3, #8]
 8039868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 803986c:	2b00      	cmp	r3, #0
 803986e:	d017      	beq.n	80398a0 <gos_signalInvoke+0x98>
            )
        {
            signalArray[signalId].senderId       = senderId;
 8039870:	79fb      	ldrb	r3, [r7, #7]
 8039872:	4a12      	ldr	r2, [pc, #72]	@ (80398bc <gos_signalInvoke+0xb4>)
 8039874:	212c      	movs	r1, #44	@ 0x2c
 8039876:	fb01 f303 	mul.w	r3, r1, r3
 803987a:	4413      	add	r3, r2
 803987c:	332a      	adds	r3, #42	@ 0x2a
 803987e:	88ba      	ldrh	r2, [r7, #4]
 8039880:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 8039882:	79fb      	ldrb	r3, [r7, #7]
 8039884:	4a0d      	ldr	r2, [pc, #52]	@ (80398bc <gos_signalInvoke+0xb4>)
 8039886:	212c      	movs	r1, #44	@ 0x2c
 8039888:	fb01 f303 	mul.w	r3, r1, r3
 803988c:	4413      	add	r3, r2
 803988e:	3328      	adds	r3, #40	@ 0x28
 8039890:	2236      	movs	r2, #54	@ 0x36
 8039892:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 8039894:	2355      	movs	r3, #85	@ 0x55
 8039896:	73fb      	strb	r3, [r7, #15]

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 8039898:	480a      	ldr	r0, [pc, #40]	@ (80398c4 <gos_signalInvoke+0xbc>)
 803989a:	f001 fc99 	bl	803b1d0 <gos_triggerIncrement>
 803989e:	e008      	b.n	80398b2 <gos_signalInvoke+0xaa>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 80398a0:	4b09      	ldr	r3, [pc, #36]	@ (80398c8 <gos_signalInvoke+0xc0>)
 80398a2:	9300      	str	r3, [sp, #0]
 80398a4:	4b09      	ldr	r3, [pc, #36]	@ (80398cc <gos_signalInvoke+0xc4>)
 80398a6:	f240 1221 	movw	r2, #289	@ 0x121
 80398aa:	4909      	ldr	r1, [pc, #36]	@ (80398d0 <gos_signalInvoke+0xc8>)
 80398ac:	202e      	movs	r0, #46	@ 0x2e
 80398ae:	f7fd fffb 	bl	80378a8 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 80398b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80398b4:	4618      	mov	r0, r3
 80398b6:	3710      	adds	r7, #16
 80398b8:	46bd      	mov	sp, r7
 80398ba:	bd80      	pop	{r7, pc}
 80398bc:	2001390c 	.word	0x2001390c
 80398c0:	20013a20 	.word	0x20013a20
 80398c4:	20013a14 	.word	0x20013a14
 80398c8:	20013a2a 	.word	0x20013a2a
 80398cc:	0803f9fc 	.word	0x0803f9fc
 80398d0:	08040858 	.word	0x08040858

080398d4 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 80398d4:	b590      	push	{r4, r7, lr}
 80398d6:	b083      	sub	sp, #12
 80398d8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 80398da:	2300      	movs	r3, #0
 80398dc:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 80398de:	2300      	movs	r3, #0
 80398e0:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 80398e2:	f04f 32ff 	mov.w	r2, #4294967295
 80398e6:	2101      	movs	r1, #1
 80398e8:	4837      	ldr	r0, [pc, #220]	@ (80399c8 <gos_signalDaemonTask+0xf4>)
 80398ea:	f001 fbc1 	bl	803b070 <gos_triggerWait>
 80398ee:	4603      	mov	r3, r0
 80398f0:	2b55      	cmp	r3, #85	@ 0x55
 80398f2:	d164      	bne.n	80399be <gos_signalDaemonTask+0xea>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 80398f4:	4834      	ldr	r0, [pc, #208]	@ (80399c8 <gos_signalDaemonTask+0xf4>)
 80398f6:	f001 fb63 	bl	803afc0 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80398fa:	2300      	movs	r3, #0
 80398fc:	71bb      	strb	r3, [r7, #6]
 80398fe:	e05b      	b.n	80399b8 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 8039900:	79bb      	ldrb	r3, [r7, #6]
 8039902:	4a32      	ldr	r2, [pc, #200]	@ (80399cc <gos_signalDaemonTask+0xf8>)
 8039904:	212c      	movs	r1, #44	@ 0x2c
 8039906:	fb01 f303 	mul.w	r3, r1, r3
 803990a:	4413      	add	r3, r2
 803990c:	3328      	adds	r3, #40	@ 0x28
 803990e:	781b      	ldrb	r3, [r3, #0]
 8039910:	2b36      	cmp	r3, #54	@ 0x36
 8039912:	d14e      	bne.n	80399b2 <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8039914:	2300      	movs	r3, #0
 8039916:	71fb      	strb	r3, [r7, #7]
 8039918:	e03d      	b.n	8039996 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 803991a:	79ba      	ldrb	r2, [r7, #6]
 803991c:	79f9      	ldrb	r1, [r7, #7]
 803991e:	482b      	ldr	r0, [pc, #172]	@ (80399cc <gos_signalDaemonTask+0xf8>)
 8039920:	4613      	mov	r3, r2
 8039922:	009b      	lsls	r3, r3, #2
 8039924:	4413      	add	r3, r2
 8039926:	005b      	lsls	r3, r3, #1
 8039928:	4413      	add	r3, r2
 803992a:	440b      	add	r3, r1
 803992c:	009b      	lsls	r3, r3, #2
 803992e:	4403      	add	r3, r0
 8039930:	685b      	ldr	r3, [r3, #4]
 8039932:	2b00      	cmp	r3, #0
 8039934:	d033      	beq.n	803999e <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 8039936:	4b26      	ldr	r3, [pc, #152]	@ (80399d0 <gos_signalDaemonTask+0xfc>)
 8039938:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 803993a:	79ba      	ldrb	r2, [r7, #6]
 803993c:	79fb      	ldrb	r3, [r7, #7]
 803993e:	4923      	ldr	r1, [pc, #140]	@ (80399cc <gos_signalDaemonTask+0xf8>)
 8039940:	2416      	movs	r4, #22
 8039942:	fb04 f202 	mul.w	r2, r4, r2
 8039946:	4413      	add	r3, r2
 8039948:	330c      	adds	r3, #12
 803994a:	005b      	lsls	r3, r3, #1
 803994c:	440b      	add	r3, r1
 803994e:	889b      	ldrh	r3, [r3, #4]
 8039950:	4619      	mov	r1, r3
 8039952:	f7fd fb7b 	bl	803704c <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 8039956:	79ba      	ldrb	r2, [r7, #6]
 8039958:	79f9      	ldrb	r1, [r7, #7]
 803995a:	481c      	ldr	r0, [pc, #112]	@ (80399cc <gos_signalDaemonTask+0xf8>)
 803995c:	4613      	mov	r3, r2
 803995e:	009b      	lsls	r3, r3, #2
 8039960:	4413      	add	r3, r2
 8039962:	005b      	lsls	r3, r3, #1
 8039964:	4413      	add	r3, r2
 8039966:	440b      	add	r3, r1
 8039968:	009b      	lsls	r3, r3, #2
 803996a:	4403      	add	r3, r0
 803996c:	685b      	ldr	r3, [r3, #4]
 803996e:	79ba      	ldrb	r2, [r7, #6]
 8039970:	4916      	ldr	r1, [pc, #88]	@ (80399cc <gos_signalDaemonTask+0xf8>)
 8039972:	202c      	movs	r0, #44	@ 0x2c
 8039974:	fb00 f202 	mul.w	r2, r0, r2
 8039978:	440a      	add	r2, r1
 803997a:	322a      	adds	r2, #42	@ 0x2a
 803997c:	8812      	ldrh	r2, [r2, #0]
 803997e:	4610      	mov	r0, r2
 8039980:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 8039982:	4b13      	ldr	r3, [pc, #76]	@ (80399d0 <gos_signalDaemonTask+0xfc>)
 8039984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8039986:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 803998a:	4618      	mov	r0, r3
 803998c:	f7fd fb5e 	bl	803704c <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8039990:	79fb      	ldrb	r3, [r7, #7]
 8039992:	3301      	adds	r3, #1
 8039994:	71fb      	strb	r3, [r7, #7]
 8039996:	79fb      	ldrb	r3, [r7, #7]
 8039998:	2b05      	cmp	r3, #5
 803999a:	d9be      	bls.n	803991a <gos_signalDaemonTask+0x46>
 803999c:	e000      	b.n	80399a0 <gos_signalDaemonTask+0xcc>
                            break;
 803999e:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 80399a0:	79bb      	ldrb	r3, [r7, #6]
 80399a2:	4a0a      	ldr	r2, [pc, #40]	@ (80399cc <gos_signalDaemonTask+0xf8>)
 80399a4:	212c      	movs	r1, #44	@ 0x2c
 80399a6:	fb01 f303 	mul.w	r3, r1, r3
 80399aa:	4413      	add	r3, r2
 80399ac:	3328      	adds	r3, #40	@ 0x28
 80399ae:	2249      	movs	r2, #73	@ 0x49
 80399b0:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80399b2:	79bb      	ldrb	r3, [r7, #6]
 80399b4:	3301      	adds	r3, #1
 80399b6:	71bb      	strb	r3, [r7, #6]
 80399b8:	79bb      	ldrb	r3, [r7, #6]
 80399ba:	2b05      	cmp	r3, #5
 80399bc:	d9a0      	bls.n	8039900 <gos_signalDaemonTask+0x2c>
        else
        {
            // Unexpected error.
        }

        (void_t) gos_taskSleep(GOS_SIGNAL_DAEMON_POLL_TIME_MS);
 80399be:	2032      	movs	r0, #50	@ 0x32
 80399c0:	f7fc fa0e 	bl	8035de0 <gos_taskSleep>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 80399c4:	e78d      	b.n	80398e2 <gos_signalDaemonTask+0xe>
 80399c6:	bf00      	nop
 80399c8:	20013a14 	.word	0x20013a14
 80399cc:	2001390c 	.word	0x2001390c
 80399d0:	20002f80 	.word	0x20002f80

080399d4 <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 80399d4:	b580      	push	{r7, lr}
 80399d6:	b082      	sub	sp, #8
 80399d8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 80399da:	23ae      	movs	r3, #174	@ 0xae
 80399dc:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 80399de:	2300      	movs	r3, #0
 80399e0:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80399e2:	2300      	movs	r3, #0
 80399e4:	71bb      	strb	r3, [r7, #6]
 80399e6:	e024      	b.n	8039a32 <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 80399e8:	79bb      	ldrb	r3, [r7, #6]
 80399ea:	4a1e      	ldr	r2, [pc, #120]	@ (8039a64 <gos_sysmonInit+0x90>)
 80399ec:	011b      	lsls	r3, r3, #4
 80399ee:	4413      	add	r3, r2
 80399f0:	330c      	adds	r3, #12
 80399f2:	2200      	movs	r2, #0
 80399f4:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 80399f6:	79bb      	ldrb	r3, [r7, #6]
 80399f8:	4a1a      	ldr	r2, [pc, #104]	@ (8039a64 <gos_sysmonInit+0x90>)
 80399fa:	011b      	lsls	r3, r3, #4
 80399fc:	4413      	add	r3, r2
 80399fe:	3304      	adds	r3, #4
 8039a00:	2200      	movs	r2, #0
 8039a02:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 8039a04:	79bb      	ldrb	r3, [r7, #6]
 8039a06:	4a17      	ldr	r2, [pc, #92]	@ (8039a64 <gos_sysmonInit+0x90>)
 8039a08:	011b      	lsls	r3, r3, #4
 8039a0a:	4413      	add	r3, r2
 8039a0c:	3308      	adds	r3, #8
 8039a0e:	2200      	movs	r2, #0
 8039a10:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 8039a12:	79bb      	ldrb	r3, [r7, #6]
 8039a14:	4a13      	ldr	r2, [pc, #76]	@ (8039a64 <gos_sysmonInit+0x90>)
 8039a16:	011b      	lsls	r3, r3, #4
 8039a18:	4413      	add	r3, r2
 8039a1a:	3302      	adds	r3, #2
 8039a1c:	2200      	movs	r2, #0
 8039a1e:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 8039a20:	79bb      	ldrb	r3, [r7, #6]
 8039a22:	4a10      	ldr	r2, [pc, #64]	@ (8039a64 <gos_sysmonInit+0x90>)
 8039a24:	011b      	lsls	r3, r3, #4
 8039a26:	4413      	add	r3, r2
 8039a28:	2200      	movs	r2, #0
 8039a2a:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8039a2c:	79bb      	ldrb	r3, [r7, #6]
 8039a2e:	3301      	adds	r3, #1
 8039a30:	71bb      	strb	r3, [r7, #6]
 8039a32:	79bb      	ldrb	r3, [r7, #6]
 8039a34:	2b17      	cmp	r3, #23
 8039a36:	d9d7      	bls.n	80399e8 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 8039a38:	4a0b      	ldr	r2, [pc, #44]	@ (8039a68 <gos_sysmonInit+0x94>)
 8039a3a:	490c      	ldr	r1, [pc, #48]	@ (8039a6c <gos_sysmonInit+0x98>)
 8039a3c:	2000      	movs	r0, #0
 8039a3e:	f7fe f839 	bl	8037ab4 <gos_gcpRegisterPhysicalDriver>
 8039a42:	4603      	mov	r3, r0
 8039a44:	2b55      	cmp	r3, #85	@ 0x55
 8039a46:	d108      	bne.n	8039a5a <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 8039a48:	2100      	movs	r1, #0
 8039a4a:	4809      	ldr	r0, [pc, #36]	@ (8039a70 <gos_sysmonInit+0x9c>)
 8039a4c:	f7fc f836 	bl	8035abc <gos_taskRegister>
 8039a50:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 8039a52:	2b55      	cmp	r3, #85	@ 0x55
 8039a54:	d101      	bne.n	8039a5a <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 8039a56:	2355      	movs	r3, #85	@ 0x55
 8039a58:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 8039a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8039a5c:	4618      	mov	r0, r3
 8039a5e:	3708      	adds	r7, #8
 8039a60:	46bd      	mov	sp, r7
 8039a62:	bd80      	pop	{r7, pc}
 8039a64:	20014b84 	.word	0x20014b84
 8039a68:	0803b3d9 	.word	0x0803b3d9
 8039a6c:	0803b411 	.word	0x0803b411
 8039a70:	20002fec 	.word	0x20002fec

08039a74 <gos_sysmonRegisterUserMessage>:

/*
 * Function: gos_sysmonRegisterUserMessage
 */
gos_result_t gos_sysmonRegisterUserMessage (gos_sysmonUserMessageDescriptor_t* pDesc)
{
 8039a74:	b580      	push	{r7, lr}
 8039a76:	b084      	sub	sp, #16
 8039a78:	af00      	add	r7, sp, #0
 8039a7a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 8039a7c:	23ae      	movs	r3, #174	@ 0xae
 8039a7e:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 8039a80:	2300      	movs	r3, #0
 8039a82:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 8039a84:	687b      	ldr	r3, [r7, #4]
 8039a86:	2b00      	cmp	r3, #0
 8039a88:	d027      	beq.n	8039ada <gos_sysmonRegisterUserMessage+0x66>
 8039a8a:	687b      	ldr	r3, [r7, #4]
 8039a8c:	68db      	ldr	r3, [r3, #12]
 8039a8e:	2b00      	cmp	r3, #0
 8039a90:	d023      	beq.n	8039ada <gos_sysmonRegisterUserMessage+0x66>
    {
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8039a92:	2300      	movs	r3, #0
 8039a94:	73bb      	strb	r3, [r7, #14]
 8039a96:	e01d      	b.n	8039ad4 <gos_sysmonRegisterUserMessage+0x60>
        {
            if (userMessages[userMessageIndex].messageId == 0u &&
 8039a98:	7bbb      	ldrb	r3, [r7, #14]
 8039a9a:	4a12      	ldr	r2, [pc, #72]	@ (8039ae4 <gos_sysmonRegisterUserMessage+0x70>)
 8039a9c:	011b      	lsls	r3, r3, #4
 8039a9e:	4413      	add	r3, r2
 8039aa0:	881b      	ldrh	r3, [r3, #0]
 8039aa2:	2b00      	cmp	r3, #0
 8039aa4:	d113      	bne.n	8039ace <gos_sysmonRegisterUserMessage+0x5a>
                userMessages[userMessageIndex].callback == NULL)
 8039aa6:	7bbb      	ldrb	r3, [r7, #14]
 8039aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8039ae4 <gos_sysmonRegisterUserMessage+0x70>)
 8039aaa:	011b      	lsls	r3, r3, #4
 8039aac:	4413      	add	r3, r2
 8039aae:	330c      	adds	r3, #12
 8039ab0:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == 0u &&
 8039ab2:	2b00      	cmp	r3, #0
 8039ab4:	d10b      	bne.n	8039ace <gos_sysmonRegisterUserMessage+0x5a>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 8039ab6:	7bbb      	ldrb	r3, [r7, #14]
 8039ab8:	011b      	lsls	r3, r3, #4
 8039aba:	4a0a      	ldr	r2, [pc, #40]	@ (8039ae4 <gos_sysmonRegisterUserMessage+0x70>)
 8039abc:	4413      	add	r3, r2
 8039abe:	2210      	movs	r2, #16
 8039ac0:	6879      	ldr	r1, [r7, #4]
 8039ac2:	4618      	mov	r0, r3
 8039ac4:	f002 fb85 	bl	803c1d2 <memcpy>
                registerResult = GOS_SUCCESS;
 8039ac8:	2355      	movs	r3, #85	@ 0x55
 8039aca:	73fb      	strb	r3, [r7, #15]
                break;
 8039acc:	e005      	b.n	8039ada <gos_sysmonRegisterUserMessage+0x66>
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8039ace:	7bbb      	ldrb	r3, [r7, #14]
 8039ad0:	3301      	adds	r3, #1
 8039ad2:	73bb      	strb	r3, [r7, #14]
 8039ad4:	7bbb      	ldrb	r3, [r7, #14]
 8039ad6:	2b17      	cmp	r3, #23
 8039ad8:	d9de      	bls.n	8039a98 <gos_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 8039ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8039adc:	4618      	mov	r0, r3
 8039ade:	3710      	adds	r7, #16
 8039ae0:	46bd      	mov	sp, r7
 8039ae2:	bd80      	pop	{r7, pc}
 8039ae4:	20014b84 	.word	0x20014b84

08039ae8 <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 8039ae8:	b580      	push	{r7, lr}
 8039aea:	b084      	sub	sp, #16
 8039aec:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 8039aee:	2300      	movs	r3, #0
 8039af0:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 8039af2:	2300      	movs	r3, #0
 8039af4:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 8039af6:	2300      	movs	r3, #0
 8039af8:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8039afa:	2300      	movs	r3, #0
 8039afc:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 8039afe:	1d39      	adds	r1, r7, #4
 8039b00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8039b04:	9300      	str	r3, [sp, #0]
 8039b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8039b0a:	4a33      	ldr	r2, [pc, #204]	@ (8039bd8 <gos_sysmonDaemonTask+0xf0>)
 8039b0c:	2000      	movs	r0, #0
 8039b0e:	f7fe f92b 	bl	8037d68 <gos_gcpReceiveMessage>
 8039b12:	4603      	mov	r3, r0
 8039b14:	2b55      	cmp	r3, #85	@ 0x55
 8039b16:	d15a      	bne.n	8039bce <gos_sysmonDaemonTask+0xe6>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 8039b18:	88bb      	ldrh	r3, [r7, #4]
 8039b1a:	4618      	mov	r0, r3
 8039b1c:	f000 f862 	bl	8039be4 <gos_sysmonGetLutIndex>
 8039b20:	4603      	mov	r3, r0
 8039b22:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8039b24:	79bb      	ldrb	r3, [r7, #6]
 8039b26:	2b00      	cmp	r3, #0
 8039b28:	d002      	beq.n	8039b30 <gos_sysmonDaemonTask+0x48>
 8039b2a:	79bb      	ldrb	r3, [r7, #6]
 8039b2c:	2b10      	cmp	r3, #16
 8039b2e:	d138      	bne.n	8039ba2 <gos_sysmonDaemonTask+0xba>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8039b30:	2300      	movs	r3, #0
 8039b32:	71fb      	strb	r3, [r7, #7]
 8039b34:	e031      	b.n	8039b9a <gos_sysmonDaemonTask+0xb2>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 8039b36:	79fb      	ldrb	r3, [r7, #7]
 8039b38:	4a28      	ldr	r2, [pc, #160]	@ (8039bdc <gos_sysmonDaemonTask+0xf4>)
 8039b3a:	011b      	lsls	r3, r3, #4
 8039b3c:	4413      	add	r3, r2
 8039b3e:	881a      	ldrh	r2, [r3, #0]
 8039b40:	88bb      	ldrh	r3, [r7, #4]
 8039b42:	429a      	cmp	r2, r3
 8039b44:	d126      	bne.n	8039b94 <gos_sysmonDaemonTask+0xac>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 8039b46:	79fb      	ldrb	r3, [r7, #7]
 8039b48:	4a24      	ldr	r2, [pc, #144]	@ (8039bdc <gos_sysmonDaemonTask+0xf4>)
 8039b4a:	011b      	lsls	r3, r3, #4
 8039b4c:	4413      	add	r3, r2
 8039b4e:	3304      	adds	r3, #4
 8039b50:	681b      	ldr	r3, [r3, #0]
 8039b52:	2b00      	cmp	r3, #0
 8039b54:	d00f      	beq.n	8039b76 <gos_sysmonDaemonTask+0x8e>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 8039b56:	79fb      	ldrb	r3, [r7, #7]
 8039b58:	4a20      	ldr	r2, [pc, #128]	@ (8039bdc <gos_sysmonDaemonTask+0xf4>)
 8039b5a:	011b      	lsls	r3, r3, #4
 8039b5c:	4413      	add	r3, r2
 8039b5e:	3304      	adds	r3, #4
 8039b60:	6818      	ldr	r0, [r3, #0]
 8039b62:	79fb      	ldrb	r3, [r7, #7]
 8039b64:	4a1d      	ldr	r2, [pc, #116]	@ (8039bdc <gos_sysmonDaemonTask+0xf4>)
 8039b66:	011b      	lsls	r3, r3, #4
 8039b68:	4413      	add	r3, r2
 8039b6a:	3308      	adds	r3, #8
 8039b6c:	681b      	ldr	r3, [r3, #0]
 8039b6e:	461a      	mov	r2, r3
 8039b70:	4919      	ldr	r1, [pc, #100]	@ (8039bd8 <gos_sysmonDaemonTask+0xf0>)
 8039b72:	f002 fb2e 	bl	803c1d2 <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 8039b76:	79fb      	ldrb	r3, [r7, #7]
 8039b78:	4a18      	ldr	r2, [pc, #96]	@ (8039bdc <gos_sysmonDaemonTask+0xf4>)
 8039b7a:	011b      	lsls	r3, r3, #4
 8039b7c:	4413      	add	r3, r2
 8039b7e:	330c      	adds	r3, #12
 8039b80:	681b      	ldr	r3, [r3, #0]
 8039b82:	2b00      	cmp	r3, #0
 8039b84:	d006      	beq.n	8039b94 <gos_sysmonDaemonTask+0xac>
                        {
                        	userMessages[userMessageIndex].callback();
 8039b86:	79fb      	ldrb	r3, [r7, #7]
 8039b88:	4a14      	ldr	r2, [pc, #80]	@ (8039bdc <gos_sysmonDaemonTask+0xf4>)
 8039b8a:	011b      	lsls	r3, r3, #4
 8039b8c:	4413      	add	r3, r2
 8039b8e:	330c      	adds	r3, #12
 8039b90:	681b      	ldr	r3, [r3, #0]
 8039b92:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8039b94:	79fb      	ldrb	r3, [r7, #7]
 8039b96:	3301      	adds	r3, #1
 8039b98:	71fb      	strb	r3, [r7, #7]
 8039b9a:	79fb      	ldrb	r3, [r7, #7]
 8039b9c:	2b17      	cmp	r3, #23
 8039b9e:	d9ca      	bls.n	8039b36 <gos_sysmonDaemonTask+0x4e>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8039ba0:	e018      	b.n	8039bd4 <gos_sysmonDaemonTask+0xec>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 8039ba2:	79bb      	ldrb	r3, [r7, #6]
 8039ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8039be0 <gos_sysmonDaemonTask+0xf8>)
 8039ba6:	011b      	lsls	r3, r3, #4
 8039ba8:	4413      	add	r3, r2
 8039baa:	330c      	adds	r3, #12
 8039bac:	681b      	ldr	r3, [r3, #0]
 8039bae:	2b00      	cmp	r3, #0
 8039bb0:	d009      	beq.n	8039bc6 <gos_sysmonDaemonTask+0xde>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 8039bb2:	79bb      	ldrb	r3, [r7, #6]
 8039bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8039be0 <gos_sysmonDaemonTask+0xf8>)
 8039bb6:	011b      	lsls	r3, r3, #4
 8039bb8:	4413      	add	r3, r2
 8039bba:	330c      	adds	r3, #12
 8039bbc:	681b      	ldr	r3, [r3, #0]
 8039bbe:	79ba      	ldrb	r2, [r7, #6]
 8039bc0:	4610      	mov	r0, r2
 8039bc2:	4798      	blx	r3
 8039bc4:	e799      	b.n	8039afa <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 8039bc6:	2000      	movs	r0, #0
 8039bc8:	f000 f830 	bl	8039c2c <gos_sysmonSendResponse>
 8039bcc:	e795      	b.n	8039afa <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 8039bce:	200a      	movs	r0, #10
 8039bd0:	f7fc f906 	bl	8035de0 <gos_taskSleep>
        messageId = 0u;
 8039bd4:	e791      	b.n	8039afa <gos_sysmonDaemonTask+0x12>
 8039bd6:	bf00      	nop
 8039bd8:	20013a8c 	.word	0x20013a8c
 8039bdc:	20014b84 	.word	0x20014b84
 8039be0:	0804086c 	.word	0x0804086c

08039be4 <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 8039be4:	b480      	push	{r7}
 8039be6:	b085      	sub	sp, #20
 8039be8:	af00      	add	r7, sp, #0
 8039bea:	4603      	mov	r3, r0
 8039bec:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 8039bee:	2300      	movs	r3, #0
 8039bf0:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8039bf2:	2300      	movs	r3, #0
 8039bf4:	73fb      	strb	r3, [r7, #15]
 8039bf6:	e00a      	b.n	8039c0e <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 8039bf8:	7bfb      	ldrb	r3, [r7, #15]
 8039bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8039c28 <gos_sysmonGetLutIndex+0x44>)
 8039bfc:	011b      	lsls	r3, r3, #4
 8039bfe:	4413      	add	r3, r2
 8039c00:	881b      	ldrh	r3, [r3, #0]
 8039c02:	88fa      	ldrh	r2, [r7, #6]
 8039c04:	429a      	cmp	r2, r3
 8039c06:	d006      	beq.n	8039c16 <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8039c08:	7bfb      	ldrb	r3, [r7, #15]
 8039c0a:	3301      	adds	r3, #1
 8039c0c:	73fb      	strb	r3, [r7, #15]
 8039c0e:	7bfb      	ldrb	r3, [r7, #15]
 8039c10:	2b0f      	cmp	r3, #15
 8039c12:	d9f1      	bls.n	8039bf8 <gos_sysmonGetLutIndex+0x14>
 8039c14:	e000      	b.n	8039c18 <gos_sysmonGetLutIndex+0x34>
        {
            break;
 8039c16:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 8039c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8039c1a:	4618      	mov	r0, r3
 8039c1c:	3714      	adds	r7, #20
 8039c1e:	46bd      	mov	sp, r7
 8039c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c24:	4770      	bx	lr
 8039c26:	bf00      	nop
 8039c28:	0804086c 	.word	0x0804086c

08039c2c <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 8039c2c:	b580      	push	{r7, lr}
 8039c2e:	b084      	sub	sp, #16
 8039c30:	af02      	add	r7, sp, #8
 8039c32:	4603      	mov	r3, r0
 8039c34:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 8039c36:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 8039c38:	4a0c      	ldr	r2, [pc, #48]	@ (8039c6c <gos_sysmonSendResponse+0x40>)
 8039c3a:	011b      	lsls	r3, r3, #4
 8039c3c:	4413      	add	r3, r2
 8039c3e:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8039c40:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8039c42:	4a0a      	ldr	r2, [pc, #40]	@ (8039c6c <gos_sysmonSendResponse+0x40>)
 8039c44:	011b      	lsls	r3, r3, #4
 8039c46:	4413      	add	r3, r2
 8039c48:	3304      	adds	r3, #4
 8039c4a:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8039c4c:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8039c4e:	4807      	ldr	r0, [pc, #28]	@ (8039c6c <gos_sysmonSendResponse+0x40>)
 8039c50:	011b      	lsls	r3, r3, #4
 8039c52:	4403      	add	r3, r0
 8039c54:	3308      	adds	r3, #8
 8039c56:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8039c58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8039c5c:	9000      	str	r0, [sp, #0]
 8039c5e:	2000      	movs	r0, #0
 8039c60:	f7fd ff50 	bl	8037b04 <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 8039c64:	bf00      	nop
 8039c66:	3708      	adds	r7, #8
 8039c68:	46bd      	mov	sp, r7
 8039c6a:	bd80      	pop	{r7, pc}
 8039c6c:	0804086c 	.word	0x0804086c

08039c70 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 8039c70:	b580      	push	{r7, lr}
 8039c72:	b082      	sub	sp, #8
 8039c74:	af00      	add	r7, sp, #0
 8039c76:	4603      	mov	r3, r0
 8039c78:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8039c7a:	79fb      	ldrb	r3, [r7, #7]
 8039c7c:	4618      	mov	r0, r3
 8039c7e:	f000 fb05 	bl	803a28c <gos_sysmonCheckMessage>
 8039c82:	4603      	mov	r3, r0
 8039c84:	461a      	mov	r2, r3
 8039c86:	4b06      	ldr	r3, [pc, #24]	@ (8039ca0 <gos_sysmonHandlePingRequest+0x30>)
 8039c88:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 8039c8a:	79fb      	ldrb	r3, [r7, #7]
 8039c8c:	3301      	adds	r3, #1
 8039c8e:	b2db      	uxtb	r3, r3
 8039c90:	4618      	mov	r0, r3
 8039c92:	f7ff ffcb 	bl	8039c2c <gos_sysmonSendResponse>
}
 8039c96:	bf00      	nop
 8039c98:	3708      	adds	r7, #8
 8039c9a:	46bd      	mov	sp, r7
 8039c9c:	bd80      	pop	{r7, pc}
 8039c9e:	bf00      	nop
 8039ca0:	20014a8c 	.word	0x20014a8c

08039ca4 <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 8039ca4:	b580      	push	{r7, lr}
 8039ca6:	b082      	sub	sp, #8
 8039ca8:	af00      	add	r7, sp, #0
 8039caa:	4603      	mov	r3, r0
 8039cac:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8039cae:	79fb      	ldrb	r3, [r7, #7]
 8039cb0:	4618      	mov	r0, r3
 8039cb2:	f000 faeb 	bl	803a28c <gos_sysmonCheckMessage>
 8039cb6:	4603      	mov	r3, r0
 8039cb8:	461a      	mov	r2, r3
 8039cba:	4b0b      	ldr	r3, [pc, #44]	@ (8039ce8 <gos_sysmonHandleCpuUsageGet+0x44>)
 8039cbc:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8039cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8039ce8 <gos_sysmonHandleCpuUsageGet+0x44>)
 8039cc0:	781b      	ldrb	r3, [r3, #0]
 8039cc2:	2b28      	cmp	r3, #40	@ 0x28
 8039cc4:	d106      	bne.n	8039cd4 <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 8039cc6:	f7fa fee1 	bl	8034a8c <gos_kernelGetCpuUsage>
 8039cca:	4603      	mov	r3, r0
 8039ccc:	461a      	mov	r2, r3
 8039cce:	4b06      	ldr	r3, [pc, #24]	@ (8039ce8 <gos_sysmonHandleCpuUsageGet+0x44>)
 8039cd0:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8039cd4:	79fb      	ldrb	r3, [r7, #7]
 8039cd6:	3301      	adds	r3, #1
 8039cd8:	b2db      	uxtb	r3, r3
 8039cda:	4618      	mov	r0, r3
 8039cdc:	f7ff ffa6 	bl	8039c2c <gos_sysmonSendResponse>
}
 8039ce0:	bf00      	nop
 8039ce2:	3708      	adds	r7, #8
 8039ce4:	46bd      	mov	sp, r7
 8039ce6:	bd80      	pop	{r7, pc}
 8039ce8:	20014a90 	.word	0x20014a90

08039cec <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8039cec:	b580      	push	{r7, lr}
 8039cee:	b084      	sub	sp, #16
 8039cf0:	af00      	add	r7, sp, #0
 8039cf2:	4603      	mov	r3, r0
 8039cf4:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8039cf6:	2300      	movs	r3, #0
 8039cf8:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8039cfa:	2349      	movs	r3, #73	@ 0x49
 8039cfc:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8039cfe:	79fb      	ldrb	r3, [r7, #7]
 8039d00:	4618      	mov	r0, r3
 8039d02:	f000 fac3 	bl	803a28c <gos_sysmonCheckMessage>
 8039d06:	4603      	mov	r3, r0
 8039d08:	461a      	mov	r2, r3
 8039d0a:	4b66      	ldr	r3, [pc, #408]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d0c:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8039d0e:	4b65      	ldr	r3, [pc, #404]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d10:	781b      	ldrb	r3, [r3, #0]
 8039d12:	2b28      	cmp	r3, #40	@ 0x28
 8039d14:	f040 80c2 	bne.w	8039e9c <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8039d18:	4b63      	ldr	r3, [pc, #396]	@ (8039ea8 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8039d1a:	881b      	ldrh	r3, [r3, #0]
 8039d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8039d20:	4293      	cmp	r3, r2
 8039d22:	d168      	bne.n	8039df6 <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8039d24:	2300      	movs	r3, #0
 8039d26:	81fb      	strh	r3, [r7, #14]
 8039d28:	e061      	b.n	8039dee <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 8039d2a:	7b7b      	ldrb	r3, [r7, #13]
 8039d2c:	2b36      	cmp	r3, #54	@ 0x36
 8039d2e:	f000 80b4 	beq.w	8039e9a <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8039d32:	89fb      	ldrh	r3, [r7, #14]
 8039d34:	495d      	ldr	r1, [pc, #372]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d36:	4618      	mov	r0, r3
 8039d38:	f7fd fb68 	bl	803740c <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8039d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8039d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8039d44:	d045      	beq.n	8039dd2 <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8039d46:	4b59      	ldr	r3, [pc, #356]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d48:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8039d4a:	4b56      	ldr	r3, [pc, #344]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d4c:	84da      	strh	r2, [r3, #38]	@ 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8039d4e:	4b57      	ldr	r3, [pc, #348]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8039d54:	4b53      	ldr	r3, [pc, #332]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d56:	859a      	strh	r2, [r3, #44]	@ 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8039d58:	4b54      	ldr	r3, [pc, #336]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8039d5e:	4b51      	ldr	r3, [pc, #324]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d60:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8039d64:	4b51      	ldr	r3, [pc, #324]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d66:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8039d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d6c:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8039d70:	4b4e      	ldr	r3, [pc, #312]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d72:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8039d76:	4b4b      	ldr	r3, [pc, #300]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d78:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8039d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8039d82:	4b48      	ldr	r3, [pc, #288]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d84:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8039d88:	4b48      	ldr	r3, [pc, #288]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d8a:	79da      	ldrb	r2, [r3, #7]
 8039d8c:	4b45      	ldr	r3, [pc, #276]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d8e:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8039d90:	4b46      	ldr	r3, [pc, #280]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d92:	799a      	ldrb	r2, [r3, #6]
 8039d94:	4b43      	ldr	r3, [pc, #268]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d96:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8039d98:	4b44      	ldr	r3, [pc, #272]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8039d9c:	4a41      	ldr	r2, [pc, #260]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039d9e:	6293      	str	r3, [r2, #40]	@ 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8039da0:	4b42      	ldr	r3, [pc, #264]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039da2:	891a      	ldrh	r2, [r3, #8]
 8039da4:	4b3f      	ldr	r3, [pc, #252]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039da6:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8039da8:	4b40      	ldr	r3, [pc, #256]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039daa:	791a      	ldrb	r2, [r3, #4]
 8039dac:	4b3d      	ldr	r3, [pc, #244]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039dae:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8039db0:	4a3c      	ldr	r2, [pc, #240]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039db2:	4b3e      	ldr	r3, [pc, #248]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039db4:	322e      	adds	r2, #46	@ 0x2e
 8039db6:	334c      	adds	r3, #76	@ 0x4c
 8039db8:	cb03      	ldmia	r3!, {r0, r1}
 8039dba:	6010      	str	r0, [r2, #0]
 8039dbc:	6051      	str	r1, [r2, #4]
 8039dbe:	781b      	ldrb	r3, [r3, #0]
 8039dc0:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8039dc2:	493b      	ldr	r1, [pc, #236]	@ (8039eb0 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8039dc4:	483b      	ldr	r0, [pc, #236]	@ (8039eb4 <gos_sysmonHandleTaskDataGet+0x1c8>)
 8039dc6:	f002 f9fc 	bl	803c1c2 <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8039dca:	4b36      	ldr	r3, [pc, #216]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039dcc:	2228      	movs	r2, #40	@ 0x28
 8039dce:	701a      	strb	r2, [r3, #0]
 8039dd0:	e004      	b.n	8039ddc <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8039dd2:	4b34      	ldr	r3, [pc, #208]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039dd4:	2263      	movs	r2, #99	@ 0x63
 8039dd6:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8039dd8:	2336      	movs	r3, #54	@ 0x36
 8039dda:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8039ddc:	79fb      	ldrb	r3, [r7, #7]
 8039dde:	3301      	adds	r3, #1
 8039de0:	b2db      	uxtb	r3, r3
 8039de2:	4618      	mov	r0, r3
 8039de4:	f7ff ff22 	bl	8039c2c <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8039de8:	89fb      	ldrh	r3, [r7, #14]
 8039dea:	3301      	adds	r3, #1
 8039dec:	81fb      	strh	r3, [r7, #14]
 8039dee:	89fb      	ldrh	r3, [r7, #14]
 8039df0:	2b2f      	cmp	r3, #47	@ 0x2f
 8039df2:	d99a      	bls.n	8039d2a <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8039df4:	e052      	b.n	8039e9c <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8039df6:	4b2c      	ldr	r3, [pc, #176]	@ (8039ea8 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8039df8:	881b      	ldrh	r3, [r3, #0]
 8039dfa:	492c      	ldr	r1, [pc, #176]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039dfc:	4618      	mov	r0, r3
 8039dfe:	f7fd fb05 	bl	803740c <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8039e02:	4b2a      	ldr	r3, [pc, #168]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e04:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8039e06:	4b27      	ldr	r3, [pc, #156]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e08:	84da      	strh	r2, [r3, #38]	@ 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8039e0a:	4b28      	ldr	r3, [pc, #160]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8039e10:	4b24      	ldr	r3, [pc, #144]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e12:	859a      	strh	r2, [r3, #44]	@ 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8039e14:	4b25      	ldr	r3, [pc, #148]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8039e1a:	4b22      	ldr	r3, [pc, #136]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e1c:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8039e20:	4b22      	ldr	r3, [pc, #136]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e22:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8039e26:	4b1f      	ldr	r3, [pc, #124]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e28:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8039e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8039e32:	4b1c      	ldr	r3, [pc, #112]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e34:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8039e38:	4b1c      	ldr	r3, [pc, #112]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8039e3e:	4b19      	ldr	r3, [pc, #100]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e40:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8039e44:	4b19      	ldr	r3, [pc, #100]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e46:	79da      	ldrb	r2, [r3, #7]
 8039e48:	4b16      	ldr	r3, [pc, #88]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e4a:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8039e4c:	4b17      	ldr	r3, [pc, #92]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e4e:	799a      	ldrb	r2, [r3, #6]
 8039e50:	4b14      	ldr	r3, [pc, #80]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e52:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8039e54:	4b15      	ldr	r3, [pc, #84]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8039e58:	4a12      	ldr	r2, [pc, #72]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e5a:	6293      	str	r3, [r2, #40]	@ 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8039e5c:	4b13      	ldr	r3, [pc, #76]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e5e:	891a      	ldrh	r2, [r3, #8]
 8039e60:	4b10      	ldr	r3, [pc, #64]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e62:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8039e64:	4b11      	ldr	r3, [pc, #68]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e66:	791a      	ldrb	r2, [r3, #4]
 8039e68:	4b0e      	ldr	r3, [pc, #56]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e6a:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8039e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8039eac <gos_sysmonHandleTaskDataGet+0x1c0>)
 8039e70:	322e      	adds	r2, #46	@ 0x2e
 8039e72:	334c      	adds	r3, #76	@ 0x4c
 8039e74:	cb03      	ldmia	r3!, {r0, r1}
 8039e76:	6010      	str	r0, [r2, #0]
 8039e78:	6051      	str	r1, [r2, #4]
 8039e7a:	781b      	ldrb	r3, [r3, #0]
 8039e7c:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8039e7e:	490c      	ldr	r1, [pc, #48]	@ (8039eb0 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8039e80:	480c      	ldr	r0, [pc, #48]	@ (8039eb4 <gos_sysmonHandleTaskDataGet+0x1c8>)
 8039e82:	f002 f99e 	bl	803c1c2 <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8039e86:	4b07      	ldr	r3, [pc, #28]	@ (8039ea4 <gos_sysmonHandleTaskDataGet+0x1b8>)
 8039e88:	2228      	movs	r2, #40	@ 0x28
 8039e8a:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8039e8c:	79fb      	ldrb	r3, [r7, #7]
 8039e8e:	3301      	adds	r3, #1
 8039e90:	b2db      	uxtb	r3, r3
 8039e92:	4618      	mov	r0, r3
 8039e94:	f7ff feca 	bl	8039c2c <gos_sysmonSendResponse>
}
 8039e98:	e000      	b.n	8039e9c <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 8039e9a:	bf00      	nop
}
 8039e9c:	bf00      	nop
 8039e9e:	3710      	adds	r7, #16
 8039ea0:	46bd      	mov	sp, r7
 8039ea2:	bd80      	pop	{r7, pc}
 8039ea4:	20014a98 	.word	0x20014a98
 8039ea8:	20014a94 	.word	0x20014a94
 8039eac:	20014af0 	.word	0x20014af0
 8039eb0:	20014afa 	.word	0x20014afa
 8039eb4:	20014a9e 	.word	0x20014a9e

08039eb8 <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8039eb8:	b580      	push	{r7, lr}
 8039eba:	b084      	sub	sp, #16
 8039ebc:	af00      	add	r7, sp, #0
 8039ebe:	4603      	mov	r3, r0
 8039ec0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8039ec2:	2300      	movs	r3, #0
 8039ec4:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8039ec6:	2349      	movs	r3, #73	@ 0x49
 8039ec8:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8039eca:	79fb      	ldrb	r3, [r7, #7]
 8039ecc:	4618      	mov	r0, r3
 8039ece:	f000 f9dd 	bl	803a28c <gos_sysmonCheckMessage>
 8039ed2:	4603      	mov	r3, r0
 8039ed4:	461a      	mov	r2, r3
 8039ed6:	4b49      	ldr	r3, [pc, #292]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039ed8:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8039eda:	4b48      	ldr	r3, [pc, #288]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039edc:	781b      	ldrb	r3, [r3, #0]
 8039ede:	2b28      	cmp	r3, #40	@ 0x28
 8039ee0:	f040 8087 	bne.w	8039ff2 <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8039ee4:	4b46      	ldr	r3, [pc, #280]	@ (803a000 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8039ee6:	881b      	ldrh	r3, [r3, #0]
 8039ee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8039eec:	4293      	cmp	r3, r2
 8039eee:	d14a      	bne.n	8039f86 <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8039ef0:	2300      	movs	r3, #0
 8039ef2:	81fb      	strh	r3, [r7, #14]
 8039ef4:	e043      	b.n	8039f7e <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 8039ef6:	7b7b      	ldrb	r3, [r7, #13]
 8039ef8:	2b36      	cmp	r3, #54	@ 0x36
 8039efa:	d079      	beq.n	8039ff0 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8039efc:	89fb      	ldrh	r3, [r7, #14]
 8039efe:	4941      	ldr	r1, [pc, #260]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f00:	4618      	mov	r0, r3
 8039f02:	f7fd fa83 	bl	803740c <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8039f06:	4b3f      	ldr	r3, [pc, #252]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8039f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8039f0e:	d028      	beq.n	8039f62 <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8039f10:	4b3c      	ldr	r3, [pc, #240]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8039f16:	4b39      	ldr	r3, [pc, #228]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f18:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8039f1a:	4b3a      	ldr	r3, [pc, #232]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f1c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8039f20:	4b36      	ldr	r3, [pc, #216]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f22:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8039f24:	4b37      	ldr	r3, [pc, #220]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8039f2a:	4b34      	ldr	r3, [pc, #208]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f2c:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8039f2e:	4b35      	ldr	r3, [pc, #212]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f30:	799a      	ldrb	r2, [r3, #6]
 8039f32:	4b32      	ldr	r3, [pc, #200]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f34:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8039f36:	4b33      	ldr	r3, [pc, #204]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8039f3a:	4a30      	ldr	r2, [pc, #192]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f3c:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8039f40:	4b30      	ldr	r3, [pc, #192]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f42:	791a      	ldrb	r2, [r3, #4]
 8039f44:	4b2d      	ldr	r3, [pc, #180]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f46:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8039f48:	4a2c      	ldr	r2, [pc, #176]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f4a:	4b2e      	ldr	r3, [pc, #184]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f4c:	3207      	adds	r2, #7
 8039f4e:	334c      	adds	r3, #76	@ 0x4c
 8039f50:	cb03      	ldmia	r3!, {r0, r1}
 8039f52:	6010      	str	r0, [r2, #0]
 8039f54:	6051      	str	r1, [r2, #4]
 8039f56:	781b      	ldrb	r3, [r3, #0]
 8039f58:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8039f5a:	4b28      	ldr	r3, [pc, #160]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f5c:	2228      	movs	r2, #40	@ 0x28
 8039f5e:	701a      	strb	r2, [r3, #0]
 8039f60:	e004      	b.n	8039f6c <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8039f62:	4b26      	ldr	r3, [pc, #152]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f64:	2263      	movs	r2, #99	@ 0x63
 8039f66:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8039f68:	2336      	movs	r3, #54	@ 0x36
 8039f6a:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8039f6c:	79fb      	ldrb	r3, [r7, #7]
 8039f6e:	3301      	adds	r3, #1
 8039f70:	b2db      	uxtb	r3, r3
 8039f72:	4618      	mov	r0, r3
 8039f74:	f7ff fe5a 	bl	8039c2c <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8039f78:	89fb      	ldrh	r3, [r7, #14]
 8039f7a:	3301      	adds	r3, #1
 8039f7c:	81fb      	strh	r3, [r7, #14]
 8039f7e:	89fb      	ldrh	r3, [r7, #14]
 8039f80:	2b2f      	cmp	r3, #47	@ 0x2f
 8039f82:	d9b8      	bls.n	8039ef6 <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8039f84:	e035      	b.n	8039ff2 <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8039f86:	4b1e      	ldr	r3, [pc, #120]	@ (803a000 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8039f88:	881b      	ldrh	r3, [r3, #0]
 8039f8a:	491e      	ldr	r1, [pc, #120]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f8c:	4618      	mov	r0, r3
 8039f8e:	f7fd fa3d 	bl	803740c <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8039f92:	4b1c      	ldr	r3, [pc, #112]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8039f98:	4b18      	ldr	r3, [pc, #96]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039f9a:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8039f9c:	4b19      	ldr	r3, [pc, #100]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039f9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8039fa2:	4b16      	ldr	r3, [pc, #88]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fa4:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8039fa6:	4b17      	ldr	r3, [pc, #92]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039fa8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8039fac:	4b13      	ldr	r3, [pc, #76]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fae:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8039fb0:	4b14      	ldr	r3, [pc, #80]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039fb2:	799a      	ldrb	r2, [r3, #6]
 8039fb4:	4b11      	ldr	r3, [pc, #68]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fb6:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8039fb8:	4b12      	ldr	r3, [pc, #72]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8039fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fbe:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8039fc2:	4b10      	ldr	r3, [pc, #64]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039fc4:	791a      	ldrb	r2, [r3, #4]
 8039fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fc8:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8039fca:	4a0c      	ldr	r2, [pc, #48]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fcc:	4b0d      	ldr	r3, [pc, #52]	@ (803a004 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8039fce:	3207      	adds	r2, #7
 8039fd0:	334c      	adds	r3, #76	@ 0x4c
 8039fd2:	cb03      	ldmia	r3!, {r0, r1}
 8039fd4:	6010      	str	r0, [r2, #0]
 8039fd6:	6051      	str	r1, [r2, #4]
 8039fd8:	781b      	ldrb	r3, [r3, #0]
 8039fda:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8039fdc:	4b07      	ldr	r3, [pc, #28]	@ (8039ffc <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8039fde:	2228      	movs	r2, #40	@ 0x28
 8039fe0:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8039fe2:	79fb      	ldrb	r3, [r7, #7]
 8039fe4:	3301      	adds	r3, #1
 8039fe6:	b2db      	uxtb	r3, r3
 8039fe8:	4618      	mov	r0, r3
 8039fea:	f7ff fe1f 	bl	8039c2c <gos_sysmonSendResponse>
}
 8039fee:	e000      	b.n	8039ff2 <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 8039ff0:	bf00      	nop
}
 8039ff2:	bf00      	nop
 8039ff4:	3710      	adds	r7, #16
 8039ff6:	46bd      	mov	sp, r7
 8039ff8:	bd80      	pop	{r7, pc}
 8039ffa:	bf00      	nop
 8039ffc:	20014ad8 	.word	0x20014ad8
 803a000:	20014a94 	.word	0x20014a94
 803a004:	20014af0 	.word	0x20014af0

0803a008 <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 803a008:	b580      	push	{r7, lr}
 803a00a:	b082      	sub	sp, #8
 803a00c:	af00      	add	r7, sp, #0
 803a00e:	4603      	mov	r3, r0
 803a010:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 803a012:	79fb      	ldrb	r3, [r7, #7]
 803a014:	4618      	mov	r0, r3
 803a016:	f000 f939 	bl	803a28c <gos_sysmonCheckMessage>
 803a01a:	4603      	mov	r3, r0
 803a01c:	461a      	mov	r2, r3
 803a01e:	4b63      	ldr	r3, [pc, #396]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a020:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 803a022:	4b62      	ldr	r3, [pc, #392]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a024:	781b      	ldrb	r3, [r3, #0]
 803a026:	2b28      	cmp	r3, #40	@ 0x28
 803a028:	f040 80b5 	bne.w	803a196 <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 803a02c:	4b60      	ldr	r3, [pc, #384]	@ (803a1b0 <gos_sysmonHandleTaskModification+0x1a8>)
 803a02e:	881b      	ldrh	r3, [r3, #0]
 803a030:	4960      	ldr	r1, [pc, #384]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a032:	4618      	mov	r0, r3
 803a034:	f7fd f9ea 	bl	803740c <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 803a038:	4b5d      	ldr	r3, [pc, #372]	@ (803a1b0 <gos_sysmonHandleTaskModification+0x1a8>)
 803a03a:	789b      	ldrb	r3, [r3, #2]
 803a03c:	2b4a      	cmp	r3, #74	@ 0x4a
 803a03e:	f300 80a7 	bgt.w	803a190 <gos_sysmonHandleTaskModification+0x188>
 803a042:	2b31      	cmp	r3, #49	@ 0x31
 803a044:	da04      	bge.n	803a050 <gos_sysmonHandleTaskModification+0x48>
 803a046:	2b0c      	cmp	r3, #12
 803a048:	d03e      	beq.n	803a0c8 <gos_sysmonHandleTaskModification+0xc0>
 803a04a:	2b22      	cmp	r3, #34	@ 0x22
 803a04c:	d04c      	beq.n	803a0e8 <gos_sysmonHandleTaskModification+0xe0>
 803a04e:	e09f      	b.n	803a190 <gos_sysmonHandleTaskModification+0x188>
 803a050:	3b31      	subs	r3, #49	@ 0x31
 803a052:	2b19      	cmp	r3, #25
 803a054:	f200 809c 	bhi.w	803a190 <gos_sysmonHandleTaskModification+0x188>
 803a058:	a201      	add	r2, pc, #4	@ (adr r2, 803a060 <gos_sysmonHandleTaskModification+0x58>)
 803a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a05e:	bf00      	nop
 803a060:	0803a109 	.word	0x0803a109
 803a064:	0803a191 	.word	0x0803a191
 803a068:	0803a191 	.word	0x0803a191
 803a06c:	0803a129 	.word	0x0803a129
 803a070:	0803a191 	.word	0x0803a191
 803a074:	0803a191 	.word	0x0803a191
 803a078:	0803a191 	.word	0x0803a191
 803a07c:	0803a191 	.word	0x0803a191
 803a080:	0803a191 	.word	0x0803a191
 803a084:	0803a191 	.word	0x0803a191
 803a088:	0803a191 	.word	0x0803a191
 803a08c:	0803a191 	.word	0x0803a191
 803a090:	0803a191 	.word	0x0803a191
 803a094:	0803a191 	.word	0x0803a191
 803a098:	0803a151 	.word	0x0803a151
 803a09c:	0803a191 	.word	0x0803a191
 803a0a0:	0803a191 	.word	0x0803a191
 803a0a4:	0803a191 	.word	0x0803a191
 803a0a8:	0803a191 	.word	0x0803a191
 803a0ac:	0803a191 	.word	0x0803a191
 803a0b0:	0803a191 	.word	0x0803a191
 803a0b4:	0803a191 	.word	0x0803a191
 803a0b8:	0803a191 	.word	0x0803a191
 803a0bc:	0803a191 	.word	0x0803a191
 803a0c0:	0803a191 	.word	0x0803a191
 803a0c4:	0803a171 	.word	0x0803a171
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 803a0c8:	4b3a      	ldr	r3, [pc, #232]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a0ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803a0cc:	4618      	mov	r0, r3
 803a0ce:	f7fb ffdf 	bl	8036090 <gos_taskSuspend>
 803a0d2:	4603      	mov	r3, r0
 803a0d4:	2b55      	cmp	r3, #85	@ 0x55
 803a0d6:	d103      	bne.n	803a0e0 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a0d8:	4b34      	ldr	r3, [pc, #208]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a0da:	2228      	movs	r2, #40	@ 0x28
 803a0dc:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 803a0de:	e05a      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a0e0:	4b32      	ldr	r3, [pc, #200]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a0e2:	2263      	movs	r2, #99	@ 0x63
 803a0e4:	701a      	strb	r2, [r3, #0]
                 break;
 803a0e6:	e056      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 803a0e8:	4b32      	ldr	r3, [pc, #200]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a0ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803a0ec:	4618      	mov	r0, r3
 803a0ee:	f7fc f8f1 	bl	80362d4 <gos_taskResume>
 803a0f2:	4603      	mov	r3, r0
 803a0f4:	2b55      	cmp	r3, #85	@ 0x55
 803a0f6:	d103      	bne.n	803a100 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a0f8:	4b2c      	ldr	r3, [pc, #176]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a0fa:	2228      	movs	r2, #40	@ 0x28
 803a0fc:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 803a0fe:	e04a      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a100:	4b2a      	ldr	r3, [pc, #168]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a102:	2263      	movs	r2, #99	@ 0x63
 803a104:	701a      	strb	r2, [r3, #0]
                 break;
 803a106:	e046      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 803a108:	4b2a      	ldr	r3, [pc, #168]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a10a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803a10c:	4618      	mov	r0, r3
 803a10e:	f7fc fb8b 	bl	8036828 <gos_taskDelete>
 803a112:	4603      	mov	r3, r0
 803a114:	2b55      	cmp	r3, #85	@ 0x55
 803a116:	d103      	bne.n	803a120 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a118:	4b24      	ldr	r3, [pc, #144]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a11a:	2228      	movs	r2, #40	@ 0x28
 803a11c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 803a11e:	e03a      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a120:	4b22      	ldr	r3, [pc, #136]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a122:	2263      	movs	r2, #99	@ 0x63
 803a124:	701a      	strb	r2, [r3, #0]
                 break;
 803a126:	e036      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 803a128:	4b22      	ldr	r3, [pc, #136]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a12a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803a12c:	4a20      	ldr	r2, [pc, #128]	@ (803a1b0 <gos_sysmonHandleTaskModification+0x1a8>)
 803a12e:	f8d2 2003 	ldr.w	r2, [r2, #3]
 803a132:	4611      	mov	r1, r2
 803a134:	4618      	mov	r0, r3
 803a136:	f7fc f97b 	bl	8036430 <gos_taskBlock>
 803a13a:	4603      	mov	r3, r0
 803a13c:	2b55      	cmp	r3, #85	@ 0x55
 803a13e:	d103      	bne.n	803a148 <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a140:	4b1a      	ldr	r3, [pc, #104]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a142:	2228      	movs	r2, #40	@ 0x28
 803a144:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 803a146:	e026      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a148:	4b18      	ldr	r3, [pc, #96]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a14a:	2263      	movs	r2, #99	@ 0x63
 803a14c:	701a      	strb	r2, [r3, #0]
                 break;
 803a14e:	e022      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 803a150:	4b18      	ldr	r3, [pc, #96]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803a154:	4618      	mov	r0, r3
 803a156:	f7fc fa7d 	bl	8036654 <gos_taskUnblock>
 803a15a:	4603      	mov	r3, r0
 803a15c:	2b55      	cmp	r3, #85	@ 0x55
 803a15e:	d103      	bne.n	803a168 <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a160:	4b12      	ldr	r3, [pc, #72]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a162:	2228      	movs	r2, #40	@ 0x28
 803a164:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 803a166:	e016      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a168:	4b10      	ldr	r3, [pc, #64]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a16a:	2263      	movs	r2, #99	@ 0x63
 803a16c:	701a      	strb	r2, [r3, #0]
                 break;
 803a16e:	e012      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 803a170:	4b10      	ldr	r3, [pc, #64]	@ (803a1b4 <gos_sysmonHandleTaskModification+0x1ac>)
 803a172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803a174:	4618      	mov	r0, r3
 803a176:	f7fb fec5 	bl	8035f04 <gos_taskWakeup>
 803a17a:	4603      	mov	r3, r0
 803a17c:	2b55      	cmp	r3, #85	@ 0x55
 803a17e:	d103      	bne.n	803a188 <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a180:	4b0a      	ldr	r3, [pc, #40]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a182:	2228      	movs	r2, #40	@ 0x28
 803a184:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 803a186:	e006      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a188:	4b08      	ldr	r3, [pc, #32]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a18a:	2263      	movs	r2, #99	@ 0x63
 803a18c:	701a      	strb	r2, [r3, #0]
                 break;
 803a18e:	e002      	b.n	803a196 <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a190:	4b06      	ldr	r3, [pc, #24]	@ (803a1ac <gos_sysmonHandleTaskModification+0x1a4>)
 803a192:	2263      	movs	r2, #99	@ 0x63
 803a194:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 803a196:	79fb      	ldrb	r3, [r7, #7]
 803a198:	3301      	adds	r3, #1
 803a19a:	b2db      	uxtb	r3, r3
 803a19c:	4618      	mov	r0, r3
 803a19e:	f7ff fd45 	bl	8039c2c <gos_sysmonSendResponse>
}
 803a1a2:	bf00      	nop
 803a1a4:	3708      	adds	r7, #8
 803a1a6:	46bd      	mov	sp, r7
 803a1a8:	bd80      	pop	{r7, pc}
 803a1aa:	bf00      	nop
 803a1ac:	20014b64 	.word	0x20014b64
 803a1b0:	20014b5c 	.word	0x20014b5c
 803a1b4:	20014af0 	.word	0x20014af0

0803a1b8 <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 803a1b8:	b580      	push	{r7, lr}
 803a1ba:	b082      	sub	sp, #8
 803a1bc:	af00      	add	r7, sp, #0
 803a1be:	4603      	mov	r3, r0
 803a1c0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 803a1c2:	79fb      	ldrb	r3, [r7, #7]
 803a1c4:	4618      	mov	r0, r3
 803a1c6:	f000 f861 	bl	803a28c <gos_sysmonCheckMessage>
 803a1ca:	4603      	mov	r3, r0
 803a1cc:	461a      	mov	r2, r3
 803a1ce:	4b0e      	ldr	r3, [pc, #56]	@ (803a208 <gos_sysmonHandleSysRuntimeGet+0x50>)
 803a1d0:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 803a1d2:	4b0d      	ldr	r3, [pc, #52]	@ (803a208 <gos_sysmonHandleSysRuntimeGet+0x50>)
 803a1d4:	781b      	ldrb	r3, [r3, #0]
 803a1d6:	2b28      	cmp	r3, #40	@ 0x28
 803a1d8:	d10c      	bne.n	803a1f4 <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 803a1da:	480c      	ldr	r0, [pc, #48]	@ (803a20c <gos_sysmonHandleSysRuntimeGet+0x54>)
 803a1dc:	f000 f8d8 	bl	803a390 <gos_runTimeGet>
 803a1e0:	4603      	mov	r3, r0
 803a1e2:	2b55      	cmp	r3, #85	@ 0x55
 803a1e4:	d103      	bne.n	803a1ee <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a1e6:	4b08      	ldr	r3, [pc, #32]	@ (803a208 <gos_sysmonHandleSysRuntimeGet+0x50>)
 803a1e8:	2228      	movs	r2, #40	@ 0x28
 803a1ea:	701a      	strb	r2, [r3, #0]
 803a1ec:	e002      	b.n	803a1f4 <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a1ee:	4b06      	ldr	r3, [pc, #24]	@ (803a208 <gos_sysmonHandleSysRuntimeGet+0x50>)
 803a1f0:	2263      	movs	r2, #99	@ 0x63
 803a1f2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 803a1f4:	79fb      	ldrb	r3, [r7, #7]
 803a1f6:	3301      	adds	r3, #1
 803a1f8:	b2db      	uxtb	r3, r3
 803a1fa:	4618      	mov	r0, r3
 803a1fc:	f7ff fd16 	bl	8039c2c <gos_sysmonSendResponse>
}
 803a200:	bf00      	nop
 803a202:	3708      	adds	r7, #8
 803a204:	46bd      	mov	sp, r7
 803a206:	bd80      	pop	{r7, pc}
 803a208:	20014b68 	.word	0x20014b68
 803a20c:	20014b69 	.word	0x20014b69

0803a210 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 803a210:	b580      	push	{r7, lr}
 803a212:	b082      	sub	sp, #8
 803a214:	af00      	add	r7, sp, #0
 803a216:	4603      	mov	r3, r0
 803a218:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 803a21a:	79fb      	ldrb	r3, [r7, #7]
 803a21c:	4618      	mov	r0, r3
 803a21e:	f000 f835 	bl	803a28c <gos_sysmonCheckMessage>
 803a222:	4603      	mov	r3, r0
 803a224:	461a      	mov	r2, r3
 803a226:	4b0e      	ldr	r3, [pc, #56]	@ (803a260 <gos_sysmonHandleSystimeSet+0x50>)
 803a228:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 803a22a:	4b0d      	ldr	r3, [pc, #52]	@ (803a260 <gos_sysmonHandleSystimeSet+0x50>)
 803a22c:	781b      	ldrb	r3, [r3, #0]
 803a22e:	2b28      	cmp	r3, #40	@ 0x28
 803a230:	d10c      	bne.n	803a24c <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 803a232:	480c      	ldr	r0, [pc, #48]	@ (803a264 <gos_sysmonHandleSystimeSet+0x54>)
 803a234:	f000 f890 	bl	803a358 <gos_timeSet>
 803a238:	4603      	mov	r3, r0
 803a23a:	2b55      	cmp	r3, #85	@ 0x55
 803a23c:	d103      	bne.n	803a246 <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 803a23e:	4b08      	ldr	r3, [pc, #32]	@ (803a260 <gos_sysmonHandleSystimeSet+0x50>)
 803a240:	2228      	movs	r2, #40	@ 0x28
 803a242:	701a      	strb	r2, [r3, #0]
 803a244:	e002      	b.n	803a24c <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803a246:	4b06      	ldr	r3, [pc, #24]	@ (803a260 <gos_sysmonHandleSystimeSet+0x50>)
 803a248:	2263      	movs	r2, #99	@ 0x63
 803a24a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 803a24c:	79fb      	ldrb	r3, [r7, #7]
 803a24e:	3301      	adds	r3, #1
 803a250:	b2db      	uxtb	r3, r3
 803a252:	4618      	mov	r0, r3
 803a254:	f7ff fcea 	bl	8039c2c <gos_sysmonSendResponse>
}
 803a258:	bf00      	nop
 803a25a:	3708      	adds	r7, #8
 803a25c:	46bd      	mov	sp, r7
 803a25e:	bd80      	pop	{r7, pc}
 803a260:	20014b80 	.word	0x20014b80
 803a264:	20014b74 	.word	0x20014b74

0803a268 <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 803a268:	b580      	push	{r7, lr}
 803a26a:	b082      	sub	sp, #8
 803a26c:	af00      	add	r7, sp, #0
 803a26e:	4603      	mov	r3, r0
 803a270:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 803a272:	79fb      	ldrb	r3, [r7, #7]
 803a274:	4618      	mov	r0, r3
 803a276:	f000 f809 	bl	803a28c <gos_sysmonCheckMessage>
 803a27a:	4603      	mov	r3, r0
 803a27c:	2b28      	cmp	r3, #40	@ 0x28
 803a27e:	d101      	bne.n	803a284 <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 803a280:	f7fa fc16 	bl	8034ab0 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 803a284:	bf00      	nop
 803a286:	3708      	adds	r7, #8
 803a288:	46bd      	mov	sp, r7
 803a28a:	bd80      	pop	{r7, pc}

0803a28c <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 803a28c:	b580      	push	{r7, lr}
 803a28e:	b084      	sub	sp, #16
 803a290:	af00      	add	r7, sp, #0
 803a292:	4603      	mov	r3, r0
 803a294:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 803a296:	2328      	movs	r3, #40	@ 0x28
 803a298:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 803a29a:	79fb      	ldrb	r3, [r7, #7]
 803a29c:	4a0d      	ldr	r2, [pc, #52]	@ (803a2d4 <gos_sysmonCheckMessage+0x48>)
 803a29e:	011b      	lsls	r3, r3, #4
 803a2a0:	4413      	add	r3, r2
 803a2a2:	3304      	adds	r3, #4
 803a2a4:	681b      	ldr	r3, [r3, #0]
 803a2a6:	2b00      	cmp	r3, #0
 803a2a8:	d00f      	beq.n	803a2ca <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 803a2aa:	79fb      	ldrb	r3, [r7, #7]
 803a2ac:	4a09      	ldr	r2, [pc, #36]	@ (803a2d4 <gos_sysmonCheckMessage+0x48>)
 803a2ae:	011b      	lsls	r3, r3, #4
 803a2b0:	4413      	add	r3, r2
 803a2b2:	3304      	adds	r3, #4
 803a2b4:	6818      	ldr	r0, [r3, #0]
 803a2b6:	79fb      	ldrb	r3, [r7, #7]
 803a2b8:	4a06      	ldr	r2, [pc, #24]	@ (803a2d4 <gos_sysmonCheckMessage+0x48>)
 803a2ba:	011b      	lsls	r3, r3, #4
 803a2bc:	4413      	add	r3, r2
 803a2be:	3308      	adds	r3, #8
 803a2c0:	881b      	ldrh	r3, [r3, #0]
 803a2c2:	461a      	mov	r2, r3
 803a2c4:	4904      	ldr	r1, [pc, #16]	@ (803a2d8 <gos_sysmonCheckMessage+0x4c>)
 803a2c6:	f001 ff84 	bl	803c1d2 <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 803a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 803a2cc:	4618      	mov	r0, r3
 803a2ce:	3710      	adds	r7, #16
 803a2d0:	46bd      	mov	sp, r7
 803a2d2:	bd80      	pop	{r7, pc}
 803a2d4:	0804086c 	.word	0x0804086c
 803a2d8:	20013a8c 	.word	0x20013a8c

0803a2dc <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 803a2dc:	b580      	push	{r7, lr}
 803a2de:	b082      	sub	sp, #8
 803a2e0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_ERROR;
 803a2e2:	23ae      	movs	r3, #174	@ 0xae
 803a2e4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 803a2e6:	480a      	ldr	r0, [pc, #40]	@ (803a310 <gos_timeInit+0x34>)
 803a2e8:	f7ff fa50 	bl	803978c <gos_signalCreate>
 803a2ec:	4603      	mov	r3, r0
 803a2ee:	2b55      	cmp	r3, #85	@ 0x55
 803a2f0:	d108      	bne.n	803a304 <gos_timeInit+0x28>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) == GOS_SUCCESS
 803a2f2:	4908      	ldr	r1, [pc, #32]	@ (803a314 <gos_timeInit+0x38>)
 803a2f4:	4808      	ldr	r0, [pc, #32]	@ (803a318 <gos_timeInit+0x3c>)
 803a2f6:	f7fb fbe1 	bl	8035abc <gos_taskRegister>
 803a2fa:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 803a2fc:	2b55      	cmp	r3, #85	@ 0x55
 803a2fe:	d101      	bne.n	803a304 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_SUCCESS;
 803a300:	2355      	movs	r3, #85	@ 0x55
 803a302:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 803a304:	79fb      	ldrb	r3, [r7, #7]
}
 803a306:	4618      	mov	r0, r3
 803a308:	3708      	adds	r7, #8
 803a30a:	46bd      	mov	sp, r7
 803a30c:	bd80      	pop	{r7, pc}
 803a30e:	bf00      	nop
 803a310:	20014d10 	.word	0x20014d10
 803a314:	20014d0e 	.word	0x20014d0e
 803a318:	20003064 	.word	0x20003064

0803a31c <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 803a31c:	b480      	push	{r7}
 803a31e:	b085      	sub	sp, #20
 803a320:	af00      	add	r7, sp, #0
 803a322:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 803a324:	23ae      	movs	r3, #174	@ 0xae
 803a326:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 803a328:	687b      	ldr	r3, [r7, #4]
 803a32a:	2b00      	cmp	r3, #0
 803a32c:	d00a      	beq.n	803a344 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 803a32e:	687b      	ldr	r3, [r7, #4]
 803a330:	4908      	ldr	r1, [pc, #32]	@ (803a354 <gos_timeGet+0x38>)
 803a332:	461a      	mov	r2, r3
 803a334:	460b      	mov	r3, r1
 803a336:	cb03      	ldmia	r3!, {r0, r1}
 803a338:	6010      	str	r0, [r2, #0]
 803a33a:	6051      	str	r1, [r2, #4]
 803a33c:	881b      	ldrh	r3, [r3, #0]
 803a33e:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 803a340:	2355      	movs	r3, #85	@ 0x55
 803a342:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 803a344:	7bfb      	ldrb	r3, [r7, #15]
}
 803a346:	4618      	mov	r0, r3
 803a348:	3714      	adds	r7, #20
 803a34a:	46bd      	mov	sp, r7
 803a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a350:	4770      	bx	lr
 803a352:	bf00      	nop
 803a354:	20003058 	.word	0x20003058

0803a358 <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 803a358:	b480      	push	{r7}
 803a35a:	b085      	sub	sp, #20
 803a35c:	af00      	add	r7, sp, #0
 803a35e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 803a360:	23ae      	movs	r3, #174	@ 0xae
 803a362:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 803a364:	687b      	ldr	r3, [r7, #4]
 803a366:	2b00      	cmp	r3, #0
 803a368:	d008      	beq.n	803a37c <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 803a36a:	4b08      	ldr	r3, [pc, #32]	@ (803a38c <gos_timeSet+0x34>)
 803a36c:	687a      	ldr	r2, [r7, #4]
 803a36e:	6810      	ldr	r0, [r2, #0]
 803a370:	6851      	ldr	r1, [r2, #4]
 803a372:	c303      	stmia	r3!, {r0, r1}
 803a374:	8912      	ldrh	r2, [r2, #8]
 803a376:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 803a378:	2355      	movs	r3, #85	@ 0x55
 803a37a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 803a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 803a37e:	4618      	mov	r0, r3
 803a380:	3714      	adds	r7, #20
 803a382:	46bd      	mov	sp, r7
 803a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a388:	4770      	bx	lr
 803a38a:	bf00      	nop
 803a38c:	20003058 	.word	0x20003058

0803a390 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 803a390:	b480      	push	{r7}
 803a392:	b085      	sub	sp, #20
 803a394:	af00      	add	r7, sp, #0
 803a396:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 803a398:	23ae      	movs	r3, #174	@ 0xae
 803a39a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 803a39c:	687b      	ldr	r3, [r7, #4]
 803a39e:	2b00      	cmp	r3, #0
 803a3a0:	d00a      	beq.n	803a3b8 <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 803a3a2:	687b      	ldr	r3, [r7, #4]
 803a3a4:	4908      	ldr	r1, [pc, #32]	@ (803a3c8 <gos_runTimeGet+0x38>)
 803a3a6:	461a      	mov	r2, r3
 803a3a8:	460b      	mov	r3, r1
 803a3aa:	cb03      	ldmia	r3!, {r0, r1}
 803a3ac:	6010      	str	r0, [r2, #0]
 803a3ae:	6051      	str	r1, [r2, #4]
 803a3b0:	781b      	ldrb	r3, [r3, #0]
 803a3b2:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 803a3b4:	2355      	movs	r3, #85	@ 0x55
 803a3b6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 803a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 803a3ba:	4618      	mov	r0, r3
 803a3bc:	3714      	adds	r7, #20
 803a3be:	46bd      	mov	sp, r7
 803a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3c4:	4770      	bx	lr
 803a3c6:	bf00      	nop
 803a3c8:	20014d04 	.word	0x20014d04

0803a3cc <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 803a3cc:	b480      	push	{r7}
 803a3ce:	b085      	sub	sp, #20
 803a3d0:	af00      	add	r7, sp, #0
 803a3d2:	6078      	str	r0, [r7, #4]
 803a3d4:	460b      	mov	r3, r1
 803a3d6:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 803a3d8:	23ae      	movs	r3, #174	@ 0xae
 803a3da:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 803a3dc:	687b      	ldr	r3, [r7, #4]
 803a3de:	2b00      	cmp	r3, #0
 803a3e0:	f000 80e4 	beq.w	803a5ac <gos_timeAddMilliseconds+0x1e0>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 803a3e4:	687b      	ldr	r3, [r7, #4]
 803a3e6:	881b      	ldrh	r3, [r3, #0]
 803a3e8:	b29a      	uxth	r2, r3
 803a3ea:	887b      	ldrh	r3, [r7, #2]
 803a3ec:	4413      	add	r3, r2
 803a3ee:	b29a      	uxth	r2, r3
 803a3f0:	687b      	ldr	r3, [r7, #4]
 803a3f2:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 803a3f4:	687b      	ldr	r3, [r7, #4]
 803a3f6:	881b      	ldrh	r3, [r3, #0]
 803a3f8:	b29b      	uxth	r3, r3
 803a3fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803a3fe:	f0c0 80d3 	bcc.w	803a5a8 <gos_timeAddMilliseconds+0x1dc>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 803a402:	687b      	ldr	r3, [r7, #4]
 803a404:	789a      	ldrb	r2, [r3, #2]
 803a406:	687b      	ldr	r3, [r7, #4]
 803a408:	881b      	ldrh	r3, [r3, #0]
 803a40a:	b29b      	uxth	r3, r3
 803a40c:	496b      	ldr	r1, [pc, #428]	@ (803a5bc <gos_timeAddMilliseconds+0x1f0>)
 803a40e:	fba1 1303 	umull	r1, r3, r1, r3
 803a412:	099b      	lsrs	r3, r3, #6
 803a414:	b29b      	uxth	r3, r3
 803a416:	b2db      	uxtb	r3, r3
 803a418:	4413      	add	r3, r2
 803a41a:	b2da      	uxtb	r2, r3
 803a41c:	687b      	ldr	r3, [r7, #4]
 803a41e:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 803a420:	687b      	ldr	r3, [r7, #4]
 803a422:	881b      	ldrh	r3, [r3, #0]
 803a424:	b29b      	uxth	r3, r3
 803a426:	4a65      	ldr	r2, [pc, #404]	@ (803a5bc <gos_timeAddMilliseconds+0x1f0>)
 803a428:	fba2 1203 	umull	r1, r2, r2, r3
 803a42c:	0992      	lsrs	r2, r2, #6
 803a42e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 803a432:	fb01 f202 	mul.w	r2, r1, r2
 803a436:	1a9b      	subs	r3, r3, r2
 803a438:	b29a      	uxth	r2, r3
 803a43a:	687b      	ldr	r3, [r7, #4]
 803a43c:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 803a43e:	687b      	ldr	r3, [r7, #4]
 803a440:	789b      	ldrb	r3, [r3, #2]
 803a442:	2b3b      	cmp	r3, #59	@ 0x3b
 803a444:	f240 80b0 	bls.w	803a5a8 <gos_timeAddMilliseconds+0x1dc>
            {
                pTime->minutes += pTime->seconds / 60u;
 803a448:	687b      	ldr	r3, [r7, #4]
 803a44a:	78da      	ldrb	r2, [r3, #3]
 803a44c:	687b      	ldr	r3, [r7, #4]
 803a44e:	789b      	ldrb	r3, [r3, #2]
 803a450:	495b      	ldr	r1, [pc, #364]	@ (803a5c0 <gos_timeAddMilliseconds+0x1f4>)
 803a452:	fba1 1303 	umull	r1, r3, r1, r3
 803a456:	095b      	lsrs	r3, r3, #5
 803a458:	b2db      	uxtb	r3, r3
 803a45a:	4413      	add	r3, r2
 803a45c:	b2da      	uxtb	r2, r3
 803a45e:	687b      	ldr	r3, [r7, #4]
 803a460:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 803a462:	687b      	ldr	r3, [r7, #4]
 803a464:	789a      	ldrb	r2, [r3, #2]
 803a466:	4b56      	ldr	r3, [pc, #344]	@ (803a5c0 <gos_timeAddMilliseconds+0x1f4>)
 803a468:	fba3 1302 	umull	r1, r3, r3, r2
 803a46c:	0959      	lsrs	r1, r3, #5
 803a46e:	460b      	mov	r3, r1
 803a470:	011b      	lsls	r3, r3, #4
 803a472:	1a5b      	subs	r3, r3, r1
 803a474:	009b      	lsls	r3, r3, #2
 803a476:	1ad3      	subs	r3, r2, r3
 803a478:	b2da      	uxtb	r2, r3
 803a47a:	687b      	ldr	r3, [r7, #4]
 803a47c:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 803a47e:	687b      	ldr	r3, [r7, #4]
 803a480:	78db      	ldrb	r3, [r3, #3]
 803a482:	2b3b      	cmp	r3, #59	@ 0x3b
 803a484:	f240 8090 	bls.w	803a5a8 <gos_timeAddMilliseconds+0x1dc>
                {
                    pTime->hours += pTime->minutes / 60u;
 803a488:	687b      	ldr	r3, [r7, #4]
 803a48a:	791a      	ldrb	r2, [r3, #4]
 803a48c:	687b      	ldr	r3, [r7, #4]
 803a48e:	78db      	ldrb	r3, [r3, #3]
 803a490:	494b      	ldr	r1, [pc, #300]	@ (803a5c0 <gos_timeAddMilliseconds+0x1f4>)
 803a492:	fba1 1303 	umull	r1, r3, r1, r3
 803a496:	095b      	lsrs	r3, r3, #5
 803a498:	b2db      	uxtb	r3, r3
 803a49a:	4413      	add	r3, r2
 803a49c:	b2da      	uxtb	r2, r3
 803a49e:	687b      	ldr	r3, [r7, #4]
 803a4a0:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 803a4a2:	687b      	ldr	r3, [r7, #4]
 803a4a4:	78da      	ldrb	r2, [r3, #3]
 803a4a6:	4b46      	ldr	r3, [pc, #280]	@ (803a5c0 <gos_timeAddMilliseconds+0x1f4>)
 803a4a8:	fba3 1302 	umull	r1, r3, r3, r2
 803a4ac:	0959      	lsrs	r1, r3, #5
 803a4ae:	460b      	mov	r3, r1
 803a4b0:	011b      	lsls	r3, r3, #4
 803a4b2:	1a5b      	subs	r3, r3, r1
 803a4b4:	009b      	lsls	r3, r3, #2
 803a4b6:	1ad3      	subs	r3, r2, r3
 803a4b8:	b2da      	uxtb	r2, r3
 803a4ba:	687b      	ldr	r3, [r7, #4]
 803a4bc:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 803a4be:	687b      	ldr	r3, [r7, #4]
 803a4c0:	791b      	ldrb	r3, [r3, #4]
 803a4c2:	2b17      	cmp	r3, #23
 803a4c4:	d970      	bls.n	803a5a8 <gos_timeAddMilliseconds+0x1dc>
                    {
                        pTime->days += pTime->hours / 24u;
 803a4c6:	687b      	ldr	r3, [r7, #4]
 803a4c8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 803a4cc:	b29b      	uxth	r3, r3
 803a4ce:	687a      	ldr	r2, [r7, #4]
 803a4d0:	7912      	ldrb	r2, [r2, #4]
 803a4d2:	493c      	ldr	r1, [pc, #240]	@ (803a5c4 <gos_timeAddMilliseconds+0x1f8>)
 803a4d4:	fba1 1202 	umull	r1, r2, r1, r2
 803a4d8:	0912      	lsrs	r2, r2, #4
 803a4da:	b2d2      	uxtb	r2, r2
 803a4dc:	4413      	add	r3, r2
 803a4de:	b29a      	uxth	r2, r3
 803a4e0:	687b      	ldr	r3, [r7, #4]
 803a4e2:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 803a4e6:	687b      	ldr	r3, [r7, #4]
 803a4e8:	791a      	ldrb	r2, [r3, #4]
 803a4ea:	4b36      	ldr	r3, [pc, #216]	@ (803a5c4 <gos_timeAddMilliseconds+0x1f8>)
 803a4ec:	fba3 1302 	umull	r1, r3, r3, r2
 803a4f0:	0919      	lsrs	r1, r3, #4
 803a4f2:	460b      	mov	r3, r1
 803a4f4:	005b      	lsls	r3, r3, #1
 803a4f6:	440b      	add	r3, r1
 803a4f8:	00db      	lsls	r3, r3, #3
 803a4fa:	1ad3      	subs	r3, r2, r3
 803a4fc:	b2da      	uxtb	r2, r3
 803a4fe:	687b      	ldr	r3, [r7, #4]
 803a500:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 803a502:	687b      	ldr	r3, [r7, #4]
 803a504:	891b      	ldrh	r3, [r3, #8]
 803a506:	b29b      	uxth	r3, r3
 803a508:	f003 0303 	and.w	r3, r3, #3
 803a50c:	b29b      	uxth	r3, r3
 803a50e:	2b00      	cmp	r3, #0
 803a510:	d117      	bne.n	803a542 <gos_timeAddMilliseconds+0x176>
 803a512:	687b      	ldr	r3, [r7, #4]
 803a514:	79db      	ldrb	r3, [r3, #7]
 803a516:	2b02      	cmp	r3, #2
 803a518:	d113      	bne.n	803a542 <gos_timeAddMilliseconds+0x176>
 803a51a:	687b      	ldr	r3, [r7, #4]
 803a51c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 803a520:	b29b      	uxth	r3, r3
 803a522:	2b1d      	cmp	r3, #29
 803a524:	d90d      	bls.n	803a542 <gos_timeAddMilliseconds+0x176>
                        {
                            pTime->days = 1u;
 803a526:	687b      	ldr	r3, [r7, #4]
 803a528:	2200      	movs	r2, #0
 803a52a:	f042 0201 	orr.w	r2, r2, #1
 803a52e:	715a      	strb	r2, [r3, #5]
 803a530:	2200      	movs	r2, #0
 803a532:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 803a534:	687b      	ldr	r3, [r7, #4]
 803a536:	79db      	ldrb	r3, [r3, #7]
 803a538:	3301      	adds	r3, #1
 803a53a:	b2da      	uxtb	r2, r3
 803a53c:	687b      	ldr	r3, [r7, #4]
 803a53e:	71da      	strb	r2, [r3, #7]
 803a540:	e024      	b.n	803a58c <gos_timeAddMilliseconds+0x1c0>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 803a542:	687b      	ldr	r3, [r7, #4]
 803a544:	891b      	ldrh	r3, [r3, #8]
 803a546:	b29b      	uxth	r3, r3
 803a548:	f003 0303 	and.w	r3, r3, #3
 803a54c:	b29b      	uxth	r3, r3
 803a54e:	2b00      	cmp	r3, #0
 803a550:	d103      	bne.n	803a55a <gos_timeAddMilliseconds+0x18e>
 803a552:	687b      	ldr	r3, [r7, #4]
 803a554:	79db      	ldrb	r3, [r3, #7]
 803a556:	2b02      	cmp	r3, #2
 803a558:	d018      	beq.n	803a58c <gos_timeAddMilliseconds+0x1c0>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 803a55a:	687b      	ldr	r3, [r7, #4]
 803a55c:	79db      	ldrb	r3, [r3, #7]
 803a55e:	3b01      	subs	r3, #1
 803a560:	4a19      	ldr	r2, [pc, #100]	@ (803a5c8 <gos_timeAddMilliseconds+0x1fc>)
 803a562:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 803a566:	687b      	ldr	r3, [r7, #4]
 803a568:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 803a56c:	b29b      	uxth	r3, r3
 803a56e:	429a      	cmp	r2, r3
 803a570:	d20c      	bcs.n	803a58c <gos_timeAddMilliseconds+0x1c0>
                        {
                            pTime->days = 1u;
 803a572:	687b      	ldr	r3, [r7, #4]
 803a574:	2200      	movs	r2, #0
 803a576:	f042 0201 	orr.w	r2, r2, #1
 803a57a:	715a      	strb	r2, [r3, #5]
 803a57c:	2200      	movs	r2, #0
 803a57e:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 803a580:	687b      	ldr	r3, [r7, #4]
 803a582:	79db      	ldrb	r3, [r3, #7]
 803a584:	3301      	adds	r3, #1
 803a586:	b2da      	uxtb	r2, r3
 803a588:	687b      	ldr	r3, [r7, #4]
 803a58a:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 803a58c:	687b      	ldr	r3, [r7, #4]
 803a58e:	79db      	ldrb	r3, [r3, #7]
 803a590:	2b0d      	cmp	r3, #13
 803a592:	d109      	bne.n	803a5a8 <gos_timeAddMilliseconds+0x1dc>
                        {
                            pTime->months = 1;
 803a594:	687b      	ldr	r3, [r7, #4]
 803a596:	2201      	movs	r2, #1
 803a598:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 803a59a:	687b      	ldr	r3, [r7, #4]
 803a59c:	891b      	ldrh	r3, [r3, #8]
 803a59e:	b29b      	uxth	r3, r3
 803a5a0:	3301      	adds	r3, #1
 803a5a2:	b29a      	uxth	r2, r3
 803a5a4:	687b      	ldr	r3, [r7, #4]
 803a5a6:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 803a5a8:	2355      	movs	r3, #85	@ 0x55
 803a5aa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 803a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 803a5ae:	4618      	mov	r0, r3
 803a5b0:	3714      	adds	r7, #20
 803a5b2:	46bd      	mov	sp, r7
 803a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a5b8:	4770      	bx	lr
 803a5ba:	bf00      	nop
 803a5bc:	10624dd3 	.word	0x10624dd3
 803a5c0:	88888889 	.word	0x88888889
 803a5c4:	aaaaaaab 	.word	0xaaaaaaab
 803a5c8:	0804096c 	.word	0x0804096c

0803a5cc <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 803a5cc:	b480      	push	{r7}
 803a5ce:	b087      	sub	sp, #28
 803a5d0:	af00      	add	r7, sp, #0
 803a5d2:	60f8      	str	r0, [r7, #12]
 803a5d4:	60b9      	str	r1, [r7, #8]
 803a5d6:	4613      	mov	r3, r2
 803a5d8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 803a5da:	23ae      	movs	r3, #174	@ 0xae
 803a5dc:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 803a5de:	68fb      	ldr	r3, [r7, #12]
 803a5e0:	2b00      	cmp	r3, #0
 803a5e2:	d063      	beq.n	803a6ac <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 803a5e4:	68fb      	ldr	r3, [r7, #12]
 803a5e6:	881b      	ldrh	r3, [r3, #0]
 803a5e8:	b29a      	uxth	r2, r3
 803a5ea:	88fb      	ldrh	r3, [r7, #6]
 803a5ec:	4413      	add	r3, r2
 803a5ee:	b29a      	uxth	r2, r3
 803a5f0:	68fb      	ldr	r3, [r7, #12]
 803a5f2:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 803a5f4:	68fb      	ldr	r3, [r7, #12]
 803a5f6:	881b      	ldrh	r3, [r3, #0]
 803a5f8:	b29b      	uxth	r3, r3
 803a5fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803a5fe:	d355      	bcc.n	803a6ac <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 803a600:	68fb      	ldr	r3, [r7, #12]
 803a602:	881b      	ldrh	r3, [r3, #0]
 803a604:	b29b      	uxth	r3, r3
 803a606:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 803a60a:	b29a      	uxth	r2, r3
 803a60c:	68fb      	ldr	r3, [r7, #12]
 803a60e:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 803a610:	68fb      	ldr	r3, [r7, #12]
 803a612:	885b      	ldrh	r3, [r3, #2]
 803a614:	b29b      	uxth	r3, r3
 803a616:	3301      	adds	r3, #1
 803a618:	b29a      	uxth	r2, r3
 803a61a:	68fb      	ldr	r3, [r7, #12]
 803a61c:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 803a61e:	68fb      	ldr	r3, [r7, #12]
 803a620:	885b      	ldrh	r3, [r3, #2]
 803a622:	b29b      	uxth	r3, r3
 803a624:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803a628:	d340      	bcc.n	803a6ac <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 803a62a:	68fb      	ldr	r3, [r7, #12]
 803a62c:	885b      	ldrh	r3, [r3, #2]
 803a62e:	b29b      	uxth	r3, r3
 803a630:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 803a634:	b29a      	uxth	r2, r3
 803a636:	68fb      	ldr	r3, [r7, #12]
 803a638:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 803a63a:	68fb      	ldr	r3, [r7, #12]
 803a63c:	791b      	ldrb	r3, [r3, #4]
 803a63e:	3301      	adds	r3, #1
 803a640:	b2da      	uxtb	r2, r3
 803a642:	68fb      	ldr	r3, [r7, #12]
 803a644:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 803a646:	68fb      	ldr	r3, [r7, #12]
 803a648:	791b      	ldrb	r3, [r3, #4]
 803a64a:	2b3b      	cmp	r3, #59	@ 0x3b
 803a64c:	d92e      	bls.n	803a6ac <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 803a64e:	68fb      	ldr	r3, [r7, #12]
 803a650:	791b      	ldrb	r3, [r3, #4]
 803a652:	3b3c      	subs	r3, #60	@ 0x3c
 803a654:	b2da      	uxtb	r2, r3
 803a656:	68fb      	ldr	r3, [r7, #12]
 803a658:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 803a65a:	68fb      	ldr	r3, [r7, #12]
 803a65c:	795b      	ldrb	r3, [r3, #5]
 803a65e:	3301      	adds	r3, #1
 803a660:	b2da      	uxtb	r2, r3
 803a662:	68fb      	ldr	r3, [r7, #12]
 803a664:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 803a666:	68fb      	ldr	r3, [r7, #12]
 803a668:	795b      	ldrb	r3, [r3, #5]
 803a66a:	2b3b      	cmp	r3, #59	@ 0x3b
 803a66c:	d91e      	bls.n	803a6ac <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 803a66e:	68fb      	ldr	r3, [r7, #12]
 803a670:	795b      	ldrb	r3, [r3, #5]
 803a672:	3b3c      	subs	r3, #60	@ 0x3c
 803a674:	b2da      	uxtb	r2, r3
 803a676:	68fb      	ldr	r3, [r7, #12]
 803a678:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 803a67a:	68fb      	ldr	r3, [r7, #12]
 803a67c:	799b      	ldrb	r3, [r3, #6]
 803a67e:	3301      	adds	r3, #1
 803a680:	b2da      	uxtb	r2, r3
 803a682:	68fb      	ldr	r3, [r7, #12]
 803a684:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 803a686:	68fb      	ldr	r3, [r7, #12]
 803a688:	799b      	ldrb	r3, [r3, #6]
 803a68a:	2b17      	cmp	r3, #23
 803a68c:	d90e      	bls.n	803a6ac <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 803a68e:	68fb      	ldr	r3, [r7, #12]
 803a690:	799b      	ldrb	r3, [r3, #6]
 803a692:	3b18      	subs	r3, #24
 803a694:	b2da      	uxtb	r2, r3
 803a696:	68fb      	ldr	r3, [r7, #12]
 803a698:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 803a69a:	68fb      	ldr	r3, [r7, #12]
 803a69c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 803a6a0:	b29b      	uxth	r3, r3
 803a6a2:	3301      	adds	r3, #1
 803a6a4:	b29a      	uxth	r2, r3
 803a6a6:	68fb      	ldr	r3, [r7, #12]
 803a6a8:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 803a6ac:	68bb      	ldr	r3, [r7, #8]
 803a6ae:	2b00      	cmp	r3, #0
 803a6b0:	d063      	beq.n	803a77a <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 803a6b2:	68bb      	ldr	r3, [r7, #8]
 803a6b4:	881b      	ldrh	r3, [r3, #0]
 803a6b6:	b29a      	uxth	r2, r3
 803a6b8:	88fb      	ldrh	r3, [r7, #6]
 803a6ba:	4413      	add	r3, r2
 803a6bc:	b29a      	uxth	r2, r3
 803a6be:	68bb      	ldr	r3, [r7, #8]
 803a6c0:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 803a6c2:	68bb      	ldr	r3, [r7, #8]
 803a6c4:	881b      	ldrh	r3, [r3, #0]
 803a6c6:	b29b      	uxth	r3, r3
 803a6c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803a6cc:	d355      	bcc.n	803a77a <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 803a6ce:	68bb      	ldr	r3, [r7, #8]
 803a6d0:	881b      	ldrh	r3, [r3, #0]
 803a6d2:	b29b      	uxth	r3, r3
 803a6d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 803a6d8:	b29a      	uxth	r2, r3
 803a6da:	68bb      	ldr	r3, [r7, #8]
 803a6dc:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 803a6de:	68bb      	ldr	r3, [r7, #8]
 803a6e0:	885b      	ldrh	r3, [r3, #2]
 803a6e2:	b29b      	uxth	r3, r3
 803a6e4:	3301      	adds	r3, #1
 803a6e6:	b29a      	uxth	r2, r3
 803a6e8:	68bb      	ldr	r3, [r7, #8]
 803a6ea:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 803a6ec:	68bb      	ldr	r3, [r7, #8]
 803a6ee:	885b      	ldrh	r3, [r3, #2]
 803a6f0:	b29b      	uxth	r3, r3
 803a6f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803a6f6:	d340      	bcc.n	803a77a <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 803a6f8:	68bb      	ldr	r3, [r7, #8]
 803a6fa:	885b      	ldrh	r3, [r3, #2]
 803a6fc:	b29b      	uxth	r3, r3
 803a6fe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 803a702:	b29a      	uxth	r2, r3
 803a704:	68bb      	ldr	r3, [r7, #8]
 803a706:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 803a708:	68bb      	ldr	r3, [r7, #8]
 803a70a:	791b      	ldrb	r3, [r3, #4]
 803a70c:	3301      	adds	r3, #1
 803a70e:	b2da      	uxtb	r2, r3
 803a710:	68bb      	ldr	r3, [r7, #8]
 803a712:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 803a714:	68bb      	ldr	r3, [r7, #8]
 803a716:	791b      	ldrb	r3, [r3, #4]
 803a718:	2b3b      	cmp	r3, #59	@ 0x3b
 803a71a:	d92e      	bls.n	803a77a <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 803a71c:	68bb      	ldr	r3, [r7, #8]
 803a71e:	791b      	ldrb	r3, [r3, #4]
 803a720:	3b3c      	subs	r3, #60	@ 0x3c
 803a722:	b2da      	uxtb	r2, r3
 803a724:	68bb      	ldr	r3, [r7, #8]
 803a726:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 803a728:	68bb      	ldr	r3, [r7, #8]
 803a72a:	795b      	ldrb	r3, [r3, #5]
 803a72c:	3301      	adds	r3, #1
 803a72e:	b2da      	uxtb	r2, r3
 803a730:	68bb      	ldr	r3, [r7, #8]
 803a732:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 803a734:	68bb      	ldr	r3, [r7, #8]
 803a736:	795b      	ldrb	r3, [r3, #5]
 803a738:	2b3b      	cmp	r3, #59	@ 0x3b
 803a73a:	d91e      	bls.n	803a77a <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 803a73c:	68bb      	ldr	r3, [r7, #8]
 803a73e:	795b      	ldrb	r3, [r3, #5]
 803a740:	3b3c      	subs	r3, #60	@ 0x3c
 803a742:	b2da      	uxtb	r2, r3
 803a744:	68bb      	ldr	r3, [r7, #8]
 803a746:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 803a748:	68bb      	ldr	r3, [r7, #8]
 803a74a:	799b      	ldrb	r3, [r3, #6]
 803a74c:	3301      	adds	r3, #1
 803a74e:	b2da      	uxtb	r2, r3
 803a750:	68bb      	ldr	r3, [r7, #8]
 803a752:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 803a754:	68bb      	ldr	r3, [r7, #8]
 803a756:	799b      	ldrb	r3, [r3, #6]
 803a758:	2b17      	cmp	r3, #23
 803a75a:	d90e      	bls.n	803a77a <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 803a75c:	68bb      	ldr	r3, [r7, #8]
 803a75e:	799b      	ldrb	r3, [r3, #6]
 803a760:	3b18      	subs	r3, #24
 803a762:	b2da      	uxtb	r2, r3
 803a764:	68bb      	ldr	r3, [r7, #8]
 803a766:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 803a768:	68bb      	ldr	r3, [r7, #8]
 803a76a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 803a76e:	b29b      	uxth	r3, r3
 803a770:	3301      	adds	r3, #1
 803a772:	b29a      	uxth	r2, r3
 803a774:	68bb      	ldr	r3, [r7, #8]
 803a776:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 803a77a:	2355      	movs	r3, #85	@ 0x55
 803a77c:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 803a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 803a780:	4618      	mov	r0, r3
 803a782:	371c      	adds	r7, #28
 803a784:	46bd      	mov	sp, r7
 803a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a78a:	4770      	bx	lr

0803a78c <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 803a78c:	b480      	push	{r7}
 803a78e:	b085      	sub	sp, #20
 803a790:	af00      	add	r7, sp, #0
 803a792:	6078      	str	r0, [r7, #4]
 803a794:	460b      	mov	r3, r1
 803a796:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 803a798:	23ae      	movs	r3, #174	@ 0xae
 803a79a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 803a79c:	687b      	ldr	r3, [r7, #4]
 803a79e:	2b00      	cmp	r3, #0
 803a7a0:	f000 808e 	beq.w	803a8c0 <gos_runTimeAddMilliseconds+0x134>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 803a7a4:	687b      	ldr	r3, [r7, #4]
 803a7a6:	885b      	ldrh	r3, [r3, #2]
 803a7a8:	b29a      	uxth	r2, r3
 803a7aa:	887b      	ldrh	r3, [r7, #2]
 803a7ac:	4413      	add	r3, r2
 803a7ae:	b29a      	uxth	r2, r3
 803a7b0:	687b      	ldr	r3, [r7, #4]
 803a7b2:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 803a7b4:	687b      	ldr	r3, [r7, #4]
 803a7b6:	885b      	ldrh	r3, [r3, #2]
 803a7b8:	b29b      	uxth	r3, r3
 803a7ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803a7be:	d37d      	bcc.n	803a8bc <gos_runTimeAddMilliseconds+0x130>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 803a7c0:	687b      	ldr	r3, [r7, #4]
 803a7c2:	791a      	ldrb	r2, [r3, #4]
 803a7c4:	687b      	ldr	r3, [r7, #4]
 803a7c6:	885b      	ldrh	r3, [r3, #2]
 803a7c8:	b29b      	uxth	r3, r3
 803a7ca:	4941      	ldr	r1, [pc, #260]	@ (803a8d0 <gos_runTimeAddMilliseconds+0x144>)
 803a7cc:	fba1 1303 	umull	r1, r3, r1, r3
 803a7d0:	099b      	lsrs	r3, r3, #6
 803a7d2:	b29b      	uxth	r3, r3
 803a7d4:	b2db      	uxtb	r3, r3
 803a7d6:	4413      	add	r3, r2
 803a7d8:	b2da      	uxtb	r2, r3
 803a7da:	687b      	ldr	r3, [r7, #4]
 803a7dc:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 803a7de:	687b      	ldr	r3, [r7, #4]
 803a7e0:	885b      	ldrh	r3, [r3, #2]
 803a7e2:	b29b      	uxth	r3, r3
 803a7e4:	4a3a      	ldr	r2, [pc, #232]	@ (803a8d0 <gos_runTimeAddMilliseconds+0x144>)
 803a7e6:	fba2 1203 	umull	r1, r2, r2, r3
 803a7ea:	0992      	lsrs	r2, r2, #6
 803a7ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 803a7f0:	fb01 f202 	mul.w	r2, r1, r2
 803a7f4:	1a9b      	subs	r3, r3, r2
 803a7f6:	b29a      	uxth	r2, r3
 803a7f8:	687b      	ldr	r3, [r7, #4]
 803a7fa:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 803a7fc:	687b      	ldr	r3, [r7, #4]
 803a7fe:	791b      	ldrb	r3, [r3, #4]
 803a800:	2b3b      	cmp	r3, #59	@ 0x3b
 803a802:	d95b      	bls.n	803a8bc <gos_runTimeAddMilliseconds+0x130>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 803a804:	687b      	ldr	r3, [r7, #4]
 803a806:	795a      	ldrb	r2, [r3, #5]
 803a808:	687b      	ldr	r3, [r7, #4]
 803a80a:	791b      	ldrb	r3, [r3, #4]
 803a80c:	4931      	ldr	r1, [pc, #196]	@ (803a8d4 <gos_runTimeAddMilliseconds+0x148>)
 803a80e:	fba1 1303 	umull	r1, r3, r1, r3
 803a812:	095b      	lsrs	r3, r3, #5
 803a814:	b2db      	uxtb	r3, r3
 803a816:	4413      	add	r3, r2
 803a818:	b2da      	uxtb	r2, r3
 803a81a:	687b      	ldr	r3, [r7, #4]
 803a81c:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 803a81e:	687b      	ldr	r3, [r7, #4]
 803a820:	791a      	ldrb	r2, [r3, #4]
 803a822:	4b2c      	ldr	r3, [pc, #176]	@ (803a8d4 <gos_runTimeAddMilliseconds+0x148>)
 803a824:	fba3 1302 	umull	r1, r3, r3, r2
 803a828:	0959      	lsrs	r1, r3, #5
 803a82a:	460b      	mov	r3, r1
 803a82c:	011b      	lsls	r3, r3, #4
 803a82e:	1a5b      	subs	r3, r3, r1
 803a830:	009b      	lsls	r3, r3, #2
 803a832:	1ad3      	subs	r3, r2, r3
 803a834:	b2da      	uxtb	r2, r3
 803a836:	687b      	ldr	r3, [r7, #4]
 803a838:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 803a83a:	687b      	ldr	r3, [r7, #4]
 803a83c:	795b      	ldrb	r3, [r3, #5]
 803a83e:	2b3b      	cmp	r3, #59	@ 0x3b
 803a840:	d93c      	bls.n	803a8bc <gos_runTimeAddMilliseconds+0x130>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 803a842:	687b      	ldr	r3, [r7, #4]
 803a844:	799a      	ldrb	r2, [r3, #6]
 803a846:	687b      	ldr	r3, [r7, #4]
 803a848:	795b      	ldrb	r3, [r3, #5]
 803a84a:	4922      	ldr	r1, [pc, #136]	@ (803a8d4 <gos_runTimeAddMilliseconds+0x148>)
 803a84c:	fba1 1303 	umull	r1, r3, r1, r3
 803a850:	095b      	lsrs	r3, r3, #5
 803a852:	b2db      	uxtb	r3, r3
 803a854:	4413      	add	r3, r2
 803a856:	b2da      	uxtb	r2, r3
 803a858:	687b      	ldr	r3, [r7, #4]
 803a85a:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 803a85c:	687b      	ldr	r3, [r7, #4]
 803a85e:	795a      	ldrb	r2, [r3, #5]
 803a860:	4b1c      	ldr	r3, [pc, #112]	@ (803a8d4 <gos_runTimeAddMilliseconds+0x148>)
 803a862:	fba3 1302 	umull	r1, r3, r3, r2
 803a866:	0959      	lsrs	r1, r3, #5
 803a868:	460b      	mov	r3, r1
 803a86a:	011b      	lsls	r3, r3, #4
 803a86c:	1a5b      	subs	r3, r3, r1
 803a86e:	009b      	lsls	r3, r3, #2
 803a870:	1ad3      	subs	r3, r2, r3
 803a872:	b2da      	uxtb	r2, r3
 803a874:	687b      	ldr	r3, [r7, #4]
 803a876:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 803a878:	687b      	ldr	r3, [r7, #4]
 803a87a:	799b      	ldrb	r3, [r3, #6]
 803a87c:	2b17      	cmp	r3, #23
 803a87e:	d91d      	bls.n	803a8bc <gos_runTimeAddMilliseconds+0x130>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 803a880:	687b      	ldr	r3, [r7, #4]
 803a882:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 803a886:	b29b      	uxth	r3, r3
 803a888:	687a      	ldr	r2, [r7, #4]
 803a88a:	7992      	ldrb	r2, [r2, #6]
 803a88c:	4912      	ldr	r1, [pc, #72]	@ (803a8d8 <gos_runTimeAddMilliseconds+0x14c>)
 803a88e:	fba1 1202 	umull	r1, r2, r1, r2
 803a892:	0912      	lsrs	r2, r2, #4
 803a894:	b2d2      	uxtb	r2, r2
 803a896:	4413      	add	r3, r2
 803a898:	b29a      	uxth	r2, r3
 803a89a:	687b      	ldr	r3, [r7, #4]
 803a89c:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 803a8a0:	687b      	ldr	r3, [r7, #4]
 803a8a2:	799a      	ldrb	r2, [r3, #6]
 803a8a4:	4b0c      	ldr	r3, [pc, #48]	@ (803a8d8 <gos_runTimeAddMilliseconds+0x14c>)
 803a8a6:	fba3 1302 	umull	r1, r3, r3, r2
 803a8aa:	0919      	lsrs	r1, r3, #4
 803a8ac:	460b      	mov	r3, r1
 803a8ae:	005b      	lsls	r3, r3, #1
 803a8b0:	440b      	add	r3, r1
 803a8b2:	00db      	lsls	r3, r3, #3
 803a8b4:	1ad3      	subs	r3, r2, r3
 803a8b6:	b2da      	uxtb	r2, r3
 803a8b8:	687b      	ldr	r3, [r7, #4]
 803a8ba:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 803a8bc:	2355      	movs	r3, #85	@ 0x55
 803a8be:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 803a8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 803a8c2:	4618      	mov	r0, r3
 803a8c4:	3714      	adds	r7, #20
 803a8c6:	46bd      	mov	sp, r7
 803a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a8cc:	4770      	bx	lr
 803a8ce:	bf00      	nop
 803a8d0:	10624dd3 	.word	0x10624dd3
 803a8d4:	88888889 	.word	0x88888889
 803a8d8:	aaaaaaab 	.word	0xaaaaaaab

0803a8dc <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 803a8dc:	b580      	push	{r7, lr}
 803a8de:	b084      	sub	sp, #16
 803a8e0:	af00      	add	r7, sp, #0
 803a8e2:	4603      	mov	r3, r0
 803a8e4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 803a8e6:	23ae      	movs	r3, #174	@ 0xae
 803a8e8:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 803a8ea:	88fb      	ldrh	r3, [r7, #6]
 803a8ec:	4619      	mov	r1, r3
 803a8ee:	480a      	ldr	r0, [pc, #40]	@ (803a918 <gos_timeIncreaseSystemTime+0x3c>)
 803a8f0:	f7ff ff4c 	bl	803a78c <gos_runTimeAddMilliseconds>
 803a8f4:	4603      	mov	r3, r0
 803a8f6:	2b55      	cmp	r3, #85	@ 0x55
 803a8f8:	d109      	bne.n	803a90e <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 803a8fa:	88fb      	ldrh	r3, [r7, #6]
 803a8fc:	4619      	mov	r1, r3
 803a8fe:	4807      	ldr	r0, [pc, #28]	@ (803a91c <gos_timeIncreaseSystemTime+0x40>)
 803a900:	f7ff fd64 	bl	803a3cc <gos_timeAddMilliseconds>
 803a904:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 803a906:	2b55      	cmp	r3, #85	@ 0x55
 803a908:	d101      	bne.n	803a90e <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 803a90a:	2355      	movs	r3, #85	@ 0x55
 803a90c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 803a90e:	7bfb      	ldrb	r3, [r7, #15]
}
 803a910:	4618      	mov	r0, r3
 803a912:	3710      	adds	r7, #16
 803a914:	46bd      	mov	sp, r7
 803a916:	bd80      	pop	{r7, pc}
 803a918:	20014d04 	.word	0x20014d04
 803a91c:	20003058 	.word	0x20003058

0803a920 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 803a920:	b580      	push	{r7, lr}
 803a922:	b084      	sub	sp, #16
 803a924:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 803a926:	1d3b      	adds	r3, r7, #4
 803a928:	2200      	movs	r2, #0
 803a92a:	601a      	str	r2, [r3, #0]
 803a92c:	605a      	str	r2, [r3, #4]
 803a92e:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 803a930:	4b27      	ldr	r3, [pc, #156]	@ (803a9d0 <gos_timeDaemonTask+0xb0>)
 803a932:	789a      	ldrb	r2, [r3, #2]
 803a934:	79bb      	ldrb	r3, [r7, #6]
 803a936:	429a      	cmp	r2, r3
 803a938:	d905      	bls.n	803a946 <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 803a93a:	4b26      	ldr	r3, [pc, #152]	@ (803a9d4 <gos_timeDaemonTask+0xb4>)
 803a93c:	781b      	ldrb	r3, [r3, #0]
 803a93e:	2100      	movs	r1, #0
 803a940:	4618      	mov	r0, r3
 803a942:	f7fe ff61 	bl	8039808 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 803a946:	4b22      	ldr	r3, [pc, #136]	@ (803a9d0 <gos_timeDaemonTask+0xb0>)
 803a948:	78da      	ldrb	r2, [r3, #3]
 803a94a:	79fb      	ldrb	r3, [r7, #7]
 803a94c:	429a      	cmp	r2, r3
 803a94e:	d905      	bls.n	803a95c <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 803a950:	4b20      	ldr	r3, [pc, #128]	@ (803a9d4 <gos_timeDaemonTask+0xb4>)
 803a952:	781b      	ldrb	r3, [r3, #0]
 803a954:	2101      	movs	r1, #1
 803a956:	4618      	mov	r0, r3
 803a958:	f7fe ff56 	bl	8039808 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 803a95c:	4b1c      	ldr	r3, [pc, #112]	@ (803a9d0 <gos_timeDaemonTask+0xb0>)
 803a95e:	791a      	ldrb	r2, [r3, #4]
 803a960:	7a3b      	ldrb	r3, [r7, #8]
 803a962:	429a      	cmp	r2, r3
 803a964:	d905      	bls.n	803a972 <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 803a966:	4b1b      	ldr	r3, [pc, #108]	@ (803a9d4 <gos_timeDaemonTask+0xb4>)
 803a968:	781b      	ldrb	r3, [r3, #0]
 803a96a:	2102      	movs	r1, #2
 803a96c:	4618      	mov	r0, r3
 803a96e:	f7fe ff4b 	bl	8039808 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 803a972:	4b17      	ldr	r3, [pc, #92]	@ (803a9d0 <gos_timeDaemonTask+0xb0>)
 803a974:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 803a978:	b29a      	uxth	r2, r3
 803a97a:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 803a97e:	b29b      	uxth	r3, r3
 803a980:	429a      	cmp	r2, r3
 803a982:	d905      	bls.n	803a990 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 803a984:	4b13      	ldr	r3, [pc, #76]	@ (803a9d4 <gos_timeDaemonTask+0xb4>)
 803a986:	781b      	ldrb	r3, [r3, #0]
 803a988:	2103      	movs	r1, #3
 803a98a:	4618      	mov	r0, r3
 803a98c:	f7fe ff3c 	bl	8039808 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 803a990:	4b0f      	ldr	r3, [pc, #60]	@ (803a9d0 <gos_timeDaemonTask+0xb0>)
 803a992:	79da      	ldrb	r2, [r3, #7]
 803a994:	7afb      	ldrb	r3, [r7, #11]
 803a996:	429a      	cmp	r2, r3
 803a998:	d905      	bls.n	803a9a6 <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 803a99a:	4b0e      	ldr	r3, [pc, #56]	@ (803a9d4 <gos_timeDaemonTask+0xb4>)
 803a99c:	781b      	ldrb	r3, [r3, #0]
 803a99e:	2104      	movs	r1, #4
 803a9a0:	4618      	mov	r0, r3
 803a9a2:	f7fe ff31 	bl	8039808 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 803a9a6:	4b0a      	ldr	r3, [pc, #40]	@ (803a9d0 <gos_timeDaemonTask+0xb0>)
 803a9a8:	891a      	ldrh	r2, [r3, #8]
 803a9aa:	89bb      	ldrh	r3, [r7, #12]
 803a9ac:	429a      	cmp	r2, r3
 803a9ae:	d905      	bls.n	803a9bc <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 803a9b0:	4b08      	ldr	r3, [pc, #32]	@ (803a9d4 <gos_timeDaemonTask+0xb4>)
 803a9b2:	781b      	ldrb	r3, [r3, #0]
 803a9b4:	2105      	movs	r1, #5
 803a9b6:	4618      	mov	r0, r3
 803a9b8:	f7fe ff26 	bl	8039808 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 803a9bc:	1d3b      	adds	r3, r7, #4
 803a9be:	4618      	mov	r0, r3
 803a9c0:	f7ff fcac 	bl	803a31c <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 803a9c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 803a9c8:	f7fb fa0a 	bl	8035de0 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 803a9cc:	e7b0      	b.n	803a930 <gos_timeDaemonTask+0x10>
 803a9ce:	bf00      	nop
 803a9d0:	20003058 	.word	0x20003058
 803a9d4:	20014d10 	.word	0x20014d10

0803a9d8 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 803a9d8:	b580      	push	{r7, lr}
 803a9da:	b082      	sub	sp, #8
 803a9dc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_ERROR;
 803a9de:	23ae      	movs	r3, #174	@ 0xae
 803a9e0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 803a9e2:	480d      	ldr	r0, [pc, #52]	@ (803aa18 <gos_traceInit+0x40>)
 803a9e4:	f7fd fff8 	bl	80389d8 <gos_queueCreate>
 803a9e8:	4603      	mov	r3, r0
 803a9ea:	2b55      	cmp	r3, #85	@ 0x55
 803a9ec:	d10e      	bne.n	803aa0c <gos_traceInit+0x34>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 803a9ee:	2100      	movs	r1, #0
 803a9f0:	480a      	ldr	r0, [pc, #40]	@ (803aa1c <gos_traceInit+0x44>)
 803a9f2:	f7fb f863 	bl	8035abc <gos_taskRegister>
 803a9f6:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 803a9f8:	2b55      	cmp	r3, #85	@ 0x55
 803a9fa:	d107      	bne.n	803aa0c <gos_traceInit+0x34>
        gos_mutexInit(&traceMutex) == GOS_SUCCESS
 803a9fc:	4808      	ldr	r0, [pc, #32]	@ (803aa20 <gos_traceInit+0x48>)
 803a9fe:	f7fd fe0d 	bl	803861c <gos_mutexInit>
 803aa02:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 803aa04:	2b55      	cmp	r3, #85	@ 0x55
 803aa06:	d101      	bne.n	803aa0c <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_SUCCESS;
 803aa08:	2355      	movs	r3, #85	@ 0x55
 803aa0a:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 803aa0c:	79fb      	ldrb	r3, [r7, #7]
}
 803aa0e:	4618      	mov	r0, r3
 803aa10:	3708      	adds	r7, #8
 803aa12:	46bd      	mov	sp, r7
 803aa14:	bd80      	pop	{r7, pc}
 803aa16:	bf00      	nop
 803aa18:	200030d0 	.word	0x200030d0
 803aa1c:	200030ec 	.word	0x200030ec
 803aa20:	20014ed4 	.word	0x20014ed4

0803aa24 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 803aa24:	b5f0      	push	{r4, r5, r6, r7, lr}
 803aa26:	b0a9      	sub	sp, #164	@ 0xa4
 803aa28:	af06      	add	r7, sp, #24
 803aa2a:	4603      	mov	r3, r0
 803aa2c:	6039      	str	r1, [r7, #0]
 803aa2e:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 803aa30:	23ae      	movs	r3, #174	@ 0xae
 803aa32:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 803aa36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 803aa3a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    gos_taskPrivilegeLevel_t privileges     = 0u;
 803aa3e:	2300      	movs	r3, #0
 803aa40:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    gos_taskDescriptor_t     callerTaskDesc = {0};
 803aa44:	f107 0318 	add.w	r3, r7, #24
 803aa48:	226a      	movs	r2, #106	@ 0x6a
 803aa4a:	2100      	movs	r1, #0
 803aa4c:	4618      	mov	r0, r3
 803aa4e:	f001 fb39 	bl	803c0c4 <memset>
    gos_time_t               sysTime        = {0};
 803aa52:	f107 030c 	add.w	r3, r7, #12
 803aa56:	2200      	movs	r2, #0
 803aa58:	601a      	str	r2, [r3, #0]
 803aa5a:	605a      	str	r2, [r3, #4]
 803aa5c:	811a      	strh	r2, [r3, #8]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 803aa5e:	683b      	ldr	r3, [r7, #0]
 803aa60:	2b00      	cmp	r3, #0
 803aa62:	f000 80ec 	beq.w	803ac3e <gos_traceTrace+0x21a>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 803aa66:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 803aa6a:	4618      	mov	r0, r3
 803aa6c:	f7fc fc04 	bl	8037278 <gos_taskGetCurrentId>
 803aa70:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 803aa72:	2b55      	cmp	r3, #85	@ 0x55
 803aa74:	f040 80e3 	bne.w	803ac3e <gos_traceTrace+0x21a>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 803aa78:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 803aa7c:	f107 0218 	add.w	r2, r7, #24
 803aa80:	4611      	mov	r1, r2
 803aa82:	4618      	mov	r0, r3
 803aa84:	f7fc fc54 	bl	8037330 <gos_taskGetData>
 803aa88:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 803aa8a:	2b55      	cmp	r3, #85	@ 0x55
 803aa8c:	f040 80d7 	bne.w	803ac3e <gos_traceTrace+0x21a>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 803aa90:	8c3b      	ldrh	r3, [r7, #32]
 803aa92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 803aa96:	2b00      	cmp	r3, #0
 803aa98:	d105      	bne.n	803aaa6 <gos_traceTrace+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 803aa9a:	f7fa fcef 	bl	803547c <gos_kernelIsCallerIsr>
 803aa9e:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 803aaa0:	2b36      	cmp	r3, #54	@ 0x36
 803aaa2:	f040 80cc 	bne.w	803ac3e <gos_traceTrace+0x21a>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 803aaa6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 803aaaa:	4868      	ldr	r0, [pc, #416]	@ (803ac4c <gos_traceTrace+0x228>)
 803aaac:	f7fd fdd0 	bl	8038650 <gos_mutexLock>
 803aab0:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 803aab2:	2b55      	cmp	r3, #85	@ 0x55
 803aab4:	f040 80c3 	bne.w	803ac3e <gos_traceTrace+0x21a>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 803aab8:	2355      	movs	r3, #85	@ 0x55
 803aaba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        if (addTimeStamp == GOS_TRUE)
 803aabe:	79fb      	ldrb	r3, [r7, #7]
 803aac0:	2b36      	cmp	r3, #54	@ 0x36
 803aac2:	d13f      	bne.n	803ab44 <gos_traceTrace+0x120>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 803aac4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 803aac8:	2b55      	cmp	r3, #85	@ 0x55
 803aaca:	d108      	bne.n	803aade <gos_traceTrace+0xba>
 803aacc:	f107 030c 	add.w	r3, r7, #12
 803aad0:	4618      	mov	r0, r3
 803aad2:	f7ff fc23 	bl	803a31c <gos_timeGet>
 803aad6:	4603      	mov	r3, r0
 803aad8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 803aadc:	e002      	b.n	803aae4 <gos_traceTrace+0xc0>
 803aade:	23ae      	movs	r3, #174	@ 0xae
 803aae0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 803aae4:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 803aae6:	461d      	mov	r5, r3
                    sysTime.months,
 803aae8:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 803aaea:	461e      	mov	r6, r3
                    sysTime.days,
 803aaec:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 803aaf0:	b29b      	uxth	r3, r3
                    sysTime.hours,
 803aaf2:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 803aaf4:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 803aaf6:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 803aaf8:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 803aafa:	9404      	str	r4, [sp, #16]
 803aafc:	9003      	str	r0, [sp, #12]
 803aafe:	9102      	str	r1, [sp, #8]
 803ab00:	9201      	str	r2, [sp, #4]
 803ab02:	9300      	str	r3, [sp, #0]
 803ab04:	4633      	mov	r3, r6
 803ab06:	462a      	mov	r2, r5
 803ab08:	4951      	ldr	r1, [pc, #324]	@ (803ac50 <gos_traceTrace+0x22c>)
 803ab0a:	4852      	ldr	r0, [pc, #328]	@ (803ac54 <gos_traceTrace+0x230>)
 803ab0c:	f001 fa56 	bl	803bfbc <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 803ab10:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 803ab14:	2b55      	cmp	r3, #85	@ 0x55
 803ab16:	d112      	bne.n	803ab3e <gos_traceTrace+0x11a>
 803ab18:	4b4f      	ldr	r3, [pc, #316]	@ (803ac58 <gos_traceTrace+0x234>)
 803ab1a:	881c      	ldrh	r4, [r3, #0]
 803ab1c:	484d      	ldr	r0, [pc, #308]	@ (803ac54 <gos_traceTrace+0x230>)
 803ab1e:	f7e5 fbd7 	bl	80202d0 <strlen>
 803ab22:	4603      	mov	r3, r0
 803ab24:	b2db      	uxtb	r3, r3
 803ab26:	3301      	adds	r3, #1
 803ab28:	b2da      	uxtb	r2, r3
 803ab2a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 803ab2e:	4949      	ldr	r1, [pc, #292]	@ (803ac54 <gos_traceTrace+0x230>)
 803ab30:	4620      	mov	r0, r4
 803ab32:	f7fd ffad 	bl	8038a90 <gos_queuePut>
 803ab36:	4603      	mov	r3, r0
 803ab38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 803ab3c:	e002      	b.n	803ab44 <gos_traceTrace+0x120>
 803ab3e:	23ae      	movs	r3, #174	@ 0xae
 803ab40:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 803ab44:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 803ab48:	2b55      	cmp	r3, #85	@ 0x55
 803ab4a:	d112      	bne.n	803ab72 <gos_traceTrace+0x14e>
 803ab4c:	4b42      	ldr	r3, [pc, #264]	@ (803ac58 <gos_traceTrace+0x234>)
 803ab4e:	881c      	ldrh	r4, [r3, #0]
 803ab50:	6838      	ldr	r0, [r7, #0]
 803ab52:	f7e5 fbbd 	bl	80202d0 <strlen>
 803ab56:	4603      	mov	r3, r0
 803ab58:	b2db      	uxtb	r3, r3
 803ab5a:	3301      	adds	r3, #1
 803ab5c:	b2da      	uxtb	r2, r3
 803ab5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 803ab62:	6839      	ldr	r1, [r7, #0]
 803ab64:	4620      	mov	r0, r4
 803ab66:	f7fd ff93 	bl	8038a90 <gos_queuePut>
 803ab6a:	4603      	mov	r3, r0
 803ab6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 803ab70:	e002      	b.n	803ab78 <gos_traceTrace+0x154>
 803ab72:	23ae      	movs	r3, #174	@ 0xae
 803ab74:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 803ab78:	4b38      	ldr	r3, [pc, #224]	@ (803ac5c <gos_traceTrace+0x238>)
 803ab7a:	781b      	ldrb	r3, [r3, #0]
 803ab7c:	2b00      	cmp	r3, #0
 803ab7e:	d108      	bne.n	803ab92 <gos_traceTrace+0x16e>
 803ab80:	b672      	cpsid	i
 803ab82:	f3ef 8310 	mrs	r3, PRIMASK
 803ab86:	4a36      	ldr	r2, [pc, #216]	@ (803ac60 <gos_traceTrace+0x23c>)
 803ab88:	6013      	str	r3, [r2, #0]
 803ab8a:	f3bf 8f4f 	dsb	sy
 803ab8e:	f3bf 8f6f 	isb	sy
 803ab92:	4b32      	ldr	r3, [pc, #200]	@ (803ac5c <gos_traceTrace+0x238>)
 803ab94:	781b      	ldrb	r3, [r3, #0]
 803ab96:	3301      	adds	r3, #1
 803ab98:	b2da      	uxtb	r2, r3
 803ab9a:	4b30      	ldr	r3, [pc, #192]	@ (803ac5c <gos_traceTrace+0x238>)
 803ab9c:	701a      	strb	r2, [r3, #0]
 803ab9e:	4b31      	ldr	r3, [pc, #196]	@ (803ac64 <gos_traceTrace+0x240>)
 803aba0:	781b      	ldrb	r3, [r3, #0]
 803aba2:	3301      	adds	r3, #1
 803aba4:	b2da      	uxtb	r2, r3
 803aba6:	4b2f      	ldr	r3, [pc, #188]	@ (803ac64 <gos_traceTrace+0x240>)
 803aba8:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 803abaa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 803abae:	f107 0282 	add.w	r2, r7, #130	@ 0x82
 803abb2:	4611      	mov	r1, r2
 803abb4:	4618      	mov	r0, r3
 803abb6:	f7fc fab7 	bl	8037128 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 803abba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 803abbe:	b21b      	sxth	r3, r3
 803abc0:	2b00      	cmp	r3, #0
 803abc2:	db13      	blt.n	803abec <gos_traceTrace+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 803abc4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 803abc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 803abcc:	4618      	mov	r0, r3
 803abce:	f7fc f947 	bl	8036e60 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 803abd2:	4b25      	ldr	r3, [pc, #148]	@ (803ac68 <gos_traceTrace+0x244>)
 803abd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803abd6:	4618      	mov	r0, r3
 803abd8:	f7fb fb7c 	bl	80362d4 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 803abdc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 803abe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 803abe4:	4618      	mov	r0, r3
 803abe6:	f7fc f9b3 	bl	8036f50 <gos_taskRemovePrivilege>
 803abea:	e004      	b.n	803abf6 <gos_traceTrace+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 803abec:	4b1e      	ldr	r3, [pc, #120]	@ (803ac68 <gos_traceTrace+0x244>)
 803abee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803abf0:	4618      	mov	r0, r3
 803abf2:	f7fb fb6f 	bl	80362d4 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 803abf6:	4b19      	ldr	r3, [pc, #100]	@ (803ac5c <gos_traceTrace+0x238>)
 803abf8:	781b      	ldrb	r3, [r3, #0]
 803abfa:	2b00      	cmp	r3, #0
 803abfc:	d005      	beq.n	803ac0a <gos_traceTrace+0x1e6>
 803abfe:	4b17      	ldr	r3, [pc, #92]	@ (803ac5c <gos_traceTrace+0x238>)
 803ac00:	781b      	ldrb	r3, [r3, #0]
 803ac02:	3b01      	subs	r3, #1
 803ac04:	b2da      	uxtb	r2, r3
 803ac06:	4b15      	ldr	r3, [pc, #84]	@ (803ac5c <gos_traceTrace+0x238>)
 803ac08:	701a      	strb	r2, [r3, #0]
 803ac0a:	4b14      	ldr	r3, [pc, #80]	@ (803ac5c <gos_traceTrace+0x238>)
 803ac0c:	781b      	ldrb	r3, [r3, #0]
 803ac0e:	2b00      	cmp	r3, #0
 803ac10:	d108      	bne.n	803ac24 <gos_traceTrace+0x200>
 803ac12:	4b13      	ldr	r3, [pc, #76]	@ (803ac60 <gos_traceTrace+0x23c>)
 803ac14:	681b      	ldr	r3, [r3, #0]
 803ac16:	f383 8810 	msr	PRIMASK, r3
 803ac1a:	b662      	cpsie	i
 803ac1c:	f3bf 8f4f 	dsb	sy
 803ac20:	f3bf 8f6f 	isb	sy
 803ac24:	4b0f      	ldr	r3, [pc, #60]	@ (803ac64 <gos_traceTrace+0x240>)
 803ac26:	781b      	ldrb	r3, [r3, #0]
 803ac28:	2b00      	cmp	r3, #0
 803ac2a:	d005      	beq.n	803ac38 <gos_traceTrace+0x214>
 803ac2c:	4b0d      	ldr	r3, [pc, #52]	@ (803ac64 <gos_traceTrace+0x240>)
 803ac2e:	781b      	ldrb	r3, [r3, #0]
 803ac30:	3b01      	subs	r3, #1
 803ac32:	b2da      	uxtb	r2, r3
 803ac34:	4b0b      	ldr	r3, [pc, #44]	@ (803ac64 <gos_traceTrace+0x240>)
 803ac36:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 803ac38:	4804      	ldr	r0, [pc, #16]	@ (803ac4c <gos_traceTrace+0x228>)
 803ac3a:	f7fd fe0f 	bl	803885c <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 803ac3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 803ac42:	4618      	mov	r0, r3
 803ac44:	378c      	adds	r7, #140	@ 0x8c
 803ac46:	46bd      	mov	sp, r7
 803ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803ac4a:	bf00      	nop
 803ac4c:	20014ed4 	.word	0x20014ed4
 803ac50:	0803fa28 	.word	0x0803fa28
 803ac54:	20014ea4 	.word	0x20014ea4
 803ac58:	200030d0 	.word	0x200030d0
 803ac5c:	2000b313 	.word	0x2000b313
 803ac60:	2000b314 	.word	0x2000b314
 803ac64:	2000b311 	.word	0x2000b311
 803ac68:	200030ec 	.word	0x200030ec

0803ac6c <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 803ac6c:	b40e      	push	{r1, r2, r3}
 803ac6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 803ac70:	b0aa      	sub	sp, #168	@ 0xa8
 803ac72:	af06      	add	r7, sp, #24
 803ac74:	4603      	mov	r3, r0
 803ac76:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 803ac78:	2355      	movs	r3, #85	@ 0x55
 803ac7a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 803ac7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 803ac82:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 803ac86:	f107 0320 	add.w	r3, r7, #32
 803ac8a:	226a      	movs	r2, #106	@ 0x6a
 803ac8c:	2100      	movs	r1, #0
 803ac8e:	4618      	mov	r0, r3
 803ac90:	f001 fa18 	bl	803c0c4 <memset>
    gos_time_t               sysTime        = {0};
 803ac94:	f107 0314 	add.w	r3, r7, #20
 803ac98:	2200      	movs	r2, #0
 803ac9a:	601a      	str	r2, [r3, #0]
 803ac9c:	605a      	str	r2, [r3, #4]
 803ac9e:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 803aca0:	2300      	movs	r3, #0
 803aca2:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 803aca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 803aca8:	2b00      	cmp	r3, #0
 803acaa:	f000 80f2 	beq.w	803ae92 <gos_traceTraceFormatted+0x226>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 803acae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 803acb2:	4618      	mov	r0, r3
 803acb4:	f7fc fae0 	bl	8037278 <gos_taskGetCurrentId>
 803acb8:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 803acba:	2b55      	cmp	r3, #85	@ 0x55
 803acbc:	f040 80e9 	bne.w	803ae92 <gos_traceTraceFormatted+0x226>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 803acc0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 803acc4:	f107 0220 	add.w	r2, r7, #32
 803acc8:	4611      	mov	r1, r2
 803acca:	4618      	mov	r0, r3
 803accc:	f7fc fb30 	bl	8037330 <gos_taskGetData>
 803acd0:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 803acd2:	2b55      	cmp	r3, #85	@ 0x55
 803acd4:	f040 80dd 	bne.w	803ae92 <gos_traceTraceFormatted+0x226>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 803acd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 803acda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 803acde:	2b00      	cmp	r3, #0
 803ace0:	d105      	bne.n	803acee <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 803ace2:	f7fa fbcb 	bl	803547c <gos_kernelIsCallerIsr>
 803ace6:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 803ace8:	2b36      	cmp	r3, #54	@ 0x36
 803acea:	f040 80d2 	bne.w	803ae92 <gos_traceTraceFormatted+0x226>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 803acee:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 803acf2:	486e      	ldr	r0, [pc, #440]	@ (803aeac <gos_traceTraceFormatted+0x240>)
 803acf4:	f7fd fcac 	bl	8038650 <gos_mutexLock>
 803acf8:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 803acfa:	2b55      	cmp	r3, #85	@ 0x55
 803acfc:	f040 80c9 	bne.w	803ae92 <gos_traceTraceFormatted+0x226>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 803ad00:	79fb      	ldrb	r3, [r7, #7]
 803ad02:	2b36      	cmp	r3, #54	@ 0x36
 803ad04:	d13f      	bne.n	803ad86 <gos_traceTraceFormatted+0x11a>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 803ad06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 803ad0a:	2b55      	cmp	r3, #85	@ 0x55
 803ad0c:	d108      	bne.n	803ad20 <gos_traceTraceFormatted+0xb4>
 803ad0e:	f107 0314 	add.w	r3, r7, #20
 803ad12:	4618      	mov	r0, r3
 803ad14:	f7ff fb02 	bl	803a31c <gos_timeGet>
 803ad18:	4603      	mov	r3, r0
 803ad1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 803ad1e:	e002      	b.n	803ad26 <gos_traceTraceFormatted+0xba>
 803ad20:	23ae      	movs	r3, #174	@ 0xae
 803ad22:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 803ad26:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 803ad28:	461d      	mov	r5, r3
                    sysTime.months,
 803ad2a:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 803ad2c:	461e      	mov	r6, r3
                    sysTime.days,
 803ad2e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 803ad32:	b29b      	uxth	r3, r3
                    sysTime.hours,
 803ad34:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 803ad36:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 803ad38:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 803ad3a:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 803ad3c:	9404      	str	r4, [sp, #16]
 803ad3e:	9003      	str	r0, [sp, #12]
 803ad40:	9102      	str	r1, [sp, #8]
 803ad42:	9201      	str	r2, [sp, #4]
 803ad44:	9300      	str	r3, [sp, #0]
 803ad46:	4633      	mov	r3, r6
 803ad48:	462a      	mov	r2, r5
 803ad4a:	4959      	ldr	r1, [pc, #356]	@ (803aeb0 <gos_traceTraceFormatted+0x244>)
 803ad4c:	4859      	ldr	r0, [pc, #356]	@ (803aeb4 <gos_traceTraceFormatted+0x248>)
 803ad4e:	f001 f935 	bl	803bfbc <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 803ad52:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 803ad56:	2b55      	cmp	r3, #85	@ 0x55
 803ad58:	d112      	bne.n	803ad80 <gos_traceTraceFormatted+0x114>
 803ad5a:	4b57      	ldr	r3, [pc, #348]	@ (803aeb8 <gos_traceTraceFormatted+0x24c>)
 803ad5c:	881c      	ldrh	r4, [r3, #0]
 803ad5e:	4855      	ldr	r0, [pc, #340]	@ (803aeb4 <gos_traceTraceFormatted+0x248>)
 803ad60:	f7e5 fab6 	bl	80202d0 <strlen>
 803ad64:	4603      	mov	r3, r0
 803ad66:	b2db      	uxtb	r3, r3
 803ad68:	3301      	adds	r3, #1
 803ad6a:	b2da      	uxtb	r2, r3
 803ad6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 803ad70:	4950      	ldr	r1, [pc, #320]	@ (803aeb4 <gos_traceTraceFormatted+0x248>)
 803ad72:	4620      	mov	r0, r4
 803ad74:	f7fd fe8c 	bl	8038a90 <gos_queuePut>
 803ad78:	4603      	mov	r3, r0
 803ad7a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 803ad7e:	e002      	b.n	803ad86 <gos_traceTraceFormatted+0x11a>
 803ad80:	23ae      	movs	r3, #174	@ 0xae
 803ad82:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 803ad86:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 803ad8a:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 803ad8c:	693a      	ldr	r2, [r7, #16]
 803ad8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 803ad92:	484a      	ldr	r0, [pc, #296]	@ (803aebc <gos_traceTraceFormatted+0x250>)
 803ad94:	f001 f98c 	bl	803c0b0 <vsiprintf>
        va_end(args);
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 803ad98:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 803ad9c:	2b55      	cmp	r3, #85	@ 0x55
 803ad9e:	d112      	bne.n	803adc6 <gos_traceTraceFormatted+0x15a>
 803ada0:	4b45      	ldr	r3, [pc, #276]	@ (803aeb8 <gos_traceTraceFormatted+0x24c>)
 803ada2:	881c      	ldrh	r4, [r3, #0]
 803ada4:	4845      	ldr	r0, [pc, #276]	@ (803aebc <gos_traceTraceFormatted+0x250>)
 803ada6:	f7e5 fa93 	bl	80202d0 <strlen>
 803adaa:	4603      	mov	r3, r0
 803adac:	b2db      	uxtb	r3, r3
 803adae:	3301      	adds	r3, #1
 803adb0:	b2da      	uxtb	r2, r3
 803adb2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 803adb6:	4941      	ldr	r1, [pc, #260]	@ (803aebc <gos_traceTraceFormatted+0x250>)
 803adb8:	4620      	mov	r0, r4
 803adba:	f7fd fe69 	bl	8038a90 <gos_queuePut>
 803adbe:	4603      	mov	r3, r0
 803adc0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 803adc4:	e002      	b.n	803adcc <gos_traceTraceFormatted+0x160>
 803adc6:	23ae      	movs	r3, #174	@ 0xae
 803adc8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 803adcc:	4b3c      	ldr	r3, [pc, #240]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803adce:	781b      	ldrb	r3, [r3, #0]
 803add0:	2b00      	cmp	r3, #0
 803add2:	d108      	bne.n	803ade6 <gos_traceTraceFormatted+0x17a>
 803add4:	b672      	cpsid	i
 803add6:	f3ef 8310 	mrs	r3, PRIMASK
 803adda:	4a3a      	ldr	r2, [pc, #232]	@ (803aec4 <gos_traceTraceFormatted+0x258>)
 803addc:	6013      	str	r3, [r2, #0]
 803adde:	f3bf 8f4f 	dsb	sy
 803ade2:	f3bf 8f6f 	isb	sy
 803ade6:	4b36      	ldr	r3, [pc, #216]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803ade8:	781b      	ldrb	r3, [r3, #0]
 803adea:	3301      	adds	r3, #1
 803adec:	b2da      	uxtb	r2, r3
 803adee:	4b34      	ldr	r3, [pc, #208]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803adf0:	701a      	strb	r2, [r3, #0]
 803adf2:	4b35      	ldr	r3, [pc, #212]	@ (803aec8 <gos_traceTraceFormatted+0x25c>)
 803adf4:	781b      	ldrb	r3, [r3, #0]
 803adf6:	3301      	adds	r3, #1
 803adf8:	b2da      	uxtb	r2, r3
 803adfa:	4b33      	ldr	r3, [pc, #204]	@ (803aec8 <gos_traceTraceFormatted+0x25c>)
 803adfc:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 803adfe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 803ae02:	f107 020e 	add.w	r2, r7, #14
 803ae06:	4611      	mov	r1, r2
 803ae08:	4618      	mov	r0, r3
 803ae0a:	f7fc f98d 	bl	8037128 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 803ae0e:	89fb      	ldrh	r3, [r7, #14]
 803ae10:	b21b      	sxth	r3, r3
 803ae12:	2b00      	cmp	r3, #0
 803ae14:	db13      	blt.n	803ae3e <gos_traceTraceFormatted+0x1d2>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 803ae16:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 803ae1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 803ae1e:	4618      	mov	r0, r3
 803ae20:	f7fc f81e 	bl	8036e60 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 803ae24:	4b29      	ldr	r3, [pc, #164]	@ (803aecc <gos_traceTraceFormatted+0x260>)
 803ae26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803ae28:	4618      	mov	r0, r3
 803ae2a:	f7fb fa53 	bl	80362d4 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 803ae2e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 803ae32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 803ae36:	4618      	mov	r0, r3
 803ae38:	f7fc f88a 	bl	8036f50 <gos_taskRemovePrivilege>
 803ae3c:	e004      	b.n	803ae48 <gos_traceTraceFormatted+0x1dc>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 803ae3e:	4b23      	ldr	r3, [pc, #140]	@ (803aecc <gos_traceTraceFormatted+0x260>)
 803ae40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803ae42:	4618      	mov	r0, r3
 803ae44:	f7fb fa46 	bl	80362d4 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 803ae48:	4b1d      	ldr	r3, [pc, #116]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803ae4a:	781b      	ldrb	r3, [r3, #0]
 803ae4c:	2b00      	cmp	r3, #0
 803ae4e:	d005      	beq.n	803ae5c <gos_traceTraceFormatted+0x1f0>
 803ae50:	4b1b      	ldr	r3, [pc, #108]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803ae52:	781b      	ldrb	r3, [r3, #0]
 803ae54:	3b01      	subs	r3, #1
 803ae56:	b2da      	uxtb	r2, r3
 803ae58:	4b19      	ldr	r3, [pc, #100]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803ae5a:	701a      	strb	r2, [r3, #0]
 803ae5c:	4b18      	ldr	r3, [pc, #96]	@ (803aec0 <gos_traceTraceFormatted+0x254>)
 803ae5e:	781b      	ldrb	r3, [r3, #0]
 803ae60:	2b00      	cmp	r3, #0
 803ae62:	d108      	bne.n	803ae76 <gos_traceTraceFormatted+0x20a>
 803ae64:	4b17      	ldr	r3, [pc, #92]	@ (803aec4 <gos_traceTraceFormatted+0x258>)
 803ae66:	681b      	ldr	r3, [r3, #0]
 803ae68:	f383 8810 	msr	PRIMASK, r3
 803ae6c:	b662      	cpsie	i
 803ae6e:	f3bf 8f4f 	dsb	sy
 803ae72:	f3bf 8f6f 	isb	sy
 803ae76:	4b14      	ldr	r3, [pc, #80]	@ (803aec8 <gos_traceTraceFormatted+0x25c>)
 803ae78:	781b      	ldrb	r3, [r3, #0]
 803ae7a:	2b00      	cmp	r3, #0
 803ae7c:	d005      	beq.n	803ae8a <gos_traceTraceFormatted+0x21e>
 803ae7e:	4b12      	ldr	r3, [pc, #72]	@ (803aec8 <gos_traceTraceFormatted+0x25c>)
 803ae80:	781b      	ldrb	r3, [r3, #0]
 803ae82:	3b01      	subs	r3, #1
 803ae84:	b2da      	uxtb	r2, r3
 803ae86:	4b10      	ldr	r3, [pc, #64]	@ (803aec8 <gos_traceTraceFormatted+0x25c>)
 803ae88:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 803ae8a:	4808      	ldr	r0, [pc, #32]	@ (803aeac <gos_traceTraceFormatted+0x240>)
 803ae8c:	f7fd fce6 	bl	803885c <gos_mutexUnlock>
 803ae90:	e002      	b.n	803ae98 <gos_traceTraceFormatted+0x22c>
    }
    else
    {
        traceResult = GOS_ERROR;
 803ae92:	23ae      	movs	r3, #174	@ 0xae
 803ae94:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return traceResult;
 803ae98:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 803ae9c:	4618      	mov	r0, r3
 803ae9e:	3790      	adds	r7, #144	@ 0x90
 803aea0:	46bd      	mov	sp, r7
 803aea2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 803aea6:	b003      	add	sp, #12
 803aea8:	4770      	bx	lr
 803aeaa:	bf00      	nop
 803aeac:	20014ed4 	.word	0x20014ed4
 803aeb0:	0803fa28 	.word	0x0803fa28
 803aeb4:	20014ea4 	.word	0x20014ea4
 803aeb8:	200030d0 	.word	0x200030d0
 803aebc:	20014ddc 	.word	0x20014ddc
 803aec0:	2000b313 	.word	0x2000b313
 803aec4:	2000b314 	.word	0x2000b314
 803aec8:	2000b311 	.word	0x2000b311
 803aecc:	200030ec 	.word	0x200030ec

0803aed0 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 803aed0:	b40f      	push	{r0, r1, r2, r3}
 803aed2:	b580      	push	{r7, lr}
 803aed4:	b082      	sub	sp, #8
 803aed6:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 803aed8:	23ae      	movs	r3, #174	@ 0xae
 803aeda:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 803aedc:	693b      	ldr	r3, [r7, #16]
 803aede:	2b00      	cmp	r3, #0
 803aee0:	d01c      	beq.n	803af1c <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 803aee2:	4b12      	ldr	r3, [pc, #72]	@ (803af2c <gos_traceTraceFormattedUnsafe+0x5c>)
 803aee4:	781b      	ldrb	r3, [r3, #0]
 803aee6:	3301      	adds	r3, #1
 803aee8:	b2da      	uxtb	r2, r3
 803aeea:	4b10      	ldr	r3, [pc, #64]	@ (803af2c <gos_traceTraceFormattedUnsafe+0x5c>)
 803aeec:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 803aeee:	f107 0314 	add.w	r3, r7, #20
 803aef2:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 803aef4:	683a      	ldr	r2, [r7, #0]
 803aef6:	6939      	ldr	r1, [r7, #16]
 803aef8:	480d      	ldr	r0, [pc, #52]	@ (803af30 <gos_traceTraceFormattedUnsafe+0x60>)
 803aefa:	f001 f8d9 	bl	803c0b0 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 803aefe:	480c      	ldr	r0, [pc, #48]	@ (803af30 <gos_traceTraceFormattedUnsafe+0x60>)
 803af00:	f7f9 fc1e 	bl	8034740 <gos_traceDriverTransmitString_Unsafe>
 803af04:	4603      	mov	r3, r0
 803af06:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 803af08:	4b08      	ldr	r3, [pc, #32]	@ (803af2c <gos_traceTraceFormattedUnsafe+0x5c>)
 803af0a:	781b      	ldrb	r3, [r3, #0]
 803af0c:	2b00      	cmp	r3, #0
 803af0e:	d005      	beq.n	803af1c <gos_traceTraceFormattedUnsafe+0x4c>
 803af10:	4b06      	ldr	r3, [pc, #24]	@ (803af2c <gos_traceTraceFormattedUnsafe+0x5c>)
 803af12:	781b      	ldrb	r3, [r3, #0]
 803af14:	3b01      	subs	r3, #1
 803af16:	b2da      	uxtb	r2, r3
 803af18:	4b04      	ldr	r3, [pc, #16]	@ (803af2c <gos_traceTraceFormattedUnsafe+0x5c>)
 803af1a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 803af1c:	79fb      	ldrb	r3, [r7, #7]
}
 803af1e:	4618      	mov	r0, r3
 803af20:	3708      	adds	r7, #8
 803af22:	46bd      	mov	sp, r7
 803af24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803af28:	b004      	add	sp, #16
 803af2a:	4770      	bx	lr
 803af2c:	2000b311 	.word	0x2000b311
 803af30:	20014ddc 	.word	0x20014ddc

0803af34 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 803af34:	b580      	push	{r7, lr}
 803af36:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 803af38:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 803af3c:	480e      	ldr	r0, [pc, #56]	@ (803af78 <gos_traceDaemonTask+0x44>)
 803af3e:	f7fd fb87 	bl	8038650 <gos_mutexLock>
 803af42:	4603      	mov	r3, r0
 803af44:	2b55      	cmp	r3, #85	@ 0x55
 803af46:	d10e      	bne.n	803af66 <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 803af48:	e002      	b.n	803af50 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 803af4a:	480c      	ldr	r0, [pc, #48]	@ (803af7c <gos_traceDaemonTask+0x48>)
 803af4c:	f7f9 fbe0 	bl	8034710 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 803af50:	4b0b      	ldr	r3, [pc, #44]	@ (803af80 <gos_traceDaemonTask+0x4c>)
 803af52:	8818      	ldrh	r0, [r3, #0]
 803af54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 803af58:	22c8      	movs	r2, #200	@ 0xc8
 803af5a:	4908      	ldr	r1, [pc, #32]	@ (803af7c <gos_traceDaemonTask+0x48>)
 803af5c:	f7fd fe66 	bl	8038c2c <gos_queueGet>
 803af60:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 803af62:	2b55      	cmp	r3, #85	@ 0x55
 803af64:	d0f1      	beq.n	803af4a <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 803af66:	4804      	ldr	r0, [pc, #16]	@ (803af78 <gos_traceDaemonTask+0x44>)
 803af68:	f7fd fc78 	bl	803885c <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 803af6c:	4b05      	ldr	r3, [pc, #20]	@ (803af84 <gos_traceDaemonTask+0x50>)
 803af6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 803af70:	4618      	mov	r0, r3
 803af72:	f7fb f88d 	bl	8036090 <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 803af76:	e7df      	b.n	803af38 <gos_traceDaemonTask+0x4>
 803af78:	20014ed4 	.word	0x20014ed4
 803af7c:	20014d14 	.word	0x20014d14
 803af80:	200030d0 	.word	0x200030d0
 803af84:	200030ec 	.word	0x200030ec

0803af88 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 803af88:	b480      	push	{r7}
 803af8a:	b085      	sub	sp, #20
 803af8c:	af00      	add	r7, sp, #0
 803af8e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 803af90:	23ae      	movs	r3, #174	@ 0xae
 803af92:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 803af94:	687b      	ldr	r3, [r7, #4]
 803af96:	2b00      	cmp	r3, #0
 803af98:	d00b      	beq.n	803afb2 <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 803af9a:	687b      	ldr	r3, [r7, #4]
 803af9c:	2200      	movs	r2, #0
 803af9e:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 803afa0:	687b      	ldr	r3, [r7, #4]
 803afa2:	2200      	movs	r2, #0
 803afa4:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 803afa6:	687b      	ldr	r3, [r7, #4]
 803afa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 803afac:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 803afae:	2355      	movs	r3, #85	@ 0x55
 803afb0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 803afb2:	7bfb      	ldrb	r3, [r7, #15]
}
 803afb4:	4618      	mov	r0, r3
 803afb6:	3714      	adds	r7, #20
 803afb8:	46bd      	mov	sp, r7
 803afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803afbe:	4770      	bx	lr

0803afc0 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 803afc0:	b480      	push	{r7}
 803afc2:	b085      	sub	sp, #20
 803afc4:	af00      	add	r7, sp, #0
 803afc6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 803afc8:	23ae      	movs	r3, #174	@ 0xae
 803afca:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 803afcc:	687b      	ldr	r3, [r7, #4]
 803afce:	2b00      	cmp	r3, #0
 803afd0:	d041      	beq.n	803b056 <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 803afd2:	4b24      	ldr	r3, [pc, #144]	@ (803b064 <gos_triggerReset+0xa4>)
 803afd4:	781b      	ldrb	r3, [r3, #0]
 803afd6:	2b00      	cmp	r3, #0
 803afd8:	d108      	bne.n	803afec <gos_triggerReset+0x2c>
 803afda:	b672      	cpsid	i
 803afdc:	f3ef 8310 	mrs	r3, PRIMASK
 803afe0:	4a21      	ldr	r2, [pc, #132]	@ (803b068 <gos_triggerReset+0xa8>)
 803afe2:	6013      	str	r3, [r2, #0]
 803afe4:	f3bf 8f4f 	dsb	sy
 803afe8:	f3bf 8f6f 	isb	sy
 803afec:	4b1d      	ldr	r3, [pc, #116]	@ (803b064 <gos_triggerReset+0xa4>)
 803afee:	781b      	ldrb	r3, [r3, #0]
 803aff0:	3301      	adds	r3, #1
 803aff2:	b2da      	uxtb	r2, r3
 803aff4:	4b1b      	ldr	r3, [pc, #108]	@ (803b064 <gos_triggerReset+0xa4>)
 803aff6:	701a      	strb	r2, [r3, #0]
 803aff8:	4b1c      	ldr	r3, [pc, #112]	@ (803b06c <gos_triggerReset+0xac>)
 803affa:	781b      	ldrb	r3, [r3, #0]
 803affc:	3301      	adds	r3, #1
 803affe:	b2da      	uxtb	r2, r3
 803b000:	4b1a      	ldr	r3, [pc, #104]	@ (803b06c <gos_triggerReset+0xac>)
 803b002:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 803b004:	687b      	ldr	r3, [r7, #4]
 803b006:	2200      	movs	r2, #0
 803b008:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 803b00a:	687b      	ldr	r3, [r7, #4]
 803b00c:	2200      	movs	r2, #0
 803b00e:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 803b010:	2355      	movs	r3, #85	@ 0x55
 803b012:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 803b014:	4b13      	ldr	r3, [pc, #76]	@ (803b064 <gos_triggerReset+0xa4>)
 803b016:	781b      	ldrb	r3, [r3, #0]
 803b018:	2b00      	cmp	r3, #0
 803b01a:	d005      	beq.n	803b028 <gos_triggerReset+0x68>
 803b01c:	4b11      	ldr	r3, [pc, #68]	@ (803b064 <gos_triggerReset+0xa4>)
 803b01e:	781b      	ldrb	r3, [r3, #0]
 803b020:	3b01      	subs	r3, #1
 803b022:	b2da      	uxtb	r2, r3
 803b024:	4b0f      	ldr	r3, [pc, #60]	@ (803b064 <gos_triggerReset+0xa4>)
 803b026:	701a      	strb	r2, [r3, #0]
 803b028:	4b0e      	ldr	r3, [pc, #56]	@ (803b064 <gos_triggerReset+0xa4>)
 803b02a:	781b      	ldrb	r3, [r3, #0]
 803b02c:	2b00      	cmp	r3, #0
 803b02e:	d108      	bne.n	803b042 <gos_triggerReset+0x82>
 803b030:	4b0d      	ldr	r3, [pc, #52]	@ (803b068 <gos_triggerReset+0xa8>)
 803b032:	681b      	ldr	r3, [r3, #0]
 803b034:	f383 8810 	msr	PRIMASK, r3
 803b038:	b662      	cpsie	i
 803b03a:	f3bf 8f4f 	dsb	sy
 803b03e:	f3bf 8f6f 	isb	sy
 803b042:	4b0a      	ldr	r3, [pc, #40]	@ (803b06c <gos_triggerReset+0xac>)
 803b044:	781b      	ldrb	r3, [r3, #0]
 803b046:	2b00      	cmp	r3, #0
 803b048:	d005      	beq.n	803b056 <gos_triggerReset+0x96>
 803b04a:	4b08      	ldr	r3, [pc, #32]	@ (803b06c <gos_triggerReset+0xac>)
 803b04c:	781b      	ldrb	r3, [r3, #0]
 803b04e:	3b01      	subs	r3, #1
 803b050:	b2da      	uxtb	r2, r3
 803b052:	4b06      	ldr	r3, [pc, #24]	@ (803b06c <gos_triggerReset+0xac>)
 803b054:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 803b056:	7bfb      	ldrb	r3, [r7, #15]
}
 803b058:	4618      	mov	r0, r3
 803b05a:	3714      	adds	r7, #20
 803b05c:	46bd      	mov	sp, r7
 803b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b062:	4770      	bx	lr
 803b064:	2000b313 	.word	0x2000b313
 803b068:	2000b314 	.word	0x2000b314
 803b06c:	2000b311 	.word	0x2000b311

0803b070 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 803b070:	b580      	push	{r7, lr}
 803b072:	b086      	sub	sp, #24
 803b074:	af00      	add	r7, sp, #0
 803b076:	60f8      	str	r0, [r7, #12]
 803b078:	60b9      	str	r1, [r7, #8]
 803b07a:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 803b07c:	23ae      	movs	r3, #174	@ 0xae
 803b07e:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 803b080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 803b084:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 803b086:	68fb      	ldr	r3, [r7, #12]
 803b088:	2b00      	cmp	r3, #0
 803b08a:	f000 8096 	beq.w	803b1ba <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 803b08e:	4b4d      	ldr	r3, [pc, #308]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b090:	781b      	ldrb	r3, [r3, #0]
 803b092:	2b00      	cmp	r3, #0
 803b094:	d108      	bne.n	803b0a8 <gos_triggerWait+0x38>
 803b096:	b672      	cpsid	i
 803b098:	f3ef 8310 	mrs	r3, PRIMASK
 803b09c:	4a4a      	ldr	r2, [pc, #296]	@ (803b1c8 <gos_triggerWait+0x158>)
 803b09e:	6013      	str	r3, [r2, #0]
 803b0a0:	f3bf 8f4f 	dsb	sy
 803b0a4:	f3bf 8f6f 	isb	sy
 803b0a8:	4b46      	ldr	r3, [pc, #280]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b0aa:	781b      	ldrb	r3, [r3, #0]
 803b0ac:	3301      	adds	r3, #1
 803b0ae:	b2da      	uxtb	r2, r3
 803b0b0:	4b44      	ldr	r3, [pc, #272]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b0b2:	701a      	strb	r2, [r3, #0]
 803b0b4:	4b45      	ldr	r3, [pc, #276]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b0b6:	781b      	ldrb	r3, [r3, #0]
 803b0b8:	3301      	adds	r3, #1
 803b0ba:	b2da      	uxtb	r2, r3
 803b0bc:	4b43      	ldr	r3, [pc, #268]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b0be:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 803b0c0:	f107 0314 	add.w	r3, r7, #20
 803b0c4:	4618      	mov	r0, r3
 803b0c6:	f7fc f8d7 	bl	8037278 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 803b0ca:	8aba      	ldrh	r2, [r7, #20]
 803b0cc:	68fb      	ldr	r3, [r7, #12]
 803b0ce:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 803b0d0:	68fb      	ldr	r3, [r7, #12]
 803b0d2:	68ba      	ldr	r2, [r7, #8]
 803b0d4:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 803b0d6:	4b3b      	ldr	r3, [pc, #236]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b0d8:	781b      	ldrb	r3, [r3, #0]
 803b0da:	2b00      	cmp	r3, #0
 803b0dc:	d005      	beq.n	803b0ea <gos_triggerWait+0x7a>
 803b0de:	4b39      	ldr	r3, [pc, #228]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b0e0:	781b      	ldrb	r3, [r3, #0]
 803b0e2:	3b01      	subs	r3, #1
 803b0e4:	b2da      	uxtb	r2, r3
 803b0e6:	4b37      	ldr	r3, [pc, #220]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b0e8:	701a      	strb	r2, [r3, #0]
 803b0ea:	4b36      	ldr	r3, [pc, #216]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b0ec:	781b      	ldrb	r3, [r3, #0]
 803b0ee:	2b00      	cmp	r3, #0
 803b0f0:	d108      	bne.n	803b104 <gos_triggerWait+0x94>
 803b0f2:	4b35      	ldr	r3, [pc, #212]	@ (803b1c8 <gos_triggerWait+0x158>)
 803b0f4:	681b      	ldr	r3, [r3, #0]
 803b0f6:	f383 8810 	msr	PRIMASK, r3
 803b0fa:	b662      	cpsie	i
 803b0fc:	f3bf 8f4f 	dsb	sy
 803b100:	f3bf 8f6f 	isb	sy
 803b104:	4b31      	ldr	r3, [pc, #196]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b106:	781b      	ldrb	r3, [r3, #0]
 803b108:	2b00      	cmp	r3, #0
 803b10a:	d005      	beq.n	803b118 <gos_triggerWait+0xa8>
 803b10c:	4b2f      	ldr	r3, [pc, #188]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b10e:	781b      	ldrb	r3, [r3, #0]
 803b110:	3b01      	subs	r3, #1
 803b112:	b2da      	uxtb	r2, r3
 803b114:	4b2d      	ldr	r3, [pc, #180]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b116:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 803b118:	68fb      	ldr	r3, [r7, #12]
 803b11a:	681a      	ldr	r2, [r3, #0]
 803b11c:	68fb      	ldr	r3, [r7, #12]
 803b11e:	685b      	ldr	r3, [r3, #4]
 803b120:	429a      	cmp	r2, r3
 803b122:	d204      	bcs.n	803b12e <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 803b124:	8abb      	ldrh	r3, [r7, #20]
 803b126:	6879      	ldr	r1, [r7, #4]
 803b128:	4618      	mov	r0, r3
 803b12a:	f7fb f981 	bl	8036430 <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 803b12e:	4b25      	ldr	r3, [pc, #148]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b130:	781b      	ldrb	r3, [r3, #0]
 803b132:	2b00      	cmp	r3, #0
 803b134:	d108      	bne.n	803b148 <gos_triggerWait+0xd8>
 803b136:	b672      	cpsid	i
 803b138:	f3ef 8310 	mrs	r3, PRIMASK
 803b13c:	4a22      	ldr	r2, [pc, #136]	@ (803b1c8 <gos_triggerWait+0x158>)
 803b13e:	6013      	str	r3, [r2, #0]
 803b140:	f3bf 8f4f 	dsb	sy
 803b144:	f3bf 8f6f 	isb	sy
 803b148:	4b1e      	ldr	r3, [pc, #120]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b14a:	781b      	ldrb	r3, [r3, #0]
 803b14c:	3301      	adds	r3, #1
 803b14e:	b2da      	uxtb	r2, r3
 803b150:	4b1c      	ldr	r3, [pc, #112]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b152:	701a      	strb	r2, [r3, #0]
 803b154:	4b1d      	ldr	r3, [pc, #116]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b156:	781b      	ldrb	r3, [r3, #0]
 803b158:	3301      	adds	r3, #1
 803b15a:	b2da      	uxtb	r2, r3
 803b15c:	4b1b      	ldr	r3, [pc, #108]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b15e:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 803b160:	68fb      	ldr	r3, [r7, #12]
 803b162:	681a      	ldr	r2, [r3, #0]
 803b164:	68fb      	ldr	r3, [r7, #12]
 803b166:	685b      	ldr	r3, [r3, #4]
 803b168:	429a      	cmp	r2, r3
 803b16a:	d105      	bne.n	803b178 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 803b16c:	2355      	movs	r3, #85	@ 0x55
 803b16e:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 803b170:	68fb      	ldr	r3, [r7, #12]
 803b172:	f44f 7280 	mov.w	r2, #256	@ 0x100
 803b176:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 803b178:	4b12      	ldr	r3, [pc, #72]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b17a:	781b      	ldrb	r3, [r3, #0]
 803b17c:	2b00      	cmp	r3, #0
 803b17e:	d005      	beq.n	803b18c <gos_triggerWait+0x11c>
 803b180:	4b10      	ldr	r3, [pc, #64]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b182:	781b      	ldrb	r3, [r3, #0]
 803b184:	3b01      	subs	r3, #1
 803b186:	b2da      	uxtb	r2, r3
 803b188:	4b0e      	ldr	r3, [pc, #56]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b18a:	701a      	strb	r2, [r3, #0]
 803b18c:	4b0d      	ldr	r3, [pc, #52]	@ (803b1c4 <gos_triggerWait+0x154>)
 803b18e:	781b      	ldrb	r3, [r3, #0]
 803b190:	2b00      	cmp	r3, #0
 803b192:	d108      	bne.n	803b1a6 <gos_triggerWait+0x136>
 803b194:	4b0c      	ldr	r3, [pc, #48]	@ (803b1c8 <gos_triggerWait+0x158>)
 803b196:	681b      	ldr	r3, [r3, #0]
 803b198:	f383 8810 	msr	PRIMASK, r3
 803b19c:	b662      	cpsie	i
 803b19e:	f3bf 8f4f 	dsb	sy
 803b1a2:	f3bf 8f6f 	isb	sy
 803b1a6:	4b09      	ldr	r3, [pc, #36]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b1a8:	781b      	ldrb	r3, [r3, #0]
 803b1aa:	2b00      	cmp	r3, #0
 803b1ac:	d005      	beq.n	803b1ba <gos_triggerWait+0x14a>
 803b1ae:	4b07      	ldr	r3, [pc, #28]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b1b0:	781b      	ldrb	r3, [r3, #0]
 803b1b2:	3b01      	subs	r3, #1
 803b1b4:	b2da      	uxtb	r2, r3
 803b1b6:	4b05      	ldr	r3, [pc, #20]	@ (803b1cc <gos_triggerWait+0x15c>)
 803b1b8:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 803b1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 803b1bc:	4618      	mov	r0, r3
 803b1be:	3718      	adds	r7, #24
 803b1c0:	46bd      	mov	sp, r7
 803b1c2:	bd80      	pop	{r7, pc}
 803b1c4:	2000b313 	.word	0x2000b313
 803b1c8:	2000b314 	.word	0x2000b314
 803b1cc:	2000b311 	.word	0x2000b311

0803b1d0 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 803b1d0:	b580      	push	{r7, lr}
 803b1d2:	b084      	sub	sp, #16
 803b1d4:	af00      	add	r7, sp, #0
 803b1d6:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 803b1d8:	23ae      	movs	r3, #174	@ 0xae
 803b1da:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 803b1dc:	687b      	ldr	r3, [r7, #4]
 803b1de:	2b00      	cmp	r3, #0
 803b1e0:	d073      	beq.n	803b2ca <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 803b1e2:	4b3c      	ldr	r3, [pc, #240]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b1e4:	781b      	ldrb	r3, [r3, #0]
 803b1e6:	2b00      	cmp	r3, #0
 803b1e8:	d108      	bne.n	803b1fc <gos_triggerIncrement+0x2c>
 803b1ea:	b672      	cpsid	i
 803b1ec:	f3ef 8310 	mrs	r3, PRIMASK
 803b1f0:	4a39      	ldr	r2, [pc, #228]	@ (803b2d8 <gos_triggerIncrement+0x108>)
 803b1f2:	6013      	str	r3, [r2, #0]
 803b1f4:	f3bf 8f4f 	dsb	sy
 803b1f8:	f3bf 8f6f 	isb	sy
 803b1fc:	4b35      	ldr	r3, [pc, #212]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b1fe:	781b      	ldrb	r3, [r3, #0]
 803b200:	3301      	adds	r3, #1
 803b202:	b2da      	uxtb	r2, r3
 803b204:	4b33      	ldr	r3, [pc, #204]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b206:	701a      	strb	r2, [r3, #0]
 803b208:	4b34      	ldr	r3, [pc, #208]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b20a:	781b      	ldrb	r3, [r3, #0]
 803b20c:	3301      	adds	r3, #1
 803b20e:	b2da      	uxtb	r2, r3
 803b210:	4b32      	ldr	r3, [pc, #200]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b212:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 803b214:	687b      	ldr	r3, [r7, #4]
 803b216:	681b      	ldr	r3, [r3, #0]
 803b218:	1c5a      	adds	r2, r3, #1
 803b21a:	687b      	ldr	r3, [r7, #4]
 803b21c:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 803b21e:	687b      	ldr	r3, [r7, #4]
 803b220:	681a      	ldr	r2, [r3, #0]
 803b222:	687b      	ldr	r3, [r7, #4]
 803b224:	685b      	ldr	r3, [r3, #4]
 803b226:	429a      	cmp	r2, r3
 803b228:	d12c      	bne.n	803b284 <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 803b22a:	4b2d      	ldr	r3, [pc, #180]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b22c:	781b      	ldrb	r3, [r3, #0]
 803b22e:	2b00      	cmp	r3, #0
 803b230:	d105      	bne.n	803b23e <gos_triggerIncrement+0x6e>
 803b232:	4b2a      	ldr	r3, [pc, #168]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b234:	781b      	ldrb	r3, [r3, #0]
 803b236:	3301      	adds	r3, #1
 803b238:	b2da      	uxtb	r2, r3
 803b23a:	4b28      	ldr	r3, [pc, #160]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b23c:	701a      	strb	r2, [r3, #0]
 803b23e:	4b28      	ldr	r3, [pc, #160]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b240:	781b      	ldrb	r3, [r3, #0]
 803b242:	3301      	adds	r3, #1
 803b244:	b2da      	uxtb	r2, r3
 803b246:	4b26      	ldr	r3, [pc, #152]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b248:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 803b24a:	687b      	ldr	r3, [r7, #4]
 803b24c:	891b      	ldrh	r3, [r3, #8]
 803b24e:	4618      	mov	r0, r3
 803b250:	f7fb fa00 	bl	8036654 <gos_taskUnblock>

            GOS_ISR_EXIT
 803b254:	4b22      	ldr	r3, [pc, #136]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b256:	781b      	ldrb	r3, [r3, #0]
 803b258:	2b00      	cmp	r3, #0
 803b25a:	d005      	beq.n	803b268 <gos_triggerIncrement+0x98>
 803b25c:	4b20      	ldr	r3, [pc, #128]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b25e:	781b      	ldrb	r3, [r3, #0]
 803b260:	3b01      	subs	r3, #1
 803b262:	b2da      	uxtb	r2, r3
 803b264:	4b1e      	ldr	r3, [pc, #120]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b266:	701a      	strb	r2, [r3, #0]
 803b268:	4b1d      	ldr	r3, [pc, #116]	@ (803b2e0 <gos_triggerIncrement+0x110>)
 803b26a:	781b      	ldrb	r3, [r3, #0]
 803b26c:	2b00      	cmp	r3, #0
 803b26e:	d109      	bne.n	803b284 <gos_triggerIncrement+0xb4>
 803b270:	4b1a      	ldr	r3, [pc, #104]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b272:	781b      	ldrb	r3, [r3, #0]
 803b274:	2b00      	cmp	r3, #0
 803b276:	d005      	beq.n	803b284 <gos_triggerIncrement+0xb4>
 803b278:	4b18      	ldr	r3, [pc, #96]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b27a:	781b      	ldrb	r3, [r3, #0]
 803b27c:	3b01      	subs	r3, #1
 803b27e:	b2da      	uxtb	r2, r3
 803b280:	4b16      	ldr	r3, [pc, #88]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b282:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 803b284:	2355      	movs	r3, #85	@ 0x55
 803b286:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 803b288:	4b12      	ldr	r3, [pc, #72]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b28a:	781b      	ldrb	r3, [r3, #0]
 803b28c:	2b00      	cmp	r3, #0
 803b28e:	d005      	beq.n	803b29c <gos_triggerIncrement+0xcc>
 803b290:	4b10      	ldr	r3, [pc, #64]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b292:	781b      	ldrb	r3, [r3, #0]
 803b294:	3b01      	subs	r3, #1
 803b296:	b2da      	uxtb	r2, r3
 803b298:	4b0e      	ldr	r3, [pc, #56]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b29a:	701a      	strb	r2, [r3, #0]
 803b29c:	4b0d      	ldr	r3, [pc, #52]	@ (803b2d4 <gos_triggerIncrement+0x104>)
 803b29e:	781b      	ldrb	r3, [r3, #0]
 803b2a0:	2b00      	cmp	r3, #0
 803b2a2:	d108      	bne.n	803b2b6 <gos_triggerIncrement+0xe6>
 803b2a4:	4b0c      	ldr	r3, [pc, #48]	@ (803b2d8 <gos_triggerIncrement+0x108>)
 803b2a6:	681b      	ldr	r3, [r3, #0]
 803b2a8:	f383 8810 	msr	PRIMASK, r3
 803b2ac:	b662      	cpsie	i
 803b2ae:	f3bf 8f4f 	dsb	sy
 803b2b2:	f3bf 8f6f 	isb	sy
 803b2b6:	4b09      	ldr	r3, [pc, #36]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b2b8:	781b      	ldrb	r3, [r3, #0]
 803b2ba:	2b00      	cmp	r3, #0
 803b2bc:	d005      	beq.n	803b2ca <gos_triggerIncrement+0xfa>
 803b2be:	4b07      	ldr	r3, [pc, #28]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b2c0:	781b      	ldrb	r3, [r3, #0]
 803b2c2:	3b01      	subs	r3, #1
 803b2c4:	b2da      	uxtb	r2, r3
 803b2c6:	4b05      	ldr	r3, [pc, #20]	@ (803b2dc <gos_triggerIncrement+0x10c>)
 803b2c8:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 803b2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 803b2cc:	4618      	mov	r0, r3
 803b2ce:	3710      	adds	r7, #16
 803b2d0:	46bd      	mov	sp, r7
 803b2d2:	bd80      	pop	{r7, pc}
 803b2d4:	2000b313 	.word	0x2000b313
 803b2d8:	2000b314 	.word	0x2000b314
 803b2dc:	2000b311 	.word	0x2000b311
 803b2e0:	2000b312 	.word	0x2000b312

0803b2e4 <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 803b2e4:	b480      	push	{r7}
 803b2e6:	b087      	sub	sp, #28
 803b2e8:	af00      	add	r7, sp, #0
 803b2ea:	6078      	str	r0, [r7, #4]
 803b2ec:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 803b2ee:	f04f 33ff 	mov.w	r3, #4294967295
 803b2f2:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 803b2f4:	2300      	movs	r3, #0
 803b2f6:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 803b2f8:	2300      	movs	r3, #0
 803b2fa:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 803b2fc:	2300      	movs	r3, #0
 803b2fe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 803b300:	2300      	movs	r3, #0
 803b302:	613b      	str	r3, [r7, #16]
 803b304:	e01e      	b.n	803b344 <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 803b306:	687a      	ldr	r2, [r7, #4]
 803b308:	693b      	ldr	r3, [r7, #16]
 803b30a:	4413      	add	r3, r2
 803b30c:	781b      	ldrb	r3, [r3, #0]
 803b30e:	461a      	mov	r2, r3
 803b310:	697b      	ldr	r3, [r7, #20]
 803b312:	4053      	eors	r3, r2
 803b314:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 803b316:	2308      	movs	r3, #8
 803b318:	73fb      	strb	r3, [r7, #15]
 803b31a:	e00d      	b.n	803b338 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 803b31c:	697b      	ldr	r3, [r7, #20]
 803b31e:	f003 0301 	and.w	r3, r3, #1
 803b322:	425b      	negs	r3, r3
 803b324:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 803b326:	68ba      	ldr	r2, [r7, #8]
 803b328:	4b0c      	ldr	r3, [pc, #48]	@ (803b35c <gos_crcDriverGetCrc+0x78>)
 803b32a:	4013      	ands	r3, r2
 803b32c:	697a      	ldr	r2, [r7, #20]
 803b32e:	4053      	eors	r3, r2
 803b330:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 803b332:	7bfb      	ldrb	r3, [r7, #15]
 803b334:	3b01      	subs	r3, #1
 803b336:	73fb      	strb	r3, [r7, #15]
 803b338:	7bfb      	ldrb	r3, [r7, #15]
 803b33a:	2b00      	cmp	r3, #0
 803b33c:	d1ee      	bne.n	803b31c <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 803b33e:	693b      	ldr	r3, [r7, #16]
 803b340:	3301      	adds	r3, #1
 803b342:	613b      	str	r3, [r7, #16]
 803b344:	693a      	ldr	r2, [r7, #16]
 803b346:	683b      	ldr	r3, [r7, #0]
 803b348:	429a      	cmp	r2, r3
 803b34a:	d3dc      	bcc.n	803b306 <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 803b34c:	697b      	ldr	r3, [r7, #20]
 803b34e:	43db      	mvns	r3, r3
}
 803b350:	4618      	mov	r0, r3
 803b352:	371c      	adds	r7, #28
 803b354:	46bd      	mov	sp, r7
 803b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b35a:	4770      	bx	lr
 803b35c:	edb88320 	.word	0xedb88320

0803b360 <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 803b360:	b580      	push	{r7, lr}
 803b362:	b084      	sub	sp, #16
 803b364:	af00      	add	r7, sp, #0
 803b366:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 803b368:	23ae      	movs	r3, #174	@ 0xae
 803b36a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 803b36c:	4b07      	ldr	r3, [pc, #28]	@ (803b38c <gos_shellDriverReceiveChar+0x2c>)
 803b36e:	681b      	ldr	r3, [r3, #0]
 803b370:	2b00      	cmp	r3, #0
 803b372:	d005      	beq.n	803b380 <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 803b374:	4b05      	ldr	r3, [pc, #20]	@ (803b38c <gos_shellDriverReceiveChar+0x2c>)
 803b376:	681b      	ldr	r3, [r3, #0]
 803b378:	6878      	ldr	r0, [r7, #4]
 803b37a:	4798      	blx	r3
 803b37c:	4603      	mov	r3, r0
 803b37e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return shellDriverReceiveResult;
 803b380:	7bfb      	ldrb	r3, [r7, #15]
}
 803b382:	4618      	mov	r0, r3
 803b384:	3710      	adds	r7, #16
 803b386:	46bd      	mov	sp, r7
 803b388:	bd80      	pop	{r7, pc}
 803b38a:	bf00      	nop
 803b38c:	2000b2f4 	.word	0x2000b2f4

0803b390 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 803b390:	b40f      	push	{r0, r1, r2, r3}
 803b392:	b580      	push	{r7, lr}
 803b394:	b082      	sub	sp, #8
 803b396:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 803b398:	23ae      	movs	r3, #174	@ 0xae
 803b39a:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 803b39c:	f107 0314 	add.w	r3, r7, #20
 803b3a0:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 803b3a2:	683a      	ldr	r2, [r7, #0]
 803b3a4:	6939      	ldr	r1, [r7, #16]
 803b3a6:	480a      	ldr	r0, [pc, #40]	@ (803b3d0 <gos_shellDriverTransmitString+0x40>)
 803b3a8:	f000 fe82 	bl	803c0b0 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 803b3ac:	4b09      	ldr	r3, [pc, #36]	@ (803b3d4 <gos_shellDriverTransmitString+0x44>)
 803b3ae:	685b      	ldr	r3, [r3, #4]
 803b3b0:	2b00      	cmp	r3, #0
 803b3b2:	d005      	beq.n	803b3c0 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 803b3b4:	4b07      	ldr	r3, [pc, #28]	@ (803b3d4 <gos_shellDriverTransmitString+0x44>)
 803b3b6:	685b      	ldr	r3, [r3, #4]
 803b3b8:	4805      	ldr	r0, [pc, #20]	@ (803b3d0 <gos_shellDriverTransmitString+0x40>)
 803b3ba:	4798      	blx	r3
 803b3bc:	4603      	mov	r3, r0
 803b3be:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 803b3c0:	79fb      	ldrb	r3, [r7, #7]
}
 803b3c2:	4618      	mov	r0, r3
 803b3c4:	3708      	adds	r7, #8
 803b3c6:	46bd      	mov	sp, r7
 803b3c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803b3cc:	b004      	add	sp, #16
 803b3ce:	4770      	bx	lr
 803b3d0:	20014ed8 	.word	0x20014ed8
 803b3d4:	2000b2f4 	.word	0x2000b2f4

0803b3d8 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 803b3d8:	b580      	push	{r7, lr}
 803b3da:	b084      	sub	sp, #16
 803b3dc:	af00      	add	r7, sp, #0
 803b3de:	6078      	str	r0, [r7, #4]
 803b3e0:	460b      	mov	r3, r1
 803b3e2:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 803b3e4:	23ae      	movs	r3, #174	@ 0xae
 803b3e6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 803b3e8:	4b08      	ldr	r3, [pc, #32]	@ (803b40c <gos_sysmonDriverReceive+0x34>)
 803b3ea:	699b      	ldr	r3, [r3, #24]
 803b3ec:	2b00      	cmp	r3, #0
 803b3ee:	d007      	beq.n	803b400 <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 803b3f0:	4b06      	ldr	r3, [pc, #24]	@ (803b40c <gos_sysmonDriverReceive+0x34>)
 803b3f2:	699b      	ldr	r3, [r3, #24]
 803b3f4:	887a      	ldrh	r2, [r7, #2]
 803b3f6:	4611      	mov	r1, r2
 803b3f8:	6878      	ldr	r0, [r7, #4]
 803b3fa:	4798      	blx	r3
 803b3fc:	4603      	mov	r3, r0
 803b3fe:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 803b400:	7bfb      	ldrb	r3, [r7, #15]
}
 803b402:	4618      	mov	r0, r3
 803b404:	3710      	adds	r7, #16
 803b406:	46bd      	mov	sp, r7
 803b408:	bd80      	pop	{r7, pc}
 803b40a:	bf00      	nop
 803b40c:	2000b2f4 	.word	0x2000b2f4

0803b410 <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 803b410:	b580      	push	{r7, lr}
 803b412:	b084      	sub	sp, #16
 803b414:	af00      	add	r7, sp, #0
 803b416:	6078      	str	r0, [r7, #4]
 803b418:	460b      	mov	r3, r1
 803b41a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 803b41c:	23ae      	movs	r3, #174	@ 0xae
 803b41e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 803b420:	4b08      	ldr	r3, [pc, #32]	@ (803b444 <gos_sysmonDriverTransmit+0x34>)
 803b422:	695b      	ldr	r3, [r3, #20]
 803b424:	2b00      	cmp	r3, #0
 803b426:	d007      	beq.n	803b438 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 803b428:	4b06      	ldr	r3, [pc, #24]	@ (803b444 <gos_sysmonDriverTransmit+0x34>)
 803b42a:	695b      	ldr	r3, [r3, #20]
 803b42c:	887a      	ldrh	r2, [r7, #2]
 803b42e:	4611      	mov	r1, r2
 803b430:	6878      	ldr	r0, [r7, #4]
 803b432:	4798      	blx	r3
 803b434:	4603      	mov	r3, r0
 803b436:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 803b438:	7bfb      	ldrb	r3, [r7, #15]
}
 803b43a:	4618      	mov	r0, r3
 803b43c:	3710      	adds	r7, #16
 803b43e:	46bd      	mov	sp, r7
 803b440:	bd80      	pop	{r7, pc}
 803b442:	bf00      	nop
 803b444:	2000b2f4 	.word	0x2000b2f4

0803b448 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 803b448:	b580      	push	{r7, lr}
 803b44a:	b084      	sub	sp, #16
 803b44c:	af00      	add	r7, sp, #0
 803b44e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 803b450:	23ae      	movs	r3, #174	@ 0xae
 803b452:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 803b454:	4b07      	ldr	r3, [pc, #28]	@ (803b474 <gos_timerDriverSysTimerGet+0x2c>)
 803b456:	691b      	ldr	r3, [r3, #16]
 803b458:	2b00      	cmp	r3, #0
 803b45a:	d005      	beq.n	803b468 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 803b45c:	4b05      	ldr	r3, [pc, #20]	@ (803b474 <gos_timerDriverSysTimerGet+0x2c>)
 803b45e:	691b      	ldr	r3, [r3, #16]
 803b460:	6878      	ldr	r0, [r7, #4]
 803b462:	4798      	blx	r3
 803b464:	4603      	mov	r3, r0
 803b466:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 803b468:	7bfb      	ldrb	r3, [r7, #15]
}
 803b46a:	4618      	mov	r0, r3
 803b46c:	3710      	adds	r7, #16
 803b46e:	46bd      	mov	sp, r7
 803b470:	bd80      	pop	{r7, pc}
 803b472:	bf00      	nop
 803b474:	2000b2f4 	.word	0x2000b2f4

0803b478 <atoi>:
 803b478:	220a      	movs	r2, #10
 803b47a:	2100      	movs	r1, #0
 803b47c:	f000 b87a 	b.w	803b574 <strtol>

0803b480 <_strtol_l.constprop.0>:
 803b480:	2b24      	cmp	r3, #36	@ 0x24
 803b482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803b486:	4686      	mov	lr, r0
 803b488:	4690      	mov	r8, r2
 803b48a:	d801      	bhi.n	803b490 <_strtol_l.constprop.0+0x10>
 803b48c:	2b01      	cmp	r3, #1
 803b48e:	d106      	bne.n	803b49e <_strtol_l.constprop.0+0x1e>
 803b490:	f000 fe6a 	bl	803c168 <__errno>
 803b494:	2316      	movs	r3, #22
 803b496:	6003      	str	r3, [r0, #0]
 803b498:	2000      	movs	r0, #0
 803b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b49e:	4834      	ldr	r0, [pc, #208]	@ (803b570 <_strtol_l.constprop.0+0xf0>)
 803b4a0:	460d      	mov	r5, r1
 803b4a2:	462a      	mov	r2, r5
 803b4a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 803b4a8:	5d06      	ldrb	r6, [r0, r4]
 803b4aa:	f016 0608 	ands.w	r6, r6, #8
 803b4ae:	d1f8      	bne.n	803b4a2 <_strtol_l.constprop.0+0x22>
 803b4b0:	2c2d      	cmp	r4, #45	@ 0x2d
 803b4b2:	d12d      	bne.n	803b510 <_strtol_l.constprop.0+0x90>
 803b4b4:	782c      	ldrb	r4, [r5, #0]
 803b4b6:	2601      	movs	r6, #1
 803b4b8:	1c95      	adds	r5, r2, #2
 803b4ba:	f033 0210 	bics.w	r2, r3, #16
 803b4be:	d109      	bne.n	803b4d4 <_strtol_l.constprop.0+0x54>
 803b4c0:	2c30      	cmp	r4, #48	@ 0x30
 803b4c2:	d12a      	bne.n	803b51a <_strtol_l.constprop.0+0x9a>
 803b4c4:	782a      	ldrb	r2, [r5, #0]
 803b4c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803b4ca:	2a58      	cmp	r2, #88	@ 0x58
 803b4cc:	d125      	bne.n	803b51a <_strtol_l.constprop.0+0x9a>
 803b4ce:	786c      	ldrb	r4, [r5, #1]
 803b4d0:	2310      	movs	r3, #16
 803b4d2:	3502      	adds	r5, #2
 803b4d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 803b4d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 803b4dc:	2200      	movs	r2, #0
 803b4de:	fbbc f9f3 	udiv	r9, ip, r3
 803b4e2:	4610      	mov	r0, r2
 803b4e4:	fb03 ca19 	mls	sl, r3, r9, ip
 803b4e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 803b4ec:	2f09      	cmp	r7, #9
 803b4ee:	d81b      	bhi.n	803b528 <_strtol_l.constprop.0+0xa8>
 803b4f0:	463c      	mov	r4, r7
 803b4f2:	42a3      	cmp	r3, r4
 803b4f4:	dd27      	ble.n	803b546 <_strtol_l.constprop.0+0xc6>
 803b4f6:	1c57      	adds	r7, r2, #1
 803b4f8:	d007      	beq.n	803b50a <_strtol_l.constprop.0+0x8a>
 803b4fa:	4581      	cmp	r9, r0
 803b4fc:	d320      	bcc.n	803b540 <_strtol_l.constprop.0+0xc0>
 803b4fe:	d101      	bne.n	803b504 <_strtol_l.constprop.0+0x84>
 803b500:	45a2      	cmp	sl, r4
 803b502:	db1d      	blt.n	803b540 <_strtol_l.constprop.0+0xc0>
 803b504:	fb00 4003 	mla	r0, r0, r3, r4
 803b508:	2201      	movs	r2, #1
 803b50a:	f815 4b01 	ldrb.w	r4, [r5], #1
 803b50e:	e7eb      	b.n	803b4e8 <_strtol_l.constprop.0+0x68>
 803b510:	2c2b      	cmp	r4, #43	@ 0x2b
 803b512:	bf04      	itt	eq
 803b514:	782c      	ldrbeq	r4, [r5, #0]
 803b516:	1c95      	addeq	r5, r2, #2
 803b518:	e7cf      	b.n	803b4ba <_strtol_l.constprop.0+0x3a>
 803b51a:	2b00      	cmp	r3, #0
 803b51c:	d1da      	bne.n	803b4d4 <_strtol_l.constprop.0+0x54>
 803b51e:	2c30      	cmp	r4, #48	@ 0x30
 803b520:	bf0c      	ite	eq
 803b522:	2308      	moveq	r3, #8
 803b524:	230a      	movne	r3, #10
 803b526:	e7d5      	b.n	803b4d4 <_strtol_l.constprop.0+0x54>
 803b528:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 803b52c:	2f19      	cmp	r7, #25
 803b52e:	d801      	bhi.n	803b534 <_strtol_l.constprop.0+0xb4>
 803b530:	3c37      	subs	r4, #55	@ 0x37
 803b532:	e7de      	b.n	803b4f2 <_strtol_l.constprop.0+0x72>
 803b534:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 803b538:	2f19      	cmp	r7, #25
 803b53a:	d804      	bhi.n	803b546 <_strtol_l.constprop.0+0xc6>
 803b53c:	3c57      	subs	r4, #87	@ 0x57
 803b53e:	e7d8      	b.n	803b4f2 <_strtol_l.constprop.0+0x72>
 803b540:	f04f 32ff 	mov.w	r2, #4294967295
 803b544:	e7e1      	b.n	803b50a <_strtol_l.constprop.0+0x8a>
 803b546:	1c53      	adds	r3, r2, #1
 803b548:	d108      	bne.n	803b55c <_strtol_l.constprop.0+0xdc>
 803b54a:	2322      	movs	r3, #34	@ 0x22
 803b54c:	f8ce 3000 	str.w	r3, [lr]
 803b550:	4660      	mov	r0, ip
 803b552:	f1b8 0f00 	cmp.w	r8, #0
 803b556:	d0a0      	beq.n	803b49a <_strtol_l.constprop.0+0x1a>
 803b558:	1e69      	subs	r1, r5, #1
 803b55a:	e006      	b.n	803b56a <_strtol_l.constprop.0+0xea>
 803b55c:	b106      	cbz	r6, 803b560 <_strtol_l.constprop.0+0xe0>
 803b55e:	4240      	negs	r0, r0
 803b560:	f1b8 0f00 	cmp.w	r8, #0
 803b564:	d099      	beq.n	803b49a <_strtol_l.constprop.0+0x1a>
 803b566:	2a00      	cmp	r2, #0
 803b568:	d1f6      	bne.n	803b558 <_strtol_l.constprop.0+0xd8>
 803b56a:	f8c8 1000 	str.w	r1, [r8]
 803b56e:	e794      	b.n	803b49a <_strtol_l.constprop.0+0x1a>
 803b570:	08040985 	.word	0x08040985

0803b574 <strtol>:
 803b574:	4613      	mov	r3, r2
 803b576:	460a      	mov	r2, r1
 803b578:	4601      	mov	r1, r0
 803b57a:	4802      	ldr	r0, [pc, #8]	@ (803b584 <strtol+0x10>)
 803b57c:	6800      	ldr	r0, [r0, #0]
 803b57e:	f7ff bf7f 	b.w	803b480 <_strtol_l.constprop.0>
 803b582:	bf00      	nop
 803b584:	20003164 	.word	0x20003164

0803b588 <__cvt>:
 803b588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803b58c:	ec57 6b10 	vmov	r6, r7, d0
 803b590:	2f00      	cmp	r7, #0
 803b592:	460c      	mov	r4, r1
 803b594:	4619      	mov	r1, r3
 803b596:	463b      	mov	r3, r7
 803b598:	bfbb      	ittet	lt
 803b59a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 803b59e:	461f      	movlt	r7, r3
 803b5a0:	2300      	movge	r3, #0
 803b5a2:	232d      	movlt	r3, #45	@ 0x2d
 803b5a4:	700b      	strb	r3, [r1, #0]
 803b5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b5a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 803b5ac:	4691      	mov	r9, r2
 803b5ae:	f023 0820 	bic.w	r8, r3, #32
 803b5b2:	bfbc      	itt	lt
 803b5b4:	4632      	movlt	r2, r6
 803b5b6:	4616      	movlt	r6, r2
 803b5b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 803b5bc:	d005      	beq.n	803b5ca <__cvt+0x42>
 803b5be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 803b5c2:	d100      	bne.n	803b5c6 <__cvt+0x3e>
 803b5c4:	3401      	adds	r4, #1
 803b5c6:	2102      	movs	r1, #2
 803b5c8:	e000      	b.n	803b5cc <__cvt+0x44>
 803b5ca:	2103      	movs	r1, #3
 803b5cc:	ab03      	add	r3, sp, #12
 803b5ce:	9301      	str	r3, [sp, #4]
 803b5d0:	ab02      	add	r3, sp, #8
 803b5d2:	9300      	str	r3, [sp, #0]
 803b5d4:	ec47 6b10 	vmov	d0, r6, r7
 803b5d8:	4653      	mov	r3, sl
 803b5da:	4622      	mov	r2, r4
 803b5dc:	f000 fe90 	bl	803c300 <_dtoa_r>
 803b5e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 803b5e4:	4605      	mov	r5, r0
 803b5e6:	d119      	bne.n	803b61c <__cvt+0x94>
 803b5e8:	f019 0f01 	tst.w	r9, #1
 803b5ec:	d00e      	beq.n	803b60c <__cvt+0x84>
 803b5ee:	eb00 0904 	add.w	r9, r0, r4
 803b5f2:	2200      	movs	r2, #0
 803b5f4:	2300      	movs	r3, #0
 803b5f6:	4630      	mov	r0, r6
 803b5f8:	4639      	mov	r1, r7
 803b5fa:	f7e5 fa95 	bl	8020b28 <__aeabi_dcmpeq>
 803b5fe:	b108      	cbz	r0, 803b604 <__cvt+0x7c>
 803b600:	f8cd 900c 	str.w	r9, [sp, #12]
 803b604:	2230      	movs	r2, #48	@ 0x30
 803b606:	9b03      	ldr	r3, [sp, #12]
 803b608:	454b      	cmp	r3, r9
 803b60a:	d31e      	bcc.n	803b64a <__cvt+0xc2>
 803b60c:	9b03      	ldr	r3, [sp, #12]
 803b60e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803b610:	1b5b      	subs	r3, r3, r5
 803b612:	4628      	mov	r0, r5
 803b614:	6013      	str	r3, [r2, #0]
 803b616:	b004      	add	sp, #16
 803b618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b61c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 803b620:	eb00 0904 	add.w	r9, r0, r4
 803b624:	d1e5      	bne.n	803b5f2 <__cvt+0x6a>
 803b626:	7803      	ldrb	r3, [r0, #0]
 803b628:	2b30      	cmp	r3, #48	@ 0x30
 803b62a:	d10a      	bne.n	803b642 <__cvt+0xba>
 803b62c:	2200      	movs	r2, #0
 803b62e:	2300      	movs	r3, #0
 803b630:	4630      	mov	r0, r6
 803b632:	4639      	mov	r1, r7
 803b634:	f7e5 fa78 	bl	8020b28 <__aeabi_dcmpeq>
 803b638:	b918      	cbnz	r0, 803b642 <__cvt+0xba>
 803b63a:	f1c4 0401 	rsb	r4, r4, #1
 803b63e:	f8ca 4000 	str.w	r4, [sl]
 803b642:	f8da 3000 	ldr.w	r3, [sl]
 803b646:	4499      	add	r9, r3
 803b648:	e7d3      	b.n	803b5f2 <__cvt+0x6a>
 803b64a:	1c59      	adds	r1, r3, #1
 803b64c:	9103      	str	r1, [sp, #12]
 803b64e:	701a      	strb	r2, [r3, #0]
 803b650:	e7d9      	b.n	803b606 <__cvt+0x7e>

0803b652 <__exponent>:
 803b652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803b654:	2900      	cmp	r1, #0
 803b656:	bfba      	itte	lt
 803b658:	4249      	neglt	r1, r1
 803b65a:	232d      	movlt	r3, #45	@ 0x2d
 803b65c:	232b      	movge	r3, #43	@ 0x2b
 803b65e:	2909      	cmp	r1, #9
 803b660:	7002      	strb	r2, [r0, #0]
 803b662:	7043      	strb	r3, [r0, #1]
 803b664:	dd29      	ble.n	803b6ba <__exponent+0x68>
 803b666:	f10d 0307 	add.w	r3, sp, #7
 803b66a:	461d      	mov	r5, r3
 803b66c:	270a      	movs	r7, #10
 803b66e:	461a      	mov	r2, r3
 803b670:	fbb1 f6f7 	udiv	r6, r1, r7
 803b674:	fb07 1416 	mls	r4, r7, r6, r1
 803b678:	3430      	adds	r4, #48	@ 0x30
 803b67a:	f802 4c01 	strb.w	r4, [r2, #-1]
 803b67e:	460c      	mov	r4, r1
 803b680:	2c63      	cmp	r4, #99	@ 0x63
 803b682:	f103 33ff 	add.w	r3, r3, #4294967295
 803b686:	4631      	mov	r1, r6
 803b688:	dcf1      	bgt.n	803b66e <__exponent+0x1c>
 803b68a:	3130      	adds	r1, #48	@ 0x30
 803b68c:	1e94      	subs	r4, r2, #2
 803b68e:	f803 1c01 	strb.w	r1, [r3, #-1]
 803b692:	1c41      	adds	r1, r0, #1
 803b694:	4623      	mov	r3, r4
 803b696:	42ab      	cmp	r3, r5
 803b698:	d30a      	bcc.n	803b6b0 <__exponent+0x5e>
 803b69a:	f10d 0309 	add.w	r3, sp, #9
 803b69e:	1a9b      	subs	r3, r3, r2
 803b6a0:	42ac      	cmp	r4, r5
 803b6a2:	bf88      	it	hi
 803b6a4:	2300      	movhi	r3, #0
 803b6a6:	3302      	adds	r3, #2
 803b6a8:	4403      	add	r3, r0
 803b6aa:	1a18      	subs	r0, r3, r0
 803b6ac:	b003      	add	sp, #12
 803b6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803b6b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 803b6b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 803b6b8:	e7ed      	b.n	803b696 <__exponent+0x44>
 803b6ba:	2330      	movs	r3, #48	@ 0x30
 803b6bc:	3130      	adds	r1, #48	@ 0x30
 803b6be:	7083      	strb	r3, [r0, #2]
 803b6c0:	70c1      	strb	r1, [r0, #3]
 803b6c2:	1d03      	adds	r3, r0, #4
 803b6c4:	e7f1      	b.n	803b6aa <__exponent+0x58>
	...

0803b6c8 <_printf_float>:
 803b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b6cc:	b08d      	sub	sp, #52	@ 0x34
 803b6ce:	460c      	mov	r4, r1
 803b6d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 803b6d4:	4616      	mov	r6, r2
 803b6d6:	461f      	mov	r7, r3
 803b6d8:	4605      	mov	r5, r0
 803b6da:	f000 fcfb 	bl	803c0d4 <_localeconv_r>
 803b6de:	6803      	ldr	r3, [r0, #0]
 803b6e0:	9304      	str	r3, [sp, #16]
 803b6e2:	4618      	mov	r0, r3
 803b6e4:	f7e4 fdf4 	bl	80202d0 <strlen>
 803b6e8:	2300      	movs	r3, #0
 803b6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 803b6ec:	f8d8 3000 	ldr.w	r3, [r8]
 803b6f0:	9005      	str	r0, [sp, #20]
 803b6f2:	3307      	adds	r3, #7
 803b6f4:	f023 0307 	bic.w	r3, r3, #7
 803b6f8:	f103 0208 	add.w	r2, r3, #8
 803b6fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 803b700:	f8d4 b000 	ldr.w	fp, [r4]
 803b704:	f8c8 2000 	str.w	r2, [r8]
 803b708:	e9d3 8900 	ldrd	r8, r9, [r3]
 803b70c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 803b710:	9307      	str	r3, [sp, #28]
 803b712:	f8cd 8018 	str.w	r8, [sp, #24]
 803b716:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 803b71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 803b71e:	4b9c      	ldr	r3, [pc, #624]	@ (803b990 <_printf_float+0x2c8>)
 803b720:	f04f 32ff 	mov.w	r2, #4294967295
 803b724:	f7e5 fa32 	bl	8020b8c <__aeabi_dcmpun>
 803b728:	bb70      	cbnz	r0, 803b788 <_printf_float+0xc0>
 803b72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 803b72e:	4b98      	ldr	r3, [pc, #608]	@ (803b990 <_printf_float+0x2c8>)
 803b730:	f04f 32ff 	mov.w	r2, #4294967295
 803b734:	f7e5 fa0c 	bl	8020b50 <__aeabi_dcmple>
 803b738:	bb30      	cbnz	r0, 803b788 <_printf_float+0xc0>
 803b73a:	2200      	movs	r2, #0
 803b73c:	2300      	movs	r3, #0
 803b73e:	4640      	mov	r0, r8
 803b740:	4649      	mov	r1, r9
 803b742:	f7e5 f9fb 	bl	8020b3c <__aeabi_dcmplt>
 803b746:	b110      	cbz	r0, 803b74e <_printf_float+0x86>
 803b748:	232d      	movs	r3, #45	@ 0x2d
 803b74a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803b74e:	4a91      	ldr	r2, [pc, #580]	@ (803b994 <_printf_float+0x2cc>)
 803b750:	4b91      	ldr	r3, [pc, #580]	@ (803b998 <_printf_float+0x2d0>)
 803b752:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 803b756:	bf94      	ite	ls
 803b758:	4690      	movls	r8, r2
 803b75a:	4698      	movhi	r8, r3
 803b75c:	2303      	movs	r3, #3
 803b75e:	6123      	str	r3, [r4, #16]
 803b760:	f02b 0304 	bic.w	r3, fp, #4
 803b764:	6023      	str	r3, [r4, #0]
 803b766:	f04f 0900 	mov.w	r9, #0
 803b76a:	9700      	str	r7, [sp, #0]
 803b76c:	4633      	mov	r3, r6
 803b76e:	aa0b      	add	r2, sp, #44	@ 0x2c
 803b770:	4621      	mov	r1, r4
 803b772:	4628      	mov	r0, r5
 803b774:	f000 f9d2 	bl	803bb1c <_printf_common>
 803b778:	3001      	adds	r0, #1
 803b77a:	f040 808d 	bne.w	803b898 <_printf_float+0x1d0>
 803b77e:	f04f 30ff 	mov.w	r0, #4294967295
 803b782:	b00d      	add	sp, #52	@ 0x34
 803b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803b788:	4642      	mov	r2, r8
 803b78a:	464b      	mov	r3, r9
 803b78c:	4640      	mov	r0, r8
 803b78e:	4649      	mov	r1, r9
 803b790:	f7e5 f9fc 	bl	8020b8c <__aeabi_dcmpun>
 803b794:	b140      	cbz	r0, 803b7a8 <_printf_float+0xe0>
 803b796:	464b      	mov	r3, r9
 803b798:	2b00      	cmp	r3, #0
 803b79a:	bfbc      	itt	lt
 803b79c:	232d      	movlt	r3, #45	@ 0x2d
 803b79e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 803b7a2:	4a7e      	ldr	r2, [pc, #504]	@ (803b99c <_printf_float+0x2d4>)
 803b7a4:	4b7e      	ldr	r3, [pc, #504]	@ (803b9a0 <_printf_float+0x2d8>)
 803b7a6:	e7d4      	b.n	803b752 <_printf_float+0x8a>
 803b7a8:	6863      	ldr	r3, [r4, #4]
 803b7aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 803b7ae:	9206      	str	r2, [sp, #24]
 803b7b0:	1c5a      	adds	r2, r3, #1
 803b7b2:	d13b      	bne.n	803b82c <_printf_float+0x164>
 803b7b4:	2306      	movs	r3, #6
 803b7b6:	6063      	str	r3, [r4, #4]
 803b7b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 803b7bc:	2300      	movs	r3, #0
 803b7be:	6022      	str	r2, [r4, #0]
 803b7c0:	9303      	str	r3, [sp, #12]
 803b7c2:	ab0a      	add	r3, sp, #40	@ 0x28
 803b7c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 803b7c8:	ab09      	add	r3, sp, #36	@ 0x24
 803b7ca:	9300      	str	r3, [sp, #0]
 803b7cc:	6861      	ldr	r1, [r4, #4]
 803b7ce:	ec49 8b10 	vmov	d0, r8, r9
 803b7d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 803b7d6:	4628      	mov	r0, r5
 803b7d8:	f7ff fed6 	bl	803b588 <__cvt>
 803b7dc:	9b06      	ldr	r3, [sp, #24]
 803b7de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803b7e0:	2b47      	cmp	r3, #71	@ 0x47
 803b7e2:	4680      	mov	r8, r0
 803b7e4:	d129      	bne.n	803b83a <_printf_float+0x172>
 803b7e6:	1cc8      	adds	r0, r1, #3
 803b7e8:	db02      	blt.n	803b7f0 <_printf_float+0x128>
 803b7ea:	6863      	ldr	r3, [r4, #4]
 803b7ec:	4299      	cmp	r1, r3
 803b7ee:	dd41      	ble.n	803b874 <_printf_float+0x1ac>
 803b7f0:	f1aa 0a02 	sub.w	sl, sl, #2
 803b7f4:	fa5f fa8a 	uxtb.w	sl, sl
 803b7f8:	3901      	subs	r1, #1
 803b7fa:	4652      	mov	r2, sl
 803b7fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 803b800:	9109      	str	r1, [sp, #36]	@ 0x24
 803b802:	f7ff ff26 	bl	803b652 <__exponent>
 803b806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803b808:	1813      	adds	r3, r2, r0
 803b80a:	2a01      	cmp	r2, #1
 803b80c:	4681      	mov	r9, r0
 803b80e:	6123      	str	r3, [r4, #16]
 803b810:	dc02      	bgt.n	803b818 <_printf_float+0x150>
 803b812:	6822      	ldr	r2, [r4, #0]
 803b814:	07d2      	lsls	r2, r2, #31
 803b816:	d501      	bpl.n	803b81c <_printf_float+0x154>
 803b818:	3301      	adds	r3, #1
 803b81a:	6123      	str	r3, [r4, #16]
 803b81c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 803b820:	2b00      	cmp	r3, #0
 803b822:	d0a2      	beq.n	803b76a <_printf_float+0xa2>
 803b824:	232d      	movs	r3, #45	@ 0x2d
 803b826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803b82a:	e79e      	b.n	803b76a <_printf_float+0xa2>
 803b82c:	9a06      	ldr	r2, [sp, #24]
 803b82e:	2a47      	cmp	r2, #71	@ 0x47
 803b830:	d1c2      	bne.n	803b7b8 <_printf_float+0xf0>
 803b832:	2b00      	cmp	r3, #0
 803b834:	d1c0      	bne.n	803b7b8 <_printf_float+0xf0>
 803b836:	2301      	movs	r3, #1
 803b838:	e7bd      	b.n	803b7b6 <_printf_float+0xee>
 803b83a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 803b83e:	d9db      	bls.n	803b7f8 <_printf_float+0x130>
 803b840:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 803b844:	d118      	bne.n	803b878 <_printf_float+0x1b0>
 803b846:	2900      	cmp	r1, #0
 803b848:	6863      	ldr	r3, [r4, #4]
 803b84a:	dd0b      	ble.n	803b864 <_printf_float+0x19c>
 803b84c:	6121      	str	r1, [r4, #16]
 803b84e:	b913      	cbnz	r3, 803b856 <_printf_float+0x18e>
 803b850:	6822      	ldr	r2, [r4, #0]
 803b852:	07d0      	lsls	r0, r2, #31
 803b854:	d502      	bpl.n	803b85c <_printf_float+0x194>
 803b856:	3301      	adds	r3, #1
 803b858:	440b      	add	r3, r1
 803b85a:	6123      	str	r3, [r4, #16]
 803b85c:	65a1      	str	r1, [r4, #88]	@ 0x58
 803b85e:	f04f 0900 	mov.w	r9, #0
 803b862:	e7db      	b.n	803b81c <_printf_float+0x154>
 803b864:	b913      	cbnz	r3, 803b86c <_printf_float+0x1a4>
 803b866:	6822      	ldr	r2, [r4, #0]
 803b868:	07d2      	lsls	r2, r2, #31
 803b86a:	d501      	bpl.n	803b870 <_printf_float+0x1a8>
 803b86c:	3302      	adds	r3, #2
 803b86e:	e7f4      	b.n	803b85a <_printf_float+0x192>
 803b870:	2301      	movs	r3, #1
 803b872:	e7f2      	b.n	803b85a <_printf_float+0x192>
 803b874:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 803b878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803b87a:	4299      	cmp	r1, r3
 803b87c:	db05      	blt.n	803b88a <_printf_float+0x1c2>
 803b87e:	6823      	ldr	r3, [r4, #0]
 803b880:	6121      	str	r1, [r4, #16]
 803b882:	07d8      	lsls	r0, r3, #31
 803b884:	d5ea      	bpl.n	803b85c <_printf_float+0x194>
 803b886:	1c4b      	adds	r3, r1, #1
 803b888:	e7e7      	b.n	803b85a <_printf_float+0x192>
 803b88a:	2900      	cmp	r1, #0
 803b88c:	bfd4      	ite	le
 803b88e:	f1c1 0202 	rsble	r2, r1, #2
 803b892:	2201      	movgt	r2, #1
 803b894:	4413      	add	r3, r2
 803b896:	e7e0      	b.n	803b85a <_printf_float+0x192>
 803b898:	6823      	ldr	r3, [r4, #0]
 803b89a:	055a      	lsls	r2, r3, #21
 803b89c:	d407      	bmi.n	803b8ae <_printf_float+0x1e6>
 803b89e:	6923      	ldr	r3, [r4, #16]
 803b8a0:	4642      	mov	r2, r8
 803b8a2:	4631      	mov	r1, r6
 803b8a4:	4628      	mov	r0, r5
 803b8a6:	47b8      	blx	r7
 803b8a8:	3001      	adds	r0, #1
 803b8aa:	d12b      	bne.n	803b904 <_printf_float+0x23c>
 803b8ac:	e767      	b.n	803b77e <_printf_float+0xb6>
 803b8ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 803b8b2:	f240 80dd 	bls.w	803ba70 <_printf_float+0x3a8>
 803b8b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 803b8ba:	2200      	movs	r2, #0
 803b8bc:	2300      	movs	r3, #0
 803b8be:	f7e5 f933 	bl	8020b28 <__aeabi_dcmpeq>
 803b8c2:	2800      	cmp	r0, #0
 803b8c4:	d033      	beq.n	803b92e <_printf_float+0x266>
 803b8c6:	4a37      	ldr	r2, [pc, #220]	@ (803b9a4 <_printf_float+0x2dc>)
 803b8c8:	2301      	movs	r3, #1
 803b8ca:	4631      	mov	r1, r6
 803b8cc:	4628      	mov	r0, r5
 803b8ce:	47b8      	blx	r7
 803b8d0:	3001      	adds	r0, #1
 803b8d2:	f43f af54 	beq.w	803b77e <_printf_float+0xb6>
 803b8d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 803b8da:	4543      	cmp	r3, r8
 803b8dc:	db02      	blt.n	803b8e4 <_printf_float+0x21c>
 803b8de:	6823      	ldr	r3, [r4, #0]
 803b8e0:	07d8      	lsls	r0, r3, #31
 803b8e2:	d50f      	bpl.n	803b904 <_printf_float+0x23c>
 803b8e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803b8e8:	4631      	mov	r1, r6
 803b8ea:	4628      	mov	r0, r5
 803b8ec:	47b8      	blx	r7
 803b8ee:	3001      	adds	r0, #1
 803b8f0:	f43f af45 	beq.w	803b77e <_printf_float+0xb6>
 803b8f4:	f04f 0900 	mov.w	r9, #0
 803b8f8:	f108 38ff 	add.w	r8, r8, #4294967295
 803b8fc:	f104 0a1a 	add.w	sl, r4, #26
 803b900:	45c8      	cmp	r8, r9
 803b902:	dc09      	bgt.n	803b918 <_printf_float+0x250>
 803b904:	6823      	ldr	r3, [r4, #0]
 803b906:	079b      	lsls	r3, r3, #30
 803b908:	f100 8103 	bmi.w	803bb12 <_printf_float+0x44a>
 803b90c:	68e0      	ldr	r0, [r4, #12]
 803b90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803b910:	4298      	cmp	r0, r3
 803b912:	bfb8      	it	lt
 803b914:	4618      	movlt	r0, r3
 803b916:	e734      	b.n	803b782 <_printf_float+0xba>
 803b918:	2301      	movs	r3, #1
 803b91a:	4652      	mov	r2, sl
 803b91c:	4631      	mov	r1, r6
 803b91e:	4628      	mov	r0, r5
 803b920:	47b8      	blx	r7
 803b922:	3001      	adds	r0, #1
 803b924:	f43f af2b 	beq.w	803b77e <_printf_float+0xb6>
 803b928:	f109 0901 	add.w	r9, r9, #1
 803b92c:	e7e8      	b.n	803b900 <_printf_float+0x238>
 803b92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b930:	2b00      	cmp	r3, #0
 803b932:	dc39      	bgt.n	803b9a8 <_printf_float+0x2e0>
 803b934:	4a1b      	ldr	r2, [pc, #108]	@ (803b9a4 <_printf_float+0x2dc>)
 803b936:	2301      	movs	r3, #1
 803b938:	4631      	mov	r1, r6
 803b93a:	4628      	mov	r0, r5
 803b93c:	47b8      	blx	r7
 803b93e:	3001      	adds	r0, #1
 803b940:	f43f af1d 	beq.w	803b77e <_printf_float+0xb6>
 803b944:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 803b948:	ea59 0303 	orrs.w	r3, r9, r3
 803b94c:	d102      	bne.n	803b954 <_printf_float+0x28c>
 803b94e:	6823      	ldr	r3, [r4, #0]
 803b950:	07d9      	lsls	r1, r3, #31
 803b952:	d5d7      	bpl.n	803b904 <_printf_float+0x23c>
 803b954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803b958:	4631      	mov	r1, r6
 803b95a:	4628      	mov	r0, r5
 803b95c:	47b8      	blx	r7
 803b95e:	3001      	adds	r0, #1
 803b960:	f43f af0d 	beq.w	803b77e <_printf_float+0xb6>
 803b964:	f04f 0a00 	mov.w	sl, #0
 803b968:	f104 0b1a 	add.w	fp, r4, #26
 803b96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b96e:	425b      	negs	r3, r3
 803b970:	4553      	cmp	r3, sl
 803b972:	dc01      	bgt.n	803b978 <_printf_float+0x2b0>
 803b974:	464b      	mov	r3, r9
 803b976:	e793      	b.n	803b8a0 <_printf_float+0x1d8>
 803b978:	2301      	movs	r3, #1
 803b97a:	465a      	mov	r2, fp
 803b97c:	4631      	mov	r1, r6
 803b97e:	4628      	mov	r0, r5
 803b980:	47b8      	blx	r7
 803b982:	3001      	adds	r0, #1
 803b984:	f43f aefb 	beq.w	803b77e <_printf_float+0xb6>
 803b988:	f10a 0a01 	add.w	sl, sl, #1
 803b98c:	e7ee      	b.n	803b96c <_printf_float+0x2a4>
 803b98e:	bf00      	nop
 803b990:	7fefffff 	.word	0x7fefffff
 803b994:	08040a85 	.word	0x08040a85
 803b998:	08040a89 	.word	0x08040a89
 803b99c:	08040a8d 	.word	0x08040a8d
 803b9a0:	08040a91 	.word	0x08040a91
 803b9a4:	08040a95 	.word	0x08040a95
 803b9a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803b9aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 803b9ae:	4553      	cmp	r3, sl
 803b9b0:	bfa8      	it	ge
 803b9b2:	4653      	movge	r3, sl
 803b9b4:	2b00      	cmp	r3, #0
 803b9b6:	4699      	mov	r9, r3
 803b9b8:	dc36      	bgt.n	803ba28 <_printf_float+0x360>
 803b9ba:	f04f 0b00 	mov.w	fp, #0
 803b9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803b9c2:	f104 021a 	add.w	r2, r4, #26
 803b9c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803b9c8:	9306      	str	r3, [sp, #24]
 803b9ca:	eba3 0309 	sub.w	r3, r3, r9
 803b9ce:	455b      	cmp	r3, fp
 803b9d0:	dc31      	bgt.n	803ba36 <_printf_float+0x36e>
 803b9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b9d4:	459a      	cmp	sl, r3
 803b9d6:	dc3a      	bgt.n	803ba4e <_printf_float+0x386>
 803b9d8:	6823      	ldr	r3, [r4, #0]
 803b9da:	07da      	lsls	r2, r3, #31
 803b9dc:	d437      	bmi.n	803ba4e <_printf_float+0x386>
 803b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b9e0:	ebaa 0903 	sub.w	r9, sl, r3
 803b9e4:	9b06      	ldr	r3, [sp, #24]
 803b9e6:	ebaa 0303 	sub.w	r3, sl, r3
 803b9ea:	4599      	cmp	r9, r3
 803b9ec:	bfa8      	it	ge
 803b9ee:	4699      	movge	r9, r3
 803b9f0:	f1b9 0f00 	cmp.w	r9, #0
 803b9f4:	dc33      	bgt.n	803ba5e <_printf_float+0x396>
 803b9f6:	f04f 0800 	mov.w	r8, #0
 803b9fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803b9fe:	f104 0b1a 	add.w	fp, r4, #26
 803ba02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ba04:	ebaa 0303 	sub.w	r3, sl, r3
 803ba08:	eba3 0309 	sub.w	r3, r3, r9
 803ba0c:	4543      	cmp	r3, r8
 803ba0e:	f77f af79 	ble.w	803b904 <_printf_float+0x23c>
 803ba12:	2301      	movs	r3, #1
 803ba14:	465a      	mov	r2, fp
 803ba16:	4631      	mov	r1, r6
 803ba18:	4628      	mov	r0, r5
 803ba1a:	47b8      	blx	r7
 803ba1c:	3001      	adds	r0, #1
 803ba1e:	f43f aeae 	beq.w	803b77e <_printf_float+0xb6>
 803ba22:	f108 0801 	add.w	r8, r8, #1
 803ba26:	e7ec      	b.n	803ba02 <_printf_float+0x33a>
 803ba28:	4642      	mov	r2, r8
 803ba2a:	4631      	mov	r1, r6
 803ba2c:	4628      	mov	r0, r5
 803ba2e:	47b8      	blx	r7
 803ba30:	3001      	adds	r0, #1
 803ba32:	d1c2      	bne.n	803b9ba <_printf_float+0x2f2>
 803ba34:	e6a3      	b.n	803b77e <_printf_float+0xb6>
 803ba36:	2301      	movs	r3, #1
 803ba38:	4631      	mov	r1, r6
 803ba3a:	4628      	mov	r0, r5
 803ba3c:	9206      	str	r2, [sp, #24]
 803ba3e:	47b8      	blx	r7
 803ba40:	3001      	adds	r0, #1
 803ba42:	f43f ae9c 	beq.w	803b77e <_printf_float+0xb6>
 803ba46:	9a06      	ldr	r2, [sp, #24]
 803ba48:	f10b 0b01 	add.w	fp, fp, #1
 803ba4c:	e7bb      	b.n	803b9c6 <_printf_float+0x2fe>
 803ba4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803ba52:	4631      	mov	r1, r6
 803ba54:	4628      	mov	r0, r5
 803ba56:	47b8      	blx	r7
 803ba58:	3001      	adds	r0, #1
 803ba5a:	d1c0      	bne.n	803b9de <_printf_float+0x316>
 803ba5c:	e68f      	b.n	803b77e <_printf_float+0xb6>
 803ba5e:	9a06      	ldr	r2, [sp, #24]
 803ba60:	464b      	mov	r3, r9
 803ba62:	4442      	add	r2, r8
 803ba64:	4631      	mov	r1, r6
 803ba66:	4628      	mov	r0, r5
 803ba68:	47b8      	blx	r7
 803ba6a:	3001      	adds	r0, #1
 803ba6c:	d1c3      	bne.n	803b9f6 <_printf_float+0x32e>
 803ba6e:	e686      	b.n	803b77e <_printf_float+0xb6>
 803ba70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 803ba74:	f1ba 0f01 	cmp.w	sl, #1
 803ba78:	dc01      	bgt.n	803ba7e <_printf_float+0x3b6>
 803ba7a:	07db      	lsls	r3, r3, #31
 803ba7c:	d536      	bpl.n	803baec <_printf_float+0x424>
 803ba7e:	2301      	movs	r3, #1
 803ba80:	4642      	mov	r2, r8
 803ba82:	4631      	mov	r1, r6
 803ba84:	4628      	mov	r0, r5
 803ba86:	47b8      	blx	r7
 803ba88:	3001      	adds	r0, #1
 803ba8a:	f43f ae78 	beq.w	803b77e <_printf_float+0xb6>
 803ba8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803ba92:	4631      	mov	r1, r6
 803ba94:	4628      	mov	r0, r5
 803ba96:	47b8      	blx	r7
 803ba98:	3001      	adds	r0, #1
 803ba9a:	f43f ae70 	beq.w	803b77e <_printf_float+0xb6>
 803ba9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 803baa2:	2200      	movs	r2, #0
 803baa4:	2300      	movs	r3, #0
 803baa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 803baaa:	f7e5 f83d 	bl	8020b28 <__aeabi_dcmpeq>
 803baae:	b9c0      	cbnz	r0, 803bae2 <_printf_float+0x41a>
 803bab0:	4653      	mov	r3, sl
 803bab2:	f108 0201 	add.w	r2, r8, #1
 803bab6:	4631      	mov	r1, r6
 803bab8:	4628      	mov	r0, r5
 803baba:	47b8      	blx	r7
 803babc:	3001      	adds	r0, #1
 803babe:	d10c      	bne.n	803bada <_printf_float+0x412>
 803bac0:	e65d      	b.n	803b77e <_printf_float+0xb6>
 803bac2:	2301      	movs	r3, #1
 803bac4:	465a      	mov	r2, fp
 803bac6:	4631      	mov	r1, r6
 803bac8:	4628      	mov	r0, r5
 803baca:	47b8      	blx	r7
 803bacc:	3001      	adds	r0, #1
 803bace:	f43f ae56 	beq.w	803b77e <_printf_float+0xb6>
 803bad2:	f108 0801 	add.w	r8, r8, #1
 803bad6:	45d0      	cmp	r8, sl
 803bad8:	dbf3      	blt.n	803bac2 <_printf_float+0x3fa>
 803bada:	464b      	mov	r3, r9
 803badc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 803bae0:	e6df      	b.n	803b8a2 <_printf_float+0x1da>
 803bae2:	f04f 0800 	mov.w	r8, #0
 803bae6:	f104 0b1a 	add.w	fp, r4, #26
 803baea:	e7f4      	b.n	803bad6 <_printf_float+0x40e>
 803baec:	2301      	movs	r3, #1
 803baee:	4642      	mov	r2, r8
 803baf0:	e7e1      	b.n	803bab6 <_printf_float+0x3ee>
 803baf2:	2301      	movs	r3, #1
 803baf4:	464a      	mov	r2, r9
 803baf6:	4631      	mov	r1, r6
 803baf8:	4628      	mov	r0, r5
 803bafa:	47b8      	blx	r7
 803bafc:	3001      	adds	r0, #1
 803bafe:	f43f ae3e 	beq.w	803b77e <_printf_float+0xb6>
 803bb02:	f108 0801 	add.w	r8, r8, #1
 803bb06:	68e3      	ldr	r3, [r4, #12]
 803bb08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803bb0a:	1a5b      	subs	r3, r3, r1
 803bb0c:	4543      	cmp	r3, r8
 803bb0e:	dcf0      	bgt.n	803baf2 <_printf_float+0x42a>
 803bb10:	e6fc      	b.n	803b90c <_printf_float+0x244>
 803bb12:	f04f 0800 	mov.w	r8, #0
 803bb16:	f104 0919 	add.w	r9, r4, #25
 803bb1a:	e7f4      	b.n	803bb06 <_printf_float+0x43e>

0803bb1c <_printf_common>:
 803bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803bb20:	4616      	mov	r6, r2
 803bb22:	4698      	mov	r8, r3
 803bb24:	688a      	ldr	r2, [r1, #8]
 803bb26:	690b      	ldr	r3, [r1, #16]
 803bb28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 803bb2c:	4293      	cmp	r3, r2
 803bb2e:	bfb8      	it	lt
 803bb30:	4613      	movlt	r3, r2
 803bb32:	6033      	str	r3, [r6, #0]
 803bb34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 803bb38:	4607      	mov	r7, r0
 803bb3a:	460c      	mov	r4, r1
 803bb3c:	b10a      	cbz	r2, 803bb42 <_printf_common+0x26>
 803bb3e:	3301      	adds	r3, #1
 803bb40:	6033      	str	r3, [r6, #0]
 803bb42:	6823      	ldr	r3, [r4, #0]
 803bb44:	0699      	lsls	r1, r3, #26
 803bb46:	bf42      	ittt	mi
 803bb48:	6833      	ldrmi	r3, [r6, #0]
 803bb4a:	3302      	addmi	r3, #2
 803bb4c:	6033      	strmi	r3, [r6, #0]
 803bb4e:	6825      	ldr	r5, [r4, #0]
 803bb50:	f015 0506 	ands.w	r5, r5, #6
 803bb54:	d106      	bne.n	803bb64 <_printf_common+0x48>
 803bb56:	f104 0a19 	add.w	sl, r4, #25
 803bb5a:	68e3      	ldr	r3, [r4, #12]
 803bb5c:	6832      	ldr	r2, [r6, #0]
 803bb5e:	1a9b      	subs	r3, r3, r2
 803bb60:	42ab      	cmp	r3, r5
 803bb62:	dc26      	bgt.n	803bbb2 <_printf_common+0x96>
 803bb64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 803bb68:	6822      	ldr	r2, [r4, #0]
 803bb6a:	3b00      	subs	r3, #0
 803bb6c:	bf18      	it	ne
 803bb6e:	2301      	movne	r3, #1
 803bb70:	0692      	lsls	r2, r2, #26
 803bb72:	d42b      	bmi.n	803bbcc <_printf_common+0xb0>
 803bb74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 803bb78:	4641      	mov	r1, r8
 803bb7a:	4638      	mov	r0, r7
 803bb7c:	47c8      	blx	r9
 803bb7e:	3001      	adds	r0, #1
 803bb80:	d01e      	beq.n	803bbc0 <_printf_common+0xa4>
 803bb82:	6823      	ldr	r3, [r4, #0]
 803bb84:	6922      	ldr	r2, [r4, #16]
 803bb86:	f003 0306 	and.w	r3, r3, #6
 803bb8a:	2b04      	cmp	r3, #4
 803bb8c:	bf02      	ittt	eq
 803bb8e:	68e5      	ldreq	r5, [r4, #12]
 803bb90:	6833      	ldreq	r3, [r6, #0]
 803bb92:	1aed      	subeq	r5, r5, r3
 803bb94:	68a3      	ldr	r3, [r4, #8]
 803bb96:	bf0c      	ite	eq
 803bb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803bb9c:	2500      	movne	r5, #0
 803bb9e:	4293      	cmp	r3, r2
 803bba0:	bfc4      	itt	gt
 803bba2:	1a9b      	subgt	r3, r3, r2
 803bba4:	18ed      	addgt	r5, r5, r3
 803bba6:	2600      	movs	r6, #0
 803bba8:	341a      	adds	r4, #26
 803bbaa:	42b5      	cmp	r5, r6
 803bbac:	d11a      	bne.n	803bbe4 <_printf_common+0xc8>
 803bbae:	2000      	movs	r0, #0
 803bbb0:	e008      	b.n	803bbc4 <_printf_common+0xa8>
 803bbb2:	2301      	movs	r3, #1
 803bbb4:	4652      	mov	r2, sl
 803bbb6:	4641      	mov	r1, r8
 803bbb8:	4638      	mov	r0, r7
 803bbba:	47c8      	blx	r9
 803bbbc:	3001      	adds	r0, #1
 803bbbe:	d103      	bne.n	803bbc8 <_printf_common+0xac>
 803bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 803bbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803bbc8:	3501      	adds	r5, #1
 803bbca:	e7c6      	b.n	803bb5a <_printf_common+0x3e>
 803bbcc:	18e1      	adds	r1, r4, r3
 803bbce:	1c5a      	adds	r2, r3, #1
 803bbd0:	2030      	movs	r0, #48	@ 0x30
 803bbd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 803bbd6:	4422      	add	r2, r4
 803bbd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 803bbdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 803bbe0:	3302      	adds	r3, #2
 803bbe2:	e7c7      	b.n	803bb74 <_printf_common+0x58>
 803bbe4:	2301      	movs	r3, #1
 803bbe6:	4622      	mov	r2, r4
 803bbe8:	4641      	mov	r1, r8
 803bbea:	4638      	mov	r0, r7
 803bbec:	47c8      	blx	r9
 803bbee:	3001      	adds	r0, #1
 803bbf0:	d0e6      	beq.n	803bbc0 <_printf_common+0xa4>
 803bbf2:	3601      	adds	r6, #1
 803bbf4:	e7d9      	b.n	803bbaa <_printf_common+0x8e>
	...

0803bbf8 <_printf_i>:
 803bbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803bbfc:	7e0f      	ldrb	r7, [r1, #24]
 803bbfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 803bc00:	2f78      	cmp	r7, #120	@ 0x78
 803bc02:	4691      	mov	r9, r2
 803bc04:	4680      	mov	r8, r0
 803bc06:	460c      	mov	r4, r1
 803bc08:	469a      	mov	sl, r3
 803bc0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 803bc0e:	d807      	bhi.n	803bc20 <_printf_i+0x28>
 803bc10:	2f62      	cmp	r7, #98	@ 0x62
 803bc12:	d80a      	bhi.n	803bc2a <_printf_i+0x32>
 803bc14:	2f00      	cmp	r7, #0
 803bc16:	f000 80d2 	beq.w	803bdbe <_printf_i+0x1c6>
 803bc1a:	2f58      	cmp	r7, #88	@ 0x58
 803bc1c:	f000 80b9 	beq.w	803bd92 <_printf_i+0x19a>
 803bc20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 803bc24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 803bc28:	e03a      	b.n	803bca0 <_printf_i+0xa8>
 803bc2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 803bc2e:	2b15      	cmp	r3, #21
 803bc30:	d8f6      	bhi.n	803bc20 <_printf_i+0x28>
 803bc32:	a101      	add	r1, pc, #4	@ (adr r1, 803bc38 <_printf_i+0x40>)
 803bc34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803bc38:	0803bc91 	.word	0x0803bc91
 803bc3c:	0803bca5 	.word	0x0803bca5
 803bc40:	0803bc21 	.word	0x0803bc21
 803bc44:	0803bc21 	.word	0x0803bc21
 803bc48:	0803bc21 	.word	0x0803bc21
 803bc4c:	0803bc21 	.word	0x0803bc21
 803bc50:	0803bca5 	.word	0x0803bca5
 803bc54:	0803bc21 	.word	0x0803bc21
 803bc58:	0803bc21 	.word	0x0803bc21
 803bc5c:	0803bc21 	.word	0x0803bc21
 803bc60:	0803bc21 	.word	0x0803bc21
 803bc64:	0803bda5 	.word	0x0803bda5
 803bc68:	0803bccf 	.word	0x0803bccf
 803bc6c:	0803bd5f 	.word	0x0803bd5f
 803bc70:	0803bc21 	.word	0x0803bc21
 803bc74:	0803bc21 	.word	0x0803bc21
 803bc78:	0803bdc7 	.word	0x0803bdc7
 803bc7c:	0803bc21 	.word	0x0803bc21
 803bc80:	0803bccf 	.word	0x0803bccf
 803bc84:	0803bc21 	.word	0x0803bc21
 803bc88:	0803bc21 	.word	0x0803bc21
 803bc8c:	0803bd67 	.word	0x0803bd67
 803bc90:	6833      	ldr	r3, [r6, #0]
 803bc92:	1d1a      	adds	r2, r3, #4
 803bc94:	681b      	ldr	r3, [r3, #0]
 803bc96:	6032      	str	r2, [r6, #0]
 803bc98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 803bc9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 803bca0:	2301      	movs	r3, #1
 803bca2:	e09d      	b.n	803bde0 <_printf_i+0x1e8>
 803bca4:	6833      	ldr	r3, [r6, #0]
 803bca6:	6820      	ldr	r0, [r4, #0]
 803bca8:	1d19      	adds	r1, r3, #4
 803bcaa:	6031      	str	r1, [r6, #0]
 803bcac:	0606      	lsls	r6, r0, #24
 803bcae:	d501      	bpl.n	803bcb4 <_printf_i+0xbc>
 803bcb0:	681d      	ldr	r5, [r3, #0]
 803bcb2:	e003      	b.n	803bcbc <_printf_i+0xc4>
 803bcb4:	0645      	lsls	r5, r0, #25
 803bcb6:	d5fb      	bpl.n	803bcb0 <_printf_i+0xb8>
 803bcb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 803bcbc:	2d00      	cmp	r5, #0
 803bcbe:	da03      	bge.n	803bcc8 <_printf_i+0xd0>
 803bcc0:	232d      	movs	r3, #45	@ 0x2d
 803bcc2:	426d      	negs	r5, r5
 803bcc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803bcc8:	4859      	ldr	r0, [pc, #356]	@ (803be30 <_printf_i+0x238>)
 803bcca:	230a      	movs	r3, #10
 803bccc:	e011      	b.n	803bcf2 <_printf_i+0xfa>
 803bcce:	6821      	ldr	r1, [r4, #0]
 803bcd0:	6833      	ldr	r3, [r6, #0]
 803bcd2:	0608      	lsls	r0, r1, #24
 803bcd4:	f853 5b04 	ldr.w	r5, [r3], #4
 803bcd8:	d402      	bmi.n	803bce0 <_printf_i+0xe8>
 803bcda:	0649      	lsls	r1, r1, #25
 803bcdc:	bf48      	it	mi
 803bcde:	b2ad      	uxthmi	r5, r5
 803bce0:	2f6f      	cmp	r7, #111	@ 0x6f
 803bce2:	4853      	ldr	r0, [pc, #332]	@ (803be30 <_printf_i+0x238>)
 803bce4:	6033      	str	r3, [r6, #0]
 803bce6:	bf14      	ite	ne
 803bce8:	230a      	movne	r3, #10
 803bcea:	2308      	moveq	r3, #8
 803bcec:	2100      	movs	r1, #0
 803bcee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 803bcf2:	6866      	ldr	r6, [r4, #4]
 803bcf4:	60a6      	str	r6, [r4, #8]
 803bcf6:	2e00      	cmp	r6, #0
 803bcf8:	bfa2      	ittt	ge
 803bcfa:	6821      	ldrge	r1, [r4, #0]
 803bcfc:	f021 0104 	bicge.w	r1, r1, #4
 803bd00:	6021      	strge	r1, [r4, #0]
 803bd02:	b90d      	cbnz	r5, 803bd08 <_printf_i+0x110>
 803bd04:	2e00      	cmp	r6, #0
 803bd06:	d04b      	beq.n	803bda0 <_printf_i+0x1a8>
 803bd08:	4616      	mov	r6, r2
 803bd0a:	fbb5 f1f3 	udiv	r1, r5, r3
 803bd0e:	fb03 5711 	mls	r7, r3, r1, r5
 803bd12:	5dc7      	ldrb	r7, [r0, r7]
 803bd14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 803bd18:	462f      	mov	r7, r5
 803bd1a:	42bb      	cmp	r3, r7
 803bd1c:	460d      	mov	r5, r1
 803bd1e:	d9f4      	bls.n	803bd0a <_printf_i+0x112>
 803bd20:	2b08      	cmp	r3, #8
 803bd22:	d10b      	bne.n	803bd3c <_printf_i+0x144>
 803bd24:	6823      	ldr	r3, [r4, #0]
 803bd26:	07df      	lsls	r7, r3, #31
 803bd28:	d508      	bpl.n	803bd3c <_printf_i+0x144>
 803bd2a:	6923      	ldr	r3, [r4, #16]
 803bd2c:	6861      	ldr	r1, [r4, #4]
 803bd2e:	4299      	cmp	r1, r3
 803bd30:	bfde      	ittt	le
 803bd32:	2330      	movle	r3, #48	@ 0x30
 803bd34:	f806 3c01 	strble.w	r3, [r6, #-1]
 803bd38:	f106 36ff 	addle.w	r6, r6, #4294967295
 803bd3c:	1b92      	subs	r2, r2, r6
 803bd3e:	6122      	str	r2, [r4, #16]
 803bd40:	f8cd a000 	str.w	sl, [sp]
 803bd44:	464b      	mov	r3, r9
 803bd46:	aa03      	add	r2, sp, #12
 803bd48:	4621      	mov	r1, r4
 803bd4a:	4640      	mov	r0, r8
 803bd4c:	f7ff fee6 	bl	803bb1c <_printf_common>
 803bd50:	3001      	adds	r0, #1
 803bd52:	d14a      	bne.n	803bdea <_printf_i+0x1f2>
 803bd54:	f04f 30ff 	mov.w	r0, #4294967295
 803bd58:	b004      	add	sp, #16
 803bd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803bd5e:	6823      	ldr	r3, [r4, #0]
 803bd60:	f043 0320 	orr.w	r3, r3, #32
 803bd64:	6023      	str	r3, [r4, #0]
 803bd66:	4833      	ldr	r0, [pc, #204]	@ (803be34 <_printf_i+0x23c>)
 803bd68:	2778      	movs	r7, #120	@ 0x78
 803bd6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 803bd6e:	6823      	ldr	r3, [r4, #0]
 803bd70:	6831      	ldr	r1, [r6, #0]
 803bd72:	061f      	lsls	r7, r3, #24
 803bd74:	f851 5b04 	ldr.w	r5, [r1], #4
 803bd78:	d402      	bmi.n	803bd80 <_printf_i+0x188>
 803bd7a:	065f      	lsls	r7, r3, #25
 803bd7c:	bf48      	it	mi
 803bd7e:	b2ad      	uxthmi	r5, r5
 803bd80:	6031      	str	r1, [r6, #0]
 803bd82:	07d9      	lsls	r1, r3, #31
 803bd84:	bf44      	itt	mi
 803bd86:	f043 0320 	orrmi.w	r3, r3, #32
 803bd8a:	6023      	strmi	r3, [r4, #0]
 803bd8c:	b11d      	cbz	r5, 803bd96 <_printf_i+0x19e>
 803bd8e:	2310      	movs	r3, #16
 803bd90:	e7ac      	b.n	803bcec <_printf_i+0xf4>
 803bd92:	4827      	ldr	r0, [pc, #156]	@ (803be30 <_printf_i+0x238>)
 803bd94:	e7e9      	b.n	803bd6a <_printf_i+0x172>
 803bd96:	6823      	ldr	r3, [r4, #0]
 803bd98:	f023 0320 	bic.w	r3, r3, #32
 803bd9c:	6023      	str	r3, [r4, #0]
 803bd9e:	e7f6      	b.n	803bd8e <_printf_i+0x196>
 803bda0:	4616      	mov	r6, r2
 803bda2:	e7bd      	b.n	803bd20 <_printf_i+0x128>
 803bda4:	6833      	ldr	r3, [r6, #0]
 803bda6:	6825      	ldr	r5, [r4, #0]
 803bda8:	6961      	ldr	r1, [r4, #20]
 803bdaa:	1d18      	adds	r0, r3, #4
 803bdac:	6030      	str	r0, [r6, #0]
 803bdae:	062e      	lsls	r6, r5, #24
 803bdb0:	681b      	ldr	r3, [r3, #0]
 803bdb2:	d501      	bpl.n	803bdb8 <_printf_i+0x1c0>
 803bdb4:	6019      	str	r1, [r3, #0]
 803bdb6:	e002      	b.n	803bdbe <_printf_i+0x1c6>
 803bdb8:	0668      	lsls	r0, r5, #25
 803bdba:	d5fb      	bpl.n	803bdb4 <_printf_i+0x1bc>
 803bdbc:	8019      	strh	r1, [r3, #0]
 803bdbe:	2300      	movs	r3, #0
 803bdc0:	6123      	str	r3, [r4, #16]
 803bdc2:	4616      	mov	r6, r2
 803bdc4:	e7bc      	b.n	803bd40 <_printf_i+0x148>
 803bdc6:	6833      	ldr	r3, [r6, #0]
 803bdc8:	1d1a      	adds	r2, r3, #4
 803bdca:	6032      	str	r2, [r6, #0]
 803bdcc:	681e      	ldr	r6, [r3, #0]
 803bdce:	6862      	ldr	r2, [r4, #4]
 803bdd0:	2100      	movs	r1, #0
 803bdd2:	4630      	mov	r0, r6
 803bdd4:	f7e4 fa2c 	bl	8020230 <memchr>
 803bdd8:	b108      	cbz	r0, 803bdde <_printf_i+0x1e6>
 803bdda:	1b80      	subs	r0, r0, r6
 803bddc:	6060      	str	r0, [r4, #4]
 803bdde:	6863      	ldr	r3, [r4, #4]
 803bde0:	6123      	str	r3, [r4, #16]
 803bde2:	2300      	movs	r3, #0
 803bde4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803bde8:	e7aa      	b.n	803bd40 <_printf_i+0x148>
 803bdea:	6923      	ldr	r3, [r4, #16]
 803bdec:	4632      	mov	r2, r6
 803bdee:	4649      	mov	r1, r9
 803bdf0:	4640      	mov	r0, r8
 803bdf2:	47d0      	blx	sl
 803bdf4:	3001      	adds	r0, #1
 803bdf6:	d0ad      	beq.n	803bd54 <_printf_i+0x15c>
 803bdf8:	6823      	ldr	r3, [r4, #0]
 803bdfa:	079b      	lsls	r3, r3, #30
 803bdfc:	d413      	bmi.n	803be26 <_printf_i+0x22e>
 803bdfe:	68e0      	ldr	r0, [r4, #12]
 803be00:	9b03      	ldr	r3, [sp, #12]
 803be02:	4298      	cmp	r0, r3
 803be04:	bfb8      	it	lt
 803be06:	4618      	movlt	r0, r3
 803be08:	e7a6      	b.n	803bd58 <_printf_i+0x160>
 803be0a:	2301      	movs	r3, #1
 803be0c:	4632      	mov	r2, r6
 803be0e:	4649      	mov	r1, r9
 803be10:	4640      	mov	r0, r8
 803be12:	47d0      	blx	sl
 803be14:	3001      	adds	r0, #1
 803be16:	d09d      	beq.n	803bd54 <_printf_i+0x15c>
 803be18:	3501      	adds	r5, #1
 803be1a:	68e3      	ldr	r3, [r4, #12]
 803be1c:	9903      	ldr	r1, [sp, #12]
 803be1e:	1a5b      	subs	r3, r3, r1
 803be20:	42ab      	cmp	r3, r5
 803be22:	dcf2      	bgt.n	803be0a <_printf_i+0x212>
 803be24:	e7eb      	b.n	803bdfe <_printf_i+0x206>
 803be26:	2500      	movs	r5, #0
 803be28:	f104 0619 	add.w	r6, r4, #25
 803be2c:	e7f5      	b.n	803be1a <_printf_i+0x222>
 803be2e:	bf00      	nop
 803be30:	08040a97 	.word	0x08040a97
 803be34:	08040aa8 	.word	0x08040aa8

0803be38 <std>:
 803be38:	2300      	movs	r3, #0
 803be3a:	b510      	push	{r4, lr}
 803be3c:	4604      	mov	r4, r0
 803be3e:	e9c0 3300 	strd	r3, r3, [r0]
 803be42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803be46:	6083      	str	r3, [r0, #8]
 803be48:	8181      	strh	r1, [r0, #12]
 803be4a:	6643      	str	r3, [r0, #100]	@ 0x64
 803be4c:	81c2      	strh	r2, [r0, #14]
 803be4e:	6183      	str	r3, [r0, #24]
 803be50:	4619      	mov	r1, r3
 803be52:	2208      	movs	r2, #8
 803be54:	305c      	adds	r0, #92	@ 0x5c
 803be56:	f000 f935 	bl	803c0c4 <memset>
 803be5a:	4b0d      	ldr	r3, [pc, #52]	@ (803be90 <std+0x58>)
 803be5c:	6263      	str	r3, [r4, #36]	@ 0x24
 803be5e:	4b0d      	ldr	r3, [pc, #52]	@ (803be94 <std+0x5c>)
 803be60:	62a3      	str	r3, [r4, #40]	@ 0x28
 803be62:	4b0d      	ldr	r3, [pc, #52]	@ (803be98 <std+0x60>)
 803be64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 803be66:	4b0d      	ldr	r3, [pc, #52]	@ (803be9c <std+0x64>)
 803be68:	6323      	str	r3, [r4, #48]	@ 0x30
 803be6a:	4b0d      	ldr	r3, [pc, #52]	@ (803bea0 <std+0x68>)
 803be6c:	6224      	str	r4, [r4, #32]
 803be6e:	429c      	cmp	r4, r3
 803be70:	d006      	beq.n	803be80 <std+0x48>
 803be72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 803be76:	4294      	cmp	r4, r2
 803be78:	d002      	beq.n	803be80 <std+0x48>
 803be7a:	33d0      	adds	r3, #208	@ 0xd0
 803be7c:	429c      	cmp	r4, r3
 803be7e:	d105      	bne.n	803be8c <std+0x54>
 803be80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 803be84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803be88:	f000 b998 	b.w	803c1bc <__retarget_lock_init_recursive>
 803be8c:	bd10      	pop	{r4, pc}
 803be8e:	bf00      	nop
 803be90:	0803bffd 	.word	0x0803bffd
 803be94:	0803c01f 	.word	0x0803c01f
 803be98:	0803c057 	.word	0x0803c057
 803be9c:	0803c07b 	.word	0x0803c07b
 803bea0:	20014fa0 	.word	0x20014fa0

0803bea4 <stdio_exit_handler>:
 803bea4:	4a02      	ldr	r2, [pc, #8]	@ (803beb0 <stdio_exit_handler+0xc>)
 803bea6:	4903      	ldr	r1, [pc, #12]	@ (803beb4 <stdio_exit_handler+0x10>)
 803bea8:	4803      	ldr	r0, [pc, #12]	@ (803beb8 <stdio_exit_handler+0x14>)
 803beaa:	f000 b869 	b.w	803bf80 <_fwalk_sglue>
 803beae:	bf00      	nop
 803beb0:	20003158 	.word	0x20003158
 803beb4:	0803db45 	.word	0x0803db45
 803beb8:	20003168 	.word	0x20003168

0803bebc <cleanup_stdio>:
 803bebc:	6841      	ldr	r1, [r0, #4]
 803bebe:	4b0c      	ldr	r3, [pc, #48]	@ (803bef0 <cleanup_stdio+0x34>)
 803bec0:	4299      	cmp	r1, r3
 803bec2:	b510      	push	{r4, lr}
 803bec4:	4604      	mov	r4, r0
 803bec6:	d001      	beq.n	803becc <cleanup_stdio+0x10>
 803bec8:	f001 fe3c 	bl	803db44 <_fflush_r>
 803becc:	68a1      	ldr	r1, [r4, #8]
 803bece:	4b09      	ldr	r3, [pc, #36]	@ (803bef4 <cleanup_stdio+0x38>)
 803bed0:	4299      	cmp	r1, r3
 803bed2:	d002      	beq.n	803beda <cleanup_stdio+0x1e>
 803bed4:	4620      	mov	r0, r4
 803bed6:	f001 fe35 	bl	803db44 <_fflush_r>
 803beda:	68e1      	ldr	r1, [r4, #12]
 803bedc:	4b06      	ldr	r3, [pc, #24]	@ (803bef8 <cleanup_stdio+0x3c>)
 803bede:	4299      	cmp	r1, r3
 803bee0:	d004      	beq.n	803beec <cleanup_stdio+0x30>
 803bee2:	4620      	mov	r0, r4
 803bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803bee8:	f001 be2c 	b.w	803db44 <_fflush_r>
 803beec:	bd10      	pop	{r4, pc}
 803beee:	bf00      	nop
 803bef0:	20014fa0 	.word	0x20014fa0
 803bef4:	20015008 	.word	0x20015008
 803bef8:	20015070 	.word	0x20015070

0803befc <global_stdio_init.part.0>:
 803befc:	b510      	push	{r4, lr}
 803befe:	4b0b      	ldr	r3, [pc, #44]	@ (803bf2c <global_stdio_init.part.0+0x30>)
 803bf00:	4c0b      	ldr	r4, [pc, #44]	@ (803bf30 <global_stdio_init.part.0+0x34>)
 803bf02:	4a0c      	ldr	r2, [pc, #48]	@ (803bf34 <global_stdio_init.part.0+0x38>)
 803bf04:	601a      	str	r2, [r3, #0]
 803bf06:	4620      	mov	r0, r4
 803bf08:	2200      	movs	r2, #0
 803bf0a:	2104      	movs	r1, #4
 803bf0c:	f7ff ff94 	bl	803be38 <std>
 803bf10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 803bf14:	2201      	movs	r2, #1
 803bf16:	2109      	movs	r1, #9
 803bf18:	f7ff ff8e 	bl	803be38 <std>
 803bf1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 803bf20:	2202      	movs	r2, #2
 803bf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803bf26:	2112      	movs	r1, #18
 803bf28:	f7ff bf86 	b.w	803be38 <std>
 803bf2c:	200150d8 	.word	0x200150d8
 803bf30:	20014fa0 	.word	0x20014fa0
 803bf34:	0803bea5 	.word	0x0803bea5

0803bf38 <__sfp_lock_acquire>:
 803bf38:	4801      	ldr	r0, [pc, #4]	@ (803bf40 <__sfp_lock_acquire+0x8>)
 803bf3a:	f000 b940 	b.w	803c1be <__retarget_lock_acquire_recursive>
 803bf3e:	bf00      	nop
 803bf40:	200150e1 	.word	0x200150e1

0803bf44 <__sfp_lock_release>:
 803bf44:	4801      	ldr	r0, [pc, #4]	@ (803bf4c <__sfp_lock_release+0x8>)
 803bf46:	f000 b93b 	b.w	803c1c0 <__retarget_lock_release_recursive>
 803bf4a:	bf00      	nop
 803bf4c:	200150e1 	.word	0x200150e1

0803bf50 <__sinit>:
 803bf50:	b510      	push	{r4, lr}
 803bf52:	4604      	mov	r4, r0
 803bf54:	f7ff fff0 	bl	803bf38 <__sfp_lock_acquire>
 803bf58:	6a23      	ldr	r3, [r4, #32]
 803bf5a:	b11b      	cbz	r3, 803bf64 <__sinit+0x14>
 803bf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803bf60:	f7ff bff0 	b.w	803bf44 <__sfp_lock_release>
 803bf64:	4b04      	ldr	r3, [pc, #16]	@ (803bf78 <__sinit+0x28>)
 803bf66:	6223      	str	r3, [r4, #32]
 803bf68:	4b04      	ldr	r3, [pc, #16]	@ (803bf7c <__sinit+0x2c>)
 803bf6a:	681b      	ldr	r3, [r3, #0]
 803bf6c:	2b00      	cmp	r3, #0
 803bf6e:	d1f5      	bne.n	803bf5c <__sinit+0xc>
 803bf70:	f7ff ffc4 	bl	803befc <global_stdio_init.part.0>
 803bf74:	e7f2      	b.n	803bf5c <__sinit+0xc>
 803bf76:	bf00      	nop
 803bf78:	0803bebd 	.word	0x0803bebd
 803bf7c:	200150d8 	.word	0x200150d8

0803bf80 <_fwalk_sglue>:
 803bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803bf84:	4607      	mov	r7, r0
 803bf86:	4688      	mov	r8, r1
 803bf88:	4614      	mov	r4, r2
 803bf8a:	2600      	movs	r6, #0
 803bf8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803bf90:	f1b9 0901 	subs.w	r9, r9, #1
 803bf94:	d505      	bpl.n	803bfa2 <_fwalk_sglue+0x22>
 803bf96:	6824      	ldr	r4, [r4, #0]
 803bf98:	2c00      	cmp	r4, #0
 803bf9a:	d1f7      	bne.n	803bf8c <_fwalk_sglue+0xc>
 803bf9c:	4630      	mov	r0, r6
 803bf9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803bfa2:	89ab      	ldrh	r3, [r5, #12]
 803bfa4:	2b01      	cmp	r3, #1
 803bfa6:	d907      	bls.n	803bfb8 <_fwalk_sglue+0x38>
 803bfa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803bfac:	3301      	adds	r3, #1
 803bfae:	d003      	beq.n	803bfb8 <_fwalk_sglue+0x38>
 803bfb0:	4629      	mov	r1, r5
 803bfb2:	4638      	mov	r0, r7
 803bfb4:	47c0      	blx	r8
 803bfb6:	4306      	orrs	r6, r0
 803bfb8:	3568      	adds	r5, #104	@ 0x68
 803bfba:	e7e9      	b.n	803bf90 <_fwalk_sglue+0x10>

0803bfbc <siprintf>:
 803bfbc:	b40e      	push	{r1, r2, r3}
 803bfbe:	b500      	push	{lr}
 803bfc0:	b09c      	sub	sp, #112	@ 0x70
 803bfc2:	ab1d      	add	r3, sp, #116	@ 0x74
 803bfc4:	9002      	str	r0, [sp, #8]
 803bfc6:	9006      	str	r0, [sp, #24]
 803bfc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 803bfcc:	4809      	ldr	r0, [pc, #36]	@ (803bff4 <siprintf+0x38>)
 803bfce:	9107      	str	r1, [sp, #28]
 803bfd0:	9104      	str	r1, [sp, #16]
 803bfd2:	4909      	ldr	r1, [pc, #36]	@ (803bff8 <siprintf+0x3c>)
 803bfd4:	f853 2b04 	ldr.w	r2, [r3], #4
 803bfd8:	9105      	str	r1, [sp, #20]
 803bfda:	6800      	ldr	r0, [r0, #0]
 803bfdc:	9301      	str	r3, [sp, #4]
 803bfde:	a902      	add	r1, sp, #8
 803bfe0:	f001 fc30 	bl	803d844 <_svfiprintf_r>
 803bfe4:	9b02      	ldr	r3, [sp, #8]
 803bfe6:	2200      	movs	r2, #0
 803bfe8:	701a      	strb	r2, [r3, #0]
 803bfea:	b01c      	add	sp, #112	@ 0x70
 803bfec:	f85d eb04 	ldr.w	lr, [sp], #4
 803bff0:	b003      	add	sp, #12
 803bff2:	4770      	bx	lr
 803bff4:	20003164 	.word	0x20003164
 803bff8:	ffff0208 	.word	0xffff0208

0803bffc <__sread>:
 803bffc:	b510      	push	{r4, lr}
 803bffe:	460c      	mov	r4, r1
 803c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803c004:	f000 f88c 	bl	803c120 <_read_r>
 803c008:	2800      	cmp	r0, #0
 803c00a:	bfab      	itete	ge
 803c00c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 803c00e:	89a3      	ldrhlt	r3, [r4, #12]
 803c010:	181b      	addge	r3, r3, r0
 803c012:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 803c016:	bfac      	ite	ge
 803c018:	6563      	strge	r3, [r4, #84]	@ 0x54
 803c01a:	81a3      	strhlt	r3, [r4, #12]
 803c01c:	bd10      	pop	{r4, pc}

0803c01e <__swrite>:
 803c01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c022:	461f      	mov	r7, r3
 803c024:	898b      	ldrh	r3, [r1, #12]
 803c026:	05db      	lsls	r3, r3, #23
 803c028:	4605      	mov	r5, r0
 803c02a:	460c      	mov	r4, r1
 803c02c:	4616      	mov	r6, r2
 803c02e:	d505      	bpl.n	803c03c <__swrite+0x1e>
 803c030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803c034:	2302      	movs	r3, #2
 803c036:	2200      	movs	r2, #0
 803c038:	f000 f860 	bl	803c0fc <_lseek_r>
 803c03c:	89a3      	ldrh	r3, [r4, #12]
 803c03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803c042:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 803c046:	81a3      	strh	r3, [r4, #12]
 803c048:	4632      	mov	r2, r6
 803c04a:	463b      	mov	r3, r7
 803c04c:	4628      	mov	r0, r5
 803c04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803c052:	f000 b877 	b.w	803c144 <_write_r>

0803c056 <__sseek>:
 803c056:	b510      	push	{r4, lr}
 803c058:	460c      	mov	r4, r1
 803c05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803c05e:	f000 f84d 	bl	803c0fc <_lseek_r>
 803c062:	1c43      	adds	r3, r0, #1
 803c064:	89a3      	ldrh	r3, [r4, #12]
 803c066:	bf15      	itete	ne
 803c068:	6560      	strne	r0, [r4, #84]	@ 0x54
 803c06a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 803c06e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 803c072:	81a3      	strheq	r3, [r4, #12]
 803c074:	bf18      	it	ne
 803c076:	81a3      	strhne	r3, [r4, #12]
 803c078:	bd10      	pop	{r4, pc}

0803c07a <__sclose>:
 803c07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803c07e:	f000 b82d 	b.w	803c0dc <_close_r>
	...

0803c084 <_vsiprintf_r>:
 803c084:	b500      	push	{lr}
 803c086:	b09b      	sub	sp, #108	@ 0x6c
 803c088:	9100      	str	r1, [sp, #0]
 803c08a:	9104      	str	r1, [sp, #16]
 803c08c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 803c090:	9105      	str	r1, [sp, #20]
 803c092:	9102      	str	r1, [sp, #8]
 803c094:	4905      	ldr	r1, [pc, #20]	@ (803c0ac <_vsiprintf_r+0x28>)
 803c096:	9103      	str	r1, [sp, #12]
 803c098:	4669      	mov	r1, sp
 803c09a:	f001 fbd3 	bl	803d844 <_svfiprintf_r>
 803c09e:	9b00      	ldr	r3, [sp, #0]
 803c0a0:	2200      	movs	r2, #0
 803c0a2:	701a      	strb	r2, [r3, #0]
 803c0a4:	b01b      	add	sp, #108	@ 0x6c
 803c0a6:	f85d fb04 	ldr.w	pc, [sp], #4
 803c0aa:	bf00      	nop
 803c0ac:	ffff0208 	.word	0xffff0208

0803c0b0 <vsiprintf>:
 803c0b0:	4613      	mov	r3, r2
 803c0b2:	460a      	mov	r2, r1
 803c0b4:	4601      	mov	r1, r0
 803c0b6:	4802      	ldr	r0, [pc, #8]	@ (803c0c0 <vsiprintf+0x10>)
 803c0b8:	6800      	ldr	r0, [r0, #0]
 803c0ba:	f7ff bfe3 	b.w	803c084 <_vsiprintf_r>
 803c0be:	bf00      	nop
 803c0c0:	20003164 	.word	0x20003164

0803c0c4 <memset>:
 803c0c4:	4402      	add	r2, r0
 803c0c6:	4603      	mov	r3, r0
 803c0c8:	4293      	cmp	r3, r2
 803c0ca:	d100      	bne.n	803c0ce <memset+0xa>
 803c0cc:	4770      	bx	lr
 803c0ce:	f803 1b01 	strb.w	r1, [r3], #1
 803c0d2:	e7f9      	b.n	803c0c8 <memset+0x4>

0803c0d4 <_localeconv_r>:
 803c0d4:	4800      	ldr	r0, [pc, #0]	@ (803c0d8 <_localeconv_r+0x4>)
 803c0d6:	4770      	bx	lr
 803c0d8:	200032a4 	.word	0x200032a4

0803c0dc <_close_r>:
 803c0dc:	b538      	push	{r3, r4, r5, lr}
 803c0de:	4d06      	ldr	r5, [pc, #24]	@ (803c0f8 <_close_r+0x1c>)
 803c0e0:	2300      	movs	r3, #0
 803c0e2:	4604      	mov	r4, r0
 803c0e4:	4608      	mov	r0, r1
 803c0e6:	602b      	str	r3, [r5, #0]
 803c0e8:	f7e6 ff46 	bl	8022f78 <_close>
 803c0ec:	1c43      	adds	r3, r0, #1
 803c0ee:	d102      	bne.n	803c0f6 <_close_r+0x1a>
 803c0f0:	682b      	ldr	r3, [r5, #0]
 803c0f2:	b103      	cbz	r3, 803c0f6 <_close_r+0x1a>
 803c0f4:	6023      	str	r3, [r4, #0]
 803c0f6:	bd38      	pop	{r3, r4, r5, pc}
 803c0f8:	200150dc 	.word	0x200150dc

0803c0fc <_lseek_r>:
 803c0fc:	b538      	push	{r3, r4, r5, lr}
 803c0fe:	4d07      	ldr	r5, [pc, #28]	@ (803c11c <_lseek_r+0x20>)
 803c100:	4604      	mov	r4, r0
 803c102:	4608      	mov	r0, r1
 803c104:	4611      	mov	r1, r2
 803c106:	2200      	movs	r2, #0
 803c108:	602a      	str	r2, [r5, #0]
 803c10a:	461a      	mov	r2, r3
 803c10c:	f7e6 ff5b 	bl	8022fc6 <_lseek>
 803c110:	1c43      	adds	r3, r0, #1
 803c112:	d102      	bne.n	803c11a <_lseek_r+0x1e>
 803c114:	682b      	ldr	r3, [r5, #0]
 803c116:	b103      	cbz	r3, 803c11a <_lseek_r+0x1e>
 803c118:	6023      	str	r3, [r4, #0]
 803c11a:	bd38      	pop	{r3, r4, r5, pc}
 803c11c:	200150dc 	.word	0x200150dc

0803c120 <_read_r>:
 803c120:	b538      	push	{r3, r4, r5, lr}
 803c122:	4d07      	ldr	r5, [pc, #28]	@ (803c140 <_read_r+0x20>)
 803c124:	4604      	mov	r4, r0
 803c126:	4608      	mov	r0, r1
 803c128:	4611      	mov	r1, r2
 803c12a:	2200      	movs	r2, #0
 803c12c:	602a      	str	r2, [r5, #0]
 803c12e:	461a      	mov	r2, r3
 803c130:	f7e6 fee9 	bl	8022f06 <_read>
 803c134:	1c43      	adds	r3, r0, #1
 803c136:	d102      	bne.n	803c13e <_read_r+0x1e>
 803c138:	682b      	ldr	r3, [r5, #0]
 803c13a:	b103      	cbz	r3, 803c13e <_read_r+0x1e>
 803c13c:	6023      	str	r3, [r4, #0]
 803c13e:	bd38      	pop	{r3, r4, r5, pc}
 803c140:	200150dc 	.word	0x200150dc

0803c144 <_write_r>:
 803c144:	b538      	push	{r3, r4, r5, lr}
 803c146:	4d07      	ldr	r5, [pc, #28]	@ (803c164 <_write_r+0x20>)
 803c148:	4604      	mov	r4, r0
 803c14a:	4608      	mov	r0, r1
 803c14c:	4611      	mov	r1, r2
 803c14e:	2200      	movs	r2, #0
 803c150:	602a      	str	r2, [r5, #0]
 803c152:	461a      	mov	r2, r3
 803c154:	f7e6 fef4 	bl	8022f40 <_write>
 803c158:	1c43      	adds	r3, r0, #1
 803c15a:	d102      	bne.n	803c162 <_write_r+0x1e>
 803c15c:	682b      	ldr	r3, [r5, #0]
 803c15e:	b103      	cbz	r3, 803c162 <_write_r+0x1e>
 803c160:	6023      	str	r3, [r4, #0]
 803c162:	bd38      	pop	{r3, r4, r5, pc}
 803c164:	200150dc 	.word	0x200150dc

0803c168 <__errno>:
 803c168:	4b01      	ldr	r3, [pc, #4]	@ (803c170 <__errno+0x8>)
 803c16a:	6818      	ldr	r0, [r3, #0]
 803c16c:	4770      	bx	lr
 803c16e:	bf00      	nop
 803c170:	20003164 	.word	0x20003164

0803c174 <__libc_init_array>:
 803c174:	b570      	push	{r4, r5, r6, lr}
 803c176:	4d0d      	ldr	r5, [pc, #52]	@ (803c1ac <__libc_init_array+0x38>)
 803c178:	4c0d      	ldr	r4, [pc, #52]	@ (803c1b0 <__libc_init_array+0x3c>)
 803c17a:	1b64      	subs	r4, r4, r5
 803c17c:	10a4      	asrs	r4, r4, #2
 803c17e:	2600      	movs	r6, #0
 803c180:	42a6      	cmp	r6, r4
 803c182:	d109      	bne.n	803c198 <__libc_init_array+0x24>
 803c184:	4d0b      	ldr	r5, [pc, #44]	@ (803c1b4 <__libc_init_array+0x40>)
 803c186:	4c0c      	ldr	r4, [pc, #48]	@ (803c1b8 <__libc_init_array+0x44>)
 803c188:	f002 f890 	bl	803e2ac <_init>
 803c18c:	1b64      	subs	r4, r4, r5
 803c18e:	10a4      	asrs	r4, r4, #2
 803c190:	2600      	movs	r6, #0
 803c192:	42a6      	cmp	r6, r4
 803c194:	d105      	bne.n	803c1a2 <__libc_init_array+0x2e>
 803c196:	bd70      	pop	{r4, r5, r6, pc}
 803c198:	f855 3b04 	ldr.w	r3, [r5], #4
 803c19c:	4798      	blx	r3
 803c19e:	3601      	adds	r6, #1
 803c1a0:	e7ee      	b.n	803c180 <__libc_init_array+0xc>
 803c1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 803c1a6:	4798      	blx	r3
 803c1a8:	3601      	adds	r6, #1
 803c1aa:	e7f2      	b.n	803c192 <__libc_init_array+0x1e>
 803c1ac:	08040d00 	.word	0x08040d00
 803c1b0:	08040d00 	.word	0x08040d00
 803c1b4:	08040d00 	.word	0x08040d00
 803c1b8:	08040d04 	.word	0x08040d04

0803c1bc <__retarget_lock_init_recursive>:
 803c1bc:	4770      	bx	lr

0803c1be <__retarget_lock_acquire_recursive>:
 803c1be:	4770      	bx	lr

0803c1c0 <__retarget_lock_release_recursive>:
 803c1c0:	4770      	bx	lr

0803c1c2 <strcpy>:
 803c1c2:	4603      	mov	r3, r0
 803c1c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 803c1c8:	f803 2b01 	strb.w	r2, [r3], #1
 803c1cc:	2a00      	cmp	r2, #0
 803c1ce:	d1f9      	bne.n	803c1c4 <strcpy+0x2>
 803c1d0:	4770      	bx	lr

0803c1d2 <memcpy>:
 803c1d2:	440a      	add	r2, r1
 803c1d4:	4291      	cmp	r1, r2
 803c1d6:	f100 33ff 	add.w	r3, r0, #4294967295
 803c1da:	d100      	bne.n	803c1de <memcpy+0xc>
 803c1dc:	4770      	bx	lr
 803c1de:	b510      	push	{r4, lr}
 803c1e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 803c1e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 803c1e8:	4291      	cmp	r1, r2
 803c1ea:	d1f9      	bne.n	803c1e0 <memcpy+0xe>
 803c1ec:	bd10      	pop	{r4, pc}

0803c1ee <quorem>:
 803c1ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c1f2:	6903      	ldr	r3, [r0, #16]
 803c1f4:	690c      	ldr	r4, [r1, #16]
 803c1f6:	42a3      	cmp	r3, r4
 803c1f8:	4607      	mov	r7, r0
 803c1fa:	db7e      	blt.n	803c2fa <quorem+0x10c>
 803c1fc:	3c01      	subs	r4, #1
 803c1fe:	f101 0814 	add.w	r8, r1, #20
 803c202:	00a3      	lsls	r3, r4, #2
 803c204:	f100 0514 	add.w	r5, r0, #20
 803c208:	9300      	str	r3, [sp, #0]
 803c20a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803c20e:	9301      	str	r3, [sp, #4]
 803c210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 803c214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803c218:	3301      	adds	r3, #1
 803c21a:	429a      	cmp	r2, r3
 803c21c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 803c220:	fbb2 f6f3 	udiv	r6, r2, r3
 803c224:	d32e      	bcc.n	803c284 <quorem+0x96>
 803c226:	f04f 0a00 	mov.w	sl, #0
 803c22a:	46c4      	mov	ip, r8
 803c22c:	46ae      	mov	lr, r5
 803c22e:	46d3      	mov	fp, sl
 803c230:	f85c 3b04 	ldr.w	r3, [ip], #4
 803c234:	b298      	uxth	r0, r3
 803c236:	fb06 a000 	mla	r0, r6, r0, sl
 803c23a:	0c02      	lsrs	r2, r0, #16
 803c23c:	0c1b      	lsrs	r3, r3, #16
 803c23e:	fb06 2303 	mla	r3, r6, r3, r2
 803c242:	f8de 2000 	ldr.w	r2, [lr]
 803c246:	b280      	uxth	r0, r0
 803c248:	b292      	uxth	r2, r2
 803c24a:	1a12      	subs	r2, r2, r0
 803c24c:	445a      	add	r2, fp
 803c24e:	f8de 0000 	ldr.w	r0, [lr]
 803c252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803c256:	b29b      	uxth	r3, r3
 803c258:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 803c25c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 803c260:	b292      	uxth	r2, r2
 803c262:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 803c266:	45e1      	cmp	r9, ip
 803c268:	f84e 2b04 	str.w	r2, [lr], #4
 803c26c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 803c270:	d2de      	bcs.n	803c230 <quorem+0x42>
 803c272:	9b00      	ldr	r3, [sp, #0]
 803c274:	58eb      	ldr	r3, [r5, r3]
 803c276:	b92b      	cbnz	r3, 803c284 <quorem+0x96>
 803c278:	9b01      	ldr	r3, [sp, #4]
 803c27a:	3b04      	subs	r3, #4
 803c27c:	429d      	cmp	r5, r3
 803c27e:	461a      	mov	r2, r3
 803c280:	d32f      	bcc.n	803c2e2 <quorem+0xf4>
 803c282:	613c      	str	r4, [r7, #16]
 803c284:	4638      	mov	r0, r7
 803c286:	f001 f979 	bl	803d57c <__mcmp>
 803c28a:	2800      	cmp	r0, #0
 803c28c:	db25      	blt.n	803c2da <quorem+0xec>
 803c28e:	4629      	mov	r1, r5
 803c290:	2000      	movs	r0, #0
 803c292:	f858 2b04 	ldr.w	r2, [r8], #4
 803c296:	f8d1 c000 	ldr.w	ip, [r1]
 803c29a:	fa1f fe82 	uxth.w	lr, r2
 803c29e:	fa1f f38c 	uxth.w	r3, ip
 803c2a2:	eba3 030e 	sub.w	r3, r3, lr
 803c2a6:	4403      	add	r3, r0
 803c2a8:	0c12      	lsrs	r2, r2, #16
 803c2aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 803c2ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 803c2b2:	b29b      	uxth	r3, r3
 803c2b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803c2b8:	45c1      	cmp	r9, r8
 803c2ba:	f841 3b04 	str.w	r3, [r1], #4
 803c2be:	ea4f 4022 	mov.w	r0, r2, asr #16
 803c2c2:	d2e6      	bcs.n	803c292 <quorem+0xa4>
 803c2c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803c2c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803c2cc:	b922      	cbnz	r2, 803c2d8 <quorem+0xea>
 803c2ce:	3b04      	subs	r3, #4
 803c2d0:	429d      	cmp	r5, r3
 803c2d2:	461a      	mov	r2, r3
 803c2d4:	d30b      	bcc.n	803c2ee <quorem+0x100>
 803c2d6:	613c      	str	r4, [r7, #16]
 803c2d8:	3601      	adds	r6, #1
 803c2da:	4630      	mov	r0, r6
 803c2dc:	b003      	add	sp, #12
 803c2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c2e2:	6812      	ldr	r2, [r2, #0]
 803c2e4:	3b04      	subs	r3, #4
 803c2e6:	2a00      	cmp	r2, #0
 803c2e8:	d1cb      	bne.n	803c282 <quorem+0x94>
 803c2ea:	3c01      	subs	r4, #1
 803c2ec:	e7c6      	b.n	803c27c <quorem+0x8e>
 803c2ee:	6812      	ldr	r2, [r2, #0]
 803c2f0:	3b04      	subs	r3, #4
 803c2f2:	2a00      	cmp	r2, #0
 803c2f4:	d1ef      	bne.n	803c2d6 <quorem+0xe8>
 803c2f6:	3c01      	subs	r4, #1
 803c2f8:	e7ea      	b.n	803c2d0 <quorem+0xe2>
 803c2fa:	2000      	movs	r0, #0
 803c2fc:	e7ee      	b.n	803c2dc <quorem+0xee>
	...

0803c300 <_dtoa_r>:
 803c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c304:	69c7      	ldr	r7, [r0, #28]
 803c306:	b099      	sub	sp, #100	@ 0x64
 803c308:	ed8d 0b02 	vstr	d0, [sp, #8]
 803c30c:	ec55 4b10 	vmov	r4, r5, d0
 803c310:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 803c312:	9109      	str	r1, [sp, #36]	@ 0x24
 803c314:	4683      	mov	fp, r0
 803c316:	920e      	str	r2, [sp, #56]	@ 0x38
 803c318:	9313      	str	r3, [sp, #76]	@ 0x4c
 803c31a:	b97f      	cbnz	r7, 803c33c <_dtoa_r+0x3c>
 803c31c:	2010      	movs	r0, #16
 803c31e:	f000 fdfd 	bl	803cf1c <malloc>
 803c322:	4602      	mov	r2, r0
 803c324:	f8cb 001c 	str.w	r0, [fp, #28]
 803c328:	b920      	cbnz	r0, 803c334 <_dtoa_r+0x34>
 803c32a:	4ba7      	ldr	r3, [pc, #668]	@ (803c5c8 <_dtoa_r+0x2c8>)
 803c32c:	21ef      	movs	r1, #239	@ 0xef
 803c32e:	48a7      	ldr	r0, [pc, #668]	@ (803c5cc <_dtoa_r+0x2cc>)
 803c330:	f001 fc5a 	bl	803dbe8 <__assert_func>
 803c334:	e9c0 7701 	strd	r7, r7, [r0, #4]
 803c338:	6007      	str	r7, [r0, #0]
 803c33a:	60c7      	str	r7, [r0, #12]
 803c33c:	f8db 301c 	ldr.w	r3, [fp, #28]
 803c340:	6819      	ldr	r1, [r3, #0]
 803c342:	b159      	cbz	r1, 803c35c <_dtoa_r+0x5c>
 803c344:	685a      	ldr	r2, [r3, #4]
 803c346:	604a      	str	r2, [r1, #4]
 803c348:	2301      	movs	r3, #1
 803c34a:	4093      	lsls	r3, r2
 803c34c:	608b      	str	r3, [r1, #8]
 803c34e:	4658      	mov	r0, fp
 803c350:	f000 feda 	bl	803d108 <_Bfree>
 803c354:	f8db 301c 	ldr.w	r3, [fp, #28]
 803c358:	2200      	movs	r2, #0
 803c35a:	601a      	str	r2, [r3, #0]
 803c35c:	1e2b      	subs	r3, r5, #0
 803c35e:	bfb9      	ittee	lt
 803c360:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 803c364:	9303      	strlt	r3, [sp, #12]
 803c366:	2300      	movge	r3, #0
 803c368:	6033      	strge	r3, [r6, #0]
 803c36a:	9f03      	ldr	r7, [sp, #12]
 803c36c:	4b98      	ldr	r3, [pc, #608]	@ (803c5d0 <_dtoa_r+0x2d0>)
 803c36e:	bfbc      	itt	lt
 803c370:	2201      	movlt	r2, #1
 803c372:	6032      	strlt	r2, [r6, #0]
 803c374:	43bb      	bics	r3, r7
 803c376:	d112      	bne.n	803c39e <_dtoa_r+0x9e>
 803c378:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803c37a:	f242 730f 	movw	r3, #9999	@ 0x270f
 803c37e:	6013      	str	r3, [r2, #0]
 803c380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 803c384:	4323      	orrs	r3, r4
 803c386:	f000 854d 	beq.w	803ce24 <_dtoa_r+0xb24>
 803c38a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 803c38c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 803c5e4 <_dtoa_r+0x2e4>
 803c390:	2b00      	cmp	r3, #0
 803c392:	f000 854f 	beq.w	803ce34 <_dtoa_r+0xb34>
 803c396:	f10a 0303 	add.w	r3, sl, #3
 803c39a:	f000 bd49 	b.w	803ce30 <_dtoa_r+0xb30>
 803c39e:	ed9d 7b02 	vldr	d7, [sp, #8]
 803c3a2:	2200      	movs	r2, #0
 803c3a4:	ec51 0b17 	vmov	r0, r1, d7
 803c3a8:	2300      	movs	r3, #0
 803c3aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 803c3ae:	f7e4 fbbb 	bl	8020b28 <__aeabi_dcmpeq>
 803c3b2:	4680      	mov	r8, r0
 803c3b4:	b158      	cbz	r0, 803c3ce <_dtoa_r+0xce>
 803c3b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803c3b8:	2301      	movs	r3, #1
 803c3ba:	6013      	str	r3, [r2, #0]
 803c3bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 803c3be:	b113      	cbz	r3, 803c3c6 <_dtoa_r+0xc6>
 803c3c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 803c3c2:	4b84      	ldr	r3, [pc, #528]	@ (803c5d4 <_dtoa_r+0x2d4>)
 803c3c4:	6013      	str	r3, [r2, #0]
 803c3c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 803c5e8 <_dtoa_r+0x2e8>
 803c3ca:	f000 bd33 	b.w	803ce34 <_dtoa_r+0xb34>
 803c3ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 803c3d2:	aa16      	add	r2, sp, #88	@ 0x58
 803c3d4:	a917      	add	r1, sp, #92	@ 0x5c
 803c3d6:	4658      	mov	r0, fp
 803c3d8:	f001 f980 	bl	803d6dc <__d2b>
 803c3dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 803c3e0:	4681      	mov	r9, r0
 803c3e2:	2e00      	cmp	r6, #0
 803c3e4:	d077      	beq.n	803c4d6 <_dtoa_r+0x1d6>
 803c3e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803c3e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 803c3ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803c3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803c3f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 803c3f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 803c3fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 803c400:	4619      	mov	r1, r3
 803c402:	2200      	movs	r2, #0
 803c404:	4b74      	ldr	r3, [pc, #464]	@ (803c5d8 <_dtoa_r+0x2d8>)
 803c406:	f7e3 ff6f 	bl	80202e8 <__aeabi_dsub>
 803c40a:	a369      	add	r3, pc, #420	@ (adr r3, 803c5b0 <_dtoa_r+0x2b0>)
 803c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c410:	f7e4 f922 	bl	8020658 <__aeabi_dmul>
 803c414:	a368      	add	r3, pc, #416	@ (adr r3, 803c5b8 <_dtoa_r+0x2b8>)
 803c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c41a:	f7e3 ff67 	bl	80202ec <__adddf3>
 803c41e:	4604      	mov	r4, r0
 803c420:	4630      	mov	r0, r6
 803c422:	460d      	mov	r5, r1
 803c424:	f7e4 f8ae 	bl	8020584 <__aeabi_i2d>
 803c428:	a365      	add	r3, pc, #404	@ (adr r3, 803c5c0 <_dtoa_r+0x2c0>)
 803c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c42e:	f7e4 f913 	bl	8020658 <__aeabi_dmul>
 803c432:	4602      	mov	r2, r0
 803c434:	460b      	mov	r3, r1
 803c436:	4620      	mov	r0, r4
 803c438:	4629      	mov	r1, r5
 803c43a:	f7e3 ff57 	bl	80202ec <__adddf3>
 803c43e:	4604      	mov	r4, r0
 803c440:	460d      	mov	r5, r1
 803c442:	f7e4 fbb9 	bl	8020bb8 <__aeabi_d2iz>
 803c446:	2200      	movs	r2, #0
 803c448:	4607      	mov	r7, r0
 803c44a:	2300      	movs	r3, #0
 803c44c:	4620      	mov	r0, r4
 803c44e:	4629      	mov	r1, r5
 803c450:	f7e4 fb74 	bl	8020b3c <__aeabi_dcmplt>
 803c454:	b140      	cbz	r0, 803c468 <_dtoa_r+0x168>
 803c456:	4638      	mov	r0, r7
 803c458:	f7e4 f894 	bl	8020584 <__aeabi_i2d>
 803c45c:	4622      	mov	r2, r4
 803c45e:	462b      	mov	r3, r5
 803c460:	f7e4 fb62 	bl	8020b28 <__aeabi_dcmpeq>
 803c464:	b900      	cbnz	r0, 803c468 <_dtoa_r+0x168>
 803c466:	3f01      	subs	r7, #1
 803c468:	2f16      	cmp	r7, #22
 803c46a:	d851      	bhi.n	803c510 <_dtoa_r+0x210>
 803c46c:	4b5b      	ldr	r3, [pc, #364]	@ (803c5dc <_dtoa_r+0x2dc>)
 803c46e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 803c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803c47a:	f7e4 fb5f 	bl	8020b3c <__aeabi_dcmplt>
 803c47e:	2800      	cmp	r0, #0
 803c480:	d048      	beq.n	803c514 <_dtoa_r+0x214>
 803c482:	3f01      	subs	r7, #1
 803c484:	2300      	movs	r3, #0
 803c486:	9312      	str	r3, [sp, #72]	@ 0x48
 803c488:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803c48a:	1b9b      	subs	r3, r3, r6
 803c48c:	1e5a      	subs	r2, r3, #1
 803c48e:	bf44      	itt	mi
 803c490:	f1c3 0801 	rsbmi	r8, r3, #1
 803c494:	2300      	movmi	r3, #0
 803c496:	9208      	str	r2, [sp, #32]
 803c498:	bf54      	ite	pl
 803c49a:	f04f 0800 	movpl.w	r8, #0
 803c49e:	9308      	strmi	r3, [sp, #32]
 803c4a0:	2f00      	cmp	r7, #0
 803c4a2:	db39      	blt.n	803c518 <_dtoa_r+0x218>
 803c4a4:	9b08      	ldr	r3, [sp, #32]
 803c4a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 803c4a8:	443b      	add	r3, r7
 803c4aa:	9308      	str	r3, [sp, #32]
 803c4ac:	2300      	movs	r3, #0
 803c4ae:	930a      	str	r3, [sp, #40]	@ 0x28
 803c4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803c4b2:	2b09      	cmp	r3, #9
 803c4b4:	d864      	bhi.n	803c580 <_dtoa_r+0x280>
 803c4b6:	2b05      	cmp	r3, #5
 803c4b8:	bfc4      	itt	gt
 803c4ba:	3b04      	subgt	r3, #4
 803c4bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 803c4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803c4c0:	f1a3 0302 	sub.w	r3, r3, #2
 803c4c4:	bfcc      	ite	gt
 803c4c6:	2400      	movgt	r4, #0
 803c4c8:	2401      	movle	r4, #1
 803c4ca:	2b03      	cmp	r3, #3
 803c4cc:	d863      	bhi.n	803c596 <_dtoa_r+0x296>
 803c4ce:	e8df f003 	tbb	[pc, r3]
 803c4d2:	372a      	.short	0x372a
 803c4d4:	5535      	.short	0x5535
 803c4d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 803c4da:	441e      	add	r6, r3
 803c4dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 803c4e0:	2b20      	cmp	r3, #32
 803c4e2:	bfc1      	itttt	gt
 803c4e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 803c4e8:	409f      	lslgt	r7, r3
 803c4ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 803c4ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 803c4f2:	bfd6      	itet	le
 803c4f4:	f1c3 0320 	rsble	r3, r3, #32
 803c4f8:	ea47 0003 	orrgt.w	r0, r7, r3
 803c4fc:	fa04 f003 	lslle.w	r0, r4, r3
 803c500:	f7e4 f830 	bl	8020564 <__aeabi_ui2d>
 803c504:	2201      	movs	r2, #1
 803c506:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 803c50a:	3e01      	subs	r6, #1
 803c50c:	9214      	str	r2, [sp, #80]	@ 0x50
 803c50e:	e777      	b.n	803c400 <_dtoa_r+0x100>
 803c510:	2301      	movs	r3, #1
 803c512:	e7b8      	b.n	803c486 <_dtoa_r+0x186>
 803c514:	9012      	str	r0, [sp, #72]	@ 0x48
 803c516:	e7b7      	b.n	803c488 <_dtoa_r+0x188>
 803c518:	427b      	negs	r3, r7
 803c51a:	930a      	str	r3, [sp, #40]	@ 0x28
 803c51c:	2300      	movs	r3, #0
 803c51e:	eba8 0807 	sub.w	r8, r8, r7
 803c522:	930f      	str	r3, [sp, #60]	@ 0x3c
 803c524:	e7c4      	b.n	803c4b0 <_dtoa_r+0x1b0>
 803c526:	2300      	movs	r3, #0
 803c528:	930b      	str	r3, [sp, #44]	@ 0x2c
 803c52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803c52c:	2b00      	cmp	r3, #0
 803c52e:	dc35      	bgt.n	803c59c <_dtoa_r+0x29c>
 803c530:	2301      	movs	r3, #1
 803c532:	9300      	str	r3, [sp, #0]
 803c534:	9307      	str	r3, [sp, #28]
 803c536:	461a      	mov	r2, r3
 803c538:	920e      	str	r2, [sp, #56]	@ 0x38
 803c53a:	e00b      	b.n	803c554 <_dtoa_r+0x254>
 803c53c:	2301      	movs	r3, #1
 803c53e:	e7f3      	b.n	803c528 <_dtoa_r+0x228>
 803c540:	2300      	movs	r3, #0
 803c542:	930b      	str	r3, [sp, #44]	@ 0x2c
 803c544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803c546:	18fb      	adds	r3, r7, r3
 803c548:	9300      	str	r3, [sp, #0]
 803c54a:	3301      	adds	r3, #1
 803c54c:	2b01      	cmp	r3, #1
 803c54e:	9307      	str	r3, [sp, #28]
 803c550:	bfb8      	it	lt
 803c552:	2301      	movlt	r3, #1
 803c554:	f8db 001c 	ldr.w	r0, [fp, #28]
 803c558:	2100      	movs	r1, #0
 803c55a:	2204      	movs	r2, #4
 803c55c:	f102 0514 	add.w	r5, r2, #20
 803c560:	429d      	cmp	r5, r3
 803c562:	d91f      	bls.n	803c5a4 <_dtoa_r+0x2a4>
 803c564:	6041      	str	r1, [r0, #4]
 803c566:	4658      	mov	r0, fp
 803c568:	f000 fd8e 	bl	803d088 <_Balloc>
 803c56c:	4682      	mov	sl, r0
 803c56e:	2800      	cmp	r0, #0
 803c570:	d13c      	bne.n	803c5ec <_dtoa_r+0x2ec>
 803c572:	4b1b      	ldr	r3, [pc, #108]	@ (803c5e0 <_dtoa_r+0x2e0>)
 803c574:	4602      	mov	r2, r0
 803c576:	f240 11af 	movw	r1, #431	@ 0x1af
 803c57a:	e6d8      	b.n	803c32e <_dtoa_r+0x2e>
 803c57c:	2301      	movs	r3, #1
 803c57e:	e7e0      	b.n	803c542 <_dtoa_r+0x242>
 803c580:	2401      	movs	r4, #1
 803c582:	2300      	movs	r3, #0
 803c584:	9309      	str	r3, [sp, #36]	@ 0x24
 803c586:	940b      	str	r4, [sp, #44]	@ 0x2c
 803c588:	f04f 33ff 	mov.w	r3, #4294967295
 803c58c:	9300      	str	r3, [sp, #0]
 803c58e:	9307      	str	r3, [sp, #28]
 803c590:	2200      	movs	r2, #0
 803c592:	2312      	movs	r3, #18
 803c594:	e7d0      	b.n	803c538 <_dtoa_r+0x238>
 803c596:	2301      	movs	r3, #1
 803c598:	930b      	str	r3, [sp, #44]	@ 0x2c
 803c59a:	e7f5      	b.n	803c588 <_dtoa_r+0x288>
 803c59c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803c59e:	9300      	str	r3, [sp, #0]
 803c5a0:	9307      	str	r3, [sp, #28]
 803c5a2:	e7d7      	b.n	803c554 <_dtoa_r+0x254>
 803c5a4:	3101      	adds	r1, #1
 803c5a6:	0052      	lsls	r2, r2, #1
 803c5a8:	e7d8      	b.n	803c55c <_dtoa_r+0x25c>
 803c5aa:	bf00      	nop
 803c5ac:	f3af 8000 	nop.w
 803c5b0:	636f4361 	.word	0x636f4361
 803c5b4:	3fd287a7 	.word	0x3fd287a7
 803c5b8:	8b60c8b3 	.word	0x8b60c8b3
 803c5bc:	3fc68a28 	.word	0x3fc68a28
 803c5c0:	509f79fb 	.word	0x509f79fb
 803c5c4:	3fd34413 	.word	0x3fd34413
 803c5c8:	08040ac6 	.word	0x08040ac6
 803c5cc:	08040add 	.word	0x08040add
 803c5d0:	7ff00000 	.word	0x7ff00000
 803c5d4:	08040a96 	.word	0x08040a96
 803c5d8:	3ff80000 	.word	0x3ff80000
 803c5dc:	08040bd8 	.word	0x08040bd8
 803c5e0:	08040b35 	.word	0x08040b35
 803c5e4:	08040ac2 	.word	0x08040ac2
 803c5e8:	08040a95 	.word	0x08040a95
 803c5ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 803c5f0:	6018      	str	r0, [r3, #0]
 803c5f2:	9b07      	ldr	r3, [sp, #28]
 803c5f4:	2b0e      	cmp	r3, #14
 803c5f6:	f200 80a4 	bhi.w	803c742 <_dtoa_r+0x442>
 803c5fa:	2c00      	cmp	r4, #0
 803c5fc:	f000 80a1 	beq.w	803c742 <_dtoa_r+0x442>
 803c600:	2f00      	cmp	r7, #0
 803c602:	dd33      	ble.n	803c66c <_dtoa_r+0x36c>
 803c604:	4bad      	ldr	r3, [pc, #692]	@ (803c8bc <_dtoa_r+0x5bc>)
 803c606:	f007 020f 	and.w	r2, r7, #15
 803c60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803c60e:	ed93 7b00 	vldr	d7, [r3]
 803c612:	05f8      	lsls	r0, r7, #23
 803c614:	ed8d 7b04 	vstr	d7, [sp, #16]
 803c618:	ea4f 1427 	mov.w	r4, r7, asr #4
 803c61c:	d516      	bpl.n	803c64c <_dtoa_r+0x34c>
 803c61e:	4ba8      	ldr	r3, [pc, #672]	@ (803c8c0 <_dtoa_r+0x5c0>)
 803c620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803c624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 803c628:	f7e4 f940 	bl	80208ac <__aeabi_ddiv>
 803c62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803c630:	f004 040f 	and.w	r4, r4, #15
 803c634:	2603      	movs	r6, #3
 803c636:	4da2      	ldr	r5, [pc, #648]	@ (803c8c0 <_dtoa_r+0x5c0>)
 803c638:	b954      	cbnz	r4, 803c650 <_dtoa_r+0x350>
 803c63a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803c63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c642:	f7e4 f933 	bl	80208ac <__aeabi_ddiv>
 803c646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803c64a:	e028      	b.n	803c69e <_dtoa_r+0x39e>
 803c64c:	2602      	movs	r6, #2
 803c64e:	e7f2      	b.n	803c636 <_dtoa_r+0x336>
 803c650:	07e1      	lsls	r1, r4, #31
 803c652:	d508      	bpl.n	803c666 <_dtoa_r+0x366>
 803c654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803c658:	e9d5 2300 	ldrd	r2, r3, [r5]
 803c65c:	f7e3 fffc 	bl	8020658 <__aeabi_dmul>
 803c660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803c664:	3601      	adds	r6, #1
 803c666:	1064      	asrs	r4, r4, #1
 803c668:	3508      	adds	r5, #8
 803c66a:	e7e5      	b.n	803c638 <_dtoa_r+0x338>
 803c66c:	f000 80d2 	beq.w	803c814 <_dtoa_r+0x514>
 803c670:	427c      	negs	r4, r7
 803c672:	4b92      	ldr	r3, [pc, #584]	@ (803c8bc <_dtoa_r+0x5bc>)
 803c674:	4d92      	ldr	r5, [pc, #584]	@ (803c8c0 <_dtoa_r+0x5c0>)
 803c676:	f004 020f 	and.w	r2, r4, #15
 803c67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803c686:	f7e3 ffe7 	bl	8020658 <__aeabi_dmul>
 803c68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803c68e:	1124      	asrs	r4, r4, #4
 803c690:	2300      	movs	r3, #0
 803c692:	2602      	movs	r6, #2
 803c694:	2c00      	cmp	r4, #0
 803c696:	f040 80b2 	bne.w	803c7fe <_dtoa_r+0x4fe>
 803c69a:	2b00      	cmp	r3, #0
 803c69c:	d1d3      	bne.n	803c646 <_dtoa_r+0x346>
 803c69e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803c6a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 803c6a4:	2b00      	cmp	r3, #0
 803c6a6:	f000 80b7 	beq.w	803c818 <_dtoa_r+0x518>
 803c6aa:	4b86      	ldr	r3, [pc, #536]	@ (803c8c4 <_dtoa_r+0x5c4>)
 803c6ac:	2200      	movs	r2, #0
 803c6ae:	4620      	mov	r0, r4
 803c6b0:	4629      	mov	r1, r5
 803c6b2:	f7e4 fa43 	bl	8020b3c <__aeabi_dcmplt>
 803c6b6:	2800      	cmp	r0, #0
 803c6b8:	f000 80ae 	beq.w	803c818 <_dtoa_r+0x518>
 803c6bc:	9b07      	ldr	r3, [sp, #28]
 803c6be:	2b00      	cmp	r3, #0
 803c6c0:	f000 80aa 	beq.w	803c818 <_dtoa_r+0x518>
 803c6c4:	9b00      	ldr	r3, [sp, #0]
 803c6c6:	2b00      	cmp	r3, #0
 803c6c8:	dd37      	ble.n	803c73a <_dtoa_r+0x43a>
 803c6ca:	1e7b      	subs	r3, r7, #1
 803c6cc:	9304      	str	r3, [sp, #16]
 803c6ce:	4620      	mov	r0, r4
 803c6d0:	4b7d      	ldr	r3, [pc, #500]	@ (803c8c8 <_dtoa_r+0x5c8>)
 803c6d2:	2200      	movs	r2, #0
 803c6d4:	4629      	mov	r1, r5
 803c6d6:	f7e3 ffbf 	bl	8020658 <__aeabi_dmul>
 803c6da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803c6de:	9c00      	ldr	r4, [sp, #0]
 803c6e0:	3601      	adds	r6, #1
 803c6e2:	4630      	mov	r0, r6
 803c6e4:	f7e3 ff4e 	bl	8020584 <__aeabi_i2d>
 803c6e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803c6ec:	f7e3 ffb4 	bl	8020658 <__aeabi_dmul>
 803c6f0:	4b76      	ldr	r3, [pc, #472]	@ (803c8cc <_dtoa_r+0x5cc>)
 803c6f2:	2200      	movs	r2, #0
 803c6f4:	f7e3 fdfa 	bl	80202ec <__adddf3>
 803c6f8:	4605      	mov	r5, r0
 803c6fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 803c6fe:	2c00      	cmp	r4, #0
 803c700:	f040 808d 	bne.w	803c81e <_dtoa_r+0x51e>
 803c704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c708:	4b71      	ldr	r3, [pc, #452]	@ (803c8d0 <_dtoa_r+0x5d0>)
 803c70a:	2200      	movs	r2, #0
 803c70c:	f7e3 fdec 	bl	80202e8 <__aeabi_dsub>
 803c710:	4602      	mov	r2, r0
 803c712:	460b      	mov	r3, r1
 803c714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 803c718:	462a      	mov	r2, r5
 803c71a:	4633      	mov	r3, r6
 803c71c:	f7e4 fa2c 	bl	8020b78 <__aeabi_dcmpgt>
 803c720:	2800      	cmp	r0, #0
 803c722:	f040 828b 	bne.w	803cc3c <_dtoa_r+0x93c>
 803c726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c72a:	462a      	mov	r2, r5
 803c72c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 803c730:	f7e4 fa04 	bl	8020b3c <__aeabi_dcmplt>
 803c734:	2800      	cmp	r0, #0
 803c736:	f040 8128 	bne.w	803c98a <_dtoa_r+0x68a>
 803c73a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 803c73e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 803c742:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803c744:	2b00      	cmp	r3, #0
 803c746:	f2c0 815a 	blt.w	803c9fe <_dtoa_r+0x6fe>
 803c74a:	2f0e      	cmp	r7, #14
 803c74c:	f300 8157 	bgt.w	803c9fe <_dtoa_r+0x6fe>
 803c750:	4b5a      	ldr	r3, [pc, #360]	@ (803c8bc <_dtoa_r+0x5bc>)
 803c752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 803c756:	ed93 7b00 	vldr	d7, [r3]
 803c75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803c75c:	2b00      	cmp	r3, #0
 803c75e:	ed8d 7b00 	vstr	d7, [sp]
 803c762:	da03      	bge.n	803c76c <_dtoa_r+0x46c>
 803c764:	9b07      	ldr	r3, [sp, #28]
 803c766:	2b00      	cmp	r3, #0
 803c768:	f340 8101 	ble.w	803c96e <_dtoa_r+0x66e>
 803c76c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 803c770:	4656      	mov	r6, sl
 803c772:	e9dd 2300 	ldrd	r2, r3, [sp]
 803c776:	4620      	mov	r0, r4
 803c778:	4629      	mov	r1, r5
 803c77a:	f7e4 f897 	bl	80208ac <__aeabi_ddiv>
 803c77e:	f7e4 fa1b 	bl	8020bb8 <__aeabi_d2iz>
 803c782:	4680      	mov	r8, r0
 803c784:	f7e3 fefe 	bl	8020584 <__aeabi_i2d>
 803c788:	e9dd 2300 	ldrd	r2, r3, [sp]
 803c78c:	f7e3 ff64 	bl	8020658 <__aeabi_dmul>
 803c790:	4602      	mov	r2, r0
 803c792:	460b      	mov	r3, r1
 803c794:	4620      	mov	r0, r4
 803c796:	4629      	mov	r1, r5
 803c798:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 803c79c:	f7e3 fda4 	bl	80202e8 <__aeabi_dsub>
 803c7a0:	f806 4b01 	strb.w	r4, [r6], #1
 803c7a4:	9d07      	ldr	r5, [sp, #28]
 803c7a6:	eba6 040a 	sub.w	r4, r6, sl
 803c7aa:	42a5      	cmp	r5, r4
 803c7ac:	4602      	mov	r2, r0
 803c7ae:	460b      	mov	r3, r1
 803c7b0:	f040 8117 	bne.w	803c9e2 <_dtoa_r+0x6e2>
 803c7b4:	f7e3 fd9a 	bl	80202ec <__adddf3>
 803c7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 803c7bc:	4604      	mov	r4, r0
 803c7be:	460d      	mov	r5, r1
 803c7c0:	f7e4 f9da 	bl	8020b78 <__aeabi_dcmpgt>
 803c7c4:	2800      	cmp	r0, #0
 803c7c6:	f040 80f9 	bne.w	803c9bc <_dtoa_r+0x6bc>
 803c7ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 803c7ce:	4620      	mov	r0, r4
 803c7d0:	4629      	mov	r1, r5
 803c7d2:	f7e4 f9a9 	bl	8020b28 <__aeabi_dcmpeq>
 803c7d6:	b118      	cbz	r0, 803c7e0 <_dtoa_r+0x4e0>
 803c7d8:	f018 0f01 	tst.w	r8, #1
 803c7dc:	f040 80ee 	bne.w	803c9bc <_dtoa_r+0x6bc>
 803c7e0:	4649      	mov	r1, r9
 803c7e2:	4658      	mov	r0, fp
 803c7e4:	f000 fc90 	bl	803d108 <_Bfree>
 803c7e8:	2300      	movs	r3, #0
 803c7ea:	7033      	strb	r3, [r6, #0]
 803c7ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803c7ee:	3701      	adds	r7, #1
 803c7f0:	601f      	str	r7, [r3, #0]
 803c7f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 803c7f4:	2b00      	cmp	r3, #0
 803c7f6:	f000 831d 	beq.w	803ce34 <_dtoa_r+0xb34>
 803c7fa:	601e      	str	r6, [r3, #0]
 803c7fc:	e31a      	b.n	803ce34 <_dtoa_r+0xb34>
 803c7fe:	07e2      	lsls	r2, r4, #31
 803c800:	d505      	bpl.n	803c80e <_dtoa_r+0x50e>
 803c802:	e9d5 2300 	ldrd	r2, r3, [r5]
 803c806:	f7e3 ff27 	bl	8020658 <__aeabi_dmul>
 803c80a:	3601      	adds	r6, #1
 803c80c:	2301      	movs	r3, #1
 803c80e:	1064      	asrs	r4, r4, #1
 803c810:	3508      	adds	r5, #8
 803c812:	e73f      	b.n	803c694 <_dtoa_r+0x394>
 803c814:	2602      	movs	r6, #2
 803c816:	e742      	b.n	803c69e <_dtoa_r+0x39e>
 803c818:	9c07      	ldr	r4, [sp, #28]
 803c81a:	9704      	str	r7, [sp, #16]
 803c81c:	e761      	b.n	803c6e2 <_dtoa_r+0x3e2>
 803c81e:	4b27      	ldr	r3, [pc, #156]	@ (803c8bc <_dtoa_r+0x5bc>)
 803c820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803c822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 803c826:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 803c82a:	4454      	add	r4, sl
 803c82c:	2900      	cmp	r1, #0
 803c82e:	d053      	beq.n	803c8d8 <_dtoa_r+0x5d8>
 803c830:	4928      	ldr	r1, [pc, #160]	@ (803c8d4 <_dtoa_r+0x5d4>)
 803c832:	2000      	movs	r0, #0
 803c834:	f7e4 f83a 	bl	80208ac <__aeabi_ddiv>
 803c838:	4633      	mov	r3, r6
 803c83a:	462a      	mov	r2, r5
 803c83c:	f7e3 fd54 	bl	80202e8 <__aeabi_dsub>
 803c840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 803c844:	4656      	mov	r6, sl
 803c846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c84a:	f7e4 f9b5 	bl	8020bb8 <__aeabi_d2iz>
 803c84e:	4605      	mov	r5, r0
 803c850:	f7e3 fe98 	bl	8020584 <__aeabi_i2d>
 803c854:	4602      	mov	r2, r0
 803c856:	460b      	mov	r3, r1
 803c858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c85c:	f7e3 fd44 	bl	80202e8 <__aeabi_dsub>
 803c860:	3530      	adds	r5, #48	@ 0x30
 803c862:	4602      	mov	r2, r0
 803c864:	460b      	mov	r3, r1
 803c866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 803c86a:	f806 5b01 	strb.w	r5, [r6], #1
 803c86e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 803c872:	f7e4 f963 	bl	8020b3c <__aeabi_dcmplt>
 803c876:	2800      	cmp	r0, #0
 803c878:	d171      	bne.n	803c95e <_dtoa_r+0x65e>
 803c87a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803c87e:	4911      	ldr	r1, [pc, #68]	@ (803c8c4 <_dtoa_r+0x5c4>)
 803c880:	2000      	movs	r0, #0
 803c882:	f7e3 fd31 	bl	80202e8 <__aeabi_dsub>
 803c886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 803c88a:	f7e4 f957 	bl	8020b3c <__aeabi_dcmplt>
 803c88e:	2800      	cmp	r0, #0
 803c890:	f040 8095 	bne.w	803c9be <_dtoa_r+0x6be>
 803c894:	42a6      	cmp	r6, r4
 803c896:	f43f af50 	beq.w	803c73a <_dtoa_r+0x43a>
 803c89a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 803c89e:	4b0a      	ldr	r3, [pc, #40]	@ (803c8c8 <_dtoa_r+0x5c8>)
 803c8a0:	2200      	movs	r2, #0
 803c8a2:	f7e3 fed9 	bl	8020658 <__aeabi_dmul>
 803c8a6:	4b08      	ldr	r3, [pc, #32]	@ (803c8c8 <_dtoa_r+0x5c8>)
 803c8a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 803c8ac:	2200      	movs	r2, #0
 803c8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c8b2:	f7e3 fed1 	bl	8020658 <__aeabi_dmul>
 803c8b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803c8ba:	e7c4      	b.n	803c846 <_dtoa_r+0x546>
 803c8bc:	08040bd8 	.word	0x08040bd8
 803c8c0:	08040bb0 	.word	0x08040bb0
 803c8c4:	3ff00000 	.word	0x3ff00000
 803c8c8:	40240000 	.word	0x40240000
 803c8cc:	401c0000 	.word	0x401c0000
 803c8d0:	40140000 	.word	0x40140000
 803c8d4:	3fe00000 	.word	0x3fe00000
 803c8d8:	4631      	mov	r1, r6
 803c8da:	4628      	mov	r0, r5
 803c8dc:	f7e3 febc 	bl	8020658 <__aeabi_dmul>
 803c8e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 803c8e4:	9415      	str	r4, [sp, #84]	@ 0x54
 803c8e6:	4656      	mov	r6, sl
 803c8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c8ec:	f7e4 f964 	bl	8020bb8 <__aeabi_d2iz>
 803c8f0:	4605      	mov	r5, r0
 803c8f2:	f7e3 fe47 	bl	8020584 <__aeabi_i2d>
 803c8f6:	4602      	mov	r2, r0
 803c8f8:	460b      	mov	r3, r1
 803c8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c8fe:	f7e3 fcf3 	bl	80202e8 <__aeabi_dsub>
 803c902:	3530      	adds	r5, #48	@ 0x30
 803c904:	f806 5b01 	strb.w	r5, [r6], #1
 803c908:	4602      	mov	r2, r0
 803c90a:	460b      	mov	r3, r1
 803c90c:	42a6      	cmp	r6, r4
 803c90e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 803c912:	f04f 0200 	mov.w	r2, #0
 803c916:	d124      	bne.n	803c962 <_dtoa_r+0x662>
 803c918:	4bac      	ldr	r3, [pc, #688]	@ (803cbcc <_dtoa_r+0x8cc>)
 803c91a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 803c91e:	f7e3 fce5 	bl	80202ec <__adddf3>
 803c922:	4602      	mov	r2, r0
 803c924:	460b      	mov	r3, r1
 803c926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c92a:	f7e4 f925 	bl	8020b78 <__aeabi_dcmpgt>
 803c92e:	2800      	cmp	r0, #0
 803c930:	d145      	bne.n	803c9be <_dtoa_r+0x6be>
 803c932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 803c936:	49a5      	ldr	r1, [pc, #660]	@ (803cbcc <_dtoa_r+0x8cc>)
 803c938:	2000      	movs	r0, #0
 803c93a:	f7e3 fcd5 	bl	80202e8 <__aeabi_dsub>
 803c93e:	4602      	mov	r2, r0
 803c940:	460b      	mov	r3, r1
 803c942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803c946:	f7e4 f8f9 	bl	8020b3c <__aeabi_dcmplt>
 803c94a:	2800      	cmp	r0, #0
 803c94c:	f43f aef5 	beq.w	803c73a <_dtoa_r+0x43a>
 803c950:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 803c952:	1e73      	subs	r3, r6, #1
 803c954:	9315      	str	r3, [sp, #84]	@ 0x54
 803c956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 803c95a:	2b30      	cmp	r3, #48	@ 0x30
 803c95c:	d0f8      	beq.n	803c950 <_dtoa_r+0x650>
 803c95e:	9f04      	ldr	r7, [sp, #16]
 803c960:	e73e      	b.n	803c7e0 <_dtoa_r+0x4e0>
 803c962:	4b9b      	ldr	r3, [pc, #620]	@ (803cbd0 <_dtoa_r+0x8d0>)
 803c964:	f7e3 fe78 	bl	8020658 <__aeabi_dmul>
 803c968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803c96c:	e7bc      	b.n	803c8e8 <_dtoa_r+0x5e8>
 803c96e:	d10c      	bne.n	803c98a <_dtoa_r+0x68a>
 803c970:	4b98      	ldr	r3, [pc, #608]	@ (803cbd4 <_dtoa_r+0x8d4>)
 803c972:	2200      	movs	r2, #0
 803c974:	e9dd 0100 	ldrd	r0, r1, [sp]
 803c978:	f7e3 fe6e 	bl	8020658 <__aeabi_dmul>
 803c97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803c980:	f7e4 f8f0 	bl	8020b64 <__aeabi_dcmpge>
 803c984:	2800      	cmp	r0, #0
 803c986:	f000 8157 	beq.w	803cc38 <_dtoa_r+0x938>
 803c98a:	2400      	movs	r4, #0
 803c98c:	4625      	mov	r5, r4
 803c98e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803c990:	43db      	mvns	r3, r3
 803c992:	9304      	str	r3, [sp, #16]
 803c994:	4656      	mov	r6, sl
 803c996:	2700      	movs	r7, #0
 803c998:	4621      	mov	r1, r4
 803c99a:	4658      	mov	r0, fp
 803c99c:	f000 fbb4 	bl	803d108 <_Bfree>
 803c9a0:	2d00      	cmp	r5, #0
 803c9a2:	d0dc      	beq.n	803c95e <_dtoa_r+0x65e>
 803c9a4:	b12f      	cbz	r7, 803c9b2 <_dtoa_r+0x6b2>
 803c9a6:	42af      	cmp	r7, r5
 803c9a8:	d003      	beq.n	803c9b2 <_dtoa_r+0x6b2>
 803c9aa:	4639      	mov	r1, r7
 803c9ac:	4658      	mov	r0, fp
 803c9ae:	f000 fbab 	bl	803d108 <_Bfree>
 803c9b2:	4629      	mov	r1, r5
 803c9b4:	4658      	mov	r0, fp
 803c9b6:	f000 fba7 	bl	803d108 <_Bfree>
 803c9ba:	e7d0      	b.n	803c95e <_dtoa_r+0x65e>
 803c9bc:	9704      	str	r7, [sp, #16]
 803c9be:	4633      	mov	r3, r6
 803c9c0:	461e      	mov	r6, r3
 803c9c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803c9c6:	2a39      	cmp	r2, #57	@ 0x39
 803c9c8:	d107      	bne.n	803c9da <_dtoa_r+0x6da>
 803c9ca:	459a      	cmp	sl, r3
 803c9cc:	d1f8      	bne.n	803c9c0 <_dtoa_r+0x6c0>
 803c9ce:	9a04      	ldr	r2, [sp, #16]
 803c9d0:	3201      	adds	r2, #1
 803c9d2:	9204      	str	r2, [sp, #16]
 803c9d4:	2230      	movs	r2, #48	@ 0x30
 803c9d6:	f88a 2000 	strb.w	r2, [sl]
 803c9da:	781a      	ldrb	r2, [r3, #0]
 803c9dc:	3201      	adds	r2, #1
 803c9de:	701a      	strb	r2, [r3, #0]
 803c9e0:	e7bd      	b.n	803c95e <_dtoa_r+0x65e>
 803c9e2:	4b7b      	ldr	r3, [pc, #492]	@ (803cbd0 <_dtoa_r+0x8d0>)
 803c9e4:	2200      	movs	r2, #0
 803c9e6:	f7e3 fe37 	bl	8020658 <__aeabi_dmul>
 803c9ea:	2200      	movs	r2, #0
 803c9ec:	2300      	movs	r3, #0
 803c9ee:	4604      	mov	r4, r0
 803c9f0:	460d      	mov	r5, r1
 803c9f2:	f7e4 f899 	bl	8020b28 <__aeabi_dcmpeq>
 803c9f6:	2800      	cmp	r0, #0
 803c9f8:	f43f aebb 	beq.w	803c772 <_dtoa_r+0x472>
 803c9fc:	e6f0      	b.n	803c7e0 <_dtoa_r+0x4e0>
 803c9fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 803ca00:	2a00      	cmp	r2, #0
 803ca02:	f000 80db 	beq.w	803cbbc <_dtoa_r+0x8bc>
 803ca06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803ca08:	2a01      	cmp	r2, #1
 803ca0a:	f300 80bf 	bgt.w	803cb8c <_dtoa_r+0x88c>
 803ca0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 803ca10:	2a00      	cmp	r2, #0
 803ca12:	f000 80b7 	beq.w	803cb84 <_dtoa_r+0x884>
 803ca16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 803ca1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803ca1c:	4646      	mov	r6, r8
 803ca1e:	9a08      	ldr	r2, [sp, #32]
 803ca20:	2101      	movs	r1, #1
 803ca22:	441a      	add	r2, r3
 803ca24:	4658      	mov	r0, fp
 803ca26:	4498      	add	r8, r3
 803ca28:	9208      	str	r2, [sp, #32]
 803ca2a:	f000 fc21 	bl	803d270 <__i2b>
 803ca2e:	4605      	mov	r5, r0
 803ca30:	b15e      	cbz	r6, 803ca4a <_dtoa_r+0x74a>
 803ca32:	9b08      	ldr	r3, [sp, #32]
 803ca34:	2b00      	cmp	r3, #0
 803ca36:	dd08      	ble.n	803ca4a <_dtoa_r+0x74a>
 803ca38:	42b3      	cmp	r3, r6
 803ca3a:	9a08      	ldr	r2, [sp, #32]
 803ca3c:	bfa8      	it	ge
 803ca3e:	4633      	movge	r3, r6
 803ca40:	eba8 0803 	sub.w	r8, r8, r3
 803ca44:	1af6      	subs	r6, r6, r3
 803ca46:	1ad3      	subs	r3, r2, r3
 803ca48:	9308      	str	r3, [sp, #32]
 803ca4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803ca4c:	b1f3      	cbz	r3, 803ca8c <_dtoa_r+0x78c>
 803ca4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803ca50:	2b00      	cmp	r3, #0
 803ca52:	f000 80b7 	beq.w	803cbc4 <_dtoa_r+0x8c4>
 803ca56:	b18c      	cbz	r4, 803ca7c <_dtoa_r+0x77c>
 803ca58:	4629      	mov	r1, r5
 803ca5a:	4622      	mov	r2, r4
 803ca5c:	4658      	mov	r0, fp
 803ca5e:	f000 fcc7 	bl	803d3f0 <__pow5mult>
 803ca62:	464a      	mov	r2, r9
 803ca64:	4601      	mov	r1, r0
 803ca66:	4605      	mov	r5, r0
 803ca68:	4658      	mov	r0, fp
 803ca6a:	f000 fc17 	bl	803d29c <__multiply>
 803ca6e:	4649      	mov	r1, r9
 803ca70:	9004      	str	r0, [sp, #16]
 803ca72:	4658      	mov	r0, fp
 803ca74:	f000 fb48 	bl	803d108 <_Bfree>
 803ca78:	9b04      	ldr	r3, [sp, #16]
 803ca7a:	4699      	mov	r9, r3
 803ca7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803ca7e:	1b1a      	subs	r2, r3, r4
 803ca80:	d004      	beq.n	803ca8c <_dtoa_r+0x78c>
 803ca82:	4649      	mov	r1, r9
 803ca84:	4658      	mov	r0, fp
 803ca86:	f000 fcb3 	bl	803d3f0 <__pow5mult>
 803ca8a:	4681      	mov	r9, r0
 803ca8c:	2101      	movs	r1, #1
 803ca8e:	4658      	mov	r0, fp
 803ca90:	f000 fbee 	bl	803d270 <__i2b>
 803ca94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803ca96:	4604      	mov	r4, r0
 803ca98:	2b00      	cmp	r3, #0
 803ca9a:	f000 81cf 	beq.w	803ce3c <_dtoa_r+0xb3c>
 803ca9e:	461a      	mov	r2, r3
 803caa0:	4601      	mov	r1, r0
 803caa2:	4658      	mov	r0, fp
 803caa4:	f000 fca4 	bl	803d3f0 <__pow5mult>
 803caa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803caaa:	2b01      	cmp	r3, #1
 803caac:	4604      	mov	r4, r0
 803caae:	f300 8095 	bgt.w	803cbdc <_dtoa_r+0x8dc>
 803cab2:	9b02      	ldr	r3, [sp, #8]
 803cab4:	2b00      	cmp	r3, #0
 803cab6:	f040 8087 	bne.w	803cbc8 <_dtoa_r+0x8c8>
 803caba:	9b03      	ldr	r3, [sp, #12]
 803cabc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803cac0:	2b00      	cmp	r3, #0
 803cac2:	f040 8089 	bne.w	803cbd8 <_dtoa_r+0x8d8>
 803cac6:	9b03      	ldr	r3, [sp, #12]
 803cac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 803cacc:	0d1b      	lsrs	r3, r3, #20
 803cace:	051b      	lsls	r3, r3, #20
 803cad0:	b12b      	cbz	r3, 803cade <_dtoa_r+0x7de>
 803cad2:	9b08      	ldr	r3, [sp, #32]
 803cad4:	3301      	adds	r3, #1
 803cad6:	9308      	str	r3, [sp, #32]
 803cad8:	f108 0801 	add.w	r8, r8, #1
 803cadc:	2301      	movs	r3, #1
 803cade:	930a      	str	r3, [sp, #40]	@ 0x28
 803cae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803cae2:	2b00      	cmp	r3, #0
 803cae4:	f000 81b0 	beq.w	803ce48 <_dtoa_r+0xb48>
 803cae8:	6923      	ldr	r3, [r4, #16]
 803caea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803caee:	6918      	ldr	r0, [r3, #16]
 803caf0:	f000 fb72 	bl	803d1d8 <__hi0bits>
 803caf4:	f1c0 0020 	rsb	r0, r0, #32
 803caf8:	9b08      	ldr	r3, [sp, #32]
 803cafa:	4418      	add	r0, r3
 803cafc:	f010 001f 	ands.w	r0, r0, #31
 803cb00:	d077      	beq.n	803cbf2 <_dtoa_r+0x8f2>
 803cb02:	f1c0 0320 	rsb	r3, r0, #32
 803cb06:	2b04      	cmp	r3, #4
 803cb08:	dd6b      	ble.n	803cbe2 <_dtoa_r+0x8e2>
 803cb0a:	9b08      	ldr	r3, [sp, #32]
 803cb0c:	f1c0 001c 	rsb	r0, r0, #28
 803cb10:	4403      	add	r3, r0
 803cb12:	4480      	add	r8, r0
 803cb14:	4406      	add	r6, r0
 803cb16:	9308      	str	r3, [sp, #32]
 803cb18:	f1b8 0f00 	cmp.w	r8, #0
 803cb1c:	dd05      	ble.n	803cb2a <_dtoa_r+0x82a>
 803cb1e:	4649      	mov	r1, r9
 803cb20:	4642      	mov	r2, r8
 803cb22:	4658      	mov	r0, fp
 803cb24:	f000 fcbe 	bl	803d4a4 <__lshift>
 803cb28:	4681      	mov	r9, r0
 803cb2a:	9b08      	ldr	r3, [sp, #32]
 803cb2c:	2b00      	cmp	r3, #0
 803cb2e:	dd05      	ble.n	803cb3c <_dtoa_r+0x83c>
 803cb30:	4621      	mov	r1, r4
 803cb32:	461a      	mov	r2, r3
 803cb34:	4658      	mov	r0, fp
 803cb36:	f000 fcb5 	bl	803d4a4 <__lshift>
 803cb3a:	4604      	mov	r4, r0
 803cb3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803cb3e:	2b00      	cmp	r3, #0
 803cb40:	d059      	beq.n	803cbf6 <_dtoa_r+0x8f6>
 803cb42:	4621      	mov	r1, r4
 803cb44:	4648      	mov	r0, r9
 803cb46:	f000 fd19 	bl	803d57c <__mcmp>
 803cb4a:	2800      	cmp	r0, #0
 803cb4c:	da53      	bge.n	803cbf6 <_dtoa_r+0x8f6>
 803cb4e:	1e7b      	subs	r3, r7, #1
 803cb50:	9304      	str	r3, [sp, #16]
 803cb52:	4649      	mov	r1, r9
 803cb54:	2300      	movs	r3, #0
 803cb56:	220a      	movs	r2, #10
 803cb58:	4658      	mov	r0, fp
 803cb5a:	f000 faf7 	bl	803d14c <__multadd>
 803cb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803cb60:	4681      	mov	r9, r0
 803cb62:	2b00      	cmp	r3, #0
 803cb64:	f000 8172 	beq.w	803ce4c <_dtoa_r+0xb4c>
 803cb68:	2300      	movs	r3, #0
 803cb6a:	4629      	mov	r1, r5
 803cb6c:	220a      	movs	r2, #10
 803cb6e:	4658      	mov	r0, fp
 803cb70:	f000 faec 	bl	803d14c <__multadd>
 803cb74:	9b00      	ldr	r3, [sp, #0]
 803cb76:	2b00      	cmp	r3, #0
 803cb78:	4605      	mov	r5, r0
 803cb7a:	dc67      	bgt.n	803cc4c <_dtoa_r+0x94c>
 803cb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cb7e:	2b02      	cmp	r3, #2
 803cb80:	dc41      	bgt.n	803cc06 <_dtoa_r+0x906>
 803cb82:	e063      	b.n	803cc4c <_dtoa_r+0x94c>
 803cb84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803cb86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 803cb8a:	e746      	b.n	803ca1a <_dtoa_r+0x71a>
 803cb8c:	9b07      	ldr	r3, [sp, #28]
 803cb8e:	1e5c      	subs	r4, r3, #1
 803cb90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803cb92:	42a3      	cmp	r3, r4
 803cb94:	bfbf      	itttt	lt
 803cb96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 803cb98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 803cb9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 803cb9c:	1ae3      	sublt	r3, r4, r3
 803cb9e:	bfb4      	ite	lt
 803cba0:	18d2      	addlt	r2, r2, r3
 803cba2:	1b1c      	subge	r4, r3, r4
 803cba4:	9b07      	ldr	r3, [sp, #28]
 803cba6:	bfbc      	itt	lt
 803cba8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 803cbaa:	2400      	movlt	r4, #0
 803cbac:	2b00      	cmp	r3, #0
 803cbae:	bfb5      	itete	lt
 803cbb0:	eba8 0603 	sublt.w	r6, r8, r3
 803cbb4:	9b07      	ldrge	r3, [sp, #28]
 803cbb6:	2300      	movlt	r3, #0
 803cbb8:	4646      	movge	r6, r8
 803cbba:	e730      	b.n	803ca1e <_dtoa_r+0x71e>
 803cbbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803cbbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 803cbc0:	4646      	mov	r6, r8
 803cbc2:	e735      	b.n	803ca30 <_dtoa_r+0x730>
 803cbc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803cbc6:	e75c      	b.n	803ca82 <_dtoa_r+0x782>
 803cbc8:	2300      	movs	r3, #0
 803cbca:	e788      	b.n	803cade <_dtoa_r+0x7de>
 803cbcc:	3fe00000 	.word	0x3fe00000
 803cbd0:	40240000 	.word	0x40240000
 803cbd4:	40140000 	.word	0x40140000
 803cbd8:	9b02      	ldr	r3, [sp, #8]
 803cbda:	e780      	b.n	803cade <_dtoa_r+0x7de>
 803cbdc:	2300      	movs	r3, #0
 803cbde:	930a      	str	r3, [sp, #40]	@ 0x28
 803cbe0:	e782      	b.n	803cae8 <_dtoa_r+0x7e8>
 803cbe2:	d099      	beq.n	803cb18 <_dtoa_r+0x818>
 803cbe4:	9a08      	ldr	r2, [sp, #32]
 803cbe6:	331c      	adds	r3, #28
 803cbe8:	441a      	add	r2, r3
 803cbea:	4498      	add	r8, r3
 803cbec:	441e      	add	r6, r3
 803cbee:	9208      	str	r2, [sp, #32]
 803cbf0:	e792      	b.n	803cb18 <_dtoa_r+0x818>
 803cbf2:	4603      	mov	r3, r0
 803cbf4:	e7f6      	b.n	803cbe4 <_dtoa_r+0x8e4>
 803cbf6:	9b07      	ldr	r3, [sp, #28]
 803cbf8:	9704      	str	r7, [sp, #16]
 803cbfa:	2b00      	cmp	r3, #0
 803cbfc:	dc20      	bgt.n	803cc40 <_dtoa_r+0x940>
 803cbfe:	9300      	str	r3, [sp, #0]
 803cc00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cc02:	2b02      	cmp	r3, #2
 803cc04:	dd1e      	ble.n	803cc44 <_dtoa_r+0x944>
 803cc06:	9b00      	ldr	r3, [sp, #0]
 803cc08:	2b00      	cmp	r3, #0
 803cc0a:	f47f aec0 	bne.w	803c98e <_dtoa_r+0x68e>
 803cc0e:	4621      	mov	r1, r4
 803cc10:	2205      	movs	r2, #5
 803cc12:	4658      	mov	r0, fp
 803cc14:	f000 fa9a 	bl	803d14c <__multadd>
 803cc18:	4601      	mov	r1, r0
 803cc1a:	4604      	mov	r4, r0
 803cc1c:	4648      	mov	r0, r9
 803cc1e:	f000 fcad 	bl	803d57c <__mcmp>
 803cc22:	2800      	cmp	r0, #0
 803cc24:	f77f aeb3 	ble.w	803c98e <_dtoa_r+0x68e>
 803cc28:	4656      	mov	r6, sl
 803cc2a:	2331      	movs	r3, #49	@ 0x31
 803cc2c:	f806 3b01 	strb.w	r3, [r6], #1
 803cc30:	9b04      	ldr	r3, [sp, #16]
 803cc32:	3301      	adds	r3, #1
 803cc34:	9304      	str	r3, [sp, #16]
 803cc36:	e6ae      	b.n	803c996 <_dtoa_r+0x696>
 803cc38:	9c07      	ldr	r4, [sp, #28]
 803cc3a:	9704      	str	r7, [sp, #16]
 803cc3c:	4625      	mov	r5, r4
 803cc3e:	e7f3      	b.n	803cc28 <_dtoa_r+0x928>
 803cc40:	9b07      	ldr	r3, [sp, #28]
 803cc42:	9300      	str	r3, [sp, #0]
 803cc44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803cc46:	2b00      	cmp	r3, #0
 803cc48:	f000 8104 	beq.w	803ce54 <_dtoa_r+0xb54>
 803cc4c:	2e00      	cmp	r6, #0
 803cc4e:	dd05      	ble.n	803cc5c <_dtoa_r+0x95c>
 803cc50:	4629      	mov	r1, r5
 803cc52:	4632      	mov	r2, r6
 803cc54:	4658      	mov	r0, fp
 803cc56:	f000 fc25 	bl	803d4a4 <__lshift>
 803cc5a:	4605      	mov	r5, r0
 803cc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803cc5e:	2b00      	cmp	r3, #0
 803cc60:	d05a      	beq.n	803cd18 <_dtoa_r+0xa18>
 803cc62:	6869      	ldr	r1, [r5, #4]
 803cc64:	4658      	mov	r0, fp
 803cc66:	f000 fa0f 	bl	803d088 <_Balloc>
 803cc6a:	4606      	mov	r6, r0
 803cc6c:	b928      	cbnz	r0, 803cc7a <_dtoa_r+0x97a>
 803cc6e:	4b84      	ldr	r3, [pc, #528]	@ (803ce80 <_dtoa_r+0xb80>)
 803cc70:	4602      	mov	r2, r0
 803cc72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 803cc76:	f7ff bb5a 	b.w	803c32e <_dtoa_r+0x2e>
 803cc7a:	692a      	ldr	r2, [r5, #16]
 803cc7c:	3202      	adds	r2, #2
 803cc7e:	0092      	lsls	r2, r2, #2
 803cc80:	f105 010c 	add.w	r1, r5, #12
 803cc84:	300c      	adds	r0, #12
 803cc86:	f7ff faa4 	bl	803c1d2 <memcpy>
 803cc8a:	2201      	movs	r2, #1
 803cc8c:	4631      	mov	r1, r6
 803cc8e:	4658      	mov	r0, fp
 803cc90:	f000 fc08 	bl	803d4a4 <__lshift>
 803cc94:	f10a 0301 	add.w	r3, sl, #1
 803cc98:	9307      	str	r3, [sp, #28]
 803cc9a:	9b00      	ldr	r3, [sp, #0]
 803cc9c:	4453      	add	r3, sl
 803cc9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 803cca0:	9b02      	ldr	r3, [sp, #8]
 803cca2:	f003 0301 	and.w	r3, r3, #1
 803cca6:	462f      	mov	r7, r5
 803cca8:	930a      	str	r3, [sp, #40]	@ 0x28
 803ccaa:	4605      	mov	r5, r0
 803ccac:	9b07      	ldr	r3, [sp, #28]
 803ccae:	4621      	mov	r1, r4
 803ccb0:	3b01      	subs	r3, #1
 803ccb2:	4648      	mov	r0, r9
 803ccb4:	9300      	str	r3, [sp, #0]
 803ccb6:	f7ff fa9a 	bl	803c1ee <quorem>
 803ccba:	4639      	mov	r1, r7
 803ccbc:	9002      	str	r0, [sp, #8]
 803ccbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 803ccc2:	4648      	mov	r0, r9
 803ccc4:	f000 fc5a 	bl	803d57c <__mcmp>
 803ccc8:	462a      	mov	r2, r5
 803ccca:	9008      	str	r0, [sp, #32]
 803cccc:	4621      	mov	r1, r4
 803ccce:	4658      	mov	r0, fp
 803ccd0:	f000 fc70 	bl	803d5b4 <__mdiff>
 803ccd4:	68c2      	ldr	r2, [r0, #12]
 803ccd6:	4606      	mov	r6, r0
 803ccd8:	bb02      	cbnz	r2, 803cd1c <_dtoa_r+0xa1c>
 803ccda:	4601      	mov	r1, r0
 803ccdc:	4648      	mov	r0, r9
 803ccde:	f000 fc4d 	bl	803d57c <__mcmp>
 803cce2:	4602      	mov	r2, r0
 803cce4:	4631      	mov	r1, r6
 803cce6:	4658      	mov	r0, fp
 803cce8:	920e      	str	r2, [sp, #56]	@ 0x38
 803ccea:	f000 fa0d 	bl	803d108 <_Bfree>
 803ccee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ccf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803ccf2:	9e07      	ldr	r6, [sp, #28]
 803ccf4:	ea43 0102 	orr.w	r1, r3, r2
 803ccf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803ccfa:	4319      	orrs	r1, r3
 803ccfc:	d110      	bne.n	803cd20 <_dtoa_r+0xa20>
 803ccfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 803cd02:	d029      	beq.n	803cd58 <_dtoa_r+0xa58>
 803cd04:	9b08      	ldr	r3, [sp, #32]
 803cd06:	2b00      	cmp	r3, #0
 803cd08:	dd02      	ble.n	803cd10 <_dtoa_r+0xa10>
 803cd0a:	9b02      	ldr	r3, [sp, #8]
 803cd0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 803cd10:	9b00      	ldr	r3, [sp, #0]
 803cd12:	f883 8000 	strb.w	r8, [r3]
 803cd16:	e63f      	b.n	803c998 <_dtoa_r+0x698>
 803cd18:	4628      	mov	r0, r5
 803cd1a:	e7bb      	b.n	803cc94 <_dtoa_r+0x994>
 803cd1c:	2201      	movs	r2, #1
 803cd1e:	e7e1      	b.n	803cce4 <_dtoa_r+0x9e4>
 803cd20:	9b08      	ldr	r3, [sp, #32]
 803cd22:	2b00      	cmp	r3, #0
 803cd24:	db04      	blt.n	803cd30 <_dtoa_r+0xa30>
 803cd26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803cd28:	430b      	orrs	r3, r1
 803cd2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 803cd2c:	430b      	orrs	r3, r1
 803cd2e:	d120      	bne.n	803cd72 <_dtoa_r+0xa72>
 803cd30:	2a00      	cmp	r2, #0
 803cd32:	dded      	ble.n	803cd10 <_dtoa_r+0xa10>
 803cd34:	4649      	mov	r1, r9
 803cd36:	2201      	movs	r2, #1
 803cd38:	4658      	mov	r0, fp
 803cd3a:	f000 fbb3 	bl	803d4a4 <__lshift>
 803cd3e:	4621      	mov	r1, r4
 803cd40:	4681      	mov	r9, r0
 803cd42:	f000 fc1b 	bl	803d57c <__mcmp>
 803cd46:	2800      	cmp	r0, #0
 803cd48:	dc03      	bgt.n	803cd52 <_dtoa_r+0xa52>
 803cd4a:	d1e1      	bne.n	803cd10 <_dtoa_r+0xa10>
 803cd4c:	f018 0f01 	tst.w	r8, #1
 803cd50:	d0de      	beq.n	803cd10 <_dtoa_r+0xa10>
 803cd52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 803cd56:	d1d8      	bne.n	803cd0a <_dtoa_r+0xa0a>
 803cd58:	9a00      	ldr	r2, [sp, #0]
 803cd5a:	2339      	movs	r3, #57	@ 0x39
 803cd5c:	7013      	strb	r3, [r2, #0]
 803cd5e:	4633      	mov	r3, r6
 803cd60:	461e      	mov	r6, r3
 803cd62:	3b01      	subs	r3, #1
 803cd64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 803cd68:	2a39      	cmp	r2, #57	@ 0x39
 803cd6a:	d052      	beq.n	803ce12 <_dtoa_r+0xb12>
 803cd6c:	3201      	adds	r2, #1
 803cd6e:	701a      	strb	r2, [r3, #0]
 803cd70:	e612      	b.n	803c998 <_dtoa_r+0x698>
 803cd72:	2a00      	cmp	r2, #0
 803cd74:	dd07      	ble.n	803cd86 <_dtoa_r+0xa86>
 803cd76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 803cd7a:	d0ed      	beq.n	803cd58 <_dtoa_r+0xa58>
 803cd7c:	9a00      	ldr	r2, [sp, #0]
 803cd7e:	f108 0301 	add.w	r3, r8, #1
 803cd82:	7013      	strb	r3, [r2, #0]
 803cd84:	e608      	b.n	803c998 <_dtoa_r+0x698>
 803cd86:	9b07      	ldr	r3, [sp, #28]
 803cd88:	9a07      	ldr	r2, [sp, #28]
 803cd8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 803cd8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803cd90:	4293      	cmp	r3, r2
 803cd92:	d028      	beq.n	803cde6 <_dtoa_r+0xae6>
 803cd94:	4649      	mov	r1, r9
 803cd96:	2300      	movs	r3, #0
 803cd98:	220a      	movs	r2, #10
 803cd9a:	4658      	mov	r0, fp
 803cd9c:	f000 f9d6 	bl	803d14c <__multadd>
 803cda0:	42af      	cmp	r7, r5
 803cda2:	4681      	mov	r9, r0
 803cda4:	f04f 0300 	mov.w	r3, #0
 803cda8:	f04f 020a 	mov.w	r2, #10
 803cdac:	4639      	mov	r1, r7
 803cdae:	4658      	mov	r0, fp
 803cdb0:	d107      	bne.n	803cdc2 <_dtoa_r+0xac2>
 803cdb2:	f000 f9cb 	bl	803d14c <__multadd>
 803cdb6:	4607      	mov	r7, r0
 803cdb8:	4605      	mov	r5, r0
 803cdba:	9b07      	ldr	r3, [sp, #28]
 803cdbc:	3301      	adds	r3, #1
 803cdbe:	9307      	str	r3, [sp, #28]
 803cdc0:	e774      	b.n	803ccac <_dtoa_r+0x9ac>
 803cdc2:	f000 f9c3 	bl	803d14c <__multadd>
 803cdc6:	4629      	mov	r1, r5
 803cdc8:	4607      	mov	r7, r0
 803cdca:	2300      	movs	r3, #0
 803cdcc:	220a      	movs	r2, #10
 803cdce:	4658      	mov	r0, fp
 803cdd0:	f000 f9bc 	bl	803d14c <__multadd>
 803cdd4:	4605      	mov	r5, r0
 803cdd6:	e7f0      	b.n	803cdba <_dtoa_r+0xaba>
 803cdd8:	9b00      	ldr	r3, [sp, #0]
 803cdda:	2b00      	cmp	r3, #0
 803cddc:	bfcc      	ite	gt
 803cdde:	461e      	movgt	r6, r3
 803cde0:	2601      	movle	r6, #1
 803cde2:	4456      	add	r6, sl
 803cde4:	2700      	movs	r7, #0
 803cde6:	4649      	mov	r1, r9
 803cde8:	2201      	movs	r2, #1
 803cdea:	4658      	mov	r0, fp
 803cdec:	f000 fb5a 	bl	803d4a4 <__lshift>
 803cdf0:	4621      	mov	r1, r4
 803cdf2:	4681      	mov	r9, r0
 803cdf4:	f000 fbc2 	bl	803d57c <__mcmp>
 803cdf8:	2800      	cmp	r0, #0
 803cdfa:	dcb0      	bgt.n	803cd5e <_dtoa_r+0xa5e>
 803cdfc:	d102      	bne.n	803ce04 <_dtoa_r+0xb04>
 803cdfe:	f018 0f01 	tst.w	r8, #1
 803ce02:	d1ac      	bne.n	803cd5e <_dtoa_r+0xa5e>
 803ce04:	4633      	mov	r3, r6
 803ce06:	461e      	mov	r6, r3
 803ce08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803ce0c:	2a30      	cmp	r2, #48	@ 0x30
 803ce0e:	d0fa      	beq.n	803ce06 <_dtoa_r+0xb06>
 803ce10:	e5c2      	b.n	803c998 <_dtoa_r+0x698>
 803ce12:	459a      	cmp	sl, r3
 803ce14:	d1a4      	bne.n	803cd60 <_dtoa_r+0xa60>
 803ce16:	9b04      	ldr	r3, [sp, #16]
 803ce18:	3301      	adds	r3, #1
 803ce1a:	9304      	str	r3, [sp, #16]
 803ce1c:	2331      	movs	r3, #49	@ 0x31
 803ce1e:	f88a 3000 	strb.w	r3, [sl]
 803ce22:	e5b9      	b.n	803c998 <_dtoa_r+0x698>
 803ce24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 803ce26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 803ce84 <_dtoa_r+0xb84>
 803ce2a:	b11b      	cbz	r3, 803ce34 <_dtoa_r+0xb34>
 803ce2c:	f10a 0308 	add.w	r3, sl, #8
 803ce30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 803ce32:	6013      	str	r3, [r2, #0]
 803ce34:	4650      	mov	r0, sl
 803ce36:	b019      	add	sp, #100	@ 0x64
 803ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ce3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ce3e:	2b01      	cmp	r3, #1
 803ce40:	f77f ae37 	ble.w	803cab2 <_dtoa_r+0x7b2>
 803ce44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803ce46:	930a      	str	r3, [sp, #40]	@ 0x28
 803ce48:	2001      	movs	r0, #1
 803ce4a:	e655      	b.n	803caf8 <_dtoa_r+0x7f8>
 803ce4c:	9b00      	ldr	r3, [sp, #0]
 803ce4e:	2b00      	cmp	r3, #0
 803ce50:	f77f aed6 	ble.w	803cc00 <_dtoa_r+0x900>
 803ce54:	4656      	mov	r6, sl
 803ce56:	4621      	mov	r1, r4
 803ce58:	4648      	mov	r0, r9
 803ce5a:	f7ff f9c8 	bl	803c1ee <quorem>
 803ce5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 803ce62:	f806 8b01 	strb.w	r8, [r6], #1
 803ce66:	9b00      	ldr	r3, [sp, #0]
 803ce68:	eba6 020a 	sub.w	r2, r6, sl
 803ce6c:	4293      	cmp	r3, r2
 803ce6e:	ddb3      	ble.n	803cdd8 <_dtoa_r+0xad8>
 803ce70:	4649      	mov	r1, r9
 803ce72:	2300      	movs	r3, #0
 803ce74:	220a      	movs	r2, #10
 803ce76:	4658      	mov	r0, fp
 803ce78:	f000 f968 	bl	803d14c <__multadd>
 803ce7c:	4681      	mov	r9, r0
 803ce7e:	e7ea      	b.n	803ce56 <_dtoa_r+0xb56>
 803ce80:	08040b35 	.word	0x08040b35
 803ce84:	08040ab9 	.word	0x08040ab9

0803ce88 <_free_r>:
 803ce88:	b538      	push	{r3, r4, r5, lr}
 803ce8a:	4605      	mov	r5, r0
 803ce8c:	2900      	cmp	r1, #0
 803ce8e:	d041      	beq.n	803cf14 <_free_r+0x8c>
 803ce90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803ce94:	1f0c      	subs	r4, r1, #4
 803ce96:	2b00      	cmp	r3, #0
 803ce98:	bfb8      	it	lt
 803ce9a:	18e4      	addlt	r4, r4, r3
 803ce9c:	f000 f8e8 	bl	803d070 <__malloc_lock>
 803cea0:	4a1d      	ldr	r2, [pc, #116]	@ (803cf18 <_free_r+0x90>)
 803cea2:	6813      	ldr	r3, [r2, #0]
 803cea4:	b933      	cbnz	r3, 803ceb4 <_free_r+0x2c>
 803cea6:	6063      	str	r3, [r4, #4]
 803cea8:	6014      	str	r4, [r2, #0]
 803ceaa:	4628      	mov	r0, r5
 803ceac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803ceb0:	f000 b8e4 	b.w	803d07c <__malloc_unlock>
 803ceb4:	42a3      	cmp	r3, r4
 803ceb6:	d908      	bls.n	803ceca <_free_r+0x42>
 803ceb8:	6820      	ldr	r0, [r4, #0]
 803ceba:	1821      	adds	r1, r4, r0
 803cebc:	428b      	cmp	r3, r1
 803cebe:	bf01      	itttt	eq
 803cec0:	6819      	ldreq	r1, [r3, #0]
 803cec2:	685b      	ldreq	r3, [r3, #4]
 803cec4:	1809      	addeq	r1, r1, r0
 803cec6:	6021      	streq	r1, [r4, #0]
 803cec8:	e7ed      	b.n	803cea6 <_free_r+0x1e>
 803ceca:	461a      	mov	r2, r3
 803cecc:	685b      	ldr	r3, [r3, #4]
 803cece:	b10b      	cbz	r3, 803ced4 <_free_r+0x4c>
 803ced0:	42a3      	cmp	r3, r4
 803ced2:	d9fa      	bls.n	803ceca <_free_r+0x42>
 803ced4:	6811      	ldr	r1, [r2, #0]
 803ced6:	1850      	adds	r0, r2, r1
 803ced8:	42a0      	cmp	r0, r4
 803ceda:	d10b      	bne.n	803cef4 <_free_r+0x6c>
 803cedc:	6820      	ldr	r0, [r4, #0]
 803cede:	4401      	add	r1, r0
 803cee0:	1850      	adds	r0, r2, r1
 803cee2:	4283      	cmp	r3, r0
 803cee4:	6011      	str	r1, [r2, #0]
 803cee6:	d1e0      	bne.n	803ceaa <_free_r+0x22>
 803cee8:	6818      	ldr	r0, [r3, #0]
 803ceea:	685b      	ldr	r3, [r3, #4]
 803ceec:	6053      	str	r3, [r2, #4]
 803ceee:	4408      	add	r0, r1
 803cef0:	6010      	str	r0, [r2, #0]
 803cef2:	e7da      	b.n	803ceaa <_free_r+0x22>
 803cef4:	d902      	bls.n	803cefc <_free_r+0x74>
 803cef6:	230c      	movs	r3, #12
 803cef8:	602b      	str	r3, [r5, #0]
 803cefa:	e7d6      	b.n	803ceaa <_free_r+0x22>
 803cefc:	6820      	ldr	r0, [r4, #0]
 803cefe:	1821      	adds	r1, r4, r0
 803cf00:	428b      	cmp	r3, r1
 803cf02:	bf04      	itt	eq
 803cf04:	6819      	ldreq	r1, [r3, #0]
 803cf06:	685b      	ldreq	r3, [r3, #4]
 803cf08:	6063      	str	r3, [r4, #4]
 803cf0a:	bf04      	itt	eq
 803cf0c:	1809      	addeq	r1, r1, r0
 803cf0e:	6021      	streq	r1, [r4, #0]
 803cf10:	6054      	str	r4, [r2, #4]
 803cf12:	e7ca      	b.n	803ceaa <_free_r+0x22>
 803cf14:	bd38      	pop	{r3, r4, r5, pc}
 803cf16:	bf00      	nop
 803cf18:	200150e8 	.word	0x200150e8

0803cf1c <malloc>:
 803cf1c:	4b02      	ldr	r3, [pc, #8]	@ (803cf28 <malloc+0xc>)
 803cf1e:	4601      	mov	r1, r0
 803cf20:	6818      	ldr	r0, [r3, #0]
 803cf22:	f000 b825 	b.w	803cf70 <_malloc_r>
 803cf26:	bf00      	nop
 803cf28:	20003164 	.word	0x20003164

0803cf2c <sbrk_aligned>:
 803cf2c:	b570      	push	{r4, r5, r6, lr}
 803cf2e:	4e0f      	ldr	r6, [pc, #60]	@ (803cf6c <sbrk_aligned+0x40>)
 803cf30:	460c      	mov	r4, r1
 803cf32:	6831      	ldr	r1, [r6, #0]
 803cf34:	4605      	mov	r5, r0
 803cf36:	b911      	cbnz	r1, 803cf3e <sbrk_aligned+0x12>
 803cf38:	f000 fe46 	bl	803dbc8 <_sbrk_r>
 803cf3c:	6030      	str	r0, [r6, #0]
 803cf3e:	4621      	mov	r1, r4
 803cf40:	4628      	mov	r0, r5
 803cf42:	f000 fe41 	bl	803dbc8 <_sbrk_r>
 803cf46:	1c43      	adds	r3, r0, #1
 803cf48:	d103      	bne.n	803cf52 <sbrk_aligned+0x26>
 803cf4a:	f04f 34ff 	mov.w	r4, #4294967295
 803cf4e:	4620      	mov	r0, r4
 803cf50:	bd70      	pop	{r4, r5, r6, pc}
 803cf52:	1cc4      	adds	r4, r0, #3
 803cf54:	f024 0403 	bic.w	r4, r4, #3
 803cf58:	42a0      	cmp	r0, r4
 803cf5a:	d0f8      	beq.n	803cf4e <sbrk_aligned+0x22>
 803cf5c:	1a21      	subs	r1, r4, r0
 803cf5e:	4628      	mov	r0, r5
 803cf60:	f000 fe32 	bl	803dbc8 <_sbrk_r>
 803cf64:	3001      	adds	r0, #1
 803cf66:	d1f2      	bne.n	803cf4e <sbrk_aligned+0x22>
 803cf68:	e7ef      	b.n	803cf4a <sbrk_aligned+0x1e>
 803cf6a:	bf00      	nop
 803cf6c:	200150e4 	.word	0x200150e4

0803cf70 <_malloc_r>:
 803cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cf74:	1ccd      	adds	r5, r1, #3
 803cf76:	f025 0503 	bic.w	r5, r5, #3
 803cf7a:	3508      	adds	r5, #8
 803cf7c:	2d0c      	cmp	r5, #12
 803cf7e:	bf38      	it	cc
 803cf80:	250c      	movcc	r5, #12
 803cf82:	2d00      	cmp	r5, #0
 803cf84:	4606      	mov	r6, r0
 803cf86:	db01      	blt.n	803cf8c <_malloc_r+0x1c>
 803cf88:	42a9      	cmp	r1, r5
 803cf8a:	d904      	bls.n	803cf96 <_malloc_r+0x26>
 803cf8c:	230c      	movs	r3, #12
 803cf8e:	6033      	str	r3, [r6, #0]
 803cf90:	2000      	movs	r0, #0
 803cf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cf96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 803d06c <_malloc_r+0xfc>
 803cf9a:	f000 f869 	bl	803d070 <__malloc_lock>
 803cf9e:	f8d8 3000 	ldr.w	r3, [r8]
 803cfa2:	461c      	mov	r4, r3
 803cfa4:	bb44      	cbnz	r4, 803cff8 <_malloc_r+0x88>
 803cfa6:	4629      	mov	r1, r5
 803cfa8:	4630      	mov	r0, r6
 803cfaa:	f7ff ffbf 	bl	803cf2c <sbrk_aligned>
 803cfae:	1c43      	adds	r3, r0, #1
 803cfb0:	4604      	mov	r4, r0
 803cfb2:	d158      	bne.n	803d066 <_malloc_r+0xf6>
 803cfb4:	f8d8 4000 	ldr.w	r4, [r8]
 803cfb8:	4627      	mov	r7, r4
 803cfba:	2f00      	cmp	r7, #0
 803cfbc:	d143      	bne.n	803d046 <_malloc_r+0xd6>
 803cfbe:	2c00      	cmp	r4, #0
 803cfc0:	d04b      	beq.n	803d05a <_malloc_r+0xea>
 803cfc2:	6823      	ldr	r3, [r4, #0]
 803cfc4:	4639      	mov	r1, r7
 803cfc6:	4630      	mov	r0, r6
 803cfc8:	eb04 0903 	add.w	r9, r4, r3
 803cfcc:	f000 fdfc 	bl	803dbc8 <_sbrk_r>
 803cfd0:	4581      	cmp	r9, r0
 803cfd2:	d142      	bne.n	803d05a <_malloc_r+0xea>
 803cfd4:	6821      	ldr	r1, [r4, #0]
 803cfd6:	1a6d      	subs	r5, r5, r1
 803cfd8:	4629      	mov	r1, r5
 803cfda:	4630      	mov	r0, r6
 803cfdc:	f7ff ffa6 	bl	803cf2c <sbrk_aligned>
 803cfe0:	3001      	adds	r0, #1
 803cfe2:	d03a      	beq.n	803d05a <_malloc_r+0xea>
 803cfe4:	6823      	ldr	r3, [r4, #0]
 803cfe6:	442b      	add	r3, r5
 803cfe8:	6023      	str	r3, [r4, #0]
 803cfea:	f8d8 3000 	ldr.w	r3, [r8]
 803cfee:	685a      	ldr	r2, [r3, #4]
 803cff0:	bb62      	cbnz	r2, 803d04c <_malloc_r+0xdc>
 803cff2:	f8c8 7000 	str.w	r7, [r8]
 803cff6:	e00f      	b.n	803d018 <_malloc_r+0xa8>
 803cff8:	6822      	ldr	r2, [r4, #0]
 803cffa:	1b52      	subs	r2, r2, r5
 803cffc:	d420      	bmi.n	803d040 <_malloc_r+0xd0>
 803cffe:	2a0b      	cmp	r2, #11
 803d000:	d917      	bls.n	803d032 <_malloc_r+0xc2>
 803d002:	1961      	adds	r1, r4, r5
 803d004:	42a3      	cmp	r3, r4
 803d006:	6025      	str	r5, [r4, #0]
 803d008:	bf18      	it	ne
 803d00a:	6059      	strne	r1, [r3, #4]
 803d00c:	6863      	ldr	r3, [r4, #4]
 803d00e:	bf08      	it	eq
 803d010:	f8c8 1000 	streq.w	r1, [r8]
 803d014:	5162      	str	r2, [r4, r5]
 803d016:	604b      	str	r3, [r1, #4]
 803d018:	4630      	mov	r0, r6
 803d01a:	f000 f82f 	bl	803d07c <__malloc_unlock>
 803d01e:	f104 000b 	add.w	r0, r4, #11
 803d022:	1d23      	adds	r3, r4, #4
 803d024:	f020 0007 	bic.w	r0, r0, #7
 803d028:	1ac2      	subs	r2, r0, r3
 803d02a:	bf1c      	itt	ne
 803d02c:	1a1b      	subne	r3, r3, r0
 803d02e:	50a3      	strne	r3, [r4, r2]
 803d030:	e7af      	b.n	803cf92 <_malloc_r+0x22>
 803d032:	6862      	ldr	r2, [r4, #4]
 803d034:	42a3      	cmp	r3, r4
 803d036:	bf0c      	ite	eq
 803d038:	f8c8 2000 	streq.w	r2, [r8]
 803d03c:	605a      	strne	r2, [r3, #4]
 803d03e:	e7eb      	b.n	803d018 <_malloc_r+0xa8>
 803d040:	4623      	mov	r3, r4
 803d042:	6864      	ldr	r4, [r4, #4]
 803d044:	e7ae      	b.n	803cfa4 <_malloc_r+0x34>
 803d046:	463c      	mov	r4, r7
 803d048:	687f      	ldr	r7, [r7, #4]
 803d04a:	e7b6      	b.n	803cfba <_malloc_r+0x4a>
 803d04c:	461a      	mov	r2, r3
 803d04e:	685b      	ldr	r3, [r3, #4]
 803d050:	42a3      	cmp	r3, r4
 803d052:	d1fb      	bne.n	803d04c <_malloc_r+0xdc>
 803d054:	2300      	movs	r3, #0
 803d056:	6053      	str	r3, [r2, #4]
 803d058:	e7de      	b.n	803d018 <_malloc_r+0xa8>
 803d05a:	230c      	movs	r3, #12
 803d05c:	6033      	str	r3, [r6, #0]
 803d05e:	4630      	mov	r0, r6
 803d060:	f000 f80c 	bl	803d07c <__malloc_unlock>
 803d064:	e794      	b.n	803cf90 <_malloc_r+0x20>
 803d066:	6005      	str	r5, [r0, #0]
 803d068:	e7d6      	b.n	803d018 <_malloc_r+0xa8>
 803d06a:	bf00      	nop
 803d06c:	200150e8 	.word	0x200150e8

0803d070 <__malloc_lock>:
 803d070:	4801      	ldr	r0, [pc, #4]	@ (803d078 <__malloc_lock+0x8>)
 803d072:	f7ff b8a4 	b.w	803c1be <__retarget_lock_acquire_recursive>
 803d076:	bf00      	nop
 803d078:	200150e0 	.word	0x200150e0

0803d07c <__malloc_unlock>:
 803d07c:	4801      	ldr	r0, [pc, #4]	@ (803d084 <__malloc_unlock+0x8>)
 803d07e:	f7ff b89f 	b.w	803c1c0 <__retarget_lock_release_recursive>
 803d082:	bf00      	nop
 803d084:	200150e0 	.word	0x200150e0

0803d088 <_Balloc>:
 803d088:	b570      	push	{r4, r5, r6, lr}
 803d08a:	69c6      	ldr	r6, [r0, #28]
 803d08c:	4604      	mov	r4, r0
 803d08e:	460d      	mov	r5, r1
 803d090:	b976      	cbnz	r6, 803d0b0 <_Balloc+0x28>
 803d092:	2010      	movs	r0, #16
 803d094:	f7ff ff42 	bl	803cf1c <malloc>
 803d098:	4602      	mov	r2, r0
 803d09a:	61e0      	str	r0, [r4, #28]
 803d09c:	b920      	cbnz	r0, 803d0a8 <_Balloc+0x20>
 803d09e:	4b18      	ldr	r3, [pc, #96]	@ (803d100 <_Balloc+0x78>)
 803d0a0:	4818      	ldr	r0, [pc, #96]	@ (803d104 <_Balloc+0x7c>)
 803d0a2:	216b      	movs	r1, #107	@ 0x6b
 803d0a4:	f000 fda0 	bl	803dbe8 <__assert_func>
 803d0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803d0ac:	6006      	str	r6, [r0, #0]
 803d0ae:	60c6      	str	r6, [r0, #12]
 803d0b0:	69e6      	ldr	r6, [r4, #28]
 803d0b2:	68f3      	ldr	r3, [r6, #12]
 803d0b4:	b183      	cbz	r3, 803d0d8 <_Balloc+0x50>
 803d0b6:	69e3      	ldr	r3, [r4, #28]
 803d0b8:	68db      	ldr	r3, [r3, #12]
 803d0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 803d0be:	b9b8      	cbnz	r0, 803d0f0 <_Balloc+0x68>
 803d0c0:	2101      	movs	r1, #1
 803d0c2:	fa01 f605 	lsl.w	r6, r1, r5
 803d0c6:	1d72      	adds	r2, r6, #5
 803d0c8:	0092      	lsls	r2, r2, #2
 803d0ca:	4620      	mov	r0, r4
 803d0cc:	f000 fdaa 	bl	803dc24 <_calloc_r>
 803d0d0:	b160      	cbz	r0, 803d0ec <_Balloc+0x64>
 803d0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 803d0d6:	e00e      	b.n	803d0f6 <_Balloc+0x6e>
 803d0d8:	2221      	movs	r2, #33	@ 0x21
 803d0da:	2104      	movs	r1, #4
 803d0dc:	4620      	mov	r0, r4
 803d0de:	f000 fda1 	bl	803dc24 <_calloc_r>
 803d0e2:	69e3      	ldr	r3, [r4, #28]
 803d0e4:	60f0      	str	r0, [r6, #12]
 803d0e6:	68db      	ldr	r3, [r3, #12]
 803d0e8:	2b00      	cmp	r3, #0
 803d0ea:	d1e4      	bne.n	803d0b6 <_Balloc+0x2e>
 803d0ec:	2000      	movs	r0, #0
 803d0ee:	bd70      	pop	{r4, r5, r6, pc}
 803d0f0:	6802      	ldr	r2, [r0, #0]
 803d0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 803d0f6:	2300      	movs	r3, #0
 803d0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803d0fc:	e7f7      	b.n	803d0ee <_Balloc+0x66>
 803d0fe:	bf00      	nop
 803d100:	08040ac6 	.word	0x08040ac6
 803d104:	08040b46 	.word	0x08040b46

0803d108 <_Bfree>:
 803d108:	b570      	push	{r4, r5, r6, lr}
 803d10a:	69c6      	ldr	r6, [r0, #28]
 803d10c:	4605      	mov	r5, r0
 803d10e:	460c      	mov	r4, r1
 803d110:	b976      	cbnz	r6, 803d130 <_Bfree+0x28>
 803d112:	2010      	movs	r0, #16
 803d114:	f7ff ff02 	bl	803cf1c <malloc>
 803d118:	4602      	mov	r2, r0
 803d11a:	61e8      	str	r0, [r5, #28]
 803d11c:	b920      	cbnz	r0, 803d128 <_Bfree+0x20>
 803d11e:	4b09      	ldr	r3, [pc, #36]	@ (803d144 <_Bfree+0x3c>)
 803d120:	4809      	ldr	r0, [pc, #36]	@ (803d148 <_Bfree+0x40>)
 803d122:	218f      	movs	r1, #143	@ 0x8f
 803d124:	f000 fd60 	bl	803dbe8 <__assert_func>
 803d128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803d12c:	6006      	str	r6, [r0, #0]
 803d12e:	60c6      	str	r6, [r0, #12]
 803d130:	b13c      	cbz	r4, 803d142 <_Bfree+0x3a>
 803d132:	69eb      	ldr	r3, [r5, #28]
 803d134:	6862      	ldr	r2, [r4, #4]
 803d136:	68db      	ldr	r3, [r3, #12]
 803d138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 803d13c:	6021      	str	r1, [r4, #0]
 803d13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 803d142:	bd70      	pop	{r4, r5, r6, pc}
 803d144:	08040ac6 	.word	0x08040ac6
 803d148:	08040b46 	.word	0x08040b46

0803d14c <__multadd>:
 803d14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d150:	690d      	ldr	r5, [r1, #16]
 803d152:	4607      	mov	r7, r0
 803d154:	460c      	mov	r4, r1
 803d156:	461e      	mov	r6, r3
 803d158:	f101 0c14 	add.w	ip, r1, #20
 803d15c:	2000      	movs	r0, #0
 803d15e:	f8dc 3000 	ldr.w	r3, [ip]
 803d162:	b299      	uxth	r1, r3
 803d164:	fb02 6101 	mla	r1, r2, r1, r6
 803d168:	0c1e      	lsrs	r6, r3, #16
 803d16a:	0c0b      	lsrs	r3, r1, #16
 803d16c:	fb02 3306 	mla	r3, r2, r6, r3
 803d170:	b289      	uxth	r1, r1
 803d172:	3001      	adds	r0, #1
 803d174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 803d178:	4285      	cmp	r5, r0
 803d17a:	f84c 1b04 	str.w	r1, [ip], #4
 803d17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803d182:	dcec      	bgt.n	803d15e <__multadd+0x12>
 803d184:	b30e      	cbz	r6, 803d1ca <__multadd+0x7e>
 803d186:	68a3      	ldr	r3, [r4, #8]
 803d188:	42ab      	cmp	r3, r5
 803d18a:	dc19      	bgt.n	803d1c0 <__multadd+0x74>
 803d18c:	6861      	ldr	r1, [r4, #4]
 803d18e:	4638      	mov	r0, r7
 803d190:	3101      	adds	r1, #1
 803d192:	f7ff ff79 	bl	803d088 <_Balloc>
 803d196:	4680      	mov	r8, r0
 803d198:	b928      	cbnz	r0, 803d1a6 <__multadd+0x5a>
 803d19a:	4602      	mov	r2, r0
 803d19c:	4b0c      	ldr	r3, [pc, #48]	@ (803d1d0 <__multadd+0x84>)
 803d19e:	480d      	ldr	r0, [pc, #52]	@ (803d1d4 <__multadd+0x88>)
 803d1a0:	21ba      	movs	r1, #186	@ 0xba
 803d1a2:	f000 fd21 	bl	803dbe8 <__assert_func>
 803d1a6:	6922      	ldr	r2, [r4, #16]
 803d1a8:	3202      	adds	r2, #2
 803d1aa:	f104 010c 	add.w	r1, r4, #12
 803d1ae:	0092      	lsls	r2, r2, #2
 803d1b0:	300c      	adds	r0, #12
 803d1b2:	f7ff f80e 	bl	803c1d2 <memcpy>
 803d1b6:	4621      	mov	r1, r4
 803d1b8:	4638      	mov	r0, r7
 803d1ba:	f7ff ffa5 	bl	803d108 <_Bfree>
 803d1be:	4644      	mov	r4, r8
 803d1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803d1c4:	3501      	adds	r5, #1
 803d1c6:	615e      	str	r6, [r3, #20]
 803d1c8:	6125      	str	r5, [r4, #16]
 803d1ca:	4620      	mov	r0, r4
 803d1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803d1d0:	08040b35 	.word	0x08040b35
 803d1d4:	08040b46 	.word	0x08040b46

0803d1d8 <__hi0bits>:
 803d1d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 803d1dc:	4603      	mov	r3, r0
 803d1de:	bf36      	itet	cc
 803d1e0:	0403      	lslcc	r3, r0, #16
 803d1e2:	2000      	movcs	r0, #0
 803d1e4:	2010      	movcc	r0, #16
 803d1e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 803d1ea:	bf3c      	itt	cc
 803d1ec:	021b      	lslcc	r3, r3, #8
 803d1ee:	3008      	addcc	r0, #8
 803d1f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 803d1f4:	bf3c      	itt	cc
 803d1f6:	011b      	lslcc	r3, r3, #4
 803d1f8:	3004      	addcc	r0, #4
 803d1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803d1fe:	bf3c      	itt	cc
 803d200:	009b      	lslcc	r3, r3, #2
 803d202:	3002      	addcc	r0, #2
 803d204:	2b00      	cmp	r3, #0
 803d206:	db05      	blt.n	803d214 <__hi0bits+0x3c>
 803d208:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 803d20c:	f100 0001 	add.w	r0, r0, #1
 803d210:	bf08      	it	eq
 803d212:	2020      	moveq	r0, #32
 803d214:	4770      	bx	lr

0803d216 <__lo0bits>:
 803d216:	6803      	ldr	r3, [r0, #0]
 803d218:	4602      	mov	r2, r0
 803d21a:	f013 0007 	ands.w	r0, r3, #7
 803d21e:	d00b      	beq.n	803d238 <__lo0bits+0x22>
 803d220:	07d9      	lsls	r1, r3, #31
 803d222:	d421      	bmi.n	803d268 <__lo0bits+0x52>
 803d224:	0798      	lsls	r0, r3, #30
 803d226:	bf49      	itett	mi
 803d228:	085b      	lsrmi	r3, r3, #1
 803d22a:	089b      	lsrpl	r3, r3, #2
 803d22c:	2001      	movmi	r0, #1
 803d22e:	6013      	strmi	r3, [r2, #0]
 803d230:	bf5c      	itt	pl
 803d232:	6013      	strpl	r3, [r2, #0]
 803d234:	2002      	movpl	r0, #2
 803d236:	4770      	bx	lr
 803d238:	b299      	uxth	r1, r3
 803d23a:	b909      	cbnz	r1, 803d240 <__lo0bits+0x2a>
 803d23c:	0c1b      	lsrs	r3, r3, #16
 803d23e:	2010      	movs	r0, #16
 803d240:	b2d9      	uxtb	r1, r3
 803d242:	b909      	cbnz	r1, 803d248 <__lo0bits+0x32>
 803d244:	3008      	adds	r0, #8
 803d246:	0a1b      	lsrs	r3, r3, #8
 803d248:	0719      	lsls	r1, r3, #28
 803d24a:	bf04      	itt	eq
 803d24c:	091b      	lsreq	r3, r3, #4
 803d24e:	3004      	addeq	r0, #4
 803d250:	0799      	lsls	r1, r3, #30
 803d252:	bf04      	itt	eq
 803d254:	089b      	lsreq	r3, r3, #2
 803d256:	3002      	addeq	r0, #2
 803d258:	07d9      	lsls	r1, r3, #31
 803d25a:	d403      	bmi.n	803d264 <__lo0bits+0x4e>
 803d25c:	085b      	lsrs	r3, r3, #1
 803d25e:	f100 0001 	add.w	r0, r0, #1
 803d262:	d003      	beq.n	803d26c <__lo0bits+0x56>
 803d264:	6013      	str	r3, [r2, #0]
 803d266:	4770      	bx	lr
 803d268:	2000      	movs	r0, #0
 803d26a:	4770      	bx	lr
 803d26c:	2020      	movs	r0, #32
 803d26e:	4770      	bx	lr

0803d270 <__i2b>:
 803d270:	b510      	push	{r4, lr}
 803d272:	460c      	mov	r4, r1
 803d274:	2101      	movs	r1, #1
 803d276:	f7ff ff07 	bl	803d088 <_Balloc>
 803d27a:	4602      	mov	r2, r0
 803d27c:	b928      	cbnz	r0, 803d28a <__i2b+0x1a>
 803d27e:	4b05      	ldr	r3, [pc, #20]	@ (803d294 <__i2b+0x24>)
 803d280:	4805      	ldr	r0, [pc, #20]	@ (803d298 <__i2b+0x28>)
 803d282:	f240 1145 	movw	r1, #325	@ 0x145
 803d286:	f000 fcaf 	bl	803dbe8 <__assert_func>
 803d28a:	2301      	movs	r3, #1
 803d28c:	6144      	str	r4, [r0, #20]
 803d28e:	6103      	str	r3, [r0, #16]
 803d290:	bd10      	pop	{r4, pc}
 803d292:	bf00      	nop
 803d294:	08040b35 	.word	0x08040b35
 803d298:	08040b46 	.word	0x08040b46

0803d29c <__multiply>:
 803d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d2a0:	4614      	mov	r4, r2
 803d2a2:	690a      	ldr	r2, [r1, #16]
 803d2a4:	6923      	ldr	r3, [r4, #16]
 803d2a6:	429a      	cmp	r2, r3
 803d2a8:	bfa8      	it	ge
 803d2aa:	4623      	movge	r3, r4
 803d2ac:	460f      	mov	r7, r1
 803d2ae:	bfa4      	itt	ge
 803d2b0:	460c      	movge	r4, r1
 803d2b2:	461f      	movge	r7, r3
 803d2b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 803d2b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803d2bc:	68a3      	ldr	r3, [r4, #8]
 803d2be:	6861      	ldr	r1, [r4, #4]
 803d2c0:	eb0a 0609 	add.w	r6, sl, r9
 803d2c4:	42b3      	cmp	r3, r6
 803d2c6:	b085      	sub	sp, #20
 803d2c8:	bfb8      	it	lt
 803d2ca:	3101      	addlt	r1, #1
 803d2cc:	f7ff fedc 	bl	803d088 <_Balloc>
 803d2d0:	b930      	cbnz	r0, 803d2e0 <__multiply+0x44>
 803d2d2:	4602      	mov	r2, r0
 803d2d4:	4b44      	ldr	r3, [pc, #272]	@ (803d3e8 <__multiply+0x14c>)
 803d2d6:	4845      	ldr	r0, [pc, #276]	@ (803d3ec <__multiply+0x150>)
 803d2d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 803d2dc:	f000 fc84 	bl	803dbe8 <__assert_func>
 803d2e0:	f100 0514 	add.w	r5, r0, #20
 803d2e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 803d2e8:	462b      	mov	r3, r5
 803d2ea:	2200      	movs	r2, #0
 803d2ec:	4543      	cmp	r3, r8
 803d2ee:	d321      	bcc.n	803d334 <__multiply+0x98>
 803d2f0:	f107 0114 	add.w	r1, r7, #20
 803d2f4:	f104 0214 	add.w	r2, r4, #20
 803d2f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 803d2fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803d300:	9302      	str	r3, [sp, #8]
 803d302:	1b13      	subs	r3, r2, r4
 803d304:	3b15      	subs	r3, #21
 803d306:	f023 0303 	bic.w	r3, r3, #3
 803d30a:	3304      	adds	r3, #4
 803d30c:	f104 0715 	add.w	r7, r4, #21
 803d310:	42ba      	cmp	r2, r7
 803d312:	bf38      	it	cc
 803d314:	2304      	movcc	r3, #4
 803d316:	9301      	str	r3, [sp, #4]
 803d318:	9b02      	ldr	r3, [sp, #8]
 803d31a:	9103      	str	r1, [sp, #12]
 803d31c:	428b      	cmp	r3, r1
 803d31e:	d80c      	bhi.n	803d33a <__multiply+0x9e>
 803d320:	2e00      	cmp	r6, #0
 803d322:	dd03      	ble.n	803d32c <__multiply+0x90>
 803d324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 803d328:	2b00      	cmp	r3, #0
 803d32a:	d05b      	beq.n	803d3e4 <__multiply+0x148>
 803d32c:	6106      	str	r6, [r0, #16]
 803d32e:	b005      	add	sp, #20
 803d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d334:	f843 2b04 	str.w	r2, [r3], #4
 803d338:	e7d8      	b.n	803d2ec <__multiply+0x50>
 803d33a:	f8b1 a000 	ldrh.w	sl, [r1]
 803d33e:	f1ba 0f00 	cmp.w	sl, #0
 803d342:	d024      	beq.n	803d38e <__multiply+0xf2>
 803d344:	f104 0e14 	add.w	lr, r4, #20
 803d348:	46a9      	mov	r9, r5
 803d34a:	f04f 0c00 	mov.w	ip, #0
 803d34e:	f85e 7b04 	ldr.w	r7, [lr], #4
 803d352:	f8d9 3000 	ldr.w	r3, [r9]
 803d356:	fa1f fb87 	uxth.w	fp, r7
 803d35a:	b29b      	uxth	r3, r3
 803d35c:	fb0a 330b 	mla	r3, sl, fp, r3
 803d360:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 803d364:	f8d9 7000 	ldr.w	r7, [r9]
 803d368:	4463      	add	r3, ip
 803d36a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803d36e:	fb0a c70b 	mla	r7, sl, fp, ip
 803d372:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 803d376:	b29b      	uxth	r3, r3
 803d378:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 803d37c:	4572      	cmp	r2, lr
 803d37e:	f849 3b04 	str.w	r3, [r9], #4
 803d382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803d386:	d8e2      	bhi.n	803d34e <__multiply+0xb2>
 803d388:	9b01      	ldr	r3, [sp, #4]
 803d38a:	f845 c003 	str.w	ip, [r5, r3]
 803d38e:	9b03      	ldr	r3, [sp, #12]
 803d390:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 803d394:	3104      	adds	r1, #4
 803d396:	f1b9 0f00 	cmp.w	r9, #0
 803d39a:	d021      	beq.n	803d3e0 <__multiply+0x144>
 803d39c:	682b      	ldr	r3, [r5, #0]
 803d39e:	f104 0c14 	add.w	ip, r4, #20
 803d3a2:	46ae      	mov	lr, r5
 803d3a4:	f04f 0a00 	mov.w	sl, #0
 803d3a8:	f8bc b000 	ldrh.w	fp, [ip]
 803d3ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 803d3b0:	fb09 770b 	mla	r7, r9, fp, r7
 803d3b4:	4457      	add	r7, sl
 803d3b6:	b29b      	uxth	r3, r3
 803d3b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 803d3bc:	f84e 3b04 	str.w	r3, [lr], #4
 803d3c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 803d3c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803d3c8:	f8be 3000 	ldrh.w	r3, [lr]
 803d3cc:	fb09 330a 	mla	r3, r9, sl, r3
 803d3d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 803d3d4:	4562      	cmp	r2, ip
 803d3d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803d3da:	d8e5      	bhi.n	803d3a8 <__multiply+0x10c>
 803d3dc:	9f01      	ldr	r7, [sp, #4]
 803d3de:	51eb      	str	r3, [r5, r7]
 803d3e0:	3504      	adds	r5, #4
 803d3e2:	e799      	b.n	803d318 <__multiply+0x7c>
 803d3e4:	3e01      	subs	r6, #1
 803d3e6:	e79b      	b.n	803d320 <__multiply+0x84>
 803d3e8:	08040b35 	.word	0x08040b35
 803d3ec:	08040b46 	.word	0x08040b46

0803d3f0 <__pow5mult>:
 803d3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803d3f4:	4615      	mov	r5, r2
 803d3f6:	f012 0203 	ands.w	r2, r2, #3
 803d3fa:	4607      	mov	r7, r0
 803d3fc:	460e      	mov	r6, r1
 803d3fe:	d007      	beq.n	803d410 <__pow5mult+0x20>
 803d400:	4c25      	ldr	r4, [pc, #148]	@ (803d498 <__pow5mult+0xa8>)
 803d402:	3a01      	subs	r2, #1
 803d404:	2300      	movs	r3, #0
 803d406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803d40a:	f7ff fe9f 	bl	803d14c <__multadd>
 803d40e:	4606      	mov	r6, r0
 803d410:	10ad      	asrs	r5, r5, #2
 803d412:	d03d      	beq.n	803d490 <__pow5mult+0xa0>
 803d414:	69fc      	ldr	r4, [r7, #28]
 803d416:	b97c      	cbnz	r4, 803d438 <__pow5mult+0x48>
 803d418:	2010      	movs	r0, #16
 803d41a:	f7ff fd7f 	bl	803cf1c <malloc>
 803d41e:	4602      	mov	r2, r0
 803d420:	61f8      	str	r0, [r7, #28]
 803d422:	b928      	cbnz	r0, 803d430 <__pow5mult+0x40>
 803d424:	4b1d      	ldr	r3, [pc, #116]	@ (803d49c <__pow5mult+0xac>)
 803d426:	481e      	ldr	r0, [pc, #120]	@ (803d4a0 <__pow5mult+0xb0>)
 803d428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 803d42c:	f000 fbdc 	bl	803dbe8 <__assert_func>
 803d430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803d434:	6004      	str	r4, [r0, #0]
 803d436:	60c4      	str	r4, [r0, #12]
 803d438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 803d43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 803d440:	b94c      	cbnz	r4, 803d456 <__pow5mult+0x66>
 803d442:	f240 2171 	movw	r1, #625	@ 0x271
 803d446:	4638      	mov	r0, r7
 803d448:	f7ff ff12 	bl	803d270 <__i2b>
 803d44c:	2300      	movs	r3, #0
 803d44e:	f8c8 0008 	str.w	r0, [r8, #8]
 803d452:	4604      	mov	r4, r0
 803d454:	6003      	str	r3, [r0, #0]
 803d456:	f04f 0900 	mov.w	r9, #0
 803d45a:	07eb      	lsls	r3, r5, #31
 803d45c:	d50a      	bpl.n	803d474 <__pow5mult+0x84>
 803d45e:	4631      	mov	r1, r6
 803d460:	4622      	mov	r2, r4
 803d462:	4638      	mov	r0, r7
 803d464:	f7ff ff1a 	bl	803d29c <__multiply>
 803d468:	4631      	mov	r1, r6
 803d46a:	4680      	mov	r8, r0
 803d46c:	4638      	mov	r0, r7
 803d46e:	f7ff fe4b 	bl	803d108 <_Bfree>
 803d472:	4646      	mov	r6, r8
 803d474:	106d      	asrs	r5, r5, #1
 803d476:	d00b      	beq.n	803d490 <__pow5mult+0xa0>
 803d478:	6820      	ldr	r0, [r4, #0]
 803d47a:	b938      	cbnz	r0, 803d48c <__pow5mult+0x9c>
 803d47c:	4622      	mov	r2, r4
 803d47e:	4621      	mov	r1, r4
 803d480:	4638      	mov	r0, r7
 803d482:	f7ff ff0b 	bl	803d29c <__multiply>
 803d486:	6020      	str	r0, [r4, #0]
 803d488:	f8c0 9000 	str.w	r9, [r0]
 803d48c:	4604      	mov	r4, r0
 803d48e:	e7e4      	b.n	803d45a <__pow5mult+0x6a>
 803d490:	4630      	mov	r0, r6
 803d492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803d496:	bf00      	nop
 803d498:	08040ba0 	.word	0x08040ba0
 803d49c:	08040ac6 	.word	0x08040ac6
 803d4a0:	08040b46 	.word	0x08040b46

0803d4a4 <__lshift>:
 803d4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803d4a8:	460c      	mov	r4, r1
 803d4aa:	6849      	ldr	r1, [r1, #4]
 803d4ac:	6923      	ldr	r3, [r4, #16]
 803d4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803d4b2:	68a3      	ldr	r3, [r4, #8]
 803d4b4:	4607      	mov	r7, r0
 803d4b6:	4691      	mov	r9, r2
 803d4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 803d4bc:	f108 0601 	add.w	r6, r8, #1
 803d4c0:	42b3      	cmp	r3, r6
 803d4c2:	db0b      	blt.n	803d4dc <__lshift+0x38>
 803d4c4:	4638      	mov	r0, r7
 803d4c6:	f7ff fddf 	bl	803d088 <_Balloc>
 803d4ca:	4605      	mov	r5, r0
 803d4cc:	b948      	cbnz	r0, 803d4e2 <__lshift+0x3e>
 803d4ce:	4602      	mov	r2, r0
 803d4d0:	4b28      	ldr	r3, [pc, #160]	@ (803d574 <__lshift+0xd0>)
 803d4d2:	4829      	ldr	r0, [pc, #164]	@ (803d578 <__lshift+0xd4>)
 803d4d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 803d4d8:	f000 fb86 	bl	803dbe8 <__assert_func>
 803d4dc:	3101      	adds	r1, #1
 803d4de:	005b      	lsls	r3, r3, #1
 803d4e0:	e7ee      	b.n	803d4c0 <__lshift+0x1c>
 803d4e2:	2300      	movs	r3, #0
 803d4e4:	f100 0114 	add.w	r1, r0, #20
 803d4e8:	f100 0210 	add.w	r2, r0, #16
 803d4ec:	4618      	mov	r0, r3
 803d4ee:	4553      	cmp	r3, sl
 803d4f0:	db33      	blt.n	803d55a <__lshift+0xb6>
 803d4f2:	6920      	ldr	r0, [r4, #16]
 803d4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803d4f8:	f104 0314 	add.w	r3, r4, #20
 803d4fc:	f019 091f 	ands.w	r9, r9, #31
 803d500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803d504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803d508:	d02b      	beq.n	803d562 <__lshift+0xbe>
 803d50a:	f1c9 0e20 	rsb	lr, r9, #32
 803d50e:	468a      	mov	sl, r1
 803d510:	2200      	movs	r2, #0
 803d512:	6818      	ldr	r0, [r3, #0]
 803d514:	fa00 f009 	lsl.w	r0, r0, r9
 803d518:	4310      	orrs	r0, r2
 803d51a:	f84a 0b04 	str.w	r0, [sl], #4
 803d51e:	f853 2b04 	ldr.w	r2, [r3], #4
 803d522:	459c      	cmp	ip, r3
 803d524:	fa22 f20e 	lsr.w	r2, r2, lr
 803d528:	d8f3      	bhi.n	803d512 <__lshift+0x6e>
 803d52a:	ebac 0304 	sub.w	r3, ip, r4
 803d52e:	3b15      	subs	r3, #21
 803d530:	f023 0303 	bic.w	r3, r3, #3
 803d534:	3304      	adds	r3, #4
 803d536:	f104 0015 	add.w	r0, r4, #21
 803d53a:	4584      	cmp	ip, r0
 803d53c:	bf38      	it	cc
 803d53e:	2304      	movcc	r3, #4
 803d540:	50ca      	str	r2, [r1, r3]
 803d542:	b10a      	cbz	r2, 803d548 <__lshift+0xa4>
 803d544:	f108 0602 	add.w	r6, r8, #2
 803d548:	3e01      	subs	r6, #1
 803d54a:	4638      	mov	r0, r7
 803d54c:	612e      	str	r6, [r5, #16]
 803d54e:	4621      	mov	r1, r4
 803d550:	f7ff fdda 	bl	803d108 <_Bfree>
 803d554:	4628      	mov	r0, r5
 803d556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803d55a:	f842 0f04 	str.w	r0, [r2, #4]!
 803d55e:	3301      	adds	r3, #1
 803d560:	e7c5      	b.n	803d4ee <__lshift+0x4a>
 803d562:	3904      	subs	r1, #4
 803d564:	f853 2b04 	ldr.w	r2, [r3], #4
 803d568:	f841 2f04 	str.w	r2, [r1, #4]!
 803d56c:	459c      	cmp	ip, r3
 803d56e:	d8f9      	bhi.n	803d564 <__lshift+0xc0>
 803d570:	e7ea      	b.n	803d548 <__lshift+0xa4>
 803d572:	bf00      	nop
 803d574:	08040b35 	.word	0x08040b35
 803d578:	08040b46 	.word	0x08040b46

0803d57c <__mcmp>:
 803d57c:	690a      	ldr	r2, [r1, #16]
 803d57e:	4603      	mov	r3, r0
 803d580:	6900      	ldr	r0, [r0, #16]
 803d582:	1a80      	subs	r0, r0, r2
 803d584:	b530      	push	{r4, r5, lr}
 803d586:	d10e      	bne.n	803d5a6 <__mcmp+0x2a>
 803d588:	3314      	adds	r3, #20
 803d58a:	3114      	adds	r1, #20
 803d58c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 803d590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803d594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 803d598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 803d59c:	4295      	cmp	r5, r2
 803d59e:	d003      	beq.n	803d5a8 <__mcmp+0x2c>
 803d5a0:	d205      	bcs.n	803d5ae <__mcmp+0x32>
 803d5a2:	f04f 30ff 	mov.w	r0, #4294967295
 803d5a6:	bd30      	pop	{r4, r5, pc}
 803d5a8:	42a3      	cmp	r3, r4
 803d5aa:	d3f3      	bcc.n	803d594 <__mcmp+0x18>
 803d5ac:	e7fb      	b.n	803d5a6 <__mcmp+0x2a>
 803d5ae:	2001      	movs	r0, #1
 803d5b0:	e7f9      	b.n	803d5a6 <__mcmp+0x2a>
	...

0803d5b4 <__mdiff>:
 803d5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d5b8:	4689      	mov	r9, r1
 803d5ba:	4606      	mov	r6, r0
 803d5bc:	4611      	mov	r1, r2
 803d5be:	4648      	mov	r0, r9
 803d5c0:	4614      	mov	r4, r2
 803d5c2:	f7ff ffdb 	bl	803d57c <__mcmp>
 803d5c6:	1e05      	subs	r5, r0, #0
 803d5c8:	d112      	bne.n	803d5f0 <__mdiff+0x3c>
 803d5ca:	4629      	mov	r1, r5
 803d5cc:	4630      	mov	r0, r6
 803d5ce:	f7ff fd5b 	bl	803d088 <_Balloc>
 803d5d2:	4602      	mov	r2, r0
 803d5d4:	b928      	cbnz	r0, 803d5e2 <__mdiff+0x2e>
 803d5d6:	4b3f      	ldr	r3, [pc, #252]	@ (803d6d4 <__mdiff+0x120>)
 803d5d8:	f240 2137 	movw	r1, #567	@ 0x237
 803d5dc:	483e      	ldr	r0, [pc, #248]	@ (803d6d8 <__mdiff+0x124>)
 803d5de:	f000 fb03 	bl	803dbe8 <__assert_func>
 803d5e2:	2301      	movs	r3, #1
 803d5e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803d5e8:	4610      	mov	r0, r2
 803d5ea:	b003      	add	sp, #12
 803d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d5f0:	bfbc      	itt	lt
 803d5f2:	464b      	movlt	r3, r9
 803d5f4:	46a1      	movlt	r9, r4
 803d5f6:	4630      	mov	r0, r6
 803d5f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 803d5fc:	bfba      	itte	lt
 803d5fe:	461c      	movlt	r4, r3
 803d600:	2501      	movlt	r5, #1
 803d602:	2500      	movge	r5, #0
 803d604:	f7ff fd40 	bl	803d088 <_Balloc>
 803d608:	4602      	mov	r2, r0
 803d60a:	b918      	cbnz	r0, 803d614 <__mdiff+0x60>
 803d60c:	4b31      	ldr	r3, [pc, #196]	@ (803d6d4 <__mdiff+0x120>)
 803d60e:	f240 2145 	movw	r1, #581	@ 0x245
 803d612:	e7e3      	b.n	803d5dc <__mdiff+0x28>
 803d614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 803d618:	6926      	ldr	r6, [r4, #16]
 803d61a:	60c5      	str	r5, [r0, #12]
 803d61c:	f109 0310 	add.w	r3, r9, #16
 803d620:	f109 0514 	add.w	r5, r9, #20
 803d624:	f104 0e14 	add.w	lr, r4, #20
 803d628:	f100 0b14 	add.w	fp, r0, #20
 803d62c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 803d630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 803d634:	9301      	str	r3, [sp, #4]
 803d636:	46d9      	mov	r9, fp
 803d638:	f04f 0c00 	mov.w	ip, #0
 803d63c:	9b01      	ldr	r3, [sp, #4]
 803d63e:	f85e 0b04 	ldr.w	r0, [lr], #4
 803d642:	f853 af04 	ldr.w	sl, [r3, #4]!
 803d646:	9301      	str	r3, [sp, #4]
 803d648:	fa1f f38a 	uxth.w	r3, sl
 803d64c:	4619      	mov	r1, r3
 803d64e:	b283      	uxth	r3, r0
 803d650:	1acb      	subs	r3, r1, r3
 803d652:	0c00      	lsrs	r0, r0, #16
 803d654:	4463      	add	r3, ip
 803d656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 803d65a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 803d65e:	b29b      	uxth	r3, r3
 803d660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803d664:	4576      	cmp	r6, lr
 803d666:	f849 3b04 	str.w	r3, [r9], #4
 803d66a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803d66e:	d8e5      	bhi.n	803d63c <__mdiff+0x88>
 803d670:	1b33      	subs	r3, r6, r4
 803d672:	3b15      	subs	r3, #21
 803d674:	f023 0303 	bic.w	r3, r3, #3
 803d678:	3415      	adds	r4, #21
 803d67a:	3304      	adds	r3, #4
 803d67c:	42a6      	cmp	r6, r4
 803d67e:	bf38      	it	cc
 803d680:	2304      	movcc	r3, #4
 803d682:	441d      	add	r5, r3
 803d684:	445b      	add	r3, fp
 803d686:	461e      	mov	r6, r3
 803d688:	462c      	mov	r4, r5
 803d68a:	4544      	cmp	r4, r8
 803d68c:	d30e      	bcc.n	803d6ac <__mdiff+0xf8>
 803d68e:	f108 0103 	add.w	r1, r8, #3
 803d692:	1b49      	subs	r1, r1, r5
 803d694:	f021 0103 	bic.w	r1, r1, #3
 803d698:	3d03      	subs	r5, #3
 803d69a:	45a8      	cmp	r8, r5
 803d69c:	bf38      	it	cc
 803d69e:	2100      	movcc	r1, #0
 803d6a0:	440b      	add	r3, r1
 803d6a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803d6a6:	b191      	cbz	r1, 803d6ce <__mdiff+0x11a>
 803d6a8:	6117      	str	r7, [r2, #16]
 803d6aa:	e79d      	b.n	803d5e8 <__mdiff+0x34>
 803d6ac:	f854 1b04 	ldr.w	r1, [r4], #4
 803d6b0:	46e6      	mov	lr, ip
 803d6b2:	0c08      	lsrs	r0, r1, #16
 803d6b4:	fa1c fc81 	uxtah	ip, ip, r1
 803d6b8:	4471      	add	r1, lr
 803d6ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 803d6be:	b289      	uxth	r1, r1
 803d6c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803d6c4:	f846 1b04 	str.w	r1, [r6], #4
 803d6c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803d6cc:	e7dd      	b.n	803d68a <__mdiff+0xd6>
 803d6ce:	3f01      	subs	r7, #1
 803d6d0:	e7e7      	b.n	803d6a2 <__mdiff+0xee>
 803d6d2:	bf00      	nop
 803d6d4:	08040b35 	.word	0x08040b35
 803d6d8:	08040b46 	.word	0x08040b46

0803d6dc <__d2b>:
 803d6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803d6e0:	460f      	mov	r7, r1
 803d6e2:	2101      	movs	r1, #1
 803d6e4:	ec59 8b10 	vmov	r8, r9, d0
 803d6e8:	4616      	mov	r6, r2
 803d6ea:	f7ff fccd 	bl	803d088 <_Balloc>
 803d6ee:	4604      	mov	r4, r0
 803d6f0:	b930      	cbnz	r0, 803d700 <__d2b+0x24>
 803d6f2:	4602      	mov	r2, r0
 803d6f4:	4b23      	ldr	r3, [pc, #140]	@ (803d784 <__d2b+0xa8>)
 803d6f6:	4824      	ldr	r0, [pc, #144]	@ (803d788 <__d2b+0xac>)
 803d6f8:	f240 310f 	movw	r1, #783	@ 0x30f
 803d6fc:	f000 fa74 	bl	803dbe8 <__assert_func>
 803d700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803d704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803d708:	b10d      	cbz	r5, 803d70e <__d2b+0x32>
 803d70a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803d70e:	9301      	str	r3, [sp, #4]
 803d710:	f1b8 0300 	subs.w	r3, r8, #0
 803d714:	d023      	beq.n	803d75e <__d2b+0x82>
 803d716:	4668      	mov	r0, sp
 803d718:	9300      	str	r3, [sp, #0]
 803d71a:	f7ff fd7c 	bl	803d216 <__lo0bits>
 803d71e:	e9dd 1200 	ldrd	r1, r2, [sp]
 803d722:	b1d0      	cbz	r0, 803d75a <__d2b+0x7e>
 803d724:	f1c0 0320 	rsb	r3, r0, #32
 803d728:	fa02 f303 	lsl.w	r3, r2, r3
 803d72c:	430b      	orrs	r3, r1
 803d72e:	40c2      	lsrs	r2, r0
 803d730:	6163      	str	r3, [r4, #20]
 803d732:	9201      	str	r2, [sp, #4]
 803d734:	9b01      	ldr	r3, [sp, #4]
 803d736:	61a3      	str	r3, [r4, #24]
 803d738:	2b00      	cmp	r3, #0
 803d73a:	bf0c      	ite	eq
 803d73c:	2201      	moveq	r2, #1
 803d73e:	2202      	movne	r2, #2
 803d740:	6122      	str	r2, [r4, #16]
 803d742:	b1a5      	cbz	r5, 803d76e <__d2b+0x92>
 803d744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 803d748:	4405      	add	r5, r0
 803d74a:	603d      	str	r5, [r7, #0]
 803d74c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 803d750:	6030      	str	r0, [r6, #0]
 803d752:	4620      	mov	r0, r4
 803d754:	b003      	add	sp, #12
 803d756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803d75a:	6161      	str	r1, [r4, #20]
 803d75c:	e7ea      	b.n	803d734 <__d2b+0x58>
 803d75e:	a801      	add	r0, sp, #4
 803d760:	f7ff fd59 	bl	803d216 <__lo0bits>
 803d764:	9b01      	ldr	r3, [sp, #4]
 803d766:	6163      	str	r3, [r4, #20]
 803d768:	3020      	adds	r0, #32
 803d76a:	2201      	movs	r2, #1
 803d76c:	e7e8      	b.n	803d740 <__d2b+0x64>
 803d76e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803d772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803d776:	6038      	str	r0, [r7, #0]
 803d778:	6918      	ldr	r0, [r3, #16]
 803d77a:	f7ff fd2d 	bl	803d1d8 <__hi0bits>
 803d77e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803d782:	e7e5      	b.n	803d750 <__d2b+0x74>
 803d784:	08040b35 	.word	0x08040b35
 803d788:	08040b46 	.word	0x08040b46

0803d78c <__ssputs_r>:
 803d78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803d790:	688e      	ldr	r6, [r1, #8]
 803d792:	461f      	mov	r7, r3
 803d794:	42be      	cmp	r6, r7
 803d796:	680b      	ldr	r3, [r1, #0]
 803d798:	4682      	mov	sl, r0
 803d79a:	460c      	mov	r4, r1
 803d79c:	4690      	mov	r8, r2
 803d79e:	d82d      	bhi.n	803d7fc <__ssputs_r+0x70>
 803d7a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 803d7a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 803d7a8:	d026      	beq.n	803d7f8 <__ssputs_r+0x6c>
 803d7aa:	6965      	ldr	r5, [r4, #20]
 803d7ac:	6909      	ldr	r1, [r1, #16]
 803d7ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803d7b2:	eba3 0901 	sub.w	r9, r3, r1
 803d7b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803d7ba:	1c7b      	adds	r3, r7, #1
 803d7bc:	444b      	add	r3, r9
 803d7be:	106d      	asrs	r5, r5, #1
 803d7c0:	429d      	cmp	r5, r3
 803d7c2:	bf38      	it	cc
 803d7c4:	461d      	movcc	r5, r3
 803d7c6:	0553      	lsls	r3, r2, #21
 803d7c8:	d527      	bpl.n	803d81a <__ssputs_r+0x8e>
 803d7ca:	4629      	mov	r1, r5
 803d7cc:	f7ff fbd0 	bl	803cf70 <_malloc_r>
 803d7d0:	4606      	mov	r6, r0
 803d7d2:	b360      	cbz	r0, 803d82e <__ssputs_r+0xa2>
 803d7d4:	6921      	ldr	r1, [r4, #16]
 803d7d6:	464a      	mov	r2, r9
 803d7d8:	f7fe fcfb 	bl	803c1d2 <memcpy>
 803d7dc:	89a3      	ldrh	r3, [r4, #12]
 803d7de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 803d7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803d7e6:	81a3      	strh	r3, [r4, #12]
 803d7e8:	6126      	str	r6, [r4, #16]
 803d7ea:	6165      	str	r5, [r4, #20]
 803d7ec:	444e      	add	r6, r9
 803d7ee:	eba5 0509 	sub.w	r5, r5, r9
 803d7f2:	6026      	str	r6, [r4, #0]
 803d7f4:	60a5      	str	r5, [r4, #8]
 803d7f6:	463e      	mov	r6, r7
 803d7f8:	42be      	cmp	r6, r7
 803d7fa:	d900      	bls.n	803d7fe <__ssputs_r+0x72>
 803d7fc:	463e      	mov	r6, r7
 803d7fe:	6820      	ldr	r0, [r4, #0]
 803d800:	4632      	mov	r2, r6
 803d802:	4641      	mov	r1, r8
 803d804:	f000 f9c6 	bl	803db94 <memmove>
 803d808:	68a3      	ldr	r3, [r4, #8]
 803d80a:	1b9b      	subs	r3, r3, r6
 803d80c:	60a3      	str	r3, [r4, #8]
 803d80e:	6823      	ldr	r3, [r4, #0]
 803d810:	4433      	add	r3, r6
 803d812:	6023      	str	r3, [r4, #0]
 803d814:	2000      	movs	r0, #0
 803d816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803d81a:	462a      	mov	r2, r5
 803d81c:	f000 fa28 	bl	803dc70 <_realloc_r>
 803d820:	4606      	mov	r6, r0
 803d822:	2800      	cmp	r0, #0
 803d824:	d1e0      	bne.n	803d7e8 <__ssputs_r+0x5c>
 803d826:	6921      	ldr	r1, [r4, #16]
 803d828:	4650      	mov	r0, sl
 803d82a:	f7ff fb2d 	bl	803ce88 <_free_r>
 803d82e:	230c      	movs	r3, #12
 803d830:	f8ca 3000 	str.w	r3, [sl]
 803d834:	89a3      	ldrh	r3, [r4, #12]
 803d836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803d83a:	81a3      	strh	r3, [r4, #12]
 803d83c:	f04f 30ff 	mov.w	r0, #4294967295
 803d840:	e7e9      	b.n	803d816 <__ssputs_r+0x8a>
	...

0803d844 <_svfiprintf_r>:
 803d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d848:	4698      	mov	r8, r3
 803d84a:	898b      	ldrh	r3, [r1, #12]
 803d84c:	061b      	lsls	r3, r3, #24
 803d84e:	b09d      	sub	sp, #116	@ 0x74
 803d850:	4607      	mov	r7, r0
 803d852:	460d      	mov	r5, r1
 803d854:	4614      	mov	r4, r2
 803d856:	d510      	bpl.n	803d87a <_svfiprintf_r+0x36>
 803d858:	690b      	ldr	r3, [r1, #16]
 803d85a:	b973      	cbnz	r3, 803d87a <_svfiprintf_r+0x36>
 803d85c:	2140      	movs	r1, #64	@ 0x40
 803d85e:	f7ff fb87 	bl	803cf70 <_malloc_r>
 803d862:	6028      	str	r0, [r5, #0]
 803d864:	6128      	str	r0, [r5, #16]
 803d866:	b930      	cbnz	r0, 803d876 <_svfiprintf_r+0x32>
 803d868:	230c      	movs	r3, #12
 803d86a:	603b      	str	r3, [r7, #0]
 803d86c:	f04f 30ff 	mov.w	r0, #4294967295
 803d870:	b01d      	add	sp, #116	@ 0x74
 803d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d876:	2340      	movs	r3, #64	@ 0x40
 803d878:	616b      	str	r3, [r5, #20]
 803d87a:	2300      	movs	r3, #0
 803d87c:	9309      	str	r3, [sp, #36]	@ 0x24
 803d87e:	2320      	movs	r3, #32
 803d880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803d884:	f8cd 800c 	str.w	r8, [sp, #12]
 803d888:	2330      	movs	r3, #48	@ 0x30
 803d88a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 803da28 <_svfiprintf_r+0x1e4>
 803d88e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 803d892:	f04f 0901 	mov.w	r9, #1
 803d896:	4623      	mov	r3, r4
 803d898:	469a      	mov	sl, r3
 803d89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803d89e:	b10a      	cbz	r2, 803d8a4 <_svfiprintf_r+0x60>
 803d8a0:	2a25      	cmp	r2, #37	@ 0x25
 803d8a2:	d1f9      	bne.n	803d898 <_svfiprintf_r+0x54>
 803d8a4:	ebba 0b04 	subs.w	fp, sl, r4
 803d8a8:	d00b      	beq.n	803d8c2 <_svfiprintf_r+0x7e>
 803d8aa:	465b      	mov	r3, fp
 803d8ac:	4622      	mov	r2, r4
 803d8ae:	4629      	mov	r1, r5
 803d8b0:	4638      	mov	r0, r7
 803d8b2:	f7ff ff6b 	bl	803d78c <__ssputs_r>
 803d8b6:	3001      	adds	r0, #1
 803d8b8:	f000 80a7 	beq.w	803da0a <_svfiprintf_r+0x1c6>
 803d8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803d8be:	445a      	add	r2, fp
 803d8c0:	9209      	str	r2, [sp, #36]	@ 0x24
 803d8c2:	f89a 3000 	ldrb.w	r3, [sl]
 803d8c6:	2b00      	cmp	r3, #0
 803d8c8:	f000 809f 	beq.w	803da0a <_svfiprintf_r+0x1c6>
 803d8cc:	2300      	movs	r3, #0
 803d8ce:	f04f 32ff 	mov.w	r2, #4294967295
 803d8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803d8d6:	f10a 0a01 	add.w	sl, sl, #1
 803d8da:	9304      	str	r3, [sp, #16]
 803d8dc:	9307      	str	r3, [sp, #28]
 803d8de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 803d8e2:	931a      	str	r3, [sp, #104]	@ 0x68
 803d8e4:	4654      	mov	r4, sl
 803d8e6:	2205      	movs	r2, #5
 803d8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d8ec:	484e      	ldr	r0, [pc, #312]	@ (803da28 <_svfiprintf_r+0x1e4>)
 803d8ee:	f7e2 fc9f 	bl	8020230 <memchr>
 803d8f2:	9a04      	ldr	r2, [sp, #16]
 803d8f4:	b9d8      	cbnz	r0, 803d92e <_svfiprintf_r+0xea>
 803d8f6:	06d0      	lsls	r0, r2, #27
 803d8f8:	bf44      	itt	mi
 803d8fa:	2320      	movmi	r3, #32
 803d8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803d900:	0711      	lsls	r1, r2, #28
 803d902:	bf44      	itt	mi
 803d904:	232b      	movmi	r3, #43	@ 0x2b
 803d906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803d90a:	f89a 3000 	ldrb.w	r3, [sl]
 803d90e:	2b2a      	cmp	r3, #42	@ 0x2a
 803d910:	d015      	beq.n	803d93e <_svfiprintf_r+0xfa>
 803d912:	9a07      	ldr	r2, [sp, #28]
 803d914:	4654      	mov	r4, sl
 803d916:	2000      	movs	r0, #0
 803d918:	f04f 0c0a 	mov.w	ip, #10
 803d91c:	4621      	mov	r1, r4
 803d91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 803d922:	3b30      	subs	r3, #48	@ 0x30
 803d924:	2b09      	cmp	r3, #9
 803d926:	d94b      	bls.n	803d9c0 <_svfiprintf_r+0x17c>
 803d928:	b1b0      	cbz	r0, 803d958 <_svfiprintf_r+0x114>
 803d92a:	9207      	str	r2, [sp, #28]
 803d92c:	e014      	b.n	803d958 <_svfiprintf_r+0x114>
 803d92e:	eba0 0308 	sub.w	r3, r0, r8
 803d932:	fa09 f303 	lsl.w	r3, r9, r3
 803d936:	4313      	orrs	r3, r2
 803d938:	9304      	str	r3, [sp, #16]
 803d93a:	46a2      	mov	sl, r4
 803d93c:	e7d2      	b.n	803d8e4 <_svfiprintf_r+0xa0>
 803d93e:	9b03      	ldr	r3, [sp, #12]
 803d940:	1d19      	adds	r1, r3, #4
 803d942:	681b      	ldr	r3, [r3, #0]
 803d944:	9103      	str	r1, [sp, #12]
 803d946:	2b00      	cmp	r3, #0
 803d948:	bfbb      	ittet	lt
 803d94a:	425b      	neglt	r3, r3
 803d94c:	f042 0202 	orrlt.w	r2, r2, #2
 803d950:	9307      	strge	r3, [sp, #28]
 803d952:	9307      	strlt	r3, [sp, #28]
 803d954:	bfb8      	it	lt
 803d956:	9204      	strlt	r2, [sp, #16]
 803d958:	7823      	ldrb	r3, [r4, #0]
 803d95a:	2b2e      	cmp	r3, #46	@ 0x2e
 803d95c:	d10a      	bne.n	803d974 <_svfiprintf_r+0x130>
 803d95e:	7863      	ldrb	r3, [r4, #1]
 803d960:	2b2a      	cmp	r3, #42	@ 0x2a
 803d962:	d132      	bne.n	803d9ca <_svfiprintf_r+0x186>
 803d964:	9b03      	ldr	r3, [sp, #12]
 803d966:	1d1a      	adds	r2, r3, #4
 803d968:	681b      	ldr	r3, [r3, #0]
 803d96a:	9203      	str	r2, [sp, #12]
 803d96c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 803d970:	3402      	adds	r4, #2
 803d972:	9305      	str	r3, [sp, #20]
 803d974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 803da38 <_svfiprintf_r+0x1f4>
 803d978:	7821      	ldrb	r1, [r4, #0]
 803d97a:	2203      	movs	r2, #3
 803d97c:	4650      	mov	r0, sl
 803d97e:	f7e2 fc57 	bl	8020230 <memchr>
 803d982:	b138      	cbz	r0, 803d994 <_svfiprintf_r+0x150>
 803d984:	9b04      	ldr	r3, [sp, #16]
 803d986:	eba0 000a 	sub.w	r0, r0, sl
 803d98a:	2240      	movs	r2, #64	@ 0x40
 803d98c:	4082      	lsls	r2, r0
 803d98e:	4313      	orrs	r3, r2
 803d990:	3401      	adds	r4, #1
 803d992:	9304      	str	r3, [sp, #16]
 803d994:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d998:	4824      	ldr	r0, [pc, #144]	@ (803da2c <_svfiprintf_r+0x1e8>)
 803d99a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 803d99e:	2206      	movs	r2, #6
 803d9a0:	f7e2 fc46 	bl	8020230 <memchr>
 803d9a4:	2800      	cmp	r0, #0
 803d9a6:	d036      	beq.n	803da16 <_svfiprintf_r+0x1d2>
 803d9a8:	4b21      	ldr	r3, [pc, #132]	@ (803da30 <_svfiprintf_r+0x1ec>)
 803d9aa:	bb1b      	cbnz	r3, 803d9f4 <_svfiprintf_r+0x1b0>
 803d9ac:	9b03      	ldr	r3, [sp, #12]
 803d9ae:	3307      	adds	r3, #7
 803d9b0:	f023 0307 	bic.w	r3, r3, #7
 803d9b4:	3308      	adds	r3, #8
 803d9b6:	9303      	str	r3, [sp, #12]
 803d9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803d9ba:	4433      	add	r3, r6
 803d9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 803d9be:	e76a      	b.n	803d896 <_svfiprintf_r+0x52>
 803d9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 803d9c4:	460c      	mov	r4, r1
 803d9c6:	2001      	movs	r0, #1
 803d9c8:	e7a8      	b.n	803d91c <_svfiprintf_r+0xd8>
 803d9ca:	2300      	movs	r3, #0
 803d9cc:	3401      	adds	r4, #1
 803d9ce:	9305      	str	r3, [sp, #20]
 803d9d0:	4619      	mov	r1, r3
 803d9d2:	f04f 0c0a 	mov.w	ip, #10
 803d9d6:	4620      	mov	r0, r4
 803d9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 803d9dc:	3a30      	subs	r2, #48	@ 0x30
 803d9de:	2a09      	cmp	r2, #9
 803d9e0:	d903      	bls.n	803d9ea <_svfiprintf_r+0x1a6>
 803d9e2:	2b00      	cmp	r3, #0
 803d9e4:	d0c6      	beq.n	803d974 <_svfiprintf_r+0x130>
 803d9e6:	9105      	str	r1, [sp, #20]
 803d9e8:	e7c4      	b.n	803d974 <_svfiprintf_r+0x130>
 803d9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 803d9ee:	4604      	mov	r4, r0
 803d9f0:	2301      	movs	r3, #1
 803d9f2:	e7f0      	b.n	803d9d6 <_svfiprintf_r+0x192>
 803d9f4:	ab03      	add	r3, sp, #12
 803d9f6:	9300      	str	r3, [sp, #0]
 803d9f8:	462a      	mov	r2, r5
 803d9fa:	4b0e      	ldr	r3, [pc, #56]	@ (803da34 <_svfiprintf_r+0x1f0>)
 803d9fc:	a904      	add	r1, sp, #16
 803d9fe:	4638      	mov	r0, r7
 803da00:	f7fd fe62 	bl	803b6c8 <_printf_float>
 803da04:	1c42      	adds	r2, r0, #1
 803da06:	4606      	mov	r6, r0
 803da08:	d1d6      	bne.n	803d9b8 <_svfiprintf_r+0x174>
 803da0a:	89ab      	ldrh	r3, [r5, #12]
 803da0c:	065b      	lsls	r3, r3, #25
 803da0e:	f53f af2d 	bmi.w	803d86c <_svfiprintf_r+0x28>
 803da12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803da14:	e72c      	b.n	803d870 <_svfiprintf_r+0x2c>
 803da16:	ab03      	add	r3, sp, #12
 803da18:	9300      	str	r3, [sp, #0]
 803da1a:	462a      	mov	r2, r5
 803da1c:	4b05      	ldr	r3, [pc, #20]	@ (803da34 <_svfiprintf_r+0x1f0>)
 803da1e:	a904      	add	r1, sp, #16
 803da20:	4638      	mov	r0, r7
 803da22:	f7fe f8e9 	bl	803bbf8 <_printf_i>
 803da26:	e7ed      	b.n	803da04 <_svfiprintf_r+0x1c0>
 803da28:	08040ca0 	.word	0x08040ca0
 803da2c:	08040caa 	.word	0x08040caa
 803da30:	0803b6c9 	.word	0x0803b6c9
 803da34:	0803d78d 	.word	0x0803d78d
 803da38:	08040ca6 	.word	0x08040ca6

0803da3c <__sflush_r>:
 803da3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 803da40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803da44:	0716      	lsls	r6, r2, #28
 803da46:	4605      	mov	r5, r0
 803da48:	460c      	mov	r4, r1
 803da4a:	d454      	bmi.n	803daf6 <__sflush_r+0xba>
 803da4c:	684b      	ldr	r3, [r1, #4]
 803da4e:	2b00      	cmp	r3, #0
 803da50:	dc02      	bgt.n	803da58 <__sflush_r+0x1c>
 803da52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 803da54:	2b00      	cmp	r3, #0
 803da56:	dd48      	ble.n	803daea <__sflush_r+0xae>
 803da58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803da5a:	2e00      	cmp	r6, #0
 803da5c:	d045      	beq.n	803daea <__sflush_r+0xae>
 803da5e:	2300      	movs	r3, #0
 803da60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 803da64:	682f      	ldr	r7, [r5, #0]
 803da66:	6a21      	ldr	r1, [r4, #32]
 803da68:	602b      	str	r3, [r5, #0]
 803da6a:	d030      	beq.n	803dace <__sflush_r+0x92>
 803da6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 803da6e:	89a3      	ldrh	r3, [r4, #12]
 803da70:	0759      	lsls	r1, r3, #29
 803da72:	d505      	bpl.n	803da80 <__sflush_r+0x44>
 803da74:	6863      	ldr	r3, [r4, #4]
 803da76:	1ad2      	subs	r2, r2, r3
 803da78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 803da7a:	b10b      	cbz	r3, 803da80 <__sflush_r+0x44>
 803da7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 803da7e:	1ad2      	subs	r2, r2, r3
 803da80:	2300      	movs	r3, #0
 803da82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803da84:	6a21      	ldr	r1, [r4, #32]
 803da86:	4628      	mov	r0, r5
 803da88:	47b0      	blx	r6
 803da8a:	1c43      	adds	r3, r0, #1
 803da8c:	89a3      	ldrh	r3, [r4, #12]
 803da8e:	d106      	bne.n	803da9e <__sflush_r+0x62>
 803da90:	6829      	ldr	r1, [r5, #0]
 803da92:	291d      	cmp	r1, #29
 803da94:	d82b      	bhi.n	803daee <__sflush_r+0xb2>
 803da96:	4a2a      	ldr	r2, [pc, #168]	@ (803db40 <__sflush_r+0x104>)
 803da98:	410a      	asrs	r2, r1
 803da9a:	07d6      	lsls	r6, r2, #31
 803da9c:	d427      	bmi.n	803daee <__sflush_r+0xb2>
 803da9e:	2200      	movs	r2, #0
 803daa0:	6062      	str	r2, [r4, #4]
 803daa2:	04d9      	lsls	r1, r3, #19
 803daa4:	6922      	ldr	r2, [r4, #16]
 803daa6:	6022      	str	r2, [r4, #0]
 803daa8:	d504      	bpl.n	803dab4 <__sflush_r+0x78>
 803daaa:	1c42      	adds	r2, r0, #1
 803daac:	d101      	bne.n	803dab2 <__sflush_r+0x76>
 803daae:	682b      	ldr	r3, [r5, #0]
 803dab0:	b903      	cbnz	r3, 803dab4 <__sflush_r+0x78>
 803dab2:	6560      	str	r0, [r4, #84]	@ 0x54
 803dab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803dab6:	602f      	str	r7, [r5, #0]
 803dab8:	b1b9      	cbz	r1, 803daea <__sflush_r+0xae>
 803daba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 803dabe:	4299      	cmp	r1, r3
 803dac0:	d002      	beq.n	803dac8 <__sflush_r+0x8c>
 803dac2:	4628      	mov	r0, r5
 803dac4:	f7ff f9e0 	bl	803ce88 <_free_r>
 803dac8:	2300      	movs	r3, #0
 803daca:	6363      	str	r3, [r4, #52]	@ 0x34
 803dacc:	e00d      	b.n	803daea <__sflush_r+0xae>
 803dace:	2301      	movs	r3, #1
 803dad0:	4628      	mov	r0, r5
 803dad2:	47b0      	blx	r6
 803dad4:	4602      	mov	r2, r0
 803dad6:	1c50      	adds	r0, r2, #1
 803dad8:	d1c9      	bne.n	803da6e <__sflush_r+0x32>
 803dada:	682b      	ldr	r3, [r5, #0]
 803dadc:	2b00      	cmp	r3, #0
 803dade:	d0c6      	beq.n	803da6e <__sflush_r+0x32>
 803dae0:	2b1d      	cmp	r3, #29
 803dae2:	d001      	beq.n	803dae8 <__sflush_r+0xac>
 803dae4:	2b16      	cmp	r3, #22
 803dae6:	d11e      	bne.n	803db26 <__sflush_r+0xea>
 803dae8:	602f      	str	r7, [r5, #0]
 803daea:	2000      	movs	r0, #0
 803daec:	e022      	b.n	803db34 <__sflush_r+0xf8>
 803daee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803daf2:	b21b      	sxth	r3, r3
 803daf4:	e01b      	b.n	803db2e <__sflush_r+0xf2>
 803daf6:	690f      	ldr	r7, [r1, #16]
 803daf8:	2f00      	cmp	r7, #0
 803dafa:	d0f6      	beq.n	803daea <__sflush_r+0xae>
 803dafc:	0793      	lsls	r3, r2, #30
 803dafe:	680e      	ldr	r6, [r1, #0]
 803db00:	bf08      	it	eq
 803db02:	694b      	ldreq	r3, [r1, #20]
 803db04:	600f      	str	r7, [r1, #0]
 803db06:	bf18      	it	ne
 803db08:	2300      	movne	r3, #0
 803db0a:	eba6 0807 	sub.w	r8, r6, r7
 803db0e:	608b      	str	r3, [r1, #8]
 803db10:	f1b8 0f00 	cmp.w	r8, #0
 803db14:	dde9      	ble.n	803daea <__sflush_r+0xae>
 803db16:	6a21      	ldr	r1, [r4, #32]
 803db18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 803db1a:	4643      	mov	r3, r8
 803db1c:	463a      	mov	r2, r7
 803db1e:	4628      	mov	r0, r5
 803db20:	47b0      	blx	r6
 803db22:	2800      	cmp	r0, #0
 803db24:	dc08      	bgt.n	803db38 <__sflush_r+0xfc>
 803db26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803db2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803db2e:	81a3      	strh	r3, [r4, #12]
 803db30:	f04f 30ff 	mov.w	r0, #4294967295
 803db34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803db38:	4407      	add	r7, r0
 803db3a:	eba8 0800 	sub.w	r8, r8, r0
 803db3e:	e7e7      	b.n	803db10 <__sflush_r+0xd4>
 803db40:	dfbffffe 	.word	0xdfbffffe

0803db44 <_fflush_r>:
 803db44:	b538      	push	{r3, r4, r5, lr}
 803db46:	690b      	ldr	r3, [r1, #16]
 803db48:	4605      	mov	r5, r0
 803db4a:	460c      	mov	r4, r1
 803db4c:	b913      	cbnz	r3, 803db54 <_fflush_r+0x10>
 803db4e:	2500      	movs	r5, #0
 803db50:	4628      	mov	r0, r5
 803db52:	bd38      	pop	{r3, r4, r5, pc}
 803db54:	b118      	cbz	r0, 803db5e <_fflush_r+0x1a>
 803db56:	6a03      	ldr	r3, [r0, #32]
 803db58:	b90b      	cbnz	r3, 803db5e <_fflush_r+0x1a>
 803db5a:	f7fe f9f9 	bl	803bf50 <__sinit>
 803db5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803db62:	2b00      	cmp	r3, #0
 803db64:	d0f3      	beq.n	803db4e <_fflush_r+0xa>
 803db66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 803db68:	07d0      	lsls	r0, r2, #31
 803db6a:	d404      	bmi.n	803db76 <_fflush_r+0x32>
 803db6c:	0599      	lsls	r1, r3, #22
 803db6e:	d402      	bmi.n	803db76 <_fflush_r+0x32>
 803db70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803db72:	f7fe fb24 	bl	803c1be <__retarget_lock_acquire_recursive>
 803db76:	4628      	mov	r0, r5
 803db78:	4621      	mov	r1, r4
 803db7a:	f7ff ff5f 	bl	803da3c <__sflush_r>
 803db7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803db80:	07da      	lsls	r2, r3, #31
 803db82:	4605      	mov	r5, r0
 803db84:	d4e4      	bmi.n	803db50 <_fflush_r+0xc>
 803db86:	89a3      	ldrh	r3, [r4, #12]
 803db88:	059b      	lsls	r3, r3, #22
 803db8a:	d4e1      	bmi.n	803db50 <_fflush_r+0xc>
 803db8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803db8e:	f7fe fb17 	bl	803c1c0 <__retarget_lock_release_recursive>
 803db92:	e7dd      	b.n	803db50 <_fflush_r+0xc>

0803db94 <memmove>:
 803db94:	4288      	cmp	r0, r1
 803db96:	b510      	push	{r4, lr}
 803db98:	eb01 0402 	add.w	r4, r1, r2
 803db9c:	d902      	bls.n	803dba4 <memmove+0x10>
 803db9e:	4284      	cmp	r4, r0
 803dba0:	4623      	mov	r3, r4
 803dba2:	d807      	bhi.n	803dbb4 <memmove+0x20>
 803dba4:	1e43      	subs	r3, r0, #1
 803dba6:	42a1      	cmp	r1, r4
 803dba8:	d008      	beq.n	803dbbc <memmove+0x28>
 803dbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 803dbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 803dbb2:	e7f8      	b.n	803dba6 <memmove+0x12>
 803dbb4:	4402      	add	r2, r0
 803dbb6:	4601      	mov	r1, r0
 803dbb8:	428a      	cmp	r2, r1
 803dbba:	d100      	bne.n	803dbbe <memmove+0x2a>
 803dbbc:	bd10      	pop	{r4, pc}
 803dbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803dbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803dbc6:	e7f7      	b.n	803dbb8 <memmove+0x24>

0803dbc8 <_sbrk_r>:
 803dbc8:	b538      	push	{r3, r4, r5, lr}
 803dbca:	4d06      	ldr	r5, [pc, #24]	@ (803dbe4 <_sbrk_r+0x1c>)
 803dbcc:	2300      	movs	r3, #0
 803dbce:	4604      	mov	r4, r0
 803dbd0:	4608      	mov	r0, r1
 803dbd2:	602b      	str	r3, [r5, #0]
 803dbd4:	f7e5 fa04 	bl	8022fe0 <_sbrk>
 803dbd8:	1c43      	adds	r3, r0, #1
 803dbda:	d102      	bne.n	803dbe2 <_sbrk_r+0x1a>
 803dbdc:	682b      	ldr	r3, [r5, #0]
 803dbde:	b103      	cbz	r3, 803dbe2 <_sbrk_r+0x1a>
 803dbe0:	6023      	str	r3, [r4, #0]
 803dbe2:	bd38      	pop	{r3, r4, r5, pc}
 803dbe4:	200150dc 	.word	0x200150dc

0803dbe8 <__assert_func>:
 803dbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803dbea:	4614      	mov	r4, r2
 803dbec:	461a      	mov	r2, r3
 803dbee:	4b09      	ldr	r3, [pc, #36]	@ (803dc14 <__assert_func+0x2c>)
 803dbf0:	681b      	ldr	r3, [r3, #0]
 803dbf2:	4605      	mov	r5, r0
 803dbf4:	68d8      	ldr	r0, [r3, #12]
 803dbf6:	b954      	cbnz	r4, 803dc0e <__assert_func+0x26>
 803dbf8:	4b07      	ldr	r3, [pc, #28]	@ (803dc18 <__assert_func+0x30>)
 803dbfa:	461c      	mov	r4, r3
 803dbfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803dc00:	9100      	str	r1, [sp, #0]
 803dc02:	462b      	mov	r3, r5
 803dc04:	4905      	ldr	r1, [pc, #20]	@ (803dc1c <__assert_func+0x34>)
 803dc06:	f000 f86f 	bl	803dce8 <fiprintf>
 803dc0a:	f000 f87f 	bl	803dd0c <abort>
 803dc0e:	4b04      	ldr	r3, [pc, #16]	@ (803dc20 <__assert_func+0x38>)
 803dc10:	e7f4      	b.n	803dbfc <__assert_func+0x14>
 803dc12:	bf00      	nop
 803dc14:	20003164 	.word	0x20003164
 803dc18:	08040cf6 	.word	0x08040cf6
 803dc1c:	08040cc8 	.word	0x08040cc8
 803dc20:	08040cbb 	.word	0x08040cbb

0803dc24 <_calloc_r>:
 803dc24:	b570      	push	{r4, r5, r6, lr}
 803dc26:	fba1 5402 	umull	r5, r4, r1, r2
 803dc2a:	b93c      	cbnz	r4, 803dc3c <_calloc_r+0x18>
 803dc2c:	4629      	mov	r1, r5
 803dc2e:	f7ff f99f 	bl	803cf70 <_malloc_r>
 803dc32:	4606      	mov	r6, r0
 803dc34:	b928      	cbnz	r0, 803dc42 <_calloc_r+0x1e>
 803dc36:	2600      	movs	r6, #0
 803dc38:	4630      	mov	r0, r6
 803dc3a:	bd70      	pop	{r4, r5, r6, pc}
 803dc3c:	220c      	movs	r2, #12
 803dc3e:	6002      	str	r2, [r0, #0]
 803dc40:	e7f9      	b.n	803dc36 <_calloc_r+0x12>
 803dc42:	462a      	mov	r2, r5
 803dc44:	4621      	mov	r1, r4
 803dc46:	f7fe fa3d 	bl	803c0c4 <memset>
 803dc4a:	e7f5      	b.n	803dc38 <_calloc_r+0x14>

0803dc4c <__ascii_mbtowc>:
 803dc4c:	b082      	sub	sp, #8
 803dc4e:	b901      	cbnz	r1, 803dc52 <__ascii_mbtowc+0x6>
 803dc50:	a901      	add	r1, sp, #4
 803dc52:	b142      	cbz	r2, 803dc66 <__ascii_mbtowc+0x1a>
 803dc54:	b14b      	cbz	r3, 803dc6a <__ascii_mbtowc+0x1e>
 803dc56:	7813      	ldrb	r3, [r2, #0]
 803dc58:	600b      	str	r3, [r1, #0]
 803dc5a:	7812      	ldrb	r2, [r2, #0]
 803dc5c:	1e10      	subs	r0, r2, #0
 803dc5e:	bf18      	it	ne
 803dc60:	2001      	movne	r0, #1
 803dc62:	b002      	add	sp, #8
 803dc64:	4770      	bx	lr
 803dc66:	4610      	mov	r0, r2
 803dc68:	e7fb      	b.n	803dc62 <__ascii_mbtowc+0x16>
 803dc6a:	f06f 0001 	mvn.w	r0, #1
 803dc6e:	e7f8      	b.n	803dc62 <__ascii_mbtowc+0x16>

0803dc70 <_realloc_r>:
 803dc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803dc74:	4680      	mov	r8, r0
 803dc76:	4615      	mov	r5, r2
 803dc78:	460c      	mov	r4, r1
 803dc7a:	b921      	cbnz	r1, 803dc86 <_realloc_r+0x16>
 803dc7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803dc80:	4611      	mov	r1, r2
 803dc82:	f7ff b975 	b.w	803cf70 <_malloc_r>
 803dc86:	b92a      	cbnz	r2, 803dc94 <_realloc_r+0x24>
 803dc88:	f7ff f8fe 	bl	803ce88 <_free_r>
 803dc8c:	2400      	movs	r4, #0
 803dc8e:	4620      	mov	r0, r4
 803dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803dc94:	f000 f841 	bl	803dd1a <_malloc_usable_size_r>
 803dc98:	4285      	cmp	r5, r0
 803dc9a:	4606      	mov	r6, r0
 803dc9c:	d802      	bhi.n	803dca4 <_realloc_r+0x34>
 803dc9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 803dca2:	d8f4      	bhi.n	803dc8e <_realloc_r+0x1e>
 803dca4:	4629      	mov	r1, r5
 803dca6:	4640      	mov	r0, r8
 803dca8:	f7ff f962 	bl	803cf70 <_malloc_r>
 803dcac:	4607      	mov	r7, r0
 803dcae:	2800      	cmp	r0, #0
 803dcb0:	d0ec      	beq.n	803dc8c <_realloc_r+0x1c>
 803dcb2:	42b5      	cmp	r5, r6
 803dcb4:	462a      	mov	r2, r5
 803dcb6:	4621      	mov	r1, r4
 803dcb8:	bf28      	it	cs
 803dcba:	4632      	movcs	r2, r6
 803dcbc:	f7fe fa89 	bl	803c1d2 <memcpy>
 803dcc0:	4621      	mov	r1, r4
 803dcc2:	4640      	mov	r0, r8
 803dcc4:	f7ff f8e0 	bl	803ce88 <_free_r>
 803dcc8:	463c      	mov	r4, r7
 803dcca:	e7e0      	b.n	803dc8e <_realloc_r+0x1e>

0803dccc <__ascii_wctomb>:
 803dccc:	4603      	mov	r3, r0
 803dcce:	4608      	mov	r0, r1
 803dcd0:	b141      	cbz	r1, 803dce4 <__ascii_wctomb+0x18>
 803dcd2:	2aff      	cmp	r2, #255	@ 0xff
 803dcd4:	d904      	bls.n	803dce0 <__ascii_wctomb+0x14>
 803dcd6:	228a      	movs	r2, #138	@ 0x8a
 803dcd8:	601a      	str	r2, [r3, #0]
 803dcda:	f04f 30ff 	mov.w	r0, #4294967295
 803dcde:	4770      	bx	lr
 803dce0:	700a      	strb	r2, [r1, #0]
 803dce2:	2001      	movs	r0, #1
 803dce4:	4770      	bx	lr
	...

0803dce8 <fiprintf>:
 803dce8:	b40e      	push	{r1, r2, r3}
 803dcea:	b503      	push	{r0, r1, lr}
 803dcec:	4601      	mov	r1, r0
 803dcee:	ab03      	add	r3, sp, #12
 803dcf0:	4805      	ldr	r0, [pc, #20]	@ (803dd08 <fiprintf+0x20>)
 803dcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 803dcf6:	6800      	ldr	r0, [r0, #0]
 803dcf8:	9301      	str	r3, [sp, #4]
 803dcfa:	f000 f83f 	bl	803dd7c <_vfiprintf_r>
 803dcfe:	b002      	add	sp, #8
 803dd00:	f85d eb04 	ldr.w	lr, [sp], #4
 803dd04:	b003      	add	sp, #12
 803dd06:	4770      	bx	lr
 803dd08:	20003164 	.word	0x20003164

0803dd0c <abort>:
 803dd0c:	b508      	push	{r3, lr}
 803dd0e:	2006      	movs	r0, #6
 803dd10:	f000 fa08 	bl	803e124 <raise>
 803dd14:	2001      	movs	r0, #1
 803dd16:	f7e5 f8eb 	bl	8022ef0 <_exit>

0803dd1a <_malloc_usable_size_r>:
 803dd1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803dd1e:	1f18      	subs	r0, r3, #4
 803dd20:	2b00      	cmp	r3, #0
 803dd22:	bfbc      	itt	lt
 803dd24:	580b      	ldrlt	r3, [r1, r0]
 803dd26:	18c0      	addlt	r0, r0, r3
 803dd28:	4770      	bx	lr

0803dd2a <__sfputc_r>:
 803dd2a:	6893      	ldr	r3, [r2, #8]
 803dd2c:	3b01      	subs	r3, #1
 803dd2e:	2b00      	cmp	r3, #0
 803dd30:	b410      	push	{r4}
 803dd32:	6093      	str	r3, [r2, #8]
 803dd34:	da08      	bge.n	803dd48 <__sfputc_r+0x1e>
 803dd36:	6994      	ldr	r4, [r2, #24]
 803dd38:	42a3      	cmp	r3, r4
 803dd3a:	db01      	blt.n	803dd40 <__sfputc_r+0x16>
 803dd3c:	290a      	cmp	r1, #10
 803dd3e:	d103      	bne.n	803dd48 <__sfputc_r+0x1e>
 803dd40:	f85d 4b04 	ldr.w	r4, [sp], #4
 803dd44:	f000 b932 	b.w	803dfac <__swbuf_r>
 803dd48:	6813      	ldr	r3, [r2, #0]
 803dd4a:	1c58      	adds	r0, r3, #1
 803dd4c:	6010      	str	r0, [r2, #0]
 803dd4e:	7019      	strb	r1, [r3, #0]
 803dd50:	4608      	mov	r0, r1
 803dd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 803dd56:	4770      	bx	lr

0803dd58 <__sfputs_r>:
 803dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803dd5a:	4606      	mov	r6, r0
 803dd5c:	460f      	mov	r7, r1
 803dd5e:	4614      	mov	r4, r2
 803dd60:	18d5      	adds	r5, r2, r3
 803dd62:	42ac      	cmp	r4, r5
 803dd64:	d101      	bne.n	803dd6a <__sfputs_r+0x12>
 803dd66:	2000      	movs	r0, #0
 803dd68:	e007      	b.n	803dd7a <__sfputs_r+0x22>
 803dd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 803dd6e:	463a      	mov	r2, r7
 803dd70:	4630      	mov	r0, r6
 803dd72:	f7ff ffda 	bl	803dd2a <__sfputc_r>
 803dd76:	1c43      	adds	r3, r0, #1
 803dd78:	d1f3      	bne.n	803dd62 <__sfputs_r+0xa>
 803dd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0803dd7c <_vfiprintf_r>:
 803dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803dd80:	460d      	mov	r5, r1
 803dd82:	b09d      	sub	sp, #116	@ 0x74
 803dd84:	4614      	mov	r4, r2
 803dd86:	4698      	mov	r8, r3
 803dd88:	4606      	mov	r6, r0
 803dd8a:	b118      	cbz	r0, 803dd94 <_vfiprintf_r+0x18>
 803dd8c:	6a03      	ldr	r3, [r0, #32]
 803dd8e:	b90b      	cbnz	r3, 803dd94 <_vfiprintf_r+0x18>
 803dd90:	f7fe f8de 	bl	803bf50 <__sinit>
 803dd94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803dd96:	07d9      	lsls	r1, r3, #31
 803dd98:	d405      	bmi.n	803dda6 <_vfiprintf_r+0x2a>
 803dd9a:	89ab      	ldrh	r3, [r5, #12]
 803dd9c:	059a      	lsls	r2, r3, #22
 803dd9e:	d402      	bmi.n	803dda6 <_vfiprintf_r+0x2a>
 803dda0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803dda2:	f7fe fa0c 	bl	803c1be <__retarget_lock_acquire_recursive>
 803dda6:	89ab      	ldrh	r3, [r5, #12]
 803dda8:	071b      	lsls	r3, r3, #28
 803ddaa:	d501      	bpl.n	803ddb0 <_vfiprintf_r+0x34>
 803ddac:	692b      	ldr	r3, [r5, #16]
 803ddae:	b99b      	cbnz	r3, 803ddd8 <_vfiprintf_r+0x5c>
 803ddb0:	4629      	mov	r1, r5
 803ddb2:	4630      	mov	r0, r6
 803ddb4:	f000 f938 	bl	803e028 <__swsetup_r>
 803ddb8:	b170      	cbz	r0, 803ddd8 <_vfiprintf_r+0x5c>
 803ddba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803ddbc:	07dc      	lsls	r4, r3, #31
 803ddbe:	d504      	bpl.n	803ddca <_vfiprintf_r+0x4e>
 803ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 803ddc4:	b01d      	add	sp, #116	@ 0x74
 803ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ddca:	89ab      	ldrh	r3, [r5, #12]
 803ddcc:	0598      	lsls	r0, r3, #22
 803ddce:	d4f7      	bmi.n	803ddc0 <_vfiprintf_r+0x44>
 803ddd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803ddd2:	f7fe f9f5 	bl	803c1c0 <__retarget_lock_release_recursive>
 803ddd6:	e7f3      	b.n	803ddc0 <_vfiprintf_r+0x44>
 803ddd8:	2300      	movs	r3, #0
 803ddda:	9309      	str	r3, [sp, #36]	@ 0x24
 803dddc:	2320      	movs	r3, #32
 803ddde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803dde2:	f8cd 800c 	str.w	r8, [sp, #12]
 803dde6:	2330      	movs	r3, #48	@ 0x30
 803dde8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 803df98 <_vfiprintf_r+0x21c>
 803ddec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 803ddf0:	f04f 0901 	mov.w	r9, #1
 803ddf4:	4623      	mov	r3, r4
 803ddf6:	469a      	mov	sl, r3
 803ddf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 803ddfc:	b10a      	cbz	r2, 803de02 <_vfiprintf_r+0x86>
 803ddfe:	2a25      	cmp	r2, #37	@ 0x25
 803de00:	d1f9      	bne.n	803ddf6 <_vfiprintf_r+0x7a>
 803de02:	ebba 0b04 	subs.w	fp, sl, r4
 803de06:	d00b      	beq.n	803de20 <_vfiprintf_r+0xa4>
 803de08:	465b      	mov	r3, fp
 803de0a:	4622      	mov	r2, r4
 803de0c:	4629      	mov	r1, r5
 803de0e:	4630      	mov	r0, r6
 803de10:	f7ff ffa2 	bl	803dd58 <__sfputs_r>
 803de14:	3001      	adds	r0, #1
 803de16:	f000 80a7 	beq.w	803df68 <_vfiprintf_r+0x1ec>
 803de1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803de1c:	445a      	add	r2, fp
 803de1e:	9209      	str	r2, [sp, #36]	@ 0x24
 803de20:	f89a 3000 	ldrb.w	r3, [sl]
 803de24:	2b00      	cmp	r3, #0
 803de26:	f000 809f 	beq.w	803df68 <_vfiprintf_r+0x1ec>
 803de2a:	2300      	movs	r3, #0
 803de2c:	f04f 32ff 	mov.w	r2, #4294967295
 803de30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803de34:	f10a 0a01 	add.w	sl, sl, #1
 803de38:	9304      	str	r3, [sp, #16]
 803de3a:	9307      	str	r3, [sp, #28]
 803de3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 803de40:	931a      	str	r3, [sp, #104]	@ 0x68
 803de42:	4654      	mov	r4, sl
 803de44:	2205      	movs	r2, #5
 803de46:	f814 1b01 	ldrb.w	r1, [r4], #1
 803de4a:	4853      	ldr	r0, [pc, #332]	@ (803df98 <_vfiprintf_r+0x21c>)
 803de4c:	f7e2 f9f0 	bl	8020230 <memchr>
 803de50:	9a04      	ldr	r2, [sp, #16]
 803de52:	b9d8      	cbnz	r0, 803de8c <_vfiprintf_r+0x110>
 803de54:	06d1      	lsls	r1, r2, #27
 803de56:	bf44      	itt	mi
 803de58:	2320      	movmi	r3, #32
 803de5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803de5e:	0713      	lsls	r3, r2, #28
 803de60:	bf44      	itt	mi
 803de62:	232b      	movmi	r3, #43	@ 0x2b
 803de64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803de68:	f89a 3000 	ldrb.w	r3, [sl]
 803de6c:	2b2a      	cmp	r3, #42	@ 0x2a
 803de6e:	d015      	beq.n	803de9c <_vfiprintf_r+0x120>
 803de70:	9a07      	ldr	r2, [sp, #28]
 803de72:	4654      	mov	r4, sl
 803de74:	2000      	movs	r0, #0
 803de76:	f04f 0c0a 	mov.w	ip, #10
 803de7a:	4621      	mov	r1, r4
 803de7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 803de80:	3b30      	subs	r3, #48	@ 0x30
 803de82:	2b09      	cmp	r3, #9
 803de84:	d94b      	bls.n	803df1e <_vfiprintf_r+0x1a2>
 803de86:	b1b0      	cbz	r0, 803deb6 <_vfiprintf_r+0x13a>
 803de88:	9207      	str	r2, [sp, #28]
 803de8a:	e014      	b.n	803deb6 <_vfiprintf_r+0x13a>
 803de8c:	eba0 0308 	sub.w	r3, r0, r8
 803de90:	fa09 f303 	lsl.w	r3, r9, r3
 803de94:	4313      	orrs	r3, r2
 803de96:	9304      	str	r3, [sp, #16]
 803de98:	46a2      	mov	sl, r4
 803de9a:	e7d2      	b.n	803de42 <_vfiprintf_r+0xc6>
 803de9c:	9b03      	ldr	r3, [sp, #12]
 803de9e:	1d19      	adds	r1, r3, #4
 803dea0:	681b      	ldr	r3, [r3, #0]
 803dea2:	9103      	str	r1, [sp, #12]
 803dea4:	2b00      	cmp	r3, #0
 803dea6:	bfbb      	ittet	lt
 803dea8:	425b      	neglt	r3, r3
 803deaa:	f042 0202 	orrlt.w	r2, r2, #2
 803deae:	9307      	strge	r3, [sp, #28]
 803deb0:	9307      	strlt	r3, [sp, #28]
 803deb2:	bfb8      	it	lt
 803deb4:	9204      	strlt	r2, [sp, #16]
 803deb6:	7823      	ldrb	r3, [r4, #0]
 803deb8:	2b2e      	cmp	r3, #46	@ 0x2e
 803deba:	d10a      	bne.n	803ded2 <_vfiprintf_r+0x156>
 803debc:	7863      	ldrb	r3, [r4, #1]
 803debe:	2b2a      	cmp	r3, #42	@ 0x2a
 803dec0:	d132      	bne.n	803df28 <_vfiprintf_r+0x1ac>
 803dec2:	9b03      	ldr	r3, [sp, #12]
 803dec4:	1d1a      	adds	r2, r3, #4
 803dec6:	681b      	ldr	r3, [r3, #0]
 803dec8:	9203      	str	r2, [sp, #12]
 803deca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 803dece:	3402      	adds	r4, #2
 803ded0:	9305      	str	r3, [sp, #20]
 803ded2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 803dfa8 <_vfiprintf_r+0x22c>
 803ded6:	7821      	ldrb	r1, [r4, #0]
 803ded8:	2203      	movs	r2, #3
 803deda:	4650      	mov	r0, sl
 803dedc:	f7e2 f9a8 	bl	8020230 <memchr>
 803dee0:	b138      	cbz	r0, 803def2 <_vfiprintf_r+0x176>
 803dee2:	9b04      	ldr	r3, [sp, #16]
 803dee4:	eba0 000a 	sub.w	r0, r0, sl
 803dee8:	2240      	movs	r2, #64	@ 0x40
 803deea:	4082      	lsls	r2, r0
 803deec:	4313      	orrs	r3, r2
 803deee:	3401      	adds	r4, #1
 803def0:	9304      	str	r3, [sp, #16]
 803def2:	f814 1b01 	ldrb.w	r1, [r4], #1
 803def6:	4829      	ldr	r0, [pc, #164]	@ (803df9c <_vfiprintf_r+0x220>)
 803def8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 803defc:	2206      	movs	r2, #6
 803defe:	f7e2 f997 	bl	8020230 <memchr>
 803df02:	2800      	cmp	r0, #0
 803df04:	d03f      	beq.n	803df86 <_vfiprintf_r+0x20a>
 803df06:	4b26      	ldr	r3, [pc, #152]	@ (803dfa0 <_vfiprintf_r+0x224>)
 803df08:	bb1b      	cbnz	r3, 803df52 <_vfiprintf_r+0x1d6>
 803df0a:	9b03      	ldr	r3, [sp, #12]
 803df0c:	3307      	adds	r3, #7
 803df0e:	f023 0307 	bic.w	r3, r3, #7
 803df12:	3308      	adds	r3, #8
 803df14:	9303      	str	r3, [sp, #12]
 803df16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803df18:	443b      	add	r3, r7
 803df1a:	9309      	str	r3, [sp, #36]	@ 0x24
 803df1c:	e76a      	b.n	803ddf4 <_vfiprintf_r+0x78>
 803df1e:	fb0c 3202 	mla	r2, ip, r2, r3
 803df22:	460c      	mov	r4, r1
 803df24:	2001      	movs	r0, #1
 803df26:	e7a8      	b.n	803de7a <_vfiprintf_r+0xfe>
 803df28:	2300      	movs	r3, #0
 803df2a:	3401      	adds	r4, #1
 803df2c:	9305      	str	r3, [sp, #20]
 803df2e:	4619      	mov	r1, r3
 803df30:	f04f 0c0a 	mov.w	ip, #10
 803df34:	4620      	mov	r0, r4
 803df36:	f810 2b01 	ldrb.w	r2, [r0], #1
 803df3a:	3a30      	subs	r2, #48	@ 0x30
 803df3c:	2a09      	cmp	r2, #9
 803df3e:	d903      	bls.n	803df48 <_vfiprintf_r+0x1cc>
 803df40:	2b00      	cmp	r3, #0
 803df42:	d0c6      	beq.n	803ded2 <_vfiprintf_r+0x156>
 803df44:	9105      	str	r1, [sp, #20]
 803df46:	e7c4      	b.n	803ded2 <_vfiprintf_r+0x156>
 803df48:	fb0c 2101 	mla	r1, ip, r1, r2
 803df4c:	4604      	mov	r4, r0
 803df4e:	2301      	movs	r3, #1
 803df50:	e7f0      	b.n	803df34 <_vfiprintf_r+0x1b8>
 803df52:	ab03      	add	r3, sp, #12
 803df54:	9300      	str	r3, [sp, #0]
 803df56:	462a      	mov	r2, r5
 803df58:	4b12      	ldr	r3, [pc, #72]	@ (803dfa4 <_vfiprintf_r+0x228>)
 803df5a:	a904      	add	r1, sp, #16
 803df5c:	4630      	mov	r0, r6
 803df5e:	f7fd fbb3 	bl	803b6c8 <_printf_float>
 803df62:	4607      	mov	r7, r0
 803df64:	1c78      	adds	r0, r7, #1
 803df66:	d1d6      	bne.n	803df16 <_vfiprintf_r+0x19a>
 803df68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803df6a:	07d9      	lsls	r1, r3, #31
 803df6c:	d405      	bmi.n	803df7a <_vfiprintf_r+0x1fe>
 803df6e:	89ab      	ldrh	r3, [r5, #12]
 803df70:	059a      	lsls	r2, r3, #22
 803df72:	d402      	bmi.n	803df7a <_vfiprintf_r+0x1fe>
 803df74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803df76:	f7fe f923 	bl	803c1c0 <__retarget_lock_release_recursive>
 803df7a:	89ab      	ldrh	r3, [r5, #12]
 803df7c:	065b      	lsls	r3, r3, #25
 803df7e:	f53f af1f 	bmi.w	803ddc0 <_vfiprintf_r+0x44>
 803df82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803df84:	e71e      	b.n	803ddc4 <_vfiprintf_r+0x48>
 803df86:	ab03      	add	r3, sp, #12
 803df88:	9300      	str	r3, [sp, #0]
 803df8a:	462a      	mov	r2, r5
 803df8c:	4b05      	ldr	r3, [pc, #20]	@ (803dfa4 <_vfiprintf_r+0x228>)
 803df8e:	a904      	add	r1, sp, #16
 803df90:	4630      	mov	r0, r6
 803df92:	f7fd fe31 	bl	803bbf8 <_printf_i>
 803df96:	e7e4      	b.n	803df62 <_vfiprintf_r+0x1e6>
 803df98:	08040ca0 	.word	0x08040ca0
 803df9c:	08040caa 	.word	0x08040caa
 803dfa0:	0803b6c9 	.word	0x0803b6c9
 803dfa4:	0803dd59 	.word	0x0803dd59
 803dfa8:	08040ca6 	.word	0x08040ca6

0803dfac <__swbuf_r>:
 803dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803dfae:	460e      	mov	r6, r1
 803dfb0:	4614      	mov	r4, r2
 803dfb2:	4605      	mov	r5, r0
 803dfb4:	b118      	cbz	r0, 803dfbe <__swbuf_r+0x12>
 803dfb6:	6a03      	ldr	r3, [r0, #32]
 803dfb8:	b90b      	cbnz	r3, 803dfbe <__swbuf_r+0x12>
 803dfba:	f7fd ffc9 	bl	803bf50 <__sinit>
 803dfbe:	69a3      	ldr	r3, [r4, #24]
 803dfc0:	60a3      	str	r3, [r4, #8]
 803dfc2:	89a3      	ldrh	r3, [r4, #12]
 803dfc4:	071a      	lsls	r2, r3, #28
 803dfc6:	d501      	bpl.n	803dfcc <__swbuf_r+0x20>
 803dfc8:	6923      	ldr	r3, [r4, #16]
 803dfca:	b943      	cbnz	r3, 803dfde <__swbuf_r+0x32>
 803dfcc:	4621      	mov	r1, r4
 803dfce:	4628      	mov	r0, r5
 803dfd0:	f000 f82a 	bl	803e028 <__swsetup_r>
 803dfd4:	b118      	cbz	r0, 803dfde <__swbuf_r+0x32>
 803dfd6:	f04f 37ff 	mov.w	r7, #4294967295
 803dfda:	4638      	mov	r0, r7
 803dfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803dfde:	6823      	ldr	r3, [r4, #0]
 803dfe0:	6922      	ldr	r2, [r4, #16]
 803dfe2:	1a98      	subs	r0, r3, r2
 803dfe4:	6963      	ldr	r3, [r4, #20]
 803dfe6:	b2f6      	uxtb	r6, r6
 803dfe8:	4283      	cmp	r3, r0
 803dfea:	4637      	mov	r7, r6
 803dfec:	dc05      	bgt.n	803dffa <__swbuf_r+0x4e>
 803dfee:	4621      	mov	r1, r4
 803dff0:	4628      	mov	r0, r5
 803dff2:	f7ff fda7 	bl	803db44 <_fflush_r>
 803dff6:	2800      	cmp	r0, #0
 803dff8:	d1ed      	bne.n	803dfd6 <__swbuf_r+0x2a>
 803dffa:	68a3      	ldr	r3, [r4, #8]
 803dffc:	3b01      	subs	r3, #1
 803dffe:	60a3      	str	r3, [r4, #8]
 803e000:	6823      	ldr	r3, [r4, #0]
 803e002:	1c5a      	adds	r2, r3, #1
 803e004:	6022      	str	r2, [r4, #0]
 803e006:	701e      	strb	r6, [r3, #0]
 803e008:	6962      	ldr	r2, [r4, #20]
 803e00a:	1c43      	adds	r3, r0, #1
 803e00c:	429a      	cmp	r2, r3
 803e00e:	d004      	beq.n	803e01a <__swbuf_r+0x6e>
 803e010:	89a3      	ldrh	r3, [r4, #12]
 803e012:	07db      	lsls	r3, r3, #31
 803e014:	d5e1      	bpl.n	803dfda <__swbuf_r+0x2e>
 803e016:	2e0a      	cmp	r6, #10
 803e018:	d1df      	bne.n	803dfda <__swbuf_r+0x2e>
 803e01a:	4621      	mov	r1, r4
 803e01c:	4628      	mov	r0, r5
 803e01e:	f7ff fd91 	bl	803db44 <_fflush_r>
 803e022:	2800      	cmp	r0, #0
 803e024:	d0d9      	beq.n	803dfda <__swbuf_r+0x2e>
 803e026:	e7d6      	b.n	803dfd6 <__swbuf_r+0x2a>

0803e028 <__swsetup_r>:
 803e028:	b538      	push	{r3, r4, r5, lr}
 803e02a:	4b29      	ldr	r3, [pc, #164]	@ (803e0d0 <__swsetup_r+0xa8>)
 803e02c:	4605      	mov	r5, r0
 803e02e:	6818      	ldr	r0, [r3, #0]
 803e030:	460c      	mov	r4, r1
 803e032:	b118      	cbz	r0, 803e03c <__swsetup_r+0x14>
 803e034:	6a03      	ldr	r3, [r0, #32]
 803e036:	b90b      	cbnz	r3, 803e03c <__swsetup_r+0x14>
 803e038:	f7fd ff8a 	bl	803bf50 <__sinit>
 803e03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e040:	0719      	lsls	r1, r3, #28
 803e042:	d422      	bmi.n	803e08a <__swsetup_r+0x62>
 803e044:	06da      	lsls	r2, r3, #27
 803e046:	d407      	bmi.n	803e058 <__swsetup_r+0x30>
 803e048:	2209      	movs	r2, #9
 803e04a:	602a      	str	r2, [r5, #0]
 803e04c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803e050:	81a3      	strh	r3, [r4, #12]
 803e052:	f04f 30ff 	mov.w	r0, #4294967295
 803e056:	e033      	b.n	803e0c0 <__swsetup_r+0x98>
 803e058:	0758      	lsls	r0, r3, #29
 803e05a:	d512      	bpl.n	803e082 <__swsetup_r+0x5a>
 803e05c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803e05e:	b141      	cbz	r1, 803e072 <__swsetup_r+0x4a>
 803e060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 803e064:	4299      	cmp	r1, r3
 803e066:	d002      	beq.n	803e06e <__swsetup_r+0x46>
 803e068:	4628      	mov	r0, r5
 803e06a:	f7fe ff0d 	bl	803ce88 <_free_r>
 803e06e:	2300      	movs	r3, #0
 803e070:	6363      	str	r3, [r4, #52]	@ 0x34
 803e072:	89a3      	ldrh	r3, [r4, #12]
 803e074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 803e078:	81a3      	strh	r3, [r4, #12]
 803e07a:	2300      	movs	r3, #0
 803e07c:	6063      	str	r3, [r4, #4]
 803e07e:	6923      	ldr	r3, [r4, #16]
 803e080:	6023      	str	r3, [r4, #0]
 803e082:	89a3      	ldrh	r3, [r4, #12]
 803e084:	f043 0308 	orr.w	r3, r3, #8
 803e088:	81a3      	strh	r3, [r4, #12]
 803e08a:	6923      	ldr	r3, [r4, #16]
 803e08c:	b94b      	cbnz	r3, 803e0a2 <__swsetup_r+0x7a>
 803e08e:	89a3      	ldrh	r3, [r4, #12]
 803e090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 803e094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 803e098:	d003      	beq.n	803e0a2 <__swsetup_r+0x7a>
 803e09a:	4621      	mov	r1, r4
 803e09c:	4628      	mov	r0, r5
 803e09e:	f000 f883 	bl	803e1a8 <__smakebuf_r>
 803e0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e0a6:	f013 0201 	ands.w	r2, r3, #1
 803e0aa:	d00a      	beq.n	803e0c2 <__swsetup_r+0x9a>
 803e0ac:	2200      	movs	r2, #0
 803e0ae:	60a2      	str	r2, [r4, #8]
 803e0b0:	6962      	ldr	r2, [r4, #20]
 803e0b2:	4252      	negs	r2, r2
 803e0b4:	61a2      	str	r2, [r4, #24]
 803e0b6:	6922      	ldr	r2, [r4, #16]
 803e0b8:	b942      	cbnz	r2, 803e0cc <__swsetup_r+0xa4>
 803e0ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 803e0be:	d1c5      	bne.n	803e04c <__swsetup_r+0x24>
 803e0c0:	bd38      	pop	{r3, r4, r5, pc}
 803e0c2:	0799      	lsls	r1, r3, #30
 803e0c4:	bf58      	it	pl
 803e0c6:	6962      	ldrpl	r2, [r4, #20]
 803e0c8:	60a2      	str	r2, [r4, #8]
 803e0ca:	e7f4      	b.n	803e0b6 <__swsetup_r+0x8e>
 803e0cc:	2000      	movs	r0, #0
 803e0ce:	e7f7      	b.n	803e0c0 <__swsetup_r+0x98>
 803e0d0:	20003164 	.word	0x20003164

0803e0d4 <_raise_r>:
 803e0d4:	291f      	cmp	r1, #31
 803e0d6:	b538      	push	{r3, r4, r5, lr}
 803e0d8:	4605      	mov	r5, r0
 803e0da:	460c      	mov	r4, r1
 803e0dc:	d904      	bls.n	803e0e8 <_raise_r+0x14>
 803e0de:	2316      	movs	r3, #22
 803e0e0:	6003      	str	r3, [r0, #0]
 803e0e2:	f04f 30ff 	mov.w	r0, #4294967295
 803e0e6:	bd38      	pop	{r3, r4, r5, pc}
 803e0e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 803e0ea:	b112      	cbz	r2, 803e0f2 <_raise_r+0x1e>
 803e0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803e0f0:	b94b      	cbnz	r3, 803e106 <_raise_r+0x32>
 803e0f2:	4628      	mov	r0, r5
 803e0f4:	f000 f830 	bl	803e158 <_getpid_r>
 803e0f8:	4622      	mov	r2, r4
 803e0fa:	4601      	mov	r1, r0
 803e0fc:	4628      	mov	r0, r5
 803e0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803e102:	f000 b817 	b.w	803e134 <_kill_r>
 803e106:	2b01      	cmp	r3, #1
 803e108:	d00a      	beq.n	803e120 <_raise_r+0x4c>
 803e10a:	1c59      	adds	r1, r3, #1
 803e10c:	d103      	bne.n	803e116 <_raise_r+0x42>
 803e10e:	2316      	movs	r3, #22
 803e110:	6003      	str	r3, [r0, #0]
 803e112:	2001      	movs	r0, #1
 803e114:	e7e7      	b.n	803e0e6 <_raise_r+0x12>
 803e116:	2100      	movs	r1, #0
 803e118:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803e11c:	4620      	mov	r0, r4
 803e11e:	4798      	blx	r3
 803e120:	2000      	movs	r0, #0
 803e122:	e7e0      	b.n	803e0e6 <_raise_r+0x12>

0803e124 <raise>:
 803e124:	4b02      	ldr	r3, [pc, #8]	@ (803e130 <raise+0xc>)
 803e126:	4601      	mov	r1, r0
 803e128:	6818      	ldr	r0, [r3, #0]
 803e12a:	f7ff bfd3 	b.w	803e0d4 <_raise_r>
 803e12e:	bf00      	nop
 803e130:	20003164 	.word	0x20003164

0803e134 <_kill_r>:
 803e134:	b538      	push	{r3, r4, r5, lr}
 803e136:	4d07      	ldr	r5, [pc, #28]	@ (803e154 <_kill_r+0x20>)
 803e138:	2300      	movs	r3, #0
 803e13a:	4604      	mov	r4, r0
 803e13c:	4608      	mov	r0, r1
 803e13e:	4611      	mov	r1, r2
 803e140:	602b      	str	r3, [r5, #0]
 803e142:	f7e4 fec5 	bl	8022ed0 <_kill>
 803e146:	1c43      	adds	r3, r0, #1
 803e148:	d102      	bne.n	803e150 <_kill_r+0x1c>
 803e14a:	682b      	ldr	r3, [r5, #0]
 803e14c:	b103      	cbz	r3, 803e150 <_kill_r+0x1c>
 803e14e:	6023      	str	r3, [r4, #0]
 803e150:	bd38      	pop	{r3, r4, r5, pc}
 803e152:	bf00      	nop
 803e154:	200150dc 	.word	0x200150dc

0803e158 <_getpid_r>:
 803e158:	f7e4 beb2 	b.w	8022ec0 <_getpid>

0803e15c <__swhatbuf_r>:
 803e15c:	b570      	push	{r4, r5, r6, lr}
 803e15e:	460c      	mov	r4, r1
 803e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803e164:	2900      	cmp	r1, #0
 803e166:	b096      	sub	sp, #88	@ 0x58
 803e168:	4615      	mov	r5, r2
 803e16a:	461e      	mov	r6, r3
 803e16c:	da0d      	bge.n	803e18a <__swhatbuf_r+0x2e>
 803e16e:	89a3      	ldrh	r3, [r4, #12]
 803e170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 803e174:	f04f 0100 	mov.w	r1, #0
 803e178:	bf14      	ite	ne
 803e17a:	2340      	movne	r3, #64	@ 0x40
 803e17c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 803e180:	2000      	movs	r0, #0
 803e182:	6031      	str	r1, [r6, #0]
 803e184:	602b      	str	r3, [r5, #0]
 803e186:	b016      	add	sp, #88	@ 0x58
 803e188:	bd70      	pop	{r4, r5, r6, pc}
 803e18a:	466a      	mov	r2, sp
 803e18c:	f000 f848 	bl	803e220 <_fstat_r>
 803e190:	2800      	cmp	r0, #0
 803e192:	dbec      	blt.n	803e16e <__swhatbuf_r+0x12>
 803e194:	9901      	ldr	r1, [sp, #4]
 803e196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803e19a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 803e19e:	4259      	negs	r1, r3
 803e1a0:	4159      	adcs	r1, r3
 803e1a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803e1a6:	e7eb      	b.n	803e180 <__swhatbuf_r+0x24>

0803e1a8 <__smakebuf_r>:
 803e1a8:	898b      	ldrh	r3, [r1, #12]
 803e1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803e1ac:	079d      	lsls	r5, r3, #30
 803e1ae:	4606      	mov	r6, r0
 803e1b0:	460c      	mov	r4, r1
 803e1b2:	d507      	bpl.n	803e1c4 <__smakebuf_r+0x1c>
 803e1b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 803e1b8:	6023      	str	r3, [r4, #0]
 803e1ba:	6123      	str	r3, [r4, #16]
 803e1bc:	2301      	movs	r3, #1
 803e1be:	6163      	str	r3, [r4, #20]
 803e1c0:	b003      	add	sp, #12
 803e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803e1c4:	ab01      	add	r3, sp, #4
 803e1c6:	466a      	mov	r2, sp
 803e1c8:	f7ff ffc8 	bl	803e15c <__swhatbuf_r>
 803e1cc:	9f00      	ldr	r7, [sp, #0]
 803e1ce:	4605      	mov	r5, r0
 803e1d0:	4639      	mov	r1, r7
 803e1d2:	4630      	mov	r0, r6
 803e1d4:	f7fe fecc 	bl	803cf70 <_malloc_r>
 803e1d8:	b948      	cbnz	r0, 803e1ee <__smakebuf_r+0x46>
 803e1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e1de:	059a      	lsls	r2, r3, #22
 803e1e0:	d4ee      	bmi.n	803e1c0 <__smakebuf_r+0x18>
 803e1e2:	f023 0303 	bic.w	r3, r3, #3
 803e1e6:	f043 0302 	orr.w	r3, r3, #2
 803e1ea:	81a3      	strh	r3, [r4, #12]
 803e1ec:	e7e2      	b.n	803e1b4 <__smakebuf_r+0xc>
 803e1ee:	89a3      	ldrh	r3, [r4, #12]
 803e1f0:	6020      	str	r0, [r4, #0]
 803e1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803e1f6:	81a3      	strh	r3, [r4, #12]
 803e1f8:	9b01      	ldr	r3, [sp, #4]
 803e1fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 803e1fe:	b15b      	cbz	r3, 803e218 <__smakebuf_r+0x70>
 803e200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803e204:	4630      	mov	r0, r6
 803e206:	f000 f81d 	bl	803e244 <_isatty_r>
 803e20a:	b128      	cbz	r0, 803e218 <__smakebuf_r+0x70>
 803e20c:	89a3      	ldrh	r3, [r4, #12]
 803e20e:	f023 0303 	bic.w	r3, r3, #3
 803e212:	f043 0301 	orr.w	r3, r3, #1
 803e216:	81a3      	strh	r3, [r4, #12]
 803e218:	89a3      	ldrh	r3, [r4, #12]
 803e21a:	431d      	orrs	r5, r3
 803e21c:	81a5      	strh	r5, [r4, #12]
 803e21e:	e7cf      	b.n	803e1c0 <__smakebuf_r+0x18>

0803e220 <_fstat_r>:
 803e220:	b538      	push	{r3, r4, r5, lr}
 803e222:	4d07      	ldr	r5, [pc, #28]	@ (803e240 <_fstat_r+0x20>)
 803e224:	2300      	movs	r3, #0
 803e226:	4604      	mov	r4, r0
 803e228:	4608      	mov	r0, r1
 803e22a:	4611      	mov	r1, r2
 803e22c:	602b      	str	r3, [r5, #0]
 803e22e:	f7e4 feaf 	bl	8022f90 <_fstat>
 803e232:	1c43      	adds	r3, r0, #1
 803e234:	d102      	bne.n	803e23c <_fstat_r+0x1c>
 803e236:	682b      	ldr	r3, [r5, #0]
 803e238:	b103      	cbz	r3, 803e23c <_fstat_r+0x1c>
 803e23a:	6023      	str	r3, [r4, #0]
 803e23c:	bd38      	pop	{r3, r4, r5, pc}
 803e23e:	bf00      	nop
 803e240:	200150dc 	.word	0x200150dc

0803e244 <_isatty_r>:
 803e244:	b538      	push	{r3, r4, r5, lr}
 803e246:	4d06      	ldr	r5, [pc, #24]	@ (803e260 <_isatty_r+0x1c>)
 803e248:	2300      	movs	r3, #0
 803e24a:	4604      	mov	r4, r0
 803e24c:	4608      	mov	r0, r1
 803e24e:	602b      	str	r3, [r5, #0]
 803e250:	f7e4 feae 	bl	8022fb0 <_isatty>
 803e254:	1c43      	adds	r3, r0, #1
 803e256:	d102      	bne.n	803e25e <_isatty_r+0x1a>
 803e258:	682b      	ldr	r3, [r5, #0]
 803e25a:	b103      	cbz	r3, 803e25e <_isatty_r+0x1a>
 803e25c:	6023      	str	r3, [r4, #0]
 803e25e:	bd38      	pop	{r3, r4, r5, pc}
 803e260:	200150dc 	.word	0x200150dc

0803e264 <roundf>:
 803e264:	ee10 0a10 	vmov	r0, s0
 803e268:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 803e26c:	3a7f      	subs	r2, #127	@ 0x7f
 803e26e:	2a16      	cmp	r2, #22
 803e270:	dc15      	bgt.n	803e29e <roundf+0x3a>
 803e272:	2a00      	cmp	r2, #0
 803e274:	da08      	bge.n	803e288 <roundf+0x24>
 803e276:	3201      	adds	r2, #1
 803e278:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 803e27c:	d101      	bne.n	803e282 <roundf+0x1e>
 803e27e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 803e282:	ee00 3a10 	vmov	s0, r3
 803e286:	4770      	bx	lr
 803e288:	4907      	ldr	r1, [pc, #28]	@ (803e2a8 <roundf+0x44>)
 803e28a:	4111      	asrs	r1, r2
 803e28c:	4201      	tst	r1, r0
 803e28e:	d0fa      	beq.n	803e286 <roundf+0x22>
 803e290:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 803e294:	4113      	asrs	r3, r2
 803e296:	4403      	add	r3, r0
 803e298:	ea23 0301 	bic.w	r3, r3, r1
 803e29c:	e7f1      	b.n	803e282 <roundf+0x1e>
 803e29e:	2a80      	cmp	r2, #128	@ 0x80
 803e2a0:	d1f1      	bne.n	803e286 <roundf+0x22>
 803e2a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 803e2a6:	4770      	bx	lr
 803e2a8:	007fffff 	.word	0x007fffff

0803e2ac <_init>:
 803e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e2ae:	bf00      	nop
 803e2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803e2b2:	bc08      	pop	{r3}
 803e2b4:	469e      	mov	lr, r3
 803e2b6:	4770      	bx	lr

0803e2b8 <_fini>:
 803e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e2ba:	bf00      	nop
 803e2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803e2be:	bc08      	pop	{r3}
 803e2c0:	469e      	mov	lr, r3
 803e2c2:	4770      	bx	lr
